
Controladora-de-vuelo-V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018920  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011b0  08018bd0  08018bd0  00019bd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019d80  08019d80  0001ad80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08019d88  08019d88  0001ad88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08019d8c  08019d8c  0001ad8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002b0  24000000  08019d90  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005570  240002b0  0801a040  0001b2b0  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24005820  0801a040  0001b820  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001b2b0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002be79  00000000  00000000  0001b2de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005b82  00000000  00000000  00047157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002168  00000000  00000000  0004cce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000019ed  00000000  00000000  0004ee48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039308  00000000  00000000  00050835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003404f  00000000  00000000  00089b3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00157d37  00000000  00000000  000bdb8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002158c3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009df0  00000000  00000000  00215908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  0021f6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240002b0 	.word	0x240002b0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08018bb8 	.word	0x08018bb8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240002b4 	.word	0x240002b4
 80002ec:	08018bb8 	.word	0x08018bb8

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_ldivmod>:
 8000728:	b97b      	cbnz	r3, 800074a <__aeabi_ldivmod+0x22>
 800072a:	b972      	cbnz	r2, 800074a <__aeabi_ldivmod+0x22>
 800072c:	2900      	cmp	r1, #0
 800072e:	bfbe      	ittt	lt
 8000730:	2000      	movlt	r0, #0
 8000732:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000736:	e006      	blt.n	8000746 <__aeabi_ldivmod+0x1e>
 8000738:	bf08      	it	eq
 800073a:	2800      	cmpeq	r0, #0
 800073c:	bf1c      	itt	ne
 800073e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000742:	f04f 30ff 	movne.w	r0, #4294967295
 8000746:	f000 b9ed 	b.w	8000b24 <__aeabi_idiv0>
 800074a:	f1ad 0c08 	sub.w	ip, sp, #8
 800074e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000752:	2900      	cmp	r1, #0
 8000754:	db09      	blt.n	800076a <__aeabi_ldivmod+0x42>
 8000756:	2b00      	cmp	r3, #0
 8000758:	db1a      	blt.n	8000790 <__aeabi_ldivmod+0x68>
 800075a:	f000 f885 	bl	8000868 <__udivmoddi4>
 800075e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000762:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000766:	b004      	add	sp, #16
 8000768:	4770      	bx	lr
 800076a:	4240      	negs	r0, r0
 800076c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000770:	2b00      	cmp	r3, #0
 8000772:	db1b      	blt.n	80007ac <__aeabi_ldivmod+0x84>
 8000774:	f000 f878 	bl	8000868 <__udivmoddi4>
 8000778:	f8dd e004 	ldr.w	lr, [sp, #4]
 800077c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000780:	b004      	add	sp, #16
 8000782:	4240      	negs	r0, r0
 8000784:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000788:	4252      	negs	r2, r2
 800078a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800078e:	4770      	bx	lr
 8000790:	4252      	negs	r2, r2
 8000792:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000796:	f000 f867 	bl	8000868 <__udivmoddi4>
 800079a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800079e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007a2:	b004      	add	sp, #16
 80007a4:	4240      	negs	r0, r0
 80007a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007aa:	4770      	bx	lr
 80007ac:	4252      	negs	r2, r2
 80007ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007b2:	f000 f859 	bl	8000868 <__udivmoddi4>
 80007b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007be:	b004      	add	sp, #16
 80007c0:	4252      	negs	r2, r2
 80007c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007c6:	4770      	bx	lr

080007c8 <__aeabi_uldivmod>:
 80007c8:	b953      	cbnz	r3, 80007e0 <__aeabi_uldivmod+0x18>
 80007ca:	b94a      	cbnz	r2, 80007e0 <__aeabi_uldivmod+0x18>
 80007cc:	2900      	cmp	r1, #0
 80007ce:	bf08      	it	eq
 80007d0:	2800      	cmpeq	r0, #0
 80007d2:	bf1c      	itt	ne
 80007d4:	f04f 31ff 	movne.w	r1, #4294967295
 80007d8:	f04f 30ff 	movne.w	r0, #4294967295
 80007dc:	f000 b9a2 	b.w	8000b24 <__aeabi_idiv0>
 80007e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007e8:	f000 f83e 	bl	8000868 <__udivmoddi4>
 80007ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f4:	b004      	add	sp, #16
 80007f6:	4770      	bx	lr

080007f8 <__aeabi_d2lz>:
 80007f8:	b508      	push	{r3, lr}
 80007fa:	4602      	mov	r2, r0
 80007fc:	460b      	mov	r3, r1
 80007fe:	ec43 2b17 	vmov	d7, r2, r3
 8000802:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800080a:	d403      	bmi.n	8000814 <__aeabi_d2lz+0x1c>
 800080c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000810:	f000 b80a 	b.w	8000828 <__aeabi_d2ulz>
 8000814:	eeb1 7b47 	vneg.f64	d7, d7
 8000818:	ec51 0b17 	vmov	r0, r1, d7
 800081c:	f000 f804 	bl	8000828 <__aeabi_d2ulz>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	bd08      	pop	{r3, pc}

08000828 <__aeabi_d2ulz>:
 8000828:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000858 <__aeabi_d2ulz+0x30>
 800082c:	ec41 0b17 	vmov	d7, r0, r1
 8000830:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000860 <__aeabi_d2ulz+0x38>
 8000834:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000838:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800083c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000840:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000844:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000848:	ee16 1a10 	vmov	r1, s12
 800084c:	ee17 0a90 	vmov	r0, s15
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	f3af 8000 	nop.w
 8000858:	00000000 	.word	0x00000000
 800085c:	3df00000 	.word	0x3df00000
 8000860:	00000000 	.word	0x00000000
 8000864:	41f00000 	.word	0x41f00000

08000868 <__udivmoddi4>:
 8000868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800086c:	9d08      	ldr	r5, [sp, #32]
 800086e:	460c      	mov	r4, r1
 8000870:	2b00      	cmp	r3, #0
 8000872:	d14e      	bne.n	8000912 <__udivmoddi4+0xaa>
 8000874:	4694      	mov	ip, r2
 8000876:	458c      	cmp	ip, r1
 8000878:	4686      	mov	lr, r0
 800087a:	fab2 f282 	clz	r2, r2
 800087e:	d962      	bls.n	8000946 <__udivmoddi4+0xde>
 8000880:	b14a      	cbz	r2, 8000896 <__udivmoddi4+0x2e>
 8000882:	f1c2 0320 	rsb	r3, r2, #32
 8000886:	4091      	lsls	r1, r2
 8000888:	fa20 f303 	lsr.w	r3, r0, r3
 800088c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000890:	4319      	orrs	r1, r3
 8000892:	fa00 fe02 	lsl.w	lr, r0, r2
 8000896:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800089a:	fa1f f68c 	uxth.w	r6, ip
 800089e:	fbb1 f4f7 	udiv	r4, r1, r7
 80008a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a6:	fb07 1114 	mls	r1, r7, r4, r1
 80008aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ae:	fb04 f106 	mul.w	r1, r4, r6
 80008b2:	4299      	cmp	r1, r3
 80008b4:	d90a      	bls.n	80008cc <__udivmoddi4+0x64>
 80008b6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80008be:	f080 8112 	bcs.w	8000ae6 <__udivmoddi4+0x27e>
 80008c2:	4299      	cmp	r1, r3
 80008c4:	f240 810f 	bls.w	8000ae6 <__udivmoddi4+0x27e>
 80008c8:	3c02      	subs	r4, #2
 80008ca:	4463      	add	r3, ip
 80008cc:	1a59      	subs	r1, r3, r1
 80008ce:	fa1f f38e 	uxth.w	r3, lr
 80008d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80008d6:	fb07 1110 	mls	r1, r7, r0, r1
 80008da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008de:	fb00 f606 	mul.w	r6, r0, r6
 80008e2:	429e      	cmp	r6, r3
 80008e4:	d90a      	bls.n	80008fc <__udivmoddi4+0x94>
 80008e6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80008ee:	f080 80fc 	bcs.w	8000aea <__udivmoddi4+0x282>
 80008f2:	429e      	cmp	r6, r3
 80008f4:	f240 80f9 	bls.w	8000aea <__udivmoddi4+0x282>
 80008f8:	4463      	add	r3, ip
 80008fa:	3802      	subs	r0, #2
 80008fc:	1b9b      	subs	r3, r3, r6
 80008fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000902:	2100      	movs	r1, #0
 8000904:	b11d      	cbz	r5, 800090e <__udivmoddi4+0xa6>
 8000906:	40d3      	lsrs	r3, r2
 8000908:	2200      	movs	r2, #0
 800090a:	e9c5 3200 	strd	r3, r2, [r5]
 800090e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000912:	428b      	cmp	r3, r1
 8000914:	d905      	bls.n	8000922 <__udivmoddi4+0xba>
 8000916:	b10d      	cbz	r5, 800091c <__udivmoddi4+0xb4>
 8000918:	e9c5 0100 	strd	r0, r1, [r5]
 800091c:	2100      	movs	r1, #0
 800091e:	4608      	mov	r0, r1
 8000920:	e7f5      	b.n	800090e <__udivmoddi4+0xa6>
 8000922:	fab3 f183 	clz	r1, r3
 8000926:	2900      	cmp	r1, #0
 8000928:	d146      	bne.n	80009b8 <__udivmoddi4+0x150>
 800092a:	42a3      	cmp	r3, r4
 800092c:	d302      	bcc.n	8000934 <__udivmoddi4+0xcc>
 800092e:	4290      	cmp	r0, r2
 8000930:	f0c0 80f0 	bcc.w	8000b14 <__udivmoddi4+0x2ac>
 8000934:	1a86      	subs	r6, r0, r2
 8000936:	eb64 0303 	sbc.w	r3, r4, r3
 800093a:	2001      	movs	r0, #1
 800093c:	2d00      	cmp	r5, #0
 800093e:	d0e6      	beq.n	800090e <__udivmoddi4+0xa6>
 8000940:	e9c5 6300 	strd	r6, r3, [r5]
 8000944:	e7e3      	b.n	800090e <__udivmoddi4+0xa6>
 8000946:	2a00      	cmp	r2, #0
 8000948:	f040 8090 	bne.w	8000a6c <__udivmoddi4+0x204>
 800094c:	eba1 040c 	sub.w	r4, r1, ip
 8000950:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000954:	fa1f f78c 	uxth.w	r7, ip
 8000958:	2101      	movs	r1, #1
 800095a:	fbb4 f6f8 	udiv	r6, r4, r8
 800095e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000962:	fb08 4416 	mls	r4, r8, r6, r4
 8000966:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800096a:	fb07 f006 	mul.w	r0, r7, r6
 800096e:	4298      	cmp	r0, r3
 8000970:	d908      	bls.n	8000984 <__udivmoddi4+0x11c>
 8000972:	eb1c 0303 	adds.w	r3, ip, r3
 8000976:	f106 34ff 	add.w	r4, r6, #4294967295
 800097a:	d202      	bcs.n	8000982 <__udivmoddi4+0x11a>
 800097c:	4298      	cmp	r0, r3
 800097e:	f200 80cd 	bhi.w	8000b1c <__udivmoddi4+0x2b4>
 8000982:	4626      	mov	r6, r4
 8000984:	1a1c      	subs	r4, r3, r0
 8000986:	fa1f f38e 	uxth.w	r3, lr
 800098a:	fbb4 f0f8 	udiv	r0, r4, r8
 800098e:	fb08 4410 	mls	r4, r8, r0, r4
 8000992:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000996:	fb00 f707 	mul.w	r7, r0, r7
 800099a:	429f      	cmp	r7, r3
 800099c:	d908      	bls.n	80009b0 <__udivmoddi4+0x148>
 800099e:	eb1c 0303 	adds.w	r3, ip, r3
 80009a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0x146>
 80009a8:	429f      	cmp	r7, r3
 80009aa:	f200 80b0 	bhi.w	8000b0e <__udivmoddi4+0x2a6>
 80009ae:	4620      	mov	r0, r4
 80009b0:	1bdb      	subs	r3, r3, r7
 80009b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009b6:	e7a5      	b.n	8000904 <__udivmoddi4+0x9c>
 80009b8:	f1c1 0620 	rsb	r6, r1, #32
 80009bc:	408b      	lsls	r3, r1
 80009be:	fa22 f706 	lsr.w	r7, r2, r6
 80009c2:	431f      	orrs	r7, r3
 80009c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80009c8:	fa04 f301 	lsl.w	r3, r4, r1
 80009cc:	ea43 030c 	orr.w	r3, r3, ip
 80009d0:	40f4      	lsrs	r4, r6
 80009d2:	fa00 f801 	lsl.w	r8, r0, r1
 80009d6:	0c38      	lsrs	r0, r7, #16
 80009d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009dc:	fbb4 fef0 	udiv	lr, r4, r0
 80009e0:	fa1f fc87 	uxth.w	ip, r7
 80009e4:	fb00 441e 	mls	r4, r0, lr, r4
 80009e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009ec:	fb0e f90c 	mul.w	r9, lr, ip
 80009f0:	45a1      	cmp	r9, r4
 80009f2:	fa02 f201 	lsl.w	r2, r2, r1
 80009f6:	d90a      	bls.n	8000a0e <__udivmoddi4+0x1a6>
 80009f8:	193c      	adds	r4, r7, r4
 80009fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009fe:	f080 8084 	bcs.w	8000b0a <__udivmoddi4+0x2a2>
 8000a02:	45a1      	cmp	r9, r4
 8000a04:	f240 8081 	bls.w	8000b0a <__udivmoddi4+0x2a2>
 8000a08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a0c:	443c      	add	r4, r7
 8000a0e:	eba4 0409 	sub.w	r4, r4, r9
 8000a12:	fa1f f983 	uxth.w	r9, r3
 8000a16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000a1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a26:	45a4      	cmp	ip, r4
 8000a28:	d907      	bls.n	8000a3a <__udivmoddi4+0x1d2>
 8000a2a:	193c      	adds	r4, r7, r4
 8000a2c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a30:	d267      	bcs.n	8000b02 <__udivmoddi4+0x29a>
 8000a32:	45a4      	cmp	ip, r4
 8000a34:	d965      	bls.n	8000b02 <__udivmoddi4+0x29a>
 8000a36:	3b02      	subs	r3, #2
 8000a38:	443c      	add	r4, r7
 8000a3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000a42:	eba4 040c 	sub.w	r4, r4, ip
 8000a46:	429c      	cmp	r4, r3
 8000a48:	46ce      	mov	lr, r9
 8000a4a:	469c      	mov	ip, r3
 8000a4c:	d351      	bcc.n	8000af2 <__udivmoddi4+0x28a>
 8000a4e:	d04e      	beq.n	8000aee <__udivmoddi4+0x286>
 8000a50:	b155      	cbz	r5, 8000a68 <__udivmoddi4+0x200>
 8000a52:	ebb8 030e 	subs.w	r3, r8, lr
 8000a56:	eb64 040c 	sbc.w	r4, r4, ip
 8000a5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000a5e:	40cb      	lsrs	r3, r1
 8000a60:	431e      	orrs	r6, r3
 8000a62:	40cc      	lsrs	r4, r1
 8000a64:	e9c5 6400 	strd	r6, r4, [r5]
 8000a68:	2100      	movs	r1, #0
 8000a6a:	e750      	b.n	800090e <__udivmoddi4+0xa6>
 8000a6c:	f1c2 0320 	rsb	r3, r2, #32
 8000a70:	fa20 f103 	lsr.w	r1, r0, r3
 8000a74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a78:	fa24 f303 	lsr.w	r3, r4, r3
 8000a7c:	4094      	lsls	r4, r2
 8000a7e:	430c      	orrs	r4, r1
 8000a80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a88:	fa1f f78c 	uxth.w	r7, ip
 8000a8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a90:	fb08 3110 	mls	r1, r8, r0, r3
 8000a94:	0c23      	lsrs	r3, r4, #16
 8000a96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a9a:	fb00 f107 	mul.w	r1, r0, r7
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	d908      	bls.n	8000ab4 <__udivmoddi4+0x24c>
 8000aa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000aaa:	d22c      	bcs.n	8000b06 <__udivmoddi4+0x29e>
 8000aac:	4299      	cmp	r1, r3
 8000aae:	d92a      	bls.n	8000b06 <__udivmoddi4+0x29e>
 8000ab0:	3802      	subs	r0, #2
 8000ab2:	4463      	add	r3, ip
 8000ab4:	1a5b      	subs	r3, r3, r1
 8000ab6:	b2a4      	uxth	r4, r4
 8000ab8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000abc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ac0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac4:	fb01 f307 	mul.w	r3, r1, r7
 8000ac8:	42a3      	cmp	r3, r4
 8000aca:	d908      	bls.n	8000ade <__udivmoddi4+0x276>
 8000acc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ad0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ad4:	d213      	bcs.n	8000afe <__udivmoddi4+0x296>
 8000ad6:	42a3      	cmp	r3, r4
 8000ad8:	d911      	bls.n	8000afe <__udivmoddi4+0x296>
 8000ada:	3902      	subs	r1, #2
 8000adc:	4464      	add	r4, ip
 8000ade:	1ae4      	subs	r4, r4, r3
 8000ae0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ae4:	e739      	b.n	800095a <__udivmoddi4+0xf2>
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	e6f0      	b.n	80008cc <__udivmoddi4+0x64>
 8000aea:	4608      	mov	r0, r1
 8000aec:	e706      	b.n	80008fc <__udivmoddi4+0x94>
 8000aee:	45c8      	cmp	r8, r9
 8000af0:	d2ae      	bcs.n	8000a50 <__udivmoddi4+0x1e8>
 8000af2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000af6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000afa:	3801      	subs	r0, #1
 8000afc:	e7a8      	b.n	8000a50 <__udivmoddi4+0x1e8>
 8000afe:	4631      	mov	r1, r6
 8000b00:	e7ed      	b.n	8000ade <__udivmoddi4+0x276>
 8000b02:	4603      	mov	r3, r0
 8000b04:	e799      	b.n	8000a3a <__udivmoddi4+0x1d2>
 8000b06:	4630      	mov	r0, r6
 8000b08:	e7d4      	b.n	8000ab4 <__udivmoddi4+0x24c>
 8000b0a:	46d6      	mov	lr, sl
 8000b0c:	e77f      	b.n	8000a0e <__udivmoddi4+0x1a6>
 8000b0e:	4463      	add	r3, ip
 8000b10:	3802      	subs	r0, #2
 8000b12:	e74d      	b.n	80009b0 <__udivmoddi4+0x148>
 8000b14:	4606      	mov	r6, r0
 8000b16:	4623      	mov	r3, r4
 8000b18:	4608      	mov	r0, r1
 8000b1a:	e70f      	b.n	800093c <__udivmoddi4+0xd4>
 8000b1c:	3e02      	subs	r6, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	e730      	b.n	8000984 <__udivmoddi4+0x11c>
 8000b22:	bf00      	nop

08000b24 <__aeabi_idiv0>:
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	460a      	mov	r2, r1
 8000b32:	71fb      	strb	r3, [r7, #7]
 8000b34:	4613      	mov	r3, r2
 8000b36:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b3e:	480f      	ldr	r0, [pc, #60]	@ (8000b7c <BMP280_write+0x54>)
 8000b40:	f008 fb56 	bl	80091f0 <HAL_GPIO_WritePin>
	Address &= 0x7F;
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8000b4e:	1df9      	adds	r1, r7, #7
 8000b50:	2364      	movs	r3, #100	@ 0x64
 8000b52:	2201      	movs	r2, #1
 8000b54:	480a      	ldr	r0, [pc, #40]	@ (8000b80 <BMP280_write+0x58>)
 8000b56:	f00b fb95 	bl	800c284 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 8000b5a:	1db9      	adds	r1, r7, #6
 8000b5c:	2364      	movs	r3, #100	@ 0x64
 8000b5e:	2201      	movs	r2, #1
 8000b60:	4807      	ldr	r0, [pc, #28]	@ (8000b80 <BMP280_write+0x58>)
 8000b62:	f00b fb8f 	bl	800c284 <HAL_SPI_Transmit>

	BMP280_unselect();
 8000b66:	2201      	movs	r2, #1
 8000b68:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b6c:	4803      	ldr	r0, [pc, #12]	@ (8000b7c <BMP280_write+0x54>)
 8000b6e:	f008 fb3f 	bl	80091f0 <HAL_GPIO_WritePin>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	58020400 	.word	0x58020400
 8000b80:	24004e80 	.word	0x24004e80

08000b84 <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b9e:	480e      	ldr	r0, [pc, #56]	@ (8000bd8 <BMP280_read+0x54>)
 8000ba0:	f008 fb26 	bl	80091f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 8000ba4:	f107 010f 	add.w	r1, r7, #15
 8000ba8:	2364      	movs	r3, #100	@ 0x64
 8000baa:	2201      	movs	r2, #1
 8000bac:	480b      	ldr	r0, [pc, #44]	@ (8000bdc <BMP280_read+0x58>)
 8000bae:	f00b fb69 	bl	800c284 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 8000bb2:	f107 010f 	add.w	r1, r7, #15
 8000bb6:	2364      	movs	r3, #100	@ 0x64
 8000bb8:	2201      	movs	r2, #1
 8000bba:	4808      	ldr	r0, [pc, #32]	@ (8000bdc <BMP280_read+0x58>)
 8000bbc:	f00b fd50 	bl	800c660 <HAL_SPI_Receive>
	BMP280_unselect();
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bc6:	4804      	ldr	r0, [pc, #16]	@ (8000bd8 <BMP280_read+0x54>)
 8000bc8:	f008 fb12 	bl	80091f0 <HAL_GPIO_WritePin>

	return Buffer;
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	58020400 	.word	0x58020400
 8000bdc:	24004e80 	.word	0x24004e80

08000be0 <BMP280_config>:

void BMP280_config(void){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 8000be4:	2157      	movs	r1, #87	@ 0x57
 8000be6:	20f4      	movs	r0, #244	@ 0xf4
 8000be8:	f7ff ff9e 	bl	8000b28 <BMP280_write>
	BMP280_write(config, 0x10);
 8000bec:	2110      	movs	r1, #16
 8000bee:	20f5      	movs	r0, #245	@ 0xf5
 8000bf0:	f7ff ff9a 	bl	8000b28 <BMP280_write>
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 8000bfe:	2388      	movs	r3, #136	@ 0x88
 8000c00:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	f107 0308 	add.w	r3, r7, #8
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]
	BMP280_select();
 8000c16:	2200      	movs	r2, #0
 8000c18:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c1c:	4843      	ldr	r0, [pc, #268]	@ (8000d2c <BMP280_calibrationData+0x134>)
 8000c1e:	f008 fae7 	bl	80091f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8000c22:	f107 011f 	add.w	r1, r7, #31
 8000c26:	2364      	movs	r3, #100	@ 0x64
 8000c28:	2201      	movs	r2, #1
 8000c2a:	4841      	ldr	r0, [pc, #260]	@ (8000d30 <BMP280_calibrationData+0x138>)
 8000c2c:	f00b fb2a 	bl	800c284 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 8000c30:	1d39      	adds	r1, r7, #4
 8000c32:	2364      	movs	r3, #100	@ 0x64
 8000c34:	2218      	movs	r2, #24
 8000c36:	483e      	ldr	r0, [pc, #248]	@ (8000d30 <BMP280_calibrationData+0x138>)
 8000c38:	f00b fd12 	bl	800c660 <HAL_SPI_Receive>
	BMP280_unselect();
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c42:	483a      	ldr	r0, [pc, #232]	@ (8000d2c <BMP280_calibrationData+0x134>)
 8000c44:	f008 fad4 	bl	80091f0 <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 8000c48:	797b      	ldrb	r3, [r7, #5]
 8000c4a:	021b      	lsls	r3, r3, #8
 8000c4c:	b21a      	sxth	r2, r3
 8000c4e:	793b      	ldrb	r3, [r7, #4]
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	4313      	orrs	r3, r2
 8000c54:	b21b      	sxth	r3, r3
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	4b36      	ldr	r3, [pc, #216]	@ (8000d34 <BMP280_calibrationData+0x13c>)
 8000c5a:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	021b      	lsls	r3, r3, #8
 8000c60:	b21a      	sxth	r2, r3
 8000c62:	79bb      	ldrb	r3, [r7, #6]
 8000c64:	b21b      	sxth	r3, r3
 8000c66:	4313      	orrs	r3, r2
 8000c68:	b21a      	sxth	r2, r3
 8000c6a:	4b33      	ldr	r3, [pc, #204]	@ (8000d38 <BMP280_calibrationData+0x140>)
 8000c6c:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 8000c6e:	7a7b      	ldrb	r3, [r7, #9]
 8000c70:	021b      	lsls	r3, r3, #8
 8000c72:	b21a      	sxth	r2, r3
 8000c74:	7a3b      	ldrb	r3, [r7, #8]
 8000c76:	b21b      	sxth	r3, r3
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	b21a      	sxth	r2, r3
 8000c7c:	4b2f      	ldr	r3, [pc, #188]	@ (8000d3c <BMP280_calibrationData+0x144>)
 8000c7e:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 8000c80:	7afb      	ldrb	r3, [r7, #11]
 8000c82:	021b      	lsls	r3, r3, #8
 8000c84:	b21a      	sxth	r2, r3
 8000c86:	7abb      	ldrb	r3, [r7, #10]
 8000c88:	b21b      	sxth	r3, r3
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	b21b      	sxth	r3, r3
 8000c8e:	b29a      	uxth	r2, r3
 8000c90:	4b2b      	ldr	r3, [pc, #172]	@ (8000d40 <BMP280_calibrationData+0x148>)
 8000c92:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 8000c94:	7b7b      	ldrb	r3, [r7, #13]
 8000c96:	021b      	lsls	r3, r3, #8
 8000c98:	b21a      	sxth	r2, r3
 8000c9a:	7b3b      	ldrb	r3, [r7, #12]
 8000c9c:	b21b      	sxth	r3, r3
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	b21a      	sxth	r2, r3
 8000ca2:	4b28      	ldr	r3, [pc, #160]	@ (8000d44 <BMP280_calibrationData+0x14c>)
 8000ca4:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	021b      	lsls	r3, r3, #8
 8000caa:	b21a      	sxth	r2, r3
 8000cac:	7bbb      	ldrb	r3, [r7, #14]
 8000cae:	b21b      	sxth	r3, r3
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	b21a      	sxth	r2, r3
 8000cb4:	4b24      	ldr	r3, [pc, #144]	@ (8000d48 <BMP280_calibrationData+0x150>)
 8000cb6:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8000cb8:	7c7b      	ldrb	r3, [r7, #17]
 8000cba:	021b      	lsls	r3, r3, #8
 8000cbc:	b21a      	sxth	r2, r3
 8000cbe:	7c3b      	ldrb	r3, [r7, #16]
 8000cc0:	b21b      	sxth	r3, r3
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	b21a      	sxth	r2, r3
 8000cc6:	4b21      	ldr	r3, [pc, #132]	@ (8000d4c <BMP280_calibrationData+0x154>)
 8000cc8:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 8000cca:	7cfb      	ldrb	r3, [r7, #19]
 8000ccc:	021b      	lsls	r3, r3, #8
 8000cce:	b21a      	sxth	r2, r3
 8000cd0:	7cbb      	ldrb	r3, [r7, #18]
 8000cd2:	b21b      	sxth	r3, r3
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	b21a      	sxth	r2, r3
 8000cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d50 <BMP280_calibrationData+0x158>)
 8000cda:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 8000cdc:	7d7b      	ldrb	r3, [r7, #21]
 8000cde:	021b      	lsls	r3, r3, #8
 8000ce0:	b21a      	sxth	r2, r3
 8000ce2:	7d3b      	ldrb	r3, [r7, #20]
 8000ce4:	b21b      	sxth	r3, r3
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	b21a      	sxth	r2, r3
 8000cea:	4b1a      	ldr	r3, [pc, #104]	@ (8000d54 <BMP280_calibrationData+0x15c>)
 8000cec:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 8000cee:	7dfb      	ldrb	r3, [r7, #23]
 8000cf0:	021b      	lsls	r3, r3, #8
 8000cf2:	b21a      	sxth	r2, r3
 8000cf4:	7dbb      	ldrb	r3, [r7, #22]
 8000cf6:	b21b      	sxth	r3, r3
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	b21a      	sxth	r2, r3
 8000cfc:	4b16      	ldr	r3, [pc, #88]	@ (8000d58 <BMP280_calibrationData+0x160>)
 8000cfe:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 8000d00:	7e7b      	ldrb	r3, [r7, #25]
 8000d02:	021b      	lsls	r3, r3, #8
 8000d04:	b21a      	sxth	r2, r3
 8000d06:	7e3b      	ldrb	r3, [r7, #24]
 8000d08:	b21b      	sxth	r3, r3
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	b21a      	sxth	r2, r3
 8000d0e:	4b13      	ldr	r3, [pc, #76]	@ (8000d5c <BMP280_calibrationData+0x164>)
 8000d10:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 8000d12:	7efb      	ldrb	r3, [r7, #27]
 8000d14:	021b      	lsls	r3, r3, #8
 8000d16:	b21a      	sxth	r2, r3
 8000d18:	7ebb      	ldrb	r3, [r7, #26]
 8000d1a:	b21b      	sxth	r3, r3
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	b21a      	sxth	r2, r3
 8000d20:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <BMP280_calibrationData+0x168>)
 8000d22:	801a      	strh	r2, [r3, #0]
}
 8000d24:	bf00      	nop
 8000d26:	3720      	adds	r7, #32
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	58020400 	.word	0x58020400
 8000d30:	24004e80 	.word	0x24004e80
 8000d34:	240002e0 	.word	0x240002e0
 8000d38:	240002e4 	.word	0x240002e4
 8000d3c:	240002e6 	.word	0x240002e6
 8000d40:	240002e2 	.word	0x240002e2
 8000d44:	240002e8 	.word	0x240002e8
 8000d48:	240002ea 	.word	0x240002ea
 8000d4c:	240002ec 	.word	0x240002ec
 8000d50:	240002ee 	.word	0x240002ee
 8000d54:	240002f0 	.word	0x240002f0
 8000d58:	240002f2 	.word	0x240002f2
 8000d5c:	240002f4 	.word	0x240002f4
 8000d60:	240002f6 	.word	0x240002f6

08000d64 <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 8000d6a:	23f7      	movs	r3, #247	@ 0xf7
 8000d6c:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 8000d6e:	2300      	movs	r3, #0
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	2300      	movs	r3, #0
 8000d74:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 8000d76:	2200      	movs	r2, #0
 8000d78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d7c:	4817      	ldr	r0, [pc, #92]	@ (8000ddc <BMP280_readRawValues+0x78>)
 8000d7e:	f008 fa37 	bl	80091f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8000d82:	1df9      	adds	r1, r7, #7
 8000d84:	2364      	movs	r3, #100	@ 0x64
 8000d86:	2201      	movs	r2, #1
 8000d88:	4815      	ldr	r0, [pc, #84]	@ (8000de0 <BMP280_readRawValues+0x7c>)
 8000d8a:	f00b fa7b 	bl	800c284 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 8000d8e:	4639      	mov	r1, r7
 8000d90:	2364      	movs	r3, #100	@ 0x64
 8000d92:	2206      	movs	r2, #6
 8000d94:	4812      	ldr	r0, [pc, #72]	@ (8000de0 <BMP280_readRawValues+0x7c>)
 8000d96:	f00b fc63 	bl	800c660 <HAL_SPI_Receive>
	BMP280_unselect();
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000da0:	480e      	ldr	r0, [pc, #56]	@ (8000ddc <BMP280_readRawValues+0x78>)
 8000da2:	f008 fa25 	bl	80091f0 <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 8000da6:	783b      	ldrb	r3, [r7, #0]
 8000da8:	031a      	lsls	r2, r3, #12
 8000daa:	787b      	ldrb	r3, [r7, #1]
 8000dac:	011b      	lsls	r3, r3, #4
 8000dae:	4313      	orrs	r3, r2
 8000db0:	78ba      	ldrb	r2, [r7, #2]
 8000db2:	0912      	lsrs	r2, r2, #4
 8000db4:	b2d2      	uxtb	r2, r2
 8000db6:	4313      	orrs	r3, r2
 8000db8:	4a0a      	ldr	r2, [pc, #40]	@ (8000de4 <BMP280_readRawValues+0x80>)
 8000dba:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 8000dbc:	78fb      	ldrb	r3, [r7, #3]
 8000dbe:	031a      	lsls	r2, r3, #12
 8000dc0:	793b      	ldrb	r3, [r7, #4]
 8000dc2:	011b      	lsls	r3, r3, #4
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	797a      	ldrb	r2, [r7, #5]
 8000dc8:	0912      	lsrs	r2, r2, #4
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	4a06      	ldr	r2, [pc, #24]	@ (8000de8 <BMP280_readRawValues+0x84>)
 8000dd0:	6013      	str	r3, [r2, #0]
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	58020400 	.word	0x58020400
 8000de0:	24004e80 	.word	0x24004e80
 8000de4:	240002fc 	.word	0x240002fc
 8000de8:	240002f8 	.word	0x240002f8

08000dec <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 8000dec:	b480      	push	{r7}
 8000dee:	b087      	sub	sp, #28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8000df4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e60 <BMP280_measureT+0x74>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	10da      	asrs	r2, r3, #3
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8000e64 <BMP280_measureT+0x78>)
 8000dfc:	881b      	ldrh	r3, [r3, #0]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	4a19      	ldr	r2, [pc, #100]	@ (8000e68 <BMP280_measureT+0x7c>)
 8000e04:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e08:	fb02 f303 	mul.w	r3, r2, r3
 8000e0c:	12db      	asrs	r3, r3, #11
 8000e0e:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	111b      	asrs	r3, r3, #4
 8000e14:	4a13      	ldr	r2, [pc, #76]	@ (8000e64 <BMP280_measureT+0x78>)
 8000e16:	8812      	ldrh	r2, [r2, #0]
 8000e18:	1a9b      	subs	r3, r3, r2
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	1112      	asrs	r2, r2, #4
 8000e1e:	4911      	ldr	r1, [pc, #68]	@ (8000e64 <BMP280_measureT+0x78>)
 8000e20:	8809      	ldrh	r1, [r1, #0]
 8000e22:	1a52      	subs	r2, r2, r1
 8000e24:	fb02 f303 	mul.w	r3, r2, r3
 8000e28:	131b      	asrs	r3, r3, #12
 8000e2a:	4a10      	ldr	r2, [pc, #64]	@ (8000e6c <BMP280_measureT+0x80>)
 8000e2c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e30:	fb02 f303 	mul.w	r3, r2, r3
 8000e34:	139b      	asrs	r3, r3, #14
 8000e36:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000e38:	697a      	ldr	r2, [r7, #20]
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	4a0c      	ldr	r2, [pc, #48]	@ (8000e70 <BMP280_measureT+0x84>)
 8000e40:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	@ (8000e70 <BMP280_measureT+0x84>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	4613      	mov	r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	4413      	add	r3, r2
 8000e4c:	3380      	adds	r3, #128	@ 0x80
 8000e4e:	121b      	asrs	r3, r3, #8
 8000e50:	60fb      	str	r3, [r7, #12]
	return T;
 8000e52:	68fb      	ldr	r3, [r7, #12]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	371c      	adds	r7, #28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	240002f8 	.word	0x240002f8
 8000e64:	240002e0 	.word	0x240002e0
 8000e68:	240002e4 	.word	0x240002e4
 8000e6c:	240002e6 	.word	0x240002e6
 8000e70:	24000300 	.word	0x24000300

08000e74 <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 8000e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e78:	b0ca      	sub	sp, #296	@ 0x128
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8000e80:	4baf      	ldr	r3, [pc, #700]	@ (8001140 <BMP280_measureP+0x2cc>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	17da      	asrs	r2, r3, #31
 8000e86:	461c      	mov	r4, r3
 8000e88:	4615      	mov	r5, r2
 8000e8a:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8000e8e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8000e92:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8000e96:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000e9a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000e9e:	fb03 f102 	mul.w	r1, r3, r2
 8000ea2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000ea6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000eaa:	fb02 f303 	mul.w	r3, r2, r3
 8000eae:	18ca      	adds	r2, r1, r3
 8000eb0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000eb4:	fba3 8903 	umull	r8, r9, r3, r3
 8000eb8:	eb02 0309 	add.w	r3, r2, r9
 8000ebc:	4699      	mov	r9, r3
 8000ebe:	4ba1      	ldr	r3, [pc, #644]	@ (8001144 <BMP280_measureP+0x2d0>)
 8000ec0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec4:	b21b      	sxth	r3, r3
 8000ec6:	17da      	asrs	r2, r3, #31
 8000ec8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000ecc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000ed0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	fb03 f209 	mul.w	r2, r3, r9
 8000eda:	460b      	mov	r3, r1
 8000edc:	fb08 f303 	mul.w	r3, r8, r3
 8000ee0:	4413      	add	r3, r2
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	fba8 1202 	umull	r1, r2, r8, r2
 8000ee8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000eec:	460a      	mov	r2, r1
 8000eee:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000ef2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000ef6:	4413      	add	r3, r2
 8000ef8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000efc:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000f00:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8000f04:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8000f08:	4b8f      	ldr	r3, [pc, #572]	@ (8001148 <BMP280_measureP+0x2d4>)
 8000f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f0e:	b21b      	sxth	r3, r3
 8000f10:	17da      	asrs	r2, r3, #31
 8000f12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000f16:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000f1a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000f1e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000f22:	462a      	mov	r2, r5
 8000f24:	fb02 f203 	mul.w	r2, r2, r3
 8000f28:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000f2c:	4621      	mov	r1, r4
 8000f2e:	fb01 f303 	mul.w	r3, r1, r3
 8000f32:	441a      	add	r2, r3
 8000f34:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000f38:	4621      	mov	r1, r4
 8000f3a:	fba3 1301 	umull	r1, r3, r3, r1
 8000f3e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000f42:	460b      	mov	r3, r1
 8000f44:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000f4c:	18d3      	adds	r3, r2, r3
 8000f4e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000f52:	f04f 0000 	mov.w	r0, #0
 8000f56:	f04f 0100 	mov.w	r1, #0
 8000f5a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000f5e:	462b      	mov	r3, r5
 8000f60:	0459      	lsls	r1, r3, #17
 8000f62:	4623      	mov	r3, r4
 8000f64:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000f68:	4623      	mov	r3, r4
 8000f6a:	0458      	lsls	r0, r3, #17
 8000f6c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000f70:	1814      	adds	r4, r2, r0
 8000f72:	643c      	str	r4, [r7, #64]	@ 0x40
 8000f74:	414b      	adcs	r3, r1
 8000f76:	647b      	str	r3, [r7, #68]	@ 0x44
 8000f78:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000f7c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8000f80:	4b72      	ldr	r3, [pc, #456]	@ (800114c <BMP280_measureP+0x2d8>)
 8000f82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f86:	b21b      	sxth	r3, r3
 8000f88:	17da      	asrs	r2, r3, #31
 8000f8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000f8e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000f92:	f04f 0000 	mov.w	r0, #0
 8000f96:	f04f 0100 	mov.w	r1, #0
 8000f9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000f9e:	00d9      	lsls	r1, r3, #3
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000fa6:	1814      	adds	r4, r2, r0
 8000fa8:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000faa:	414b      	adcs	r3, r1
 8000fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000fae:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000fb2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8000fb6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000fba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000fbe:	fb03 f102 	mul.w	r1, r3, r2
 8000fc2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000fc6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000fca:	fb02 f303 	mul.w	r3, r2, r3
 8000fce:	18ca      	adds	r2, r1, r3
 8000fd0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000fd4:	fba3 1303 	umull	r1, r3, r3, r3
 8000fd8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000fdc:	460b      	mov	r3, r1
 8000fde:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000fe6:	18d3      	adds	r3, r2, r3
 8000fe8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000fec:	4b58      	ldr	r3, [pc, #352]	@ (8001150 <BMP280_measureP+0x2dc>)
 8000fee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	17da      	asrs	r2, r3, #31
 8000ff6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000ffa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000ffe:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001002:	462b      	mov	r3, r5
 8001004:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001008:	4642      	mov	r2, r8
 800100a:	fb02 f203 	mul.w	r2, r2, r3
 800100e:	464b      	mov	r3, r9
 8001010:	4621      	mov	r1, r4
 8001012:	fb01 f303 	mul.w	r3, r1, r3
 8001016:	4413      	add	r3, r2
 8001018:	4622      	mov	r2, r4
 800101a:	4641      	mov	r1, r8
 800101c:	fba2 1201 	umull	r1, r2, r2, r1
 8001020:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001024:	460a      	mov	r2, r1
 8001026:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800102a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800102e:	4413      	add	r3, r2
 8001030:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001034:	f04f 0000 	mov.w	r0, #0
 8001038:	f04f 0100 	mov.w	r1, #0
 800103c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001040:	4623      	mov	r3, r4
 8001042:	0a18      	lsrs	r0, r3, #8
 8001044:	462b      	mov	r3, r5
 8001046:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800104a:	462b      	mov	r3, r5
 800104c:	1219      	asrs	r1, r3, #8
 800104e:	4b41      	ldr	r3, [pc, #260]	@ (8001154 <BMP280_measureP+0x2e0>)
 8001050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001054:	b21b      	sxth	r3, r3
 8001056:	17da      	asrs	r2, r3, #31
 8001058:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800105c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001060:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001064:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001068:	464a      	mov	r2, r9
 800106a:	fb02 f203 	mul.w	r2, r2, r3
 800106e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001072:	4644      	mov	r4, r8
 8001074:	fb04 f303 	mul.w	r3, r4, r3
 8001078:	441a      	add	r2, r3
 800107a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800107e:	4644      	mov	r4, r8
 8001080:	fba3 4304 	umull	r4, r3, r3, r4
 8001084:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001088:	4623      	mov	r3, r4
 800108a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800108e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001092:	18d3      	adds	r3, r2, r3
 8001094:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	f04f 0300 	mov.w	r3, #0
 80010a0:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80010a4:	464c      	mov	r4, r9
 80010a6:	0323      	lsls	r3, r4, #12
 80010a8:	4644      	mov	r4, r8
 80010aa:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80010ae:	4644      	mov	r4, r8
 80010b0:	0322      	lsls	r2, r4, #12
 80010b2:	1884      	adds	r4, r0, r2
 80010b4:	633c      	str	r4, [r7, #48]	@ 0x30
 80010b6:	eb41 0303 	adc.w	r3, r1, r3
 80010ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80010bc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80010c0:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80010c4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80010c8:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80010cc:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80010d0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80010d4:	4b20      	ldr	r3, [pc, #128]	@ (8001158 <BMP280_measureP+0x2e4>)
 80010d6:	881b      	ldrh	r3, [r3, #0]
 80010d8:	b29b      	uxth	r3, r3
 80010da:	2200      	movs	r2, #0
 80010dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80010e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80010e4:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80010e8:	462b      	mov	r3, r5
 80010ea:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80010ee:	4642      	mov	r2, r8
 80010f0:	fb02 f203 	mul.w	r2, r2, r3
 80010f4:	464b      	mov	r3, r9
 80010f6:	4621      	mov	r1, r4
 80010f8:	fb01 f303 	mul.w	r3, r1, r3
 80010fc:	4413      	add	r3, r2
 80010fe:	4622      	mov	r2, r4
 8001100:	4641      	mov	r1, r8
 8001102:	fba2 1201 	umull	r1, r2, r2, r1
 8001106:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800110a:	460a      	mov	r2, r1
 800110c:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001110:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001114:	4413      	add	r3, r2
 8001116:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	f04f 0300 	mov.w	r3, #0
 8001122:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001126:	4629      	mov	r1, r5
 8001128:	104a      	asrs	r2, r1, #1
 800112a:	4629      	mov	r1, r5
 800112c:	17cb      	asrs	r3, r1, #31
 800112e:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8001132:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001136:	4313      	orrs	r3, r2
 8001138:	d110      	bne.n	800115c <BMP280_measureP+0x2e8>
	{
	return 0;
 800113a:	2300      	movs	r3, #0
 800113c:	e154      	b.n	80013e8 <BMP280_measureP+0x574>
 800113e:	bf00      	nop
 8001140:	24000300 	.word	0x24000300
 8001144:	240002f0 	.word	0x240002f0
 8001148:	240002ee 	.word	0x240002ee
 800114c:	240002ec 	.word	0x240002ec
 8001150:	240002ea 	.word	0x240002ea
 8001154:	240002e8 	.word	0x240002e8
 8001158:	240002e2 	.word	0x240002e2
	}
	p = 1048576-adc_P;
 800115c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001160:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001164:	17da      	asrs	r2, r3, #31
 8001166:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001168:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800116a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800116e:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8001172:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001176:	105b      	asrs	r3, r3, #1
 8001178:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800117c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001180:	07db      	lsls	r3, r3, #31
 8001182:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001186:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800118a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800118e:	4621      	mov	r1, r4
 8001190:	1a89      	subs	r1, r1, r2
 8001192:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001194:	4629      	mov	r1, r5
 8001196:	eb61 0303 	sbc.w	r3, r1, r3
 800119a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800119c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80011a0:	4622      	mov	r2, r4
 80011a2:	462b      	mov	r3, r5
 80011a4:	1891      	adds	r1, r2, r2
 80011a6:	6239      	str	r1, [r7, #32]
 80011a8:	415b      	adcs	r3, r3
 80011aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80011ac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80011b0:	4621      	mov	r1, r4
 80011b2:	1851      	adds	r1, r2, r1
 80011b4:	61b9      	str	r1, [r7, #24]
 80011b6:	4629      	mov	r1, r5
 80011b8:	414b      	adcs	r3, r1
 80011ba:	61fb      	str	r3, [r7, #28]
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	f04f 0300 	mov.w	r3, #0
 80011c4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80011c8:	4649      	mov	r1, r9
 80011ca:	018b      	lsls	r3, r1, #6
 80011cc:	4641      	mov	r1, r8
 80011ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80011d2:	4641      	mov	r1, r8
 80011d4:	018a      	lsls	r2, r1, #6
 80011d6:	4641      	mov	r1, r8
 80011d8:	1889      	adds	r1, r1, r2
 80011da:	6139      	str	r1, [r7, #16]
 80011dc:	4649      	mov	r1, r9
 80011de:	eb43 0101 	adc.w	r1, r3, r1
 80011e2:	6179      	str	r1, [r7, #20]
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80011f0:	4649      	mov	r1, r9
 80011f2:	008b      	lsls	r3, r1, #2
 80011f4:	4641      	mov	r1, r8
 80011f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80011fa:	4641      	mov	r1, r8
 80011fc:	008a      	lsls	r2, r1, #2
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	4603      	mov	r3, r0
 8001204:	4622      	mov	r2, r4
 8001206:	189b      	adds	r3, r3, r2
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	460b      	mov	r3, r1
 800120c:	462a      	mov	r2, r5
 800120e:	eb42 0303 	adc.w	r3, r2, r3
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	f04f 0300 	mov.w	r3, #0
 800121c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001220:	4649      	mov	r1, r9
 8001222:	008b      	lsls	r3, r1, #2
 8001224:	4641      	mov	r1, r8
 8001226:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800122a:	4641      	mov	r1, r8
 800122c:	008a      	lsls	r2, r1, #2
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	4603      	mov	r3, r0
 8001234:	4622      	mov	r2, r4
 8001236:	189b      	adds	r3, r3, r2
 8001238:	673b      	str	r3, [r7, #112]	@ 0x70
 800123a:	462b      	mov	r3, r5
 800123c:	460a      	mov	r2, r1
 800123e:	eb42 0303 	adc.w	r3, r2, r3
 8001242:	677b      	str	r3, [r7, #116]	@ 0x74
 8001244:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001248:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800124c:	f7ff fa6c 	bl	8000728 <__aeabi_ldivmod>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001258:	4b66      	ldr	r3, [pc, #408]	@ (80013f4 <BMP280_measureP+0x580>)
 800125a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800125e:	b21b      	sxth	r3, r3
 8001260:	17da      	asrs	r2, r3, #31
 8001262:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001264:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001266:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800126a:	f04f 0000 	mov.w	r0, #0
 800126e:	f04f 0100 	mov.w	r1, #0
 8001272:	0b50      	lsrs	r0, r2, #13
 8001274:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001278:	1359      	asrs	r1, r3, #13
 800127a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800127e:	462b      	mov	r3, r5
 8001280:	fb00 f203 	mul.w	r2, r0, r3
 8001284:	4623      	mov	r3, r4
 8001286:	fb03 f301 	mul.w	r3, r3, r1
 800128a:	4413      	add	r3, r2
 800128c:	4622      	mov	r2, r4
 800128e:	fba2 1200 	umull	r1, r2, r2, r0
 8001292:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001296:	460a      	mov	r2, r1
 8001298:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 800129c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80012a0:	4413      	add	r3, r2
 80012a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80012a6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80012aa:	f04f 0000 	mov.w	r0, #0
 80012ae:	f04f 0100 	mov.w	r1, #0
 80012b2:	0b50      	lsrs	r0, r2, #13
 80012b4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80012b8:	1359      	asrs	r1, r3, #13
 80012ba:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80012be:	462b      	mov	r3, r5
 80012c0:	fb00 f203 	mul.w	r2, r0, r3
 80012c4:	4623      	mov	r3, r4
 80012c6:	fb03 f301 	mul.w	r3, r3, r1
 80012ca:	4413      	add	r3, r2
 80012cc:	4622      	mov	r2, r4
 80012ce:	fba2 1200 	umull	r1, r2, r2, r0
 80012d2:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80012d6:	460a      	mov	r2, r1
 80012d8:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80012dc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80012e0:	4413      	add	r3, r2
 80012e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80012e6:	f04f 0200 	mov.w	r2, #0
 80012ea:	f04f 0300 	mov.w	r3, #0
 80012ee:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80012f2:	4621      	mov	r1, r4
 80012f4:	0e4a      	lsrs	r2, r1, #25
 80012f6:	4629      	mov	r1, r5
 80012f8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80012fc:	4629      	mov	r1, r5
 80012fe:	164b      	asrs	r3, r1, #25
 8001300:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001304:	4b3c      	ldr	r3, [pc, #240]	@ (80013f8 <BMP280_measureP+0x584>)
 8001306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800130a:	b21b      	sxth	r3, r3
 800130c:	17da      	asrs	r2, r3, #31
 800130e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001310:	667a      	str	r2, [r7, #100]	@ 0x64
 8001312:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001316:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800131a:	462a      	mov	r2, r5
 800131c:	fb02 f203 	mul.w	r2, r2, r3
 8001320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001324:	4621      	mov	r1, r4
 8001326:	fb01 f303 	mul.w	r3, r1, r3
 800132a:	4413      	add	r3, r2
 800132c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001330:	4621      	mov	r1, r4
 8001332:	fba2 1201 	umull	r1, r2, r2, r1
 8001336:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800133a:	460a      	mov	r2, r1
 800133c:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001340:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001344:	4413      	add	r3, r2
 8001346:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001356:	4621      	mov	r1, r4
 8001358:	0cca      	lsrs	r2, r1, #19
 800135a:	4629      	mov	r1, r5
 800135c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001360:	4629      	mov	r1, r5
 8001362:	14cb      	asrs	r3, r1, #19
 8001364:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001368:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800136c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001370:	1884      	adds	r4, r0, r2
 8001372:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001374:	eb41 0303 	adc.w	r3, r1, r3
 8001378:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800137a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800137e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001382:	4621      	mov	r1, r4
 8001384:	1889      	adds	r1, r1, r2
 8001386:	6539      	str	r1, [r7, #80]	@ 0x50
 8001388:	4629      	mov	r1, r5
 800138a:	eb43 0101 	adc.w	r1, r3, r1
 800138e:	6579      	str	r1, [r7, #84]	@ 0x54
 8001390:	f04f 0000 	mov.w	r0, #0
 8001394:	f04f 0100 	mov.w	r1, #0
 8001398:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800139c:	4623      	mov	r3, r4
 800139e:	0a18      	lsrs	r0, r3, #8
 80013a0:	462b      	mov	r3, r5
 80013a2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80013a6:	462b      	mov	r3, r5
 80013a8:	1219      	asrs	r1, r3, #8
 80013aa:	4b14      	ldr	r3, [pc, #80]	@ (80013fc <BMP280_measureP+0x588>)
 80013ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	17da      	asrs	r2, r3, #31
 80013b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80013b6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	f04f 0300 	mov.w	r3, #0
 80013c0:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80013c4:	464c      	mov	r4, r9
 80013c6:	0123      	lsls	r3, r4, #4
 80013c8:	4644      	mov	r4, r8
 80013ca:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80013ce:	4644      	mov	r4, r8
 80013d0:	0122      	lsls	r2, r4, #4
 80013d2:	1884      	adds	r4, r0, r2
 80013d4:	603c      	str	r4, [r7, #0]
 80013d6:	eb41 0303 	adc.w	r3, r1, r3
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	e9d7 3400 	ldrd	r3, r4, [r7]
 80013e0:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 80013e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80013ee:	46bd      	mov	sp, r7
 80013f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80013f4:	240002f6 	.word	0x240002f6
 80013f8:	240002f4 	.word	0x240002f4
 80013fc:	240002f2 	.word	0x240002f2

08001400 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d101      	bne.n	8001414 <BMP280_measureH+0x14>
 8001410:	2300      	movs	r3, #0
 8001412:	e03d      	b.n	8001490 <BMP280_measureH+0x90>
	var1 = -log(((double)Pres)/101325);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800141e:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8001498 <BMP280_measureH+0x98>
 8001422:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001426:	eeb0 0b46 	vmov.f64	d0, d6
 800142a:	f017 fa99 	bl	8018960 <log>
 800142e:	eeb0 7b40 	vmov.f64	d7, d0
 8001432:	eeb1 7b47 	vneg.f64	d7, d7
 8001436:	ed87 7b06 	vstr	d7, [r7, #24]

	if(var1 == 0) return 0;
 800143a:	ed97 7b06 	vldr	d7, [r7, #24]
 800143e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001446:	d101      	bne.n	800144c <BMP280_measureH+0x4c>
 8001448:	2300      	movs	r3, #0
 800144a:	e021      	b.n	8001490 <BMP280_measureH+0x90>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	ee07 3a90 	vmov	s15, r3
 8001452:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001456:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 80014a0 <BMP280_measureH+0xa0>
 800145a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800145e:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 80014a8 <BMP280_measureH+0xa8>
 8001462:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001466:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 80014b0 <BMP280_measureH+0xb0>
 800146a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800146e:	ed87 7b04 	vstr	d7, [r7, #16]
	h = var1/var2;
 8001472:	ed97 5b06 	vldr	d5, [r7, #24]
 8001476:	ed97 6b04 	vldr	d6, [r7, #16]
 800147a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800147e:	ed87 7b02 	vstr	d7, [r7, #8]
	return (uint16_t)h;
 8001482:	ed97 7b02 	vldr	d7, [r7, #8]
 8001486:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800148a:	ee17 3a90 	vmov	r3, s15
 800148e:	b29b      	uxth	r3, r3
}
 8001490:	4618      	mov	r0, r3
 8001492:	3720      	adds	r7, #32
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	00000000 	.word	0x00000000
 800149c:	40f8bcd0 	.word	0x40f8bcd0
 80014a0:	00000000 	.word	0x00000000
 80014a4:	40590000 	.word	0x40590000
 80014a8:	66666666 	.word	0x66666666
 80014ac:	40711266 	.word	0x40711266
 80014b0:	ca402a92 	.word	0xca402a92
 80014b4:	3fa17e3e 	.word	0x3fa17e3e

080014b8 <BMP280_init>:

void BMP280_init(void){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	BMP280_unselect();
 80014bc:	2201      	movs	r2, #1
 80014be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014c2:	480d      	ldr	r0, [pc, #52]	@ (80014f8 <BMP280_init+0x40>)
 80014c4:	f007 fe94 	bl	80091f0 <HAL_GPIO_WritePin>
	BMP280_config();
 80014c8:	f7ff fb8a 	bl	8000be0 <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 80014cc:	2089      	movs	r0, #137	@ 0x89
 80014ce:	f7ff fb59 	bl	8000b84 <BMP280_read>
 80014d2:	4603      	mov	r3, r0
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <BMP280_init+0x44>)
 80014d8:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 80014da:	f7ff fb8d 	bl	8000bf8 <BMP280_calibrationData>
	BMP280_readRawValues();
 80014de:	f7ff fc41 	bl	8000d64 <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 80014e2:	4b07      	ldr	r3, [pc, #28]	@ (8001500 <BMP280_init+0x48>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fc80 	bl	8000dec <BMP280_measureT>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4a03      	ldr	r2, [pc, #12]	@ (80014fc <BMP280_init+0x44>)
 80014f0:	6093      	str	r3, [r2, #8]
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	58020400 	.word	0x58020400
 80014fc:	240002cc 	.word	0x240002cc
 8001500:	240002f8 	.word	0x240002f8

08001504 <BMP280_calculate>:

void BMP280_calculate(void){
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
	//BMP280.ID = 0;
	BMP280.ID = BMP280_read(0x89);
 8001508:	2089      	movs	r0, #137	@ 0x89
 800150a:	f7ff fb3b 	bl	8000b84 <BMP280_read>
 800150e:	4603      	mov	r3, r0
 8001510:	461a      	mov	r2, r3
 8001512:	4b16      	ldr	r3, [pc, #88]	@ (800156c <BMP280_calculate+0x68>)
 8001514:	701a      	strb	r2, [r3, #0]
	BMP280_readRawValues();
 8001516:	f7ff fc25 	bl	8000d64 <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 800151a:	4b15      	ldr	r3, [pc, #84]	@ (8001570 <BMP280_calculate+0x6c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fc64 	bl	8000dec <BMP280_measureT>
 8001524:	4603      	mov	r3, r0
 8001526:	4a11      	ldr	r2, [pc, #68]	@ (800156c <BMP280_calculate+0x68>)
 8001528:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 800152a:	4b12      	ldr	r3, [pc, #72]	@ (8001574 <BMP280_calculate+0x70>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fca0 	bl	8000e74 <BMP280_measureP>
 8001534:	4603      	mov	r3, r0
 8001536:	0a1b      	lsrs	r3, r3, #8
 8001538:	4a0c      	ldr	r2, [pc, #48]	@ (800156c <BMP280_calculate+0x68>)
 800153a:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 800153c:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <BMP280_calculate+0x68>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	4a0a      	ldr	r2, [pc, #40]	@ (800156c <BMP280_calculate+0x68>)
 8001542:	6892      	ldr	r2, [r2, #8]
 8001544:	4611      	mov	r1, r2
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff ff5a 	bl	8001400 <BMP280_measureH>
 800154c:	4603      	mov	r3, r0
 800154e:	461a      	mov	r2, r3
 8001550:	4b06      	ldr	r3, [pc, #24]	@ (800156c <BMP280_calculate+0x68>)
 8001552:	821a      	strh	r2, [r3, #16]

	if(BMP280.Barometric_Altitude > BMP280.Max_Altitude) BMP280.Max_Altitude = BMP280.Barometric_Altitude;
 8001554:	4b05      	ldr	r3, [pc, #20]	@ (800156c <BMP280_calculate+0x68>)
 8001556:	8a1a      	ldrh	r2, [r3, #16]
 8001558:	4b04      	ldr	r3, [pc, #16]	@ (800156c <BMP280_calculate+0x68>)
 800155a:	8a5b      	ldrh	r3, [r3, #18]
 800155c:	429a      	cmp	r2, r3
 800155e:	d903      	bls.n	8001568 <BMP280_calculate+0x64>
 8001560:	4b02      	ldr	r3, [pc, #8]	@ (800156c <BMP280_calculate+0x68>)
 8001562:	8a1a      	ldrh	r2, [r3, #16]
 8001564:	4b01      	ldr	r3, [pc, #4]	@ (800156c <BMP280_calculate+0x68>)
 8001566:	825a      	strh	r2, [r3, #18]
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	240002cc 	.word	0x240002cc
 8001570:	240002f8 	.word	0x240002f8
 8001574:	240002fc 	.word	0x240002fc

08001578 <bno055_delay>:

BNO_CurrentState_e BNO_CurrentState = Init;

IMU_t IMU;

void bno055_delay(uint8_t time) {
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
	BNO_DelayCounter += time;
 8001582:	4b06      	ldr	r3, [pc, #24]	@ (800159c <bno055_delay+0x24>)
 8001584:	781a      	ldrb	r2, [r3, #0]
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	4413      	add	r3, r2
 800158a:	b2da      	uxtb	r2, r3
 800158c:	4b03      	ldr	r3, [pc, #12]	@ (800159c <bno055_delay+0x24>)
 800158e:	701a      	strb	r2, [r3, #0]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	24000407 	.word	0x24000407

080015a0 <BNO_Read>:

HAL_StatusTypeDef BNO_Read(uint8_t Address,uint8_t Size){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	460a      	mov	r2, r1
 80015aa:	71fb      	strb	r3, [r7, #7]
 80015ac:	4613      	mov	r3, r2
 80015ae:	71bb      	strb	r3, [r7, #6]

	HAL_StatusTypeDef uartError;

	uint8_t ReadCommand[4] = {0xAA, 0x01, Address, Size};
 80015b0:	23aa      	movs	r3, #170	@ 0xaa
 80015b2:	723b      	strb	r3, [r7, #8]
 80015b4:	2301      	movs	r3, #1
 80015b6:	727b      	strb	r3, [r7, #9]
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	72bb      	strb	r3, [r7, #10]
 80015bc:	79bb      	ldrb	r3, [r7, #6]
 80015be:	72fb      	strb	r3, [r7, #11]


	BNO_RxBuffer[0] = Address;
 80015c0:	4a08      	ldr	r2, [pc, #32]	@ (80015e4 <BNO_Read+0x44>)
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	7013      	strb	r3, [r2, #0]

	uartError = HAL_UART_Transmit(&huart3, ReadCommand, 4,100);
 80015c6:	f107 0108 	add.w	r1, r7, #8
 80015ca:	2364      	movs	r3, #100	@ 0x64
 80015cc:	2204      	movs	r2, #4
 80015ce:	4806      	ldr	r0, [pc, #24]	@ (80015e8 <BNO_Read+0x48>)
 80015d0:	f00c fff2 	bl	800e5b8 <HAL_UART_Transmit>
 80015d4:	4603      	mov	r3, r0
 80015d6:	73fb      	strb	r3, [r7, #15]

	return uartError;
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	24000304 	.word	0x24000304
 80015e8:	240051fc 	.word	0x240051fc

080015ec <BNO_Write>:

HAL_StatusTypeDef BNO_Write(uint8_t Address,uint8_t Data){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	460a      	mov	r2, r1
 80015f6:	71fb      	strb	r3, [r7, #7]
 80015f8:	4613      	mov	r3, r2
 80015fa:	71bb      	strb	r3, [r7, #6]
	uint8_t WriteCommand[5];
	HAL_StatusTypeDef uartError;

	WriteCommand[0] = 0xAA;
 80015fc:	23aa      	movs	r3, #170	@ 0xaa
 80015fe:	723b      	strb	r3, [r7, #8]
	WriteCommand[1] = 0x00;
 8001600:	2300      	movs	r3, #0
 8001602:	727b      	strb	r3, [r7, #9]
	WriteCommand[2] = Address;
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	72bb      	strb	r3, [r7, #10]
	WriteCommand[3] = 1;
 8001608:	2301      	movs	r3, #1
 800160a:	72fb      	strb	r3, [r7, #11]
	WriteCommand[4] = Data;
 800160c:	79bb      	ldrb	r3, [r7, #6]
 800160e:	733b      	strb	r3, [r7, #12]

	uartError = HAL_UART_Transmit(&huart3, WriteCommand,5,100);
 8001610:	f107 0108 	add.w	r1, r7, #8
 8001614:	2364      	movs	r3, #100	@ 0x64
 8001616:	2205      	movs	r2, #5
 8001618:	4804      	ldr	r0, [pc, #16]	@ (800162c <BNO_Write+0x40>)
 800161a:	f00c ffcd 	bl	800e5b8 <HAL_UART_Transmit>
 800161e:	4603      	mov	r3, r0
 8001620:	73fb      	strb	r3, [r7, #15]
	return uartError;
 8001622:	7bfb      	ldrb	r3, [r7, #15]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	240051fc 	.word	0x240051fc

08001630 <BNO_Write_MB>:

HAL_StatusTypeDef BNO_Write_MB(uint8_t Address,uint8_t Size, uint8_t *pData){
 8001630:	b580      	push	{r7, lr}
 8001632:	b0c4      	sub	sp, #272	@ 0x110
 8001634:	af00      	add	r7, sp, #0
 8001636:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800163a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001644:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001648:	4602      	mov	r2, r0
 800164a:	701a      	strb	r2, [r3, #0]
 800164c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001650:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001654:	460a      	mov	r2, r1
 8001656:	701a      	strb	r2, [r3, #0]
    uint8_t WriteCommand[255];
    HAL_StatusTypeDef uartError;

    WriteCommand[0] = 0xAA;
 8001658:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800165c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001660:	22aa      	movs	r2, #170	@ 0xaa
 8001662:	701a      	strb	r2, [r3, #0]
    WriteCommand[1] = 0x00;
 8001664:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001668:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800166c:	2200      	movs	r2, #0
 800166e:	705a      	strb	r2, [r3, #1]
    WriteCommand[2] = Address;
 8001670:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001674:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001678:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800167c:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 8001680:	7812      	ldrb	r2, [r2, #0]
 8001682:	709a      	strb	r2, [r3, #2]
    WriteCommand[3] = Size;
 8001684:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001688:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800168c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001690:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001694:	7812      	ldrb	r2, [r2, #0]
 8001696:	70da      	strb	r2, [r3, #3]

    for (uint8_t n = 0; n < Size; ++n) {
 8001698:	2300      	movs	r3, #0
 800169a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800169e:	e015      	b.n	80016cc <BNO_Write_MB+0x9c>
        WriteCommand[n + 4] = pData[n];
 80016a0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80016a4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80016a8:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	441a      	add	r2, r3
 80016b0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80016b4:	3304      	adds	r3, #4
 80016b6:	7811      	ldrb	r1, [r2, #0]
 80016b8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80016bc:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80016c0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t n = 0; n < Size; ++n) {
 80016c2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80016c6:	3301      	adds	r3, #1
 80016c8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80016cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016d0:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80016d4:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d3e0      	bcc.n	80016a0 <BNO_Write_MB+0x70>
    }

    uartError = HAL_UART_Transmit(&huart3, WriteCommand, (Size + 4),100);
 80016de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016e2:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	3304      	adds	r3, #4
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	f107 010c 	add.w	r1, r7, #12
 80016f2:	2364      	movs	r3, #100	@ 0x64
 80016f4:	4806      	ldr	r0, [pc, #24]	@ (8001710 <BNO_Write_MB+0xe0>)
 80016f6:	f00c ff5f 	bl	800e5b8 <HAL_UART_Transmit>
 80016fa:	4603      	mov	r3, r0
 80016fc:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    return uartError;
 8001700:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
}
 8001704:	4618      	mov	r0, r3
 8001706:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	240051fc 	.word	0x240051fc
 8001714:	00000000 	.word	0x00000000

08001718 <BNO_Page0Adress>:

void BNO_Page0Adress(void){
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 800171c:	4ba6      	ldr	r3, [pc, #664]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b55      	cmp	r3, #85	@ 0x55
 8001722:	f300 8247 	bgt.w	8001bb4 <BNO_Page0Adress+0x49c>
 8001726:	2b35      	cmp	r3, #53	@ 0x35
 8001728:	da0a      	bge.n	8001740 <BNO_Page0Adress+0x28>
 800172a:	2b08      	cmp	r3, #8
 800172c:	f000 814a 	beq.w	80019c4 <BNO_Page0Adress+0x2ac>
 8001730:	2b08      	cmp	r3, #8
 8001732:	f300 823f 	bgt.w	8001bb4 <BNO_Page0Adress+0x49c>
 8001736:	2b00      	cmp	r3, #0
 8001738:	d04c      	beq.n	80017d4 <BNO_Page0Adress+0xbc>
 800173a:	2b07      	cmp	r3, #7
 800173c:	d065      	beq.n	800180a <BNO_Page0Adress+0xf2>
			IMU.Roll = ((double)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;

			BNO_ErrorHandler = ReadSucces;
			break;
		default:
			break;
 800173e:	e239      	b.n	8001bb4 <BNO_Page0Adress+0x49c>
	switch (BNO_RxBuffer[0]) {
 8001740:	3b35      	subs	r3, #53	@ 0x35
 8001742:	2b20      	cmp	r3, #32
 8001744:	f200 8236 	bhi.w	8001bb4 <BNO_Page0Adress+0x49c>
 8001748:	a201      	add	r2, pc, #4	@ (adr r2, 8001750 <BNO_Page0Adress+0x38>)
 800174a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174e:	bf00      	nop
 8001750:	08001853 	.word	0x08001853
 8001754:	08001bb5 	.word	0x08001bb5
 8001758:	08001bb5 	.word	0x08001bb5
 800175c:	08001bb5 	.word	0x08001bb5
 8001760:	0800182f 	.word	0x0800182f
 8001764:	08001bb5 	.word	0x08001bb5
 8001768:	0800181d 	.word	0x0800181d
 800176c:	08001bb5 	.word	0x08001bb5
 8001770:	08001841 	.word	0x08001841
 8001774:	08001bb5 	.word	0x08001bb5
 8001778:	08001bb5 	.word	0x08001bb5
 800177c:	08001bb5 	.word	0x08001bb5
 8001780:	08001bb5 	.word	0x08001bb5
 8001784:	08001bb5 	.word	0x08001bb5
 8001788:	08001bb5 	.word	0x08001bb5
 800178c:	08001bb5 	.word	0x08001bb5
 8001790:	08001bb5 	.word	0x08001bb5
 8001794:	08001bb5 	.word	0x08001bb5
 8001798:	08001bb5 	.word	0x08001bb5
 800179c:	08001bb5 	.word	0x08001bb5
 80017a0:	08001bb5 	.word	0x08001bb5
 80017a4:	08001bb5 	.word	0x08001bb5
 80017a8:	08001bb5 	.word	0x08001bb5
 80017ac:	08001bb5 	.word	0x08001bb5
 80017b0:	08001bb5 	.word	0x08001bb5
 80017b4:	08001bb5 	.word	0x08001bb5
 80017b8:	08001bb5 	.word	0x08001bb5
 80017bc:	08001bb5 	.word	0x08001bb5
 80017c0:	08001bb5 	.word	0x08001bb5
 80017c4:	08001bb5 	.word	0x08001bb5
 80017c8:	08001bb5 	.word	0x08001bb5
 80017cc:	08001bb5 	.word	0x08001bb5
 80017d0:	080018ab 	.word	0x080018ab
			if(BNO_RxBuffer[1] != 160) return;
 80017d4:	4b78      	ldr	r3, [pc, #480]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80017d6:	785b      	ldrb	r3, [r3, #1]
 80017d8:	2ba0      	cmp	r3, #160	@ 0xa0
 80017da:	f040 81ed 	bne.w	8001bb8 <BNO_Page0Adress+0x4a0>
			IMU.ID = BNO_RxBuffer[1];
 80017de:	4b76      	ldr	r3, [pc, #472]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80017e0:	785a      	ldrb	r2, [r3, #1]
 80017e2:	4b76      	ldr	r3, [pc, #472]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 80017e4:	701a      	strb	r2, [r3, #0]
			IMU.ACC.ID = BNO_RxBuffer[2];
 80017e6:	4b74      	ldr	r3, [pc, #464]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80017e8:	789a      	ldrb	r2, [r3, #2]
 80017ea:	4b74      	ldr	r3, [pc, #464]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 80017ec:	721a      	strb	r2, [r3, #8]
			IMU.MAG.ID = BNO_RxBuffer[3];
 80017ee:	4b72      	ldr	r3, [pc, #456]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80017f0:	78da      	ldrb	r2, [r3, #3]
 80017f2:	4b72      	ldr	r3, [pc, #456]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 80017f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			IMU.GYR.ID = BNO_RxBuffer[4];
 80017f8:	4b6f      	ldr	r3, [pc, #444]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80017fa:	791a      	ldrb	r2, [r3, #4]
 80017fc:	4b6f      	ldr	r3, [pc, #444]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 80017fe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			BNO_ErrorHandler = ReadSucces;
 8001802:	4b6f      	ldr	r3, [pc, #444]	@ (80019c0 <BNO_Page0Adress+0x2a8>)
 8001804:	220b      	movs	r2, #11
 8001806:	701a      	strb	r2, [r3, #0]
			break;
 8001808:	e1d7      	b.n	8001bba <BNO_Page0Adress+0x4a2>
			IMU.Page = BNO_RxBuffer[1];
 800180a:	4b6b      	ldr	r3, [pc, #428]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800180c:	785a      	ldrb	r2, [r3, #1]
 800180e:	4b6b      	ldr	r3, [pc, #428]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001810:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			BNO_ErrorHandler = ReadSucces;
 8001814:	4b6a      	ldr	r3, [pc, #424]	@ (80019c0 <BNO_Page0Adress+0x2a8>)
 8001816:	220b      	movs	r2, #11
 8001818:	701a      	strb	r2, [r3, #0]
			break;
 800181a:	e1ce      	b.n	8001bba <BNO_Page0Adress+0x4a2>
			IMU.Unit_Select = BNO_RxBuffer[1];
 800181c:	4b66      	ldr	r3, [pc, #408]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800181e:	785a      	ldrb	r2, [r3, #1]
 8001820:	4b66      	ldr	r3, [pc, #408]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001822:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
			BNO_ErrorHandler = ReadSucces;
 8001826:	4b66      	ldr	r3, [pc, #408]	@ (80019c0 <BNO_Page0Adress+0x2a8>)
 8001828:	220b      	movs	r2, #11
 800182a:	701a      	strb	r2, [r3, #0]
			break;
 800182c:	e1c5      	b.n	8001bba <BNO_Page0Adress+0x4a2>
			IMU.System_Status = BNO_RxBuffer[1];
 800182e:	4b62      	ldr	r3, [pc, #392]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001830:	785a      	ldrb	r2, [r3, #1]
 8001832:	4b62      	ldr	r3, [pc, #392]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001834:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
			BNO_ErrorHandler = ReadSucces;
 8001838:	4b61      	ldr	r3, [pc, #388]	@ (80019c0 <BNO_Page0Adress+0x2a8>)
 800183a:	220b      	movs	r2, #11
 800183c:	701a      	strb	r2, [r3, #0]
			break;
 800183e:	e1bc      	b.n	8001bba <BNO_Page0Adress+0x4a2>
			IMU.Op_Mode = BNO_RxBuffer[1];
 8001840:	4b5d      	ldr	r3, [pc, #372]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001842:	785a      	ldrb	r2, [r3, #1]
 8001844:	4b5d      	ldr	r3, [pc, #372]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001846:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
			BNO_ErrorHandler = ReadSucces;
 800184a:	4b5d      	ldr	r3, [pc, #372]	@ (80019c0 <BNO_Page0Adress+0x2a8>)
 800184c:	220b      	movs	r2, #11
 800184e:	701a      	strb	r2, [r3, #0]
			break;
 8001850:	e1b3      	b.n	8001bba <BNO_Page0Adress+0x4a2>
			IMU.CalSatus.Full = BNO_RxBuffer[1];
 8001852:	4b59      	ldr	r3, [pc, #356]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001854:	785a      	ldrb	r2, [r3, #1]
 8001856:	4b59      	ldr	r3, [pc, #356]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001858:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
			IMU.CalSatus.Sys = (BNO_RxBuffer[1] >> 6) & 0x03;
 800185c:	4b56      	ldr	r3, [pc, #344]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800185e:	785b      	ldrb	r3, [r3, #1]
 8001860:	099b      	lsrs	r3, r3, #6
 8001862:	b2da      	uxtb	r2, r3
 8001864:	4b55      	ldr	r3, [pc, #340]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001866:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
			IMU.CalSatus.Gyr = (BNO_RxBuffer[1] >> 4) & 0x03;
 800186a:	4b53      	ldr	r3, [pc, #332]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800186c:	785b      	ldrb	r3, [r3, #1]
 800186e:	091b      	lsrs	r3, r3, #4
 8001870:	b2db      	uxtb	r3, r3
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	b2da      	uxtb	r2, r3
 8001878:	4b50      	ldr	r3, [pc, #320]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 800187a:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
			IMU.CalSatus.Acc = (BNO_RxBuffer[1] >> 2) & 0x03;
 800187e:	4b4e      	ldr	r3, [pc, #312]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001880:	785b      	ldrb	r3, [r3, #1]
 8001882:	089b      	lsrs	r3, r3, #2
 8001884:	b2db      	uxtb	r3, r3
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	b2da      	uxtb	r2, r3
 800188c:	4b4b      	ldr	r3, [pc, #300]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 800188e:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
			IMU.CalSatus.Mag = BNO_RxBuffer[1] & 0x03;
 8001892:	4b49      	ldr	r3, [pc, #292]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001894:	785b      	ldrb	r3, [r3, #1]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	b2da      	uxtb	r2, r3
 800189c:	4b47      	ldr	r3, [pc, #284]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 800189e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
			BNO_ErrorHandler = ReadSucces;
 80018a2:	4b47      	ldr	r3, [pc, #284]	@ (80019c0 <BNO_Page0Adress+0x2a8>)
 80018a4:	220b      	movs	r2, #11
 80018a6:	701a      	strb	r2, [r3, #0]
			break;
 80018a8:	e187      	b.n	8001bba <BNO_Page0Adress+0x4a2>
			IMU.Calibration_Data.offset.accel.x = (int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1]);
 80018aa:	4b43      	ldr	r3, [pc, #268]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80018ac:	789b      	ldrb	r3, [r3, #2]
 80018ae:	021b      	lsls	r3, r3, #8
 80018b0:	b21a      	sxth	r2, r3
 80018b2:	4b41      	ldr	r3, [pc, #260]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80018b4:	785b      	ldrb	r3, [r3, #1]
 80018b6:	b21b      	sxth	r3, r3
 80018b8:	4313      	orrs	r3, r2
 80018ba:	b21a      	sxth	r2, r3
 80018bc:	4b3f      	ldr	r3, [pc, #252]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 80018be:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
			IMU.Calibration_Data.offset.accel.y = (int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3]);
 80018c2:	4b3d      	ldr	r3, [pc, #244]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80018c4:	791b      	ldrb	r3, [r3, #4]
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	b21a      	sxth	r2, r3
 80018ca:	4b3b      	ldr	r3, [pc, #236]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80018cc:	78db      	ldrb	r3, [r3, #3]
 80018ce:	b21b      	sxth	r3, r3
 80018d0:	4313      	orrs	r3, r2
 80018d2:	b21a      	sxth	r2, r3
 80018d4:	4b39      	ldr	r3, [pc, #228]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 80018d6:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
			IMU.Calibration_Data.offset.accel.z = (int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5]);
 80018da:	4b37      	ldr	r3, [pc, #220]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80018dc:	799b      	ldrb	r3, [r3, #6]
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	b21a      	sxth	r2, r3
 80018e2:	4b35      	ldr	r3, [pc, #212]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80018e4:	795b      	ldrb	r3, [r3, #5]
 80018e6:	b21b      	sxth	r3, r3
 80018e8:	4313      	orrs	r3, r2
 80018ea:	b21a      	sxth	r2, r3
 80018ec:	4b33      	ldr	r3, [pc, #204]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 80018ee:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
			IMU.Calibration_Data.offset.mag.x = (int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7]);
 80018f2:	4b31      	ldr	r3, [pc, #196]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80018f4:	7a1b      	ldrb	r3, [r3, #8]
 80018f6:	021b      	lsls	r3, r3, #8
 80018f8:	b21a      	sxth	r2, r3
 80018fa:	4b2f      	ldr	r3, [pc, #188]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80018fc:	79db      	ldrb	r3, [r3, #7]
 80018fe:	b21b      	sxth	r3, r3
 8001900:	4313      	orrs	r3, r2
 8001902:	b21a      	sxth	r2, r3
 8001904:	4b2d      	ldr	r3, [pc, #180]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001906:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
			IMU.Calibration_Data.offset.mag.y = (int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9]);
 800190a:	4b2b      	ldr	r3, [pc, #172]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800190c:	7a9b      	ldrb	r3, [r3, #10]
 800190e:	021b      	lsls	r3, r3, #8
 8001910:	b21a      	sxth	r2, r3
 8001912:	4b29      	ldr	r3, [pc, #164]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001914:	7a5b      	ldrb	r3, [r3, #9]
 8001916:	b21b      	sxth	r3, r3
 8001918:	4313      	orrs	r3, r2
 800191a:	b21a      	sxth	r2, r3
 800191c:	4b27      	ldr	r3, [pc, #156]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 800191e:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
			IMU.Calibration_Data.offset.mag.z = (int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11]);
 8001922:	4b25      	ldr	r3, [pc, #148]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001924:	7b1b      	ldrb	r3, [r3, #12]
 8001926:	021b      	lsls	r3, r3, #8
 8001928:	b21a      	sxth	r2, r3
 800192a:	4b23      	ldr	r3, [pc, #140]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800192c:	7adb      	ldrb	r3, [r3, #11]
 800192e:	b21b      	sxth	r3, r3
 8001930:	4313      	orrs	r3, r2
 8001932:	b21a      	sxth	r2, r3
 8001934:	4b21      	ldr	r3, [pc, #132]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001936:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
			IMU.Calibration_Data.offset.gyro.x = (int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13]);
 800193a:	4b1f      	ldr	r3, [pc, #124]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800193c:	7b9b      	ldrb	r3, [r3, #14]
 800193e:	021b      	lsls	r3, r3, #8
 8001940:	b21a      	sxth	r2, r3
 8001942:	4b1d      	ldr	r3, [pc, #116]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001944:	7b5b      	ldrb	r3, [r3, #13]
 8001946:	b21b      	sxth	r3, r3
 8001948:	4313      	orrs	r3, r2
 800194a:	b21a      	sxth	r2, r3
 800194c:	4b1b      	ldr	r3, [pc, #108]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 800194e:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
			IMU.Calibration_Data.offset.gyro.y = (int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15]);
 8001952:	4b19      	ldr	r3, [pc, #100]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001954:	7c1b      	ldrb	r3, [r3, #16]
 8001956:	021b      	lsls	r3, r3, #8
 8001958:	b21a      	sxth	r2, r3
 800195a:	4b17      	ldr	r3, [pc, #92]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800195c:	7bdb      	ldrb	r3, [r3, #15]
 800195e:	b21b      	sxth	r3, r3
 8001960:	4313      	orrs	r3, r2
 8001962:	b21a      	sxth	r2, r3
 8001964:	4b15      	ldr	r3, [pc, #84]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001966:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
			IMU.Calibration_Data.offset.gyro.z = (int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17]);
 800196a:	4b13      	ldr	r3, [pc, #76]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800196c:	7c9b      	ldrb	r3, [r3, #18]
 800196e:	021b      	lsls	r3, r3, #8
 8001970:	b21a      	sxth	r2, r3
 8001972:	4b11      	ldr	r3, [pc, #68]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001974:	7c5b      	ldrb	r3, [r3, #17]
 8001976:	b21b      	sxth	r3, r3
 8001978:	4313      	orrs	r3, r2
 800197a:	b21a      	sxth	r2, r3
 800197c:	4b0f      	ldr	r3, [pc, #60]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 800197e:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
			IMU.Calibration_Data.radius.accel = (uint16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19]);
 8001982:	4b0d      	ldr	r3, [pc, #52]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001984:	7d1b      	ldrb	r3, [r3, #20]
 8001986:	021b      	lsls	r3, r3, #8
 8001988:	b21a      	sxth	r2, r3
 800198a:	4b0b      	ldr	r3, [pc, #44]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800198c:	7cdb      	ldrb	r3, [r3, #19]
 800198e:	b21b      	sxth	r3, r3
 8001990:	4313      	orrs	r3, r2
 8001992:	b21b      	sxth	r3, r3
 8001994:	b29a      	uxth	r2, r3
 8001996:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001998:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
			IMU.Calibration_Data.radius.mag   = (uint16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21]);
 800199c:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800199e:	7d9b      	ldrb	r3, [r3, #22]
 80019a0:	021b      	lsls	r3, r3, #8
 80019a2:	b21a      	sxth	r2, r3
 80019a4:	4b04      	ldr	r3, [pc, #16]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80019a6:	7d5b      	ldrb	r3, [r3, #21]
 80019a8:	b21b      	sxth	r3, r3
 80019aa:	4313      	orrs	r3, r2
 80019ac:	b21b      	sxth	r3, r3
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	4b02      	ldr	r3, [pc, #8]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 80019b2:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
			break;
 80019b6:	e100      	b.n	8001bba <BNO_Page0Adress+0x4a2>
 80019b8:	24000304 	.word	0x24000304
 80019bc:	24000410 	.word	0x24000410
 80019c0:	24000405 	.word	0x24000405
			IMU.ACC.x = ((double)((int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1])))/100;
 80019c4:	4b82      	ldr	r3, [pc, #520]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 80019c6:	789b      	ldrb	r3, [r3, #2]
 80019c8:	021b      	lsls	r3, r3, #8
 80019ca:	b21a      	sxth	r2, r3
 80019cc:	4b80      	ldr	r3, [pc, #512]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 80019ce:	785b      	ldrb	r3, [r3, #1]
 80019d0:	b21b      	sxth	r3, r3
 80019d2:	4313      	orrs	r3, r2
 80019d4:	b21b      	sxth	r3, r3
 80019d6:	ee07 3a90 	vmov	s15, r3
 80019da:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80019de:	ed9f 5b7a 	vldr	d5, [pc, #488]	@ 8001bc8 <BNO_Page0Adress+0x4b0>
 80019e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80019e6:	4b7b      	ldr	r3, [pc, #492]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 80019e8:	ed83 7b04 	vstr	d7, [r3, #16]
			IMU.ACC.y = ((double)((int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3])))/100;
 80019ec:	4b78      	ldr	r3, [pc, #480]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 80019ee:	791b      	ldrb	r3, [r3, #4]
 80019f0:	021b      	lsls	r3, r3, #8
 80019f2:	b21a      	sxth	r2, r3
 80019f4:	4b76      	ldr	r3, [pc, #472]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 80019f6:	78db      	ldrb	r3, [r3, #3]
 80019f8:	b21b      	sxth	r3, r3
 80019fa:	4313      	orrs	r3, r2
 80019fc:	b21b      	sxth	r3, r3
 80019fe:	ee07 3a90 	vmov	s15, r3
 8001a02:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a06:	ed9f 5b70 	vldr	d5, [pc, #448]	@ 8001bc8 <BNO_Page0Adress+0x4b0>
 8001a0a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a0e:	4b71      	ldr	r3, [pc, #452]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001a10:	ed83 7b06 	vstr	d7, [r3, #24]
			IMU.ACC.z = ((double)((int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5])))/100;
 8001a14:	4b6e      	ldr	r3, [pc, #440]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001a16:	799b      	ldrb	r3, [r3, #6]
 8001a18:	021b      	lsls	r3, r3, #8
 8001a1a:	b21a      	sxth	r2, r3
 8001a1c:	4b6c      	ldr	r3, [pc, #432]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001a1e:	795b      	ldrb	r3, [r3, #5]
 8001a20:	b21b      	sxth	r3, r3
 8001a22:	4313      	orrs	r3, r2
 8001a24:	b21b      	sxth	r3, r3
 8001a26:	ee07 3a90 	vmov	s15, r3
 8001a2a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a2e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8001bc8 <BNO_Page0Adress+0x4b0>
 8001a32:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a36:	4b67      	ldr	r3, [pc, #412]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001a38:	ed83 7b08 	vstr	d7, [r3, #32]
			IMU.MAG.x = ((double)((int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7])))/16;
 8001a3c:	4b64      	ldr	r3, [pc, #400]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001a3e:	7a1b      	ldrb	r3, [r3, #8]
 8001a40:	021b      	lsls	r3, r3, #8
 8001a42:	b21a      	sxth	r2, r3
 8001a44:	4b62      	ldr	r3, [pc, #392]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001a46:	79db      	ldrb	r3, [r3, #7]
 8001a48:	b21b      	sxth	r3, r3
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	b21b      	sxth	r3, r3
 8001a4e:	ee07 3a90 	vmov	s15, r3
 8001a52:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a56:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001a5a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a5e:	4b5d      	ldr	r3, [pc, #372]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001a60:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
			IMU.MAG.y = ((double)((int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9])))/16;
 8001a64:	4b5a      	ldr	r3, [pc, #360]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001a66:	7a9b      	ldrb	r3, [r3, #10]
 8001a68:	021b      	lsls	r3, r3, #8
 8001a6a:	b21a      	sxth	r2, r3
 8001a6c:	4b58      	ldr	r3, [pc, #352]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001a6e:	7a5b      	ldrb	r3, [r3, #9]
 8001a70:	b21b      	sxth	r3, r3
 8001a72:	4313      	orrs	r3, r2
 8001a74:	b21b      	sxth	r3, r3
 8001a76:	ee07 3a90 	vmov	s15, r3
 8001a7a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a7e:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001a82:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a86:	4b53      	ldr	r3, [pc, #332]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001a88:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
			IMU.MAG.z = ((double)((int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11])))/16;
 8001a8c:	4b50      	ldr	r3, [pc, #320]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001a8e:	7b1b      	ldrb	r3, [r3, #12]
 8001a90:	021b      	lsls	r3, r3, #8
 8001a92:	b21a      	sxth	r2, r3
 8001a94:	4b4e      	ldr	r3, [pc, #312]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001a96:	7adb      	ldrb	r3, [r3, #11]
 8001a98:	b21b      	sxth	r3, r3
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	b21b      	sxth	r3, r3
 8001a9e:	ee07 3a90 	vmov	s15, r3
 8001aa2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001aa6:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001aaa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001aae:	4b49      	ldr	r3, [pc, #292]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001ab0:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
			IMU.GYR.x = ((double)((int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13])))/16;
 8001ab4:	4b46      	ldr	r3, [pc, #280]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001ab6:	7b9b      	ldrb	r3, [r3, #14]
 8001ab8:	021b      	lsls	r3, r3, #8
 8001aba:	b21a      	sxth	r2, r3
 8001abc:	4b44      	ldr	r3, [pc, #272]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001abe:	7b5b      	ldrb	r3, [r3, #13]
 8001ac0:	b21b      	sxth	r3, r3
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	b21b      	sxth	r3, r3
 8001ac6:	ee07 3a90 	vmov	s15, r3
 8001aca:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001ace:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001ad2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ad6:	4b3f      	ldr	r3, [pc, #252]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001ad8:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
			IMU.GYR.y = -((double)((int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15])))/16;
 8001adc:	4b3c      	ldr	r3, [pc, #240]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001ade:	7c1b      	ldrb	r3, [r3, #16]
 8001ae0:	021b      	lsls	r3, r3, #8
 8001ae2:	b21a      	sxth	r2, r3
 8001ae4:	4b3a      	ldr	r3, [pc, #232]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001ae6:	7bdb      	ldrb	r3, [r3, #15]
 8001ae8:	b21b      	sxth	r3, r3
 8001aea:	4313      	orrs	r3, r2
 8001aec:	b21b      	sxth	r3, r3
 8001aee:	ee07 3a90 	vmov	s15, r3
 8001af2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001af6:	eeb1 6b47 	vneg.f64	d6, d7
 8001afa:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001afe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b02:	4b34      	ldr	r3, [pc, #208]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001b04:	ed83 7b16 	vstr	d7, [r3, #88]	@ 0x58
			IMU.GYR.z = -((double)((int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17])))/16;
 8001b08:	4b31      	ldr	r3, [pc, #196]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001b0a:	7c9b      	ldrb	r3, [r3, #18]
 8001b0c:	021b      	lsls	r3, r3, #8
 8001b0e:	b21a      	sxth	r2, r3
 8001b10:	4b2f      	ldr	r3, [pc, #188]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001b12:	7c5b      	ldrb	r3, [r3, #17]
 8001b14:	b21b      	sxth	r3, r3
 8001b16:	4313      	orrs	r3, r2
 8001b18:	b21b      	sxth	r3, r3
 8001b1a:	ee07 3a90 	vmov	s15, r3
 8001b1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001b22:	eeb1 6b47 	vneg.f64	d6, d7
 8001b26:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001b2a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b2e:	4b29      	ldr	r3, [pc, #164]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001b30:	ed83 7b18 	vstr	d7, [r3, #96]	@ 0x60
			IMU.Heading = ((double)((int16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19])))/16;
 8001b34:	4b26      	ldr	r3, [pc, #152]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001b36:	7d1b      	ldrb	r3, [r3, #20]
 8001b38:	021b      	lsls	r3, r3, #8
 8001b3a:	b21a      	sxth	r2, r3
 8001b3c:	4b24      	ldr	r3, [pc, #144]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001b3e:	7cdb      	ldrb	r3, [r3, #19]
 8001b40:	b21b      	sxth	r3, r3
 8001b42:	4313      	orrs	r3, r2
 8001b44:	b21b      	sxth	r3, r3
 8001b46:	ee07 3a90 	vmov	s15, r3
 8001b4a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001b4e:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001b52:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b56:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001b58:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68
			IMU.Pitch = ((double)((int16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21])))/16;
 8001b5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001b5e:	7d9b      	ldrb	r3, [r3, #22]
 8001b60:	021b      	lsls	r3, r3, #8
 8001b62:	b21a      	sxth	r2, r3
 8001b64:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001b66:	7d5b      	ldrb	r3, [r3, #21]
 8001b68:	b21b      	sxth	r3, r3
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	b21b      	sxth	r3, r3
 8001b6e:	ee07 3a90 	vmov	s15, r3
 8001b72:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001b76:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001b7a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b7e:	4b15      	ldr	r3, [pc, #84]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001b80:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70
			IMU.Roll = ((double)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;
 8001b84:	4b12      	ldr	r3, [pc, #72]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001b86:	7e1b      	ldrb	r3, [r3, #24]
 8001b88:	021b      	lsls	r3, r3, #8
 8001b8a:	b21a      	sxth	r2, r3
 8001b8c:	4b10      	ldr	r3, [pc, #64]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001b8e:	7ddb      	ldrb	r3, [r3, #23]
 8001b90:	b21b      	sxth	r3, r3
 8001b92:	4313      	orrs	r3, r2
 8001b94:	b21b      	sxth	r3, r3
 8001b96:	ee07 3a90 	vmov	s15, r3
 8001b9a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001b9e:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001ba2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001ba8:	ed83 7b1e 	vstr	d7, [r3, #120]	@ 0x78
			BNO_ErrorHandler = ReadSucces;
 8001bac:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd8 <BNO_Page0Adress+0x4c0>)
 8001bae:	220b      	movs	r2, #11
 8001bb0:	701a      	strb	r2, [r3, #0]
			break;
 8001bb2:	e002      	b.n	8001bba <BNO_Page0Adress+0x4a2>
			break;
 8001bb4:	bf00      	nop
 8001bb6:	e000      	b.n	8001bba <BNO_Page0Adress+0x4a2>
			if(BNO_RxBuffer[1] != 160) return;
 8001bb8:	bf00      	nop
	}
}
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	f3af 8000 	nop.w
 8001bc8:	00000000 	.word	0x00000000
 8001bcc:	40590000 	.word	0x40590000
 8001bd0:	24000304 	.word	0x24000304
 8001bd4:	24000410 	.word	0x24000410
 8001bd8:	24000405 	.word	0x24000405

08001bdc <BNO_Page1Adress>:

void BNO_Page1Adress(void){
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 8001be0:	4b09      	ldr	r3, [pc, #36]	@ (8001c08 <BNO_Page1Adress+0x2c>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b07      	cmp	r3, #7
 8001be6:	d108      	bne.n	8001bfa <BNO_Page1Adress+0x1e>
		case BNO055_PAGE_ID:
			IMU.Page = BNO_RxBuffer[1];
 8001be8:	4b07      	ldr	r3, [pc, #28]	@ (8001c08 <BNO_Page1Adress+0x2c>)
 8001bea:	785a      	ldrb	r2, [r3, #1]
 8001bec:	4b07      	ldr	r3, [pc, #28]	@ (8001c0c <BNO_Page1Adress+0x30>)
 8001bee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			BNO_ErrorHandler = ReadSucces;
 8001bf2:	4b07      	ldr	r3, [pc, #28]	@ (8001c10 <BNO_Page1Adress+0x34>)
 8001bf4:	220b      	movs	r2, #11
 8001bf6:	701a      	strb	r2, [r3, #0]
			break;
 8001bf8:	e000      	b.n	8001bfc <BNO_Page1Adress+0x20>

		default:
			break;
 8001bfa:	bf00      	nop
	}
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	24000304 	.word	0x24000304
 8001c0c:	24000410 	.word	0x24000410
 8001c10:	24000405 	.word	0x24000405

08001c14 <BNO_EmptyingBuffer>:

void BNO_EmptyingBuffer(void){
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
	switch (IMU.Page) {
 8001c18:	4b0a      	ldr	r3, [pc, #40]	@ (8001c44 <BNO_EmptyingBuffer+0x30>)
 8001c1a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d002      	beq.n	8001c28 <BNO_EmptyingBuffer+0x14>
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d003      	beq.n	8001c2e <BNO_EmptyingBuffer+0x1a>
			break;
		case 1:
			BNO_Page1Adress();
			break;
		default:
			break;
 8001c26:	e005      	b.n	8001c34 <BNO_EmptyingBuffer+0x20>
			BNO_Page0Adress();
 8001c28:	f7ff fd76 	bl	8001718 <BNO_Page0Adress>
			break;
 8001c2c:	e002      	b.n	8001c34 <BNO_EmptyingBuffer+0x20>
			BNO_Page1Adress();
 8001c2e:	f7ff ffd5 	bl	8001bdc <BNO_Page1Adress>
			break;
 8001c32:	bf00      	nop
	}
	memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 8001c34:	22ff      	movs	r2, #255	@ 0xff
 8001c36:	2100      	movs	r1, #0
 8001c38:	4803      	ldr	r0, [pc, #12]	@ (8001c48 <BNO_EmptyingBuffer+0x34>)
 8001c3a:	f014 ffa4 	bl	8016b86 <memset>
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	24000410 	.word	0x24000410
 8001c48:	24000304 	.word	0x24000304

08001c4c <BNO_SWReset>:
		default:
			break;
	}
}

void BNO_SWReset(void){
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
	BNO_Write(BNO055_SYS_TRIGGER,0x20);
 8001c50:	2120      	movs	r1, #32
 8001c52:	203f      	movs	r0, #63	@ 0x3f
 8001c54:	f7ff fcca 	bl	80015ec <BNO_Write>
	bno055_delay(70);
 8001c58:	2046      	movs	r0, #70	@ 0x46
 8001c5a:	f7ff fc8d 	bl	8001578 <bno055_delay>
	IMU.ID = 0x00;
 8001c5e:	4b04      	ldr	r3, [pc, #16]	@ (8001c70 <BNO_SWReset+0x24>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
	BNO_CurrentState = Configuration;
 8001c64:	4b03      	ldr	r3, [pc, #12]	@ (8001c74 <BNO_SWReset+0x28>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	701a      	strb	r2, [r3, #0]
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	24000410 	.word	0x24000410
 8001c74:	24000408 	.word	0x24000408

08001c78 <bno055_setOperationMode>:

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	71fb      	strb	r3, [r7, #7]
  BNO_Write(BNO055_OPR_MODE, mode);
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	4619      	mov	r1, r3
 8001c86:	203d      	movs	r0, #61	@ 0x3d
 8001c88:	f7ff fcb0 	bl	80015ec <BNO_Write>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d103      	bne.n	8001c9a <bno055_setOperationMode+0x22>
    bno055_delay(5);
 8001c92:	2005      	movs	r0, #5
 8001c94:	f7ff fc70 	bl	8001578 <bno055_delay>
  } else {
    bno055_delay(3);
  }
}
 8001c98:	e002      	b.n	8001ca0 <bno055_setOperationMode+0x28>
    bno055_delay(3);
 8001c9a:	2003      	movs	r0, #3
 8001c9c:	f7ff fc6c 	bl	8001578 <bno055_delay>
}
 8001ca0:	bf00      	nop
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001cac:	2000      	movs	r0, #0
 8001cae:	f7ff ffe3 	bl	8001c78 <bno055_setOperationMode>
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001cba:	200c      	movs	r0, #12
 8001cbc:	f7ff ffdc 	bl	8001c78 <bno055_setOperationMode>
}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <BNO_GetCalibrationData>:

void BNO_GetCalibrationData(void){
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_OFFSET_X_LSB, 22);
 8001cc8:	2116      	movs	r1, #22
 8001cca:	2055      	movs	r0, #85	@ 0x55
 8001ccc:	f7ff fc68 	bl	80015a0 <BNO_Read>
}
 8001cd0:	bf00      	nop
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <BNO_SetCalibrationData>:

void BNO_SetCalibrationData(void){
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
	uint8_t buffer[22];

	  memcpy(&IMU.Calibration_Data.offset.accel, buffer, 6);
 8001cda:	463b      	mov	r3, r7
 8001cdc:	2206      	movs	r2, #6
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4814      	ldr	r0, [pc, #80]	@ (8001d34 <BNO_SetCalibrationData+0x60>)
 8001ce2:	f014 ffea 	bl	8016cba <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.mag, buffer + 6, 6);
 8001ce6:	463b      	mov	r3, r7
 8001ce8:	3306      	adds	r3, #6
 8001cea:	2206      	movs	r2, #6
 8001cec:	4619      	mov	r1, r3
 8001cee:	4812      	ldr	r0, [pc, #72]	@ (8001d38 <BNO_SetCalibrationData+0x64>)
 8001cf0:	f014 ffe3 	bl	8016cba <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.gyro, buffer + 12, 6);
 8001cf4:	463b      	mov	r3, r7
 8001cf6:	330c      	adds	r3, #12
 8001cf8:	2206      	movs	r2, #6
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	480f      	ldr	r0, [pc, #60]	@ (8001d3c <BNO_SetCalibrationData+0x68>)
 8001cfe:	f014 ffdc 	bl	8016cba <memcpy>
	  memcpy(&IMU.Calibration_Data.radius.accel, buffer + 18, 2);
 8001d02:	463b      	mov	r3, r7
 8001d04:	3312      	adds	r3, #18
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d40 <BNO_SetCalibrationData+0x6c>)
 8001d0c:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
	  memcpy(&IMU.Calibration_Data.radius.mag, buffer + 20, 2);
 8001d10:	463b      	mov	r3, r7
 8001d12:	3314      	adds	r3, #20
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	4b09      	ldr	r3, [pc, #36]	@ (8001d40 <BNO_SetCalibrationData+0x6c>)
 8001d1a:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

	BNO_Write_MB(BNO055_ACC_OFFSET_X_LSB, 22, buffer);
 8001d1e:	463b      	mov	r3, r7
 8001d20:	461a      	mov	r2, r3
 8001d22:	2116      	movs	r1, #22
 8001d24:	2055      	movs	r0, #85	@ 0x55
 8001d26:	f7ff fc83 	bl	8001630 <BNO_Write_MB>
}
 8001d2a:	bf00      	nop
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	240004a6 	.word	0x240004a6
 8001d38:	240004a0 	.word	0x240004a0
 8001d3c:	2400049a 	.word	0x2400049a
 8001d40:	24000410 	.word	0x24000410

08001d44 <BNO_Init>:

void BNO_Init(void){
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, SET);
 8001d48:	2201      	movs	r2, #1
 8001d4a:	2104      	movs	r1, #4
 8001d4c:	4808      	ldr	r0, [pc, #32]	@ (8001d70 <BNO_Init+0x2c>)
 8001d4e:	f007 fa4f 	bl	80091f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IMU_BOOT_GPIO_Port, IMU_BOOT_Pin, SET);
 8001d52:	2201      	movs	r2, #1
 8001d54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d58:	4806      	ldr	r0, [pc, #24]	@ (8001d74 <BNO_Init+0x30>)
 8001d5a:	f007 fa49 	bl	80091f0 <HAL_GPIO_WritePin>

	bno055_delay(100);
 8001d5e:	2064      	movs	r0, #100	@ 0x64
 8001d60:	f7ff fc0a 	bl	8001578 <bno055_delay>

	BNO_CurrentState = Reset;
 8001d64:	4b04      	ldr	r3, [pc, #16]	@ (8001d78 <BNO_Init+0x34>)
 8001d66:	2204      	movs	r2, #4
 8001d68:	701a      	strb	r2, [r3, #0]
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	58020c00 	.word	0x58020c00
 8001d74:	58020400 	.word	0x58020400
 8001d78:	24000408 	.word	0x24000408

08001d7c <BNO_Config>:

void BNO_Config(void){
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
	static uint8_t ConfigFlag = 0;

	switch (ConfigFlag) {
 8001d80:	4b20      	ldr	r3, [pc, #128]	@ (8001e04 <BNO_Config+0x88>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b03      	cmp	r3, #3
 8001d86:	d839      	bhi.n	8001dfc <BNO_Config+0x80>
 8001d88:	a201      	add	r2, pc, #4	@ (adr r2, 8001d90 <BNO_Config+0x14>)
 8001d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d8e:	bf00      	nop
 8001d90:	08001da1 	.word	0x08001da1
 8001d94:	08001db1 	.word	0x08001db1
 8001d98:	08001dbd 	.word	0x08001dbd
 8001d9c:	08001ddf 	.word	0x08001ddf
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 8001da0:	2100      	movs	r1, #0
 8001da2:	203f      	movs	r0, #63	@ 0x3f
 8001da4:	f7ff fc22 	bl	80015ec <BNO_Write>
			ConfigFlag = 1;
 8001da8:	4b16      	ldr	r3, [pc, #88]	@ (8001e04 <BNO_Config+0x88>)
 8001daa:	2201      	movs	r2, #1
 8001dac:	701a      	strb	r2, [r3, #0]
			break;
 8001dae:	e026      	b.n	8001dfe <BNO_Config+0x82>
		case 1:
			bno055_setOperationModeConfig();
 8001db0:	f7ff ff7a 	bl	8001ca8 <bno055_setOperationModeConfig>
			ConfigFlag = 2;
 8001db4:	4b13      	ldr	r3, [pc, #76]	@ (8001e04 <BNO_Config+0x88>)
 8001db6:	2202      	movs	r2, #2
 8001db8:	701a      	strb	r2, [r3, #0]
			break;
 8001dba:	e020      	b.n	8001dfe <BNO_Config+0x82>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	203d      	movs	r0, #61	@ 0x3d
 8001dc0:	f7ff fbee 	bl	80015a0 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 8001dc4:	4b10      	ldr	r3, [pc, #64]	@ (8001e08 <BNO_Config+0x8c>)
 8001dc6:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d103      	bne.n	8001dd6 <BNO_Config+0x5a>
				ConfigFlag = 3;
 8001dce:	4b0d      	ldr	r3, [pc, #52]	@ (8001e04 <BNO_Config+0x88>)
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	701a      	strb	r2, [r3, #0]
			}
			else ConfigFlag = 1;
			break;
 8001dd4:	e013      	b.n	8001dfe <BNO_Config+0x82>
			else ConfigFlag = 1;
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <BNO_Config+0x88>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	701a      	strb	r2, [r3, #0]
			break;
 8001ddc:	e00f      	b.n	8001dfe <BNO_Config+0x82>
		case 3:
			BNO_Read(BNO055_CHIP_ID, 4);
 8001dde:	2104      	movs	r1, #4
 8001de0:	2000      	movs	r0, #0
 8001de2:	f7ff fbdd 	bl	80015a0 <BNO_Read>

			if(IMU.ID == BNO055_ID){
 8001de6:	4b08      	ldr	r3, [pc, #32]	@ (8001e08 <BNO_Config+0x8c>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2ba0      	cmp	r3, #160	@ 0xa0
 8001dec:	d102      	bne.n	8001df4 <BNO_Config+0x78>
				BNO_CurrentState = Calibration;
 8001dee:	4b07      	ldr	r3, [pc, #28]	@ (8001e0c <BNO_Config+0x90>)
 8001df0:	2202      	movs	r2, #2
 8001df2:	701a      	strb	r2, [r3, #0]
			}
			ConfigFlag = 0;
 8001df4:	4b03      	ldr	r3, [pc, #12]	@ (8001e04 <BNO_Config+0x88>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
			break;
 8001dfa:	e000      	b.n	8001dfe <BNO_Config+0x82>
		default:
			break;
 8001dfc:	bf00      	nop
	}

}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	240004b0 	.word	0x240004b0
 8001e08:	24000410 	.word	0x24000410
 8001e0c:	24000408 	.word	0x24000408

08001e10 <BNO_CalibrationStatus>:

void BNO_CalibrationStatus(void){
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
	static uint8_t CalibrationFlag = 0;
	static uint8_t Calibrated = 1;

	switch (CalibrationFlag) {
 8001e14:	4b3d      	ldr	r3, [pc, #244]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b07      	cmp	r3, #7
 8001e1a:	d870      	bhi.n	8001efe <BNO_CalibrationStatus+0xee>
 8001e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8001e24 <BNO_CalibrationStatus+0x14>)
 8001e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e22:	bf00      	nop
 8001e24:	08001e45 	.word	0x08001e45
 8001e28:	08001e55 	.word	0x08001e55
 8001e2c:	08001e61 	.word	0x08001e61
 8001e30:	08001e99 	.word	0x08001e99
 8001e34:	08001eb3 	.word	0x08001eb3
 8001e38:	08001ebf 	.word	0x08001ebf
 8001e3c:	08001ee1 	.word	0x08001ee1
 8001e40:	08001ef3 	.word	0x08001ef3
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 8001e44:	2100      	movs	r1, #0
 8001e46:	203f      	movs	r0, #63	@ 0x3f
 8001e48:	f7ff fbd0 	bl	80015ec <BNO_Write>
			CalibrationFlag = 1;
 8001e4c:	4b2f      	ldr	r3, [pc, #188]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	701a      	strb	r2, [r3, #0]
			break;
 8001e52:	e059      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
		case 1:
			bno055_setOperationModeNDOF();
 8001e54:	f7ff ff2f 	bl	8001cb6 <bno055_setOperationModeNDOF>
			CalibrationFlag = 2;
 8001e58:	4b2c      	ldr	r3, [pc, #176]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	701a      	strb	r2, [r3, #0]
			break;
 8001e5e:	e053      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 8001e60:	2101      	movs	r1, #1
 8001e62:	203d      	movs	r0, #61	@ 0x3d
 8001e64:	f7ff fb9c 	bl	80015a0 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_NDOF){
 8001e68:	4b29      	ldr	r3, [pc, #164]	@ (8001f10 <BNO_CalibrationStatus+0x100>)
 8001e6a:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001e6e:	2b0c      	cmp	r3, #12
 8001e70:	d10e      	bne.n	8001e90 <BNO_CalibrationStatus+0x80>
				if(Calibrated){
 8001e72:	4b28      	ldr	r3, [pc, #160]	@ (8001f14 <BNO_CalibrationStatus+0x104>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d006      	beq.n	8001e88 <BNO_CalibrationStatus+0x78>
					CalibrationFlag = 0;
 8001e7a:	4b24      	ldr	r3, [pc, #144]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
					BNO_CurrentState = Operation;
 8001e80:	4b25      	ldr	r3, [pc, #148]	@ (8001f18 <BNO_CalibrationStatus+0x108>)
 8001e82:	2203      	movs	r2, #3
 8001e84:	701a      	strb	r2, [r3, #0]
				}
				else CalibrationFlag = 3;
			}
			else CalibrationFlag = 1;
			break;
 8001e86:	e03f      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
				else CalibrationFlag = 3;
 8001e88:	4b20      	ldr	r3, [pc, #128]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	701a      	strb	r2, [r3, #0]
			break;
 8001e8e:	e03b      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 1;
 8001e90:	4b1e      	ldr	r3, [pc, #120]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	701a      	strb	r2, [r3, #0]
			break;
 8001e96:	e037      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
		case 3:
			BNO_Read(BNO055_CALIB_STAT, 1);
 8001e98:	2101      	movs	r1, #1
 8001e9a:	2035      	movs	r0, #53	@ 0x35
 8001e9c:	f7ff fb80 	bl	80015a0 <BNO_Read>
			if(IMU.CalSatus.Full == 0xFF){
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f10 <BNO_CalibrationStatus+0x100>)
 8001ea2:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8001ea6:	2bff      	cmp	r3, #255	@ 0xff
 8001ea8:	d12d      	bne.n	8001f06 <BNO_CalibrationStatus+0xf6>
				CalibrationFlag = 4;
 8001eaa:	4b18      	ldr	r3, [pc, #96]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001eac:	2204      	movs	r2, #4
 8001eae:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001eb0:	e029      	b.n	8001f06 <BNO_CalibrationStatus+0xf6>
		case 4:
			bno055_setOperationModeConfig();
 8001eb2:	f7ff fef9 	bl	8001ca8 <bno055_setOperationModeConfig>
			CalibrationFlag = 5;
 8001eb6:	4b15      	ldr	r3, [pc, #84]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001eb8:	2205      	movs	r2, #5
 8001eba:	701a      	strb	r2, [r3, #0]
			break;
 8001ebc:	e024      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
		case 5:
			BNO_Read(BNO055_OPR_MODE, 1);
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	203d      	movs	r0, #61	@ 0x3d
 8001ec2:	f7ff fb6d 	bl	80015a0 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 8001ec6:	4b12      	ldr	r3, [pc, #72]	@ (8001f10 <BNO_CalibrationStatus+0x100>)
 8001ec8:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d103      	bne.n	8001ed8 <BNO_CalibrationStatus+0xc8>
				CalibrationFlag = 6;
 8001ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001ed2:	2206      	movs	r2, #6
 8001ed4:	701a      	strb	r2, [r3, #0]

			}
			else CalibrationFlag = 4;
			break;
 8001ed6:	e017      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 4;
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001eda:	2204      	movs	r2, #4
 8001edc:	701a      	strb	r2, [r3, #0]
			break;
 8001ede:	e013      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
		case 6:
			BNO_GetCalibrationData();
 8001ee0:	f7ff fef0 	bl	8001cc4 <BNO_GetCalibrationData>
			Calibrated = 1;
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f14 <BNO_CalibrationStatus+0x104>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	701a      	strb	r2, [r3, #0]
			CalibrationFlag = 1;
 8001eea:	4b08      	ldr	r3, [pc, #32]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	701a      	strb	r2, [r3, #0]
			break;
 8001ef0:	e00a      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
		case 7:
			BNO_SetCalibrationData();
 8001ef2:	f7ff feef 	bl	8001cd4 <BNO_SetCalibrationData>
			CalibrationFlag = 1;
 8001ef6:	4b05      	ldr	r3, [pc, #20]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	701a      	strb	r2, [r3, #0]
			break;
 8001efc:	e004      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
		default:
			CalibrationFlag = 0;
 8001efe:	4b03      	ldr	r3, [pc, #12]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
			break;
 8001f04:	e000      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
			break;
 8001f06:	bf00      	nop
    	BNO_CurrentState = Operation;
    }
    else bno055_setOperationModeNDOF();
    */

}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	240004b1 	.word	0x240004b1
 8001f10:	24000410 	.word	0x24000410
 8001f14:	24000000 	.word	0x24000000
 8001f18:	24000408 	.word	0x24000408

08001f1c <BNO_GetData>:

void BNO_GetData(void){
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_DATA_X_LSB,24);
 8001f20:	2118      	movs	r1, #24
 8001f22:	2008      	movs	r0, #8
 8001f24:	f7ff fb3c 	bl	80015a0 <BNO_Read>
}
 8001f28:	bf00      	nop
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <BNO_Receive>:

void BNO_Receive(uint8_t Buffer){
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
	static uint8_t MsgSize = 0;
	static uint8_t Counter = 0;

	BNO_ComsCounter = 0;
 8001f36:	4b2c      	ldr	r3, [pc, #176]	@ (8001fe8 <BNO_Receive+0xbc>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	701a      	strb	r2, [r3, #0]

	switch (BNO_Rx_Status) {
 8001f3c:	4b2b      	ldr	r3, [pc, #172]	@ (8001fec <BNO_Receive+0xc0>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2bff      	cmp	r3, #255	@ 0xff
 8001f42:	d027      	beq.n	8001f94 <BNO_Receive+0x68>
 8001f44:	2bff      	cmp	r3, #255	@ 0xff
 8001f46:	dc46      	bgt.n	8001fd6 <BNO_Receive+0xaa>
 8001f48:	2bee      	cmp	r3, #238	@ 0xee
 8001f4a:	d017      	beq.n	8001f7c <BNO_Receive+0x50>
 8001f4c:	2bee      	cmp	r3, #238	@ 0xee
 8001f4e:	dc42      	bgt.n	8001fd6 <BNO_Receive+0xaa>
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <BNO_Receive+0x2e>
 8001f54:	2bbb      	cmp	r3, #187	@ 0xbb
 8001f56:	d00a      	beq.n	8001f6e <BNO_Receive+0x42>
				BNO_EmptyingBuffer();
			}

			break;
		default:
			break;
 8001f58:	e03d      	b.n	8001fd6 <BNO_Receive+0xaa>
			if(Buffer == Read_Response || Buffer == Header) BNO_Rx_Status = Buffer;
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	2bbb      	cmp	r3, #187	@ 0xbb
 8001f5e:	d002      	beq.n	8001f66 <BNO_Receive+0x3a>
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	2bee      	cmp	r3, #238	@ 0xee
 8001f64:	d139      	bne.n	8001fda <BNO_Receive+0xae>
 8001f66:	4a21      	ldr	r2, [pc, #132]	@ (8001fec <BNO_Receive+0xc0>)
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	7013      	strb	r3, [r2, #0]
			break;
 8001f6c:	e035      	b.n	8001fda <BNO_Receive+0xae>
			MsgSize = Buffer;
 8001f6e:	4a20      	ldr	r2, [pc, #128]	@ (8001ff0 <BNO_Receive+0xc4>)
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = Emptying_Buffer;
 8001f74:	4b1d      	ldr	r3, [pc, #116]	@ (8001fec <BNO_Receive+0xc0>)
 8001f76:	22ff      	movs	r2, #255	@ 0xff
 8001f78:	701a      	strb	r2, [r3, #0]
			break;
 8001f7a:	e031      	b.n	8001fe0 <BNO_Receive+0xb4>
			BNO_ErrorHandler = Buffer;
 8001f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ff4 <BNO_Receive+0xc8>)
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = AwaitingMsg;
 8001f82:	4b1a      	ldr	r3, [pc, #104]	@ (8001fec <BNO_Receive+0xc0>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	701a      	strb	r2, [r3, #0]
			memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 8001f88:	22ff      	movs	r2, #255	@ 0xff
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	481a      	ldr	r0, [pc, #104]	@ (8001ff8 <BNO_Receive+0xcc>)
 8001f8e:	f014 fdfa 	bl	8016b86 <memset>
			break;
 8001f92:	e025      	b.n	8001fe0 <BNO_Receive+0xb4>
			BNO_RxBuffer[Counter + 1] = Buffer;
 8001f94:	4b19      	ldr	r3, [pc, #100]	@ (8001ffc <BNO_Receive+0xd0>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	4917      	ldr	r1, [pc, #92]	@ (8001ff8 <BNO_Receive+0xcc>)
 8001f9c:	79fa      	ldrb	r2, [r7, #7]
 8001f9e:	54ca      	strb	r2, [r1, r3]
			Counter++;
 8001fa0:	4b16      	ldr	r3, [pc, #88]	@ (8001ffc <BNO_Receive+0xd0>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	4b14      	ldr	r3, [pc, #80]	@ (8001ffc <BNO_Receive+0xd0>)
 8001faa:	701a      	strb	r2, [r3, #0]
			if(Counter == MsgSize){
 8001fac:	4b13      	ldr	r3, [pc, #76]	@ (8001ffc <BNO_Receive+0xd0>)
 8001fae:	781a      	ldrb	r2, [r3, #0]
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff0 <BNO_Receive+0xc4>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d112      	bne.n	8001fde <BNO_Receive+0xb2>
				Counter = 0;
 8001fb8:	4b10      	ldr	r3, [pc, #64]	@ (8001ffc <BNO_Receive+0xd0>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]
				MsgSize = 0;
 8001fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff0 <BNO_Receive+0xc4>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
				BNO_Rx_Status = AwaitingMsg;
 8001fc4:	4b09      	ldr	r3, [pc, #36]	@ (8001fec <BNO_Receive+0xc0>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
				BNO_ErrorHandler = ReadSucces;
 8001fca:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff4 <BNO_Receive+0xc8>)
 8001fcc:	220b      	movs	r2, #11
 8001fce:	701a      	strb	r2, [r3, #0]
				BNO_EmptyingBuffer();
 8001fd0:	f7ff fe20 	bl	8001c14 <BNO_EmptyingBuffer>
			break;
 8001fd4:	e003      	b.n	8001fde <BNO_Receive+0xb2>
			break;
 8001fd6:	bf00      	nop
 8001fd8:	e002      	b.n	8001fe0 <BNO_Receive+0xb4>
			break;
 8001fda:	bf00      	nop
 8001fdc:	e000      	b.n	8001fe0 <BNO_Receive+0xb4>
			break;
 8001fde:	bf00      	nop
	}
}
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	24000406 	.word	0x24000406
 8001fec:	24000404 	.word	0x24000404
 8001ff0:	240004b2 	.word	0x240004b2
 8001ff4:	24000405 	.word	0x24000405
 8001ff8:	24000304 	.word	0x24000304
 8001ffc:	240004b3 	.word	0x240004b3

08002000 <BNO_FaultManager>:

void BNO_FaultManager(void){
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
	if(BNO_ComsCounter > 3){
 8002006:	4b13      	ldr	r3, [pc, #76]	@ (8002054 <BNO_FaultManager+0x54>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b03      	cmp	r3, #3
 800200c:	d90f      	bls.n	800202e <BNO_FaultManager+0x2e>
		Reset_UART(&huart3);
 800200e:	4812      	ldr	r0, [pc, #72]	@ (8002058 <BNO_FaultManager+0x58>)
 8002010:	f003 fa74 	bl	80054fc <Reset_UART>
		BNO_Rx_Status = AwaitingMsg;
 8002014:	4b11      	ldr	r3, [pc, #68]	@ (800205c <BNO_FaultManager+0x5c>)
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 800201a:	2201      	movs	r2, #1
 800201c:	4910      	ldr	r1, [pc, #64]	@ (8002060 <BNO_FaultManager+0x60>)
 800201e:	480e      	ldr	r0, [pc, #56]	@ (8002058 <BNO_FaultManager+0x58>)
 8002020:	f00c fbec 	bl	800e7fc <HAL_UART_Receive_DMA>
		memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 8002024:	22ff      	movs	r2, #255	@ 0xff
 8002026:	2100      	movs	r1, #0
 8002028:	480e      	ldr	r0, [pc, #56]	@ (8002064 <BNO_FaultManager+0x64>)
 800202a:	f014 fdac 	bl	8016b86 <memset>
	}
	if(BNO_ErrorHandler == WRONG_START_BYTE){
 800202e:	4b0e      	ldr	r3, [pc, #56]	@ (8002068 <BNO_FaultManager+0x68>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b06      	cmp	r3, #6
 8002034:	d10a      	bne.n	800204c <BNO_FaultManager+0x4c>
		uint8_t Buffer = 0x00;
 8002036:	2300      	movs	r3, #0
 8002038:	71fb      	strb	r3, [r7, #7]

		HAL_UART_Transmit_IT(&huart3, &Buffer, 1);
 800203a:	1dfb      	adds	r3, r7, #7
 800203c:	2201      	movs	r2, #1
 800203e:	4619      	mov	r1, r3
 8002040:	4805      	ldr	r0, [pc, #20]	@ (8002058 <BNO_FaultManager+0x58>)
 8002042:	f00c fb47 	bl	800e6d4 <HAL_UART_Transmit_IT>
		BNO_ErrorHandler = 0;
 8002046:	4b08      	ldr	r3, [pc, #32]	@ (8002068 <BNO_FaultManager+0x68>)
 8002048:	2200      	movs	r2, #0
 800204a:	701a      	strb	r2, [r3, #0]
	}
}
 800204c:	bf00      	nop
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	24000406 	.word	0x24000406
 8002058:	240051fc 	.word	0x240051fc
 800205c:	24000404 	.word	0x24000404
 8002060:	24000403 	.word	0x24000403
 8002064:	24000304 	.word	0x24000304
 8002068:	24000405 	.word	0x24000405

0800206c <BNO_Tasks>:

void BNO_Tasks(void){
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
	if(BNO_DelayCounter == 0){
 8002070:	4b1b      	ldr	r3, [pc, #108]	@ (80020e0 <BNO_Tasks+0x74>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d128      	bne.n	80020ca <BNO_Tasks+0x5e>
		switch (BNO_CurrentState) {
 8002078:	4b1a      	ldr	r3, [pc, #104]	@ (80020e4 <BNO_Tasks+0x78>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b04      	cmp	r3, #4
 800207e:	d81c      	bhi.n	80020ba <BNO_Tasks+0x4e>
 8002080:	a201      	add	r2, pc, #4	@ (adr r2, 8002088 <BNO_Tasks+0x1c>)
 8002082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002086:	bf00      	nop
 8002088:	0800209d 	.word	0x0800209d
 800208c:	080020a9 	.word	0x080020a9
 8002090:	080020af 	.word	0x080020af
 8002094:	080020b5 	.word	0x080020b5
 8002098:	080020a3 	.word	0x080020a3
			case Init:
				BNO_Init();
 800209c:	f7ff fe52 	bl	8001d44 <BNO_Init>
				break;
 80020a0:	e00c      	b.n	80020bc <BNO_Tasks+0x50>
			case Reset:
				BNO_SWReset();
 80020a2:	f7ff fdd3 	bl	8001c4c <BNO_SWReset>
			break;
 80020a6:	e009      	b.n	80020bc <BNO_Tasks+0x50>
			case Configuration:
				BNO_Config();
 80020a8:	f7ff fe68 	bl	8001d7c <BNO_Config>
				break;
 80020ac:	e006      	b.n	80020bc <BNO_Tasks+0x50>
			case Calibration:
				BNO_CalibrationStatus();
 80020ae:	f7ff feaf 	bl	8001e10 <BNO_CalibrationStatus>
				break;
 80020b2:	e003      	b.n	80020bc <BNO_Tasks+0x50>
			case Operation:
				BNO_GetData();
 80020b4:	f7ff ff32 	bl	8001f1c <BNO_GetData>
				break;
 80020b8:	e000      	b.n	80020bc <BNO_Tasks+0x50>

			default:
				break;
 80020ba:	bf00      	nop
		}
		++BNO_ComsCounter;
 80020bc:	4b0a      	ldr	r3, [pc, #40]	@ (80020e8 <BNO_Tasks+0x7c>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	3301      	adds	r3, #1
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	4b08      	ldr	r3, [pc, #32]	@ (80020e8 <BNO_Tasks+0x7c>)
 80020c6:	701a      	strb	r2, [r3, #0]
 80020c8:	e005      	b.n	80020d6 <BNO_Tasks+0x6a>
	}
	else{
		--BNO_DelayCounter;
 80020ca:	4b05      	ldr	r3, [pc, #20]	@ (80020e0 <BNO_Tasks+0x74>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	4b03      	ldr	r3, [pc, #12]	@ (80020e0 <BNO_Tasks+0x74>)
 80020d4:	701a      	strb	r2, [r3, #0]
	}
	BNO_FaultManager();
 80020d6:	f7ff ff93 	bl	8002000 <BNO_FaultManager>
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	24000407 	.word	0x24000407
 80020e4:	24000408 	.word	0x24000408
 80020e8:	24000406 	.word	0x24000406

080020ec <LED_blink>:

		.G_LED.LED_GPIO_GPIOx = LED_5_GPIO_Port,
		.G_LED.LED_GPIO_Pin   = LED_5_Pin
};

LED_config_t LED_blink(LED_config_t LED){
 80020ec:	b084      	sub	sp, #16
 80020ee:	b590      	push	{r4, r7, lr}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	f107 001c 	add.w	r0, r7, #28
 80020fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}

		switch (LED.Blink_status) {
 80020fe:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002102:	2b00      	cmp	r3, #0
 8002104:	d002      	beq.n	800210c <LED_blink+0x20>
 8002106:	2b01      	cmp	r3, #1
 8002108:	d010      	beq.n	800212c <LED_blink+0x40>
 800210a:	e01f      	b.n	800214c <LED_blink+0x60>
			case 0x00:
				if(LED.count >= LED.Time_Off){
 800210c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800210e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002110:	429a      	cmp	r2, r3
 8002112:	d31f      	bcc.n	8002154 <LED_blink+0x68>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	8c39      	ldrh	r1, [r7, #32]
 8002118:	2201      	movs	r2, #1
 800211a:	4618      	mov	r0, r3
 800211c:	f007 f868 	bl	80091f0 <HAL_GPIO_WritePin>
					LED.Blink_status = 1;
 8002120:	2301      	movs	r3, #1
 8002122:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 800212a:	e013      	b.n	8002154 <LED_blink+0x68>
			case 0x01:
				if(LED.count >= LED.Time_On){
 800212c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800212e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002130:	429a      	cmp	r2, r3
 8002132:	d311      	bcc.n	8002158 <LED_blink+0x6c>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	8c39      	ldrh	r1, [r7, #32]
 8002138:	2200      	movs	r2, #0
 800213a:	4618      	mov	r0, r3
 800213c:	f007 f858 	bl	80091f0 <HAL_GPIO_WritePin>
					LED.Blink_status = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 800214a:	e005      	b.n	8002158 <LED_blink+0x6c>
			default:
				LED.Blink_status = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
				break;
 8002152:	e002      	b.n	800215a <LED_blink+0x6e>
				break;
 8002154:	bf00      	nop
 8002156:	e000      	b.n	800215a <LED_blink+0x6e>
				break;
 8002158:	bf00      	nop
		}

	LED.count++;
 800215a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800215c:	3301      	adds	r3, #1
 800215e:	b29b      	uxth	r3, r3
 8002160:	853b      	strh	r3, [r7, #40]	@ 0x28
	return LED;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	461c      	mov	r4, r3
 8002166:	f107 031c 	add.w	r3, r7, #28
 800216a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800216c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800217a:	b004      	add	sp, #16
 800217c:	4770      	bx	lr

0800217e <LED_Rutine>:

LED_config_t LED_Rutine(LED_config_t LED){
 800217e:	b084      	sub	sp, #16
 8002180:	b590      	push	{r4, r7, lr}
 8002182:	b085      	sub	sp, #20
 8002184:	af02      	add	r7, sp, #8
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	f107 001c 	add.w	r0, r7, #28
 800218c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(LED.LED_status == 1){
 8002190:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002194:	2b01      	cmp	r3, #1
 8002196:	d117      	bne.n	80021c8 <LED_Rutine+0x4a>
		switch (LED.Sequence) {
 8002198:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800219c:	2b00      	cmp	r3, #0
 800219e:	d002      	beq.n	80021a6 <LED_Rutine+0x28>
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d007      	beq.n	80021b4 <LED_Rutine+0x36>
				break;
			case Blink:
				LED = LED_blink(LED);
				break;
			default:
				break;
 80021a4:	e018      	b.n	80021d8 <LED_Rutine+0x5a>
				HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	8c39      	ldrh	r1, [r7, #32]
 80021aa:	2201      	movs	r2, #1
 80021ac:	4618      	mov	r0, r3
 80021ae:	f007 f81f 	bl	80091f0 <HAL_GPIO_WritePin>
				break;
 80021b2:	e011      	b.n	80021d8 <LED_Rutine+0x5a>
				LED = LED_blink(LED);
 80021b4:	f107 001c 	add.w	r0, r7, #28
 80021b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	f107 031c 	add.w	r3, r7, #28
 80021c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021c2:	f7ff ff93 	bl	80020ec <LED_blink>
				break;
 80021c6:	e007      	b.n	80021d8 <LED_Rutine+0x5a>
		}
	}
	else{
		HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	8c39      	ldrh	r1, [r7, #32]
 80021cc:	2200      	movs	r2, #0
 80021ce:	4618      	mov	r0, r3
 80021d0:	f007 f80e 	bl	80091f0 <HAL_GPIO_WritePin>
		LED.count = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	853b      	strh	r3, [r7, #40]	@ 0x28
	}
	return LED;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	461c      	mov	r4, r3
 80021dc:	f107 031c 	add.w	r3, r7, #28
 80021e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80021f0:	b004      	add	sp, #16
 80021f2:	4770      	bx	lr

080021f4 <LED_Tasks>:

void LED_Tasks (void){
 80021f4:	b590      	push	{r4, r7, lr}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af02      	add	r7, sp, #8
	LED_Info.R_LED = LED_Rutine(LED_Info.R_LED);
 80021fa:	4c24      	ldr	r4, [pc, #144]	@ (800228c <LED_Tasks+0x98>)
 80021fc:	4638      	mov	r0, r7
 80021fe:	4b23      	ldr	r3, [pc, #140]	@ (800228c <LED_Tasks+0x98>)
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	9200      	str	r2, [sp, #0]
 8002204:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002206:	f7ff ffba 	bl	800217e <LED_Rutine>
 800220a:	463b      	mov	r3, r7
 800220c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800220e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED1 = LED_Rutine(LED_Info.B_LED1);
 8002212:	4c1e      	ldr	r4, [pc, #120]	@ (800228c <LED_Tasks+0x98>)
 8002214:	4638      	mov	r0, r7
 8002216:	4b1d      	ldr	r3, [pc, #116]	@ (800228c <LED_Tasks+0x98>)
 8002218:	69da      	ldr	r2, [r3, #28]
 800221a:	9200      	str	r2, [sp, #0]
 800221c:	3310      	adds	r3, #16
 800221e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002220:	f7ff ffad 	bl	800217e <LED_Rutine>
 8002224:	3410      	adds	r4, #16
 8002226:	463b      	mov	r3, r7
 8002228:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800222a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED2 = LED_Rutine(LED_Info.B_LED2);
 800222e:	4c17      	ldr	r4, [pc, #92]	@ (800228c <LED_Tasks+0x98>)
 8002230:	4638      	mov	r0, r7
 8002232:	4b16      	ldr	r3, [pc, #88]	@ (800228c <LED_Tasks+0x98>)
 8002234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002236:	9200      	str	r2, [sp, #0]
 8002238:	3320      	adds	r3, #32
 800223a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800223c:	f7ff ff9f 	bl	800217e <LED_Rutine>
 8002240:	3420      	adds	r4, #32
 8002242:	463b      	mov	r3, r7
 8002244:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002246:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED3 = LED_Rutine(LED_Info.B_LED3);
 800224a:	4c10      	ldr	r4, [pc, #64]	@ (800228c <LED_Tasks+0x98>)
 800224c:	4638      	mov	r0, r7
 800224e:	4b0f      	ldr	r3, [pc, #60]	@ (800228c <LED_Tasks+0x98>)
 8002250:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002252:	9200      	str	r2, [sp, #0]
 8002254:	3330      	adds	r3, #48	@ 0x30
 8002256:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002258:	f7ff ff91 	bl	800217e <LED_Rutine>
 800225c:	3430      	adds	r4, #48	@ 0x30
 800225e:	463b      	mov	r3, r7
 8002260:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002262:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.G_LED = LED_Rutine(LED_Info.G_LED);
 8002266:	4c09      	ldr	r4, [pc, #36]	@ (800228c <LED_Tasks+0x98>)
 8002268:	4638      	mov	r0, r7
 800226a:	4b08      	ldr	r3, [pc, #32]	@ (800228c <LED_Tasks+0x98>)
 800226c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800226e:	9200      	str	r2, [sp, #0]
 8002270:	3340      	adds	r3, #64	@ 0x40
 8002272:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002274:	f7ff ff83 	bl	800217e <LED_Rutine>
 8002278:	3440      	adds	r4, #64	@ 0x40
 800227a:	463b      	mov	r3, r7
 800227c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800227e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002282:	bf00      	nop
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	bd90      	pop	{r4, r7, pc}
 800228a:	bf00      	nop
 800228c:	24000004 	.word	0x24000004

08002290 <PWM_Assing>:
		.Canal_8  = 1500,
		.Canal_9  = 1500,
		.Canal_10 = 1500,
};

void PWM_Assing(void){
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
	TIM2->CCR1 = PWM_Output.Canal_1;
 8002294:	4b2a      	ldr	r3, [pc, #168]	@ (8002340 <PWM_Assing+0xb0>)
 8002296:	881a      	ldrh	r2, [r3, #0]
 8002298:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800229c:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = PWM_Output.Canal_2;
 800229e:	4b28      	ldr	r3, [pc, #160]	@ (8002340 <PWM_Assing+0xb0>)
 80022a0:	885a      	ldrh	r2, [r3, #2]
 80022a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80022a6:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM3->CCR1 = PWM_Output.Canal_3;
 80022a8:	4b25      	ldr	r3, [pc, #148]	@ (8002340 <PWM_Assing+0xb0>)
 80022aa:	889a      	ldrh	r2, [r3, #4]
 80022ac:	4b25      	ldr	r3, [pc, #148]	@ (8002344 <PWM_Assing+0xb4>)
 80022ae:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = PWM_Output.Canal_4;
 80022b0:	4b23      	ldr	r3, [pc, #140]	@ (8002340 <PWM_Assing+0xb0>)
 80022b2:	88da      	ldrh	r2, [r3, #6]
 80022b4:	4b23      	ldr	r3, [pc, #140]	@ (8002344 <PWM_Assing+0xb4>)
 80022b6:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM4->CCR1 = PWM_Output.Canal_5;
 80022b8:	4b21      	ldr	r3, [pc, #132]	@ (8002340 <PWM_Assing+0xb0>)
 80022ba:	891a      	ldrh	r2, [r3, #8]
 80022bc:	4b22      	ldr	r3, [pc, #136]	@ (8002348 <PWM_Assing+0xb8>)
 80022be:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM4->CCR2 = PWM_Output.Canal_6;
 80022c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002340 <PWM_Assing+0xb0>)
 80022c2:	895a      	ldrh	r2, [r3, #10]
 80022c4:	4b20      	ldr	r3, [pc, #128]	@ (8002348 <PWM_Assing+0xb8>)
 80022c6:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM4->CCR3 = PWM_Output.Canal_7;
 80022c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002340 <PWM_Assing+0xb0>)
 80022ca:	899a      	ldrh	r2, [r3, #12]
 80022cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002348 <PWM_Assing+0xb8>)
 80022ce:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM4->CCR4 = PWM_Output.Canal_8;
 80022d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002340 <PWM_Assing+0xb0>)
 80022d2:	89da      	ldrh	r2, [r3, #14]
 80022d4:	4b1c      	ldr	r3, [pc, #112]	@ (8002348 <PWM_Assing+0xb8>)
 80022d6:	641a      	str	r2, [r3, #64]	@ 0x40

	TIM2->CCR4 = PWM_Output.Canal_9;
 80022d8:	4b19      	ldr	r3, [pc, #100]	@ (8002340 <PWM_Assing+0xb0>)
 80022da:	8a1a      	ldrh	r2, [r3, #16]
 80022dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80022e0:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM2->CCR3 = PWM_Output.Canal_10;
 80022e2:	4b17      	ldr	r3, [pc, #92]	@ (8002340 <PWM_Assing+0xb0>)
 80022e4:	8a5a      	ldrh	r2, [r3, #18]
 80022e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80022ea:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80022ec:	2100      	movs	r1, #0
 80022ee:	4817      	ldr	r0, [pc, #92]	@ (800234c <PWM_Assing+0xbc>)
 80022f0:	f00b f972 	bl	800d5d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80022f4:	2104      	movs	r1, #4
 80022f6:	4815      	ldr	r0, [pc, #84]	@ (800234c <PWM_Assing+0xbc>)
 80022f8:	f00b f96e 	bl	800d5d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80022fc:	2108      	movs	r1, #8
 80022fe:	4813      	ldr	r0, [pc, #76]	@ (800234c <PWM_Assing+0xbc>)
 8002300:	f00b f96a 	bl	800d5d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002304:	210c      	movs	r1, #12
 8002306:	4811      	ldr	r0, [pc, #68]	@ (800234c <PWM_Assing+0xbc>)
 8002308:	f00b f966 	bl	800d5d8 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800230c:	2100      	movs	r1, #0
 800230e:	4810      	ldr	r0, [pc, #64]	@ (8002350 <PWM_Assing+0xc0>)
 8002310:	f00b f962 	bl	800d5d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002314:	2104      	movs	r1, #4
 8002316:	480e      	ldr	r0, [pc, #56]	@ (8002350 <PWM_Assing+0xc0>)
 8002318:	f00b f95e 	bl	800d5d8 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800231c:	2100      	movs	r1, #0
 800231e:	480d      	ldr	r0, [pc, #52]	@ (8002354 <PWM_Assing+0xc4>)
 8002320:	f00b f95a 	bl	800d5d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8002324:	2104      	movs	r1, #4
 8002326:	480b      	ldr	r0, [pc, #44]	@ (8002354 <PWM_Assing+0xc4>)
 8002328:	f00b f956 	bl	800d5d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800232c:	2108      	movs	r1, #8
 800232e:	4809      	ldr	r0, [pc, #36]	@ (8002354 <PWM_Assing+0xc4>)
 8002330:	f00b f952 	bl	800d5d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002334:	210c      	movs	r1, #12
 8002336:	4807      	ldr	r0, [pc, #28]	@ (8002354 <PWM_Assing+0xc4>)
 8002338:	f00b f94e 	bl	800d5d8 <HAL_TIM_PWM_Start>
}
 800233c:	bf00      	nop
 800233e:	bd80      	pop	{r7, pc}
 8002340:	24000054 	.word	0x24000054
 8002344:	40000400 	.word	0x40000400
 8002348:	40000800 	.word	0x40000800
 800234c:	24004f0c 	.word	0x24004f0c
 8002350:	24004f58 	.word	0x24004f58
 8002354:	24004fa4 	.word	0x24004fa4

08002358 <SBUS_Receive>:
void SBUS_init(void){
	HAL_UART_Receive_DMA(SBUS_UART_handler, &SBUS_RxBuffer, 1);

}

void SBUS_Receive(uint8_t SBUS_RxBuffer){
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	71fb      	strb	r3, [r7, #7]
	static uint8_t Actual_status = 0;
	static uint8_t RxCount;

	switch (Actual_status) {
 8002362:	4b20      	ldr	r3, [pc, #128]	@ (80023e4 <SBUS_Receive+0x8c>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <SBUS_Receive+0x18>
 800236a:	2b01      	cmp	r3, #1
 800236c:	d017      	beq.n	800239e <SBUS_Receive+0x46>
 800236e:	e02f      	b.n	80023d0 <SBUS_Receive+0x78>
		case 0:
			if(SBUS_RxBuffer == 0x0F){
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	2b0f      	cmp	r3, #15
 8002374:	d10f      	bne.n	8002396 <SBUS_Receive+0x3e>
				SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 8002376:	4b1c      	ldr	r3, [pc, #112]	@ (80023e8 <SBUS_Receive+0x90>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	4619      	mov	r1, r3
 800237c:	4a1b      	ldr	r2, [pc, #108]	@ (80023ec <SBUS_Receive+0x94>)
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	5453      	strb	r3, [r2, r1]
				Actual_status = 1;
 8002382:	4b18      	ldr	r3, [pc, #96]	@ (80023e4 <SBUS_Receive+0x8c>)
 8002384:	2201      	movs	r2, #1
 8002386:	701a      	strb	r2, [r3, #0]
				RxCount++;
 8002388:	4b17      	ldr	r3, [pc, #92]	@ (80023e8 <SBUS_Receive+0x90>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	3301      	adds	r3, #1
 800238e:	b2da      	uxtb	r2, r3
 8002390:	4b15      	ldr	r3, [pc, #84]	@ (80023e8 <SBUS_Receive+0x90>)
 8002392:	701a      	strb	r2, [r3, #0]
			}
			else{
				RxCount = 0;
			}
			break;
 8002394:	e021      	b.n	80023da <SBUS_Receive+0x82>
				RxCount = 0;
 8002396:	4b14      	ldr	r3, [pc, #80]	@ (80023e8 <SBUS_Receive+0x90>)
 8002398:	2200      	movs	r2, #0
 800239a:	701a      	strb	r2, [r3, #0]
			break;
 800239c:	e01d      	b.n	80023da <SBUS_Receive+0x82>
		case 1:
			SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 800239e:	4b12      	ldr	r3, [pc, #72]	@ (80023e8 <SBUS_Receive+0x90>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	4619      	mov	r1, r3
 80023a4:	4a11      	ldr	r2, [pc, #68]	@ (80023ec <SBUS_Receive+0x94>)
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	5453      	strb	r3, [r2, r1]
			RxCount++;
 80023aa:	4b0f      	ldr	r3, [pc, #60]	@ (80023e8 <SBUS_Receive+0x90>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	3301      	adds	r3, #1
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	4b0d      	ldr	r3, [pc, #52]	@ (80023e8 <SBUS_Receive+0x90>)
 80023b4:	701a      	strb	r2, [r3, #0]
			if(RxCount == 24){
 80023b6:	4b0c      	ldr	r3, [pc, #48]	@ (80023e8 <SBUS_Receive+0x90>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b18      	cmp	r3, #24
 80023bc:	d10c      	bne.n	80023d8 <SBUS_Receive+0x80>
				RxCount = 0;
 80023be:	4b0a      	ldr	r3, [pc, #40]	@ (80023e8 <SBUS_Receive+0x90>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]
				Actual_status = 0;
 80023c4:	4b07      	ldr	r3, [pc, #28]	@ (80023e4 <SBUS_Receive+0x8c>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]
				SBUS_getData();
 80023ca:	f000 f845 	bl	8002458 <SBUS_getData>
			}
			break;
 80023ce:	e003      	b.n	80023d8 <SBUS_Receive+0x80>
		default:
			Actual_status = 0;
 80023d0:	4b04      	ldr	r3, [pc, #16]	@ (80023e4 <SBUS_Receive+0x8c>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
			break;
 80023d6:	e000      	b.n	80023da <SBUS_Receive+0x82>
			break;
 80023d8:	bf00      	nop
	}
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	240004ce 	.word	0x240004ce
 80023e8:	240004cf 	.word	0x240004cf
 80023ec:	240004b4 	.word	0x240004b4

080023f0 <Temp_BypassFunct>:

void Temp_BypassFunct (void){
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
	PWM_Output.Canal_1  = Radio_input.Canal_1;
 80023f4:	4b16      	ldr	r3, [pc, #88]	@ (8002450 <Temp_BypassFunct+0x60>)
 80023f6:	885a      	ldrh	r2, [r3, #2]
 80023f8:	4b16      	ldr	r3, [pc, #88]	@ (8002454 <Temp_BypassFunct+0x64>)
 80023fa:	801a      	strh	r2, [r3, #0]
	PWM_Output.Canal_2  = Radio_input.Canal_2;
 80023fc:	4b14      	ldr	r3, [pc, #80]	@ (8002450 <Temp_BypassFunct+0x60>)
 80023fe:	889a      	ldrh	r2, [r3, #4]
 8002400:	4b14      	ldr	r3, [pc, #80]	@ (8002454 <Temp_BypassFunct+0x64>)
 8002402:	805a      	strh	r2, [r3, #2]
	PWM_Output.Canal_3  = Radio_input.Canal_3;
 8002404:	4b12      	ldr	r3, [pc, #72]	@ (8002450 <Temp_BypassFunct+0x60>)
 8002406:	88da      	ldrh	r2, [r3, #6]
 8002408:	4b12      	ldr	r3, [pc, #72]	@ (8002454 <Temp_BypassFunct+0x64>)
 800240a:	809a      	strh	r2, [r3, #4]
	PWM_Output.Canal_4  = Radio_input.Canal_4;
 800240c:	4b10      	ldr	r3, [pc, #64]	@ (8002450 <Temp_BypassFunct+0x60>)
 800240e:	891a      	ldrh	r2, [r3, #8]
 8002410:	4b10      	ldr	r3, [pc, #64]	@ (8002454 <Temp_BypassFunct+0x64>)
 8002412:	80da      	strh	r2, [r3, #6]
	PWM_Output.Canal_5  = Radio_input.Canal_5;
 8002414:	4b0e      	ldr	r3, [pc, #56]	@ (8002450 <Temp_BypassFunct+0x60>)
 8002416:	895a      	ldrh	r2, [r3, #10]
 8002418:	4b0e      	ldr	r3, [pc, #56]	@ (8002454 <Temp_BypassFunct+0x64>)
 800241a:	811a      	strh	r2, [r3, #8]
	PWM_Output.Canal_6  = Radio_input.Canal_6;
 800241c:	4b0c      	ldr	r3, [pc, #48]	@ (8002450 <Temp_BypassFunct+0x60>)
 800241e:	899a      	ldrh	r2, [r3, #12]
 8002420:	4b0c      	ldr	r3, [pc, #48]	@ (8002454 <Temp_BypassFunct+0x64>)
 8002422:	815a      	strh	r2, [r3, #10]
	PWM_Output.Canal_7  = Radio_input.Canal_7;
 8002424:	4b0a      	ldr	r3, [pc, #40]	@ (8002450 <Temp_BypassFunct+0x60>)
 8002426:	89da      	ldrh	r2, [r3, #14]
 8002428:	4b0a      	ldr	r3, [pc, #40]	@ (8002454 <Temp_BypassFunct+0x64>)
 800242a:	819a      	strh	r2, [r3, #12]
	PWM_Output.Canal_8  = Radio_input.Canal_8;
 800242c:	4b08      	ldr	r3, [pc, #32]	@ (8002450 <Temp_BypassFunct+0x60>)
 800242e:	8a1a      	ldrh	r2, [r3, #16]
 8002430:	4b08      	ldr	r3, [pc, #32]	@ (8002454 <Temp_BypassFunct+0x64>)
 8002432:	81da      	strh	r2, [r3, #14]
	PWM_Output.Canal_9  = Radio_input.Canal_9;
 8002434:	4b06      	ldr	r3, [pc, #24]	@ (8002450 <Temp_BypassFunct+0x60>)
 8002436:	8a5a      	ldrh	r2, [r3, #18]
 8002438:	4b06      	ldr	r3, [pc, #24]	@ (8002454 <Temp_BypassFunct+0x64>)
 800243a:	821a      	strh	r2, [r3, #16]
	PWM_Output.Canal_10 = Radio_input.Canal_10;
 800243c:	4b04      	ldr	r3, [pc, #16]	@ (8002450 <Temp_BypassFunct+0x60>)
 800243e:	8a9a      	ldrh	r2, [r3, #20]
 8002440:	4b04      	ldr	r3, [pc, #16]	@ (8002454 <Temp_BypassFunct+0x64>)
 8002442:	825a      	strh	r2, [r3, #18]
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	24000068 	.word	0x24000068
 8002454:	24000054 	.word	0x24000054

08002458 <SBUS_getData>:

void SBUS_getData(void){
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
	//Se hace el corrimiento de bits para dar la estructura de los 16 canales, donde cada canal esta compuesto por 11 bits
	//pero cada paquete es de 1 byte. Para cada canal se utilizan los 8 bits (O los que correspondan) de el byte 1
	//(O el que corresponda) como los bits menos significativos del canal 1, y los tres bits faltantes se toman los 3 bits
	// menos significativos (O los que correspondan) del byte 2 y se colocan como los 3 bits más significativos del canal 1.
	Radio_input.Canal_1 = ((SBUS_UART_Rx[1] | SBUS_UART_Rx[2] << 8) & 0x07FF);
 800245c:	4b95      	ldr	r3, [pc, #596]	@ (80026b4 <SBUS_getData+0x25c>)
 800245e:	785b      	ldrb	r3, [r3, #1]
 8002460:	b21a      	sxth	r2, r3
 8002462:	4b94      	ldr	r3, [pc, #592]	@ (80026b4 <SBUS_getData+0x25c>)
 8002464:	789b      	ldrb	r3, [r3, #2]
 8002466:	021b      	lsls	r3, r3, #8
 8002468:	b21b      	sxth	r3, r3
 800246a:	4313      	orrs	r3, r2
 800246c:	b21b      	sxth	r3, r3
 800246e:	b29b      	uxth	r3, r3
 8002470:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002474:	b29a      	uxth	r2, r3
 8002476:	4b90      	ldr	r3, [pc, #576]	@ (80026b8 <SBUS_getData+0x260>)
 8002478:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_2 = ((SBUS_UART_Rx[2] >> 3 | SBUS_UART_Rx[3] << 5) & 0x07FF);
 800247a:	4b8e      	ldr	r3, [pc, #568]	@ (80026b4 <SBUS_getData+0x25c>)
 800247c:	789b      	ldrb	r3, [r3, #2]
 800247e:	08db      	lsrs	r3, r3, #3
 8002480:	b2db      	uxtb	r3, r3
 8002482:	b21a      	sxth	r2, r3
 8002484:	4b8b      	ldr	r3, [pc, #556]	@ (80026b4 <SBUS_getData+0x25c>)
 8002486:	78db      	ldrb	r3, [r3, #3]
 8002488:	015b      	lsls	r3, r3, #5
 800248a:	b21b      	sxth	r3, r3
 800248c:	4313      	orrs	r3, r2
 800248e:	b21b      	sxth	r3, r3
 8002490:	b29b      	uxth	r3, r3
 8002492:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002496:	b29a      	uxth	r2, r3
 8002498:	4b87      	ldr	r3, [pc, #540]	@ (80026b8 <SBUS_getData+0x260>)
 800249a:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_3 = ((SBUS_UART_Rx[3] >> 6 | SBUS_UART_Rx[4] << 2 | SBUS_UART_Rx[5] << 10) & 0x07FF);
 800249c:	4b85      	ldr	r3, [pc, #532]	@ (80026b4 <SBUS_getData+0x25c>)
 800249e:	78db      	ldrb	r3, [r3, #3]
 80024a0:	099b      	lsrs	r3, r3, #6
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	b21a      	sxth	r2, r3
 80024a6:	4b83      	ldr	r3, [pc, #524]	@ (80026b4 <SBUS_getData+0x25c>)
 80024a8:	791b      	ldrb	r3, [r3, #4]
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	b21b      	sxth	r3, r3
 80024ae:	4313      	orrs	r3, r2
 80024b0:	b21a      	sxth	r2, r3
 80024b2:	4b80      	ldr	r3, [pc, #512]	@ (80026b4 <SBUS_getData+0x25c>)
 80024b4:	795b      	ldrb	r3, [r3, #5]
 80024b6:	029b      	lsls	r3, r3, #10
 80024b8:	b21b      	sxth	r3, r3
 80024ba:	4313      	orrs	r3, r2
 80024bc:	b21b      	sxth	r3, r3
 80024be:	b29b      	uxth	r3, r3
 80024c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	4b7c      	ldr	r3, [pc, #496]	@ (80026b8 <SBUS_getData+0x260>)
 80024c8:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_4 = ((SBUS_UART_Rx[5] >> 1 | SBUS_UART_Rx[6] << 7) & 0x07FF);
 80024ca:	4b7a      	ldr	r3, [pc, #488]	@ (80026b4 <SBUS_getData+0x25c>)
 80024cc:	795b      	ldrb	r3, [r3, #5]
 80024ce:	085b      	lsrs	r3, r3, #1
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	b21a      	sxth	r2, r3
 80024d4:	4b77      	ldr	r3, [pc, #476]	@ (80026b4 <SBUS_getData+0x25c>)
 80024d6:	799b      	ldrb	r3, [r3, #6]
 80024d8:	01db      	lsls	r3, r3, #7
 80024da:	b21b      	sxth	r3, r3
 80024dc:	4313      	orrs	r3, r2
 80024de:	b21b      	sxth	r3, r3
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	4b73      	ldr	r3, [pc, #460]	@ (80026b8 <SBUS_getData+0x260>)
 80024ea:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_5 = ((SBUS_UART_Rx[6] >> 4 | SBUS_UART_Rx[7] << 4) & 0x07FF);
 80024ec:	4b71      	ldr	r3, [pc, #452]	@ (80026b4 <SBUS_getData+0x25c>)
 80024ee:	799b      	ldrb	r3, [r3, #6]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	b21a      	sxth	r2, r3
 80024f6:	4b6f      	ldr	r3, [pc, #444]	@ (80026b4 <SBUS_getData+0x25c>)
 80024f8:	79db      	ldrb	r3, [r3, #7]
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	b21b      	sxth	r3, r3
 80024fe:	4313      	orrs	r3, r2
 8002500:	b21b      	sxth	r3, r3
 8002502:	b29b      	uxth	r3, r3
 8002504:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002508:	b29a      	uxth	r2, r3
 800250a:	4b6b      	ldr	r3, [pc, #428]	@ (80026b8 <SBUS_getData+0x260>)
 800250c:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_6 = ((SBUS_UART_Rx[7] >> 7 | SBUS_UART_Rx[8] << 1 | SBUS_UART_Rx[9] << 9) & 0x07FF);
 800250e:	4b69      	ldr	r3, [pc, #420]	@ (80026b4 <SBUS_getData+0x25c>)
 8002510:	79db      	ldrb	r3, [r3, #7]
 8002512:	09db      	lsrs	r3, r3, #7
 8002514:	b2db      	uxtb	r3, r3
 8002516:	b21a      	sxth	r2, r3
 8002518:	4b66      	ldr	r3, [pc, #408]	@ (80026b4 <SBUS_getData+0x25c>)
 800251a:	7a1b      	ldrb	r3, [r3, #8]
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	b21b      	sxth	r3, r3
 8002520:	4313      	orrs	r3, r2
 8002522:	b21a      	sxth	r2, r3
 8002524:	4b63      	ldr	r3, [pc, #396]	@ (80026b4 <SBUS_getData+0x25c>)
 8002526:	7a5b      	ldrb	r3, [r3, #9]
 8002528:	025b      	lsls	r3, r3, #9
 800252a:	b21b      	sxth	r3, r3
 800252c:	4313      	orrs	r3, r2
 800252e:	b21b      	sxth	r3, r3
 8002530:	b29b      	uxth	r3, r3
 8002532:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002536:	b29a      	uxth	r2, r3
 8002538:	4b5f      	ldr	r3, [pc, #380]	@ (80026b8 <SBUS_getData+0x260>)
 800253a:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_7 = ((SBUS_UART_Rx[9] >> 2 | SBUS_UART_Rx[10] << 6) & 0x07FF);
 800253c:	4b5d      	ldr	r3, [pc, #372]	@ (80026b4 <SBUS_getData+0x25c>)
 800253e:	7a5b      	ldrb	r3, [r3, #9]
 8002540:	089b      	lsrs	r3, r3, #2
 8002542:	b2db      	uxtb	r3, r3
 8002544:	b21a      	sxth	r2, r3
 8002546:	4b5b      	ldr	r3, [pc, #364]	@ (80026b4 <SBUS_getData+0x25c>)
 8002548:	7a9b      	ldrb	r3, [r3, #10]
 800254a:	019b      	lsls	r3, r3, #6
 800254c:	b21b      	sxth	r3, r3
 800254e:	4313      	orrs	r3, r2
 8002550:	b21b      	sxth	r3, r3
 8002552:	b29b      	uxth	r3, r3
 8002554:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002558:	b29a      	uxth	r2, r3
 800255a:	4b57      	ldr	r3, [pc, #348]	@ (80026b8 <SBUS_getData+0x260>)
 800255c:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_8 = ((SBUS_UART_Rx[10] >> 5 | SBUS_UART_Rx[11] << 3) & 0x07FF);
 800255e:	4b55      	ldr	r3, [pc, #340]	@ (80026b4 <SBUS_getData+0x25c>)
 8002560:	7a9b      	ldrb	r3, [r3, #10]
 8002562:	095b      	lsrs	r3, r3, #5
 8002564:	b2db      	uxtb	r3, r3
 8002566:	b21a      	sxth	r2, r3
 8002568:	4b52      	ldr	r3, [pc, #328]	@ (80026b4 <SBUS_getData+0x25c>)
 800256a:	7adb      	ldrb	r3, [r3, #11]
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	b21b      	sxth	r3, r3
 8002570:	4313      	orrs	r3, r2
 8002572:	b21b      	sxth	r3, r3
 8002574:	b29b      	uxth	r3, r3
 8002576:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800257a:	b29a      	uxth	r2, r3
 800257c:	4b4e      	ldr	r3, [pc, #312]	@ (80026b8 <SBUS_getData+0x260>)
 800257e:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_9 = ((SBUS_UART_Rx[12] | SBUS_UART_Rx[13] << 8) & 0x07FF);
 8002580:	4b4c      	ldr	r3, [pc, #304]	@ (80026b4 <SBUS_getData+0x25c>)
 8002582:	7b1b      	ldrb	r3, [r3, #12]
 8002584:	b21a      	sxth	r2, r3
 8002586:	4b4b      	ldr	r3, [pc, #300]	@ (80026b4 <SBUS_getData+0x25c>)
 8002588:	7b5b      	ldrb	r3, [r3, #13]
 800258a:	021b      	lsls	r3, r3, #8
 800258c:	b21b      	sxth	r3, r3
 800258e:	4313      	orrs	r3, r2
 8002590:	b21b      	sxth	r3, r3
 8002592:	b29b      	uxth	r3, r3
 8002594:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002598:	b29a      	uxth	r2, r3
 800259a:	4b47      	ldr	r3, [pc, #284]	@ (80026b8 <SBUS_getData+0x260>)
 800259c:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_10 = ((SBUS_UART_Rx[13] >> 3 | SBUS_UART_Rx[14] << 5) & 0x07FF);
 800259e:	4b45      	ldr	r3, [pc, #276]	@ (80026b4 <SBUS_getData+0x25c>)
 80025a0:	7b5b      	ldrb	r3, [r3, #13]
 80025a2:	08db      	lsrs	r3, r3, #3
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	b21a      	sxth	r2, r3
 80025a8:	4b42      	ldr	r3, [pc, #264]	@ (80026b4 <SBUS_getData+0x25c>)
 80025aa:	7b9b      	ldrb	r3, [r3, #14]
 80025ac:	015b      	lsls	r3, r3, #5
 80025ae:	b21b      	sxth	r3, r3
 80025b0:	4313      	orrs	r3, r2
 80025b2:	b21b      	sxth	r3, r3
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	4b3e      	ldr	r3, [pc, #248]	@ (80026b8 <SBUS_getData+0x260>)
 80025be:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_11 = ((SBUS_UART_Rx[14] >> 6 | SBUS_UART_Rx[15] << 2 | SBUS_UART_Rx[16] << 10) & 0x07FF);
 80025c0:	4b3c      	ldr	r3, [pc, #240]	@ (80026b4 <SBUS_getData+0x25c>)
 80025c2:	7b9b      	ldrb	r3, [r3, #14]
 80025c4:	099b      	lsrs	r3, r3, #6
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	b21a      	sxth	r2, r3
 80025ca:	4b3a      	ldr	r3, [pc, #232]	@ (80026b4 <SBUS_getData+0x25c>)
 80025cc:	7bdb      	ldrb	r3, [r3, #15]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	b21b      	sxth	r3, r3
 80025d2:	4313      	orrs	r3, r2
 80025d4:	b21a      	sxth	r2, r3
 80025d6:	4b37      	ldr	r3, [pc, #220]	@ (80026b4 <SBUS_getData+0x25c>)
 80025d8:	7c1b      	ldrb	r3, [r3, #16]
 80025da:	029b      	lsls	r3, r3, #10
 80025dc:	b21b      	sxth	r3, r3
 80025de:	4313      	orrs	r3, r2
 80025e0:	b21b      	sxth	r3, r3
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	4b33      	ldr	r3, [pc, #204]	@ (80026b8 <SBUS_getData+0x260>)
 80025ec:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_12 = ((SBUS_UART_Rx[16] >> 1 | SBUS_UART_Rx[17] << 7) & 0x07FF);
 80025ee:	4b31      	ldr	r3, [pc, #196]	@ (80026b4 <SBUS_getData+0x25c>)
 80025f0:	7c1b      	ldrb	r3, [r3, #16]
 80025f2:	085b      	lsrs	r3, r3, #1
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	b21a      	sxth	r2, r3
 80025f8:	4b2e      	ldr	r3, [pc, #184]	@ (80026b4 <SBUS_getData+0x25c>)
 80025fa:	7c5b      	ldrb	r3, [r3, #17]
 80025fc:	01db      	lsls	r3, r3, #7
 80025fe:	b21b      	sxth	r3, r3
 8002600:	4313      	orrs	r3, r2
 8002602:	b21b      	sxth	r3, r3
 8002604:	b29b      	uxth	r3, r3
 8002606:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800260a:	b29a      	uxth	r2, r3
 800260c:	4b2a      	ldr	r3, [pc, #168]	@ (80026b8 <SBUS_getData+0x260>)
 800260e:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_13 = ((SBUS_UART_Rx[17] >> 4 | SBUS_UART_Rx[18] << 4) & 0x07FF);
 8002610:	4b28      	ldr	r3, [pc, #160]	@ (80026b4 <SBUS_getData+0x25c>)
 8002612:	7c5b      	ldrb	r3, [r3, #17]
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	b2db      	uxtb	r3, r3
 8002618:	b21a      	sxth	r2, r3
 800261a:	4b26      	ldr	r3, [pc, #152]	@ (80026b4 <SBUS_getData+0x25c>)
 800261c:	7c9b      	ldrb	r3, [r3, #18]
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	b21b      	sxth	r3, r3
 8002622:	4313      	orrs	r3, r2
 8002624:	b21b      	sxth	r3, r3
 8002626:	b29b      	uxth	r3, r3
 8002628:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800262c:	b29a      	uxth	r2, r3
 800262e:	4b22      	ldr	r3, [pc, #136]	@ (80026b8 <SBUS_getData+0x260>)
 8002630:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_14 = ((SBUS_UART_Rx[18] >> 7 | SBUS_UART_Rx[19] << 1 | SBUS_UART_Rx[20] << 9) & 0x07FF);
 8002632:	4b20      	ldr	r3, [pc, #128]	@ (80026b4 <SBUS_getData+0x25c>)
 8002634:	7c9b      	ldrb	r3, [r3, #18]
 8002636:	09db      	lsrs	r3, r3, #7
 8002638:	b2db      	uxtb	r3, r3
 800263a:	b21a      	sxth	r2, r3
 800263c:	4b1d      	ldr	r3, [pc, #116]	@ (80026b4 <SBUS_getData+0x25c>)
 800263e:	7cdb      	ldrb	r3, [r3, #19]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	b21b      	sxth	r3, r3
 8002644:	4313      	orrs	r3, r2
 8002646:	b21a      	sxth	r2, r3
 8002648:	4b1a      	ldr	r3, [pc, #104]	@ (80026b4 <SBUS_getData+0x25c>)
 800264a:	7d1b      	ldrb	r3, [r3, #20]
 800264c:	025b      	lsls	r3, r3, #9
 800264e:	b21b      	sxth	r3, r3
 8002650:	4313      	orrs	r3, r2
 8002652:	b21b      	sxth	r3, r3
 8002654:	b29b      	uxth	r3, r3
 8002656:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800265a:	b29a      	uxth	r2, r3
 800265c:	4b16      	ldr	r3, [pc, #88]	@ (80026b8 <SBUS_getData+0x260>)
 800265e:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_15 = ((SBUS_UART_Rx[20] >> 2 | SBUS_UART_Rx[21] << 6) & 0x07FF);
 8002660:	4b14      	ldr	r3, [pc, #80]	@ (80026b4 <SBUS_getData+0x25c>)
 8002662:	7d1b      	ldrb	r3, [r3, #20]
 8002664:	089b      	lsrs	r3, r3, #2
 8002666:	b2db      	uxtb	r3, r3
 8002668:	b21a      	sxth	r2, r3
 800266a:	4b12      	ldr	r3, [pc, #72]	@ (80026b4 <SBUS_getData+0x25c>)
 800266c:	7d5b      	ldrb	r3, [r3, #21]
 800266e:	019b      	lsls	r3, r3, #6
 8002670:	b21b      	sxth	r3, r3
 8002672:	4313      	orrs	r3, r2
 8002674:	b21b      	sxth	r3, r3
 8002676:	b29b      	uxth	r3, r3
 8002678:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800267c:	b29a      	uxth	r2, r3
 800267e:	4b0e      	ldr	r3, [pc, #56]	@ (80026b8 <SBUS_getData+0x260>)
 8002680:	83da      	strh	r2, [r3, #30]
	Radio_input.Canal_16 = ((SBUS_UART_Rx[21] >> 5 | SBUS_UART_Rx[22] << 3) & 0x07FF);
 8002682:	4b0c      	ldr	r3, [pc, #48]	@ (80026b4 <SBUS_getData+0x25c>)
 8002684:	7d5b      	ldrb	r3, [r3, #21]
 8002686:	095b      	lsrs	r3, r3, #5
 8002688:	b2db      	uxtb	r3, r3
 800268a:	b21a      	sxth	r2, r3
 800268c:	4b09      	ldr	r3, [pc, #36]	@ (80026b4 <SBUS_getData+0x25c>)
 800268e:	7d9b      	ldrb	r3, [r3, #22]
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	b21b      	sxth	r3, r3
 8002694:	4313      	orrs	r3, r2
 8002696:	b21b      	sxth	r3, r3
 8002698:	b29b      	uxth	r3, r3
 800269a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800269e:	b29a      	uxth	r2, r3
 80026a0:	4b05      	ldr	r3, [pc, #20]	@ (80026b8 <SBUS_getData+0x260>)
 80026a2:	841a      	strh	r2, [r3, #32]

	Radio_input.Canal_1 = (uint16_t)((((float)Radio_input.Canal_1 - 352) /1344 ) * 1000) + 1000;
 80026a4:	4b04      	ldr	r3, [pc, #16]	@ (80026b8 <SBUS_getData+0x260>)
 80026a6:	885b      	ldrh	r3, [r3, #2]
 80026a8:	ee07 3a90 	vmov	s15, r3
 80026ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026b0:	e00a      	b.n	80026c8 <SBUS_getData+0x270>
 80026b2:	bf00      	nop
 80026b4:	240004b4 	.word	0x240004b4
 80026b8:	24000068 	.word	0x24000068
 80026bc:	43b00000 	.word	0x43b00000
 80026c0:	44a80000 	.word	0x44a80000
 80026c4:	447a0000 	.word	0x447a0000
 80026c8:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 80026bc <SBUS_getData+0x264>
 80026cc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80026d0:	ed5f 6a05 	vldr	s13, [pc, #-20]	@ 80026c0 <SBUS_getData+0x268>
 80026d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026d8:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 80026c4 <SBUS_getData+0x26c>
 80026dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026e4:	ee17 3a90 	vmov	r3, s15
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	4bd1      	ldr	r3, [pc, #836]	@ (8002a38 <SBUS_getData+0x5e0>)
 80026f2:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_2 = (uint16_t)((((float)Radio_input.Canal_2 - 352) /1344 ) * 1000) + 1000;
 80026f4:	4bd0      	ldr	r3, [pc, #832]	@ (8002a38 <SBUS_getData+0x5e0>)
 80026f6:	889b      	ldrh	r3, [r3, #4]
 80026f8:	ee07 3a90 	vmov	s15, r3
 80026fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002700:	ed9f 7ace 	vldr	s14, [pc, #824]	@ 8002a3c <SBUS_getData+0x5e4>
 8002704:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002708:	eddf 6acd 	vldr	s13, [pc, #820]	@ 8002a40 <SBUS_getData+0x5e8>
 800270c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002710:	ed9f 7acc 	vldr	s14, [pc, #816]	@ 8002a44 <SBUS_getData+0x5ec>
 8002714:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002718:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800271c:	ee17 3a90 	vmov	r3, s15
 8002720:	b29b      	uxth	r3, r3
 8002722:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002726:	b29a      	uxth	r2, r3
 8002728:	4bc3      	ldr	r3, [pc, #780]	@ (8002a38 <SBUS_getData+0x5e0>)
 800272a:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_3 = (uint16_t)((((float)Radio_input.Canal_3 - 352) /1344 ) * 1000) + 1000;
 800272c:	4bc2      	ldr	r3, [pc, #776]	@ (8002a38 <SBUS_getData+0x5e0>)
 800272e:	88db      	ldrh	r3, [r3, #6]
 8002730:	ee07 3a90 	vmov	s15, r3
 8002734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002738:	ed9f 7ac0 	vldr	s14, [pc, #768]	@ 8002a3c <SBUS_getData+0x5e4>
 800273c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002740:	eddf 6abf 	vldr	s13, [pc, #764]	@ 8002a40 <SBUS_getData+0x5e8>
 8002744:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002748:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 8002a44 <SBUS_getData+0x5ec>
 800274c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002750:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002754:	ee17 3a90 	vmov	r3, s15
 8002758:	b29b      	uxth	r3, r3
 800275a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800275e:	b29a      	uxth	r2, r3
 8002760:	4bb5      	ldr	r3, [pc, #724]	@ (8002a38 <SBUS_getData+0x5e0>)
 8002762:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_4 = (uint16_t)((((float)Radio_input.Canal_4 - 352) /1344 ) * 1000) + 1000;
 8002764:	4bb4      	ldr	r3, [pc, #720]	@ (8002a38 <SBUS_getData+0x5e0>)
 8002766:	891b      	ldrh	r3, [r3, #8]
 8002768:	ee07 3a90 	vmov	s15, r3
 800276c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002770:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8002a3c <SBUS_getData+0x5e4>
 8002774:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002778:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8002a40 <SBUS_getData+0x5e8>
 800277c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002780:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8002a44 <SBUS_getData+0x5ec>
 8002784:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002788:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800278c:	ee17 3a90 	vmov	r3, s15
 8002790:	b29b      	uxth	r3, r3
 8002792:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002796:	b29a      	uxth	r2, r3
 8002798:	4ba7      	ldr	r3, [pc, #668]	@ (8002a38 <SBUS_getData+0x5e0>)
 800279a:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_5 = (uint16_t)((((float)Radio_input.Canal_5 - 352) /1344 ) * 1000) + 1000;
 800279c:	4ba6      	ldr	r3, [pc, #664]	@ (8002a38 <SBUS_getData+0x5e0>)
 800279e:	895b      	ldrh	r3, [r3, #10]
 80027a0:	ee07 3a90 	vmov	s15, r3
 80027a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027a8:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8002a3c <SBUS_getData+0x5e4>
 80027ac:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80027b0:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8002a40 <SBUS_getData+0x5e8>
 80027b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027b8:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8002a44 <SBUS_getData+0x5ec>
 80027bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027c4:	ee17 3a90 	vmov	r3, s15
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	4b99      	ldr	r3, [pc, #612]	@ (8002a38 <SBUS_getData+0x5e0>)
 80027d2:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_6 = (uint16_t)((((float)Radio_input.Canal_6 - 352) /1344 ) * 1000) + 1000;
 80027d4:	4b98      	ldr	r3, [pc, #608]	@ (8002a38 <SBUS_getData+0x5e0>)
 80027d6:	899b      	ldrh	r3, [r3, #12]
 80027d8:	ee07 3a90 	vmov	s15, r3
 80027dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027e0:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8002a3c <SBUS_getData+0x5e4>
 80027e4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80027e8:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8002a40 <SBUS_getData+0x5e8>
 80027ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027f0:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8002a44 <SBUS_getData+0x5ec>
 80027f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027fc:	ee17 3a90 	vmov	r3, s15
 8002800:	b29b      	uxth	r3, r3
 8002802:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002806:	b29a      	uxth	r2, r3
 8002808:	4b8b      	ldr	r3, [pc, #556]	@ (8002a38 <SBUS_getData+0x5e0>)
 800280a:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_7 = (uint16_t)((((float)Radio_input.Canal_7 - 352) /1344 ) * 1000) + 1000;
 800280c:	4b8a      	ldr	r3, [pc, #552]	@ (8002a38 <SBUS_getData+0x5e0>)
 800280e:	89db      	ldrh	r3, [r3, #14]
 8002810:	ee07 3a90 	vmov	s15, r3
 8002814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002818:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8002a3c <SBUS_getData+0x5e4>
 800281c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002820:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8002a40 <SBUS_getData+0x5e8>
 8002824:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002828:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002a44 <SBUS_getData+0x5ec>
 800282c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002830:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002834:	ee17 3a90 	vmov	r3, s15
 8002838:	b29b      	uxth	r3, r3
 800283a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800283e:	b29a      	uxth	r2, r3
 8002840:	4b7d      	ldr	r3, [pc, #500]	@ (8002a38 <SBUS_getData+0x5e0>)
 8002842:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_8 = (uint16_t)((((float)Radio_input.Canal_8 - 352) /1344 ) * 1000) + 1000;
 8002844:	4b7c      	ldr	r3, [pc, #496]	@ (8002a38 <SBUS_getData+0x5e0>)
 8002846:	8a1b      	ldrh	r3, [r3, #16]
 8002848:	ee07 3a90 	vmov	s15, r3
 800284c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002850:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8002a3c <SBUS_getData+0x5e4>
 8002854:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002858:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8002a40 <SBUS_getData+0x5e8>
 800285c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002860:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8002a44 <SBUS_getData+0x5ec>
 8002864:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002868:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800286c:	ee17 3a90 	vmov	r3, s15
 8002870:	b29b      	uxth	r3, r3
 8002872:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002876:	b29a      	uxth	r2, r3
 8002878:	4b6f      	ldr	r3, [pc, #444]	@ (8002a38 <SBUS_getData+0x5e0>)
 800287a:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_9 = (uint16_t)((((float)Radio_input.Canal_9 - 352) /1344 ) * 1000) + 1000;
 800287c:	4b6e      	ldr	r3, [pc, #440]	@ (8002a38 <SBUS_getData+0x5e0>)
 800287e:	8a5b      	ldrh	r3, [r3, #18]
 8002880:	ee07 3a90 	vmov	s15, r3
 8002884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002888:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8002a3c <SBUS_getData+0x5e4>
 800288c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002890:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8002a40 <SBUS_getData+0x5e8>
 8002894:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002898:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8002a44 <SBUS_getData+0x5ec>
 800289c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028a4:	ee17 3a90 	vmov	r3, s15
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	4b61      	ldr	r3, [pc, #388]	@ (8002a38 <SBUS_getData+0x5e0>)
 80028b2:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_10 = (uint16_t)((((float)Radio_input.Canal_10 - 352) /1344 ) * 1000) + 1000;
 80028b4:	4b60      	ldr	r3, [pc, #384]	@ (8002a38 <SBUS_getData+0x5e0>)
 80028b6:	8a9b      	ldrh	r3, [r3, #20]
 80028b8:	ee07 3a90 	vmov	s15, r3
 80028bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028c0:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8002a3c <SBUS_getData+0x5e4>
 80028c4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80028c8:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8002a40 <SBUS_getData+0x5e8>
 80028cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028d0:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8002a44 <SBUS_getData+0x5ec>
 80028d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028dc:	ee17 3a90 	vmov	r3, s15
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	4b53      	ldr	r3, [pc, #332]	@ (8002a38 <SBUS_getData+0x5e0>)
 80028ea:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_11 = (uint16_t)((((float)Radio_input.Canal_11 - 352) /1344 ) * 1000) + 1000;
 80028ec:	4b52      	ldr	r3, [pc, #328]	@ (8002a38 <SBUS_getData+0x5e0>)
 80028ee:	8adb      	ldrh	r3, [r3, #22]
 80028f0:	ee07 3a90 	vmov	s15, r3
 80028f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028f8:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8002a3c <SBUS_getData+0x5e4>
 80028fc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002900:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002a40 <SBUS_getData+0x5e8>
 8002904:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002908:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8002a44 <SBUS_getData+0x5ec>
 800290c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002910:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002914:	ee17 3a90 	vmov	r3, s15
 8002918:	b29b      	uxth	r3, r3
 800291a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800291e:	b29a      	uxth	r2, r3
 8002920:	4b45      	ldr	r3, [pc, #276]	@ (8002a38 <SBUS_getData+0x5e0>)
 8002922:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_12 = (uint16_t)((((float)Radio_input.Canal_12 - 352) /1344 ) * 1000) + 1000;
 8002924:	4b44      	ldr	r3, [pc, #272]	@ (8002a38 <SBUS_getData+0x5e0>)
 8002926:	8b1b      	ldrh	r3, [r3, #24]
 8002928:	ee07 3a90 	vmov	s15, r3
 800292c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002930:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8002a3c <SBUS_getData+0x5e4>
 8002934:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002938:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8002a40 <SBUS_getData+0x5e8>
 800293c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002940:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8002a44 <SBUS_getData+0x5ec>
 8002944:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800294c:	ee17 3a90 	vmov	r3, s15
 8002950:	b29b      	uxth	r3, r3
 8002952:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002956:	b29a      	uxth	r2, r3
 8002958:	4b37      	ldr	r3, [pc, #220]	@ (8002a38 <SBUS_getData+0x5e0>)
 800295a:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_13 = (uint16_t)((((float)Radio_input.Canal_13 - 352) /1344 ) * 1000) + 1000;
 800295c:	4b36      	ldr	r3, [pc, #216]	@ (8002a38 <SBUS_getData+0x5e0>)
 800295e:	8b5b      	ldrh	r3, [r3, #26]
 8002960:	ee07 3a90 	vmov	s15, r3
 8002964:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002968:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8002a3c <SBUS_getData+0x5e4>
 800296c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002970:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8002a40 <SBUS_getData+0x5e8>
 8002974:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002978:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002a44 <SBUS_getData+0x5ec>
 800297c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002984:	ee17 3a90 	vmov	r3, s15
 8002988:	b29b      	uxth	r3, r3
 800298a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800298e:	b29a      	uxth	r2, r3
 8002990:	4b29      	ldr	r3, [pc, #164]	@ (8002a38 <SBUS_getData+0x5e0>)
 8002992:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_14 = (uint16_t)((((float)Radio_input.Canal_14 - 352) /1344 ) * 1000) + 1000;
 8002994:	4b28      	ldr	r3, [pc, #160]	@ (8002a38 <SBUS_getData+0x5e0>)
 8002996:	8b9b      	ldrh	r3, [r3, #28]
 8002998:	ee07 3a90 	vmov	s15, r3
 800299c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029a0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002a3c <SBUS_getData+0x5e4>
 80029a4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80029a8:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8002a40 <SBUS_getData+0x5e8>
 80029ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029b0:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8002a44 <SBUS_getData+0x5ec>
 80029b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029bc:	ee17 3a90 	vmov	r3, s15
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a38 <SBUS_getData+0x5e0>)
 80029ca:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_15 = (uint16_t)((((float)Radio_input.Canal_15 - 352) /1344 ) * 1000) + 1000;
 80029cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002a38 <SBUS_getData+0x5e0>)
 80029ce:	8bdb      	ldrh	r3, [r3, #30]
 80029d0:	ee07 3a90 	vmov	s15, r3
 80029d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029d8:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002a3c <SBUS_getData+0x5e4>
 80029dc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80029e0:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8002a40 <SBUS_getData+0x5e8>
 80029e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029e8:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8002a44 <SBUS_getData+0x5ec>
 80029ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029f4:	ee17 3a90 	vmov	r3, s15
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	4b0d      	ldr	r3, [pc, #52]	@ (8002a38 <SBUS_getData+0x5e0>)
 8002a02:	83da      	strh	r2, [r3, #30]
	Radio_input.Canal_16 = (uint16_t)((((float)Radio_input.Canal_16 - 352) /1344 ) * 1000) + 1000;
 8002a04:	4b0c      	ldr	r3, [pc, #48]	@ (8002a38 <SBUS_getData+0x5e0>)
 8002a06:	8c1b      	ldrh	r3, [r3, #32]
 8002a08:	ee07 3a90 	vmov	s15, r3
 8002a0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a10:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002a3c <SBUS_getData+0x5e4>
 8002a14:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002a18:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8002a40 <SBUS_getData+0x5e8>
 8002a1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a20:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002a44 <SBUS_getData+0x5ec>
 8002a24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a2c:	ee17 3a90 	vmov	r3, s15
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002a36:	e007      	b.n	8002a48 <SBUS_getData+0x5f0>
 8002a38:	24000068 	.word	0x24000068
 8002a3c:	43b00000 	.word	0x43b00000
 8002a40:	44a80000 	.word	0x44a80000
 8002a44:	447a0000 	.word	0x447a0000
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	4b2a      	ldr	r3, [pc, #168]	@ (8002af4 <SBUS_getData+0x69c>)
 8002a4c:	841a      	strh	r2, [r3, #32]

	//En el caso del byte 24, el primer bit menos significativo corresponde al canal 17, el segundo al canal 18, el tercero a el fail safe y
	//el cuarto a la perdida de paquetes. Los 4 restantes no se utilizan.

	Radio_input.Banderas = SBUS_UART_Rx[23];
 8002a4e:	4b2a      	ldr	r3, [pc, #168]	@ (8002af8 <SBUS_getData+0x6a0>)
 8002a50:	7dda      	ldrb	r2, [r3, #23]
 8002a52:	4b28      	ldr	r3, [pc, #160]	@ (8002af4 <SBUS_getData+0x69c>)
 8002a54:	701a      	strb	r2, [r3, #0]
	if(SBUS_UART_Rx[23]>=8){
 8002a56:	4b28      	ldr	r3, [pc, #160]	@ (8002af8 <SBUS_getData+0x6a0>)
 8002a58:	7ddb      	ldrb	r3, [r3, #23]
 8002a5a:	2b07      	cmp	r3, #7
 8002a5c:	d90a      	bls.n	8002a74 <SBUS_getData+0x61c>
		SBUS_UART_Rx[23]-=8;
 8002a5e:	4b26      	ldr	r3, [pc, #152]	@ (8002af8 <SBUS_getData+0x6a0>)
 8002a60:	7ddb      	ldrb	r3, [r3, #23]
 8002a62:	3b08      	subs	r3, #8
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	4b24      	ldr	r3, [pc, #144]	@ (8002af8 <SBUS_getData+0x6a0>)
 8002a68:	75da      	strb	r2, [r3, #23]
		Radio_input.fail_safe = FailSafe;
 8002a6a:	4b22      	ldr	r3, [pc, #136]	@ (8002af4 <SBUS_getData+0x69c>)
 8002a6c:	2235      	movs	r2, #53	@ 0x35
 8002a6e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8002a72:	e003      	b.n	8002a7c <SBUS_getData+0x624>
	}else Radio_input.fail_safe= Ok;
 8002a74:	4b1f      	ldr	r3, [pc, #124]	@ (8002af4 <SBUS_getData+0x69c>)
 8002a76:	22aa      	movs	r2, #170	@ 0xaa
 8002a78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

	if(SBUS_UART_Rx[23]>=4){
 8002a7c:	4b1e      	ldr	r3, [pc, #120]	@ (8002af8 <SBUS_getData+0x6a0>)
 8002a7e:	7ddb      	ldrb	r3, [r3, #23]
 8002a80:	2b03      	cmp	r3, #3
 8002a82:	d90a      	bls.n	8002a9a <SBUS_getData+0x642>
		SBUS_UART_Rx[23]-=4;
 8002a84:	4b1c      	ldr	r3, [pc, #112]	@ (8002af8 <SBUS_getData+0x6a0>)
 8002a86:	7ddb      	ldrb	r3, [r3, #23]
 8002a88:	3b04      	subs	r3, #4
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8002af8 <SBUS_getData+0x6a0>)
 8002a8e:	75da      	strb	r2, [r3, #23]
		Radio_input.pkg_lost = Pkg_Lost;
 8002a90:	4b18      	ldr	r3, [pc, #96]	@ (8002af4 <SBUS_getData+0x69c>)
 8002a92:	2210      	movs	r2, #16
 8002a94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002a98:	e003      	b.n	8002aa2 <SBUS_getData+0x64a>
	}else Radio_input.pkg_lost=Ok;
 8002a9a:	4b16      	ldr	r3, [pc, #88]	@ (8002af4 <SBUS_getData+0x69c>)
 8002a9c:	22aa      	movs	r2, #170	@ 0xaa
 8002a9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if(SBUS_UART_Rx[23]>=2){
 8002aa2:	4b15      	ldr	r3, [pc, #84]	@ (8002af8 <SBUS_getData+0x6a0>)
 8002aa4:	7ddb      	ldrb	r3, [r3, #23]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d90a      	bls.n	8002ac0 <SBUS_getData+0x668>
		SBUS_UART_Rx[23]-=2;
 8002aaa:	4b13      	ldr	r3, [pc, #76]	@ (8002af8 <SBUS_getData+0x6a0>)
 8002aac:	7ddb      	ldrb	r3, [r3, #23]
 8002aae:	3b02      	subs	r3, #2
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	4b11      	ldr	r3, [pc, #68]	@ (8002af8 <SBUS_getData+0x6a0>)
 8002ab4:	75da      	strb	r2, [r3, #23]
		Radio_input.Interruptor_2=ON;
 8002ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8002af4 <SBUS_getData+0x69c>)
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 8002abe:	e003      	b.n	8002ac8 <SBUS_getData+0x670>
	}else Radio_input.Interruptor_2=OFF;
 8002ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8002af4 <SBUS_getData+0x69c>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	if(SBUS_UART_Rx[23]){
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8002af8 <SBUS_getData+0x6a0>)
 8002aca:	7ddb      	ldrb	r3, [r3, #23]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d004      	beq.n	8002ada <SBUS_getData+0x682>
		Radio_input.Interruptor_1=ON;
 8002ad0:	4b08      	ldr	r3, [pc, #32]	@ (8002af4 <SBUS_getData+0x69c>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8002ad8:	e003      	b.n	8002ae2 <SBUS_getData+0x68a>
	}else Radio_input.Interruptor_1=OFF;
 8002ada:	4b06      	ldr	r3, [pc, #24]	@ (8002af4 <SBUS_getData+0x69c>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22


	Radio_input.Uart_Counter = 0;
 8002ae2:	4b04      	ldr	r3, [pc, #16]	@ (8002af4 <SBUS_getData+0x69c>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	Temp_BypassFunct();
 8002aea:	f7ff fc81 	bl	80023f0 <Temp_BypassFunct>

}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	24000068 	.word	0x24000068
 8002af8:	240004b4 	.word	0x240004b4

08002afc <SBUS_IntegrityVerification>:

void SBUS_IntegrityVerification(void){
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0

	if(Radio_input.Uart_Counter != 255){
 8002b00:	4b0f      	ldr	r3, [pc, #60]	@ (8002b40 <SBUS_IntegrityVerification+0x44>)
 8002b02:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8002b06:	2bff      	cmp	r3, #255	@ 0xff
 8002b08:	d00c      	beq.n	8002b24 <SBUS_IntegrityVerification+0x28>
		Radio_input.Uart_Counter++;
 8002b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b40 <SBUS_IntegrityVerification+0x44>)
 8002b0c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8002b10:	3301      	adds	r3, #1
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	4b0a      	ldr	r3, [pc, #40]	@ (8002b40 <SBUS_IntegrityVerification+0x44>)
 8002b16:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		Radio_input.uart_error = Ok;
 8002b1a:	4b09      	ldr	r3, [pc, #36]	@ (8002b40 <SBUS_IntegrityVerification+0x44>)
 8002b1c:	22aa      	movs	r2, #170	@ 0xaa
 8002b1e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	}
	else{
		Radio_input.uart_error = Uart_Error;
		Radio_input.fail_safe = FailSafe;
	}
}
 8002b22:	e007      	b.n	8002b34 <SBUS_IntegrityVerification+0x38>
		Radio_input.uart_error = Uart_Error;
 8002b24:	4b06      	ldr	r3, [pc, #24]	@ (8002b40 <SBUS_IntegrityVerification+0x44>)
 8002b26:	2220      	movs	r2, #32
 8002b28:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		Radio_input.fail_safe = FailSafe;
 8002b2c:	4b04      	ldr	r3, [pc, #16]	@ (8002b40 <SBUS_IntegrityVerification+0x44>)
 8002b2e:	2235      	movs	r2, #53	@ 0x35
 8002b30:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 8002b34:	bf00      	nop
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	24000068 	.word	0x24000068

08002b44 <ASCII2uint8>:

char BlackBoxBuffer[16][255];

blackbox_data_t blackbox_data;

uint8_t ASCII2uint8(char *buffer, uint8_t Size){
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	70fb      	strb	r3, [r7, #3]
	uint8_t inter = 0;
 8002b50:	2300      	movs	r3, #0
 8002b52:	73fb      	strb	r3, [r7, #15]

	for (uint8_t n = 0; n < Size; ++n) {
 8002b54:	2300      	movs	r3, #0
 8002b56:	73bb      	strb	r3, [r7, #14]
 8002b58:	e011      	b.n	8002b7e <ASCII2uint8+0x3a>
		inter *= 10;
 8002b5a:	7bfb      	ldrb	r3, [r7, #15]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	0092      	lsls	r2, r2, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	73fb      	strb	r3, [r7, #15]

		inter += (buffer[n] - 48);
 8002b66:	7bbb      	ldrb	r3, [r7, #14]
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	781a      	ldrb	r2, [r3, #0]
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
 8002b70:	4413      	add	r3, r2
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	3b30      	subs	r3, #48	@ 0x30
 8002b76:	73fb      	strb	r3, [r7, #15]
	for (uint8_t n = 0; n < Size; ++n) {
 8002b78:	7bbb      	ldrb	r3, [r7, #14]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	73bb      	strb	r3, [r7, #14]
 8002b7e:	7bba      	ldrb	r2, [r7, #14]
 8002b80:	78fb      	ldrb	r3, [r7, #3]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d3e9      	bcc.n	8002b5a <ASCII2uint8+0x16>
	}
	return inter;
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <uint82ASCII>:

void uint82ASCII(uint8_t Inter, char *Output){
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	6039      	str	r1, [r7, #0]
 8002b9e:	71fb      	strb	r3, [r7, #7]
	Output[0] = Inter/100;
 8002ba0:	79fb      	ldrb	r3, [r7, #7]
 8002ba2:	4a27      	ldr	r2, [pc, #156]	@ (8002c40 <uint82ASCII+0xac>)
 8002ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba8:	095b      	lsrs	r3, r3, #5
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	701a      	strb	r2, [r3, #0]
	Output[1] = (Inter - Output[0]*100) /10;
 8002bb0:	79fa      	ldrb	r2, [r7, #7]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8002bbc:	fb01 f303 	mul.w	r3, r1, r3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	4a20      	ldr	r2, [pc, #128]	@ (8002c44 <uint82ASCII+0xb0>)
 8002bc4:	fb82 1203 	smull	r1, r2, r2, r3
 8002bc8:	1092      	asrs	r2, r2, #2
 8002bca:	17db      	asrs	r3, r3, #31
 8002bcc:	1ad2      	subs	r2, r2, r3
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	701a      	strb	r2, [r3, #0]
	Output[2] = (Inter - Output[0]*100 - Output[1]*10) ;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	0092      	lsls	r2, r2, #2
 8002bde:	441a      	add	r2, r3
 8002be0:	00d2      	lsls	r2, r2, #3
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	3301      	adds	r3, #1
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	4619      	mov	r1, r3
 8002bf0:	0149      	lsls	r1, r1, #5
 8002bf2:	1ac9      	subs	r1, r1, r3
 8002bf4:	0089      	lsls	r1, r1, #2
 8002bf6:	1acb      	subs	r3, r1, r3
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	b2d9      	uxtb	r1, r3
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	3302      	adds	r3, #2
 8002c04:	79fa      	ldrb	r2, [r7, #7]
 8002c06:	440a      	add	r2, r1
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	701a      	strb	r2, [r3, #0]

	for (uint8_t n = 0; n < 3; ++n) {
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	73fb      	strb	r3, [r7, #15]
 8002c10:	e00c      	b.n	8002c2c <uint82ASCII+0x98>
		Output[n] +=48;
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	4413      	add	r3, r2
 8002c18:	781a      	ldrb	r2, [r3, #0]
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
 8002c1c:	6839      	ldr	r1, [r7, #0]
 8002c1e:	440b      	add	r3, r1
 8002c20:	3230      	adds	r2, #48	@ 0x30
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	701a      	strb	r2, [r3, #0]
	for (uint8_t n = 0; n < 3; ++n) {
 8002c26:	7bfb      	ldrb	r3, [r7, #15]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	73fb      	strb	r3, [r7, #15]
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d9ef      	bls.n	8002c12 <uint82ASCII+0x7e>
	}
}
 8002c32:	bf00      	nop
 8002c34:	bf00      	nop
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	51eb851f 	.word	0x51eb851f
 8002c44:	66666667 	.word	0x66666667

08002c48 <ConfigFile_Create>:
		Output[n] +=48;
		Scaler /= 10;
	}
}

void ConfigFile_Create(void){
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0

	f_unlink(ConfigFile);
 8002c4c:	480c      	ldr	r0, [pc, #48]	@ (8002c80 <ConfigFile_Create+0x38>)
 8002c4e:	f012 faba 	bl	80151c6 <f_unlink>

	f_open(&Config, ConfigFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8002c52:	2213      	movs	r2, #19
 8002c54:	490a      	ldr	r1, [pc, #40]	@ (8002c80 <ConfigFile_Create+0x38>)
 8002c56:	480b      	ldr	r0, [pc, #44]	@ (8002c84 <ConfigFile_Create+0x3c>)
 8002c58:	f011 fae4 	bl	8014224 <f_open>

	f_printf(&Config, "Version: ");
 8002c5c:	490a      	ldr	r1, [pc, #40]	@ (8002c88 <ConfigFile_Create+0x40>)
 8002c5e:	4809      	ldr	r0, [pc, #36]	@ (8002c84 <ConfigFile_Create+0x3c>)
 8002c60:	f012 fd04 	bl	801566c <f_printf>
	f_printf(&Config,  SystemConfig.FWVersion);
 8002c64:	4909      	ldr	r1, [pc, #36]	@ (8002c8c <ConfigFile_Create+0x44>)
 8002c66:	4807      	ldr	r0, [pc, #28]	@ (8002c84 <ConfigFile_Create+0x3c>)
 8002c68:	f012 fd00 	bl	801566c <f_printf>
	f_printf(&Config, "\nN. Reset: 000\n");
 8002c6c:	4908      	ldr	r1, [pc, #32]	@ (8002c90 <ConfigFile_Create+0x48>)
 8002c6e:	4805      	ldr	r0, [pc, #20]	@ (8002c84 <ConfigFile_Create+0x3c>)
 8002c70:	f012 fcfc 	bl	801566c <f_printf>
	f_close(&Config);
 8002c74:	4803      	ldr	r0, [pc, #12]	@ (8002c84 <ConfigFile_Create+0x3c>)
 8002c76:	f012 f80e 	bl	8014c96 <f_close>
}
 8002c7a:	bf00      	nop
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	240000b0 	.word	0x240000b0
 8002c84:	2400253c 	.word	0x2400253c
 8002c88:	08018bd0 	.word	0x08018bd0
 8002c8c:	24000090 	.word	0x24000090
 8002c90:	08018bdc 	.word	0x08018bdc

08002c94 <SD_ConfigFileInit>:

void SD_ConfigFileInit(void){
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
	char FileVersion[5] = {0};
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	603b      	str	r3, [r7, #0]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	713b      	strb	r3, [r7, #4]

	f_open(&Config, ConfigFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8002ca2:	2213      	movs	r2, #19
 8002ca4:	492b      	ldr	r1, [pc, #172]	@ (8002d54 <SD_ConfigFileInit+0xc0>)
 8002ca6:	482c      	ldr	r0, [pc, #176]	@ (8002d58 <SD_ConfigFileInit+0xc4>)
 8002ca8:	f011 fabc 	bl	8014224 <f_open>

	f_lseek(&Config, Config_FWVersion);
 8002cac:	2109      	movs	r1, #9
 8002cae:	482a      	ldr	r0, [pc, #168]	@ (8002d58 <SD_ConfigFileInit+0xc4>)
 8002cb0:	f012 f865 	bl	8014d7e <f_lseek>

	f_read(&Config, FileVersion, 5, &br);
 8002cb4:	4639      	mov	r1, r7
 8002cb6:	4b29      	ldr	r3, [pc, #164]	@ (8002d5c <SD_ConfigFileInit+0xc8>)
 8002cb8:	2205      	movs	r2, #5
 8002cba:	4827      	ldr	r0, [pc, #156]	@ (8002d58 <SD_ConfigFileInit+0xc4>)
 8002cbc:	f011 fc7a 	bl	80145b4 <f_read>

	f_close(&Config);
 8002cc0:	4825      	ldr	r0, [pc, #148]	@ (8002d58 <SD_ConfigFileInit+0xc4>)
 8002cc2:	f011 ffe8 	bl	8014c96 <f_close>

	for (uint8_t n = 0; n < 5; ++n) {
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	71fb      	strb	r3, [r7, #7]
 8002cca:	e010      	b.n	8002cee <SD_ConfigFileInit+0x5a>
		if(FileVersion[n] != SystemConfig.FWVersion[n]){
 8002ccc:	79fb      	ldrb	r3, [r7, #7]
 8002cce:	3308      	adds	r3, #8
 8002cd0:	443b      	add	r3, r7
 8002cd2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	4921      	ldr	r1, [pc, #132]	@ (8002d60 <SD_ConfigFileInit+0xcc>)
 8002cda:	5ccb      	ldrb	r3, [r1, r3]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d003      	beq.n	8002ce8 <SD_ConfigFileInit+0x54>
			ConfigFile_Create();
 8002ce0:	f7ff ffb2 	bl	8002c48 <ConfigFile_Create>
			n = 5;
 8002ce4:	2305      	movs	r3, #5
 8002ce6:	71fb      	strb	r3, [r7, #7]
	for (uint8_t n = 0; n < 5; ++n) {
 8002ce8:	79fb      	ldrb	r3, [r7, #7]
 8002cea:	3301      	adds	r3, #1
 8002cec:	71fb      	strb	r3, [r7, #7]
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d9eb      	bls.n	8002ccc <SD_ConfigFileInit+0x38>
		}
	}
	f_open(&Config, ConfigFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8002cf4:	2213      	movs	r2, #19
 8002cf6:	4917      	ldr	r1, [pc, #92]	@ (8002d54 <SD_ConfigFileInit+0xc0>)
 8002cf8:	4817      	ldr	r0, [pc, #92]	@ (8002d58 <SD_ConfigFileInit+0xc4>)
 8002cfa:	f011 fa93 	bl	8014224 <f_open>

	f_lseek(&Config, 26);
 8002cfe:	211a      	movs	r1, #26
 8002d00:	4815      	ldr	r0, [pc, #84]	@ (8002d58 <SD_ConfigFileInit+0xc4>)
 8002d02:	f012 f83c 	bl	8014d7e <f_lseek>
	f_read(&Config, NResetChar, 3, &br);
 8002d06:	4b15      	ldr	r3, [pc, #84]	@ (8002d5c <SD_ConfigFileInit+0xc8>)
 8002d08:	2203      	movs	r2, #3
 8002d0a:	4916      	ldr	r1, [pc, #88]	@ (8002d64 <SD_ConfigFileInit+0xd0>)
 8002d0c:	4812      	ldr	r0, [pc, #72]	@ (8002d58 <SD_ConfigFileInit+0xc4>)
 8002d0e:	f011 fc51 	bl	80145b4 <f_read>

	SystemConfig.ResetCounter = ASCII2uint8(NResetChar, 3) + 1;
 8002d12:	2103      	movs	r1, #3
 8002d14:	4813      	ldr	r0, [pc, #76]	@ (8002d64 <SD_ConfigFileInit+0xd0>)
 8002d16:	f7ff ff15 	bl	8002b44 <ASCII2uint8>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	4b0f      	ldr	r3, [pc, #60]	@ (8002d60 <SD_ConfigFileInit+0xcc>)
 8002d22:	715a      	strb	r2, [r3, #5]
	uint82ASCII(SystemConfig.ResetCounter, NResetChar);
 8002d24:	4b0e      	ldr	r3, [pc, #56]	@ (8002d60 <SD_ConfigFileInit+0xcc>)
 8002d26:	795b      	ldrb	r3, [r3, #5]
 8002d28:	490e      	ldr	r1, [pc, #56]	@ (8002d64 <SD_ConfigFileInit+0xd0>)
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff ff32 	bl	8002b94 <uint82ASCII>

	f_lseek(&Config, 26);
 8002d30:	211a      	movs	r1, #26
 8002d32:	4809      	ldr	r0, [pc, #36]	@ (8002d58 <SD_ConfigFileInit+0xc4>)
 8002d34:	f012 f823 	bl	8014d7e <f_lseek>
	f_write(&Config, NResetChar, 3, &bw);
 8002d38:	4b0b      	ldr	r3, [pc, #44]	@ (8002d68 <SD_ConfigFileInit+0xd4>)
 8002d3a:	2203      	movs	r2, #3
 8002d3c:	4909      	ldr	r1, [pc, #36]	@ (8002d64 <SD_ConfigFileInit+0xd0>)
 8002d3e:	4806      	ldr	r0, [pc, #24]	@ (8002d58 <SD_ConfigFileInit+0xc4>)
 8002d40:	f011 fd97 	bl	8014872 <f_write>

	f_close(&Config);
 8002d44:	4804      	ldr	r0, [pc, #16]	@ (8002d58 <SD_ConfigFileInit+0xc4>)
 8002d46:	f011 ffa6 	bl	8014c96 <f_close>

}
 8002d4a:	bf00      	nop
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	240000b0 	.word	0x240000b0
 8002d58:	2400253c 	.word	0x2400253c
 8002d5c:	24003570 	.word	0x24003570
 8002d60:	24000090 	.word	0x24000090
 8002d64:	240000bc 	.word	0x240000bc
 8002d68:	24003574 	.word	0x24003574

08002d6c <SD_GainsInit>:

void SD_GainsInit(void){
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0

}
 8002d70:	bf00      	nop
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
	...

08002d7c <SD_CreateFlightPath>:

void SD_CreateFlightPath(void){
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
	FlightPaht[6] = NResetChar[0];
 8002d80:	4b09      	ldr	r3, [pc, #36]	@ (8002da8 <SD_CreateFlightPath+0x2c>)
 8002d82:	781a      	ldrb	r2, [r3, #0]
 8002d84:	4b09      	ldr	r3, [pc, #36]	@ (8002dac <SD_CreateFlightPath+0x30>)
 8002d86:	719a      	strb	r2, [r3, #6]
	FlightPaht[7] = NResetChar[1];
 8002d88:	4b07      	ldr	r3, [pc, #28]	@ (8002da8 <SD_CreateFlightPath+0x2c>)
 8002d8a:	785a      	ldrb	r2, [r3, #1]
 8002d8c:	4b07      	ldr	r3, [pc, #28]	@ (8002dac <SD_CreateFlightPath+0x30>)
 8002d8e:	71da      	strb	r2, [r3, #7]
	FlightPaht[8] = NResetChar[2];
 8002d90:	4b05      	ldr	r3, [pc, #20]	@ (8002da8 <SD_CreateFlightPath+0x2c>)
 8002d92:	789a      	ldrb	r2, [r3, #2]
 8002d94:	4b05      	ldr	r3, [pc, #20]	@ (8002dac <SD_CreateFlightPath+0x30>)
 8002d96:	721a      	strb	r2, [r3, #8]

	f_mkdir(FlightPaht);
 8002d98:	4804      	ldr	r0, [pc, #16]	@ (8002dac <SD_CreateFlightPath+0x30>)
 8002d9a:	f012 fad5 	bl	8015348 <f_mkdir>
	f_chdir(FlightPaht);
 8002d9e:	4803      	ldr	r0, [pc, #12]	@ (8002dac <SD_CreateFlightPath+0x30>)
 8002da0:	f011 ffa3 	bl	8014cea <f_chdir>
}
 8002da4:	bf00      	nop
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	240000bc 	.word	0x240000bc
 8002dac:	24000098 	.word	0x24000098

08002db0 <SD_blackbox_init>:

void SD_blackbox_init(void){
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0

	f_open(&BlackBox, BlackBoxFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8002db4:	2213      	movs	r2, #19
 8002db6:	4903      	ldr	r1, [pc, #12]	@ (8002dc4 <SD_blackbox_init+0x14>)
 8002db8:	4803      	ldr	r0, [pc, #12]	@ (8002dc8 <SD_blackbox_init+0x18>)
 8002dba:	f011 fa33 	bl	8014224 <f_open>
}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	240000a4 	.word	0x240000a4
 8002dc8:	2400150c 	.word	0x2400150c

08002dcc <SD_blackbox_refresh>:

void SD_blackbox_refresh(void){
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0

	blackbox_data.Time = TimeOn_Counter;
 8002dd0:	4b7e      	ldr	r3, [pc, #504]	@ (8002fcc <SD_blackbox_refresh+0x200>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a7e      	ldr	r2, [pc, #504]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002dd6:	6653      	str	r3, [r2, #100]	@ 0x64

	blackbox_data.Ax = IMU.ACC.x;
 8002dd8:	4b7e      	ldr	r3, [pc, #504]	@ (8002fd4 <SD_blackbox_refresh+0x208>)
 8002dda:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002dde:	497c      	ldr	r1, [pc, #496]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002de0:	e9c1 2300 	strd	r2, r3, [r1]
	blackbox_data.Ay = IMU.ACC.y;
 8002de4:	4b7b      	ldr	r3, [pc, #492]	@ (8002fd4 <SD_blackbox_refresh+0x208>)
 8002de6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002dea:	4979      	ldr	r1, [pc, #484]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002dec:	e9c1 2302 	strd	r2, r3, [r1, #8]
	blackbox_data.Az = IMU.ACC.z;
 8002df0:	4b78      	ldr	r3, [pc, #480]	@ (8002fd4 <SD_blackbox_refresh+0x208>)
 8002df2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002df6:	4976      	ldr	r1, [pc, #472]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002df8:	e9c1 2304 	strd	r2, r3, [r1, #16]

	blackbox_data.Gx = IMU.GYR.x;
 8002dfc:	4b75      	ldr	r3, [pc, #468]	@ (8002fd4 <SD_blackbox_refresh+0x208>)
 8002dfe:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8002e02:	4973      	ldr	r1, [pc, #460]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002e04:	e9c1 2306 	strd	r2, r3, [r1, #24]
	blackbox_data.Gy = IMU.GYR.y;
 8002e08:	4b72      	ldr	r3, [pc, #456]	@ (8002fd4 <SD_blackbox_refresh+0x208>)
 8002e0a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8002e0e:	4970      	ldr	r1, [pc, #448]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002e10:	e9c1 2308 	strd	r2, r3, [r1, #32]
	blackbox_data.Gz = IMU.GYR.z;
 8002e14:	4b6f      	ldr	r3, [pc, #444]	@ (8002fd4 <SD_blackbox_refresh+0x208>)
 8002e16:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002e1a:	496d      	ldr	r1, [pc, #436]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002e1c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

	blackbox_data.Gfx = 0;
 8002e20:	496b      	ldr	r1, [pc, #428]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	f04f 0300 	mov.w	r3, #0
 8002e2a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	blackbox_data.Gfy = 0;
 8002e2e:	4968      	ldr	r1, [pc, #416]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002e30:	f04f 0200 	mov.w	r2, #0
 8002e34:	f04f 0300 	mov.w	r3, #0
 8002e38:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	blackbox_data.Gfz = 0;
 8002e3c:	4964      	ldr	r1, [pc, #400]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	f04f 0300 	mov.w	r3, #0
 8002e46:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	blackbox_data.Roll    = IMU.Roll;
 8002e4a:	4b62      	ldr	r3, [pc, #392]	@ (8002fd4 <SD_blackbox_refresh+0x208>)
 8002e4c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8002e50:	495f      	ldr	r1, [pc, #380]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002e52:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
	blackbox_data.Pitch   = IMU.Pitch;
 8002e56:	4b5f      	ldr	r3, [pc, #380]	@ (8002fd4 <SD_blackbox_refresh+0x208>)
 8002e58:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8002e5c:	495c      	ldr	r1, [pc, #368]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002e5e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	blackbox_data.Heading = IMU.Heading;
 8002e62:	4b5c      	ldr	r3, [pc, #368]	@ (8002fd4 <SD_blackbox_refresh+0x208>)
 8002e64:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8002e68:	4959      	ldr	r1, [pc, #356]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002e6a:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	blackbox_data.Alt = BMP280.Barometric_Altitude;
 8002e6e:	4b5a      	ldr	r3, [pc, #360]	@ (8002fd8 <SD_blackbox_refresh+0x20c>)
 8002e70:	8a1a      	ldrh	r2, [r3, #16]
 8002e72:	4b57      	ldr	r3, [pc, #348]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002e74:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
	blackbox_data.Latitude = 0;
 8002e78:	4b55      	ldr	r3, [pc, #340]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	669a      	str	r2, [r3, #104]	@ 0x68
	blackbox_data.Longitude= 0;
 8002e7e:	4b54      	ldr	r3, [pc, #336]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	66da      	str	r2, [r3, #108]	@ 0x6c

	blackbox_data.ARSP = 0;
 8002e84:	4b52      	ldr	r3, [pc, #328]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76

	blackbox_data.Pressure = BMP280.Pressure;
 8002e8c:	4b52      	ldr	r3, [pc, #328]	@ (8002fd8 <SD_blackbox_refresh+0x20c>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	4a4f      	ldr	r2, [pc, #316]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002e92:	6713      	str	r3, [r2, #112]	@ 0x70

	blackbox_data.SBUS_Flags = Radio_input.Banderas;
 8002e94:	4b51      	ldr	r3, [pc, #324]	@ (8002fdc <SD_blackbox_refresh+0x210>)
 8002e96:	781a      	ldrb	r2, [r3, #0]
 8002e98:	4b4d      	ldr	r3, [pc, #308]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002e9a:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
	blackbox_data.Flight_Mode = 0;
 8002e9e:	4b4c      	ldr	r3, [pc, #304]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad

	blackbox_data.Canal_1 = Radio_input.Canal_1;
 8002ea6:	4b4d      	ldr	r3, [pc, #308]	@ (8002fdc <SD_blackbox_refresh+0x210>)
 8002ea8:	885a      	ldrh	r2, [r3, #2]
 8002eaa:	4b49      	ldr	r3, [pc, #292]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002eac:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
	blackbox_data.Canal_2 = Radio_input.Canal_2;
 8002eb0:	4b4a      	ldr	r3, [pc, #296]	@ (8002fdc <SD_blackbox_refresh+0x210>)
 8002eb2:	889a      	ldrh	r2, [r3, #4]
 8002eb4:	4b46      	ldr	r3, [pc, #280]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002eb6:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a
	blackbox_data.Canal_3 = Radio_input.Canal_3;
 8002eba:	4b48      	ldr	r3, [pc, #288]	@ (8002fdc <SD_blackbox_refresh+0x210>)
 8002ebc:	88da      	ldrh	r2, [r3, #6]
 8002ebe:	4b44      	ldr	r3, [pc, #272]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002ec0:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
	blackbox_data.Canal_4 = Radio_input.Canal_4;
 8002ec4:	4b45      	ldr	r3, [pc, #276]	@ (8002fdc <SD_blackbox_refresh+0x210>)
 8002ec6:	891a      	ldrh	r2, [r3, #8]
 8002ec8:	4b41      	ldr	r3, [pc, #260]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002eca:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
	blackbox_data.Canal_5 = Radio_input.Canal_5;
 8002ece:	4b43      	ldr	r3, [pc, #268]	@ (8002fdc <SD_blackbox_refresh+0x210>)
 8002ed0:	895a      	ldrh	r2, [r3, #10]
 8002ed2:	4b3f      	ldr	r3, [pc, #252]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002ed4:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
	blackbox_data.Canal_6 = Radio_input.Canal_6;
 8002ed8:	4b40      	ldr	r3, [pc, #256]	@ (8002fdc <SD_blackbox_refresh+0x210>)
 8002eda:	899a      	ldrh	r2, [r3, #12]
 8002edc:	4b3c      	ldr	r3, [pc, #240]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002ede:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	blackbox_data.Canal_7 = Radio_input.Canal_7;
 8002ee2:	4b3e      	ldr	r3, [pc, #248]	@ (8002fdc <SD_blackbox_refresh+0x210>)
 8002ee4:	89da      	ldrh	r2, [r3, #14]
 8002ee6:	4b3a      	ldr	r3, [pc, #232]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002ee8:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
	blackbox_data.Canal_8 = Radio_input.Canal_8;
 8002eec:	4b3b      	ldr	r3, [pc, #236]	@ (8002fdc <SD_blackbox_refresh+0x210>)
 8002eee:	8a1a      	ldrh	r2, [r3, #16]
 8002ef0:	4b37      	ldr	r3, [pc, #220]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002ef2:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
	blackbox_data.Canal_9 = Radio_input.Canal_9;
 8002ef6:	4b39      	ldr	r3, [pc, #228]	@ (8002fdc <SD_blackbox_refresh+0x210>)
 8002ef8:	8a5a      	ldrh	r2, [r3, #18]
 8002efa:	4b35      	ldr	r3, [pc, #212]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002efc:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
	blackbox_data.Canal_10 = Radio_input.Canal_10;
 8002f00:	4b36      	ldr	r3, [pc, #216]	@ (8002fdc <SD_blackbox_refresh+0x210>)
 8002f02:	8a9a      	ldrh	r2, [r3, #20]
 8002f04:	4b32      	ldr	r3, [pc, #200]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002f06:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
	blackbox_data.Canal_11 = Radio_input.Canal_11;
 8002f0a:	4b34      	ldr	r3, [pc, #208]	@ (8002fdc <SD_blackbox_refresh+0x210>)
 8002f0c:	8ada      	ldrh	r2, [r3, #22]
 8002f0e:	4b30      	ldr	r3, [pc, #192]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002f10:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
	blackbox_data.Canal_12 = Radio_input.Canal_12;
 8002f14:	4b31      	ldr	r3, [pc, #196]	@ (8002fdc <SD_blackbox_refresh+0x210>)
 8002f16:	8b1a      	ldrh	r2, [r3, #24]
 8002f18:	4b2d      	ldr	r3, [pc, #180]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002f1a:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
	blackbox_data.Canal_13 = Radio_input.Canal_13;
 8002f1e:	4b2f      	ldr	r3, [pc, #188]	@ (8002fdc <SD_blackbox_refresh+0x210>)
 8002f20:	8b5a      	ldrh	r2, [r3, #26]
 8002f22:	4b2b      	ldr	r3, [pc, #172]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002f24:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
	blackbox_data.Canal_14 = Radio_input.Canal_14;
 8002f28:	4b2c      	ldr	r3, [pc, #176]	@ (8002fdc <SD_blackbox_refresh+0x210>)
 8002f2a:	8b9a      	ldrh	r2, [r3, #28]
 8002f2c:	4b28      	ldr	r3, [pc, #160]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002f2e:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
	blackbox_data.Canal_15 = Radio_input.Canal_15;
 8002f32:	4b2a      	ldr	r3, [pc, #168]	@ (8002fdc <SD_blackbox_refresh+0x210>)
 8002f34:	8bda      	ldrh	r2, [r3, #30]
 8002f36:	4b26      	ldr	r3, [pc, #152]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002f38:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
	blackbox_data.Canal_16 = Radio_input.Canal_16;
 8002f3c:	4b27      	ldr	r3, [pc, #156]	@ (8002fdc <SD_blackbox_refresh+0x210>)
 8002f3e:	8c1a      	ldrh	r2, [r3, #32]
 8002f40:	4b23      	ldr	r3, [pc, #140]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002f42:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96

	blackbox_data.Interruptor_1 = Radio_input.Interruptor_1;
 8002f46:	4b25      	ldr	r3, [pc, #148]	@ (8002fdc <SD_blackbox_refresh+0x210>)
 8002f48:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8002f4c:	4b20      	ldr	r3, [pc, #128]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002f4e:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
	blackbox_data.Interruptor_2 = Radio_input.Interruptor_2;
 8002f52:	4b22      	ldr	r3, [pc, #136]	@ (8002fdc <SD_blackbox_refresh+0x210>)
 8002f54:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8002f58:	4b1d      	ldr	r3, [pc, #116]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002f5a:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf

	blackbox_data.OUT1  = PWM_Output.Canal_1;
 8002f5e:	4b20      	ldr	r3, [pc, #128]	@ (8002fe0 <SD_blackbox_refresh+0x214>)
 8002f60:	881a      	ldrh	r2, [r3, #0]
 8002f62:	4b1b      	ldr	r3, [pc, #108]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002f64:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
	blackbox_data.OUT2  = PWM_Output.Canal_2;
 8002f68:	4b1d      	ldr	r3, [pc, #116]	@ (8002fe0 <SD_blackbox_refresh+0x214>)
 8002f6a:	885a      	ldrh	r2, [r3, #2]
 8002f6c:	4b18      	ldr	r3, [pc, #96]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002f6e:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
	blackbox_data.OUT3  = PWM_Output.Canal_3;
 8002f72:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe0 <SD_blackbox_refresh+0x214>)
 8002f74:	889a      	ldrh	r2, [r3, #4]
 8002f76:	4b16      	ldr	r3, [pc, #88]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002f78:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
	blackbox_data.OUT4  = PWM_Output.Canal_4;
 8002f7c:	4b18      	ldr	r3, [pc, #96]	@ (8002fe0 <SD_blackbox_refresh+0x214>)
 8002f7e:	88da      	ldrh	r2, [r3, #6]
 8002f80:	4b13      	ldr	r3, [pc, #76]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002f82:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
	blackbox_data.OUT5  = PWM_Output.Canal_5;
 8002f86:	4b16      	ldr	r3, [pc, #88]	@ (8002fe0 <SD_blackbox_refresh+0x214>)
 8002f88:	891a      	ldrh	r2, [r3, #8]
 8002f8a:	4b11      	ldr	r3, [pc, #68]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002f8c:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	blackbox_data.OUT6  = PWM_Output.Canal_6;
 8002f90:	4b13      	ldr	r3, [pc, #76]	@ (8002fe0 <SD_blackbox_refresh+0x214>)
 8002f92:	895a      	ldrh	r2, [r3, #10]
 8002f94:	4b0e      	ldr	r3, [pc, #56]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002f96:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
	blackbox_data.OUT7  = PWM_Output.Canal_7;
 8002f9a:	4b11      	ldr	r3, [pc, #68]	@ (8002fe0 <SD_blackbox_refresh+0x214>)
 8002f9c:	899a      	ldrh	r2, [r3, #12]
 8002f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002fa0:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
	blackbox_data.OUT8  = PWM_Output.Canal_8;
 8002fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8002fe0 <SD_blackbox_refresh+0x214>)
 8002fa6:	89da      	ldrh	r2, [r3, #14]
 8002fa8:	4b09      	ldr	r3, [pc, #36]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002faa:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
	blackbox_data.OUT9  = PWM_Output.Canal_9;
 8002fae:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe0 <SD_blackbox_refresh+0x214>)
 8002fb0:	8a1a      	ldrh	r2, [r3, #16]
 8002fb2:	4b07      	ldr	r3, [pc, #28]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002fb4:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
	blackbox_data.OUT10 = PWM_Output.Canal_10;
 8002fb8:	4b09      	ldr	r3, [pc, #36]	@ (8002fe0 <SD_blackbox_refresh+0x214>)
 8002fba:	8a5a      	ldrh	r2, [r3, #18]
 8002fbc:	4b04      	ldr	r3, [pc, #16]	@ (8002fd0 <SD_blackbox_refresh+0x204>)
 8002fbe:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
}
 8002fc2:	bf00      	nop
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	24004df4 	.word	0x24004df4
 8002fd0:	24004568 	.word	0x24004568
 8002fd4:	24000410 	.word	0x24000410
 8002fd8:	240002cc 	.word	0x240002cc
 8002fdc:	24000068 	.word	0x24000068
 8002fe0:	24000054 	.word	0x24000054

08002fe4 <SD_blackbox_write>:
	BlackBoxFile[4] = ActualFile[4];

	f_open(&BlackBox, BlackBoxFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
}

void SD_blackbox_write(void){
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
	static uint8_t NewFileCount = 0;
	static uint32_t DataCount = 0;
	static uint16_t WriteCount = 0;

	SD_blackbox_refresh();
 8002fea:	f7ff feef 	bl	8002dcc <SD_blackbox_refresh>

	blackbox_data.Nmsg = DataCount;
 8002fee:	4b26      	ldr	r3, [pc, #152]	@ (8003088 <SD_blackbox_write+0xa4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a26      	ldr	r2, [pc, #152]	@ (800308c <SD_blackbox_write+0xa8>)
 8002ff4:	6613      	str	r3, [r2, #96]	@ 0x60
	memcpy(&BlackBoxBuffer[WriteCount],&blackbox_data,sizeof(blackbox_data));
 8002ff6:	4b26      	ldr	r3, [pc, #152]	@ (8003090 <SD_blackbox_write+0xac>)
 8002ff8:	881b      	ldrh	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	021b      	lsls	r3, r3, #8
 8003000:	1a9b      	subs	r3, r3, r2
 8003002:	4a24      	ldr	r2, [pc, #144]	@ (8003094 <SD_blackbox_write+0xb0>)
 8003004:	4413      	add	r3, r2
 8003006:	22b0      	movs	r2, #176	@ 0xb0
 8003008:	4920      	ldr	r1, [pc, #128]	@ (800308c <SD_blackbox_write+0xa8>)
 800300a:	4618      	mov	r0, r3
 800300c:	f013 fe55 	bl	8016cba <memcpy>

	if(WriteCount == 15){
 8003010:	4b1f      	ldr	r3, [pc, #124]	@ (8003090 <SD_blackbox_write+0xac>)
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	2b0f      	cmp	r3, #15
 8003016:	d129      	bne.n	800306c <SD_blackbox_write+0x88>
		for (uint8_t n = 0; n < 16; ++n) {
 8003018:	2300      	movs	r3, #0
 800301a:	71fb      	strb	r3, [r7, #7]
 800301c:	e00d      	b.n	800303a <SD_blackbox_write+0x56>
			f_write(&BlackBox, &BlackBoxBuffer[n], sizeof(blackbox_data), &bw);
 800301e:	79fa      	ldrb	r2, [r7, #7]
 8003020:	4613      	mov	r3, r2
 8003022:	021b      	lsls	r3, r3, #8
 8003024:	1a9b      	subs	r3, r3, r2
 8003026:	4a1b      	ldr	r2, [pc, #108]	@ (8003094 <SD_blackbox_write+0xb0>)
 8003028:	1899      	adds	r1, r3, r2
 800302a:	4b1b      	ldr	r3, [pc, #108]	@ (8003098 <SD_blackbox_write+0xb4>)
 800302c:	22b0      	movs	r2, #176	@ 0xb0
 800302e:	481b      	ldr	r0, [pc, #108]	@ (800309c <SD_blackbox_write+0xb8>)
 8003030:	f011 fc1f 	bl	8014872 <f_write>
		for (uint8_t n = 0; n < 16; ++n) {
 8003034:	79fb      	ldrb	r3, [r7, #7]
 8003036:	3301      	adds	r3, #1
 8003038:	71fb      	strb	r3, [r7, #7]
 800303a:	79fb      	ldrb	r3, [r7, #7]
 800303c:	2b0f      	cmp	r3, #15
 800303e:	d9ee      	bls.n	800301e <SD_blackbox_write+0x3a>
		}
		fresult = f_sync(&BlackBox);
 8003040:	4816      	ldr	r0, [pc, #88]	@ (800309c <SD_blackbox_write+0xb8>)
 8003042:	f011 fdaa 	bl	8014b9a <f_sync>
 8003046:	4603      	mov	r3, r0
 8003048:	461a      	mov	r2, r3
 800304a:	4b15      	ldr	r3, [pc, #84]	@ (80030a0 <SD_blackbox_write+0xbc>)
 800304c:	701a      	strb	r2, [r3, #0]
		WriteCount = 0;
 800304e:	4b10      	ldr	r3, [pc, #64]	@ (8003090 <SD_blackbox_write+0xac>)
 8003050:	2200      	movs	r2, #0
 8003052:	801a      	strh	r2, [r3, #0]
		++NewFileCount;
 8003054:	4b13      	ldr	r3, [pc, #76]	@ (80030a4 <SD_blackbox_write+0xc0>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	3301      	adds	r3, #1
 800305a:	b2da      	uxtb	r2, r3
 800305c:	4b11      	ldr	r3, [pc, #68]	@ (80030a4 <SD_blackbox_write+0xc0>)
 800305e:	701a      	strb	r2, [r3, #0]
		++DataCount;
 8003060:	4b09      	ldr	r3, [pc, #36]	@ (8003088 <SD_blackbox_write+0xa4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	3301      	adds	r3, #1
 8003066:	4a08      	ldr	r2, [pc, #32]	@ (8003088 <SD_blackbox_write+0xa4>)
 8003068:	6013      	str	r3, [r2, #0]
		return;
 800306a:	e00a      	b.n	8003082 <SD_blackbox_write+0x9e>
	}
	++WriteCount;
 800306c:	4b08      	ldr	r3, [pc, #32]	@ (8003090 <SD_blackbox_write+0xac>)
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	3301      	adds	r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	4b06      	ldr	r3, [pc, #24]	@ (8003090 <SD_blackbox_write+0xac>)
 8003076:	801a      	strh	r2, [r3, #0]
	++DataCount;
 8003078:	4b03      	ldr	r3, [pc, #12]	@ (8003088 <SD_blackbox_write+0xa4>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	3301      	adds	r3, #1
 800307e:	4a02      	ldr	r2, [pc, #8]	@ (8003088 <SD_blackbox_write+0xa4>)
 8003080:	6013      	str	r3, [r2, #0]
}
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	24004618 	.word	0x24004618
 800308c:	24004568 	.word	0x24004568
 8003090:	2400461c 	.word	0x2400461c
 8003094:	24003578 	.word	0x24003578
 8003098:	24003574 	.word	0x24003574
 800309c:	2400150c 	.word	0x2400150c
 80030a0:	2400356c 	.word	0x2400356c
 80030a4:	2400461e 	.word	0x2400461e

080030a8 <SD_init>:


void SD_init(void){
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
	  fresult = f_mount(&fs, "/", 1);
 80030ac:	2201      	movs	r2, #1
 80030ae:	4909      	ldr	r1, [pc, #36]	@ (80030d4 <SD_init+0x2c>)
 80030b0:	4809      	ldr	r0, [pc, #36]	@ (80030d8 <SD_init+0x30>)
 80030b2:	f011 f871 	bl	8014198 <f_mount>
 80030b6:	4603      	mov	r3, r0
 80030b8:	461a      	mov	r2, r3
 80030ba:	4b08      	ldr	r3, [pc, #32]	@ (80030dc <SD_init+0x34>)
 80030bc:	701a      	strb	r2, [r3, #0]
	  SD_ConfigFileInit();
 80030be:	f7ff fde9 	bl	8002c94 <SD_ConfigFileInit>
	  SD_GainsInit();
 80030c2:	f7ff fe53 	bl	8002d6c <SD_GainsInit>
	  SD_CreateFlightPath();
 80030c6:	f7ff fe59 	bl	8002d7c <SD_CreateFlightPath>
	  SD_blackbox_init();
 80030ca:	f7ff fe71 	bl	8002db0 <SD_blackbox_init>
}
 80030ce:	bf00      	nop
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	08018bec 	.word	0x08018bec
 80030d8:	240004d0 	.word	0x240004d0
 80030dc:	2400356c 	.word	0x2400356c

080030e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80030e6:	4b15      	ldr	r3, [pc, #84]	@ (800313c <MX_DMA_Init+0x5c>)
 80030e8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80030ec:	4a13      	ldr	r2, [pc, #76]	@ (800313c <MX_DMA_Init+0x5c>)
 80030ee:	f043 0301 	orr.w	r3, r3, #1
 80030f2:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80030f6:	4b11      	ldr	r3, [pc, #68]	@ (800313c <MX_DMA_Init+0x5c>)
 80030f8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	607b      	str	r3, [r7, #4]
 8003102:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003104:	2200      	movs	r2, #0
 8003106:	2100      	movs	r1, #0
 8003108:	200b      	movs	r0, #11
 800310a:	f002 fbc6 	bl	800589a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800310e:	200b      	movs	r0, #11
 8003110:	f002 fbdd 	bl	80058ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003114:	2200      	movs	r2, #0
 8003116:	2100      	movs	r1, #0
 8003118:	200c      	movs	r0, #12
 800311a:	f002 fbbe 	bl	800589a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800311e:	200c      	movs	r0, #12
 8003120:	f002 fbd5 	bl	80058ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8003124:	2200      	movs	r2, #0
 8003126:	2100      	movs	r1, #0
 8003128:	200d      	movs	r0, #13
 800312a:	f002 fbb6 	bl	800589a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800312e:	200d      	movs	r0, #13
 8003130:	f002 fbcd 	bl	80058ce <HAL_NVIC_EnableIRQ>

}
 8003134:	bf00      	nop
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	58024400 	.word	0x58024400

08003140 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8003144:	4b2e      	ldr	r3, [pc, #184]	@ (8003200 <MX_FDCAN1_Init+0xc0>)
 8003146:	4a2f      	ldr	r2, [pc, #188]	@ (8003204 <MX_FDCAN1_Init+0xc4>)
 8003148:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800314a:	4b2d      	ldr	r3, [pc, #180]	@ (8003200 <MX_FDCAN1_Init+0xc0>)
 800314c:	2200      	movs	r2, #0
 800314e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8003150:	4b2b      	ldr	r3, [pc, #172]	@ (8003200 <MX_FDCAN1_Init+0xc0>)
 8003152:	2200      	movs	r2, #0
 8003154:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8003156:	4b2a      	ldr	r3, [pc, #168]	@ (8003200 <MX_FDCAN1_Init+0xc0>)
 8003158:	2200      	movs	r2, #0
 800315a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800315c:	4b28      	ldr	r3, [pc, #160]	@ (8003200 <MX_FDCAN1_Init+0xc0>)
 800315e:	2200      	movs	r2, #0
 8003160:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8003162:	4b27      	ldr	r3, [pc, #156]	@ (8003200 <MX_FDCAN1_Init+0xc0>)
 8003164:	2200      	movs	r2, #0
 8003166:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8003168:	4b25      	ldr	r3, [pc, #148]	@ (8003200 <MX_FDCAN1_Init+0xc0>)
 800316a:	2210      	movs	r2, #16
 800316c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800316e:	4b24      	ldr	r3, [pc, #144]	@ (8003200 <MX_FDCAN1_Init+0xc0>)
 8003170:	2201      	movs	r2, #1
 8003172:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8003174:	4b22      	ldr	r3, [pc, #136]	@ (8003200 <MX_FDCAN1_Init+0xc0>)
 8003176:	2202      	movs	r2, #2
 8003178:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800317a:	4b21      	ldr	r3, [pc, #132]	@ (8003200 <MX_FDCAN1_Init+0xc0>)
 800317c:	2202      	movs	r2, #2
 800317e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8003180:	4b1f      	ldr	r3, [pc, #124]	@ (8003200 <MX_FDCAN1_Init+0xc0>)
 8003182:	2201      	movs	r2, #1
 8003184:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8003186:	4b1e      	ldr	r3, [pc, #120]	@ (8003200 <MX_FDCAN1_Init+0xc0>)
 8003188:	2201      	movs	r2, #1
 800318a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800318c:	4b1c      	ldr	r3, [pc, #112]	@ (8003200 <MX_FDCAN1_Init+0xc0>)
 800318e:	2201      	movs	r2, #1
 8003190:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8003192:	4b1b      	ldr	r3, [pc, #108]	@ (8003200 <MX_FDCAN1_Init+0xc0>)
 8003194:	2201      	movs	r2, #1
 8003196:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8003198:	4b19      	ldr	r3, [pc, #100]	@ (8003200 <MX_FDCAN1_Init+0xc0>)
 800319a:	2200      	movs	r2, #0
 800319c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800319e:	4b18      	ldr	r3, [pc, #96]	@ (8003200 <MX_FDCAN1_Init+0xc0>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80031a4:	4b16      	ldr	r3, [pc, #88]	@ (8003200 <MX_FDCAN1_Init+0xc0>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 80031aa:	4b15      	ldr	r3, [pc, #84]	@ (8003200 <MX_FDCAN1_Init+0xc0>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80031b0:	4b13      	ldr	r3, [pc, #76]	@ (8003200 <MX_FDCAN1_Init+0xc0>)
 80031b2:	2204      	movs	r2, #4
 80031b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80031b6:	4b12      	ldr	r3, [pc, #72]	@ (8003200 <MX_FDCAN1_Init+0xc0>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80031bc:	4b10      	ldr	r3, [pc, #64]	@ (8003200 <MX_FDCAN1_Init+0xc0>)
 80031be:	2204      	movs	r2, #4
 80031c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80031c2:	4b0f      	ldr	r3, [pc, #60]	@ (8003200 <MX_FDCAN1_Init+0xc0>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80031c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003200 <MX_FDCAN1_Init+0xc0>)
 80031ca:	2204      	movs	r2, #4
 80031cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80031ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003200 <MX_FDCAN1_Init+0xc0>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80031d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003200 <MX_FDCAN1_Init+0xc0>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80031da:	4b09      	ldr	r3, [pc, #36]	@ (8003200 <MX_FDCAN1_Init+0xc0>)
 80031dc:	2200      	movs	r2, #0
 80031de:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80031e0:	4b07      	ldr	r3, [pc, #28]	@ (8003200 <MX_FDCAN1_Init+0xc0>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80031e6:	4b06      	ldr	r3, [pc, #24]	@ (8003200 <MX_FDCAN1_Init+0xc0>)
 80031e8:	2204      	movs	r2, #4
 80031ea:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80031ec:	4804      	ldr	r0, [pc, #16]	@ (8003200 <MX_FDCAN1_Init+0xc0>)
 80031ee:	f005 faeb 	bl	80087c8 <HAL_FDCAN_Init>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80031f8:	f000 ff9c 	bl	8004134 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80031fc:	bf00      	nop
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	24004620 	.word	0x24004620
 8003204:	4000a000 	.word	0x4000a000

08003208 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b0ba      	sub	sp, #232	@ 0xe8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003210:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	605a      	str	r2, [r3, #4]
 800321a:	609a      	str	r2, [r3, #8]
 800321c:	60da      	str	r2, [r3, #12]
 800321e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003220:	f107 0310 	add.w	r3, r7, #16
 8003224:	22c0      	movs	r2, #192	@ 0xc0
 8003226:	2100      	movs	r1, #0
 8003228:	4618      	mov	r0, r3
 800322a:	f013 fcac 	bl	8016b86 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a2f      	ldr	r2, [pc, #188]	@ (80032f0 <HAL_FDCAN_MspInit+0xe8>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d157      	bne.n	80032e8 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003238:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800323c:	f04f 0300 	mov.w	r3, #0
 8003240:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8003244:	2304      	movs	r3, #4
 8003246:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 8003248:	2308      	movs	r3, #8
 800324a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800324c:	2302      	movs	r3, #2
 800324e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8003250:	2301      	movs	r3, #1
 8003252:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8003254:	2302      	movs	r3, #2
 8003256:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8003258:	23c0      	movs	r3, #192	@ 0xc0
 800325a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800325c:	2300      	movs	r3, #0
 800325e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003260:	2300      	movs	r3, #0
 8003262:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8003264:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003268:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800326c:	f107 0310 	add.w	r3, r7, #16
 8003270:	4618      	mov	r0, r3
 8003272:	f007 f903 	bl	800a47c <HAL_RCCEx_PeriphCLKConfig>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 800327c:	f000 ff5a 	bl	8004134 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8003280:	4b1c      	ldr	r3, [pc, #112]	@ (80032f4 <HAL_FDCAN_MspInit+0xec>)
 8003282:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8003286:	4a1b      	ldr	r2, [pc, #108]	@ (80032f4 <HAL_FDCAN_MspInit+0xec>)
 8003288:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800328c:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8003290:	4b18      	ldr	r3, [pc, #96]	@ (80032f4 <HAL_FDCAN_MspInit+0xec>)
 8003292:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8003296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800329e:	4b15      	ldr	r3, [pc, #84]	@ (80032f4 <HAL_FDCAN_MspInit+0xec>)
 80032a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80032a4:	4a13      	ldr	r2, [pc, #76]	@ (80032f4 <HAL_FDCAN_MspInit+0xec>)
 80032a6:	f043 0301 	orr.w	r3, r3, #1
 80032aa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80032ae:	4b11      	ldr	r3, [pc, #68]	@ (80032f4 <HAL_FDCAN_MspInit+0xec>)
 80032b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	60bb      	str	r3, [r7, #8]
 80032ba:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80032bc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80032c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c4:	2302      	movs	r3, #2
 80032c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ca:	2300      	movs	r3, #0
 80032cc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d0:	2300      	movs	r3, #0
 80032d2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80032d6:	2309      	movs	r3, #9
 80032d8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032dc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80032e0:	4619      	mov	r1, r3
 80032e2:	4805      	ldr	r0, [pc, #20]	@ (80032f8 <HAL_FDCAN_MspInit+0xf0>)
 80032e4:	f005 fdd4 	bl	8008e90 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80032e8:	bf00      	nop
 80032ea:	37e8      	adds	r7, #232	@ 0xe8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	4000a000 	.word	0x4000a000
 80032f4:	58024400 	.word	0x58024400
 80032f8:	58020000 	.word	0x58020000

080032fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b08a      	sub	sp, #40	@ 0x28
 8003300:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003302:	f107 0314 	add.w	r3, r7, #20
 8003306:	2200      	movs	r2, #0
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	605a      	str	r2, [r3, #4]
 800330c:	609a      	str	r2, [r3, #8]
 800330e:	60da      	str	r2, [r3, #12]
 8003310:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003312:	4b4e      	ldr	r3, [pc, #312]	@ (800344c <MX_GPIO_Init+0x150>)
 8003314:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003318:	4a4c      	ldr	r2, [pc, #304]	@ (800344c <MX_GPIO_Init+0x150>)
 800331a:	f043 0304 	orr.w	r3, r3, #4
 800331e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003322:	4b4a      	ldr	r3, [pc, #296]	@ (800344c <MX_GPIO_Init+0x150>)
 8003324:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	613b      	str	r3, [r7, #16]
 800332e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003330:	4b46      	ldr	r3, [pc, #280]	@ (800344c <MX_GPIO_Init+0x150>)
 8003332:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003336:	4a45      	ldr	r2, [pc, #276]	@ (800344c <MX_GPIO_Init+0x150>)
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003340:	4b42      	ldr	r3, [pc, #264]	@ (800344c <MX_GPIO_Init+0x150>)
 8003342:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800334e:	4b3f      	ldr	r3, [pc, #252]	@ (800344c <MX_GPIO_Init+0x150>)
 8003350:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003354:	4a3d      	ldr	r2, [pc, #244]	@ (800344c <MX_GPIO_Init+0x150>)
 8003356:	f043 0302 	orr.w	r3, r3, #2
 800335a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800335e:	4b3b      	ldr	r3, [pc, #236]	@ (800344c <MX_GPIO_Init+0x150>)
 8003360:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	60bb      	str	r3, [r7, #8]
 800336a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800336c:	4b37      	ldr	r3, [pc, #220]	@ (800344c <MX_GPIO_Init+0x150>)
 800336e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003372:	4a36      	ldr	r2, [pc, #216]	@ (800344c <MX_GPIO_Init+0x150>)
 8003374:	f043 0308 	orr.w	r3, r3, #8
 8003378:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800337c:	4b33      	ldr	r3, [pc, #204]	@ (800344c <MX_GPIO_Init+0x150>)
 800337e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	607b      	str	r3, [r7, #4]
 8003388:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 800338a:	2200      	movs	r2, #0
 800338c:	f242 010f 	movw	r1, #8207	@ 0x200f
 8003390:	482f      	ldr	r0, [pc, #188]	@ (8003450 <MX_GPIO_Init+0x154>)
 8003392:	f005 ff2d 	bl	80091f0 <HAL_GPIO_WritePin>
                          |LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 8003396:	2200      	movs	r2, #0
 8003398:	2110      	movs	r1, #16
 800339a:	482e      	ldr	r0, [pc, #184]	@ (8003454 <MX_GPIO_Init+0x158>)
 800339c:	f005 ff28 	bl	80091f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU_BOOT_Pin|BME_NSS_Pin, GPIO_PIN_RESET);
 80033a0:	2200      	movs	r2, #0
 80033a2:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 80033a6:	482c      	ldr	r0, [pc, #176]	@ (8003458 <MX_GPIO_Init+0x15c>)
 80033a8:	f005 ff22 	bl	80091f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, GPIO_PIN_RESET);
 80033ac:	2200      	movs	r2, #0
 80033ae:	2104      	movs	r1, #4
 80033b0:	482a      	ldr	r0, [pc, #168]	@ (800345c <MX_GPIO_Init+0x160>)
 80033b2:	f005 ff1d 	bl	80091f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 80033b6:	f242 030f 	movw	r3, #8207	@ 0x200f
 80033ba:	617b      	str	r3, [r7, #20]
                          |LED_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033bc:	2301      	movs	r3, #1
 80033be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c0:	2300      	movs	r3, #0
 80033c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c4:	2300      	movs	r3, #0
 80033c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033c8:	f107 0314 	add.w	r3, r7, #20
 80033cc:	4619      	mov	r1, r3
 80033ce:	4820      	ldr	r0, [pc, #128]	@ (8003450 <MX_GPIO_Init+0x154>)
 80033d0:	f005 fd5e 	bl	8008e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 80033d4:	2310      	movs	r3, #16
 80033d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033d8:	2301      	movs	r3, #1
 80033da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033dc:	2300      	movs	r3, #0
 80033de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e0:	2300      	movs	r3, #0
 80033e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 80033e4:	f107 0314 	add.w	r3, r7, #20
 80033e8:	4619      	mov	r1, r3
 80033ea:	481a      	ldr	r0, [pc, #104]	@ (8003454 <MX_GPIO_Init+0x158>)
 80033ec:	f005 fd50 	bl	8008e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IMU_BOOT_Pin|BME_NSS_Pin;
 80033f0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80033f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033f6:	2301      	movs	r3, #1
 80033f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033fe:	2300      	movs	r3, #0
 8003400:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003402:	f107 0314 	add.w	r3, r7, #20
 8003406:	4619      	mov	r1, r3
 8003408:	4813      	ldr	r0, [pc, #76]	@ (8003458 <MX_GPIO_Init+0x15c>)
 800340a:	f005 fd41 	bl	8008e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 800340e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003414:	2300      	movs	r3, #0
 8003416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003418:	2300      	movs	r3, #0
 800341a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 800341c:	f107 0314 	add.w	r3, r7, #20
 8003420:	4619      	mov	r1, r3
 8003422:	480b      	ldr	r0, [pc, #44]	@ (8003450 <MX_GPIO_Init+0x154>)
 8003424:	f005 fd34 	bl	8008e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin;
 8003428:	2304      	movs	r3, #4
 800342a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800342c:	2301      	movs	r3, #1
 800342e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003430:	2300      	movs	r3, #0
 8003432:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003434:	2300      	movs	r3, #0
 8003436:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_RST_GPIO_Port, &GPIO_InitStruct);
 8003438:	f107 0314 	add.w	r3, r7, #20
 800343c:	4619      	mov	r1, r3
 800343e:	4807      	ldr	r0, [pc, #28]	@ (800345c <MX_GPIO_Init+0x160>)
 8003440:	f005 fd26 	bl	8008e90 <HAL_GPIO_Init>

}
 8003444:	bf00      	nop
 8003446:	3728      	adds	r7, #40	@ 0x28
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	58024400 	.word	0x58024400
 8003450:	58020800 	.word	0x58020800
 8003454:	58020000 	.word	0x58020000
 8003458:	58020400 	.word	0x58020400
 800345c:	58020c00 	.word	0x58020c00

08003460 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003464:	4b1b      	ldr	r3, [pc, #108]	@ (80034d4 <MX_I2C3_Init+0x74>)
 8003466:	4a1c      	ldr	r2, [pc, #112]	@ (80034d8 <MX_I2C3_Init+0x78>)
 8003468:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B0CCFF;
 800346a:	4b1a      	ldr	r3, [pc, #104]	@ (80034d4 <MX_I2C3_Init+0x74>)
 800346c:	4a1b      	ldr	r2, [pc, #108]	@ (80034dc <MX_I2C3_Init+0x7c>)
 800346e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8003470:	4b18      	ldr	r3, [pc, #96]	@ (80034d4 <MX_I2C3_Init+0x74>)
 8003472:	2200      	movs	r2, #0
 8003474:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003476:	4b17      	ldr	r3, [pc, #92]	@ (80034d4 <MX_I2C3_Init+0x74>)
 8003478:	2201      	movs	r2, #1
 800347a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800347c:	4b15      	ldr	r3, [pc, #84]	@ (80034d4 <MX_I2C3_Init+0x74>)
 800347e:	2200      	movs	r2, #0
 8003480:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8003482:	4b14      	ldr	r3, [pc, #80]	@ (80034d4 <MX_I2C3_Init+0x74>)
 8003484:	2200      	movs	r2, #0
 8003486:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003488:	4b12      	ldr	r3, [pc, #72]	@ (80034d4 <MX_I2C3_Init+0x74>)
 800348a:	2200      	movs	r2, #0
 800348c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800348e:	4b11      	ldr	r3, [pc, #68]	@ (80034d4 <MX_I2C3_Init+0x74>)
 8003490:	2200      	movs	r2, #0
 8003492:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003494:	4b0f      	ldr	r3, [pc, #60]	@ (80034d4 <MX_I2C3_Init+0x74>)
 8003496:	2200      	movs	r2, #0
 8003498:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800349a:	480e      	ldr	r0, [pc, #56]	@ (80034d4 <MX_I2C3_Init+0x74>)
 800349c:	f005 fec2 	bl	8009224 <HAL_I2C_Init>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80034a6:	f000 fe45 	bl	8004134 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80034aa:	2100      	movs	r1, #0
 80034ac:	4809      	ldr	r0, [pc, #36]	@ (80034d4 <MX_I2C3_Init+0x74>)
 80034ae:	f005 ff55 	bl	800935c <HAL_I2CEx_ConfigAnalogFilter>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80034b8:	f000 fe3c 	bl	8004134 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80034bc:	2100      	movs	r1, #0
 80034be:	4805      	ldr	r0, [pc, #20]	@ (80034d4 <MX_I2C3_Init+0x74>)
 80034c0:	f005 ff97 	bl	80093f2 <HAL_I2CEx_ConfigDigitalFilter>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80034ca:	f000 fe33 	bl	8004134 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80034ce:	bf00      	nop
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	240046c0 	.word	0x240046c0
 80034d8:	40005c00 	.word	0x40005c00
 80034dc:	20b0ccff 	.word	0x20b0ccff

080034e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b0bc      	sub	sp, #240	@ 0xf0
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	605a      	str	r2, [r3, #4]
 80034f2:	609a      	str	r2, [r3, #8]
 80034f4:	60da      	str	r2, [r3, #12]
 80034f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034f8:	f107 0318 	add.w	r3, r7, #24
 80034fc:	22c0      	movs	r2, #192	@ 0xc0
 80034fe:	2100      	movs	r1, #0
 8003500:	4618      	mov	r0, r3
 8003502:	f013 fb40 	bl	8016b86 <memset>
  if(i2cHandle->Instance==I2C3)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a39      	ldr	r2, [pc, #228]	@ (80035f0 <HAL_I2C_MspInit+0x110>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d16b      	bne.n	80035e8 <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003510:	f04f 0208 	mov.w	r2, #8
 8003514:	f04f 0300 	mov.w	r3, #0
 8003518:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800351c:	2300      	movs	r3, #0
 800351e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003522:	f107 0318 	add.w	r3, r7, #24
 8003526:	4618      	mov	r0, r3
 8003528:	f006 ffa8 	bl	800a47c <HAL_RCCEx_PeriphCLKConfig>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8003532:	f000 fdff 	bl	8004134 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003536:	4b2f      	ldr	r3, [pc, #188]	@ (80035f4 <HAL_I2C_MspInit+0x114>)
 8003538:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800353c:	4a2d      	ldr	r2, [pc, #180]	@ (80035f4 <HAL_I2C_MspInit+0x114>)
 800353e:	f043 0304 	orr.w	r3, r3, #4
 8003542:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003546:	4b2b      	ldr	r3, [pc, #172]	@ (80035f4 <HAL_I2C_MspInit+0x114>)
 8003548:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800354c:	f003 0304 	and.w	r3, r3, #4
 8003550:	617b      	str	r3, [r7, #20]
 8003552:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003554:	4b27      	ldr	r3, [pc, #156]	@ (80035f4 <HAL_I2C_MspInit+0x114>)
 8003556:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800355a:	4a26      	ldr	r2, [pc, #152]	@ (80035f4 <HAL_I2C_MspInit+0x114>)
 800355c:	f043 0301 	orr.w	r3, r3, #1
 8003560:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003564:	4b23      	ldr	r3, [pc, #140]	@ (80035f4 <HAL_I2C_MspInit+0x114>)
 8003566:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	613b      	str	r3, [r7, #16]
 8003570:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003572:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003576:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800357a:	2312      	movs	r3, #18
 800357c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003580:	2300      	movs	r3, #0
 8003582:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003586:	2300      	movs	r3, #0
 8003588:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800358c:	2304      	movs	r3, #4
 800358e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003592:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003596:	4619      	mov	r1, r3
 8003598:	4817      	ldr	r0, [pc, #92]	@ (80035f8 <HAL_I2C_MspInit+0x118>)
 800359a:	f005 fc79 	bl	8008e90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800359e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035a6:	2312      	movs	r3, #18
 80035a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ac:	2300      	movs	r3, #0
 80035ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b2:	2300      	movs	r3, #0
 80035b4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80035b8:	2304      	movs	r3, #4
 80035ba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035be:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80035c2:	4619      	mov	r1, r3
 80035c4:	480d      	ldr	r0, [pc, #52]	@ (80035fc <HAL_I2C_MspInit+0x11c>)
 80035c6:	f005 fc63 	bl	8008e90 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80035ca:	4b0a      	ldr	r3, [pc, #40]	@ (80035f4 <HAL_I2C_MspInit+0x114>)
 80035cc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80035d0:	4a08      	ldr	r2, [pc, #32]	@ (80035f4 <HAL_I2C_MspInit+0x114>)
 80035d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80035d6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80035da:	4b06      	ldr	r3, [pc, #24]	@ (80035f4 <HAL_I2C_MspInit+0x114>)
 80035dc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80035e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80035e8:	bf00      	nop
 80035ea:	37f0      	adds	r7, #240	@ 0xf0
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40005c00 	.word	0x40005c00
 80035f4:	58024400 	.word	0x58024400
 80035f8:	58020800 	.word	0x58020800
 80035fc:	58020000 	.word	0x58020000

08003600 <default_CB>:
static float speed_fall_barrier;	/**< Barrier of decreasing speed*/
/**
 * default_CB() is a default function for all the CB pointers which do nothing.\n
 * The unregistering CB pointer is setting to pointer of this function.  
 */
static void default_CB(void){}
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
 8003604:	bf00      	nop
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
	...

08003610 <NMEA_parser>:
 * NMEA_parser is function which parses single correct NMEA message.\n
 * Inside this function all known types of NMEA message are recognized and nmea_data structure fields are set.\n
 * There is also implemented mechanism of recognizing specified events and calling corresponding to them callbacks.
 * @param[in]	message	pointer to buffer storing NMEA message.
 */
static void 	NMEA_parser(char *message){
 8003610:	b5b0      	push	{r4, r5, r7, lr}
 8003612:	b0b2      	sub	sp, #200	@ 0xc8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]

	NMEA_data previous_data = nmea_data;
 8003618:	4ba9      	ldr	r3, [pc, #676]	@ (80038c0 <NMEA_parser+0x2b0>)
 800361a:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800361e:	461d      	mov	r5, r3
 8003620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800362a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800362c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003630:	e884 0003 	stmia.w	r4, {r0, r1}

	int num = 0;
 8003634:	2300      	movs	r3, #0
 8003636:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	char *fields[32]={NULL};
 800363a:	f107 030c 	add.w	r3, r7, #12
 800363e:	2280      	movs	r2, #128	@ 0x80
 8003640:	2100      	movs	r1, #0
 8003642:	4618      	mov	r0, r3
 8003644:	f013 fa9f 	bl	8016b86 <memset>
	fields[num++]=message;
 8003648:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800364c:	1c5a      	adds	r2, r3, #1
 800364e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	33c8      	adds	r3, #200	@ 0xc8
 8003656:	443b      	add	r3, r7
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	f843 2cbc 	str.w	r2, [r3, #-188]
	while ((message = strchr(message, ','))) {
 800365e:	e00f      	b.n	8003680 <NMEA_parser+0x70>
		*message++ = 0;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	607a      	str	r2, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	701a      	strb	r2, [r3, #0]
		fields[num++]=message;
 800366a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800366e:	1c5a      	adds	r2, r3, #1
 8003670:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	33c8      	adds	r3, #200	@ 0xc8
 8003678:	443b      	add	r3, r7
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	f843 2cbc 	str.w	r2, [r3, #-188]
	while ((message = strchr(message, ','))) {
 8003680:	212c      	movs	r1, #44	@ 0x2c
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f013 fa87 	bl	8016b96 <strchr>
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1e7      	bne.n	8003660 <NMEA_parser+0x50>
	}

	if(strcmp(fields[0],"$GPGLL")==0){
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	498c      	ldr	r1, [pc, #560]	@ (80038c4 <NMEA_parser+0x2b4>)
 8003694:	4618      	mov	r0, r3
 8003696:	f7fc fe2b 	bl	80002f0 <strcmp>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d11e      	bne.n	80036de <NMEA_parser+0xce>

		nmea_data.latitude = atof(fields[1]);
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f012 fb22 	bl	8015cec <atof>
 80036a8:	eeb0 7b40 	vmov.f64	d7, d0
 80036ac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80036b0:	4b83      	ldr	r3, [pc, #524]	@ (80038c0 <NMEA_parser+0x2b0>)
 80036b2:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[2];
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	781a      	ldrb	r2, [r3, #0]
 80036ba:	4b81      	ldr	r3, [pc, #516]	@ (80038c0 <NMEA_parser+0x2b0>)
 80036bc:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[3]);
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f012 fb13 	bl	8015cec <atof>
 80036c6:	eeb0 7b40 	vmov.f64	d7, d0
 80036ca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80036ce:	4b7c      	ldr	r3, [pc, #496]	@ (80038c0 <NMEA_parser+0x2b0>)
 80036d0:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[4];
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	781a      	ldrb	r2, [r3, #0]
 80036d8:	4b79      	ldr	r3, [pc, #484]	@ (80038c0 <NMEA_parser+0x2b0>)
 80036da:	751a      	strb	r2, [r3, #20]
 80036dc:	e10d      	b.n	80038fa <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPRMC")==0){
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	4979      	ldr	r1, [pc, #484]	@ (80038c8 <NMEA_parser+0x2b8>)
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7fc fe04 	bl	80002f0 <strcmp>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d130      	bne.n	8003750 <NMEA_parser+0x140>

		nmea_data.UTC_time = atof(fields[1]);
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f012 fafb 	bl	8015cec <atof>
 80036f6:	eeb0 7b40 	vmov.f64	d7, d0
 80036fa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80036fe:	4b70      	ldr	r3, [pc, #448]	@ (80038c0 <NMEA_parser+0x2b0>)
 8003700:	edc3 7a00 	vstr	s15, [r3]
		nmea_data.UT_date = atoi(fields[9]);
 8003704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003706:	4618      	mov	r0, r3
 8003708:	f012 faf3 	bl	8015cf2 <atoi>
 800370c:	4603      	mov	r3, r0
 800370e:	4a6c      	ldr	r2, [pc, #432]	@ (80038c0 <NMEA_parser+0x2b0>)
 8003710:	6053      	str	r3, [r2, #4]

		nmea_data.latitude = atof(fields[3]);
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	4618      	mov	r0, r3
 8003716:	f012 fae9 	bl	8015cec <atof>
 800371a:	eeb0 7b40 	vmov.f64	d7, d0
 800371e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003722:	4b67      	ldr	r3, [pc, #412]	@ (80038c0 <NMEA_parser+0x2b0>)
 8003724:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[4];
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	781a      	ldrb	r2, [r3, #0]
 800372c:	4b64      	ldr	r3, [pc, #400]	@ (80038c0 <NMEA_parser+0x2b0>)
 800372e:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[5]);
 8003730:	6a3b      	ldr	r3, [r7, #32]
 8003732:	4618      	mov	r0, r3
 8003734:	f012 fada 	bl	8015cec <atof>
 8003738:	eeb0 7b40 	vmov.f64	d7, d0
 800373c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003740:	4b5f      	ldr	r3, [pc, #380]	@ (80038c0 <NMEA_parser+0x2b0>)
 8003742:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[6];
 8003746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003748:	781a      	ldrb	r2, [r3, #0]
 800374a:	4b5d      	ldr	r3, [pc, #372]	@ (80038c0 <NMEA_parser+0x2b0>)
 800374c:	751a      	strb	r2, [r3, #20]
 800374e:	e0d4      	b.n	80038fa <NMEA_parser+0x2ea>


	}else if(strcmp(fields[0],"$GPVTG")==0){
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	495e      	ldr	r1, [pc, #376]	@ (80038cc <NMEA_parser+0x2bc>)
 8003754:	4618      	mov	r0, r3
 8003756:	f7fc fdcb 	bl	80002f0 <strcmp>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d116      	bne.n	800378e <NMEA_parser+0x17e>

		nmea_data.speed_knots =  atoi(fields[5]);
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	4618      	mov	r0, r3
 8003764:	f012 fac5 	bl	8015cf2 <atoi>
 8003768:	ee07 0a90 	vmov	s15, r0
 800376c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003770:	4b53      	ldr	r3, [pc, #332]	@ (80038c0 <NMEA_parser+0x2b0>)
 8003772:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		nmea_data.speed_kmph =  atoi(fields[7]);
 8003776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003778:	4618      	mov	r0, r3
 800377a:	f012 faba 	bl	8015cf2 <atoi>
 800377e:	ee07 0a90 	vmov	s15, r0
 8003782:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003786:	4b4e      	ldr	r3, [pc, #312]	@ (80038c0 <NMEA_parser+0x2b0>)
 8003788:	edc3 7a08 	vstr	s15, [r3, #32]
 800378c:	e0b5      	b.n	80038fa <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPGGA")==0){
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	494f      	ldr	r1, [pc, #316]	@ (80038d0 <NMEA_parser+0x2c0>)
 8003792:	4618      	mov	r0, r3
 8003794:	f7fc fdac 	bl	80002f0 <strcmp>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d15c      	bne.n	8003858 <NMEA_parser+0x248>

		nmea_data.UTC_time = atof(fields[1]);
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f012 faa3 	bl	8015cec <atof>
 80037a6:	eeb0 7b40 	vmov.f64	d7, d0
 80037aa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037ae:	4b44      	ldr	r3, [pc, #272]	@ (80038c0 <NMEA_parser+0x2b0>)
 80037b0:	edc3 7a00 	vstr	s15, [r3]

		nmea_data.latitude = atof(fields[2]);
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f012 fa98 	bl	8015cec <atof>
 80037bc:	eeb0 7b40 	vmov.f64	d7, d0
 80037c0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037c4:	4b3e      	ldr	r3, [pc, #248]	@ (80038c0 <NMEA_parser+0x2b0>)
 80037c6:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[3];
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	781a      	ldrb	r2, [r3, #0]
 80037ce:	4b3c      	ldr	r3, [pc, #240]	@ (80038c0 <NMEA_parser+0x2b0>)
 80037d0:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[4]);
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f012 fa89 	bl	8015cec <atof>
 80037da:	eeb0 7b40 	vmov.f64	d7, d0
 80037de:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037e2:	4b37      	ldr	r3, [pc, #220]	@ (80038c0 <NMEA_parser+0x2b0>)
 80037e4:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[5];
 80037e8:	6a3b      	ldr	r3, [r7, #32]
 80037ea:	781a      	ldrb	r2, [r3, #0]
 80037ec:	4b34      	ldr	r3, [pc, #208]	@ (80038c0 <NMEA_parser+0x2b0>)
 80037ee:	751a      	strb	r2, [r3, #20]

		nmea_data.fix = atoi(fields[6]);
 80037f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f2:	4618      	mov	r0, r3
 80037f4:	f012 fa7d 	bl	8015cf2 <atoi>
 80037f8:	4603      	mov	r3, r0
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	4b30      	ldr	r3, [pc, #192]	@ (80038c0 <NMEA_parser+0x2b0>)
 80037fe:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		nmea_data.sat_in_use = atoi(fields[7]);
 8003802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003804:	4618      	mov	r0, r3
 8003806:	f012 fa74 	bl	8015cf2 <atoi>
 800380a:	4603      	mov	r3, r0
 800380c:	b2da      	uxtb	r2, r3
 800380e:	4b2c      	ldr	r3, [pc, #176]	@ (80038c0 <NMEA_parser+0x2b0>)
 8003810:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		nmea_data.HDOP = atof(fields[8]);
 8003814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003816:	4618      	mov	r0, r3
 8003818:	f012 fa68 	bl	8015cec <atof>
 800381c:	eeb0 7b40 	vmov.f64	d7, d0
 8003820:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003824:	4b26      	ldr	r3, [pc, #152]	@ (80038c0 <NMEA_parser+0x2b0>)
 8003826:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

		nmea_data.altitude = atof(fields[9]);
 800382a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800382c:	4618      	mov	r0, r3
 800382e:	f012 fa5d 	bl	8015cec <atof>
 8003832:	eeb0 7b40 	vmov.f64	d7, d0
 8003836:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800383a:	4b21      	ldr	r3, [pc, #132]	@ (80038c0 <NMEA_parser+0x2b0>)
 800383c:	edc3 7a06 	vstr	s15, [r3, #24]
		nmea_data.geoidal_separation = atof(fields[11]);
 8003840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003842:	4618      	mov	r0, r3
 8003844:	f012 fa52 	bl	8015cec <atof>
 8003848:	eeb0 7b40 	vmov.f64	d7, d0
 800384c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003850:	4b1b      	ldr	r3, [pc, #108]	@ (80038c0 <NMEA_parser+0x2b0>)
 8003852:	edc3 7a07 	vstr	s15, [r3, #28]
 8003856:	e050      	b.n	80038fa <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPGSA")==0){
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	491e      	ldr	r1, [pc, #120]	@ (80038d4 <NMEA_parser+0x2c4>)
 800385c:	4618      	mov	r0, r3
 800385e:	f7fc fd47 	bl	80002f0 <strcmp>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d137      	bne.n	80038d8 <NMEA_parser+0x2c8>

		nmea_data.fix_mode = atoi(fields[2]);
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	4618      	mov	r0, r3
 800386c:	f012 fa41 	bl	8015cf2 <atoi>
 8003870:	4603      	mov	r3, r0
 8003872:	b2da      	uxtb	r2, r3
 8003874:	4b12      	ldr	r3, [pc, #72]	@ (80038c0 <NMEA_parser+0x2b0>)
 8003876:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

		nmea_data.PDOP = atof(fields[15]);
 800387a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800387c:	4618      	mov	r0, r3
 800387e:	f012 fa35 	bl	8015cec <atof>
 8003882:	eeb0 7b40 	vmov.f64	d7, d0
 8003886:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800388a:	4b0d      	ldr	r3, [pc, #52]	@ (80038c0 <NMEA_parser+0x2b0>)
 800388c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		nmea_data.HDOP = atof(fields[16]);
 8003890:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003892:	4618      	mov	r0, r3
 8003894:	f012 fa2a 	bl	8015cec <atof>
 8003898:	eeb0 7b40 	vmov.f64	d7, d0
 800389c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80038a0:	4b07      	ldr	r3, [pc, #28]	@ (80038c0 <NMEA_parser+0x2b0>)
 80038a2:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		nmea_data.VDOP = atof(fields[17]);
 80038a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038a8:	4618      	mov	r0, r3
 80038aa:	f012 fa1f 	bl	8015cec <atof>
 80038ae:	eeb0 7b40 	vmov.f64	d7, d0
 80038b2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80038b6:	4b02      	ldr	r3, [pc, #8]	@ (80038c0 <NMEA_parser+0x2b0>)
 80038b8:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
 80038bc:	e01d      	b.n	80038fa <NMEA_parser+0x2ea>
 80038be:	bf00      	nop
 80038c0:	24004dbc 	.word	0x24004dbc
 80038c4:	08018bf0 	.word	0x08018bf0
 80038c8:	08018bf8 	.word	0x08018bf8
 80038cc:	08018c00 	.word	0x08018c00
 80038d0:	08018c08 	.word	0x08018c08
 80038d4:	08018c10 	.word	0x08018c10

	}else if(strcmp(fields[0],"$GPGSV")==0){
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4931      	ldr	r1, [pc, #196]	@ (80039a0 <NMEA_parser+0x390>)
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fc fd07 	bl	80002f0 <strcmp>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d108      	bne.n	80038fa <NMEA_parser+0x2ea>
		nmea_data.sat_in_view = atoi(fields[3]);
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f012 fa01 	bl	8015cf2 <atoi>
 80038f0:	4603      	mov	r3, r0
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	4b2b      	ldr	r3, [pc, #172]	@ (80039a4 <NMEA_parser+0x394>)
 80038f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	}

	if (abs(nmea_data.speed_kmph - previous_data.speed_kmph) > speed_change_tolerance){
 80038fa:	4b2a      	ldr	r3, [pc, #168]	@ (80039a4 <NMEA_parser+0x394>)
 80038fc:	ed93 7a08 	vldr	s14, [r3, #32]
 8003900:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003904:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003908:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800390c:	ee17 3a90 	vmov	r3, s15
 8003910:	2b00      	cmp	r3, #0
 8003912:	bfb8      	it	lt
 8003914:	425b      	neglt	r3, r3
 8003916:	ee07 3a90 	vmov	s15, r3
 800391a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800391e:	4b22      	ldr	r3, [pc, #136]	@ (80039a8 <NMEA_parser+0x398>)
 8003920:	edd3 7a00 	vldr	s15, [r3]
 8003924:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800392c:	dd02      	ble.n	8003934 <NMEA_parser+0x324>
		speed_change_CB_fun_ptr();
 800392e:	4b1f      	ldr	r3, [pc, #124]	@ (80039ac <NMEA_parser+0x39c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4798      	blx	r3
	}

	if (nmea_data.speed_kmph > speed_raise_barrier && previous_data.speed_kmph <= speed_raise_barrier){
 8003934:	4b1b      	ldr	r3, [pc, #108]	@ (80039a4 <NMEA_parser+0x394>)
 8003936:	ed93 7a08 	vldr	s14, [r3, #32]
 800393a:	4b1d      	ldr	r3, [pc, #116]	@ (80039b0 <NMEA_parser+0x3a0>)
 800393c:	edd3 7a00 	vldr	s15, [r3]
 8003940:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003948:	dd0c      	ble.n	8003964 <NMEA_parser+0x354>
 800394a:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 800394e:	4b18      	ldr	r3, [pc, #96]	@ (80039b0 <NMEA_parser+0x3a0>)
 8003950:	edd3 7a00 	vldr	s15, [r3]
 8003954:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800395c:	d802      	bhi.n	8003964 <NMEA_parser+0x354>
		speed_raise_barrier_CB_fun_ptr();
 800395e:	4b15      	ldr	r3, [pc, #84]	@ (80039b4 <NMEA_parser+0x3a4>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4798      	blx	r3
	}

	if (nmea_data.speed_kmph < speed_raise_barrier && previous_data.speed_kmph >= speed_raise_barrier){
 8003964:	4b0f      	ldr	r3, [pc, #60]	@ (80039a4 <NMEA_parser+0x394>)
 8003966:	ed93 7a08 	vldr	s14, [r3, #32]
 800396a:	4b11      	ldr	r3, [pc, #68]	@ (80039b0 <NMEA_parser+0x3a0>)
 800396c:	edd3 7a00 	vldr	s15, [r3]
 8003970:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003978:	d400      	bmi.n	800397c <NMEA_parser+0x36c>
		speed_fall_barrier_CB_fun_ptr();
	}
}
 800397a:	e00d      	b.n	8003998 <NMEA_parser+0x388>
	if (nmea_data.speed_kmph < speed_raise_barrier && previous_data.speed_kmph >= speed_raise_barrier){
 800397c:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8003980:	4b0b      	ldr	r3, [pc, #44]	@ (80039b0 <NMEA_parser+0x3a0>)
 8003982:	edd3 7a00 	vldr	s15, [r3]
 8003986:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800398a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800398e:	da00      	bge.n	8003992 <NMEA_parser+0x382>
}
 8003990:	e002      	b.n	8003998 <NMEA_parser+0x388>
		speed_fall_barrier_CB_fun_ptr();
 8003992:	4b09      	ldr	r3, [pc, #36]	@ (80039b8 <NMEA_parser+0x3a8>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4798      	blx	r3
}
 8003998:	bf00      	nop
 800399a:	37c8      	adds	r7, #200	@ 0xc8
 800399c:	46bd      	mov	sp, r7
 800399e:	bdb0      	pop	{r4, r5, r7, pc}
 80039a0:	08018c18 	.word	0x08018c18
 80039a4:	24004dbc 	.word	0x24004dbc
 80039a8:	24004da4 	.word	0x24004da4
 80039ac:	24004da0 	.word	0x24004da0
 80039b0:	24004dac 	.word	0x24004dac
 80039b4:	24004da8 	.word	0x24004da8
 80039b8:	24004db0 	.word	0x24004db0

080039bc <hx2int>:
 * hx2int is function which converts hex number written using characters to corresponding integer.
 * @param[in]	n2		is older position ix hex code
 * @param[in]	n1		is younger position ix hex code
 * @param[out]	uint8_t	is integer corresponding to input hex
 */
static uint8_t hx2int(uint8_t n2, uint8_t n1){
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	460a      	mov	r2, r1
 80039c6:	71fb      	strb	r3, [r7, #7]
 80039c8:	4613      	mov	r3, r2
 80039ca:	71bb      	strb	r3, [r7, #6]
	if (n2 <= '9') n2-='0';
 80039cc:	79fb      	ldrb	r3, [r7, #7]
 80039ce:	2b39      	cmp	r3, #57	@ 0x39
 80039d0:	d803      	bhi.n	80039da <hx2int+0x1e>
 80039d2:	79fb      	ldrb	r3, [r7, #7]
 80039d4:	3b30      	subs	r3, #48	@ 0x30
 80039d6:	71fb      	strb	r3, [r7, #7]
 80039d8:	e002      	b.n	80039e0 <hx2int+0x24>
	else n2=n2-'A'+10;
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	3b37      	subs	r3, #55	@ 0x37
 80039de:	71fb      	strb	r3, [r7, #7]

	if (n1 <= '9') n1-='0';
 80039e0:	79bb      	ldrb	r3, [r7, #6]
 80039e2:	2b39      	cmp	r3, #57	@ 0x39
 80039e4:	d803      	bhi.n	80039ee <hx2int+0x32>
 80039e6:	79bb      	ldrb	r3, [r7, #6]
 80039e8:	3b30      	subs	r3, #48	@ 0x30
 80039ea:	71bb      	strb	r3, [r7, #6]
 80039ec:	e002      	b.n	80039f4 <hx2int+0x38>
	else n1=n1-'A'+10;
 80039ee:	79bb      	ldrb	r3, [r7, #6]
 80039f0:	3b37      	subs	r3, #55	@ 0x37
 80039f2:	71bb      	strb	r3, [r7, #6]

	return n2*16+n1;
 80039f4:	79fb      	ldrb	r3, [r7, #7]
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	b2da      	uxtb	r2, r3
 80039fa:	79bb      	ldrb	r3, [r7, #6]
 80039fc:	4413      	add	r3, r2
 80039fe:	b2db      	uxtb	r3, r3

}
 8003a00:	4618      	mov	r0, r3
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <NMEA_checksum_clc>:
 * NMEA_checksum_clc is function which calculates checksum of the message and compares it to checksum value given in NMEA message.\n
 * To convert given checksum it uses hx2int function.
 * @param[in]	message	pointer to buffer storing NMEA message.
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_checksum_clc(uint8_t * message){
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
	uint8_t index = 1;
 8003a14:	2301      	movs	r3, #1
 8003a16:	73fb      	strb	r3, [r7, #15]
	uint8_t checksum_clc =0;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	73bb      	strb	r3, [r7, #14]

	while (message[index]!='*' && index<NMEA_WORKING_BUFFER_SIZE-2){
 8003a1c:	e009      	b.n	8003a32 <NMEA_checksum_clc+0x26>
		checksum_clc^=message[index++];
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	73fa      	strb	r2, [r7, #15]
 8003a24:	461a      	mov	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4413      	add	r3, r2
 8003a2a:	781a      	ldrb	r2, [r3, #0]
 8003a2c:	7bbb      	ldrb	r3, [r7, #14]
 8003a2e:	4053      	eors	r3, r2
 8003a30:	73bb      	strb	r3, [r7, #14]
	while (message[index]!='*' && index<NMEA_WORKING_BUFFER_SIZE-2){
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	4413      	add	r3, r2
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a3c:	d002      	beq.n	8003a44 <NMEA_checksum_clc+0x38>
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
 8003a40:	2b7d      	cmp	r3, #125	@ 0x7d
 8003a42:	d9ec      	bls.n	8003a1e <NMEA_checksum_clc+0x12>
	}

	uint8_t checksum = hx2int(message[index+1],message[index+2]);
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
 8003a46:	3301      	adds	r3, #1
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	7818      	ldrb	r0, [r3, #0]
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
 8003a50:	3302      	adds	r3, #2
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	4413      	add	r3, r2
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	4619      	mov	r1, r3
 8003a5a:	f7ff ffaf 	bl	80039bc <hx2int>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	737b      	strb	r3, [r7, #13]
	if (checksum!=checksum_clc){
 8003a62:	7b7a      	ldrb	r2, [r7, #13]
 8003a64:	7bbb      	ldrb	r3, [r7, #14]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d001      	beq.n	8003a6e <NMEA_checksum_clc+0x62>
		return NMEA_CHECKSUM_ERROR;
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	e000      	b.n	8003a70 <NMEA_checksum_clc+0x64>
	}
	return NMEA_OK;
 8003a6e:	2300      	movs	r3, #0


}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <NMEA_read_line>:

/**
 * NMEA_read_line is function which reads one NMEA message line from NMEA_UART_buffer circular buffer to NMEA_working_buffer.
 */
static void NMEA_read_line(void){
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
	int index = 0;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	607b      	str	r3, [r7, #4]
	while (index < NMEA_WORKING_BUFFER_SIZE) NMEA_working_buffer[index++]=0;	// Clean up working buffer.
 8003a82:	e005      	b.n	8003a90 <NMEA_read_line+0x18>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	1c5a      	adds	r2, r3, #1
 8003a88:	607a      	str	r2, [r7, #4]
 8003a8a:	4a2b      	ldr	r2, [pc, #172]	@ (8003b38 <NMEA_read_line+0xc0>)
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	54d1      	strb	r1, [r2, r3]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b7f      	cmp	r3, #127	@ 0x7f
 8003a94:	ddf6      	ble.n	8003a84 <NMEA_read_line+0xc>

	index = 0;
 8003a96:	2300      	movs	r3, #0
 8003a98:	607b      	str	r3, [r7, #4]
	while(NMEA_UART_buffer[UART_buffer_tail]!= '\n' && index < NMEA_WORKING_BUFFER_SIZE-2){
 8003a9a:	e01c      	b.n	8003ad6 <NMEA_read_line+0x5e>
		NMEA_working_buffer[index]=NMEA_UART_buffer[UART_buffer_tail];
 8003a9c:	4b27      	ldr	r3, [pc, #156]	@ (8003b3c <NMEA_read_line+0xc4>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a27      	ldr	r2, [pc, #156]	@ (8003b40 <NMEA_read_line+0xc8>)
 8003aa2:	5cd1      	ldrb	r1, [r2, r3]
 8003aa4:	4a24      	ldr	r2, [pc, #144]	@ (8003b38 <NMEA_read_line+0xc0>)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	460a      	mov	r2, r1
 8003aac:	701a      	strb	r2, [r3, #0]
		NMEA_UART_buffer[UART_buffer_tail] = 0;
 8003aae:	4b23      	ldr	r3, [pc, #140]	@ (8003b3c <NMEA_read_line+0xc4>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a23      	ldr	r2, [pc, #140]	@ (8003b40 <NMEA_read_line+0xc8>)
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	54d1      	strb	r1, [r2, r3]
		UART_buffer_tail = (UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8003ab8:	4b20      	ldr	r3, [pc, #128]	@ (8003b3c <NMEA_read_line+0xc4>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	3301      	adds	r3, #1
 8003abe:	425a      	negs	r2, r3
 8003ac0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ac4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003ac8:	bf58      	it	pl
 8003aca:	4253      	negpl	r3, r2
 8003acc:	4a1b      	ldr	r2, [pc, #108]	@ (8003b3c <NMEA_read_line+0xc4>)
 8003ace:	6013      	str	r3, [r2, #0]
		++index;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	607b      	str	r3, [r7, #4]
	while(NMEA_UART_buffer[UART_buffer_tail]!= '\n' && index < NMEA_WORKING_BUFFER_SIZE-2){
 8003ad6:	4b19      	ldr	r3, [pc, #100]	@ (8003b3c <NMEA_read_line+0xc4>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a19      	ldr	r2, [pc, #100]	@ (8003b40 <NMEA_read_line+0xc8>)
 8003adc:	5cd3      	ldrb	r3, [r2, r3]
 8003ade:	2b0a      	cmp	r3, #10
 8003ae0:	d002      	beq.n	8003ae8 <NMEA_read_line+0x70>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b7d      	cmp	r3, #125	@ 0x7d
 8003ae6:	ddd9      	ble.n	8003a9c <NMEA_read_line+0x24>
	}
	NMEA_working_buffer[index]=NMEA_UART_buffer[UART_buffer_tail];
 8003ae8:	4b14      	ldr	r3, [pc, #80]	@ (8003b3c <NMEA_read_line+0xc4>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a14      	ldr	r2, [pc, #80]	@ (8003b40 <NMEA_read_line+0xc8>)
 8003aee:	5cd1      	ldrb	r1, [r2, r3]
 8003af0:	4a11      	ldr	r2, [pc, #68]	@ (8003b38 <NMEA_read_line+0xc0>)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4413      	add	r3, r2
 8003af6:	460a      	mov	r2, r1
 8003af8:	701a      	strb	r2, [r3, #0]
	NMEA_UART_buffer[UART_buffer_tail] = 0;
 8003afa:	4b10      	ldr	r3, [pc, #64]	@ (8003b3c <NMEA_read_line+0xc4>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a10      	ldr	r2, [pc, #64]	@ (8003b40 <NMEA_read_line+0xc8>)
 8003b00:	2100      	movs	r1, #0
 8003b02:	54d1      	strb	r1, [r2, r3]
	UART_buffer_tail = (UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8003b04:	4b0d      	ldr	r3, [pc, #52]	@ (8003b3c <NMEA_read_line+0xc4>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	425a      	negs	r2, r3
 8003b0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b10:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003b14:	bf58      	it	pl
 8003b16:	4253      	negpl	r3, r2
 8003b18:	4a08      	ldr	r2, [pc, #32]	@ (8003b3c <NMEA_read_line+0xc4>)
 8003b1a:	6013      	str	r3, [r2, #0]
	++index;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	607b      	str	r3, [r7, #4]
	--UART_buffer_lines;
 8003b22:	4b08      	ldr	r3, [pc, #32]	@ (8003b44 <NMEA_read_line+0xcc>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	4a06      	ldr	r2, [pc, #24]	@ (8003b44 <NMEA_read_line+0xcc>)
 8003b2a:	6013      	str	r3, [r2, #0]

}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	24004d14 	.word	0x24004d14
 8003b3c:	24004d98 	.word	0x24004d98
 8003b40:	24004914 	.word	0x24004914
 8003b44:	24004d9c 	.word	0x24004d9c

08003b48 <NMEA_init>:

void NMEA_init(UART_HandleTypeDef *huart, DMA_HandleTypeDef *DMA){
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
	HAL_Delay(10);
 8003b52:	200a      	movs	r0, #10
 8003b54:	f001 fda2 	bl	800569c <HAL_Delay>
	NMEA_huart=huart;
 8003b58:	4a12      	ldr	r2, [pc, #72]	@ (8003ba4 <NMEA_init+0x5c>)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6013      	str	r3, [r2, #0]
	NMEA_DMA=DMA;
 8003b5e:	4a12      	ldr	r2, [pc, #72]	@ (8003ba8 <NMEA_init+0x60>)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	6013      	str	r3, [r2, #0]
	__HAL_UART_ENABLE_IT(NMEA_huart,UART_IT_IDLE);
 8003b64:	4b0f      	ldr	r3, [pc, #60]	@ (8003ba4 <NMEA_init+0x5c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8003ba4 <NMEA_init+0x5c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0210 	orr.w	r2, r2, #16
 8003b76:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(NMEA_huart, NMEA_UART_DMA_buffer, NMEA_UART_DMA_BUFFER_SIZE);
 8003b78:	4b0a      	ldr	r3, [pc, #40]	@ (8003ba4 <NMEA_init+0x5c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b80:	490a      	ldr	r1, [pc, #40]	@ (8003bac <NMEA_init+0x64>)
 8003b82:	4618      	mov	r0, r3
 8003b84:	f00a fe3a 	bl	800e7fc <HAL_UART_Receive_DMA>


	speed_change_CB_fun_ptr = &default_CB;
 8003b88:	4b09      	ldr	r3, [pc, #36]	@ (8003bb0 <NMEA_init+0x68>)
 8003b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8003bb4 <NMEA_init+0x6c>)
 8003b8c:	601a      	str	r2, [r3, #0]
	speed_raise_barrier_CB_fun_ptr = &default_CB;
 8003b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003bb8 <NMEA_init+0x70>)
 8003b90:	4a08      	ldr	r2, [pc, #32]	@ (8003bb4 <NMEA_init+0x6c>)
 8003b92:	601a      	str	r2, [r3, #0]
	speed_fall_barrier_CB_fun_ptr = &default_CB;
 8003b94:	4b09      	ldr	r3, [pc, #36]	@ (8003bbc <NMEA_init+0x74>)
 8003b96:	4a07      	ldr	r2, [pc, #28]	@ (8003bb4 <NMEA_init+0x6c>)
 8003b98:	601a      	str	r2, [r3, #0]
}
 8003b9a:	bf00      	nop
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	24004db4 	.word	0x24004db4
 8003ba8:	24004db8 	.word	0x24004db8
 8003bac:	24004714 	.word	0x24004714
 8003bb0:	24004da0 	.word	0x24004da0
 8003bb4:	08003601 	.word	0x08003601
 8003bb8:	24004da8 	.word	0x24004da8
 8003bbc:	24004db0 	.word	0x24004db0

08003bc0 <NMEA_UART_DMA_get_char>:
 * If buffer overflowes, the oldest NMEA message will be deleted to make space for incoming messages.\n
 * If new line character is detected ('\ n'), the line counter (UART_buffer_lines) increases.
 * @param[in]	DMA_char	character from DMA buffer
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_UART_DMA_get_char(uint8_t DMA_char){
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	71fb      	strb	r3, [r7, #7]
	int position = (UART_buffer_head + 1)%NMEA_UART_BUFFER_SIZE;
 8003bca:	4b2d      	ldr	r3, [pc, #180]	@ (8003c80 <NMEA_UART_DMA_get_char+0xc0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	425a      	negs	r2, r3
 8003bd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bd6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003bda:	bf58      	it	pl
 8003bdc:	4253      	negpl	r3, r2
 8003bde:	60bb      	str	r3, [r7, #8]
	NMEA_status stat=NMEA_OK;
 8003be0:	2300      	movs	r3, #0
 8003be2:	73fb      	strb	r3, [r7, #15]

	if (position == UART_buffer_tail){		//buffer overflowed! make space for new message
 8003be4:	4b27      	ldr	r3, [pc, #156]	@ (8003c84 <NMEA_UART_DMA_get_char+0xc4>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d130      	bne.n	8003c50 <NMEA_UART_DMA_get_char+0x90>
		while (NMEA_UART_buffer[UART_buffer_tail]!='\n' && NMEA_UART_buffer[UART_buffer_tail]!=0){
 8003bee:	e010      	b.n	8003c12 <NMEA_UART_DMA_get_char+0x52>
			NMEA_UART_buffer[UART_buffer_tail]=0;
 8003bf0:	4b24      	ldr	r3, [pc, #144]	@ (8003c84 <NMEA_UART_DMA_get_char+0xc4>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a24      	ldr	r2, [pc, #144]	@ (8003c88 <NMEA_UART_DMA_get_char+0xc8>)
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	54d1      	strb	r1, [r2, r3]
			UART_buffer_tail=(UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8003bfa:	4b22      	ldr	r3, [pc, #136]	@ (8003c84 <NMEA_UART_DMA_get_char+0xc4>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	425a      	negs	r2, r3
 8003c02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c06:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003c0a:	bf58      	it	pl
 8003c0c:	4253      	negpl	r3, r2
 8003c0e:	4a1d      	ldr	r2, [pc, #116]	@ (8003c84 <NMEA_UART_DMA_get_char+0xc4>)
 8003c10:	6013      	str	r3, [r2, #0]
		while (NMEA_UART_buffer[UART_buffer_tail]!='\n' && NMEA_UART_buffer[UART_buffer_tail]!=0){
 8003c12:	4b1c      	ldr	r3, [pc, #112]	@ (8003c84 <NMEA_UART_DMA_get_char+0xc4>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a1c      	ldr	r2, [pc, #112]	@ (8003c88 <NMEA_UART_DMA_get_char+0xc8>)
 8003c18:	5cd3      	ldrb	r3, [r2, r3]
 8003c1a:	2b0a      	cmp	r3, #10
 8003c1c:	d005      	beq.n	8003c2a <NMEA_UART_DMA_get_char+0x6a>
 8003c1e:	4b19      	ldr	r3, [pc, #100]	@ (8003c84 <NMEA_UART_DMA_get_char+0xc4>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a19      	ldr	r2, [pc, #100]	@ (8003c88 <NMEA_UART_DMA_get_char+0xc8>)
 8003c24:	5cd3      	ldrb	r3, [r2, r3]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1e2      	bne.n	8003bf0 <NMEA_UART_DMA_get_char+0x30>
		}
		NMEA_UART_buffer[UART_buffer_tail]=0;
 8003c2a:	4b16      	ldr	r3, [pc, #88]	@ (8003c84 <NMEA_UART_DMA_get_char+0xc4>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a16      	ldr	r2, [pc, #88]	@ (8003c88 <NMEA_UART_DMA_get_char+0xc8>)
 8003c30:	2100      	movs	r1, #0
 8003c32:	54d1      	strb	r1, [r2, r3]
		UART_buffer_tail=(UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8003c34:	4b13      	ldr	r3, [pc, #76]	@ (8003c84 <NMEA_UART_DMA_get_char+0xc4>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	425a      	negs	r2, r3
 8003c3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c40:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003c44:	bf58      	it	pl
 8003c46:	4253      	negpl	r3, r2
 8003c48:	4a0e      	ldr	r2, [pc, #56]	@ (8003c84 <NMEA_UART_DMA_get_char+0xc4>)
 8003c4a:	6013      	str	r3, [r2, #0]
		stat=NMEA_BUFFER_OVERFLOWED;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	73fb      	strb	r3, [r7, #15]
	}

	NMEA_UART_buffer[UART_buffer_head]=DMA_char;
 8003c50:	4b0b      	ldr	r3, [pc, #44]	@ (8003c80 <NMEA_UART_DMA_get_char+0xc0>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	490c      	ldr	r1, [pc, #48]	@ (8003c88 <NMEA_UART_DMA_get_char+0xc8>)
 8003c56:	79fa      	ldrb	r2, [r7, #7]
 8003c58:	54ca      	strb	r2, [r1, r3]

	UART_buffer_head=position;
 8003c5a:	4a09      	ldr	r2, [pc, #36]	@ (8003c80 <NMEA_UART_DMA_get_char+0xc0>)
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	6013      	str	r3, [r2, #0]

	if(DMA_char=='\n'){
 8003c60:	79fb      	ldrb	r3, [r7, #7]
 8003c62:	2b0a      	cmp	r3, #10
 8003c64:	d104      	bne.n	8003c70 <NMEA_UART_DMA_get_char+0xb0>
		++UART_buffer_lines;	//increment lines counter
 8003c66:	4b09      	ldr	r3, [pc, #36]	@ (8003c8c <NMEA_UART_DMA_get_char+0xcc>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	4a07      	ldr	r2, [pc, #28]	@ (8003c8c <NMEA_UART_DMA_get_char+0xcc>)
 8003c6e:	6013      	str	r3, [r2, #0]
	}

	return stat;
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	24004d94 	.word	0x24004d94
 8003c84:	24004d98 	.word	0x24004d98
 8003c88:	24004914 	.word	0x24004914
 8003c8c:	24004d9c 	.word	0x24004d9c

08003c90 <NMEA_UART_DMA_copy_buffer>:
/**
 * NMEA_UART_DMA_copy_buffer is a function which copies messages from DMA buffer to UART circular buffer.\n
 * To do so, it uses NMEA_UART_DMA_get_char function for every character in NMEA_UART_DMA_buffer from 0 to (NMEA_UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(NMEA_DMA)).
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_UART_DMA_copy_buffer(void){
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0


	NMEA_status stat=NMEA_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	73fb      	strb	r3, [r7, #15]

	int data_length = NMEA_UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(NMEA_DMA);
 8003c9a:	4b4b      	ldr	r3, [pc, #300]	@ (8003dc8 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a4a      	ldr	r2, [pc, #296]	@ (8003dcc <NMEA_UART_DMA_copy_buffer+0x13c>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d059      	beq.n	8003d5a <NMEA_UART_DMA_copy_buffer+0xca>
 8003ca6:	4b48      	ldr	r3, [pc, #288]	@ (8003dc8 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a48      	ldr	r2, [pc, #288]	@ (8003dd0 <NMEA_UART_DMA_copy_buffer+0x140>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d053      	beq.n	8003d5a <NMEA_UART_DMA_copy_buffer+0xca>
 8003cb2:	4b45      	ldr	r3, [pc, #276]	@ (8003dc8 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a46      	ldr	r2, [pc, #280]	@ (8003dd4 <NMEA_UART_DMA_copy_buffer+0x144>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d04d      	beq.n	8003d5a <NMEA_UART_DMA_copy_buffer+0xca>
 8003cbe:	4b42      	ldr	r3, [pc, #264]	@ (8003dc8 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a44      	ldr	r2, [pc, #272]	@ (8003dd8 <NMEA_UART_DMA_copy_buffer+0x148>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d047      	beq.n	8003d5a <NMEA_UART_DMA_copy_buffer+0xca>
 8003cca:	4b3f      	ldr	r3, [pc, #252]	@ (8003dc8 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a42      	ldr	r2, [pc, #264]	@ (8003ddc <NMEA_UART_DMA_copy_buffer+0x14c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d041      	beq.n	8003d5a <NMEA_UART_DMA_copy_buffer+0xca>
 8003cd6:	4b3c      	ldr	r3, [pc, #240]	@ (8003dc8 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a40      	ldr	r2, [pc, #256]	@ (8003de0 <NMEA_UART_DMA_copy_buffer+0x150>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d03b      	beq.n	8003d5a <NMEA_UART_DMA_copy_buffer+0xca>
 8003ce2:	4b39      	ldr	r3, [pc, #228]	@ (8003dc8 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a3e      	ldr	r2, [pc, #248]	@ (8003de4 <NMEA_UART_DMA_copy_buffer+0x154>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d035      	beq.n	8003d5a <NMEA_UART_DMA_copy_buffer+0xca>
 8003cee:	4b36      	ldr	r3, [pc, #216]	@ (8003dc8 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a3c      	ldr	r2, [pc, #240]	@ (8003de8 <NMEA_UART_DMA_copy_buffer+0x158>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d02f      	beq.n	8003d5a <NMEA_UART_DMA_copy_buffer+0xca>
 8003cfa:	4b33      	ldr	r3, [pc, #204]	@ (8003dc8 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a3a      	ldr	r2, [pc, #232]	@ (8003dec <NMEA_UART_DMA_copy_buffer+0x15c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d029      	beq.n	8003d5a <NMEA_UART_DMA_copy_buffer+0xca>
 8003d06:	4b30      	ldr	r3, [pc, #192]	@ (8003dc8 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a38      	ldr	r2, [pc, #224]	@ (8003df0 <NMEA_UART_DMA_copy_buffer+0x160>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d023      	beq.n	8003d5a <NMEA_UART_DMA_copy_buffer+0xca>
 8003d12:	4b2d      	ldr	r3, [pc, #180]	@ (8003dc8 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a36      	ldr	r2, [pc, #216]	@ (8003df4 <NMEA_UART_DMA_copy_buffer+0x164>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d01d      	beq.n	8003d5a <NMEA_UART_DMA_copy_buffer+0xca>
 8003d1e:	4b2a      	ldr	r3, [pc, #168]	@ (8003dc8 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a34      	ldr	r2, [pc, #208]	@ (8003df8 <NMEA_UART_DMA_copy_buffer+0x168>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d017      	beq.n	8003d5a <NMEA_UART_DMA_copy_buffer+0xca>
 8003d2a:	4b27      	ldr	r3, [pc, #156]	@ (8003dc8 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a32      	ldr	r2, [pc, #200]	@ (8003dfc <NMEA_UART_DMA_copy_buffer+0x16c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d011      	beq.n	8003d5a <NMEA_UART_DMA_copy_buffer+0xca>
 8003d36:	4b24      	ldr	r3, [pc, #144]	@ (8003dc8 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a30      	ldr	r2, [pc, #192]	@ (8003e00 <NMEA_UART_DMA_copy_buffer+0x170>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d00b      	beq.n	8003d5a <NMEA_UART_DMA_copy_buffer+0xca>
 8003d42:	4b21      	ldr	r3, [pc, #132]	@ (8003dc8 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a2e      	ldr	r2, [pc, #184]	@ (8003e04 <NMEA_UART_DMA_copy_buffer+0x174>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d005      	beq.n	8003d5a <NMEA_UART_DMA_copy_buffer+0xca>
 8003d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8003dc8 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a2c      	ldr	r2, [pc, #176]	@ (8003e08 <NMEA_UART_DMA_copy_buffer+0x178>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d106      	bne.n	8003d68 <NMEA_UART_DMA_copy_buffer+0xd8>
 8003d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8003dc8 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8003d66:	e005      	b.n	8003d74 <NMEA_UART_DMA_copy_buffer+0xe4>
 8003d68:	4b17      	ldr	r3, [pc, #92]	@ (8003dc8 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8003d74:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < data_length; i++){
 8003d76:	2300      	movs	r3, #0
 8003d78:	60bb      	str	r3, [r7, #8]
 8003d7a:	e013      	b.n	8003da4 <NMEA_UART_DMA_copy_buffer+0x114>
		if (NMEA_UART_DMA_get_char(NMEA_UART_DMA_buffer[i])==NMEA_BUFFER_OVERFLOWED){
 8003d7c:	4a23      	ldr	r2, [pc, #140]	@ (8003e0c <NMEA_UART_DMA_copy_buffer+0x17c>)
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	4413      	add	r3, r2
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff ff1b 	bl	8003bc0 <NMEA_UART_DMA_get_char>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d101      	bne.n	8003d94 <NMEA_UART_DMA_copy_buffer+0x104>
			stat=NMEA_BUFFER_OVERFLOWED;
 8003d90:	2301      	movs	r3, #1
 8003d92:	73fb      	strb	r3, [r7, #15]
		}
		NMEA_UART_DMA_buffer[i]=0;
 8003d94:	4a1d      	ldr	r2, [pc, #116]	@ (8003e0c <NMEA_UART_DMA_copy_buffer+0x17c>)
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	4413      	add	r3, r2
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < data_length; i++){
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	3301      	adds	r3, #1
 8003da2:	60bb      	str	r3, [r7, #8]
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	dbe7      	blt.n	8003d7c <NMEA_UART_DMA_copy_buffer+0xec>
	}

	HAL_UART_Receive_DMA(NMEA_huart, NMEA_UART_DMA_buffer, NMEA_UART_DMA_BUFFER_SIZE);
 8003dac:	4b18      	ldr	r3, [pc, #96]	@ (8003e10 <NMEA_UART_DMA_copy_buffer+0x180>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003db4:	4915      	ldr	r1, [pc, #84]	@ (8003e0c <NMEA_UART_DMA_copy_buffer+0x17c>)
 8003db6:	4618      	mov	r0, r3
 8003db8:	f00a fd20 	bl	800e7fc <HAL_UART_Receive_DMA>
	return stat;
 8003dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	24004db8 	.word	0x24004db8
 8003dcc:	40020010 	.word	0x40020010
 8003dd0:	40020028 	.word	0x40020028
 8003dd4:	40020040 	.word	0x40020040
 8003dd8:	40020058 	.word	0x40020058
 8003ddc:	40020070 	.word	0x40020070
 8003de0:	40020088 	.word	0x40020088
 8003de4:	400200a0 	.word	0x400200a0
 8003de8:	400200b8 	.word	0x400200b8
 8003dec:	40020410 	.word	0x40020410
 8003df0:	40020428 	.word	0x40020428
 8003df4:	40020440 	.word	0x40020440
 8003df8:	40020458 	.word	0x40020458
 8003dfc:	40020470 	.word	0x40020470
 8003e00:	40020488 	.word	0x40020488
 8003e04:	400204a0 	.word	0x400204a0
 8003e08:	400204b8 	.word	0x400204b8
 8003e0c:	24004714 	.word	0x24004714
 8003e10:	24004db4 	.word	0x24004db4

08003e14 <NMEA_process_task>:

NMEA_status NMEA_process_task(void){
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
	NMEA_status stat = NMEA_OK;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	71fb      	strb	r3, [r7, #7]
	while(UART_buffer_lines>0) {
 8003e1e:	e00d      	b.n	8003e3c <NMEA_process_task+0x28>
		NMEA_read_line();
 8003e20:	f7ff fe2a 	bl	8003a78 <NMEA_read_line>
		if (NMEA_checksum_clc(NMEA_working_buffer) == NMEA_OK){
 8003e24:	480a      	ldr	r0, [pc, #40]	@ (8003e50 <NMEA_process_task+0x3c>)
 8003e26:	f7ff fdf1 	bl	8003a0c <NMEA_checksum_clc>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d103      	bne.n	8003e38 <NMEA_process_task+0x24>
			NMEA_parser((char *)NMEA_working_buffer);
 8003e30:	4807      	ldr	r0, [pc, #28]	@ (8003e50 <NMEA_process_task+0x3c>)
 8003e32:	f7ff fbed 	bl	8003610 <NMEA_parser>
 8003e36:	e001      	b.n	8003e3c <NMEA_process_task+0x28>
		}else stat = NMEA_CHECKSUM_ERROR;
 8003e38:	2302      	movs	r3, #2
 8003e3a:	71fb      	strb	r3, [r7, #7]
	while(UART_buffer_lines>0) {
 8003e3c:	4b05      	ldr	r3, [pc, #20]	@ (8003e54 <NMEA_process_task+0x40>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	dced      	bgt.n	8003e20 <NMEA_process_task+0xc>
	}
	return stat;
 8003e44:	79fb      	ldrb	r3, [r7, #7]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	24004d14 	.word	0x24004d14
 8003e54:	24004d9c 	.word	0x24004d9c

08003e58 <user_UART_IDLE_IT_handler>:

NMEA_status user_UART_IDLE_IT_handler(void){
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
	NMEA_status stat = NMEA_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	71fb      	strb	r3, [r7, #7]
	if (__HAL_UART_GET_FLAG(NMEA_huart, UART_FLAG_IDLE) == SET) {
 8003e62:	4b0d      	ldr	r3, [pc, #52]	@ (8003e98 <user_UART_IDLE_IT_handler+0x40>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	f003 0310 	and.w	r3, r3, #16
 8003e6e:	2b10      	cmp	r3, #16
 8003e70:	d10d      	bne.n	8003e8e <user_UART_IDLE_IT_handler+0x36>
		__HAL_UART_CLEAR_FLAG(NMEA_huart,UART_FLAG_IDLE);
 8003e72:	4b09      	ldr	r3, [pc, #36]	@ (8003e98 <user_UART_IDLE_IT_handler+0x40>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2210      	movs	r2, #16
 8003e7a:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(NMEA_huart);
 8003e7c:	4b06      	ldr	r3, [pc, #24]	@ (8003e98 <user_UART_IDLE_IT_handler+0x40>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f00a fd07 	bl	800e894 <HAL_UART_DMAStop>
		stat = NMEA_UART_DMA_copy_buffer();
 8003e86:	f7ff ff03 	bl	8003c90 <NMEA_UART_DMA_copy_buffer>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	71fb      	strb	r3, [r7, #7]
	}
	return stat;
 8003e8e:	79fb      	ldrb	r3, [r7, #7]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	24004db4 	.word	0x24004db4

08003e9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8003ea0:	f000 f91c 	bl	80040dc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ea4:	f001 fb68 	bl	8005578 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ea8:	f000 f844 	bl	8003f34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003eac:	f7ff fa26 	bl	80032fc <MX_GPIO_Init>
  MX_DMA_Init();
 8003eb0:	f7ff f916 	bl	80030e0 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8003eb4:	f7ff f944 	bl	8003140 <MX_FDCAN1_Init>
  MX_I2C3_Init();
 8003eb8:	f7ff fad2 	bl	8003460 <MX_I2C3_Init>
  MX_SPI1_Init();
 8003ebc:	f000 f940 	bl	8004140 <MX_SPI1_Init>
  MX_SPI2_Init();
 8003ec0:	f000 f994 	bl	80041ec <MX_SPI2_Init>
  MX_TIM2_Init();
 8003ec4:	f000 fc92 	bl	80047ec <MX_TIM2_Init>
  MX_TIM3_Init();
 8003ec8:	f000 fd0c 	bl	80048e4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003ecc:	f000 fd70 	bl	80049b0 <MX_TIM4_Init>
  MX_UART4_Init();
 8003ed0:	f000 ffd4 	bl	8004e7c <MX_UART4_Init>
  MX_USART1_UART_Init();
 8003ed4:	f001 f81e 	bl	8004f14 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8003ed8:	f001 f8b8 	bl	800504c <MX_USART6_UART_Init>
  MX_TIM13_Init();
 8003edc:	f000 fe54 	bl	8004b88 <MX_TIM13_Init>
  MX_FATFS_Init();
 8003ee0:	f00d f88a 	bl	8010ff8 <MX_FATFS_Init>
  MX_TIM6_Init();
 8003ee4:	f000 fde0 	bl	8004aa8 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8003ee8:	f001 f864 	bl	8004fb4 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8003eec:	f000 fe14 	bl	8004b18 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  BMP280_init();
 8003ef0:	f7fd fae2 	bl	80014b8 <BMP280_init>
  SD_init();
 8003ef4:	f7ff f8d8 	bl	80030a8 <SD_init>
  HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8003ef8:	2201      	movs	r2, #1
 8003efa:	4908      	ldr	r1, [pc, #32]	@ (8003f1c <main+0x80>)
 8003efc:	4808      	ldr	r0, [pc, #32]	@ (8003f20 <main+0x84>)
 8003efe:	f00a fc7d 	bl	800e7fc <HAL_UART_Receive_DMA>
  NMEA_init(&huart4, &hdma_uart4_rx);
 8003f02:	4908      	ldr	r1, [pc, #32]	@ (8003f24 <main+0x88>)
 8003f04:	4808      	ldr	r0, [pc, #32]	@ (8003f28 <main+0x8c>)
 8003f06:	f7ff fe1f 	bl	8003b48 <NMEA_init>
  HAL_TIM_Base_Start_IT(&htim6);
 8003f0a:	4808      	ldr	r0, [pc, #32]	@ (8003f2c <main+0x90>)
 8003f0c:	f009 fa94 	bl	800d438 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8003f10:	4807      	ldr	r0, [pc, #28]	@ (8003f30 <main+0x94>)
 8003f12:	f009 fa91 	bl	800d438 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  NMEA_process_task();
 8003f16:	f7ff ff7d 	bl	8003e14 <NMEA_process_task>
 8003f1a:	e7fc      	b.n	8003f16 <main+0x7a>
 8003f1c:	24000403 	.word	0x24000403
 8003f20:	240051fc 	.word	0x240051fc
 8003f24:	24005324 	.word	0x24005324
 8003f28:	240050d4 	.word	0x240050d4
 8003f2c:	24004ff0 	.word	0x24004ff0
 8003f30:	2400503c 	.word	0x2400503c

08003f34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b09c      	sub	sp, #112	@ 0x70
 8003f38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f3e:	224c      	movs	r2, #76	@ 0x4c
 8003f40:	2100      	movs	r1, #0
 8003f42:	4618      	mov	r0, r3
 8003f44:	f012 fe1f 	bl	8016b86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f48:	1d3b      	adds	r3, r7, #4
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f012 fe19 	bl	8016b86 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8003f54:	4b30      	ldr	r3, [pc, #192]	@ (8004018 <SystemClock_Config+0xe4>)
 8003f56:	f04f 32ff 	mov.w	r2, #4294967295
 8003f5a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003f5e:	2002      	movs	r0, #2
 8003f60:	f005 fa94 	bl	800948c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003f64:	2300      	movs	r3, #0
 8003f66:	603b      	str	r3, [r7, #0]
 8003f68:	4b2c      	ldr	r3, [pc, #176]	@ (800401c <SystemClock_Config+0xe8>)
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	4a2b      	ldr	r2, [pc, #172]	@ (800401c <SystemClock_Config+0xe8>)
 8003f6e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f72:	6193      	str	r3, [r2, #24]
 8003f74:	4b29      	ldr	r3, [pc, #164]	@ (800401c <SystemClock_Config+0xe8>)
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003f7c:	603b      	str	r3, [r7, #0]
 8003f7e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003f80:	bf00      	nop
 8003f82:	4b26      	ldr	r3, [pc, #152]	@ (800401c <SystemClock_Config+0xe8>)
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f8e:	d1f8      	bne.n	8003f82 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003f90:	2302      	movs	r3, #2
 8003f92:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8003f94:	2301      	movs	r3, #1
 8003f96:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8003f98:	2340      	movs	r3, #64	@ 0x40
 8003f9a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003fa4:	2304      	movs	r3, #4
 8003fa6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8003fa8:	2323      	movs	r3, #35	@ 0x23
 8003faa:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003fac:	2302      	movs	r3, #2
 8003fae:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003fb8:	230c      	movs	r3, #12
 8003fba:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003fc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f005 fa99 	bl	8009500 <HAL_RCC_OscConfig>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8003fd4:	f000 f8ae 	bl	8004134 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003fd8:	233f      	movs	r3, #63	@ 0x3f
 8003fda:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003fe8:	2340      	movs	r3, #64	@ 0x40
 8003fea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003fec:	2340      	movs	r3, #64	@ 0x40
 8003fee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003ff0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ff4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003ff6:	2340      	movs	r3, #64	@ 0x40
 8003ff8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003ffa:	1d3b      	adds	r3, r7, #4
 8003ffc:	2106      	movs	r1, #6
 8003ffe:	4618      	mov	r0, r3
 8004000:	f005 feb0 	bl	8009d64 <HAL_RCC_ClockConfig>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <SystemClock_Config+0xda>
  {
    Error_Handler();
 800400a:	f000 f893 	bl	8004134 <Error_Handler>
  }
}
 800400e:	bf00      	nop
 8004010:	3770      	adds	r7, #112	@ 0x70
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	58024400 	.word	0x58024400
 800401c:	58024800 	.word	0x58024800

08004020 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1){
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a10      	ldr	r2, [pc, #64]	@ (8004070 <HAL_UART_RxCpltCallback+0x50>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d10a      	bne.n	8004048 <HAL_UART_RxCpltCallback+0x28>
		SBUS_Receive(SBUS_RxBuffer);
 8004032:	4b10      	ldr	r3, [pc, #64]	@ (8004074 <HAL_UART_RxCpltCallback+0x54>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f7fe f98e 	bl	8002358 <SBUS_Receive>
		HAL_UART_Receive_DMA(&huart1, &SBUS_RxBuffer, 1);
 800403c:	2201      	movs	r2, #1
 800403e:	490d      	ldr	r1, [pc, #52]	@ (8004074 <HAL_UART_RxCpltCallback+0x54>)
 8004040:	480d      	ldr	r0, [pc, #52]	@ (8004078 <HAL_UART_RxCpltCallback+0x58>)
 8004042:	f00a fbdb 	bl	800e7fc <HAL_UART_Receive_DMA>
    }
    else if(huart -> Instance == UART4){


    }
}
 8004046:	e00e      	b.n	8004066 <HAL_UART_RxCpltCallback+0x46>
    else if (huart -> Instance == USART3){
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a0b      	ldr	r2, [pc, #44]	@ (800407c <HAL_UART_RxCpltCallback+0x5c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d109      	bne.n	8004066 <HAL_UART_RxCpltCallback+0x46>
        BNO_Receive(BNO_BufferByte);
 8004052:	4b0b      	ldr	r3, [pc, #44]	@ (8004080 <HAL_UART_RxCpltCallback+0x60>)
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f7fd ff68 	bl	8001f2c <BNO_Receive>
        HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 800405c:	2201      	movs	r2, #1
 800405e:	4908      	ldr	r1, [pc, #32]	@ (8004080 <HAL_UART_RxCpltCallback+0x60>)
 8004060:	4808      	ldr	r0, [pc, #32]	@ (8004084 <HAL_UART_RxCpltCallback+0x64>)
 8004062:	f00a fbcb 	bl	800e7fc <HAL_UART_Receive_DMA>
}
 8004066:	bf00      	nop
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	40011000 	.word	0x40011000
 8004074:	240004cd 	.word	0x240004cd
 8004078:	24005168 	.word	0x24005168
 800407c:	40004800 	.word	0x40004800
 8004080:	24000403 	.word	0x24000403
 8004084:	240051fc 	.word	0x240051fc

08004088 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
	//Interrupción cada 1 ms
	if (htim -> Instance == TIM6){
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a0e      	ldr	r2, [pc, #56]	@ (80040d0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d108      	bne.n	80040ac <HAL_TIM_PeriodElapsedCallback+0x24>
		TimeOn_Counter++;
 800409a:	4b0e      	ldr	r3, [pc, #56]	@ (80040d4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	3301      	adds	r3, #1
 80040a0:	4a0c      	ldr	r2, [pc, #48]	@ (80040d4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80040a2:	6013      	str	r3, [r2, #0]
		LED_Tasks();
 80040a4:	f7fe f8a6 	bl	80021f4 <LED_Tasks>
		SBUS_IntegrityVerification();
 80040a8:	f7fe fd28 	bl	8002afc <SBUS_IntegrityVerification>
	}
	//Interrupción cada 10 ms
	if (htim -> Instance == TIM7){
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a09      	ldr	r2, [pc, #36]	@ (80040d8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d107      	bne.n	80040c6 <HAL_TIM_PeriodElapsedCallback+0x3e>
		BNO_Tasks();
 80040b6:	f7fd ffd9 	bl	800206c <BNO_Tasks>
		BMP280_calculate();
 80040ba:	f7fd fa23 	bl	8001504 <BMP280_calculate>

		PWM_Assing();
 80040be:	f7fe f8e7 	bl	8002290 <PWM_Assing>
		SD_blackbox_write();
 80040c2:	f7fe ff8f 	bl	8002fe4 <SD_blackbox_write>
	}
}
 80040c6:	bf00      	nop
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	40001000 	.word	0x40001000
 80040d4:	24004df4 	.word	0x24004df4
 80040d8:	40001400 	.word	0x40001400

080040dc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80040e2:	463b      	mov	r3, r7
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	605a      	str	r2, [r3, #4]
 80040ea:	609a      	str	r2, [r3, #8]
 80040ec:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80040ee:	f001 fc09 	bl	8005904 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80040f2:	2301      	movs	r3, #1
 80040f4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80040f6:	2300      	movs	r3, #0
 80040f8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80040fa:	2300      	movs	r3, #0
 80040fc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80040fe:	231f      	movs	r3, #31
 8004100:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8004102:	2387      	movs	r3, #135	@ 0x87
 8004104:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8004106:	2300      	movs	r3, #0
 8004108:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800410a:	2300      	movs	r3, #0
 800410c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800410e:	2301      	movs	r3, #1
 8004110:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8004112:	2301      	movs	r3, #1
 8004114:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8004116:	2300      	movs	r3, #0
 8004118:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800411a:	2300      	movs	r3, #0
 800411c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800411e:	463b      	mov	r3, r7
 8004120:	4618      	mov	r0, r3
 8004122:	f001 fc27 	bl	8005974 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8004126:	2004      	movs	r0, #4
 8004128:	f001 fc04 	bl	8005934 <HAL_MPU_Enable>

}
 800412c:	bf00      	nop
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004138:	b672      	cpsid	i
}
 800413a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800413c:	bf00      	nop
 800413e:	e7fd      	b.n	800413c <Error_Handler+0x8>

08004140 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004144:	4b27      	ldr	r3, [pc, #156]	@ (80041e4 <MX_SPI1_Init+0xa4>)
 8004146:	4a28      	ldr	r2, [pc, #160]	@ (80041e8 <MX_SPI1_Init+0xa8>)
 8004148:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800414a:	4b26      	ldr	r3, [pc, #152]	@ (80041e4 <MX_SPI1_Init+0xa4>)
 800414c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004150:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004152:	4b24      	ldr	r3, [pc, #144]	@ (80041e4 <MX_SPI1_Init+0xa4>)
 8004154:	2200      	movs	r2, #0
 8004156:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004158:	4b22      	ldr	r3, [pc, #136]	@ (80041e4 <MX_SPI1_Init+0xa4>)
 800415a:	2207      	movs	r2, #7
 800415c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800415e:	4b21      	ldr	r3, [pc, #132]	@ (80041e4 <MX_SPI1_Init+0xa4>)
 8004160:	2200      	movs	r2, #0
 8004162:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004164:	4b1f      	ldr	r3, [pc, #124]	@ (80041e4 <MX_SPI1_Init+0xa4>)
 8004166:	2200      	movs	r2, #0
 8004168:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800416a:	4b1e      	ldr	r3, [pc, #120]	@ (80041e4 <MX_SPI1_Init+0xa4>)
 800416c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004170:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004172:	4b1c      	ldr	r3, [pc, #112]	@ (80041e4 <MX_SPI1_Init+0xa4>)
 8004174:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8004178:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800417a:	4b1a      	ldr	r3, [pc, #104]	@ (80041e4 <MX_SPI1_Init+0xa4>)
 800417c:	2200      	movs	r2, #0
 800417e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004180:	4b18      	ldr	r3, [pc, #96]	@ (80041e4 <MX_SPI1_Init+0xa4>)
 8004182:	2200      	movs	r2, #0
 8004184:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004186:	4b17      	ldr	r3, [pc, #92]	@ (80041e4 <MX_SPI1_Init+0xa4>)
 8004188:	2200      	movs	r2, #0
 800418a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800418c:	4b15      	ldr	r3, [pc, #84]	@ (80041e4 <MX_SPI1_Init+0xa4>)
 800418e:	2200      	movs	r2, #0
 8004190:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004192:	4b14      	ldr	r3, [pc, #80]	@ (80041e4 <MX_SPI1_Init+0xa4>)
 8004194:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004198:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800419a:	4b12      	ldr	r3, [pc, #72]	@ (80041e4 <MX_SPI1_Init+0xa4>)
 800419c:	2200      	movs	r2, #0
 800419e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80041a0:	4b10      	ldr	r3, [pc, #64]	@ (80041e4 <MX_SPI1_Init+0xa4>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80041a6:	4b0f      	ldr	r3, [pc, #60]	@ (80041e4 <MX_SPI1_Init+0xa4>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80041ac:	4b0d      	ldr	r3, [pc, #52]	@ (80041e4 <MX_SPI1_Init+0xa4>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80041b2:	4b0c      	ldr	r3, [pc, #48]	@ (80041e4 <MX_SPI1_Init+0xa4>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80041b8:	4b0a      	ldr	r3, [pc, #40]	@ (80041e4 <MX_SPI1_Init+0xa4>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80041be:	4b09      	ldr	r3, [pc, #36]	@ (80041e4 <MX_SPI1_Init+0xa4>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80041c4:	4b07      	ldr	r3, [pc, #28]	@ (80041e4 <MX_SPI1_Init+0xa4>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80041ca:	4b06      	ldr	r3, [pc, #24]	@ (80041e4 <MX_SPI1_Init+0xa4>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80041d0:	4804      	ldr	r0, [pc, #16]	@ (80041e4 <MX_SPI1_Init+0xa4>)
 80041d2:	f007 ff33 	bl	800c03c <HAL_SPI_Init>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80041dc:	f7ff ffaa 	bl	8004134 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80041e0:	bf00      	nop
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	24004df8 	.word	0x24004df8
 80041e8:	40013000 	.word	0x40013000

080041ec <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80041f0:	4b27      	ldr	r3, [pc, #156]	@ (8004290 <MX_SPI2_Init+0xa4>)
 80041f2:	4a28      	ldr	r2, [pc, #160]	@ (8004294 <MX_SPI2_Init+0xa8>)
 80041f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80041f6:	4b26      	ldr	r3, [pc, #152]	@ (8004290 <MX_SPI2_Init+0xa4>)
 80041f8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80041fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80041fe:	4b24      	ldr	r3, [pc, #144]	@ (8004290 <MX_SPI2_Init+0xa4>)
 8004200:	2200      	movs	r2, #0
 8004202:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004204:	4b22      	ldr	r3, [pc, #136]	@ (8004290 <MX_SPI2_Init+0xa4>)
 8004206:	2207      	movs	r2, #7
 8004208:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800420a:	4b21      	ldr	r3, [pc, #132]	@ (8004290 <MX_SPI2_Init+0xa4>)
 800420c:	2200      	movs	r2, #0
 800420e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004210:	4b1f      	ldr	r3, [pc, #124]	@ (8004290 <MX_SPI2_Init+0xa4>)
 8004212:	2200      	movs	r2, #0
 8004214:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004216:	4b1e      	ldr	r3, [pc, #120]	@ (8004290 <MX_SPI2_Init+0xa4>)
 8004218:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800421c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800421e:	4b1c      	ldr	r3, [pc, #112]	@ (8004290 <MX_SPI2_Init+0xa4>)
 8004220:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8004224:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004226:	4b1a      	ldr	r3, [pc, #104]	@ (8004290 <MX_SPI2_Init+0xa4>)
 8004228:	2200      	movs	r2, #0
 800422a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800422c:	4b18      	ldr	r3, [pc, #96]	@ (8004290 <MX_SPI2_Init+0xa4>)
 800422e:	2200      	movs	r2, #0
 8004230:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004232:	4b17      	ldr	r3, [pc, #92]	@ (8004290 <MX_SPI2_Init+0xa4>)
 8004234:	2200      	movs	r2, #0
 8004236:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8004238:	4b15      	ldr	r3, [pc, #84]	@ (8004290 <MX_SPI2_Init+0xa4>)
 800423a:	2200      	movs	r2, #0
 800423c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800423e:	4b14      	ldr	r3, [pc, #80]	@ (8004290 <MX_SPI2_Init+0xa4>)
 8004240:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004244:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004246:	4b12      	ldr	r3, [pc, #72]	@ (8004290 <MX_SPI2_Init+0xa4>)
 8004248:	2200      	movs	r2, #0
 800424a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800424c:	4b10      	ldr	r3, [pc, #64]	@ (8004290 <MX_SPI2_Init+0xa4>)
 800424e:	2200      	movs	r2, #0
 8004250:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004252:	4b0f      	ldr	r3, [pc, #60]	@ (8004290 <MX_SPI2_Init+0xa4>)
 8004254:	2200      	movs	r2, #0
 8004256:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004258:	4b0d      	ldr	r3, [pc, #52]	@ (8004290 <MX_SPI2_Init+0xa4>)
 800425a:	2200      	movs	r2, #0
 800425c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800425e:	4b0c      	ldr	r3, [pc, #48]	@ (8004290 <MX_SPI2_Init+0xa4>)
 8004260:	2200      	movs	r2, #0
 8004262:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004264:	4b0a      	ldr	r3, [pc, #40]	@ (8004290 <MX_SPI2_Init+0xa4>)
 8004266:	2200      	movs	r2, #0
 8004268:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800426a:	4b09      	ldr	r3, [pc, #36]	@ (8004290 <MX_SPI2_Init+0xa4>)
 800426c:	2200      	movs	r2, #0
 800426e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004270:	4b07      	ldr	r3, [pc, #28]	@ (8004290 <MX_SPI2_Init+0xa4>)
 8004272:	2200      	movs	r2, #0
 8004274:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004276:	4b06      	ldr	r3, [pc, #24]	@ (8004290 <MX_SPI2_Init+0xa4>)
 8004278:	2200      	movs	r2, #0
 800427a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800427c:	4804      	ldr	r0, [pc, #16]	@ (8004290 <MX_SPI2_Init+0xa4>)
 800427e:	f007 fedd 	bl	800c03c <HAL_SPI_Init>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8004288:	f7ff ff54 	bl	8004134 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800428c:	bf00      	nop
 800428e:	bd80      	pop	{r7, pc}
 8004290:	24004e80 	.word	0x24004e80
 8004294:	40003800 	.word	0x40003800

08004298 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b0bc      	sub	sp, #240	@ 0xf0
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042a0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	605a      	str	r2, [r3, #4]
 80042aa:	609a      	str	r2, [r3, #8]
 80042ac:	60da      	str	r2, [r3, #12]
 80042ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80042b0:	f107 0318 	add.w	r3, r7, #24
 80042b4:	22c0      	movs	r2, #192	@ 0xc0
 80042b6:	2100      	movs	r1, #0
 80042b8:	4618      	mov	r0, r3
 80042ba:	f012 fc64 	bl	8016b86 <memset>
  if(spiHandle->Instance==SPI1)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a4c      	ldr	r2, [pc, #304]	@ (80043f4 <HAL_SPI_MspInit+0x15c>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d145      	bne.n	8004354 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80042c8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80042d4:	2300      	movs	r3, #0
 80042d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042d8:	f107 0318 	add.w	r3, r7, #24
 80042dc:	4618      	mov	r0, r3
 80042de:	f006 f8cd 	bl	800a47c <HAL_RCCEx_PeriphCLKConfig>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80042e8:	f7ff ff24 	bl	8004134 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80042ec:	4b42      	ldr	r3, [pc, #264]	@ (80043f8 <HAL_SPI_MspInit+0x160>)
 80042ee:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80042f2:	4a41      	ldr	r2, [pc, #260]	@ (80043f8 <HAL_SPI_MspInit+0x160>)
 80042f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80042f8:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80042fc:	4b3e      	ldr	r3, [pc, #248]	@ (80043f8 <HAL_SPI_MspInit+0x160>)
 80042fe:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8004302:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800430a:	4b3b      	ldr	r3, [pc, #236]	@ (80043f8 <HAL_SPI_MspInit+0x160>)
 800430c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004310:	4a39      	ldr	r2, [pc, #228]	@ (80043f8 <HAL_SPI_MspInit+0x160>)
 8004312:	f043 0301 	orr.w	r3, r3, #1
 8004316:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800431a:	4b37      	ldr	r3, [pc, #220]	@ (80043f8 <HAL_SPI_MspInit+0x160>)
 800431c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	613b      	str	r3, [r7, #16]
 8004326:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8004328:	23e0      	movs	r3, #224	@ 0xe0
 800432a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800432e:	2302      	movs	r3, #2
 8004330:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004334:	2300      	movs	r3, #0
 8004336:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800433a:	2300      	movs	r3, #0
 800433c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004340:	2305      	movs	r3, #5
 8004342:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004346:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800434a:	4619      	mov	r1, r3
 800434c:	482b      	ldr	r0, [pc, #172]	@ (80043fc <HAL_SPI_MspInit+0x164>)
 800434e:	f004 fd9f 	bl	8008e90 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004352:	e04a      	b.n	80043ea <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a29      	ldr	r2, [pc, #164]	@ (8004400 <HAL_SPI_MspInit+0x168>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d145      	bne.n	80043ea <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800435e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004362:	f04f 0300 	mov.w	r3, #0
 8004366:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800436a:	2300      	movs	r3, #0
 800436c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800436e:	f107 0318 	add.w	r3, r7, #24
 8004372:	4618      	mov	r0, r3
 8004374:	f006 f882 	bl	800a47c <HAL_RCCEx_PeriphCLKConfig>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 800437e:	f7ff fed9 	bl	8004134 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004382:	4b1d      	ldr	r3, [pc, #116]	@ (80043f8 <HAL_SPI_MspInit+0x160>)
 8004384:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004388:	4a1b      	ldr	r2, [pc, #108]	@ (80043f8 <HAL_SPI_MspInit+0x160>)
 800438a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800438e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004392:	4b19      	ldr	r3, [pc, #100]	@ (80043f8 <HAL_SPI_MspInit+0x160>)
 8004394:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004398:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043a0:	4b15      	ldr	r3, [pc, #84]	@ (80043f8 <HAL_SPI_MspInit+0x160>)
 80043a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80043a6:	4a14      	ldr	r2, [pc, #80]	@ (80043f8 <HAL_SPI_MspInit+0x160>)
 80043a8:	f043 0302 	orr.w	r3, r3, #2
 80043ac:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80043b0:	4b11      	ldr	r3, [pc, #68]	@ (80043f8 <HAL_SPI_MspInit+0x160>)
 80043b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	60bb      	str	r3, [r7, #8]
 80043bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 80043be:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80043c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043c6:	2302      	movs	r3, #2
 80043c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043cc:	2300      	movs	r3, #0
 80043ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043d2:	2300      	movs	r3, #0
 80043d4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80043d8:	2305      	movs	r3, #5
 80043da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043de:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80043e2:	4619      	mov	r1, r3
 80043e4:	4807      	ldr	r0, [pc, #28]	@ (8004404 <HAL_SPI_MspInit+0x16c>)
 80043e6:	f004 fd53 	bl	8008e90 <HAL_GPIO_Init>
}
 80043ea:	bf00      	nop
 80043ec:	37f0      	adds	r7, #240	@ 0xf0
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	40013000 	.word	0x40013000
 80043f8:	58024400 	.word	0x58024400
 80043fc:	58020000 	.word	0x58020000
 8004400:	40003800 	.word	0x40003800
 8004404:	58020400 	.word	0x58020400

08004408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800440e:	4b0a      	ldr	r3, [pc, #40]	@ (8004438 <HAL_MspInit+0x30>)
 8004410:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004414:	4a08      	ldr	r2, [pc, #32]	@ (8004438 <HAL_MspInit+0x30>)
 8004416:	f043 0302 	orr.w	r3, r3, #2
 800441a:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800441e:	4b06      	ldr	r3, [pc, #24]	@ (8004438 <HAL_MspInit+0x30>)
 8004420:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	607b      	str	r3, [r7, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	58024400 	.word	0x58024400

0800443c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004440:	bf00      	nop
 8004442:	e7fd      	b.n	8004440 <NMI_Handler+0x4>

08004444 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004448:	bf00      	nop
 800444a:	e7fd      	b.n	8004448 <HardFault_Handler+0x4>

0800444c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004450:	bf00      	nop
 8004452:	e7fd      	b.n	8004450 <MemManage_Handler+0x4>

08004454 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004458:	bf00      	nop
 800445a:	e7fd      	b.n	8004458 <BusFault_Handler+0x4>

0800445c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004460:	bf00      	nop
 8004462:	e7fd      	b.n	8004460 <UsageFault_Handler+0x4>

08004464 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004468:	bf00      	nop
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004472:	b480      	push	{r7}
 8004474:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004476:	bf00      	nop
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004484:	bf00      	nop
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
	...

08004490 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  if(Timer1 > 0)
 8004494:	4b0b      	ldr	r3, [pc, #44]	@ (80044c4 <SysTick_Handler+0x34>)
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d005      	beq.n	80044a8 <SysTick_Handler+0x18>
	    Timer1--;
 800449c:	4b09      	ldr	r3, [pc, #36]	@ (80044c4 <SysTick_Handler+0x34>)
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	3b01      	subs	r3, #1
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	4b07      	ldr	r3, [pc, #28]	@ (80044c4 <SysTick_Handler+0x34>)
 80044a6:	801a      	strh	r2, [r3, #0]
	  if(Timer2 > 0)
 80044a8:	4b07      	ldr	r3, [pc, #28]	@ (80044c8 <SysTick_Handler+0x38>)
 80044aa:	881b      	ldrh	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d005      	beq.n	80044bc <SysTick_Handler+0x2c>
	    Timer2--;
 80044b0:	4b05      	ldr	r3, [pc, #20]	@ (80044c8 <SysTick_Handler+0x38>)
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	4b03      	ldr	r3, [pc, #12]	@ (80044c8 <SysTick_Handler+0x38>)
 80044ba:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044bc:	f001 f8ce 	bl	800565c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044c0:	bf00      	nop
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	24005498 	.word	0x24005498
 80044c8:	2400549a 	.word	0x2400549a

080044cc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80044d0:	4802      	ldr	r0, [pc, #8]	@ (80044dc <DMA1_Stream0_IRQHandler+0x10>)
 80044d2:	f002 fdeb 	bl	80070ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80044d6:	bf00      	nop
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	2400539c 	.word	0x2400539c

080044e0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80044e4:	4802      	ldr	r0, [pc, #8]	@ (80044f0 <DMA1_Stream1_IRQHandler+0x10>)
 80044e6:	f002 fde1 	bl	80070ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80044ea:	bf00      	nop
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	24005414 	.word	0x24005414

080044f4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80044f8:	4802      	ldr	r0, [pc, #8]	@ (8004504 <DMA1_Stream2_IRQHandler+0x10>)
 80044fa:	f002 fdd7 	bl	80070ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80044fe:	bf00      	nop
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	24005324 	.word	0x24005324

08004508 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800450c:	4802      	ldr	r0, [pc, #8]	@ (8004518 <USART1_IRQHandler+0x10>)
 800450e:	f00a fb93 	bl	800ec38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004512:	bf00      	nop
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	24005168 	.word	0x24005168

0800451c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004520:	4802      	ldr	r0, [pc, #8]	@ (800452c <USART3_IRQHandler+0x10>)
 8004522:	f00a fb89 	bl	800ec38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004526:	bf00      	nop
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	240051fc 	.word	0x240051fc

08004530 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	user_UART_IDLE_IT_handler();
 8004534:	f7ff fc90 	bl	8003e58 <user_UART_IDLE_IT_handler>
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004538:	4802      	ldr	r0, [pc, #8]	@ (8004544 <UART4_IRQHandler+0x14>)
 800453a:	f00a fb7d 	bl	800ec38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800453e:	bf00      	nop
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	240050d4 	.word	0x240050d4

08004548 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800454c:	4802      	ldr	r0, [pc, #8]	@ (8004558 <TIM6_DAC_IRQHandler+0x10>)
 800454e:	f009 f951 	bl	800d7f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004552:	bf00      	nop
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	24004ff0 	.word	0x24004ff0

0800455c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004560:	4802      	ldr	r0, [pc, #8]	@ (800456c <TIM7_IRQHandler+0x10>)
 8004562:	f009 f947 	bl	800d7f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004566:	bf00      	nop
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	2400503c 	.word	0x2400503c

08004570 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
  return 1;
 8004574:	2301      	movs	r3, #1
}
 8004576:	4618      	mov	r0, r3
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <_kill>:

int _kill(int pid, int sig)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800458a:	f012 fb69 	bl	8016c60 <__errno>
 800458e:	4603      	mov	r3, r0
 8004590:	2216      	movs	r2, #22
 8004592:	601a      	str	r2, [r3, #0]
  return -1;
 8004594:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004598:	4618      	mov	r0, r3
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <_exit>:

void _exit (int status)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80045a8:	f04f 31ff 	mov.w	r1, #4294967295
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7ff ffe7 	bl	8004580 <_kill>
  while (1) {}    /* Make sure we hang here */
 80045b2:	bf00      	nop
 80045b4:	e7fd      	b.n	80045b2 <_exit+0x12>

080045b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b086      	sub	sp, #24
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	60f8      	str	r0, [r7, #12]
 80045be:	60b9      	str	r1, [r7, #8]
 80045c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045c2:	2300      	movs	r3, #0
 80045c4:	617b      	str	r3, [r7, #20]
 80045c6:	e00a      	b.n	80045de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80045c8:	f3af 8000 	nop.w
 80045cc:	4601      	mov	r1, r0
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	1c5a      	adds	r2, r3, #1
 80045d2:	60ba      	str	r2, [r7, #8]
 80045d4:	b2ca      	uxtb	r2, r1
 80045d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	3301      	adds	r3, #1
 80045dc:	617b      	str	r3, [r7, #20]
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	dbf0      	blt.n	80045c8 <_read+0x12>
  }

  return len;
 80045e6:	687b      	ldr	r3, [r7, #4]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]
 8004600:	e009      	b.n	8004616 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	1c5a      	adds	r2, r3, #1
 8004606:	60ba      	str	r2, [r7, #8]
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	4618      	mov	r0, r3
 800460c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	3301      	adds	r3, #1
 8004614:	617b      	str	r3, [r7, #20]
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	429a      	cmp	r2, r3
 800461c:	dbf1      	blt.n	8004602 <_write+0x12>
  }
  return len;
 800461e:	687b      	ldr	r3, [r7, #4]
}
 8004620:	4618      	mov	r0, r3
 8004622:	3718      	adds	r7, #24
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <_close>:

int _close(int file)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004630:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004634:	4618      	mov	r0, r3
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004650:	605a      	str	r2, [r3, #4]
  return 0;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <_isatty>:

int _isatty(int file)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004668:	2301      	movs	r3, #1
}
 800466a:	4618      	mov	r0, r3
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004676:	b480      	push	{r7}
 8004678:	b085      	sub	sp, #20
 800467a:	af00      	add	r7, sp, #0
 800467c:	60f8      	str	r0, [r7, #12]
 800467e:	60b9      	str	r1, [r7, #8]
 8004680:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3714      	adds	r7, #20
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004698:	4a14      	ldr	r2, [pc, #80]	@ (80046ec <_sbrk+0x5c>)
 800469a:	4b15      	ldr	r3, [pc, #84]	@ (80046f0 <_sbrk+0x60>)
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80046a4:	4b13      	ldr	r3, [pc, #76]	@ (80046f4 <_sbrk+0x64>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d102      	bne.n	80046b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80046ac:	4b11      	ldr	r3, [pc, #68]	@ (80046f4 <_sbrk+0x64>)
 80046ae:	4a12      	ldr	r2, [pc, #72]	@ (80046f8 <_sbrk+0x68>)
 80046b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80046b2:	4b10      	ldr	r3, [pc, #64]	@ (80046f4 <_sbrk+0x64>)
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4413      	add	r3, r2
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d207      	bcs.n	80046d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80046c0:	f012 face 	bl	8016c60 <__errno>
 80046c4:	4603      	mov	r3, r0
 80046c6:	220c      	movs	r2, #12
 80046c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80046ca:	f04f 33ff 	mov.w	r3, #4294967295
 80046ce:	e009      	b.n	80046e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80046d0:	4b08      	ldr	r3, [pc, #32]	@ (80046f4 <_sbrk+0x64>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80046d6:	4b07      	ldr	r3, [pc, #28]	@ (80046f4 <_sbrk+0x64>)
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4413      	add	r3, r2
 80046de:	4a05      	ldr	r2, [pc, #20]	@ (80046f4 <_sbrk+0x64>)
 80046e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80046e2:	68fb      	ldr	r3, [r7, #12]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3718      	adds	r7, #24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	24100000 	.word	0x24100000
 80046f0:	00000400 	.word	0x00000400
 80046f4:	24004f08 	.word	0x24004f08
 80046f8:	24005820 	.word	0x24005820

080046fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80046fc:	b480      	push	{r7}
 80046fe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004700:	4b32      	ldr	r3, [pc, #200]	@ (80047cc <SystemInit+0xd0>)
 8004702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004706:	4a31      	ldr	r2, [pc, #196]	@ (80047cc <SystemInit+0xd0>)
 8004708:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800470c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004710:	4b2f      	ldr	r3, [pc, #188]	@ (80047d0 <SystemInit+0xd4>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 030f 	and.w	r3, r3, #15
 8004718:	2b02      	cmp	r3, #2
 800471a:	d807      	bhi.n	800472c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800471c:	4b2c      	ldr	r3, [pc, #176]	@ (80047d0 <SystemInit+0xd4>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f023 030f 	bic.w	r3, r3, #15
 8004724:	4a2a      	ldr	r2, [pc, #168]	@ (80047d0 <SystemInit+0xd4>)
 8004726:	f043 0303 	orr.w	r3, r3, #3
 800472a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800472c:	4b29      	ldr	r3, [pc, #164]	@ (80047d4 <SystemInit+0xd8>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a28      	ldr	r2, [pc, #160]	@ (80047d4 <SystemInit+0xd8>)
 8004732:	f043 0301 	orr.w	r3, r3, #1
 8004736:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004738:	4b26      	ldr	r3, [pc, #152]	@ (80047d4 <SystemInit+0xd8>)
 800473a:	2200      	movs	r2, #0
 800473c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800473e:	4b25      	ldr	r3, [pc, #148]	@ (80047d4 <SystemInit+0xd8>)
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	4924      	ldr	r1, [pc, #144]	@ (80047d4 <SystemInit+0xd8>)
 8004744:	4b24      	ldr	r3, [pc, #144]	@ (80047d8 <SystemInit+0xdc>)
 8004746:	4013      	ands	r3, r2
 8004748:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800474a:	4b21      	ldr	r3, [pc, #132]	@ (80047d0 <SystemInit+0xd4>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 030c 	and.w	r3, r3, #12
 8004752:	2b00      	cmp	r3, #0
 8004754:	d007      	beq.n	8004766 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004756:	4b1e      	ldr	r3, [pc, #120]	@ (80047d0 <SystemInit+0xd4>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f023 030f 	bic.w	r3, r3, #15
 800475e:	4a1c      	ldr	r2, [pc, #112]	@ (80047d0 <SystemInit+0xd4>)
 8004760:	f043 0303 	orr.w	r3, r3, #3
 8004764:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8004766:	4b1b      	ldr	r3, [pc, #108]	@ (80047d4 <SystemInit+0xd8>)
 8004768:	2200      	movs	r2, #0
 800476a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800476c:	4b19      	ldr	r3, [pc, #100]	@ (80047d4 <SystemInit+0xd8>)
 800476e:	2200      	movs	r2, #0
 8004770:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8004772:	4b18      	ldr	r3, [pc, #96]	@ (80047d4 <SystemInit+0xd8>)
 8004774:	2200      	movs	r2, #0
 8004776:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004778:	4b16      	ldr	r3, [pc, #88]	@ (80047d4 <SystemInit+0xd8>)
 800477a:	4a18      	ldr	r2, [pc, #96]	@ (80047dc <SystemInit+0xe0>)
 800477c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800477e:	4b15      	ldr	r3, [pc, #84]	@ (80047d4 <SystemInit+0xd8>)
 8004780:	4a17      	ldr	r2, [pc, #92]	@ (80047e0 <SystemInit+0xe4>)
 8004782:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004784:	4b13      	ldr	r3, [pc, #76]	@ (80047d4 <SystemInit+0xd8>)
 8004786:	4a17      	ldr	r2, [pc, #92]	@ (80047e4 <SystemInit+0xe8>)
 8004788:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800478a:	4b12      	ldr	r3, [pc, #72]	@ (80047d4 <SystemInit+0xd8>)
 800478c:	2200      	movs	r2, #0
 800478e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004790:	4b10      	ldr	r3, [pc, #64]	@ (80047d4 <SystemInit+0xd8>)
 8004792:	4a14      	ldr	r2, [pc, #80]	@ (80047e4 <SystemInit+0xe8>)
 8004794:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004796:	4b0f      	ldr	r3, [pc, #60]	@ (80047d4 <SystemInit+0xd8>)
 8004798:	2200      	movs	r2, #0
 800479a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800479c:	4b0d      	ldr	r3, [pc, #52]	@ (80047d4 <SystemInit+0xd8>)
 800479e:	4a11      	ldr	r2, [pc, #68]	@ (80047e4 <SystemInit+0xe8>)
 80047a0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80047a2:	4b0c      	ldr	r3, [pc, #48]	@ (80047d4 <SystemInit+0xd8>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80047a8:	4b0a      	ldr	r3, [pc, #40]	@ (80047d4 <SystemInit+0xd8>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a09      	ldr	r2, [pc, #36]	@ (80047d4 <SystemInit+0xd8>)
 80047ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80047b4:	4b07      	ldr	r3, [pc, #28]	@ (80047d4 <SystemInit+0xd8>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80047ba:	4b0b      	ldr	r3, [pc, #44]	@ (80047e8 <SystemInit+0xec>)
 80047bc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80047c0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80047c2:	bf00      	nop
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	e000ed00 	.word	0xe000ed00
 80047d0:	52002000 	.word	0x52002000
 80047d4:	58024400 	.word	0x58024400
 80047d8:	eaf6ed7f 	.word	0xeaf6ed7f
 80047dc:	02020200 	.word	0x02020200
 80047e0:	01ff0000 	.word	0x01ff0000
 80047e4:	01010280 	.word	0x01010280
 80047e8:	52004000 	.word	0x52004000

080047ec <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b08a      	sub	sp, #40	@ 0x28
 80047f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047f2:	f107 031c 	add.w	r3, r7, #28
 80047f6:	2200      	movs	r2, #0
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	605a      	str	r2, [r3, #4]
 80047fc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80047fe:	463b      	mov	r3, r7
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	605a      	str	r2, [r3, #4]
 8004806:	609a      	str	r2, [r3, #8]
 8004808:	60da      	str	r2, [r3, #12]
 800480a:	611a      	str	r2, [r3, #16]
 800480c:	615a      	str	r2, [r3, #20]
 800480e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004810:	4b33      	ldr	r3, [pc, #204]	@ (80048e0 <MX_TIM2_Init+0xf4>)
 8004812:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004816:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280-1;
 8004818:	4b31      	ldr	r3, [pc, #196]	@ (80048e0 <MX_TIM2_Init+0xf4>)
 800481a:	f240 1217 	movw	r2, #279	@ 0x117
 800481e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004820:	4b2f      	ldr	r3, [pc, #188]	@ (80048e0 <MX_TIM2_Init+0xf4>)
 8004822:	2200      	movs	r2, #0
 8004824:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 8004826:	4b2e      	ldr	r3, [pc, #184]	@ (80048e0 <MX_TIM2_Init+0xf4>)
 8004828:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800482c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800482e:	4b2c      	ldr	r3, [pc, #176]	@ (80048e0 <MX_TIM2_Init+0xf4>)
 8004830:	2200      	movs	r2, #0
 8004832:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004834:	4b2a      	ldr	r3, [pc, #168]	@ (80048e0 <MX_TIM2_Init+0xf4>)
 8004836:	2280      	movs	r2, #128	@ 0x80
 8004838:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800483a:	4829      	ldr	r0, [pc, #164]	@ (80048e0 <MX_TIM2_Init+0xf4>)
 800483c:	f008 fe74 	bl	800d528 <HAL_TIM_PWM_Init>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8004846:	f7ff fc75 	bl	8004134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800484a:	2300      	movs	r3, #0
 800484c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800484e:	2300      	movs	r3, #0
 8004850:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004852:	f107 031c 	add.w	r3, r7, #28
 8004856:	4619      	mov	r1, r3
 8004858:	4821      	ldr	r0, [pc, #132]	@ (80048e0 <MX_TIM2_Init+0xf4>)
 800485a:	f009 fdb1 	bl	800e3c0 <HAL_TIMEx_MasterConfigSynchronization>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8004864:	f7ff fc66 	bl	8004134 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004868:	2360      	movs	r3, #96	@ 0x60
 800486a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800486c:	2300      	movs	r3, #0
 800486e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004870:	2300      	movs	r3, #0
 8004872:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004874:	2300      	movs	r3, #0
 8004876:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004878:	463b      	mov	r3, r7
 800487a:	2200      	movs	r2, #0
 800487c:	4619      	mov	r1, r3
 800487e:	4818      	ldr	r0, [pc, #96]	@ (80048e0 <MX_TIM2_Init+0xf4>)
 8004880:	f009 f8c0 	bl	800da04 <HAL_TIM_PWM_ConfigChannel>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800488a:	f7ff fc53 	bl	8004134 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800488e:	463b      	mov	r3, r7
 8004890:	2204      	movs	r2, #4
 8004892:	4619      	mov	r1, r3
 8004894:	4812      	ldr	r0, [pc, #72]	@ (80048e0 <MX_TIM2_Init+0xf4>)
 8004896:	f009 f8b5 	bl	800da04 <HAL_TIM_PWM_ConfigChannel>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d001      	beq.n	80048a4 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 80048a0:	f7ff fc48 	bl	8004134 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80048a4:	463b      	mov	r3, r7
 80048a6:	2208      	movs	r2, #8
 80048a8:	4619      	mov	r1, r3
 80048aa:	480d      	ldr	r0, [pc, #52]	@ (80048e0 <MX_TIM2_Init+0xf4>)
 80048ac:	f009 f8aa 	bl	800da04 <HAL_TIM_PWM_ConfigChannel>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 80048b6:	f7ff fc3d 	bl	8004134 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80048ba:	463b      	mov	r3, r7
 80048bc:	220c      	movs	r2, #12
 80048be:	4619      	mov	r1, r3
 80048c0:	4807      	ldr	r0, [pc, #28]	@ (80048e0 <MX_TIM2_Init+0xf4>)
 80048c2:	f009 f89f 	bl	800da04 <HAL_TIM_PWM_ConfigChannel>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 80048cc:	f7ff fc32 	bl	8004134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80048d0:	4803      	ldr	r0, [pc, #12]	@ (80048e0 <MX_TIM2_Init+0xf4>)
 80048d2:	f000 fa29 	bl	8004d28 <HAL_TIM_MspPostInit>

}
 80048d6:	bf00      	nop
 80048d8:	3728      	adds	r7, #40	@ 0x28
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	24004f0c 	.word	0x24004f0c

080048e4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08a      	sub	sp, #40	@ 0x28
 80048e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048ea:	f107 031c 	add.w	r3, r7, #28
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	605a      	str	r2, [r3, #4]
 80048f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80048f6:	463b      	mov	r3, r7
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	605a      	str	r2, [r3, #4]
 80048fe:	609a      	str	r2, [r3, #8]
 8004900:	60da      	str	r2, [r3, #12]
 8004902:	611a      	str	r2, [r3, #16]
 8004904:	615a      	str	r2, [r3, #20]
 8004906:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004908:	4b27      	ldr	r3, [pc, #156]	@ (80049a8 <MX_TIM3_Init+0xc4>)
 800490a:	4a28      	ldr	r2, [pc, #160]	@ (80049ac <MX_TIM3_Init+0xc8>)
 800490c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280-1;
 800490e:	4b26      	ldr	r3, [pc, #152]	@ (80049a8 <MX_TIM3_Init+0xc4>)
 8004910:	f240 1217 	movw	r2, #279	@ 0x117
 8004914:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004916:	4b24      	ldr	r3, [pc, #144]	@ (80049a8 <MX_TIM3_Init+0xc4>)
 8004918:	2200      	movs	r2, #0
 800491a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7000;
 800491c:	4b22      	ldr	r3, [pc, #136]	@ (80049a8 <MX_TIM3_Init+0xc4>)
 800491e:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8004922:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004924:	4b20      	ldr	r3, [pc, #128]	@ (80049a8 <MX_TIM3_Init+0xc4>)
 8004926:	2200      	movs	r2, #0
 8004928:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800492a:	4b1f      	ldr	r3, [pc, #124]	@ (80049a8 <MX_TIM3_Init+0xc4>)
 800492c:	2280      	movs	r2, #128	@ 0x80
 800492e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004930:	481d      	ldr	r0, [pc, #116]	@ (80049a8 <MX_TIM3_Init+0xc4>)
 8004932:	f008 fdf9 	bl	800d528 <HAL_TIM_PWM_Init>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d001      	beq.n	8004940 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 800493c:	f7ff fbfa 	bl	8004134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004940:	2300      	movs	r3, #0
 8004942:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004944:	2300      	movs	r3, #0
 8004946:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004948:	f107 031c 	add.w	r3, r7, #28
 800494c:	4619      	mov	r1, r3
 800494e:	4816      	ldr	r0, [pc, #88]	@ (80049a8 <MX_TIM3_Init+0xc4>)
 8004950:	f009 fd36 	bl	800e3c0 <HAL_TIMEx_MasterConfigSynchronization>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800495a:	f7ff fbeb 	bl	8004134 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800495e:	2360      	movs	r3, #96	@ 0x60
 8004960:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004962:	2300      	movs	r3, #0
 8004964:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004966:	2300      	movs	r3, #0
 8004968:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800496a:	2300      	movs	r3, #0
 800496c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800496e:	463b      	mov	r3, r7
 8004970:	2200      	movs	r2, #0
 8004972:	4619      	mov	r1, r3
 8004974:	480c      	ldr	r0, [pc, #48]	@ (80049a8 <MX_TIM3_Init+0xc4>)
 8004976:	f009 f845 	bl	800da04 <HAL_TIM_PWM_ConfigChannel>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d001      	beq.n	8004984 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8004980:	f7ff fbd8 	bl	8004134 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004984:	463b      	mov	r3, r7
 8004986:	2204      	movs	r2, #4
 8004988:	4619      	mov	r1, r3
 800498a:	4807      	ldr	r0, [pc, #28]	@ (80049a8 <MX_TIM3_Init+0xc4>)
 800498c:	f009 f83a 	bl	800da04 <HAL_TIM_PWM_ConfigChannel>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8004996:	f7ff fbcd 	bl	8004134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800499a:	4803      	ldr	r0, [pc, #12]	@ (80049a8 <MX_TIM3_Init+0xc4>)
 800499c:	f000 f9c4 	bl	8004d28 <HAL_TIM_MspPostInit>

}
 80049a0:	bf00      	nop
 80049a2:	3728      	adds	r7, #40	@ 0x28
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	24004f58 	.word	0x24004f58
 80049ac:	40000400 	.word	0x40000400

080049b0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b08a      	sub	sp, #40	@ 0x28
 80049b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049b6:	f107 031c 	add.w	r3, r7, #28
 80049ba:	2200      	movs	r2, #0
 80049bc:	601a      	str	r2, [r3, #0]
 80049be:	605a      	str	r2, [r3, #4]
 80049c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80049c2:	463b      	mov	r3, r7
 80049c4:	2200      	movs	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	605a      	str	r2, [r3, #4]
 80049ca:	609a      	str	r2, [r3, #8]
 80049cc:	60da      	str	r2, [r3, #12]
 80049ce:	611a      	str	r2, [r3, #16]
 80049d0:	615a      	str	r2, [r3, #20]
 80049d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80049d4:	4b32      	ldr	r3, [pc, #200]	@ (8004aa0 <MX_TIM4_Init+0xf0>)
 80049d6:	4a33      	ldr	r2, [pc, #204]	@ (8004aa4 <MX_TIM4_Init+0xf4>)
 80049d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 280-1;
 80049da:	4b31      	ldr	r3, [pc, #196]	@ (8004aa0 <MX_TIM4_Init+0xf0>)
 80049dc:	f240 1217 	movw	r2, #279	@ 0x117
 80049e0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049e2:	4b2f      	ldr	r3, [pc, #188]	@ (8004aa0 <MX_TIM4_Init+0xf0>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7000;
 80049e8:	4b2d      	ldr	r3, [pc, #180]	@ (8004aa0 <MX_TIM4_Init+0xf0>)
 80049ea:	f641 3258 	movw	r2, #7000	@ 0x1b58
 80049ee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049f0:	4b2b      	ldr	r3, [pc, #172]	@ (8004aa0 <MX_TIM4_Init+0xf0>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80049f6:	4b2a      	ldr	r3, [pc, #168]	@ (8004aa0 <MX_TIM4_Init+0xf0>)
 80049f8:	2280      	movs	r2, #128	@ 0x80
 80049fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80049fc:	4828      	ldr	r0, [pc, #160]	@ (8004aa0 <MX_TIM4_Init+0xf0>)
 80049fe:	f008 fd93 	bl	800d528 <HAL_TIM_PWM_Init>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8004a08:	f7ff fb94 	bl	8004134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a10:	2300      	movs	r3, #0
 8004a12:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004a14:	f107 031c 	add.w	r3, r7, #28
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4821      	ldr	r0, [pc, #132]	@ (8004aa0 <MX_TIM4_Init+0xf0>)
 8004a1c:	f009 fcd0 	bl	800e3c0 <HAL_TIMEx_MasterConfigSynchronization>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8004a26:	f7ff fb85 	bl	8004134 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a2a:	2360      	movs	r3, #96	@ 0x60
 8004a2c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a32:	2300      	movs	r3, #0
 8004a34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a36:	2300      	movs	r3, #0
 8004a38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a3a:	463b      	mov	r3, r7
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	4619      	mov	r1, r3
 8004a40:	4817      	ldr	r0, [pc, #92]	@ (8004aa0 <MX_TIM4_Init+0xf0>)
 8004a42:	f008 ffdf 	bl	800da04 <HAL_TIM_PWM_ConfigChannel>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8004a4c:	f7ff fb72 	bl	8004134 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004a50:	463b      	mov	r3, r7
 8004a52:	2204      	movs	r2, #4
 8004a54:	4619      	mov	r1, r3
 8004a56:	4812      	ldr	r0, [pc, #72]	@ (8004aa0 <MX_TIM4_Init+0xf0>)
 8004a58:	f008 ffd4 	bl	800da04 <HAL_TIM_PWM_ConfigChannel>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8004a62:	f7ff fb67 	bl	8004134 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004a66:	463b      	mov	r3, r7
 8004a68:	2208      	movs	r2, #8
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	480c      	ldr	r0, [pc, #48]	@ (8004aa0 <MX_TIM4_Init+0xf0>)
 8004a6e:	f008 ffc9 	bl	800da04 <HAL_TIM_PWM_ConfigChannel>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8004a78:	f7ff fb5c 	bl	8004134 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004a7c:	463b      	mov	r3, r7
 8004a7e:	220c      	movs	r2, #12
 8004a80:	4619      	mov	r1, r3
 8004a82:	4807      	ldr	r0, [pc, #28]	@ (8004aa0 <MX_TIM4_Init+0xf0>)
 8004a84:	f008 ffbe 	bl	800da04 <HAL_TIM_PWM_ConfigChannel>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8004a8e:	f7ff fb51 	bl	8004134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004a92:	4803      	ldr	r0, [pc, #12]	@ (8004aa0 <MX_TIM4_Init+0xf0>)
 8004a94:	f000 f948 	bl	8004d28 <HAL_TIM_MspPostInit>

}
 8004a98:	bf00      	nop
 8004a9a:	3728      	adds	r7, #40	@ 0x28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	24004fa4 	.word	0x24004fa4
 8004aa4:	40000800 	.word	0x40000800

08004aa8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004aae:	1d3b      	adds	r3, r7, #4
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	605a      	str	r2, [r3, #4]
 8004ab6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004ab8:	4b15      	ldr	r3, [pc, #84]	@ (8004b10 <MX_TIM6_Init+0x68>)
 8004aba:	4a16      	ldr	r2, [pc, #88]	@ (8004b14 <MX_TIM6_Init+0x6c>)
 8004abc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 8004abe:	4b14      	ldr	r3, [pc, #80]	@ (8004b10 <MX_TIM6_Init+0x68>)
 8004ac0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004ac4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ac6:	4b12      	ldr	r3, [pc, #72]	@ (8004b10 <MX_TIM6_Init+0x68>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 279;
 8004acc:	4b10      	ldr	r3, [pc, #64]	@ (8004b10 <MX_TIM6_Init+0x68>)
 8004ace:	f240 1217 	movw	r2, #279	@ 0x117
 8004ad2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8004b10 <MX_TIM6_Init+0x68>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004ada:	480d      	ldr	r0, [pc, #52]	@ (8004b10 <MX_TIM6_Init+0x68>)
 8004adc:	f008 fc55 	bl	800d38a <HAL_TIM_Base_Init>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8004ae6:	f7ff fb25 	bl	8004134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004aea:	2300      	movs	r3, #0
 8004aec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004aee:	2300      	movs	r3, #0
 8004af0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004af2:	1d3b      	adds	r3, r7, #4
 8004af4:	4619      	mov	r1, r3
 8004af6:	4806      	ldr	r0, [pc, #24]	@ (8004b10 <MX_TIM6_Init+0x68>)
 8004af8:	f009 fc62 	bl	800e3c0 <HAL_TIMEx_MasterConfigSynchronization>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8004b02:	f7ff fb17 	bl	8004134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  /* USER CODE END TIM6_Init 2 */

}
 8004b06:	bf00      	nop
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	24004ff0 	.word	0x24004ff0
 8004b14:	40001000 	.word	0x40001000

08004b18 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b1e:	1d3b      	adds	r3, r7, #4
 8004b20:	2200      	movs	r2, #0
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	605a      	str	r2, [r3, #4]
 8004b26:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004b28:	4b15      	ldr	r3, [pc, #84]	@ (8004b80 <MX_TIM7_Init+0x68>)
 8004b2a:	4a16      	ldr	r2, [pc, #88]	@ (8004b84 <MX_TIM7_Init+0x6c>)
 8004b2c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 8004b2e:	4b14      	ldr	r3, [pc, #80]	@ (8004b80 <MX_TIM7_Init+0x68>)
 8004b30:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004b34:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b36:	4b12      	ldr	r3, [pc, #72]	@ (8004b80 <MX_TIM7_Init+0x68>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 279;
 8004b3c:	4b10      	ldr	r3, [pc, #64]	@ (8004b80 <MX_TIM7_Init+0x68>)
 8004b3e:	f240 1217 	movw	r2, #279	@ 0x117
 8004b42:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b44:	4b0e      	ldr	r3, [pc, #56]	@ (8004b80 <MX_TIM7_Init+0x68>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004b4a:	480d      	ldr	r0, [pc, #52]	@ (8004b80 <MX_TIM7_Init+0x68>)
 8004b4c:	f008 fc1d 	bl	800d38a <HAL_TIM_Base_Init>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8004b56:	f7ff faed 	bl	8004134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004b62:	1d3b      	adds	r3, r7, #4
 8004b64:	4619      	mov	r1, r3
 8004b66:	4806      	ldr	r0, [pc, #24]	@ (8004b80 <MX_TIM7_Init+0x68>)
 8004b68:	f009 fc2a 	bl	800e3c0 <HAL_TIMEx_MasterConfigSynchronization>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8004b72:	f7ff fadf 	bl	8004134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004b76:	bf00      	nop
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	2400503c 	.word	0x2400503c
 8004b84:	40001400 	.word	0x40001400

08004b88 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8004bc8 <MX_TIM13_Init+0x40>)
 8004b8e:	4a0f      	ldr	r2, [pc, #60]	@ (8004bcc <MX_TIM13_Init+0x44>)
 8004b90:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 280-1;
 8004b92:	4b0d      	ldr	r3, [pc, #52]	@ (8004bc8 <MX_TIM13_Init+0x40>)
 8004b94:	f240 1217 	movw	r2, #279	@ 0x117
 8004b98:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc8 <MX_TIM13_Init+0x40>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8004ba0:	4b09      	ldr	r3, [pc, #36]	@ (8004bc8 <MX_TIM13_Init+0x40>)
 8004ba2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004ba6:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ba8:	4b07      	ldr	r3, [pc, #28]	@ (8004bc8 <MX_TIM13_Init+0x40>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004bae:	4b06      	ldr	r3, [pc, #24]	@ (8004bc8 <MX_TIM13_Init+0x40>)
 8004bb0:	2280      	movs	r2, #128	@ 0x80
 8004bb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004bb4:	4804      	ldr	r0, [pc, #16]	@ (8004bc8 <MX_TIM13_Init+0x40>)
 8004bb6:	f008 fbe8 	bl	800d38a <HAL_TIM_Base_Init>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8004bc0:	f7ff fab8 	bl	8004134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004bc4:	bf00      	nop
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	24005088 	.word	0x24005088
 8004bcc:	40001c00 	.word	0x40001c00

08004bd0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b087      	sub	sp, #28
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004be0:	d10f      	bne.n	8004c02 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004be2:	4b1f      	ldr	r3, [pc, #124]	@ (8004c60 <HAL_TIM_PWM_MspInit+0x90>)
 8004be4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004be8:	4a1d      	ldr	r2, [pc, #116]	@ (8004c60 <HAL_TIM_PWM_MspInit+0x90>)
 8004bea:	f043 0301 	orr.w	r3, r3, #1
 8004bee:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8004c60 <HAL_TIM_PWM_MspInit+0x90>)
 8004bf4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	617b      	str	r3, [r7, #20]
 8004bfe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004c00:	e028      	b.n	8004c54 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM3)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a17      	ldr	r2, [pc, #92]	@ (8004c64 <HAL_TIM_PWM_MspInit+0x94>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d10f      	bne.n	8004c2c <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004c0c:	4b14      	ldr	r3, [pc, #80]	@ (8004c60 <HAL_TIM_PWM_MspInit+0x90>)
 8004c0e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004c12:	4a13      	ldr	r2, [pc, #76]	@ (8004c60 <HAL_TIM_PWM_MspInit+0x90>)
 8004c14:	f043 0302 	orr.w	r3, r3, #2
 8004c18:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004c1c:	4b10      	ldr	r3, [pc, #64]	@ (8004c60 <HAL_TIM_PWM_MspInit+0x90>)
 8004c1e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	613b      	str	r3, [r7, #16]
 8004c28:	693b      	ldr	r3, [r7, #16]
}
 8004c2a:	e013      	b.n	8004c54 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM4)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a0d      	ldr	r2, [pc, #52]	@ (8004c68 <HAL_TIM_PWM_MspInit+0x98>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d10e      	bne.n	8004c54 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004c36:	4b0a      	ldr	r3, [pc, #40]	@ (8004c60 <HAL_TIM_PWM_MspInit+0x90>)
 8004c38:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004c3c:	4a08      	ldr	r2, [pc, #32]	@ (8004c60 <HAL_TIM_PWM_MspInit+0x90>)
 8004c3e:	f043 0304 	orr.w	r3, r3, #4
 8004c42:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004c46:	4b06      	ldr	r3, [pc, #24]	@ (8004c60 <HAL_TIM_PWM_MspInit+0x90>)
 8004c48:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004c4c:	f003 0304 	and.w	r3, r3, #4
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	68fb      	ldr	r3, [r7, #12]
}
 8004c54:	bf00      	nop
 8004c56:	371c      	adds	r7, #28
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	58024400 	.word	0x58024400
 8004c64:	40000400 	.word	0x40000400
 8004c68:	40000800 	.word	0x40000800

08004c6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a27      	ldr	r2, [pc, #156]	@ (8004d18 <HAL_TIM_Base_MspInit+0xac>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d117      	bne.n	8004cae <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004c7e:	4b27      	ldr	r3, [pc, #156]	@ (8004d1c <HAL_TIM_Base_MspInit+0xb0>)
 8004c80:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004c84:	4a25      	ldr	r2, [pc, #148]	@ (8004d1c <HAL_TIM_Base_MspInit+0xb0>)
 8004c86:	f043 0310 	orr.w	r3, r3, #16
 8004c8a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004c8e:	4b23      	ldr	r3, [pc, #140]	@ (8004d1c <HAL_TIM_Base_MspInit+0xb0>)
 8004c90:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004c94:	f003 0310 	and.w	r3, r3, #16
 8004c98:	617b      	str	r3, [r7, #20]
 8004c9a:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	2036      	movs	r0, #54	@ 0x36
 8004ca2:	f000 fdfa 	bl	800589a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004ca6:	2036      	movs	r0, #54	@ 0x36
 8004ca8:	f000 fe11 	bl	80058ce <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8004cac:	e030      	b.n	8004d10 <HAL_TIM_Base_MspInit+0xa4>
  else if(tim_baseHandle->Instance==TIM7)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a1b      	ldr	r2, [pc, #108]	@ (8004d20 <HAL_TIM_Base_MspInit+0xb4>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d117      	bne.n	8004ce8 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004cb8:	4b18      	ldr	r3, [pc, #96]	@ (8004d1c <HAL_TIM_Base_MspInit+0xb0>)
 8004cba:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004cbe:	4a17      	ldr	r2, [pc, #92]	@ (8004d1c <HAL_TIM_Base_MspInit+0xb0>)
 8004cc0:	f043 0320 	orr.w	r3, r3, #32
 8004cc4:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004cc8:	4b14      	ldr	r3, [pc, #80]	@ (8004d1c <HAL_TIM_Base_MspInit+0xb0>)
 8004cca:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004cce:	f003 0320 	and.w	r3, r3, #32
 8004cd2:	613b      	str	r3, [r7, #16]
 8004cd4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	2100      	movs	r1, #0
 8004cda:	2037      	movs	r0, #55	@ 0x37
 8004cdc:	f000 fddd 	bl	800589a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004ce0:	2037      	movs	r0, #55	@ 0x37
 8004ce2:	f000 fdf4 	bl	80058ce <HAL_NVIC_EnableIRQ>
}
 8004ce6:	e013      	b.n	8004d10 <HAL_TIM_Base_MspInit+0xa4>
  else if(tim_baseHandle->Instance==TIM13)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a0d      	ldr	r2, [pc, #52]	@ (8004d24 <HAL_TIM_Base_MspInit+0xb8>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d10e      	bne.n	8004d10 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8004d1c <HAL_TIM_Base_MspInit+0xb0>)
 8004cf4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004cf8:	4a08      	ldr	r2, [pc, #32]	@ (8004d1c <HAL_TIM_Base_MspInit+0xb0>)
 8004cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cfe:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004d02:	4b06      	ldr	r3, [pc, #24]	@ (8004d1c <HAL_TIM_Base_MspInit+0xb0>)
 8004d04:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004d08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d0c:	60fb      	str	r3, [r7, #12]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
}
 8004d10:	bf00      	nop
 8004d12:	3718      	adds	r7, #24
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	40001000 	.word	0x40001000
 8004d1c:	58024400 	.word	0x58024400
 8004d20:	40001400 	.word	0x40001400
 8004d24:	40001c00 	.word	0x40001c00

08004d28 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b08c      	sub	sp, #48	@ 0x30
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d30:	f107 031c 	add.w	r3, r7, #28
 8004d34:	2200      	movs	r2, #0
 8004d36:	601a      	str	r2, [r3, #0]
 8004d38:	605a      	str	r2, [r3, #4]
 8004d3a:	609a      	str	r2, [r3, #8]
 8004d3c:	60da      	str	r2, [r3, #12]
 8004d3e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d48:	d13f      	bne.n	8004dca <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d4a:	4b47      	ldr	r3, [pc, #284]	@ (8004e68 <HAL_TIM_MspPostInit+0x140>)
 8004d4c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004d50:	4a45      	ldr	r2, [pc, #276]	@ (8004e68 <HAL_TIM_MspPostInit+0x140>)
 8004d52:	f043 0301 	orr.w	r3, r3, #1
 8004d56:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004d5a:	4b43      	ldr	r3, [pc, #268]	@ (8004e68 <HAL_TIM_MspPostInit+0x140>)
 8004d5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	61bb      	str	r3, [r7, #24]
 8004d66:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d68:	4b3f      	ldr	r3, [pc, #252]	@ (8004e68 <HAL_TIM_MspPostInit+0x140>)
 8004d6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004d6e:	4a3e      	ldr	r2, [pc, #248]	@ (8004e68 <HAL_TIM_MspPostInit+0x140>)
 8004d70:	f043 0302 	orr.w	r3, r3, #2
 8004d74:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004d78:	4b3b      	ldr	r3, [pc, #236]	@ (8004e68 <HAL_TIM_MspPostInit+0x140>)
 8004d7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	617b      	str	r3, [r7, #20]
 8004d84:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8004d86:	f248 030c 	movw	r3, #32780	@ 0x800c
 8004d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d90:	2300      	movs	r3, #0
 8004d92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d94:	2300      	movs	r3, #0
 8004d96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d9c:	f107 031c 	add.w	r3, r7, #28
 8004da0:	4619      	mov	r1, r3
 8004da2:	4832      	ldr	r0, [pc, #200]	@ (8004e6c <HAL_TIM_MspPostInit+0x144>)
 8004da4:	f004 f874 	bl	8008e90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004da8:	2308      	movs	r3, #8
 8004daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dac:	2302      	movs	r3, #2
 8004dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db0:	2300      	movs	r3, #0
 8004db2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004db4:	2300      	movs	r3, #0
 8004db6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004db8:	2301      	movs	r3, #1
 8004dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dbc:	f107 031c 	add.w	r3, r7, #28
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	482b      	ldr	r0, [pc, #172]	@ (8004e70 <HAL_TIM_MspPostInit+0x148>)
 8004dc4:	f004 f864 	bl	8008e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004dc8:	e049      	b.n	8004e5e <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM3)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a29      	ldr	r2, [pc, #164]	@ (8004e74 <HAL_TIM_MspPostInit+0x14c>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d11f      	bne.n	8004e14 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dd4:	4b24      	ldr	r3, [pc, #144]	@ (8004e68 <HAL_TIM_MspPostInit+0x140>)
 8004dd6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004dda:	4a23      	ldr	r2, [pc, #140]	@ (8004e68 <HAL_TIM_MspPostInit+0x140>)
 8004ddc:	f043 0302 	orr.w	r3, r3, #2
 8004de0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004de4:	4b20      	ldr	r3, [pc, #128]	@ (8004e68 <HAL_TIM_MspPostInit+0x140>)
 8004de6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	613b      	str	r3, [r7, #16]
 8004df0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004df2:	2330      	movs	r3, #48	@ 0x30
 8004df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004df6:	2302      	movs	r3, #2
 8004df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004e02:	2302      	movs	r3, #2
 8004e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e06:	f107 031c 	add.w	r3, r7, #28
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	4818      	ldr	r0, [pc, #96]	@ (8004e70 <HAL_TIM_MspPostInit+0x148>)
 8004e0e:	f004 f83f 	bl	8008e90 <HAL_GPIO_Init>
}
 8004e12:	e024      	b.n	8004e5e <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a17      	ldr	r2, [pc, #92]	@ (8004e78 <HAL_TIM_MspPostInit+0x150>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d11f      	bne.n	8004e5e <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e1e:	4b12      	ldr	r3, [pc, #72]	@ (8004e68 <HAL_TIM_MspPostInit+0x140>)
 8004e20:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004e24:	4a10      	ldr	r2, [pc, #64]	@ (8004e68 <HAL_TIM_MspPostInit+0x140>)
 8004e26:	f043 0302 	orr.w	r3, r3, #2
 8004e2a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8004e68 <HAL_TIM_MspPostInit+0x140>)
 8004e30:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	60fb      	str	r3, [r7, #12]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8004e3c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8004e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e42:	2302      	movs	r3, #2
 8004e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e46:	2300      	movs	r3, #0
 8004e48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004e4e:	2302      	movs	r3, #2
 8004e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e52:	f107 031c 	add.w	r3, r7, #28
 8004e56:	4619      	mov	r1, r3
 8004e58:	4805      	ldr	r0, [pc, #20]	@ (8004e70 <HAL_TIM_MspPostInit+0x148>)
 8004e5a:	f004 f819 	bl	8008e90 <HAL_GPIO_Init>
}
 8004e5e:	bf00      	nop
 8004e60:	3730      	adds	r7, #48	@ 0x30
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	58024400 	.word	0x58024400
 8004e6c:	58020000 	.word	0x58020000
 8004e70:	58020400 	.word	0x58020400
 8004e74:	40000400 	.word	0x40000400
 8004e78:	40000800 	.word	0x40000800

08004e7c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004e80:	4b22      	ldr	r3, [pc, #136]	@ (8004f0c <MX_UART4_Init+0x90>)
 8004e82:	4a23      	ldr	r2, [pc, #140]	@ (8004f10 <MX_UART4_Init+0x94>)
 8004e84:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8004e86:	4b21      	ldr	r3, [pc, #132]	@ (8004f0c <MX_UART4_Init+0x90>)
 8004e88:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004e8c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004e8e:	4b1f      	ldr	r3, [pc, #124]	@ (8004f0c <MX_UART4_Init+0x90>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004e94:	4b1d      	ldr	r3, [pc, #116]	@ (8004f0c <MX_UART4_Init+0x90>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004e9a:	4b1c      	ldr	r3, [pc, #112]	@ (8004f0c <MX_UART4_Init+0x90>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004ea0:	4b1a      	ldr	r3, [pc, #104]	@ (8004f0c <MX_UART4_Init+0x90>)
 8004ea2:	220c      	movs	r2, #12
 8004ea4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ea6:	4b19      	ldr	r3, [pc, #100]	@ (8004f0c <MX_UART4_Init+0x90>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004eac:	4b17      	ldr	r3, [pc, #92]	@ (8004f0c <MX_UART4_Init+0x90>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004eb2:	4b16      	ldr	r3, [pc, #88]	@ (8004f0c <MX_UART4_Init+0x90>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004eb8:	4b14      	ldr	r3, [pc, #80]	@ (8004f0c <MX_UART4_Init+0x90>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004ebe:	4b13      	ldr	r3, [pc, #76]	@ (8004f0c <MX_UART4_Init+0x90>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004ec4:	4811      	ldr	r0, [pc, #68]	@ (8004f0c <MX_UART4_Init+0x90>)
 8004ec6:	f009 fb27 	bl	800e518 <HAL_UART_Init>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d001      	beq.n	8004ed4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8004ed0:	f7ff f930 	bl	8004134 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	480d      	ldr	r0, [pc, #52]	@ (8004f0c <MX_UART4_Init+0x90>)
 8004ed8:	f00b ffc3 	bl	8010e62 <HAL_UARTEx_SetTxFifoThreshold>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8004ee2:	f7ff f927 	bl	8004134 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	4808      	ldr	r0, [pc, #32]	@ (8004f0c <MX_UART4_Init+0x90>)
 8004eea:	f00b fff8 	bl	8010ede <HAL_UARTEx_SetRxFifoThreshold>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8004ef4:	f7ff f91e 	bl	8004134 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8004ef8:	4804      	ldr	r0, [pc, #16]	@ (8004f0c <MX_UART4_Init+0x90>)
 8004efa:	f00b ff79 	bl	8010df0 <HAL_UARTEx_DisableFifoMode>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d001      	beq.n	8004f08 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8004f04:	f7ff f916 	bl	8004134 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004f08:	bf00      	nop
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	240050d4 	.word	0x240050d4
 8004f10:	40004c00 	.word	0x40004c00

08004f14 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004f18:	4b23      	ldr	r3, [pc, #140]	@ (8004fa8 <MX_USART1_UART_Init+0x94>)
 8004f1a:	4a24      	ldr	r2, [pc, #144]	@ (8004fac <MX_USART1_UART_Init+0x98>)
 8004f1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8004f1e:	4b22      	ldr	r3, [pc, #136]	@ (8004fa8 <MX_USART1_UART_Init+0x94>)
 8004f20:	4a23      	ldr	r2, [pc, #140]	@ (8004fb0 <MX_USART1_UART_Init+0x9c>)
 8004f22:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8004f24:	4b20      	ldr	r3, [pc, #128]	@ (8004fa8 <MX_USART1_UART_Init+0x94>)
 8004f26:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004f2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004f2c:	4b1e      	ldr	r3, [pc, #120]	@ (8004fa8 <MX_USART1_UART_Init+0x94>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8004f32:	4b1d      	ldr	r3, [pc, #116]	@ (8004fa8 <MX_USART1_UART_Init+0x94>)
 8004f34:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004f38:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8004fa8 <MX_USART1_UART_Init+0x94>)
 8004f3c:	220c      	movs	r2, #12
 8004f3e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f40:	4b19      	ldr	r3, [pc, #100]	@ (8004fa8 <MX_USART1_UART_Init+0x94>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f46:	4b18      	ldr	r3, [pc, #96]	@ (8004fa8 <MX_USART1_UART_Init+0x94>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f4c:	4b16      	ldr	r3, [pc, #88]	@ (8004fa8 <MX_USART1_UART_Init+0x94>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004f52:	4b15      	ldr	r3, [pc, #84]	@ (8004fa8 <MX_USART1_UART_Init+0x94>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004f58:	4b13      	ldr	r3, [pc, #76]	@ (8004fa8 <MX_USART1_UART_Init+0x94>)
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004f5e:	4812      	ldr	r0, [pc, #72]	@ (8004fa8 <MX_USART1_UART_Init+0x94>)
 8004f60:	f009 fada 	bl	800e518 <HAL_UART_Init>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d001      	beq.n	8004f6e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8004f6a:	f7ff f8e3 	bl	8004134 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004f6e:	2100      	movs	r1, #0
 8004f70:	480d      	ldr	r0, [pc, #52]	@ (8004fa8 <MX_USART1_UART_Init+0x94>)
 8004f72:	f00b ff76 	bl	8010e62 <HAL_UARTEx_SetTxFifoThreshold>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8004f7c:	f7ff f8da 	bl	8004134 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004f80:	2100      	movs	r1, #0
 8004f82:	4809      	ldr	r0, [pc, #36]	@ (8004fa8 <MX_USART1_UART_Init+0x94>)
 8004f84:	f00b ffab 	bl	8010ede <HAL_UARTEx_SetRxFifoThreshold>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8004f8e:	f7ff f8d1 	bl	8004134 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004f92:	4805      	ldr	r0, [pc, #20]	@ (8004fa8 <MX_USART1_UART_Init+0x94>)
 8004f94:	f00b ff2c 	bl	8010df0 <HAL_UARTEx_DisableFifoMode>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8004f9e:	f7ff f8c9 	bl	8004134 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004fa2:	bf00      	nop
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	24005168 	.word	0x24005168
 8004fac:	40011000 	.word	0x40011000
 8004fb0:	000186a0 	.word	0x000186a0

08004fb4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004fb8:	4b22      	ldr	r3, [pc, #136]	@ (8005044 <MX_USART3_UART_Init+0x90>)
 8004fba:	4a23      	ldr	r2, [pc, #140]	@ (8005048 <MX_USART3_UART_Init+0x94>)
 8004fbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004fbe:	4b21      	ldr	r3, [pc, #132]	@ (8005044 <MX_USART3_UART_Init+0x90>)
 8004fc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004fc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004fc6:	4b1f      	ldr	r3, [pc, #124]	@ (8005044 <MX_USART3_UART_Init+0x90>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8005044 <MX_USART3_UART_Init+0x90>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8005044 <MX_USART3_UART_Init+0x90>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8005044 <MX_USART3_UART_Init+0x90>)
 8004fda:	220c      	movs	r2, #12
 8004fdc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004fde:	4b19      	ldr	r3, [pc, #100]	@ (8005044 <MX_USART3_UART_Init+0x90>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004fe4:	4b17      	ldr	r3, [pc, #92]	@ (8005044 <MX_USART3_UART_Init+0x90>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004fea:	4b16      	ldr	r3, [pc, #88]	@ (8005044 <MX_USART3_UART_Init+0x90>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004ff0:	4b14      	ldr	r3, [pc, #80]	@ (8005044 <MX_USART3_UART_Init+0x90>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004ff6:	4b13      	ldr	r3, [pc, #76]	@ (8005044 <MX_USART3_UART_Init+0x90>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004ffc:	4811      	ldr	r0, [pc, #68]	@ (8005044 <MX_USART3_UART_Init+0x90>)
 8004ffe:	f009 fa8b 	bl	800e518 <HAL_UART_Init>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8005008:	f7ff f894 	bl	8004134 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800500c:	2100      	movs	r1, #0
 800500e:	480d      	ldr	r0, [pc, #52]	@ (8005044 <MX_USART3_UART_Init+0x90>)
 8005010:	f00b ff27 	bl	8010e62 <HAL_UARTEx_SetTxFifoThreshold>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800501a:	f7ff f88b 	bl	8004134 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800501e:	2100      	movs	r1, #0
 8005020:	4808      	ldr	r0, [pc, #32]	@ (8005044 <MX_USART3_UART_Init+0x90>)
 8005022:	f00b ff5c 	bl	8010ede <HAL_UARTEx_SetRxFifoThreshold>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d001      	beq.n	8005030 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800502c:	f7ff f882 	bl	8004134 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005030:	4804      	ldr	r0, [pc, #16]	@ (8005044 <MX_USART3_UART_Init+0x90>)
 8005032:	f00b fedd 	bl	8010df0 <HAL_UARTEx_DisableFifoMode>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800503c:	f7ff f87a 	bl	8004134 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005040:	bf00      	nop
 8005042:	bd80      	pop	{r7, pc}
 8005044:	240051fc 	.word	0x240051fc
 8005048:	40004800 	.word	0x40004800

0800504c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005050:	4b22      	ldr	r3, [pc, #136]	@ (80050dc <MX_USART6_UART_Init+0x90>)
 8005052:	4a23      	ldr	r2, [pc, #140]	@ (80050e0 <MX_USART6_UART_Init+0x94>)
 8005054:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8005056:	4b21      	ldr	r3, [pc, #132]	@ (80050dc <MX_USART6_UART_Init+0x90>)
 8005058:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800505c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800505e:	4b1f      	ldr	r3, [pc, #124]	@ (80050dc <MX_USART6_UART_Init+0x90>)
 8005060:	2200      	movs	r2, #0
 8005062:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005064:	4b1d      	ldr	r3, [pc, #116]	@ (80050dc <MX_USART6_UART_Init+0x90>)
 8005066:	2200      	movs	r2, #0
 8005068:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800506a:	4b1c      	ldr	r3, [pc, #112]	@ (80050dc <MX_USART6_UART_Init+0x90>)
 800506c:	2200      	movs	r2, #0
 800506e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005070:	4b1a      	ldr	r3, [pc, #104]	@ (80050dc <MX_USART6_UART_Init+0x90>)
 8005072:	220c      	movs	r2, #12
 8005074:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005076:	4b19      	ldr	r3, [pc, #100]	@ (80050dc <MX_USART6_UART_Init+0x90>)
 8005078:	2200      	movs	r2, #0
 800507a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800507c:	4b17      	ldr	r3, [pc, #92]	@ (80050dc <MX_USART6_UART_Init+0x90>)
 800507e:	2200      	movs	r2, #0
 8005080:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005082:	4b16      	ldr	r3, [pc, #88]	@ (80050dc <MX_USART6_UART_Init+0x90>)
 8005084:	2200      	movs	r2, #0
 8005086:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005088:	4b14      	ldr	r3, [pc, #80]	@ (80050dc <MX_USART6_UART_Init+0x90>)
 800508a:	2200      	movs	r2, #0
 800508c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800508e:	4b13      	ldr	r3, [pc, #76]	@ (80050dc <MX_USART6_UART_Init+0x90>)
 8005090:	2200      	movs	r2, #0
 8005092:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005094:	4811      	ldr	r0, [pc, #68]	@ (80050dc <MX_USART6_UART_Init+0x90>)
 8005096:	f009 fa3f 	bl	800e518 <HAL_UART_Init>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80050a0:	f7ff f848 	bl	8004134 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80050a4:	2100      	movs	r1, #0
 80050a6:	480d      	ldr	r0, [pc, #52]	@ (80050dc <MX_USART6_UART_Init+0x90>)
 80050a8:	f00b fedb 	bl	8010e62 <HAL_UARTEx_SetTxFifoThreshold>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80050b2:	f7ff f83f 	bl	8004134 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80050b6:	2100      	movs	r1, #0
 80050b8:	4808      	ldr	r0, [pc, #32]	@ (80050dc <MX_USART6_UART_Init+0x90>)
 80050ba:	f00b ff10 	bl	8010ede <HAL_UARTEx_SetRxFifoThreshold>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80050c4:	f7ff f836 	bl	8004134 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80050c8:	4804      	ldr	r0, [pc, #16]	@ (80050dc <MX_USART6_UART_Init+0x90>)
 80050ca:	f00b fe91 	bl	8010df0 <HAL_UARTEx_DisableFifoMode>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80050d4:	f7ff f82e 	bl	8004134 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80050d8:	bf00      	nop
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	24005290 	.word	0x24005290
 80050e0:	40011400 	.word	0x40011400

080050e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b0c0      	sub	sp, #256	@ 0x100
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050ec:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80050f0:	2200      	movs	r2, #0
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	605a      	str	r2, [r3, #4]
 80050f6:	609a      	str	r2, [r3, #8]
 80050f8:	60da      	str	r2, [r3, #12]
 80050fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80050fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005100:	22c0      	movs	r2, #192	@ 0xc0
 8005102:	2100      	movs	r1, #0
 8005104:	4618      	mov	r0, r3
 8005106:	f011 fd3e 	bl	8016b86 <memset>
  if(uartHandle->Instance==UART4)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a83      	ldr	r2, [pc, #524]	@ (800531c <HAL_UART_MspInit+0x238>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d17c      	bne.n	800520e <HAL_UART_MspInit+0x12a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005114:	f04f 0202 	mov.w	r2, #2
 8005118:	f04f 0300 	mov.w	r3, #0
 800511c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005120:	2300      	movs	r3, #0
 8005122:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005126:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800512a:	4618      	mov	r0, r3
 800512c:	f005 f9a6 	bl	800a47c <HAL_RCCEx_PeriphCLKConfig>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8005136:	f7fe fffd 	bl	8004134 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800513a:	4b79      	ldr	r3, [pc, #484]	@ (8005320 <HAL_UART_MspInit+0x23c>)
 800513c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8005140:	4a77      	ldr	r2, [pc, #476]	@ (8005320 <HAL_UART_MspInit+0x23c>)
 8005142:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005146:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800514a:	4b75      	ldr	r3, [pc, #468]	@ (8005320 <HAL_UART_MspInit+0x23c>)
 800514c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8005150:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005154:	627b      	str	r3, [r7, #36]	@ 0x24
 8005156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005158:	4b71      	ldr	r3, [pc, #452]	@ (8005320 <HAL_UART_MspInit+0x23c>)
 800515a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800515e:	4a70      	ldr	r2, [pc, #448]	@ (8005320 <HAL_UART_MspInit+0x23c>)
 8005160:	f043 0301 	orr.w	r3, r3, #1
 8005164:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8005168:	4b6d      	ldr	r3, [pc, #436]	@ (8005320 <HAL_UART_MspInit+0x23c>)
 800516a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	623b      	str	r3, [r7, #32]
 8005174:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005176:	2303      	movs	r3, #3
 8005178:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800517c:	2302      	movs	r3, #2
 800517e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005182:	2300      	movs	r3, #0
 8005184:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005188:	2300      	movs	r3, #0
 800518a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800518e:	2308      	movs	r3, #8
 8005190:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005194:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8005198:	4619      	mov	r1, r3
 800519a:	4862      	ldr	r0, [pc, #392]	@ (8005324 <HAL_UART_MspInit+0x240>)
 800519c:	f003 fe78 	bl	8008e90 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80051a0:	4b61      	ldr	r3, [pc, #388]	@ (8005328 <HAL_UART_MspInit+0x244>)
 80051a2:	4a62      	ldr	r2, [pc, #392]	@ (800532c <HAL_UART_MspInit+0x248>)
 80051a4:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80051a6:	4b60      	ldr	r3, [pc, #384]	@ (8005328 <HAL_UART_MspInit+0x244>)
 80051a8:	223f      	movs	r2, #63	@ 0x3f
 80051aa:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80051ac:	4b5e      	ldr	r3, [pc, #376]	@ (8005328 <HAL_UART_MspInit+0x244>)
 80051ae:	2200      	movs	r2, #0
 80051b0:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051b2:	4b5d      	ldr	r3, [pc, #372]	@ (8005328 <HAL_UART_MspInit+0x244>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80051b8:	4b5b      	ldr	r3, [pc, #364]	@ (8005328 <HAL_UART_MspInit+0x244>)
 80051ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80051be:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80051c0:	4b59      	ldr	r3, [pc, #356]	@ (8005328 <HAL_UART_MspInit+0x244>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051c6:	4b58      	ldr	r3, [pc, #352]	@ (8005328 <HAL_UART_MspInit+0x244>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80051cc:	4b56      	ldr	r3, [pc, #344]	@ (8005328 <HAL_UART_MspInit+0x244>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80051d2:	4b55      	ldr	r3, [pc, #340]	@ (8005328 <HAL_UART_MspInit+0x244>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80051d8:	4b53      	ldr	r3, [pc, #332]	@ (8005328 <HAL_UART_MspInit+0x244>)
 80051da:	2200      	movs	r2, #0
 80051dc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80051de:	4852      	ldr	r0, [pc, #328]	@ (8005328 <HAL_UART_MspInit+0x244>)
 80051e0:	f000 fc08 	bl	80059f4 <HAL_DMA_Init>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 80051ea:	f7fe ffa3 	bl	8004134 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a4d      	ldr	r2, [pc, #308]	@ (8005328 <HAL_UART_MspInit+0x244>)
 80051f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80051f6:	4a4c      	ldr	r2, [pc, #304]	@ (8005328 <HAL_UART_MspInit+0x244>)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80051fc:	2200      	movs	r2, #0
 80051fe:	2100      	movs	r1, #0
 8005200:	2034      	movs	r0, #52	@ 0x34
 8005202:	f000 fb4a 	bl	800589a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005206:	2034      	movs	r0, #52	@ 0x34
 8005208:	f000 fb61 	bl	80058ce <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800520c:	e164      	b.n	80054d8 <HAL_UART_MspInit+0x3f4>
  else if(uartHandle->Instance==USART1)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a47      	ldr	r2, [pc, #284]	@ (8005330 <HAL_UART_MspInit+0x24c>)
 8005214:	4293      	cmp	r3, r2
 8005216:	f040 8091 	bne.w	800533c <HAL_UART_MspInit+0x258>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800521a:	f04f 0201 	mov.w	r2, #1
 800521e:	f04f 0300 	mov.w	r3, #0
 8005222:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8005226:	2300      	movs	r3, #0
 8005228:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800522c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005230:	4618      	mov	r0, r3
 8005232:	f005 f923 	bl	800a47c <HAL_RCCEx_PeriphCLKConfig>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 800523c:	f7fe ff7a 	bl	8004134 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005240:	4b37      	ldr	r3, [pc, #220]	@ (8005320 <HAL_UART_MspInit+0x23c>)
 8005242:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8005246:	4a36      	ldr	r2, [pc, #216]	@ (8005320 <HAL_UART_MspInit+0x23c>)
 8005248:	f043 0310 	orr.w	r3, r3, #16
 800524c:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8005250:	4b33      	ldr	r3, [pc, #204]	@ (8005320 <HAL_UART_MspInit+0x23c>)
 8005252:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8005256:	f003 0310 	and.w	r3, r3, #16
 800525a:	61fb      	str	r3, [r7, #28]
 800525c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800525e:	4b30      	ldr	r3, [pc, #192]	@ (8005320 <HAL_UART_MspInit+0x23c>)
 8005260:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005264:	4a2e      	ldr	r2, [pc, #184]	@ (8005320 <HAL_UART_MspInit+0x23c>)
 8005266:	f043 0301 	orr.w	r3, r3, #1
 800526a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800526e:	4b2c      	ldr	r3, [pc, #176]	@ (8005320 <HAL_UART_MspInit+0x23c>)
 8005270:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	61bb      	str	r3, [r7, #24]
 800527a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|SBUS_RX_Pin;
 800527c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8005280:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005284:	2302      	movs	r3, #2
 8005286:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800528a:	2300      	movs	r3, #0
 800528c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005290:	2300      	movs	r3, #0
 8005292:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005296:	2307      	movs	r3, #7
 8005298:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800529c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80052a0:	4619      	mov	r1, r3
 80052a2:	4820      	ldr	r0, [pc, #128]	@ (8005324 <HAL_UART_MspInit+0x240>)
 80052a4:	f003 fdf4 	bl	8008e90 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 80052a8:	4b22      	ldr	r3, [pc, #136]	@ (8005334 <HAL_UART_MspInit+0x250>)
 80052aa:	4a23      	ldr	r2, [pc, #140]	@ (8005338 <HAL_UART_MspInit+0x254>)
 80052ac:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80052ae:	4b21      	ldr	r3, [pc, #132]	@ (8005334 <HAL_UART_MspInit+0x250>)
 80052b0:	2229      	movs	r2, #41	@ 0x29
 80052b2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80052b4:	4b1f      	ldr	r3, [pc, #124]	@ (8005334 <HAL_UART_MspInit+0x250>)
 80052b6:	2200      	movs	r2, #0
 80052b8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80052ba:	4b1e      	ldr	r3, [pc, #120]	@ (8005334 <HAL_UART_MspInit+0x250>)
 80052bc:	2200      	movs	r2, #0
 80052be:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80052c0:	4b1c      	ldr	r3, [pc, #112]	@ (8005334 <HAL_UART_MspInit+0x250>)
 80052c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80052c6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80052c8:	4b1a      	ldr	r3, [pc, #104]	@ (8005334 <HAL_UART_MspInit+0x250>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80052ce:	4b19      	ldr	r3, [pc, #100]	@ (8005334 <HAL_UART_MspInit+0x250>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80052d4:	4b17      	ldr	r3, [pc, #92]	@ (8005334 <HAL_UART_MspInit+0x250>)
 80052d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80052da:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80052dc:	4b15      	ldr	r3, [pc, #84]	@ (8005334 <HAL_UART_MspInit+0x250>)
 80052de:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80052e2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80052e4:	4b13      	ldr	r3, [pc, #76]	@ (8005334 <HAL_UART_MspInit+0x250>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80052ea:	4812      	ldr	r0, [pc, #72]	@ (8005334 <HAL_UART_MspInit+0x250>)
 80052ec:	f000 fb82 	bl	80059f4 <HAL_DMA_Init>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <HAL_UART_MspInit+0x216>
      Error_Handler();
 80052f6:	f7fe ff1d 	bl	8004134 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a0d      	ldr	r2, [pc, #52]	@ (8005334 <HAL_UART_MspInit+0x250>)
 80052fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005302:	4a0c      	ldr	r2, [pc, #48]	@ (8005334 <HAL_UART_MspInit+0x250>)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005308:	2200      	movs	r2, #0
 800530a:	2100      	movs	r1, #0
 800530c:	2025      	movs	r0, #37	@ 0x25
 800530e:	f000 fac4 	bl	800589a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005312:	2025      	movs	r0, #37	@ 0x25
 8005314:	f000 fadb 	bl	80058ce <HAL_NVIC_EnableIRQ>
}
 8005318:	e0de      	b.n	80054d8 <HAL_UART_MspInit+0x3f4>
 800531a:	bf00      	nop
 800531c:	40004c00 	.word	0x40004c00
 8005320:	58024400 	.word	0x58024400
 8005324:	58020000 	.word	0x58020000
 8005328:	24005324 	.word	0x24005324
 800532c:	40020040 	.word	0x40020040
 8005330:	40011000 	.word	0x40011000
 8005334:	2400539c 	.word	0x2400539c
 8005338:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART3)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a68      	ldr	r2, [pc, #416]	@ (80054e4 <HAL_UART_MspInit+0x400>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d17d      	bne.n	8005442 <HAL_UART_MspInit+0x35e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005346:	f04f 0202 	mov.w	r2, #2
 800534a:	f04f 0300 	mov.w	r3, #0
 800534e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005352:	2300      	movs	r3, #0
 8005354:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005358:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800535c:	4618      	mov	r0, r3
 800535e:	f005 f88d 	bl	800a47c <HAL_RCCEx_PeriphCLKConfig>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <HAL_UART_MspInit+0x288>
      Error_Handler();
 8005368:	f7fe fee4 	bl	8004134 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800536c:	4b5e      	ldr	r3, [pc, #376]	@ (80054e8 <HAL_UART_MspInit+0x404>)
 800536e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8005372:	4a5d      	ldr	r2, [pc, #372]	@ (80054e8 <HAL_UART_MspInit+0x404>)
 8005374:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005378:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800537c:	4b5a      	ldr	r3, [pc, #360]	@ (80054e8 <HAL_UART_MspInit+0x404>)
 800537e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8005382:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005386:	617b      	str	r3, [r7, #20]
 8005388:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800538a:	4b57      	ldr	r3, [pc, #348]	@ (80054e8 <HAL_UART_MspInit+0x404>)
 800538c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005390:	4a55      	ldr	r2, [pc, #340]	@ (80054e8 <HAL_UART_MspInit+0x404>)
 8005392:	f043 0304 	orr.w	r3, r3, #4
 8005396:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800539a:	4b53      	ldr	r3, [pc, #332]	@ (80054e8 <HAL_UART_MspInit+0x404>)
 800539c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80053a0:	f003 0304 	and.w	r3, r3, #4
 80053a4:	613b      	str	r3, [r7, #16]
 80053a6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80053a8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80053ac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053b0:	2302      	movs	r3, #2
 80053b2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053b6:	2300      	movs	r3, #0
 80053b8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053bc:	2300      	movs	r3, #0
 80053be:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80053c2:	2307      	movs	r3, #7
 80053c4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053c8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80053cc:	4619      	mov	r1, r3
 80053ce:	4847      	ldr	r0, [pc, #284]	@ (80054ec <HAL_UART_MspInit+0x408>)
 80053d0:	f003 fd5e 	bl	8008e90 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80053d4:	4b46      	ldr	r3, [pc, #280]	@ (80054f0 <HAL_UART_MspInit+0x40c>)
 80053d6:	4a47      	ldr	r2, [pc, #284]	@ (80054f4 <HAL_UART_MspInit+0x410>)
 80053d8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80053da:	4b45      	ldr	r3, [pc, #276]	@ (80054f0 <HAL_UART_MspInit+0x40c>)
 80053dc:	222d      	movs	r2, #45	@ 0x2d
 80053de:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80053e0:	4b43      	ldr	r3, [pc, #268]	@ (80054f0 <HAL_UART_MspInit+0x40c>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053e6:	4b42      	ldr	r3, [pc, #264]	@ (80054f0 <HAL_UART_MspInit+0x40c>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80053ec:	4b40      	ldr	r3, [pc, #256]	@ (80054f0 <HAL_UART_MspInit+0x40c>)
 80053ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80053f2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80053f4:	4b3e      	ldr	r3, [pc, #248]	@ (80054f0 <HAL_UART_MspInit+0x40c>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80053fa:	4b3d      	ldr	r3, [pc, #244]	@ (80054f0 <HAL_UART_MspInit+0x40c>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005400:	4b3b      	ldr	r3, [pc, #236]	@ (80054f0 <HAL_UART_MspInit+0x40c>)
 8005402:	2200      	movs	r2, #0
 8005404:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005406:	4b3a      	ldr	r3, [pc, #232]	@ (80054f0 <HAL_UART_MspInit+0x40c>)
 8005408:	2200      	movs	r2, #0
 800540a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800540c:	4b38      	ldr	r3, [pc, #224]	@ (80054f0 <HAL_UART_MspInit+0x40c>)
 800540e:	2200      	movs	r2, #0
 8005410:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005412:	4837      	ldr	r0, [pc, #220]	@ (80054f0 <HAL_UART_MspInit+0x40c>)
 8005414:	f000 faee 	bl	80059f4 <HAL_DMA_Init>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <HAL_UART_MspInit+0x33e>
      Error_Handler();
 800541e:	f7fe fe89 	bl	8004134 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a32      	ldr	r2, [pc, #200]	@ (80054f0 <HAL_UART_MspInit+0x40c>)
 8005426:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800542a:	4a31      	ldr	r2, [pc, #196]	@ (80054f0 <HAL_UART_MspInit+0x40c>)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005430:	2200      	movs	r2, #0
 8005432:	2100      	movs	r1, #0
 8005434:	2027      	movs	r0, #39	@ 0x27
 8005436:	f000 fa30 	bl	800589a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800543a:	2027      	movs	r0, #39	@ 0x27
 800543c:	f000 fa47 	bl	80058ce <HAL_NVIC_EnableIRQ>
}
 8005440:	e04a      	b.n	80054d8 <HAL_UART_MspInit+0x3f4>
  else if(uartHandle->Instance==USART6)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a2c      	ldr	r2, [pc, #176]	@ (80054f8 <HAL_UART_MspInit+0x414>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d145      	bne.n	80054d8 <HAL_UART_MspInit+0x3f4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800544c:	f04f 0201 	mov.w	r2, #1
 8005450:	f04f 0300 	mov.w	r3, #0
 8005454:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8005458:	2300      	movs	r3, #0
 800545a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800545e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005462:	4618      	mov	r0, r3
 8005464:	f005 f80a 	bl	800a47c <HAL_RCCEx_PeriphCLKConfig>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <HAL_UART_MspInit+0x38e>
      Error_Handler();
 800546e:	f7fe fe61 	bl	8004134 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005472:	4b1d      	ldr	r3, [pc, #116]	@ (80054e8 <HAL_UART_MspInit+0x404>)
 8005474:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8005478:	4a1b      	ldr	r2, [pc, #108]	@ (80054e8 <HAL_UART_MspInit+0x404>)
 800547a:	f043 0320 	orr.w	r3, r3, #32
 800547e:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8005482:	4b19      	ldr	r3, [pc, #100]	@ (80054e8 <HAL_UART_MspInit+0x404>)
 8005484:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8005488:	f003 0320 	and.w	r3, r3, #32
 800548c:	60fb      	str	r3, [r7, #12]
 800548e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005490:	4b15      	ldr	r3, [pc, #84]	@ (80054e8 <HAL_UART_MspInit+0x404>)
 8005492:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005496:	4a14      	ldr	r2, [pc, #80]	@ (80054e8 <HAL_UART_MspInit+0x404>)
 8005498:	f043 0304 	orr.w	r3, r3, #4
 800549c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80054a0:	4b11      	ldr	r3, [pc, #68]	@ (80054e8 <HAL_UART_MspInit+0x404>)
 80054a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80054a6:	f003 0304 	and.w	r3, r3, #4
 80054aa:	60bb      	str	r3, [r7, #8]
 80054ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80054ae:	23c0      	movs	r3, #192	@ 0xc0
 80054b0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054b4:	2302      	movs	r3, #2
 80054b6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ba:	2300      	movs	r3, #0
 80054bc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054c0:	2300      	movs	r3, #0
 80054c2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80054c6:	2307      	movs	r3, #7
 80054c8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054cc:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80054d0:	4619      	mov	r1, r3
 80054d2:	4806      	ldr	r0, [pc, #24]	@ (80054ec <HAL_UART_MspInit+0x408>)
 80054d4:	f003 fcdc 	bl	8008e90 <HAL_GPIO_Init>
}
 80054d8:	bf00      	nop
 80054da:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	40004800 	.word	0x40004800
 80054e8:	58024400 	.word	0x58024400
 80054ec:	58020800 	.word	0x58020800
 80054f0:	24005414 	.word	0x24005414
 80054f4:	40020028 	.word	0x40020028
 80054f8:	40011400 	.word	0x40011400

080054fc <Reset_UART>:
  /* USER CODE END USART6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void Reset_UART(UART_HandleTypeDef *huart) {
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]

      // Clear any pending error flags
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF | UART_CLEAR_OREF);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	220f      	movs	r2, #15
 800550a:	621a      	str	r2, [r3, #32]

    // Abort ongoing UART transfer
    if (HAL_UART_Abort_IT(huart) != HAL_OK) {
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f009 fa57 	bl	800e9c0 <HAL_UART_Abort_IT>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <Reset_UART+0x20>
        // Abort Error
        Error_Handler();
 8005518:	f7fe fe0c 	bl	8004134 <Error_Handler>
    }
     if(huart == &huart3){
    	 MX_USART3_UART_Init();
     }
*/
}
 800551c:	bf00      	nop
 800551e:	3708      	adds	r7, #8
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005524:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800555c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005528:	f7ff f8e8 	bl	80046fc <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800552c:	480c      	ldr	r0, [pc, #48]	@ (8005560 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800552e:	490d      	ldr	r1, [pc, #52]	@ (8005564 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005530:	4a0d      	ldr	r2, [pc, #52]	@ (8005568 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005534:	e002      	b.n	800553c <LoopCopyDataInit>

08005536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800553a:	3304      	adds	r3, #4

0800553c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 800553c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800553e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005540:	d3f9      	bcc.n	8005536 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005542:	4a0a      	ldr	r2, [pc, #40]	@ (800556c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005544:	4c0a      	ldr	r4, [pc, #40]	@ (8005570 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005548:	e001      	b.n	800554e <LoopFillZerobss>

0800554a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800554a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800554c:	3204      	adds	r2, #4

0800554e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800554e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005550:	d3fb      	bcc.n	800554a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005552:	f011 fb8b 	bl	8016c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005556:	f7fe fca1 	bl	8003e9c <main>
  bx  lr
 800555a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800555c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8005560:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005564:	240002b0 	.word	0x240002b0
  ldr r2, =_sidata
 8005568:	08019d90 	.word	0x08019d90
  ldr r2, =_sbss
 800556c:	240002b0 	.word	0x240002b0
  ldr r4, =_ebss
 8005570:	24005820 	.word	0x24005820

08005574 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005574:	e7fe      	b.n	8005574 <ADC_IRQHandler>
	...

08005578 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800557e:	2003      	movs	r0, #3
 8005580:	f000 f980 	bl	8005884 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005584:	f004 fda4 	bl	800a0d0 <HAL_RCC_GetSysClockFreq>
 8005588:	4602      	mov	r2, r0
 800558a:	4b15      	ldr	r3, [pc, #84]	@ (80055e0 <HAL_Init+0x68>)
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	0a1b      	lsrs	r3, r3, #8
 8005590:	f003 030f 	and.w	r3, r3, #15
 8005594:	4913      	ldr	r1, [pc, #76]	@ (80055e4 <HAL_Init+0x6c>)
 8005596:	5ccb      	ldrb	r3, [r1, r3]
 8005598:	f003 031f 	and.w	r3, r3, #31
 800559c:	fa22 f303 	lsr.w	r3, r2, r3
 80055a0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80055a2:	4b0f      	ldr	r3, [pc, #60]	@ (80055e0 <HAL_Init+0x68>)
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	f003 030f 	and.w	r3, r3, #15
 80055aa:	4a0e      	ldr	r2, [pc, #56]	@ (80055e4 <HAL_Init+0x6c>)
 80055ac:	5cd3      	ldrb	r3, [r2, r3]
 80055ae:	f003 031f 	and.w	r3, r3, #31
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	fa22 f303 	lsr.w	r3, r2, r3
 80055b8:	4a0b      	ldr	r2, [pc, #44]	@ (80055e8 <HAL_Init+0x70>)
 80055ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80055bc:	4a0b      	ldr	r2, [pc, #44]	@ (80055ec <HAL_Init+0x74>)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80055c2:	200f      	movs	r0, #15
 80055c4:	f000 f814 	bl	80055f0 <HAL_InitTick>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e002      	b.n	80055d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80055d2:	f7fe ff19 	bl	8004408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3708      	adds	r7, #8
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	58024400 	.word	0x58024400
 80055e4:	08018cb4 	.word	0x08018cb4
 80055e8:	240000c4 	.word	0x240000c4
 80055ec:	240000c0 	.word	0x240000c0

080055f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80055f8:	4b15      	ldr	r3, [pc, #84]	@ (8005650 <HAL_InitTick+0x60>)
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d101      	bne.n	8005604 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e021      	b.n	8005648 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005604:	4b13      	ldr	r3, [pc, #76]	@ (8005654 <HAL_InitTick+0x64>)
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	4b11      	ldr	r3, [pc, #68]	@ (8005650 <HAL_InitTick+0x60>)
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	4619      	mov	r1, r3
 800560e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005612:	fbb3 f3f1 	udiv	r3, r3, r1
 8005616:	fbb2 f3f3 	udiv	r3, r2, r3
 800561a:	4618      	mov	r0, r3
 800561c:	f000 f965 	bl	80058ea <HAL_SYSTICK_Config>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d001      	beq.n	800562a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e00e      	b.n	8005648 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b0f      	cmp	r3, #15
 800562e:	d80a      	bhi.n	8005646 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005630:	2200      	movs	r2, #0
 8005632:	6879      	ldr	r1, [r7, #4]
 8005634:	f04f 30ff 	mov.w	r0, #4294967295
 8005638:	f000 f92f 	bl	800589a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800563c:	4a06      	ldr	r2, [pc, #24]	@ (8005658 <HAL_InitTick+0x68>)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005642:	2300      	movs	r3, #0
 8005644:	e000      	b.n	8005648 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
}
 8005648:	4618      	mov	r0, r3
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	240000cc 	.word	0x240000cc
 8005654:	240000c0 	.word	0x240000c0
 8005658:	240000c8 	.word	0x240000c8

0800565c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800565c:	b480      	push	{r7}
 800565e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005660:	4b06      	ldr	r3, [pc, #24]	@ (800567c <HAL_IncTick+0x20>)
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	461a      	mov	r2, r3
 8005666:	4b06      	ldr	r3, [pc, #24]	@ (8005680 <HAL_IncTick+0x24>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4413      	add	r3, r2
 800566c:	4a04      	ldr	r2, [pc, #16]	@ (8005680 <HAL_IncTick+0x24>)
 800566e:	6013      	str	r3, [r2, #0]
}
 8005670:	bf00      	nop
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	240000cc 	.word	0x240000cc
 8005680:	2400548c 	.word	0x2400548c

08005684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005684:	b480      	push	{r7}
 8005686:	af00      	add	r7, sp, #0
  return uwTick;
 8005688:	4b03      	ldr	r3, [pc, #12]	@ (8005698 <HAL_GetTick+0x14>)
 800568a:	681b      	ldr	r3, [r3, #0]
}
 800568c:	4618      	mov	r0, r3
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	2400548c 	.word	0x2400548c

0800569c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80056a4:	f7ff ffee 	bl	8005684 <HAL_GetTick>
 80056a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b4:	d005      	beq.n	80056c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80056b6:	4b0a      	ldr	r3, [pc, #40]	@ (80056e0 <HAL_Delay+0x44>)
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	461a      	mov	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4413      	add	r3, r2
 80056c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80056c2:	bf00      	nop
 80056c4:	f7ff ffde 	bl	8005684 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d8f7      	bhi.n	80056c4 <HAL_Delay+0x28>
  {
  }
}
 80056d4:	bf00      	nop
 80056d6:	bf00      	nop
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	240000cc 	.word	0x240000cc

080056e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f003 0307 	and.w	r3, r3, #7
 80056f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005724 <__NVIC_SetPriorityGrouping+0x40>)
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005700:	4013      	ands	r3, r2
 8005702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800570c:	4b06      	ldr	r3, [pc, #24]	@ (8005728 <__NVIC_SetPriorityGrouping+0x44>)
 800570e:	4313      	orrs	r3, r2
 8005710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005712:	4a04      	ldr	r2, [pc, #16]	@ (8005724 <__NVIC_SetPriorityGrouping+0x40>)
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	60d3      	str	r3, [r2, #12]
}
 8005718:	bf00      	nop
 800571a:	3714      	adds	r7, #20
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	e000ed00 	.word	0xe000ed00
 8005728:	05fa0000 	.word	0x05fa0000

0800572c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800572c:	b480      	push	{r7}
 800572e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005730:	4b04      	ldr	r3, [pc, #16]	@ (8005744 <__NVIC_GetPriorityGrouping+0x18>)
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	0a1b      	lsrs	r3, r3, #8
 8005736:	f003 0307 	and.w	r3, r3, #7
}
 800573a:	4618      	mov	r0, r3
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr
 8005744:	e000ed00 	.word	0xe000ed00

08005748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	4603      	mov	r3, r0
 8005750:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005752:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005756:	2b00      	cmp	r3, #0
 8005758:	db0b      	blt.n	8005772 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800575a:	88fb      	ldrh	r3, [r7, #6]
 800575c:	f003 021f 	and.w	r2, r3, #31
 8005760:	4907      	ldr	r1, [pc, #28]	@ (8005780 <__NVIC_EnableIRQ+0x38>)
 8005762:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005766:	095b      	lsrs	r3, r3, #5
 8005768:	2001      	movs	r0, #1
 800576a:	fa00 f202 	lsl.w	r2, r0, r2
 800576e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005772:	bf00      	nop
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	e000e100 	.word	0xe000e100

08005784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	4603      	mov	r3, r0
 800578c:	6039      	str	r1, [r7, #0]
 800578e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005790:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005794:	2b00      	cmp	r3, #0
 8005796:	db0a      	blt.n	80057ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	b2da      	uxtb	r2, r3
 800579c:	490c      	ldr	r1, [pc, #48]	@ (80057d0 <__NVIC_SetPriority+0x4c>)
 800579e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057a2:	0112      	lsls	r2, r2, #4
 80057a4:	b2d2      	uxtb	r2, r2
 80057a6:	440b      	add	r3, r1
 80057a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80057ac:	e00a      	b.n	80057c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	b2da      	uxtb	r2, r3
 80057b2:	4908      	ldr	r1, [pc, #32]	@ (80057d4 <__NVIC_SetPriority+0x50>)
 80057b4:	88fb      	ldrh	r3, [r7, #6]
 80057b6:	f003 030f 	and.w	r3, r3, #15
 80057ba:	3b04      	subs	r3, #4
 80057bc:	0112      	lsls	r2, r2, #4
 80057be:	b2d2      	uxtb	r2, r2
 80057c0:	440b      	add	r3, r1
 80057c2:	761a      	strb	r2, [r3, #24]
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr
 80057d0:	e000e100 	.word	0xe000e100
 80057d4:	e000ed00 	.word	0xe000ed00

080057d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057d8:	b480      	push	{r7}
 80057da:	b089      	sub	sp, #36	@ 0x24
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f003 0307 	and.w	r3, r3, #7
 80057ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	f1c3 0307 	rsb	r3, r3, #7
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	bf28      	it	cs
 80057f6:	2304      	movcs	r3, #4
 80057f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	3304      	adds	r3, #4
 80057fe:	2b06      	cmp	r3, #6
 8005800:	d902      	bls.n	8005808 <NVIC_EncodePriority+0x30>
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	3b03      	subs	r3, #3
 8005806:	e000      	b.n	800580a <NVIC_EncodePriority+0x32>
 8005808:	2300      	movs	r3, #0
 800580a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800580c:	f04f 32ff 	mov.w	r2, #4294967295
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	fa02 f303 	lsl.w	r3, r2, r3
 8005816:	43da      	mvns	r2, r3
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	401a      	ands	r2, r3
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005820:	f04f 31ff 	mov.w	r1, #4294967295
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	fa01 f303 	lsl.w	r3, r1, r3
 800582a:	43d9      	mvns	r1, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005830:	4313      	orrs	r3, r2
         );
}
 8005832:	4618      	mov	r0, r3
 8005834:	3724      	adds	r7, #36	@ 0x24
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
	...

08005840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	3b01      	subs	r3, #1
 800584c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005850:	d301      	bcc.n	8005856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005852:	2301      	movs	r3, #1
 8005854:	e00f      	b.n	8005876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005856:	4a0a      	ldr	r2, [pc, #40]	@ (8005880 <SysTick_Config+0x40>)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	3b01      	subs	r3, #1
 800585c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800585e:	210f      	movs	r1, #15
 8005860:	f04f 30ff 	mov.w	r0, #4294967295
 8005864:	f7ff ff8e 	bl	8005784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005868:	4b05      	ldr	r3, [pc, #20]	@ (8005880 <SysTick_Config+0x40>)
 800586a:	2200      	movs	r2, #0
 800586c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800586e:	4b04      	ldr	r3, [pc, #16]	@ (8005880 <SysTick_Config+0x40>)
 8005870:	2207      	movs	r2, #7
 8005872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	e000e010 	.word	0xe000e010

08005884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f7ff ff29 	bl	80056e4 <__NVIC_SetPriorityGrouping>
}
 8005892:	bf00      	nop
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b086      	sub	sp, #24
 800589e:	af00      	add	r7, sp, #0
 80058a0:	4603      	mov	r3, r0
 80058a2:	60b9      	str	r1, [r7, #8]
 80058a4:	607a      	str	r2, [r7, #4]
 80058a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80058a8:	f7ff ff40 	bl	800572c <__NVIC_GetPriorityGrouping>
 80058ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	68b9      	ldr	r1, [r7, #8]
 80058b2:	6978      	ldr	r0, [r7, #20]
 80058b4:	f7ff ff90 	bl	80057d8 <NVIC_EncodePriority>
 80058b8:	4602      	mov	r2, r0
 80058ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80058be:	4611      	mov	r1, r2
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7ff ff5f 	bl	8005784 <__NVIC_SetPriority>
}
 80058c6:	bf00      	nop
 80058c8:	3718      	adds	r7, #24
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b082      	sub	sp, #8
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	4603      	mov	r3, r0
 80058d6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80058d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058dc:	4618      	mov	r0, r3
 80058de:	f7ff ff33 	bl	8005748 <__NVIC_EnableIRQ>
}
 80058e2:	bf00      	nop
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b082      	sub	sp, #8
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7ff ffa4 	bl	8005840 <SysTick_Config>
 80058f8:	4603      	mov	r3, r0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3708      	adds	r7, #8
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
	...

08005904 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005904:	b480      	push	{r7}
 8005906:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8005908:	f3bf 8f5f 	dmb	sy
}
 800590c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800590e:	4b07      	ldr	r3, [pc, #28]	@ (800592c <HAL_MPU_Disable+0x28>)
 8005910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005912:	4a06      	ldr	r2, [pc, #24]	@ (800592c <HAL_MPU_Disable+0x28>)
 8005914:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005918:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800591a:	4b05      	ldr	r3, [pc, #20]	@ (8005930 <HAL_MPU_Disable+0x2c>)
 800591c:	2200      	movs	r2, #0
 800591e:	605a      	str	r2, [r3, #4]
}
 8005920:	bf00      	nop
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	e000ed00 	.word	0xe000ed00
 8005930:	e000ed90 	.word	0xe000ed90

08005934 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800593c:	4a0b      	ldr	r2, [pc, #44]	@ (800596c <HAL_MPU_Enable+0x38>)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f043 0301 	orr.w	r3, r3, #1
 8005944:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005946:	4b0a      	ldr	r3, [pc, #40]	@ (8005970 <HAL_MPU_Enable+0x3c>)
 8005948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594a:	4a09      	ldr	r2, [pc, #36]	@ (8005970 <HAL_MPU_Enable+0x3c>)
 800594c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005950:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005952:	f3bf 8f4f 	dsb	sy
}
 8005956:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005958:	f3bf 8f6f 	isb	sy
}
 800595c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800595e:	bf00      	nop
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	e000ed90 	.word	0xe000ed90
 8005970:	e000ed00 	.word	0xe000ed00

08005974 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	785a      	ldrb	r2, [r3, #1]
 8005980:	4b1b      	ldr	r3, [pc, #108]	@ (80059f0 <HAL_MPU_ConfigRegion+0x7c>)
 8005982:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8005984:	4b1a      	ldr	r3, [pc, #104]	@ (80059f0 <HAL_MPU_ConfigRegion+0x7c>)
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	4a19      	ldr	r2, [pc, #100]	@ (80059f0 <HAL_MPU_ConfigRegion+0x7c>)
 800598a:	f023 0301 	bic.w	r3, r3, #1
 800598e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8005990:	4a17      	ldr	r2, [pc, #92]	@ (80059f0 <HAL_MPU_ConfigRegion+0x7c>)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	7b1b      	ldrb	r3, [r3, #12]
 800599c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	7adb      	ldrb	r3, [r3, #11]
 80059a2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80059a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	7a9b      	ldrb	r3, [r3, #10]
 80059aa:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80059ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	7b5b      	ldrb	r3, [r3, #13]
 80059b2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80059b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	7b9b      	ldrb	r3, [r3, #14]
 80059ba:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80059bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	7bdb      	ldrb	r3, [r3, #15]
 80059c2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80059c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	7a5b      	ldrb	r3, [r3, #9]
 80059ca:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80059cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	7a1b      	ldrb	r3, [r3, #8]
 80059d2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80059d4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	7812      	ldrb	r2, [r2, #0]
 80059da:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80059dc:	4a04      	ldr	r2, [pc, #16]	@ (80059f0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80059de:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80059e0:	6113      	str	r3, [r2, #16]
}
 80059e2:	bf00      	nop
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	e000ed90 	.word	0xe000ed90

080059f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80059fc:	f7ff fe42 	bl	8005684 <HAL_GetTick>
 8005a00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d101      	bne.n	8005a0c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e37d      	b.n	8006108 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a66      	ldr	r2, [pc, #408]	@ (8005bac <HAL_DMA_Init+0x1b8>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d04a      	beq.n	8005aac <HAL_DMA_Init+0xb8>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a65      	ldr	r2, [pc, #404]	@ (8005bb0 <HAL_DMA_Init+0x1bc>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d045      	beq.n	8005aac <HAL_DMA_Init+0xb8>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a63      	ldr	r2, [pc, #396]	@ (8005bb4 <HAL_DMA_Init+0x1c0>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d040      	beq.n	8005aac <HAL_DMA_Init+0xb8>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a62      	ldr	r2, [pc, #392]	@ (8005bb8 <HAL_DMA_Init+0x1c4>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d03b      	beq.n	8005aac <HAL_DMA_Init+0xb8>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a60      	ldr	r2, [pc, #384]	@ (8005bbc <HAL_DMA_Init+0x1c8>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d036      	beq.n	8005aac <HAL_DMA_Init+0xb8>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a5f      	ldr	r2, [pc, #380]	@ (8005bc0 <HAL_DMA_Init+0x1cc>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d031      	beq.n	8005aac <HAL_DMA_Init+0xb8>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a5d      	ldr	r2, [pc, #372]	@ (8005bc4 <HAL_DMA_Init+0x1d0>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d02c      	beq.n	8005aac <HAL_DMA_Init+0xb8>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a5c      	ldr	r2, [pc, #368]	@ (8005bc8 <HAL_DMA_Init+0x1d4>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d027      	beq.n	8005aac <HAL_DMA_Init+0xb8>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a5a      	ldr	r2, [pc, #360]	@ (8005bcc <HAL_DMA_Init+0x1d8>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d022      	beq.n	8005aac <HAL_DMA_Init+0xb8>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a59      	ldr	r2, [pc, #356]	@ (8005bd0 <HAL_DMA_Init+0x1dc>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d01d      	beq.n	8005aac <HAL_DMA_Init+0xb8>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a57      	ldr	r2, [pc, #348]	@ (8005bd4 <HAL_DMA_Init+0x1e0>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d018      	beq.n	8005aac <HAL_DMA_Init+0xb8>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a56      	ldr	r2, [pc, #344]	@ (8005bd8 <HAL_DMA_Init+0x1e4>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d013      	beq.n	8005aac <HAL_DMA_Init+0xb8>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a54      	ldr	r2, [pc, #336]	@ (8005bdc <HAL_DMA_Init+0x1e8>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d00e      	beq.n	8005aac <HAL_DMA_Init+0xb8>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a53      	ldr	r2, [pc, #332]	@ (8005be0 <HAL_DMA_Init+0x1ec>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d009      	beq.n	8005aac <HAL_DMA_Init+0xb8>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a51      	ldr	r2, [pc, #324]	@ (8005be4 <HAL_DMA_Init+0x1f0>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d004      	beq.n	8005aac <HAL_DMA_Init+0xb8>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a50      	ldr	r2, [pc, #320]	@ (8005be8 <HAL_DMA_Init+0x1f4>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d101      	bne.n	8005ab0 <HAL_DMA_Init+0xbc>
 8005aac:	2301      	movs	r3, #1
 8005aae:	e000      	b.n	8005ab2 <HAL_DMA_Init+0xbe>
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f000 813c 	beq.w	8005d30 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2202      	movs	r2, #2
 8005abc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a37      	ldr	r2, [pc, #220]	@ (8005bac <HAL_DMA_Init+0x1b8>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d04a      	beq.n	8005b68 <HAL_DMA_Init+0x174>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a36      	ldr	r2, [pc, #216]	@ (8005bb0 <HAL_DMA_Init+0x1bc>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d045      	beq.n	8005b68 <HAL_DMA_Init+0x174>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a34      	ldr	r2, [pc, #208]	@ (8005bb4 <HAL_DMA_Init+0x1c0>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d040      	beq.n	8005b68 <HAL_DMA_Init+0x174>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a33      	ldr	r2, [pc, #204]	@ (8005bb8 <HAL_DMA_Init+0x1c4>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d03b      	beq.n	8005b68 <HAL_DMA_Init+0x174>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a31      	ldr	r2, [pc, #196]	@ (8005bbc <HAL_DMA_Init+0x1c8>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d036      	beq.n	8005b68 <HAL_DMA_Init+0x174>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a30      	ldr	r2, [pc, #192]	@ (8005bc0 <HAL_DMA_Init+0x1cc>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d031      	beq.n	8005b68 <HAL_DMA_Init+0x174>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a2e      	ldr	r2, [pc, #184]	@ (8005bc4 <HAL_DMA_Init+0x1d0>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d02c      	beq.n	8005b68 <HAL_DMA_Init+0x174>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a2d      	ldr	r2, [pc, #180]	@ (8005bc8 <HAL_DMA_Init+0x1d4>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d027      	beq.n	8005b68 <HAL_DMA_Init+0x174>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a2b      	ldr	r2, [pc, #172]	@ (8005bcc <HAL_DMA_Init+0x1d8>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d022      	beq.n	8005b68 <HAL_DMA_Init+0x174>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a2a      	ldr	r2, [pc, #168]	@ (8005bd0 <HAL_DMA_Init+0x1dc>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d01d      	beq.n	8005b68 <HAL_DMA_Init+0x174>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a28      	ldr	r2, [pc, #160]	@ (8005bd4 <HAL_DMA_Init+0x1e0>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d018      	beq.n	8005b68 <HAL_DMA_Init+0x174>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a27      	ldr	r2, [pc, #156]	@ (8005bd8 <HAL_DMA_Init+0x1e4>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d013      	beq.n	8005b68 <HAL_DMA_Init+0x174>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a25      	ldr	r2, [pc, #148]	@ (8005bdc <HAL_DMA_Init+0x1e8>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d00e      	beq.n	8005b68 <HAL_DMA_Init+0x174>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a24      	ldr	r2, [pc, #144]	@ (8005be0 <HAL_DMA_Init+0x1ec>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d009      	beq.n	8005b68 <HAL_DMA_Init+0x174>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a22      	ldr	r2, [pc, #136]	@ (8005be4 <HAL_DMA_Init+0x1f0>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d004      	beq.n	8005b68 <HAL_DMA_Init+0x174>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a21      	ldr	r2, [pc, #132]	@ (8005be8 <HAL_DMA_Init+0x1f4>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d108      	bne.n	8005b7a <HAL_DMA_Init+0x186>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f022 0201 	bic.w	r2, r2, #1
 8005b76:	601a      	str	r2, [r3, #0]
 8005b78:	e007      	b.n	8005b8a <HAL_DMA_Init+0x196>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 0201 	bic.w	r2, r2, #1
 8005b88:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005b8a:	e02f      	b.n	8005bec <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b8c:	f7ff fd7a 	bl	8005684 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	2b05      	cmp	r3, #5
 8005b98:	d928      	bls.n	8005bec <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2220      	movs	r2, #32
 8005b9e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2203      	movs	r2, #3
 8005ba4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e2ad      	b.n	8006108 <HAL_DMA_Init+0x714>
 8005bac:	40020010 	.word	0x40020010
 8005bb0:	40020028 	.word	0x40020028
 8005bb4:	40020040 	.word	0x40020040
 8005bb8:	40020058 	.word	0x40020058
 8005bbc:	40020070 	.word	0x40020070
 8005bc0:	40020088 	.word	0x40020088
 8005bc4:	400200a0 	.word	0x400200a0
 8005bc8:	400200b8 	.word	0x400200b8
 8005bcc:	40020410 	.word	0x40020410
 8005bd0:	40020428 	.word	0x40020428
 8005bd4:	40020440 	.word	0x40020440
 8005bd8:	40020458 	.word	0x40020458
 8005bdc:	40020470 	.word	0x40020470
 8005be0:	40020488 	.word	0x40020488
 8005be4:	400204a0 	.word	0x400204a0
 8005be8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1c8      	bne.n	8005b8c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	4b73      	ldr	r3, [pc, #460]	@ (8005dd4 <HAL_DMA_Init+0x3e0>)
 8005c06:	4013      	ands	r3, r2
 8005c08:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005c12:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c1e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c2a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a1b      	ldr	r3, [r3, #32]
 8005c30:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3c:	2b04      	cmp	r3, #4
 8005c3e:	d107      	bne.n	8005c50 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	2b28      	cmp	r3, #40	@ 0x28
 8005c56:	d903      	bls.n	8005c60 <HAL_DMA_Init+0x26c>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c5e:	d91f      	bls.n	8005ca0 <HAL_DMA_Init+0x2ac>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c66:	d903      	bls.n	8005c70 <HAL_DMA_Init+0x27c>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	2b42      	cmp	r3, #66	@ 0x42
 8005c6e:	d917      	bls.n	8005ca0 <HAL_DMA_Init+0x2ac>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	2b46      	cmp	r3, #70	@ 0x46
 8005c76:	d903      	bls.n	8005c80 <HAL_DMA_Init+0x28c>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	2b48      	cmp	r3, #72	@ 0x48
 8005c7e:	d90f      	bls.n	8005ca0 <HAL_DMA_Init+0x2ac>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	2b4e      	cmp	r3, #78	@ 0x4e
 8005c86:	d903      	bls.n	8005c90 <HAL_DMA_Init+0x29c>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	2b52      	cmp	r3, #82	@ 0x52
 8005c8e:	d907      	bls.n	8005ca0 <HAL_DMA_Init+0x2ac>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	2b73      	cmp	r3, #115	@ 0x73
 8005c96:	d905      	bls.n	8005ca4 <HAL_DMA_Init+0x2b0>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	2b77      	cmp	r3, #119	@ 0x77
 8005c9e:	d801      	bhi.n	8005ca4 <HAL_DMA_Init+0x2b0>
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e000      	b.n	8005ca6 <HAL_DMA_Init+0x2b2>
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d003      	beq.n	8005cb2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005cb0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	f023 0307 	bic.w	r3, r3, #7
 8005cc8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd8:	2b04      	cmp	r3, #4
 8005cda:	d117      	bne.n	8005d0c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00e      	beq.n	8005d0c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f002 fbe0 	bl	80084b4 <DMA_CheckFifoParam>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d008      	beq.n	8005d0c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2240      	movs	r2, #64	@ 0x40
 8005cfe:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e1fd      	b.n	8006108 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f002 fb1b 	bl	8008350 <DMA_CalcBaseAndBitshift>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d22:	f003 031f 	and.w	r3, r3, #31
 8005d26:	223f      	movs	r2, #63	@ 0x3f
 8005d28:	409a      	lsls	r2, r3
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	609a      	str	r2, [r3, #8]
 8005d2e:	e0fd      	b.n	8005f2c <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a28      	ldr	r2, [pc, #160]	@ (8005dd8 <HAL_DMA_Init+0x3e4>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d04a      	beq.n	8005dd0 <HAL_DMA_Init+0x3dc>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a27      	ldr	r2, [pc, #156]	@ (8005ddc <HAL_DMA_Init+0x3e8>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d045      	beq.n	8005dd0 <HAL_DMA_Init+0x3dc>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a25      	ldr	r2, [pc, #148]	@ (8005de0 <HAL_DMA_Init+0x3ec>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d040      	beq.n	8005dd0 <HAL_DMA_Init+0x3dc>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a24      	ldr	r2, [pc, #144]	@ (8005de4 <HAL_DMA_Init+0x3f0>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d03b      	beq.n	8005dd0 <HAL_DMA_Init+0x3dc>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a22      	ldr	r2, [pc, #136]	@ (8005de8 <HAL_DMA_Init+0x3f4>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d036      	beq.n	8005dd0 <HAL_DMA_Init+0x3dc>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a21      	ldr	r2, [pc, #132]	@ (8005dec <HAL_DMA_Init+0x3f8>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d031      	beq.n	8005dd0 <HAL_DMA_Init+0x3dc>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a1f      	ldr	r2, [pc, #124]	@ (8005df0 <HAL_DMA_Init+0x3fc>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d02c      	beq.n	8005dd0 <HAL_DMA_Init+0x3dc>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a1e      	ldr	r2, [pc, #120]	@ (8005df4 <HAL_DMA_Init+0x400>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d027      	beq.n	8005dd0 <HAL_DMA_Init+0x3dc>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a1c      	ldr	r2, [pc, #112]	@ (8005df8 <HAL_DMA_Init+0x404>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d022      	beq.n	8005dd0 <HAL_DMA_Init+0x3dc>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a1b      	ldr	r2, [pc, #108]	@ (8005dfc <HAL_DMA_Init+0x408>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d01d      	beq.n	8005dd0 <HAL_DMA_Init+0x3dc>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a19      	ldr	r2, [pc, #100]	@ (8005e00 <HAL_DMA_Init+0x40c>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d018      	beq.n	8005dd0 <HAL_DMA_Init+0x3dc>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a18      	ldr	r2, [pc, #96]	@ (8005e04 <HAL_DMA_Init+0x410>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d013      	beq.n	8005dd0 <HAL_DMA_Init+0x3dc>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a16      	ldr	r2, [pc, #88]	@ (8005e08 <HAL_DMA_Init+0x414>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d00e      	beq.n	8005dd0 <HAL_DMA_Init+0x3dc>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a15      	ldr	r2, [pc, #84]	@ (8005e0c <HAL_DMA_Init+0x418>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d009      	beq.n	8005dd0 <HAL_DMA_Init+0x3dc>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a13      	ldr	r2, [pc, #76]	@ (8005e10 <HAL_DMA_Init+0x41c>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d004      	beq.n	8005dd0 <HAL_DMA_Init+0x3dc>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a12      	ldr	r2, [pc, #72]	@ (8005e14 <HAL_DMA_Init+0x420>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d123      	bne.n	8005e18 <HAL_DMA_Init+0x424>
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e022      	b.n	8005e1a <HAL_DMA_Init+0x426>
 8005dd4:	fe10803f 	.word	0xfe10803f
 8005dd8:	48022c08 	.word	0x48022c08
 8005ddc:	48022c1c 	.word	0x48022c1c
 8005de0:	48022c30 	.word	0x48022c30
 8005de4:	48022c44 	.word	0x48022c44
 8005de8:	48022c58 	.word	0x48022c58
 8005dec:	48022c6c 	.word	0x48022c6c
 8005df0:	48022c80 	.word	0x48022c80
 8005df4:	48022c94 	.word	0x48022c94
 8005df8:	58025408 	.word	0x58025408
 8005dfc:	5802541c 	.word	0x5802541c
 8005e00:	58025430 	.word	0x58025430
 8005e04:	58025444 	.word	0x58025444
 8005e08:	58025458 	.word	0x58025458
 8005e0c:	5802546c 	.word	0x5802546c
 8005e10:	58025480 	.word	0x58025480
 8005e14:	58025494 	.word	0x58025494
 8005e18:	2300      	movs	r3, #0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d07d      	beq.n	8005f1a <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a7f      	ldr	r2, [pc, #508]	@ (8006020 <HAL_DMA_Init+0x62c>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d021      	beq.n	8005e6c <HAL_DMA_Init+0x478>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a7d      	ldr	r2, [pc, #500]	@ (8006024 <HAL_DMA_Init+0x630>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d01c      	beq.n	8005e6c <HAL_DMA_Init+0x478>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a7c      	ldr	r2, [pc, #496]	@ (8006028 <HAL_DMA_Init+0x634>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d017      	beq.n	8005e6c <HAL_DMA_Init+0x478>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a7a      	ldr	r2, [pc, #488]	@ (800602c <HAL_DMA_Init+0x638>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d012      	beq.n	8005e6c <HAL_DMA_Init+0x478>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a79      	ldr	r2, [pc, #484]	@ (8006030 <HAL_DMA_Init+0x63c>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d00d      	beq.n	8005e6c <HAL_DMA_Init+0x478>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a77      	ldr	r2, [pc, #476]	@ (8006034 <HAL_DMA_Init+0x640>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d008      	beq.n	8005e6c <HAL_DMA_Init+0x478>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a76      	ldr	r2, [pc, #472]	@ (8006038 <HAL_DMA_Init+0x644>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d003      	beq.n	8005e6c <HAL_DMA_Init+0x478>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a74      	ldr	r2, [pc, #464]	@ (800603c <HAL_DMA_Init+0x648>)
 8005e6a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	4b6e      	ldr	r3, [pc, #440]	@ (8006040 <HAL_DMA_Init+0x64c>)
 8005e88:	4013      	ands	r3, r2
 8005e8a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	2b40      	cmp	r3, #64	@ 0x40
 8005e92:	d008      	beq.n	8005ea6 <HAL_DMA_Init+0x4b2>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	2b80      	cmp	r3, #128	@ 0x80
 8005e9a:	d102      	bne.n	8005ea2 <HAL_DMA_Init+0x4ae>
 8005e9c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005ea0:	e002      	b.n	8005ea8 <HAL_DMA_Init+0x4b4>
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	e000      	b.n	8005ea8 <HAL_DMA_Init+0x4b4>
 8005ea6:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	68d2      	ldr	r2, [r2, #12]
 8005eac:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005eae:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005eb6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	695b      	ldr	r3, [r3, #20]
 8005ebc:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005ebe:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005ec6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	69db      	ldr	r3, [r3, #28]
 8005ecc:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005ece:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a1b      	ldr	r3, [r3, #32]
 8005ed4:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005ed6:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	461a      	mov	r2, r3
 8005eec:	4b55      	ldr	r3, [pc, #340]	@ (8006044 <HAL_DMA_Init+0x650>)
 8005eee:	4413      	add	r3, r2
 8005ef0:	4a55      	ldr	r2, [pc, #340]	@ (8006048 <HAL_DMA_Init+0x654>)
 8005ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef6:	091b      	lsrs	r3, r3, #4
 8005ef8:	009a      	lsls	r2, r3, #2
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f002 fa26 	bl	8008350 <DMA_CalcBaseAndBitshift>
 8005f04:	4603      	mov	r3, r0
 8005f06:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f0c:	f003 031f 	and.w	r3, r3, #31
 8005f10:	2201      	movs	r2, #1
 8005f12:	409a      	lsls	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	605a      	str	r2, [r3, #4]
 8005f18:	e008      	b.n	8005f2c <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2240      	movs	r2, #64	@ 0x40
 8005f1e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2203      	movs	r2, #3
 8005f24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e0ed      	b.n	8006108 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a46      	ldr	r2, [pc, #280]	@ (800604c <HAL_DMA_Init+0x658>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d072      	beq.n	800601c <HAL_DMA_Init+0x628>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a45      	ldr	r2, [pc, #276]	@ (8006050 <HAL_DMA_Init+0x65c>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d06d      	beq.n	800601c <HAL_DMA_Init+0x628>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a43      	ldr	r2, [pc, #268]	@ (8006054 <HAL_DMA_Init+0x660>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d068      	beq.n	800601c <HAL_DMA_Init+0x628>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a42      	ldr	r2, [pc, #264]	@ (8006058 <HAL_DMA_Init+0x664>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d063      	beq.n	800601c <HAL_DMA_Init+0x628>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a40      	ldr	r2, [pc, #256]	@ (800605c <HAL_DMA_Init+0x668>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d05e      	beq.n	800601c <HAL_DMA_Init+0x628>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a3f      	ldr	r2, [pc, #252]	@ (8006060 <HAL_DMA_Init+0x66c>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d059      	beq.n	800601c <HAL_DMA_Init+0x628>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a3d      	ldr	r2, [pc, #244]	@ (8006064 <HAL_DMA_Init+0x670>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d054      	beq.n	800601c <HAL_DMA_Init+0x628>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a3c      	ldr	r2, [pc, #240]	@ (8006068 <HAL_DMA_Init+0x674>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d04f      	beq.n	800601c <HAL_DMA_Init+0x628>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a3a      	ldr	r2, [pc, #232]	@ (800606c <HAL_DMA_Init+0x678>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d04a      	beq.n	800601c <HAL_DMA_Init+0x628>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a39      	ldr	r2, [pc, #228]	@ (8006070 <HAL_DMA_Init+0x67c>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d045      	beq.n	800601c <HAL_DMA_Init+0x628>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a37      	ldr	r2, [pc, #220]	@ (8006074 <HAL_DMA_Init+0x680>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d040      	beq.n	800601c <HAL_DMA_Init+0x628>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a36      	ldr	r2, [pc, #216]	@ (8006078 <HAL_DMA_Init+0x684>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d03b      	beq.n	800601c <HAL_DMA_Init+0x628>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a34      	ldr	r2, [pc, #208]	@ (800607c <HAL_DMA_Init+0x688>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d036      	beq.n	800601c <HAL_DMA_Init+0x628>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a33      	ldr	r2, [pc, #204]	@ (8006080 <HAL_DMA_Init+0x68c>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d031      	beq.n	800601c <HAL_DMA_Init+0x628>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a31      	ldr	r2, [pc, #196]	@ (8006084 <HAL_DMA_Init+0x690>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d02c      	beq.n	800601c <HAL_DMA_Init+0x628>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a30      	ldr	r2, [pc, #192]	@ (8006088 <HAL_DMA_Init+0x694>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d027      	beq.n	800601c <HAL_DMA_Init+0x628>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a13      	ldr	r2, [pc, #76]	@ (8006020 <HAL_DMA_Init+0x62c>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d022      	beq.n	800601c <HAL_DMA_Init+0x628>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a12      	ldr	r2, [pc, #72]	@ (8006024 <HAL_DMA_Init+0x630>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d01d      	beq.n	800601c <HAL_DMA_Init+0x628>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a10      	ldr	r2, [pc, #64]	@ (8006028 <HAL_DMA_Init+0x634>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d018      	beq.n	800601c <HAL_DMA_Init+0x628>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a0f      	ldr	r2, [pc, #60]	@ (800602c <HAL_DMA_Init+0x638>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d013      	beq.n	800601c <HAL_DMA_Init+0x628>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8006030 <HAL_DMA_Init+0x63c>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d00e      	beq.n	800601c <HAL_DMA_Init+0x628>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a0c      	ldr	r2, [pc, #48]	@ (8006034 <HAL_DMA_Init+0x640>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d009      	beq.n	800601c <HAL_DMA_Init+0x628>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a0a      	ldr	r2, [pc, #40]	@ (8006038 <HAL_DMA_Init+0x644>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d004      	beq.n	800601c <HAL_DMA_Init+0x628>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a09      	ldr	r2, [pc, #36]	@ (800603c <HAL_DMA_Init+0x648>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d137      	bne.n	800608c <HAL_DMA_Init+0x698>
 800601c:	2301      	movs	r3, #1
 800601e:	e036      	b.n	800608e <HAL_DMA_Init+0x69a>
 8006020:	58025408 	.word	0x58025408
 8006024:	5802541c 	.word	0x5802541c
 8006028:	58025430 	.word	0x58025430
 800602c:	58025444 	.word	0x58025444
 8006030:	58025458 	.word	0x58025458
 8006034:	5802546c 	.word	0x5802546c
 8006038:	58025480 	.word	0x58025480
 800603c:	58025494 	.word	0x58025494
 8006040:	fffe000f 	.word	0xfffe000f
 8006044:	a7fdabf8 	.word	0xa7fdabf8
 8006048:	cccccccd 	.word	0xcccccccd
 800604c:	40020010 	.word	0x40020010
 8006050:	40020028 	.word	0x40020028
 8006054:	40020040 	.word	0x40020040
 8006058:	40020058 	.word	0x40020058
 800605c:	40020070 	.word	0x40020070
 8006060:	40020088 	.word	0x40020088
 8006064:	400200a0 	.word	0x400200a0
 8006068:	400200b8 	.word	0x400200b8
 800606c:	40020410 	.word	0x40020410
 8006070:	40020428 	.word	0x40020428
 8006074:	40020440 	.word	0x40020440
 8006078:	40020458 	.word	0x40020458
 800607c:	40020470 	.word	0x40020470
 8006080:	40020488 	.word	0x40020488
 8006084:	400204a0 	.word	0x400204a0
 8006088:	400204b8 	.word	0x400204b8
 800608c:	2300      	movs	r3, #0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d032      	beq.n	80060f8 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f002 fa8a 	bl	80085ac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	2b80      	cmp	r3, #128	@ 0x80
 800609e:	d102      	bne.n	80060a6 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685a      	ldr	r2, [r3, #4]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060ae:	b2d2      	uxtb	r2, r2
 80060b0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80060ba:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d010      	beq.n	80060e6 <HAL_DMA_Init+0x6f2>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	2b08      	cmp	r3, #8
 80060ca:	d80c      	bhi.n	80060e6 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f002 fb07 	bl	80086e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060d6:	2200      	movs	r2, #0
 80060d8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80060e2:	605a      	str	r2, [r3, #4]
 80060e4:	e008      	b.n	80060f8 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2201      	movs	r2, #1
 8006102:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3718      	adds	r7, #24
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
 800611c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800611e:	2300      	movs	r3, #0
 8006120:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e226      	b.n	800657a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006132:	2b01      	cmp	r3, #1
 8006134:	d101      	bne.n	800613a <HAL_DMA_Start_IT+0x2a>
 8006136:	2302      	movs	r3, #2
 8006138:	e21f      	b.n	800657a <HAL_DMA_Start_IT+0x46a>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b01      	cmp	r3, #1
 800614c:	f040 820a 	bne.w	8006564 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2202      	movs	r2, #2
 8006154:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a68      	ldr	r2, [pc, #416]	@ (8006304 <HAL_DMA_Start_IT+0x1f4>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d04a      	beq.n	80061fe <HAL_DMA_Start_IT+0xee>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a66      	ldr	r2, [pc, #408]	@ (8006308 <HAL_DMA_Start_IT+0x1f8>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d045      	beq.n	80061fe <HAL_DMA_Start_IT+0xee>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a65      	ldr	r2, [pc, #404]	@ (800630c <HAL_DMA_Start_IT+0x1fc>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d040      	beq.n	80061fe <HAL_DMA_Start_IT+0xee>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a63      	ldr	r2, [pc, #396]	@ (8006310 <HAL_DMA_Start_IT+0x200>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d03b      	beq.n	80061fe <HAL_DMA_Start_IT+0xee>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a62      	ldr	r2, [pc, #392]	@ (8006314 <HAL_DMA_Start_IT+0x204>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d036      	beq.n	80061fe <HAL_DMA_Start_IT+0xee>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a60      	ldr	r2, [pc, #384]	@ (8006318 <HAL_DMA_Start_IT+0x208>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d031      	beq.n	80061fe <HAL_DMA_Start_IT+0xee>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a5f      	ldr	r2, [pc, #380]	@ (800631c <HAL_DMA_Start_IT+0x20c>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d02c      	beq.n	80061fe <HAL_DMA_Start_IT+0xee>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a5d      	ldr	r2, [pc, #372]	@ (8006320 <HAL_DMA_Start_IT+0x210>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d027      	beq.n	80061fe <HAL_DMA_Start_IT+0xee>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a5c      	ldr	r2, [pc, #368]	@ (8006324 <HAL_DMA_Start_IT+0x214>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d022      	beq.n	80061fe <HAL_DMA_Start_IT+0xee>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a5a      	ldr	r2, [pc, #360]	@ (8006328 <HAL_DMA_Start_IT+0x218>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d01d      	beq.n	80061fe <HAL_DMA_Start_IT+0xee>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a59      	ldr	r2, [pc, #356]	@ (800632c <HAL_DMA_Start_IT+0x21c>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d018      	beq.n	80061fe <HAL_DMA_Start_IT+0xee>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a57      	ldr	r2, [pc, #348]	@ (8006330 <HAL_DMA_Start_IT+0x220>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d013      	beq.n	80061fe <HAL_DMA_Start_IT+0xee>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a56      	ldr	r2, [pc, #344]	@ (8006334 <HAL_DMA_Start_IT+0x224>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d00e      	beq.n	80061fe <HAL_DMA_Start_IT+0xee>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a54      	ldr	r2, [pc, #336]	@ (8006338 <HAL_DMA_Start_IT+0x228>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d009      	beq.n	80061fe <HAL_DMA_Start_IT+0xee>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a53      	ldr	r2, [pc, #332]	@ (800633c <HAL_DMA_Start_IT+0x22c>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d004      	beq.n	80061fe <HAL_DMA_Start_IT+0xee>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a51      	ldr	r2, [pc, #324]	@ (8006340 <HAL_DMA_Start_IT+0x230>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d108      	bne.n	8006210 <HAL_DMA_Start_IT+0x100>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f022 0201 	bic.w	r2, r2, #1
 800620c:	601a      	str	r2, [r3, #0]
 800620e:	e007      	b.n	8006220 <HAL_DMA_Start_IT+0x110>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 0201 	bic.w	r2, r2, #1
 800621e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	68b9      	ldr	r1, [r7, #8]
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f001 feae 	bl	8007f88 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a34      	ldr	r2, [pc, #208]	@ (8006304 <HAL_DMA_Start_IT+0x1f4>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d04a      	beq.n	80062cc <HAL_DMA_Start_IT+0x1bc>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a33      	ldr	r2, [pc, #204]	@ (8006308 <HAL_DMA_Start_IT+0x1f8>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d045      	beq.n	80062cc <HAL_DMA_Start_IT+0x1bc>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a31      	ldr	r2, [pc, #196]	@ (800630c <HAL_DMA_Start_IT+0x1fc>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d040      	beq.n	80062cc <HAL_DMA_Start_IT+0x1bc>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a30      	ldr	r2, [pc, #192]	@ (8006310 <HAL_DMA_Start_IT+0x200>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d03b      	beq.n	80062cc <HAL_DMA_Start_IT+0x1bc>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a2e      	ldr	r2, [pc, #184]	@ (8006314 <HAL_DMA_Start_IT+0x204>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d036      	beq.n	80062cc <HAL_DMA_Start_IT+0x1bc>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a2d      	ldr	r2, [pc, #180]	@ (8006318 <HAL_DMA_Start_IT+0x208>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d031      	beq.n	80062cc <HAL_DMA_Start_IT+0x1bc>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a2b      	ldr	r2, [pc, #172]	@ (800631c <HAL_DMA_Start_IT+0x20c>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d02c      	beq.n	80062cc <HAL_DMA_Start_IT+0x1bc>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a2a      	ldr	r2, [pc, #168]	@ (8006320 <HAL_DMA_Start_IT+0x210>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d027      	beq.n	80062cc <HAL_DMA_Start_IT+0x1bc>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a28      	ldr	r2, [pc, #160]	@ (8006324 <HAL_DMA_Start_IT+0x214>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d022      	beq.n	80062cc <HAL_DMA_Start_IT+0x1bc>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a27      	ldr	r2, [pc, #156]	@ (8006328 <HAL_DMA_Start_IT+0x218>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d01d      	beq.n	80062cc <HAL_DMA_Start_IT+0x1bc>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a25      	ldr	r2, [pc, #148]	@ (800632c <HAL_DMA_Start_IT+0x21c>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d018      	beq.n	80062cc <HAL_DMA_Start_IT+0x1bc>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a24      	ldr	r2, [pc, #144]	@ (8006330 <HAL_DMA_Start_IT+0x220>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d013      	beq.n	80062cc <HAL_DMA_Start_IT+0x1bc>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a22      	ldr	r2, [pc, #136]	@ (8006334 <HAL_DMA_Start_IT+0x224>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d00e      	beq.n	80062cc <HAL_DMA_Start_IT+0x1bc>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a21      	ldr	r2, [pc, #132]	@ (8006338 <HAL_DMA_Start_IT+0x228>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d009      	beq.n	80062cc <HAL_DMA_Start_IT+0x1bc>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a1f      	ldr	r2, [pc, #124]	@ (800633c <HAL_DMA_Start_IT+0x22c>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d004      	beq.n	80062cc <HAL_DMA_Start_IT+0x1bc>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a1e      	ldr	r2, [pc, #120]	@ (8006340 <HAL_DMA_Start_IT+0x230>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d101      	bne.n	80062d0 <HAL_DMA_Start_IT+0x1c0>
 80062cc:	2301      	movs	r3, #1
 80062ce:	e000      	b.n	80062d2 <HAL_DMA_Start_IT+0x1c2>
 80062d0:	2300      	movs	r3, #0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d036      	beq.n	8006344 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f023 021e 	bic.w	r2, r3, #30
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f042 0216 	orr.w	r2, r2, #22
 80062e8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d03e      	beq.n	8006370 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f042 0208 	orr.w	r2, r2, #8
 8006300:	601a      	str	r2, [r3, #0]
 8006302:	e035      	b.n	8006370 <HAL_DMA_Start_IT+0x260>
 8006304:	40020010 	.word	0x40020010
 8006308:	40020028 	.word	0x40020028
 800630c:	40020040 	.word	0x40020040
 8006310:	40020058 	.word	0x40020058
 8006314:	40020070 	.word	0x40020070
 8006318:	40020088 	.word	0x40020088
 800631c:	400200a0 	.word	0x400200a0
 8006320:	400200b8 	.word	0x400200b8
 8006324:	40020410 	.word	0x40020410
 8006328:	40020428 	.word	0x40020428
 800632c:	40020440 	.word	0x40020440
 8006330:	40020458 	.word	0x40020458
 8006334:	40020470 	.word	0x40020470
 8006338:	40020488 	.word	0x40020488
 800633c:	400204a0 	.word	0x400204a0
 8006340:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f023 020e 	bic.w	r2, r3, #14
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f042 020a 	orr.w	r2, r2, #10
 8006356:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800635c:	2b00      	cmp	r3, #0
 800635e:	d007      	beq.n	8006370 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f042 0204 	orr.w	r2, r2, #4
 800636e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a83      	ldr	r2, [pc, #524]	@ (8006584 <HAL_DMA_Start_IT+0x474>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d072      	beq.n	8006460 <HAL_DMA_Start_IT+0x350>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a82      	ldr	r2, [pc, #520]	@ (8006588 <HAL_DMA_Start_IT+0x478>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d06d      	beq.n	8006460 <HAL_DMA_Start_IT+0x350>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a80      	ldr	r2, [pc, #512]	@ (800658c <HAL_DMA_Start_IT+0x47c>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d068      	beq.n	8006460 <HAL_DMA_Start_IT+0x350>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a7f      	ldr	r2, [pc, #508]	@ (8006590 <HAL_DMA_Start_IT+0x480>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d063      	beq.n	8006460 <HAL_DMA_Start_IT+0x350>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a7d      	ldr	r2, [pc, #500]	@ (8006594 <HAL_DMA_Start_IT+0x484>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d05e      	beq.n	8006460 <HAL_DMA_Start_IT+0x350>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a7c      	ldr	r2, [pc, #496]	@ (8006598 <HAL_DMA_Start_IT+0x488>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d059      	beq.n	8006460 <HAL_DMA_Start_IT+0x350>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a7a      	ldr	r2, [pc, #488]	@ (800659c <HAL_DMA_Start_IT+0x48c>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d054      	beq.n	8006460 <HAL_DMA_Start_IT+0x350>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a79      	ldr	r2, [pc, #484]	@ (80065a0 <HAL_DMA_Start_IT+0x490>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d04f      	beq.n	8006460 <HAL_DMA_Start_IT+0x350>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a77      	ldr	r2, [pc, #476]	@ (80065a4 <HAL_DMA_Start_IT+0x494>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d04a      	beq.n	8006460 <HAL_DMA_Start_IT+0x350>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a76      	ldr	r2, [pc, #472]	@ (80065a8 <HAL_DMA_Start_IT+0x498>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d045      	beq.n	8006460 <HAL_DMA_Start_IT+0x350>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a74      	ldr	r2, [pc, #464]	@ (80065ac <HAL_DMA_Start_IT+0x49c>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d040      	beq.n	8006460 <HAL_DMA_Start_IT+0x350>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a73      	ldr	r2, [pc, #460]	@ (80065b0 <HAL_DMA_Start_IT+0x4a0>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d03b      	beq.n	8006460 <HAL_DMA_Start_IT+0x350>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a71      	ldr	r2, [pc, #452]	@ (80065b4 <HAL_DMA_Start_IT+0x4a4>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d036      	beq.n	8006460 <HAL_DMA_Start_IT+0x350>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a70      	ldr	r2, [pc, #448]	@ (80065b8 <HAL_DMA_Start_IT+0x4a8>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d031      	beq.n	8006460 <HAL_DMA_Start_IT+0x350>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a6e      	ldr	r2, [pc, #440]	@ (80065bc <HAL_DMA_Start_IT+0x4ac>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d02c      	beq.n	8006460 <HAL_DMA_Start_IT+0x350>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a6d      	ldr	r2, [pc, #436]	@ (80065c0 <HAL_DMA_Start_IT+0x4b0>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d027      	beq.n	8006460 <HAL_DMA_Start_IT+0x350>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a6b      	ldr	r2, [pc, #428]	@ (80065c4 <HAL_DMA_Start_IT+0x4b4>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d022      	beq.n	8006460 <HAL_DMA_Start_IT+0x350>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a6a      	ldr	r2, [pc, #424]	@ (80065c8 <HAL_DMA_Start_IT+0x4b8>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d01d      	beq.n	8006460 <HAL_DMA_Start_IT+0x350>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a68      	ldr	r2, [pc, #416]	@ (80065cc <HAL_DMA_Start_IT+0x4bc>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d018      	beq.n	8006460 <HAL_DMA_Start_IT+0x350>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a67      	ldr	r2, [pc, #412]	@ (80065d0 <HAL_DMA_Start_IT+0x4c0>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d013      	beq.n	8006460 <HAL_DMA_Start_IT+0x350>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a65      	ldr	r2, [pc, #404]	@ (80065d4 <HAL_DMA_Start_IT+0x4c4>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d00e      	beq.n	8006460 <HAL_DMA_Start_IT+0x350>
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a64      	ldr	r2, [pc, #400]	@ (80065d8 <HAL_DMA_Start_IT+0x4c8>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d009      	beq.n	8006460 <HAL_DMA_Start_IT+0x350>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a62      	ldr	r2, [pc, #392]	@ (80065dc <HAL_DMA_Start_IT+0x4cc>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d004      	beq.n	8006460 <HAL_DMA_Start_IT+0x350>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a61      	ldr	r2, [pc, #388]	@ (80065e0 <HAL_DMA_Start_IT+0x4d0>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d101      	bne.n	8006464 <HAL_DMA_Start_IT+0x354>
 8006460:	2301      	movs	r3, #1
 8006462:	e000      	b.n	8006466 <HAL_DMA_Start_IT+0x356>
 8006464:	2300      	movs	r3, #0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d01a      	beq.n	80064a0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d007      	beq.n	8006488 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006482:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006486:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800648c:	2b00      	cmp	r3, #0
 800648e:	d007      	beq.n	80064a0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800649a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800649e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a37      	ldr	r2, [pc, #220]	@ (8006584 <HAL_DMA_Start_IT+0x474>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d04a      	beq.n	8006540 <HAL_DMA_Start_IT+0x430>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a36      	ldr	r2, [pc, #216]	@ (8006588 <HAL_DMA_Start_IT+0x478>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d045      	beq.n	8006540 <HAL_DMA_Start_IT+0x430>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a34      	ldr	r2, [pc, #208]	@ (800658c <HAL_DMA_Start_IT+0x47c>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d040      	beq.n	8006540 <HAL_DMA_Start_IT+0x430>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a33      	ldr	r2, [pc, #204]	@ (8006590 <HAL_DMA_Start_IT+0x480>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d03b      	beq.n	8006540 <HAL_DMA_Start_IT+0x430>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a31      	ldr	r2, [pc, #196]	@ (8006594 <HAL_DMA_Start_IT+0x484>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d036      	beq.n	8006540 <HAL_DMA_Start_IT+0x430>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a30      	ldr	r2, [pc, #192]	@ (8006598 <HAL_DMA_Start_IT+0x488>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d031      	beq.n	8006540 <HAL_DMA_Start_IT+0x430>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a2e      	ldr	r2, [pc, #184]	@ (800659c <HAL_DMA_Start_IT+0x48c>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d02c      	beq.n	8006540 <HAL_DMA_Start_IT+0x430>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a2d      	ldr	r2, [pc, #180]	@ (80065a0 <HAL_DMA_Start_IT+0x490>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d027      	beq.n	8006540 <HAL_DMA_Start_IT+0x430>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a2b      	ldr	r2, [pc, #172]	@ (80065a4 <HAL_DMA_Start_IT+0x494>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d022      	beq.n	8006540 <HAL_DMA_Start_IT+0x430>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a2a      	ldr	r2, [pc, #168]	@ (80065a8 <HAL_DMA_Start_IT+0x498>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d01d      	beq.n	8006540 <HAL_DMA_Start_IT+0x430>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a28      	ldr	r2, [pc, #160]	@ (80065ac <HAL_DMA_Start_IT+0x49c>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d018      	beq.n	8006540 <HAL_DMA_Start_IT+0x430>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a27      	ldr	r2, [pc, #156]	@ (80065b0 <HAL_DMA_Start_IT+0x4a0>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d013      	beq.n	8006540 <HAL_DMA_Start_IT+0x430>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a25      	ldr	r2, [pc, #148]	@ (80065b4 <HAL_DMA_Start_IT+0x4a4>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d00e      	beq.n	8006540 <HAL_DMA_Start_IT+0x430>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a24      	ldr	r2, [pc, #144]	@ (80065b8 <HAL_DMA_Start_IT+0x4a8>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d009      	beq.n	8006540 <HAL_DMA_Start_IT+0x430>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a22      	ldr	r2, [pc, #136]	@ (80065bc <HAL_DMA_Start_IT+0x4ac>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d004      	beq.n	8006540 <HAL_DMA_Start_IT+0x430>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a21      	ldr	r2, [pc, #132]	@ (80065c0 <HAL_DMA_Start_IT+0x4b0>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d108      	bne.n	8006552 <HAL_DMA_Start_IT+0x442>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f042 0201 	orr.w	r2, r2, #1
 800654e:	601a      	str	r2, [r3, #0]
 8006550:	e012      	b.n	8006578 <HAL_DMA_Start_IT+0x468>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f042 0201 	orr.w	r2, r2, #1
 8006560:	601a      	str	r2, [r3, #0]
 8006562:	e009      	b.n	8006578 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800656a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006578:	7dfb      	ldrb	r3, [r7, #23]
}
 800657a:	4618      	mov	r0, r3
 800657c:	3718      	adds	r7, #24
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	40020010 	.word	0x40020010
 8006588:	40020028 	.word	0x40020028
 800658c:	40020040 	.word	0x40020040
 8006590:	40020058 	.word	0x40020058
 8006594:	40020070 	.word	0x40020070
 8006598:	40020088 	.word	0x40020088
 800659c:	400200a0 	.word	0x400200a0
 80065a0:	400200b8 	.word	0x400200b8
 80065a4:	40020410 	.word	0x40020410
 80065a8:	40020428 	.word	0x40020428
 80065ac:	40020440 	.word	0x40020440
 80065b0:	40020458 	.word	0x40020458
 80065b4:	40020470 	.word	0x40020470
 80065b8:	40020488 	.word	0x40020488
 80065bc:	400204a0 	.word	0x400204a0
 80065c0:	400204b8 	.word	0x400204b8
 80065c4:	58025408 	.word	0x58025408
 80065c8:	5802541c 	.word	0x5802541c
 80065cc:	58025430 	.word	0x58025430
 80065d0:	58025444 	.word	0x58025444
 80065d4:	58025458 	.word	0x58025458
 80065d8:	5802546c 	.word	0x5802546c
 80065dc:	58025480 	.word	0x58025480
 80065e0:	58025494 	.word	0x58025494

080065e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80065ec:	f7ff f84a 	bl	8005684 <HAL_GetTick>
 80065f0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d101      	bne.n	80065fc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e2dc      	b.n	8006bb6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006602:	b2db      	uxtb	r3, r3
 8006604:	2b02      	cmp	r3, #2
 8006606:	d008      	beq.n	800661a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2280      	movs	r2, #128	@ 0x80
 800660c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e2cd      	b.n	8006bb6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a76      	ldr	r2, [pc, #472]	@ (80067f8 <HAL_DMA_Abort+0x214>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d04a      	beq.n	80066ba <HAL_DMA_Abort+0xd6>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a74      	ldr	r2, [pc, #464]	@ (80067fc <HAL_DMA_Abort+0x218>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d045      	beq.n	80066ba <HAL_DMA_Abort+0xd6>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a73      	ldr	r2, [pc, #460]	@ (8006800 <HAL_DMA_Abort+0x21c>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d040      	beq.n	80066ba <HAL_DMA_Abort+0xd6>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a71      	ldr	r2, [pc, #452]	@ (8006804 <HAL_DMA_Abort+0x220>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d03b      	beq.n	80066ba <HAL_DMA_Abort+0xd6>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a70      	ldr	r2, [pc, #448]	@ (8006808 <HAL_DMA_Abort+0x224>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d036      	beq.n	80066ba <HAL_DMA_Abort+0xd6>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a6e      	ldr	r2, [pc, #440]	@ (800680c <HAL_DMA_Abort+0x228>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d031      	beq.n	80066ba <HAL_DMA_Abort+0xd6>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a6d      	ldr	r2, [pc, #436]	@ (8006810 <HAL_DMA_Abort+0x22c>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d02c      	beq.n	80066ba <HAL_DMA_Abort+0xd6>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a6b      	ldr	r2, [pc, #428]	@ (8006814 <HAL_DMA_Abort+0x230>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d027      	beq.n	80066ba <HAL_DMA_Abort+0xd6>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a6a      	ldr	r2, [pc, #424]	@ (8006818 <HAL_DMA_Abort+0x234>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d022      	beq.n	80066ba <HAL_DMA_Abort+0xd6>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a68      	ldr	r2, [pc, #416]	@ (800681c <HAL_DMA_Abort+0x238>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d01d      	beq.n	80066ba <HAL_DMA_Abort+0xd6>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a67      	ldr	r2, [pc, #412]	@ (8006820 <HAL_DMA_Abort+0x23c>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d018      	beq.n	80066ba <HAL_DMA_Abort+0xd6>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a65      	ldr	r2, [pc, #404]	@ (8006824 <HAL_DMA_Abort+0x240>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d013      	beq.n	80066ba <HAL_DMA_Abort+0xd6>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a64      	ldr	r2, [pc, #400]	@ (8006828 <HAL_DMA_Abort+0x244>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d00e      	beq.n	80066ba <HAL_DMA_Abort+0xd6>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a62      	ldr	r2, [pc, #392]	@ (800682c <HAL_DMA_Abort+0x248>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d009      	beq.n	80066ba <HAL_DMA_Abort+0xd6>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a61      	ldr	r2, [pc, #388]	@ (8006830 <HAL_DMA_Abort+0x24c>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d004      	beq.n	80066ba <HAL_DMA_Abort+0xd6>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a5f      	ldr	r2, [pc, #380]	@ (8006834 <HAL_DMA_Abort+0x250>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d101      	bne.n	80066be <HAL_DMA_Abort+0xda>
 80066ba:	2301      	movs	r3, #1
 80066bc:	e000      	b.n	80066c0 <HAL_DMA_Abort+0xdc>
 80066be:	2300      	movs	r3, #0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d013      	beq.n	80066ec <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f022 021e 	bic.w	r2, r2, #30
 80066d2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	695a      	ldr	r2, [r3, #20]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80066e2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	617b      	str	r3, [r7, #20]
 80066ea:	e00a      	b.n	8006702 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 020e 	bic.w	r2, r2, #14
 80066fa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a3c      	ldr	r2, [pc, #240]	@ (80067f8 <HAL_DMA_Abort+0x214>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d072      	beq.n	80067f2 <HAL_DMA_Abort+0x20e>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a3a      	ldr	r2, [pc, #232]	@ (80067fc <HAL_DMA_Abort+0x218>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d06d      	beq.n	80067f2 <HAL_DMA_Abort+0x20e>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a39      	ldr	r2, [pc, #228]	@ (8006800 <HAL_DMA_Abort+0x21c>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d068      	beq.n	80067f2 <HAL_DMA_Abort+0x20e>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a37      	ldr	r2, [pc, #220]	@ (8006804 <HAL_DMA_Abort+0x220>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d063      	beq.n	80067f2 <HAL_DMA_Abort+0x20e>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a36      	ldr	r2, [pc, #216]	@ (8006808 <HAL_DMA_Abort+0x224>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d05e      	beq.n	80067f2 <HAL_DMA_Abort+0x20e>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a34      	ldr	r2, [pc, #208]	@ (800680c <HAL_DMA_Abort+0x228>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d059      	beq.n	80067f2 <HAL_DMA_Abort+0x20e>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a33      	ldr	r2, [pc, #204]	@ (8006810 <HAL_DMA_Abort+0x22c>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d054      	beq.n	80067f2 <HAL_DMA_Abort+0x20e>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a31      	ldr	r2, [pc, #196]	@ (8006814 <HAL_DMA_Abort+0x230>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d04f      	beq.n	80067f2 <HAL_DMA_Abort+0x20e>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a30      	ldr	r2, [pc, #192]	@ (8006818 <HAL_DMA_Abort+0x234>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d04a      	beq.n	80067f2 <HAL_DMA_Abort+0x20e>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a2e      	ldr	r2, [pc, #184]	@ (800681c <HAL_DMA_Abort+0x238>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d045      	beq.n	80067f2 <HAL_DMA_Abort+0x20e>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a2d      	ldr	r2, [pc, #180]	@ (8006820 <HAL_DMA_Abort+0x23c>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d040      	beq.n	80067f2 <HAL_DMA_Abort+0x20e>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a2b      	ldr	r2, [pc, #172]	@ (8006824 <HAL_DMA_Abort+0x240>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d03b      	beq.n	80067f2 <HAL_DMA_Abort+0x20e>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a2a      	ldr	r2, [pc, #168]	@ (8006828 <HAL_DMA_Abort+0x244>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d036      	beq.n	80067f2 <HAL_DMA_Abort+0x20e>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a28      	ldr	r2, [pc, #160]	@ (800682c <HAL_DMA_Abort+0x248>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d031      	beq.n	80067f2 <HAL_DMA_Abort+0x20e>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a27      	ldr	r2, [pc, #156]	@ (8006830 <HAL_DMA_Abort+0x24c>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d02c      	beq.n	80067f2 <HAL_DMA_Abort+0x20e>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a25      	ldr	r2, [pc, #148]	@ (8006834 <HAL_DMA_Abort+0x250>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d027      	beq.n	80067f2 <HAL_DMA_Abort+0x20e>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a24      	ldr	r2, [pc, #144]	@ (8006838 <HAL_DMA_Abort+0x254>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d022      	beq.n	80067f2 <HAL_DMA_Abort+0x20e>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a22      	ldr	r2, [pc, #136]	@ (800683c <HAL_DMA_Abort+0x258>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d01d      	beq.n	80067f2 <HAL_DMA_Abort+0x20e>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a21      	ldr	r2, [pc, #132]	@ (8006840 <HAL_DMA_Abort+0x25c>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d018      	beq.n	80067f2 <HAL_DMA_Abort+0x20e>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a1f      	ldr	r2, [pc, #124]	@ (8006844 <HAL_DMA_Abort+0x260>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d013      	beq.n	80067f2 <HAL_DMA_Abort+0x20e>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a1e      	ldr	r2, [pc, #120]	@ (8006848 <HAL_DMA_Abort+0x264>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d00e      	beq.n	80067f2 <HAL_DMA_Abort+0x20e>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a1c      	ldr	r2, [pc, #112]	@ (800684c <HAL_DMA_Abort+0x268>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d009      	beq.n	80067f2 <HAL_DMA_Abort+0x20e>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a1b      	ldr	r2, [pc, #108]	@ (8006850 <HAL_DMA_Abort+0x26c>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d004      	beq.n	80067f2 <HAL_DMA_Abort+0x20e>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a19      	ldr	r2, [pc, #100]	@ (8006854 <HAL_DMA_Abort+0x270>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d132      	bne.n	8006858 <HAL_DMA_Abort+0x274>
 80067f2:	2301      	movs	r3, #1
 80067f4:	e031      	b.n	800685a <HAL_DMA_Abort+0x276>
 80067f6:	bf00      	nop
 80067f8:	40020010 	.word	0x40020010
 80067fc:	40020028 	.word	0x40020028
 8006800:	40020040 	.word	0x40020040
 8006804:	40020058 	.word	0x40020058
 8006808:	40020070 	.word	0x40020070
 800680c:	40020088 	.word	0x40020088
 8006810:	400200a0 	.word	0x400200a0
 8006814:	400200b8 	.word	0x400200b8
 8006818:	40020410 	.word	0x40020410
 800681c:	40020428 	.word	0x40020428
 8006820:	40020440 	.word	0x40020440
 8006824:	40020458 	.word	0x40020458
 8006828:	40020470 	.word	0x40020470
 800682c:	40020488 	.word	0x40020488
 8006830:	400204a0 	.word	0x400204a0
 8006834:	400204b8 	.word	0x400204b8
 8006838:	58025408 	.word	0x58025408
 800683c:	5802541c 	.word	0x5802541c
 8006840:	58025430 	.word	0x58025430
 8006844:	58025444 	.word	0x58025444
 8006848:	58025458 	.word	0x58025458
 800684c:	5802546c 	.word	0x5802546c
 8006850:	58025480 	.word	0x58025480
 8006854:	58025494 	.word	0x58025494
 8006858:	2300      	movs	r3, #0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d007      	beq.n	800686e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006868:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800686c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a6d      	ldr	r2, [pc, #436]	@ (8006a28 <HAL_DMA_Abort+0x444>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d04a      	beq.n	800690e <HAL_DMA_Abort+0x32a>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a6b      	ldr	r2, [pc, #428]	@ (8006a2c <HAL_DMA_Abort+0x448>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d045      	beq.n	800690e <HAL_DMA_Abort+0x32a>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a6a      	ldr	r2, [pc, #424]	@ (8006a30 <HAL_DMA_Abort+0x44c>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d040      	beq.n	800690e <HAL_DMA_Abort+0x32a>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a68      	ldr	r2, [pc, #416]	@ (8006a34 <HAL_DMA_Abort+0x450>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d03b      	beq.n	800690e <HAL_DMA_Abort+0x32a>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a67      	ldr	r2, [pc, #412]	@ (8006a38 <HAL_DMA_Abort+0x454>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d036      	beq.n	800690e <HAL_DMA_Abort+0x32a>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a65      	ldr	r2, [pc, #404]	@ (8006a3c <HAL_DMA_Abort+0x458>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d031      	beq.n	800690e <HAL_DMA_Abort+0x32a>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a64      	ldr	r2, [pc, #400]	@ (8006a40 <HAL_DMA_Abort+0x45c>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d02c      	beq.n	800690e <HAL_DMA_Abort+0x32a>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a62      	ldr	r2, [pc, #392]	@ (8006a44 <HAL_DMA_Abort+0x460>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d027      	beq.n	800690e <HAL_DMA_Abort+0x32a>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a61      	ldr	r2, [pc, #388]	@ (8006a48 <HAL_DMA_Abort+0x464>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d022      	beq.n	800690e <HAL_DMA_Abort+0x32a>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a5f      	ldr	r2, [pc, #380]	@ (8006a4c <HAL_DMA_Abort+0x468>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d01d      	beq.n	800690e <HAL_DMA_Abort+0x32a>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a5e      	ldr	r2, [pc, #376]	@ (8006a50 <HAL_DMA_Abort+0x46c>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d018      	beq.n	800690e <HAL_DMA_Abort+0x32a>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a5c      	ldr	r2, [pc, #368]	@ (8006a54 <HAL_DMA_Abort+0x470>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d013      	beq.n	800690e <HAL_DMA_Abort+0x32a>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a5b      	ldr	r2, [pc, #364]	@ (8006a58 <HAL_DMA_Abort+0x474>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d00e      	beq.n	800690e <HAL_DMA_Abort+0x32a>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a59      	ldr	r2, [pc, #356]	@ (8006a5c <HAL_DMA_Abort+0x478>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d009      	beq.n	800690e <HAL_DMA_Abort+0x32a>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a58      	ldr	r2, [pc, #352]	@ (8006a60 <HAL_DMA_Abort+0x47c>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d004      	beq.n	800690e <HAL_DMA_Abort+0x32a>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a56      	ldr	r2, [pc, #344]	@ (8006a64 <HAL_DMA_Abort+0x480>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d108      	bne.n	8006920 <HAL_DMA_Abort+0x33c>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f022 0201 	bic.w	r2, r2, #1
 800691c:	601a      	str	r2, [r3, #0]
 800691e:	e007      	b.n	8006930 <HAL_DMA_Abort+0x34c>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f022 0201 	bic.w	r2, r2, #1
 800692e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006930:	e013      	b.n	800695a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006932:	f7fe fea7 	bl	8005684 <HAL_GetTick>
 8006936:	4602      	mov	r2, r0
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	2b05      	cmp	r3, #5
 800693e:	d90c      	bls.n	800695a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2220      	movs	r2, #32
 8006944:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2203      	movs	r2, #3
 800694a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e12d      	b.n	8006bb6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1e5      	bne.n	8006932 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a2f      	ldr	r2, [pc, #188]	@ (8006a28 <HAL_DMA_Abort+0x444>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d04a      	beq.n	8006a06 <HAL_DMA_Abort+0x422>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a2d      	ldr	r2, [pc, #180]	@ (8006a2c <HAL_DMA_Abort+0x448>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d045      	beq.n	8006a06 <HAL_DMA_Abort+0x422>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a2c      	ldr	r2, [pc, #176]	@ (8006a30 <HAL_DMA_Abort+0x44c>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d040      	beq.n	8006a06 <HAL_DMA_Abort+0x422>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a2a      	ldr	r2, [pc, #168]	@ (8006a34 <HAL_DMA_Abort+0x450>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d03b      	beq.n	8006a06 <HAL_DMA_Abort+0x422>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a29      	ldr	r2, [pc, #164]	@ (8006a38 <HAL_DMA_Abort+0x454>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d036      	beq.n	8006a06 <HAL_DMA_Abort+0x422>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a27      	ldr	r2, [pc, #156]	@ (8006a3c <HAL_DMA_Abort+0x458>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d031      	beq.n	8006a06 <HAL_DMA_Abort+0x422>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a26      	ldr	r2, [pc, #152]	@ (8006a40 <HAL_DMA_Abort+0x45c>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d02c      	beq.n	8006a06 <HAL_DMA_Abort+0x422>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a24      	ldr	r2, [pc, #144]	@ (8006a44 <HAL_DMA_Abort+0x460>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d027      	beq.n	8006a06 <HAL_DMA_Abort+0x422>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a23      	ldr	r2, [pc, #140]	@ (8006a48 <HAL_DMA_Abort+0x464>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d022      	beq.n	8006a06 <HAL_DMA_Abort+0x422>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a21      	ldr	r2, [pc, #132]	@ (8006a4c <HAL_DMA_Abort+0x468>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d01d      	beq.n	8006a06 <HAL_DMA_Abort+0x422>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a20      	ldr	r2, [pc, #128]	@ (8006a50 <HAL_DMA_Abort+0x46c>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d018      	beq.n	8006a06 <HAL_DMA_Abort+0x422>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a1e      	ldr	r2, [pc, #120]	@ (8006a54 <HAL_DMA_Abort+0x470>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d013      	beq.n	8006a06 <HAL_DMA_Abort+0x422>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a1d      	ldr	r2, [pc, #116]	@ (8006a58 <HAL_DMA_Abort+0x474>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d00e      	beq.n	8006a06 <HAL_DMA_Abort+0x422>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a1b      	ldr	r2, [pc, #108]	@ (8006a5c <HAL_DMA_Abort+0x478>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d009      	beq.n	8006a06 <HAL_DMA_Abort+0x422>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a1a      	ldr	r2, [pc, #104]	@ (8006a60 <HAL_DMA_Abort+0x47c>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d004      	beq.n	8006a06 <HAL_DMA_Abort+0x422>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a18      	ldr	r2, [pc, #96]	@ (8006a64 <HAL_DMA_Abort+0x480>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d101      	bne.n	8006a0a <HAL_DMA_Abort+0x426>
 8006a06:	2301      	movs	r3, #1
 8006a08:	e000      	b.n	8006a0c <HAL_DMA_Abort+0x428>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d02b      	beq.n	8006a68 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a14:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a1a:	f003 031f 	and.w	r3, r3, #31
 8006a1e:	223f      	movs	r2, #63	@ 0x3f
 8006a20:	409a      	lsls	r2, r3
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	609a      	str	r2, [r3, #8]
 8006a26:	e02a      	b.n	8006a7e <HAL_DMA_Abort+0x49a>
 8006a28:	40020010 	.word	0x40020010
 8006a2c:	40020028 	.word	0x40020028
 8006a30:	40020040 	.word	0x40020040
 8006a34:	40020058 	.word	0x40020058
 8006a38:	40020070 	.word	0x40020070
 8006a3c:	40020088 	.word	0x40020088
 8006a40:	400200a0 	.word	0x400200a0
 8006a44:	400200b8 	.word	0x400200b8
 8006a48:	40020410 	.word	0x40020410
 8006a4c:	40020428 	.word	0x40020428
 8006a50:	40020440 	.word	0x40020440
 8006a54:	40020458 	.word	0x40020458
 8006a58:	40020470 	.word	0x40020470
 8006a5c:	40020488 	.word	0x40020488
 8006a60:	400204a0 	.word	0x400204a0
 8006a64:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a6c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a72:	f003 031f 	and.w	r3, r3, #31
 8006a76:	2201      	movs	r2, #1
 8006a78:	409a      	lsls	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a4f      	ldr	r2, [pc, #316]	@ (8006bc0 <HAL_DMA_Abort+0x5dc>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d072      	beq.n	8006b6e <HAL_DMA_Abort+0x58a>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a4d      	ldr	r2, [pc, #308]	@ (8006bc4 <HAL_DMA_Abort+0x5e0>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d06d      	beq.n	8006b6e <HAL_DMA_Abort+0x58a>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a4c      	ldr	r2, [pc, #304]	@ (8006bc8 <HAL_DMA_Abort+0x5e4>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d068      	beq.n	8006b6e <HAL_DMA_Abort+0x58a>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a4a      	ldr	r2, [pc, #296]	@ (8006bcc <HAL_DMA_Abort+0x5e8>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d063      	beq.n	8006b6e <HAL_DMA_Abort+0x58a>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a49      	ldr	r2, [pc, #292]	@ (8006bd0 <HAL_DMA_Abort+0x5ec>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d05e      	beq.n	8006b6e <HAL_DMA_Abort+0x58a>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a47      	ldr	r2, [pc, #284]	@ (8006bd4 <HAL_DMA_Abort+0x5f0>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d059      	beq.n	8006b6e <HAL_DMA_Abort+0x58a>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a46      	ldr	r2, [pc, #280]	@ (8006bd8 <HAL_DMA_Abort+0x5f4>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d054      	beq.n	8006b6e <HAL_DMA_Abort+0x58a>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a44      	ldr	r2, [pc, #272]	@ (8006bdc <HAL_DMA_Abort+0x5f8>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d04f      	beq.n	8006b6e <HAL_DMA_Abort+0x58a>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a43      	ldr	r2, [pc, #268]	@ (8006be0 <HAL_DMA_Abort+0x5fc>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d04a      	beq.n	8006b6e <HAL_DMA_Abort+0x58a>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a41      	ldr	r2, [pc, #260]	@ (8006be4 <HAL_DMA_Abort+0x600>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d045      	beq.n	8006b6e <HAL_DMA_Abort+0x58a>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a40      	ldr	r2, [pc, #256]	@ (8006be8 <HAL_DMA_Abort+0x604>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d040      	beq.n	8006b6e <HAL_DMA_Abort+0x58a>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a3e      	ldr	r2, [pc, #248]	@ (8006bec <HAL_DMA_Abort+0x608>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d03b      	beq.n	8006b6e <HAL_DMA_Abort+0x58a>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a3d      	ldr	r2, [pc, #244]	@ (8006bf0 <HAL_DMA_Abort+0x60c>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d036      	beq.n	8006b6e <HAL_DMA_Abort+0x58a>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a3b      	ldr	r2, [pc, #236]	@ (8006bf4 <HAL_DMA_Abort+0x610>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d031      	beq.n	8006b6e <HAL_DMA_Abort+0x58a>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a3a      	ldr	r2, [pc, #232]	@ (8006bf8 <HAL_DMA_Abort+0x614>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d02c      	beq.n	8006b6e <HAL_DMA_Abort+0x58a>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a38      	ldr	r2, [pc, #224]	@ (8006bfc <HAL_DMA_Abort+0x618>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d027      	beq.n	8006b6e <HAL_DMA_Abort+0x58a>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a37      	ldr	r2, [pc, #220]	@ (8006c00 <HAL_DMA_Abort+0x61c>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d022      	beq.n	8006b6e <HAL_DMA_Abort+0x58a>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a35      	ldr	r2, [pc, #212]	@ (8006c04 <HAL_DMA_Abort+0x620>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d01d      	beq.n	8006b6e <HAL_DMA_Abort+0x58a>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a34      	ldr	r2, [pc, #208]	@ (8006c08 <HAL_DMA_Abort+0x624>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d018      	beq.n	8006b6e <HAL_DMA_Abort+0x58a>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a32      	ldr	r2, [pc, #200]	@ (8006c0c <HAL_DMA_Abort+0x628>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d013      	beq.n	8006b6e <HAL_DMA_Abort+0x58a>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a31      	ldr	r2, [pc, #196]	@ (8006c10 <HAL_DMA_Abort+0x62c>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d00e      	beq.n	8006b6e <HAL_DMA_Abort+0x58a>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a2f      	ldr	r2, [pc, #188]	@ (8006c14 <HAL_DMA_Abort+0x630>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d009      	beq.n	8006b6e <HAL_DMA_Abort+0x58a>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a2e      	ldr	r2, [pc, #184]	@ (8006c18 <HAL_DMA_Abort+0x634>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d004      	beq.n	8006b6e <HAL_DMA_Abort+0x58a>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a2c      	ldr	r2, [pc, #176]	@ (8006c1c <HAL_DMA_Abort+0x638>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d101      	bne.n	8006b72 <HAL_DMA_Abort+0x58e>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e000      	b.n	8006b74 <HAL_DMA_Abort+0x590>
 8006b72:	2300      	movs	r3, #0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d015      	beq.n	8006ba4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006b80:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00c      	beq.n	8006ba4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b98:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006ba2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3718      	adds	r7, #24
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	40020010 	.word	0x40020010
 8006bc4:	40020028 	.word	0x40020028
 8006bc8:	40020040 	.word	0x40020040
 8006bcc:	40020058 	.word	0x40020058
 8006bd0:	40020070 	.word	0x40020070
 8006bd4:	40020088 	.word	0x40020088
 8006bd8:	400200a0 	.word	0x400200a0
 8006bdc:	400200b8 	.word	0x400200b8
 8006be0:	40020410 	.word	0x40020410
 8006be4:	40020428 	.word	0x40020428
 8006be8:	40020440 	.word	0x40020440
 8006bec:	40020458 	.word	0x40020458
 8006bf0:	40020470 	.word	0x40020470
 8006bf4:	40020488 	.word	0x40020488
 8006bf8:	400204a0 	.word	0x400204a0
 8006bfc:	400204b8 	.word	0x400204b8
 8006c00:	58025408 	.word	0x58025408
 8006c04:	5802541c 	.word	0x5802541c
 8006c08:	58025430 	.word	0x58025430
 8006c0c:	58025444 	.word	0x58025444
 8006c10:	58025458 	.word	0x58025458
 8006c14:	5802546c 	.word	0x5802546c
 8006c18:	58025480 	.word	0x58025480
 8006c1c:	58025494 	.word	0x58025494

08006c20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d101      	bne.n	8006c32 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e237      	b.n	80070a2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d004      	beq.n	8006c48 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2280      	movs	r2, #128	@ 0x80
 8006c42:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e22c      	b.n	80070a2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a5c      	ldr	r2, [pc, #368]	@ (8006dc0 <HAL_DMA_Abort_IT+0x1a0>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d04a      	beq.n	8006ce8 <HAL_DMA_Abort_IT+0xc8>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a5b      	ldr	r2, [pc, #364]	@ (8006dc4 <HAL_DMA_Abort_IT+0x1a4>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d045      	beq.n	8006ce8 <HAL_DMA_Abort_IT+0xc8>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a59      	ldr	r2, [pc, #356]	@ (8006dc8 <HAL_DMA_Abort_IT+0x1a8>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d040      	beq.n	8006ce8 <HAL_DMA_Abort_IT+0xc8>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a58      	ldr	r2, [pc, #352]	@ (8006dcc <HAL_DMA_Abort_IT+0x1ac>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d03b      	beq.n	8006ce8 <HAL_DMA_Abort_IT+0xc8>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a56      	ldr	r2, [pc, #344]	@ (8006dd0 <HAL_DMA_Abort_IT+0x1b0>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d036      	beq.n	8006ce8 <HAL_DMA_Abort_IT+0xc8>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a55      	ldr	r2, [pc, #340]	@ (8006dd4 <HAL_DMA_Abort_IT+0x1b4>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d031      	beq.n	8006ce8 <HAL_DMA_Abort_IT+0xc8>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a53      	ldr	r2, [pc, #332]	@ (8006dd8 <HAL_DMA_Abort_IT+0x1b8>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d02c      	beq.n	8006ce8 <HAL_DMA_Abort_IT+0xc8>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a52      	ldr	r2, [pc, #328]	@ (8006ddc <HAL_DMA_Abort_IT+0x1bc>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d027      	beq.n	8006ce8 <HAL_DMA_Abort_IT+0xc8>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a50      	ldr	r2, [pc, #320]	@ (8006de0 <HAL_DMA_Abort_IT+0x1c0>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d022      	beq.n	8006ce8 <HAL_DMA_Abort_IT+0xc8>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a4f      	ldr	r2, [pc, #316]	@ (8006de4 <HAL_DMA_Abort_IT+0x1c4>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d01d      	beq.n	8006ce8 <HAL_DMA_Abort_IT+0xc8>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a4d      	ldr	r2, [pc, #308]	@ (8006de8 <HAL_DMA_Abort_IT+0x1c8>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d018      	beq.n	8006ce8 <HAL_DMA_Abort_IT+0xc8>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a4c      	ldr	r2, [pc, #304]	@ (8006dec <HAL_DMA_Abort_IT+0x1cc>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d013      	beq.n	8006ce8 <HAL_DMA_Abort_IT+0xc8>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a4a      	ldr	r2, [pc, #296]	@ (8006df0 <HAL_DMA_Abort_IT+0x1d0>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d00e      	beq.n	8006ce8 <HAL_DMA_Abort_IT+0xc8>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a49      	ldr	r2, [pc, #292]	@ (8006df4 <HAL_DMA_Abort_IT+0x1d4>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d009      	beq.n	8006ce8 <HAL_DMA_Abort_IT+0xc8>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a47      	ldr	r2, [pc, #284]	@ (8006df8 <HAL_DMA_Abort_IT+0x1d8>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d004      	beq.n	8006ce8 <HAL_DMA_Abort_IT+0xc8>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a46      	ldr	r2, [pc, #280]	@ (8006dfc <HAL_DMA_Abort_IT+0x1dc>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d101      	bne.n	8006cec <HAL_DMA_Abort_IT+0xcc>
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e000      	b.n	8006cee <HAL_DMA_Abort_IT+0xce>
 8006cec:	2300      	movs	r3, #0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f000 8086 	beq.w	8006e00 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2204      	movs	r2, #4
 8006cf8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a2f      	ldr	r2, [pc, #188]	@ (8006dc0 <HAL_DMA_Abort_IT+0x1a0>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d04a      	beq.n	8006d9c <HAL_DMA_Abort_IT+0x17c>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a2e      	ldr	r2, [pc, #184]	@ (8006dc4 <HAL_DMA_Abort_IT+0x1a4>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d045      	beq.n	8006d9c <HAL_DMA_Abort_IT+0x17c>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a2c      	ldr	r2, [pc, #176]	@ (8006dc8 <HAL_DMA_Abort_IT+0x1a8>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d040      	beq.n	8006d9c <HAL_DMA_Abort_IT+0x17c>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a2b      	ldr	r2, [pc, #172]	@ (8006dcc <HAL_DMA_Abort_IT+0x1ac>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d03b      	beq.n	8006d9c <HAL_DMA_Abort_IT+0x17c>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a29      	ldr	r2, [pc, #164]	@ (8006dd0 <HAL_DMA_Abort_IT+0x1b0>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d036      	beq.n	8006d9c <HAL_DMA_Abort_IT+0x17c>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a28      	ldr	r2, [pc, #160]	@ (8006dd4 <HAL_DMA_Abort_IT+0x1b4>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d031      	beq.n	8006d9c <HAL_DMA_Abort_IT+0x17c>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a26      	ldr	r2, [pc, #152]	@ (8006dd8 <HAL_DMA_Abort_IT+0x1b8>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d02c      	beq.n	8006d9c <HAL_DMA_Abort_IT+0x17c>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a25      	ldr	r2, [pc, #148]	@ (8006ddc <HAL_DMA_Abort_IT+0x1bc>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d027      	beq.n	8006d9c <HAL_DMA_Abort_IT+0x17c>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a23      	ldr	r2, [pc, #140]	@ (8006de0 <HAL_DMA_Abort_IT+0x1c0>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d022      	beq.n	8006d9c <HAL_DMA_Abort_IT+0x17c>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a22      	ldr	r2, [pc, #136]	@ (8006de4 <HAL_DMA_Abort_IT+0x1c4>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d01d      	beq.n	8006d9c <HAL_DMA_Abort_IT+0x17c>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a20      	ldr	r2, [pc, #128]	@ (8006de8 <HAL_DMA_Abort_IT+0x1c8>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d018      	beq.n	8006d9c <HAL_DMA_Abort_IT+0x17c>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a1f      	ldr	r2, [pc, #124]	@ (8006dec <HAL_DMA_Abort_IT+0x1cc>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d013      	beq.n	8006d9c <HAL_DMA_Abort_IT+0x17c>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a1d      	ldr	r2, [pc, #116]	@ (8006df0 <HAL_DMA_Abort_IT+0x1d0>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d00e      	beq.n	8006d9c <HAL_DMA_Abort_IT+0x17c>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a1c      	ldr	r2, [pc, #112]	@ (8006df4 <HAL_DMA_Abort_IT+0x1d4>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d009      	beq.n	8006d9c <HAL_DMA_Abort_IT+0x17c>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a1a      	ldr	r2, [pc, #104]	@ (8006df8 <HAL_DMA_Abort_IT+0x1d8>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d004      	beq.n	8006d9c <HAL_DMA_Abort_IT+0x17c>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a19      	ldr	r2, [pc, #100]	@ (8006dfc <HAL_DMA_Abort_IT+0x1dc>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d108      	bne.n	8006dae <HAL_DMA_Abort_IT+0x18e>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f022 0201 	bic.w	r2, r2, #1
 8006daa:	601a      	str	r2, [r3, #0]
 8006dac:	e178      	b.n	80070a0 <HAL_DMA_Abort_IT+0x480>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f022 0201 	bic.w	r2, r2, #1
 8006dbc:	601a      	str	r2, [r3, #0]
 8006dbe:	e16f      	b.n	80070a0 <HAL_DMA_Abort_IT+0x480>
 8006dc0:	40020010 	.word	0x40020010
 8006dc4:	40020028 	.word	0x40020028
 8006dc8:	40020040 	.word	0x40020040
 8006dcc:	40020058 	.word	0x40020058
 8006dd0:	40020070 	.word	0x40020070
 8006dd4:	40020088 	.word	0x40020088
 8006dd8:	400200a0 	.word	0x400200a0
 8006ddc:	400200b8 	.word	0x400200b8
 8006de0:	40020410 	.word	0x40020410
 8006de4:	40020428 	.word	0x40020428
 8006de8:	40020440 	.word	0x40020440
 8006dec:	40020458 	.word	0x40020458
 8006df0:	40020470 	.word	0x40020470
 8006df4:	40020488 	.word	0x40020488
 8006df8:	400204a0 	.word	0x400204a0
 8006dfc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f022 020e 	bic.w	r2, r2, #14
 8006e0e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a6c      	ldr	r2, [pc, #432]	@ (8006fc8 <HAL_DMA_Abort_IT+0x3a8>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d04a      	beq.n	8006eb0 <HAL_DMA_Abort_IT+0x290>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a6b      	ldr	r2, [pc, #428]	@ (8006fcc <HAL_DMA_Abort_IT+0x3ac>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d045      	beq.n	8006eb0 <HAL_DMA_Abort_IT+0x290>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a69      	ldr	r2, [pc, #420]	@ (8006fd0 <HAL_DMA_Abort_IT+0x3b0>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d040      	beq.n	8006eb0 <HAL_DMA_Abort_IT+0x290>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a68      	ldr	r2, [pc, #416]	@ (8006fd4 <HAL_DMA_Abort_IT+0x3b4>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d03b      	beq.n	8006eb0 <HAL_DMA_Abort_IT+0x290>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a66      	ldr	r2, [pc, #408]	@ (8006fd8 <HAL_DMA_Abort_IT+0x3b8>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d036      	beq.n	8006eb0 <HAL_DMA_Abort_IT+0x290>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a65      	ldr	r2, [pc, #404]	@ (8006fdc <HAL_DMA_Abort_IT+0x3bc>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d031      	beq.n	8006eb0 <HAL_DMA_Abort_IT+0x290>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a63      	ldr	r2, [pc, #396]	@ (8006fe0 <HAL_DMA_Abort_IT+0x3c0>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d02c      	beq.n	8006eb0 <HAL_DMA_Abort_IT+0x290>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a62      	ldr	r2, [pc, #392]	@ (8006fe4 <HAL_DMA_Abort_IT+0x3c4>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d027      	beq.n	8006eb0 <HAL_DMA_Abort_IT+0x290>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a60      	ldr	r2, [pc, #384]	@ (8006fe8 <HAL_DMA_Abort_IT+0x3c8>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d022      	beq.n	8006eb0 <HAL_DMA_Abort_IT+0x290>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a5f      	ldr	r2, [pc, #380]	@ (8006fec <HAL_DMA_Abort_IT+0x3cc>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d01d      	beq.n	8006eb0 <HAL_DMA_Abort_IT+0x290>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a5d      	ldr	r2, [pc, #372]	@ (8006ff0 <HAL_DMA_Abort_IT+0x3d0>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d018      	beq.n	8006eb0 <HAL_DMA_Abort_IT+0x290>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a5c      	ldr	r2, [pc, #368]	@ (8006ff4 <HAL_DMA_Abort_IT+0x3d4>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d013      	beq.n	8006eb0 <HAL_DMA_Abort_IT+0x290>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a5a      	ldr	r2, [pc, #360]	@ (8006ff8 <HAL_DMA_Abort_IT+0x3d8>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d00e      	beq.n	8006eb0 <HAL_DMA_Abort_IT+0x290>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a59      	ldr	r2, [pc, #356]	@ (8006ffc <HAL_DMA_Abort_IT+0x3dc>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d009      	beq.n	8006eb0 <HAL_DMA_Abort_IT+0x290>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a57      	ldr	r2, [pc, #348]	@ (8007000 <HAL_DMA_Abort_IT+0x3e0>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d004      	beq.n	8006eb0 <HAL_DMA_Abort_IT+0x290>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a56      	ldr	r2, [pc, #344]	@ (8007004 <HAL_DMA_Abort_IT+0x3e4>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d108      	bne.n	8006ec2 <HAL_DMA_Abort_IT+0x2a2>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f022 0201 	bic.w	r2, r2, #1
 8006ebe:	601a      	str	r2, [r3, #0]
 8006ec0:	e007      	b.n	8006ed2 <HAL_DMA_Abort_IT+0x2b2>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f022 0201 	bic.w	r2, r2, #1
 8006ed0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a3c      	ldr	r2, [pc, #240]	@ (8006fc8 <HAL_DMA_Abort_IT+0x3a8>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d072      	beq.n	8006fc2 <HAL_DMA_Abort_IT+0x3a2>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a3a      	ldr	r2, [pc, #232]	@ (8006fcc <HAL_DMA_Abort_IT+0x3ac>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d06d      	beq.n	8006fc2 <HAL_DMA_Abort_IT+0x3a2>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a39      	ldr	r2, [pc, #228]	@ (8006fd0 <HAL_DMA_Abort_IT+0x3b0>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d068      	beq.n	8006fc2 <HAL_DMA_Abort_IT+0x3a2>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a37      	ldr	r2, [pc, #220]	@ (8006fd4 <HAL_DMA_Abort_IT+0x3b4>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d063      	beq.n	8006fc2 <HAL_DMA_Abort_IT+0x3a2>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a36      	ldr	r2, [pc, #216]	@ (8006fd8 <HAL_DMA_Abort_IT+0x3b8>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d05e      	beq.n	8006fc2 <HAL_DMA_Abort_IT+0x3a2>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a34      	ldr	r2, [pc, #208]	@ (8006fdc <HAL_DMA_Abort_IT+0x3bc>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d059      	beq.n	8006fc2 <HAL_DMA_Abort_IT+0x3a2>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a33      	ldr	r2, [pc, #204]	@ (8006fe0 <HAL_DMA_Abort_IT+0x3c0>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d054      	beq.n	8006fc2 <HAL_DMA_Abort_IT+0x3a2>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a31      	ldr	r2, [pc, #196]	@ (8006fe4 <HAL_DMA_Abort_IT+0x3c4>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d04f      	beq.n	8006fc2 <HAL_DMA_Abort_IT+0x3a2>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a30      	ldr	r2, [pc, #192]	@ (8006fe8 <HAL_DMA_Abort_IT+0x3c8>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d04a      	beq.n	8006fc2 <HAL_DMA_Abort_IT+0x3a2>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a2e      	ldr	r2, [pc, #184]	@ (8006fec <HAL_DMA_Abort_IT+0x3cc>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d045      	beq.n	8006fc2 <HAL_DMA_Abort_IT+0x3a2>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a2d      	ldr	r2, [pc, #180]	@ (8006ff0 <HAL_DMA_Abort_IT+0x3d0>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d040      	beq.n	8006fc2 <HAL_DMA_Abort_IT+0x3a2>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a2b      	ldr	r2, [pc, #172]	@ (8006ff4 <HAL_DMA_Abort_IT+0x3d4>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d03b      	beq.n	8006fc2 <HAL_DMA_Abort_IT+0x3a2>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a2a      	ldr	r2, [pc, #168]	@ (8006ff8 <HAL_DMA_Abort_IT+0x3d8>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d036      	beq.n	8006fc2 <HAL_DMA_Abort_IT+0x3a2>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a28      	ldr	r2, [pc, #160]	@ (8006ffc <HAL_DMA_Abort_IT+0x3dc>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d031      	beq.n	8006fc2 <HAL_DMA_Abort_IT+0x3a2>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a27      	ldr	r2, [pc, #156]	@ (8007000 <HAL_DMA_Abort_IT+0x3e0>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d02c      	beq.n	8006fc2 <HAL_DMA_Abort_IT+0x3a2>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a25      	ldr	r2, [pc, #148]	@ (8007004 <HAL_DMA_Abort_IT+0x3e4>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d027      	beq.n	8006fc2 <HAL_DMA_Abort_IT+0x3a2>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a24      	ldr	r2, [pc, #144]	@ (8007008 <HAL_DMA_Abort_IT+0x3e8>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d022      	beq.n	8006fc2 <HAL_DMA_Abort_IT+0x3a2>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a22      	ldr	r2, [pc, #136]	@ (800700c <HAL_DMA_Abort_IT+0x3ec>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d01d      	beq.n	8006fc2 <HAL_DMA_Abort_IT+0x3a2>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a21      	ldr	r2, [pc, #132]	@ (8007010 <HAL_DMA_Abort_IT+0x3f0>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d018      	beq.n	8006fc2 <HAL_DMA_Abort_IT+0x3a2>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a1f      	ldr	r2, [pc, #124]	@ (8007014 <HAL_DMA_Abort_IT+0x3f4>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d013      	beq.n	8006fc2 <HAL_DMA_Abort_IT+0x3a2>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a1e      	ldr	r2, [pc, #120]	@ (8007018 <HAL_DMA_Abort_IT+0x3f8>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d00e      	beq.n	8006fc2 <HAL_DMA_Abort_IT+0x3a2>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a1c      	ldr	r2, [pc, #112]	@ (800701c <HAL_DMA_Abort_IT+0x3fc>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d009      	beq.n	8006fc2 <HAL_DMA_Abort_IT+0x3a2>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a1b      	ldr	r2, [pc, #108]	@ (8007020 <HAL_DMA_Abort_IT+0x400>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d004      	beq.n	8006fc2 <HAL_DMA_Abort_IT+0x3a2>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a19      	ldr	r2, [pc, #100]	@ (8007024 <HAL_DMA_Abort_IT+0x404>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d132      	bne.n	8007028 <HAL_DMA_Abort_IT+0x408>
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e031      	b.n	800702a <HAL_DMA_Abort_IT+0x40a>
 8006fc6:	bf00      	nop
 8006fc8:	40020010 	.word	0x40020010
 8006fcc:	40020028 	.word	0x40020028
 8006fd0:	40020040 	.word	0x40020040
 8006fd4:	40020058 	.word	0x40020058
 8006fd8:	40020070 	.word	0x40020070
 8006fdc:	40020088 	.word	0x40020088
 8006fe0:	400200a0 	.word	0x400200a0
 8006fe4:	400200b8 	.word	0x400200b8
 8006fe8:	40020410 	.word	0x40020410
 8006fec:	40020428 	.word	0x40020428
 8006ff0:	40020440 	.word	0x40020440
 8006ff4:	40020458 	.word	0x40020458
 8006ff8:	40020470 	.word	0x40020470
 8006ffc:	40020488 	.word	0x40020488
 8007000:	400204a0 	.word	0x400204a0
 8007004:	400204b8 	.word	0x400204b8
 8007008:	58025408 	.word	0x58025408
 800700c:	5802541c 	.word	0x5802541c
 8007010:	58025430 	.word	0x58025430
 8007014:	58025444 	.word	0x58025444
 8007018:	58025458 	.word	0x58025458
 800701c:	5802546c 	.word	0x5802546c
 8007020:	58025480 	.word	0x58025480
 8007024:	58025494 	.word	0x58025494
 8007028:	2300      	movs	r3, #0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d028      	beq.n	8007080 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007038:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800703c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007042:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007048:	f003 031f 	and.w	r3, r3, #31
 800704c:	2201      	movs	r2, #1
 800704e:	409a      	lsls	r2, r3
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800705c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00c      	beq.n	8007080 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007070:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007074:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800707e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007094:	2b00      	cmp	r3, #0
 8007096:	d003      	beq.n	80070a0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop

080070ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b08a      	sub	sp, #40	@ 0x28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80070b4:	2300      	movs	r3, #0
 80070b6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80070b8:	4b67      	ldr	r3, [pc, #412]	@ (8007258 <HAL_DMA_IRQHandler+0x1ac>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a67      	ldr	r2, [pc, #412]	@ (800725c <HAL_DMA_IRQHandler+0x1b0>)
 80070be:	fba2 2303 	umull	r2, r3, r2, r3
 80070c2:	0a9b      	lsrs	r3, r3, #10
 80070c4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ca:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070d0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80070d2:	6a3b      	ldr	r3, [r7, #32]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a5f      	ldr	r2, [pc, #380]	@ (8007260 <HAL_DMA_IRQHandler+0x1b4>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d04a      	beq.n	800717e <HAL_DMA_IRQHandler+0xd2>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a5d      	ldr	r2, [pc, #372]	@ (8007264 <HAL_DMA_IRQHandler+0x1b8>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d045      	beq.n	800717e <HAL_DMA_IRQHandler+0xd2>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a5c      	ldr	r2, [pc, #368]	@ (8007268 <HAL_DMA_IRQHandler+0x1bc>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d040      	beq.n	800717e <HAL_DMA_IRQHandler+0xd2>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a5a      	ldr	r2, [pc, #360]	@ (800726c <HAL_DMA_IRQHandler+0x1c0>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d03b      	beq.n	800717e <HAL_DMA_IRQHandler+0xd2>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a59      	ldr	r2, [pc, #356]	@ (8007270 <HAL_DMA_IRQHandler+0x1c4>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d036      	beq.n	800717e <HAL_DMA_IRQHandler+0xd2>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a57      	ldr	r2, [pc, #348]	@ (8007274 <HAL_DMA_IRQHandler+0x1c8>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d031      	beq.n	800717e <HAL_DMA_IRQHandler+0xd2>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a56      	ldr	r2, [pc, #344]	@ (8007278 <HAL_DMA_IRQHandler+0x1cc>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d02c      	beq.n	800717e <HAL_DMA_IRQHandler+0xd2>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a54      	ldr	r2, [pc, #336]	@ (800727c <HAL_DMA_IRQHandler+0x1d0>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d027      	beq.n	800717e <HAL_DMA_IRQHandler+0xd2>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a53      	ldr	r2, [pc, #332]	@ (8007280 <HAL_DMA_IRQHandler+0x1d4>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d022      	beq.n	800717e <HAL_DMA_IRQHandler+0xd2>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a51      	ldr	r2, [pc, #324]	@ (8007284 <HAL_DMA_IRQHandler+0x1d8>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d01d      	beq.n	800717e <HAL_DMA_IRQHandler+0xd2>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a50      	ldr	r2, [pc, #320]	@ (8007288 <HAL_DMA_IRQHandler+0x1dc>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d018      	beq.n	800717e <HAL_DMA_IRQHandler+0xd2>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a4e      	ldr	r2, [pc, #312]	@ (800728c <HAL_DMA_IRQHandler+0x1e0>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d013      	beq.n	800717e <HAL_DMA_IRQHandler+0xd2>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a4d      	ldr	r2, [pc, #308]	@ (8007290 <HAL_DMA_IRQHandler+0x1e4>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d00e      	beq.n	800717e <HAL_DMA_IRQHandler+0xd2>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a4b      	ldr	r2, [pc, #300]	@ (8007294 <HAL_DMA_IRQHandler+0x1e8>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d009      	beq.n	800717e <HAL_DMA_IRQHandler+0xd2>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a4a      	ldr	r2, [pc, #296]	@ (8007298 <HAL_DMA_IRQHandler+0x1ec>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d004      	beq.n	800717e <HAL_DMA_IRQHandler+0xd2>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a48      	ldr	r2, [pc, #288]	@ (800729c <HAL_DMA_IRQHandler+0x1f0>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d101      	bne.n	8007182 <HAL_DMA_IRQHandler+0xd6>
 800717e:	2301      	movs	r3, #1
 8007180:	e000      	b.n	8007184 <HAL_DMA_IRQHandler+0xd8>
 8007182:	2300      	movs	r3, #0
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 842b 	beq.w	80079e0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800718e:	f003 031f 	and.w	r3, r3, #31
 8007192:	2208      	movs	r2, #8
 8007194:	409a      	lsls	r2, r3
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	4013      	ands	r3, r2
 800719a:	2b00      	cmp	r3, #0
 800719c:	f000 80a2 	beq.w	80072e4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a2e      	ldr	r2, [pc, #184]	@ (8007260 <HAL_DMA_IRQHandler+0x1b4>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d04a      	beq.n	8007240 <HAL_DMA_IRQHandler+0x194>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a2d      	ldr	r2, [pc, #180]	@ (8007264 <HAL_DMA_IRQHandler+0x1b8>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d045      	beq.n	8007240 <HAL_DMA_IRQHandler+0x194>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a2b      	ldr	r2, [pc, #172]	@ (8007268 <HAL_DMA_IRQHandler+0x1bc>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d040      	beq.n	8007240 <HAL_DMA_IRQHandler+0x194>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a2a      	ldr	r2, [pc, #168]	@ (800726c <HAL_DMA_IRQHandler+0x1c0>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d03b      	beq.n	8007240 <HAL_DMA_IRQHandler+0x194>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a28      	ldr	r2, [pc, #160]	@ (8007270 <HAL_DMA_IRQHandler+0x1c4>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d036      	beq.n	8007240 <HAL_DMA_IRQHandler+0x194>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a27      	ldr	r2, [pc, #156]	@ (8007274 <HAL_DMA_IRQHandler+0x1c8>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d031      	beq.n	8007240 <HAL_DMA_IRQHandler+0x194>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a25      	ldr	r2, [pc, #148]	@ (8007278 <HAL_DMA_IRQHandler+0x1cc>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d02c      	beq.n	8007240 <HAL_DMA_IRQHandler+0x194>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a24      	ldr	r2, [pc, #144]	@ (800727c <HAL_DMA_IRQHandler+0x1d0>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d027      	beq.n	8007240 <HAL_DMA_IRQHandler+0x194>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a22      	ldr	r2, [pc, #136]	@ (8007280 <HAL_DMA_IRQHandler+0x1d4>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d022      	beq.n	8007240 <HAL_DMA_IRQHandler+0x194>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a21      	ldr	r2, [pc, #132]	@ (8007284 <HAL_DMA_IRQHandler+0x1d8>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d01d      	beq.n	8007240 <HAL_DMA_IRQHandler+0x194>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a1f      	ldr	r2, [pc, #124]	@ (8007288 <HAL_DMA_IRQHandler+0x1dc>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d018      	beq.n	8007240 <HAL_DMA_IRQHandler+0x194>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a1e      	ldr	r2, [pc, #120]	@ (800728c <HAL_DMA_IRQHandler+0x1e0>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d013      	beq.n	8007240 <HAL_DMA_IRQHandler+0x194>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a1c      	ldr	r2, [pc, #112]	@ (8007290 <HAL_DMA_IRQHandler+0x1e4>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d00e      	beq.n	8007240 <HAL_DMA_IRQHandler+0x194>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a1b      	ldr	r2, [pc, #108]	@ (8007294 <HAL_DMA_IRQHandler+0x1e8>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d009      	beq.n	8007240 <HAL_DMA_IRQHandler+0x194>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a19      	ldr	r2, [pc, #100]	@ (8007298 <HAL_DMA_IRQHandler+0x1ec>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d004      	beq.n	8007240 <HAL_DMA_IRQHandler+0x194>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a18      	ldr	r2, [pc, #96]	@ (800729c <HAL_DMA_IRQHandler+0x1f0>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d12f      	bne.n	80072a0 <HAL_DMA_IRQHandler+0x1f4>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 0304 	and.w	r3, r3, #4
 800724a:	2b00      	cmp	r3, #0
 800724c:	bf14      	ite	ne
 800724e:	2301      	movne	r3, #1
 8007250:	2300      	moveq	r3, #0
 8007252:	b2db      	uxtb	r3, r3
 8007254:	e02e      	b.n	80072b4 <HAL_DMA_IRQHandler+0x208>
 8007256:	bf00      	nop
 8007258:	240000c0 	.word	0x240000c0
 800725c:	1b4e81b5 	.word	0x1b4e81b5
 8007260:	40020010 	.word	0x40020010
 8007264:	40020028 	.word	0x40020028
 8007268:	40020040 	.word	0x40020040
 800726c:	40020058 	.word	0x40020058
 8007270:	40020070 	.word	0x40020070
 8007274:	40020088 	.word	0x40020088
 8007278:	400200a0 	.word	0x400200a0
 800727c:	400200b8 	.word	0x400200b8
 8007280:	40020410 	.word	0x40020410
 8007284:	40020428 	.word	0x40020428
 8007288:	40020440 	.word	0x40020440
 800728c:	40020458 	.word	0x40020458
 8007290:	40020470 	.word	0x40020470
 8007294:	40020488 	.word	0x40020488
 8007298:	400204a0 	.word	0x400204a0
 800729c:	400204b8 	.word	0x400204b8
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 0308 	and.w	r3, r3, #8
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	bf14      	ite	ne
 80072ae:	2301      	movne	r3, #1
 80072b0:	2300      	moveq	r3, #0
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d015      	beq.n	80072e4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f022 0204 	bic.w	r2, r2, #4
 80072c6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072cc:	f003 031f 	and.w	r3, r3, #31
 80072d0:	2208      	movs	r2, #8
 80072d2:	409a      	lsls	r2, r3
 80072d4:	6a3b      	ldr	r3, [r7, #32]
 80072d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072dc:	f043 0201 	orr.w	r2, r3, #1
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072e8:	f003 031f 	and.w	r3, r3, #31
 80072ec:	69ba      	ldr	r2, [r7, #24]
 80072ee:	fa22 f303 	lsr.w	r3, r2, r3
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d06e      	beq.n	80073d8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a69      	ldr	r2, [pc, #420]	@ (80074a4 <HAL_DMA_IRQHandler+0x3f8>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d04a      	beq.n	800739a <HAL_DMA_IRQHandler+0x2ee>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a67      	ldr	r2, [pc, #412]	@ (80074a8 <HAL_DMA_IRQHandler+0x3fc>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d045      	beq.n	800739a <HAL_DMA_IRQHandler+0x2ee>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a66      	ldr	r2, [pc, #408]	@ (80074ac <HAL_DMA_IRQHandler+0x400>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d040      	beq.n	800739a <HAL_DMA_IRQHandler+0x2ee>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a64      	ldr	r2, [pc, #400]	@ (80074b0 <HAL_DMA_IRQHandler+0x404>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d03b      	beq.n	800739a <HAL_DMA_IRQHandler+0x2ee>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a63      	ldr	r2, [pc, #396]	@ (80074b4 <HAL_DMA_IRQHandler+0x408>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d036      	beq.n	800739a <HAL_DMA_IRQHandler+0x2ee>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a61      	ldr	r2, [pc, #388]	@ (80074b8 <HAL_DMA_IRQHandler+0x40c>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d031      	beq.n	800739a <HAL_DMA_IRQHandler+0x2ee>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a60      	ldr	r2, [pc, #384]	@ (80074bc <HAL_DMA_IRQHandler+0x410>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d02c      	beq.n	800739a <HAL_DMA_IRQHandler+0x2ee>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a5e      	ldr	r2, [pc, #376]	@ (80074c0 <HAL_DMA_IRQHandler+0x414>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d027      	beq.n	800739a <HAL_DMA_IRQHandler+0x2ee>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a5d      	ldr	r2, [pc, #372]	@ (80074c4 <HAL_DMA_IRQHandler+0x418>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d022      	beq.n	800739a <HAL_DMA_IRQHandler+0x2ee>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a5b      	ldr	r2, [pc, #364]	@ (80074c8 <HAL_DMA_IRQHandler+0x41c>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d01d      	beq.n	800739a <HAL_DMA_IRQHandler+0x2ee>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a5a      	ldr	r2, [pc, #360]	@ (80074cc <HAL_DMA_IRQHandler+0x420>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d018      	beq.n	800739a <HAL_DMA_IRQHandler+0x2ee>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a58      	ldr	r2, [pc, #352]	@ (80074d0 <HAL_DMA_IRQHandler+0x424>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d013      	beq.n	800739a <HAL_DMA_IRQHandler+0x2ee>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a57      	ldr	r2, [pc, #348]	@ (80074d4 <HAL_DMA_IRQHandler+0x428>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d00e      	beq.n	800739a <HAL_DMA_IRQHandler+0x2ee>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a55      	ldr	r2, [pc, #340]	@ (80074d8 <HAL_DMA_IRQHandler+0x42c>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d009      	beq.n	800739a <HAL_DMA_IRQHandler+0x2ee>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a54      	ldr	r2, [pc, #336]	@ (80074dc <HAL_DMA_IRQHandler+0x430>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d004      	beq.n	800739a <HAL_DMA_IRQHandler+0x2ee>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a52      	ldr	r2, [pc, #328]	@ (80074e0 <HAL_DMA_IRQHandler+0x434>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d10a      	bne.n	80073b0 <HAL_DMA_IRQHandler+0x304>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	695b      	ldr	r3, [r3, #20]
 80073a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	bf14      	ite	ne
 80073a8:	2301      	movne	r3, #1
 80073aa:	2300      	moveq	r3, #0
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	e003      	b.n	80073b8 <HAL_DMA_IRQHandler+0x30c>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2300      	movs	r3, #0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00d      	beq.n	80073d8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073c0:	f003 031f 	and.w	r3, r3, #31
 80073c4:	2201      	movs	r2, #1
 80073c6:	409a      	lsls	r2, r3
 80073c8:	6a3b      	ldr	r3, [r7, #32]
 80073ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073d0:	f043 0202 	orr.w	r2, r3, #2
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073dc:	f003 031f 	and.w	r3, r3, #31
 80073e0:	2204      	movs	r2, #4
 80073e2:	409a      	lsls	r2, r3
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	4013      	ands	r3, r2
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f000 808f 	beq.w	800750c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a2c      	ldr	r2, [pc, #176]	@ (80074a4 <HAL_DMA_IRQHandler+0x3f8>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d04a      	beq.n	800748e <HAL_DMA_IRQHandler+0x3e2>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a2a      	ldr	r2, [pc, #168]	@ (80074a8 <HAL_DMA_IRQHandler+0x3fc>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d045      	beq.n	800748e <HAL_DMA_IRQHandler+0x3e2>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a29      	ldr	r2, [pc, #164]	@ (80074ac <HAL_DMA_IRQHandler+0x400>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d040      	beq.n	800748e <HAL_DMA_IRQHandler+0x3e2>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a27      	ldr	r2, [pc, #156]	@ (80074b0 <HAL_DMA_IRQHandler+0x404>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d03b      	beq.n	800748e <HAL_DMA_IRQHandler+0x3e2>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a26      	ldr	r2, [pc, #152]	@ (80074b4 <HAL_DMA_IRQHandler+0x408>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d036      	beq.n	800748e <HAL_DMA_IRQHandler+0x3e2>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a24      	ldr	r2, [pc, #144]	@ (80074b8 <HAL_DMA_IRQHandler+0x40c>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d031      	beq.n	800748e <HAL_DMA_IRQHandler+0x3e2>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a23      	ldr	r2, [pc, #140]	@ (80074bc <HAL_DMA_IRQHandler+0x410>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d02c      	beq.n	800748e <HAL_DMA_IRQHandler+0x3e2>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a21      	ldr	r2, [pc, #132]	@ (80074c0 <HAL_DMA_IRQHandler+0x414>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d027      	beq.n	800748e <HAL_DMA_IRQHandler+0x3e2>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a20      	ldr	r2, [pc, #128]	@ (80074c4 <HAL_DMA_IRQHandler+0x418>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d022      	beq.n	800748e <HAL_DMA_IRQHandler+0x3e2>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a1e      	ldr	r2, [pc, #120]	@ (80074c8 <HAL_DMA_IRQHandler+0x41c>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d01d      	beq.n	800748e <HAL_DMA_IRQHandler+0x3e2>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a1d      	ldr	r2, [pc, #116]	@ (80074cc <HAL_DMA_IRQHandler+0x420>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d018      	beq.n	800748e <HAL_DMA_IRQHandler+0x3e2>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a1b      	ldr	r2, [pc, #108]	@ (80074d0 <HAL_DMA_IRQHandler+0x424>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d013      	beq.n	800748e <HAL_DMA_IRQHandler+0x3e2>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a1a      	ldr	r2, [pc, #104]	@ (80074d4 <HAL_DMA_IRQHandler+0x428>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d00e      	beq.n	800748e <HAL_DMA_IRQHandler+0x3e2>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a18      	ldr	r2, [pc, #96]	@ (80074d8 <HAL_DMA_IRQHandler+0x42c>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d009      	beq.n	800748e <HAL_DMA_IRQHandler+0x3e2>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a17      	ldr	r2, [pc, #92]	@ (80074dc <HAL_DMA_IRQHandler+0x430>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d004      	beq.n	800748e <HAL_DMA_IRQHandler+0x3e2>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a15      	ldr	r2, [pc, #84]	@ (80074e0 <HAL_DMA_IRQHandler+0x434>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d12a      	bne.n	80074e4 <HAL_DMA_IRQHandler+0x438>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 0302 	and.w	r3, r3, #2
 8007498:	2b00      	cmp	r3, #0
 800749a:	bf14      	ite	ne
 800749c:	2301      	movne	r3, #1
 800749e:	2300      	moveq	r3, #0
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	e023      	b.n	80074ec <HAL_DMA_IRQHandler+0x440>
 80074a4:	40020010 	.word	0x40020010
 80074a8:	40020028 	.word	0x40020028
 80074ac:	40020040 	.word	0x40020040
 80074b0:	40020058 	.word	0x40020058
 80074b4:	40020070 	.word	0x40020070
 80074b8:	40020088 	.word	0x40020088
 80074bc:	400200a0 	.word	0x400200a0
 80074c0:	400200b8 	.word	0x400200b8
 80074c4:	40020410 	.word	0x40020410
 80074c8:	40020428 	.word	0x40020428
 80074cc:	40020440 	.word	0x40020440
 80074d0:	40020458 	.word	0x40020458
 80074d4:	40020470 	.word	0x40020470
 80074d8:	40020488 	.word	0x40020488
 80074dc:	400204a0 	.word	0x400204a0
 80074e0:	400204b8 	.word	0x400204b8
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2300      	movs	r3, #0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00d      	beq.n	800750c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074f4:	f003 031f 	and.w	r3, r3, #31
 80074f8:	2204      	movs	r2, #4
 80074fa:	409a      	lsls	r2, r3
 80074fc:	6a3b      	ldr	r3, [r7, #32]
 80074fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007504:	f043 0204 	orr.w	r2, r3, #4
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007510:	f003 031f 	and.w	r3, r3, #31
 8007514:	2210      	movs	r2, #16
 8007516:	409a      	lsls	r2, r3
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	4013      	ands	r3, r2
 800751c:	2b00      	cmp	r3, #0
 800751e:	f000 80a6 	beq.w	800766e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a85      	ldr	r2, [pc, #532]	@ (800773c <HAL_DMA_IRQHandler+0x690>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d04a      	beq.n	80075c2 <HAL_DMA_IRQHandler+0x516>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a83      	ldr	r2, [pc, #524]	@ (8007740 <HAL_DMA_IRQHandler+0x694>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d045      	beq.n	80075c2 <HAL_DMA_IRQHandler+0x516>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a82      	ldr	r2, [pc, #520]	@ (8007744 <HAL_DMA_IRQHandler+0x698>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d040      	beq.n	80075c2 <HAL_DMA_IRQHandler+0x516>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a80      	ldr	r2, [pc, #512]	@ (8007748 <HAL_DMA_IRQHandler+0x69c>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d03b      	beq.n	80075c2 <HAL_DMA_IRQHandler+0x516>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a7f      	ldr	r2, [pc, #508]	@ (800774c <HAL_DMA_IRQHandler+0x6a0>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d036      	beq.n	80075c2 <HAL_DMA_IRQHandler+0x516>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a7d      	ldr	r2, [pc, #500]	@ (8007750 <HAL_DMA_IRQHandler+0x6a4>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d031      	beq.n	80075c2 <HAL_DMA_IRQHandler+0x516>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a7c      	ldr	r2, [pc, #496]	@ (8007754 <HAL_DMA_IRQHandler+0x6a8>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d02c      	beq.n	80075c2 <HAL_DMA_IRQHandler+0x516>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a7a      	ldr	r2, [pc, #488]	@ (8007758 <HAL_DMA_IRQHandler+0x6ac>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d027      	beq.n	80075c2 <HAL_DMA_IRQHandler+0x516>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a79      	ldr	r2, [pc, #484]	@ (800775c <HAL_DMA_IRQHandler+0x6b0>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d022      	beq.n	80075c2 <HAL_DMA_IRQHandler+0x516>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a77      	ldr	r2, [pc, #476]	@ (8007760 <HAL_DMA_IRQHandler+0x6b4>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d01d      	beq.n	80075c2 <HAL_DMA_IRQHandler+0x516>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a76      	ldr	r2, [pc, #472]	@ (8007764 <HAL_DMA_IRQHandler+0x6b8>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d018      	beq.n	80075c2 <HAL_DMA_IRQHandler+0x516>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a74      	ldr	r2, [pc, #464]	@ (8007768 <HAL_DMA_IRQHandler+0x6bc>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d013      	beq.n	80075c2 <HAL_DMA_IRQHandler+0x516>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a73      	ldr	r2, [pc, #460]	@ (800776c <HAL_DMA_IRQHandler+0x6c0>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d00e      	beq.n	80075c2 <HAL_DMA_IRQHandler+0x516>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a71      	ldr	r2, [pc, #452]	@ (8007770 <HAL_DMA_IRQHandler+0x6c4>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d009      	beq.n	80075c2 <HAL_DMA_IRQHandler+0x516>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a70      	ldr	r2, [pc, #448]	@ (8007774 <HAL_DMA_IRQHandler+0x6c8>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d004      	beq.n	80075c2 <HAL_DMA_IRQHandler+0x516>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a6e      	ldr	r2, [pc, #440]	@ (8007778 <HAL_DMA_IRQHandler+0x6cc>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d10a      	bne.n	80075d8 <HAL_DMA_IRQHandler+0x52c>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 0308 	and.w	r3, r3, #8
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	bf14      	ite	ne
 80075d0:	2301      	movne	r3, #1
 80075d2:	2300      	moveq	r3, #0
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	e009      	b.n	80075ec <HAL_DMA_IRQHandler+0x540>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 0304 	and.w	r3, r3, #4
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	bf14      	ite	ne
 80075e6:	2301      	movne	r3, #1
 80075e8:	2300      	moveq	r3, #0
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d03e      	beq.n	800766e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075f4:	f003 031f 	and.w	r3, r3, #31
 80075f8:	2210      	movs	r2, #16
 80075fa:	409a      	lsls	r2, r3
 80075fc:	6a3b      	ldr	r3, [r7, #32]
 80075fe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800760a:	2b00      	cmp	r3, #0
 800760c:	d018      	beq.n	8007640 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d108      	bne.n	800762e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007620:	2b00      	cmp	r3, #0
 8007622:	d024      	beq.n	800766e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	4798      	blx	r3
 800762c:	e01f      	b.n	800766e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007632:	2b00      	cmp	r3, #0
 8007634:	d01b      	beq.n	800766e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	4798      	blx	r3
 800763e:	e016      	b.n	800766e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800764a:	2b00      	cmp	r3, #0
 800764c:	d107      	bne.n	800765e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f022 0208 	bic.w	r2, r2, #8
 800765c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007662:	2b00      	cmp	r3, #0
 8007664:	d003      	beq.n	800766e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007672:	f003 031f 	and.w	r3, r3, #31
 8007676:	2220      	movs	r2, #32
 8007678:	409a      	lsls	r2, r3
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	4013      	ands	r3, r2
 800767e:	2b00      	cmp	r3, #0
 8007680:	f000 8110 	beq.w	80078a4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a2c      	ldr	r2, [pc, #176]	@ (800773c <HAL_DMA_IRQHandler+0x690>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d04a      	beq.n	8007724 <HAL_DMA_IRQHandler+0x678>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a2b      	ldr	r2, [pc, #172]	@ (8007740 <HAL_DMA_IRQHandler+0x694>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d045      	beq.n	8007724 <HAL_DMA_IRQHandler+0x678>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a29      	ldr	r2, [pc, #164]	@ (8007744 <HAL_DMA_IRQHandler+0x698>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d040      	beq.n	8007724 <HAL_DMA_IRQHandler+0x678>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a28      	ldr	r2, [pc, #160]	@ (8007748 <HAL_DMA_IRQHandler+0x69c>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d03b      	beq.n	8007724 <HAL_DMA_IRQHandler+0x678>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a26      	ldr	r2, [pc, #152]	@ (800774c <HAL_DMA_IRQHandler+0x6a0>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d036      	beq.n	8007724 <HAL_DMA_IRQHandler+0x678>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a25      	ldr	r2, [pc, #148]	@ (8007750 <HAL_DMA_IRQHandler+0x6a4>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d031      	beq.n	8007724 <HAL_DMA_IRQHandler+0x678>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a23      	ldr	r2, [pc, #140]	@ (8007754 <HAL_DMA_IRQHandler+0x6a8>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d02c      	beq.n	8007724 <HAL_DMA_IRQHandler+0x678>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a22      	ldr	r2, [pc, #136]	@ (8007758 <HAL_DMA_IRQHandler+0x6ac>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d027      	beq.n	8007724 <HAL_DMA_IRQHandler+0x678>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a20      	ldr	r2, [pc, #128]	@ (800775c <HAL_DMA_IRQHandler+0x6b0>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d022      	beq.n	8007724 <HAL_DMA_IRQHandler+0x678>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a1f      	ldr	r2, [pc, #124]	@ (8007760 <HAL_DMA_IRQHandler+0x6b4>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d01d      	beq.n	8007724 <HAL_DMA_IRQHandler+0x678>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a1d      	ldr	r2, [pc, #116]	@ (8007764 <HAL_DMA_IRQHandler+0x6b8>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d018      	beq.n	8007724 <HAL_DMA_IRQHandler+0x678>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a1c      	ldr	r2, [pc, #112]	@ (8007768 <HAL_DMA_IRQHandler+0x6bc>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d013      	beq.n	8007724 <HAL_DMA_IRQHandler+0x678>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a1a      	ldr	r2, [pc, #104]	@ (800776c <HAL_DMA_IRQHandler+0x6c0>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d00e      	beq.n	8007724 <HAL_DMA_IRQHandler+0x678>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a19      	ldr	r2, [pc, #100]	@ (8007770 <HAL_DMA_IRQHandler+0x6c4>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d009      	beq.n	8007724 <HAL_DMA_IRQHandler+0x678>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a17      	ldr	r2, [pc, #92]	@ (8007774 <HAL_DMA_IRQHandler+0x6c8>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d004      	beq.n	8007724 <HAL_DMA_IRQHandler+0x678>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a16      	ldr	r2, [pc, #88]	@ (8007778 <HAL_DMA_IRQHandler+0x6cc>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d12b      	bne.n	800777c <HAL_DMA_IRQHandler+0x6d0>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 0310 	and.w	r3, r3, #16
 800772e:	2b00      	cmp	r3, #0
 8007730:	bf14      	ite	ne
 8007732:	2301      	movne	r3, #1
 8007734:	2300      	moveq	r3, #0
 8007736:	b2db      	uxtb	r3, r3
 8007738:	e02a      	b.n	8007790 <HAL_DMA_IRQHandler+0x6e4>
 800773a:	bf00      	nop
 800773c:	40020010 	.word	0x40020010
 8007740:	40020028 	.word	0x40020028
 8007744:	40020040 	.word	0x40020040
 8007748:	40020058 	.word	0x40020058
 800774c:	40020070 	.word	0x40020070
 8007750:	40020088 	.word	0x40020088
 8007754:	400200a0 	.word	0x400200a0
 8007758:	400200b8 	.word	0x400200b8
 800775c:	40020410 	.word	0x40020410
 8007760:	40020428 	.word	0x40020428
 8007764:	40020440 	.word	0x40020440
 8007768:	40020458 	.word	0x40020458
 800776c:	40020470 	.word	0x40020470
 8007770:	40020488 	.word	0x40020488
 8007774:	400204a0 	.word	0x400204a0
 8007778:	400204b8 	.word	0x400204b8
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 0302 	and.w	r3, r3, #2
 8007786:	2b00      	cmp	r3, #0
 8007788:	bf14      	ite	ne
 800778a:	2301      	movne	r3, #1
 800778c:	2300      	moveq	r3, #0
 800778e:	b2db      	uxtb	r3, r3
 8007790:	2b00      	cmp	r3, #0
 8007792:	f000 8087 	beq.w	80078a4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800779a:	f003 031f 	and.w	r3, r3, #31
 800779e:	2220      	movs	r2, #32
 80077a0:	409a      	lsls	r2, r3
 80077a2:	6a3b      	ldr	r3, [r7, #32]
 80077a4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b04      	cmp	r3, #4
 80077b0:	d139      	bne.n	8007826 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f022 0216 	bic.w	r2, r2, #22
 80077c0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	695a      	ldr	r2, [r3, #20]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80077d0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d103      	bne.n	80077e2 <HAL_DMA_IRQHandler+0x736>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d007      	beq.n	80077f2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f022 0208 	bic.w	r2, r2, #8
 80077f0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077f6:	f003 031f 	and.w	r3, r3, #31
 80077fa:	223f      	movs	r2, #63	@ 0x3f
 80077fc:	409a      	lsls	r2, r3
 80077fe:	6a3b      	ldr	r3, [r7, #32]
 8007800:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2201      	movs	r2, #1
 8007806:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007816:	2b00      	cmp	r3, #0
 8007818:	f000 8382 	beq.w	8007f20 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	4798      	blx	r3
          }
          return;
 8007824:	e37c      	b.n	8007f20 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007830:	2b00      	cmp	r3, #0
 8007832:	d018      	beq.n	8007866 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d108      	bne.n	8007854 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007846:	2b00      	cmp	r3, #0
 8007848:	d02c      	beq.n	80078a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	4798      	blx	r3
 8007852:	e027      	b.n	80078a4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007858:	2b00      	cmp	r3, #0
 800785a:	d023      	beq.n	80078a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	4798      	blx	r3
 8007864:	e01e      	b.n	80078a4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007870:	2b00      	cmp	r3, #0
 8007872:	d10f      	bne.n	8007894 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f022 0210 	bic.w	r2, r2, #16
 8007882:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007898:	2b00      	cmp	r3, #0
 800789a:	d003      	beq.n	80078a4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f000 833e 	beq.w	8007f2a <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078b2:	f003 0301 	and.w	r3, r3, #1
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	f000 8088 	beq.w	80079cc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2204      	movs	r2, #4
 80078c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a89      	ldr	r2, [pc, #548]	@ (8007af0 <HAL_DMA_IRQHandler+0xa44>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d04a      	beq.n	8007964 <HAL_DMA_IRQHandler+0x8b8>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a88      	ldr	r2, [pc, #544]	@ (8007af4 <HAL_DMA_IRQHandler+0xa48>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d045      	beq.n	8007964 <HAL_DMA_IRQHandler+0x8b8>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a86      	ldr	r2, [pc, #536]	@ (8007af8 <HAL_DMA_IRQHandler+0xa4c>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d040      	beq.n	8007964 <HAL_DMA_IRQHandler+0x8b8>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a85      	ldr	r2, [pc, #532]	@ (8007afc <HAL_DMA_IRQHandler+0xa50>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d03b      	beq.n	8007964 <HAL_DMA_IRQHandler+0x8b8>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a83      	ldr	r2, [pc, #524]	@ (8007b00 <HAL_DMA_IRQHandler+0xa54>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d036      	beq.n	8007964 <HAL_DMA_IRQHandler+0x8b8>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a82      	ldr	r2, [pc, #520]	@ (8007b04 <HAL_DMA_IRQHandler+0xa58>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d031      	beq.n	8007964 <HAL_DMA_IRQHandler+0x8b8>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a80      	ldr	r2, [pc, #512]	@ (8007b08 <HAL_DMA_IRQHandler+0xa5c>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d02c      	beq.n	8007964 <HAL_DMA_IRQHandler+0x8b8>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a7f      	ldr	r2, [pc, #508]	@ (8007b0c <HAL_DMA_IRQHandler+0xa60>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d027      	beq.n	8007964 <HAL_DMA_IRQHandler+0x8b8>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a7d      	ldr	r2, [pc, #500]	@ (8007b10 <HAL_DMA_IRQHandler+0xa64>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d022      	beq.n	8007964 <HAL_DMA_IRQHandler+0x8b8>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a7c      	ldr	r2, [pc, #496]	@ (8007b14 <HAL_DMA_IRQHandler+0xa68>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d01d      	beq.n	8007964 <HAL_DMA_IRQHandler+0x8b8>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a7a      	ldr	r2, [pc, #488]	@ (8007b18 <HAL_DMA_IRQHandler+0xa6c>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d018      	beq.n	8007964 <HAL_DMA_IRQHandler+0x8b8>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a79      	ldr	r2, [pc, #484]	@ (8007b1c <HAL_DMA_IRQHandler+0xa70>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d013      	beq.n	8007964 <HAL_DMA_IRQHandler+0x8b8>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a77      	ldr	r2, [pc, #476]	@ (8007b20 <HAL_DMA_IRQHandler+0xa74>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d00e      	beq.n	8007964 <HAL_DMA_IRQHandler+0x8b8>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a76      	ldr	r2, [pc, #472]	@ (8007b24 <HAL_DMA_IRQHandler+0xa78>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d009      	beq.n	8007964 <HAL_DMA_IRQHandler+0x8b8>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a74      	ldr	r2, [pc, #464]	@ (8007b28 <HAL_DMA_IRQHandler+0xa7c>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d004      	beq.n	8007964 <HAL_DMA_IRQHandler+0x8b8>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a73      	ldr	r2, [pc, #460]	@ (8007b2c <HAL_DMA_IRQHandler+0xa80>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d108      	bne.n	8007976 <HAL_DMA_IRQHandler+0x8ca>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f022 0201 	bic.w	r2, r2, #1
 8007972:	601a      	str	r2, [r3, #0]
 8007974:	e007      	b.n	8007986 <HAL_DMA_IRQHandler+0x8da>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f022 0201 	bic.w	r2, r2, #1
 8007984:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	3301      	adds	r3, #1
 800798a:	60fb      	str	r3, [r7, #12]
 800798c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800798e:	429a      	cmp	r2, r3
 8007990:	d307      	bcc.n	80079a2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 0301 	and.w	r3, r3, #1
 800799c:	2b00      	cmp	r3, #0
 800799e:	d1f2      	bne.n	8007986 <HAL_DMA_IRQHandler+0x8da>
 80079a0:	e000      	b.n	80079a4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80079a2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 0301 	and.w	r3, r3, #1
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d004      	beq.n	80079bc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2203      	movs	r2, #3
 80079b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80079ba:	e003      	b.n	80079c4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f000 82aa 	beq.w	8007f2a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	4798      	blx	r3
 80079de:	e2a4      	b.n	8007f2a <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a52      	ldr	r2, [pc, #328]	@ (8007b30 <HAL_DMA_IRQHandler+0xa84>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d04a      	beq.n	8007a80 <HAL_DMA_IRQHandler+0x9d4>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a51      	ldr	r2, [pc, #324]	@ (8007b34 <HAL_DMA_IRQHandler+0xa88>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d045      	beq.n	8007a80 <HAL_DMA_IRQHandler+0x9d4>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a4f      	ldr	r2, [pc, #316]	@ (8007b38 <HAL_DMA_IRQHandler+0xa8c>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d040      	beq.n	8007a80 <HAL_DMA_IRQHandler+0x9d4>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a4e      	ldr	r2, [pc, #312]	@ (8007b3c <HAL_DMA_IRQHandler+0xa90>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d03b      	beq.n	8007a80 <HAL_DMA_IRQHandler+0x9d4>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a4c      	ldr	r2, [pc, #304]	@ (8007b40 <HAL_DMA_IRQHandler+0xa94>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d036      	beq.n	8007a80 <HAL_DMA_IRQHandler+0x9d4>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a4b      	ldr	r2, [pc, #300]	@ (8007b44 <HAL_DMA_IRQHandler+0xa98>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d031      	beq.n	8007a80 <HAL_DMA_IRQHandler+0x9d4>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a49      	ldr	r2, [pc, #292]	@ (8007b48 <HAL_DMA_IRQHandler+0xa9c>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d02c      	beq.n	8007a80 <HAL_DMA_IRQHandler+0x9d4>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a48      	ldr	r2, [pc, #288]	@ (8007b4c <HAL_DMA_IRQHandler+0xaa0>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d027      	beq.n	8007a80 <HAL_DMA_IRQHandler+0x9d4>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a46      	ldr	r2, [pc, #280]	@ (8007b50 <HAL_DMA_IRQHandler+0xaa4>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d022      	beq.n	8007a80 <HAL_DMA_IRQHandler+0x9d4>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a45      	ldr	r2, [pc, #276]	@ (8007b54 <HAL_DMA_IRQHandler+0xaa8>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d01d      	beq.n	8007a80 <HAL_DMA_IRQHandler+0x9d4>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a43      	ldr	r2, [pc, #268]	@ (8007b58 <HAL_DMA_IRQHandler+0xaac>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d018      	beq.n	8007a80 <HAL_DMA_IRQHandler+0x9d4>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a42      	ldr	r2, [pc, #264]	@ (8007b5c <HAL_DMA_IRQHandler+0xab0>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d013      	beq.n	8007a80 <HAL_DMA_IRQHandler+0x9d4>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a40      	ldr	r2, [pc, #256]	@ (8007b60 <HAL_DMA_IRQHandler+0xab4>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d00e      	beq.n	8007a80 <HAL_DMA_IRQHandler+0x9d4>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a3f      	ldr	r2, [pc, #252]	@ (8007b64 <HAL_DMA_IRQHandler+0xab8>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d009      	beq.n	8007a80 <HAL_DMA_IRQHandler+0x9d4>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a3d      	ldr	r2, [pc, #244]	@ (8007b68 <HAL_DMA_IRQHandler+0xabc>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d004      	beq.n	8007a80 <HAL_DMA_IRQHandler+0x9d4>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a3c      	ldr	r2, [pc, #240]	@ (8007b6c <HAL_DMA_IRQHandler+0xac0>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d101      	bne.n	8007a84 <HAL_DMA_IRQHandler+0x9d8>
 8007a80:	2301      	movs	r3, #1
 8007a82:	e000      	b.n	8007a86 <HAL_DMA_IRQHandler+0x9da>
 8007a84:	2300      	movs	r3, #0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f000 824f 	beq.w	8007f2a <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a98:	f003 031f 	and.w	r3, r3, #31
 8007a9c:	2204      	movs	r2, #4
 8007a9e:	409a      	lsls	r2, r3
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	f000 80dd 	beq.w	8007c64 <HAL_DMA_IRQHandler+0xbb8>
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	f003 0304 	and.w	r3, r3, #4
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f000 80d7 	beq.w	8007c64 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007aba:	f003 031f 	and.w	r3, r3, #31
 8007abe:	2204      	movs	r2, #4
 8007ac0:	409a      	lsls	r2, r3
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d059      	beq.n	8007b84 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d14a      	bne.n	8007b70 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f000 8220 	beq.w	8007f24 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007aec:	e21a      	b.n	8007f24 <HAL_DMA_IRQHandler+0xe78>
 8007aee:	bf00      	nop
 8007af0:	40020010 	.word	0x40020010
 8007af4:	40020028 	.word	0x40020028
 8007af8:	40020040 	.word	0x40020040
 8007afc:	40020058 	.word	0x40020058
 8007b00:	40020070 	.word	0x40020070
 8007b04:	40020088 	.word	0x40020088
 8007b08:	400200a0 	.word	0x400200a0
 8007b0c:	400200b8 	.word	0x400200b8
 8007b10:	40020410 	.word	0x40020410
 8007b14:	40020428 	.word	0x40020428
 8007b18:	40020440 	.word	0x40020440
 8007b1c:	40020458 	.word	0x40020458
 8007b20:	40020470 	.word	0x40020470
 8007b24:	40020488 	.word	0x40020488
 8007b28:	400204a0 	.word	0x400204a0
 8007b2c:	400204b8 	.word	0x400204b8
 8007b30:	48022c08 	.word	0x48022c08
 8007b34:	48022c1c 	.word	0x48022c1c
 8007b38:	48022c30 	.word	0x48022c30
 8007b3c:	48022c44 	.word	0x48022c44
 8007b40:	48022c58 	.word	0x48022c58
 8007b44:	48022c6c 	.word	0x48022c6c
 8007b48:	48022c80 	.word	0x48022c80
 8007b4c:	48022c94 	.word	0x48022c94
 8007b50:	58025408 	.word	0x58025408
 8007b54:	5802541c 	.word	0x5802541c
 8007b58:	58025430 	.word	0x58025430
 8007b5c:	58025444 	.word	0x58025444
 8007b60:	58025458 	.word	0x58025458
 8007b64:	5802546c 	.word	0x5802546c
 8007b68:	58025480 	.word	0x58025480
 8007b6c:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f000 81d5 	beq.w	8007f24 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b82:	e1cf      	b.n	8007f24 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	f003 0320 	and.w	r3, r3, #32
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d160      	bne.n	8007c50 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a7f      	ldr	r2, [pc, #508]	@ (8007d90 <HAL_DMA_IRQHandler+0xce4>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d04a      	beq.n	8007c2e <HAL_DMA_IRQHandler+0xb82>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a7d      	ldr	r2, [pc, #500]	@ (8007d94 <HAL_DMA_IRQHandler+0xce8>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d045      	beq.n	8007c2e <HAL_DMA_IRQHandler+0xb82>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a7c      	ldr	r2, [pc, #496]	@ (8007d98 <HAL_DMA_IRQHandler+0xcec>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d040      	beq.n	8007c2e <HAL_DMA_IRQHandler+0xb82>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a7a      	ldr	r2, [pc, #488]	@ (8007d9c <HAL_DMA_IRQHandler+0xcf0>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d03b      	beq.n	8007c2e <HAL_DMA_IRQHandler+0xb82>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a79      	ldr	r2, [pc, #484]	@ (8007da0 <HAL_DMA_IRQHandler+0xcf4>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d036      	beq.n	8007c2e <HAL_DMA_IRQHandler+0xb82>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a77      	ldr	r2, [pc, #476]	@ (8007da4 <HAL_DMA_IRQHandler+0xcf8>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d031      	beq.n	8007c2e <HAL_DMA_IRQHandler+0xb82>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a76      	ldr	r2, [pc, #472]	@ (8007da8 <HAL_DMA_IRQHandler+0xcfc>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d02c      	beq.n	8007c2e <HAL_DMA_IRQHandler+0xb82>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a74      	ldr	r2, [pc, #464]	@ (8007dac <HAL_DMA_IRQHandler+0xd00>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d027      	beq.n	8007c2e <HAL_DMA_IRQHandler+0xb82>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a73      	ldr	r2, [pc, #460]	@ (8007db0 <HAL_DMA_IRQHandler+0xd04>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d022      	beq.n	8007c2e <HAL_DMA_IRQHandler+0xb82>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a71      	ldr	r2, [pc, #452]	@ (8007db4 <HAL_DMA_IRQHandler+0xd08>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d01d      	beq.n	8007c2e <HAL_DMA_IRQHandler+0xb82>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a70      	ldr	r2, [pc, #448]	@ (8007db8 <HAL_DMA_IRQHandler+0xd0c>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d018      	beq.n	8007c2e <HAL_DMA_IRQHandler+0xb82>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a6e      	ldr	r2, [pc, #440]	@ (8007dbc <HAL_DMA_IRQHandler+0xd10>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d013      	beq.n	8007c2e <HAL_DMA_IRQHandler+0xb82>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a6d      	ldr	r2, [pc, #436]	@ (8007dc0 <HAL_DMA_IRQHandler+0xd14>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d00e      	beq.n	8007c2e <HAL_DMA_IRQHandler+0xb82>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a6b      	ldr	r2, [pc, #428]	@ (8007dc4 <HAL_DMA_IRQHandler+0xd18>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d009      	beq.n	8007c2e <HAL_DMA_IRQHandler+0xb82>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a6a      	ldr	r2, [pc, #424]	@ (8007dc8 <HAL_DMA_IRQHandler+0xd1c>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d004      	beq.n	8007c2e <HAL_DMA_IRQHandler+0xb82>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a68      	ldr	r2, [pc, #416]	@ (8007dcc <HAL_DMA_IRQHandler+0xd20>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d108      	bne.n	8007c40 <HAL_DMA_IRQHandler+0xb94>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f022 0208 	bic.w	r2, r2, #8
 8007c3c:	601a      	str	r2, [r3, #0]
 8007c3e:	e007      	b.n	8007c50 <HAL_DMA_IRQHandler+0xba4>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f022 0204 	bic.w	r2, r2, #4
 8007c4e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f000 8165 	beq.w	8007f24 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c62:	e15f      	b.n	8007f24 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c68:	f003 031f 	and.w	r3, r3, #31
 8007c6c:	2202      	movs	r2, #2
 8007c6e:	409a      	lsls	r2, r3
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	4013      	ands	r3, r2
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f000 80c5 	beq.w	8007e04 <HAL_DMA_IRQHandler+0xd58>
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	f003 0302 	and.w	r3, r3, #2
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 80bf 	beq.w	8007e04 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c8a:	f003 031f 	and.w	r3, r3, #31
 8007c8e:	2202      	movs	r2, #2
 8007c90:	409a      	lsls	r2, r3
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d018      	beq.n	8007cd2 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d109      	bne.n	8007cbe <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	f000 813a 	beq.w	8007f28 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007cbc:	e134      	b.n	8007f28 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	f000 8130 	beq.w	8007f28 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007cd0:	e12a      	b.n	8007f28 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	f003 0320 	and.w	r3, r3, #32
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	f040 8089 	bne.w	8007df0 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a2b      	ldr	r2, [pc, #172]	@ (8007d90 <HAL_DMA_IRQHandler+0xce4>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d04a      	beq.n	8007d7e <HAL_DMA_IRQHandler+0xcd2>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a29      	ldr	r2, [pc, #164]	@ (8007d94 <HAL_DMA_IRQHandler+0xce8>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d045      	beq.n	8007d7e <HAL_DMA_IRQHandler+0xcd2>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a28      	ldr	r2, [pc, #160]	@ (8007d98 <HAL_DMA_IRQHandler+0xcec>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d040      	beq.n	8007d7e <HAL_DMA_IRQHandler+0xcd2>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a26      	ldr	r2, [pc, #152]	@ (8007d9c <HAL_DMA_IRQHandler+0xcf0>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d03b      	beq.n	8007d7e <HAL_DMA_IRQHandler+0xcd2>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a25      	ldr	r2, [pc, #148]	@ (8007da0 <HAL_DMA_IRQHandler+0xcf4>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d036      	beq.n	8007d7e <HAL_DMA_IRQHandler+0xcd2>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a23      	ldr	r2, [pc, #140]	@ (8007da4 <HAL_DMA_IRQHandler+0xcf8>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d031      	beq.n	8007d7e <HAL_DMA_IRQHandler+0xcd2>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a22      	ldr	r2, [pc, #136]	@ (8007da8 <HAL_DMA_IRQHandler+0xcfc>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d02c      	beq.n	8007d7e <HAL_DMA_IRQHandler+0xcd2>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a20      	ldr	r2, [pc, #128]	@ (8007dac <HAL_DMA_IRQHandler+0xd00>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d027      	beq.n	8007d7e <HAL_DMA_IRQHandler+0xcd2>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a1f      	ldr	r2, [pc, #124]	@ (8007db0 <HAL_DMA_IRQHandler+0xd04>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d022      	beq.n	8007d7e <HAL_DMA_IRQHandler+0xcd2>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a1d      	ldr	r2, [pc, #116]	@ (8007db4 <HAL_DMA_IRQHandler+0xd08>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d01d      	beq.n	8007d7e <HAL_DMA_IRQHandler+0xcd2>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a1c      	ldr	r2, [pc, #112]	@ (8007db8 <HAL_DMA_IRQHandler+0xd0c>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d018      	beq.n	8007d7e <HAL_DMA_IRQHandler+0xcd2>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a1a      	ldr	r2, [pc, #104]	@ (8007dbc <HAL_DMA_IRQHandler+0xd10>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d013      	beq.n	8007d7e <HAL_DMA_IRQHandler+0xcd2>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a19      	ldr	r2, [pc, #100]	@ (8007dc0 <HAL_DMA_IRQHandler+0xd14>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d00e      	beq.n	8007d7e <HAL_DMA_IRQHandler+0xcd2>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a17      	ldr	r2, [pc, #92]	@ (8007dc4 <HAL_DMA_IRQHandler+0xd18>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d009      	beq.n	8007d7e <HAL_DMA_IRQHandler+0xcd2>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a16      	ldr	r2, [pc, #88]	@ (8007dc8 <HAL_DMA_IRQHandler+0xd1c>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d004      	beq.n	8007d7e <HAL_DMA_IRQHandler+0xcd2>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a14      	ldr	r2, [pc, #80]	@ (8007dcc <HAL_DMA_IRQHandler+0xd20>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d128      	bne.n	8007dd0 <HAL_DMA_IRQHandler+0xd24>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f022 0214 	bic.w	r2, r2, #20
 8007d8c:	601a      	str	r2, [r3, #0]
 8007d8e:	e027      	b.n	8007de0 <HAL_DMA_IRQHandler+0xd34>
 8007d90:	40020010 	.word	0x40020010
 8007d94:	40020028 	.word	0x40020028
 8007d98:	40020040 	.word	0x40020040
 8007d9c:	40020058 	.word	0x40020058
 8007da0:	40020070 	.word	0x40020070
 8007da4:	40020088 	.word	0x40020088
 8007da8:	400200a0 	.word	0x400200a0
 8007dac:	400200b8 	.word	0x400200b8
 8007db0:	40020410 	.word	0x40020410
 8007db4:	40020428 	.word	0x40020428
 8007db8:	40020440 	.word	0x40020440
 8007dbc:	40020458 	.word	0x40020458
 8007dc0:	40020470 	.word	0x40020470
 8007dc4:	40020488 	.word	0x40020488
 8007dc8:	400204a0 	.word	0x400204a0
 8007dcc:	400204b8 	.word	0x400204b8
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f022 020a 	bic.w	r2, r2, #10
 8007dde:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f000 8097 	beq.w	8007f28 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e02:	e091      	b.n	8007f28 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e08:	f003 031f 	and.w	r3, r3, #31
 8007e0c:	2208      	movs	r2, #8
 8007e0e:	409a      	lsls	r2, r3
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	4013      	ands	r3, r2
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	f000 8088 	beq.w	8007f2a <HAL_DMA_IRQHandler+0xe7e>
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	f003 0308 	and.w	r3, r3, #8
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f000 8082 	beq.w	8007f2a <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a41      	ldr	r2, [pc, #260]	@ (8007f30 <HAL_DMA_IRQHandler+0xe84>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d04a      	beq.n	8007ec6 <HAL_DMA_IRQHandler+0xe1a>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a3f      	ldr	r2, [pc, #252]	@ (8007f34 <HAL_DMA_IRQHandler+0xe88>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d045      	beq.n	8007ec6 <HAL_DMA_IRQHandler+0xe1a>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a3e      	ldr	r2, [pc, #248]	@ (8007f38 <HAL_DMA_IRQHandler+0xe8c>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d040      	beq.n	8007ec6 <HAL_DMA_IRQHandler+0xe1a>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a3c      	ldr	r2, [pc, #240]	@ (8007f3c <HAL_DMA_IRQHandler+0xe90>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d03b      	beq.n	8007ec6 <HAL_DMA_IRQHandler+0xe1a>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a3b      	ldr	r2, [pc, #236]	@ (8007f40 <HAL_DMA_IRQHandler+0xe94>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d036      	beq.n	8007ec6 <HAL_DMA_IRQHandler+0xe1a>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a39      	ldr	r2, [pc, #228]	@ (8007f44 <HAL_DMA_IRQHandler+0xe98>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d031      	beq.n	8007ec6 <HAL_DMA_IRQHandler+0xe1a>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a38      	ldr	r2, [pc, #224]	@ (8007f48 <HAL_DMA_IRQHandler+0xe9c>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d02c      	beq.n	8007ec6 <HAL_DMA_IRQHandler+0xe1a>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a36      	ldr	r2, [pc, #216]	@ (8007f4c <HAL_DMA_IRQHandler+0xea0>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d027      	beq.n	8007ec6 <HAL_DMA_IRQHandler+0xe1a>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a35      	ldr	r2, [pc, #212]	@ (8007f50 <HAL_DMA_IRQHandler+0xea4>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d022      	beq.n	8007ec6 <HAL_DMA_IRQHandler+0xe1a>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a33      	ldr	r2, [pc, #204]	@ (8007f54 <HAL_DMA_IRQHandler+0xea8>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d01d      	beq.n	8007ec6 <HAL_DMA_IRQHandler+0xe1a>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a32      	ldr	r2, [pc, #200]	@ (8007f58 <HAL_DMA_IRQHandler+0xeac>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d018      	beq.n	8007ec6 <HAL_DMA_IRQHandler+0xe1a>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a30      	ldr	r2, [pc, #192]	@ (8007f5c <HAL_DMA_IRQHandler+0xeb0>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d013      	beq.n	8007ec6 <HAL_DMA_IRQHandler+0xe1a>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a2f      	ldr	r2, [pc, #188]	@ (8007f60 <HAL_DMA_IRQHandler+0xeb4>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d00e      	beq.n	8007ec6 <HAL_DMA_IRQHandler+0xe1a>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a2d      	ldr	r2, [pc, #180]	@ (8007f64 <HAL_DMA_IRQHandler+0xeb8>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d009      	beq.n	8007ec6 <HAL_DMA_IRQHandler+0xe1a>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a2c      	ldr	r2, [pc, #176]	@ (8007f68 <HAL_DMA_IRQHandler+0xebc>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d004      	beq.n	8007ec6 <HAL_DMA_IRQHandler+0xe1a>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a2a      	ldr	r2, [pc, #168]	@ (8007f6c <HAL_DMA_IRQHandler+0xec0>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d108      	bne.n	8007ed8 <HAL_DMA_IRQHandler+0xe2c>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f022 021c 	bic.w	r2, r2, #28
 8007ed4:	601a      	str	r2, [r3, #0]
 8007ed6:	e007      	b.n	8007ee8 <HAL_DMA_IRQHandler+0xe3c>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f022 020e 	bic.w	r2, r2, #14
 8007ee6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007eec:	f003 031f 	and.w	r3, r3, #31
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	409a      	lsls	r2, r3
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2201      	movs	r2, #1
 8007f02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d009      	beq.n	8007f2a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	4798      	blx	r3
 8007f1e:	e004      	b.n	8007f2a <HAL_DMA_IRQHandler+0xe7e>
          return;
 8007f20:	bf00      	nop
 8007f22:	e002      	b.n	8007f2a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f24:	bf00      	nop
 8007f26:	e000      	b.n	8007f2a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f28:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007f2a:	3728      	adds	r7, #40	@ 0x28
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	40020010 	.word	0x40020010
 8007f34:	40020028 	.word	0x40020028
 8007f38:	40020040 	.word	0x40020040
 8007f3c:	40020058 	.word	0x40020058
 8007f40:	40020070 	.word	0x40020070
 8007f44:	40020088 	.word	0x40020088
 8007f48:	400200a0 	.word	0x400200a0
 8007f4c:	400200b8 	.word	0x400200b8
 8007f50:	40020410 	.word	0x40020410
 8007f54:	40020428 	.word	0x40020428
 8007f58:	40020440 	.word	0x40020440
 8007f5c:	40020458 	.word	0x40020458
 8007f60:	40020470 	.word	0x40020470
 8007f64:	40020488 	.word	0x40020488
 8007f68:	400204a0 	.word	0x400204a0
 8007f6c:	400204b8 	.word	0x400204b8

08007f70 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b087      	sub	sp, #28
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	607a      	str	r2, [r7, #4]
 8007f94:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f9a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fa0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a7f      	ldr	r2, [pc, #508]	@ (80081a4 <DMA_SetConfig+0x21c>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d072      	beq.n	8008092 <DMA_SetConfig+0x10a>
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a7d      	ldr	r2, [pc, #500]	@ (80081a8 <DMA_SetConfig+0x220>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d06d      	beq.n	8008092 <DMA_SetConfig+0x10a>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a7c      	ldr	r2, [pc, #496]	@ (80081ac <DMA_SetConfig+0x224>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d068      	beq.n	8008092 <DMA_SetConfig+0x10a>
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a7a      	ldr	r2, [pc, #488]	@ (80081b0 <DMA_SetConfig+0x228>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d063      	beq.n	8008092 <DMA_SetConfig+0x10a>
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a79      	ldr	r2, [pc, #484]	@ (80081b4 <DMA_SetConfig+0x22c>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d05e      	beq.n	8008092 <DMA_SetConfig+0x10a>
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a77      	ldr	r2, [pc, #476]	@ (80081b8 <DMA_SetConfig+0x230>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d059      	beq.n	8008092 <DMA_SetConfig+0x10a>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a76      	ldr	r2, [pc, #472]	@ (80081bc <DMA_SetConfig+0x234>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d054      	beq.n	8008092 <DMA_SetConfig+0x10a>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a74      	ldr	r2, [pc, #464]	@ (80081c0 <DMA_SetConfig+0x238>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d04f      	beq.n	8008092 <DMA_SetConfig+0x10a>
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a73      	ldr	r2, [pc, #460]	@ (80081c4 <DMA_SetConfig+0x23c>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d04a      	beq.n	8008092 <DMA_SetConfig+0x10a>
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a71      	ldr	r2, [pc, #452]	@ (80081c8 <DMA_SetConfig+0x240>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d045      	beq.n	8008092 <DMA_SetConfig+0x10a>
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a70      	ldr	r2, [pc, #448]	@ (80081cc <DMA_SetConfig+0x244>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d040      	beq.n	8008092 <DMA_SetConfig+0x10a>
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a6e      	ldr	r2, [pc, #440]	@ (80081d0 <DMA_SetConfig+0x248>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d03b      	beq.n	8008092 <DMA_SetConfig+0x10a>
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a6d      	ldr	r2, [pc, #436]	@ (80081d4 <DMA_SetConfig+0x24c>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d036      	beq.n	8008092 <DMA_SetConfig+0x10a>
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a6b      	ldr	r2, [pc, #428]	@ (80081d8 <DMA_SetConfig+0x250>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d031      	beq.n	8008092 <DMA_SetConfig+0x10a>
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a6a      	ldr	r2, [pc, #424]	@ (80081dc <DMA_SetConfig+0x254>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d02c      	beq.n	8008092 <DMA_SetConfig+0x10a>
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a68      	ldr	r2, [pc, #416]	@ (80081e0 <DMA_SetConfig+0x258>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d027      	beq.n	8008092 <DMA_SetConfig+0x10a>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a67      	ldr	r2, [pc, #412]	@ (80081e4 <DMA_SetConfig+0x25c>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d022      	beq.n	8008092 <DMA_SetConfig+0x10a>
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a65      	ldr	r2, [pc, #404]	@ (80081e8 <DMA_SetConfig+0x260>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d01d      	beq.n	8008092 <DMA_SetConfig+0x10a>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a64      	ldr	r2, [pc, #400]	@ (80081ec <DMA_SetConfig+0x264>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d018      	beq.n	8008092 <DMA_SetConfig+0x10a>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a62      	ldr	r2, [pc, #392]	@ (80081f0 <DMA_SetConfig+0x268>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d013      	beq.n	8008092 <DMA_SetConfig+0x10a>
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a61      	ldr	r2, [pc, #388]	@ (80081f4 <DMA_SetConfig+0x26c>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d00e      	beq.n	8008092 <DMA_SetConfig+0x10a>
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a5f      	ldr	r2, [pc, #380]	@ (80081f8 <DMA_SetConfig+0x270>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d009      	beq.n	8008092 <DMA_SetConfig+0x10a>
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a5e      	ldr	r2, [pc, #376]	@ (80081fc <DMA_SetConfig+0x274>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d004      	beq.n	8008092 <DMA_SetConfig+0x10a>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a5c      	ldr	r2, [pc, #368]	@ (8008200 <DMA_SetConfig+0x278>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d101      	bne.n	8008096 <DMA_SetConfig+0x10e>
 8008092:	2301      	movs	r3, #1
 8008094:	e000      	b.n	8008098 <DMA_SetConfig+0x110>
 8008096:	2300      	movs	r3, #0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d00d      	beq.n	80080b8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80080a4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d004      	beq.n	80080b8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80080b6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a39      	ldr	r2, [pc, #228]	@ (80081a4 <DMA_SetConfig+0x21c>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d04a      	beq.n	8008158 <DMA_SetConfig+0x1d0>
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a38      	ldr	r2, [pc, #224]	@ (80081a8 <DMA_SetConfig+0x220>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d045      	beq.n	8008158 <DMA_SetConfig+0x1d0>
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a36      	ldr	r2, [pc, #216]	@ (80081ac <DMA_SetConfig+0x224>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d040      	beq.n	8008158 <DMA_SetConfig+0x1d0>
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a35      	ldr	r2, [pc, #212]	@ (80081b0 <DMA_SetConfig+0x228>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d03b      	beq.n	8008158 <DMA_SetConfig+0x1d0>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a33      	ldr	r2, [pc, #204]	@ (80081b4 <DMA_SetConfig+0x22c>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d036      	beq.n	8008158 <DMA_SetConfig+0x1d0>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a32      	ldr	r2, [pc, #200]	@ (80081b8 <DMA_SetConfig+0x230>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d031      	beq.n	8008158 <DMA_SetConfig+0x1d0>
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a30      	ldr	r2, [pc, #192]	@ (80081bc <DMA_SetConfig+0x234>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d02c      	beq.n	8008158 <DMA_SetConfig+0x1d0>
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a2f      	ldr	r2, [pc, #188]	@ (80081c0 <DMA_SetConfig+0x238>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d027      	beq.n	8008158 <DMA_SetConfig+0x1d0>
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a2d      	ldr	r2, [pc, #180]	@ (80081c4 <DMA_SetConfig+0x23c>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d022      	beq.n	8008158 <DMA_SetConfig+0x1d0>
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a2c      	ldr	r2, [pc, #176]	@ (80081c8 <DMA_SetConfig+0x240>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d01d      	beq.n	8008158 <DMA_SetConfig+0x1d0>
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a2a      	ldr	r2, [pc, #168]	@ (80081cc <DMA_SetConfig+0x244>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d018      	beq.n	8008158 <DMA_SetConfig+0x1d0>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a29      	ldr	r2, [pc, #164]	@ (80081d0 <DMA_SetConfig+0x248>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d013      	beq.n	8008158 <DMA_SetConfig+0x1d0>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a27      	ldr	r2, [pc, #156]	@ (80081d4 <DMA_SetConfig+0x24c>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d00e      	beq.n	8008158 <DMA_SetConfig+0x1d0>
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a26      	ldr	r2, [pc, #152]	@ (80081d8 <DMA_SetConfig+0x250>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d009      	beq.n	8008158 <DMA_SetConfig+0x1d0>
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a24      	ldr	r2, [pc, #144]	@ (80081dc <DMA_SetConfig+0x254>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d004      	beq.n	8008158 <DMA_SetConfig+0x1d0>
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a23      	ldr	r2, [pc, #140]	@ (80081e0 <DMA_SetConfig+0x258>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d101      	bne.n	800815c <DMA_SetConfig+0x1d4>
 8008158:	2301      	movs	r3, #1
 800815a:	e000      	b.n	800815e <DMA_SetConfig+0x1d6>
 800815c:	2300      	movs	r3, #0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d059      	beq.n	8008216 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008166:	f003 031f 	and.w	r3, r3, #31
 800816a:	223f      	movs	r2, #63	@ 0x3f
 800816c:	409a      	lsls	r2, r3
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008180:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	683a      	ldr	r2, [r7, #0]
 8008188:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	2b40      	cmp	r3, #64	@ 0x40
 8008190:	d138      	bne.n	8008204 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80081a2:	e0ae      	b.n	8008302 <DMA_SetConfig+0x37a>
 80081a4:	40020010 	.word	0x40020010
 80081a8:	40020028 	.word	0x40020028
 80081ac:	40020040 	.word	0x40020040
 80081b0:	40020058 	.word	0x40020058
 80081b4:	40020070 	.word	0x40020070
 80081b8:	40020088 	.word	0x40020088
 80081bc:	400200a0 	.word	0x400200a0
 80081c0:	400200b8 	.word	0x400200b8
 80081c4:	40020410 	.word	0x40020410
 80081c8:	40020428 	.word	0x40020428
 80081cc:	40020440 	.word	0x40020440
 80081d0:	40020458 	.word	0x40020458
 80081d4:	40020470 	.word	0x40020470
 80081d8:	40020488 	.word	0x40020488
 80081dc:	400204a0 	.word	0x400204a0
 80081e0:	400204b8 	.word	0x400204b8
 80081e4:	58025408 	.word	0x58025408
 80081e8:	5802541c 	.word	0x5802541c
 80081ec:	58025430 	.word	0x58025430
 80081f0:	58025444 	.word	0x58025444
 80081f4:	58025458 	.word	0x58025458
 80081f8:	5802546c 	.word	0x5802546c
 80081fc:	58025480 	.word	0x58025480
 8008200:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	68ba      	ldr	r2, [r7, #8]
 800820a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	60da      	str	r2, [r3, #12]
}
 8008214:	e075      	b.n	8008302 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a3d      	ldr	r2, [pc, #244]	@ (8008310 <DMA_SetConfig+0x388>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d04a      	beq.n	80082b6 <DMA_SetConfig+0x32e>
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a3b      	ldr	r2, [pc, #236]	@ (8008314 <DMA_SetConfig+0x38c>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d045      	beq.n	80082b6 <DMA_SetConfig+0x32e>
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a3a      	ldr	r2, [pc, #232]	@ (8008318 <DMA_SetConfig+0x390>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d040      	beq.n	80082b6 <DMA_SetConfig+0x32e>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a38      	ldr	r2, [pc, #224]	@ (800831c <DMA_SetConfig+0x394>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d03b      	beq.n	80082b6 <DMA_SetConfig+0x32e>
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a37      	ldr	r2, [pc, #220]	@ (8008320 <DMA_SetConfig+0x398>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d036      	beq.n	80082b6 <DMA_SetConfig+0x32e>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a35      	ldr	r2, [pc, #212]	@ (8008324 <DMA_SetConfig+0x39c>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d031      	beq.n	80082b6 <DMA_SetConfig+0x32e>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a34      	ldr	r2, [pc, #208]	@ (8008328 <DMA_SetConfig+0x3a0>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d02c      	beq.n	80082b6 <DMA_SetConfig+0x32e>
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a32      	ldr	r2, [pc, #200]	@ (800832c <DMA_SetConfig+0x3a4>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d027      	beq.n	80082b6 <DMA_SetConfig+0x32e>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a31      	ldr	r2, [pc, #196]	@ (8008330 <DMA_SetConfig+0x3a8>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d022      	beq.n	80082b6 <DMA_SetConfig+0x32e>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a2f      	ldr	r2, [pc, #188]	@ (8008334 <DMA_SetConfig+0x3ac>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d01d      	beq.n	80082b6 <DMA_SetConfig+0x32e>
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a2e      	ldr	r2, [pc, #184]	@ (8008338 <DMA_SetConfig+0x3b0>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d018      	beq.n	80082b6 <DMA_SetConfig+0x32e>
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a2c      	ldr	r2, [pc, #176]	@ (800833c <DMA_SetConfig+0x3b4>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d013      	beq.n	80082b6 <DMA_SetConfig+0x32e>
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a2b      	ldr	r2, [pc, #172]	@ (8008340 <DMA_SetConfig+0x3b8>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d00e      	beq.n	80082b6 <DMA_SetConfig+0x32e>
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a29      	ldr	r2, [pc, #164]	@ (8008344 <DMA_SetConfig+0x3bc>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d009      	beq.n	80082b6 <DMA_SetConfig+0x32e>
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a28      	ldr	r2, [pc, #160]	@ (8008348 <DMA_SetConfig+0x3c0>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d004      	beq.n	80082b6 <DMA_SetConfig+0x32e>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a26      	ldr	r2, [pc, #152]	@ (800834c <DMA_SetConfig+0x3c4>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d101      	bne.n	80082ba <DMA_SetConfig+0x332>
 80082b6:	2301      	movs	r3, #1
 80082b8:	e000      	b.n	80082bc <DMA_SetConfig+0x334>
 80082ba:	2300      	movs	r3, #0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d020      	beq.n	8008302 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082c4:	f003 031f 	and.w	r3, r3, #31
 80082c8:	2201      	movs	r2, #1
 80082ca:	409a      	lsls	r2, r3
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	683a      	ldr	r2, [r7, #0]
 80082d6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	2b40      	cmp	r3, #64	@ 0x40
 80082de:	d108      	bne.n	80082f2 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68ba      	ldr	r2, [r7, #8]
 80082ee:	60da      	str	r2, [r3, #12]
}
 80082f0:	e007      	b.n	8008302 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68ba      	ldr	r2, [r7, #8]
 80082f8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	60da      	str	r2, [r3, #12]
}
 8008302:	bf00      	nop
 8008304:	371c      	adds	r7, #28
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	48022c08 	.word	0x48022c08
 8008314:	48022c1c 	.word	0x48022c1c
 8008318:	48022c30 	.word	0x48022c30
 800831c:	48022c44 	.word	0x48022c44
 8008320:	48022c58 	.word	0x48022c58
 8008324:	48022c6c 	.word	0x48022c6c
 8008328:	48022c80 	.word	0x48022c80
 800832c:	48022c94 	.word	0x48022c94
 8008330:	58025408 	.word	0x58025408
 8008334:	5802541c 	.word	0x5802541c
 8008338:	58025430 	.word	0x58025430
 800833c:	58025444 	.word	0x58025444
 8008340:	58025458 	.word	0x58025458
 8008344:	5802546c 	.word	0x5802546c
 8008348:	58025480 	.word	0x58025480
 800834c:	58025494 	.word	0x58025494

08008350 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a42      	ldr	r2, [pc, #264]	@ (8008468 <DMA_CalcBaseAndBitshift+0x118>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d04a      	beq.n	80083f8 <DMA_CalcBaseAndBitshift+0xa8>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a41      	ldr	r2, [pc, #260]	@ (800846c <DMA_CalcBaseAndBitshift+0x11c>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d045      	beq.n	80083f8 <DMA_CalcBaseAndBitshift+0xa8>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a3f      	ldr	r2, [pc, #252]	@ (8008470 <DMA_CalcBaseAndBitshift+0x120>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d040      	beq.n	80083f8 <DMA_CalcBaseAndBitshift+0xa8>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a3e      	ldr	r2, [pc, #248]	@ (8008474 <DMA_CalcBaseAndBitshift+0x124>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d03b      	beq.n	80083f8 <DMA_CalcBaseAndBitshift+0xa8>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a3c      	ldr	r2, [pc, #240]	@ (8008478 <DMA_CalcBaseAndBitshift+0x128>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d036      	beq.n	80083f8 <DMA_CalcBaseAndBitshift+0xa8>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a3b      	ldr	r2, [pc, #236]	@ (800847c <DMA_CalcBaseAndBitshift+0x12c>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d031      	beq.n	80083f8 <DMA_CalcBaseAndBitshift+0xa8>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a39      	ldr	r2, [pc, #228]	@ (8008480 <DMA_CalcBaseAndBitshift+0x130>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d02c      	beq.n	80083f8 <DMA_CalcBaseAndBitshift+0xa8>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a38      	ldr	r2, [pc, #224]	@ (8008484 <DMA_CalcBaseAndBitshift+0x134>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d027      	beq.n	80083f8 <DMA_CalcBaseAndBitshift+0xa8>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a36      	ldr	r2, [pc, #216]	@ (8008488 <DMA_CalcBaseAndBitshift+0x138>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d022      	beq.n	80083f8 <DMA_CalcBaseAndBitshift+0xa8>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a35      	ldr	r2, [pc, #212]	@ (800848c <DMA_CalcBaseAndBitshift+0x13c>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d01d      	beq.n	80083f8 <DMA_CalcBaseAndBitshift+0xa8>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a33      	ldr	r2, [pc, #204]	@ (8008490 <DMA_CalcBaseAndBitshift+0x140>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d018      	beq.n	80083f8 <DMA_CalcBaseAndBitshift+0xa8>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a32      	ldr	r2, [pc, #200]	@ (8008494 <DMA_CalcBaseAndBitshift+0x144>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d013      	beq.n	80083f8 <DMA_CalcBaseAndBitshift+0xa8>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a30      	ldr	r2, [pc, #192]	@ (8008498 <DMA_CalcBaseAndBitshift+0x148>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d00e      	beq.n	80083f8 <DMA_CalcBaseAndBitshift+0xa8>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a2f      	ldr	r2, [pc, #188]	@ (800849c <DMA_CalcBaseAndBitshift+0x14c>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d009      	beq.n	80083f8 <DMA_CalcBaseAndBitshift+0xa8>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a2d      	ldr	r2, [pc, #180]	@ (80084a0 <DMA_CalcBaseAndBitshift+0x150>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d004      	beq.n	80083f8 <DMA_CalcBaseAndBitshift+0xa8>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a2c      	ldr	r2, [pc, #176]	@ (80084a4 <DMA_CalcBaseAndBitshift+0x154>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d101      	bne.n	80083fc <DMA_CalcBaseAndBitshift+0xac>
 80083f8:	2301      	movs	r3, #1
 80083fa:	e000      	b.n	80083fe <DMA_CalcBaseAndBitshift+0xae>
 80083fc:	2300      	movs	r3, #0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d024      	beq.n	800844c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	b2db      	uxtb	r3, r3
 8008408:	3b10      	subs	r3, #16
 800840a:	4a27      	ldr	r2, [pc, #156]	@ (80084a8 <DMA_CalcBaseAndBitshift+0x158>)
 800840c:	fba2 2303 	umull	r2, r3, r2, r3
 8008410:	091b      	lsrs	r3, r3, #4
 8008412:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f003 0307 	and.w	r3, r3, #7
 800841a:	4a24      	ldr	r2, [pc, #144]	@ (80084ac <DMA_CalcBaseAndBitshift+0x15c>)
 800841c:	5cd3      	ldrb	r3, [r2, r3]
 800841e:	461a      	mov	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2b03      	cmp	r3, #3
 8008428:	d908      	bls.n	800843c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	461a      	mov	r2, r3
 8008430:	4b1f      	ldr	r3, [pc, #124]	@ (80084b0 <DMA_CalcBaseAndBitshift+0x160>)
 8008432:	4013      	ands	r3, r2
 8008434:	1d1a      	adds	r2, r3, #4
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	659a      	str	r2, [r3, #88]	@ 0x58
 800843a:	e00d      	b.n	8008458 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	461a      	mov	r2, r3
 8008442:	4b1b      	ldr	r3, [pc, #108]	@ (80084b0 <DMA_CalcBaseAndBitshift+0x160>)
 8008444:	4013      	ands	r3, r2
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	6593      	str	r3, [r2, #88]	@ 0x58
 800844a:	e005      	b.n	8008458 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800845c:	4618      	mov	r0, r3
 800845e:	3714      	adds	r7, #20
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr
 8008468:	40020010 	.word	0x40020010
 800846c:	40020028 	.word	0x40020028
 8008470:	40020040 	.word	0x40020040
 8008474:	40020058 	.word	0x40020058
 8008478:	40020070 	.word	0x40020070
 800847c:	40020088 	.word	0x40020088
 8008480:	400200a0 	.word	0x400200a0
 8008484:	400200b8 	.word	0x400200b8
 8008488:	40020410 	.word	0x40020410
 800848c:	40020428 	.word	0x40020428
 8008490:	40020440 	.word	0x40020440
 8008494:	40020458 	.word	0x40020458
 8008498:	40020470 	.word	0x40020470
 800849c:	40020488 	.word	0x40020488
 80084a0:	400204a0 	.word	0x400204a0
 80084a4:	400204b8 	.word	0x400204b8
 80084a8:	aaaaaaab 	.word	0xaaaaaaab
 80084ac:	08018cc4 	.word	0x08018cc4
 80084b0:	fffffc00 	.word	0xfffffc00

080084b4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084bc:	2300      	movs	r3, #0
 80084be:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	699b      	ldr	r3, [r3, #24]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d120      	bne.n	800850a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084cc:	2b03      	cmp	r3, #3
 80084ce:	d858      	bhi.n	8008582 <DMA_CheckFifoParam+0xce>
 80084d0:	a201      	add	r2, pc, #4	@ (adr r2, 80084d8 <DMA_CheckFifoParam+0x24>)
 80084d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d6:	bf00      	nop
 80084d8:	080084e9 	.word	0x080084e9
 80084dc:	080084fb 	.word	0x080084fb
 80084e0:	080084e9 	.word	0x080084e9
 80084e4:	08008583 	.word	0x08008583
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d048      	beq.n	8008586 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80084f8:	e045      	b.n	8008586 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084fe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008502:	d142      	bne.n	800858a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008504:	2301      	movs	r3, #1
 8008506:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008508:	e03f      	b.n	800858a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	699b      	ldr	r3, [r3, #24]
 800850e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008512:	d123      	bne.n	800855c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008518:	2b03      	cmp	r3, #3
 800851a:	d838      	bhi.n	800858e <DMA_CheckFifoParam+0xda>
 800851c:	a201      	add	r2, pc, #4	@ (adr r2, 8008524 <DMA_CheckFifoParam+0x70>)
 800851e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008522:	bf00      	nop
 8008524:	08008535 	.word	0x08008535
 8008528:	0800853b 	.word	0x0800853b
 800852c:	08008535 	.word	0x08008535
 8008530:	0800854d 	.word	0x0800854d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	73fb      	strb	r3, [r7, #15]
        break;
 8008538:	e030      	b.n	800859c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800853e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008542:	2b00      	cmp	r3, #0
 8008544:	d025      	beq.n	8008592 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800854a:	e022      	b.n	8008592 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008550:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008554:	d11f      	bne.n	8008596 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800855a:	e01c      	b.n	8008596 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008560:	2b02      	cmp	r3, #2
 8008562:	d902      	bls.n	800856a <DMA_CheckFifoParam+0xb6>
 8008564:	2b03      	cmp	r3, #3
 8008566:	d003      	beq.n	8008570 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008568:	e018      	b.n	800859c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	73fb      	strb	r3, [r7, #15]
        break;
 800856e:	e015      	b.n	800859c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008574:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00e      	beq.n	800859a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	73fb      	strb	r3, [r7, #15]
    break;
 8008580:	e00b      	b.n	800859a <DMA_CheckFifoParam+0xe6>
        break;
 8008582:	bf00      	nop
 8008584:	e00a      	b.n	800859c <DMA_CheckFifoParam+0xe8>
        break;
 8008586:	bf00      	nop
 8008588:	e008      	b.n	800859c <DMA_CheckFifoParam+0xe8>
        break;
 800858a:	bf00      	nop
 800858c:	e006      	b.n	800859c <DMA_CheckFifoParam+0xe8>
        break;
 800858e:	bf00      	nop
 8008590:	e004      	b.n	800859c <DMA_CheckFifoParam+0xe8>
        break;
 8008592:	bf00      	nop
 8008594:	e002      	b.n	800859c <DMA_CheckFifoParam+0xe8>
        break;
 8008596:	bf00      	nop
 8008598:	e000      	b.n	800859c <DMA_CheckFifoParam+0xe8>
    break;
 800859a:	bf00      	nop
    }
  }

  return status;
 800859c:	7bfb      	ldrb	r3, [r7, #15]
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3714      	adds	r7, #20
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop

080085ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a38      	ldr	r2, [pc, #224]	@ (80086a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d022      	beq.n	800860a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a36      	ldr	r2, [pc, #216]	@ (80086a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d01d      	beq.n	800860a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a35      	ldr	r2, [pc, #212]	@ (80086a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d018      	beq.n	800860a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a33      	ldr	r2, [pc, #204]	@ (80086ac <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d013      	beq.n	800860a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a32      	ldr	r2, [pc, #200]	@ (80086b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d00e      	beq.n	800860a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a30      	ldr	r2, [pc, #192]	@ (80086b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d009      	beq.n	800860a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a2f      	ldr	r2, [pc, #188]	@ (80086b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d004      	beq.n	800860a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a2d      	ldr	r2, [pc, #180]	@ (80086bc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d101      	bne.n	800860e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800860a:	2301      	movs	r3, #1
 800860c:	e000      	b.n	8008610 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800860e:	2300      	movs	r3, #0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d01a      	beq.n	800864a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	b2db      	uxtb	r3, r3
 800861a:	3b08      	subs	r3, #8
 800861c:	4a28      	ldr	r2, [pc, #160]	@ (80086c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800861e:	fba2 2303 	umull	r2, r3, r2, r3
 8008622:	091b      	lsrs	r3, r3, #4
 8008624:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	4b26      	ldr	r3, [pc, #152]	@ (80086c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800862a:	4413      	add	r3, r2
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	461a      	mov	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	4a24      	ldr	r2, [pc, #144]	@ (80086c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008638:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f003 031f 	and.w	r3, r3, #31
 8008640:	2201      	movs	r2, #1
 8008642:	409a      	lsls	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008648:	e024      	b.n	8008694 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	b2db      	uxtb	r3, r3
 8008650:	3b10      	subs	r3, #16
 8008652:	4a1e      	ldr	r2, [pc, #120]	@ (80086cc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008654:	fba2 2303 	umull	r2, r3, r2, r3
 8008658:	091b      	lsrs	r3, r3, #4
 800865a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	4a1c      	ldr	r2, [pc, #112]	@ (80086d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d806      	bhi.n	8008672 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	4a1b      	ldr	r2, [pc, #108]	@ (80086d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d902      	bls.n	8008672 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	3308      	adds	r3, #8
 8008670:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	4b18      	ldr	r3, [pc, #96]	@ (80086d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008676:	4413      	add	r3, r2
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	461a      	mov	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4a16      	ldr	r2, [pc, #88]	@ (80086dc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008684:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f003 031f 	and.w	r3, r3, #31
 800868c:	2201      	movs	r2, #1
 800868e:	409a      	lsls	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008694:	bf00      	nop
 8008696:	3714      	adds	r7, #20
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr
 80086a0:	58025408 	.word	0x58025408
 80086a4:	5802541c 	.word	0x5802541c
 80086a8:	58025430 	.word	0x58025430
 80086ac:	58025444 	.word	0x58025444
 80086b0:	58025458 	.word	0x58025458
 80086b4:	5802546c 	.word	0x5802546c
 80086b8:	58025480 	.word	0x58025480
 80086bc:	58025494 	.word	0x58025494
 80086c0:	cccccccd 	.word	0xcccccccd
 80086c4:	16009600 	.word	0x16009600
 80086c8:	58025880 	.word	0x58025880
 80086cc:	aaaaaaab 	.word	0xaaaaaaab
 80086d0:	400204b8 	.word	0x400204b8
 80086d4:	4002040f 	.word	0x4002040f
 80086d8:	10008200 	.word	0x10008200
 80086dc:	40020880 	.word	0x40020880

080086e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b085      	sub	sp, #20
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d04a      	beq.n	800878c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2b08      	cmp	r3, #8
 80086fa:	d847      	bhi.n	800878c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a25      	ldr	r2, [pc, #148]	@ (8008798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d022      	beq.n	800874c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a24      	ldr	r2, [pc, #144]	@ (800879c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d01d      	beq.n	800874c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a22      	ldr	r2, [pc, #136]	@ (80087a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d018      	beq.n	800874c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a21      	ldr	r2, [pc, #132]	@ (80087a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d013      	beq.n	800874c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a1f      	ldr	r2, [pc, #124]	@ (80087a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d00e      	beq.n	800874c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a1e      	ldr	r2, [pc, #120]	@ (80087ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d009      	beq.n	800874c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a1c      	ldr	r2, [pc, #112]	@ (80087b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d004      	beq.n	800874c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a1b      	ldr	r2, [pc, #108]	@ (80087b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d101      	bne.n	8008750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800874c:	2301      	movs	r3, #1
 800874e:	e000      	b.n	8008752 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008750:	2300      	movs	r3, #0
 8008752:	2b00      	cmp	r3, #0
 8008754:	d00a      	beq.n	800876c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	4b17      	ldr	r3, [pc, #92]	@ (80087b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800875a:	4413      	add	r3, r2
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	461a      	mov	r2, r3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a15      	ldr	r2, [pc, #84]	@ (80087bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008768:	671a      	str	r2, [r3, #112]	@ 0x70
 800876a:	e009      	b.n	8008780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	4b14      	ldr	r3, [pc, #80]	@ (80087c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008770:	4413      	add	r3, r2
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	461a      	mov	r2, r3
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a11      	ldr	r2, [pc, #68]	@ (80087c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800877e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	3b01      	subs	r3, #1
 8008784:	2201      	movs	r2, #1
 8008786:	409a      	lsls	r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800878c:	bf00      	nop
 800878e:	3714      	adds	r7, #20
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr
 8008798:	58025408 	.word	0x58025408
 800879c:	5802541c 	.word	0x5802541c
 80087a0:	58025430 	.word	0x58025430
 80087a4:	58025444 	.word	0x58025444
 80087a8:	58025458 	.word	0x58025458
 80087ac:	5802546c 	.word	0x5802546c
 80087b0:	58025480 	.word	0x58025480
 80087b4:	58025494 	.word	0x58025494
 80087b8:	1600963f 	.word	0x1600963f
 80087bc:	58025940 	.word	0x58025940
 80087c0:	1000823f 	.word	0x1000823f
 80087c4:	40020940 	.word	0x40020940

080087c8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b098      	sub	sp, #96	@ 0x60
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80087d0:	4a84      	ldr	r2, [pc, #528]	@ (80089e4 <HAL_FDCAN_Init+0x21c>)
 80087d2:	f107 030c 	add.w	r3, r7, #12
 80087d6:	4611      	mov	r1, r2
 80087d8:	224c      	movs	r2, #76	@ 0x4c
 80087da:	4618      	mov	r0, r3
 80087dc:	f00e fa6d 	bl	8016cba <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d101      	bne.n	80087ea <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	e1c6      	b.n	8008b78 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a7e      	ldr	r2, [pc, #504]	@ (80089e8 <HAL_FDCAN_Init+0x220>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d106      	bne.n	8008802 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80087fc:	461a      	mov	r2, r3
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008808:	b2db      	uxtb	r3, r3
 800880a:	2b00      	cmp	r3, #0
 800880c:	d106      	bne.n	800881c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f7fa fcf6 	bl	8003208 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	699a      	ldr	r2, [r3, #24]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f022 0210 	bic.w	r2, r2, #16
 800882a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800882c:	f7fc ff2a 	bl	8005684 <HAL_GetTick>
 8008830:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008832:	e014      	b.n	800885e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008834:	f7fc ff26 	bl	8005684 <HAL_GetTick>
 8008838:	4602      	mov	r2, r0
 800883a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800883c:	1ad3      	subs	r3, r2, r3
 800883e:	2b0a      	cmp	r3, #10
 8008840:	d90d      	bls.n	800885e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008848:	f043 0201 	orr.w	r2, r3, #1
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2203      	movs	r2, #3
 8008856:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	e18c      	b.n	8008b78 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	699b      	ldr	r3, [r3, #24]
 8008864:	f003 0308 	and.w	r3, r3, #8
 8008868:	2b08      	cmp	r3, #8
 800886a:	d0e3      	beq.n	8008834 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	699a      	ldr	r2, [r3, #24]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f042 0201 	orr.w	r2, r2, #1
 800887a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800887c:	f7fc ff02 	bl	8005684 <HAL_GetTick>
 8008880:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008882:	e014      	b.n	80088ae <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008884:	f7fc fefe 	bl	8005684 <HAL_GetTick>
 8008888:	4602      	mov	r2, r0
 800888a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	2b0a      	cmp	r3, #10
 8008890:	d90d      	bls.n	80088ae <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008898:	f043 0201 	orr.w	r2, r3, #1
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2203      	movs	r2, #3
 80088a6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e164      	b.n	8008b78 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	699b      	ldr	r3, [r3, #24]
 80088b4:	f003 0301 	and.w	r3, r3, #1
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d0e3      	beq.n	8008884 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	699a      	ldr	r2, [r3, #24]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f042 0202 	orr.w	r2, r2, #2
 80088ca:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	7c1b      	ldrb	r3, [r3, #16]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d108      	bne.n	80088e6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	699a      	ldr	r2, [r3, #24]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80088e2:	619a      	str	r2, [r3, #24]
 80088e4:	e007      	b.n	80088f6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	699a      	ldr	r2, [r3, #24]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80088f4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	7c5b      	ldrb	r3, [r3, #17]
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d108      	bne.n	8008910 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	699a      	ldr	r2, [r3, #24]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800890c:	619a      	str	r2, [r3, #24]
 800890e:	e007      	b.n	8008920 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	699a      	ldr	r2, [r3, #24]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800891e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	7c9b      	ldrb	r3, [r3, #18]
 8008924:	2b01      	cmp	r3, #1
 8008926:	d108      	bne.n	800893a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	699a      	ldr	r2, [r3, #24]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008936:	619a      	str	r2, [r3, #24]
 8008938:	e007      	b.n	800894a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	699a      	ldr	r2, [r3, #24]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008948:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	699b      	ldr	r3, [r3, #24]
 8008950:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	689a      	ldr	r2, [r3, #8]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	430a      	orrs	r2, r1
 800895e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	699a      	ldr	r2, [r3, #24]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800896e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	691a      	ldr	r2, [r3, #16]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f022 0210 	bic.w	r2, r2, #16
 800897e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d108      	bne.n	800899a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	699a      	ldr	r2, [r3, #24]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f042 0204 	orr.w	r2, r2, #4
 8008996:	619a      	str	r2, [r3, #24]
 8008998:	e030      	b.n	80089fc <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d02c      	beq.n	80089fc <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	d020      	beq.n	80089ec <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	699a      	ldr	r2, [r3, #24]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80089b8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	691a      	ldr	r2, [r3, #16]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f042 0210 	orr.w	r2, r2, #16
 80089c8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	2b03      	cmp	r3, #3
 80089d0:	d114      	bne.n	80089fc <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	699a      	ldr	r2, [r3, #24]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f042 0220 	orr.w	r2, r2, #32
 80089e0:	619a      	str	r2, [r3, #24]
 80089e2:	e00b      	b.n	80089fc <HAL_FDCAN_Init+0x234>
 80089e4:	08018c20 	.word	0x08018c20
 80089e8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	699a      	ldr	r2, [r3, #24]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f042 0220 	orr.w	r2, r2, #32
 80089fa:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	699b      	ldr	r3, [r3, #24]
 8008a00:	3b01      	subs	r3, #1
 8008a02:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	69db      	ldr	r3, [r3, #28]
 8008a08:	3b01      	subs	r3, #1
 8008a0a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008a0c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6a1b      	ldr	r3, [r3, #32]
 8008a12:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008a14:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	695b      	ldr	r3, [r3, #20]
 8008a1c:	3b01      	subs	r3, #1
 8008a1e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008a24:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008a26:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a30:	d115      	bne.n	8008a5e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a36:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a3c:	3b01      	subs	r3, #1
 8008a3e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008a40:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a46:	3b01      	subs	r3, #1
 8008a48:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008a4a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a52:	3b01      	subs	r3, #1
 8008a54:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8008a5a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008a5c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d00a      	beq.n	8008a7c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	430a      	orrs	r2, r1
 8008a78:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a84:	4413      	add	r3, r2
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d011      	beq.n	8008aae <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008a92:	f023 0107 	bic.w	r1, r3, #7
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	3360      	adds	r3, #96	@ 0x60
 8008a9e:	443b      	add	r3, r7
 8008aa0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	430a      	orrs	r2, r1
 8008aaa:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d011      	beq.n	8008ada <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008abe:	f023 0107 	bic.w	r1, r3, #7
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	3360      	adds	r3, #96	@ 0x60
 8008aca:	443b      	add	r3, r7
 8008acc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	430a      	orrs	r2, r1
 8008ad6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d012      	beq.n	8008b08 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008aea:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	3360      	adds	r3, #96	@ 0x60
 8008af6:	443b      	add	r3, r7
 8008af8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008afc:	011a      	lsls	r2, r3, #4
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	430a      	orrs	r2, r1
 8008b04:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d012      	beq.n	8008b36 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008b18:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	3360      	adds	r3, #96	@ 0x60
 8008b24:	443b      	add	r3, r7
 8008b26:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008b2a:	021a      	lsls	r2, r3, #8
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	430a      	orrs	r2, r1
 8008b32:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a11      	ldr	r2, [pc, #68]	@ (8008b80 <HAL_FDCAN_Init+0x3b8>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d107      	bne.n	8008b50 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	689a      	ldr	r2, [r3, #8]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	f022 0203 	bic.w	r2, r2, #3
 8008b4e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2201      	movs	r2, #1
 8008b64:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 f80b 	bl	8008b84 <FDCAN_CalcultateRamBlockAddresses>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8008b74:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3760      	adds	r7, #96	@ 0x60
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	4000a000 	.word	0x4000a000

08008b84 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b085      	sub	sp, #20
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b90:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008b9a:	4ba7      	ldr	r3, [pc, #668]	@ (8008e38 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008b9c:	4013      	ands	r3, r2
 8008b9e:	68ba      	ldr	r2, [r7, #8]
 8008ba0:	0091      	lsls	r1, r2, #2
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	6812      	ldr	r2, [r2, #0]
 8008ba6:	430b      	orrs	r3, r1
 8008ba8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008bb4:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bbc:	041a      	lsls	r2, r3, #16
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	430a      	orrs	r2, r1
 8008bc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bcc:	68ba      	ldr	r2, [r7, #8]
 8008bce:	4413      	add	r3, r2
 8008bd0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008bda:	4b97      	ldr	r3, [pc, #604]	@ (8008e38 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008bdc:	4013      	ands	r3, r2
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	0091      	lsls	r1, r2, #2
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	6812      	ldr	r2, [r2, #0]
 8008be6:	430b      	orrs	r3, r1
 8008be8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bf4:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bfc:	041a      	lsls	r2, r3, #16
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	430a      	orrs	r2, r1
 8008c04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c0c:	005b      	lsls	r3, r3, #1
 8008c0e:	68ba      	ldr	r2, [r7, #8]
 8008c10:	4413      	add	r3, r2
 8008c12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008c1c:	4b86      	ldr	r3, [pc, #536]	@ (8008e38 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008c1e:	4013      	ands	r3, r2
 8008c20:	68ba      	ldr	r2, [r7, #8]
 8008c22:	0091      	lsls	r1, r2, #2
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	6812      	ldr	r2, [r2, #0]
 8008c28:	430b      	orrs	r3, r1
 8008c2a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008c36:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c3e:	041a      	lsls	r2, r3, #16
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	430a      	orrs	r2, r1
 8008c46:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008c52:	fb02 f303 	mul.w	r3, r2, r3
 8008c56:	68ba      	ldr	r2, [r7, #8]
 8008c58:	4413      	add	r3, r2
 8008c5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8008c64:	4b74      	ldr	r3, [pc, #464]	@ (8008e38 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008c66:	4013      	ands	r3, r2
 8008c68:	68ba      	ldr	r2, [r7, #8]
 8008c6a:	0091      	lsls	r1, r2, #2
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	6812      	ldr	r2, [r2, #0]
 8008c70:	430b      	orrs	r3, r1
 8008c72:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008c7e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c86:	041a      	lsls	r2, r3, #16
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	430a      	orrs	r2, r1
 8008c8e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008c9a:	fb02 f303 	mul.w	r3, r2, r3
 8008c9e:	68ba      	ldr	r2, [r7, #8]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8008cac:	4b62      	ldr	r3, [pc, #392]	@ (8008e38 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008cae:	4013      	ands	r3, r2
 8008cb0:	68ba      	ldr	r2, [r7, #8]
 8008cb2:	0091      	lsls	r1, r2, #2
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	6812      	ldr	r2, [r2, #0]
 8008cb8:	430b      	orrs	r3, r1
 8008cba:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008cc6:	fb02 f303 	mul.w	r3, r2, r3
 8008cca:	68ba      	ldr	r2, [r7, #8]
 8008ccc:	4413      	add	r3, r2
 8008cce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8008cd8:	4b57      	ldr	r3, [pc, #348]	@ (8008e38 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008cda:	4013      	ands	r3, r2
 8008cdc:	68ba      	ldr	r2, [r7, #8]
 8008cde:	0091      	lsls	r1, r2, #2
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	6812      	ldr	r2, [r2, #0]
 8008ce4:	430b      	orrs	r3, r1
 8008ce6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008cf2:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cfa:	041a      	lsls	r2, r3, #16
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	430a      	orrs	r2, r1
 8008d02:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d0a:	005b      	lsls	r3, r3, #1
 8008d0c:	68ba      	ldr	r2, [r7, #8]
 8008d0e:	4413      	add	r3, r2
 8008d10:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8008d1a:	4b47      	ldr	r3, [pc, #284]	@ (8008e38 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	68ba      	ldr	r2, [r7, #8]
 8008d20:	0091      	lsls	r1, r2, #2
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	6812      	ldr	r2, [r2, #0]
 8008d26:	430b      	orrs	r3, r1
 8008d28:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008d34:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d3c:	041a      	lsls	r2, r3, #16
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	430a      	orrs	r2, r1
 8008d44:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008d50:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d58:	061a      	lsls	r2, r3, #24
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	430a      	orrs	r2, r1
 8008d60:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d68:	4b34      	ldr	r3, [pc, #208]	@ (8008e3c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8008d6a:	4413      	add	r3, r2
 8008d6c:	009a      	lsls	r2, r3, #2
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	441a      	add	r2, r3
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d8a:	00db      	lsls	r3, r3, #3
 8008d8c:	441a      	add	r2, r3
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d9a:	6879      	ldr	r1, [r7, #4]
 8008d9c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8008d9e:	fb01 f303 	mul.w	r3, r1, r3
 8008da2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8008da4:	441a      	add	r2, r3
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008db2:	6879      	ldr	r1, [r7, #4]
 8008db4:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8008db6:	fb01 f303 	mul.w	r3, r1, r3
 8008dba:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8008dbc:	441a      	add	r2, r3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dca:	6879      	ldr	r1, [r7, #4]
 8008dcc:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8008dce:	fb01 f303 	mul.w	r3, r1, r3
 8008dd2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8008dd4:	441a      	add	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008de6:	00db      	lsls	r3, r3, #3
 8008de8:	441a      	add	r2, r3
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008dfa:	6879      	ldr	r1, [r7, #4]
 8008dfc:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8008dfe:	fb01 f303 	mul.w	r3, r1, r3
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	441a      	add	r2, r3
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e16:	6879      	ldr	r1, [r7, #4]
 8008e18:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8008e1a:	fb01 f303 	mul.w	r3, r1, r3
 8008e1e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8008e20:	441a      	add	r2, r3
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e2e:	4a04      	ldr	r2, [pc, #16]	@ (8008e40 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d915      	bls.n	8008e60 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008e34:	e006      	b.n	8008e44 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8008e36:	bf00      	nop
 8008e38:	ffff0003 	.word	0xffff0003
 8008e3c:	10002b00 	.word	0x10002b00
 8008e40:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008e4a:	f043 0220 	orr.w	r2, r3, #32
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2203      	movs	r2, #3
 8008e58:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	e010      	b.n	8008e82 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e64:	60fb      	str	r3, [r7, #12]
 8008e66:	e005      	b.n	8008e74 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	3304      	adds	r3, #4
 8008e72:	60fb      	str	r3, [r7, #12]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e7a:	68fa      	ldr	r2, [r7, #12]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d3f3      	bcc.n	8008e68 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3714      	adds	r7, #20
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop

08008e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b089      	sub	sp, #36	@ 0x24
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008e9e:	4b89      	ldr	r3, [pc, #548]	@ (80090c4 <HAL_GPIO_Init+0x234>)
 8008ea0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008ea2:	e194      	b.n	80091ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	2101      	movs	r1, #1
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	fa01 f303 	lsl.w	r3, r1, r3
 8008eb0:	4013      	ands	r3, r2
 8008eb2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f000 8186 	beq.w	80091c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	f003 0303 	and.w	r3, r3, #3
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d005      	beq.n	8008ed4 <HAL_GPIO_Init+0x44>
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	f003 0303 	and.w	r3, r3, #3
 8008ed0:	2b02      	cmp	r3, #2
 8008ed2:	d130      	bne.n	8008f36 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008eda:	69fb      	ldr	r3, [r7, #28]
 8008edc:	005b      	lsls	r3, r3, #1
 8008ede:	2203      	movs	r2, #3
 8008ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ee4:	43db      	mvns	r3, r3
 8008ee6:	69ba      	ldr	r2, [r7, #24]
 8008ee8:	4013      	ands	r3, r2
 8008eea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	68da      	ldr	r2, [r3, #12]
 8008ef0:	69fb      	ldr	r3, [r7, #28]
 8008ef2:	005b      	lsls	r3, r3, #1
 8008ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ef8:	69ba      	ldr	r2, [r7, #24]
 8008efa:	4313      	orrs	r3, r2
 8008efc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	69ba      	ldr	r2, [r7, #24]
 8008f02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f12:	43db      	mvns	r3, r3
 8008f14:	69ba      	ldr	r2, [r7, #24]
 8008f16:	4013      	ands	r3, r2
 8008f18:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	091b      	lsrs	r3, r3, #4
 8008f20:	f003 0201 	and.w	r2, r3, #1
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	fa02 f303 	lsl.w	r3, r2, r3
 8008f2a:	69ba      	ldr	r2, [r7, #24]
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	69ba      	ldr	r2, [r7, #24]
 8008f34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	f003 0303 	and.w	r3, r3, #3
 8008f3e:	2b03      	cmp	r3, #3
 8008f40:	d017      	beq.n	8008f72 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008f48:	69fb      	ldr	r3, [r7, #28]
 8008f4a:	005b      	lsls	r3, r3, #1
 8008f4c:	2203      	movs	r2, #3
 8008f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f52:	43db      	mvns	r3, r3
 8008f54:	69ba      	ldr	r2, [r7, #24]
 8008f56:	4013      	ands	r3, r2
 8008f58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	689a      	ldr	r2, [r3, #8]
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	005b      	lsls	r3, r3, #1
 8008f62:	fa02 f303 	lsl.w	r3, r2, r3
 8008f66:	69ba      	ldr	r2, [r7, #24]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	69ba      	ldr	r2, [r7, #24]
 8008f70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	f003 0303 	and.w	r3, r3, #3
 8008f7a:	2b02      	cmp	r3, #2
 8008f7c:	d123      	bne.n	8008fc6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	08da      	lsrs	r2, r3, #3
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	3208      	adds	r2, #8
 8008f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	f003 0307 	and.w	r3, r3, #7
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	220f      	movs	r2, #15
 8008f96:	fa02 f303 	lsl.w	r3, r2, r3
 8008f9a:	43db      	mvns	r3, r3
 8008f9c:	69ba      	ldr	r2, [r7, #24]
 8008f9e:	4013      	ands	r3, r2
 8008fa0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	691a      	ldr	r2, [r3, #16]
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	f003 0307 	and.w	r3, r3, #7
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	fa02 f303 	lsl.w	r3, r2, r3
 8008fb2:	69ba      	ldr	r2, [r7, #24]
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	08da      	lsrs	r2, r3, #3
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	3208      	adds	r2, #8
 8008fc0:	69b9      	ldr	r1, [r7, #24]
 8008fc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	005b      	lsls	r3, r3, #1
 8008fd0:	2203      	movs	r2, #3
 8008fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd6:	43db      	mvns	r3, r3
 8008fd8:	69ba      	ldr	r2, [r7, #24]
 8008fda:	4013      	ands	r3, r2
 8008fdc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	f003 0203 	and.w	r2, r3, #3
 8008fe6:	69fb      	ldr	r3, [r7, #28]
 8008fe8:	005b      	lsls	r3, r3, #1
 8008fea:	fa02 f303 	lsl.w	r3, r2, r3
 8008fee:	69ba      	ldr	r2, [r7, #24]
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	69ba      	ldr	r2, [r7, #24]
 8008ff8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009002:	2b00      	cmp	r3, #0
 8009004:	f000 80e0 	beq.w	80091c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009008:	4b2f      	ldr	r3, [pc, #188]	@ (80090c8 <HAL_GPIO_Init+0x238>)
 800900a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800900e:	4a2e      	ldr	r2, [pc, #184]	@ (80090c8 <HAL_GPIO_Init+0x238>)
 8009010:	f043 0302 	orr.w	r3, r3, #2
 8009014:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8009018:	4b2b      	ldr	r3, [pc, #172]	@ (80090c8 <HAL_GPIO_Init+0x238>)
 800901a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800901e:	f003 0302 	and.w	r3, r3, #2
 8009022:	60fb      	str	r3, [r7, #12]
 8009024:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009026:	4a29      	ldr	r2, [pc, #164]	@ (80090cc <HAL_GPIO_Init+0x23c>)
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	089b      	lsrs	r3, r3, #2
 800902c:	3302      	adds	r3, #2
 800902e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009032:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	f003 0303 	and.w	r3, r3, #3
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	220f      	movs	r2, #15
 800903e:	fa02 f303 	lsl.w	r3, r2, r3
 8009042:	43db      	mvns	r3, r3
 8009044:	69ba      	ldr	r2, [r7, #24]
 8009046:	4013      	ands	r3, r2
 8009048:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4a20      	ldr	r2, [pc, #128]	@ (80090d0 <HAL_GPIO_Init+0x240>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d052      	beq.n	80090f8 <HAL_GPIO_Init+0x268>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	4a1f      	ldr	r2, [pc, #124]	@ (80090d4 <HAL_GPIO_Init+0x244>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d031      	beq.n	80090be <HAL_GPIO_Init+0x22e>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	4a1e      	ldr	r2, [pc, #120]	@ (80090d8 <HAL_GPIO_Init+0x248>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d02b      	beq.n	80090ba <HAL_GPIO_Init+0x22a>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4a1d      	ldr	r2, [pc, #116]	@ (80090dc <HAL_GPIO_Init+0x24c>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d025      	beq.n	80090b6 <HAL_GPIO_Init+0x226>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	4a1c      	ldr	r2, [pc, #112]	@ (80090e0 <HAL_GPIO_Init+0x250>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d01f      	beq.n	80090b2 <HAL_GPIO_Init+0x222>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	4a1b      	ldr	r2, [pc, #108]	@ (80090e4 <HAL_GPIO_Init+0x254>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d019      	beq.n	80090ae <HAL_GPIO_Init+0x21e>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	4a1a      	ldr	r2, [pc, #104]	@ (80090e8 <HAL_GPIO_Init+0x258>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d013      	beq.n	80090aa <HAL_GPIO_Init+0x21a>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4a19      	ldr	r2, [pc, #100]	@ (80090ec <HAL_GPIO_Init+0x25c>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d00d      	beq.n	80090a6 <HAL_GPIO_Init+0x216>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	4a18      	ldr	r2, [pc, #96]	@ (80090f0 <HAL_GPIO_Init+0x260>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d007      	beq.n	80090a2 <HAL_GPIO_Init+0x212>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a17      	ldr	r2, [pc, #92]	@ (80090f4 <HAL_GPIO_Init+0x264>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d101      	bne.n	800909e <HAL_GPIO_Init+0x20e>
 800909a:	2309      	movs	r3, #9
 800909c:	e02d      	b.n	80090fa <HAL_GPIO_Init+0x26a>
 800909e:	230a      	movs	r3, #10
 80090a0:	e02b      	b.n	80090fa <HAL_GPIO_Init+0x26a>
 80090a2:	2308      	movs	r3, #8
 80090a4:	e029      	b.n	80090fa <HAL_GPIO_Init+0x26a>
 80090a6:	2307      	movs	r3, #7
 80090a8:	e027      	b.n	80090fa <HAL_GPIO_Init+0x26a>
 80090aa:	2306      	movs	r3, #6
 80090ac:	e025      	b.n	80090fa <HAL_GPIO_Init+0x26a>
 80090ae:	2305      	movs	r3, #5
 80090b0:	e023      	b.n	80090fa <HAL_GPIO_Init+0x26a>
 80090b2:	2304      	movs	r3, #4
 80090b4:	e021      	b.n	80090fa <HAL_GPIO_Init+0x26a>
 80090b6:	2303      	movs	r3, #3
 80090b8:	e01f      	b.n	80090fa <HAL_GPIO_Init+0x26a>
 80090ba:	2302      	movs	r3, #2
 80090bc:	e01d      	b.n	80090fa <HAL_GPIO_Init+0x26a>
 80090be:	2301      	movs	r3, #1
 80090c0:	e01b      	b.n	80090fa <HAL_GPIO_Init+0x26a>
 80090c2:	bf00      	nop
 80090c4:	58000080 	.word	0x58000080
 80090c8:	58024400 	.word	0x58024400
 80090cc:	58000400 	.word	0x58000400
 80090d0:	58020000 	.word	0x58020000
 80090d4:	58020400 	.word	0x58020400
 80090d8:	58020800 	.word	0x58020800
 80090dc:	58020c00 	.word	0x58020c00
 80090e0:	58021000 	.word	0x58021000
 80090e4:	58021400 	.word	0x58021400
 80090e8:	58021800 	.word	0x58021800
 80090ec:	58021c00 	.word	0x58021c00
 80090f0:	58022000 	.word	0x58022000
 80090f4:	58022400 	.word	0x58022400
 80090f8:	2300      	movs	r3, #0
 80090fa:	69fa      	ldr	r2, [r7, #28]
 80090fc:	f002 0203 	and.w	r2, r2, #3
 8009100:	0092      	lsls	r2, r2, #2
 8009102:	4093      	lsls	r3, r2
 8009104:	69ba      	ldr	r2, [r7, #24]
 8009106:	4313      	orrs	r3, r2
 8009108:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800910a:	4938      	ldr	r1, [pc, #224]	@ (80091ec <HAL_GPIO_Init+0x35c>)
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	089b      	lsrs	r3, r3, #2
 8009110:	3302      	adds	r3, #2
 8009112:	69ba      	ldr	r2, [r7, #24]
 8009114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009118:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	43db      	mvns	r3, r3
 8009124:	69ba      	ldr	r2, [r7, #24]
 8009126:	4013      	ands	r3, r2
 8009128:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009132:	2b00      	cmp	r3, #0
 8009134:	d003      	beq.n	800913e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8009136:	69ba      	ldr	r2, [r7, #24]
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	4313      	orrs	r3, r2
 800913c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800913e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009146:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	43db      	mvns	r3, r3
 8009152:	69ba      	ldr	r2, [r7, #24]
 8009154:	4013      	ands	r3, r2
 8009156:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009160:	2b00      	cmp	r3, #0
 8009162:	d003      	beq.n	800916c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009164:	69ba      	ldr	r2, [r7, #24]
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	4313      	orrs	r3, r2
 800916a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800916c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009170:	69bb      	ldr	r3, [r7, #24]
 8009172:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	43db      	mvns	r3, r3
 800917e:	69ba      	ldr	r2, [r7, #24]
 8009180:	4013      	ands	r3, r2
 8009182:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800918c:	2b00      	cmp	r3, #0
 800918e:	d003      	beq.n	8009198 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009190:	69ba      	ldr	r2, [r7, #24]
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	4313      	orrs	r3, r2
 8009196:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	69ba      	ldr	r2, [r7, #24]
 800919c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	43db      	mvns	r3, r3
 80091a8:	69ba      	ldr	r2, [r7, #24]
 80091aa:	4013      	ands	r3, r2
 80091ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d003      	beq.n	80091c2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80091ba:	69ba      	ldr	r2, [r7, #24]
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	4313      	orrs	r3, r2
 80091c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	69ba      	ldr	r2, [r7, #24]
 80091c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	3301      	adds	r3, #1
 80091cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	fa22 f303 	lsr.w	r3, r2, r3
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f47f ae63 	bne.w	8008ea4 <HAL_GPIO_Init+0x14>
  }
}
 80091de:	bf00      	nop
 80091e0:	bf00      	nop
 80091e2:	3724      	adds	r7, #36	@ 0x24
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr
 80091ec:	58000400 	.word	0x58000400

080091f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	460b      	mov	r3, r1
 80091fa:	807b      	strh	r3, [r7, #2]
 80091fc:	4613      	mov	r3, r2
 80091fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009200:	787b      	ldrb	r3, [r7, #1]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d003      	beq.n	800920e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009206:	887a      	ldrh	r2, [r7, #2]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800920c:	e003      	b.n	8009216 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800920e:	887b      	ldrh	r3, [r7, #2]
 8009210:	041a      	lsls	r2, r3, #16
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	619a      	str	r2, [r3, #24]
}
 8009216:	bf00      	nop
 8009218:	370c      	adds	r7, #12
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr
	...

08009224 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d101      	bne.n	8009236 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	e08b      	b.n	800934e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800923c:	b2db      	uxtb	r3, r3
 800923e:	2b00      	cmp	r3, #0
 8009240:	d106      	bne.n	8009250 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f7fa f948 	bl	80034e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2224      	movs	r2, #36	@ 0x24
 8009254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f022 0201 	bic.w	r2, r2, #1
 8009266:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	685a      	ldr	r2, [r3, #4]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009274:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	689a      	ldr	r2, [r3, #8]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009284:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	68db      	ldr	r3, [r3, #12]
 800928a:	2b01      	cmp	r3, #1
 800928c:	d107      	bne.n	800929e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	689a      	ldr	r2, [r3, #8]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800929a:	609a      	str	r2, [r3, #8]
 800929c:	e006      	b.n	80092ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	689a      	ldr	r2, [r3, #8]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80092aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	2b02      	cmp	r3, #2
 80092b2:	d108      	bne.n	80092c6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	685a      	ldr	r2, [r3, #4]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80092c2:	605a      	str	r2, [r3, #4]
 80092c4:	e007      	b.n	80092d6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	685a      	ldr	r2, [r3, #4]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80092d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	6859      	ldr	r1, [r3, #4]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	4b1d      	ldr	r3, [pc, #116]	@ (8009358 <HAL_I2C_Init+0x134>)
 80092e2:	430b      	orrs	r3, r1
 80092e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	68da      	ldr	r2, [r3, #12]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80092f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	691a      	ldr	r2, [r3, #16]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	695b      	ldr	r3, [r3, #20]
 80092fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	699b      	ldr	r3, [r3, #24]
 8009306:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	430a      	orrs	r2, r1
 800930e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	69d9      	ldr	r1, [r3, #28]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6a1a      	ldr	r2, [r3, #32]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	430a      	orrs	r2, r1
 800931e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f042 0201 	orr.w	r2, r2, #1
 800932e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2220      	movs	r2, #32
 800933a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800934c:	2300      	movs	r3, #0
}
 800934e:	4618      	mov	r0, r3
 8009350:	3708      	adds	r7, #8
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	02008000 	.word	0x02008000

0800935c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800936c:	b2db      	uxtb	r3, r3
 800936e:	2b20      	cmp	r3, #32
 8009370:	d138      	bne.n	80093e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009378:	2b01      	cmp	r3, #1
 800937a:	d101      	bne.n	8009380 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800937c:	2302      	movs	r3, #2
 800937e:	e032      	b.n	80093e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2201      	movs	r2, #1
 8009384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2224      	movs	r2, #36	@ 0x24
 800938c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f022 0201 	bic.w	r2, r2, #1
 800939e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80093ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	6819      	ldr	r1, [r3, #0]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	683a      	ldr	r2, [r7, #0]
 80093bc:	430a      	orrs	r2, r1
 80093be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	681a      	ldr	r2, [r3, #0]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f042 0201 	orr.w	r2, r2, #1
 80093ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2220      	movs	r2, #32
 80093d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80093e0:	2300      	movs	r3, #0
 80093e2:	e000      	b.n	80093e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80093e4:	2302      	movs	r3, #2
  }
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	370c      	adds	r7, #12
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr

080093f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80093f2:	b480      	push	{r7}
 80093f4:	b085      	sub	sp, #20
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
 80093fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009402:	b2db      	uxtb	r3, r3
 8009404:	2b20      	cmp	r3, #32
 8009406:	d139      	bne.n	800947c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800940e:	2b01      	cmp	r3, #1
 8009410:	d101      	bne.n	8009416 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009412:	2302      	movs	r3, #2
 8009414:	e033      	b.n	800947e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2201      	movs	r2, #1
 800941a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2224      	movs	r2, #36	@ 0x24
 8009422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f022 0201 	bic.w	r2, r2, #1
 8009434:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009444:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	021b      	lsls	r3, r3, #8
 800944a:	68fa      	ldr	r2, [r7, #12]
 800944c:	4313      	orrs	r3, r2
 800944e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	68fa      	ldr	r2, [r7, #12]
 8009456:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	681a      	ldr	r2, [r3, #0]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f042 0201 	orr.w	r2, r2, #1
 8009466:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2220      	movs	r2, #32
 800946c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009478:	2300      	movs	r3, #0
 800947a:	e000      	b.n	800947e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800947c:	2302      	movs	r3, #2
  }
}
 800947e:	4618      	mov	r0, r3
 8009480:	3714      	adds	r7, #20
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr
	...

0800948c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009494:	4b19      	ldr	r3, [pc, #100]	@ (80094fc <HAL_PWREx_ConfigSupply+0x70>)
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	f003 0304 	and.w	r3, r3, #4
 800949c:	2b04      	cmp	r3, #4
 800949e:	d00a      	beq.n	80094b6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80094a0:	4b16      	ldr	r3, [pc, #88]	@ (80094fc <HAL_PWREx_ConfigSupply+0x70>)
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	f003 0307 	and.w	r3, r3, #7
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d001      	beq.n	80094b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80094ae:	2301      	movs	r3, #1
 80094b0:	e01f      	b.n	80094f2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80094b2:	2300      	movs	r3, #0
 80094b4:	e01d      	b.n	80094f2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80094b6:	4b11      	ldr	r3, [pc, #68]	@ (80094fc <HAL_PWREx_ConfigSupply+0x70>)
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	f023 0207 	bic.w	r2, r3, #7
 80094be:	490f      	ldr	r1, [pc, #60]	@ (80094fc <HAL_PWREx_ConfigSupply+0x70>)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	4313      	orrs	r3, r2
 80094c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80094c6:	f7fc f8dd 	bl	8005684 <HAL_GetTick>
 80094ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80094cc:	e009      	b.n	80094e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80094ce:	f7fc f8d9 	bl	8005684 <HAL_GetTick>
 80094d2:	4602      	mov	r2, r0
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	1ad3      	subs	r3, r2, r3
 80094d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80094dc:	d901      	bls.n	80094e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	e007      	b.n	80094f2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80094e2:	4b06      	ldr	r3, [pc, #24]	@ (80094fc <HAL_PWREx_ConfigSupply+0x70>)
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80094ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094ee:	d1ee      	bne.n	80094ce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80094f0:	2300      	movs	r3, #0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	58024800 	.word	0x58024800

08009500 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b08c      	sub	sp, #48	@ 0x30
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d102      	bne.n	8009514 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800950e:	2301      	movs	r3, #1
 8009510:	f000 bc1f 	b.w	8009d52 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f003 0301 	and.w	r3, r3, #1
 800951c:	2b00      	cmp	r3, #0
 800951e:	f000 80b3 	beq.w	8009688 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009522:	4b95      	ldr	r3, [pc, #596]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 8009524:	691b      	ldr	r3, [r3, #16]
 8009526:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800952a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800952c:	4b92      	ldr	r3, [pc, #584]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 800952e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009530:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009534:	2b10      	cmp	r3, #16
 8009536:	d007      	beq.n	8009548 <HAL_RCC_OscConfig+0x48>
 8009538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800953a:	2b18      	cmp	r3, #24
 800953c:	d112      	bne.n	8009564 <HAL_RCC_OscConfig+0x64>
 800953e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009540:	f003 0303 	and.w	r3, r3, #3
 8009544:	2b02      	cmp	r3, #2
 8009546:	d10d      	bne.n	8009564 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009548:	4b8b      	ldr	r3, [pc, #556]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009550:	2b00      	cmp	r3, #0
 8009552:	f000 8098 	beq.w	8009686 <HAL_RCC_OscConfig+0x186>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	2b00      	cmp	r3, #0
 800955c:	f040 8093 	bne.w	8009686 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8009560:	2301      	movs	r3, #1
 8009562:	e3f6      	b.n	8009d52 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800956c:	d106      	bne.n	800957c <HAL_RCC_OscConfig+0x7c>
 800956e:	4b82      	ldr	r3, [pc, #520]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4a81      	ldr	r2, [pc, #516]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 8009574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009578:	6013      	str	r3, [r2, #0]
 800957a:	e058      	b.n	800962e <HAL_RCC_OscConfig+0x12e>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d112      	bne.n	80095aa <HAL_RCC_OscConfig+0xaa>
 8009584:	4b7c      	ldr	r3, [pc, #496]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a7b      	ldr	r2, [pc, #492]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 800958a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800958e:	6013      	str	r3, [r2, #0]
 8009590:	4b79      	ldr	r3, [pc, #484]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a78      	ldr	r2, [pc, #480]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 8009596:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800959a:	6013      	str	r3, [r2, #0]
 800959c:	4b76      	ldr	r3, [pc, #472]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a75      	ldr	r2, [pc, #468]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 80095a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80095a6:	6013      	str	r3, [r2, #0]
 80095a8:	e041      	b.n	800962e <HAL_RCC_OscConfig+0x12e>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80095b2:	d112      	bne.n	80095da <HAL_RCC_OscConfig+0xda>
 80095b4:	4b70      	ldr	r3, [pc, #448]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a6f      	ldr	r2, [pc, #444]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 80095ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80095be:	6013      	str	r3, [r2, #0]
 80095c0:	4b6d      	ldr	r3, [pc, #436]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a6c      	ldr	r2, [pc, #432]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 80095c6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80095ca:	6013      	str	r3, [r2, #0]
 80095cc:	4b6a      	ldr	r3, [pc, #424]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a69      	ldr	r2, [pc, #420]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 80095d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80095d6:	6013      	str	r3, [r2, #0]
 80095d8:	e029      	b.n	800962e <HAL_RCC_OscConfig+0x12e>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80095e2:	d112      	bne.n	800960a <HAL_RCC_OscConfig+0x10a>
 80095e4:	4b64      	ldr	r3, [pc, #400]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a63      	ldr	r2, [pc, #396]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 80095ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80095ee:	6013      	str	r3, [r2, #0]
 80095f0:	4b61      	ldr	r3, [pc, #388]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a60      	ldr	r2, [pc, #384]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 80095f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095fa:	6013      	str	r3, [r2, #0]
 80095fc:	4b5e      	ldr	r3, [pc, #376]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a5d      	ldr	r2, [pc, #372]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 8009602:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009606:	6013      	str	r3, [r2, #0]
 8009608:	e011      	b.n	800962e <HAL_RCC_OscConfig+0x12e>
 800960a:	4b5b      	ldr	r3, [pc, #364]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a5a      	ldr	r2, [pc, #360]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 8009610:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009614:	6013      	str	r3, [r2, #0]
 8009616:	4b58      	ldr	r3, [pc, #352]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a57      	ldr	r2, [pc, #348]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 800961c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009620:	6013      	str	r3, [r2, #0]
 8009622:	4b55      	ldr	r3, [pc, #340]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a54      	ldr	r2, [pc, #336]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 8009628:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800962c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d013      	beq.n	800965e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009636:	f7fc f825 	bl	8005684 <HAL_GetTick>
 800963a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800963c:	e008      	b.n	8009650 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800963e:	f7fc f821 	bl	8005684 <HAL_GetTick>
 8009642:	4602      	mov	r2, r0
 8009644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009646:	1ad3      	subs	r3, r2, r3
 8009648:	2b64      	cmp	r3, #100	@ 0x64
 800964a:	d901      	bls.n	8009650 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800964c:	2303      	movs	r3, #3
 800964e:	e380      	b.n	8009d52 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009650:	4b49      	ldr	r3, [pc, #292]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009658:	2b00      	cmp	r3, #0
 800965a:	d0f0      	beq.n	800963e <HAL_RCC_OscConfig+0x13e>
 800965c:	e014      	b.n	8009688 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800965e:	f7fc f811 	bl	8005684 <HAL_GetTick>
 8009662:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009664:	e008      	b.n	8009678 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009666:	f7fc f80d 	bl	8005684 <HAL_GetTick>
 800966a:	4602      	mov	r2, r0
 800966c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800966e:	1ad3      	subs	r3, r2, r3
 8009670:	2b64      	cmp	r3, #100	@ 0x64
 8009672:	d901      	bls.n	8009678 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8009674:	2303      	movs	r3, #3
 8009676:	e36c      	b.n	8009d52 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009678:	4b3f      	ldr	r3, [pc, #252]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009680:	2b00      	cmp	r3, #0
 8009682:	d1f0      	bne.n	8009666 <HAL_RCC_OscConfig+0x166>
 8009684:	e000      	b.n	8009688 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009686:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f003 0302 	and.w	r3, r3, #2
 8009690:	2b00      	cmp	r3, #0
 8009692:	f000 808c 	beq.w	80097ae <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009696:	4b38      	ldr	r3, [pc, #224]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 8009698:	691b      	ldr	r3, [r3, #16]
 800969a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800969e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80096a0:	4b35      	ldr	r3, [pc, #212]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 80096a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096a4:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80096a6:	6a3b      	ldr	r3, [r7, #32]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d007      	beq.n	80096bc <HAL_RCC_OscConfig+0x1bc>
 80096ac:	6a3b      	ldr	r3, [r7, #32]
 80096ae:	2b18      	cmp	r3, #24
 80096b0:	d137      	bne.n	8009722 <HAL_RCC_OscConfig+0x222>
 80096b2:	69fb      	ldr	r3, [r7, #28]
 80096b4:	f003 0303 	and.w	r3, r3, #3
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d132      	bne.n	8009722 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80096bc:	4b2e      	ldr	r3, [pc, #184]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f003 0304 	and.w	r3, r3, #4
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d005      	beq.n	80096d4 <HAL_RCC_OscConfig+0x1d4>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	68db      	ldr	r3, [r3, #12]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d101      	bne.n	80096d4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	e33e      	b.n	8009d52 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80096d4:	4b28      	ldr	r3, [pc, #160]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f023 0219 	bic.w	r2, r3, #25
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	4925      	ldr	r1, [pc, #148]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 80096e2:	4313      	orrs	r3, r2
 80096e4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096e6:	f7fb ffcd 	bl	8005684 <HAL_GetTick>
 80096ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80096ec:	e008      	b.n	8009700 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80096ee:	f7fb ffc9 	bl	8005684 <HAL_GetTick>
 80096f2:	4602      	mov	r2, r0
 80096f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096f6:	1ad3      	subs	r3, r2, r3
 80096f8:	2b02      	cmp	r3, #2
 80096fa:	d901      	bls.n	8009700 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80096fc:	2303      	movs	r3, #3
 80096fe:	e328      	b.n	8009d52 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009700:	4b1d      	ldr	r3, [pc, #116]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f003 0304 	and.w	r3, r3, #4
 8009708:	2b00      	cmp	r3, #0
 800970a:	d0f0      	beq.n	80096ee <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800970c:	4b1a      	ldr	r3, [pc, #104]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	691b      	ldr	r3, [r3, #16]
 8009718:	061b      	lsls	r3, r3, #24
 800971a:	4917      	ldr	r1, [pc, #92]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 800971c:	4313      	orrs	r3, r2
 800971e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009720:	e045      	b.n	80097ae <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	68db      	ldr	r3, [r3, #12]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d028      	beq.n	800977c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800972a:	4b13      	ldr	r3, [pc, #76]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f023 0219 	bic.w	r2, r3, #25
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	4910      	ldr	r1, [pc, #64]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 8009738:	4313      	orrs	r3, r2
 800973a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800973c:	f7fb ffa2 	bl	8005684 <HAL_GetTick>
 8009740:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009742:	e008      	b.n	8009756 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009744:	f7fb ff9e 	bl	8005684 <HAL_GetTick>
 8009748:	4602      	mov	r2, r0
 800974a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800974c:	1ad3      	subs	r3, r2, r3
 800974e:	2b02      	cmp	r3, #2
 8009750:	d901      	bls.n	8009756 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8009752:	2303      	movs	r3, #3
 8009754:	e2fd      	b.n	8009d52 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009756:	4b08      	ldr	r3, [pc, #32]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f003 0304 	and.w	r3, r3, #4
 800975e:	2b00      	cmp	r3, #0
 8009760:	d0f0      	beq.n	8009744 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009762:	4b05      	ldr	r3, [pc, #20]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	691b      	ldr	r3, [r3, #16]
 800976e:	061b      	lsls	r3, r3, #24
 8009770:	4901      	ldr	r1, [pc, #4]	@ (8009778 <HAL_RCC_OscConfig+0x278>)
 8009772:	4313      	orrs	r3, r2
 8009774:	604b      	str	r3, [r1, #4]
 8009776:	e01a      	b.n	80097ae <HAL_RCC_OscConfig+0x2ae>
 8009778:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800977c:	4b97      	ldr	r3, [pc, #604]	@ (80099dc <HAL_RCC_OscConfig+0x4dc>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a96      	ldr	r2, [pc, #600]	@ (80099dc <HAL_RCC_OscConfig+0x4dc>)
 8009782:	f023 0301 	bic.w	r3, r3, #1
 8009786:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009788:	f7fb ff7c 	bl	8005684 <HAL_GetTick>
 800978c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800978e:	e008      	b.n	80097a2 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009790:	f7fb ff78 	bl	8005684 <HAL_GetTick>
 8009794:	4602      	mov	r2, r0
 8009796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009798:	1ad3      	subs	r3, r2, r3
 800979a:	2b02      	cmp	r3, #2
 800979c:	d901      	bls.n	80097a2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800979e:	2303      	movs	r3, #3
 80097a0:	e2d7      	b.n	8009d52 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80097a2:	4b8e      	ldr	r3, [pc, #568]	@ (80099dc <HAL_RCC_OscConfig+0x4dc>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f003 0304 	and.w	r3, r3, #4
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d1f0      	bne.n	8009790 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f003 0310 	and.w	r3, r3, #16
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d06a      	beq.n	8009890 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80097ba:	4b88      	ldr	r3, [pc, #544]	@ (80099dc <HAL_RCC_OscConfig+0x4dc>)
 80097bc:	691b      	ldr	r3, [r3, #16]
 80097be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80097c2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80097c4:	4b85      	ldr	r3, [pc, #532]	@ (80099dc <HAL_RCC_OscConfig+0x4dc>)
 80097c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097c8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80097ca:	69bb      	ldr	r3, [r7, #24]
 80097cc:	2b08      	cmp	r3, #8
 80097ce:	d007      	beq.n	80097e0 <HAL_RCC_OscConfig+0x2e0>
 80097d0:	69bb      	ldr	r3, [r7, #24]
 80097d2:	2b18      	cmp	r3, #24
 80097d4:	d11b      	bne.n	800980e <HAL_RCC_OscConfig+0x30e>
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	f003 0303 	and.w	r3, r3, #3
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d116      	bne.n	800980e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80097e0:	4b7e      	ldr	r3, [pc, #504]	@ (80099dc <HAL_RCC_OscConfig+0x4dc>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d005      	beq.n	80097f8 <HAL_RCC_OscConfig+0x2f8>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	69db      	ldr	r3, [r3, #28]
 80097f0:	2b80      	cmp	r3, #128	@ 0x80
 80097f2:	d001      	beq.n	80097f8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80097f4:	2301      	movs	r3, #1
 80097f6:	e2ac      	b.n	8009d52 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80097f8:	4b78      	ldr	r3, [pc, #480]	@ (80099dc <HAL_RCC_OscConfig+0x4dc>)
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6a1b      	ldr	r3, [r3, #32]
 8009804:	061b      	lsls	r3, r3, #24
 8009806:	4975      	ldr	r1, [pc, #468]	@ (80099dc <HAL_RCC_OscConfig+0x4dc>)
 8009808:	4313      	orrs	r3, r2
 800980a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800980c:	e040      	b.n	8009890 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	69db      	ldr	r3, [r3, #28]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d023      	beq.n	800985e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009816:	4b71      	ldr	r3, [pc, #452]	@ (80099dc <HAL_RCC_OscConfig+0x4dc>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a70      	ldr	r2, [pc, #448]	@ (80099dc <HAL_RCC_OscConfig+0x4dc>)
 800981c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009820:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009822:	f7fb ff2f 	bl	8005684 <HAL_GetTick>
 8009826:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009828:	e008      	b.n	800983c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800982a:	f7fb ff2b 	bl	8005684 <HAL_GetTick>
 800982e:	4602      	mov	r2, r0
 8009830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009832:	1ad3      	subs	r3, r2, r3
 8009834:	2b02      	cmp	r3, #2
 8009836:	d901      	bls.n	800983c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8009838:	2303      	movs	r3, #3
 800983a:	e28a      	b.n	8009d52 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800983c:	4b67      	ldr	r3, [pc, #412]	@ (80099dc <HAL_RCC_OscConfig+0x4dc>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009844:	2b00      	cmp	r3, #0
 8009846:	d0f0      	beq.n	800982a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009848:	4b64      	ldr	r3, [pc, #400]	@ (80099dc <HAL_RCC_OscConfig+0x4dc>)
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6a1b      	ldr	r3, [r3, #32]
 8009854:	061b      	lsls	r3, r3, #24
 8009856:	4961      	ldr	r1, [pc, #388]	@ (80099dc <HAL_RCC_OscConfig+0x4dc>)
 8009858:	4313      	orrs	r3, r2
 800985a:	60cb      	str	r3, [r1, #12]
 800985c:	e018      	b.n	8009890 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800985e:	4b5f      	ldr	r3, [pc, #380]	@ (80099dc <HAL_RCC_OscConfig+0x4dc>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a5e      	ldr	r2, [pc, #376]	@ (80099dc <HAL_RCC_OscConfig+0x4dc>)
 8009864:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009868:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800986a:	f7fb ff0b 	bl	8005684 <HAL_GetTick>
 800986e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009870:	e008      	b.n	8009884 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009872:	f7fb ff07 	bl	8005684 <HAL_GetTick>
 8009876:	4602      	mov	r2, r0
 8009878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800987a:	1ad3      	subs	r3, r2, r3
 800987c:	2b02      	cmp	r3, #2
 800987e:	d901      	bls.n	8009884 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8009880:	2303      	movs	r3, #3
 8009882:	e266      	b.n	8009d52 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009884:	4b55      	ldr	r3, [pc, #340]	@ (80099dc <HAL_RCC_OscConfig+0x4dc>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800988c:	2b00      	cmp	r3, #0
 800988e:	d1f0      	bne.n	8009872 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f003 0308 	and.w	r3, r3, #8
 8009898:	2b00      	cmp	r3, #0
 800989a:	d036      	beq.n	800990a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	695b      	ldr	r3, [r3, #20]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d019      	beq.n	80098d8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80098a4:	4b4d      	ldr	r3, [pc, #308]	@ (80099dc <HAL_RCC_OscConfig+0x4dc>)
 80098a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098a8:	4a4c      	ldr	r2, [pc, #304]	@ (80099dc <HAL_RCC_OscConfig+0x4dc>)
 80098aa:	f043 0301 	orr.w	r3, r3, #1
 80098ae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098b0:	f7fb fee8 	bl	8005684 <HAL_GetTick>
 80098b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80098b6:	e008      	b.n	80098ca <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80098b8:	f7fb fee4 	bl	8005684 <HAL_GetTick>
 80098bc:	4602      	mov	r2, r0
 80098be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c0:	1ad3      	subs	r3, r2, r3
 80098c2:	2b02      	cmp	r3, #2
 80098c4:	d901      	bls.n	80098ca <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80098c6:	2303      	movs	r3, #3
 80098c8:	e243      	b.n	8009d52 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80098ca:	4b44      	ldr	r3, [pc, #272]	@ (80099dc <HAL_RCC_OscConfig+0x4dc>)
 80098cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098ce:	f003 0302 	and.w	r3, r3, #2
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d0f0      	beq.n	80098b8 <HAL_RCC_OscConfig+0x3b8>
 80098d6:	e018      	b.n	800990a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80098d8:	4b40      	ldr	r3, [pc, #256]	@ (80099dc <HAL_RCC_OscConfig+0x4dc>)
 80098da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098dc:	4a3f      	ldr	r2, [pc, #252]	@ (80099dc <HAL_RCC_OscConfig+0x4dc>)
 80098de:	f023 0301 	bic.w	r3, r3, #1
 80098e2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098e4:	f7fb fece 	bl	8005684 <HAL_GetTick>
 80098e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80098ea:	e008      	b.n	80098fe <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80098ec:	f7fb feca 	bl	8005684 <HAL_GetTick>
 80098f0:	4602      	mov	r2, r0
 80098f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f4:	1ad3      	subs	r3, r2, r3
 80098f6:	2b02      	cmp	r3, #2
 80098f8:	d901      	bls.n	80098fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80098fa:	2303      	movs	r3, #3
 80098fc:	e229      	b.n	8009d52 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80098fe:	4b37      	ldr	r3, [pc, #220]	@ (80099dc <HAL_RCC_OscConfig+0x4dc>)
 8009900:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009902:	f003 0302 	and.w	r3, r3, #2
 8009906:	2b00      	cmp	r3, #0
 8009908:	d1f0      	bne.n	80098ec <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f003 0320 	and.w	r3, r3, #32
 8009912:	2b00      	cmp	r3, #0
 8009914:	d036      	beq.n	8009984 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	699b      	ldr	r3, [r3, #24]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d019      	beq.n	8009952 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800991e:	4b2f      	ldr	r3, [pc, #188]	@ (80099dc <HAL_RCC_OscConfig+0x4dc>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4a2e      	ldr	r2, [pc, #184]	@ (80099dc <HAL_RCC_OscConfig+0x4dc>)
 8009924:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009928:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800992a:	f7fb feab 	bl	8005684 <HAL_GetTick>
 800992e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009930:	e008      	b.n	8009944 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009932:	f7fb fea7 	bl	8005684 <HAL_GetTick>
 8009936:	4602      	mov	r2, r0
 8009938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800993a:	1ad3      	subs	r3, r2, r3
 800993c:	2b02      	cmp	r3, #2
 800993e:	d901      	bls.n	8009944 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8009940:	2303      	movs	r3, #3
 8009942:	e206      	b.n	8009d52 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009944:	4b25      	ldr	r3, [pc, #148]	@ (80099dc <HAL_RCC_OscConfig+0x4dc>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800994c:	2b00      	cmp	r3, #0
 800994e:	d0f0      	beq.n	8009932 <HAL_RCC_OscConfig+0x432>
 8009950:	e018      	b.n	8009984 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009952:	4b22      	ldr	r3, [pc, #136]	@ (80099dc <HAL_RCC_OscConfig+0x4dc>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a21      	ldr	r2, [pc, #132]	@ (80099dc <HAL_RCC_OscConfig+0x4dc>)
 8009958:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800995c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800995e:	f7fb fe91 	bl	8005684 <HAL_GetTick>
 8009962:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009964:	e008      	b.n	8009978 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009966:	f7fb fe8d 	bl	8005684 <HAL_GetTick>
 800996a:	4602      	mov	r2, r0
 800996c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800996e:	1ad3      	subs	r3, r2, r3
 8009970:	2b02      	cmp	r3, #2
 8009972:	d901      	bls.n	8009978 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8009974:	2303      	movs	r3, #3
 8009976:	e1ec      	b.n	8009d52 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009978:	4b18      	ldr	r3, [pc, #96]	@ (80099dc <HAL_RCC_OscConfig+0x4dc>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009980:	2b00      	cmp	r3, #0
 8009982:	d1f0      	bne.n	8009966 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f003 0304 	and.w	r3, r3, #4
 800998c:	2b00      	cmp	r3, #0
 800998e:	f000 80af 	beq.w	8009af0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009992:	4b13      	ldr	r3, [pc, #76]	@ (80099e0 <HAL_RCC_OscConfig+0x4e0>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a12      	ldr	r2, [pc, #72]	@ (80099e0 <HAL_RCC_OscConfig+0x4e0>)
 8009998:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800999c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800999e:	f7fb fe71 	bl	8005684 <HAL_GetTick>
 80099a2:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80099a4:	e008      	b.n	80099b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099a6:	f7fb fe6d 	bl	8005684 <HAL_GetTick>
 80099aa:	4602      	mov	r2, r0
 80099ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ae:	1ad3      	subs	r3, r2, r3
 80099b0:	2b64      	cmp	r3, #100	@ 0x64
 80099b2:	d901      	bls.n	80099b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80099b4:	2303      	movs	r3, #3
 80099b6:	e1cc      	b.n	8009d52 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80099b8:	4b09      	ldr	r3, [pc, #36]	@ (80099e0 <HAL_RCC_OscConfig+0x4e0>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d0f0      	beq.n	80099a6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d10b      	bne.n	80099e4 <HAL_RCC_OscConfig+0x4e4>
 80099cc:	4b03      	ldr	r3, [pc, #12]	@ (80099dc <HAL_RCC_OscConfig+0x4dc>)
 80099ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099d0:	4a02      	ldr	r2, [pc, #8]	@ (80099dc <HAL_RCC_OscConfig+0x4dc>)
 80099d2:	f043 0301 	orr.w	r3, r3, #1
 80099d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80099d8:	e05b      	b.n	8009a92 <HAL_RCC_OscConfig+0x592>
 80099da:	bf00      	nop
 80099dc:	58024400 	.word	0x58024400
 80099e0:	58024800 	.word	0x58024800
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d112      	bne.n	8009a12 <HAL_RCC_OscConfig+0x512>
 80099ec:	4b9d      	ldr	r3, [pc, #628]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 80099ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099f0:	4a9c      	ldr	r2, [pc, #624]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 80099f2:	f023 0301 	bic.w	r3, r3, #1
 80099f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80099f8:	4b9a      	ldr	r3, [pc, #616]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 80099fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099fc:	4a99      	ldr	r2, [pc, #612]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 80099fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a02:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a04:	4b97      	ldr	r3, [pc, #604]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009a06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a08:	4a96      	ldr	r2, [pc, #600]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009a0a:	f023 0304 	bic.w	r3, r3, #4
 8009a0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a10:	e03f      	b.n	8009a92 <HAL_RCC_OscConfig+0x592>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	2b05      	cmp	r3, #5
 8009a18:	d112      	bne.n	8009a40 <HAL_RCC_OscConfig+0x540>
 8009a1a:	4b92      	ldr	r3, [pc, #584]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a1e:	4a91      	ldr	r2, [pc, #580]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009a20:	f043 0304 	orr.w	r3, r3, #4
 8009a24:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a26:	4b8f      	ldr	r3, [pc, #572]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a2a:	4a8e      	ldr	r2, [pc, #568]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009a2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a30:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a32:	4b8c      	ldr	r3, [pc, #560]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a36:	4a8b      	ldr	r2, [pc, #556]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009a38:	f043 0301 	orr.w	r3, r3, #1
 8009a3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a3e:	e028      	b.n	8009a92 <HAL_RCC_OscConfig+0x592>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	2b85      	cmp	r3, #133	@ 0x85
 8009a46:	d112      	bne.n	8009a6e <HAL_RCC_OscConfig+0x56e>
 8009a48:	4b86      	ldr	r3, [pc, #536]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009a4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a4c:	4a85      	ldr	r2, [pc, #532]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009a4e:	f043 0304 	orr.w	r3, r3, #4
 8009a52:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a54:	4b83      	ldr	r3, [pc, #524]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009a56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a58:	4a82      	ldr	r2, [pc, #520]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009a5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a60:	4b80      	ldr	r3, [pc, #512]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a64:	4a7f      	ldr	r2, [pc, #508]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009a66:	f043 0301 	orr.w	r3, r3, #1
 8009a6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a6c:	e011      	b.n	8009a92 <HAL_RCC_OscConfig+0x592>
 8009a6e:	4b7d      	ldr	r3, [pc, #500]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a72:	4a7c      	ldr	r2, [pc, #496]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009a74:	f023 0301 	bic.w	r3, r3, #1
 8009a78:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a7a:	4b7a      	ldr	r3, [pc, #488]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a7e:	4a79      	ldr	r2, [pc, #484]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009a80:	f023 0304 	bic.w	r3, r3, #4
 8009a84:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a86:	4b77      	ldr	r3, [pc, #476]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a8a:	4a76      	ldr	r2, [pc, #472]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009a8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a90:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	689b      	ldr	r3, [r3, #8]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d015      	beq.n	8009ac6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a9a:	f7fb fdf3 	bl	8005684 <HAL_GetTick>
 8009a9e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009aa0:	e00a      	b.n	8009ab8 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009aa2:	f7fb fdef 	bl	8005684 <HAL_GetTick>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aaa:	1ad3      	subs	r3, r2, r3
 8009aac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d901      	bls.n	8009ab8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8009ab4:	2303      	movs	r3, #3
 8009ab6:	e14c      	b.n	8009d52 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ab8:	4b6a      	ldr	r3, [pc, #424]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009abc:	f003 0302 	and.w	r3, r3, #2
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d0ee      	beq.n	8009aa2 <HAL_RCC_OscConfig+0x5a2>
 8009ac4:	e014      	b.n	8009af0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ac6:	f7fb fddd 	bl	8005684 <HAL_GetTick>
 8009aca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009acc:	e00a      	b.n	8009ae4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ace:	f7fb fdd9 	bl	8005684 <HAL_GetTick>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ad6:	1ad3      	subs	r3, r2, r3
 8009ad8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d901      	bls.n	8009ae4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8009ae0:	2303      	movs	r3, #3
 8009ae2:	e136      	b.n	8009d52 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009ae4:	4b5f      	ldr	r3, [pc, #380]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ae8:	f003 0302 	and.w	r3, r3, #2
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d1ee      	bne.n	8009ace <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	f000 812b 	beq.w	8009d50 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009afa:	4b5a      	ldr	r3, [pc, #360]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009afc:	691b      	ldr	r3, [r3, #16]
 8009afe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009b02:	2b18      	cmp	r3, #24
 8009b04:	f000 80bb 	beq.w	8009c7e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b0c:	2b02      	cmp	r3, #2
 8009b0e:	f040 8095 	bne.w	8009c3c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b12:	4b54      	ldr	r3, [pc, #336]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a53      	ldr	r2, [pc, #332]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009b18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009b1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b1e:	f7fb fdb1 	bl	8005684 <HAL_GetTick>
 8009b22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b24:	e008      	b.n	8009b38 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b26:	f7fb fdad 	bl	8005684 <HAL_GetTick>
 8009b2a:	4602      	mov	r2, r0
 8009b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b2e:	1ad3      	subs	r3, r2, r3
 8009b30:	2b02      	cmp	r3, #2
 8009b32:	d901      	bls.n	8009b38 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8009b34:	2303      	movs	r3, #3
 8009b36:	e10c      	b.n	8009d52 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b38:	4b4a      	ldr	r3, [pc, #296]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d1f0      	bne.n	8009b26 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009b44:	4b47      	ldr	r3, [pc, #284]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009b46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009b48:	4b47      	ldr	r3, [pc, #284]	@ (8009c68 <HAL_RCC_OscConfig+0x768>)
 8009b4a:	4013      	ands	r3, r2
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009b54:	0112      	lsls	r2, r2, #4
 8009b56:	430a      	orrs	r2, r1
 8009b58:	4942      	ldr	r1, [pc, #264]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	628b      	str	r3, [r1, #40]	@ 0x28
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b62:	3b01      	subs	r3, #1
 8009b64:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b6c:	3b01      	subs	r3, #1
 8009b6e:	025b      	lsls	r3, r3, #9
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	431a      	orrs	r2, r3
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b78:	3b01      	subs	r3, #1
 8009b7a:	041b      	lsls	r3, r3, #16
 8009b7c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009b80:	431a      	orrs	r2, r3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b86:	3b01      	subs	r3, #1
 8009b88:	061b      	lsls	r3, r3, #24
 8009b8a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009b8e:	4935      	ldr	r1, [pc, #212]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009b90:	4313      	orrs	r3, r2
 8009b92:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009b94:	4b33      	ldr	r3, [pc, #204]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b98:	4a32      	ldr	r2, [pc, #200]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009b9a:	f023 0301 	bic.w	r3, r3, #1
 8009b9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009ba0:	4b30      	ldr	r3, [pc, #192]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009ba2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ba4:	4b31      	ldr	r3, [pc, #196]	@ (8009c6c <HAL_RCC_OscConfig+0x76c>)
 8009ba6:	4013      	ands	r3, r2
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009bac:	00d2      	lsls	r2, r2, #3
 8009bae:	492d      	ldr	r1, [pc, #180]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009bb4:	4b2b      	ldr	r3, [pc, #172]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bb8:	f023 020c 	bic.w	r2, r3, #12
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bc0:	4928      	ldr	r1, [pc, #160]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009bc6:	4b27      	ldr	r3, [pc, #156]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bca:	f023 0202 	bic.w	r2, r3, #2
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bd2:	4924      	ldr	r1, [pc, #144]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009bd8:	4b22      	ldr	r3, [pc, #136]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bdc:	4a21      	ldr	r2, [pc, #132]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009bde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009be2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009be4:	4b1f      	ldr	r3, [pc, #124]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009be8:	4a1e      	ldr	r2, [pc, #120]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009bea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009bee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bf4:	4a1b      	ldr	r2, [pc, #108]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009bf6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009bfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009bfc:	4b19      	ldr	r3, [pc, #100]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c00:	4a18      	ldr	r2, [pc, #96]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009c02:	f043 0301 	orr.w	r3, r3, #1
 8009c06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009c08:	4b16      	ldr	r3, [pc, #88]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a15      	ldr	r2, [pc, #84]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009c0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c14:	f7fb fd36 	bl	8005684 <HAL_GetTick>
 8009c18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009c1a:	e008      	b.n	8009c2e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c1c:	f7fb fd32 	bl	8005684 <HAL_GetTick>
 8009c20:	4602      	mov	r2, r0
 8009c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c24:	1ad3      	subs	r3, r2, r3
 8009c26:	2b02      	cmp	r3, #2
 8009c28:	d901      	bls.n	8009c2e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8009c2a:	2303      	movs	r3, #3
 8009c2c:	e091      	b.n	8009d52 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d0f0      	beq.n	8009c1c <HAL_RCC_OscConfig+0x71c>
 8009c3a:	e089      	b.n	8009d50 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c3c:	4b09      	ldr	r3, [pc, #36]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a08      	ldr	r2, [pc, #32]	@ (8009c64 <HAL_RCC_OscConfig+0x764>)
 8009c42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c48:	f7fb fd1c 	bl	8005684 <HAL_GetTick>
 8009c4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009c4e:	e00f      	b.n	8009c70 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c50:	f7fb fd18 	bl	8005684 <HAL_GetTick>
 8009c54:	4602      	mov	r2, r0
 8009c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c58:	1ad3      	subs	r3, r2, r3
 8009c5a:	2b02      	cmp	r3, #2
 8009c5c:	d908      	bls.n	8009c70 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8009c5e:	2303      	movs	r3, #3
 8009c60:	e077      	b.n	8009d52 <HAL_RCC_OscConfig+0x852>
 8009c62:	bf00      	nop
 8009c64:	58024400 	.word	0x58024400
 8009c68:	fffffc0c 	.word	0xfffffc0c
 8009c6c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009c70:	4b3a      	ldr	r3, [pc, #232]	@ (8009d5c <HAL_RCC_OscConfig+0x85c>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d1e9      	bne.n	8009c50 <HAL_RCC_OscConfig+0x750>
 8009c7c:	e068      	b.n	8009d50 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009c7e:	4b37      	ldr	r3, [pc, #220]	@ (8009d5c <HAL_RCC_OscConfig+0x85c>)
 8009c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c82:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009c84:	4b35      	ldr	r3, [pc, #212]	@ (8009d5c <HAL_RCC_OscConfig+0x85c>)
 8009c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c88:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d031      	beq.n	8009cf6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	f003 0203 	and.w	r2, r3, #3
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d12a      	bne.n	8009cf6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	091b      	lsrs	r3, r3, #4
 8009ca4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d122      	bne.n	8009cf6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cba:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d11a      	bne.n	8009cf6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	0a5b      	lsrs	r3, r3, #9
 8009cc4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ccc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d111      	bne.n	8009cf6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	0c1b      	lsrs	r3, r3, #16
 8009cd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cde:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d108      	bne.n	8009cf6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	0e1b      	lsrs	r3, r3, #24
 8009ce8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cf0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d001      	beq.n	8009cfa <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	e02b      	b.n	8009d52 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009cfa:	4b18      	ldr	r3, [pc, #96]	@ (8009d5c <HAL_RCC_OscConfig+0x85c>)
 8009cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cfe:	08db      	lsrs	r3, r3, #3
 8009d00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d04:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d0a:	693a      	ldr	r2, [r7, #16]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d01f      	beq.n	8009d50 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009d10:	4b12      	ldr	r3, [pc, #72]	@ (8009d5c <HAL_RCC_OscConfig+0x85c>)
 8009d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d14:	4a11      	ldr	r2, [pc, #68]	@ (8009d5c <HAL_RCC_OscConfig+0x85c>)
 8009d16:	f023 0301 	bic.w	r3, r3, #1
 8009d1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009d1c:	f7fb fcb2 	bl	8005684 <HAL_GetTick>
 8009d20:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009d22:	bf00      	nop
 8009d24:	f7fb fcae 	bl	8005684 <HAL_GetTick>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d0f9      	beq.n	8009d24 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009d30:	4b0a      	ldr	r3, [pc, #40]	@ (8009d5c <HAL_RCC_OscConfig+0x85c>)
 8009d32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d34:	4b0a      	ldr	r3, [pc, #40]	@ (8009d60 <HAL_RCC_OscConfig+0x860>)
 8009d36:	4013      	ands	r3, r2
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009d3c:	00d2      	lsls	r2, r2, #3
 8009d3e:	4907      	ldr	r1, [pc, #28]	@ (8009d5c <HAL_RCC_OscConfig+0x85c>)
 8009d40:	4313      	orrs	r3, r2
 8009d42:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009d44:	4b05      	ldr	r3, [pc, #20]	@ (8009d5c <HAL_RCC_OscConfig+0x85c>)
 8009d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d48:	4a04      	ldr	r2, [pc, #16]	@ (8009d5c <HAL_RCC_OscConfig+0x85c>)
 8009d4a:	f043 0301 	orr.w	r3, r3, #1
 8009d4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3730      	adds	r7, #48	@ 0x30
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	58024400 	.word	0x58024400
 8009d60:	ffff0007 	.word	0xffff0007

08009d64 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b086      	sub	sp, #24
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d101      	bne.n	8009d78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009d74:	2301      	movs	r3, #1
 8009d76:	e19c      	b.n	800a0b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009d78:	4b8a      	ldr	r3, [pc, #552]	@ (8009fa4 <HAL_RCC_ClockConfig+0x240>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f003 030f 	and.w	r3, r3, #15
 8009d80:	683a      	ldr	r2, [r7, #0]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d910      	bls.n	8009da8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d86:	4b87      	ldr	r3, [pc, #540]	@ (8009fa4 <HAL_RCC_ClockConfig+0x240>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f023 020f 	bic.w	r2, r3, #15
 8009d8e:	4985      	ldr	r1, [pc, #532]	@ (8009fa4 <HAL_RCC_ClockConfig+0x240>)
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	4313      	orrs	r3, r2
 8009d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d96:	4b83      	ldr	r3, [pc, #524]	@ (8009fa4 <HAL_RCC_ClockConfig+0x240>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f003 030f 	and.w	r3, r3, #15
 8009d9e:	683a      	ldr	r2, [r7, #0]
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d001      	beq.n	8009da8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009da4:	2301      	movs	r3, #1
 8009da6:	e184      	b.n	800a0b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f003 0304 	and.w	r3, r3, #4
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d010      	beq.n	8009dd6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	691a      	ldr	r2, [r3, #16]
 8009db8:	4b7b      	ldr	r3, [pc, #492]	@ (8009fa8 <HAL_RCC_ClockConfig+0x244>)
 8009dba:	699b      	ldr	r3, [r3, #24]
 8009dbc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d908      	bls.n	8009dd6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009dc4:	4b78      	ldr	r3, [pc, #480]	@ (8009fa8 <HAL_RCC_ClockConfig+0x244>)
 8009dc6:	699b      	ldr	r3, [r3, #24]
 8009dc8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	691b      	ldr	r3, [r3, #16]
 8009dd0:	4975      	ldr	r1, [pc, #468]	@ (8009fa8 <HAL_RCC_ClockConfig+0x244>)
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f003 0308 	and.w	r3, r3, #8
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d010      	beq.n	8009e04 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	695a      	ldr	r2, [r3, #20]
 8009de6:	4b70      	ldr	r3, [pc, #448]	@ (8009fa8 <HAL_RCC_ClockConfig+0x244>)
 8009de8:	69db      	ldr	r3, [r3, #28]
 8009dea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d908      	bls.n	8009e04 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009df2:	4b6d      	ldr	r3, [pc, #436]	@ (8009fa8 <HAL_RCC_ClockConfig+0x244>)
 8009df4:	69db      	ldr	r3, [r3, #28]
 8009df6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	695b      	ldr	r3, [r3, #20]
 8009dfe:	496a      	ldr	r1, [pc, #424]	@ (8009fa8 <HAL_RCC_ClockConfig+0x244>)
 8009e00:	4313      	orrs	r3, r2
 8009e02:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f003 0310 	and.w	r3, r3, #16
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d010      	beq.n	8009e32 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	699a      	ldr	r2, [r3, #24]
 8009e14:	4b64      	ldr	r3, [pc, #400]	@ (8009fa8 <HAL_RCC_ClockConfig+0x244>)
 8009e16:	69db      	ldr	r3, [r3, #28]
 8009e18:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d908      	bls.n	8009e32 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009e20:	4b61      	ldr	r3, [pc, #388]	@ (8009fa8 <HAL_RCC_ClockConfig+0x244>)
 8009e22:	69db      	ldr	r3, [r3, #28]
 8009e24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	699b      	ldr	r3, [r3, #24]
 8009e2c:	495e      	ldr	r1, [pc, #376]	@ (8009fa8 <HAL_RCC_ClockConfig+0x244>)
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f003 0320 	and.w	r3, r3, #32
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d010      	beq.n	8009e60 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	69da      	ldr	r2, [r3, #28]
 8009e42:	4b59      	ldr	r3, [pc, #356]	@ (8009fa8 <HAL_RCC_ClockConfig+0x244>)
 8009e44:	6a1b      	ldr	r3, [r3, #32]
 8009e46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d908      	bls.n	8009e60 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009e4e:	4b56      	ldr	r3, [pc, #344]	@ (8009fa8 <HAL_RCC_ClockConfig+0x244>)
 8009e50:	6a1b      	ldr	r3, [r3, #32]
 8009e52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	69db      	ldr	r3, [r3, #28]
 8009e5a:	4953      	ldr	r1, [pc, #332]	@ (8009fa8 <HAL_RCC_ClockConfig+0x244>)
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f003 0302 	and.w	r3, r3, #2
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d010      	beq.n	8009e8e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	68da      	ldr	r2, [r3, #12]
 8009e70:	4b4d      	ldr	r3, [pc, #308]	@ (8009fa8 <HAL_RCC_ClockConfig+0x244>)
 8009e72:	699b      	ldr	r3, [r3, #24]
 8009e74:	f003 030f 	and.w	r3, r3, #15
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d908      	bls.n	8009e8e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e7c:	4b4a      	ldr	r3, [pc, #296]	@ (8009fa8 <HAL_RCC_ClockConfig+0x244>)
 8009e7e:	699b      	ldr	r3, [r3, #24]
 8009e80:	f023 020f 	bic.w	r2, r3, #15
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	4947      	ldr	r1, [pc, #284]	@ (8009fa8 <HAL_RCC_ClockConfig+0x244>)
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f003 0301 	and.w	r3, r3, #1
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d055      	beq.n	8009f46 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009e9a:	4b43      	ldr	r3, [pc, #268]	@ (8009fa8 <HAL_RCC_ClockConfig+0x244>)
 8009e9c:	699b      	ldr	r3, [r3, #24]
 8009e9e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	4940      	ldr	r1, [pc, #256]	@ (8009fa8 <HAL_RCC_ClockConfig+0x244>)
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	2b02      	cmp	r3, #2
 8009eb2:	d107      	bne.n	8009ec4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009eb4:	4b3c      	ldr	r3, [pc, #240]	@ (8009fa8 <HAL_RCC_ClockConfig+0x244>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d121      	bne.n	8009f04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	e0f6      	b.n	800a0b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	2b03      	cmp	r3, #3
 8009eca:	d107      	bne.n	8009edc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009ecc:	4b36      	ldr	r3, [pc, #216]	@ (8009fa8 <HAL_RCC_ClockConfig+0x244>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d115      	bne.n	8009f04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	e0ea      	b.n	800a0b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d107      	bne.n	8009ef4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009ee4:	4b30      	ldr	r3, [pc, #192]	@ (8009fa8 <HAL_RCC_ClockConfig+0x244>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d109      	bne.n	8009f04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	e0de      	b.n	800a0b2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ef4:	4b2c      	ldr	r3, [pc, #176]	@ (8009fa8 <HAL_RCC_ClockConfig+0x244>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f003 0304 	and.w	r3, r3, #4
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d101      	bne.n	8009f04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009f00:	2301      	movs	r3, #1
 8009f02:	e0d6      	b.n	800a0b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009f04:	4b28      	ldr	r3, [pc, #160]	@ (8009fa8 <HAL_RCC_ClockConfig+0x244>)
 8009f06:	691b      	ldr	r3, [r3, #16]
 8009f08:	f023 0207 	bic.w	r2, r3, #7
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	4925      	ldr	r1, [pc, #148]	@ (8009fa8 <HAL_RCC_ClockConfig+0x244>)
 8009f12:	4313      	orrs	r3, r2
 8009f14:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f16:	f7fb fbb5 	bl	8005684 <HAL_GetTick>
 8009f1a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f1c:	e00a      	b.n	8009f34 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f1e:	f7fb fbb1 	bl	8005684 <HAL_GetTick>
 8009f22:	4602      	mov	r2, r0
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	1ad3      	subs	r3, r2, r3
 8009f28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d901      	bls.n	8009f34 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009f30:	2303      	movs	r3, #3
 8009f32:	e0be      	b.n	800a0b2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f34:	4b1c      	ldr	r3, [pc, #112]	@ (8009fa8 <HAL_RCC_ClockConfig+0x244>)
 8009f36:	691b      	ldr	r3, [r3, #16]
 8009f38:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	00db      	lsls	r3, r3, #3
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d1eb      	bne.n	8009f1e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f003 0302 	and.w	r3, r3, #2
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d010      	beq.n	8009f74 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	68da      	ldr	r2, [r3, #12]
 8009f56:	4b14      	ldr	r3, [pc, #80]	@ (8009fa8 <HAL_RCC_ClockConfig+0x244>)
 8009f58:	699b      	ldr	r3, [r3, #24]
 8009f5a:	f003 030f 	and.w	r3, r3, #15
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d208      	bcs.n	8009f74 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f62:	4b11      	ldr	r3, [pc, #68]	@ (8009fa8 <HAL_RCC_ClockConfig+0x244>)
 8009f64:	699b      	ldr	r3, [r3, #24]
 8009f66:	f023 020f 	bic.w	r2, r3, #15
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	68db      	ldr	r3, [r3, #12]
 8009f6e:	490e      	ldr	r1, [pc, #56]	@ (8009fa8 <HAL_RCC_ClockConfig+0x244>)
 8009f70:	4313      	orrs	r3, r2
 8009f72:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009f74:	4b0b      	ldr	r3, [pc, #44]	@ (8009fa4 <HAL_RCC_ClockConfig+0x240>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f003 030f 	and.w	r3, r3, #15
 8009f7c:	683a      	ldr	r2, [r7, #0]
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d214      	bcs.n	8009fac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f82:	4b08      	ldr	r3, [pc, #32]	@ (8009fa4 <HAL_RCC_ClockConfig+0x240>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f023 020f 	bic.w	r2, r3, #15
 8009f8a:	4906      	ldr	r1, [pc, #24]	@ (8009fa4 <HAL_RCC_ClockConfig+0x240>)
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f92:	4b04      	ldr	r3, [pc, #16]	@ (8009fa4 <HAL_RCC_ClockConfig+0x240>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f003 030f 	and.w	r3, r3, #15
 8009f9a:	683a      	ldr	r2, [r7, #0]
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d005      	beq.n	8009fac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	e086      	b.n	800a0b2 <HAL_RCC_ClockConfig+0x34e>
 8009fa4:	52002000 	.word	0x52002000
 8009fa8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f003 0304 	and.w	r3, r3, #4
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d010      	beq.n	8009fda <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	691a      	ldr	r2, [r3, #16]
 8009fbc:	4b3f      	ldr	r3, [pc, #252]	@ (800a0bc <HAL_RCC_ClockConfig+0x358>)
 8009fbe:	699b      	ldr	r3, [r3, #24]
 8009fc0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d208      	bcs.n	8009fda <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009fc8:	4b3c      	ldr	r3, [pc, #240]	@ (800a0bc <HAL_RCC_ClockConfig+0x358>)
 8009fca:	699b      	ldr	r3, [r3, #24]
 8009fcc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	691b      	ldr	r3, [r3, #16]
 8009fd4:	4939      	ldr	r1, [pc, #228]	@ (800a0bc <HAL_RCC_ClockConfig+0x358>)
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f003 0308 	and.w	r3, r3, #8
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d010      	beq.n	800a008 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	695a      	ldr	r2, [r3, #20]
 8009fea:	4b34      	ldr	r3, [pc, #208]	@ (800a0bc <HAL_RCC_ClockConfig+0x358>)
 8009fec:	69db      	ldr	r3, [r3, #28]
 8009fee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d208      	bcs.n	800a008 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009ff6:	4b31      	ldr	r3, [pc, #196]	@ (800a0bc <HAL_RCC_ClockConfig+0x358>)
 8009ff8:	69db      	ldr	r3, [r3, #28]
 8009ffa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	695b      	ldr	r3, [r3, #20]
 800a002:	492e      	ldr	r1, [pc, #184]	@ (800a0bc <HAL_RCC_ClockConfig+0x358>)
 800a004:	4313      	orrs	r3, r2
 800a006:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f003 0310 	and.w	r3, r3, #16
 800a010:	2b00      	cmp	r3, #0
 800a012:	d010      	beq.n	800a036 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	699a      	ldr	r2, [r3, #24]
 800a018:	4b28      	ldr	r3, [pc, #160]	@ (800a0bc <HAL_RCC_ClockConfig+0x358>)
 800a01a:	69db      	ldr	r3, [r3, #28]
 800a01c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a020:	429a      	cmp	r2, r3
 800a022:	d208      	bcs.n	800a036 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a024:	4b25      	ldr	r3, [pc, #148]	@ (800a0bc <HAL_RCC_ClockConfig+0x358>)
 800a026:	69db      	ldr	r3, [r3, #28]
 800a028:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	699b      	ldr	r3, [r3, #24]
 800a030:	4922      	ldr	r1, [pc, #136]	@ (800a0bc <HAL_RCC_ClockConfig+0x358>)
 800a032:	4313      	orrs	r3, r2
 800a034:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f003 0320 	and.w	r3, r3, #32
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d010      	beq.n	800a064 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	69da      	ldr	r2, [r3, #28]
 800a046:	4b1d      	ldr	r3, [pc, #116]	@ (800a0bc <HAL_RCC_ClockConfig+0x358>)
 800a048:	6a1b      	ldr	r3, [r3, #32]
 800a04a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a04e:	429a      	cmp	r2, r3
 800a050:	d208      	bcs.n	800a064 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a052:	4b1a      	ldr	r3, [pc, #104]	@ (800a0bc <HAL_RCC_ClockConfig+0x358>)
 800a054:	6a1b      	ldr	r3, [r3, #32]
 800a056:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	69db      	ldr	r3, [r3, #28]
 800a05e:	4917      	ldr	r1, [pc, #92]	@ (800a0bc <HAL_RCC_ClockConfig+0x358>)
 800a060:	4313      	orrs	r3, r2
 800a062:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800a064:	f000 f834 	bl	800a0d0 <HAL_RCC_GetSysClockFreq>
 800a068:	4602      	mov	r2, r0
 800a06a:	4b14      	ldr	r3, [pc, #80]	@ (800a0bc <HAL_RCC_ClockConfig+0x358>)
 800a06c:	699b      	ldr	r3, [r3, #24]
 800a06e:	0a1b      	lsrs	r3, r3, #8
 800a070:	f003 030f 	and.w	r3, r3, #15
 800a074:	4912      	ldr	r1, [pc, #72]	@ (800a0c0 <HAL_RCC_ClockConfig+0x35c>)
 800a076:	5ccb      	ldrb	r3, [r1, r3]
 800a078:	f003 031f 	and.w	r3, r3, #31
 800a07c:	fa22 f303 	lsr.w	r3, r2, r3
 800a080:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800a082:	4b0e      	ldr	r3, [pc, #56]	@ (800a0bc <HAL_RCC_ClockConfig+0x358>)
 800a084:	699b      	ldr	r3, [r3, #24]
 800a086:	f003 030f 	and.w	r3, r3, #15
 800a08a:	4a0d      	ldr	r2, [pc, #52]	@ (800a0c0 <HAL_RCC_ClockConfig+0x35c>)
 800a08c:	5cd3      	ldrb	r3, [r2, r3]
 800a08e:	f003 031f 	and.w	r3, r3, #31
 800a092:	693a      	ldr	r2, [r7, #16]
 800a094:	fa22 f303 	lsr.w	r3, r2, r3
 800a098:	4a0a      	ldr	r2, [pc, #40]	@ (800a0c4 <HAL_RCC_ClockConfig+0x360>)
 800a09a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a09c:	4a0a      	ldr	r2, [pc, #40]	@ (800a0c8 <HAL_RCC_ClockConfig+0x364>)
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a0a2:	4b0a      	ldr	r3, [pc, #40]	@ (800a0cc <HAL_RCC_ClockConfig+0x368>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7fb faa2 	bl	80055f0 <HAL_InitTick>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a0b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3718      	adds	r7, #24
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	58024400 	.word	0x58024400
 800a0c0:	08018cb4 	.word	0x08018cb4
 800a0c4:	240000c4 	.word	0x240000c4
 800a0c8:	240000c0 	.word	0x240000c0
 800a0cc:	240000c8 	.word	0x240000c8

0800a0d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b089      	sub	sp, #36	@ 0x24
 800a0d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a0d6:	4bb3      	ldr	r3, [pc, #716]	@ (800a3a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0d8:	691b      	ldr	r3, [r3, #16]
 800a0da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a0de:	2b18      	cmp	r3, #24
 800a0e0:	f200 8155 	bhi.w	800a38e <HAL_RCC_GetSysClockFreq+0x2be>
 800a0e4:	a201      	add	r2, pc, #4	@ (adr r2, 800a0ec <HAL_RCC_GetSysClockFreq+0x1c>)
 800a0e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ea:	bf00      	nop
 800a0ec:	0800a151 	.word	0x0800a151
 800a0f0:	0800a38f 	.word	0x0800a38f
 800a0f4:	0800a38f 	.word	0x0800a38f
 800a0f8:	0800a38f 	.word	0x0800a38f
 800a0fc:	0800a38f 	.word	0x0800a38f
 800a100:	0800a38f 	.word	0x0800a38f
 800a104:	0800a38f 	.word	0x0800a38f
 800a108:	0800a38f 	.word	0x0800a38f
 800a10c:	0800a177 	.word	0x0800a177
 800a110:	0800a38f 	.word	0x0800a38f
 800a114:	0800a38f 	.word	0x0800a38f
 800a118:	0800a38f 	.word	0x0800a38f
 800a11c:	0800a38f 	.word	0x0800a38f
 800a120:	0800a38f 	.word	0x0800a38f
 800a124:	0800a38f 	.word	0x0800a38f
 800a128:	0800a38f 	.word	0x0800a38f
 800a12c:	0800a17d 	.word	0x0800a17d
 800a130:	0800a38f 	.word	0x0800a38f
 800a134:	0800a38f 	.word	0x0800a38f
 800a138:	0800a38f 	.word	0x0800a38f
 800a13c:	0800a38f 	.word	0x0800a38f
 800a140:	0800a38f 	.word	0x0800a38f
 800a144:	0800a38f 	.word	0x0800a38f
 800a148:	0800a38f 	.word	0x0800a38f
 800a14c:	0800a183 	.word	0x0800a183
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a150:	4b94      	ldr	r3, [pc, #592]	@ (800a3a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f003 0320 	and.w	r3, r3, #32
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d009      	beq.n	800a170 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a15c:	4b91      	ldr	r3, [pc, #580]	@ (800a3a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	08db      	lsrs	r3, r3, #3
 800a162:	f003 0303 	and.w	r3, r3, #3
 800a166:	4a90      	ldr	r2, [pc, #576]	@ (800a3a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a168:	fa22 f303 	lsr.w	r3, r2, r3
 800a16c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a16e:	e111      	b.n	800a394 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a170:	4b8d      	ldr	r3, [pc, #564]	@ (800a3a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a172:	61bb      	str	r3, [r7, #24]
      break;
 800a174:	e10e      	b.n	800a394 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a176:	4b8d      	ldr	r3, [pc, #564]	@ (800a3ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a178:	61bb      	str	r3, [r7, #24]
      break;
 800a17a:	e10b      	b.n	800a394 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a17c:	4b8c      	ldr	r3, [pc, #560]	@ (800a3b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a17e:	61bb      	str	r3, [r7, #24]
      break;
 800a180:	e108      	b.n	800a394 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a182:	4b88      	ldr	r3, [pc, #544]	@ (800a3a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a186:	f003 0303 	and.w	r3, r3, #3
 800a18a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a18c:	4b85      	ldr	r3, [pc, #532]	@ (800a3a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a18e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a190:	091b      	lsrs	r3, r3, #4
 800a192:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a196:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a198:	4b82      	ldr	r3, [pc, #520]	@ (800a3a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a19a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a19c:	f003 0301 	and.w	r3, r3, #1
 800a1a0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a1a2:	4b80      	ldr	r3, [pc, #512]	@ (800a3a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1a6:	08db      	lsrs	r3, r3, #3
 800a1a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a1ac:	68fa      	ldr	r2, [r7, #12]
 800a1ae:	fb02 f303 	mul.w	r3, r2, r3
 800a1b2:	ee07 3a90 	vmov	s15, r3
 800a1b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1ba:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	f000 80e1 	beq.w	800a388 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	2b02      	cmp	r3, #2
 800a1ca:	f000 8083 	beq.w	800a2d4 <HAL_RCC_GetSysClockFreq+0x204>
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	2b02      	cmp	r3, #2
 800a1d2:	f200 80a1 	bhi.w	800a318 <HAL_RCC_GetSysClockFreq+0x248>
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d003      	beq.n	800a1e4 <HAL_RCC_GetSysClockFreq+0x114>
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d056      	beq.n	800a290 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a1e2:	e099      	b.n	800a318 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a1e4:	4b6f      	ldr	r3, [pc, #444]	@ (800a3a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f003 0320 	and.w	r3, r3, #32
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d02d      	beq.n	800a24c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a1f0:	4b6c      	ldr	r3, [pc, #432]	@ (800a3a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	08db      	lsrs	r3, r3, #3
 800a1f6:	f003 0303 	and.w	r3, r3, #3
 800a1fa:	4a6b      	ldr	r2, [pc, #428]	@ (800a3a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a1fc:	fa22 f303 	lsr.w	r3, r2, r3
 800a200:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	ee07 3a90 	vmov	s15, r3
 800a208:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	ee07 3a90 	vmov	s15, r3
 800a212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a21a:	4b62      	ldr	r3, [pc, #392]	@ (800a3a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a21c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a21e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a222:	ee07 3a90 	vmov	s15, r3
 800a226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a22a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a22e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800a3b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a23a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a23e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a242:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a246:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a24a:	e087      	b.n	800a35c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	ee07 3a90 	vmov	s15, r3
 800a252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a256:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800a3b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a25a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a25e:	4b51      	ldr	r3, [pc, #324]	@ (800a3a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a266:	ee07 3a90 	vmov	s15, r3
 800a26a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a26e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a272:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800a3b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a27a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a27e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a28a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a28e:	e065      	b.n	800a35c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	ee07 3a90 	vmov	s15, r3
 800a296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a29a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800a3bc <HAL_RCC_GetSysClockFreq+0x2ec>
 800a29e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2a2:	4b40      	ldr	r3, [pc, #256]	@ (800a3a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2aa:	ee07 3a90 	vmov	s15, r3
 800a2ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2b2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a2b6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800a3b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a2ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a2d2:	e043      	b.n	800a35c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	ee07 3a90 	vmov	s15, r3
 800a2da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2de:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800a3c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a2e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2e6:	4b2f      	ldr	r3, [pc, #188]	@ (800a3a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2ee:	ee07 3a90 	vmov	s15, r3
 800a2f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2f6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a2fa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800a3b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a2fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a306:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a30a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a30e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a312:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a316:	e021      	b.n	800a35c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	ee07 3a90 	vmov	s15, r3
 800a31e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a322:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800a3bc <HAL_RCC_GetSysClockFreq+0x2ec>
 800a326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a32a:	4b1e      	ldr	r3, [pc, #120]	@ (800a3a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a32c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a32e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a332:	ee07 3a90 	vmov	s15, r3
 800a336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a33a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a33e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800a3b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a34a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a34e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a352:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a356:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a35a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a35c:	4b11      	ldr	r3, [pc, #68]	@ (800a3a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a35e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a360:	0a5b      	lsrs	r3, r3, #9
 800a362:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a366:	3301      	adds	r3, #1
 800a368:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	ee07 3a90 	vmov	s15, r3
 800a370:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a374:	edd7 6a07 	vldr	s13, [r7, #28]
 800a378:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a37c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a380:	ee17 3a90 	vmov	r3, s15
 800a384:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a386:	e005      	b.n	800a394 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a388:	2300      	movs	r3, #0
 800a38a:	61bb      	str	r3, [r7, #24]
      break;
 800a38c:	e002      	b.n	800a394 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a38e:	4b07      	ldr	r3, [pc, #28]	@ (800a3ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a390:	61bb      	str	r3, [r7, #24]
      break;
 800a392:	bf00      	nop
  }

  return sysclockfreq;
 800a394:	69bb      	ldr	r3, [r7, #24]
}
 800a396:	4618      	mov	r0, r3
 800a398:	3724      	adds	r7, #36	@ 0x24
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr
 800a3a2:	bf00      	nop
 800a3a4:	58024400 	.word	0x58024400
 800a3a8:	03d09000 	.word	0x03d09000
 800a3ac:	003d0900 	.word	0x003d0900
 800a3b0:	016e3600 	.word	0x016e3600
 800a3b4:	46000000 	.word	0x46000000
 800a3b8:	4c742400 	.word	0x4c742400
 800a3bc:	4a742400 	.word	0x4a742400
 800a3c0:	4bb71b00 	.word	0x4bb71b00

0800a3c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800a3ca:	f7ff fe81 	bl	800a0d0 <HAL_RCC_GetSysClockFreq>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	4b10      	ldr	r3, [pc, #64]	@ (800a414 <HAL_RCC_GetHCLKFreq+0x50>)
 800a3d2:	699b      	ldr	r3, [r3, #24]
 800a3d4:	0a1b      	lsrs	r3, r3, #8
 800a3d6:	f003 030f 	and.w	r3, r3, #15
 800a3da:	490f      	ldr	r1, [pc, #60]	@ (800a418 <HAL_RCC_GetHCLKFreq+0x54>)
 800a3dc:	5ccb      	ldrb	r3, [r1, r3]
 800a3de:	f003 031f 	and.w	r3, r3, #31
 800a3e2:	fa22 f303 	lsr.w	r3, r2, r3
 800a3e6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800a3e8:	4b0a      	ldr	r3, [pc, #40]	@ (800a414 <HAL_RCC_GetHCLKFreq+0x50>)
 800a3ea:	699b      	ldr	r3, [r3, #24]
 800a3ec:	f003 030f 	and.w	r3, r3, #15
 800a3f0:	4a09      	ldr	r2, [pc, #36]	@ (800a418 <HAL_RCC_GetHCLKFreq+0x54>)
 800a3f2:	5cd3      	ldrb	r3, [r2, r3]
 800a3f4:	f003 031f 	and.w	r3, r3, #31
 800a3f8:	687a      	ldr	r2, [r7, #4]
 800a3fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a3fe:	4a07      	ldr	r2, [pc, #28]	@ (800a41c <HAL_RCC_GetHCLKFreq+0x58>)
 800a400:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a402:	4a07      	ldr	r2, [pc, #28]	@ (800a420 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a408:	4b04      	ldr	r3, [pc, #16]	@ (800a41c <HAL_RCC_GetHCLKFreq+0x58>)
 800a40a:	681b      	ldr	r3, [r3, #0]
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3708      	adds	r7, #8
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}
 800a414:	58024400 	.word	0x58024400
 800a418:	08018cb4 	.word	0x08018cb4
 800a41c:	240000c4 	.word	0x240000c4
 800a420:	240000c0 	.word	0x240000c0

0800a424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800a428:	f7ff ffcc 	bl	800a3c4 <HAL_RCC_GetHCLKFreq>
 800a42c:	4602      	mov	r2, r0
 800a42e:	4b06      	ldr	r3, [pc, #24]	@ (800a448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a430:	69db      	ldr	r3, [r3, #28]
 800a432:	091b      	lsrs	r3, r3, #4
 800a434:	f003 0307 	and.w	r3, r3, #7
 800a438:	4904      	ldr	r1, [pc, #16]	@ (800a44c <HAL_RCC_GetPCLK1Freq+0x28>)
 800a43a:	5ccb      	ldrb	r3, [r1, r3]
 800a43c:	f003 031f 	and.w	r3, r3, #31
 800a440:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800a444:	4618      	mov	r0, r3
 800a446:	bd80      	pop	{r7, pc}
 800a448:	58024400 	.word	0x58024400
 800a44c:	08018cb4 	.word	0x08018cb4

0800a450 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800a454:	f7ff ffb6 	bl	800a3c4 <HAL_RCC_GetHCLKFreq>
 800a458:	4602      	mov	r2, r0
 800a45a:	4b06      	ldr	r3, [pc, #24]	@ (800a474 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a45c:	69db      	ldr	r3, [r3, #28]
 800a45e:	0a1b      	lsrs	r3, r3, #8
 800a460:	f003 0307 	and.w	r3, r3, #7
 800a464:	4904      	ldr	r1, [pc, #16]	@ (800a478 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a466:	5ccb      	ldrb	r3, [r1, r3]
 800a468:	f003 031f 	and.w	r3, r3, #31
 800a46c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800a470:	4618      	mov	r0, r3
 800a472:	bd80      	pop	{r7, pc}
 800a474:	58024400 	.word	0x58024400
 800a478:	08018cb4 	.word	0x08018cb4

0800a47c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a47c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a480:	b0c8      	sub	sp, #288	@ 0x120
 800a482:	af00      	add	r7, sp, #0
 800a484:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a488:	2300      	movs	r3, #0
 800a48a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a48e:	2300      	movs	r3, #0
 800a490:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a494:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a49c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800a4a0:	2500      	movs	r5, #0
 800a4a2:	ea54 0305 	orrs.w	r3, r4, r5
 800a4a6:	d049      	beq.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a4a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a4b2:	d02f      	beq.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a4b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a4b8:	d828      	bhi.n	800a50c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a4ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a4be:	d01a      	beq.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a4c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a4c4:	d822      	bhi.n	800a50c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d003      	beq.n	800a4d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a4ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a4ce:	d007      	beq.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a4d0:	e01c      	b.n	800a50c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4d2:	4ba7      	ldr	r3, [pc, #668]	@ (800a770 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a4d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4d6:	4aa6      	ldr	r2, [pc, #664]	@ (800a770 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a4d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a4dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a4de:	e01a      	b.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a4e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4e4:	3308      	adds	r3, #8
 800a4e6:	2102      	movs	r1, #2
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f001 fc43 	bl	800bd74 <RCCEx_PLL2_Config>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a4f4:	e00f      	b.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a4f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4fa:	3328      	adds	r3, #40	@ 0x28
 800a4fc:	2102      	movs	r1, #2
 800a4fe:	4618      	mov	r0, r3
 800a500:	f001 fcea 	bl	800bed8 <RCCEx_PLL3_Config>
 800a504:	4603      	mov	r3, r0
 800a506:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a50a:	e004      	b.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a50c:	2301      	movs	r3, #1
 800a50e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a512:	e000      	b.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a514:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a516:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d10a      	bne.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a51e:	4b94      	ldr	r3, [pc, #592]	@ (800a770 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a520:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a522:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a526:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a52a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a52c:	4a90      	ldr	r2, [pc, #576]	@ (800a770 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a52e:	430b      	orrs	r3, r1
 800a530:	6513      	str	r3, [r2, #80]	@ 0x50
 800a532:	e003      	b.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a534:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a538:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a53c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a544:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800a548:	f04f 0900 	mov.w	r9, #0
 800a54c:	ea58 0309 	orrs.w	r3, r8, r9
 800a550:	d047      	beq.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a552:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a558:	2b04      	cmp	r3, #4
 800a55a:	d82a      	bhi.n	800a5b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a55c:	a201      	add	r2, pc, #4	@ (adr r2, 800a564 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a55e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a562:	bf00      	nop
 800a564:	0800a579 	.word	0x0800a579
 800a568:	0800a587 	.word	0x0800a587
 800a56c:	0800a59d 	.word	0x0800a59d
 800a570:	0800a5bb 	.word	0x0800a5bb
 800a574:	0800a5bb 	.word	0x0800a5bb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a578:	4b7d      	ldr	r3, [pc, #500]	@ (800a770 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a57a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a57c:	4a7c      	ldr	r2, [pc, #496]	@ (800a770 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a57e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a582:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a584:	e01a      	b.n	800a5bc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a586:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a58a:	3308      	adds	r3, #8
 800a58c:	2100      	movs	r1, #0
 800a58e:	4618      	mov	r0, r3
 800a590:	f001 fbf0 	bl	800bd74 <RCCEx_PLL2_Config>
 800a594:	4603      	mov	r3, r0
 800a596:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a59a:	e00f      	b.n	800a5bc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a59c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5a0:	3328      	adds	r3, #40	@ 0x28
 800a5a2:	2100      	movs	r1, #0
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f001 fc97 	bl	800bed8 <RCCEx_PLL3_Config>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a5b0:	e004      	b.n	800a5bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a5b8:	e000      	b.n	800a5bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a5ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d10a      	bne.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a5c4:	4b6a      	ldr	r3, [pc, #424]	@ (800a770 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a5c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5c8:	f023 0107 	bic.w	r1, r3, #7
 800a5cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5d2:	4a67      	ldr	r2, [pc, #412]	@ (800a770 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a5d4:	430b      	orrs	r3, r1
 800a5d6:	6513      	str	r3, [r2, #80]	@ 0x50
 800a5d8:	e003      	b.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a5de:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800a5e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ea:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800a5ee:	f04f 0b00 	mov.w	fp, #0
 800a5f2:	ea5a 030b 	orrs.w	r3, sl, fp
 800a5f6:	d054      	beq.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800a5f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5fe:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800a602:	d036      	beq.n	800a672 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800a604:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800a608:	d82f      	bhi.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a60a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a60e:	d032      	beq.n	800a676 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a610:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a614:	d829      	bhi.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a616:	2bc0      	cmp	r3, #192	@ 0xc0
 800a618:	d02f      	beq.n	800a67a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800a61a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a61c:	d825      	bhi.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a61e:	2b80      	cmp	r3, #128	@ 0x80
 800a620:	d018      	beq.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800a622:	2b80      	cmp	r3, #128	@ 0x80
 800a624:	d821      	bhi.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a626:	2b00      	cmp	r3, #0
 800a628:	d002      	beq.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800a62a:	2b40      	cmp	r3, #64	@ 0x40
 800a62c:	d007      	beq.n	800a63e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800a62e:	e01c      	b.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a630:	4b4f      	ldr	r3, [pc, #316]	@ (800a770 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a634:	4a4e      	ldr	r2, [pc, #312]	@ (800a770 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a636:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a63a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800a63c:	e01e      	b.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a63e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a642:	3308      	adds	r3, #8
 800a644:	2100      	movs	r1, #0
 800a646:	4618      	mov	r0, r3
 800a648:	f001 fb94 	bl	800bd74 <RCCEx_PLL2_Config>
 800a64c:	4603      	mov	r3, r0
 800a64e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800a652:	e013      	b.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a654:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a658:	3328      	adds	r3, #40	@ 0x28
 800a65a:	2100      	movs	r1, #0
 800a65c:	4618      	mov	r0, r3
 800a65e:	f001 fc3b 	bl	800bed8 <RCCEx_PLL3_Config>
 800a662:	4603      	mov	r3, r0
 800a664:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800a668:	e008      	b.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a66a:	2301      	movs	r3, #1
 800a66c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a670:	e004      	b.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800a672:	bf00      	nop
 800a674:	e002      	b.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800a676:	bf00      	nop
 800a678:	e000      	b.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800a67a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a67c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a680:	2b00      	cmp	r3, #0
 800a682:	d10a      	bne.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800a684:	4b3a      	ldr	r3, [pc, #232]	@ (800a770 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a688:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800a68c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a692:	4a37      	ldr	r2, [pc, #220]	@ (800a770 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a694:	430b      	orrs	r3, r1
 800a696:	6513      	str	r3, [r2, #80]	@ 0x50
 800a698:	e003      	b.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a69a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a69e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800a6a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6aa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800a6ae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a6b8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800a6bc:	460b      	mov	r3, r1
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	d05c      	beq.n	800a77c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800a6c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a6c8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a6cc:	d03b      	beq.n	800a746 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a6ce:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a6d2:	d834      	bhi.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800a6d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6d8:	d037      	beq.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800a6da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6de:	d82e      	bhi.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800a6e0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a6e4:	d033      	beq.n	800a74e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a6e6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a6ea:	d828      	bhi.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800a6ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a6f0:	d01a      	beq.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800a6f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a6f6:	d822      	bhi.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d003      	beq.n	800a704 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800a6fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a700:	d007      	beq.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800a702:	e01c      	b.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a704:	4b1a      	ldr	r3, [pc, #104]	@ (800a770 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a708:	4a19      	ldr	r2, [pc, #100]	@ (800a770 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a70a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a70e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800a710:	e01e      	b.n	800a750 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a712:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a716:	3308      	adds	r3, #8
 800a718:	2100      	movs	r1, #0
 800a71a:	4618      	mov	r0, r3
 800a71c:	f001 fb2a 	bl	800bd74 <RCCEx_PLL2_Config>
 800a720:	4603      	mov	r3, r0
 800a722:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800a726:	e013      	b.n	800a750 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a728:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a72c:	3328      	adds	r3, #40	@ 0x28
 800a72e:	2100      	movs	r1, #0
 800a730:	4618      	mov	r0, r3
 800a732:	f001 fbd1 	bl	800bed8 <RCCEx_PLL3_Config>
 800a736:	4603      	mov	r3, r0
 800a738:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800a73c:	e008      	b.n	800a750 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a73e:	2301      	movs	r3, #1
 800a740:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a744:	e004      	b.n	800a750 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800a746:	bf00      	nop
 800a748:	e002      	b.n	800a750 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800a74a:	bf00      	nop
 800a74c:	e000      	b.n	800a750 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800a74e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a750:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a754:	2b00      	cmp	r3, #0
 800a756:	d10d      	bne.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800a758:	4b05      	ldr	r3, [pc, #20]	@ (800a770 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a75a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a75c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800a760:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a766:	4a02      	ldr	r2, [pc, #8]	@ (800a770 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a768:	430b      	orrs	r3, r1
 800a76a:	6513      	str	r3, [r2, #80]	@ 0x50
 800a76c:	e006      	b.n	800a77c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800a76e:	bf00      	nop
 800a770:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a774:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a778:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a77c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a784:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a788:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a78c:	2300      	movs	r3, #0
 800a78e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a792:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a796:	460b      	mov	r3, r1
 800a798:	4313      	orrs	r3, r2
 800a79a:	d03a      	beq.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a79c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7a2:	2b30      	cmp	r3, #48	@ 0x30
 800a7a4:	d01f      	beq.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800a7a6:	2b30      	cmp	r3, #48	@ 0x30
 800a7a8:	d819      	bhi.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0x362>
 800a7aa:	2b20      	cmp	r3, #32
 800a7ac:	d00c      	beq.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800a7ae:	2b20      	cmp	r3, #32
 800a7b0:	d815      	bhi.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0x362>
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d019      	beq.n	800a7ea <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a7b6:	2b10      	cmp	r3, #16
 800a7b8:	d111      	bne.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7ba:	4bae      	ldr	r3, [pc, #696]	@ (800aa74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a7bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7be:	4aad      	ldr	r2, [pc, #692]	@ (800aa74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a7c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a7c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a7c6:	e011      	b.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a7c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7cc:	3308      	adds	r3, #8
 800a7ce:	2102      	movs	r1, #2
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f001 facf 	bl	800bd74 <RCCEx_PLL2_Config>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a7dc:	e006      	b.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a7e4:	e002      	b.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800a7e6:	bf00      	nop
 800a7e8:	e000      	b.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800a7ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d10a      	bne.n	800a80a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a7f4:	4b9f      	ldr	r3, [pc, #636]	@ (800aa74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a7f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7f8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a7fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a802:	4a9c      	ldr	r2, [pc, #624]	@ (800aa74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a804:	430b      	orrs	r3, r1
 800a806:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a808:	e003      	b.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a80a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a80e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a812:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a81e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a822:	2300      	movs	r3, #0
 800a824:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a828:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a82c:	460b      	mov	r3, r1
 800a82e:	4313      	orrs	r3, r2
 800a830:	d051      	beq.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a832:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a836:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a838:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a83c:	d035      	beq.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800a83e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a842:	d82e      	bhi.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800a844:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a848:	d031      	beq.n	800a8ae <HAL_RCCEx_PeriphCLKConfig+0x432>
 800a84a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a84e:	d828      	bhi.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800a850:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a854:	d01a      	beq.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0x410>
 800a856:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a85a:	d822      	bhi.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d003      	beq.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800a860:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a864:	d007      	beq.n	800a876 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800a866:	e01c      	b.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a868:	4b82      	ldr	r3, [pc, #520]	@ (800aa74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a86a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a86c:	4a81      	ldr	r2, [pc, #516]	@ (800aa74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a86e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a872:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a874:	e01c      	b.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a876:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a87a:	3308      	adds	r3, #8
 800a87c:	2100      	movs	r1, #0
 800a87e:	4618      	mov	r0, r3
 800a880:	f001 fa78 	bl	800bd74 <RCCEx_PLL2_Config>
 800a884:	4603      	mov	r3, r0
 800a886:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a88a:	e011      	b.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a88c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a890:	3328      	adds	r3, #40	@ 0x28
 800a892:	2100      	movs	r1, #0
 800a894:	4618      	mov	r0, r3
 800a896:	f001 fb1f 	bl	800bed8 <RCCEx_PLL3_Config>
 800a89a:	4603      	mov	r3, r0
 800a89c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a8a0:	e006      	b.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a8a8:	e002      	b.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800a8aa:	bf00      	nop
 800a8ac:	e000      	b.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800a8ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d10a      	bne.n	800a8ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a8b8:	4b6e      	ldr	r3, [pc, #440]	@ (800aa74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a8ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8bc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a8c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a8c6:	4a6b      	ldr	r2, [pc, #428]	@ (800aa74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a8c8:	430b      	orrs	r3, r1
 800a8ca:	6513      	str	r3, [r2, #80]	@ 0x50
 800a8cc:	e003      	b.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a8d2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a8d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8de:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a8e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a8ec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	d053      	beq.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a8f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a8fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a900:	d033      	beq.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800a902:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a906:	d82c      	bhi.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800a908:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a90c:	d02f      	beq.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800a90e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a912:	d826      	bhi.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800a914:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a918:	d02b      	beq.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a91a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a91e:	d820      	bhi.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800a920:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a924:	d012      	beq.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800a926:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a92a:	d81a      	bhi.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d022      	beq.n	800a976 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800a930:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a934:	d115      	bne.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a936:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a93a:	3308      	adds	r3, #8
 800a93c:	2101      	movs	r1, #1
 800a93e:	4618      	mov	r0, r3
 800a940:	f001 fa18 	bl	800bd74 <RCCEx_PLL2_Config>
 800a944:	4603      	mov	r3, r0
 800a946:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a94a:	e015      	b.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a94c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a950:	3328      	adds	r3, #40	@ 0x28
 800a952:	2101      	movs	r1, #1
 800a954:	4618      	mov	r0, r3
 800a956:	f001 fabf 	bl	800bed8 <RCCEx_PLL3_Config>
 800a95a:	4603      	mov	r3, r0
 800a95c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a960:	e00a      	b.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a962:	2301      	movs	r3, #1
 800a964:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a968:	e006      	b.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800a96a:	bf00      	nop
 800a96c:	e004      	b.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800a96e:	bf00      	nop
 800a970:	e002      	b.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800a972:	bf00      	nop
 800a974:	e000      	b.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800a976:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a978:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d10a      	bne.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a980:	4b3c      	ldr	r3, [pc, #240]	@ (800aa74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a982:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a984:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a988:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a98c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a98e:	4a39      	ldr	r2, [pc, #228]	@ (800aa74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a990:	430b      	orrs	r3, r1
 800a992:	6513      	str	r3, [r2, #80]	@ 0x50
 800a994:	e003      	b.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a996:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a99a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a99e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a9aa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a9b4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a9b8:	460b      	mov	r3, r1
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	d060      	beq.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a9be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a9c6:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800a9ca:	d039      	beq.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800a9cc:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800a9d0:	d832      	bhi.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800a9d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a9d6:	d035      	beq.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800a9d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a9dc:	d82c      	bhi.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800a9de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9e2:	d031      	beq.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800a9e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9e8:	d826      	bhi.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800a9ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a9ee:	d02d      	beq.n	800aa4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a9f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a9f4:	d820      	bhi.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800a9f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9fa:	d012      	beq.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a9fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa00:	d81a      	bhi.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d024      	beq.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800aa06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa0a:	d115      	bne.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aa0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa10:	3308      	adds	r3, #8
 800aa12:	2101      	movs	r1, #1
 800aa14:	4618      	mov	r0, r3
 800aa16:	f001 f9ad 	bl	800bd74 <RCCEx_PLL2_Config>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800aa20:	e017      	b.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aa22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa26:	3328      	adds	r3, #40	@ 0x28
 800aa28:	2101      	movs	r1, #1
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f001 fa54 	bl	800bed8 <RCCEx_PLL3_Config>
 800aa30:	4603      	mov	r3, r0
 800aa32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800aa36:	e00c      	b.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800aa3e:	e008      	b.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aa40:	bf00      	nop
 800aa42:	e006      	b.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aa44:	bf00      	nop
 800aa46:	e004      	b.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aa48:	bf00      	nop
 800aa4a:	e002      	b.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aa4c:	bf00      	nop
 800aa4e:	e000      	b.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aa50:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa52:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d10e      	bne.n	800aa78 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800aa5a:	4b06      	ldr	r3, [pc, #24]	@ (800aa74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aa5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa5e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800aa62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aa6a:	4a02      	ldr	r2, [pc, #8]	@ (800aa74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aa6c:	430b      	orrs	r3, r1
 800aa6e:	6593      	str	r3, [r2, #88]	@ 0x58
 800aa70:	e006      	b.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800aa72:	bf00      	nop
 800aa74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aa7c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800aa80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa88:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800aa8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800aa90:	2300      	movs	r3, #0
 800aa92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800aa96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800aa9a:	460b      	mov	r3, r1
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	d037      	beq.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800aaa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aaa4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aaa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aaaa:	d00e      	beq.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800aaac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aab0:	d816      	bhi.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d018      	beq.n	800aae8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800aab6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aaba:	d111      	bne.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aabc:	4bc4      	ldr	r3, [pc, #784]	@ (800add0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aabe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aac0:	4ac3      	ldr	r2, [pc, #780]	@ (800add0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aac2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aac6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800aac8:	e00f      	b.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aaca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aace:	3308      	adds	r3, #8
 800aad0:	2101      	movs	r1, #1
 800aad2:	4618      	mov	r0, r3
 800aad4:	f001 f94e 	bl	800bd74 <RCCEx_PLL2_Config>
 800aad8:	4603      	mov	r3, r0
 800aada:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800aade:	e004      	b.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aae0:	2301      	movs	r3, #1
 800aae2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800aae6:	e000      	b.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800aae8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aaea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d10a      	bne.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800aaf2:	4bb7      	ldr	r3, [pc, #732]	@ (800add0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aaf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aaf6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800aafa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aafe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ab00:	4ab3      	ldr	r2, [pc, #716]	@ (800add0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ab02:	430b      	orrs	r3, r1
 800ab04:	6513      	str	r3, [r2, #80]	@ 0x50
 800ab06:	e003      	b.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab08:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ab0c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ab10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab18:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800ab1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ab20:	2300      	movs	r3, #0
 800ab22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ab26:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800ab2a:	460b      	mov	r3, r1
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	d039      	beq.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800ab30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab36:	2b03      	cmp	r3, #3
 800ab38:	d81c      	bhi.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800ab3a:	a201      	add	r2, pc, #4	@ (adr r2, 800ab40 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800ab3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab40:	0800ab7d 	.word	0x0800ab7d
 800ab44:	0800ab51 	.word	0x0800ab51
 800ab48:	0800ab5f 	.word	0x0800ab5f
 800ab4c:	0800ab7d 	.word	0x0800ab7d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab50:	4b9f      	ldr	r3, [pc, #636]	@ (800add0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ab52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab54:	4a9e      	ldr	r2, [pc, #632]	@ (800add0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ab56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ab5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ab5c:	e00f      	b.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ab5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab62:	3308      	adds	r3, #8
 800ab64:	2102      	movs	r1, #2
 800ab66:	4618      	mov	r0, r3
 800ab68:	f001 f904 	bl	800bd74 <RCCEx_PLL2_Config>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ab72:	e004      	b.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ab74:	2301      	movs	r3, #1
 800ab76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ab7a:	e000      	b.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800ab7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab7e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d10a      	bne.n	800ab9c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ab86:	4b92      	ldr	r3, [pc, #584]	@ (800add0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ab88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab8a:	f023 0103 	bic.w	r1, r3, #3
 800ab8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab94:	4a8e      	ldr	r2, [pc, #568]	@ (800add0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ab96:	430b      	orrs	r3, r1
 800ab98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ab9a:	e003      	b.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aba0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800aba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abac:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800abb0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800abb4:	2300      	movs	r3, #0
 800abb6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800abba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800abbe:	460b      	mov	r3, r1
 800abc0:	4313      	orrs	r3, r2
 800abc2:	f000 8099 	beq.w	800acf8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800abc6:	4b83      	ldr	r3, [pc, #524]	@ (800add4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4a82      	ldr	r2, [pc, #520]	@ (800add4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800abcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800abd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800abd2:	f7fa fd57 	bl	8005684 <HAL_GetTick>
 800abd6:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800abda:	e00b      	b.n	800abf4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800abdc:	f7fa fd52 	bl	8005684 <HAL_GetTick>
 800abe0:	4602      	mov	r2, r0
 800abe2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800abe6:	1ad3      	subs	r3, r2, r3
 800abe8:	2b64      	cmp	r3, #100	@ 0x64
 800abea:	d903      	bls.n	800abf4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800abec:	2303      	movs	r3, #3
 800abee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800abf2:	e005      	b.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800abf4:	4b77      	ldr	r3, [pc, #476]	@ (800add4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d0ed      	beq.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800ac00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d173      	bne.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ac08:	4b71      	ldr	r3, [pc, #452]	@ (800add0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac0a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ac0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ac14:	4053      	eors	r3, r2
 800ac16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d015      	beq.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ac1e:	4b6c      	ldr	r3, [pc, #432]	@ (800add0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ac26:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ac2a:	4b69      	ldr	r3, [pc, #420]	@ (800add0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac2e:	4a68      	ldr	r2, [pc, #416]	@ (800add0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ac34:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ac36:	4b66      	ldr	r3, [pc, #408]	@ (800add0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac3a:	4a65      	ldr	r2, [pc, #404]	@ (800add0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ac40:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ac42:	4a63      	ldr	r2, [pc, #396]	@ (800add0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac48:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ac4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ac52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac56:	d118      	bne.n	800ac8a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac58:	f7fa fd14 	bl	8005684 <HAL_GetTick>
 800ac5c:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac60:	e00d      	b.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac62:	f7fa fd0f 	bl	8005684 <HAL_GetTick>
 800ac66:	4602      	mov	r2, r0
 800ac68:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800ac6c:	1ad2      	subs	r2, r2, r3
 800ac6e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d903      	bls.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800ac76:	2303      	movs	r3, #3
 800ac78:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800ac7c:	e005      	b.n	800ac8a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac7e:	4b54      	ldr	r3, [pc, #336]	@ (800add0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac82:	f003 0302 	and.w	r3, r3, #2
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d0eb      	beq.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800ac8a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d129      	bne.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ac92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ac9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ac9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aca2:	d10e      	bne.n	800acc2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800aca4:	4b4a      	ldr	r3, [pc, #296]	@ (800add0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aca6:	691b      	ldr	r3, [r3, #16]
 800aca8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800acac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acb0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800acb4:	091a      	lsrs	r2, r3, #4
 800acb6:	4b48      	ldr	r3, [pc, #288]	@ (800add8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800acb8:	4013      	ands	r3, r2
 800acba:	4a45      	ldr	r2, [pc, #276]	@ (800add0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800acbc:	430b      	orrs	r3, r1
 800acbe:	6113      	str	r3, [r2, #16]
 800acc0:	e005      	b.n	800acce <HAL_RCCEx_PeriphCLKConfig+0x852>
 800acc2:	4b43      	ldr	r3, [pc, #268]	@ (800add0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800acc4:	691b      	ldr	r3, [r3, #16]
 800acc6:	4a42      	ldr	r2, [pc, #264]	@ (800add0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800acc8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800accc:	6113      	str	r3, [r2, #16]
 800acce:	4b40      	ldr	r3, [pc, #256]	@ (800add0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800acd0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800acd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800acda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800acde:	4a3c      	ldr	r2, [pc, #240]	@ (800add0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ace0:	430b      	orrs	r3, r1
 800ace2:	6713      	str	r3, [r2, #112]	@ 0x70
 800ace4:	e008      	b.n	800acf8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ace6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800acea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800acee:	e003      	b.n	800acf8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acf0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800acf4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800acf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad00:	f002 0301 	and.w	r3, r2, #1
 800ad04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ad08:	2300      	movs	r3, #0
 800ad0a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ad0e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ad12:	460b      	mov	r3, r1
 800ad14:	4313      	orrs	r3, r2
 800ad16:	f000 8090 	beq.w	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ad1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad22:	2b28      	cmp	r3, #40	@ 0x28
 800ad24:	d870      	bhi.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800ad26:	a201      	add	r2, pc, #4	@ (adr r2, 800ad2c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800ad28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad2c:	0800ae11 	.word	0x0800ae11
 800ad30:	0800ae09 	.word	0x0800ae09
 800ad34:	0800ae09 	.word	0x0800ae09
 800ad38:	0800ae09 	.word	0x0800ae09
 800ad3c:	0800ae09 	.word	0x0800ae09
 800ad40:	0800ae09 	.word	0x0800ae09
 800ad44:	0800ae09 	.word	0x0800ae09
 800ad48:	0800ae09 	.word	0x0800ae09
 800ad4c:	0800addd 	.word	0x0800addd
 800ad50:	0800ae09 	.word	0x0800ae09
 800ad54:	0800ae09 	.word	0x0800ae09
 800ad58:	0800ae09 	.word	0x0800ae09
 800ad5c:	0800ae09 	.word	0x0800ae09
 800ad60:	0800ae09 	.word	0x0800ae09
 800ad64:	0800ae09 	.word	0x0800ae09
 800ad68:	0800ae09 	.word	0x0800ae09
 800ad6c:	0800adf3 	.word	0x0800adf3
 800ad70:	0800ae09 	.word	0x0800ae09
 800ad74:	0800ae09 	.word	0x0800ae09
 800ad78:	0800ae09 	.word	0x0800ae09
 800ad7c:	0800ae09 	.word	0x0800ae09
 800ad80:	0800ae09 	.word	0x0800ae09
 800ad84:	0800ae09 	.word	0x0800ae09
 800ad88:	0800ae09 	.word	0x0800ae09
 800ad8c:	0800ae11 	.word	0x0800ae11
 800ad90:	0800ae09 	.word	0x0800ae09
 800ad94:	0800ae09 	.word	0x0800ae09
 800ad98:	0800ae09 	.word	0x0800ae09
 800ad9c:	0800ae09 	.word	0x0800ae09
 800ada0:	0800ae09 	.word	0x0800ae09
 800ada4:	0800ae09 	.word	0x0800ae09
 800ada8:	0800ae09 	.word	0x0800ae09
 800adac:	0800ae11 	.word	0x0800ae11
 800adb0:	0800ae09 	.word	0x0800ae09
 800adb4:	0800ae09 	.word	0x0800ae09
 800adb8:	0800ae09 	.word	0x0800ae09
 800adbc:	0800ae09 	.word	0x0800ae09
 800adc0:	0800ae09 	.word	0x0800ae09
 800adc4:	0800ae09 	.word	0x0800ae09
 800adc8:	0800ae09 	.word	0x0800ae09
 800adcc:	0800ae11 	.word	0x0800ae11
 800add0:	58024400 	.word	0x58024400
 800add4:	58024800 	.word	0x58024800
 800add8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800addc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ade0:	3308      	adds	r3, #8
 800ade2:	2101      	movs	r1, #1
 800ade4:	4618      	mov	r0, r3
 800ade6:	f000 ffc5 	bl	800bd74 <RCCEx_PLL2_Config>
 800adea:	4603      	mov	r3, r0
 800adec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800adf0:	e00f      	b.n	800ae12 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800adf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800adf6:	3328      	adds	r3, #40	@ 0x28
 800adf8:	2101      	movs	r1, #1
 800adfa:	4618      	mov	r0, r3
 800adfc:	f001 f86c 	bl	800bed8 <RCCEx_PLL3_Config>
 800ae00:	4603      	mov	r3, r0
 800ae02:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ae06:	e004      	b.n	800ae12 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ae0e:	e000      	b.n	800ae12 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800ae10:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae12:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d10b      	bne.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ae1a:	4bc0      	ldr	r3, [pc, #768]	@ (800b11c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ae1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae1e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800ae22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae2a:	4abc      	ldr	r2, [pc, #752]	@ (800b11c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ae2c:	430b      	orrs	r3, r1
 800ae2e:	6553      	str	r3, [r2, #84]	@ 0x54
 800ae30:	e003      	b.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae32:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ae36:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ae3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae42:	f002 0302 	and.w	r3, r2, #2
 800ae46:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ae50:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800ae54:	460b      	mov	r3, r1
 800ae56:	4313      	orrs	r3, r2
 800ae58:	d043      	beq.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ae5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae62:	2b05      	cmp	r3, #5
 800ae64:	d824      	bhi.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800ae66:	a201      	add	r2, pc, #4	@ (adr r2, 800ae6c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800ae68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae6c:	0800aeb9 	.word	0x0800aeb9
 800ae70:	0800ae85 	.word	0x0800ae85
 800ae74:	0800ae9b 	.word	0x0800ae9b
 800ae78:	0800aeb9 	.word	0x0800aeb9
 800ae7c:	0800aeb9 	.word	0x0800aeb9
 800ae80:	0800aeb9 	.word	0x0800aeb9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae88:	3308      	adds	r3, #8
 800ae8a:	2101      	movs	r1, #1
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f000 ff71 	bl	800bd74 <RCCEx_PLL2_Config>
 800ae92:	4603      	mov	r3, r0
 800ae94:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ae98:	e00f      	b.n	800aeba <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ae9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae9e:	3328      	adds	r3, #40	@ 0x28
 800aea0:	2101      	movs	r1, #1
 800aea2:	4618      	mov	r0, r3
 800aea4:	f001 f818 	bl	800bed8 <RCCEx_PLL3_Config>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800aeae:	e004      	b.n	800aeba <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800aeb6:	e000      	b.n	800aeba <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800aeb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aeba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d10b      	bne.n	800aeda <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800aec2:	4b96      	ldr	r3, [pc, #600]	@ (800b11c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800aec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aec6:	f023 0107 	bic.w	r1, r3, #7
 800aeca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aece:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aed2:	4a92      	ldr	r2, [pc, #584]	@ (800b11c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800aed4:	430b      	orrs	r3, r1
 800aed6:	6553      	str	r3, [r2, #84]	@ 0x54
 800aed8:	e003      	b.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeda:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aede:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800aee2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeea:	f002 0304 	and.w	r3, r2, #4
 800aeee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aef2:	2300      	movs	r3, #0
 800aef4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aef8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800aefc:	460b      	mov	r3, r1
 800aefe:	4313      	orrs	r3, r2
 800af00:	d043      	beq.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800af02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800af0a:	2b05      	cmp	r3, #5
 800af0c:	d824      	bhi.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800af0e:	a201      	add	r2, pc, #4	@ (adr r2, 800af14 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800af10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af14:	0800af61 	.word	0x0800af61
 800af18:	0800af2d 	.word	0x0800af2d
 800af1c:	0800af43 	.word	0x0800af43
 800af20:	0800af61 	.word	0x0800af61
 800af24:	0800af61 	.word	0x0800af61
 800af28:	0800af61 	.word	0x0800af61
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af30:	3308      	adds	r3, #8
 800af32:	2101      	movs	r1, #1
 800af34:	4618      	mov	r0, r3
 800af36:	f000 ff1d 	bl	800bd74 <RCCEx_PLL2_Config>
 800af3a:	4603      	mov	r3, r0
 800af3c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800af40:	e00f      	b.n	800af62 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af46:	3328      	adds	r3, #40	@ 0x28
 800af48:	2101      	movs	r1, #1
 800af4a:	4618      	mov	r0, r3
 800af4c:	f000 ffc4 	bl	800bed8 <RCCEx_PLL3_Config>
 800af50:	4603      	mov	r3, r0
 800af52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800af56:	e004      	b.n	800af62 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af58:	2301      	movs	r3, #1
 800af5a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800af5e:	e000      	b.n	800af62 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800af60:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af62:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800af66:	2b00      	cmp	r3, #0
 800af68:	d10b      	bne.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800af6a:	4b6c      	ldr	r3, [pc, #432]	@ (800b11c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800af6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af6e:	f023 0107 	bic.w	r1, r3, #7
 800af72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800af7a:	4a68      	ldr	r2, [pc, #416]	@ (800b11c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800af7c:	430b      	orrs	r3, r1
 800af7e:	6593      	str	r3, [r2, #88]	@ 0x58
 800af80:	e003      	b.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af82:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800af86:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800af8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af92:	f002 0320 	and.w	r3, r2, #32
 800af96:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800af9a:	2300      	movs	r3, #0
 800af9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800afa0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800afa4:	460b      	mov	r3, r1
 800afa6:	4313      	orrs	r3, r2
 800afa8:	d055      	beq.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800afaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800afb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800afb6:	d033      	beq.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800afb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800afbc:	d82c      	bhi.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800afbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800afc2:	d02f      	beq.n	800b024 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800afc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800afc8:	d826      	bhi.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800afca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800afce:	d02b      	beq.n	800b028 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800afd0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800afd4:	d820      	bhi.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800afd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800afda:	d012      	beq.n	800b002 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800afdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800afe0:	d81a      	bhi.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d022      	beq.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800afe6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800afea:	d115      	bne.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800afec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aff0:	3308      	adds	r3, #8
 800aff2:	2100      	movs	r1, #0
 800aff4:	4618      	mov	r0, r3
 800aff6:	f000 febd 	bl	800bd74 <RCCEx_PLL2_Config>
 800affa:	4603      	mov	r3, r0
 800affc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b000:	e015      	b.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b002:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b006:	3328      	adds	r3, #40	@ 0x28
 800b008:	2102      	movs	r1, #2
 800b00a:	4618      	mov	r0, r3
 800b00c:	f000 ff64 	bl	800bed8 <RCCEx_PLL3_Config>
 800b010:	4603      	mov	r3, r0
 800b012:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b016:	e00a      	b.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b018:	2301      	movs	r3, #1
 800b01a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b01e:	e006      	b.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800b020:	bf00      	nop
 800b022:	e004      	b.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800b024:	bf00      	nop
 800b026:	e002      	b.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800b028:	bf00      	nop
 800b02a:	e000      	b.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800b02c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b02e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b032:	2b00      	cmp	r3, #0
 800b034:	d10b      	bne.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b036:	4b39      	ldr	r3, [pc, #228]	@ (800b11c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b03a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b03e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b042:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b046:	4a35      	ldr	r2, [pc, #212]	@ (800b11c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b048:	430b      	orrs	r3, r1
 800b04a:	6553      	str	r3, [r2, #84]	@ 0x54
 800b04c:	e003      	b.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b04e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b052:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b056:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800b062:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b066:	2300      	movs	r3, #0
 800b068:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b06c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800b070:	460b      	mov	r3, r1
 800b072:	4313      	orrs	r3, r2
 800b074:	d058      	beq.n	800b128 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b076:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b07a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b07e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b082:	d033      	beq.n	800b0ec <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b084:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b088:	d82c      	bhi.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b08a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b08e:	d02f      	beq.n	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b090:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b094:	d826      	bhi.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b096:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b09a:	d02b      	beq.n	800b0f4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b09c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b0a0:	d820      	bhi.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b0a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b0a6:	d012      	beq.n	800b0ce <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800b0a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b0ac:	d81a      	bhi.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d022      	beq.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800b0b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b0b6:	d115      	bne.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b0b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0bc:	3308      	adds	r3, #8
 800b0be:	2100      	movs	r1, #0
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f000 fe57 	bl	800bd74 <RCCEx_PLL2_Config>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b0cc:	e015      	b.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b0ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0d2:	3328      	adds	r3, #40	@ 0x28
 800b0d4:	2102      	movs	r1, #2
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f000 fefe 	bl	800bed8 <RCCEx_PLL3_Config>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b0e2:	e00a      	b.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b0ea:	e006      	b.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800b0ec:	bf00      	nop
 800b0ee:	e004      	b.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800b0f0:	bf00      	nop
 800b0f2:	e002      	b.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800b0f4:	bf00      	nop
 800b0f6:	e000      	b.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800b0f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0fa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d10e      	bne.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b102:	4b06      	ldr	r3, [pc, #24]	@ (800b11c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b106:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800b10a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b10e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b112:	4a02      	ldr	r2, [pc, #8]	@ (800b11c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b114:	430b      	orrs	r3, r1
 800b116:	6593      	str	r3, [r2, #88]	@ 0x58
 800b118:	e006      	b.n	800b128 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800b11a:	bf00      	nop
 800b11c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b120:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b124:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b128:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b130:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800b134:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b138:	2300      	movs	r3, #0
 800b13a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b13e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800b142:	460b      	mov	r3, r1
 800b144:	4313      	orrs	r3, r2
 800b146:	d055      	beq.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b148:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b14c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b150:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b154:	d033      	beq.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b156:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b15a:	d82c      	bhi.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800b15c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b160:	d02f      	beq.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b162:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b166:	d826      	bhi.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800b168:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b16c:	d02b      	beq.n	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b16e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b172:	d820      	bhi.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800b174:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b178:	d012      	beq.n	800b1a0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800b17a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b17e:	d81a      	bhi.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800b180:	2b00      	cmp	r3, #0
 800b182:	d022      	beq.n	800b1ca <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800b184:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b188:	d115      	bne.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b18a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b18e:	3308      	adds	r3, #8
 800b190:	2100      	movs	r1, #0
 800b192:	4618      	mov	r0, r3
 800b194:	f000 fdee 	bl	800bd74 <RCCEx_PLL2_Config>
 800b198:	4603      	mov	r3, r0
 800b19a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b19e:	e015      	b.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b1a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1a4:	3328      	adds	r3, #40	@ 0x28
 800b1a6:	2102      	movs	r1, #2
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f000 fe95 	bl	800bed8 <RCCEx_PLL3_Config>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b1b4:	e00a      	b.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b1bc:	e006      	b.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800b1be:	bf00      	nop
 800b1c0:	e004      	b.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800b1c2:	bf00      	nop
 800b1c4:	e002      	b.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800b1c6:	bf00      	nop
 800b1c8:	e000      	b.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800b1ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d10b      	bne.n	800b1ec <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b1d4:	4ba1      	ldr	r3, [pc, #644]	@ (800b45c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b1d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1d8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800b1dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b1e4:	4a9d      	ldr	r2, [pc, #628]	@ (800b45c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b1e6:	430b      	orrs	r3, r1
 800b1e8:	6593      	str	r3, [r2, #88]	@ 0x58
 800b1ea:	e003      	b.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b1f0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b1f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fc:	f002 0308 	and.w	r3, r2, #8
 800b200:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b204:	2300      	movs	r3, #0
 800b206:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b20a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b20e:	460b      	mov	r3, r1
 800b210:	4313      	orrs	r3, r2
 800b212:	d01e      	beq.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b214:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b218:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b21c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b220:	d10c      	bne.n	800b23c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b222:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b226:	3328      	adds	r3, #40	@ 0x28
 800b228:	2102      	movs	r1, #2
 800b22a:	4618      	mov	r0, r3
 800b22c:	f000 fe54 	bl	800bed8 <RCCEx_PLL3_Config>
 800b230:	4603      	mov	r3, r0
 800b232:	2b00      	cmp	r3, #0
 800b234:	d002      	beq.n	800b23c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800b236:	2301      	movs	r3, #1
 800b238:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b23c:	4b87      	ldr	r3, [pc, #540]	@ (800b45c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b23e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b240:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b244:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b248:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b24c:	4a83      	ldr	r2, [pc, #524]	@ (800b45c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b24e:	430b      	orrs	r3, r1
 800b250:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b252:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b25a:	f002 0310 	and.w	r3, r2, #16
 800b25e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b262:	2300      	movs	r3, #0
 800b264:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b268:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b26c:	460b      	mov	r3, r1
 800b26e:	4313      	orrs	r3, r2
 800b270:	d01e      	beq.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b272:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b276:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b27a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b27e:	d10c      	bne.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b280:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b284:	3328      	adds	r3, #40	@ 0x28
 800b286:	2102      	movs	r1, #2
 800b288:	4618      	mov	r0, r3
 800b28a:	f000 fe25 	bl	800bed8 <RCCEx_PLL3_Config>
 800b28e:	4603      	mov	r3, r0
 800b290:	2b00      	cmp	r3, #0
 800b292:	d002      	beq.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800b294:	2301      	movs	r3, #1
 800b296:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b29a:	4b70      	ldr	r3, [pc, #448]	@ (800b45c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b29c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b29e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b2a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b2aa:	4a6c      	ldr	r2, [pc, #432]	@ (800b45c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b2ac:	430b      	orrs	r3, r1
 800b2ae:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b2b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b2bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b2c6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b2ca:	460b      	mov	r3, r1
 800b2cc:	4313      	orrs	r3, r2
 800b2ce:	d03e      	beq.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b2d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b2d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b2dc:	d022      	beq.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800b2de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b2e2:	d81b      	bhi.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d003      	beq.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800b2e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b2ec:	d00b      	beq.n	800b306 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800b2ee:	e015      	b.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b2f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2f4:	3308      	adds	r3, #8
 800b2f6:	2100      	movs	r1, #0
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f000 fd3b 	bl	800bd74 <RCCEx_PLL2_Config>
 800b2fe:	4603      	mov	r3, r0
 800b300:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b304:	e00f      	b.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b306:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b30a:	3328      	adds	r3, #40	@ 0x28
 800b30c:	2102      	movs	r1, #2
 800b30e:	4618      	mov	r0, r3
 800b310:	f000 fde2 	bl	800bed8 <RCCEx_PLL3_Config>
 800b314:	4603      	mov	r3, r0
 800b316:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b31a:	e004      	b.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b31c:	2301      	movs	r3, #1
 800b31e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b322:	e000      	b.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800b324:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b326:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d10b      	bne.n	800b346 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b32e:	4b4b      	ldr	r3, [pc, #300]	@ (800b45c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b332:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b336:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b33a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b33e:	4a47      	ldr	r2, [pc, #284]	@ (800b45c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b340:	430b      	orrs	r3, r1
 800b342:	6593      	str	r3, [r2, #88]	@ 0x58
 800b344:	e003      	b.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b346:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b34a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b34e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b356:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b35a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b35c:	2300      	movs	r3, #0
 800b35e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b360:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b364:	460b      	mov	r3, r1
 800b366:	4313      	orrs	r3, r2
 800b368:	d03b      	beq.n	800b3e2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b36a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b36e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b372:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b376:	d01f      	beq.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800b378:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b37c:	d818      	bhi.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b37e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b382:	d003      	beq.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800b384:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b388:	d007      	beq.n	800b39a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800b38a:	e011      	b.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b38c:	4b33      	ldr	r3, [pc, #204]	@ (800b45c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b38e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b390:	4a32      	ldr	r2, [pc, #200]	@ (800b45c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b392:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b396:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b398:	e00f      	b.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b39a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b39e:	3328      	adds	r3, #40	@ 0x28
 800b3a0:	2101      	movs	r1, #1
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f000 fd98 	bl	800bed8 <RCCEx_PLL3_Config>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800b3ae:	e004      	b.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b3b6:	e000      	b.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800b3b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d10b      	bne.n	800b3da <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b3c2:	4b26      	ldr	r3, [pc, #152]	@ (800b45c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b3c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3c6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b3ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3d2:	4a22      	ldr	r2, [pc, #136]	@ (800b45c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b3d4:	430b      	orrs	r3, r1
 800b3d6:	6553      	str	r3, [r2, #84]	@ 0x54
 800b3d8:	e003      	b.n	800b3e2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b3de:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b3e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ea:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b3ee:	673b      	str	r3, [r7, #112]	@ 0x70
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	677b      	str	r3, [r7, #116]	@ 0x74
 800b3f4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b3f8:	460b      	mov	r3, r1
 800b3fa:	4313      	orrs	r3, r2
 800b3fc:	d034      	beq.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b3fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b402:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b404:	2b00      	cmp	r3, #0
 800b406:	d003      	beq.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800b408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b40c:	d007      	beq.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800b40e:	e011      	b.n	800b434 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b410:	4b12      	ldr	r3, [pc, #72]	@ (800b45c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b414:	4a11      	ldr	r2, [pc, #68]	@ (800b45c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b416:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b41a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b41c:	e00e      	b.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b41e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b422:	3308      	adds	r3, #8
 800b424:	2102      	movs	r1, #2
 800b426:	4618      	mov	r0, r3
 800b428:	f000 fca4 	bl	800bd74 <RCCEx_PLL2_Config>
 800b42c:	4603      	mov	r3, r0
 800b42e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b432:	e003      	b.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800b434:	2301      	movs	r3, #1
 800b436:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b43a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b43c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b440:	2b00      	cmp	r3, #0
 800b442:	d10d      	bne.n	800b460 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b444:	4b05      	ldr	r3, [pc, #20]	@ (800b45c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b448:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b44c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b452:	4a02      	ldr	r2, [pc, #8]	@ (800b45c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b454:	430b      	orrs	r3, r1
 800b456:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b458:	e006      	b.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800b45a:	bf00      	nop
 800b45c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b460:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b464:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b468:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b470:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800b474:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b476:	2300      	movs	r3, #0
 800b478:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b47a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b47e:	460b      	mov	r3, r1
 800b480:	4313      	orrs	r3, r2
 800b482:	d00c      	beq.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b484:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b488:	3328      	adds	r3, #40	@ 0x28
 800b48a:	2102      	movs	r1, #2
 800b48c:	4618      	mov	r0, r3
 800b48e:	f000 fd23 	bl	800bed8 <RCCEx_PLL3_Config>
 800b492:	4603      	mov	r3, r0
 800b494:	2b00      	cmp	r3, #0
 800b496:	d002      	beq.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800b498:	2301      	movs	r3, #1
 800b49a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b49e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b4aa:	663b      	str	r3, [r7, #96]	@ 0x60
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	667b      	str	r3, [r7, #100]	@ 0x64
 800b4b0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b4b4:	460b      	mov	r3, r1
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	d038      	beq.n	800b52c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b4ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b4c6:	d018      	beq.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800b4c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b4cc:	d811      	bhi.n	800b4f2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800b4ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4d2:	d014      	beq.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800b4d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4d8:	d80b      	bhi.n	800b4f2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d011      	beq.n	800b502 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800b4de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b4e2:	d106      	bne.n	800b4f2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4e4:	4bc3      	ldr	r3, [pc, #780]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b4e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4e8:	4ac2      	ldr	r2, [pc, #776]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b4ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b4ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b4f0:	e008      	b.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b4f8:	e004      	b.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800b4fa:	bf00      	nop
 800b4fc:	e002      	b.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800b4fe:	bf00      	nop
 800b500:	e000      	b.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800b502:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b504:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d10b      	bne.n	800b524 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b50c:	4bb9      	ldr	r3, [pc, #740]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b50e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b510:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b514:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b51c:	4ab5      	ldr	r2, [pc, #724]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b51e:	430b      	orrs	r3, r1
 800b520:	6553      	str	r3, [r2, #84]	@ 0x54
 800b522:	e003      	b.n	800b52c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b524:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b528:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b52c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b534:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b538:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b53a:	2300      	movs	r3, #0
 800b53c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b53e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b542:	460b      	mov	r3, r1
 800b544:	4313      	orrs	r3, r2
 800b546:	d009      	beq.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b548:	4baa      	ldr	r3, [pc, #680]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b54a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b54c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b550:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b554:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b556:	4aa7      	ldr	r2, [pc, #668]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b558:	430b      	orrs	r3, r1
 800b55a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b55c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b564:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b568:	653b      	str	r3, [r7, #80]	@ 0x50
 800b56a:	2300      	movs	r3, #0
 800b56c:	657b      	str	r3, [r7, #84]	@ 0x54
 800b56e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b572:	460b      	mov	r3, r1
 800b574:	4313      	orrs	r3, r2
 800b576:	d009      	beq.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b578:	4b9e      	ldr	r3, [pc, #632]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b57a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b57c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800b580:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b586:	4a9b      	ldr	r2, [pc, #620]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b588:	430b      	orrs	r3, r1
 800b58a:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800b58c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b594:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800b598:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b59a:	2300      	movs	r3, #0
 800b59c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b59e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b5a2:	460b      	mov	r3, r1
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	d009      	beq.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800b5a8:	4b92      	ldr	r3, [pc, #584]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b5aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b5ac:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800b5b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5b6:	4a8f      	ldr	r2, [pc, #572]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b5b8:	430b      	orrs	r3, r1
 800b5ba:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b5bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b5c8:	643b      	str	r3, [r7, #64]	@ 0x40
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	647b      	str	r3, [r7, #68]	@ 0x44
 800b5ce:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b5d2:	460b      	mov	r3, r1
 800b5d4:	4313      	orrs	r3, r2
 800b5d6:	d00e      	beq.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b5d8:	4b86      	ldr	r3, [pc, #536]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b5da:	691b      	ldr	r3, [r3, #16]
 800b5dc:	4a85      	ldr	r2, [pc, #532]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b5de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b5e2:	6113      	str	r3, [r2, #16]
 800b5e4:	4b83      	ldr	r3, [pc, #524]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b5e6:	6919      	ldr	r1, [r3, #16]
 800b5e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b5f0:	4a80      	ldr	r2, [pc, #512]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b5f2:	430b      	orrs	r3, r1
 800b5f4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b5f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fe:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b602:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b604:	2300      	movs	r3, #0
 800b606:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b608:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b60c:	460b      	mov	r3, r1
 800b60e:	4313      	orrs	r3, r2
 800b610:	d009      	beq.n	800b626 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b612:	4b78      	ldr	r3, [pc, #480]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b616:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b61a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b61e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b620:	4a74      	ldr	r2, [pc, #464]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b622:	430b      	orrs	r3, r1
 800b624:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b626:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b632:	633b      	str	r3, [r7, #48]	@ 0x30
 800b634:	2300      	movs	r3, #0
 800b636:	637b      	str	r3, [r7, #52]	@ 0x34
 800b638:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b63c:	460b      	mov	r3, r1
 800b63e:	4313      	orrs	r3, r2
 800b640:	d00a      	beq.n	800b658 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b642:	4b6c      	ldr	r3, [pc, #432]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b646:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800b64a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b64e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b652:	4a68      	ldr	r2, [pc, #416]	@ (800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b654:	430b      	orrs	r3, r1
 800b656:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b658:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b660:	2100      	movs	r1, #0
 800b662:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b664:	f003 0301 	and.w	r3, r3, #1
 800b668:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b66a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b66e:	460b      	mov	r3, r1
 800b670:	4313      	orrs	r3, r2
 800b672:	d011      	beq.n	800b698 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b674:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b678:	3308      	adds	r3, #8
 800b67a:	2100      	movs	r1, #0
 800b67c:	4618      	mov	r0, r3
 800b67e:	f000 fb79 	bl	800bd74 <RCCEx_PLL2_Config>
 800b682:	4603      	mov	r3, r0
 800b684:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b688:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d003      	beq.n	800b698 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b690:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b694:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b698:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a0:	2100      	movs	r1, #0
 800b6a2:	6239      	str	r1, [r7, #32]
 800b6a4:	f003 0302 	and.w	r3, r3, #2
 800b6a8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b6aa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b6ae:	460b      	mov	r3, r1
 800b6b0:	4313      	orrs	r3, r2
 800b6b2:	d011      	beq.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b6b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6b8:	3308      	adds	r3, #8
 800b6ba:	2101      	movs	r1, #1
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f000 fb59 	bl	800bd74 <RCCEx_PLL2_Config>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b6c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d003      	beq.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b6d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b6d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e0:	2100      	movs	r1, #0
 800b6e2:	61b9      	str	r1, [r7, #24]
 800b6e4:	f003 0304 	and.w	r3, r3, #4
 800b6e8:	61fb      	str	r3, [r7, #28]
 800b6ea:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b6ee:	460b      	mov	r3, r1
 800b6f0:	4313      	orrs	r3, r2
 800b6f2:	d011      	beq.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b6f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6f8:	3308      	adds	r3, #8
 800b6fa:	2102      	movs	r1, #2
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f000 fb39 	bl	800bd74 <RCCEx_PLL2_Config>
 800b702:	4603      	mov	r3, r0
 800b704:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b708:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d003      	beq.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b710:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b714:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b718:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b720:	2100      	movs	r1, #0
 800b722:	6139      	str	r1, [r7, #16]
 800b724:	f003 0308 	and.w	r3, r3, #8
 800b728:	617b      	str	r3, [r7, #20]
 800b72a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b72e:	460b      	mov	r3, r1
 800b730:	4313      	orrs	r3, r2
 800b732:	d011      	beq.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b734:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b738:	3328      	adds	r3, #40	@ 0x28
 800b73a:	2100      	movs	r1, #0
 800b73c:	4618      	mov	r0, r3
 800b73e:	f000 fbcb 	bl	800bed8 <RCCEx_PLL3_Config>
 800b742:	4603      	mov	r3, r0
 800b744:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800b748:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d003      	beq.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b750:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b754:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b758:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b760:	2100      	movs	r1, #0
 800b762:	60b9      	str	r1, [r7, #8]
 800b764:	f003 0310 	and.w	r3, r3, #16
 800b768:	60fb      	str	r3, [r7, #12]
 800b76a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b76e:	460b      	mov	r3, r1
 800b770:	4313      	orrs	r3, r2
 800b772:	d011      	beq.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b774:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b778:	3328      	adds	r3, #40	@ 0x28
 800b77a:	2101      	movs	r1, #1
 800b77c:	4618      	mov	r0, r3
 800b77e:	f000 fbab 	bl	800bed8 <RCCEx_PLL3_Config>
 800b782:	4603      	mov	r3, r0
 800b784:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b788:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d003      	beq.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b790:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b794:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b798:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a0:	2100      	movs	r1, #0
 800b7a2:	6039      	str	r1, [r7, #0]
 800b7a4:	f003 0320 	and.w	r3, r3, #32
 800b7a8:	607b      	str	r3, [r7, #4]
 800b7aa:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b7ae:	460b      	mov	r3, r1
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	d011      	beq.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b7b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7b8:	3328      	adds	r3, #40	@ 0x28
 800b7ba:	2102      	movs	r1, #2
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f000 fb8b 	bl	800bed8 <RCCEx_PLL3_Config>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b7c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d003      	beq.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b7d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800b7d8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d101      	bne.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	e000      	b.n	800b7e6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800b7e4:	2301      	movs	r3, #1
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b7f2:	bf00      	nop
 800b7f4:	58024400 	.word	0x58024400

0800b7f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800b7fc:	f7fe fde2 	bl	800a3c4 <HAL_RCC_GetHCLKFreq>
 800b800:	4602      	mov	r2, r0
 800b802:	4b06      	ldr	r3, [pc, #24]	@ (800b81c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b804:	6a1b      	ldr	r3, [r3, #32]
 800b806:	091b      	lsrs	r3, r3, #4
 800b808:	f003 0307 	and.w	r3, r3, #7
 800b80c:	4904      	ldr	r1, [pc, #16]	@ (800b820 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b80e:	5ccb      	ldrb	r3, [r1, r3]
 800b810:	f003 031f 	and.w	r3, r3, #31
 800b814:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b818:	4618      	mov	r0, r3
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	58024400 	.word	0x58024400
 800b820:	08018cb4 	.word	0x08018cb4

0800b824 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b824:	b480      	push	{r7}
 800b826:	b089      	sub	sp, #36	@ 0x24
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b82c:	4ba1      	ldr	r3, [pc, #644]	@ (800bab4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b82e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b830:	f003 0303 	and.w	r3, r3, #3
 800b834:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b836:	4b9f      	ldr	r3, [pc, #636]	@ (800bab4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b83a:	0b1b      	lsrs	r3, r3, #12
 800b83c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b840:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b842:	4b9c      	ldr	r3, [pc, #624]	@ (800bab4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b846:	091b      	lsrs	r3, r3, #4
 800b848:	f003 0301 	and.w	r3, r3, #1
 800b84c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b84e:	4b99      	ldr	r3, [pc, #612]	@ (800bab4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b852:	08db      	lsrs	r3, r3, #3
 800b854:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b858:	693a      	ldr	r2, [r7, #16]
 800b85a:	fb02 f303 	mul.w	r3, r2, r3
 800b85e:	ee07 3a90 	vmov	s15, r3
 800b862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b866:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	f000 8111 	beq.w	800ba94 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b872:	69bb      	ldr	r3, [r7, #24]
 800b874:	2b02      	cmp	r3, #2
 800b876:	f000 8083 	beq.w	800b980 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b87a:	69bb      	ldr	r3, [r7, #24]
 800b87c:	2b02      	cmp	r3, #2
 800b87e:	f200 80a1 	bhi.w	800b9c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b882:	69bb      	ldr	r3, [r7, #24]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d003      	beq.n	800b890 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b888:	69bb      	ldr	r3, [r7, #24]
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	d056      	beq.n	800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b88e:	e099      	b.n	800b9c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b890:	4b88      	ldr	r3, [pc, #544]	@ (800bab4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f003 0320 	and.w	r3, r3, #32
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d02d      	beq.n	800b8f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b89c:	4b85      	ldr	r3, [pc, #532]	@ (800bab4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	08db      	lsrs	r3, r3, #3
 800b8a2:	f003 0303 	and.w	r3, r3, #3
 800b8a6:	4a84      	ldr	r2, [pc, #528]	@ (800bab8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b8a8:	fa22 f303 	lsr.w	r3, r2, r3
 800b8ac:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	ee07 3a90 	vmov	s15, r3
 800b8b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	ee07 3a90 	vmov	s15, r3
 800b8be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8c6:	4b7b      	ldr	r3, [pc, #492]	@ (800bab4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8ce:	ee07 3a90 	vmov	s15, r3
 800b8d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8da:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800babc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b8de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b8ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b8f6:	e087      	b.n	800ba08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	ee07 3a90 	vmov	s15, r3
 800b8fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b902:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bac0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b90a:	4b6a      	ldr	r3, [pc, #424]	@ (800bab4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b90c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b90e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b912:	ee07 3a90 	vmov	s15, r3
 800b916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b91a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b91e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800babc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b92a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b92e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b932:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b936:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b93a:	e065      	b.n	800ba08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	ee07 3a90 	vmov	s15, r3
 800b942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b946:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bac4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b94a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b94e:	4b59      	ldr	r3, [pc, #356]	@ (800bab4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b956:	ee07 3a90 	vmov	s15, r3
 800b95a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b95e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b962:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800babc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b96a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b96e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b97a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b97e:	e043      	b.n	800ba08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	ee07 3a90 	vmov	s15, r3
 800b986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b98a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bac8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b98e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b992:	4b48      	ldr	r3, [pc, #288]	@ (800bab4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b99a:	ee07 3a90 	vmov	s15, r3
 800b99e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9a6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800babc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b9aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b9b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b9c2:	e021      	b.n	800ba08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	ee07 3a90 	vmov	s15, r3
 800b9ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9ce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bac4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b9d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9d6:	4b37      	ldr	r3, [pc, #220]	@ (800bab4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9de:	ee07 3a90 	vmov	s15, r3
 800b9e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9ea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800babc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b9ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b9fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba06:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ba08:	4b2a      	ldr	r3, [pc, #168]	@ (800bab4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba0c:	0a5b      	lsrs	r3, r3, #9
 800ba0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba12:	ee07 3a90 	vmov	s15, r3
 800ba16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ba1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba22:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba2e:	ee17 2a90 	vmov	r2, s15
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ba36:	4b1f      	ldr	r3, [pc, #124]	@ (800bab4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba3a:	0c1b      	lsrs	r3, r3, #16
 800ba3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba40:	ee07 3a90 	vmov	s15, r3
 800ba44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ba4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba50:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba5c:	ee17 2a90 	vmov	r2, s15
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ba64:	4b13      	ldr	r3, [pc, #76]	@ (800bab4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba68:	0e1b      	lsrs	r3, r3, #24
 800ba6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba6e:	ee07 3a90 	vmov	s15, r3
 800ba72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ba7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba7e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba8a:	ee17 2a90 	vmov	r2, s15
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ba92:	e008      	b.n	800baa6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2200      	movs	r2, #0
 800ba98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2200      	movs	r2, #0
 800baa4:	609a      	str	r2, [r3, #8]
}
 800baa6:	bf00      	nop
 800baa8:	3724      	adds	r7, #36	@ 0x24
 800baaa:	46bd      	mov	sp, r7
 800baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab0:	4770      	bx	lr
 800bab2:	bf00      	nop
 800bab4:	58024400 	.word	0x58024400
 800bab8:	03d09000 	.word	0x03d09000
 800babc:	46000000 	.word	0x46000000
 800bac0:	4c742400 	.word	0x4c742400
 800bac4:	4a742400 	.word	0x4a742400
 800bac8:	4bb71b00 	.word	0x4bb71b00

0800bacc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bacc:	b480      	push	{r7}
 800bace:	b089      	sub	sp, #36	@ 0x24
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bad4:	4ba1      	ldr	r3, [pc, #644]	@ (800bd5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bad8:	f003 0303 	and.w	r3, r3, #3
 800badc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bade:	4b9f      	ldr	r3, [pc, #636]	@ (800bd5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bae2:	0d1b      	lsrs	r3, r3, #20
 800bae4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bae8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800baea:	4b9c      	ldr	r3, [pc, #624]	@ (800bd5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800baec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baee:	0a1b      	lsrs	r3, r3, #8
 800baf0:	f003 0301 	and.w	r3, r3, #1
 800baf4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800baf6:	4b99      	ldr	r3, [pc, #612]	@ (800bd5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800baf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bafa:	08db      	lsrs	r3, r3, #3
 800bafc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bb00:	693a      	ldr	r2, [r7, #16]
 800bb02:	fb02 f303 	mul.w	r3, r2, r3
 800bb06:	ee07 3a90 	vmov	s15, r3
 800bb0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	f000 8111 	beq.w	800bd3c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bb1a:	69bb      	ldr	r3, [r7, #24]
 800bb1c:	2b02      	cmp	r3, #2
 800bb1e:	f000 8083 	beq.w	800bc28 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bb22:	69bb      	ldr	r3, [r7, #24]
 800bb24:	2b02      	cmp	r3, #2
 800bb26:	f200 80a1 	bhi.w	800bc6c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bb2a:	69bb      	ldr	r3, [r7, #24]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d003      	beq.n	800bb38 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bb30:	69bb      	ldr	r3, [r7, #24]
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	d056      	beq.n	800bbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bb36:	e099      	b.n	800bc6c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb38:	4b88      	ldr	r3, [pc, #544]	@ (800bd5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f003 0320 	and.w	r3, r3, #32
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d02d      	beq.n	800bba0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb44:	4b85      	ldr	r3, [pc, #532]	@ (800bd5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	08db      	lsrs	r3, r3, #3
 800bb4a:	f003 0303 	and.w	r3, r3, #3
 800bb4e:	4a84      	ldr	r2, [pc, #528]	@ (800bd60 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bb50:	fa22 f303 	lsr.w	r3, r2, r3
 800bb54:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	ee07 3a90 	vmov	s15, r3
 800bb5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	ee07 3a90 	vmov	s15, r3
 800bb66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb6e:	4b7b      	ldr	r3, [pc, #492]	@ (800bd5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb76:	ee07 3a90 	vmov	s15, r3
 800bb7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb82:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bd64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bb86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb9a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bb9e:	e087      	b.n	800bcb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	ee07 3a90 	vmov	s15, r3
 800bba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbaa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bd68 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bbae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbb2:	4b6a      	ldr	r3, [pc, #424]	@ (800bd5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbba:	ee07 3a90 	vmov	s15, r3
 800bbbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbc6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bd64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bbca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bbd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbe2:	e065      	b.n	800bcb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	ee07 3a90 	vmov	s15, r3
 800bbea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bd6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bbf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbf6:	4b59      	ldr	r3, [pc, #356]	@ (800bd5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbfe:	ee07 3a90 	vmov	s15, r3
 800bc02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc06:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc0a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bd64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bc0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc26:	e043      	b.n	800bcb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	ee07 3a90 	vmov	s15, r3
 800bc2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc32:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bd70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bc36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc3a:	4b48      	ldr	r3, [pc, #288]	@ (800bd5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc42:	ee07 3a90 	vmov	s15, r3
 800bc46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc4e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bd64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bc52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc6a:	e021      	b.n	800bcb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	ee07 3a90 	vmov	s15, r3
 800bc72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc76:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bd6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bc7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc7e:	4b37      	ldr	r3, [pc, #220]	@ (800bd5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc86:	ee07 3a90 	vmov	s15, r3
 800bc8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc92:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bd64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bc96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bcae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bcb0:	4b2a      	ldr	r3, [pc, #168]	@ (800bd5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcb4:	0a5b      	lsrs	r3, r3, #9
 800bcb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bcba:	ee07 3a90 	vmov	s15, r3
 800bcbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bcc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bcca:	edd7 6a07 	vldr	s13, [r7, #28]
 800bcce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bcd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcd6:	ee17 2a90 	vmov	r2, s15
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bcde:	4b1f      	ldr	r3, [pc, #124]	@ (800bd5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bce2:	0c1b      	lsrs	r3, r3, #16
 800bce4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bce8:	ee07 3a90 	vmov	s15, r3
 800bcec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcf0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bcf4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bcf8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bcfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd04:	ee17 2a90 	vmov	r2, s15
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bd0c:	4b13      	ldr	r3, [pc, #76]	@ (800bd5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd10:	0e1b      	lsrs	r3, r3, #24
 800bd12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd16:	ee07 3a90 	vmov	s15, r3
 800bd1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bd22:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd26:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd32:	ee17 2a90 	vmov	r2, s15
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bd3a:	e008      	b.n	800bd4e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2200      	movs	r2, #0
 800bd46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	609a      	str	r2, [r3, #8]
}
 800bd4e:	bf00      	nop
 800bd50:	3724      	adds	r7, #36	@ 0x24
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr
 800bd5a:	bf00      	nop
 800bd5c:	58024400 	.word	0x58024400
 800bd60:	03d09000 	.word	0x03d09000
 800bd64:	46000000 	.word	0x46000000
 800bd68:	4c742400 	.word	0x4c742400
 800bd6c:	4a742400 	.word	0x4a742400
 800bd70:	4bb71b00 	.word	0x4bb71b00

0800bd74 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b084      	sub	sp, #16
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bd82:	4b53      	ldr	r3, [pc, #332]	@ (800bed0 <RCCEx_PLL2_Config+0x15c>)
 800bd84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd86:	f003 0303 	and.w	r3, r3, #3
 800bd8a:	2b03      	cmp	r3, #3
 800bd8c:	d101      	bne.n	800bd92 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bd8e:	2301      	movs	r3, #1
 800bd90:	e099      	b.n	800bec6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bd92:	4b4f      	ldr	r3, [pc, #316]	@ (800bed0 <RCCEx_PLL2_Config+0x15c>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	4a4e      	ldr	r2, [pc, #312]	@ (800bed0 <RCCEx_PLL2_Config+0x15c>)
 800bd98:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bd9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd9e:	f7f9 fc71 	bl	8005684 <HAL_GetTick>
 800bda2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bda4:	e008      	b.n	800bdb8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bda6:	f7f9 fc6d 	bl	8005684 <HAL_GetTick>
 800bdaa:	4602      	mov	r2, r0
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	1ad3      	subs	r3, r2, r3
 800bdb0:	2b02      	cmp	r3, #2
 800bdb2:	d901      	bls.n	800bdb8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bdb4:	2303      	movs	r3, #3
 800bdb6:	e086      	b.n	800bec6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bdb8:	4b45      	ldr	r3, [pc, #276]	@ (800bed0 <RCCEx_PLL2_Config+0x15c>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d1f0      	bne.n	800bda6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bdc4:	4b42      	ldr	r3, [pc, #264]	@ (800bed0 <RCCEx_PLL2_Config+0x15c>)
 800bdc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdc8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	031b      	lsls	r3, r3, #12
 800bdd2:	493f      	ldr	r1, [pc, #252]	@ (800bed0 <RCCEx_PLL2_Config+0x15c>)
 800bdd4:	4313      	orrs	r3, r2
 800bdd6:	628b      	str	r3, [r1, #40]	@ 0x28
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	3b01      	subs	r3, #1
 800bdde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	689b      	ldr	r3, [r3, #8]
 800bde6:	3b01      	subs	r3, #1
 800bde8:	025b      	lsls	r3, r3, #9
 800bdea:	b29b      	uxth	r3, r3
 800bdec:	431a      	orrs	r2, r3
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	68db      	ldr	r3, [r3, #12]
 800bdf2:	3b01      	subs	r3, #1
 800bdf4:	041b      	lsls	r3, r3, #16
 800bdf6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bdfa:	431a      	orrs	r2, r3
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	691b      	ldr	r3, [r3, #16]
 800be00:	3b01      	subs	r3, #1
 800be02:	061b      	lsls	r3, r3, #24
 800be04:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800be08:	4931      	ldr	r1, [pc, #196]	@ (800bed0 <RCCEx_PLL2_Config+0x15c>)
 800be0a:	4313      	orrs	r3, r2
 800be0c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800be0e:	4b30      	ldr	r3, [pc, #192]	@ (800bed0 <RCCEx_PLL2_Config+0x15c>)
 800be10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be12:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	695b      	ldr	r3, [r3, #20]
 800be1a:	492d      	ldr	r1, [pc, #180]	@ (800bed0 <RCCEx_PLL2_Config+0x15c>)
 800be1c:	4313      	orrs	r3, r2
 800be1e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800be20:	4b2b      	ldr	r3, [pc, #172]	@ (800bed0 <RCCEx_PLL2_Config+0x15c>)
 800be22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be24:	f023 0220 	bic.w	r2, r3, #32
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	699b      	ldr	r3, [r3, #24]
 800be2c:	4928      	ldr	r1, [pc, #160]	@ (800bed0 <RCCEx_PLL2_Config+0x15c>)
 800be2e:	4313      	orrs	r3, r2
 800be30:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800be32:	4b27      	ldr	r3, [pc, #156]	@ (800bed0 <RCCEx_PLL2_Config+0x15c>)
 800be34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be36:	4a26      	ldr	r2, [pc, #152]	@ (800bed0 <RCCEx_PLL2_Config+0x15c>)
 800be38:	f023 0310 	bic.w	r3, r3, #16
 800be3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800be3e:	4b24      	ldr	r3, [pc, #144]	@ (800bed0 <RCCEx_PLL2_Config+0x15c>)
 800be40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800be42:	4b24      	ldr	r3, [pc, #144]	@ (800bed4 <RCCEx_PLL2_Config+0x160>)
 800be44:	4013      	ands	r3, r2
 800be46:	687a      	ldr	r2, [r7, #4]
 800be48:	69d2      	ldr	r2, [r2, #28]
 800be4a:	00d2      	lsls	r2, r2, #3
 800be4c:	4920      	ldr	r1, [pc, #128]	@ (800bed0 <RCCEx_PLL2_Config+0x15c>)
 800be4e:	4313      	orrs	r3, r2
 800be50:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800be52:	4b1f      	ldr	r3, [pc, #124]	@ (800bed0 <RCCEx_PLL2_Config+0x15c>)
 800be54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be56:	4a1e      	ldr	r2, [pc, #120]	@ (800bed0 <RCCEx_PLL2_Config+0x15c>)
 800be58:	f043 0310 	orr.w	r3, r3, #16
 800be5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d106      	bne.n	800be72 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800be64:	4b1a      	ldr	r3, [pc, #104]	@ (800bed0 <RCCEx_PLL2_Config+0x15c>)
 800be66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be68:	4a19      	ldr	r2, [pc, #100]	@ (800bed0 <RCCEx_PLL2_Config+0x15c>)
 800be6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800be6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800be70:	e00f      	b.n	800be92 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	2b01      	cmp	r3, #1
 800be76:	d106      	bne.n	800be86 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800be78:	4b15      	ldr	r3, [pc, #84]	@ (800bed0 <RCCEx_PLL2_Config+0x15c>)
 800be7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be7c:	4a14      	ldr	r2, [pc, #80]	@ (800bed0 <RCCEx_PLL2_Config+0x15c>)
 800be7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800be82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800be84:	e005      	b.n	800be92 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800be86:	4b12      	ldr	r3, [pc, #72]	@ (800bed0 <RCCEx_PLL2_Config+0x15c>)
 800be88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be8a:	4a11      	ldr	r2, [pc, #68]	@ (800bed0 <RCCEx_PLL2_Config+0x15c>)
 800be8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800be90:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800be92:	4b0f      	ldr	r3, [pc, #60]	@ (800bed0 <RCCEx_PLL2_Config+0x15c>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	4a0e      	ldr	r2, [pc, #56]	@ (800bed0 <RCCEx_PLL2_Config+0x15c>)
 800be98:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800be9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be9e:	f7f9 fbf1 	bl	8005684 <HAL_GetTick>
 800bea2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bea4:	e008      	b.n	800beb8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bea6:	f7f9 fbed 	bl	8005684 <HAL_GetTick>
 800beaa:	4602      	mov	r2, r0
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	1ad3      	subs	r3, r2, r3
 800beb0:	2b02      	cmp	r3, #2
 800beb2:	d901      	bls.n	800beb8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800beb4:	2303      	movs	r3, #3
 800beb6:	e006      	b.n	800bec6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800beb8:	4b05      	ldr	r3, [pc, #20]	@ (800bed0 <RCCEx_PLL2_Config+0x15c>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d0f0      	beq.n	800bea6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bec4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	3710      	adds	r7, #16
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}
 800bece:	bf00      	nop
 800bed0:	58024400 	.word	0x58024400
 800bed4:	ffff0007 	.word	0xffff0007

0800bed8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b084      	sub	sp, #16
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
 800bee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bee2:	2300      	movs	r3, #0
 800bee4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bee6:	4b53      	ldr	r3, [pc, #332]	@ (800c034 <RCCEx_PLL3_Config+0x15c>)
 800bee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beea:	f003 0303 	and.w	r3, r3, #3
 800beee:	2b03      	cmp	r3, #3
 800bef0:	d101      	bne.n	800bef6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bef2:	2301      	movs	r3, #1
 800bef4:	e099      	b.n	800c02a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bef6:	4b4f      	ldr	r3, [pc, #316]	@ (800c034 <RCCEx_PLL3_Config+0x15c>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	4a4e      	ldr	r2, [pc, #312]	@ (800c034 <RCCEx_PLL3_Config+0x15c>)
 800befc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bf00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf02:	f7f9 fbbf 	bl	8005684 <HAL_GetTick>
 800bf06:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bf08:	e008      	b.n	800bf1c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bf0a:	f7f9 fbbb 	bl	8005684 <HAL_GetTick>
 800bf0e:	4602      	mov	r2, r0
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	1ad3      	subs	r3, r2, r3
 800bf14:	2b02      	cmp	r3, #2
 800bf16:	d901      	bls.n	800bf1c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bf18:	2303      	movs	r3, #3
 800bf1a:	e086      	b.n	800c02a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bf1c:	4b45      	ldr	r3, [pc, #276]	@ (800c034 <RCCEx_PLL3_Config+0x15c>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d1f0      	bne.n	800bf0a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bf28:	4b42      	ldr	r3, [pc, #264]	@ (800c034 <RCCEx_PLL3_Config+0x15c>)
 800bf2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf2c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	051b      	lsls	r3, r3, #20
 800bf36:	493f      	ldr	r1, [pc, #252]	@ (800c034 <RCCEx_PLL3_Config+0x15c>)
 800bf38:	4313      	orrs	r3, r2
 800bf3a:	628b      	str	r3, [r1, #40]	@ 0x28
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	685b      	ldr	r3, [r3, #4]
 800bf40:	3b01      	subs	r3, #1
 800bf42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	689b      	ldr	r3, [r3, #8]
 800bf4a:	3b01      	subs	r3, #1
 800bf4c:	025b      	lsls	r3, r3, #9
 800bf4e:	b29b      	uxth	r3, r3
 800bf50:	431a      	orrs	r2, r3
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	68db      	ldr	r3, [r3, #12]
 800bf56:	3b01      	subs	r3, #1
 800bf58:	041b      	lsls	r3, r3, #16
 800bf5a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bf5e:	431a      	orrs	r2, r3
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	691b      	ldr	r3, [r3, #16]
 800bf64:	3b01      	subs	r3, #1
 800bf66:	061b      	lsls	r3, r3, #24
 800bf68:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bf6c:	4931      	ldr	r1, [pc, #196]	@ (800c034 <RCCEx_PLL3_Config+0x15c>)
 800bf6e:	4313      	orrs	r3, r2
 800bf70:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bf72:	4b30      	ldr	r3, [pc, #192]	@ (800c034 <RCCEx_PLL3_Config+0x15c>)
 800bf74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf76:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	695b      	ldr	r3, [r3, #20]
 800bf7e:	492d      	ldr	r1, [pc, #180]	@ (800c034 <RCCEx_PLL3_Config+0x15c>)
 800bf80:	4313      	orrs	r3, r2
 800bf82:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bf84:	4b2b      	ldr	r3, [pc, #172]	@ (800c034 <RCCEx_PLL3_Config+0x15c>)
 800bf86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf88:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	699b      	ldr	r3, [r3, #24]
 800bf90:	4928      	ldr	r1, [pc, #160]	@ (800c034 <RCCEx_PLL3_Config+0x15c>)
 800bf92:	4313      	orrs	r3, r2
 800bf94:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bf96:	4b27      	ldr	r3, [pc, #156]	@ (800c034 <RCCEx_PLL3_Config+0x15c>)
 800bf98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf9a:	4a26      	ldr	r2, [pc, #152]	@ (800c034 <RCCEx_PLL3_Config+0x15c>)
 800bf9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bfa0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bfa2:	4b24      	ldr	r3, [pc, #144]	@ (800c034 <RCCEx_PLL3_Config+0x15c>)
 800bfa4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bfa6:	4b24      	ldr	r3, [pc, #144]	@ (800c038 <RCCEx_PLL3_Config+0x160>)
 800bfa8:	4013      	ands	r3, r2
 800bfaa:	687a      	ldr	r2, [r7, #4]
 800bfac:	69d2      	ldr	r2, [r2, #28]
 800bfae:	00d2      	lsls	r2, r2, #3
 800bfb0:	4920      	ldr	r1, [pc, #128]	@ (800c034 <RCCEx_PLL3_Config+0x15c>)
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bfb6:	4b1f      	ldr	r3, [pc, #124]	@ (800c034 <RCCEx_PLL3_Config+0x15c>)
 800bfb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfba:	4a1e      	ldr	r2, [pc, #120]	@ (800c034 <RCCEx_PLL3_Config+0x15c>)
 800bfbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bfc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d106      	bne.n	800bfd6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bfc8:	4b1a      	ldr	r3, [pc, #104]	@ (800c034 <RCCEx_PLL3_Config+0x15c>)
 800bfca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfcc:	4a19      	ldr	r2, [pc, #100]	@ (800c034 <RCCEx_PLL3_Config+0x15c>)
 800bfce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800bfd2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bfd4:	e00f      	b.n	800bff6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	2b01      	cmp	r3, #1
 800bfda:	d106      	bne.n	800bfea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bfdc:	4b15      	ldr	r3, [pc, #84]	@ (800c034 <RCCEx_PLL3_Config+0x15c>)
 800bfde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfe0:	4a14      	ldr	r2, [pc, #80]	@ (800c034 <RCCEx_PLL3_Config+0x15c>)
 800bfe2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bfe6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bfe8:	e005      	b.n	800bff6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bfea:	4b12      	ldr	r3, [pc, #72]	@ (800c034 <RCCEx_PLL3_Config+0x15c>)
 800bfec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfee:	4a11      	ldr	r2, [pc, #68]	@ (800c034 <RCCEx_PLL3_Config+0x15c>)
 800bff0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bff4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bff6:	4b0f      	ldr	r3, [pc, #60]	@ (800c034 <RCCEx_PLL3_Config+0x15c>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	4a0e      	ldr	r2, [pc, #56]	@ (800c034 <RCCEx_PLL3_Config+0x15c>)
 800bffc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c000:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c002:	f7f9 fb3f 	bl	8005684 <HAL_GetTick>
 800c006:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c008:	e008      	b.n	800c01c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c00a:	f7f9 fb3b 	bl	8005684 <HAL_GetTick>
 800c00e:	4602      	mov	r2, r0
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	1ad3      	subs	r3, r2, r3
 800c014:	2b02      	cmp	r3, #2
 800c016:	d901      	bls.n	800c01c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c018:	2303      	movs	r3, #3
 800c01a:	e006      	b.n	800c02a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c01c:	4b05      	ldr	r3, [pc, #20]	@ (800c034 <RCCEx_PLL3_Config+0x15c>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c024:	2b00      	cmp	r3, #0
 800c026:	d0f0      	beq.n	800c00a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c028:	7bfb      	ldrb	r3, [r7, #15]
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3710      	adds	r7, #16
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop
 800c034:	58024400 	.word	0x58024400
 800c038:	ffff0007 	.word	0xffff0007

0800c03c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b084      	sub	sp, #16
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d101      	bne.n	800c04e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c04a:	2301      	movs	r3, #1
 800c04c:	e10f      	b.n	800c26e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2200      	movs	r2, #0
 800c052:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	4a87      	ldr	r2, [pc, #540]	@ (800c278 <HAL_SPI_Init+0x23c>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d00f      	beq.n	800c07e <HAL_SPI_Init+0x42>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	4a86      	ldr	r2, [pc, #536]	@ (800c27c <HAL_SPI_Init+0x240>)
 800c064:	4293      	cmp	r3, r2
 800c066:	d00a      	beq.n	800c07e <HAL_SPI_Init+0x42>
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	4a84      	ldr	r2, [pc, #528]	@ (800c280 <HAL_SPI_Init+0x244>)
 800c06e:	4293      	cmp	r3, r2
 800c070:	d005      	beq.n	800c07e <HAL_SPI_Init+0x42>
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	68db      	ldr	r3, [r3, #12]
 800c076:	2b0f      	cmp	r3, #15
 800c078:	d901      	bls.n	800c07e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c07a:	2301      	movs	r3, #1
 800c07c:	e0f7      	b.n	800c26e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f001 f968 	bl	800d354 <SPI_GetPacketSize>
 800c084:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	4a7b      	ldr	r2, [pc, #492]	@ (800c278 <HAL_SPI_Init+0x23c>)
 800c08c:	4293      	cmp	r3, r2
 800c08e:	d00c      	beq.n	800c0aa <HAL_SPI_Init+0x6e>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	4a79      	ldr	r2, [pc, #484]	@ (800c27c <HAL_SPI_Init+0x240>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d007      	beq.n	800c0aa <HAL_SPI_Init+0x6e>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	4a78      	ldr	r2, [pc, #480]	@ (800c280 <HAL_SPI_Init+0x244>)
 800c0a0:	4293      	cmp	r3, r2
 800c0a2:	d002      	beq.n	800c0aa <HAL_SPI_Init+0x6e>
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	2b08      	cmp	r3, #8
 800c0a8:	d811      	bhi.n	800c0ce <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c0ae:	4a72      	ldr	r2, [pc, #456]	@ (800c278 <HAL_SPI_Init+0x23c>)
 800c0b0:	4293      	cmp	r3, r2
 800c0b2:	d009      	beq.n	800c0c8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	4a70      	ldr	r2, [pc, #448]	@ (800c27c <HAL_SPI_Init+0x240>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d004      	beq.n	800c0c8 <HAL_SPI_Init+0x8c>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	4a6f      	ldr	r2, [pc, #444]	@ (800c280 <HAL_SPI_Init+0x244>)
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d104      	bne.n	800c0d2 <HAL_SPI_Init+0x96>
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	2b10      	cmp	r3, #16
 800c0cc:	d901      	bls.n	800c0d2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	e0cd      	b.n	800c26e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c0d8:	b2db      	uxtb	r3, r3
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d106      	bne.n	800c0ec <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f7f8 f8d6 	bl	8004298 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2202      	movs	r2, #2
 800c0f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	681a      	ldr	r2, [r3, #0]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f022 0201 	bic.w	r2, r2, #1
 800c102:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	689b      	ldr	r3, [r3, #8]
 800c10a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800c10e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	699b      	ldr	r3, [r3, #24]
 800c114:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c118:	d119      	bne.n	800c14e <HAL_SPI_Init+0x112>
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	685b      	ldr	r3, [r3, #4]
 800c11e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c122:	d103      	bne.n	800c12c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d008      	beq.n	800c13e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c130:	2b00      	cmp	r3, #0
 800c132:	d10c      	bne.n	800c14e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c138:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c13c:	d107      	bne.n	800c14e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	681a      	ldr	r2, [r3, #0]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c14c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	685b      	ldr	r3, [r3, #4]
 800c152:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c156:	2b00      	cmp	r3, #0
 800c158:	d00f      	beq.n	800c17a <HAL_SPI_Init+0x13e>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	68db      	ldr	r3, [r3, #12]
 800c15e:	2b06      	cmp	r3, #6
 800c160:	d90b      	bls.n	800c17a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	430a      	orrs	r2, r1
 800c176:	601a      	str	r2, [r3, #0]
 800c178:	e007      	b.n	800c18a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	681a      	ldr	r2, [r3, #0]
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c188:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	69da      	ldr	r2, [r3, #28]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c192:	431a      	orrs	r2, r3
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	431a      	orrs	r2, r3
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c19c:	ea42 0103 	orr.w	r1, r2, r3
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	68da      	ldr	r2, [r3, #12]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	430a      	orrs	r2, r1
 800c1aa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1b4:	431a      	orrs	r2, r3
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1ba:	431a      	orrs	r2, r3
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	699b      	ldr	r3, [r3, #24]
 800c1c0:	431a      	orrs	r2, r3
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	691b      	ldr	r3, [r3, #16]
 800c1c6:	431a      	orrs	r2, r3
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	695b      	ldr	r3, [r3, #20]
 800c1cc:	431a      	orrs	r2, r3
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6a1b      	ldr	r3, [r3, #32]
 800c1d2:	431a      	orrs	r2, r3
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	685b      	ldr	r3, [r3, #4]
 800c1d8:	431a      	orrs	r2, r3
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1de:	431a      	orrs	r2, r3
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	689b      	ldr	r3, [r3, #8]
 800c1e4:	431a      	orrs	r2, r3
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c1ea:	ea42 0103 	orr.w	r1, r2, r3
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	430a      	orrs	r2, r1
 800c1f8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	685b      	ldr	r3, [r3, #4]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d113      	bne.n	800c22a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	689b      	ldr	r3, [r3, #8]
 800c208:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c214:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	689b      	ldr	r3, [r3, #8]
 800c21c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c228:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f022 0201 	bic.w	r2, r2, #1
 800c238:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	685b      	ldr	r3, [r3, #4]
 800c23e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c242:	2b00      	cmp	r3, #0
 800c244:	d00a      	beq.n	800c25c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	68db      	ldr	r3, [r3, #12]
 800c24c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	430a      	orrs	r2, r1
 800c25a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2200      	movs	r2, #0
 800c260:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2201      	movs	r2, #1
 800c268:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800c26c:	2300      	movs	r3, #0
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3710      	adds	r7, #16
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}
 800c276:	bf00      	nop
 800c278:	40013000 	.word	0x40013000
 800c27c:	40003800 	.word	0x40003800
 800c280:	40003c00 	.word	0x40003c00

0800c284 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b088      	sub	sp, #32
 800c288:	af02      	add	r7, sp, #8
 800c28a:	60f8      	str	r0, [r7, #12]
 800c28c:	60b9      	str	r1, [r7, #8]
 800c28e:	603b      	str	r3, [r7, #0]
 800c290:	4613      	mov	r3, r2
 800c292:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	3320      	adds	r3, #32
 800c29a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c29c:	f7f9 f9f2 	bl	8005684 <HAL_GetTick>
 800c2a0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c2a8:	b2db      	uxtb	r3, r3
 800c2aa:	2b01      	cmp	r3, #1
 800c2ac:	d001      	beq.n	800c2b2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800c2ae:	2302      	movs	r3, #2
 800c2b0:	e1d1      	b.n	800c656 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d002      	beq.n	800c2be <HAL_SPI_Transmit+0x3a>
 800c2b8:	88fb      	ldrh	r3, [r7, #6]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d101      	bne.n	800c2c2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800c2be:	2301      	movs	r3, #1
 800c2c0:	e1c9      	b.n	800c656 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c2c8:	2b01      	cmp	r3, #1
 800c2ca:	d101      	bne.n	800c2d0 <HAL_SPI_Transmit+0x4c>
 800c2cc:	2302      	movs	r3, #2
 800c2ce:	e1c2      	b.n	800c656 <HAL_SPI_Transmit+0x3d2>
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	2201      	movs	r2, #1
 800c2d4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	2203      	movs	r2, #3
 800c2dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	68ba      	ldr	r2, [r7, #8]
 800c2ec:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	88fa      	ldrh	r2, [r7, #6]
 800c2f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	88fa      	ldrh	r2, [r7, #6]
 800c2fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	2200      	movs	r2, #0
 800c302:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2200      	movs	r2, #0
 800c308:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	2200      	movs	r2, #0
 800c310:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2200      	movs	r2, #0
 800c318:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	2200      	movs	r2, #0
 800c31e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	689b      	ldr	r3, [r3, #8]
 800c324:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c328:	d108      	bne.n	800c33c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	681a      	ldr	r2, [r3, #0]
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c338:	601a      	str	r2, [r3, #0]
 800c33a:	e009      	b.n	800c350 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	68db      	ldr	r3, [r3, #12]
 800c342:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800c34e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	685a      	ldr	r2, [r3, #4]
 800c356:	4b96      	ldr	r3, [pc, #600]	@ (800c5b0 <HAL_SPI_Transmit+0x32c>)
 800c358:	4013      	ands	r3, r2
 800c35a:	88f9      	ldrh	r1, [r7, #6]
 800c35c:	68fa      	ldr	r2, [r7, #12]
 800c35e:	6812      	ldr	r2, [r2, #0]
 800c360:	430b      	orrs	r3, r1
 800c362:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	681a      	ldr	r2, [r3, #0]
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f042 0201 	orr.w	r2, r2, #1
 800c372:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	685b      	ldr	r3, [r3, #4]
 800c378:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c37c:	d107      	bne.n	800c38e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	681a      	ldr	r2, [r3, #0]
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c38c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	68db      	ldr	r3, [r3, #12]
 800c392:	2b0f      	cmp	r3, #15
 800c394:	d947      	bls.n	800c426 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c396:	e03f      	b.n	800c418 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	695b      	ldr	r3, [r3, #20]
 800c39e:	f003 0302 	and.w	r3, r3, #2
 800c3a2:	2b02      	cmp	r3, #2
 800c3a4:	d114      	bne.n	800c3d0 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	6812      	ldr	r2, [r2, #0]
 800c3b0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c3b6:	1d1a      	adds	r2, r3, #4
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c3c2:	b29b      	uxth	r3, r3
 800c3c4:	3b01      	subs	r3, #1
 800c3c6:	b29a      	uxth	r2, r3
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c3ce:	e023      	b.n	800c418 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c3d0:	f7f9 f958 	bl	8005684 <HAL_GetTick>
 800c3d4:	4602      	mov	r2, r0
 800c3d6:	693b      	ldr	r3, [r7, #16]
 800c3d8:	1ad3      	subs	r3, r2, r3
 800c3da:	683a      	ldr	r2, [r7, #0]
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d803      	bhi.n	800c3e8 <HAL_SPI_Transmit+0x164>
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3e6:	d102      	bne.n	800c3ee <HAL_SPI_Transmit+0x16a>
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d114      	bne.n	800c418 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c3ee:	68f8      	ldr	r0, [r7, #12]
 800c3f0:	f000 fee2 	bl	800d1b8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c3fa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	2201      	movs	r2, #1
 800c408:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	2200      	movs	r2, #0
 800c410:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c414:	2303      	movs	r3, #3
 800c416:	e11e      	b.n	800c656 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c41e:	b29b      	uxth	r3, r3
 800c420:	2b00      	cmp	r3, #0
 800c422:	d1b9      	bne.n	800c398 <HAL_SPI_Transmit+0x114>
 800c424:	e0f1      	b.n	800c60a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	68db      	ldr	r3, [r3, #12]
 800c42a:	2b07      	cmp	r3, #7
 800c42c:	f240 80e6 	bls.w	800c5fc <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c430:	e05d      	b.n	800c4ee <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	695b      	ldr	r3, [r3, #20]
 800c438:	f003 0302 	and.w	r3, r3, #2
 800c43c:	2b02      	cmp	r3, #2
 800c43e:	d132      	bne.n	800c4a6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c446:	b29b      	uxth	r3, r3
 800c448:	2b01      	cmp	r3, #1
 800c44a:	d918      	bls.n	800c47e <HAL_SPI_Transmit+0x1fa>
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c450:	2b00      	cmp	r3, #0
 800c452:	d014      	beq.n	800c47e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	6812      	ldr	r2, [r2, #0]
 800c45e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c464:	1d1a      	adds	r2, r3, #4
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c470:	b29b      	uxth	r3, r3
 800c472:	3b02      	subs	r3, #2
 800c474:	b29a      	uxth	r2, r3
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c47c:	e037      	b.n	800c4ee <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c482:	881a      	ldrh	r2, [r3, #0]
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c48c:	1c9a      	adds	r2, r3, #2
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c498:	b29b      	uxth	r3, r3
 800c49a:	3b01      	subs	r3, #1
 800c49c:	b29a      	uxth	r2, r3
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c4a4:	e023      	b.n	800c4ee <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c4a6:	f7f9 f8ed 	bl	8005684 <HAL_GetTick>
 800c4aa:	4602      	mov	r2, r0
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	1ad3      	subs	r3, r2, r3
 800c4b0:	683a      	ldr	r2, [r7, #0]
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	d803      	bhi.n	800c4be <HAL_SPI_Transmit+0x23a>
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4bc:	d102      	bne.n	800c4c4 <HAL_SPI_Transmit+0x240>
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d114      	bne.n	800c4ee <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c4c4:	68f8      	ldr	r0, [r7, #12]
 800c4c6:	f000 fe77 	bl	800d1b8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c4d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2201      	movs	r2, #1
 800c4de:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c4ea:	2303      	movs	r3, #3
 800c4ec:	e0b3      	b.n	800c656 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c4f4:	b29b      	uxth	r3, r3
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d19b      	bne.n	800c432 <HAL_SPI_Transmit+0x1ae>
 800c4fa:	e086      	b.n	800c60a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	695b      	ldr	r3, [r3, #20]
 800c502:	f003 0302 	and.w	r3, r3, #2
 800c506:	2b02      	cmp	r3, #2
 800c508:	d154      	bne.n	800c5b4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c510:	b29b      	uxth	r3, r3
 800c512:	2b03      	cmp	r3, #3
 800c514:	d918      	bls.n	800c548 <HAL_SPI_Transmit+0x2c4>
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c51a:	2b40      	cmp	r3, #64	@ 0x40
 800c51c:	d914      	bls.n	800c548 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	6812      	ldr	r2, [r2, #0]
 800c528:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c52e:	1d1a      	adds	r2, r3, #4
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c53a:	b29b      	uxth	r3, r3
 800c53c:	3b04      	subs	r3, #4
 800c53e:	b29a      	uxth	r2, r3
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c546:	e059      	b.n	800c5fc <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c54e:	b29b      	uxth	r3, r3
 800c550:	2b01      	cmp	r3, #1
 800c552:	d917      	bls.n	800c584 <HAL_SPI_Transmit+0x300>
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d013      	beq.n	800c584 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c560:	881a      	ldrh	r2, [r3, #0]
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c56a:	1c9a      	adds	r2, r3, #2
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c576:	b29b      	uxth	r3, r3
 800c578:	3b02      	subs	r3, #2
 800c57a:	b29a      	uxth	r2, r3
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c582:	e03b      	b.n	800c5fc <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	3320      	adds	r3, #32
 800c58e:	7812      	ldrb	r2, [r2, #0]
 800c590:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c596:	1c5a      	adds	r2, r3, #1
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c5a2:	b29b      	uxth	r3, r3
 800c5a4:	3b01      	subs	r3, #1
 800c5a6:	b29a      	uxth	r2, r3
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c5ae:	e025      	b.n	800c5fc <HAL_SPI_Transmit+0x378>
 800c5b0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c5b4:	f7f9 f866 	bl	8005684 <HAL_GetTick>
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	1ad3      	subs	r3, r2, r3
 800c5be:	683a      	ldr	r2, [r7, #0]
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	d803      	bhi.n	800c5cc <HAL_SPI_Transmit+0x348>
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5ca:	d102      	bne.n	800c5d2 <HAL_SPI_Transmit+0x34e>
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d114      	bne.n	800c5fc <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c5d2:	68f8      	ldr	r0, [r7, #12]
 800c5d4:	f000 fdf0 	bl	800d1b8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c5de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c5f8:	2303      	movs	r3, #3
 800c5fa:	e02c      	b.n	800c656 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c602:	b29b      	uxth	r3, r3
 800c604:	2b00      	cmp	r3, #0
 800c606:	f47f af79 	bne.w	800c4fc <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	9300      	str	r3, [sp, #0]
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	2200      	movs	r2, #0
 800c612:	2108      	movs	r1, #8
 800c614:	68f8      	ldr	r0, [r7, #12]
 800c616:	f000 fe6f 	bl	800d2f8 <SPI_WaitOnFlagUntilTimeout>
 800c61a:	4603      	mov	r3, r0
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d007      	beq.n	800c630 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c626:	f043 0220 	orr.w	r2, r3, #32
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c630:	68f8      	ldr	r0, [r7, #12]
 800c632:	f000 fdc1 	bl	800d1b8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	2201      	movs	r2, #1
 800c63a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	2200      	movs	r2, #0
 800c642:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d001      	beq.n	800c654 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800c650:	2301      	movs	r3, #1
 800c652:	e000      	b.n	800c656 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800c654:	2300      	movs	r3, #0
  }
}
 800c656:	4618      	mov	r0, r3
 800c658:	3718      	adds	r7, #24
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}
 800c65e:	bf00      	nop

0800c660 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b088      	sub	sp, #32
 800c664:	af00      	add	r7, sp, #0
 800c666:	60f8      	str	r0, [r7, #12]
 800c668:	60b9      	str	r1, [r7, #8]
 800c66a:	603b      	str	r3, [r7, #0]
 800c66c:	4613      	mov	r3, r2
 800c66e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c674:	095b      	lsrs	r3, r3, #5
 800c676:	b29b      	uxth	r3, r3
 800c678:	3301      	adds	r3, #1
 800c67a:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	3330      	adds	r3, #48	@ 0x30
 800c682:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c684:	f7f8 fffe 	bl	8005684 <HAL_GetTick>
 800c688:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c690:	b2db      	uxtb	r3, r3
 800c692:	2b01      	cmp	r3, #1
 800c694:	d001      	beq.n	800c69a <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800c696:	2302      	movs	r3, #2
 800c698:	e250      	b.n	800cb3c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d002      	beq.n	800c6a6 <HAL_SPI_Receive+0x46>
 800c6a0:	88fb      	ldrh	r3, [r7, #6]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d101      	bne.n	800c6aa <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	e248      	b.n	800cb3c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c6b0:	2b01      	cmp	r3, #1
 800c6b2:	d101      	bne.n	800c6b8 <HAL_SPI_Receive+0x58>
 800c6b4:	2302      	movs	r3, #2
 800c6b6:	e241      	b.n	800cb3c <HAL_SPI_Receive+0x4dc>
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	2204      	movs	r2, #4
 800c6c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	68ba      	ldr	r2, [r7, #8]
 800c6d4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	88fa      	ldrh	r2, [r7, #6]
 800c6da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	88fa      	ldrh	r2, [r7, #6]
 800c6e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	2200      	movs	r2, #0
 800c700:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	2200      	movs	r2, #0
 800c706:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	689b      	ldr	r3, [r3, #8]
 800c70c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c710:	d108      	bne.n	800c724 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	681a      	ldr	r2, [r3, #0]
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c720:	601a      	str	r2, [r3, #0]
 800c722:	e009      	b.n	800c738 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	68db      	ldr	r3, [r3, #12]
 800c72a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800c736:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	685a      	ldr	r2, [r3, #4]
 800c73e:	4b95      	ldr	r3, [pc, #596]	@ (800c994 <HAL_SPI_Receive+0x334>)
 800c740:	4013      	ands	r3, r2
 800c742:	88f9      	ldrh	r1, [r7, #6]
 800c744:	68fa      	ldr	r2, [r7, #12]
 800c746:	6812      	ldr	r2, [r2, #0]
 800c748:	430b      	orrs	r3, r1
 800c74a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	681a      	ldr	r2, [r3, #0]
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f042 0201 	orr.w	r2, r2, #1
 800c75a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	685b      	ldr	r3, [r3, #4]
 800c760:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c764:	d107      	bne.n	800c776 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	681a      	ldr	r2, [r3, #0]
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c774:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	68db      	ldr	r3, [r3, #12]
 800c77a:	2b0f      	cmp	r3, #15
 800c77c:	d96c      	bls.n	800c858 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c77e:	e064      	b.n	800c84a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	695b      	ldr	r3, [r3, #20]
 800c786:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	695b      	ldr	r3, [r3, #20]
 800c78e:	f003 0301 	and.w	r3, r3, #1
 800c792:	2b01      	cmp	r3, #1
 800c794:	d114      	bne.n	800c7c0 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681a      	ldr	r2, [r3, #0]
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c79e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c7a0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7a6:	1d1a      	adds	r2, r3, #4
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c7b2:	b29b      	uxth	r3, r3
 800c7b4:	3b01      	subs	r3, #1
 800c7b6:	b29a      	uxth	r2, r3
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c7be:	e044      	b.n	800c84a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c7c6:	b29b      	uxth	r3, r3
 800c7c8:	8bfa      	ldrh	r2, [r7, #30]
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d919      	bls.n	800c802 <HAL_SPI_Receive+0x1a2>
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d014      	beq.n	800c802 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	681a      	ldr	r2, [r3, #0]
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c7e2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7e8:	1d1a      	adds	r2, r3, #4
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c7f4:	b29b      	uxth	r3, r3
 800c7f6:	3b01      	subs	r3, #1
 800c7f8:	b29a      	uxth	r2, r3
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c800:	e023      	b.n	800c84a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c802:	f7f8 ff3f 	bl	8005684 <HAL_GetTick>
 800c806:	4602      	mov	r2, r0
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	1ad3      	subs	r3, r2, r3
 800c80c:	683a      	ldr	r2, [r7, #0]
 800c80e:	429a      	cmp	r2, r3
 800c810:	d803      	bhi.n	800c81a <HAL_SPI_Receive+0x1ba>
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c818:	d102      	bne.n	800c820 <HAL_SPI_Receive+0x1c0>
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d114      	bne.n	800c84a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c820:	68f8      	ldr	r0, [r7, #12]
 800c822:	f000 fcc9 	bl	800d1b8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c82c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	2201      	movs	r2, #1
 800c83a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	2200      	movs	r2, #0
 800c842:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c846:	2303      	movs	r3, #3
 800c848:	e178      	b.n	800cb3c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c850:	b29b      	uxth	r3, r3
 800c852:	2b00      	cmp	r3, #0
 800c854:	d194      	bne.n	800c780 <HAL_SPI_Receive+0x120>
 800c856:	e15e      	b.n	800cb16 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	68db      	ldr	r3, [r3, #12]
 800c85c:	2b07      	cmp	r3, #7
 800c85e:	f240 8153 	bls.w	800cb08 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c862:	e08f      	b.n	800c984 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	695b      	ldr	r3, [r3, #20]
 800c86a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	695b      	ldr	r3, [r3, #20]
 800c872:	f003 0301 	and.w	r3, r3, #1
 800c876:	2b01      	cmp	r3, #1
 800c878:	d114      	bne.n	800c8a4 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c87e:	69ba      	ldr	r2, [r7, #24]
 800c880:	8812      	ldrh	r2, [r2, #0]
 800c882:	b292      	uxth	r2, r2
 800c884:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c88a:	1c9a      	adds	r2, r3, #2
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c896:	b29b      	uxth	r3, r3
 800c898:	3b01      	subs	r3, #1
 800c89a:	b29a      	uxth	r2, r3
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c8a2:	e06f      	b.n	800c984 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c8aa:	b29b      	uxth	r3, r3
 800c8ac:	8bfa      	ldrh	r2, [r7, #30]
 800c8ae:	429a      	cmp	r2, r3
 800c8b0:	d924      	bls.n	800c8fc <HAL_SPI_Receive+0x29c>
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d01f      	beq.n	800c8fc <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8c0:	69ba      	ldr	r2, [r7, #24]
 800c8c2:	8812      	ldrh	r2, [r2, #0]
 800c8c4:	b292      	uxth	r2, r2
 800c8c6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8cc:	1c9a      	adds	r2, r3, #2
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8d6:	69ba      	ldr	r2, [r7, #24]
 800c8d8:	8812      	ldrh	r2, [r2, #0]
 800c8da:	b292      	uxth	r2, r2
 800c8dc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8e2:	1c9a      	adds	r2, r3, #2
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c8ee:	b29b      	uxth	r3, r3
 800c8f0:	3b02      	subs	r3, #2
 800c8f2:	b29a      	uxth	r2, r3
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c8fa:	e043      	b.n	800c984 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c902:	b29b      	uxth	r3, r3
 800c904:	2b01      	cmp	r3, #1
 800c906:	d119      	bne.n	800c93c <HAL_SPI_Receive+0x2dc>
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d014      	beq.n	800c93c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c916:	69ba      	ldr	r2, [r7, #24]
 800c918:	8812      	ldrh	r2, [r2, #0]
 800c91a:	b292      	uxth	r2, r2
 800c91c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c922:	1c9a      	adds	r2, r3, #2
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c92e:	b29b      	uxth	r3, r3
 800c930:	3b01      	subs	r3, #1
 800c932:	b29a      	uxth	r2, r3
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c93a:	e023      	b.n	800c984 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c93c:	f7f8 fea2 	bl	8005684 <HAL_GetTick>
 800c940:	4602      	mov	r2, r0
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	1ad3      	subs	r3, r2, r3
 800c946:	683a      	ldr	r2, [r7, #0]
 800c948:	429a      	cmp	r2, r3
 800c94a:	d803      	bhi.n	800c954 <HAL_SPI_Receive+0x2f4>
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c952:	d102      	bne.n	800c95a <HAL_SPI_Receive+0x2fa>
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d114      	bne.n	800c984 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c95a:	68f8      	ldr	r0, [r7, #12]
 800c95c:	f000 fc2c 	bl	800d1b8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c966:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	2201      	movs	r2, #1
 800c974:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	2200      	movs	r2, #0
 800c97c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c980:	2303      	movs	r3, #3
 800c982:	e0db      	b.n	800cb3c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c98a:	b29b      	uxth	r3, r3
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	f47f af69 	bne.w	800c864 <HAL_SPI_Receive+0x204>
 800c992:	e0c0      	b.n	800cb16 <HAL_SPI_Receive+0x4b6>
 800c994:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	695b      	ldr	r3, [r3, #20]
 800c99e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	695b      	ldr	r3, [r3, #20]
 800c9a6:	f003 0301 	and.w	r3, r3, #1
 800c9aa:	2b01      	cmp	r3, #1
 800c9ac:	d117      	bne.n	800c9de <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c9ba:	7812      	ldrb	r2, [r2, #0]
 800c9bc:	b2d2      	uxtb	r2, r2
 800c9be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c9c4:	1c5a      	adds	r2, r3, #1
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c9d0:	b29b      	uxth	r3, r3
 800c9d2:	3b01      	subs	r3, #1
 800c9d4:	b29a      	uxth	r2, r3
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c9dc:	e094      	b.n	800cb08 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c9e4:	b29b      	uxth	r3, r3
 800c9e6:	8bfa      	ldrh	r2, [r7, #30]
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d946      	bls.n	800ca7a <HAL_SPI_Receive+0x41a>
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d041      	beq.n	800ca7a <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca02:	7812      	ldrb	r2, [r2, #0]
 800ca04:	b2d2      	uxtb	r2, r2
 800ca06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca0c:	1c5a      	adds	r2, r3, #1
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca1e:	7812      	ldrb	r2, [r2, #0]
 800ca20:	b2d2      	uxtb	r2, r2
 800ca22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca28:	1c5a      	adds	r2, r3, #1
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca3a:	7812      	ldrb	r2, [r2, #0]
 800ca3c:	b2d2      	uxtb	r2, r2
 800ca3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca44:	1c5a      	adds	r2, r3, #1
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca56:	7812      	ldrb	r2, [r2, #0]
 800ca58:	b2d2      	uxtb	r2, r2
 800ca5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca60:	1c5a      	adds	r2, r3, #1
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ca6c:	b29b      	uxth	r3, r3
 800ca6e:	3b04      	subs	r3, #4
 800ca70:	b29a      	uxth	r2, r3
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ca78:	e046      	b.n	800cb08 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ca80:	b29b      	uxth	r3, r3
 800ca82:	2b03      	cmp	r3, #3
 800ca84:	d81c      	bhi.n	800cac0 <HAL_SPI_Receive+0x460>
 800ca86:	693b      	ldr	r3, [r7, #16]
 800ca88:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d017      	beq.n	800cac0 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca9c:	7812      	ldrb	r2, [r2, #0]
 800ca9e:	b2d2      	uxtb	r2, r2
 800caa0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800caa6:	1c5a      	adds	r2, r3, #1
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cab2:	b29b      	uxth	r3, r3
 800cab4:	3b01      	subs	r3, #1
 800cab6:	b29a      	uxth	r2, r3
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cabe:	e023      	b.n	800cb08 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cac0:	f7f8 fde0 	bl	8005684 <HAL_GetTick>
 800cac4:	4602      	mov	r2, r0
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	1ad3      	subs	r3, r2, r3
 800caca:	683a      	ldr	r2, [r7, #0]
 800cacc:	429a      	cmp	r2, r3
 800cace:	d803      	bhi.n	800cad8 <HAL_SPI_Receive+0x478>
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cad6:	d102      	bne.n	800cade <HAL_SPI_Receive+0x47e>
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d114      	bne.n	800cb08 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cade:	68f8      	ldr	r0, [r7, #12]
 800cae0:	f000 fb6a 	bl	800d1b8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800caea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	2201      	movs	r2, #1
 800caf8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	2200      	movs	r2, #0
 800cb00:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800cb04:	2303      	movs	r3, #3
 800cb06:	e019      	b.n	800cb3c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cb0e:	b29b      	uxth	r3, r3
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	f47f af41 	bne.w	800c998 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800cb16:	68f8      	ldr	r0, [r7, #12]
 800cb18:	f000 fb4e 	bl	800d1b8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2201      	movs	r2, #1
 800cb20:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2200      	movs	r2, #0
 800cb28:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d001      	beq.n	800cb3a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800cb36:	2301      	movs	r3, #1
 800cb38:	e000      	b.n	800cb3c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800cb3a:	2300      	movs	r3, #0
  }
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3720      	adds	r7, #32
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}

0800cb44 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b08e      	sub	sp, #56	@ 0x38
 800cb48:	af02      	add	r7, sp, #8
 800cb4a:	60f8      	str	r0, [r7, #12]
 800cb4c:	60b9      	str	r1, [r7, #8]
 800cb4e:	607a      	str	r2, [r7, #4]
 800cb50:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	3320      	adds	r3, #32
 800cb58:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	3330      	adds	r3, #48	@ 0x30
 800cb60:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb66:	095b      	lsrs	r3, r3, #5
 800cb68:	b29b      	uxth	r3, r3
 800cb6a:	3301      	adds	r3, #1
 800cb6c:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cb6e:	f7f8 fd89 	bl	8005684 <HAL_GetTick>
 800cb72:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800cb74:	887b      	ldrh	r3, [r7, #2]
 800cb76:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800cb78:	887b      	ldrh	r3, [r7, #2]
 800cb7a:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cb82:	b2db      	uxtb	r3, r3
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	d001      	beq.n	800cb8c <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800cb88:	2302      	movs	r3, #2
 800cb8a:	e310      	b.n	800d1ae <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d005      	beq.n	800cb9e <HAL_SPI_TransmitReceive+0x5a>
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d002      	beq.n	800cb9e <HAL_SPI_TransmitReceive+0x5a>
 800cb98:	887b      	ldrh	r3, [r7, #2]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d101      	bne.n	800cba2 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800cb9e:	2301      	movs	r3, #1
 800cba0:	e305      	b.n	800d1ae <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800cba8:	2b01      	cmp	r3, #1
 800cbaa:	d101      	bne.n	800cbb0 <HAL_SPI_TransmitReceive+0x6c>
 800cbac:	2302      	movs	r3, #2
 800cbae:	e2fe      	b.n	800d1ae <HAL_SPI_TransmitReceive+0x66a>
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	2201      	movs	r2, #1
 800cbb4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	2205      	movs	r2, #5
 800cbbc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	687a      	ldr	r2, [r7, #4]
 800cbcc:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	887a      	ldrh	r2, [r7, #2]
 800cbd2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	887a      	ldrh	r2, [r7, #2]
 800cbda:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	68ba      	ldr	r2, [r7, #8]
 800cbe2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	887a      	ldrh	r2, [r7, #2]
 800cbe8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	887a      	ldrh	r2, [r7, #2]
 800cbf0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	68da      	ldr	r2, [r3, #12]
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800cc0e:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	4a70      	ldr	r2, [pc, #448]	@ (800cdd8 <HAL_SPI_TransmitReceive+0x294>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d009      	beq.n	800cc2e <HAL_SPI_TransmitReceive+0xea>
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	4a6f      	ldr	r2, [pc, #444]	@ (800cddc <HAL_SPI_TransmitReceive+0x298>)
 800cc20:	4293      	cmp	r3, r2
 800cc22:	d004      	beq.n	800cc2e <HAL_SPI_TransmitReceive+0xea>
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4a6d      	ldr	r2, [pc, #436]	@ (800cde0 <HAL_SPI_TransmitReceive+0x29c>)
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d102      	bne.n	800cc34 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800cc2e:	2310      	movs	r3, #16
 800cc30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cc32:	e001      	b.n	800cc38 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800cc34:	2308      	movs	r3, #8
 800cc36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	685a      	ldr	r2, [r3, #4]
 800cc3e:	4b69      	ldr	r3, [pc, #420]	@ (800cde4 <HAL_SPI_TransmitReceive+0x2a0>)
 800cc40:	4013      	ands	r3, r2
 800cc42:	8879      	ldrh	r1, [r7, #2]
 800cc44:	68fa      	ldr	r2, [r7, #12]
 800cc46:	6812      	ldr	r2, [r2, #0]
 800cc48:	430b      	orrs	r3, r1
 800cc4a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	681a      	ldr	r2, [r3, #0]
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f042 0201 	orr.w	r2, r2, #1
 800cc5a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	685b      	ldr	r3, [r3, #4]
 800cc60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cc64:	d107      	bne.n	800cc76 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	681a      	ldr	r2, [r3, #0]
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cc74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	68db      	ldr	r3, [r3, #12]
 800cc7a:	2b0f      	cmp	r3, #15
 800cc7c:	f240 80a2 	bls.w	800cdc4 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800cc80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc82:	089b      	lsrs	r3, r3, #2
 800cc84:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cc86:	e094      	b.n	800cdb2 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	695b      	ldr	r3, [r3, #20]
 800cc8e:	f003 0302 	and.w	r3, r3, #2
 800cc92:	2b02      	cmp	r3, #2
 800cc94:	d120      	bne.n	800ccd8 <HAL_SPI_TransmitReceive+0x194>
 800cc96:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d01d      	beq.n	800ccd8 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800cc9c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800cc9e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800cca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cca2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d217      	bcs.n	800ccd8 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	6812      	ldr	r2, [r2, #0]
 800ccb2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ccb8:	1d1a      	adds	r2, r3, #4
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ccc4:	b29b      	uxth	r3, r3
 800ccc6:	3b01      	subs	r3, #1
 800ccc8:	b29a      	uxth	r2, r3
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ccd6:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	695b      	ldr	r3, [r3, #20]
 800ccde:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800cce0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d065      	beq.n	800cdb2 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	695b      	ldr	r3, [r3, #20]
 800ccec:	f003 0301 	and.w	r3, r3, #1
 800ccf0:	2b01      	cmp	r3, #1
 800ccf2:	d118      	bne.n	800cd26 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	681a      	ldr	r2, [r3, #0]
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ccfc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ccfe:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd04:	1d1a      	adds	r2, r3, #4
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cd10:	b29b      	uxth	r3, r3
 800cd12:	3b01      	subs	r3, #1
 800cd14:	b29a      	uxth	r2, r3
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cd22:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cd24:	e045      	b.n	800cdb2 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800cd26:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800cd28:	8bfb      	ldrh	r3, [r7, #30]
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	d21d      	bcs.n	800cd6a <HAL_SPI_TransmitReceive+0x226>
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d018      	beq.n	800cd6a <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	681a      	ldr	r2, [r3, #0]
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd40:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800cd42:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd48:	1d1a      	adds	r2, r3, #4
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cd54:	b29b      	uxth	r3, r3
 800cd56:	3b01      	subs	r3, #1
 800cd58:	b29a      	uxth	r2, r3
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cd66:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cd68:	e023      	b.n	800cdb2 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cd6a:	f7f8 fc8b 	bl	8005684 <HAL_GetTick>
 800cd6e:	4602      	mov	r2, r0
 800cd70:	69bb      	ldr	r3, [r7, #24]
 800cd72:	1ad3      	subs	r3, r2, r3
 800cd74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cd76:	429a      	cmp	r2, r3
 800cd78:	d803      	bhi.n	800cd82 <HAL_SPI_TransmitReceive+0x23e>
 800cd7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd80:	d102      	bne.n	800cd88 <HAL_SPI_TransmitReceive+0x244>
 800cd82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d114      	bne.n	800cdb2 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800cd88:	68f8      	ldr	r0, [r7, #12]
 800cd8a:	f000 fa15 	bl	800d1b8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cd94:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	2201      	movs	r2, #1
 800cda2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	2200      	movs	r2, #0
 800cdaa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800cdae:	2303      	movs	r3, #3
 800cdb0:	e1fd      	b.n	800d1ae <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cdb2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	f47f af67 	bne.w	800cc88 <HAL_SPI_TransmitReceive+0x144>
 800cdba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	f47f af63 	bne.w	800cc88 <HAL_SPI_TransmitReceive+0x144>
 800cdc2:	e1ce      	b.n	800d162 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	68db      	ldr	r3, [r3, #12]
 800cdc8:	2b07      	cmp	r3, #7
 800cdca:	f240 81c2 	bls.w	800d152 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800cdce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdd0:	085b      	lsrs	r3, r3, #1
 800cdd2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cdd4:	e0c9      	b.n	800cf6a <HAL_SPI_TransmitReceive+0x426>
 800cdd6:	bf00      	nop
 800cdd8:	40013000 	.word	0x40013000
 800cddc:	40003800 	.word	0x40003800
 800cde0:	40003c00 	.word	0x40003c00
 800cde4:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	695b      	ldr	r3, [r3, #20]
 800cdee:	f003 0302 	and.w	r3, r3, #2
 800cdf2:	2b02      	cmp	r3, #2
 800cdf4:	d11f      	bne.n	800ce36 <HAL_SPI_TransmitReceive+0x2f2>
 800cdf6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d01c      	beq.n	800ce36 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800cdfc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800cdfe:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800ce00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce02:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d216      	bcs.n	800ce36 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce0c:	881a      	ldrh	r2, [r3, #0]
 800ce0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce10:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce16:	1c9a      	adds	r2, r3, #2
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ce22:	b29b      	uxth	r3, r3
 800ce24:	3b01      	subs	r3, #1
 800ce26:	b29a      	uxth	r2, r3
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ce34:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	695b      	ldr	r3, [r3, #20]
 800ce3c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800ce3e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	f000 8092 	beq.w	800cf6a <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	695b      	ldr	r3, [r3, #20]
 800ce4c:	f003 0301 	and.w	r3, r3, #1
 800ce50:	2b01      	cmp	r3, #1
 800ce52:	d118      	bne.n	800ce86 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce58:	6a3a      	ldr	r2, [r7, #32]
 800ce5a:	8812      	ldrh	r2, [r2, #0]
 800ce5c:	b292      	uxth	r2, r2
 800ce5e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce64:	1c9a      	adds	r2, r3, #2
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ce70:	b29b      	uxth	r3, r3
 800ce72:	3b01      	subs	r3, #1
 800ce74:	b29a      	uxth	r2, r3
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ce82:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ce84:	e071      	b.n	800cf6a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ce86:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ce88:	8bfb      	ldrh	r3, [r7, #30]
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d228      	bcs.n	800cee0 <HAL_SPI_TransmitReceive+0x39c>
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d023      	beq.n	800cee0 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce9c:	6a3a      	ldr	r2, [r7, #32]
 800ce9e:	8812      	ldrh	r2, [r2, #0]
 800cea0:	b292      	uxth	r2, r2
 800cea2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cea8:	1c9a      	adds	r2, r3, #2
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ceb2:	6a3a      	ldr	r2, [r7, #32]
 800ceb4:	8812      	ldrh	r2, [r2, #0]
 800ceb6:	b292      	uxth	r2, r2
 800ceb8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cebe:	1c9a      	adds	r2, r3, #2
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ceca:	b29b      	uxth	r3, r3
 800cecc:	3b02      	subs	r3, #2
 800cece:	b29a      	uxth	r2, r3
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cedc:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cede:	e044      	b.n	800cf6a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800cee0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cee2:	2b01      	cmp	r3, #1
 800cee4:	d11d      	bne.n	800cf22 <HAL_SPI_TransmitReceive+0x3de>
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d018      	beq.n	800cf22 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cef4:	6a3a      	ldr	r2, [r7, #32]
 800cef6:	8812      	ldrh	r2, [r2, #0]
 800cef8:	b292      	uxth	r2, r2
 800cefa:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf00:	1c9a      	adds	r2, r3, #2
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cf0c:	b29b      	uxth	r3, r3
 800cf0e:	3b01      	subs	r3, #1
 800cf10:	b29a      	uxth	r2, r3
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cf1e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cf20:	e023      	b.n	800cf6a <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cf22:	f7f8 fbaf 	bl	8005684 <HAL_GetTick>
 800cf26:	4602      	mov	r2, r0
 800cf28:	69bb      	ldr	r3, [r7, #24]
 800cf2a:	1ad3      	subs	r3, r2, r3
 800cf2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	d803      	bhi.n	800cf3a <HAL_SPI_TransmitReceive+0x3f6>
 800cf32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf38:	d102      	bne.n	800cf40 <HAL_SPI_TransmitReceive+0x3fc>
 800cf3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d114      	bne.n	800cf6a <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800cf40:	68f8      	ldr	r0, [r7, #12]
 800cf42:	f000 f939 	bl	800d1b8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cf4c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	2201      	movs	r2, #1
 800cf5a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	2200      	movs	r2, #0
 800cf62:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800cf66:	2303      	movs	r3, #3
 800cf68:	e121      	b.n	800d1ae <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cf6a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	f47f af3b 	bne.w	800cde8 <HAL_SPI_TransmitReceive+0x2a4>
 800cf72:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	f47f af37 	bne.w	800cde8 <HAL_SPI_TransmitReceive+0x2a4>
 800cf7a:	e0f2      	b.n	800d162 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	695b      	ldr	r3, [r3, #20]
 800cf82:	f003 0302 	and.w	r3, r3, #2
 800cf86:	2b02      	cmp	r3, #2
 800cf88:	d121      	bne.n	800cfce <HAL_SPI_TransmitReceive+0x48a>
 800cf8a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d01e      	beq.n	800cfce <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800cf90:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800cf92:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800cf94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf96:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	d218      	bcs.n	800cfce <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	3320      	adds	r3, #32
 800cfa6:	7812      	ldrb	r2, [r2, #0]
 800cfa8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cfae:	1c5a      	adds	r2, r3, #1
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cfba:	b29b      	uxth	r3, r3
 800cfbc:	3b01      	subs	r3, #1
 800cfbe:	b29a      	uxth	r2, r3
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cfcc:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	695b      	ldr	r3, [r3, #20]
 800cfd4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800cfd6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	f000 80ba 	beq.w	800d152 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	695b      	ldr	r3, [r3, #20]
 800cfe4:	f003 0301 	and.w	r3, r3, #1
 800cfe8:	2b01      	cmp	r3, #1
 800cfea:	d11b      	bne.n	800d024 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cff8:	7812      	ldrb	r2, [r2, #0]
 800cffa:	b2d2      	uxtb	r2, r2
 800cffc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d002:	1c5a      	adds	r2, r3, #1
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d00e:	b29b      	uxth	r3, r3
 800d010:	3b01      	subs	r3, #1
 800d012:	b29a      	uxth	r2, r3
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d020:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d022:	e096      	b.n	800d152 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800d024:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d026:	8bfb      	ldrh	r3, [r7, #30]
 800d028:	429a      	cmp	r2, r3
 800d02a:	d24a      	bcs.n	800d0c2 <HAL_SPI_TransmitReceive+0x57e>
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d032:	2b00      	cmp	r3, #0
 800d034:	d045      	beq.n	800d0c2 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d042:	7812      	ldrb	r2, [r2, #0]
 800d044:	b2d2      	uxtb	r2, r2
 800d046:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d04c:	1c5a      	adds	r2, r3, #1
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d05e:	7812      	ldrb	r2, [r2, #0]
 800d060:	b2d2      	uxtb	r2, r2
 800d062:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d068:	1c5a      	adds	r2, r3, #1
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d07a:	7812      	ldrb	r2, [r2, #0]
 800d07c:	b2d2      	uxtb	r2, r2
 800d07e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d084:	1c5a      	adds	r2, r3, #1
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d096:	7812      	ldrb	r2, [r2, #0]
 800d098:	b2d2      	uxtb	r2, r2
 800d09a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0a0:	1c5a      	adds	r2, r3, #1
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d0ac:	b29b      	uxth	r3, r3
 800d0ae:	3b04      	subs	r3, #4
 800d0b0:	b29a      	uxth	r2, r3
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d0be:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d0c0:	e047      	b.n	800d152 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800d0c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d0c4:	2b03      	cmp	r3, #3
 800d0c6:	d820      	bhi.n	800d10a <HAL_SPI_TransmitReceive+0x5c6>
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d01b      	beq.n	800d10a <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0de:	7812      	ldrb	r2, [r2, #0]
 800d0e0:	b2d2      	uxtb	r2, r2
 800d0e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0e8:	1c5a      	adds	r2, r3, #1
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d0f4:	b29b      	uxth	r3, r3
 800d0f6:	3b01      	subs	r3, #1
 800d0f8:	b29a      	uxth	r2, r3
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d106:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d108:	e023      	b.n	800d152 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d10a:	f7f8 fabb 	bl	8005684 <HAL_GetTick>
 800d10e:	4602      	mov	r2, r0
 800d110:	69bb      	ldr	r3, [r7, #24]
 800d112:	1ad3      	subs	r3, r2, r3
 800d114:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d116:	429a      	cmp	r2, r3
 800d118:	d803      	bhi.n	800d122 <HAL_SPI_TransmitReceive+0x5de>
 800d11a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d11c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d120:	d102      	bne.n	800d128 <HAL_SPI_TransmitReceive+0x5e4>
 800d122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d124:	2b00      	cmp	r3, #0
 800d126:	d114      	bne.n	800d152 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800d128:	68f8      	ldr	r0, [r7, #12]
 800d12a:	f000 f845 	bl	800d1b8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d134:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	2201      	movs	r2, #1
 800d142:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	2200      	movs	r2, #0
 800d14a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800d14e:	2303      	movs	r3, #3
 800d150:	e02d      	b.n	800d1ae <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d152:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d154:	2b00      	cmp	r3, #0
 800d156:	f47f af11 	bne.w	800cf7c <HAL_SPI_TransmitReceive+0x438>
 800d15a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	f47f af0d 	bne.w	800cf7c <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800d162:	69bb      	ldr	r3, [r7, #24]
 800d164:	9300      	str	r3, [sp, #0]
 800d166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d168:	2200      	movs	r2, #0
 800d16a:	2108      	movs	r1, #8
 800d16c:	68f8      	ldr	r0, [r7, #12]
 800d16e:	f000 f8c3 	bl	800d2f8 <SPI_WaitOnFlagUntilTimeout>
 800d172:	4603      	mov	r3, r0
 800d174:	2b00      	cmp	r3, #0
 800d176:	d007      	beq.n	800d188 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d17e:	f043 0220 	orr.w	r2, r3, #32
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d188:	68f8      	ldr	r0, [r7, #12]
 800d18a:	f000 f815 	bl	800d1b8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	2201      	movs	r2, #1
 800d192:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	2200      	movs	r2, #0
 800d19a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d001      	beq.n	800d1ac <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	e000      	b.n	800d1ae <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800d1ac:	2300      	movs	r3, #0
  }
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	3730      	adds	r7, #48	@ 0x30
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}
 800d1b6:	bf00      	nop

0800d1b8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b085      	sub	sp, #20
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	695b      	ldr	r3, [r3, #20]
 800d1c6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	699a      	ldr	r2, [r3, #24]
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	f042 0208 	orr.w	r2, r2, #8
 800d1d6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	699a      	ldr	r2, [r3, #24]
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	f042 0210 	orr.w	r2, r2, #16
 800d1e6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	681a      	ldr	r2, [r3, #0]
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	f022 0201 	bic.w	r2, r2, #1
 800d1f6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	6919      	ldr	r1, [r3, #16]
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681a      	ldr	r2, [r3, #0]
 800d202:	4b3c      	ldr	r3, [pc, #240]	@ (800d2f4 <SPI_CloseTransfer+0x13c>)
 800d204:	400b      	ands	r3, r1
 800d206:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	689a      	ldr	r2, [r3, #8]
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800d216:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d21e:	b2db      	uxtb	r3, r3
 800d220:	2b04      	cmp	r3, #4
 800d222:	d014      	beq.n	800d24e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	f003 0320 	and.w	r3, r3, #32
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d00f      	beq.n	800d24e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d234:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	699a      	ldr	r2, [r3, #24]
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f042 0220 	orr.w	r2, r2, #32
 800d24c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d254:	b2db      	uxtb	r3, r3
 800d256:	2b03      	cmp	r3, #3
 800d258:	d014      	beq.n	800d284 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d260:	2b00      	cmp	r3, #0
 800d262:	d00f      	beq.n	800d284 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d26a:	f043 0204 	orr.w	r2, r3, #4
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	699a      	ldr	r2, [r3, #24]
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d282:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d00f      	beq.n	800d2ae <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d294:	f043 0201 	orr.w	r2, r3, #1
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	699a      	ldr	r2, [r3, #24]
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d2ac:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d00f      	beq.n	800d2d8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d2be:	f043 0208 	orr.w	r2, r3, #8
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	699a      	ldr	r2, [r3, #24]
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d2d6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800d2e8:	bf00      	nop
 800d2ea:	3714      	adds	r7, #20
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f2:	4770      	bx	lr
 800d2f4:	fffffc90 	.word	0xfffffc90

0800d2f8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b084      	sub	sp, #16
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	60f8      	str	r0, [r7, #12]
 800d300:	60b9      	str	r1, [r7, #8]
 800d302:	603b      	str	r3, [r7, #0]
 800d304:	4613      	mov	r3, r2
 800d306:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d308:	e010      	b.n	800d32c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d30a:	f7f8 f9bb 	bl	8005684 <HAL_GetTick>
 800d30e:	4602      	mov	r2, r0
 800d310:	69bb      	ldr	r3, [r7, #24]
 800d312:	1ad3      	subs	r3, r2, r3
 800d314:	683a      	ldr	r2, [r7, #0]
 800d316:	429a      	cmp	r2, r3
 800d318:	d803      	bhi.n	800d322 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d320:	d102      	bne.n	800d328 <SPI_WaitOnFlagUntilTimeout+0x30>
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d101      	bne.n	800d32c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d328:	2303      	movs	r3, #3
 800d32a:	e00f      	b.n	800d34c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	695a      	ldr	r2, [r3, #20]
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	4013      	ands	r3, r2
 800d336:	68ba      	ldr	r2, [r7, #8]
 800d338:	429a      	cmp	r2, r3
 800d33a:	bf0c      	ite	eq
 800d33c:	2301      	moveq	r3, #1
 800d33e:	2300      	movne	r3, #0
 800d340:	b2db      	uxtb	r3, r3
 800d342:	461a      	mov	r2, r3
 800d344:	79fb      	ldrb	r3, [r7, #7]
 800d346:	429a      	cmp	r2, r3
 800d348:	d0df      	beq.n	800d30a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d34a:	2300      	movs	r3, #0
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3710      	adds	r7, #16
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}

0800d354 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800d354:	b480      	push	{r7}
 800d356:	b085      	sub	sp, #20
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d360:	095b      	lsrs	r3, r3, #5
 800d362:	3301      	adds	r3, #1
 800d364:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	68db      	ldr	r3, [r3, #12]
 800d36a:	3301      	adds	r3, #1
 800d36c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	3307      	adds	r3, #7
 800d372:	08db      	lsrs	r3, r3, #3
 800d374:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	68fa      	ldr	r2, [r7, #12]
 800d37a:	fb02 f303 	mul.w	r3, r2, r3
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3714      	adds	r7, #20
 800d382:	46bd      	mov	sp, r7
 800d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d388:	4770      	bx	lr

0800d38a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d38a:	b580      	push	{r7, lr}
 800d38c:	b082      	sub	sp, #8
 800d38e:	af00      	add	r7, sp, #0
 800d390:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d101      	bne.n	800d39c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d398:	2301      	movs	r3, #1
 800d39a:	e049      	b.n	800d430 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d3a2:	b2db      	uxtb	r3, r3
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d106      	bne.n	800d3b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f7f7 fc5b 	bl	8004c6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2202      	movs	r2, #2
 800d3ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681a      	ldr	r2, [r3, #0]
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	3304      	adds	r3, #4
 800d3c6:	4619      	mov	r1, r3
 800d3c8:	4610      	mov	r0, r2
 800d3ca:	f000 fc57 	bl	800dc7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2201      	movs	r2, #1
 800d3d2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2201      	movs	r2, #1
 800d3da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2201      	movs	r2, #1
 800d3e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2201      	movs	r2, #1
 800d3ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2201      	movs	r2, #1
 800d3f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2201      	movs	r2, #1
 800d3fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2201      	movs	r2, #1
 800d402:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2201      	movs	r2, #1
 800d40a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2201      	movs	r2, #1
 800d412:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2201      	movs	r2, #1
 800d41a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2201      	movs	r2, #1
 800d422:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2201      	movs	r2, #1
 800d42a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d42e:	2300      	movs	r3, #0
}
 800d430:	4618      	mov	r0, r3
 800d432:	3708      	adds	r7, #8
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}

0800d438 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d438:	b480      	push	{r7}
 800d43a:	b085      	sub	sp, #20
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d446:	b2db      	uxtb	r3, r3
 800d448:	2b01      	cmp	r3, #1
 800d44a:	d001      	beq.n	800d450 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d44c:	2301      	movs	r3, #1
 800d44e:	e054      	b.n	800d4fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2202      	movs	r2, #2
 800d454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	68da      	ldr	r2, [r3, #12]
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	f042 0201 	orr.w	r2, r2, #1
 800d466:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	4a26      	ldr	r2, [pc, #152]	@ (800d508 <HAL_TIM_Base_Start_IT+0xd0>)
 800d46e:	4293      	cmp	r3, r2
 800d470:	d022      	beq.n	800d4b8 <HAL_TIM_Base_Start_IT+0x80>
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d47a:	d01d      	beq.n	800d4b8 <HAL_TIM_Base_Start_IT+0x80>
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	4a22      	ldr	r2, [pc, #136]	@ (800d50c <HAL_TIM_Base_Start_IT+0xd4>)
 800d482:	4293      	cmp	r3, r2
 800d484:	d018      	beq.n	800d4b8 <HAL_TIM_Base_Start_IT+0x80>
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	4a21      	ldr	r2, [pc, #132]	@ (800d510 <HAL_TIM_Base_Start_IT+0xd8>)
 800d48c:	4293      	cmp	r3, r2
 800d48e:	d013      	beq.n	800d4b8 <HAL_TIM_Base_Start_IT+0x80>
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	4a1f      	ldr	r2, [pc, #124]	@ (800d514 <HAL_TIM_Base_Start_IT+0xdc>)
 800d496:	4293      	cmp	r3, r2
 800d498:	d00e      	beq.n	800d4b8 <HAL_TIM_Base_Start_IT+0x80>
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	4a1e      	ldr	r2, [pc, #120]	@ (800d518 <HAL_TIM_Base_Start_IT+0xe0>)
 800d4a0:	4293      	cmp	r3, r2
 800d4a2:	d009      	beq.n	800d4b8 <HAL_TIM_Base_Start_IT+0x80>
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	4a1c      	ldr	r2, [pc, #112]	@ (800d51c <HAL_TIM_Base_Start_IT+0xe4>)
 800d4aa:	4293      	cmp	r3, r2
 800d4ac:	d004      	beq.n	800d4b8 <HAL_TIM_Base_Start_IT+0x80>
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	4a1b      	ldr	r2, [pc, #108]	@ (800d520 <HAL_TIM_Base_Start_IT+0xe8>)
 800d4b4:	4293      	cmp	r3, r2
 800d4b6:	d115      	bne.n	800d4e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	689a      	ldr	r2, [r3, #8]
 800d4be:	4b19      	ldr	r3, [pc, #100]	@ (800d524 <HAL_TIM_Base_Start_IT+0xec>)
 800d4c0:	4013      	ands	r3, r2
 800d4c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	2b06      	cmp	r3, #6
 800d4c8:	d015      	beq.n	800d4f6 <HAL_TIM_Base_Start_IT+0xbe>
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d4d0:	d011      	beq.n	800d4f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	681a      	ldr	r2, [r3, #0]
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	f042 0201 	orr.w	r2, r2, #1
 800d4e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d4e2:	e008      	b.n	800d4f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	681a      	ldr	r2, [r3, #0]
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	f042 0201 	orr.w	r2, r2, #1
 800d4f2:	601a      	str	r2, [r3, #0]
 800d4f4:	e000      	b.n	800d4f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d4f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d4f8:	2300      	movs	r3, #0
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	3714      	adds	r7, #20
 800d4fe:	46bd      	mov	sp, r7
 800d500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d504:	4770      	bx	lr
 800d506:	bf00      	nop
 800d508:	40010000 	.word	0x40010000
 800d50c:	40000400 	.word	0x40000400
 800d510:	40000800 	.word	0x40000800
 800d514:	40000c00 	.word	0x40000c00
 800d518:	40010400 	.word	0x40010400
 800d51c:	40001800 	.word	0x40001800
 800d520:	40014000 	.word	0x40014000
 800d524:	00010007 	.word	0x00010007

0800d528 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b082      	sub	sp, #8
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d101      	bne.n	800d53a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d536:	2301      	movs	r3, #1
 800d538:	e049      	b.n	800d5ce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d540:	b2db      	uxtb	r3, r3
 800d542:	2b00      	cmp	r3, #0
 800d544:	d106      	bne.n	800d554 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2200      	movs	r2, #0
 800d54a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f7f7 fb3e 	bl	8004bd0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2202      	movs	r2, #2
 800d558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681a      	ldr	r2, [r3, #0]
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	3304      	adds	r3, #4
 800d564:	4619      	mov	r1, r3
 800d566:	4610      	mov	r0, r2
 800d568:	f000 fb88 	bl	800dc7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2201      	movs	r2, #1
 800d570:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2201      	movs	r2, #1
 800d578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2201      	movs	r2, #1
 800d580:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2201      	movs	r2, #1
 800d588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2201      	movs	r2, #1
 800d590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2201      	movs	r2, #1
 800d598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2201      	movs	r2, #1
 800d5a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2201      	movs	r2, #1
 800d5a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2201      	movs	r2, #1
 800d5b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2201      	movs	r2, #1
 800d5b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2201      	movs	r2, #1
 800d5c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2201      	movs	r2, #1
 800d5c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d5cc:	2300      	movs	r3, #0
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	3708      	adds	r7, #8
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}
	...

0800d5d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b084      	sub	sp, #16
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
 800d5e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d109      	bne.n	800d5fc <HAL_TIM_PWM_Start+0x24>
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d5ee:	b2db      	uxtb	r3, r3
 800d5f0:	2b01      	cmp	r3, #1
 800d5f2:	bf14      	ite	ne
 800d5f4:	2301      	movne	r3, #1
 800d5f6:	2300      	moveq	r3, #0
 800d5f8:	b2db      	uxtb	r3, r3
 800d5fa:	e03c      	b.n	800d676 <HAL_TIM_PWM_Start+0x9e>
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	2b04      	cmp	r3, #4
 800d600:	d109      	bne.n	800d616 <HAL_TIM_PWM_Start+0x3e>
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d608:	b2db      	uxtb	r3, r3
 800d60a:	2b01      	cmp	r3, #1
 800d60c:	bf14      	ite	ne
 800d60e:	2301      	movne	r3, #1
 800d610:	2300      	moveq	r3, #0
 800d612:	b2db      	uxtb	r3, r3
 800d614:	e02f      	b.n	800d676 <HAL_TIM_PWM_Start+0x9e>
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	2b08      	cmp	r3, #8
 800d61a:	d109      	bne.n	800d630 <HAL_TIM_PWM_Start+0x58>
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d622:	b2db      	uxtb	r3, r3
 800d624:	2b01      	cmp	r3, #1
 800d626:	bf14      	ite	ne
 800d628:	2301      	movne	r3, #1
 800d62a:	2300      	moveq	r3, #0
 800d62c:	b2db      	uxtb	r3, r3
 800d62e:	e022      	b.n	800d676 <HAL_TIM_PWM_Start+0x9e>
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	2b0c      	cmp	r3, #12
 800d634:	d109      	bne.n	800d64a <HAL_TIM_PWM_Start+0x72>
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d63c:	b2db      	uxtb	r3, r3
 800d63e:	2b01      	cmp	r3, #1
 800d640:	bf14      	ite	ne
 800d642:	2301      	movne	r3, #1
 800d644:	2300      	moveq	r3, #0
 800d646:	b2db      	uxtb	r3, r3
 800d648:	e015      	b.n	800d676 <HAL_TIM_PWM_Start+0x9e>
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	2b10      	cmp	r3, #16
 800d64e:	d109      	bne.n	800d664 <HAL_TIM_PWM_Start+0x8c>
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d656:	b2db      	uxtb	r3, r3
 800d658:	2b01      	cmp	r3, #1
 800d65a:	bf14      	ite	ne
 800d65c:	2301      	movne	r3, #1
 800d65e:	2300      	moveq	r3, #0
 800d660:	b2db      	uxtb	r3, r3
 800d662:	e008      	b.n	800d676 <HAL_TIM_PWM_Start+0x9e>
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d66a:	b2db      	uxtb	r3, r3
 800d66c:	2b01      	cmp	r3, #1
 800d66e:	bf14      	ite	ne
 800d670:	2301      	movne	r3, #1
 800d672:	2300      	moveq	r3, #0
 800d674:	b2db      	uxtb	r3, r3
 800d676:	2b00      	cmp	r3, #0
 800d678:	d001      	beq.n	800d67e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d67a:	2301      	movs	r3, #1
 800d67c:	e0a1      	b.n	800d7c2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d104      	bne.n	800d68e <HAL_TIM_PWM_Start+0xb6>
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2202      	movs	r2, #2
 800d688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d68c:	e023      	b.n	800d6d6 <HAL_TIM_PWM_Start+0xfe>
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	2b04      	cmp	r3, #4
 800d692:	d104      	bne.n	800d69e <HAL_TIM_PWM_Start+0xc6>
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2202      	movs	r2, #2
 800d698:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d69c:	e01b      	b.n	800d6d6 <HAL_TIM_PWM_Start+0xfe>
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	2b08      	cmp	r3, #8
 800d6a2:	d104      	bne.n	800d6ae <HAL_TIM_PWM_Start+0xd6>
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2202      	movs	r2, #2
 800d6a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d6ac:	e013      	b.n	800d6d6 <HAL_TIM_PWM_Start+0xfe>
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	2b0c      	cmp	r3, #12
 800d6b2:	d104      	bne.n	800d6be <HAL_TIM_PWM_Start+0xe6>
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2202      	movs	r2, #2
 800d6b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d6bc:	e00b      	b.n	800d6d6 <HAL_TIM_PWM_Start+0xfe>
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	2b10      	cmp	r3, #16
 800d6c2:	d104      	bne.n	800d6ce <HAL_TIM_PWM_Start+0xf6>
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2202      	movs	r2, #2
 800d6c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d6cc:	e003      	b.n	800d6d6 <HAL_TIM_PWM_Start+0xfe>
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2202      	movs	r2, #2
 800d6d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	2201      	movs	r2, #1
 800d6dc:	6839      	ldr	r1, [r7, #0]
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f000 fe48 	bl	800e374 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	4a38      	ldr	r2, [pc, #224]	@ (800d7cc <HAL_TIM_PWM_Start+0x1f4>)
 800d6ea:	4293      	cmp	r3, r2
 800d6ec:	d013      	beq.n	800d716 <HAL_TIM_PWM_Start+0x13e>
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	4a37      	ldr	r2, [pc, #220]	@ (800d7d0 <HAL_TIM_PWM_Start+0x1f8>)
 800d6f4:	4293      	cmp	r3, r2
 800d6f6:	d00e      	beq.n	800d716 <HAL_TIM_PWM_Start+0x13e>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	4a35      	ldr	r2, [pc, #212]	@ (800d7d4 <HAL_TIM_PWM_Start+0x1fc>)
 800d6fe:	4293      	cmp	r3, r2
 800d700:	d009      	beq.n	800d716 <HAL_TIM_PWM_Start+0x13e>
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	4a34      	ldr	r2, [pc, #208]	@ (800d7d8 <HAL_TIM_PWM_Start+0x200>)
 800d708:	4293      	cmp	r3, r2
 800d70a:	d004      	beq.n	800d716 <HAL_TIM_PWM_Start+0x13e>
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	4a32      	ldr	r2, [pc, #200]	@ (800d7dc <HAL_TIM_PWM_Start+0x204>)
 800d712:	4293      	cmp	r3, r2
 800d714:	d101      	bne.n	800d71a <HAL_TIM_PWM_Start+0x142>
 800d716:	2301      	movs	r3, #1
 800d718:	e000      	b.n	800d71c <HAL_TIM_PWM_Start+0x144>
 800d71a:	2300      	movs	r3, #0
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d007      	beq.n	800d730 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d72e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	4a25      	ldr	r2, [pc, #148]	@ (800d7cc <HAL_TIM_PWM_Start+0x1f4>)
 800d736:	4293      	cmp	r3, r2
 800d738:	d022      	beq.n	800d780 <HAL_TIM_PWM_Start+0x1a8>
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d742:	d01d      	beq.n	800d780 <HAL_TIM_PWM_Start+0x1a8>
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	4a25      	ldr	r2, [pc, #148]	@ (800d7e0 <HAL_TIM_PWM_Start+0x208>)
 800d74a:	4293      	cmp	r3, r2
 800d74c:	d018      	beq.n	800d780 <HAL_TIM_PWM_Start+0x1a8>
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	4a24      	ldr	r2, [pc, #144]	@ (800d7e4 <HAL_TIM_PWM_Start+0x20c>)
 800d754:	4293      	cmp	r3, r2
 800d756:	d013      	beq.n	800d780 <HAL_TIM_PWM_Start+0x1a8>
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	4a22      	ldr	r2, [pc, #136]	@ (800d7e8 <HAL_TIM_PWM_Start+0x210>)
 800d75e:	4293      	cmp	r3, r2
 800d760:	d00e      	beq.n	800d780 <HAL_TIM_PWM_Start+0x1a8>
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	4a1a      	ldr	r2, [pc, #104]	@ (800d7d0 <HAL_TIM_PWM_Start+0x1f8>)
 800d768:	4293      	cmp	r3, r2
 800d76a:	d009      	beq.n	800d780 <HAL_TIM_PWM_Start+0x1a8>
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	4a1e      	ldr	r2, [pc, #120]	@ (800d7ec <HAL_TIM_PWM_Start+0x214>)
 800d772:	4293      	cmp	r3, r2
 800d774:	d004      	beq.n	800d780 <HAL_TIM_PWM_Start+0x1a8>
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	4a16      	ldr	r2, [pc, #88]	@ (800d7d4 <HAL_TIM_PWM_Start+0x1fc>)
 800d77c:	4293      	cmp	r3, r2
 800d77e:	d115      	bne.n	800d7ac <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	689a      	ldr	r2, [r3, #8]
 800d786:	4b1a      	ldr	r3, [pc, #104]	@ (800d7f0 <HAL_TIM_PWM_Start+0x218>)
 800d788:	4013      	ands	r3, r2
 800d78a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	2b06      	cmp	r3, #6
 800d790:	d015      	beq.n	800d7be <HAL_TIM_PWM_Start+0x1e6>
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d798:	d011      	beq.n	800d7be <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	681a      	ldr	r2, [r3, #0]
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	f042 0201 	orr.w	r2, r2, #1
 800d7a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7aa:	e008      	b.n	800d7be <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	681a      	ldr	r2, [r3, #0]
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f042 0201 	orr.w	r2, r2, #1
 800d7ba:	601a      	str	r2, [r3, #0]
 800d7bc:	e000      	b.n	800d7c0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d7c0:	2300      	movs	r3, #0
}
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	3710      	adds	r7, #16
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}
 800d7ca:	bf00      	nop
 800d7cc:	40010000 	.word	0x40010000
 800d7d0:	40010400 	.word	0x40010400
 800d7d4:	40014000 	.word	0x40014000
 800d7d8:	40014400 	.word	0x40014400
 800d7dc:	40014800 	.word	0x40014800
 800d7e0:	40000400 	.word	0x40000400
 800d7e4:	40000800 	.word	0x40000800
 800d7e8:	40000c00 	.word	0x40000c00
 800d7ec:	40001800 	.word	0x40001800
 800d7f0:	00010007 	.word	0x00010007

0800d7f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b084      	sub	sp, #16
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	68db      	ldr	r3, [r3, #12]
 800d802:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	691b      	ldr	r3, [r3, #16]
 800d80a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	f003 0302 	and.w	r3, r3, #2
 800d812:	2b00      	cmp	r3, #0
 800d814:	d020      	beq.n	800d858 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	f003 0302 	and.w	r3, r3, #2
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d01b      	beq.n	800d858 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	f06f 0202 	mvn.w	r2, #2
 800d828:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2201      	movs	r2, #1
 800d82e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	699b      	ldr	r3, [r3, #24]
 800d836:	f003 0303 	and.w	r3, r3, #3
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d003      	beq.n	800d846 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f000 f9fe 	bl	800dc40 <HAL_TIM_IC_CaptureCallback>
 800d844:	e005      	b.n	800d852 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f000 f9f0 	bl	800dc2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	f000 fa01 	bl	800dc54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2200      	movs	r2, #0
 800d856:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	f003 0304 	and.w	r3, r3, #4
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d020      	beq.n	800d8a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	f003 0304 	and.w	r3, r3, #4
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d01b      	beq.n	800d8a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	f06f 0204 	mvn.w	r2, #4
 800d874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2202      	movs	r2, #2
 800d87a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	699b      	ldr	r3, [r3, #24]
 800d882:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d886:	2b00      	cmp	r3, #0
 800d888:	d003      	beq.n	800d892 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f000 f9d8 	bl	800dc40 <HAL_TIM_IC_CaptureCallback>
 800d890:	e005      	b.n	800d89e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f000 f9ca 	bl	800dc2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	f000 f9db 	bl	800dc54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	f003 0308 	and.w	r3, r3, #8
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d020      	beq.n	800d8f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	f003 0308 	and.w	r3, r3, #8
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d01b      	beq.n	800d8f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	f06f 0208 	mvn.w	r2, #8
 800d8c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2204      	movs	r2, #4
 800d8c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	69db      	ldr	r3, [r3, #28]
 800d8ce:	f003 0303 	and.w	r3, r3, #3
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d003      	beq.n	800d8de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	f000 f9b2 	bl	800dc40 <HAL_TIM_IC_CaptureCallback>
 800d8dc:	e005      	b.n	800d8ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f000 f9a4 	bl	800dc2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	f000 f9b5 	bl	800dc54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	f003 0310 	and.w	r3, r3, #16
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d020      	beq.n	800d93c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	f003 0310 	and.w	r3, r3, #16
 800d900:	2b00      	cmp	r3, #0
 800d902:	d01b      	beq.n	800d93c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	f06f 0210 	mvn.w	r2, #16
 800d90c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	2208      	movs	r2, #8
 800d912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	69db      	ldr	r3, [r3, #28]
 800d91a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d003      	beq.n	800d92a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	f000 f98c 	bl	800dc40 <HAL_TIM_IC_CaptureCallback>
 800d928:	e005      	b.n	800d936 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f000 f97e 	bl	800dc2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	f000 f98f 	bl	800dc54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2200      	movs	r2, #0
 800d93a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	f003 0301 	and.w	r3, r3, #1
 800d942:	2b00      	cmp	r3, #0
 800d944:	d00c      	beq.n	800d960 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	f003 0301 	and.w	r3, r3, #1
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d007      	beq.n	800d960 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	f06f 0201 	mvn.w	r2, #1
 800d958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f7f6 fb94 	bl	8004088 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d966:	2b00      	cmp	r3, #0
 800d968:	d104      	bne.n	800d974 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d970:	2b00      	cmp	r3, #0
 800d972:	d00c      	beq.n	800d98e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d007      	beq.n	800d98e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f000 fdb1 	bl	800e4f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d994:	2b00      	cmp	r3, #0
 800d996:	d00c      	beq.n	800d9b2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d007      	beq.n	800d9b2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d9aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d9ac:	6878      	ldr	r0, [r7, #4]
 800d9ae:	f000 fda9 	bl	800e504 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d00c      	beq.n	800d9d6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d007      	beq.n	800d9d6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d9ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f000 f949 	bl	800dc68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	f003 0320 	and.w	r3, r3, #32
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d00c      	beq.n	800d9fa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	f003 0320 	and.w	r3, r3, #32
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d007      	beq.n	800d9fa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	f06f 0220 	mvn.w	r2, #32
 800d9f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f000 fd71 	bl	800e4dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d9fa:	bf00      	nop
 800d9fc:	3710      	adds	r7, #16
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}
	...

0800da04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b086      	sub	sp, #24
 800da08:	af00      	add	r7, sp, #0
 800da0a:	60f8      	str	r0, [r7, #12]
 800da0c:	60b9      	str	r1, [r7, #8]
 800da0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800da10:	2300      	movs	r3, #0
 800da12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800da1a:	2b01      	cmp	r3, #1
 800da1c:	d101      	bne.n	800da22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800da1e:	2302      	movs	r3, #2
 800da20:	e0ff      	b.n	800dc22 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	2201      	movs	r2, #1
 800da26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2b14      	cmp	r3, #20
 800da2e:	f200 80f0 	bhi.w	800dc12 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800da32:	a201      	add	r2, pc, #4	@ (adr r2, 800da38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800da34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da38:	0800da8d 	.word	0x0800da8d
 800da3c:	0800dc13 	.word	0x0800dc13
 800da40:	0800dc13 	.word	0x0800dc13
 800da44:	0800dc13 	.word	0x0800dc13
 800da48:	0800dacd 	.word	0x0800dacd
 800da4c:	0800dc13 	.word	0x0800dc13
 800da50:	0800dc13 	.word	0x0800dc13
 800da54:	0800dc13 	.word	0x0800dc13
 800da58:	0800db0f 	.word	0x0800db0f
 800da5c:	0800dc13 	.word	0x0800dc13
 800da60:	0800dc13 	.word	0x0800dc13
 800da64:	0800dc13 	.word	0x0800dc13
 800da68:	0800db4f 	.word	0x0800db4f
 800da6c:	0800dc13 	.word	0x0800dc13
 800da70:	0800dc13 	.word	0x0800dc13
 800da74:	0800dc13 	.word	0x0800dc13
 800da78:	0800db91 	.word	0x0800db91
 800da7c:	0800dc13 	.word	0x0800dc13
 800da80:	0800dc13 	.word	0x0800dc13
 800da84:	0800dc13 	.word	0x0800dc13
 800da88:	0800dbd1 	.word	0x0800dbd1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	68b9      	ldr	r1, [r7, #8]
 800da92:	4618      	mov	r0, r3
 800da94:	f000 f998 	bl	800ddc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	699a      	ldr	r2, [r3, #24]
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	f042 0208 	orr.w	r2, r2, #8
 800daa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	699a      	ldr	r2, [r3, #24]
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	f022 0204 	bic.w	r2, r2, #4
 800dab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	6999      	ldr	r1, [r3, #24]
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	691a      	ldr	r2, [r3, #16]
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	430a      	orrs	r2, r1
 800dac8:	619a      	str	r2, [r3, #24]
      break;
 800daca:	e0a5      	b.n	800dc18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	68b9      	ldr	r1, [r7, #8]
 800dad2:	4618      	mov	r0, r3
 800dad4:	f000 fa08 	bl	800dee8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	699a      	ldr	r2, [r3, #24]
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dae6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	699a      	ldr	r2, [r3, #24]
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800daf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	6999      	ldr	r1, [r3, #24]
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	691b      	ldr	r3, [r3, #16]
 800db02:	021a      	lsls	r2, r3, #8
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	430a      	orrs	r2, r1
 800db0a:	619a      	str	r2, [r3, #24]
      break;
 800db0c:	e084      	b.n	800dc18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	68b9      	ldr	r1, [r7, #8]
 800db14:	4618      	mov	r0, r3
 800db16:	f000 fa71 	bl	800dffc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	69da      	ldr	r2, [r3, #28]
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	f042 0208 	orr.w	r2, r2, #8
 800db28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	69da      	ldr	r2, [r3, #28]
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	f022 0204 	bic.w	r2, r2, #4
 800db38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	69d9      	ldr	r1, [r3, #28]
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	691a      	ldr	r2, [r3, #16]
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	430a      	orrs	r2, r1
 800db4a:	61da      	str	r2, [r3, #28]
      break;
 800db4c:	e064      	b.n	800dc18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	68b9      	ldr	r1, [r7, #8]
 800db54:	4618      	mov	r0, r3
 800db56:	f000 fad9 	bl	800e10c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	69da      	ldr	r2, [r3, #28]
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800db68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	69da      	ldr	r2, [r3, #28]
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800db78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	69d9      	ldr	r1, [r3, #28]
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	691b      	ldr	r3, [r3, #16]
 800db84:	021a      	lsls	r2, r3, #8
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	430a      	orrs	r2, r1
 800db8c:	61da      	str	r2, [r3, #28]
      break;
 800db8e:	e043      	b.n	800dc18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	68b9      	ldr	r1, [r7, #8]
 800db96:	4618      	mov	r0, r3
 800db98:	f000 fb22 	bl	800e1e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	f042 0208 	orr.w	r2, r2, #8
 800dbaa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	f022 0204 	bic.w	r2, r2, #4
 800dbba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	691a      	ldr	r2, [r3, #16]
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	430a      	orrs	r2, r1
 800dbcc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800dbce:	e023      	b.n	800dc18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	68b9      	ldr	r1, [r7, #8]
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f000 fb66 	bl	800e2a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dbea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dbfa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	691b      	ldr	r3, [r3, #16]
 800dc06:	021a      	lsls	r2, r3, #8
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	430a      	orrs	r2, r1
 800dc0e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800dc10:	e002      	b.n	800dc18 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800dc12:	2301      	movs	r3, #1
 800dc14:	75fb      	strb	r3, [r7, #23]
      break;
 800dc16:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800dc20:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc22:	4618      	mov	r0, r3
 800dc24:	3718      	adds	r7, #24
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}
 800dc2a:	bf00      	nop

0800dc2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b083      	sub	sp, #12
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dc34:	bf00      	nop
 800dc36:	370c      	adds	r7, #12
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3e:	4770      	bx	lr

0800dc40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dc40:	b480      	push	{r7}
 800dc42:	b083      	sub	sp, #12
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dc48:	bf00      	nop
 800dc4a:	370c      	adds	r7, #12
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc52:	4770      	bx	lr

0800dc54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dc54:	b480      	push	{r7}
 800dc56:	b083      	sub	sp, #12
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dc5c:	bf00      	nop
 800dc5e:	370c      	adds	r7, #12
 800dc60:	46bd      	mov	sp, r7
 800dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc66:	4770      	bx	lr

0800dc68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dc68:	b480      	push	{r7}
 800dc6a:	b083      	sub	sp, #12
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dc70:	bf00      	nop
 800dc72:	370c      	adds	r7, #12
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr

0800dc7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dc7c:	b480      	push	{r7}
 800dc7e:	b085      	sub	sp, #20
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	4a46      	ldr	r2, [pc, #280]	@ (800dda8 <TIM_Base_SetConfig+0x12c>)
 800dc90:	4293      	cmp	r3, r2
 800dc92:	d013      	beq.n	800dcbc <TIM_Base_SetConfig+0x40>
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc9a:	d00f      	beq.n	800dcbc <TIM_Base_SetConfig+0x40>
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	4a43      	ldr	r2, [pc, #268]	@ (800ddac <TIM_Base_SetConfig+0x130>)
 800dca0:	4293      	cmp	r3, r2
 800dca2:	d00b      	beq.n	800dcbc <TIM_Base_SetConfig+0x40>
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	4a42      	ldr	r2, [pc, #264]	@ (800ddb0 <TIM_Base_SetConfig+0x134>)
 800dca8:	4293      	cmp	r3, r2
 800dcaa:	d007      	beq.n	800dcbc <TIM_Base_SetConfig+0x40>
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	4a41      	ldr	r2, [pc, #260]	@ (800ddb4 <TIM_Base_SetConfig+0x138>)
 800dcb0:	4293      	cmp	r3, r2
 800dcb2:	d003      	beq.n	800dcbc <TIM_Base_SetConfig+0x40>
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	4a40      	ldr	r2, [pc, #256]	@ (800ddb8 <TIM_Base_SetConfig+0x13c>)
 800dcb8:	4293      	cmp	r3, r2
 800dcba:	d108      	bne.n	800dcce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dcc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	685b      	ldr	r3, [r3, #4]
 800dcc8:	68fa      	ldr	r2, [r7, #12]
 800dcca:	4313      	orrs	r3, r2
 800dccc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	4a35      	ldr	r2, [pc, #212]	@ (800dda8 <TIM_Base_SetConfig+0x12c>)
 800dcd2:	4293      	cmp	r3, r2
 800dcd4:	d01f      	beq.n	800dd16 <TIM_Base_SetConfig+0x9a>
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dcdc:	d01b      	beq.n	800dd16 <TIM_Base_SetConfig+0x9a>
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	4a32      	ldr	r2, [pc, #200]	@ (800ddac <TIM_Base_SetConfig+0x130>)
 800dce2:	4293      	cmp	r3, r2
 800dce4:	d017      	beq.n	800dd16 <TIM_Base_SetConfig+0x9a>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	4a31      	ldr	r2, [pc, #196]	@ (800ddb0 <TIM_Base_SetConfig+0x134>)
 800dcea:	4293      	cmp	r3, r2
 800dcec:	d013      	beq.n	800dd16 <TIM_Base_SetConfig+0x9a>
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	4a30      	ldr	r2, [pc, #192]	@ (800ddb4 <TIM_Base_SetConfig+0x138>)
 800dcf2:	4293      	cmp	r3, r2
 800dcf4:	d00f      	beq.n	800dd16 <TIM_Base_SetConfig+0x9a>
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	4a2f      	ldr	r2, [pc, #188]	@ (800ddb8 <TIM_Base_SetConfig+0x13c>)
 800dcfa:	4293      	cmp	r3, r2
 800dcfc:	d00b      	beq.n	800dd16 <TIM_Base_SetConfig+0x9a>
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	4a2e      	ldr	r2, [pc, #184]	@ (800ddbc <TIM_Base_SetConfig+0x140>)
 800dd02:	4293      	cmp	r3, r2
 800dd04:	d007      	beq.n	800dd16 <TIM_Base_SetConfig+0x9a>
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	4a2d      	ldr	r2, [pc, #180]	@ (800ddc0 <TIM_Base_SetConfig+0x144>)
 800dd0a:	4293      	cmp	r3, r2
 800dd0c:	d003      	beq.n	800dd16 <TIM_Base_SetConfig+0x9a>
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	4a2c      	ldr	r2, [pc, #176]	@ (800ddc4 <TIM_Base_SetConfig+0x148>)
 800dd12:	4293      	cmp	r3, r2
 800dd14:	d108      	bne.n	800dd28 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dd1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	68db      	ldr	r3, [r3, #12]
 800dd22:	68fa      	ldr	r2, [r7, #12]
 800dd24:	4313      	orrs	r3, r2
 800dd26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	695b      	ldr	r3, [r3, #20]
 800dd32:	4313      	orrs	r3, r2
 800dd34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	68fa      	ldr	r2, [r7, #12]
 800dd3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	689a      	ldr	r2, [r3, #8]
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	681a      	ldr	r2, [r3, #0]
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	4a16      	ldr	r2, [pc, #88]	@ (800dda8 <TIM_Base_SetConfig+0x12c>)
 800dd50:	4293      	cmp	r3, r2
 800dd52:	d00f      	beq.n	800dd74 <TIM_Base_SetConfig+0xf8>
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	4a18      	ldr	r2, [pc, #96]	@ (800ddb8 <TIM_Base_SetConfig+0x13c>)
 800dd58:	4293      	cmp	r3, r2
 800dd5a:	d00b      	beq.n	800dd74 <TIM_Base_SetConfig+0xf8>
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	4a17      	ldr	r2, [pc, #92]	@ (800ddbc <TIM_Base_SetConfig+0x140>)
 800dd60:	4293      	cmp	r3, r2
 800dd62:	d007      	beq.n	800dd74 <TIM_Base_SetConfig+0xf8>
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	4a16      	ldr	r2, [pc, #88]	@ (800ddc0 <TIM_Base_SetConfig+0x144>)
 800dd68:	4293      	cmp	r3, r2
 800dd6a:	d003      	beq.n	800dd74 <TIM_Base_SetConfig+0xf8>
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	4a15      	ldr	r2, [pc, #84]	@ (800ddc4 <TIM_Base_SetConfig+0x148>)
 800dd70:	4293      	cmp	r3, r2
 800dd72:	d103      	bne.n	800dd7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	691a      	ldr	r2, [r3, #16]
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2201      	movs	r2, #1
 800dd80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	691b      	ldr	r3, [r3, #16]
 800dd86:	f003 0301 	and.w	r3, r3, #1
 800dd8a:	2b01      	cmp	r3, #1
 800dd8c:	d105      	bne.n	800dd9a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	691b      	ldr	r3, [r3, #16]
 800dd92:	f023 0201 	bic.w	r2, r3, #1
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	611a      	str	r2, [r3, #16]
  }
}
 800dd9a:	bf00      	nop
 800dd9c:	3714      	adds	r7, #20
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda4:	4770      	bx	lr
 800dda6:	bf00      	nop
 800dda8:	40010000 	.word	0x40010000
 800ddac:	40000400 	.word	0x40000400
 800ddb0:	40000800 	.word	0x40000800
 800ddb4:	40000c00 	.word	0x40000c00
 800ddb8:	40010400 	.word	0x40010400
 800ddbc:	40014000 	.word	0x40014000
 800ddc0:	40014400 	.word	0x40014400
 800ddc4:	40014800 	.word	0x40014800

0800ddc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b087      	sub	sp, #28
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
 800ddd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6a1b      	ldr	r3, [r3, #32]
 800ddd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6a1b      	ldr	r3, [r3, #32]
 800dddc:	f023 0201 	bic.w	r2, r3, #1
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	685b      	ldr	r3, [r3, #4]
 800dde8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	699b      	ldr	r3, [r3, #24]
 800ddee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ddf0:	68fa      	ldr	r2, [r7, #12]
 800ddf2:	4b37      	ldr	r3, [pc, #220]	@ (800ded0 <TIM_OC1_SetConfig+0x108>)
 800ddf4:	4013      	ands	r3, r2
 800ddf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	f023 0303 	bic.w	r3, r3, #3
 800ddfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	68fa      	ldr	r2, [r7, #12]
 800de06:	4313      	orrs	r3, r2
 800de08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	f023 0302 	bic.w	r3, r3, #2
 800de10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	689b      	ldr	r3, [r3, #8]
 800de16:	697a      	ldr	r2, [r7, #20]
 800de18:	4313      	orrs	r3, r2
 800de1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	4a2d      	ldr	r2, [pc, #180]	@ (800ded4 <TIM_OC1_SetConfig+0x10c>)
 800de20:	4293      	cmp	r3, r2
 800de22:	d00f      	beq.n	800de44 <TIM_OC1_SetConfig+0x7c>
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	4a2c      	ldr	r2, [pc, #176]	@ (800ded8 <TIM_OC1_SetConfig+0x110>)
 800de28:	4293      	cmp	r3, r2
 800de2a:	d00b      	beq.n	800de44 <TIM_OC1_SetConfig+0x7c>
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	4a2b      	ldr	r2, [pc, #172]	@ (800dedc <TIM_OC1_SetConfig+0x114>)
 800de30:	4293      	cmp	r3, r2
 800de32:	d007      	beq.n	800de44 <TIM_OC1_SetConfig+0x7c>
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	4a2a      	ldr	r2, [pc, #168]	@ (800dee0 <TIM_OC1_SetConfig+0x118>)
 800de38:	4293      	cmp	r3, r2
 800de3a:	d003      	beq.n	800de44 <TIM_OC1_SetConfig+0x7c>
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	4a29      	ldr	r2, [pc, #164]	@ (800dee4 <TIM_OC1_SetConfig+0x11c>)
 800de40:	4293      	cmp	r3, r2
 800de42:	d10c      	bne.n	800de5e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800de44:	697b      	ldr	r3, [r7, #20]
 800de46:	f023 0308 	bic.w	r3, r3, #8
 800de4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	68db      	ldr	r3, [r3, #12]
 800de50:	697a      	ldr	r2, [r7, #20]
 800de52:	4313      	orrs	r3, r2
 800de54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	f023 0304 	bic.w	r3, r3, #4
 800de5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	4a1c      	ldr	r2, [pc, #112]	@ (800ded4 <TIM_OC1_SetConfig+0x10c>)
 800de62:	4293      	cmp	r3, r2
 800de64:	d00f      	beq.n	800de86 <TIM_OC1_SetConfig+0xbe>
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	4a1b      	ldr	r2, [pc, #108]	@ (800ded8 <TIM_OC1_SetConfig+0x110>)
 800de6a:	4293      	cmp	r3, r2
 800de6c:	d00b      	beq.n	800de86 <TIM_OC1_SetConfig+0xbe>
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	4a1a      	ldr	r2, [pc, #104]	@ (800dedc <TIM_OC1_SetConfig+0x114>)
 800de72:	4293      	cmp	r3, r2
 800de74:	d007      	beq.n	800de86 <TIM_OC1_SetConfig+0xbe>
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	4a19      	ldr	r2, [pc, #100]	@ (800dee0 <TIM_OC1_SetConfig+0x118>)
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d003      	beq.n	800de86 <TIM_OC1_SetConfig+0xbe>
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	4a18      	ldr	r2, [pc, #96]	@ (800dee4 <TIM_OC1_SetConfig+0x11c>)
 800de82:	4293      	cmp	r3, r2
 800de84:	d111      	bne.n	800deaa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800de86:	693b      	ldr	r3, [r7, #16]
 800de88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800de8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800de8e:	693b      	ldr	r3, [r7, #16]
 800de90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800de94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	695b      	ldr	r3, [r3, #20]
 800de9a:	693a      	ldr	r2, [r7, #16]
 800de9c:	4313      	orrs	r3, r2
 800de9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	699b      	ldr	r3, [r3, #24]
 800dea4:	693a      	ldr	r2, [r7, #16]
 800dea6:	4313      	orrs	r3, r2
 800dea8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	693a      	ldr	r2, [r7, #16]
 800deae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	68fa      	ldr	r2, [r7, #12]
 800deb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	685a      	ldr	r2, [r3, #4]
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	697a      	ldr	r2, [r7, #20]
 800dec2:	621a      	str	r2, [r3, #32]
}
 800dec4:	bf00      	nop
 800dec6:	371c      	adds	r7, #28
 800dec8:	46bd      	mov	sp, r7
 800deca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dece:	4770      	bx	lr
 800ded0:	fffeff8f 	.word	0xfffeff8f
 800ded4:	40010000 	.word	0x40010000
 800ded8:	40010400 	.word	0x40010400
 800dedc:	40014000 	.word	0x40014000
 800dee0:	40014400 	.word	0x40014400
 800dee4:	40014800 	.word	0x40014800

0800dee8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dee8:	b480      	push	{r7}
 800deea:	b087      	sub	sp, #28
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	6a1b      	ldr	r3, [r3, #32]
 800def6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	6a1b      	ldr	r3, [r3, #32]
 800defc:	f023 0210 	bic.w	r2, r3, #16
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	685b      	ldr	r3, [r3, #4]
 800df08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	699b      	ldr	r3, [r3, #24]
 800df0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800df10:	68fa      	ldr	r2, [r7, #12]
 800df12:	4b34      	ldr	r3, [pc, #208]	@ (800dfe4 <TIM_OC2_SetConfig+0xfc>)
 800df14:	4013      	ands	r3, r2
 800df16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800df1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	021b      	lsls	r3, r3, #8
 800df26:	68fa      	ldr	r2, [r7, #12]
 800df28:	4313      	orrs	r3, r2
 800df2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800df2c:	697b      	ldr	r3, [r7, #20]
 800df2e:	f023 0320 	bic.w	r3, r3, #32
 800df32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	689b      	ldr	r3, [r3, #8]
 800df38:	011b      	lsls	r3, r3, #4
 800df3a:	697a      	ldr	r2, [r7, #20]
 800df3c:	4313      	orrs	r3, r2
 800df3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	4a29      	ldr	r2, [pc, #164]	@ (800dfe8 <TIM_OC2_SetConfig+0x100>)
 800df44:	4293      	cmp	r3, r2
 800df46:	d003      	beq.n	800df50 <TIM_OC2_SetConfig+0x68>
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	4a28      	ldr	r2, [pc, #160]	@ (800dfec <TIM_OC2_SetConfig+0x104>)
 800df4c:	4293      	cmp	r3, r2
 800df4e:	d10d      	bne.n	800df6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800df56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	68db      	ldr	r3, [r3, #12]
 800df5c:	011b      	lsls	r3, r3, #4
 800df5e:	697a      	ldr	r2, [r7, #20]
 800df60:	4313      	orrs	r3, r2
 800df62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800df64:	697b      	ldr	r3, [r7, #20]
 800df66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800df6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	4a1e      	ldr	r2, [pc, #120]	@ (800dfe8 <TIM_OC2_SetConfig+0x100>)
 800df70:	4293      	cmp	r3, r2
 800df72:	d00f      	beq.n	800df94 <TIM_OC2_SetConfig+0xac>
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	4a1d      	ldr	r2, [pc, #116]	@ (800dfec <TIM_OC2_SetConfig+0x104>)
 800df78:	4293      	cmp	r3, r2
 800df7a:	d00b      	beq.n	800df94 <TIM_OC2_SetConfig+0xac>
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	4a1c      	ldr	r2, [pc, #112]	@ (800dff0 <TIM_OC2_SetConfig+0x108>)
 800df80:	4293      	cmp	r3, r2
 800df82:	d007      	beq.n	800df94 <TIM_OC2_SetConfig+0xac>
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	4a1b      	ldr	r2, [pc, #108]	@ (800dff4 <TIM_OC2_SetConfig+0x10c>)
 800df88:	4293      	cmp	r3, r2
 800df8a:	d003      	beq.n	800df94 <TIM_OC2_SetConfig+0xac>
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	4a1a      	ldr	r2, [pc, #104]	@ (800dff8 <TIM_OC2_SetConfig+0x110>)
 800df90:	4293      	cmp	r3, r2
 800df92:	d113      	bne.n	800dfbc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800df94:	693b      	ldr	r3, [r7, #16]
 800df96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800df9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800df9c:	693b      	ldr	r3, [r7, #16]
 800df9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800dfa2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	695b      	ldr	r3, [r3, #20]
 800dfa8:	009b      	lsls	r3, r3, #2
 800dfaa:	693a      	ldr	r2, [r7, #16]
 800dfac:	4313      	orrs	r3, r2
 800dfae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	699b      	ldr	r3, [r3, #24]
 800dfb4:	009b      	lsls	r3, r3, #2
 800dfb6:	693a      	ldr	r2, [r7, #16]
 800dfb8:	4313      	orrs	r3, r2
 800dfba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	693a      	ldr	r2, [r7, #16]
 800dfc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	68fa      	ldr	r2, [r7, #12]
 800dfc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	685a      	ldr	r2, [r3, #4]
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	697a      	ldr	r2, [r7, #20]
 800dfd4:	621a      	str	r2, [r3, #32]
}
 800dfd6:	bf00      	nop
 800dfd8:	371c      	adds	r7, #28
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe0:	4770      	bx	lr
 800dfe2:	bf00      	nop
 800dfe4:	feff8fff 	.word	0xfeff8fff
 800dfe8:	40010000 	.word	0x40010000
 800dfec:	40010400 	.word	0x40010400
 800dff0:	40014000 	.word	0x40014000
 800dff4:	40014400 	.word	0x40014400
 800dff8:	40014800 	.word	0x40014800

0800dffc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dffc:	b480      	push	{r7}
 800dffe:	b087      	sub	sp, #28
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
 800e004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	6a1b      	ldr	r3, [r3, #32]
 800e00a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	6a1b      	ldr	r3, [r3, #32]
 800e010:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	685b      	ldr	r3, [r3, #4]
 800e01c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	69db      	ldr	r3, [r3, #28]
 800e022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e024:	68fa      	ldr	r2, [r7, #12]
 800e026:	4b33      	ldr	r3, [pc, #204]	@ (800e0f4 <TIM_OC3_SetConfig+0xf8>)
 800e028:	4013      	ands	r3, r2
 800e02a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	f023 0303 	bic.w	r3, r3, #3
 800e032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	68fa      	ldr	r2, [r7, #12]
 800e03a:	4313      	orrs	r3, r2
 800e03c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e044:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	689b      	ldr	r3, [r3, #8]
 800e04a:	021b      	lsls	r3, r3, #8
 800e04c:	697a      	ldr	r2, [r7, #20]
 800e04e:	4313      	orrs	r3, r2
 800e050:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	4a28      	ldr	r2, [pc, #160]	@ (800e0f8 <TIM_OC3_SetConfig+0xfc>)
 800e056:	4293      	cmp	r3, r2
 800e058:	d003      	beq.n	800e062 <TIM_OC3_SetConfig+0x66>
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	4a27      	ldr	r2, [pc, #156]	@ (800e0fc <TIM_OC3_SetConfig+0x100>)
 800e05e:	4293      	cmp	r3, r2
 800e060:	d10d      	bne.n	800e07e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e062:	697b      	ldr	r3, [r7, #20]
 800e064:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e068:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	68db      	ldr	r3, [r3, #12]
 800e06e:	021b      	lsls	r3, r3, #8
 800e070:	697a      	ldr	r2, [r7, #20]
 800e072:	4313      	orrs	r3, r2
 800e074:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e07c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	4a1d      	ldr	r2, [pc, #116]	@ (800e0f8 <TIM_OC3_SetConfig+0xfc>)
 800e082:	4293      	cmp	r3, r2
 800e084:	d00f      	beq.n	800e0a6 <TIM_OC3_SetConfig+0xaa>
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	4a1c      	ldr	r2, [pc, #112]	@ (800e0fc <TIM_OC3_SetConfig+0x100>)
 800e08a:	4293      	cmp	r3, r2
 800e08c:	d00b      	beq.n	800e0a6 <TIM_OC3_SetConfig+0xaa>
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	4a1b      	ldr	r2, [pc, #108]	@ (800e100 <TIM_OC3_SetConfig+0x104>)
 800e092:	4293      	cmp	r3, r2
 800e094:	d007      	beq.n	800e0a6 <TIM_OC3_SetConfig+0xaa>
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	4a1a      	ldr	r2, [pc, #104]	@ (800e104 <TIM_OC3_SetConfig+0x108>)
 800e09a:	4293      	cmp	r3, r2
 800e09c:	d003      	beq.n	800e0a6 <TIM_OC3_SetConfig+0xaa>
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	4a19      	ldr	r2, [pc, #100]	@ (800e108 <TIM_OC3_SetConfig+0x10c>)
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	d113      	bne.n	800e0ce <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e0a6:	693b      	ldr	r3, [r7, #16]
 800e0a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e0ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e0ae:	693b      	ldr	r3, [r7, #16]
 800e0b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e0b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	695b      	ldr	r3, [r3, #20]
 800e0ba:	011b      	lsls	r3, r3, #4
 800e0bc:	693a      	ldr	r2, [r7, #16]
 800e0be:	4313      	orrs	r3, r2
 800e0c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	699b      	ldr	r3, [r3, #24]
 800e0c6:	011b      	lsls	r3, r3, #4
 800e0c8:	693a      	ldr	r2, [r7, #16]
 800e0ca:	4313      	orrs	r3, r2
 800e0cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	693a      	ldr	r2, [r7, #16]
 800e0d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	68fa      	ldr	r2, [r7, #12]
 800e0d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	685a      	ldr	r2, [r3, #4]
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	697a      	ldr	r2, [r7, #20]
 800e0e6:	621a      	str	r2, [r3, #32]
}
 800e0e8:	bf00      	nop
 800e0ea:	371c      	adds	r7, #28
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f2:	4770      	bx	lr
 800e0f4:	fffeff8f 	.word	0xfffeff8f
 800e0f8:	40010000 	.word	0x40010000
 800e0fc:	40010400 	.word	0x40010400
 800e100:	40014000 	.word	0x40014000
 800e104:	40014400 	.word	0x40014400
 800e108:	40014800 	.word	0x40014800

0800e10c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e10c:	b480      	push	{r7}
 800e10e:	b087      	sub	sp, #28
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
 800e114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	6a1b      	ldr	r3, [r3, #32]
 800e11a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	6a1b      	ldr	r3, [r3, #32]
 800e120:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	685b      	ldr	r3, [r3, #4]
 800e12c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	69db      	ldr	r3, [r3, #28]
 800e132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e134:	68fa      	ldr	r2, [r7, #12]
 800e136:	4b24      	ldr	r3, [pc, #144]	@ (800e1c8 <TIM_OC4_SetConfig+0xbc>)
 800e138:	4013      	ands	r3, r2
 800e13a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e142:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	021b      	lsls	r3, r3, #8
 800e14a:	68fa      	ldr	r2, [r7, #12]
 800e14c:	4313      	orrs	r3, r2
 800e14e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e156:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	689b      	ldr	r3, [r3, #8]
 800e15c:	031b      	lsls	r3, r3, #12
 800e15e:	693a      	ldr	r2, [r7, #16]
 800e160:	4313      	orrs	r3, r2
 800e162:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	4a19      	ldr	r2, [pc, #100]	@ (800e1cc <TIM_OC4_SetConfig+0xc0>)
 800e168:	4293      	cmp	r3, r2
 800e16a:	d00f      	beq.n	800e18c <TIM_OC4_SetConfig+0x80>
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	4a18      	ldr	r2, [pc, #96]	@ (800e1d0 <TIM_OC4_SetConfig+0xc4>)
 800e170:	4293      	cmp	r3, r2
 800e172:	d00b      	beq.n	800e18c <TIM_OC4_SetConfig+0x80>
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	4a17      	ldr	r2, [pc, #92]	@ (800e1d4 <TIM_OC4_SetConfig+0xc8>)
 800e178:	4293      	cmp	r3, r2
 800e17a:	d007      	beq.n	800e18c <TIM_OC4_SetConfig+0x80>
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	4a16      	ldr	r2, [pc, #88]	@ (800e1d8 <TIM_OC4_SetConfig+0xcc>)
 800e180:	4293      	cmp	r3, r2
 800e182:	d003      	beq.n	800e18c <TIM_OC4_SetConfig+0x80>
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	4a15      	ldr	r2, [pc, #84]	@ (800e1dc <TIM_OC4_SetConfig+0xd0>)
 800e188:	4293      	cmp	r3, r2
 800e18a:	d109      	bne.n	800e1a0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e18c:	697b      	ldr	r3, [r7, #20]
 800e18e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e192:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	695b      	ldr	r3, [r3, #20]
 800e198:	019b      	lsls	r3, r3, #6
 800e19a:	697a      	ldr	r2, [r7, #20]
 800e19c:	4313      	orrs	r3, r2
 800e19e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	697a      	ldr	r2, [r7, #20]
 800e1a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	68fa      	ldr	r2, [r7, #12]
 800e1aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	685a      	ldr	r2, [r3, #4]
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	693a      	ldr	r2, [r7, #16]
 800e1b8:	621a      	str	r2, [r3, #32]
}
 800e1ba:	bf00      	nop
 800e1bc:	371c      	adds	r7, #28
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c4:	4770      	bx	lr
 800e1c6:	bf00      	nop
 800e1c8:	feff8fff 	.word	0xfeff8fff
 800e1cc:	40010000 	.word	0x40010000
 800e1d0:	40010400 	.word	0x40010400
 800e1d4:	40014000 	.word	0x40014000
 800e1d8:	40014400 	.word	0x40014400
 800e1dc:	40014800 	.word	0x40014800

0800e1e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e1e0:	b480      	push	{r7}
 800e1e2:	b087      	sub	sp, #28
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6a1b      	ldr	r3, [r3, #32]
 800e1ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	6a1b      	ldr	r3, [r3, #32]
 800e1f4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	685b      	ldr	r3, [r3, #4]
 800e200:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e208:	68fa      	ldr	r2, [r7, #12]
 800e20a:	4b21      	ldr	r3, [pc, #132]	@ (800e290 <TIM_OC5_SetConfig+0xb0>)
 800e20c:	4013      	ands	r3, r2
 800e20e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	68fa      	ldr	r2, [r7, #12]
 800e216:	4313      	orrs	r3, r2
 800e218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e21a:	693b      	ldr	r3, [r7, #16]
 800e21c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e220:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	689b      	ldr	r3, [r3, #8]
 800e226:	041b      	lsls	r3, r3, #16
 800e228:	693a      	ldr	r2, [r7, #16]
 800e22a:	4313      	orrs	r3, r2
 800e22c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	4a18      	ldr	r2, [pc, #96]	@ (800e294 <TIM_OC5_SetConfig+0xb4>)
 800e232:	4293      	cmp	r3, r2
 800e234:	d00f      	beq.n	800e256 <TIM_OC5_SetConfig+0x76>
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	4a17      	ldr	r2, [pc, #92]	@ (800e298 <TIM_OC5_SetConfig+0xb8>)
 800e23a:	4293      	cmp	r3, r2
 800e23c:	d00b      	beq.n	800e256 <TIM_OC5_SetConfig+0x76>
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	4a16      	ldr	r2, [pc, #88]	@ (800e29c <TIM_OC5_SetConfig+0xbc>)
 800e242:	4293      	cmp	r3, r2
 800e244:	d007      	beq.n	800e256 <TIM_OC5_SetConfig+0x76>
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	4a15      	ldr	r2, [pc, #84]	@ (800e2a0 <TIM_OC5_SetConfig+0xc0>)
 800e24a:	4293      	cmp	r3, r2
 800e24c:	d003      	beq.n	800e256 <TIM_OC5_SetConfig+0x76>
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	4a14      	ldr	r2, [pc, #80]	@ (800e2a4 <TIM_OC5_SetConfig+0xc4>)
 800e252:	4293      	cmp	r3, r2
 800e254:	d109      	bne.n	800e26a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e25c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	695b      	ldr	r3, [r3, #20]
 800e262:	021b      	lsls	r3, r3, #8
 800e264:	697a      	ldr	r2, [r7, #20]
 800e266:	4313      	orrs	r3, r2
 800e268:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	697a      	ldr	r2, [r7, #20]
 800e26e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	68fa      	ldr	r2, [r7, #12]
 800e274:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	685a      	ldr	r2, [r3, #4]
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	693a      	ldr	r2, [r7, #16]
 800e282:	621a      	str	r2, [r3, #32]
}
 800e284:	bf00      	nop
 800e286:	371c      	adds	r7, #28
 800e288:	46bd      	mov	sp, r7
 800e28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28e:	4770      	bx	lr
 800e290:	fffeff8f 	.word	0xfffeff8f
 800e294:	40010000 	.word	0x40010000
 800e298:	40010400 	.word	0x40010400
 800e29c:	40014000 	.word	0x40014000
 800e2a0:	40014400 	.word	0x40014400
 800e2a4:	40014800 	.word	0x40014800

0800e2a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b087      	sub	sp, #28
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
 800e2b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6a1b      	ldr	r3, [r3, #32]
 800e2b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6a1b      	ldr	r3, [r3, #32]
 800e2bc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	685b      	ldr	r3, [r3, #4]
 800e2c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e2ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e2d0:	68fa      	ldr	r2, [r7, #12]
 800e2d2:	4b22      	ldr	r3, [pc, #136]	@ (800e35c <TIM_OC6_SetConfig+0xb4>)
 800e2d4:	4013      	ands	r3, r2
 800e2d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	021b      	lsls	r3, r3, #8
 800e2de:	68fa      	ldr	r2, [r7, #12]
 800e2e0:	4313      	orrs	r3, r2
 800e2e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e2e4:	693b      	ldr	r3, [r7, #16]
 800e2e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e2ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	689b      	ldr	r3, [r3, #8]
 800e2f0:	051b      	lsls	r3, r3, #20
 800e2f2:	693a      	ldr	r2, [r7, #16]
 800e2f4:	4313      	orrs	r3, r2
 800e2f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	4a19      	ldr	r2, [pc, #100]	@ (800e360 <TIM_OC6_SetConfig+0xb8>)
 800e2fc:	4293      	cmp	r3, r2
 800e2fe:	d00f      	beq.n	800e320 <TIM_OC6_SetConfig+0x78>
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	4a18      	ldr	r2, [pc, #96]	@ (800e364 <TIM_OC6_SetConfig+0xbc>)
 800e304:	4293      	cmp	r3, r2
 800e306:	d00b      	beq.n	800e320 <TIM_OC6_SetConfig+0x78>
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	4a17      	ldr	r2, [pc, #92]	@ (800e368 <TIM_OC6_SetConfig+0xc0>)
 800e30c:	4293      	cmp	r3, r2
 800e30e:	d007      	beq.n	800e320 <TIM_OC6_SetConfig+0x78>
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	4a16      	ldr	r2, [pc, #88]	@ (800e36c <TIM_OC6_SetConfig+0xc4>)
 800e314:	4293      	cmp	r3, r2
 800e316:	d003      	beq.n	800e320 <TIM_OC6_SetConfig+0x78>
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	4a15      	ldr	r2, [pc, #84]	@ (800e370 <TIM_OC6_SetConfig+0xc8>)
 800e31c:	4293      	cmp	r3, r2
 800e31e:	d109      	bne.n	800e334 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e320:	697b      	ldr	r3, [r7, #20]
 800e322:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e326:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	695b      	ldr	r3, [r3, #20]
 800e32c:	029b      	lsls	r3, r3, #10
 800e32e:	697a      	ldr	r2, [r7, #20]
 800e330:	4313      	orrs	r3, r2
 800e332:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	697a      	ldr	r2, [r7, #20]
 800e338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	68fa      	ldr	r2, [r7, #12]
 800e33e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	685a      	ldr	r2, [r3, #4]
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	693a      	ldr	r2, [r7, #16]
 800e34c:	621a      	str	r2, [r3, #32]
}
 800e34e:	bf00      	nop
 800e350:	371c      	adds	r7, #28
 800e352:	46bd      	mov	sp, r7
 800e354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e358:	4770      	bx	lr
 800e35a:	bf00      	nop
 800e35c:	feff8fff 	.word	0xfeff8fff
 800e360:	40010000 	.word	0x40010000
 800e364:	40010400 	.word	0x40010400
 800e368:	40014000 	.word	0x40014000
 800e36c:	40014400 	.word	0x40014400
 800e370:	40014800 	.word	0x40014800

0800e374 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e374:	b480      	push	{r7}
 800e376:	b087      	sub	sp, #28
 800e378:	af00      	add	r7, sp, #0
 800e37a:	60f8      	str	r0, [r7, #12]
 800e37c:	60b9      	str	r1, [r7, #8]
 800e37e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e380:	68bb      	ldr	r3, [r7, #8]
 800e382:	f003 031f 	and.w	r3, r3, #31
 800e386:	2201      	movs	r2, #1
 800e388:	fa02 f303 	lsl.w	r3, r2, r3
 800e38c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	6a1a      	ldr	r2, [r3, #32]
 800e392:	697b      	ldr	r3, [r7, #20]
 800e394:	43db      	mvns	r3, r3
 800e396:	401a      	ands	r2, r3
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	6a1a      	ldr	r2, [r3, #32]
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	f003 031f 	and.w	r3, r3, #31
 800e3a6:	6879      	ldr	r1, [r7, #4]
 800e3a8:	fa01 f303 	lsl.w	r3, r1, r3
 800e3ac:	431a      	orrs	r2, r3
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	621a      	str	r2, [r3, #32]
}
 800e3b2:	bf00      	nop
 800e3b4:	371c      	adds	r7, #28
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3bc:	4770      	bx	lr
	...

0800e3c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e3c0:	b480      	push	{r7}
 800e3c2:	b085      	sub	sp, #20
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
 800e3c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e3d0:	2b01      	cmp	r3, #1
 800e3d2:	d101      	bne.n	800e3d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e3d4:	2302      	movs	r3, #2
 800e3d6:	e06d      	b.n	800e4b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2201      	movs	r2, #1
 800e3dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2202      	movs	r2, #2
 800e3e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	685b      	ldr	r3, [r3, #4]
 800e3ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	689b      	ldr	r3, [r3, #8]
 800e3f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	4a30      	ldr	r2, [pc, #192]	@ (800e4c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e3fe:	4293      	cmp	r3, r2
 800e400:	d004      	beq.n	800e40c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	4a2f      	ldr	r2, [pc, #188]	@ (800e4c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e408:	4293      	cmp	r3, r2
 800e40a:	d108      	bne.n	800e41e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e412:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	685b      	ldr	r3, [r3, #4]
 800e418:	68fa      	ldr	r2, [r7, #12]
 800e41a:	4313      	orrs	r3, r2
 800e41c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e424:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	68fa      	ldr	r2, [r7, #12]
 800e42c:	4313      	orrs	r3, r2
 800e42e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	68fa      	ldr	r2, [r7, #12]
 800e436:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	4a20      	ldr	r2, [pc, #128]	@ (800e4c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e43e:	4293      	cmp	r3, r2
 800e440:	d022      	beq.n	800e488 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e44a:	d01d      	beq.n	800e488 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	4a1d      	ldr	r2, [pc, #116]	@ (800e4c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e452:	4293      	cmp	r3, r2
 800e454:	d018      	beq.n	800e488 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	4a1c      	ldr	r2, [pc, #112]	@ (800e4cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e45c:	4293      	cmp	r3, r2
 800e45e:	d013      	beq.n	800e488 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	4a1a      	ldr	r2, [pc, #104]	@ (800e4d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e466:	4293      	cmp	r3, r2
 800e468:	d00e      	beq.n	800e488 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	4a15      	ldr	r2, [pc, #84]	@ (800e4c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e470:	4293      	cmp	r3, r2
 800e472:	d009      	beq.n	800e488 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	4a16      	ldr	r2, [pc, #88]	@ (800e4d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e47a:	4293      	cmp	r3, r2
 800e47c:	d004      	beq.n	800e488 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	4a15      	ldr	r2, [pc, #84]	@ (800e4d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e484:	4293      	cmp	r3, r2
 800e486:	d10c      	bne.n	800e4a2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e488:	68bb      	ldr	r3, [r7, #8]
 800e48a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e48e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	689b      	ldr	r3, [r3, #8]
 800e494:	68ba      	ldr	r2, [r7, #8]
 800e496:	4313      	orrs	r3, r2
 800e498:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	68ba      	ldr	r2, [r7, #8]
 800e4a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2201      	movs	r2, #1
 800e4a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e4b2:	2300      	movs	r3, #0
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	3714      	adds	r7, #20
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4be:	4770      	bx	lr
 800e4c0:	40010000 	.word	0x40010000
 800e4c4:	40010400 	.word	0x40010400
 800e4c8:	40000400 	.word	0x40000400
 800e4cc:	40000800 	.word	0x40000800
 800e4d0:	40000c00 	.word	0x40000c00
 800e4d4:	40001800 	.word	0x40001800
 800e4d8:	40014000 	.word	0x40014000

0800e4dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e4dc:	b480      	push	{r7}
 800e4de:	b083      	sub	sp, #12
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e4e4:	bf00      	nop
 800e4e6:	370c      	adds	r7, #12
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ee:	4770      	bx	lr

0800e4f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e4f0:	b480      	push	{r7}
 800e4f2:	b083      	sub	sp, #12
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e4f8:	bf00      	nop
 800e4fa:	370c      	adds	r7, #12
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e502:	4770      	bx	lr

0800e504 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e504:	b480      	push	{r7}
 800e506:	b083      	sub	sp, #12
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e50c:	bf00      	nop
 800e50e:	370c      	adds	r7, #12
 800e510:	46bd      	mov	sp, r7
 800e512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e516:	4770      	bx	lr

0800e518 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b082      	sub	sp, #8
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d101      	bne.n	800e52a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e526:	2301      	movs	r3, #1
 800e528:	e042      	b.n	800e5b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e530:	2b00      	cmp	r3, #0
 800e532:	d106      	bne.n	800e542 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2200      	movs	r2, #0
 800e538:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	f7f6 fdd1 	bl	80050e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	2224      	movs	r2, #36	@ 0x24
 800e546:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	681a      	ldr	r2, [r3, #0]
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	f022 0201 	bic.w	r2, r2, #1
 800e558:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d002      	beq.n	800e568 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	f001 fdc2 	bl	80100ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e568:	6878      	ldr	r0, [r7, #4]
 800e56a:	f000 ff53 	bl	800f414 <UART_SetConfig>
 800e56e:	4603      	mov	r3, r0
 800e570:	2b01      	cmp	r3, #1
 800e572:	d101      	bne.n	800e578 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e574:	2301      	movs	r3, #1
 800e576:	e01b      	b.n	800e5b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	685a      	ldr	r2, [r3, #4]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e586:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	689a      	ldr	r2, [r3, #8]
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e596:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	681a      	ldr	r2, [r3, #0]
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	f042 0201 	orr.w	r2, r2, #1
 800e5a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	f001 fe41 	bl	8010230 <UART_CheckIdleState>
 800e5ae:	4603      	mov	r3, r0
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3708      	adds	r7, #8
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}

0800e5b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b08a      	sub	sp, #40	@ 0x28
 800e5bc:	af02      	add	r7, sp, #8
 800e5be:	60f8      	str	r0, [r7, #12]
 800e5c0:	60b9      	str	r1, [r7, #8]
 800e5c2:	603b      	str	r3, [r7, #0]
 800e5c4:	4613      	mov	r3, r2
 800e5c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e5ce:	2b20      	cmp	r3, #32
 800e5d0:	d17b      	bne.n	800e6ca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e5d2:	68bb      	ldr	r3, [r7, #8]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d002      	beq.n	800e5de <HAL_UART_Transmit+0x26>
 800e5d8:	88fb      	ldrh	r3, [r7, #6]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d101      	bne.n	800e5e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e5de:	2301      	movs	r3, #1
 800e5e0:	e074      	b.n	800e6cc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	2221      	movs	r2, #33	@ 0x21
 800e5ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e5f2:	f7f7 f847 	bl	8005684 <HAL_GetTick>
 800e5f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	88fa      	ldrh	r2, [r7, #6]
 800e5fc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	88fa      	ldrh	r2, [r7, #6]
 800e604:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	689b      	ldr	r3, [r3, #8]
 800e60c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e610:	d108      	bne.n	800e624 <HAL_UART_Transmit+0x6c>
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	691b      	ldr	r3, [r3, #16]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d104      	bne.n	800e624 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e61a:	2300      	movs	r3, #0
 800e61c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	61bb      	str	r3, [r7, #24]
 800e622:	e003      	b.n	800e62c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e628:	2300      	movs	r3, #0
 800e62a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e62c:	e030      	b.n	800e690 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	9300      	str	r3, [sp, #0]
 800e632:	697b      	ldr	r3, [r7, #20]
 800e634:	2200      	movs	r2, #0
 800e636:	2180      	movs	r1, #128	@ 0x80
 800e638:	68f8      	ldr	r0, [r7, #12]
 800e63a:	f001 fea3 	bl	8010384 <UART_WaitOnFlagUntilTimeout>
 800e63e:	4603      	mov	r3, r0
 800e640:	2b00      	cmp	r3, #0
 800e642:	d005      	beq.n	800e650 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	2220      	movs	r2, #32
 800e648:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800e64c:	2303      	movs	r3, #3
 800e64e:	e03d      	b.n	800e6cc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e650:	69fb      	ldr	r3, [r7, #28]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d10b      	bne.n	800e66e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e656:	69bb      	ldr	r3, [r7, #24]
 800e658:	881b      	ldrh	r3, [r3, #0]
 800e65a:	461a      	mov	r2, r3
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e664:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e666:	69bb      	ldr	r3, [r7, #24]
 800e668:	3302      	adds	r3, #2
 800e66a:	61bb      	str	r3, [r7, #24]
 800e66c:	e007      	b.n	800e67e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e66e:	69fb      	ldr	r3, [r7, #28]
 800e670:	781a      	ldrb	r2, [r3, #0]
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e678:	69fb      	ldr	r3, [r7, #28]
 800e67a:	3301      	adds	r3, #1
 800e67c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e684:	b29b      	uxth	r3, r3
 800e686:	3b01      	subs	r3, #1
 800e688:	b29a      	uxth	r2, r3
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e696:	b29b      	uxth	r3, r3
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d1c8      	bne.n	800e62e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	9300      	str	r3, [sp, #0]
 800e6a0:	697b      	ldr	r3, [r7, #20]
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	2140      	movs	r1, #64	@ 0x40
 800e6a6:	68f8      	ldr	r0, [r7, #12]
 800e6a8:	f001 fe6c 	bl	8010384 <UART_WaitOnFlagUntilTimeout>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d005      	beq.n	800e6be <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	2220      	movs	r2, #32
 800e6b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800e6ba:	2303      	movs	r3, #3
 800e6bc:	e006      	b.n	800e6cc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	2220      	movs	r2, #32
 800e6c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	e000      	b.n	800e6cc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e6ca:	2302      	movs	r3, #2
  }
}
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	3720      	adds	r7, #32
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}

0800e6d4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e6d4:	b480      	push	{r7}
 800e6d6:	b091      	sub	sp, #68	@ 0x44
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	60f8      	str	r0, [r7, #12]
 800e6dc:	60b9      	str	r1, [r7, #8]
 800e6de:	4613      	mov	r3, r2
 800e6e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e6e8:	2b20      	cmp	r3, #32
 800e6ea:	d178      	bne.n	800e7de <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d002      	beq.n	800e6f8 <HAL_UART_Transmit_IT+0x24>
 800e6f2:	88fb      	ldrh	r3, [r7, #6]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d101      	bne.n	800e6fc <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800e6f8:	2301      	movs	r3, #1
 800e6fa:	e071      	b.n	800e7e0 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	68ba      	ldr	r2, [r7, #8]
 800e700:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	88fa      	ldrh	r2, [r7, #6]
 800e706:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	88fa      	ldrh	r2, [r7, #6]
 800e70e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	2200      	movs	r2, #0
 800e716:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	2200      	movs	r2, #0
 800e71c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	2221      	movs	r2, #33	@ 0x21
 800e724:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e72c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e730:	d12a      	bne.n	800e788 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	689b      	ldr	r3, [r3, #8]
 800e736:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e73a:	d107      	bne.n	800e74c <HAL_UART_Transmit_IT+0x78>
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	691b      	ldr	r3, [r3, #16]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d103      	bne.n	800e74c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	4a29      	ldr	r2, [pc, #164]	@ (800e7ec <HAL_UART_Transmit_IT+0x118>)
 800e748:	679a      	str	r2, [r3, #120]	@ 0x78
 800e74a:	e002      	b.n	800e752 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	4a28      	ldr	r2, [pc, #160]	@ (800e7f0 <HAL_UART_Transmit_IT+0x11c>)
 800e750:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	3308      	adds	r3, #8
 800e758:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e75a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e75c:	e853 3f00 	ldrex	r3, [r3]
 800e760:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e764:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e768:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	3308      	adds	r3, #8
 800e770:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e772:	637a      	str	r2, [r7, #52]	@ 0x34
 800e774:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e776:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e778:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e77a:	e841 2300 	strex	r3, r2, [r1]
 800e77e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e782:	2b00      	cmp	r3, #0
 800e784:	d1e5      	bne.n	800e752 <HAL_UART_Transmit_IT+0x7e>
 800e786:	e028      	b.n	800e7da <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	689b      	ldr	r3, [r3, #8]
 800e78c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e790:	d107      	bne.n	800e7a2 <HAL_UART_Transmit_IT+0xce>
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	691b      	ldr	r3, [r3, #16]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d103      	bne.n	800e7a2 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	4a15      	ldr	r2, [pc, #84]	@ (800e7f4 <HAL_UART_Transmit_IT+0x120>)
 800e79e:	679a      	str	r2, [r3, #120]	@ 0x78
 800e7a0:	e002      	b.n	800e7a8 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	4a14      	ldr	r2, [pc, #80]	@ (800e7f8 <HAL_UART_Transmit_IT+0x124>)
 800e7a6:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7ae:	697b      	ldr	r3, [r7, #20]
 800e7b0:	e853 3f00 	ldrex	r3, [r3]
 800e7b4:	613b      	str	r3, [r7, #16]
   return(result);
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e7bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	461a      	mov	r2, r3
 800e7c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e7c6:	623b      	str	r3, [r7, #32]
 800e7c8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7ca:	69f9      	ldr	r1, [r7, #28]
 800e7cc:	6a3a      	ldr	r2, [r7, #32]
 800e7ce:	e841 2300 	strex	r3, r2, [r1]
 800e7d2:	61bb      	str	r3, [r7, #24]
   return(result);
 800e7d4:	69bb      	ldr	r3, [r7, #24]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d1e6      	bne.n	800e7a8 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800e7da:	2300      	movs	r3, #0
 800e7dc:	e000      	b.n	800e7e0 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800e7de:	2302      	movs	r3, #2
  }
}
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	3744      	adds	r7, #68	@ 0x44
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ea:	4770      	bx	lr
 800e7ec:	08010c75 	.word	0x08010c75
 800e7f0:	08010b95 	.word	0x08010b95
 800e7f4:	08010ad3 	.word	0x08010ad3
 800e7f8:	08010a1b 	.word	0x08010a1b

0800e7fc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b08a      	sub	sp, #40	@ 0x28
 800e800:	af00      	add	r7, sp, #0
 800e802:	60f8      	str	r0, [r7, #12]
 800e804:	60b9      	str	r1, [r7, #8]
 800e806:	4613      	mov	r3, r2
 800e808:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e810:	2b20      	cmp	r3, #32
 800e812:	d137      	bne.n	800e884 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e814:	68bb      	ldr	r3, [r7, #8]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d002      	beq.n	800e820 <HAL_UART_Receive_DMA+0x24>
 800e81a:	88fb      	ldrh	r3, [r7, #6]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d101      	bne.n	800e824 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e820:	2301      	movs	r3, #1
 800e822:	e030      	b.n	800e886 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	2200      	movs	r2, #0
 800e828:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	4a18      	ldr	r2, [pc, #96]	@ (800e890 <HAL_UART_Receive_DMA+0x94>)
 800e830:	4293      	cmp	r3, r2
 800e832:	d01f      	beq.n	800e874 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	685b      	ldr	r3, [r3, #4]
 800e83a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d018      	beq.n	800e874 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e848:	697b      	ldr	r3, [r7, #20]
 800e84a:	e853 3f00 	ldrex	r3, [r3]
 800e84e:	613b      	str	r3, [r7, #16]
   return(result);
 800e850:	693b      	ldr	r3, [r7, #16]
 800e852:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e856:	627b      	str	r3, [r7, #36]	@ 0x24
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	461a      	mov	r2, r3
 800e85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e860:	623b      	str	r3, [r7, #32]
 800e862:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e864:	69f9      	ldr	r1, [r7, #28]
 800e866:	6a3a      	ldr	r2, [r7, #32]
 800e868:	e841 2300 	strex	r3, r2, [r1]
 800e86c:	61bb      	str	r3, [r7, #24]
   return(result);
 800e86e:	69bb      	ldr	r3, [r7, #24]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d1e6      	bne.n	800e842 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e874:	88fb      	ldrh	r3, [r7, #6]
 800e876:	461a      	mov	r2, r3
 800e878:	68b9      	ldr	r1, [r7, #8]
 800e87a:	68f8      	ldr	r0, [r7, #12]
 800e87c:	f001 fdf0 	bl	8010460 <UART_Start_Receive_DMA>
 800e880:	4603      	mov	r3, r0
 800e882:	e000      	b.n	800e886 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e884:	2302      	movs	r3, #2
  }
}
 800e886:	4618      	mov	r0, r3
 800e888:	3728      	adds	r7, #40	@ 0x28
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bd80      	pop	{r7, pc}
 800e88e:	bf00      	nop
 800e890:	58000c00 	.word	0x58000c00

0800e894 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b090      	sub	sp, #64	@ 0x40
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e8aa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	689b      	ldr	r3, [r3, #8]
 800e8b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e8b6:	2b80      	cmp	r3, #128	@ 0x80
 800e8b8:	d139      	bne.n	800e92e <HAL_UART_DMAStop+0x9a>
 800e8ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e8bc:	2b21      	cmp	r3, #33	@ 0x21
 800e8be:	d136      	bne.n	800e92e <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	3308      	adds	r3, #8
 800e8c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8c8:	6a3b      	ldr	r3, [r7, #32]
 800e8ca:	e853 3f00 	ldrex	r3, [r3]
 800e8ce:	61fb      	str	r3, [r7, #28]
   return(result);
 800e8d0:	69fb      	ldr	r3, [r7, #28]
 800e8d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e8d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	3308      	adds	r3, #8
 800e8de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e8e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e8e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e8e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e8e8:	e841 2300 	strex	r3, r2, [r1]
 800e8ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e8ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d1e5      	bne.n	800e8c0 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d015      	beq.n	800e928 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e900:	4618      	mov	r0, r3
 800e902:	f7f7 fe6f 	bl	80065e4 <HAL_DMA_Abort>
 800e906:	4603      	mov	r3, r0
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d00d      	beq.n	800e928 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e910:	4618      	mov	r0, r3
 800e912:	f7f9 fb2d 	bl	8007f70 <HAL_DMA_GetError>
 800e916:	4603      	mov	r3, r0
 800e918:	2b20      	cmp	r3, #32
 800e91a:	d105      	bne.n	800e928 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2210      	movs	r2, #16
 800e920:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800e924:	2303      	movs	r3, #3
 800e926:	e047      	b.n	800e9b8 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800e928:	6878      	ldr	r0, [r7, #4]
 800e92a:	f001 fe3f 	bl	80105ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	689b      	ldr	r3, [r3, #8]
 800e934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e938:	2b40      	cmp	r3, #64	@ 0x40
 800e93a:	d13c      	bne.n	800e9b6 <HAL_UART_DMAStop+0x122>
 800e93c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e93e:	2b22      	cmp	r3, #34	@ 0x22
 800e940:	d139      	bne.n	800e9b6 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	3308      	adds	r3, #8
 800e948:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	e853 3f00 	ldrex	r3, [r3]
 800e950:	60bb      	str	r3, [r7, #8]
   return(result);
 800e952:	68bb      	ldr	r3, [r7, #8]
 800e954:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e958:	633b      	str	r3, [r7, #48]	@ 0x30
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	3308      	adds	r3, #8
 800e960:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e962:	61ba      	str	r2, [r7, #24]
 800e964:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e966:	6979      	ldr	r1, [r7, #20]
 800e968:	69ba      	ldr	r2, [r7, #24]
 800e96a:	e841 2300 	strex	r3, r2, [r1]
 800e96e:	613b      	str	r3, [r7, #16]
   return(result);
 800e970:	693b      	ldr	r3, [r7, #16]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d1e5      	bne.n	800e942 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d017      	beq.n	800e9b0 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e986:	4618      	mov	r0, r3
 800e988:	f7f7 fe2c 	bl	80065e4 <HAL_DMA_Abort>
 800e98c:	4603      	mov	r3, r0
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d00e      	beq.n	800e9b0 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e998:	4618      	mov	r0, r3
 800e99a:	f7f9 fae9 	bl	8007f70 <HAL_DMA_GetError>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	2b20      	cmp	r3, #32
 800e9a2:	d105      	bne.n	800e9b0 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2210      	movs	r2, #16
 800e9a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800e9ac:	2303      	movs	r3, #3
 800e9ae:	e003      	b.n	800e9b8 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800e9b0:	6878      	ldr	r0, [r7, #4]
 800e9b2:	f001 fe3d 	bl	8010630 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800e9b6:	2300      	movs	r3, #0
}
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	3740      	adds	r7, #64	@ 0x40
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}

0800e9c0 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b0a2      	sub	sp, #136	@ 0x88
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 800e9c8:	2301      	movs	r3, #1
 800e9ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e9d6:	e853 3f00 	ldrex	r3, [r3]
 800e9da:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e9dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e9de:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800e9e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	461a      	mov	r2, r3
 800e9ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e9f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e9f2:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9f4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e9f6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e9f8:	e841 2300 	strex	r3, r2, [r1]
 800e9fc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e9fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d1e4      	bne.n	800e9ce <HAL_UART_Abort_IT+0xe>
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	3308      	adds	r3, #8
 800ea0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea0e:	e853 3f00 	ldrex	r3, [r3]
 800ea12:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ea14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ea16:	4b85      	ldr	r3, [pc, #532]	@ (800ec2c <HAL_UART_Abort_IT+0x26c>)
 800ea18:	4013      	ands	r3, r2
 800ea1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	3308      	adds	r3, #8
 800ea22:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ea24:	65ba      	str	r2, [r7, #88]	@ 0x58
 800ea26:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea28:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ea2a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ea2c:	e841 2300 	strex	r3, r2, [r1]
 800ea30:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ea32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d1e5      	bne.n	800ea04 <HAL_UART_Abort_IT+0x44>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea3c:	2b01      	cmp	r3, #1
 800ea3e:	d118      	bne.n	800ea72 <HAL_UART_Abort_IT+0xb2>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea48:	e853 3f00 	ldrex	r3, [r3]
 800ea4c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ea4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea50:	f023 0310 	bic.w	r3, r3, #16
 800ea54:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	461a      	mov	r2, r3
 800ea5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ea5e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ea60:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea62:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ea64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ea66:	e841 2300 	strex	r3, r2, [r1]
 800ea6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ea6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d1e6      	bne.n	800ea40 <HAL_UART_Abort_IT+0x80>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d00f      	beq.n	800ea9a <HAL_UART_Abort_IT+0xda>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	689b      	ldr	r3, [r3, #8]
 800ea80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ea84:	2b80      	cmp	r3, #128	@ 0x80
 800ea86:	d104      	bne.n	800ea92 <HAL_UART_Abort_IT+0xd2>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ea8c:	4a68      	ldr	r2, [pc, #416]	@ (800ec30 <HAL_UART_Abort_IT+0x270>)
 800ea8e:	651a      	str	r2, [r3, #80]	@ 0x50
 800ea90:	e003      	b.n	800ea9a <HAL_UART_Abort_IT+0xda>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ea96:	2200      	movs	r2, #0
 800ea98:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d011      	beq.n	800eac8 <HAL_UART_Abort_IT+0x108>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	689b      	ldr	r3, [r3, #8]
 800eaaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eaae:	2b40      	cmp	r3, #64	@ 0x40
 800eab0:	d105      	bne.n	800eabe <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eab8:	4a5e      	ldr	r2, [pc, #376]	@ (800ec34 <HAL_UART_Abort_IT+0x274>)
 800eaba:	651a      	str	r2, [r3, #80]	@ 0x50
 800eabc:	e004      	b.n	800eac8 <HAL_UART_Abort_IT+0x108>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eac4:	2200      	movs	r2, #0
 800eac6:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	689b      	ldr	r3, [r3, #8]
 800eace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ead2:	2b80      	cmp	r3, #128	@ 0x80
 800ead4:	d12d      	bne.n	800eb32 <HAL_UART_Abort_IT+0x172>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	3308      	adds	r3, #8
 800eadc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eae0:	e853 3f00 	ldrex	r3, [r3]
 800eae4:	623b      	str	r3, [r7, #32]
   return(result);
 800eae6:	6a3b      	ldr	r3, [r7, #32]
 800eae8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eaec:	677b      	str	r3, [r7, #116]	@ 0x74
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	3308      	adds	r3, #8
 800eaf4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800eaf6:	633a      	str	r2, [r7, #48]	@ 0x30
 800eaf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eafa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800eafc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eafe:	e841 2300 	strex	r3, r2, [r1]
 800eb02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800eb04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d1e5      	bne.n	800ead6 <HAL_UART_Abort_IT+0x116>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d00f      	beq.n	800eb32 <HAL_UART_Abort_IT+0x172>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eb16:	4618      	mov	r0, r3
 800eb18:	f7f8 f882 	bl	8006c20 <HAL_DMA_Abort_IT>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d004      	beq.n	800eb2c <HAL_UART_Abort_IT+0x16c>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eb26:	2200      	movs	r2, #0
 800eb28:	651a      	str	r2, [r3, #80]	@ 0x50
 800eb2a:	e002      	b.n	800eb32 <HAL_UART_Abort_IT+0x172>
      }
      else
      {
        abortcplt = 0U;
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	689b      	ldr	r3, [r3, #8]
 800eb38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb3c:	2b40      	cmp	r3, #64	@ 0x40
 800eb3e:	d133      	bne.n	800eba8 <HAL_UART_Abort_IT+0x1e8>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	3308      	adds	r3, #8
 800eb46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb48:	693b      	ldr	r3, [r7, #16]
 800eb4a:	e853 3f00 	ldrex	r3, [r3]
 800eb4e:	60fb      	str	r3, [r7, #12]
   return(result);
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eb56:	673b      	str	r3, [r7, #112]	@ 0x70
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	3308      	adds	r3, #8
 800eb5e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800eb60:	61fa      	str	r2, [r7, #28]
 800eb62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb64:	69b9      	ldr	r1, [r7, #24]
 800eb66:	69fa      	ldr	r2, [r7, #28]
 800eb68:	e841 2300 	strex	r3, r2, [r1]
 800eb6c:	617b      	str	r3, [r7, #20]
   return(result);
 800eb6e:	697b      	ldr	r3, [r7, #20]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d1e5      	bne.n	800eb40 <HAL_UART_Abort_IT+0x180>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d014      	beq.n	800eba8 <HAL_UART_Abort_IT+0x1e8>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eb84:	4618      	mov	r0, r3
 800eb86:	f7f8 f84b 	bl	8006c20 <HAL_DMA_Abort_IT>
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d008      	beq.n	800eba2 <HAL_UART_Abort_IT+0x1e2>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eb96:	2200      	movs	r2, #0
 800eb98:	651a      	str	r2, [r3, #80]	@ 0x50
        abortcplt = 1U;
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800eba0:	e002      	b.n	800eba8 <HAL_UART_Abort_IT+0x1e8>
      }
      else
      {
        abortcplt = 0U;
 800eba2:	2300      	movs	r3, #0
 800eba4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 800eba8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ebac:	2b01      	cmp	r3, #1
 800ebae:	d138      	bne.n	800ec22 <HAL_UART_Abort_IT+0x262>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->RxXferCount = 0U;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2200      	movs	r2, #0
 800ebbc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	675a      	str	r2, [r3, #116]	@ 0x74
    huart->TxISR = NULL;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2200      	movs	r2, #0
 800ebca:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2200      	movs	r2, #0
 800ebd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	220f      	movs	r2, #15
 800ebda:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ebe0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ebe4:	d107      	bne.n	800ebf6 <HAL_UART_Abort_IT+0x236>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	699a      	ldr	r2, [r3, #24]
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	f042 0210 	orr.w	r2, r2, #16
 800ebf4:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	699a      	ldr	r2, [r3, #24]
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	f042 0208 	orr.w	r2, r2, #8
 800ec04:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	2220      	movs	r2, #32
 800ec0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    huart->RxState = HAL_UART_STATE_READY;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	2220      	movs	r2, #32
 800ec12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	2200      	movs	r2, #0
 800ec1a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800ec1c:	6878      	ldr	r0, [r7, #4]
 800ec1e:	f000 fbe3 	bl	800f3e8 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800ec22:	2300      	movs	r3, #0
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	3788      	adds	r7, #136	@ 0x88
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}
 800ec2c:	ef7ffffe 	.word	0xef7ffffe
 800ec30:	0801090f 	.word	0x0801090f
 800ec34:	0801099b 	.word	0x0801099b

0800ec38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b0ba      	sub	sp, #232	@ 0xe8
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	69db      	ldr	r3, [r3, #28]
 800ec46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	689b      	ldr	r3, [r3, #8]
 800ec5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ec5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ec62:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ec66:	4013      	ands	r3, r2
 800ec68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ec6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d11b      	bne.n	800ecac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ec74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec78:	f003 0320 	and.w	r3, r3, #32
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d015      	beq.n	800ecac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ec80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec84:	f003 0320 	and.w	r3, r3, #32
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d105      	bne.n	800ec98 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ec8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ec90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d009      	beq.n	800ecac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	f000 8377 	beq.w	800f390 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eca6:	6878      	ldr	r0, [r7, #4]
 800eca8:	4798      	blx	r3
      }
      return;
 800ecaa:	e371      	b.n	800f390 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ecac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	f000 8123 	beq.w	800eefc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ecb6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ecba:	4b8d      	ldr	r3, [pc, #564]	@ (800eef0 <HAL_UART_IRQHandler+0x2b8>)
 800ecbc:	4013      	ands	r3, r2
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d106      	bne.n	800ecd0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ecc2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ecc6:	4b8b      	ldr	r3, [pc, #556]	@ (800eef4 <HAL_UART_IRQHandler+0x2bc>)
 800ecc8:	4013      	ands	r3, r2
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	f000 8116 	beq.w	800eefc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ecd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ecd4:	f003 0301 	and.w	r3, r3, #1
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d011      	beq.n	800ed00 <HAL_UART_IRQHandler+0xc8>
 800ecdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ece0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d00b      	beq.n	800ed00 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	2201      	movs	r2, #1
 800ecee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ecf6:	f043 0201 	orr.w	r2, r3, #1
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ed00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ed04:	f003 0302 	and.w	r3, r3, #2
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d011      	beq.n	800ed30 <HAL_UART_IRQHandler+0xf8>
 800ed0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ed10:	f003 0301 	and.w	r3, r3, #1
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d00b      	beq.n	800ed30 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	2202      	movs	r2, #2
 800ed1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed26:	f043 0204 	orr.w	r2, r3, #4
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ed30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ed34:	f003 0304 	and.w	r3, r3, #4
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d011      	beq.n	800ed60 <HAL_UART_IRQHandler+0x128>
 800ed3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ed40:	f003 0301 	and.w	r3, r3, #1
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d00b      	beq.n	800ed60 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	2204      	movs	r2, #4
 800ed4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed56:	f043 0202 	orr.w	r2, r3, #2
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ed60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ed64:	f003 0308 	and.w	r3, r3, #8
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d017      	beq.n	800ed9c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ed6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ed70:	f003 0320 	and.w	r3, r3, #32
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d105      	bne.n	800ed84 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ed78:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ed7c:	4b5c      	ldr	r3, [pc, #368]	@ (800eef0 <HAL_UART_IRQHandler+0x2b8>)
 800ed7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d00b      	beq.n	800ed9c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	2208      	movs	r2, #8
 800ed8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed92:	f043 0208 	orr.w	r2, r3, #8
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ed9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eda0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d012      	beq.n	800edce <HAL_UART_IRQHandler+0x196>
 800eda8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800edac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d00c      	beq.n	800edce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800edbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800edc4:	f043 0220 	orr.w	r2, r3, #32
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	f000 82dd 	beq.w	800f394 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800edda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800edde:	f003 0320 	and.w	r3, r3, #32
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d013      	beq.n	800ee0e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ede6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800edea:	f003 0320 	and.w	r3, r3, #32
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d105      	bne.n	800edfe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800edf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800edf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d007      	beq.n	800ee0e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d003      	beq.n	800ee0e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ee0a:	6878      	ldr	r0, [r7, #4]
 800ee0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee14:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	689b      	ldr	r3, [r3, #8]
 800ee1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee22:	2b40      	cmp	r3, #64	@ 0x40
 800ee24:	d005      	beq.n	800ee32 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ee26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ee2a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d054      	beq.n	800eedc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ee32:	6878      	ldr	r0, [r7, #4]
 800ee34:	f001 fbfc 	bl	8010630 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	689b      	ldr	r3, [r3, #8]
 800ee3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee42:	2b40      	cmp	r3, #64	@ 0x40
 800ee44:	d146      	bne.n	800eed4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	3308      	adds	r3, #8
 800ee4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ee54:	e853 3f00 	ldrex	r3, [r3]
 800ee58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ee5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ee60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ee64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	3308      	adds	r3, #8
 800ee6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ee72:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ee76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ee7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ee82:	e841 2300 	strex	r3, r2, [r1]
 800ee86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ee8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d1d9      	bne.n	800ee46 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d017      	beq.n	800eecc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eea2:	4a15      	ldr	r2, [pc, #84]	@ (800eef8 <HAL_UART_IRQHandler+0x2c0>)
 800eea4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eeac:	4618      	mov	r0, r3
 800eeae:	f7f7 feb7 	bl	8006c20 <HAL_DMA_Abort_IT>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d019      	beq.n	800eeec <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eebe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eec0:	687a      	ldr	r2, [r7, #4]
 800eec2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800eec6:	4610      	mov	r0, r2
 800eec8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eeca:	e00f      	b.n	800eeec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800eecc:	6878      	ldr	r0, [r7, #4]
 800eece:	f000 fa81 	bl	800f3d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eed2:	e00b      	b.n	800eeec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800eed4:	6878      	ldr	r0, [r7, #4]
 800eed6:	f000 fa7d 	bl	800f3d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eeda:	e007      	b.n	800eeec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	f000 fa79 	bl	800f3d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	2200      	movs	r2, #0
 800eee6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800eeea:	e253      	b.n	800f394 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eeec:	bf00      	nop
    return;
 800eeee:	e251      	b.n	800f394 <HAL_UART_IRQHandler+0x75c>
 800eef0:	10000001 	.word	0x10000001
 800eef4:	04000120 	.word	0x04000120
 800eef8:	080108e3 	.word	0x080108e3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ef00:	2b01      	cmp	r3, #1
 800ef02:	f040 81e7 	bne.w	800f2d4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ef06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ef0a:	f003 0310 	and.w	r3, r3, #16
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	f000 81e0 	beq.w	800f2d4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ef14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ef18:	f003 0310 	and.w	r3, r3, #16
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	f000 81d9 	beq.w	800f2d4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	2210      	movs	r2, #16
 800ef28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	689b      	ldr	r3, [r3, #8]
 800ef30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef34:	2b40      	cmp	r3, #64	@ 0x40
 800ef36:	f040 8151 	bne.w	800f1dc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	4a96      	ldr	r2, [pc, #600]	@ (800f19c <HAL_UART_IRQHandler+0x564>)
 800ef44:	4293      	cmp	r3, r2
 800ef46:	d068      	beq.n	800f01a <HAL_UART_IRQHandler+0x3e2>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	4a93      	ldr	r2, [pc, #588]	@ (800f1a0 <HAL_UART_IRQHandler+0x568>)
 800ef52:	4293      	cmp	r3, r2
 800ef54:	d061      	beq.n	800f01a <HAL_UART_IRQHandler+0x3e2>
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	4a91      	ldr	r2, [pc, #580]	@ (800f1a4 <HAL_UART_IRQHandler+0x56c>)
 800ef60:	4293      	cmp	r3, r2
 800ef62:	d05a      	beq.n	800f01a <HAL_UART_IRQHandler+0x3e2>
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	4a8e      	ldr	r2, [pc, #568]	@ (800f1a8 <HAL_UART_IRQHandler+0x570>)
 800ef6e:	4293      	cmp	r3, r2
 800ef70:	d053      	beq.n	800f01a <HAL_UART_IRQHandler+0x3e2>
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	4a8c      	ldr	r2, [pc, #560]	@ (800f1ac <HAL_UART_IRQHandler+0x574>)
 800ef7c:	4293      	cmp	r3, r2
 800ef7e:	d04c      	beq.n	800f01a <HAL_UART_IRQHandler+0x3e2>
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	4a89      	ldr	r2, [pc, #548]	@ (800f1b0 <HAL_UART_IRQHandler+0x578>)
 800ef8a:	4293      	cmp	r3, r2
 800ef8c:	d045      	beq.n	800f01a <HAL_UART_IRQHandler+0x3e2>
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	4a87      	ldr	r2, [pc, #540]	@ (800f1b4 <HAL_UART_IRQHandler+0x57c>)
 800ef98:	4293      	cmp	r3, r2
 800ef9a:	d03e      	beq.n	800f01a <HAL_UART_IRQHandler+0x3e2>
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	4a84      	ldr	r2, [pc, #528]	@ (800f1b8 <HAL_UART_IRQHandler+0x580>)
 800efa6:	4293      	cmp	r3, r2
 800efa8:	d037      	beq.n	800f01a <HAL_UART_IRQHandler+0x3e2>
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	4a82      	ldr	r2, [pc, #520]	@ (800f1bc <HAL_UART_IRQHandler+0x584>)
 800efb4:	4293      	cmp	r3, r2
 800efb6:	d030      	beq.n	800f01a <HAL_UART_IRQHandler+0x3e2>
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	4a7f      	ldr	r2, [pc, #508]	@ (800f1c0 <HAL_UART_IRQHandler+0x588>)
 800efc2:	4293      	cmp	r3, r2
 800efc4:	d029      	beq.n	800f01a <HAL_UART_IRQHandler+0x3e2>
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	4a7d      	ldr	r2, [pc, #500]	@ (800f1c4 <HAL_UART_IRQHandler+0x58c>)
 800efd0:	4293      	cmp	r3, r2
 800efd2:	d022      	beq.n	800f01a <HAL_UART_IRQHandler+0x3e2>
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	4a7a      	ldr	r2, [pc, #488]	@ (800f1c8 <HAL_UART_IRQHandler+0x590>)
 800efde:	4293      	cmp	r3, r2
 800efe0:	d01b      	beq.n	800f01a <HAL_UART_IRQHandler+0x3e2>
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	4a78      	ldr	r2, [pc, #480]	@ (800f1cc <HAL_UART_IRQHandler+0x594>)
 800efec:	4293      	cmp	r3, r2
 800efee:	d014      	beq.n	800f01a <HAL_UART_IRQHandler+0x3e2>
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	4a75      	ldr	r2, [pc, #468]	@ (800f1d0 <HAL_UART_IRQHandler+0x598>)
 800effa:	4293      	cmp	r3, r2
 800effc:	d00d      	beq.n	800f01a <HAL_UART_IRQHandler+0x3e2>
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	4a73      	ldr	r2, [pc, #460]	@ (800f1d4 <HAL_UART_IRQHandler+0x59c>)
 800f008:	4293      	cmp	r3, r2
 800f00a:	d006      	beq.n	800f01a <HAL_UART_IRQHandler+0x3e2>
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	4a70      	ldr	r2, [pc, #448]	@ (800f1d8 <HAL_UART_IRQHandler+0x5a0>)
 800f016:	4293      	cmp	r3, r2
 800f018:	d106      	bne.n	800f028 <HAL_UART_IRQHandler+0x3f0>
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	685b      	ldr	r3, [r3, #4]
 800f024:	b29b      	uxth	r3, r3
 800f026:	e005      	b.n	800f034 <HAL_UART_IRQHandler+0x3fc>
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	685b      	ldr	r3, [r3, #4]
 800f032:	b29b      	uxth	r3, r3
 800f034:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f038:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	f000 81ab 	beq.w	800f398 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f048:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f04c:	429a      	cmp	r2, r3
 800f04e:	f080 81a3 	bcs.w	800f398 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f058:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f062:	69db      	ldr	r3, [r3, #28]
 800f064:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f068:	f000 8087 	beq.w	800f17a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f074:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f078:	e853 3f00 	ldrex	r3, [r3]
 800f07c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800f080:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f084:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f088:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	461a      	mov	r2, r3
 800f092:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f096:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f09a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f09e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f0a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f0a6:	e841 2300 	strex	r3, r2, [r1]
 800f0aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800f0ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d1da      	bne.n	800f06c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	3308      	adds	r3, #8
 800f0bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f0c0:	e853 3f00 	ldrex	r3, [r3]
 800f0c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f0c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f0c8:	f023 0301 	bic.w	r3, r3, #1
 800f0cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	3308      	adds	r3, #8
 800f0d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f0da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f0de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f0e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f0e6:	e841 2300 	strex	r3, r2, [r1]
 800f0ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f0ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d1e1      	bne.n	800f0b6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	3308      	adds	r3, #8
 800f0f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f0fc:	e853 3f00 	ldrex	r3, [r3]
 800f100:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f102:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f104:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f108:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	3308      	adds	r3, #8
 800f112:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800f116:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f118:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f11a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f11c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f11e:	e841 2300 	strex	r3, r2, [r1]
 800f122:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f124:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f126:	2b00      	cmp	r3, #0
 800f128:	d1e3      	bne.n	800f0f2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2220      	movs	r2, #32
 800f12e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	2200      	movs	r2, #0
 800f136:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f13e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f140:	e853 3f00 	ldrex	r3, [r3]
 800f144:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f146:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f148:	f023 0310 	bic.w	r3, r3, #16
 800f14c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	461a      	mov	r2, r3
 800f156:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f15a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f15c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f15e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f160:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f162:	e841 2300 	strex	r3, r2, [r1]
 800f166:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f168:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d1e4      	bne.n	800f138 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f174:	4618      	mov	r0, r3
 800f176:	f7f7 fa35 	bl	80065e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	2202      	movs	r2, #2
 800f17e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f18c:	b29b      	uxth	r3, r3
 800f18e:	1ad3      	subs	r3, r2, r3
 800f190:	b29b      	uxth	r3, r3
 800f192:	4619      	mov	r1, r3
 800f194:	6878      	ldr	r0, [r7, #4]
 800f196:	f000 f931 	bl	800f3fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f19a:	e0fd      	b.n	800f398 <HAL_UART_IRQHandler+0x760>
 800f19c:	40020010 	.word	0x40020010
 800f1a0:	40020028 	.word	0x40020028
 800f1a4:	40020040 	.word	0x40020040
 800f1a8:	40020058 	.word	0x40020058
 800f1ac:	40020070 	.word	0x40020070
 800f1b0:	40020088 	.word	0x40020088
 800f1b4:	400200a0 	.word	0x400200a0
 800f1b8:	400200b8 	.word	0x400200b8
 800f1bc:	40020410 	.word	0x40020410
 800f1c0:	40020428 	.word	0x40020428
 800f1c4:	40020440 	.word	0x40020440
 800f1c8:	40020458 	.word	0x40020458
 800f1cc:	40020470 	.word	0x40020470
 800f1d0:	40020488 	.word	0x40020488
 800f1d4:	400204a0 	.word	0x400204a0
 800f1d8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f1e8:	b29b      	uxth	r3, r3
 800f1ea:	1ad3      	subs	r3, r2, r3
 800f1ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f1f6:	b29b      	uxth	r3, r3
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	f000 80cf 	beq.w	800f39c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800f1fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f202:	2b00      	cmp	r3, #0
 800f204:	f000 80ca 	beq.w	800f39c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f20e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f210:	e853 3f00 	ldrex	r3, [r3]
 800f214:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f218:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f21c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	461a      	mov	r2, r3
 800f226:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f22a:	647b      	str	r3, [r7, #68]	@ 0x44
 800f22c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f22e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f230:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f232:	e841 2300 	strex	r3, r2, [r1]
 800f236:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d1e4      	bne.n	800f208 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	3308      	adds	r3, #8
 800f244:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f248:	e853 3f00 	ldrex	r3, [r3]
 800f24c:	623b      	str	r3, [r7, #32]
   return(result);
 800f24e:	6a3a      	ldr	r2, [r7, #32]
 800f250:	4b55      	ldr	r3, [pc, #340]	@ (800f3a8 <HAL_UART_IRQHandler+0x770>)
 800f252:	4013      	ands	r3, r2
 800f254:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	3308      	adds	r3, #8
 800f25e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f262:	633a      	str	r2, [r7, #48]	@ 0x30
 800f264:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f266:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f268:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f26a:	e841 2300 	strex	r3, r2, [r1]
 800f26e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f272:	2b00      	cmp	r3, #0
 800f274:	d1e3      	bne.n	800f23e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	2220      	movs	r2, #32
 800f27a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	2200      	movs	r2, #0
 800f282:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2200      	movs	r2, #0
 800f288:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f290:	693b      	ldr	r3, [r7, #16]
 800f292:	e853 3f00 	ldrex	r3, [r3]
 800f296:	60fb      	str	r3, [r7, #12]
   return(result);
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	f023 0310 	bic.w	r3, r3, #16
 800f29e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	461a      	mov	r2, r3
 800f2a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f2ac:	61fb      	str	r3, [r7, #28]
 800f2ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2b0:	69b9      	ldr	r1, [r7, #24]
 800f2b2:	69fa      	ldr	r2, [r7, #28]
 800f2b4:	e841 2300 	strex	r3, r2, [r1]
 800f2b8:	617b      	str	r3, [r7, #20]
   return(result);
 800f2ba:	697b      	ldr	r3, [r7, #20]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d1e4      	bne.n	800f28a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	2202      	movs	r2, #2
 800f2c4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f2c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f2ca:	4619      	mov	r1, r3
 800f2cc:	6878      	ldr	r0, [r7, #4]
 800f2ce:	f000 f895 	bl	800f3fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f2d2:	e063      	b.n	800f39c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f2d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f2d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d00e      	beq.n	800f2fe <HAL_UART_IRQHandler+0x6c6>
 800f2e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f2e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d008      	beq.n	800f2fe <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800f2f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f2f6:	6878      	ldr	r0, [r7, #4]
 800f2f8:	f001 fd5c 	bl	8010db4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f2fc:	e051      	b.n	800f3a2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f2fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f306:	2b00      	cmp	r3, #0
 800f308:	d014      	beq.n	800f334 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f30a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f30e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f312:	2b00      	cmp	r3, #0
 800f314:	d105      	bne.n	800f322 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f316:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f31a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d008      	beq.n	800f334 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f326:	2b00      	cmp	r3, #0
 800f328:	d03a      	beq.n	800f3a0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f32e:	6878      	ldr	r0, [r7, #4]
 800f330:	4798      	blx	r3
    }
    return;
 800f332:	e035      	b.n	800f3a0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d009      	beq.n	800f354 <HAL_UART_IRQHandler+0x71c>
 800f340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d003      	beq.n	800f354 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800f34c:	6878      	ldr	r0, [r7, #4]
 800f34e:	f001 fd06 	bl	8010d5e <UART_EndTransmit_IT>
    return;
 800f352:	e026      	b.n	800f3a2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f358:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d009      	beq.n	800f374 <HAL_UART_IRQHandler+0x73c>
 800f360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f364:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d003      	beq.n	800f374 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f001 fd35 	bl	8010ddc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f372:	e016      	b.n	800f3a2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f378:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d010      	beq.n	800f3a2 <HAL_UART_IRQHandler+0x76a>
 800f380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f384:	2b00      	cmp	r3, #0
 800f386:	da0c      	bge.n	800f3a2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f388:	6878      	ldr	r0, [r7, #4]
 800f38a:	f001 fd1d 	bl	8010dc8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f38e:	e008      	b.n	800f3a2 <HAL_UART_IRQHandler+0x76a>
      return;
 800f390:	bf00      	nop
 800f392:	e006      	b.n	800f3a2 <HAL_UART_IRQHandler+0x76a>
    return;
 800f394:	bf00      	nop
 800f396:	e004      	b.n	800f3a2 <HAL_UART_IRQHandler+0x76a>
      return;
 800f398:	bf00      	nop
 800f39a:	e002      	b.n	800f3a2 <HAL_UART_IRQHandler+0x76a>
      return;
 800f39c:	bf00      	nop
 800f39e:	e000      	b.n	800f3a2 <HAL_UART_IRQHandler+0x76a>
    return;
 800f3a0:	bf00      	nop
  }
}
 800f3a2:	37e8      	adds	r7, #232	@ 0xe8
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bd80      	pop	{r7, pc}
 800f3a8:	effffffe 	.word	0xeffffffe

0800f3ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f3ac:	b480      	push	{r7}
 800f3ae:	b083      	sub	sp, #12
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f3b4:	bf00      	nop
 800f3b6:	370c      	adds	r7, #12
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3be:	4770      	bx	lr

0800f3c0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f3c0:	b480      	push	{r7}
 800f3c2:	b083      	sub	sp, #12
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f3c8:	bf00      	nop
 800f3ca:	370c      	adds	r7, #12
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d2:	4770      	bx	lr

0800f3d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f3d4:	b480      	push	{r7}
 800f3d6:	b083      	sub	sp, #12
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f3dc:	bf00      	nop
 800f3de:	370c      	adds	r7, #12
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e6:	4770      	bx	lr

0800f3e8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800f3e8:	b480      	push	{r7}
 800f3ea:	b083      	sub	sp, #12
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800f3f0:	bf00      	nop
 800f3f2:	370c      	adds	r7, #12
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fa:	4770      	bx	lr

0800f3fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f3fc:	b480      	push	{r7}
 800f3fe:	b083      	sub	sp, #12
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
 800f404:	460b      	mov	r3, r1
 800f406:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f408:	bf00      	nop
 800f40a:	370c      	adds	r7, #12
 800f40c:	46bd      	mov	sp, r7
 800f40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f412:	4770      	bx	lr

0800f414 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f418:	b092      	sub	sp, #72	@ 0x48
 800f41a:	af00      	add	r7, sp, #0
 800f41c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f41e:	2300      	movs	r3, #0
 800f420:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f424:	697b      	ldr	r3, [r7, #20]
 800f426:	689a      	ldr	r2, [r3, #8]
 800f428:	697b      	ldr	r3, [r7, #20]
 800f42a:	691b      	ldr	r3, [r3, #16]
 800f42c:	431a      	orrs	r2, r3
 800f42e:	697b      	ldr	r3, [r7, #20]
 800f430:	695b      	ldr	r3, [r3, #20]
 800f432:	431a      	orrs	r2, r3
 800f434:	697b      	ldr	r3, [r7, #20]
 800f436:	69db      	ldr	r3, [r3, #28]
 800f438:	4313      	orrs	r3, r2
 800f43a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f43c:	697b      	ldr	r3, [r7, #20]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	681a      	ldr	r2, [r3, #0]
 800f442:	4bbe      	ldr	r3, [pc, #760]	@ (800f73c <UART_SetConfig+0x328>)
 800f444:	4013      	ands	r3, r2
 800f446:	697a      	ldr	r2, [r7, #20]
 800f448:	6812      	ldr	r2, [r2, #0]
 800f44a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f44c:	430b      	orrs	r3, r1
 800f44e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f450:	697b      	ldr	r3, [r7, #20]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	685b      	ldr	r3, [r3, #4]
 800f456:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f45a:	697b      	ldr	r3, [r7, #20]
 800f45c:	68da      	ldr	r2, [r3, #12]
 800f45e:	697b      	ldr	r3, [r7, #20]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	430a      	orrs	r2, r1
 800f464:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f466:	697b      	ldr	r3, [r7, #20]
 800f468:	699b      	ldr	r3, [r3, #24]
 800f46a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f46c:	697b      	ldr	r3, [r7, #20]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	4ab3      	ldr	r2, [pc, #716]	@ (800f740 <UART_SetConfig+0x32c>)
 800f472:	4293      	cmp	r3, r2
 800f474:	d004      	beq.n	800f480 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f476:	697b      	ldr	r3, [r7, #20]
 800f478:	6a1b      	ldr	r3, [r3, #32]
 800f47a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f47c:	4313      	orrs	r3, r2
 800f47e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f480:	697b      	ldr	r3, [r7, #20]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	689a      	ldr	r2, [r3, #8]
 800f486:	4baf      	ldr	r3, [pc, #700]	@ (800f744 <UART_SetConfig+0x330>)
 800f488:	4013      	ands	r3, r2
 800f48a:	697a      	ldr	r2, [r7, #20]
 800f48c:	6812      	ldr	r2, [r2, #0]
 800f48e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f490:	430b      	orrs	r3, r1
 800f492:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f49a:	f023 010f 	bic.w	r1, r3, #15
 800f49e:	697b      	ldr	r3, [r7, #20]
 800f4a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f4a2:	697b      	ldr	r3, [r7, #20]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	430a      	orrs	r2, r1
 800f4a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f4aa:	697b      	ldr	r3, [r7, #20]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	4aa6      	ldr	r2, [pc, #664]	@ (800f748 <UART_SetConfig+0x334>)
 800f4b0:	4293      	cmp	r3, r2
 800f4b2:	d177      	bne.n	800f5a4 <UART_SetConfig+0x190>
 800f4b4:	4ba5      	ldr	r3, [pc, #660]	@ (800f74c <UART_SetConfig+0x338>)
 800f4b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f4b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f4bc:	2b28      	cmp	r3, #40	@ 0x28
 800f4be:	d86d      	bhi.n	800f59c <UART_SetConfig+0x188>
 800f4c0:	a201      	add	r2, pc, #4	@ (adr r2, 800f4c8 <UART_SetConfig+0xb4>)
 800f4c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4c6:	bf00      	nop
 800f4c8:	0800f56d 	.word	0x0800f56d
 800f4cc:	0800f59d 	.word	0x0800f59d
 800f4d0:	0800f59d 	.word	0x0800f59d
 800f4d4:	0800f59d 	.word	0x0800f59d
 800f4d8:	0800f59d 	.word	0x0800f59d
 800f4dc:	0800f59d 	.word	0x0800f59d
 800f4e0:	0800f59d 	.word	0x0800f59d
 800f4e4:	0800f59d 	.word	0x0800f59d
 800f4e8:	0800f575 	.word	0x0800f575
 800f4ec:	0800f59d 	.word	0x0800f59d
 800f4f0:	0800f59d 	.word	0x0800f59d
 800f4f4:	0800f59d 	.word	0x0800f59d
 800f4f8:	0800f59d 	.word	0x0800f59d
 800f4fc:	0800f59d 	.word	0x0800f59d
 800f500:	0800f59d 	.word	0x0800f59d
 800f504:	0800f59d 	.word	0x0800f59d
 800f508:	0800f57d 	.word	0x0800f57d
 800f50c:	0800f59d 	.word	0x0800f59d
 800f510:	0800f59d 	.word	0x0800f59d
 800f514:	0800f59d 	.word	0x0800f59d
 800f518:	0800f59d 	.word	0x0800f59d
 800f51c:	0800f59d 	.word	0x0800f59d
 800f520:	0800f59d 	.word	0x0800f59d
 800f524:	0800f59d 	.word	0x0800f59d
 800f528:	0800f585 	.word	0x0800f585
 800f52c:	0800f59d 	.word	0x0800f59d
 800f530:	0800f59d 	.word	0x0800f59d
 800f534:	0800f59d 	.word	0x0800f59d
 800f538:	0800f59d 	.word	0x0800f59d
 800f53c:	0800f59d 	.word	0x0800f59d
 800f540:	0800f59d 	.word	0x0800f59d
 800f544:	0800f59d 	.word	0x0800f59d
 800f548:	0800f58d 	.word	0x0800f58d
 800f54c:	0800f59d 	.word	0x0800f59d
 800f550:	0800f59d 	.word	0x0800f59d
 800f554:	0800f59d 	.word	0x0800f59d
 800f558:	0800f59d 	.word	0x0800f59d
 800f55c:	0800f59d 	.word	0x0800f59d
 800f560:	0800f59d 	.word	0x0800f59d
 800f564:	0800f59d 	.word	0x0800f59d
 800f568:	0800f595 	.word	0x0800f595
 800f56c:	2301      	movs	r3, #1
 800f56e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f572:	e326      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f574:	2304      	movs	r3, #4
 800f576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f57a:	e322      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f57c:	2308      	movs	r3, #8
 800f57e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f582:	e31e      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f584:	2310      	movs	r3, #16
 800f586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f58a:	e31a      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f58c:	2320      	movs	r3, #32
 800f58e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f592:	e316      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f594:	2340      	movs	r3, #64	@ 0x40
 800f596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f59a:	e312      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f59c:	2380      	movs	r3, #128	@ 0x80
 800f59e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5a2:	e30e      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f5a4:	697b      	ldr	r3, [r7, #20]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	4a69      	ldr	r2, [pc, #420]	@ (800f750 <UART_SetConfig+0x33c>)
 800f5aa:	4293      	cmp	r3, r2
 800f5ac:	d130      	bne.n	800f610 <UART_SetConfig+0x1fc>
 800f5ae:	4b67      	ldr	r3, [pc, #412]	@ (800f74c <UART_SetConfig+0x338>)
 800f5b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f5b2:	f003 0307 	and.w	r3, r3, #7
 800f5b6:	2b05      	cmp	r3, #5
 800f5b8:	d826      	bhi.n	800f608 <UART_SetConfig+0x1f4>
 800f5ba:	a201      	add	r2, pc, #4	@ (adr r2, 800f5c0 <UART_SetConfig+0x1ac>)
 800f5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5c0:	0800f5d9 	.word	0x0800f5d9
 800f5c4:	0800f5e1 	.word	0x0800f5e1
 800f5c8:	0800f5e9 	.word	0x0800f5e9
 800f5cc:	0800f5f1 	.word	0x0800f5f1
 800f5d0:	0800f5f9 	.word	0x0800f5f9
 800f5d4:	0800f601 	.word	0x0800f601
 800f5d8:	2300      	movs	r3, #0
 800f5da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5de:	e2f0      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f5e0:	2304      	movs	r3, #4
 800f5e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5e6:	e2ec      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f5e8:	2308      	movs	r3, #8
 800f5ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5ee:	e2e8      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f5f0:	2310      	movs	r3, #16
 800f5f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5f6:	e2e4      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f5f8:	2320      	movs	r3, #32
 800f5fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5fe:	e2e0      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f600:	2340      	movs	r3, #64	@ 0x40
 800f602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f606:	e2dc      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f608:	2380      	movs	r3, #128	@ 0x80
 800f60a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f60e:	e2d8      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f610:	697b      	ldr	r3, [r7, #20]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	4a4f      	ldr	r2, [pc, #316]	@ (800f754 <UART_SetConfig+0x340>)
 800f616:	4293      	cmp	r3, r2
 800f618:	d130      	bne.n	800f67c <UART_SetConfig+0x268>
 800f61a:	4b4c      	ldr	r3, [pc, #304]	@ (800f74c <UART_SetConfig+0x338>)
 800f61c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f61e:	f003 0307 	and.w	r3, r3, #7
 800f622:	2b05      	cmp	r3, #5
 800f624:	d826      	bhi.n	800f674 <UART_SetConfig+0x260>
 800f626:	a201      	add	r2, pc, #4	@ (adr r2, 800f62c <UART_SetConfig+0x218>)
 800f628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f62c:	0800f645 	.word	0x0800f645
 800f630:	0800f64d 	.word	0x0800f64d
 800f634:	0800f655 	.word	0x0800f655
 800f638:	0800f65d 	.word	0x0800f65d
 800f63c:	0800f665 	.word	0x0800f665
 800f640:	0800f66d 	.word	0x0800f66d
 800f644:	2300      	movs	r3, #0
 800f646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f64a:	e2ba      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f64c:	2304      	movs	r3, #4
 800f64e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f652:	e2b6      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f654:	2308      	movs	r3, #8
 800f656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f65a:	e2b2      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f65c:	2310      	movs	r3, #16
 800f65e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f662:	e2ae      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f664:	2320      	movs	r3, #32
 800f666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f66a:	e2aa      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f66c:	2340      	movs	r3, #64	@ 0x40
 800f66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f672:	e2a6      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f674:	2380      	movs	r3, #128	@ 0x80
 800f676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f67a:	e2a2      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	4a35      	ldr	r2, [pc, #212]	@ (800f758 <UART_SetConfig+0x344>)
 800f682:	4293      	cmp	r3, r2
 800f684:	d130      	bne.n	800f6e8 <UART_SetConfig+0x2d4>
 800f686:	4b31      	ldr	r3, [pc, #196]	@ (800f74c <UART_SetConfig+0x338>)
 800f688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f68a:	f003 0307 	and.w	r3, r3, #7
 800f68e:	2b05      	cmp	r3, #5
 800f690:	d826      	bhi.n	800f6e0 <UART_SetConfig+0x2cc>
 800f692:	a201      	add	r2, pc, #4	@ (adr r2, 800f698 <UART_SetConfig+0x284>)
 800f694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f698:	0800f6b1 	.word	0x0800f6b1
 800f69c:	0800f6b9 	.word	0x0800f6b9
 800f6a0:	0800f6c1 	.word	0x0800f6c1
 800f6a4:	0800f6c9 	.word	0x0800f6c9
 800f6a8:	0800f6d1 	.word	0x0800f6d1
 800f6ac:	0800f6d9 	.word	0x0800f6d9
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6b6:	e284      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f6b8:	2304      	movs	r3, #4
 800f6ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6be:	e280      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f6c0:	2308      	movs	r3, #8
 800f6c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6c6:	e27c      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f6c8:	2310      	movs	r3, #16
 800f6ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6ce:	e278      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f6d0:	2320      	movs	r3, #32
 800f6d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6d6:	e274      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f6d8:	2340      	movs	r3, #64	@ 0x40
 800f6da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6de:	e270      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f6e0:	2380      	movs	r3, #128	@ 0x80
 800f6e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6e6:	e26c      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f6e8:	697b      	ldr	r3, [r7, #20]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	4a1b      	ldr	r2, [pc, #108]	@ (800f75c <UART_SetConfig+0x348>)
 800f6ee:	4293      	cmp	r3, r2
 800f6f0:	d142      	bne.n	800f778 <UART_SetConfig+0x364>
 800f6f2:	4b16      	ldr	r3, [pc, #88]	@ (800f74c <UART_SetConfig+0x338>)
 800f6f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f6f6:	f003 0307 	and.w	r3, r3, #7
 800f6fa:	2b05      	cmp	r3, #5
 800f6fc:	d838      	bhi.n	800f770 <UART_SetConfig+0x35c>
 800f6fe:	a201      	add	r2, pc, #4	@ (adr r2, 800f704 <UART_SetConfig+0x2f0>)
 800f700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f704:	0800f71d 	.word	0x0800f71d
 800f708:	0800f725 	.word	0x0800f725
 800f70c:	0800f72d 	.word	0x0800f72d
 800f710:	0800f735 	.word	0x0800f735
 800f714:	0800f761 	.word	0x0800f761
 800f718:	0800f769 	.word	0x0800f769
 800f71c:	2300      	movs	r3, #0
 800f71e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f722:	e24e      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f724:	2304      	movs	r3, #4
 800f726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f72a:	e24a      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f72c:	2308      	movs	r3, #8
 800f72e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f732:	e246      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f734:	2310      	movs	r3, #16
 800f736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f73a:	e242      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f73c:	cfff69f3 	.word	0xcfff69f3
 800f740:	58000c00 	.word	0x58000c00
 800f744:	11fff4ff 	.word	0x11fff4ff
 800f748:	40011000 	.word	0x40011000
 800f74c:	58024400 	.word	0x58024400
 800f750:	40004400 	.word	0x40004400
 800f754:	40004800 	.word	0x40004800
 800f758:	40004c00 	.word	0x40004c00
 800f75c:	40005000 	.word	0x40005000
 800f760:	2320      	movs	r3, #32
 800f762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f766:	e22c      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f768:	2340      	movs	r3, #64	@ 0x40
 800f76a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f76e:	e228      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f770:	2380      	movs	r3, #128	@ 0x80
 800f772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f776:	e224      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f778:	697b      	ldr	r3, [r7, #20]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	4ab1      	ldr	r2, [pc, #708]	@ (800fa44 <UART_SetConfig+0x630>)
 800f77e:	4293      	cmp	r3, r2
 800f780:	d176      	bne.n	800f870 <UART_SetConfig+0x45c>
 800f782:	4bb1      	ldr	r3, [pc, #708]	@ (800fa48 <UART_SetConfig+0x634>)
 800f784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f786:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f78a:	2b28      	cmp	r3, #40	@ 0x28
 800f78c:	d86c      	bhi.n	800f868 <UART_SetConfig+0x454>
 800f78e:	a201      	add	r2, pc, #4	@ (adr r2, 800f794 <UART_SetConfig+0x380>)
 800f790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f794:	0800f839 	.word	0x0800f839
 800f798:	0800f869 	.word	0x0800f869
 800f79c:	0800f869 	.word	0x0800f869
 800f7a0:	0800f869 	.word	0x0800f869
 800f7a4:	0800f869 	.word	0x0800f869
 800f7a8:	0800f869 	.word	0x0800f869
 800f7ac:	0800f869 	.word	0x0800f869
 800f7b0:	0800f869 	.word	0x0800f869
 800f7b4:	0800f841 	.word	0x0800f841
 800f7b8:	0800f869 	.word	0x0800f869
 800f7bc:	0800f869 	.word	0x0800f869
 800f7c0:	0800f869 	.word	0x0800f869
 800f7c4:	0800f869 	.word	0x0800f869
 800f7c8:	0800f869 	.word	0x0800f869
 800f7cc:	0800f869 	.word	0x0800f869
 800f7d0:	0800f869 	.word	0x0800f869
 800f7d4:	0800f849 	.word	0x0800f849
 800f7d8:	0800f869 	.word	0x0800f869
 800f7dc:	0800f869 	.word	0x0800f869
 800f7e0:	0800f869 	.word	0x0800f869
 800f7e4:	0800f869 	.word	0x0800f869
 800f7e8:	0800f869 	.word	0x0800f869
 800f7ec:	0800f869 	.word	0x0800f869
 800f7f0:	0800f869 	.word	0x0800f869
 800f7f4:	0800f851 	.word	0x0800f851
 800f7f8:	0800f869 	.word	0x0800f869
 800f7fc:	0800f869 	.word	0x0800f869
 800f800:	0800f869 	.word	0x0800f869
 800f804:	0800f869 	.word	0x0800f869
 800f808:	0800f869 	.word	0x0800f869
 800f80c:	0800f869 	.word	0x0800f869
 800f810:	0800f869 	.word	0x0800f869
 800f814:	0800f859 	.word	0x0800f859
 800f818:	0800f869 	.word	0x0800f869
 800f81c:	0800f869 	.word	0x0800f869
 800f820:	0800f869 	.word	0x0800f869
 800f824:	0800f869 	.word	0x0800f869
 800f828:	0800f869 	.word	0x0800f869
 800f82c:	0800f869 	.word	0x0800f869
 800f830:	0800f869 	.word	0x0800f869
 800f834:	0800f861 	.word	0x0800f861
 800f838:	2301      	movs	r3, #1
 800f83a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f83e:	e1c0      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f840:	2304      	movs	r3, #4
 800f842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f846:	e1bc      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f848:	2308      	movs	r3, #8
 800f84a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f84e:	e1b8      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f850:	2310      	movs	r3, #16
 800f852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f856:	e1b4      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f858:	2320      	movs	r3, #32
 800f85a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f85e:	e1b0      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f860:	2340      	movs	r3, #64	@ 0x40
 800f862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f866:	e1ac      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f868:	2380      	movs	r3, #128	@ 0x80
 800f86a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f86e:	e1a8      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f870:	697b      	ldr	r3, [r7, #20]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	4a75      	ldr	r2, [pc, #468]	@ (800fa4c <UART_SetConfig+0x638>)
 800f876:	4293      	cmp	r3, r2
 800f878:	d130      	bne.n	800f8dc <UART_SetConfig+0x4c8>
 800f87a:	4b73      	ldr	r3, [pc, #460]	@ (800fa48 <UART_SetConfig+0x634>)
 800f87c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f87e:	f003 0307 	and.w	r3, r3, #7
 800f882:	2b05      	cmp	r3, #5
 800f884:	d826      	bhi.n	800f8d4 <UART_SetConfig+0x4c0>
 800f886:	a201      	add	r2, pc, #4	@ (adr r2, 800f88c <UART_SetConfig+0x478>)
 800f888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f88c:	0800f8a5 	.word	0x0800f8a5
 800f890:	0800f8ad 	.word	0x0800f8ad
 800f894:	0800f8b5 	.word	0x0800f8b5
 800f898:	0800f8bd 	.word	0x0800f8bd
 800f89c:	0800f8c5 	.word	0x0800f8c5
 800f8a0:	0800f8cd 	.word	0x0800f8cd
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8aa:	e18a      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f8ac:	2304      	movs	r3, #4
 800f8ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8b2:	e186      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f8b4:	2308      	movs	r3, #8
 800f8b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8ba:	e182      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f8bc:	2310      	movs	r3, #16
 800f8be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8c2:	e17e      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f8c4:	2320      	movs	r3, #32
 800f8c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8ca:	e17a      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f8cc:	2340      	movs	r3, #64	@ 0x40
 800f8ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8d2:	e176      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f8d4:	2380      	movs	r3, #128	@ 0x80
 800f8d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8da:	e172      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f8dc:	697b      	ldr	r3, [r7, #20]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	4a5b      	ldr	r2, [pc, #364]	@ (800fa50 <UART_SetConfig+0x63c>)
 800f8e2:	4293      	cmp	r3, r2
 800f8e4:	d130      	bne.n	800f948 <UART_SetConfig+0x534>
 800f8e6:	4b58      	ldr	r3, [pc, #352]	@ (800fa48 <UART_SetConfig+0x634>)
 800f8e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f8ea:	f003 0307 	and.w	r3, r3, #7
 800f8ee:	2b05      	cmp	r3, #5
 800f8f0:	d826      	bhi.n	800f940 <UART_SetConfig+0x52c>
 800f8f2:	a201      	add	r2, pc, #4	@ (adr r2, 800f8f8 <UART_SetConfig+0x4e4>)
 800f8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8f8:	0800f911 	.word	0x0800f911
 800f8fc:	0800f919 	.word	0x0800f919
 800f900:	0800f921 	.word	0x0800f921
 800f904:	0800f929 	.word	0x0800f929
 800f908:	0800f931 	.word	0x0800f931
 800f90c:	0800f939 	.word	0x0800f939
 800f910:	2300      	movs	r3, #0
 800f912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f916:	e154      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f918:	2304      	movs	r3, #4
 800f91a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f91e:	e150      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f920:	2308      	movs	r3, #8
 800f922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f926:	e14c      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f928:	2310      	movs	r3, #16
 800f92a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f92e:	e148      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f930:	2320      	movs	r3, #32
 800f932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f936:	e144      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f938:	2340      	movs	r3, #64	@ 0x40
 800f93a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f93e:	e140      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f940:	2380      	movs	r3, #128	@ 0x80
 800f942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f946:	e13c      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800f948:	697b      	ldr	r3, [r7, #20]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	4a41      	ldr	r2, [pc, #260]	@ (800fa54 <UART_SetConfig+0x640>)
 800f94e:	4293      	cmp	r3, r2
 800f950:	f040 8082 	bne.w	800fa58 <UART_SetConfig+0x644>
 800f954:	4b3c      	ldr	r3, [pc, #240]	@ (800fa48 <UART_SetConfig+0x634>)
 800f956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f958:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f95c:	2b28      	cmp	r3, #40	@ 0x28
 800f95e:	d86d      	bhi.n	800fa3c <UART_SetConfig+0x628>
 800f960:	a201      	add	r2, pc, #4	@ (adr r2, 800f968 <UART_SetConfig+0x554>)
 800f962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f966:	bf00      	nop
 800f968:	0800fa0d 	.word	0x0800fa0d
 800f96c:	0800fa3d 	.word	0x0800fa3d
 800f970:	0800fa3d 	.word	0x0800fa3d
 800f974:	0800fa3d 	.word	0x0800fa3d
 800f978:	0800fa3d 	.word	0x0800fa3d
 800f97c:	0800fa3d 	.word	0x0800fa3d
 800f980:	0800fa3d 	.word	0x0800fa3d
 800f984:	0800fa3d 	.word	0x0800fa3d
 800f988:	0800fa15 	.word	0x0800fa15
 800f98c:	0800fa3d 	.word	0x0800fa3d
 800f990:	0800fa3d 	.word	0x0800fa3d
 800f994:	0800fa3d 	.word	0x0800fa3d
 800f998:	0800fa3d 	.word	0x0800fa3d
 800f99c:	0800fa3d 	.word	0x0800fa3d
 800f9a0:	0800fa3d 	.word	0x0800fa3d
 800f9a4:	0800fa3d 	.word	0x0800fa3d
 800f9a8:	0800fa1d 	.word	0x0800fa1d
 800f9ac:	0800fa3d 	.word	0x0800fa3d
 800f9b0:	0800fa3d 	.word	0x0800fa3d
 800f9b4:	0800fa3d 	.word	0x0800fa3d
 800f9b8:	0800fa3d 	.word	0x0800fa3d
 800f9bc:	0800fa3d 	.word	0x0800fa3d
 800f9c0:	0800fa3d 	.word	0x0800fa3d
 800f9c4:	0800fa3d 	.word	0x0800fa3d
 800f9c8:	0800fa25 	.word	0x0800fa25
 800f9cc:	0800fa3d 	.word	0x0800fa3d
 800f9d0:	0800fa3d 	.word	0x0800fa3d
 800f9d4:	0800fa3d 	.word	0x0800fa3d
 800f9d8:	0800fa3d 	.word	0x0800fa3d
 800f9dc:	0800fa3d 	.word	0x0800fa3d
 800f9e0:	0800fa3d 	.word	0x0800fa3d
 800f9e4:	0800fa3d 	.word	0x0800fa3d
 800f9e8:	0800fa2d 	.word	0x0800fa2d
 800f9ec:	0800fa3d 	.word	0x0800fa3d
 800f9f0:	0800fa3d 	.word	0x0800fa3d
 800f9f4:	0800fa3d 	.word	0x0800fa3d
 800f9f8:	0800fa3d 	.word	0x0800fa3d
 800f9fc:	0800fa3d 	.word	0x0800fa3d
 800fa00:	0800fa3d 	.word	0x0800fa3d
 800fa04:	0800fa3d 	.word	0x0800fa3d
 800fa08:	0800fa35 	.word	0x0800fa35
 800fa0c:	2301      	movs	r3, #1
 800fa0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa12:	e0d6      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800fa14:	2304      	movs	r3, #4
 800fa16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa1a:	e0d2      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800fa1c:	2308      	movs	r3, #8
 800fa1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa22:	e0ce      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800fa24:	2310      	movs	r3, #16
 800fa26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa2a:	e0ca      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800fa2c:	2320      	movs	r3, #32
 800fa2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa32:	e0c6      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800fa34:	2340      	movs	r3, #64	@ 0x40
 800fa36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa3a:	e0c2      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800fa3c:	2380      	movs	r3, #128	@ 0x80
 800fa3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa42:	e0be      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800fa44:	40011400 	.word	0x40011400
 800fa48:	58024400 	.word	0x58024400
 800fa4c:	40007800 	.word	0x40007800
 800fa50:	40007c00 	.word	0x40007c00
 800fa54:	40011800 	.word	0x40011800
 800fa58:	697b      	ldr	r3, [r7, #20]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	4aad      	ldr	r2, [pc, #692]	@ (800fd14 <UART_SetConfig+0x900>)
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	d176      	bne.n	800fb50 <UART_SetConfig+0x73c>
 800fa62:	4bad      	ldr	r3, [pc, #692]	@ (800fd18 <UART_SetConfig+0x904>)
 800fa64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fa66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fa6a:	2b28      	cmp	r3, #40	@ 0x28
 800fa6c:	d86c      	bhi.n	800fb48 <UART_SetConfig+0x734>
 800fa6e:	a201      	add	r2, pc, #4	@ (adr r2, 800fa74 <UART_SetConfig+0x660>)
 800fa70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa74:	0800fb19 	.word	0x0800fb19
 800fa78:	0800fb49 	.word	0x0800fb49
 800fa7c:	0800fb49 	.word	0x0800fb49
 800fa80:	0800fb49 	.word	0x0800fb49
 800fa84:	0800fb49 	.word	0x0800fb49
 800fa88:	0800fb49 	.word	0x0800fb49
 800fa8c:	0800fb49 	.word	0x0800fb49
 800fa90:	0800fb49 	.word	0x0800fb49
 800fa94:	0800fb21 	.word	0x0800fb21
 800fa98:	0800fb49 	.word	0x0800fb49
 800fa9c:	0800fb49 	.word	0x0800fb49
 800faa0:	0800fb49 	.word	0x0800fb49
 800faa4:	0800fb49 	.word	0x0800fb49
 800faa8:	0800fb49 	.word	0x0800fb49
 800faac:	0800fb49 	.word	0x0800fb49
 800fab0:	0800fb49 	.word	0x0800fb49
 800fab4:	0800fb29 	.word	0x0800fb29
 800fab8:	0800fb49 	.word	0x0800fb49
 800fabc:	0800fb49 	.word	0x0800fb49
 800fac0:	0800fb49 	.word	0x0800fb49
 800fac4:	0800fb49 	.word	0x0800fb49
 800fac8:	0800fb49 	.word	0x0800fb49
 800facc:	0800fb49 	.word	0x0800fb49
 800fad0:	0800fb49 	.word	0x0800fb49
 800fad4:	0800fb31 	.word	0x0800fb31
 800fad8:	0800fb49 	.word	0x0800fb49
 800fadc:	0800fb49 	.word	0x0800fb49
 800fae0:	0800fb49 	.word	0x0800fb49
 800fae4:	0800fb49 	.word	0x0800fb49
 800fae8:	0800fb49 	.word	0x0800fb49
 800faec:	0800fb49 	.word	0x0800fb49
 800faf0:	0800fb49 	.word	0x0800fb49
 800faf4:	0800fb39 	.word	0x0800fb39
 800faf8:	0800fb49 	.word	0x0800fb49
 800fafc:	0800fb49 	.word	0x0800fb49
 800fb00:	0800fb49 	.word	0x0800fb49
 800fb04:	0800fb49 	.word	0x0800fb49
 800fb08:	0800fb49 	.word	0x0800fb49
 800fb0c:	0800fb49 	.word	0x0800fb49
 800fb10:	0800fb49 	.word	0x0800fb49
 800fb14:	0800fb41 	.word	0x0800fb41
 800fb18:	2301      	movs	r3, #1
 800fb1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb1e:	e050      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800fb20:	2304      	movs	r3, #4
 800fb22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb26:	e04c      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800fb28:	2308      	movs	r3, #8
 800fb2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb2e:	e048      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800fb30:	2310      	movs	r3, #16
 800fb32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb36:	e044      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800fb38:	2320      	movs	r3, #32
 800fb3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb3e:	e040      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800fb40:	2340      	movs	r3, #64	@ 0x40
 800fb42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb46:	e03c      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800fb48:	2380      	movs	r3, #128	@ 0x80
 800fb4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb4e:	e038      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800fb50:	697b      	ldr	r3, [r7, #20]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	4a71      	ldr	r2, [pc, #452]	@ (800fd1c <UART_SetConfig+0x908>)
 800fb56:	4293      	cmp	r3, r2
 800fb58:	d130      	bne.n	800fbbc <UART_SetConfig+0x7a8>
 800fb5a:	4b6f      	ldr	r3, [pc, #444]	@ (800fd18 <UART_SetConfig+0x904>)
 800fb5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fb5e:	f003 0307 	and.w	r3, r3, #7
 800fb62:	2b05      	cmp	r3, #5
 800fb64:	d826      	bhi.n	800fbb4 <UART_SetConfig+0x7a0>
 800fb66:	a201      	add	r2, pc, #4	@ (adr r2, 800fb6c <UART_SetConfig+0x758>)
 800fb68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb6c:	0800fb85 	.word	0x0800fb85
 800fb70:	0800fb8d 	.word	0x0800fb8d
 800fb74:	0800fb95 	.word	0x0800fb95
 800fb78:	0800fb9d 	.word	0x0800fb9d
 800fb7c:	0800fba5 	.word	0x0800fba5
 800fb80:	0800fbad 	.word	0x0800fbad
 800fb84:	2302      	movs	r3, #2
 800fb86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb8a:	e01a      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800fb8c:	2304      	movs	r3, #4
 800fb8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb92:	e016      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800fb94:	2308      	movs	r3, #8
 800fb96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb9a:	e012      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800fb9c:	2310      	movs	r3, #16
 800fb9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fba2:	e00e      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800fba4:	2320      	movs	r3, #32
 800fba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbaa:	e00a      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800fbac:	2340      	movs	r3, #64	@ 0x40
 800fbae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbb2:	e006      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800fbb4:	2380      	movs	r3, #128	@ 0x80
 800fbb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbba:	e002      	b.n	800fbc2 <UART_SetConfig+0x7ae>
 800fbbc:	2380      	movs	r3, #128	@ 0x80
 800fbbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fbc2:	697b      	ldr	r3, [r7, #20]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	4a55      	ldr	r2, [pc, #340]	@ (800fd1c <UART_SetConfig+0x908>)
 800fbc8:	4293      	cmp	r3, r2
 800fbca:	f040 80f8 	bne.w	800fdbe <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fbce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fbd2:	2b20      	cmp	r3, #32
 800fbd4:	dc46      	bgt.n	800fc64 <UART_SetConfig+0x850>
 800fbd6:	2b02      	cmp	r3, #2
 800fbd8:	db75      	blt.n	800fcc6 <UART_SetConfig+0x8b2>
 800fbda:	3b02      	subs	r3, #2
 800fbdc:	2b1e      	cmp	r3, #30
 800fbde:	d872      	bhi.n	800fcc6 <UART_SetConfig+0x8b2>
 800fbe0:	a201      	add	r2, pc, #4	@ (adr r2, 800fbe8 <UART_SetConfig+0x7d4>)
 800fbe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbe6:	bf00      	nop
 800fbe8:	0800fc6b 	.word	0x0800fc6b
 800fbec:	0800fcc7 	.word	0x0800fcc7
 800fbf0:	0800fc73 	.word	0x0800fc73
 800fbf4:	0800fcc7 	.word	0x0800fcc7
 800fbf8:	0800fcc7 	.word	0x0800fcc7
 800fbfc:	0800fcc7 	.word	0x0800fcc7
 800fc00:	0800fc83 	.word	0x0800fc83
 800fc04:	0800fcc7 	.word	0x0800fcc7
 800fc08:	0800fcc7 	.word	0x0800fcc7
 800fc0c:	0800fcc7 	.word	0x0800fcc7
 800fc10:	0800fcc7 	.word	0x0800fcc7
 800fc14:	0800fcc7 	.word	0x0800fcc7
 800fc18:	0800fcc7 	.word	0x0800fcc7
 800fc1c:	0800fcc7 	.word	0x0800fcc7
 800fc20:	0800fc93 	.word	0x0800fc93
 800fc24:	0800fcc7 	.word	0x0800fcc7
 800fc28:	0800fcc7 	.word	0x0800fcc7
 800fc2c:	0800fcc7 	.word	0x0800fcc7
 800fc30:	0800fcc7 	.word	0x0800fcc7
 800fc34:	0800fcc7 	.word	0x0800fcc7
 800fc38:	0800fcc7 	.word	0x0800fcc7
 800fc3c:	0800fcc7 	.word	0x0800fcc7
 800fc40:	0800fcc7 	.word	0x0800fcc7
 800fc44:	0800fcc7 	.word	0x0800fcc7
 800fc48:	0800fcc7 	.word	0x0800fcc7
 800fc4c:	0800fcc7 	.word	0x0800fcc7
 800fc50:	0800fcc7 	.word	0x0800fcc7
 800fc54:	0800fcc7 	.word	0x0800fcc7
 800fc58:	0800fcc7 	.word	0x0800fcc7
 800fc5c:	0800fcc7 	.word	0x0800fcc7
 800fc60:	0800fcb9 	.word	0x0800fcb9
 800fc64:	2b40      	cmp	r3, #64	@ 0x40
 800fc66:	d02a      	beq.n	800fcbe <UART_SetConfig+0x8aa>
 800fc68:	e02d      	b.n	800fcc6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fc6a:	f7fb fdc5 	bl	800b7f8 <HAL_RCCEx_GetD3PCLK1Freq>
 800fc6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fc70:	e02f      	b.n	800fcd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fc72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fc76:	4618      	mov	r0, r3
 800fc78:	f7fb fdd4 	bl	800b824 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fc7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc80:	e027      	b.n	800fcd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fc82:	f107 0318 	add.w	r3, r7, #24
 800fc86:	4618      	mov	r0, r3
 800fc88:	f7fb ff20 	bl	800bacc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fc8c:	69fb      	ldr	r3, [r7, #28]
 800fc8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc90:	e01f      	b.n	800fcd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fc92:	4b21      	ldr	r3, [pc, #132]	@ (800fd18 <UART_SetConfig+0x904>)
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	f003 0320 	and.w	r3, r3, #32
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d009      	beq.n	800fcb2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fc9e:	4b1e      	ldr	r3, [pc, #120]	@ (800fd18 <UART_SetConfig+0x904>)
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	08db      	lsrs	r3, r3, #3
 800fca4:	f003 0303 	and.w	r3, r3, #3
 800fca8:	4a1d      	ldr	r2, [pc, #116]	@ (800fd20 <UART_SetConfig+0x90c>)
 800fcaa:	fa22 f303 	lsr.w	r3, r2, r3
 800fcae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fcb0:	e00f      	b.n	800fcd2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fcb2:	4b1b      	ldr	r3, [pc, #108]	@ (800fd20 <UART_SetConfig+0x90c>)
 800fcb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fcb6:	e00c      	b.n	800fcd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fcb8:	4b1a      	ldr	r3, [pc, #104]	@ (800fd24 <UART_SetConfig+0x910>)
 800fcba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fcbc:	e009      	b.n	800fcd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fcbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fcc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fcc4:	e005      	b.n	800fcd2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fcca:	2301      	movs	r3, #1
 800fccc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fcd0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fcd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	f000 81ee 	beq.w	80100b6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fcda:	697b      	ldr	r3, [r7, #20]
 800fcdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcde:	4a12      	ldr	r2, [pc, #72]	@ (800fd28 <UART_SetConfig+0x914>)
 800fce0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fce4:	461a      	mov	r2, r3
 800fce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fce8:	fbb3 f3f2 	udiv	r3, r3, r2
 800fcec:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fcee:	697b      	ldr	r3, [r7, #20]
 800fcf0:	685a      	ldr	r2, [r3, #4]
 800fcf2:	4613      	mov	r3, r2
 800fcf4:	005b      	lsls	r3, r3, #1
 800fcf6:	4413      	add	r3, r2
 800fcf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fcfa:	429a      	cmp	r2, r3
 800fcfc:	d305      	bcc.n	800fd0a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fcfe:	697b      	ldr	r3, [r7, #20]
 800fd00:	685b      	ldr	r3, [r3, #4]
 800fd02:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fd04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd06:	429a      	cmp	r2, r3
 800fd08:	d910      	bls.n	800fd2c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800fd0a:	2301      	movs	r3, #1
 800fd0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fd10:	e1d1      	b.n	80100b6 <UART_SetConfig+0xca2>
 800fd12:	bf00      	nop
 800fd14:	40011c00 	.word	0x40011c00
 800fd18:	58024400 	.word	0x58024400
 800fd1c:	58000c00 	.word	0x58000c00
 800fd20:	03d09000 	.word	0x03d09000
 800fd24:	003d0900 	.word	0x003d0900
 800fd28:	08018ccc 	.word	0x08018ccc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fd2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd2e:	2200      	movs	r2, #0
 800fd30:	60bb      	str	r3, [r7, #8]
 800fd32:	60fa      	str	r2, [r7, #12]
 800fd34:	697b      	ldr	r3, [r7, #20]
 800fd36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd38:	4ac0      	ldr	r2, [pc, #768]	@ (801003c <UART_SetConfig+0xc28>)
 800fd3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fd3e:	b29b      	uxth	r3, r3
 800fd40:	2200      	movs	r2, #0
 800fd42:	603b      	str	r3, [r7, #0]
 800fd44:	607a      	str	r2, [r7, #4]
 800fd46:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fd4e:	f7f0 fd3b 	bl	80007c8 <__aeabi_uldivmod>
 800fd52:	4602      	mov	r2, r0
 800fd54:	460b      	mov	r3, r1
 800fd56:	4610      	mov	r0, r2
 800fd58:	4619      	mov	r1, r3
 800fd5a:	f04f 0200 	mov.w	r2, #0
 800fd5e:	f04f 0300 	mov.w	r3, #0
 800fd62:	020b      	lsls	r3, r1, #8
 800fd64:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fd68:	0202      	lsls	r2, r0, #8
 800fd6a:	6979      	ldr	r1, [r7, #20]
 800fd6c:	6849      	ldr	r1, [r1, #4]
 800fd6e:	0849      	lsrs	r1, r1, #1
 800fd70:	2000      	movs	r0, #0
 800fd72:	460c      	mov	r4, r1
 800fd74:	4605      	mov	r5, r0
 800fd76:	eb12 0804 	adds.w	r8, r2, r4
 800fd7a:	eb43 0905 	adc.w	r9, r3, r5
 800fd7e:	697b      	ldr	r3, [r7, #20]
 800fd80:	685b      	ldr	r3, [r3, #4]
 800fd82:	2200      	movs	r2, #0
 800fd84:	469a      	mov	sl, r3
 800fd86:	4693      	mov	fp, r2
 800fd88:	4652      	mov	r2, sl
 800fd8a:	465b      	mov	r3, fp
 800fd8c:	4640      	mov	r0, r8
 800fd8e:	4649      	mov	r1, r9
 800fd90:	f7f0 fd1a 	bl	80007c8 <__aeabi_uldivmod>
 800fd94:	4602      	mov	r2, r0
 800fd96:	460b      	mov	r3, r1
 800fd98:	4613      	mov	r3, r2
 800fd9a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fd9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fda2:	d308      	bcc.n	800fdb6 <UART_SetConfig+0x9a2>
 800fda4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fda6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fdaa:	d204      	bcs.n	800fdb6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800fdac:	697b      	ldr	r3, [r7, #20]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fdb2:	60da      	str	r2, [r3, #12]
 800fdb4:	e17f      	b.n	80100b6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800fdb6:	2301      	movs	r3, #1
 800fdb8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fdbc:	e17b      	b.n	80100b6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fdbe:	697b      	ldr	r3, [r7, #20]
 800fdc0:	69db      	ldr	r3, [r3, #28]
 800fdc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fdc6:	f040 80bd 	bne.w	800ff44 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800fdca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fdce:	2b20      	cmp	r3, #32
 800fdd0:	dc48      	bgt.n	800fe64 <UART_SetConfig+0xa50>
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	db7b      	blt.n	800fece <UART_SetConfig+0xaba>
 800fdd6:	2b20      	cmp	r3, #32
 800fdd8:	d879      	bhi.n	800fece <UART_SetConfig+0xaba>
 800fdda:	a201      	add	r2, pc, #4	@ (adr r2, 800fde0 <UART_SetConfig+0x9cc>)
 800fddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fde0:	0800fe6b 	.word	0x0800fe6b
 800fde4:	0800fe73 	.word	0x0800fe73
 800fde8:	0800fecf 	.word	0x0800fecf
 800fdec:	0800fecf 	.word	0x0800fecf
 800fdf0:	0800fe7b 	.word	0x0800fe7b
 800fdf4:	0800fecf 	.word	0x0800fecf
 800fdf8:	0800fecf 	.word	0x0800fecf
 800fdfc:	0800fecf 	.word	0x0800fecf
 800fe00:	0800fe8b 	.word	0x0800fe8b
 800fe04:	0800fecf 	.word	0x0800fecf
 800fe08:	0800fecf 	.word	0x0800fecf
 800fe0c:	0800fecf 	.word	0x0800fecf
 800fe10:	0800fecf 	.word	0x0800fecf
 800fe14:	0800fecf 	.word	0x0800fecf
 800fe18:	0800fecf 	.word	0x0800fecf
 800fe1c:	0800fecf 	.word	0x0800fecf
 800fe20:	0800fe9b 	.word	0x0800fe9b
 800fe24:	0800fecf 	.word	0x0800fecf
 800fe28:	0800fecf 	.word	0x0800fecf
 800fe2c:	0800fecf 	.word	0x0800fecf
 800fe30:	0800fecf 	.word	0x0800fecf
 800fe34:	0800fecf 	.word	0x0800fecf
 800fe38:	0800fecf 	.word	0x0800fecf
 800fe3c:	0800fecf 	.word	0x0800fecf
 800fe40:	0800fecf 	.word	0x0800fecf
 800fe44:	0800fecf 	.word	0x0800fecf
 800fe48:	0800fecf 	.word	0x0800fecf
 800fe4c:	0800fecf 	.word	0x0800fecf
 800fe50:	0800fecf 	.word	0x0800fecf
 800fe54:	0800fecf 	.word	0x0800fecf
 800fe58:	0800fecf 	.word	0x0800fecf
 800fe5c:	0800fecf 	.word	0x0800fecf
 800fe60:	0800fec1 	.word	0x0800fec1
 800fe64:	2b40      	cmp	r3, #64	@ 0x40
 800fe66:	d02e      	beq.n	800fec6 <UART_SetConfig+0xab2>
 800fe68:	e031      	b.n	800fece <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fe6a:	f7fa fadb 	bl	800a424 <HAL_RCC_GetPCLK1Freq>
 800fe6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fe70:	e033      	b.n	800feda <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fe72:	f7fa faed 	bl	800a450 <HAL_RCC_GetPCLK2Freq>
 800fe76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fe78:	e02f      	b.n	800feda <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fe7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fe7e:	4618      	mov	r0, r3
 800fe80:	f7fb fcd0 	bl	800b824 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fe84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe88:	e027      	b.n	800feda <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fe8a:	f107 0318 	add.w	r3, r7, #24
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f7fb fe1c 	bl	800bacc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fe94:	69fb      	ldr	r3, [r7, #28]
 800fe96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe98:	e01f      	b.n	800feda <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fe9a:	4b69      	ldr	r3, [pc, #420]	@ (8010040 <UART_SetConfig+0xc2c>)
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	f003 0320 	and.w	r3, r3, #32
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d009      	beq.n	800feba <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fea6:	4b66      	ldr	r3, [pc, #408]	@ (8010040 <UART_SetConfig+0xc2c>)
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	08db      	lsrs	r3, r3, #3
 800feac:	f003 0303 	and.w	r3, r3, #3
 800feb0:	4a64      	ldr	r2, [pc, #400]	@ (8010044 <UART_SetConfig+0xc30>)
 800feb2:	fa22 f303 	lsr.w	r3, r2, r3
 800feb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800feb8:	e00f      	b.n	800feda <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800feba:	4b62      	ldr	r3, [pc, #392]	@ (8010044 <UART_SetConfig+0xc30>)
 800febc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800febe:	e00c      	b.n	800feda <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fec0:	4b61      	ldr	r3, [pc, #388]	@ (8010048 <UART_SetConfig+0xc34>)
 800fec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fec4:	e009      	b.n	800feda <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fec6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800feca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fecc:	e005      	b.n	800feda <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800fece:	2300      	movs	r3, #0
 800fed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fed2:	2301      	movs	r3, #1
 800fed4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fed8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800feda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fedc:	2b00      	cmp	r3, #0
 800fede:	f000 80ea 	beq.w	80100b6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fee2:	697b      	ldr	r3, [r7, #20]
 800fee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fee6:	4a55      	ldr	r2, [pc, #340]	@ (801003c <UART_SetConfig+0xc28>)
 800fee8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800feec:	461a      	mov	r2, r3
 800feee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fef0:	fbb3 f3f2 	udiv	r3, r3, r2
 800fef4:	005a      	lsls	r2, r3, #1
 800fef6:	697b      	ldr	r3, [r7, #20]
 800fef8:	685b      	ldr	r3, [r3, #4]
 800fefa:	085b      	lsrs	r3, r3, #1
 800fefc:	441a      	add	r2, r3
 800fefe:	697b      	ldr	r3, [r7, #20]
 800ff00:	685b      	ldr	r3, [r3, #4]
 800ff02:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff06:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ff08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff0a:	2b0f      	cmp	r3, #15
 800ff0c:	d916      	bls.n	800ff3c <UART_SetConfig+0xb28>
 800ff0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ff14:	d212      	bcs.n	800ff3c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ff16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff18:	b29b      	uxth	r3, r3
 800ff1a:	f023 030f 	bic.w	r3, r3, #15
 800ff1e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ff20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff22:	085b      	lsrs	r3, r3, #1
 800ff24:	b29b      	uxth	r3, r3
 800ff26:	f003 0307 	and.w	r3, r3, #7
 800ff2a:	b29a      	uxth	r2, r3
 800ff2c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ff2e:	4313      	orrs	r3, r2
 800ff30:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ff32:	697b      	ldr	r3, [r7, #20]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ff38:	60da      	str	r2, [r3, #12]
 800ff3a:	e0bc      	b.n	80100b6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ff3c:	2301      	movs	r3, #1
 800ff3e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ff42:	e0b8      	b.n	80100b6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ff44:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ff48:	2b20      	cmp	r3, #32
 800ff4a:	dc4b      	bgt.n	800ffe4 <UART_SetConfig+0xbd0>
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	f2c0 8087 	blt.w	8010060 <UART_SetConfig+0xc4c>
 800ff52:	2b20      	cmp	r3, #32
 800ff54:	f200 8084 	bhi.w	8010060 <UART_SetConfig+0xc4c>
 800ff58:	a201      	add	r2, pc, #4	@ (adr r2, 800ff60 <UART_SetConfig+0xb4c>)
 800ff5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff5e:	bf00      	nop
 800ff60:	0800ffeb 	.word	0x0800ffeb
 800ff64:	0800fff3 	.word	0x0800fff3
 800ff68:	08010061 	.word	0x08010061
 800ff6c:	08010061 	.word	0x08010061
 800ff70:	0800fffb 	.word	0x0800fffb
 800ff74:	08010061 	.word	0x08010061
 800ff78:	08010061 	.word	0x08010061
 800ff7c:	08010061 	.word	0x08010061
 800ff80:	0801000b 	.word	0x0801000b
 800ff84:	08010061 	.word	0x08010061
 800ff88:	08010061 	.word	0x08010061
 800ff8c:	08010061 	.word	0x08010061
 800ff90:	08010061 	.word	0x08010061
 800ff94:	08010061 	.word	0x08010061
 800ff98:	08010061 	.word	0x08010061
 800ff9c:	08010061 	.word	0x08010061
 800ffa0:	0801001b 	.word	0x0801001b
 800ffa4:	08010061 	.word	0x08010061
 800ffa8:	08010061 	.word	0x08010061
 800ffac:	08010061 	.word	0x08010061
 800ffb0:	08010061 	.word	0x08010061
 800ffb4:	08010061 	.word	0x08010061
 800ffb8:	08010061 	.word	0x08010061
 800ffbc:	08010061 	.word	0x08010061
 800ffc0:	08010061 	.word	0x08010061
 800ffc4:	08010061 	.word	0x08010061
 800ffc8:	08010061 	.word	0x08010061
 800ffcc:	08010061 	.word	0x08010061
 800ffd0:	08010061 	.word	0x08010061
 800ffd4:	08010061 	.word	0x08010061
 800ffd8:	08010061 	.word	0x08010061
 800ffdc:	08010061 	.word	0x08010061
 800ffe0:	08010053 	.word	0x08010053
 800ffe4:	2b40      	cmp	r3, #64	@ 0x40
 800ffe6:	d037      	beq.n	8010058 <UART_SetConfig+0xc44>
 800ffe8:	e03a      	b.n	8010060 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ffea:	f7fa fa1b 	bl	800a424 <HAL_RCC_GetPCLK1Freq>
 800ffee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fff0:	e03c      	b.n	801006c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fff2:	f7fa fa2d 	bl	800a450 <HAL_RCC_GetPCLK2Freq>
 800fff6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fff8:	e038      	b.n	801006c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fffa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fffe:	4618      	mov	r0, r3
 8010000:	f7fb fc10 	bl	800b824 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010008:	e030      	b.n	801006c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801000a:	f107 0318 	add.w	r3, r7, #24
 801000e:	4618      	mov	r0, r3
 8010010:	f7fb fd5c 	bl	800bacc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010014:	69fb      	ldr	r3, [r7, #28]
 8010016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010018:	e028      	b.n	801006c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801001a:	4b09      	ldr	r3, [pc, #36]	@ (8010040 <UART_SetConfig+0xc2c>)
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	f003 0320 	and.w	r3, r3, #32
 8010022:	2b00      	cmp	r3, #0
 8010024:	d012      	beq.n	801004c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010026:	4b06      	ldr	r3, [pc, #24]	@ (8010040 <UART_SetConfig+0xc2c>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	08db      	lsrs	r3, r3, #3
 801002c:	f003 0303 	and.w	r3, r3, #3
 8010030:	4a04      	ldr	r2, [pc, #16]	@ (8010044 <UART_SetConfig+0xc30>)
 8010032:	fa22 f303 	lsr.w	r3, r2, r3
 8010036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010038:	e018      	b.n	801006c <UART_SetConfig+0xc58>
 801003a:	bf00      	nop
 801003c:	08018ccc 	.word	0x08018ccc
 8010040:	58024400 	.word	0x58024400
 8010044:	03d09000 	.word	0x03d09000
 8010048:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 801004c:	4b24      	ldr	r3, [pc, #144]	@ (80100e0 <UART_SetConfig+0xccc>)
 801004e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010050:	e00c      	b.n	801006c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010052:	4b24      	ldr	r3, [pc, #144]	@ (80100e4 <UART_SetConfig+0xcd0>)
 8010054:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010056:	e009      	b.n	801006c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010058:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801005c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801005e:	e005      	b.n	801006c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8010060:	2300      	movs	r3, #0
 8010062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010064:	2301      	movs	r3, #1
 8010066:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801006a:	bf00      	nop
    }

    if (pclk != 0U)
 801006c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801006e:	2b00      	cmp	r3, #0
 8010070:	d021      	beq.n	80100b6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010072:	697b      	ldr	r3, [r7, #20]
 8010074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010076:	4a1c      	ldr	r2, [pc, #112]	@ (80100e8 <UART_SetConfig+0xcd4>)
 8010078:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801007c:	461a      	mov	r2, r3
 801007e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010080:	fbb3 f2f2 	udiv	r2, r3, r2
 8010084:	697b      	ldr	r3, [r7, #20]
 8010086:	685b      	ldr	r3, [r3, #4]
 8010088:	085b      	lsrs	r3, r3, #1
 801008a:	441a      	add	r2, r3
 801008c:	697b      	ldr	r3, [r7, #20]
 801008e:	685b      	ldr	r3, [r3, #4]
 8010090:	fbb2 f3f3 	udiv	r3, r2, r3
 8010094:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010098:	2b0f      	cmp	r3, #15
 801009a:	d909      	bls.n	80100b0 <UART_SetConfig+0xc9c>
 801009c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801009e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80100a2:	d205      	bcs.n	80100b0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80100a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100a6:	b29a      	uxth	r2, r3
 80100a8:	697b      	ldr	r3, [r7, #20]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	60da      	str	r2, [r3, #12]
 80100ae:	e002      	b.n	80100b6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80100b0:	2301      	movs	r3, #1
 80100b2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80100b6:	697b      	ldr	r3, [r7, #20]
 80100b8:	2201      	movs	r2, #1
 80100ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80100be:	697b      	ldr	r3, [r7, #20]
 80100c0:	2201      	movs	r2, #1
 80100c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80100c6:	697b      	ldr	r3, [r7, #20]
 80100c8:	2200      	movs	r2, #0
 80100ca:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80100cc:	697b      	ldr	r3, [r7, #20]
 80100ce:	2200      	movs	r2, #0
 80100d0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80100d2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	3748      	adds	r7, #72	@ 0x48
 80100da:	46bd      	mov	sp, r7
 80100dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80100e0:	03d09000 	.word	0x03d09000
 80100e4:	003d0900 	.word	0x003d0900
 80100e8:	08018ccc 	.word	0x08018ccc

080100ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80100ec:	b480      	push	{r7}
 80100ee:	b083      	sub	sp, #12
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100f8:	f003 0308 	and.w	r3, r3, #8
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d00a      	beq.n	8010116 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	685b      	ldr	r3, [r3, #4]
 8010106:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	430a      	orrs	r2, r1
 8010114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801011a:	f003 0301 	and.w	r3, r3, #1
 801011e:	2b00      	cmp	r3, #0
 8010120:	d00a      	beq.n	8010138 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	685b      	ldr	r3, [r3, #4]
 8010128:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	430a      	orrs	r2, r1
 8010136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801013c:	f003 0302 	and.w	r3, r3, #2
 8010140:	2b00      	cmp	r3, #0
 8010142:	d00a      	beq.n	801015a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	685b      	ldr	r3, [r3, #4]
 801014a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	430a      	orrs	r2, r1
 8010158:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801015e:	f003 0304 	and.w	r3, r3, #4
 8010162:	2b00      	cmp	r3, #0
 8010164:	d00a      	beq.n	801017c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	685b      	ldr	r3, [r3, #4]
 801016c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	430a      	orrs	r2, r1
 801017a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010180:	f003 0310 	and.w	r3, r3, #16
 8010184:	2b00      	cmp	r3, #0
 8010186:	d00a      	beq.n	801019e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	689b      	ldr	r3, [r3, #8]
 801018e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	430a      	orrs	r2, r1
 801019c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101a2:	f003 0320 	and.w	r3, r3, #32
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d00a      	beq.n	80101c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	689b      	ldr	r3, [r3, #8]
 80101b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	430a      	orrs	r2, r1
 80101be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d01a      	beq.n	8010202 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	685b      	ldr	r3, [r3, #4]
 80101d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	430a      	orrs	r2, r1
 80101e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80101e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80101ea:	d10a      	bne.n	8010202 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	685b      	ldr	r3, [r3, #4]
 80101f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	430a      	orrs	r2, r1
 8010200:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801020a:	2b00      	cmp	r3, #0
 801020c:	d00a      	beq.n	8010224 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	685b      	ldr	r3, [r3, #4]
 8010214:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	430a      	orrs	r2, r1
 8010222:	605a      	str	r2, [r3, #4]
  }
}
 8010224:	bf00      	nop
 8010226:	370c      	adds	r7, #12
 8010228:	46bd      	mov	sp, r7
 801022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022e:	4770      	bx	lr

08010230 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b098      	sub	sp, #96	@ 0x60
 8010234:	af02      	add	r7, sp, #8
 8010236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	2200      	movs	r2, #0
 801023c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010240:	f7f5 fa20 	bl	8005684 <HAL_GetTick>
 8010244:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	f003 0308 	and.w	r3, r3, #8
 8010250:	2b08      	cmp	r3, #8
 8010252:	d12f      	bne.n	80102b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010254:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010258:	9300      	str	r3, [sp, #0]
 801025a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801025c:	2200      	movs	r2, #0
 801025e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010262:	6878      	ldr	r0, [r7, #4]
 8010264:	f000 f88e 	bl	8010384 <UART_WaitOnFlagUntilTimeout>
 8010268:	4603      	mov	r3, r0
 801026a:	2b00      	cmp	r3, #0
 801026c:	d022      	beq.n	80102b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010276:	e853 3f00 	ldrex	r3, [r3]
 801027a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801027c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801027e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010282:	653b      	str	r3, [r7, #80]	@ 0x50
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	461a      	mov	r2, r3
 801028a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801028c:	647b      	str	r3, [r7, #68]	@ 0x44
 801028e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010290:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010292:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010294:	e841 2300 	strex	r3, r2, [r1]
 8010298:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801029a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801029c:	2b00      	cmp	r3, #0
 801029e:	d1e6      	bne.n	801026e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	2220      	movs	r2, #32
 80102a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	2200      	movs	r2, #0
 80102ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80102b0:	2303      	movs	r3, #3
 80102b2:	e063      	b.n	801037c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	f003 0304 	and.w	r3, r3, #4
 80102be:	2b04      	cmp	r3, #4
 80102c0:	d149      	bne.n	8010356 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80102c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80102c6:	9300      	str	r3, [sp, #0]
 80102c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80102ca:	2200      	movs	r2, #0
 80102cc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80102d0:	6878      	ldr	r0, [r7, #4]
 80102d2:	f000 f857 	bl	8010384 <UART_WaitOnFlagUntilTimeout>
 80102d6:	4603      	mov	r3, r0
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d03c      	beq.n	8010356 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102e4:	e853 3f00 	ldrex	r3, [r3]
 80102e8:	623b      	str	r3, [r7, #32]
   return(result);
 80102ea:	6a3b      	ldr	r3, [r7, #32]
 80102ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80102f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	461a      	mov	r2, r3
 80102f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80102fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80102fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010300:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010302:	e841 2300 	strex	r3, r2, [r1]
 8010306:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801030a:	2b00      	cmp	r3, #0
 801030c:	d1e6      	bne.n	80102dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	3308      	adds	r3, #8
 8010314:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010316:	693b      	ldr	r3, [r7, #16]
 8010318:	e853 3f00 	ldrex	r3, [r3]
 801031c:	60fb      	str	r3, [r7, #12]
   return(result);
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	f023 0301 	bic.w	r3, r3, #1
 8010324:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	3308      	adds	r3, #8
 801032c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801032e:	61fa      	str	r2, [r7, #28]
 8010330:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010332:	69b9      	ldr	r1, [r7, #24]
 8010334:	69fa      	ldr	r2, [r7, #28]
 8010336:	e841 2300 	strex	r3, r2, [r1]
 801033a:	617b      	str	r3, [r7, #20]
   return(result);
 801033c:	697b      	ldr	r3, [r7, #20]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d1e5      	bne.n	801030e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	2220      	movs	r2, #32
 8010346:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	2200      	movs	r2, #0
 801034e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010352:	2303      	movs	r3, #3
 8010354:	e012      	b.n	801037c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	2220      	movs	r2, #32
 801035a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	2220      	movs	r2, #32
 8010362:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	2200      	movs	r2, #0
 801036a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	2200      	movs	r2, #0
 8010370:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	2200      	movs	r2, #0
 8010376:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801037a:	2300      	movs	r3, #0
}
 801037c:	4618      	mov	r0, r3
 801037e:	3758      	adds	r7, #88	@ 0x58
 8010380:	46bd      	mov	sp, r7
 8010382:	bd80      	pop	{r7, pc}

08010384 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010384:	b580      	push	{r7, lr}
 8010386:	b084      	sub	sp, #16
 8010388:	af00      	add	r7, sp, #0
 801038a:	60f8      	str	r0, [r7, #12]
 801038c:	60b9      	str	r1, [r7, #8]
 801038e:	603b      	str	r3, [r7, #0]
 8010390:	4613      	mov	r3, r2
 8010392:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010394:	e04f      	b.n	8010436 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010396:	69bb      	ldr	r3, [r7, #24]
 8010398:	f1b3 3fff 	cmp.w	r3, #4294967295
 801039c:	d04b      	beq.n	8010436 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801039e:	f7f5 f971 	bl	8005684 <HAL_GetTick>
 80103a2:	4602      	mov	r2, r0
 80103a4:	683b      	ldr	r3, [r7, #0]
 80103a6:	1ad3      	subs	r3, r2, r3
 80103a8:	69ba      	ldr	r2, [r7, #24]
 80103aa:	429a      	cmp	r2, r3
 80103ac:	d302      	bcc.n	80103b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80103ae:	69bb      	ldr	r3, [r7, #24]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d101      	bne.n	80103b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80103b4:	2303      	movs	r3, #3
 80103b6:	e04e      	b.n	8010456 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	f003 0304 	and.w	r3, r3, #4
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d037      	beq.n	8010436 <UART_WaitOnFlagUntilTimeout+0xb2>
 80103c6:	68bb      	ldr	r3, [r7, #8]
 80103c8:	2b80      	cmp	r3, #128	@ 0x80
 80103ca:	d034      	beq.n	8010436 <UART_WaitOnFlagUntilTimeout+0xb2>
 80103cc:	68bb      	ldr	r3, [r7, #8]
 80103ce:	2b40      	cmp	r3, #64	@ 0x40
 80103d0:	d031      	beq.n	8010436 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	69db      	ldr	r3, [r3, #28]
 80103d8:	f003 0308 	and.w	r3, r3, #8
 80103dc:	2b08      	cmp	r3, #8
 80103de:	d110      	bne.n	8010402 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	2208      	movs	r2, #8
 80103e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80103e8:	68f8      	ldr	r0, [r7, #12]
 80103ea:	f000 f921 	bl	8010630 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	2208      	movs	r2, #8
 80103f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	2200      	movs	r2, #0
 80103fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80103fe:	2301      	movs	r3, #1
 8010400:	e029      	b.n	8010456 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	69db      	ldr	r3, [r3, #28]
 8010408:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801040c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010410:	d111      	bne.n	8010436 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801041a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801041c:	68f8      	ldr	r0, [r7, #12]
 801041e:	f000 f907 	bl	8010630 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	2220      	movs	r2, #32
 8010426:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	2200      	movs	r2, #0
 801042e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010432:	2303      	movs	r3, #3
 8010434:	e00f      	b.n	8010456 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	69da      	ldr	r2, [r3, #28]
 801043c:	68bb      	ldr	r3, [r7, #8]
 801043e:	4013      	ands	r3, r2
 8010440:	68ba      	ldr	r2, [r7, #8]
 8010442:	429a      	cmp	r2, r3
 8010444:	bf0c      	ite	eq
 8010446:	2301      	moveq	r3, #1
 8010448:	2300      	movne	r3, #0
 801044a:	b2db      	uxtb	r3, r3
 801044c:	461a      	mov	r2, r3
 801044e:	79fb      	ldrb	r3, [r7, #7]
 8010450:	429a      	cmp	r2, r3
 8010452:	d0a0      	beq.n	8010396 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010454:	2300      	movs	r3, #0
}
 8010456:	4618      	mov	r0, r3
 8010458:	3710      	adds	r7, #16
 801045a:	46bd      	mov	sp, r7
 801045c:	bd80      	pop	{r7, pc}
	...

08010460 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b096      	sub	sp, #88	@ 0x58
 8010464:	af00      	add	r7, sp, #0
 8010466:	60f8      	str	r0, [r7, #12]
 8010468:	60b9      	str	r1, [r7, #8]
 801046a:	4613      	mov	r3, r2
 801046c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	68ba      	ldr	r2, [r7, #8]
 8010472:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	88fa      	ldrh	r2, [r7, #6]
 8010478:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	2200      	movs	r2, #0
 8010480:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	2222      	movs	r2, #34	@ 0x22
 8010488:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010492:	2b00      	cmp	r3, #0
 8010494:	d02d      	beq.n	80104f2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801049c:	4a40      	ldr	r2, [pc, #256]	@ (80105a0 <UART_Start_Receive_DMA+0x140>)
 801049e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80104a6:	4a3f      	ldr	r2, [pc, #252]	@ (80105a4 <UART_Start_Receive_DMA+0x144>)
 80104a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80104b0:	4a3d      	ldr	r2, [pc, #244]	@ (80105a8 <UART_Start_Receive_DMA+0x148>)
 80104b2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80104ba:	2200      	movs	r2, #0
 80104bc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	3324      	adds	r3, #36	@ 0x24
 80104ca:	4619      	mov	r1, r3
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80104d0:	461a      	mov	r2, r3
 80104d2:	88fb      	ldrh	r3, [r7, #6]
 80104d4:	f7f5 fe1c 	bl	8006110 <HAL_DMA_Start_IT>
 80104d8:	4603      	mov	r3, r0
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d009      	beq.n	80104f2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	2210      	movs	r2, #16
 80104e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	2220      	movs	r2, #32
 80104ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80104ee:	2301      	movs	r3, #1
 80104f0:	e051      	b.n	8010596 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	691b      	ldr	r3, [r3, #16]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d018      	beq.n	801052c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010502:	e853 3f00 	ldrex	r3, [r3]
 8010506:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801050a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801050e:	657b      	str	r3, [r7, #84]	@ 0x54
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	461a      	mov	r2, r3
 8010516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010518:	64bb      	str	r3, [r7, #72]	@ 0x48
 801051a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801051c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801051e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010520:	e841 2300 	strex	r3, r2, [r1]
 8010524:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8010526:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010528:	2b00      	cmp	r3, #0
 801052a:	d1e6      	bne.n	80104fa <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	3308      	adds	r3, #8
 8010532:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010536:	e853 3f00 	ldrex	r3, [r3]
 801053a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801053c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801053e:	f043 0301 	orr.w	r3, r3, #1
 8010542:	653b      	str	r3, [r7, #80]	@ 0x50
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	3308      	adds	r3, #8
 801054a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801054c:	637a      	str	r2, [r7, #52]	@ 0x34
 801054e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010550:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010552:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010554:	e841 2300 	strex	r3, r2, [r1]
 8010558:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801055a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801055c:	2b00      	cmp	r3, #0
 801055e:	d1e5      	bne.n	801052c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	3308      	adds	r3, #8
 8010566:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010568:	697b      	ldr	r3, [r7, #20]
 801056a:	e853 3f00 	ldrex	r3, [r3]
 801056e:	613b      	str	r3, [r7, #16]
   return(result);
 8010570:	693b      	ldr	r3, [r7, #16]
 8010572:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010576:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	3308      	adds	r3, #8
 801057e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010580:	623a      	str	r2, [r7, #32]
 8010582:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010584:	69f9      	ldr	r1, [r7, #28]
 8010586:	6a3a      	ldr	r2, [r7, #32]
 8010588:	e841 2300 	strex	r3, r2, [r1]
 801058c:	61bb      	str	r3, [r7, #24]
   return(result);
 801058e:	69bb      	ldr	r3, [r7, #24]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d1e5      	bne.n	8010560 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8010594:	2300      	movs	r3, #0
}
 8010596:	4618      	mov	r0, r3
 8010598:	3758      	adds	r7, #88	@ 0x58
 801059a:	46bd      	mov	sp, r7
 801059c:	bd80      	pop	{r7, pc}
 801059e:	bf00      	nop
 80105a0:	080106fd 	.word	0x080106fd
 80105a4:	08010825 	.word	0x08010825
 80105a8:	08010863 	.word	0x08010863

080105ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80105ac:	b480      	push	{r7}
 80105ae:	b08f      	sub	sp, #60	@ 0x3c
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105ba:	6a3b      	ldr	r3, [r7, #32]
 80105bc:	e853 3f00 	ldrex	r3, [r3]
 80105c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80105c2:	69fb      	ldr	r3, [r7, #28]
 80105c4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80105c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	461a      	mov	r2, r3
 80105d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80105d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80105d4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80105d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80105da:	e841 2300 	strex	r3, r2, [r1]
 80105de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80105e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d1e6      	bne.n	80105b4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	3308      	adds	r3, #8
 80105ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	e853 3f00 	ldrex	r3, [r3]
 80105f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80105f6:	68bb      	ldr	r3, [r7, #8]
 80105f8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80105fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	3308      	adds	r3, #8
 8010604:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010606:	61ba      	str	r2, [r7, #24]
 8010608:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801060a:	6979      	ldr	r1, [r7, #20]
 801060c:	69ba      	ldr	r2, [r7, #24]
 801060e:	e841 2300 	strex	r3, r2, [r1]
 8010612:	613b      	str	r3, [r7, #16]
   return(result);
 8010614:	693b      	ldr	r3, [r7, #16]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d1e5      	bne.n	80105e6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	2220      	movs	r2, #32
 801061e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8010622:	bf00      	nop
 8010624:	373c      	adds	r7, #60	@ 0x3c
 8010626:	46bd      	mov	sp, r7
 8010628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062c:	4770      	bx	lr
	...

08010630 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010630:	b480      	push	{r7}
 8010632:	b095      	sub	sp, #84	@ 0x54
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801063e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010640:	e853 3f00 	ldrex	r3, [r3]
 8010644:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010648:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801064c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	461a      	mov	r2, r3
 8010654:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010656:	643b      	str	r3, [r7, #64]	@ 0x40
 8010658:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801065a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801065c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801065e:	e841 2300 	strex	r3, r2, [r1]
 8010662:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010666:	2b00      	cmp	r3, #0
 8010668:	d1e6      	bne.n	8010638 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	3308      	adds	r3, #8
 8010670:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010672:	6a3b      	ldr	r3, [r7, #32]
 8010674:	e853 3f00 	ldrex	r3, [r3]
 8010678:	61fb      	str	r3, [r7, #28]
   return(result);
 801067a:	69fa      	ldr	r2, [r7, #28]
 801067c:	4b1e      	ldr	r3, [pc, #120]	@ (80106f8 <UART_EndRxTransfer+0xc8>)
 801067e:	4013      	ands	r3, r2
 8010680:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	3308      	adds	r3, #8
 8010688:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801068a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801068c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801068e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010690:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010692:	e841 2300 	strex	r3, r2, [r1]
 8010696:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801069a:	2b00      	cmp	r3, #0
 801069c:	d1e5      	bne.n	801066a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80106a2:	2b01      	cmp	r3, #1
 80106a4:	d118      	bne.n	80106d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	e853 3f00 	ldrex	r3, [r3]
 80106b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80106b4:	68bb      	ldr	r3, [r7, #8]
 80106b6:	f023 0310 	bic.w	r3, r3, #16
 80106ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	461a      	mov	r2, r3
 80106c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80106c4:	61bb      	str	r3, [r7, #24]
 80106c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106c8:	6979      	ldr	r1, [r7, #20]
 80106ca:	69ba      	ldr	r2, [r7, #24]
 80106cc:	e841 2300 	strex	r3, r2, [r1]
 80106d0:	613b      	str	r3, [r7, #16]
   return(result);
 80106d2:	693b      	ldr	r3, [r7, #16]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d1e6      	bne.n	80106a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	2220      	movs	r2, #32
 80106dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	2200      	movs	r2, #0
 80106e4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	2200      	movs	r2, #0
 80106ea:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80106ec:	bf00      	nop
 80106ee:	3754      	adds	r7, #84	@ 0x54
 80106f0:	46bd      	mov	sp, r7
 80106f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f6:	4770      	bx	lr
 80106f8:	effffffe 	.word	0xeffffffe

080106fc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b09c      	sub	sp, #112	@ 0x70
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010708:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	69db      	ldr	r3, [r3, #28]
 801070e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010712:	d071      	beq.n	80107f8 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8010714:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010716:	2200      	movs	r2, #0
 8010718:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801071c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010722:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010724:	e853 3f00 	ldrex	r3, [r3]
 8010728:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801072a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801072c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010730:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010732:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	461a      	mov	r2, r3
 8010738:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801073a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801073c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801073e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010740:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010742:	e841 2300 	strex	r3, r2, [r1]
 8010746:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010748:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801074a:	2b00      	cmp	r3, #0
 801074c:	d1e6      	bne.n	801071c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801074e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	3308      	adds	r3, #8
 8010754:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010758:	e853 3f00 	ldrex	r3, [r3]
 801075c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801075e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010760:	f023 0301 	bic.w	r3, r3, #1
 8010764:	667b      	str	r3, [r7, #100]	@ 0x64
 8010766:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	3308      	adds	r3, #8
 801076c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801076e:	647a      	str	r2, [r7, #68]	@ 0x44
 8010770:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010772:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010774:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010776:	e841 2300 	strex	r3, r2, [r1]
 801077a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801077c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801077e:	2b00      	cmp	r3, #0
 8010780:	d1e5      	bne.n	801074e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010782:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	3308      	adds	r3, #8
 8010788:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801078a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801078c:	e853 3f00 	ldrex	r3, [r3]
 8010790:	623b      	str	r3, [r7, #32]
   return(result);
 8010792:	6a3b      	ldr	r3, [r7, #32]
 8010794:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010798:	663b      	str	r3, [r7, #96]	@ 0x60
 801079a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	3308      	adds	r3, #8
 80107a0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80107a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80107a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80107a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80107aa:	e841 2300 	strex	r3, r2, [r1]
 80107ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80107b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d1e5      	bne.n	8010782 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80107b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107b8:	2220      	movs	r2, #32
 80107ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80107be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80107c2:	2b01      	cmp	r3, #1
 80107c4:	d118      	bne.n	80107f8 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80107c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107cc:	693b      	ldr	r3, [r7, #16]
 80107ce:	e853 3f00 	ldrex	r3, [r3]
 80107d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	f023 0310 	bic.w	r3, r3, #16
 80107da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80107dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	461a      	mov	r2, r3
 80107e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80107e4:	61fb      	str	r3, [r7, #28]
 80107e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107e8:	69b9      	ldr	r1, [r7, #24]
 80107ea:	69fa      	ldr	r2, [r7, #28]
 80107ec:	e841 2300 	strex	r3, r2, [r1]
 80107f0:	617b      	str	r3, [r7, #20]
   return(result);
 80107f2:	697b      	ldr	r3, [r7, #20]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d1e6      	bne.n	80107c6 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80107f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107fa:	2200      	movs	r2, #0
 80107fc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80107fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010800:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010802:	2b01      	cmp	r3, #1
 8010804:	d107      	bne.n	8010816 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010806:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010808:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801080c:	4619      	mov	r1, r3
 801080e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010810:	f7fe fdf4 	bl	800f3fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010814:	e002      	b.n	801081c <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8010816:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010818:	f7f3 fc02 	bl	8004020 <HAL_UART_RxCpltCallback>
}
 801081c:	bf00      	nop
 801081e:	3770      	adds	r7, #112	@ 0x70
 8010820:	46bd      	mov	sp, r7
 8010822:	bd80      	pop	{r7, pc}

08010824 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010824:	b580      	push	{r7, lr}
 8010826:	b084      	sub	sp, #16
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010830:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	2201      	movs	r2, #1
 8010836:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801083c:	2b01      	cmp	r3, #1
 801083e:	d109      	bne.n	8010854 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010846:	085b      	lsrs	r3, r3, #1
 8010848:	b29b      	uxth	r3, r3
 801084a:	4619      	mov	r1, r3
 801084c:	68f8      	ldr	r0, [r7, #12]
 801084e:	f7fe fdd5 	bl	800f3fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010852:	e002      	b.n	801085a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8010854:	68f8      	ldr	r0, [r7, #12]
 8010856:	f7fe fdb3 	bl	800f3c0 <HAL_UART_RxHalfCpltCallback>
}
 801085a:	bf00      	nop
 801085c:	3710      	adds	r7, #16
 801085e:	46bd      	mov	sp, r7
 8010860:	bd80      	pop	{r7, pc}

08010862 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010862:	b580      	push	{r7, lr}
 8010864:	b086      	sub	sp, #24
 8010866:	af00      	add	r7, sp, #0
 8010868:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801086e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010870:	697b      	ldr	r3, [r7, #20]
 8010872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010876:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010878:	697b      	ldr	r3, [r7, #20]
 801087a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801087e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010880:	697b      	ldr	r3, [r7, #20]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	689b      	ldr	r3, [r3, #8]
 8010886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801088a:	2b80      	cmp	r3, #128	@ 0x80
 801088c:	d109      	bne.n	80108a2 <UART_DMAError+0x40>
 801088e:	693b      	ldr	r3, [r7, #16]
 8010890:	2b21      	cmp	r3, #33	@ 0x21
 8010892:	d106      	bne.n	80108a2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010894:	697b      	ldr	r3, [r7, #20]
 8010896:	2200      	movs	r2, #0
 8010898:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 801089c:	6978      	ldr	r0, [r7, #20]
 801089e:	f7ff fe85 	bl	80105ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80108a2:	697b      	ldr	r3, [r7, #20]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	689b      	ldr	r3, [r3, #8]
 80108a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80108ac:	2b40      	cmp	r3, #64	@ 0x40
 80108ae:	d109      	bne.n	80108c4 <UART_DMAError+0x62>
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	2b22      	cmp	r3, #34	@ 0x22
 80108b4:	d106      	bne.n	80108c4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80108b6:	697b      	ldr	r3, [r7, #20]
 80108b8:	2200      	movs	r2, #0
 80108ba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80108be:	6978      	ldr	r0, [r7, #20]
 80108c0:	f7ff feb6 	bl	8010630 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80108c4:	697b      	ldr	r3, [r7, #20]
 80108c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80108ca:	f043 0210 	orr.w	r2, r3, #16
 80108ce:	697b      	ldr	r3, [r7, #20]
 80108d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80108d4:	6978      	ldr	r0, [r7, #20]
 80108d6:	f7fe fd7d 	bl	800f3d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80108da:	bf00      	nop
 80108dc:	3718      	adds	r7, #24
 80108de:	46bd      	mov	sp, r7
 80108e0:	bd80      	pop	{r7, pc}

080108e2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80108e2:	b580      	push	{r7, lr}
 80108e4:	b084      	sub	sp, #16
 80108e6:	af00      	add	r7, sp, #0
 80108e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	2200      	movs	r2, #0
 80108f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	2200      	movs	r2, #0
 80108fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010900:	68f8      	ldr	r0, [r7, #12]
 8010902:	f7fe fd67 	bl	800f3d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010906:	bf00      	nop
 8010908:	3710      	adds	r7, #16
 801090a:	46bd      	mov	sp, r7
 801090c:	bd80      	pop	{r7, pc}

0801090e <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 801090e:	b580      	push	{r7, lr}
 8010910:	b084      	sub	sp, #16
 8010912:	af00      	add	r7, sp, #0
 8010914:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801091a:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010920:	2200      	movs	r2, #0
 8010922:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801092a:	2b00      	cmp	r3, #0
 801092c:	d005      	beq.n	801093a <UART_DMATxAbortCallback+0x2c>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010934:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010936:	2b00      	cmp	r3, #0
 8010938:	d12b      	bne.n	8010992 <UART_DMATxAbortCallback+0x84>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	2200      	movs	r2, #0
 801093e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	2200      	movs	r2, #0
 8010946:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	2200      	movs	r2, #0
 801094e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	220f      	movs	r2, #15
 8010958:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801095e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010962:	d107      	bne.n	8010974 <UART_DMATxAbortCallback+0x66>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	699a      	ldr	r2, [r3, #24]
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	f042 0210 	orr.w	r2, r2, #16
 8010972:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	2220      	movs	r2, #32
 8010978:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	2220      	movs	r2, #32
 8010980:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	2200      	movs	r2, #0
 8010988:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 801098a:	68f8      	ldr	r0, [r7, #12]
 801098c:	f7fe fd2c 	bl	800f3e8 <HAL_UART_AbortCpltCallback>
 8010990:	e000      	b.n	8010994 <UART_DMATxAbortCallback+0x86>
      return;
 8010992:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010994:	3710      	adds	r7, #16
 8010996:	46bd      	mov	sp, r7
 8010998:	bd80      	pop	{r7, pc}

0801099a <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 801099a:	b580      	push	{r7, lr}
 801099c:	b084      	sub	sp, #16
 801099e:	af00      	add	r7, sp, #0
 80109a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80109a6:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80109ae:	2200      	movs	r2, #0
 80109b0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d004      	beq.n	80109c4 <UART_DMARxAbortCallback+0x2a>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80109be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d126      	bne.n	8010a12 <UART_DMARxAbortCallback+0x78>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	2200      	movs	r2, #0
 80109c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	2200      	movs	r2, #0
 80109d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	2200      	movs	r2, #0
 80109d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	220f      	movs	r2, #15
 80109e2:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	699a      	ldr	r2, [r3, #24]
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	f042 0208 	orr.w	r2, r2, #8
 80109f2:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	2220      	movs	r2, #32
 80109f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	2220      	movs	r2, #32
 8010a00:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	2200      	movs	r2, #0
 8010a08:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8010a0a:	68f8      	ldr	r0, [r7, #12]
 8010a0c:	f7fe fcec 	bl	800f3e8 <HAL_UART_AbortCpltCallback>
 8010a10:	e000      	b.n	8010a14 <UART_DMARxAbortCallback+0x7a>
      return;
 8010a12:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010a14:	3710      	adds	r7, #16
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd80      	pop	{r7, pc}

08010a1a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010a1a:	b480      	push	{r7}
 8010a1c:	b08f      	sub	sp, #60	@ 0x3c
 8010a1e:	af00      	add	r7, sp, #0
 8010a20:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010a28:	2b21      	cmp	r3, #33	@ 0x21
 8010a2a:	d14c      	bne.n	8010ac6 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010a32:	b29b      	uxth	r3, r3
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d132      	bne.n	8010a9e <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a3e:	6a3b      	ldr	r3, [r7, #32]
 8010a40:	e853 3f00 	ldrex	r3, [r3]
 8010a44:	61fb      	str	r3, [r7, #28]
   return(result);
 8010a46:	69fb      	ldr	r3, [r7, #28]
 8010a48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010a4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	461a      	mov	r2, r3
 8010a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010a58:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010a5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010a5e:	e841 2300 	strex	r3, r2, [r1]
 8010a62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d1e6      	bne.n	8010a38 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	e853 3f00 	ldrex	r3, [r3]
 8010a76:	60bb      	str	r3, [r7, #8]
   return(result);
 8010a78:	68bb      	ldr	r3, [r7, #8]
 8010a7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	461a      	mov	r2, r3
 8010a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a88:	61bb      	str	r3, [r7, #24]
 8010a8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a8c:	6979      	ldr	r1, [r7, #20]
 8010a8e:	69ba      	ldr	r2, [r7, #24]
 8010a90:	e841 2300 	strex	r3, r2, [r1]
 8010a94:	613b      	str	r3, [r7, #16]
   return(result);
 8010a96:	693b      	ldr	r3, [r7, #16]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d1e6      	bne.n	8010a6a <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8010a9c:	e013      	b.n	8010ac6 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010aa2:	781a      	ldrb	r2, [r3, #0]
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010aae:	1c5a      	adds	r2, r3, #1
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010aba:	b29b      	uxth	r3, r3
 8010abc:	3b01      	subs	r3, #1
 8010abe:	b29a      	uxth	r2, r3
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8010ac6:	bf00      	nop
 8010ac8:	373c      	adds	r7, #60	@ 0x3c
 8010aca:	46bd      	mov	sp, r7
 8010acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad0:	4770      	bx	lr

08010ad2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010ad2:	b480      	push	{r7}
 8010ad4:	b091      	sub	sp, #68	@ 0x44
 8010ad6:	af00      	add	r7, sp, #0
 8010ad8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010ae0:	2b21      	cmp	r3, #33	@ 0x21
 8010ae2:	d151      	bne.n	8010b88 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010aea:	b29b      	uxth	r3, r3
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d132      	bne.n	8010b56 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010af8:	e853 3f00 	ldrex	r3, [r3]
 8010afc:	623b      	str	r3, [r7, #32]
   return(result);
 8010afe:	6a3b      	ldr	r3, [r7, #32]
 8010b00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010b04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	461a      	mov	r2, r3
 8010b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8010b10:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010b14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010b16:	e841 2300 	strex	r3, r2, [r1]
 8010b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d1e6      	bne.n	8010af0 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b28:	693b      	ldr	r3, [r7, #16]
 8010b2a:	e853 3f00 	ldrex	r3, [r3]
 8010b2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b36:	637b      	str	r3, [r7, #52]	@ 0x34
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	461a      	mov	r2, r3
 8010b3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b40:	61fb      	str	r3, [r7, #28]
 8010b42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b44:	69b9      	ldr	r1, [r7, #24]
 8010b46:	69fa      	ldr	r2, [r7, #28]
 8010b48:	e841 2300 	strex	r3, r2, [r1]
 8010b4c:	617b      	str	r3, [r7, #20]
   return(result);
 8010b4e:	697b      	ldr	r3, [r7, #20]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d1e6      	bne.n	8010b22 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8010b54:	e018      	b.n	8010b88 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8010b5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b5e:	881b      	ldrh	r3, [r3, #0]
 8010b60:	461a      	mov	r2, r3
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010b6a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010b70:	1c9a      	adds	r2, r3, #2
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010b7c:	b29b      	uxth	r3, r3
 8010b7e:	3b01      	subs	r3, #1
 8010b80:	b29a      	uxth	r2, r3
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8010b88:	bf00      	nop
 8010b8a:	3744      	adds	r7, #68	@ 0x44
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b92:	4770      	bx	lr

08010b94 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010b94:	b480      	push	{r7}
 8010b96:	b091      	sub	sp, #68	@ 0x44
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010ba2:	2b21      	cmp	r3, #33	@ 0x21
 8010ba4:	d160      	bne.n	8010c68 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010bac:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8010bae:	e057      	b.n	8010c60 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010bb6:	b29b      	uxth	r3, r3
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d133      	bne.n	8010c24 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	3308      	adds	r3, #8
 8010bc2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bc6:	e853 3f00 	ldrex	r3, [r3]
 8010bca:	623b      	str	r3, [r7, #32]
   return(result);
 8010bcc:	6a3b      	ldr	r3, [r7, #32]
 8010bce:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8010bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	3308      	adds	r3, #8
 8010bda:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010bdc:	633a      	str	r2, [r7, #48]	@ 0x30
 8010bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010be0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010be2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010be4:	e841 2300 	strex	r3, r2, [r1]
 8010be8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d1e5      	bne.n	8010bbc <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bf6:	693b      	ldr	r3, [r7, #16]
 8010bf8:	e853 3f00 	ldrex	r3, [r3]
 8010bfc:	60fb      	str	r3, [r7, #12]
   return(result);
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c04:	637b      	str	r3, [r7, #52]	@ 0x34
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	461a      	mov	r2, r3
 8010c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c0e:	61fb      	str	r3, [r7, #28]
 8010c10:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c12:	69b9      	ldr	r1, [r7, #24]
 8010c14:	69fa      	ldr	r2, [r7, #28]
 8010c16:	e841 2300 	strex	r3, r2, [r1]
 8010c1a:	617b      	str	r3, [r7, #20]
   return(result);
 8010c1c:	697b      	ldr	r3, [r7, #20]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d1e6      	bne.n	8010bf0 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8010c22:	e021      	b.n	8010c68 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	69db      	ldr	r3, [r3, #28]
 8010c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d013      	beq.n	8010c5a <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010c36:	781a      	ldrb	r2, [r3, #0]
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010c42:	1c5a      	adds	r2, r3, #1
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010c4e:	b29b      	uxth	r3, r3
 8010c50:	3b01      	subs	r3, #1
 8010c52:	b29a      	uxth	r2, r3
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8010c5a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010c5c:	3b01      	subs	r3, #1
 8010c5e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8010c60:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d1a4      	bne.n	8010bb0 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8010c66:	e7ff      	b.n	8010c68 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8010c68:	bf00      	nop
 8010c6a:	3744      	adds	r7, #68	@ 0x44
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c72:	4770      	bx	lr

08010c74 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010c74:	b480      	push	{r7}
 8010c76:	b091      	sub	sp, #68	@ 0x44
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010c82:	2b21      	cmp	r3, #33	@ 0x21
 8010c84:	d165      	bne.n	8010d52 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010c8c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8010c8e:	e05c      	b.n	8010d4a <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010c96:	b29b      	uxth	r3, r3
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d133      	bne.n	8010d04 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	3308      	adds	r3, #8
 8010ca2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ca4:	6a3b      	ldr	r3, [r7, #32]
 8010ca6:	e853 3f00 	ldrex	r3, [r3]
 8010caa:	61fb      	str	r3, [r7, #28]
   return(result);
 8010cac:	69fb      	ldr	r3, [r7, #28]
 8010cae:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8010cb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	3308      	adds	r3, #8
 8010cba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010cbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010cc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010cc4:	e841 2300 	strex	r3, r2, [r1]
 8010cc8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d1e5      	bne.n	8010c9c <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	e853 3f00 	ldrex	r3, [r3]
 8010cdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8010cde:	68bb      	ldr	r3, [r7, #8]
 8010ce0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ce4:	633b      	str	r3, [r7, #48]	@ 0x30
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	461a      	mov	r2, r3
 8010cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cee:	61bb      	str	r3, [r7, #24]
 8010cf0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cf2:	6979      	ldr	r1, [r7, #20]
 8010cf4:	69ba      	ldr	r2, [r7, #24]
 8010cf6:	e841 2300 	strex	r3, r2, [r1]
 8010cfa:	613b      	str	r3, [r7, #16]
   return(result);
 8010cfc:	693b      	ldr	r3, [r7, #16]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d1e6      	bne.n	8010cd0 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8010d02:	e026      	b.n	8010d52 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	69db      	ldr	r3, [r3, #28]
 8010d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d018      	beq.n	8010d44 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010d16:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8010d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d1a:	881b      	ldrh	r3, [r3, #0]
 8010d1c:	461a      	mov	r2, r3
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010d26:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010d2c:	1c9a      	adds	r2, r3, #2
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010d38:	b29b      	uxth	r3, r3
 8010d3a:	3b01      	subs	r3, #1
 8010d3c:	b29a      	uxth	r2, r3
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8010d44:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010d46:	3b01      	subs	r3, #1
 8010d48:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8010d4a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d19f      	bne.n	8010c90 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8010d50:	e7ff      	b.n	8010d52 <UART_TxISR_16BIT_FIFOEN+0xde>
 8010d52:	bf00      	nop
 8010d54:	3744      	adds	r7, #68	@ 0x44
 8010d56:	46bd      	mov	sp, r7
 8010d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5c:	4770      	bx	lr

08010d5e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010d5e:	b580      	push	{r7, lr}
 8010d60:	b088      	sub	sp, #32
 8010d62:	af00      	add	r7, sp, #0
 8010d64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	e853 3f00 	ldrex	r3, [r3]
 8010d72:	60bb      	str	r3, [r7, #8]
   return(result);
 8010d74:	68bb      	ldr	r3, [r7, #8]
 8010d76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010d7a:	61fb      	str	r3, [r7, #28]
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	461a      	mov	r2, r3
 8010d82:	69fb      	ldr	r3, [r7, #28]
 8010d84:	61bb      	str	r3, [r7, #24]
 8010d86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d88:	6979      	ldr	r1, [r7, #20]
 8010d8a:	69ba      	ldr	r2, [r7, #24]
 8010d8c:	e841 2300 	strex	r3, r2, [r1]
 8010d90:	613b      	str	r3, [r7, #16]
   return(result);
 8010d92:	693b      	ldr	r3, [r7, #16]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d1e6      	bne.n	8010d66 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	2220      	movs	r2, #32
 8010d9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	2200      	movs	r2, #0
 8010da4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010da6:	6878      	ldr	r0, [r7, #4]
 8010da8:	f7fe fb00 	bl	800f3ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010dac:	bf00      	nop
 8010dae:	3720      	adds	r7, #32
 8010db0:	46bd      	mov	sp, r7
 8010db2:	bd80      	pop	{r7, pc}

08010db4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010db4:	b480      	push	{r7}
 8010db6:	b083      	sub	sp, #12
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010dbc:	bf00      	nop
 8010dbe:	370c      	adds	r7, #12
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc6:	4770      	bx	lr

08010dc8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010dc8:	b480      	push	{r7}
 8010dca:	b083      	sub	sp, #12
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010dd0:	bf00      	nop
 8010dd2:	370c      	adds	r7, #12
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dda:	4770      	bx	lr

08010ddc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010ddc:	b480      	push	{r7}
 8010dde:	b083      	sub	sp, #12
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010de4:	bf00      	nop
 8010de6:	370c      	adds	r7, #12
 8010de8:	46bd      	mov	sp, r7
 8010dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dee:	4770      	bx	lr

08010df0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010df0:	b480      	push	{r7}
 8010df2:	b085      	sub	sp, #20
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010dfe:	2b01      	cmp	r3, #1
 8010e00:	d101      	bne.n	8010e06 <HAL_UARTEx_DisableFifoMode+0x16>
 8010e02:	2302      	movs	r3, #2
 8010e04:	e027      	b.n	8010e56 <HAL_UARTEx_DisableFifoMode+0x66>
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	2201      	movs	r2, #1
 8010e0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	2224      	movs	r2, #36	@ 0x24
 8010e12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	681a      	ldr	r2, [r3, #0]
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	f022 0201 	bic.w	r2, r2, #1
 8010e2c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010e34:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	2200      	movs	r2, #0
 8010e3a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	68fa      	ldr	r2, [r7, #12]
 8010e42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	2220      	movs	r2, #32
 8010e48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	2200      	movs	r2, #0
 8010e50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010e54:	2300      	movs	r3, #0
}
 8010e56:	4618      	mov	r0, r3
 8010e58:	3714      	adds	r7, #20
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e60:	4770      	bx	lr

08010e62 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010e62:	b580      	push	{r7, lr}
 8010e64:	b084      	sub	sp, #16
 8010e66:	af00      	add	r7, sp, #0
 8010e68:	6078      	str	r0, [r7, #4]
 8010e6a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010e72:	2b01      	cmp	r3, #1
 8010e74:	d101      	bne.n	8010e7a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010e76:	2302      	movs	r3, #2
 8010e78:	e02d      	b.n	8010ed6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	2201      	movs	r2, #1
 8010e7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	2224      	movs	r2, #36	@ 0x24
 8010e86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	681a      	ldr	r2, [r3, #0]
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	f022 0201 	bic.w	r2, r2, #1
 8010ea0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	689b      	ldr	r3, [r3, #8]
 8010ea8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	683a      	ldr	r2, [r7, #0]
 8010eb2:	430a      	orrs	r2, r1
 8010eb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010eb6:	6878      	ldr	r0, [r7, #4]
 8010eb8:	f000 f850 	bl	8010f5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	68fa      	ldr	r2, [r7, #12]
 8010ec2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	2220      	movs	r2, #32
 8010ec8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	2200      	movs	r2, #0
 8010ed0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010ed4:	2300      	movs	r3, #0
}
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	3710      	adds	r7, #16
 8010eda:	46bd      	mov	sp, r7
 8010edc:	bd80      	pop	{r7, pc}

08010ede <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010ede:	b580      	push	{r7, lr}
 8010ee0:	b084      	sub	sp, #16
 8010ee2:	af00      	add	r7, sp, #0
 8010ee4:	6078      	str	r0, [r7, #4]
 8010ee6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010eee:	2b01      	cmp	r3, #1
 8010ef0:	d101      	bne.n	8010ef6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010ef2:	2302      	movs	r3, #2
 8010ef4:	e02d      	b.n	8010f52 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	2201      	movs	r2, #1
 8010efa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	2224      	movs	r2, #36	@ 0x24
 8010f02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	681a      	ldr	r2, [r3, #0]
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	f022 0201 	bic.w	r2, r2, #1
 8010f1c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	689b      	ldr	r3, [r3, #8]
 8010f24:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	683a      	ldr	r2, [r7, #0]
 8010f2e:	430a      	orrs	r2, r1
 8010f30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010f32:	6878      	ldr	r0, [r7, #4]
 8010f34:	f000 f812 	bl	8010f5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	68fa      	ldr	r2, [r7, #12]
 8010f3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	2220      	movs	r2, #32
 8010f44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010f50:	2300      	movs	r3, #0
}
 8010f52:	4618      	mov	r0, r3
 8010f54:	3710      	adds	r7, #16
 8010f56:	46bd      	mov	sp, r7
 8010f58:	bd80      	pop	{r7, pc}
	...

08010f5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010f5c:	b480      	push	{r7}
 8010f5e:	b085      	sub	sp, #20
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d108      	bne.n	8010f7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	2201      	movs	r2, #1
 8010f70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	2201      	movs	r2, #1
 8010f78:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010f7c:	e031      	b.n	8010fe2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010f7e:	2310      	movs	r3, #16
 8010f80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010f82:	2310      	movs	r3, #16
 8010f84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	689b      	ldr	r3, [r3, #8]
 8010f8c:	0e5b      	lsrs	r3, r3, #25
 8010f8e:	b2db      	uxtb	r3, r3
 8010f90:	f003 0307 	and.w	r3, r3, #7
 8010f94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	689b      	ldr	r3, [r3, #8]
 8010f9c:	0f5b      	lsrs	r3, r3, #29
 8010f9e:	b2db      	uxtb	r3, r3
 8010fa0:	f003 0307 	and.w	r3, r3, #7
 8010fa4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010fa6:	7bbb      	ldrb	r3, [r7, #14]
 8010fa8:	7b3a      	ldrb	r2, [r7, #12]
 8010faa:	4911      	ldr	r1, [pc, #68]	@ (8010ff0 <UARTEx_SetNbDataToProcess+0x94>)
 8010fac:	5c8a      	ldrb	r2, [r1, r2]
 8010fae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010fb2:	7b3a      	ldrb	r2, [r7, #12]
 8010fb4:	490f      	ldr	r1, [pc, #60]	@ (8010ff4 <UARTEx_SetNbDataToProcess+0x98>)
 8010fb6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010fb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8010fbc:	b29a      	uxth	r2, r3
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010fc4:	7bfb      	ldrb	r3, [r7, #15]
 8010fc6:	7b7a      	ldrb	r2, [r7, #13]
 8010fc8:	4909      	ldr	r1, [pc, #36]	@ (8010ff0 <UARTEx_SetNbDataToProcess+0x94>)
 8010fca:	5c8a      	ldrb	r2, [r1, r2]
 8010fcc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010fd0:	7b7a      	ldrb	r2, [r7, #13]
 8010fd2:	4908      	ldr	r1, [pc, #32]	@ (8010ff4 <UARTEx_SetNbDataToProcess+0x98>)
 8010fd4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010fd6:	fb93 f3f2 	sdiv	r3, r3, r2
 8010fda:	b29a      	uxth	r2, r3
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010fe2:	bf00      	nop
 8010fe4:	3714      	adds	r7, #20
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fec:	4770      	bx	lr
 8010fee:	bf00      	nop
 8010ff0:	08018ce4 	.word	0x08018ce4
 8010ff4:	08018cec 	.word	0x08018cec

08010ff8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8010ffc:	4904      	ldr	r1, [pc, #16]	@ (8011010 <MX_FATFS_Init+0x18>)
 8010ffe:	4805      	ldr	r0, [pc, #20]	@ (8011014 <MX_FATFS_Init+0x1c>)
 8011000:	f004 fd9e 	bl	8015b40 <FATFS_LinkDriver>
 8011004:	4603      	mov	r3, r0
 8011006:	461a      	mov	r2, r3
 8011008:	4b03      	ldr	r3, [pc, #12]	@ (8011018 <MX_FATFS_Init+0x20>)
 801100a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801100c:	bf00      	nop
 801100e:	bd80      	pop	{r7, pc}
 8011010:	24005494 	.word	0x24005494
 8011014:	240000d0 	.word	0x240000d0
 8011018:	24005490 	.word	0x24005490

0801101c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801101c:	b480      	push	{r7}
 801101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8011020:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8011022:	4618      	mov	r0, r3
 8011024:	46bd      	mov	sp, r7
 8011026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102a:	4770      	bx	lr

0801102c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 801102c:	b580      	push	{r7, lr}
 801102e:	b082      	sub	sp, #8
 8011030:	af00      	add	r7, sp, #0
 8011032:	4603      	mov	r3, r0
 8011034:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8011036:	79fb      	ldrb	r3, [r7, #7]
 8011038:	4618      	mov	r0, r3
 801103a:	f000 f9fd 	bl	8011438 <SD_disk_initialize>
 801103e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8011040:	4618      	mov	r0, r3
 8011042:	3708      	adds	r7, #8
 8011044:	46bd      	mov	sp, r7
 8011046:	bd80      	pop	{r7, pc}

08011048 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b082      	sub	sp, #8
 801104c:	af00      	add	r7, sp, #0
 801104e:	4603      	mov	r3, r0
 8011050:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8011052:	79fb      	ldrb	r3, [r7, #7]
 8011054:	4618      	mov	r0, r3
 8011056:	f000 fad5 	bl	8011604 <SD_disk_status>
 801105a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 801105c:	4618      	mov	r0, r3
 801105e:	3708      	adds	r7, #8
 8011060:	46bd      	mov	sp, r7
 8011062:	bd80      	pop	{r7, pc}

08011064 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b084      	sub	sp, #16
 8011068:	af00      	add	r7, sp, #0
 801106a:	60b9      	str	r1, [r7, #8]
 801106c:	607a      	str	r2, [r7, #4]
 801106e:	603b      	str	r3, [r7, #0]
 8011070:	4603      	mov	r3, r0
 8011072:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8011074:	7bf8      	ldrb	r0, [r7, #15]
 8011076:	683b      	ldr	r3, [r7, #0]
 8011078:	687a      	ldr	r2, [r7, #4]
 801107a:	68b9      	ldr	r1, [r7, #8]
 801107c:	f000 fad8 	bl	8011630 <SD_disk_read>
 8011080:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8011082:	4618      	mov	r0, r3
 8011084:	3710      	adds	r7, #16
 8011086:	46bd      	mov	sp, r7
 8011088:	bd80      	pop	{r7, pc}

0801108a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 801108a:	b580      	push	{r7, lr}
 801108c:	b084      	sub	sp, #16
 801108e:	af00      	add	r7, sp, #0
 8011090:	60b9      	str	r1, [r7, #8]
 8011092:	607a      	str	r2, [r7, #4]
 8011094:	603b      	str	r3, [r7, #0]
 8011096:	4603      	mov	r3, r0
 8011098:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 801109a:	7bf8      	ldrb	r0, [r7, #15]
 801109c:	683b      	ldr	r3, [r7, #0]
 801109e:	687a      	ldr	r2, [r7, #4]
 80110a0:	68b9      	ldr	r1, [r7, #8]
 80110a2:	f000 fb2f 	bl	8011704 <SD_disk_write>
 80110a6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80110a8:	4618      	mov	r0, r3
 80110aa:	3710      	adds	r7, #16
 80110ac:	46bd      	mov	sp, r7
 80110ae:	bd80      	pop	{r7, pc}

080110b0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b082      	sub	sp, #8
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	4603      	mov	r3, r0
 80110b8:	603a      	str	r2, [r7, #0]
 80110ba:	71fb      	strb	r3, [r7, #7]
 80110bc:	460b      	mov	r3, r1
 80110be:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 80110c0:	79b9      	ldrb	r1, [r7, #6]
 80110c2:	79fb      	ldrb	r3, [r7, #7]
 80110c4:	683a      	ldr	r2, [r7, #0]
 80110c6:	4618      	mov	r0, r3
 80110c8:	f000 fba0 	bl	801180c <SD_disk_ioctl>
 80110cc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80110ce:	4618      	mov	r0, r3
 80110d0:	3708      	adds	r7, #8
 80110d2:	46bd      	mov	sp, r7
 80110d4:	bd80      	pop	{r7, pc}
	...

080110d8 <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 80110d8:	b580      	push	{r7, lr}
 80110da:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80110dc:	2200      	movs	r2, #0
 80110de:	2110      	movs	r1, #16
 80110e0:	4802      	ldr	r0, [pc, #8]	@ (80110ec <SELECT+0x14>)
 80110e2:	f7f8 f885 	bl	80091f0 <HAL_GPIO_WritePin>
}
 80110e6:	bf00      	nop
 80110e8:	bd80      	pop	{r7, pc}
 80110ea:	bf00      	nop
 80110ec:	58020000 	.word	0x58020000

080110f0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80110f4:	2201      	movs	r2, #1
 80110f6:	2110      	movs	r1, #16
 80110f8:	4802      	ldr	r0, [pc, #8]	@ (8011104 <DESELECT+0x14>)
 80110fa:	f7f8 f879 	bl	80091f0 <HAL_GPIO_WritePin>
}
 80110fe:	bf00      	nop
 8011100:	bd80      	pop	{r7, pc}
 8011102:	bf00      	nop
 8011104:	58020000 	.word	0x58020000

08011108 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b082      	sub	sp, #8
 801110c:	af00      	add	r7, sp, #0
 801110e:	4603      	mov	r3, r0
 8011110:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8011112:	bf00      	nop
 8011114:	4b08      	ldr	r3, [pc, #32]	@ (8011138 <SPI_TxByte+0x30>)
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	695b      	ldr	r3, [r3, #20]
 801111a:	f003 0302 	and.w	r3, r3, #2
 801111e:	2b02      	cmp	r3, #2
 8011120:	d1f8      	bne.n	8011114 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8011122:	1df9      	adds	r1, r7, #7
 8011124:	2364      	movs	r3, #100	@ 0x64
 8011126:	2201      	movs	r2, #1
 8011128:	4803      	ldr	r0, [pc, #12]	@ (8011138 <SPI_TxByte+0x30>)
 801112a:	f7fb f8ab 	bl	800c284 <HAL_SPI_Transmit>
}
 801112e:	bf00      	nop
 8011130:	3708      	adds	r7, #8
 8011132:	46bd      	mov	sp, r7
 8011134:	bd80      	pop	{r7, pc}
 8011136:	bf00      	nop
 8011138:	24004df8 	.word	0x24004df8

0801113c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b082      	sub	sp, #8
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
 8011144:	460b      	mov	r3, r1
 8011146:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8011148:	bf00      	nop
 801114a:	4b08      	ldr	r3, [pc, #32]	@ (801116c <SPI_TxBuffer+0x30>)
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	695b      	ldr	r3, [r3, #20]
 8011150:	f003 0302 	and.w	r3, r3, #2
 8011154:	2b02      	cmp	r3, #2
 8011156:	d1f8      	bne.n	801114a <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8011158:	887a      	ldrh	r2, [r7, #2]
 801115a:	2364      	movs	r3, #100	@ 0x64
 801115c:	6879      	ldr	r1, [r7, #4]
 801115e:	4803      	ldr	r0, [pc, #12]	@ (801116c <SPI_TxBuffer+0x30>)
 8011160:	f7fb f890 	bl	800c284 <HAL_SPI_Transmit>
}
 8011164:	bf00      	nop
 8011166:	3708      	adds	r7, #8
 8011168:	46bd      	mov	sp, r7
 801116a:	bd80      	pop	{r7, pc}
 801116c:	24004df8 	.word	0x24004df8

08011170 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8011170:	b580      	push	{r7, lr}
 8011172:	b084      	sub	sp, #16
 8011174:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8011176:	23ff      	movs	r3, #255	@ 0xff
 8011178:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 801117a:	bf00      	nop
 801117c:	4b09      	ldr	r3, [pc, #36]	@ (80111a4 <SPI_RxByte+0x34>)
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	695b      	ldr	r3, [r3, #20]
 8011182:	f003 0302 	and.w	r3, r3, #2
 8011186:	2b02      	cmp	r3, #2
 8011188:	d1f8      	bne.n	801117c <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 801118a:	1dba      	adds	r2, r7, #6
 801118c:	1df9      	adds	r1, r7, #7
 801118e:	2364      	movs	r3, #100	@ 0x64
 8011190:	9300      	str	r3, [sp, #0]
 8011192:	2301      	movs	r3, #1
 8011194:	4803      	ldr	r0, [pc, #12]	@ (80111a4 <SPI_RxByte+0x34>)
 8011196:	f7fb fcd5 	bl	800cb44 <HAL_SPI_TransmitReceive>
  return data;
 801119a:	79bb      	ldrb	r3, [r7, #6]
}
 801119c:	4618      	mov	r0, r3
 801119e:	3708      	adds	r7, #8
 80111a0:	46bd      	mov	sp, r7
 80111a2:	bd80      	pop	{r7, pc}
 80111a4:	24004df8 	.word	0x24004df8

080111a8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80111a8:	b580      	push	{r7, lr}
 80111aa:	b082      	sub	sp, #8
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80111b0:	f7ff ffde 	bl	8011170 <SPI_RxByte>
 80111b4:	4603      	mov	r3, r0
 80111b6:	461a      	mov	r2, r3
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	701a      	strb	r2, [r3, #0]
}
 80111bc:	bf00      	nop
 80111be:	3708      	adds	r7, #8
 80111c0:	46bd      	mov	sp, r7
 80111c2:	bd80      	pop	{r7, pc}

080111c4 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b082      	sub	sp, #8
 80111c8:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 80111ca:	4b0a      	ldr	r3, [pc, #40]	@ (80111f4 <SD_ReadyWait+0x30>)
 80111cc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80111d0:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 80111d2:	f7ff ffcd 	bl	8011170 <SPI_RxByte>
 80111d6:	4603      	mov	r3, r0
 80111d8:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80111da:	79fb      	ldrb	r3, [r7, #7]
 80111dc:	2bff      	cmp	r3, #255	@ 0xff
 80111de:	d003      	beq.n	80111e8 <SD_ReadyWait+0x24>
 80111e0:	4b04      	ldr	r3, [pc, #16]	@ (80111f4 <SD_ReadyWait+0x30>)
 80111e2:	881b      	ldrh	r3, [r3, #0]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d1f4      	bne.n	80111d2 <SD_ReadyWait+0xe>
  return res;
 80111e8:	79fb      	ldrb	r3, [r7, #7]
}
 80111ea:	4618      	mov	r0, r3
 80111ec:	3708      	adds	r7, #8
 80111ee:	46bd      	mov	sp, r7
 80111f0:	bd80      	pop	{r7, pc}
 80111f2:	bf00      	nop
 80111f4:	2400549a 	.word	0x2400549a

080111f8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b084      	sub	sp, #16
 80111fc:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 80111fe:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8011202:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 8011204:	f7ff ff74 	bl	80110f0 <DESELECT>
  for(int i = 0; i < 10; i++)
 8011208:	2300      	movs	r3, #0
 801120a:	60bb      	str	r3, [r7, #8]
 801120c:	e005      	b.n	801121a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 801120e:	20ff      	movs	r0, #255	@ 0xff
 8011210:	f7ff ff7a 	bl	8011108 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8011214:	68bb      	ldr	r3, [r7, #8]
 8011216:	3301      	adds	r3, #1
 8011218:	60bb      	str	r3, [r7, #8]
 801121a:	68bb      	ldr	r3, [r7, #8]
 801121c:	2b09      	cmp	r3, #9
 801121e:	ddf6      	ble.n	801120e <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 8011220:	f7ff ff5a 	bl	80110d8 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8011224:	2340      	movs	r3, #64	@ 0x40
 8011226:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8011228:	2300      	movs	r3, #0
 801122a:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 801122c:	2300      	movs	r3, #0
 801122e:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8011230:	2300      	movs	r3, #0
 8011232:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8011234:	2300      	movs	r3, #0
 8011236:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 8011238:	2395      	movs	r3, #149	@ 0x95
 801123a:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 801123c:	463b      	mov	r3, r7
 801123e:	2106      	movs	r1, #6
 8011240:	4618      	mov	r0, r3
 8011242:	f7ff ff7b 	bl	801113c <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8011246:	e002      	b.n	801124e <SD_PowerOn+0x56>
  {
    cnt--;
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	3b01      	subs	r3, #1
 801124c:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 801124e:	f7ff ff8f 	bl	8011170 <SPI_RxByte>
 8011252:	4603      	mov	r3, r0
 8011254:	2b01      	cmp	r3, #1
 8011256:	d002      	beq.n	801125e <SD_PowerOn+0x66>
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d1f4      	bne.n	8011248 <SD_PowerOn+0x50>
  }
  DESELECT();
 801125e:	f7ff ff47 	bl	80110f0 <DESELECT>
  SPI_TxByte(0XFF);
 8011262:	20ff      	movs	r0, #255	@ 0xff
 8011264:	f7ff ff50 	bl	8011108 <SPI_TxByte>
  PowerFlag = 1;
 8011268:	4b03      	ldr	r3, [pc, #12]	@ (8011278 <SD_PowerOn+0x80>)
 801126a:	2201      	movs	r2, #1
 801126c:	701a      	strb	r2, [r3, #0]
}
 801126e:	bf00      	nop
 8011270:	3710      	adds	r7, #16
 8011272:	46bd      	mov	sp, r7
 8011274:	bd80      	pop	{r7, pc}
 8011276:	bf00      	nop
 8011278:	2400549d 	.word	0x2400549d

0801127c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 801127c:	b480      	push	{r7}
 801127e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8011280:	4b03      	ldr	r3, [pc, #12]	@ (8011290 <SD_PowerOff+0x14>)
 8011282:	2200      	movs	r2, #0
 8011284:	701a      	strb	r2, [r3, #0]
}
 8011286:	bf00      	nop
 8011288:	46bd      	mov	sp, r7
 801128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128e:	4770      	bx	lr
 8011290:	2400549d 	.word	0x2400549d

08011294 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8011294:	b480      	push	{r7}
 8011296:	af00      	add	r7, sp, #0
  return PowerFlag;
 8011298:	4b03      	ldr	r3, [pc, #12]	@ (80112a8 <SD_CheckPower+0x14>)
 801129a:	781b      	ldrb	r3, [r3, #0]
}
 801129c:	4618      	mov	r0, r3
 801129e:	46bd      	mov	sp, r7
 80112a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a4:	4770      	bx	lr
 80112a6:	bf00      	nop
 80112a8:	2400549d 	.word	0x2400549d

080112ac <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b084      	sub	sp, #16
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]
 80112b4:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 80112b6:	4b13      	ldr	r3, [pc, #76]	@ (8011304 <SD_RxDataBlock+0x58>)
 80112b8:	22c8      	movs	r2, #200	@ 0xc8
 80112ba:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 80112bc:	f7ff ff58 	bl	8011170 <SPI_RxByte>
 80112c0:	4603      	mov	r3, r0
 80112c2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80112c4:	7bfb      	ldrb	r3, [r7, #15]
 80112c6:	2bff      	cmp	r3, #255	@ 0xff
 80112c8:	d103      	bne.n	80112d2 <SD_RxDataBlock+0x26>
 80112ca:	4b0e      	ldr	r3, [pc, #56]	@ (8011304 <SD_RxDataBlock+0x58>)
 80112cc:	881b      	ldrh	r3, [r3, #0]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d1f4      	bne.n	80112bc <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 80112d2:	7bfb      	ldrb	r3, [r7, #15]
 80112d4:	2bfe      	cmp	r3, #254	@ 0xfe
 80112d6:	d001      	beq.n	80112dc <SD_RxDataBlock+0x30>
 80112d8:	2300      	movs	r3, #0
 80112da:	e00f      	b.n	80112fc <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	1c5a      	adds	r2, r3, #1
 80112e0:	607a      	str	r2, [r7, #4]
 80112e2:	4618      	mov	r0, r3
 80112e4:	f7ff ff60 	bl	80111a8 <SPI_RxBytePtr>
  } while(len--);
 80112e8:	683b      	ldr	r3, [r7, #0]
 80112ea:	1e5a      	subs	r2, r3, #1
 80112ec:	603a      	str	r2, [r7, #0]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d1f4      	bne.n	80112dc <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 80112f2:	f7ff ff3d 	bl	8011170 <SPI_RxByte>
  SPI_RxByte();
 80112f6:	f7ff ff3b 	bl	8011170 <SPI_RxByte>
  return TRUE;
 80112fa:	2301      	movs	r3, #1
}
 80112fc:	4618      	mov	r0, r3
 80112fe:	3710      	adds	r7, #16
 8011300:	46bd      	mov	sp, r7
 8011302:	bd80      	pop	{r7, pc}
 8011304:	24005498 	.word	0x24005498

08011308 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8011308:	b580      	push	{r7, lr}
 801130a:	b084      	sub	sp, #16
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
 8011310:	460b      	mov	r3, r1
 8011312:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8011314:	2300      	movs	r3, #0
 8011316:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8011318:	f7ff ff54 	bl	80111c4 <SD_ReadyWait>
 801131c:	4603      	mov	r3, r0
 801131e:	2bff      	cmp	r3, #255	@ 0xff
 8011320:	d001      	beq.n	8011326 <SD_TxDataBlock+0x1e>
 8011322:	2300      	movs	r3, #0
 8011324:	e02f      	b.n	8011386 <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 8011326:	78fb      	ldrb	r3, [r7, #3]
 8011328:	4618      	mov	r0, r3
 801132a:	f7ff feed 	bl	8011108 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 801132e:	78fb      	ldrb	r3, [r7, #3]
 8011330:	2bfd      	cmp	r3, #253	@ 0xfd
 8011332:	d020      	beq.n	8011376 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8011334:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8011338:	6878      	ldr	r0, [r7, #4]
 801133a:	f7ff feff 	bl	801113c <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 801133e:	f7ff ff17 	bl	8011170 <SPI_RxByte>
    SPI_RxByte();
 8011342:	f7ff ff15 	bl	8011170 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 8011346:	e00b      	b.n	8011360 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8011348:	f7ff ff12 	bl	8011170 <SPI_RxByte>
 801134c:	4603      	mov	r3, r0
 801134e:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8011350:	7bfb      	ldrb	r3, [r7, #15]
 8011352:	f003 031f 	and.w	r3, r3, #31
 8011356:	2b05      	cmp	r3, #5
 8011358:	d006      	beq.n	8011368 <SD_TxDataBlock+0x60>
      i++;
 801135a:	7bbb      	ldrb	r3, [r7, #14]
 801135c:	3301      	adds	r3, #1
 801135e:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8011360:	7bbb      	ldrb	r3, [r7, #14]
 8011362:	2b40      	cmp	r3, #64	@ 0x40
 8011364:	d9f0      	bls.n	8011348 <SD_TxDataBlock+0x40>
 8011366:	e000      	b.n	801136a <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8011368:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 801136a:	bf00      	nop
 801136c:	f7ff ff00 	bl	8011170 <SPI_RxByte>
 8011370:	4603      	mov	r3, r0
 8011372:	2b00      	cmp	r3, #0
 8011374:	d0fa      	beq.n	801136c <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8011376:	7bfb      	ldrb	r3, [r7, #15]
 8011378:	f003 031f 	and.w	r3, r3, #31
 801137c:	2b05      	cmp	r3, #5
 801137e:	d101      	bne.n	8011384 <SD_TxDataBlock+0x7c>
 8011380:	2301      	movs	r3, #1
 8011382:	e000      	b.n	8011386 <SD_TxDataBlock+0x7e>

  return FALSE;
 8011384:	2300      	movs	r3, #0
}
 8011386:	4618      	mov	r0, r3
 8011388:	3710      	adds	r7, #16
 801138a:	46bd      	mov	sp, r7
 801138c:	bd80      	pop	{r7, pc}

0801138e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 801138e:	b580      	push	{r7, lr}
 8011390:	b084      	sub	sp, #16
 8011392:	af00      	add	r7, sp, #0
 8011394:	4603      	mov	r3, r0
 8011396:	6039      	str	r1, [r7, #0]
 8011398:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 801139a:	f7ff ff13 	bl	80111c4 <SD_ReadyWait>
 801139e:	4603      	mov	r3, r0
 80113a0:	2bff      	cmp	r3, #255	@ 0xff
 80113a2:	d001      	beq.n	80113a8 <SD_SendCmd+0x1a>
 80113a4:	23ff      	movs	r3, #255	@ 0xff
 80113a6:	e042      	b.n	801142e <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 80113a8:	79fb      	ldrb	r3, [r7, #7]
 80113aa:	4618      	mov	r0, r3
 80113ac:	f7ff feac 	bl	8011108 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 80113b0:	683b      	ldr	r3, [r7, #0]
 80113b2:	0e1b      	lsrs	r3, r3, #24
 80113b4:	b2db      	uxtb	r3, r3
 80113b6:	4618      	mov	r0, r3
 80113b8:	f7ff fea6 	bl	8011108 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 80113bc:	683b      	ldr	r3, [r7, #0]
 80113be:	0c1b      	lsrs	r3, r3, #16
 80113c0:	b2db      	uxtb	r3, r3
 80113c2:	4618      	mov	r0, r3
 80113c4:	f7ff fea0 	bl	8011108 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 80113c8:	683b      	ldr	r3, [r7, #0]
 80113ca:	0a1b      	lsrs	r3, r3, #8
 80113cc:	b2db      	uxtb	r3, r3
 80113ce:	4618      	mov	r0, r3
 80113d0:	f7ff fe9a 	bl	8011108 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 80113d4:	683b      	ldr	r3, [r7, #0]
 80113d6:	b2db      	uxtb	r3, r3
 80113d8:	4618      	mov	r0, r3
 80113da:	f7ff fe95 	bl	8011108 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 80113de:	79fb      	ldrb	r3, [r7, #7]
 80113e0:	2b40      	cmp	r3, #64	@ 0x40
 80113e2:	d102      	bne.n	80113ea <SD_SendCmd+0x5c>
 80113e4:	2395      	movs	r3, #149	@ 0x95
 80113e6:	73fb      	strb	r3, [r7, #15]
 80113e8:	e007      	b.n	80113fa <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 80113ea:	79fb      	ldrb	r3, [r7, #7]
 80113ec:	2b48      	cmp	r3, #72	@ 0x48
 80113ee:	d102      	bne.n	80113f6 <SD_SendCmd+0x68>
 80113f0:	2387      	movs	r3, #135	@ 0x87
 80113f2:	73fb      	strb	r3, [r7, #15]
 80113f4:	e001      	b.n	80113fa <SD_SendCmd+0x6c>
  else crc = 1;
 80113f6:	2301      	movs	r3, #1
 80113f8:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 80113fa:	7bfb      	ldrb	r3, [r7, #15]
 80113fc:	4618      	mov	r0, r3
 80113fe:	f7ff fe83 	bl	8011108 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8011402:	79fb      	ldrb	r3, [r7, #7]
 8011404:	2b4c      	cmp	r3, #76	@ 0x4c
 8011406:	d101      	bne.n	801140c <SD_SendCmd+0x7e>
 8011408:	f7ff feb2 	bl	8011170 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 801140c:	230a      	movs	r3, #10
 801140e:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8011410:	f7ff feae 	bl	8011170 <SPI_RxByte>
 8011414:	4603      	mov	r3, r0
 8011416:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8011418:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801141c:	2b00      	cmp	r3, #0
 801141e:	da05      	bge.n	801142c <SD_SendCmd+0x9e>
 8011420:	7bbb      	ldrb	r3, [r7, #14]
 8011422:	3b01      	subs	r3, #1
 8011424:	73bb      	strb	r3, [r7, #14]
 8011426:	7bbb      	ldrb	r3, [r7, #14]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d1f1      	bne.n	8011410 <SD_SendCmd+0x82>

  return res;
 801142c:	7b7b      	ldrb	r3, [r7, #13]
}
 801142e:	4618      	mov	r0, r3
 8011430:	3710      	adds	r7, #16
 8011432:	46bd      	mov	sp, r7
 8011434:	bd80      	pop	{r7, pc}
	...

08011438 <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8011438:	b590      	push	{r4, r7, lr}
 801143a:	b085      	sub	sp, #20
 801143c:	af00      	add	r7, sp, #0
 801143e:	4603      	mov	r3, r0
 8011440:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8011442:	79fb      	ldrb	r3, [r7, #7]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d001      	beq.n	801144c <SD_disk_initialize+0x14>
 8011448:	2301      	movs	r3, #1
 801144a:	e0d1      	b.n	80115f0 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 801144c:	4b6a      	ldr	r3, [pc, #424]	@ (80115f8 <SD_disk_initialize+0x1c0>)
 801144e:	781b      	ldrb	r3, [r3, #0]
 8011450:	b2db      	uxtb	r3, r3
 8011452:	f003 0302 	and.w	r3, r3, #2
 8011456:	2b00      	cmp	r3, #0
 8011458:	d003      	beq.n	8011462 <SD_disk_initialize+0x2a>
 801145a:	4b67      	ldr	r3, [pc, #412]	@ (80115f8 <SD_disk_initialize+0x1c0>)
 801145c:	781b      	ldrb	r3, [r3, #0]
 801145e:	b2db      	uxtb	r3, r3
 8011460:	e0c6      	b.n	80115f0 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 8011462:	f7ff fec9 	bl	80111f8 <SD_PowerOn>
  /* slave select */
  SELECT();
 8011466:	f7ff fe37 	bl	80110d8 <SELECT>
  /* check disk type */
  type = 0;
 801146a:	2300      	movs	r3, #0
 801146c:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 801146e:	2100      	movs	r1, #0
 8011470:	2040      	movs	r0, #64	@ 0x40
 8011472:	f7ff ff8c 	bl	801138e <SD_SendCmd>
 8011476:	4603      	mov	r3, r0
 8011478:	2b01      	cmp	r3, #1
 801147a:	f040 80a1 	bne.w	80115c0 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 801147e:	4b5f      	ldr	r3, [pc, #380]	@ (80115fc <SD_disk_initialize+0x1c4>)
 8011480:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011484:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8011486:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 801148a:	2048      	movs	r0, #72	@ 0x48
 801148c:	f7ff ff7f 	bl	801138e <SD_SendCmd>
 8011490:	4603      	mov	r3, r0
 8011492:	2b01      	cmp	r3, #1
 8011494:	d155      	bne.n	8011542 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8011496:	2300      	movs	r3, #0
 8011498:	73fb      	strb	r3, [r7, #15]
 801149a:	e00c      	b.n	80114b6 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 801149c:	7bfc      	ldrb	r4, [r7, #15]
 801149e:	f7ff fe67 	bl	8011170 <SPI_RxByte>
 80114a2:	4603      	mov	r3, r0
 80114a4:	461a      	mov	r2, r3
 80114a6:	f104 0310 	add.w	r3, r4, #16
 80114aa:	443b      	add	r3, r7
 80114ac:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80114b0:	7bfb      	ldrb	r3, [r7, #15]
 80114b2:	3301      	adds	r3, #1
 80114b4:	73fb      	strb	r3, [r7, #15]
 80114b6:	7bfb      	ldrb	r3, [r7, #15]
 80114b8:	2b03      	cmp	r3, #3
 80114ba:	d9ef      	bls.n	801149c <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80114bc:	7abb      	ldrb	r3, [r7, #10]
 80114be:	2b01      	cmp	r3, #1
 80114c0:	d17e      	bne.n	80115c0 <SD_disk_initialize+0x188>
 80114c2:	7afb      	ldrb	r3, [r7, #11]
 80114c4:	2baa      	cmp	r3, #170	@ 0xaa
 80114c6:	d17b      	bne.n	80115c0 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80114c8:	2100      	movs	r1, #0
 80114ca:	2077      	movs	r0, #119	@ 0x77
 80114cc:	f7ff ff5f 	bl	801138e <SD_SendCmd>
 80114d0:	4603      	mov	r3, r0
 80114d2:	2b01      	cmp	r3, #1
 80114d4:	d807      	bhi.n	80114e6 <SD_disk_initialize+0xae>
 80114d6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80114da:	2069      	movs	r0, #105	@ 0x69
 80114dc:	f7ff ff57 	bl	801138e <SD_SendCmd>
 80114e0:	4603      	mov	r3, r0
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d004      	beq.n	80114f0 <SD_disk_initialize+0xb8>
        } while (Timer1);
 80114e6:	4b45      	ldr	r3, [pc, #276]	@ (80115fc <SD_disk_initialize+0x1c4>)
 80114e8:	881b      	ldrh	r3, [r3, #0]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d1ec      	bne.n	80114c8 <SD_disk_initialize+0x90>
 80114ee:	e000      	b.n	80114f2 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80114f0:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80114f2:	4b42      	ldr	r3, [pc, #264]	@ (80115fc <SD_disk_initialize+0x1c4>)
 80114f4:	881b      	ldrh	r3, [r3, #0]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d062      	beq.n	80115c0 <SD_disk_initialize+0x188>
 80114fa:	2100      	movs	r1, #0
 80114fc:	207a      	movs	r0, #122	@ 0x7a
 80114fe:	f7ff ff46 	bl	801138e <SD_SendCmd>
 8011502:	4603      	mov	r3, r0
 8011504:	2b00      	cmp	r3, #0
 8011506:	d15b      	bne.n	80115c0 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8011508:	2300      	movs	r3, #0
 801150a:	73fb      	strb	r3, [r7, #15]
 801150c:	e00c      	b.n	8011528 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 801150e:	7bfc      	ldrb	r4, [r7, #15]
 8011510:	f7ff fe2e 	bl	8011170 <SPI_RxByte>
 8011514:	4603      	mov	r3, r0
 8011516:	461a      	mov	r2, r3
 8011518:	f104 0310 	add.w	r3, r4, #16
 801151c:	443b      	add	r3, r7
 801151e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8011522:	7bfb      	ldrb	r3, [r7, #15]
 8011524:	3301      	adds	r3, #1
 8011526:	73fb      	strb	r3, [r7, #15]
 8011528:	7bfb      	ldrb	r3, [r7, #15]
 801152a:	2b03      	cmp	r3, #3
 801152c:	d9ef      	bls.n	801150e <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 801152e:	7a3b      	ldrb	r3, [r7, #8]
 8011530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011534:	2b00      	cmp	r3, #0
 8011536:	d001      	beq.n	801153c <SD_disk_initialize+0x104>
 8011538:	230c      	movs	r3, #12
 801153a:	e000      	b.n	801153e <SD_disk_initialize+0x106>
 801153c:	2304      	movs	r3, #4
 801153e:	73bb      	strb	r3, [r7, #14]
 8011540:	e03e      	b.n	80115c0 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8011542:	2100      	movs	r1, #0
 8011544:	2077      	movs	r0, #119	@ 0x77
 8011546:	f7ff ff22 	bl	801138e <SD_SendCmd>
 801154a:	4603      	mov	r3, r0
 801154c:	2b01      	cmp	r3, #1
 801154e:	d808      	bhi.n	8011562 <SD_disk_initialize+0x12a>
 8011550:	2100      	movs	r1, #0
 8011552:	2069      	movs	r0, #105	@ 0x69
 8011554:	f7ff ff1b 	bl	801138e <SD_SendCmd>
 8011558:	4603      	mov	r3, r0
 801155a:	2b01      	cmp	r3, #1
 801155c:	d801      	bhi.n	8011562 <SD_disk_initialize+0x12a>
 801155e:	2302      	movs	r3, #2
 8011560:	e000      	b.n	8011564 <SD_disk_initialize+0x12c>
 8011562:	2301      	movs	r3, #1
 8011564:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 8011566:	7bbb      	ldrb	r3, [r7, #14]
 8011568:	2b02      	cmp	r3, #2
 801156a:	d10e      	bne.n	801158a <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 801156c:	2100      	movs	r1, #0
 801156e:	2077      	movs	r0, #119	@ 0x77
 8011570:	f7ff ff0d 	bl	801138e <SD_SendCmd>
 8011574:	4603      	mov	r3, r0
 8011576:	2b01      	cmp	r3, #1
 8011578:	d80e      	bhi.n	8011598 <SD_disk_initialize+0x160>
 801157a:	2100      	movs	r1, #0
 801157c:	2069      	movs	r0, #105	@ 0x69
 801157e:	f7ff ff06 	bl	801138e <SD_SendCmd>
 8011582:	4603      	mov	r3, r0
 8011584:	2b00      	cmp	r3, #0
 8011586:	d107      	bne.n	8011598 <SD_disk_initialize+0x160>
 8011588:	e00c      	b.n	80115a4 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 801158a:	2100      	movs	r1, #0
 801158c:	2041      	movs	r0, #65	@ 0x41
 801158e:	f7ff fefe 	bl	801138e <SD_SendCmd>
 8011592:	4603      	mov	r3, r0
 8011594:	2b00      	cmp	r3, #0
 8011596:	d004      	beq.n	80115a2 <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 8011598:	4b18      	ldr	r3, [pc, #96]	@ (80115fc <SD_disk_initialize+0x1c4>)
 801159a:	881b      	ldrh	r3, [r3, #0]
 801159c:	2b00      	cmp	r3, #0
 801159e:	d1e2      	bne.n	8011566 <SD_disk_initialize+0x12e>
 80115a0:	e000      	b.n	80115a4 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80115a2:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80115a4:	4b15      	ldr	r3, [pc, #84]	@ (80115fc <SD_disk_initialize+0x1c4>)
 80115a6:	881b      	ldrh	r3, [r3, #0]
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d007      	beq.n	80115bc <SD_disk_initialize+0x184>
 80115ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80115b0:	2050      	movs	r0, #80	@ 0x50
 80115b2:	f7ff feec 	bl	801138e <SD_SendCmd>
 80115b6:	4603      	mov	r3, r0
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d001      	beq.n	80115c0 <SD_disk_initialize+0x188>
 80115bc:	2300      	movs	r3, #0
 80115be:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 80115c0:	4a0f      	ldr	r2, [pc, #60]	@ (8011600 <SD_disk_initialize+0x1c8>)
 80115c2:	7bbb      	ldrb	r3, [r7, #14]
 80115c4:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 80115c6:	f7ff fd93 	bl	80110f0 <DESELECT>
  SPI_RxByte();
 80115ca:	f7ff fdd1 	bl	8011170 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 80115ce:	7bbb      	ldrb	r3, [r7, #14]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d008      	beq.n	80115e6 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 80115d4:	4b08      	ldr	r3, [pc, #32]	@ (80115f8 <SD_disk_initialize+0x1c0>)
 80115d6:	781b      	ldrb	r3, [r3, #0]
 80115d8:	b2db      	uxtb	r3, r3
 80115da:	f023 0301 	bic.w	r3, r3, #1
 80115de:	b2da      	uxtb	r2, r3
 80115e0:	4b05      	ldr	r3, [pc, #20]	@ (80115f8 <SD_disk_initialize+0x1c0>)
 80115e2:	701a      	strb	r2, [r3, #0]
 80115e4:	e001      	b.n	80115ea <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80115e6:	f7ff fe49 	bl	801127c <SD_PowerOff>
  }
  return Stat;
 80115ea:	4b03      	ldr	r3, [pc, #12]	@ (80115f8 <SD_disk_initialize+0x1c0>)
 80115ec:	781b      	ldrb	r3, [r3, #0]
 80115ee:	b2db      	uxtb	r3, r3
}
 80115f0:	4618      	mov	r0, r3
 80115f2:	3714      	adds	r7, #20
 80115f4:	46bd      	mov	sp, r7
 80115f6:	bd90      	pop	{r4, r7, pc}
 80115f8:	240000e4 	.word	0x240000e4
 80115fc:	24005498 	.word	0x24005498
 8011600:	2400549c 	.word	0x2400549c

08011604 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8011604:	b480      	push	{r7}
 8011606:	b083      	sub	sp, #12
 8011608:	af00      	add	r7, sp, #0
 801160a:	4603      	mov	r3, r0
 801160c:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 801160e:	79fb      	ldrb	r3, [r7, #7]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d001      	beq.n	8011618 <SD_disk_status+0x14>
 8011614:	2301      	movs	r3, #1
 8011616:	e002      	b.n	801161e <SD_disk_status+0x1a>
  return Stat;
 8011618:	4b04      	ldr	r3, [pc, #16]	@ (801162c <SD_disk_status+0x28>)
 801161a:	781b      	ldrb	r3, [r3, #0]
 801161c:	b2db      	uxtb	r3, r3
}
 801161e:	4618      	mov	r0, r3
 8011620:	370c      	adds	r7, #12
 8011622:	46bd      	mov	sp, r7
 8011624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011628:	4770      	bx	lr
 801162a:	bf00      	nop
 801162c:	240000e4 	.word	0x240000e4

08011630 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b084      	sub	sp, #16
 8011634:	af00      	add	r7, sp, #0
 8011636:	60b9      	str	r1, [r7, #8]
 8011638:	607a      	str	r2, [r7, #4]
 801163a:	603b      	str	r3, [r7, #0]
 801163c:	4603      	mov	r3, r0
 801163e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8011640:	7bfb      	ldrb	r3, [r7, #15]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d102      	bne.n	801164c <SD_disk_read+0x1c>
 8011646:	683b      	ldr	r3, [r7, #0]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d101      	bne.n	8011650 <SD_disk_read+0x20>
 801164c:	2304      	movs	r3, #4
 801164e:	e051      	b.n	80116f4 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011650:	4b2a      	ldr	r3, [pc, #168]	@ (80116fc <SD_disk_read+0xcc>)
 8011652:	781b      	ldrb	r3, [r3, #0]
 8011654:	b2db      	uxtb	r3, r3
 8011656:	f003 0301 	and.w	r3, r3, #1
 801165a:	2b00      	cmp	r3, #0
 801165c:	d001      	beq.n	8011662 <SD_disk_read+0x32>
 801165e:	2303      	movs	r3, #3
 8011660:	e048      	b.n	80116f4 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8011662:	4b27      	ldr	r3, [pc, #156]	@ (8011700 <SD_disk_read+0xd0>)
 8011664:	781b      	ldrb	r3, [r3, #0]
 8011666:	f003 0304 	and.w	r3, r3, #4
 801166a:	2b00      	cmp	r3, #0
 801166c:	d102      	bne.n	8011674 <SD_disk_read+0x44>
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	025b      	lsls	r3, r3, #9
 8011672:	607b      	str	r3, [r7, #4]

  SELECT();
 8011674:	f7ff fd30 	bl	80110d8 <SELECT>

  if (count == 1)
 8011678:	683b      	ldr	r3, [r7, #0]
 801167a:	2b01      	cmp	r3, #1
 801167c:	d111      	bne.n	80116a2 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 801167e:	6879      	ldr	r1, [r7, #4]
 8011680:	2051      	movs	r0, #81	@ 0x51
 8011682:	f7ff fe84 	bl	801138e <SD_SendCmd>
 8011686:	4603      	mov	r3, r0
 8011688:	2b00      	cmp	r3, #0
 801168a:	d129      	bne.n	80116e0 <SD_disk_read+0xb0>
 801168c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8011690:	68b8      	ldr	r0, [r7, #8]
 8011692:	f7ff fe0b 	bl	80112ac <SD_RxDataBlock>
 8011696:	4603      	mov	r3, r0
 8011698:	2b00      	cmp	r3, #0
 801169a:	d021      	beq.n	80116e0 <SD_disk_read+0xb0>
 801169c:	2300      	movs	r3, #0
 801169e:	603b      	str	r3, [r7, #0]
 80116a0:	e01e      	b.n	80116e0 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 80116a2:	6879      	ldr	r1, [r7, #4]
 80116a4:	2052      	movs	r0, #82	@ 0x52
 80116a6:	f7ff fe72 	bl	801138e <SD_SendCmd>
 80116aa:	4603      	mov	r3, r0
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d117      	bne.n	80116e0 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 80116b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80116b4:	68b8      	ldr	r0, [r7, #8]
 80116b6:	f7ff fdf9 	bl	80112ac <SD_RxDataBlock>
 80116ba:	4603      	mov	r3, r0
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d00a      	beq.n	80116d6 <SD_disk_read+0xa6>
        buff += 512;
 80116c0:	68bb      	ldr	r3, [r7, #8]
 80116c2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80116c6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80116c8:	683b      	ldr	r3, [r7, #0]
 80116ca:	3b01      	subs	r3, #1
 80116cc:	603b      	str	r3, [r7, #0]
 80116ce:	683b      	ldr	r3, [r7, #0]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d1ed      	bne.n	80116b0 <SD_disk_read+0x80>
 80116d4:	e000      	b.n	80116d8 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 80116d6:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 80116d8:	2100      	movs	r1, #0
 80116da:	204c      	movs	r0, #76	@ 0x4c
 80116dc:	f7ff fe57 	bl	801138e <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 80116e0:	f7ff fd06 	bl	80110f0 <DESELECT>
  SPI_RxByte();
 80116e4:	f7ff fd44 	bl	8011170 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80116e8:	683b      	ldr	r3, [r7, #0]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	bf14      	ite	ne
 80116ee:	2301      	movne	r3, #1
 80116f0:	2300      	moveq	r3, #0
 80116f2:	b2db      	uxtb	r3, r3
}
 80116f4:	4618      	mov	r0, r3
 80116f6:	3710      	adds	r7, #16
 80116f8:	46bd      	mov	sp, r7
 80116fa:	bd80      	pop	{r7, pc}
 80116fc:	240000e4 	.word	0x240000e4
 8011700:	2400549c 	.word	0x2400549c

08011704 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8011704:	b580      	push	{r7, lr}
 8011706:	b084      	sub	sp, #16
 8011708:	af00      	add	r7, sp, #0
 801170a:	60b9      	str	r1, [r7, #8]
 801170c:	607a      	str	r2, [r7, #4]
 801170e:	603b      	str	r3, [r7, #0]
 8011710:	4603      	mov	r3, r0
 8011712:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8011714:	7bfb      	ldrb	r3, [r7, #15]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d102      	bne.n	8011720 <SD_disk_write+0x1c>
 801171a:	683b      	ldr	r3, [r7, #0]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d101      	bne.n	8011724 <SD_disk_write+0x20>
 8011720:	2304      	movs	r3, #4
 8011722:	e06b      	b.n	80117fc <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011724:	4b37      	ldr	r3, [pc, #220]	@ (8011804 <SD_disk_write+0x100>)
 8011726:	781b      	ldrb	r3, [r3, #0]
 8011728:	b2db      	uxtb	r3, r3
 801172a:	f003 0301 	and.w	r3, r3, #1
 801172e:	2b00      	cmp	r3, #0
 8011730:	d001      	beq.n	8011736 <SD_disk_write+0x32>
 8011732:	2303      	movs	r3, #3
 8011734:	e062      	b.n	80117fc <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8011736:	4b33      	ldr	r3, [pc, #204]	@ (8011804 <SD_disk_write+0x100>)
 8011738:	781b      	ldrb	r3, [r3, #0]
 801173a:	b2db      	uxtb	r3, r3
 801173c:	f003 0304 	and.w	r3, r3, #4
 8011740:	2b00      	cmp	r3, #0
 8011742:	d001      	beq.n	8011748 <SD_disk_write+0x44>
 8011744:	2302      	movs	r3, #2
 8011746:	e059      	b.n	80117fc <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8011748:	4b2f      	ldr	r3, [pc, #188]	@ (8011808 <SD_disk_write+0x104>)
 801174a:	781b      	ldrb	r3, [r3, #0]
 801174c:	f003 0304 	and.w	r3, r3, #4
 8011750:	2b00      	cmp	r3, #0
 8011752:	d102      	bne.n	801175a <SD_disk_write+0x56>
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	025b      	lsls	r3, r3, #9
 8011758:	607b      	str	r3, [r7, #4]

  SELECT();
 801175a:	f7ff fcbd 	bl	80110d8 <SELECT>

  if (count == 1)
 801175e:	683b      	ldr	r3, [r7, #0]
 8011760:	2b01      	cmp	r3, #1
 8011762:	d110      	bne.n	8011786 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8011764:	6879      	ldr	r1, [r7, #4]
 8011766:	2058      	movs	r0, #88	@ 0x58
 8011768:	f7ff fe11 	bl	801138e <SD_SendCmd>
 801176c:	4603      	mov	r3, r0
 801176e:	2b00      	cmp	r3, #0
 8011770:	d13a      	bne.n	80117e8 <SD_disk_write+0xe4>
 8011772:	21fe      	movs	r1, #254	@ 0xfe
 8011774:	68b8      	ldr	r0, [r7, #8]
 8011776:	f7ff fdc7 	bl	8011308 <SD_TxDataBlock>
 801177a:	4603      	mov	r3, r0
 801177c:	2b00      	cmp	r3, #0
 801177e:	d033      	beq.n	80117e8 <SD_disk_write+0xe4>
      count = 0;
 8011780:	2300      	movs	r3, #0
 8011782:	603b      	str	r3, [r7, #0]
 8011784:	e030      	b.n	80117e8 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8011786:	4b20      	ldr	r3, [pc, #128]	@ (8011808 <SD_disk_write+0x104>)
 8011788:	781b      	ldrb	r3, [r3, #0]
 801178a:	f003 0302 	and.w	r3, r3, #2
 801178e:	2b00      	cmp	r3, #0
 8011790:	d007      	beq.n	80117a2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8011792:	2100      	movs	r1, #0
 8011794:	2077      	movs	r0, #119	@ 0x77
 8011796:	f7ff fdfa 	bl	801138e <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 801179a:	6839      	ldr	r1, [r7, #0]
 801179c:	2057      	movs	r0, #87	@ 0x57
 801179e:	f7ff fdf6 	bl	801138e <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80117a2:	6879      	ldr	r1, [r7, #4]
 80117a4:	2059      	movs	r0, #89	@ 0x59
 80117a6:	f7ff fdf2 	bl	801138e <SD_SendCmd>
 80117aa:	4603      	mov	r3, r0
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d11b      	bne.n	80117e8 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80117b0:	21fc      	movs	r1, #252	@ 0xfc
 80117b2:	68b8      	ldr	r0, [r7, #8]
 80117b4:	f7ff fda8 	bl	8011308 <SD_TxDataBlock>
 80117b8:	4603      	mov	r3, r0
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d00a      	beq.n	80117d4 <SD_disk_write+0xd0>
        buff += 512;
 80117be:	68bb      	ldr	r3, [r7, #8]
 80117c0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80117c4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80117c6:	683b      	ldr	r3, [r7, #0]
 80117c8:	3b01      	subs	r3, #1
 80117ca:	603b      	str	r3, [r7, #0]
 80117cc:	683b      	ldr	r3, [r7, #0]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d1ee      	bne.n	80117b0 <SD_disk_write+0xac>
 80117d2:	e000      	b.n	80117d6 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80117d4:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 80117d6:	21fd      	movs	r1, #253	@ 0xfd
 80117d8:	2000      	movs	r0, #0
 80117da:	f7ff fd95 	bl	8011308 <SD_TxDataBlock>
 80117de:	4603      	mov	r3, r0
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d101      	bne.n	80117e8 <SD_disk_write+0xe4>
      {
        count = 1;
 80117e4:	2301      	movs	r3, #1
 80117e6:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 80117e8:	f7ff fc82 	bl	80110f0 <DESELECT>
  SPI_RxByte();
 80117ec:	f7ff fcc0 	bl	8011170 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80117f0:	683b      	ldr	r3, [r7, #0]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	bf14      	ite	ne
 80117f6:	2301      	movne	r3, #1
 80117f8:	2300      	moveq	r3, #0
 80117fa:	b2db      	uxtb	r3, r3
}
 80117fc:	4618      	mov	r0, r3
 80117fe:	3710      	adds	r7, #16
 8011800:	46bd      	mov	sp, r7
 8011802:	bd80      	pop	{r7, pc}
 8011804:	240000e4 	.word	0x240000e4
 8011808:	2400549c 	.word	0x2400549c

0801180c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 801180c:	b590      	push	{r4, r7, lr}
 801180e:	b08b      	sub	sp, #44	@ 0x2c
 8011810:	af00      	add	r7, sp, #0
 8011812:	4603      	mov	r3, r0
 8011814:	603a      	str	r2, [r7, #0]
 8011816:	71fb      	strb	r3, [r7, #7]
 8011818:	460b      	mov	r3, r1
 801181a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 801181c:	683b      	ldr	r3, [r7, #0]
 801181e:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8011820:	79fb      	ldrb	r3, [r7, #7]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d001      	beq.n	801182a <SD_disk_ioctl+0x1e>
 8011826:	2304      	movs	r3, #4
 8011828:	e113      	b.n	8011a52 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 801182a:	2301      	movs	r3, #1
 801182c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8011830:	79bb      	ldrb	r3, [r7, #6]
 8011832:	2b05      	cmp	r3, #5
 8011834:	d124      	bne.n	8011880 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8011836:	6a3b      	ldr	r3, [r7, #32]
 8011838:	781b      	ldrb	r3, [r3, #0]
 801183a:	2b02      	cmp	r3, #2
 801183c:	d012      	beq.n	8011864 <SD_disk_ioctl+0x58>
 801183e:	2b02      	cmp	r3, #2
 8011840:	dc1a      	bgt.n	8011878 <SD_disk_ioctl+0x6c>
 8011842:	2b00      	cmp	r3, #0
 8011844:	d002      	beq.n	801184c <SD_disk_ioctl+0x40>
 8011846:	2b01      	cmp	r3, #1
 8011848:	d006      	beq.n	8011858 <SD_disk_ioctl+0x4c>
 801184a:	e015      	b.n	8011878 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 801184c:	f7ff fd16 	bl	801127c <SD_PowerOff>
      res = RES_OK;
 8011850:	2300      	movs	r3, #0
 8011852:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8011856:	e0fa      	b.n	8011a4e <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8011858:	f7ff fcce 	bl	80111f8 <SD_PowerOn>
      res = RES_OK;
 801185c:	2300      	movs	r3, #0
 801185e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8011862:	e0f4      	b.n	8011a4e <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8011864:	6a3b      	ldr	r3, [r7, #32]
 8011866:	1c5c      	adds	r4, r3, #1
 8011868:	f7ff fd14 	bl	8011294 <SD_CheckPower>
 801186c:	4603      	mov	r3, r0
 801186e:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8011870:	2300      	movs	r3, #0
 8011872:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8011876:	e0ea      	b.n	8011a4e <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 8011878:	2304      	movs	r3, #4
 801187a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801187e:	e0e6      	b.n	8011a4e <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 8011880:	4b76      	ldr	r3, [pc, #472]	@ (8011a5c <SD_disk_ioctl+0x250>)
 8011882:	781b      	ldrb	r3, [r3, #0]
 8011884:	b2db      	uxtb	r3, r3
 8011886:	f003 0301 	and.w	r3, r3, #1
 801188a:	2b00      	cmp	r3, #0
 801188c:	d001      	beq.n	8011892 <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 801188e:	2303      	movs	r3, #3
 8011890:	e0df      	b.n	8011a52 <SD_disk_ioctl+0x246>
    }
    SELECT();
 8011892:	f7ff fc21 	bl	80110d8 <SELECT>
    switch (ctrl)
 8011896:	79bb      	ldrb	r3, [r7, #6]
 8011898:	2b0d      	cmp	r3, #13
 801189a:	f200 80c9 	bhi.w	8011a30 <SD_disk_ioctl+0x224>
 801189e:	a201      	add	r2, pc, #4	@ (adr r2, 80118a4 <SD_disk_ioctl+0x98>)
 80118a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118a4:	0801199b 	.word	0x0801199b
 80118a8:	080118dd 	.word	0x080118dd
 80118ac:	0801198b 	.word	0x0801198b
 80118b0:	08011a31 	.word	0x08011a31
 80118b4:	08011a31 	.word	0x08011a31
 80118b8:	08011a31 	.word	0x08011a31
 80118bc:	08011a31 	.word	0x08011a31
 80118c0:	08011a31 	.word	0x08011a31
 80118c4:	08011a31 	.word	0x08011a31
 80118c8:	08011a31 	.word	0x08011a31
 80118cc:	08011a31 	.word	0x08011a31
 80118d0:	080119ad 	.word	0x080119ad
 80118d4:	080119d1 	.word	0x080119d1
 80118d8:	080119f5 	.word	0x080119f5
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80118dc:	2100      	movs	r1, #0
 80118de:	2049      	movs	r0, #73	@ 0x49
 80118e0:	f7ff fd55 	bl	801138e <SD_SendCmd>
 80118e4:	4603      	mov	r3, r0
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	f040 80a6 	bne.w	8011a38 <SD_disk_ioctl+0x22c>
 80118ec:	f107 030c 	add.w	r3, r7, #12
 80118f0:	2110      	movs	r1, #16
 80118f2:	4618      	mov	r0, r3
 80118f4:	f7ff fcda 	bl	80112ac <SD_RxDataBlock>
 80118f8:	4603      	mov	r3, r0
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	f000 809c 	beq.w	8011a38 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8011900:	7b3b      	ldrb	r3, [r7, #12]
 8011902:	099b      	lsrs	r3, r3, #6
 8011904:	b2db      	uxtb	r3, r3
 8011906:	2b01      	cmp	r3, #1
 8011908:	d10d      	bne.n	8011926 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 801190a:	7d7b      	ldrb	r3, [r7, #21]
 801190c:	461a      	mov	r2, r3
 801190e:	7d3b      	ldrb	r3, [r7, #20]
 8011910:	021b      	lsls	r3, r3, #8
 8011912:	b29b      	uxth	r3, r3
 8011914:	4413      	add	r3, r2
 8011916:	b29b      	uxth	r3, r3
 8011918:	3301      	adds	r3, #1
 801191a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 801191c:	8bfb      	ldrh	r3, [r7, #30]
 801191e:	029a      	lsls	r2, r3, #10
 8011920:	683b      	ldr	r3, [r7, #0]
 8011922:	601a      	str	r2, [r3, #0]
 8011924:	e02d      	b.n	8011982 <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8011926:	7c7b      	ldrb	r3, [r7, #17]
 8011928:	f003 030f 	and.w	r3, r3, #15
 801192c:	b2da      	uxtb	r2, r3
 801192e:	7dbb      	ldrb	r3, [r7, #22]
 8011930:	09db      	lsrs	r3, r3, #7
 8011932:	b2db      	uxtb	r3, r3
 8011934:	4413      	add	r3, r2
 8011936:	b2da      	uxtb	r2, r3
 8011938:	7d7b      	ldrb	r3, [r7, #21]
 801193a:	005b      	lsls	r3, r3, #1
 801193c:	b2db      	uxtb	r3, r3
 801193e:	f003 0306 	and.w	r3, r3, #6
 8011942:	b2db      	uxtb	r3, r3
 8011944:	4413      	add	r3, r2
 8011946:	b2db      	uxtb	r3, r3
 8011948:	3302      	adds	r3, #2
 801194a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 801194e:	7d3b      	ldrb	r3, [r7, #20]
 8011950:	099b      	lsrs	r3, r3, #6
 8011952:	b2db      	uxtb	r3, r3
 8011954:	461a      	mov	r2, r3
 8011956:	7cfb      	ldrb	r3, [r7, #19]
 8011958:	009b      	lsls	r3, r3, #2
 801195a:	b29b      	uxth	r3, r3
 801195c:	4413      	add	r3, r2
 801195e:	b29a      	uxth	r2, r3
 8011960:	7cbb      	ldrb	r3, [r7, #18]
 8011962:	029b      	lsls	r3, r3, #10
 8011964:	b29b      	uxth	r3, r3
 8011966:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 801196a:	b29b      	uxth	r3, r3
 801196c:	4413      	add	r3, r2
 801196e:	b29b      	uxth	r3, r3
 8011970:	3301      	adds	r3, #1
 8011972:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8011974:	8bfa      	ldrh	r2, [r7, #30]
 8011976:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801197a:	3b09      	subs	r3, #9
 801197c:	409a      	lsls	r2, r3
 801197e:	683b      	ldr	r3, [r7, #0]
 8011980:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8011982:	2300      	movs	r3, #0
 8011984:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8011988:	e056      	b.n	8011a38 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 801198a:	683b      	ldr	r3, [r7, #0]
 801198c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011990:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8011992:	2300      	movs	r3, #0
 8011994:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8011998:	e055      	b.n	8011a46 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 801199a:	f7ff fc13 	bl	80111c4 <SD_ReadyWait>
 801199e:	4603      	mov	r3, r0
 80119a0:	2bff      	cmp	r3, #255	@ 0xff
 80119a2:	d14b      	bne.n	8011a3c <SD_disk_ioctl+0x230>
 80119a4:	2300      	movs	r3, #0
 80119a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80119aa:	e047      	b.n	8011a3c <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80119ac:	2100      	movs	r1, #0
 80119ae:	2049      	movs	r0, #73	@ 0x49
 80119b0:	f7ff fced 	bl	801138e <SD_SendCmd>
 80119b4:	4603      	mov	r3, r0
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d142      	bne.n	8011a40 <SD_disk_ioctl+0x234>
 80119ba:	2110      	movs	r1, #16
 80119bc:	6a38      	ldr	r0, [r7, #32]
 80119be:	f7ff fc75 	bl	80112ac <SD_RxDataBlock>
 80119c2:	4603      	mov	r3, r0
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d03b      	beq.n	8011a40 <SD_disk_ioctl+0x234>
 80119c8:	2300      	movs	r3, #0
 80119ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80119ce:	e037      	b.n	8011a40 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80119d0:	2100      	movs	r1, #0
 80119d2:	204a      	movs	r0, #74	@ 0x4a
 80119d4:	f7ff fcdb 	bl	801138e <SD_SendCmd>
 80119d8:	4603      	mov	r3, r0
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d132      	bne.n	8011a44 <SD_disk_ioctl+0x238>
 80119de:	2110      	movs	r1, #16
 80119e0:	6a38      	ldr	r0, [r7, #32]
 80119e2:	f7ff fc63 	bl	80112ac <SD_RxDataBlock>
 80119e6:	4603      	mov	r3, r0
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d02b      	beq.n	8011a44 <SD_disk_ioctl+0x238>
 80119ec:	2300      	movs	r3, #0
 80119ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80119f2:	e027      	b.n	8011a44 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 80119f4:	2100      	movs	r1, #0
 80119f6:	207a      	movs	r0, #122	@ 0x7a
 80119f8:	f7ff fcc9 	bl	801138e <SD_SendCmd>
 80119fc:	4603      	mov	r3, r0
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d116      	bne.n	8011a30 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 8011a02:	2300      	movs	r3, #0
 8011a04:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8011a08:	e00b      	b.n	8011a22 <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 8011a0a:	6a3c      	ldr	r4, [r7, #32]
 8011a0c:	1c63      	adds	r3, r4, #1
 8011a0e:	623b      	str	r3, [r7, #32]
 8011a10:	f7ff fbae 	bl	8011170 <SPI_RxByte>
 8011a14:	4603      	mov	r3, r0
 8011a16:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8011a18:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011a1c:	3301      	adds	r3, #1
 8011a1e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8011a22:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011a26:	2b03      	cmp	r3, #3
 8011a28:	d9ef      	bls.n	8011a0a <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8011a30:	2304      	movs	r3, #4
 8011a32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011a36:	e006      	b.n	8011a46 <SD_disk_ioctl+0x23a>
      break;
 8011a38:	bf00      	nop
 8011a3a:	e004      	b.n	8011a46 <SD_disk_ioctl+0x23a>
      break;
 8011a3c:	bf00      	nop
 8011a3e:	e002      	b.n	8011a46 <SD_disk_ioctl+0x23a>
      break;
 8011a40:	bf00      	nop
 8011a42:	e000      	b.n	8011a46 <SD_disk_ioctl+0x23a>
      break;
 8011a44:	bf00      	nop
    }
    DESELECT();
 8011a46:	f7ff fb53 	bl	80110f0 <DESELECT>
    SPI_RxByte();
 8011a4a:	f7ff fb91 	bl	8011170 <SPI_RxByte>
  }
  return res;
 8011a4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8011a52:	4618      	mov	r0, r3
 8011a54:	372c      	adds	r7, #44	@ 0x2c
 8011a56:	46bd      	mov	sp, r7
 8011a58:	bd90      	pop	{r4, r7, pc}
 8011a5a:	bf00      	nop
 8011a5c:	240000e4 	.word	0x240000e4

08011a60 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	b084      	sub	sp, #16
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	4603      	mov	r3, r0
 8011a68:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011a6a:	79fb      	ldrb	r3, [r7, #7]
 8011a6c:	4a08      	ldr	r2, [pc, #32]	@ (8011a90 <disk_status+0x30>)
 8011a6e:	009b      	lsls	r3, r3, #2
 8011a70:	4413      	add	r3, r2
 8011a72:	685b      	ldr	r3, [r3, #4]
 8011a74:	685b      	ldr	r3, [r3, #4]
 8011a76:	79fa      	ldrb	r2, [r7, #7]
 8011a78:	4905      	ldr	r1, [pc, #20]	@ (8011a90 <disk_status+0x30>)
 8011a7a:	440a      	add	r2, r1
 8011a7c:	7a12      	ldrb	r2, [r2, #8]
 8011a7e:	4610      	mov	r0, r2
 8011a80:	4798      	blx	r3
 8011a82:	4603      	mov	r3, r0
 8011a84:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a88:	4618      	mov	r0, r3
 8011a8a:	3710      	adds	r7, #16
 8011a8c:	46bd      	mov	sp, r7
 8011a8e:	bd80      	pop	{r7, pc}
 8011a90:	240056c8 	.word	0x240056c8

08011a94 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b084      	sub	sp, #16
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8011aa2:	79fb      	ldrb	r3, [r7, #7]
 8011aa4:	4a0e      	ldr	r2, [pc, #56]	@ (8011ae0 <disk_initialize+0x4c>)
 8011aa6:	5cd3      	ldrb	r3, [r2, r3]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d114      	bne.n	8011ad6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011aac:	79fb      	ldrb	r3, [r7, #7]
 8011aae:	4a0c      	ldr	r2, [pc, #48]	@ (8011ae0 <disk_initialize+0x4c>)
 8011ab0:	009b      	lsls	r3, r3, #2
 8011ab2:	4413      	add	r3, r2
 8011ab4:	685b      	ldr	r3, [r3, #4]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	79fa      	ldrb	r2, [r7, #7]
 8011aba:	4909      	ldr	r1, [pc, #36]	@ (8011ae0 <disk_initialize+0x4c>)
 8011abc:	440a      	add	r2, r1
 8011abe:	7a12      	ldrb	r2, [r2, #8]
 8011ac0:	4610      	mov	r0, r2
 8011ac2:	4798      	blx	r3
 8011ac4:	4603      	mov	r3, r0
 8011ac6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8011ac8:	7bfb      	ldrb	r3, [r7, #15]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d103      	bne.n	8011ad6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8011ace:	79fb      	ldrb	r3, [r7, #7]
 8011ad0:	4a03      	ldr	r2, [pc, #12]	@ (8011ae0 <disk_initialize+0x4c>)
 8011ad2:	2101      	movs	r1, #1
 8011ad4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8011ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ad8:	4618      	mov	r0, r3
 8011ada:	3710      	adds	r7, #16
 8011adc:	46bd      	mov	sp, r7
 8011ade:	bd80      	pop	{r7, pc}
 8011ae0:	240056c8 	.word	0x240056c8

08011ae4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011ae4:	b590      	push	{r4, r7, lr}
 8011ae6:	b087      	sub	sp, #28
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	60b9      	str	r1, [r7, #8]
 8011aec:	607a      	str	r2, [r7, #4]
 8011aee:	603b      	str	r3, [r7, #0]
 8011af0:	4603      	mov	r3, r0
 8011af2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011af4:	7bfb      	ldrb	r3, [r7, #15]
 8011af6:	4a0a      	ldr	r2, [pc, #40]	@ (8011b20 <disk_read+0x3c>)
 8011af8:	009b      	lsls	r3, r3, #2
 8011afa:	4413      	add	r3, r2
 8011afc:	685b      	ldr	r3, [r3, #4]
 8011afe:	689c      	ldr	r4, [r3, #8]
 8011b00:	7bfb      	ldrb	r3, [r7, #15]
 8011b02:	4a07      	ldr	r2, [pc, #28]	@ (8011b20 <disk_read+0x3c>)
 8011b04:	4413      	add	r3, r2
 8011b06:	7a18      	ldrb	r0, [r3, #8]
 8011b08:	683b      	ldr	r3, [r7, #0]
 8011b0a:	687a      	ldr	r2, [r7, #4]
 8011b0c:	68b9      	ldr	r1, [r7, #8]
 8011b0e:	47a0      	blx	r4
 8011b10:	4603      	mov	r3, r0
 8011b12:	75fb      	strb	r3, [r7, #23]
  return res;
 8011b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b16:	4618      	mov	r0, r3
 8011b18:	371c      	adds	r7, #28
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bd90      	pop	{r4, r7, pc}
 8011b1e:	bf00      	nop
 8011b20:	240056c8 	.word	0x240056c8

08011b24 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011b24:	b590      	push	{r4, r7, lr}
 8011b26:	b087      	sub	sp, #28
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	60b9      	str	r1, [r7, #8]
 8011b2c:	607a      	str	r2, [r7, #4]
 8011b2e:	603b      	str	r3, [r7, #0]
 8011b30:	4603      	mov	r3, r0
 8011b32:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011b34:	7bfb      	ldrb	r3, [r7, #15]
 8011b36:	4a0a      	ldr	r2, [pc, #40]	@ (8011b60 <disk_write+0x3c>)
 8011b38:	009b      	lsls	r3, r3, #2
 8011b3a:	4413      	add	r3, r2
 8011b3c:	685b      	ldr	r3, [r3, #4]
 8011b3e:	68dc      	ldr	r4, [r3, #12]
 8011b40:	7bfb      	ldrb	r3, [r7, #15]
 8011b42:	4a07      	ldr	r2, [pc, #28]	@ (8011b60 <disk_write+0x3c>)
 8011b44:	4413      	add	r3, r2
 8011b46:	7a18      	ldrb	r0, [r3, #8]
 8011b48:	683b      	ldr	r3, [r7, #0]
 8011b4a:	687a      	ldr	r2, [r7, #4]
 8011b4c:	68b9      	ldr	r1, [r7, #8]
 8011b4e:	47a0      	blx	r4
 8011b50:	4603      	mov	r3, r0
 8011b52:	75fb      	strb	r3, [r7, #23]
  return res;
 8011b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b56:	4618      	mov	r0, r3
 8011b58:	371c      	adds	r7, #28
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	bd90      	pop	{r4, r7, pc}
 8011b5e:	bf00      	nop
 8011b60:	240056c8 	.word	0x240056c8

08011b64 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011b64:	b580      	push	{r7, lr}
 8011b66:	b084      	sub	sp, #16
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	4603      	mov	r3, r0
 8011b6c:	603a      	str	r2, [r7, #0]
 8011b6e:	71fb      	strb	r3, [r7, #7]
 8011b70:	460b      	mov	r3, r1
 8011b72:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011b74:	79fb      	ldrb	r3, [r7, #7]
 8011b76:	4a09      	ldr	r2, [pc, #36]	@ (8011b9c <disk_ioctl+0x38>)
 8011b78:	009b      	lsls	r3, r3, #2
 8011b7a:	4413      	add	r3, r2
 8011b7c:	685b      	ldr	r3, [r3, #4]
 8011b7e:	691b      	ldr	r3, [r3, #16]
 8011b80:	79fa      	ldrb	r2, [r7, #7]
 8011b82:	4906      	ldr	r1, [pc, #24]	@ (8011b9c <disk_ioctl+0x38>)
 8011b84:	440a      	add	r2, r1
 8011b86:	7a10      	ldrb	r0, [r2, #8]
 8011b88:	79b9      	ldrb	r1, [r7, #6]
 8011b8a:	683a      	ldr	r2, [r7, #0]
 8011b8c:	4798      	blx	r3
 8011b8e:	4603      	mov	r3, r0
 8011b90:	73fb      	strb	r3, [r7, #15]
  return res;
 8011b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b94:	4618      	mov	r0, r3
 8011b96:	3710      	adds	r7, #16
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	bd80      	pop	{r7, pc}
 8011b9c:	240056c8 	.word	0x240056c8

08011ba0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011ba0:	b480      	push	{r7}
 8011ba2:	b085      	sub	sp, #20
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	3301      	adds	r3, #1
 8011bac:	781b      	ldrb	r3, [r3, #0]
 8011bae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011bb0:	89fb      	ldrh	r3, [r7, #14]
 8011bb2:	021b      	lsls	r3, r3, #8
 8011bb4:	b21a      	sxth	r2, r3
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	781b      	ldrb	r3, [r3, #0]
 8011bba:	b21b      	sxth	r3, r3
 8011bbc:	4313      	orrs	r3, r2
 8011bbe:	b21b      	sxth	r3, r3
 8011bc0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011bc2:	89fb      	ldrh	r3, [r7, #14]
}
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	3714      	adds	r7, #20
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bce:	4770      	bx	lr

08011bd0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011bd0:	b480      	push	{r7}
 8011bd2:	b085      	sub	sp, #20
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	3303      	adds	r3, #3
 8011bdc:	781b      	ldrb	r3, [r3, #0]
 8011bde:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	021b      	lsls	r3, r3, #8
 8011be4:	687a      	ldr	r2, [r7, #4]
 8011be6:	3202      	adds	r2, #2
 8011be8:	7812      	ldrb	r2, [r2, #0]
 8011bea:	4313      	orrs	r3, r2
 8011bec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	021b      	lsls	r3, r3, #8
 8011bf2:	687a      	ldr	r2, [r7, #4]
 8011bf4:	3201      	adds	r2, #1
 8011bf6:	7812      	ldrb	r2, [r2, #0]
 8011bf8:	4313      	orrs	r3, r2
 8011bfa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	021b      	lsls	r3, r3, #8
 8011c00:	687a      	ldr	r2, [r7, #4]
 8011c02:	7812      	ldrb	r2, [r2, #0]
 8011c04:	4313      	orrs	r3, r2
 8011c06:	60fb      	str	r3, [r7, #12]
	return rv;
 8011c08:	68fb      	ldr	r3, [r7, #12]
}
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	3714      	adds	r7, #20
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c14:	4770      	bx	lr

08011c16 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011c16:	b480      	push	{r7}
 8011c18:	b083      	sub	sp, #12
 8011c1a:	af00      	add	r7, sp, #0
 8011c1c:	6078      	str	r0, [r7, #4]
 8011c1e:	460b      	mov	r3, r1
 8011c20:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	1c5a      	adds	r2, r3, #1
 8011c26:	607a      	str	r2, [r7, #4]
 8011c28:	887a      	ldrh	r2, [r7, #2]
 8011c2a:	b2d2      	uxtb	r2, r2
 8011c2c:	701a      	strb	r2, [r3, #0]
 8011c2e:	887b      	ldrh	r3, [r7, #2]
 8011c30:	0a1b      	lsrs	r3, r3, #8
 8011c32:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	1c5a      	adds	r2, r3, #1
 8011c38:	607a      	str	r2, [r7, #4]
 8011c3a:	887a      	ldrh	r2, [r7, #2]
 8011c3c:	b2d2      	uxtb	r2, r2
 8011c3e:	701a      	strb	r2, [r3, #0]
}
 8011c40:	bf00      	nop
 8011c42:	370c      	adds	r7, #12
 8011c44:	46bd      	mov	sp, r7
 8011c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4a:	4770      	bx	lr

08011c4c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011c4c:	b480      	push	{r7}
 8011c4e:	b083      	sub	sp, #12
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	6078      	str	r0, [r7, #4]
 8011c54:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	1c5a      	adds	r2, r3, #1
 8011c5a:	607a      	str	r2, [r7, #4]
 8011c5c:	683a      	ldr	r2, [r7, #0]
 8011c5e:	b2d2      	uxtb	r2, r2
 8011c60:	701a      	strb	r2, [r3, #0]
 8011c62:	683b      	ldr	r3, [r7, #0]
 8011c64:	0a1b      	lsrs	r3, r3, #8
 8011c66:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	1c5a      	adds	r2, r3, #1
 8011c6c:	607a      	str	r2, [r7, #4]
 8011c6e:	683a      	ldr	r2, [r7, #0]
 8011c70:	b2d2      	uxtb	r2, r2
 8011c72:	701a      	strb	r2, [r3, #0]
 8011c74:	683b      	ldr	r3, [r7, #0]
 8011c76:	0a1b      	lsrs	r3, r3, #8
 8011c78:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	1c5a      	adds	r2, r3, #1
 8011c7e:	607a      	str	r2, [r7, #4]
 8011c80:	683a      	ldr	r2, [r7, #0]
 8011c82:	b2d2      	uxtb	r2, r2
 8011c84:	701a      	strb	r2, [r3, #0]
 8011c86:	683b      	ldr	r3, [r7, #0]
 8011c88:	0a1b      	lsrs	r3, r3, #8
 8011c8a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	1c5a      	adds	r2, r3, #1
 8011c90:	607a      	str	r2, [r7, #4]
 8011c92:	683a      	ldr	r2, [r7, #0]
 8011c94:	b2d2      	uxtb	r2, r2
 8011c96:	701a      	strb	r2, [r3, #0]
}
 8011c98:	bf00      	nop
 8011c9a:	370c      	adds	r7, #12
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca2:	4770      	bx	lr

08011ca4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011ca4:	b480      	push	{r7}
 8011ca6:	b087      	sub	sp, #28
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	60f8      	str	r0, [r7, #12]
 8011cac:	60b9      	str	r1, [r7, #8]
 8011cae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011cb4:	68bb      	ldr	r3, [r7, #8]
 8011cb6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d00d      	beq.n	8011cda <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011cbe:	693a      	ldr	r2, [r7, #16]
 8011cc0:	1c53      	adds	r3, r2, #1
 8011cc2:	613b      	str	r3, [r7, #16]
 8011cc4:	697b      	ldr	r3, [r7, #20]
 8011cc6:	1c59      	adds	r1, r3, #1
 8011cc8:	6179      	str	r1, [r7, #20]
 8011cca:	7812      	ldrb	r2, [r2, #0]
 8011ccc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	3b01      	subs	r3, #1
 8011cd2:	607b      	str	r3, [r7, #4]
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d1f1      	bne.n	8011cbe <mem_cpy+0x1a>
	}
}
 8011cda:	bf00      	nop
 8011cdc:	371c      	adds	r7, #28
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce4:	4770      	bx	lr

08011ce6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011ce6:	b480      	push	{r7}
 8011ce8:	b087      	sub	sp, #28
 8011cea:	af00      	add	r7, sp, #0
 8011cec:	60f8      	str	r0, [r7, #12]
 8011cee:	60b9      	str	r1, [r7, #8]
 8011cf0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011cf6:	697b      	ldr	r3, [r7, #20]
 8011cf8:	1c5a      	adds	r2, r3, #1
 8011cfa:	617a      	str	r2, [r7, #20]
 8011cfc:	68ba      	ldr	r2, [r7, #8]
 8011cfe:	b2d2      	uxtb	r2, r2
 8011d00:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	3b01      	subs	r3, #1
 8011d06:	607b      	str	r3, [r7, #4]
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d1f3      	bne.n	8011cf6 <mem_set+0x10>
}
 8011d0e:	bf00      	nop
 8011d10:	bf00      	nop
 8011d12:	371c      	adds	r7, #28
 8011d14:	46bd      	mov	sp, r7
 8011d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1a:	4770      	bx	lr

08011d1c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011d1c:	b480      	push	{r7}
 8011d1e:	b089      	sub	sp, #36	@ 0x24
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	60f8      	str	r0, [r7, #12]
 8011d24:	60b9      	str	r1, [r7, #8]
 8011d26:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	61fb      	str	r3, [r7, #28]
 8011d2c:	68bb      	ldr	r3, [r7, #8]
 8011d2e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011d30:	2300      	movs	r3, #0
 8011d32:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011d34:	69fb      	ldr	r3, [r7, #28]
 8011d36:	1c5a      	adds	r2, r3, #1
 8011d38:	61fa      	str	r2, [r7, #28]
 8011d3a:	781b      	ldrb	r3, [r3, #0]
 8011d3c:	4619      	mov	r1, r3
 8011d3e:	69bb      	ldr	r3, [r7, #24]
 8011d40:	1c5a      	adds	r2, r3, #1
 8011d42:	61ba      	str	r2, [r7, #24]
 8011d44:	781b      	ldrb	r3, [r3, #0]
 8011d46:	1acb      	subs	r3, r1, r3
 8011d48:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	3b01      	subs	r3, #1
 8011d4e:	607b      	str	r3, [r7, #4]
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d002      	beq.n	8011d5c <mem_cmp+0x40>
 8011d56:	697b      	ldr	r3, [r7, #20]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d0eb      	beq.n	8011d34 <mem_cmp+0x18>

	return r;
 8011d5c:	697b      	ldr	r3, [r7, #20]
}
 8011d5e:	4618      	mov	r0, r3
 8011d60:	3724      	adds	r7, #36	@ 0x24
 8011d62:	46bd      	mov	sp, r7
 8011d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d68:	4770      	bx	lr

08011d6a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011d6a:	b480      	push	{r7}
 8011d6c:	b083      	sub	sp, #12
 8011d6e:	af00      	add	r7, sp, #0
 8011d70:	6078      	str	r0, [r7, #4]
 8011d72:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011d74:	e002      	b.n	8011d7c <chk_chr+0x12>
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	3301      	adds	r3, #1
 8011d7a:	607b      	str	r3, [r7, #4]
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	781b      	ldrb	r3, [r3, #0]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d005      	beq.n	8011d90 <chk_chr+0x26>
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	781b      	ldrb	r3, [r3, #0]
 8011d88:	461a      	mov	r2, r3
 8011d8a:	683b      	ldr	r3, [r7, #0]
 8011d8c:	4293      	cmp	r3, r2
 8011d8e:	d1f2      	bne.n	8011d76 <chk_chr+0xc>
	return *str;
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	781b      	ldrb	r3, [r3, #0]
}
 8011d94:	4618      	mov	r0, r3
 8011d96:	370c      	adds	r7, #12
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9e:	4770      	bx	lr

08011da0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011da0:	b480      	push	{r7}
 8011da2:	b085      	sub	sp, #20
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
 8011da8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011daa:	2300      	movs	r3, #0
 8011dac:	60bb      	str	r3, [r7, #8]
 8011dae:	68bb      	ldr	r3, [r7, #8]
 8011db0:	60fb      	str	r3, [r7, #12]
 8011db2:	e029      	b.n	8011e08 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011db4:	4a27      	ldr	r2, [pc, #156]	@ (8011e54 <chk_lock+0xb4>)
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	011b      	lsls	r3, r3, #4
 8011dba:	4413      	add	r3, r2
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d01d      	beq.n	8011dfe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011dc2:	4a24      	ldr	r2, [pc, #144]	@ (8011e54 <chk_lock+0xb4>)
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	011b      	lsls	r3, r3, #4
 8011dc8:	4413      	add	r3, r2
 8011dca:	681a      	ldr	r2, [r3, #0]
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	429a      	cmp	r2, r3
 8011dd2:	d116      	bne.n	8011e02 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011dd4:	4a1f      	ldr	r2, [pc, #124]	@ (8011e54 <chk_lock+0xb4>)
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	011b      	lsls	r3, r3, #4
 8011dda:	4413      	add	r3, r2
 8011ddc:	3304      	adds	r3, #4
 8011dde:	681a      	ldr	r2, [r3, #0]
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011de4:	429a      	cmp	r2, r3
 8011de6:	d10c      	bne.n	8011e02 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011de8:	4a1a      	ldr	r2, [pc, #104]	@ (8011e54 <chk_lock+0xb4>)
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	011b      	lsls	r3, r3, #4
 8011dee:	4413      	add	r3, r2
 8011df0:	3308      	adds	r3, #8
 8011df2:	681a      	ldr	r2, [r3, #0]
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011df8:	429a      	cmp	r2, r3
 8011dfa:	d102      	bne.n	8011e02 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011dfc:	e007      	b.n	8011e0e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8011dfe:	2301      	movs	r3, #1
 8011e00:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	3301      	adds	r3, #1
 8011e06:	60fb      	str	r3, [r7, #12]
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	2b01      	cmp	r3, #1
 8011e0c:	d9d2      	bls.n	8011db4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	2b02      	cmp	r3, #2
 8011e12:	d109      	bne.n	8011e28 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011e14:	68bb      	ldr	r3, [r7, #8]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d102      	bne.n	8011e20 <chk_lock+0x80>
 8011e1a:	683b      	ldr	r3, [r7, #0]
 8011e1c:	2b02      	cmp	r3, #2
 8011e1e:	d101      	bne.n	8011e24 <chk_lock+0x84>
 8011e20:	2300      	movs	r3, #0
 8011e22:	e010      	b.n	8011e46 <chk_lock+0xa6>
 8011e24:	2312      	movs	r3, #18
 8011e26:	e00e      	b.n	8011e46 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011e28:	683b      	ldr	r3, [r7, #0]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d108      	bne.n	8011e40 <chk_lock+0xa0>
 8011e2e:	4a09      	ldr	r2, [pc, #36]	@ (8011e54 <chk_lock+0xb4>)
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	011b      	lsls	r3, r3, #4
 8011e34:	4413      	add	r3, r2
 8011e36:	330c      	adds	r3, #12
 8011e38:	881b      	ldrh	r3, [r3, #0]
 8011e3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011e3e:	d101      	bne.n	8011e44 <chk_lock+0xa4>
 8011e40:	2310      	movs	r3, #16
 8011e42:	e000      	b.n	8011e46 <chk_lock+0xa6>
 8011e44:	2300      	movs	r3, #0
}
 8011e46:	4618      	mov	r0, r3
 8011e48:	3714      	adds	r7, #20
 8011e4a:	46bd      	mov	sp, r7
 8011e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e50:	4770      	bx	lr
 8011e52:	bf00      	nop
 8011e54:	240054a8 	.word	0x240054a8

08011e58 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011e58:	b480      	push	{r7}
 8011e5a:	b083      	sub	sp, #12
 8011e5c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011e5e:	2300      	movs	r3, #0
 8011e60:	607b      	str	r3, [r7, #4]
 8011e62:	e002      	b.n	8011e6a <enq_lock+0x12>
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	3301      	adds	r3, #1
 8011e68:	607b      	str	r3, [r7, #4]
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	2b01      	cmp	r3, #1
 8011e6e:	d806      	bhi.n	8011e7e <enq_lock+0x26>
 8011e70:	4a09      	ldr	r2, [pc, #36]	@ (8011e98 <enq_lock+0x40>)
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	011b      	lsls	r3, r3, #4
 8011e76:	4413      	add	r3, r2
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d1f2      	bne.n	8011e64 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	2b02      	cmp	r3, #2
 8011e82:	bf14      	ite	ne
 8011e84:	2301      	movne	r3, #1
 8011e86:	2300      	moveq	r3, #0
 8011e88:	b2db      	uxtb	r3, r3
}
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	370c      	adds	r7, #12
 8011e8e:	46bd      	mov	sp, r7
 8011e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e94:	4770      	bx	lr
 8011e96:	bf00      	nop
 8011e98:	240054a8 	.word	0x240054a8

08011e9c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011e9c:	b480      	push	{r7}
 8011e9e:	b085      	sub	sp, #20
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	6078      	str	r0, [r7, #4]
 8011ea4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	60fb      	str	r3, [r7, #12]
 8011eaa:	e01f      	b.n	8011eec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011eac:	4a41      	ldr	r2, [pc, #260]	@ (8011fb4 <inc_lock+0x118>)
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	011b      	lsls	r3, r3, #4
 8011eb2:	4413      	add	r3, r2
 8011eb4:	681a      	ldr	r2, [r3, #0]
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	429a      	cmp	r2, r3
 8011ebc:	d113      	bne.n	8011ee6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011ebe:	4a3d      	ldr	r2, [pc, #244]	@ (8011fb4 <inc_lock+0x118>)
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	011b      	lsls	r3, r3, #4
 8011ec4:	4413      	add	r3, r2
 8011ec6:	3304      	adds	r3, #4
 8011ec8:	681a      	ldr	r2, [r3, #0]
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011ece:	429a      	cmp	r2, r3
 8011ed0:	d109      	bne.n	8011ee6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011ed2:	4a38      	ldr	r2, [pc, #224]	@ (8011fb4 <inc_lock+0x118>)
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	011b      	lsls	r3, r3, #4
 8011ed8:	4413      	add	r3, r2
 8011eda:	3308      	adds	r3, #8
 8011edc:	681a      	ldr	r2, [r3, #0]
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011ee2:	429a      	cmp	r2, r3
 8011ee4:	d006      	beq.n	8011ef4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	3301      	adds	r3, #1
 8011eea:	60fb      	str	r3, [r7, #12]
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	2b01      	cmp	r3, #1
 8011ef0:	d9dc      	bls.n	8011eac <inc_lock+0x10>
 8011ef2:	e000      	b.n	8011ef6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011ef4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	2b02      	cmp	r3, #2
 8011efa:	d132      	bne.n	8011f62 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011efc:	2300      	movs	r3, #0
 8011efe:	60fb      	str	r3, [r7, #12]
 8011f00:	e002      	b.n	8011f08 <inc_lock+0x6c>
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	3301      	adds	r3, #1
 8011f06:	60fb      	str	r3, [r7, #12]
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	2b01      	cmp	r3, #1
 8011f0c:	d806      	bhi.n	8011f1c <inc_lock+0x80>
 8011f0e:	4a29      	ldr	r2, [pc, #164]	@ (8011fb4 <inc_lock+0x118>)
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	011b      	lsls	r3, r3, #4
 8011f14:	4413      	add	r3, r2
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d1f2      	bne.n	8011f02 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	2b02      	cmp	r3, #2
 8011f20:	d101      	bne.n	8011f26 <inc_lock+0x8a>
 8011f22:	2300      	movs	r3, #0
 8011f24:	e040      	b.n	8011fa8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	681a      	ldr	r2, [r3, #0]
 8011f2a:	4922      	ldr	r1, [pc, #136]	@ (8011fb4 <inc_lock+0x118>)
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	011b      	lsls	r3, r3, #4
 8011f30:	440b      	add	r3, r1
 8011f32:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	689a      	ldr	r2, [r3, #8]
 8011f38:	491e      	ldr	r1, [pc, #120]	@ (8011fb4 <inc_lock+0x118>)
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	011b      	lsls	r3, r3, #4
 8011f3e:	440b      	add	r3, r1
 8011f40:	3304      	adds	r3, #4
 8011f42:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	695a      	ldr	r2, [r3, #20]
 8011f48:	491a      	ldr	r1, [pc, #104]	@ (8011fb4 <inc_lock+0x118>)
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	011b      	lsls	r3, r3, #4
 8011f4e:	440b      	add	r3, r1
 8011f50:	3308      	adds	r3, #8
 8011f52:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011f54:	4a17      	ldr	r2, [pc, #92]	@ (8011fb4 <inc_lock+0x118>)
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	011b      	lsls	r3, r3, #4
 8011f5a:	4413      	add	r3, r2
 8011f5c:	330c      	adds	r3, #12
 8011f5e:	2200      	movs	r2, #0
 8011f60:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011f62:	683b      	ldr	r3, [r7, #0]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d009      	beq.n	8011f7c <inc_lock+0xe0>
 8011f68:	4a12      	ldr	r2, [pc, #72]	@ (8011fb4 <inc_lock+0x118>)
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	011b      	lsls	r3, r3, #4
 8011f6e:	4413      	add	r3, r2
 8011f70:	330c      	adds	r3, #12
 8011f72:	881b      	ldrh	r3, [r3, #0]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d001      	beq.n	8011f7c <inc_lock+0xe0>
 8011f78:	2300      	movs	r3, #0
 8011f7a:	e015      	b.n	8011fa8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011f7c:	683b      	ldr	r3, [r7, #0]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d108      	bne.n	8011f94 <inc_lock+0xf8>
 8011f82:	4a0c      	ldr	r2, [pc, #48]	@ (8011fb4 <inc_lock+0x118>)
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	011b      	lsls	r3, r3, #4
 8011f88:	4413      	add	r3, r2
 8011f8a:	330c      	adds	r3, #12
 8011f8c:	881b      	ldrh	r3, [r3, #0]
 8011f8e:	3301      	adds	r3, #1
 8011f90:	b29a      	uxth	r2, r3
 8011f92:	e001      	b.n	8011f98 <inc_lock+0xfc>
 8011f94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011f98:	4906      	ldr	r1, [pc, #24]	@ (8011fb4 <inc_lock+0x118>)
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	011b      	lsls	r3, r3, #4
 8011f9e:	440b      	add	r3, r1
 8011fa0:	330c      	adds	r3, #12
 8011fa2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	3301      	adds	r3, #1
}
 8011fa8:	4618      	mov	r0, r3
 8011faa:	3714      	adds	r7, #20
 8011fac:	46bd      	mov	sp, r7
 8011fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb2:	4770      	bx	lr
 8011fb4:	240054a8 	.word	0x240054a8

08011fb8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011fb8:	b480      	push	{r7}
 8011fba:	b085      	sub	sp, #20
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	3b01      	subs	r3, #1
 8011fc4:	607b      	str	r3, [r7, #4]
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	2b01      	cmp	r3, #1
 8011fca:	d825      	bhi.n	8012018 <dec_lock+0x60>
		n = Files[i].ctr;
 8011fcc:	4a17      	ldr	r2, [pc, #92]	@ (801202c <dec_lock+0x74>)
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	011b      	lsls	r3, r3, #4
 8011fd2:	4413      	add	r3, r2
 8011fd4:	330c      	adds	r3, #12
 8011fd6:	881b      	ldrh	r3, [r3, #0]
 8011fd8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011fda:	89fb      	ldrh	r3, [r7, #14]
 8011fdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011fe0:	d101      	bne.n	8011fe6 <dec_lock+0x2e>
 8011fe2:	2300      	movs	r3, #0
 8011fe4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011fe6:	89fb      	ldrh	r3, [r7, #14]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d002      	beq.n	8011ff2 <dec_lock+0x3a>
 8011fec:	89fb      	ldrh	r3, [r7, #14]
 8011fee:	3b01      	subs	r3, #1
 8011ff0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011ff2:	4a0e      	ldr	r2, [pc, #56]	@ (801202c <dec_lock+0x74>)
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	011b      	lsls	r3, r3, #4
 8011ff8:	4413      	add	r3, r2
 8011ffa:	330c      	adds	r3, #12
 8011ffc:	89fa      	ldrh	r2, [r7, #14]
 8011ffe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8012000:	89fb      	ldrh	r3, [r7, #14]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d105      	bne.n	8012012 <dec_lock+0x5a>
 8012006:	4a09      	ldr	r2, [pc, #36]	@ (801202c <dec_lock+0x74>)
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	011b      	lsls	r3, r3, #4
 801200c:	4413      	add	r3, r2
 801200e:	2200      	movs	r2, #0
 8012010:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8012012:	2300      	movs	r3, #0
 8012014:	737b      	strb	r3, [r7, #13]
 8012016:	e001      	b.n	801201c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8012018:	2302      	movs	r3, #2
 801201a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801201c:	7b7b      	ldrb	r3, [r7, #13]
}
 801201e:	4618      	mov	r0, r3
 8012020:	3714      	adds	r7, #20
 8012022:	46bd      	mov	sp, r7
 8012024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012028:	4770      	bx	lr
 801202a:	bf00      	nop
 801202c:	240054a8 	.word	0x240054a8

08012030 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8012030:	b480      	push	{r7}
 8012032:	b085      	sub	sp, #20
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8012038:	2300      	movs	r3, #0
 801203a:	60fb      	str	r3, [r7, #12]
 801203c:	e010      	b.n	8012060 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801203e:	4a0d      	ldr	r2, [pc, #52]	@ (8012074 <clear_lock+0x44>)
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	011b      	lsls	r3, r3, #4
 8012044:	4413      	add	r3, r2
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	687a      	ldr	r2, [r7, #4]
 801204a:	429a      	cmp	r2, r3
 801204c:	d105      	bne.n	801205a <clear_lock+0x2a>
 801204e:	4a09      	ldr	r2, [pc, #36]	@ (8012074 <clear_lock+0x44>)
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	011b      	lsls	r3, r3, #4
 8012054:	4413      	add	r3, r2
 8012056:	2200      	movs	r2, #0
 8012058:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	3301      	adds	r3, #1
 801205e:	60fb      	str	r3, [r7, #12]
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	2b01      	cmp	r3, #1
 8012064:	d9eb      	bls.n	801203e <clear_lock+0xe>
	}
}
 8012066:	bf00      	nop
 8012068:	bf00      	nop
 801206a:	3714      	adds	r7, #20
 801206c:	46bd      	mov	sp, r7
 801206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012072:	4770      	bx	lr
 8012074:	240054a8 	.word	0x240054a8

08012078 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b086      	sub	sp, #24
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8012080:	2300      	movs	r3, #0
 8012082:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	78db      	ldrb	r3, [r3, #3]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d034      	beq.n	80120f6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012090:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	7858      	ldrb	r0, [r3, #1]
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 801209c:	2301      	movs	r3, #1
 801209e:	697a      	ldr	r2, [r7, #20]
 80120a0:	f7ff fd40 	bl	8011b24 <disk_write>
 80120a4:	4603      	mov	r3, r0
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d002      	beq.n	80120b0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80120aa:	2301      	movs	r3, #1
 80120ac:	73fb      	strb	r3, [r7, #15]
 80120ae:	e022      	b.n	80120f6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	2200      	movs	r2, #0
 80120b4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120ba:	697a      	ldr	r2, [r7, #20]
 80120bc:	1ad2      	subs	r2, r2, r3
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120c2:	429a      	cmp	r2, r3
 80120c4:	d217      	bcs.n	80120f6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	789b      	ldrb	r3, [r3, #2]
 80120ca:	613b      	str	r3, [r7, #16]
 80120cc:	e010      	b.n	80120f0 <sync_window+0x78>
					wsect += fs->fsize;
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120d2:	697a      	ldr	r2, [r7, #20]
 80120d4:	4413      	add	r3, r2
 80120d6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	7858      	ldrb	r0, [r3, #1]
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80120e2:	2301      	movs	r3, #1
 80120e4:	697a      	ldr	r2, [r7, #20]
 80120e6:	f7ff fd1d 	bl	8011b24 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80120ea:	693b      	ldr	r3, [r7, #16]
 80120ec:	3b01      	subs	r3, #1
 80120ee:	613b      	str	r3, [r7, #16]
 80120f0:	693b      	ldr	r3, [r7, #16]
 80120f2:	2b01      	cmp	r3, #1
 80120f4:	d8eb      	bhi.n	80120ce <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80120f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80120f8:	4618      	mov	r0, r3
 80120fa:	3718      	adds	r7, #24
 80120fc:	46bd      	mov	sp, r7
 80120fe:	bd80      	pop	{r7, pc}

08012100 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8012100:	b580      	push	{r7, lr}
 8012102:	b084      	sub	sp, #16
 8012104:	af00      	add	r7, sp, #0
 8012106:	6078      	str	r0, [r7, #4]
 8012108:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801210a:	2300      	movs	r3, #0
 801210c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012112:	683a      	ldr	r2, [r7, #0]
 8012114:	429a      	cmp	r2, r3
 8012116:	d01b      	beq.n	8012150 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8012118:	6878      	ldr	r0, [r7, #4]
 801211a:	f7ff ffad 	bl	8012078 <sync_window>
 801211e:	4603      	mov	r3, r0
 8012120:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8012122:	7bfb      	ldrb	r3, [r7, #15]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d113      	bne.n	8012150 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	7858      	ldrb	r0, [r3, #1]
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8012132:	2301      	movs	r3, #1
 8012134:	683a      	ldr	r2, [r7, #0]
 8012136:	f7ff fcd5 	bl	8011ae4 <disk_read>
 801213a:	4603      	mov	r3, r0
 801213c:	2b00      	cmp	r3, #0
 801213e:	d004      	beq.n	801214a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8012140:	f04f 33ff 	mov.w	r3, #4294967295
 8012144:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8012146:	2301      	movs	r3, #1
 8012148:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	683a      	ldr	r2, [r7, #0]
 801214e:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 8012150:	7bfb      	ldrb	r3, [r7, #15]
}
 8012152:	4618      	mov	r0, r3
 8012154:	3710      	adds	r7, #16
 8012156:	46bd      	mov	sp, r7
 8012158:	bd80      	pop	{r7, pc}
	...

0801215c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801215c:	b580      	push	{r7, lr}
 801215e:	b084      	sub	sp, #16
 8012160:	af00      	add	r7, sp, #0
 8012162:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8012164:	6878      	ldr	r0, [r7, #4]
 8012166:	f7ff ff87 	bl	8012078 <sync_window>
 801216a:	4603      	mov	r3, r0
 801216c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801216e:	7bfb      	ldrb	r3, [r7, #15]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d159      	bne.n	8012228 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	781b      	ldrb	r3, [r3, #0]
 8012178:	2b03      	cmp	r3, #3
 801217a:	d149      	bne.n	8012210 <sync_fs+0xb4>
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	791b      	ldrb	r3, [r3, #4]
 8012180:	2b01      	cmp	r3, #1
 8012182:	d145      	bne.n	8012210 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	899b      	ldrh	r3, [r3, #12]
 801218e:	461a      	mov	r2, r3
 8012190:	2100      	movs	r1, #0
 8012192:	f7ff fda8 	bl	8011ce6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	333c      	adds	r3, #60	@ 0x3c
 801219a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801219e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80121a2:	4618      	mov	r0, r3
 80121a4:	f7ff fd37 	bl	8011c16 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	333c      	adds	r3, #60	@ 0x3c
 80121ac:	4921      	ldr	r1, [pc, #132]	@ (8012234 <sync_fs+0xd8>)
 80121ae:	4618      	mov	r0, r3
 80121b0:	f7ff fd4c 	bl	8011c4c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	333c      	adds	r3, #60	@ 0x3c
 80121b8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80121bc:	491e      	ldr	r1, [pc, #120]	@ (8012238 <sync_fs+0xdc>)
 80121be:	4618      	mov	r0, r3
 80121c0:	f7ff fd44 	bl	8011c4c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	333c      	adds	r3, #60	@ 0x3c
 80121c8:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	699b      	ldr	r3, [r3, #24]
 80121d0:	4619      	mov	r1, r3
 80121d2:	4610      	mov	r0, r2
 80121d4:	f7ff fd3a 	bl	8011c4c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	333c      	adds	r3, #60	@ 0x3c
 80121dc:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	695b      	ldr	r3, [r3, #20]
 80121e4:	4619      	mov	r1, r3
 80121e6:	4610      	mov	r0, r2
 80121e8:	f7ff fd30 	bl	8011c4c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80121f0:	1c5a      	adds	r2, r3, #1
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	7858      	ldrb	r0, [r3, #1]
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012204:	2301      	movs	r3, #1
 8012206:	f7ff fc8d 	bl	8011b24 <disk_write>
			fs->fsi_flag = 0;
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	2200      	movs	r2, #0
 801220e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	785b      	ldrb	r3, [r3, #1]
 8012214:	2200      	movs	r2, #0
 8012216:	2100      	movs	r1, #0
 8012218:	4618      	mov	r0, r3
 801221a:	f7ff fca3 	bl	8011b64 <disk_ioctl>
 801221e:	4603      	mov	r3, r0
 8012220:	2b00      	cmp	r3, #0
 8012222:	d001      	beq.n	8012228 <sync_fs+0xcc>
 8012224:	2301      	movs	r3, #1
 8012226:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8012228:	7bfb      	ldrb	r3, [r7, #15]
}
 801222a:	4618      	mov	r0, r3
 801222c:	3710      	adds	r7, #16
 801222e:	46bd      	mov	sp, r7
 8012230:	bd80      	pop	{r7, pc}
 8012232:	bf00      	nop
 8012234:	41615252 	.word	0x41615252
 8012238:	61417272 	.word	0x61417272

0801223c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801223c:	b480      	push	{r7}
 801223e:	b083      	sub	sp, #12
 8012240:	af00      	add	r7, sp, #0
 8012242:	6078      	str	r0, [r7, #4]
 8012244:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8012246:	683b      	ldr	r3, [r7, #0]
 8012248:	3b02      	subs	r3, #2
 801224a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	6a1b      	ldr	r3, [r3, #32]
 8012250:	3b02      	subs	r3, #2
 8012252:	683a      	ldr	r2, [r7, #0]
 8012254:	429a      	cmp	r2, r3
 8012256:	d301      	bcc.n	801225c <clust2sect+0x20>
 8012258:	2300      	movs	r3, #0
 801225a:	e008      	b.n	801226e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	895b      	ldrh	r3, [r3, #10]
 8012260:	461a      	mov	r2, r3
 8012262:	683b      	ldr	r3, [r7, #0]
 8012264:	fb03 f202 	mul.w	r2, r3, r2
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801226c:	4413      	add	r3, r2
}
 801226e:	4618      	mov	r0, r3
 8012270:	370c      	adds	r7, #12
 8012272:	46bd      	mov	sp, r7
 8012274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012278:	4770      	bx	lr

0801227a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801227a:	b580      	push	{r7, lr}
 801227c:	b086      	sub	sp, #24
 801227e:	af00      	add	r7, sp, #0
 8012280:	6078      	str	r0, [r7, #4]
 8012282:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801228a:	683b      	ldr	r3, [r7, #0]
 801228c:	2b01      	cmp	r3, #1
 801228e:	d904      	bls.n	801229a <get_fat+0x20>
 8012290:	693b      	ldr	r3, [r7, #16]
 8012292:	6a1b      	ldr	r3, [r3, #32]
 8012294:	683a      	ldr	r2, [r7, #0]
 8012296:	429a      	cmp	r2, r3
 8012298:	d302      	bcc.n	80122a0 <get_fat+0x26>
		val = 1;	/* Internal error */
 801229a:	2301      	movs	r3, #1
 801229c:	617b      	str	r3, [r7, #20]
 801229e:	e0ba      	b.n	8012416 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80122a0:	f04f 33ff 	mov.w	r3, #4294967295
 80122a4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80122a6:	693b      	ldr	r3, [r7, #16]
 80122a8:	781b      	ldrb	r3, [r3, #0]
 80122aa:	2b03      	cmp	r3, #3
 80122ac:	f000 8082 	beq.w	80123b4 <get_fat+0x13a>
 80122b0:	2b03      	cmp	r3, #3
 80122b2:	f300 80a6 	bgt.w	8012402 <get_fat+0x188>
 80122b6:	2b01      	cmp	r3, #1
 80122b8:	d002      	beq.n	80122c0 <get_fat+0x46>
 80122ba:	2b02      	cmp	r3, #2
 80122bc:	d055      	beq.n	801236a <get_fat+0xf0>
 80122be:	e0a0      	b.n	8012402 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80122c0:	683b      	ldr	r3, [r7, #0]
 80122c2:	60fb      	str	r3, [r7, #12]
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	085b      	lsrs	r3, r3, #1
 80122c8:	68fa      	ldr	r2, [r7, #12]
 80122ca:	4413      	add	r3, r2
 80122cc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80122ce:	693b      	ldr	r3, [r7, #16]
 80122d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80122d2:	693b      	ldr	r3, [r7, #16]
 80122d4:	899b      	ldrh	r3, [r3, #12]
 80122d6:	4619      	mov	r1, r3
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	fbb3 f3f1 	udiv	r3, r3, r1
 80122de:	4413      	add	r3, r2
 80122e0:	4619      	mov	r1, r3
 80122e2:	6938      	ldr	r0, [r7, #16]
 80122e4:	f7ff ff0c 	bl	8012100 <move_window>
 80122e8:	4603      	mov	r3, r0
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	f040 808c 	bne.w	8012408 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	1c5a      	adds	r2, r3, #1
 80122f4:	60fa      	str	r2, [r7, #12]
 80122f6:	693a      	ldr	r2, [r7, #16]
 80122f8:	8992      	ldrh	r2, [r2, #12]
 80122fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80122fe:	fb01 f202 	mul.w	r2, r1, r2
 8012302:	1a9b      	subs	r3, r3, r2
 8012304:	693a      	ldr	r2, [r7, #16]
 8012306:	4413      	add	r3, r2
 8012308:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801230c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801230e:	693b      	ldr	r3, [r7, #16]
 8012310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012312:	693b      	ldr	r3, [r7, #16]
 8012314:	899b      	ldrh	r3, [r3, #12]
 8012316:	4619      	mov	r1, r3
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	fbb3 f3f1 	udiv	r3, r3, r1
 801231e:	4413      	add	r3, r2
 8012320:	4619      	mov	r1, r3
 8012322:	6938      	ldr	r0, [r7, #16]
 8012324:	f7ff feec 	bl	8012100 <move_window>
 8012328:	4603      	mov	r3, r0
 801232a:	2b00      	cmp	r3, #0
 801232c:	d16e      	bne.n	801240c <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 801232e:	693b      	ldr	r3, [r7, #16]
 8012330:	899b      	ldrh	r3, [r3, #12]
 8012332:	461a      	mov	r2, r3
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	fbb3 f1f2 	udiv	r1, r3, r2
 801233a:	fb01 f202 	mul.w	r2, r1, r2
 801233e:	1a9b      	subs	r3, r3, r2
 8012340:	693a      	ldr	r2, [r7, #16]
 8012342:	4413      	add	r3, r2
 8012344:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012348:	021b      	lsls	r3, r3, #8
 801234a:	68ba      	ldr	r2, [r7, #8]
 801234c:	4313      	orrs	r3, r2
 801234e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012350:	683b      	ldr	r3, [r7, #0]
 8012352:	f003 0301 	and.w	r3, r3, #1
 8012356:	2b00      	cmp	r3, #0
 8012358:	d002      	beq.n	8012360 <get_fat+0xe6>
 801235a:	68bb      	ldr	r3, [r7, #8]
 801235c:	091b      	lsrs	r3, r3, #4
 801235e:	e002      	b.n	8012366 <get_fat+0xec>
 8012360:	68bb      	ldr	r3, [r7, #8]
 8012362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012366:	617b      	str	r3, [r7, #20]
			break;
 8012368:	e055      	b.n	8012416 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801236a:	693b      	ldr	r3, [r7, #16]
 801236c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801236e:	693b      	ldr	r3, [r7, #16]
 8012370:	899b      	ldrh	r3, [r3, #12]
 8012372:	085b      	lsrs	r3, r3, #1
 8012374:	b29b      	uxth	r3, r3
 8012376:	4619      	mov	r1, r3
 8012378:	683b      	ldr	r3, [r7, #0]
 801237a:	fbb3 f3f1 	udiv	r3, r3, r1
 801237e:	4413      	add	r3, r2
 8012380:	4619      	mov	r1, r3
 8012382:	6938      	ldr	r0, [r7, #16]
 8012384:	f7ff febc 	bl	8012100 <move_window>
 8012388:	4603      	mov	r3, r0
 801238a:	2b00      	cmp	r3, #0
 801238c:	d140      	bne.n	8012410 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801238e:	693b      	ldr	r3, [r7, #16]
 8012390:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8012394:	683b      	ldr	r3, [r7, #0]
 8012396:	005b      	lsls	r3, r3, #1
 8012398:	693a      	ldr	r2, [r7, #16]
 801239a:	8992      	ldrh	r2, [r2, #12]
 801239c:	fbb3 f0f2 	udiv	r0, r3, r2
 80123a0:	fb00 f202 	mul.w	r2, r0, r2
 80123a4:	1a9b      	subs	r3, r3, r2
 80123a6:	440b      	add	r3, r1
 80123a8:	4618      	mov	r0, r3
 80123aa:	f7ff fbf9 	bl	8011ba0 <ld_word>
 80123ae:	4603      	mov	r3, r0
 80123b0:	617b      	str	r3, [r7, #20]
			break;
 80123b2:	e030      	b.n	8012416 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80123b4:	693b      	ldr	r3, [r7, #16]
 80123b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80123b8:	693b      	ldr	r3, [r7, #16]
 80123ba:	899b      	ldrh	r3, [r3, #12]
 80123bc:	089b      	lsrs	r3, r3, #2
 80123be:	b29b      	uxth	r3, r3
 80123c0:	4619      	mov	r1, r3
 80123c2:	683b      	ldr	r3, [r7, #0]
 80123c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80123c8:	4413      	add	r3, r2
 80123ca:	4619      	mov	r1, r3
 80123cc:	6938      	ldr	r0, [r7, #16]
 80123ce:	f7ff fe97 	bl	8012100 <move_window>
 80123d2:	4603      	mov	r3, r0
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d11d      	bne.n	8012414 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80123d8:	693b      	ldr	r3, [r7, #16]
 80123da:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80123de:	683b      	ldr	r3, [r7, #0]
 80123e0:	009b      	lsls	r3, r3, #2
 80123e2:	693a      	ldr	r2, [r7, #16]
 80123e4:	8992      	ldrh	r2, [r2, #12]
 80123e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80123ea:	fb00 f202 	mul.w	r2, r0, r2
 80123ee:	1a9b      	subs	r3, r3, r2
 80123f0:	440b      	add	r3, r1
 80123f2:	4618      	mov	r0, r3
 80123f4:	f7ff fbec 	bl	8011bd0 <ld_dword>
 80123f8:	4603      	mov	r3, r0
 80123fa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80123fe:	617b      	str	r3, [r7, #20]
			break;
 8012400:	e009      	b.n	8012416 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012402:	2301      	movs	r3, #1
 8012404:	617b      	str	r3, [r7, #20]
 8012406:	e006      	b.n	8012416 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012408:	bf00      	nop
 801240a:	e004      	b.n	8012416 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801240c:	bf00      	nop
 801240e:	e002      	b.n	8012416 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012410:	bf00      	nop
 8012412:	e000      	b.n	8012416 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012414:	bf00      	nop
		}
	}

	return val;
 8012416:	697b      	ldr	r3, [r7, #20]
}
 8012418:	4618      	mov	r0, r3
 801241a:	3718      	adds	r7, #24
 801241c:	46bd      	mov	sp, r7
 801241e:	bd80      	pop	{r7, pc}

08012420 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8012420:	b590      	push	{r4, r7, lr}
 8012422:	b089      	sub	sp, #36	@ 0x24
 8012424:	af00      	add	r7, sp, #0
 8012426:	60f8      	str	r0, [r7, #12]
 8012428:	60b9      	str	r1, [r7, #8]
 801242a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801242c:	2302      	movs	r3, #2
 801242e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012430:	68bb      	ldr	r3, [r7, #8]
 8012432:	2b01      	cmp	r3, #1
 8012434:	f240 8109 	bls.w	801264a <put_fat+0x22a>
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	6a1b      	ldr	r3, [r3, #32]
 801243c:	68ba      	ldr	r2, [r7, #8]
 801243e:	429a      	cmp	r2, r3
 8012440:	f080 8103 	bcs.w	801264a <put_fat+0x22a>
		switch (fs->fs_type) {
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	781b      	ldrb	r3, [r3, #0]
 8012448:	2b03      	cmp	r3, #3
 801244a:	f000 80b6 	beq.w	80125ba <put_fat+0x19a>
 801244e:	2b03      	cmp	r3, #3
 8012450:	f300 80fb 	bgt.w	801264a <put_fat+0x22a>
 8012454:	2b01      	cmp	r3, #1
 8012456:	d003      	beq.n	8012460 <put_fat+0x40>
 8012458:	2b02      	cmp	r3, #2
 801245a:	f000 8083 	beq.w	8012564 <put_fat+0x144>
 801245e:	e0f4      	b.n	801264a <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012460:	68bb      	ldr	r3, [r7, #8]
 8012462:	61bb      	str	r3, [r7, #24]
 8012464:	69bb      	ldr	r3, [r7, #24]
 8012466:	085b      	lsrs	r3, r3, #1
 8012468:	69ba      	ldr	r2, [r7, #24]
 801246a:	4413      	add	r3, r2
 801246c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	899b      	ldrh	r3, [r3, #12]
 8012476:	4619      	mov	r1, r3
 8012478:	69bb      	ldr	r3, [r7, #24]
 801247a:	fbb3 f3f1 	udiv	r3, r3, r1
 801247e:	4413      	add	r3, r2
 8012480:	4619      	mov	r1, r3
 8012482:	68f8      	ldr	r0, [r7, #12]
 8012484:	f7ff fe3c 	bl	8012100 <move_window>
 8012488:	4603      	mov	r3, r0
 801248a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801248c:	7ffb      	ldrb	r3, [r7, #31]
 801248e:	2b00      	cmp	r3, #0
 8012490:	f040 80d4 	bne.w	801263c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 801249a:	69bb      	ldr	r3, [r7, #24]
 801249c:	1c5a      	adds	r2, r3, #1
 801249e:	61ba      	str	r2, [r7, #24]
 80124a0:	68fa      	ldr	r2, [r7, #12]
 80124a2:	8992      	ldrh	r2, [r2, #12]
 80124a4:	fbb3 f0f2 	udiv	r0, r3, r2
 80124a8:	fb00 f202 	mul.w	r2, r0, r2
 80124ac:	1a9b      	subs	r3, r3, r2
 80124ae:	440b      	add	r3, r1
 80124b0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80124b2:	68bb      	ldr	r3, [r7, #8]
 80124b4:	f003 0301 	and.w	r3, r3, #1
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d00d      	beq.n	80124d8 <put_fat+0xb8>
 80124bc:	697b      	ldr	r3, [r7, #20]
 80124be:	781b      	ldrb	r3, [r3, #0]
 80124c0:	b25b      	sxtb	r3, r3
 80124c2:	f003 030f 	and.w	r3, r3, #15
 80124c6:	b25a      	sxtb	r2, r3
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	b2db      	uxtb	r3, r3
 80124cc:	011b      	lsls	r3, r3, #4
 80124ce:	b25b      	sxtb	r3, r3
 80124d0:	4313      	orrs	r3, r2
 80124d2:	b25b      	sxtb	r3, r3
 80124d4:	b2db      	uxtb	r3, r3
 80124d6:	e001      	b.n	80124dc <put_fat+0xbc>
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	b2db      	uxtb	r3, r3
 80124dc:	697a      	ldr	r2, [r7, #20]
 80124de:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	2201      	movs	r2, #1
 80124e4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	899b      	ldrh	r3, [r3, #12]
 80124ee:	4619      	mov	r1, r3
 80124f0:	69bb      	ldr	r3, [r7, #24]
 80124f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80124f6:	4413      	add	r3, r2
 80124f8:	4619      	mov	r1, r3
 80124fa:	68f8      	ldr	r0, [r7, #12]
 80124fc:	f7ff fe00 	bl	8012100 <move_window>
 8012500:	4603      	mov	r3, r0
 8012502:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012504:	7ffb      	ldrb	r3, [r7, #31]
 8012506:	2b00      	cmp	r3, #0
 8012508:	f040 809a 	bne.w	8012640 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	899b      	ldrh	r3, [r3, #12]
 8012516:	461a      	mov	r2, r3
 8012518:	69bb      	ldr	r3, [r7, #24]
 801251a:	fbb3 f0f2 	udiv	r0, r3, r2
 801251e:	fb00 f202 	mul.w	r2, r0, r2
 8012522:	1a9b      	subs	r3, r3, r2
 8012524:	440b      	add	r3, r1
 8012526:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012528:	68bb      	ldr	r3, [r7, #8]
 801252a:	f003 0301 	and.w	r3, r3, #1
 801252e:	2b00      	cmp	r3, #0
 8012530:	d003      	beq.n	801253a <put_fat+0x11a>
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	091b      	lsrs	r3, r3, #4
 8012536:	b2db      	uxtb	r3, r3
 8012538:	e00e      	b.n	8012558 <put_fat+0x138>
 801253a:	697b      	ldr	r3, [r7, #20]
 801253c:	781b      	ldrb	r3, [r3, #0]
 801253e:	b25b      	sxtb	r3, r3
 8012540:	f023 030f 	bic.w	r3, r3, #15
 8012544:	b25a      	sxtb	r2, r3
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	0a1b      	lsrs	r3, r3, #8
 801254a:	b25b      	sxtb	r3, r3
 801254c:	f003 030f 	and.w	r3, r3, #15
 8012550:	b25b      	sxtb	r3, r3
 8012552:	4313      	orrs	r3, r2
 8012554:	b25b      	sxtb	r3, r3
 8012556:	b2db      	uxtb	r3, r3
 8012558:	697a      	ldr	r2, [r7, #20]
 801255a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	2201      	movs	r2, #1
 8012560:	70da      	strb	r2, [r3, #3]
			break;
 8012562:	e072      	b.n	801264a <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	899b      	ldrh	r3, [r3, #12]
 801256c:	085b      	lsrs	r3, r3, #1
 801256e:	b29b      	uxth	r3, r3
 8012570:	4619      	mov	r1, r3
 8012572:	68bb      	ldr	r3, [r7, #8]
 8012574:	fbb3 f3f1 	udiv	r3, r3, r1
 8012578:	4413      	add	r3, r2
 801257a:	4619      	mov	r1, r3
 801257c:	68f8      	ldr	r0, [r7, #12]
 801257e:	f7ff fdbf 	bl	8012100 <move_window>
 8012582:	4603      	mov	r3, r0
 8012584:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012586:	7ffb      	ldrb	r3, [r7, #31]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d15b      	bne.n	8012644 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8012592:	68bb      	ldr	r3, [r7, #8]
 8012594:	005b      	lsls	r3, r3, #1
 8012596:	68fa      	ldr	r2, [r7, #12]
 8012598:	8992      	ldrh	r2, [r2, #12]
 801259a:	fbb3 f0f2 	udiv	r0, r3, r2
 801259e:	fb00 f202 	mul.w	r2, r0, r2
 80125a2:	1a9b      	subs	r3, r3, r2
 80125a4:	440b      	add	r3, r1
 80125a6:	687a      	ldr	r2, [r7, #4]
 80125a8:	b292      	uxth	r2, r2
 80125aa:	4611      	mov	r1, r2
 80125ac:	4618      	mov	r0, r3
 80125ae:	f7ff fb32 	bl	8011c16 <st_word>
			fs->wflag = 1;
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	2201      	movs	r2, #1
 80125b6:	70da      	strb	r2, [r3, #3]
			break;
 80125b8:	e047      	b.n	801264a <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	899b      	ldrh	r3, [r3, #12]
 80125c2:	089b      	lsrs	r3, r3, #2
 80125c4:	b29b      	uxth	r3, r3
 80125c6:	4619      	mov	r1, r3
 80125c8:	68bb      	ldr	r3, [r7, #8]
 80125ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80125ce:	4413      	add	r3, r2
 80125d0:	4619      	mov	r1, r3
 80125d2:	68f8      	ldr	r0, [r7, #12]
 80125d4:	f7ff fd94 	bl	8012100 <move_window>
 80125d8:	4603      	mov	r3, r0
 80125da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80125dc:	7ffb      	ldrb	r3, [r7, #31]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d132      	bne.n	8012648 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80125ee:	68bb      	ldr	r3, [r7, #8]
 80125f0:	009b      	lsls	r3, r3, #2
 80125f2:	68fa      	ldr	r2, [r7, #12]
 80125f4:	8992      	ldrh	r2, [r2, #12]
 80125f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80125fa:	fb00 f202 	mul.w	r2, r0, r2
 80125fe:	1a9b      	subs	r3, r3, r2
 8012600:	440b      	add	r3, r1
 8012602:	4618      	mov	r0, r3
 8012604:	f7ff fae4 	bl	8011bd0 <ld_dword>
 8012608:	4603      	mov	r3, r0
 801260a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801260e:	4323      	orrs	r3, r4
 8012610:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8012618:	68bb      	ldr	r3, [r7, #8]
 801261a:	009b      	lsls	r3, r3, #2
 801261c:	68fa      	ldr	r2, [r7, #12]
 801261e:	8992      	ldrh	r2, [r2, #12]
 8012620:	fbb3 f0f2 	udiv	r0, r3, r2
 8012624:	fb00 f202 	mul.w	r2, r0, r2
 8012628:	1a9b      	subs	r3, r3, r2
 801262a:	440b      	add	r3, r1
 801262c:	6879      	ldr	r1, [r7, #4]
 801262e:	4618      	mov	r0, r3
 8012630:	f7ff fb0c 	bl	8011c4c <st_dword>
			fs->wflag = 1;
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	2201      	movs	r2, #1
 8012638:	70da      	strb	r2, [r3, #3]
			break;
 801263a:	e006      	b.n	801264a <put_fat+0x22a>
			if (res != FR_OK) break;
 801263c:	bf00      	nop
 801263e:	e004      	b.n	801264a <put_fat+0x22a>
			if (res != FR_OK) break;
 8012640:	bf00      	nop
 8012642:	e002      	b.n	801264a <put_fat+0x22a>
			if (res != FR_OK) break;
 8012644:	bf00      	nop
 8012646:	e000      	b.n	801264a <put_fat+0x22a>
			if (res != FR_OK) break;
 8012648:	bf00      	nop
		}
	}
	return res;
 801264a:	7ffb      	ldrb	r3, [r7, #31]
}
 801264c:	4618      	mov	r0, r3
 801264e:	3724      	adds	r7, #36	@ 0x24
 8012650:	46bd      	mov	sp, r7
 8012652:	bd90      	pop	{r4, r7, pc}

08012654 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012654:	b580      	push	{r7, lr}
 8012656:	b088      	sub	sp, #32
 8012658:	af00      	add	r7, sp, #0
 801265a:	60f8      	str	r0, [r7, #12]
 801265c:	60b9      	str	r1, [r7, #8]
 801265e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012660:	2300      	movs	r3, #0
 8012662:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801266a:	68bb      	ldr	r3, [r7, #8]
 801266c:	2b01      	cmp	r3, #1
 801266e:	d904      	bls.n	801267a <remove_chain+0x26>
 8012670:	69bb      	ldr	r3, [r7, #24]
 8012672:	6a1b      	ldr	r3, [r3, #32]
 8012674:	68ba      	ldr	r2, [r7, #8]
 8012676:	429a      	cmp	r2, r3
 8012678:	d301      	bcc.n	801267e <remove_chain+0x2a>
 801267a:	2302      	movs	r3, #2
 801267c:	e04b      	b.n	8012716 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d00c      	beq.n	801269e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012684:	f04f 32ff 	mov.w	r2, #4294967295
 8012688:	6879      	ldr	r1, [r7, #4]
 801268a:	69b8      	ldr	r0, [r7, #24]
 801268c:	f7ff fec8 	bl	8012420 <put_fat>
 8012690:	4603      	mov	r3, r0
 8012692:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012694:	7ffb      	ldrb	r3, [r7, #31]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d001      	beq.n	801269e <remove_chain+0x4a>
 801269a:	7ffb      	ldrb	r3, [r7, #31]
 801269c:	e03b      	b.n	8012716 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801269e:	68b9      	ldr	r1, [r7, #8]
 80126a0:	68f8      	ldr	r0, [r7, #12]
 80126a2:	f7ff fdea 	bl	801227a <get_fat>
 80126a6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80126a8:	697b      	ldr	r3, [r7, #20]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d031      	beq.n	8012712 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80126ae:	697b      	ldr	r3, [r7, #20]
 80126b0:	2b01      	cmp	r3, #1
 80126b2:	d101      	bne.n	80126b8 <remove_chain+0x64>
 80126b4:	2302      	movs	r3, #2
 80126b6:	e02e      	b.n	8012716 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80126b8:	697b      	ldr	r3, [r7, #20]
 80126ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126be:	d101      	bne.n	80126c4 <remove_chain+0x70>
 80126c0:	2301      	movs	r3, #1
 80126c2:	e028      	b.n	8012716 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80126c4:	2200      	movs	r2, #0
 80126c6:	68b9      	ldr	r1, [r7, #8]
 80126c8:	69b8      	ldr	r0, [r7, #24]
 80126ca:	f7ff fea9 	bl	8012420 <put_fat>
 80126ce:	4603      	mov	r3, r0
 80126d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80126d2:	7ffb      	ldrb	r3, [r7, #31]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d001      	beq.n	80126dc <remove_chain+0x88>
 80126d8:	7ffb      	ldrb	r3, [r7, #31]
 80126da:	e01c      	b.n	8012716 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80126dc:	69bb      	ldr	r3, [r7, #24]
 80126de:	699a      	ldr	r2, [r3, #24]
 80126e0:	69bb      	ldr	r3, [r7, #24]
 80126e2:	6a1b      	ldr	r3, [r3, #32]
 80126e4:	3b02      	subs	r3, #2
 80126e6:	429a      	cmp	r2, r3
 80126e8:	d20b      	bcs.n	8012702 <remove_chain+0xae>
			fs->free_clst++;
 80126ea:	69bb      	ldr	r3, [r7, #24]
 80126ec:	699b      	ldr	r3, [r3, #24]
 80126ee:	1c5a      	adds	r2, r3, #1
 80126f0:	69bb      	ldr	r3, [r7, #24]
 80126f2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80126f4:	69bb      	ldr	r3, [r7, #24]
 80126f6:	791b      	ldrb	r3, [r3, #4]
 80126f8:	f043 0301 	orr.w	r3, r3, #1
 80126fc:	b2da      	uxtb	r2, r3
 80126fe:	69bb      	ldr	r3, [r7, #24]
 8012700:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8012702:	697b      	ldr	r3, [r7, #20]
 8012704:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8012706:	69bb      	ldr	r3, [r7, #24]
 8012708:	6a1b      	ldr	r3, [r3, #32]
 801270a:	68ba      	ldr	r2, [r7, #8]
 801270c:	429a      	cmp	r2, r3
 801270e:	d3c6      	bcc.n	801269e <remove_chain+0x4a>
 8012710:	e000      	b.n	8012714 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8012712:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8012714:	2300      	movs	r3, #0
}
 8012716:	4618      	mov	r0, r3
 8012718:	3720      	adds	r7, #32
 801271a:	46bd      	mov	sp, r7
 801271c:	bd80      	pop	{r7, pc}

0801271e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801271e:	b580      	push	{r7, lr}
 8012720:	b088      	sub	sp, #32
 8012722:	af00      	add	r7, sp, #0
 8012724:	6078      	str	r0, [r7, #4]
 8012726:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801272e:	683b      	ldr	r3, [r7, #0]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d10d      	bne.n	8012750 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012734:	693b      	ldr	r3, [r7, #16]
 8012736:	695b      	ldr	r3, [r3, #20]
 8012738:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801273a:	69bb      	ldr	r3, [r7, #24]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d004      	beq.n	801274a <create_chain+0x2c>
 8012740:	693b      	ldr	r3, [r7, #16]
 8012742:	6a1b      	ldr	r3, [r3, #32]
 8012744:	69ba      	ldr	r2, [r7, #24]
 8012746:	429a      	cmp	r2, r3
 8012748:	d31b      	bcc.n	8012782 <create_chain+0x64>
 801274a:	2301      	movs	r3, #1
 801274c:	61bb      	str	r3, [r7, #24]
 801274e:	e018      	b.n	8012782 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012750:	6839      	ldr	r1, [r7, #0]
 8012752:	6878      	ldr	r0, [r7, #4]
 8012754:	f7ff fd91 	bl	801227a <get_fat>
 8012758:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	2b01      	cmp	r3, #1
 801275e:	d801      	bhi.n	8012764 <create_chain+0x46>
 8012760:	2301      	movs	r3, #1
 8012762:	e070      	b.n	8012846 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	f1b3 3fff 	cmp.w	r3, #4294967295
 801276a:	d101      	bne.n	8012770 <create_chain+0x52>
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	e06a      	b.n	8012846 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012770:	693b      	ldr	r3, [r7, #16]
 8012772:	6a1b      	ldr	r3, [r3, #32]
 8012774:	68fa      	ldr	r2, [r7, #12]
 8012776:	429a      	cmp	r2, r3
 8012778:	d201      	bcs.n	801277e <create_chain+0x60>
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	e063      	b.n	8012846 <create_chain+0x128>
		scl = clst;
 801277e:	683b      	ldr	r3, [r7, #0]
 8012780:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012782:	69bb      	ldr	r3, [r7, #24]
 8012784:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012786:	69fb      	ldr	r3, [r7, #28]
 8012788:	3301      	adds	r3, #1
 801278a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801278c:	693b      	ldr	r3, [r7, #16]
 801278e:	6a1b      	ldr	r3, [r3, #32]
 8012790:	69fa      	ldr	r2, [r7, #28]
 8012792:	429a      	cmp	r2, r3
 8012794:	d307      	bcc.n	80127a6 <create_chain+0x88>
				ncl = 2;
 8012796:	2302      	movs	r3, #2
 8012798:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801279a:	69fa      	ldr	r2, [r7, #28]
 801279c:	69bb      	ldr	r3, [r7, #24]
 801279e:	429a      	cmp	r2, r3
 80127a0:	d901      	bls.n	80127a6 <create_chain+0x88>
 80127a2:	2300      	movs	r3, #0
 80127a4:	e04f      	b.n	8012846 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80127a6:	69f9      	ldr	r1, [r7, #28]
 80127a8:	6878      	ldr	r0, [r7, #4]
 80127aa:	f7ff fd66 	bl	801227a <get_fat>
 80127ae:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d00e      	beq.n	80127d4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	2b01      	cmp	r3, #1
 80127ba:	d003      	beq.n	80127c4 <create_chain+0xa6>
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127c2:	d101      	bne.n	80127c8 <create_chain+0xaa>
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	e03e      	b.n	8012846 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80127c8:	69fa      	ldr	r2, [r7, #28]
 80127ca:	69bb      	ldr	r3, [r7, #24]
 80127cc:	429a      	cmp	r2, r3
 80127ce:	d1da      	bne.n	8012786 <create_chain+0x68>
 80127d0:	2300      	movs	r3, #0
 80127d2:	e038      	b.n	8012846 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80127d4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80127d6:	f04f 32ff 	mov.w	r2, #4294967295
 80127da:	69f9      	ldr	r1, [r7, #28]
 80127dc:	6938      	ldr	r0, [r7, #16]
 80127de:	f7ff fe1f 	bl	8012420 <put_fat>
 80127e2:	4603      	mov	r3, r0
 80127e4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80127e6:	7dfb      	ldrb	r3, [r7, #23]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d109      	bne.n	8012800 <create_chain+0xe2>
 80127ec:	683b      	ldr	r3, [r7, #0]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d006      	beq.n	8012800 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80127f2:	69fa      	ldr	r2, [r7, #28]
 80127f4:	6839      	ldr	r1, [r7, #0]
 80127f6:	6938      	ldr	r0, [r7, #16]
 80127f8:	f7ff fe12 	bl	8012420 <put_fat>
 80127fc:	4603      	mov	r3, r0
 80127fe:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012800:	7dfb      	ldrb	r3, [r7, #23]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d116      	bne.n	8012834 <create_chain+0x116>
		fs->last_clst = ncl;
 8012806:	693b      	ldr	r3, [r7, #16]
 8012808:	69fa      	ldr	r2, [r7, #28]
 801280a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801280c:	693b      	ldr	r3, [r7, #16]
 801280e:	699a      	ldr	r2, [r3, #24]
 8012810:	693b      	ldr	r3, [r7, #16]
 8012812:	6a1b      	ldr	r3, [r3, #32]
 8012814:	3b02      	subs	r3, #2
 8012816:	429a      	cmp	r2, r3
 8012818:	d804      	bhi.n	8012824 <create_chain+0x106>
 801281a:	693b      	ldr	r3, [r7, #16]
 801281c:	699b      	ldr	r3, [r3, #24]
 801281e:	1e5a      	subs	r2, r3, #1
 8012820:	693b      	ldr	r3, [r7, #16]
 8012822:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8012824:	693b      	ldr	r3, [r7, #16]
 8012826:	791b      	ldrb	r3, [r3, #4]
 8012828:	f043 0301 	orr.w	r3, r3, #1
 801282c:	b2da      	uxtb	r2, r3
 801282e:	693b      	ldr	r3, [r7, #16]
 8012830:	711a      	strb	r2, [r3, #4]
 8012832:	e007      	b.n	8012844 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012834:	7dfb      	ldrb	r3, [r7, #23]
 8012836:	2b01      	cmp	r3, #1
 8012838:	d102      	bne.n	8012840 <create_chain+0x122>
 801283a:	f04f 33ff 	mov.w	r3, #4294967295
 801283e:	e000      	b.n	8012842 <create_chain+0x124>
 8012840:	2301      	movs	r3, #1
 8012842:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012844:	69fb      	ldr	r3, [r7, #28]
}
 8012846:	4618      	mov	r0, r3
 8012848:	3720      	adds	r7, #32
 801284a:	46bd      	mov	sp, r7
 801284c:	bd80      	pop	{r7, pc}

0801284e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801284e:	b480      	push	{r7}
 8012850:	b087      	sub	sp, #28
 8012852:	af00      	add	r7, sp, #0
 8012854:	6078      	str	r0, [r7, #4]
 8012856:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012862:	3304      	adds	r3, #4
 8012864:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	899b      	ldrh	r3, [r3, #12]
 801286a:	461a      	mov	r2, r3
 801286c:	683b      	ldr	r3, [r7, #0]
 801286e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012872:	68fa      	ldr	r2, [r7, #12]
 8012874:	8952      	ldrh	r2, [r2, #10]
 8012876:	fbb3 f3f2 	udiv	r3, r3, r2
 801287a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801287c:	693b      	ldr	r3, [r7, #16]
 801287e:	1d1a      	adds	r2, r3, #4
 8012880:	613a      	str	r2, [r7, #16]
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012886:	68bb      	ldr	r3, [r7, #8]
 8012888:	2b00      	cmp	r3, #0
 801288a:	d101      	bne.n	8012890 <clmt_clust+0x42>
 801288c:	2300      	movs	r3, #0
 801288e:	e010      	b.n	80128b2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8012890:	697a      	ldr	r2, [r7, #20]
 8012892:	68bb      	ldr	r3, [r7, #8]
 8012894:	429a      	cmp	r2, r3
 8012896:	d307      	bcc.n	80128a8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8012898:	697a      	ldr	r2, [r7, #20]
 801289a:	68bb      	ldr	r3, [r7, #8]
 801289c:	1ad3      	subs	r3, r2, r3
 801289e:	617b      	str	r3, [r7, #20]
 80128a0:	693b      	ldr	r3, [r7, #16]
 80128a2:	3304      	adds	r3, #4
 80128a4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80128a6:	e7e9      	b.n	801287c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80128a8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80128aa:	693b      	ldr	r3, [r7, #16]
 80128ac:	681a      	ldr	r2, [r3, #0]
 80128ae:	697b      	ldr	r3, [r7, #20]
 80128b0:	4413      	add	r3, r2
}
 80128b2:	4618      	mov	r0, r3
 80128b4:	371c      	adds	r7, #28
 80128b6:	46bd      	mov	sp, r7
 80128b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128bc:	4770      	bx	lr

080128be <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80128be:	b580      	push	{r7, lr}
 80128c0:	b086      	sub	sp, #24
 80128c2:	af00      	add	r7, sp, #0
 80128c4:	6078      	str	r0, [r7, #4]
 80128c6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80128ce:	683b      	ldr	r3, [r7, #0]
 80128d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80128d4:	d204      	bcs.n	80128e0 <dir_sdi+0x22>
 80128d6:	683b      	ldr	r3, [r7, #0]
 80128d8:	f003 031f 	and.w	r3, r3, #31
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d001      	beq.n	80128e4 <dir_sdi+0x26>
		return FR_INT_ERR;
 80128e0:	2302      	movs	r3, #2
 80128e2:	e071      	b.n	80129c8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	683a      	ldr	r2, [r7, #0]
 80128e8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	689b      	ldr	r3, [r3, #8]
 80128ee:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80128f0:	697b      	ldr	r3, [r7, #20]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d106      	bne.n	8012904 <dir_sdi+0x46>
 80128f6:	693b      	ldr	r3, [r7, #16]
 80128f8:	781b      	ldrb	r3, [r3, #0]
 80128fa:	2b02      	cmp	r3, #2
 80128fc:	d902      	bls.n	8012904 <dir_sdi+0x46>
		clst = fs->dirbase;
 80128fe:	693b      	ldr	r3, [r7, #16]
 8012900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012902:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012904:	697b      	ldr	r3, [r7, #20]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d10c      	bne.n	8012924 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801290a:	683b      	ldr	r3, [r7, #0]
 801290c:	095b      	lsrs	r3, r3, #5
 801290e:	693a      	ldr	r2, [r7, #16]
 8012910:	8912      	ldrh	r2, [r2, #8]
 8012912:	4293      	cmp	r3, r2
 8012914:	d301      	bcc.n	801291a <dir_sdi+0x5c>
 8012916:	2302      	movs	r3, #2
 8012918:	e056      	b.n	80129c8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801291a:	693b      	ldr	r3, [r7, #16]
 801291c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	61da      	str	r2, [r3, #28]
 8012922:	e02d      	b.n	8012980 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012924:	693b      	ldr	r3, [r7, #16]
 8012926:	895b      	ldrh	r3, [r3, #10]
 8012928:	461a      	mov	r2, r3
 801292a:	693b      	ldr	r3, [r7, #16]
 801292c:	899b      	ldrh	r3, [r3, #12]
 801292e:	fb02 f303 	mul.w	r3, r2, r3
 8012932:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012934:	e019      	b.n	801296a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	6979      	ldr	r1, [r7, #20]
 801293a:	4618      	mov	r0, r3
 801293c:	f7ff fc9d 	bl	801227a <get_fat>
 8012940:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012942:	697b      	ldr	r3, [r7, #20]
 8012944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012948:	d101      	bne.n	801294e <dir_sdi+0x90>
 801294a:	2301      	movs	r3, #1
 801294c:	e03c      	b.n	80129c8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801294e:	697b      	ldr	r3, [r7, #20]
 8012950:	2b01      	cmp	r3, #1
 8012952:	d904      	bls.n	801295e <dir_sdi+0xa0>
 8012954:	693b      	ldr	r3, [r7, #16]
 8012956:	6a1b      	ldr	r3, [r3, #32]
 8012958:	697a      	ldr	r2, [r7, #20]
 801295a:	429a      	cmp	r2, r3
 801295c:	d301      	bcc.n	8012962 <dir_sdi+0xa4>
 801295e:	2302      	movs	r3, #2
 8012960:	e032      	b.n	80129c8 <dir_sdi+0x10a>
			ofs -= csz;
 8012962:	683a      	ldr	r2, [r7, #0]
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	1ad3      	subs	r3, r2, r3
 8012968:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801296a:	683a      	ldr	r2, [r7, #0]
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	429a      	cmp	r2, r3
 8012970:	d2e1      	bcs.n	8012936 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8012972:	6979      	ldr	r1, [r7, #20]
 8012974:	6938      	ldr	r0, [r7, #16]
 8012976:	f7ff fc61 	bl	801223c <clust2sect>
 801297a:	4602      	mov	r2, r0
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	697a      	ldr	r2, [r7, #20]
 8012984:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	69db      	ldr	r3, [r3, #28]
 801298a:	2b00      	cmp	r3, #0
 801298c:	d101      	bne.n	8012992 <dir_sdi+0xd4>
 801298e:	2302      	movs	r3, #2
 8012990:	e01a      	b.n	80129c8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	69da      	ldr	r2, [r3, #28]
 8012996:	693b      	ldr	r3, [r7, #16]
 8012998:	899b      	ldrh	r3, [r3, #12]
 801299a:	4619      	mov	r1, r3
 801299c:	683b      	ldr	r3, [r7, #0]
 801299e:	fbb3 f3f1 	udiv	r3, r3, r1
 80129a2:	441a      	add	r2, r3
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80129a8:	693b      	ldr	r3, [r7, #16]
 80129aa:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80129ae:	693b      	ldr	r3, [r7, #16]
 80129b0:	899b      	ldrh	r3, [r3, #12]
 80129b2:	461a      	mov	r2, r3
 80129b4:	683b      	ldr	r3, [r7, #0]
 80129b6:	fbb3 f0f2 	udiv	r0, r3, r2
 80129ba:	fb00 f202 	mul.w	r2, r0, r2
 80129be:	1a9b      	subs	r3, r3, r2
 80129c0:	18ca      	adds	r2, r1, r3
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80129c6:	2300      	movs	r3, #0
}
 80129c8:	4618      	mov	r0, r3
 80129ca:	3718      	adds	r7, #24
 80129cc:	46bd      	mov	sp, r7
 80129ce:	bd80      	pop	{r7, pc}

080129d0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b086      	sub	sp, #24
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	6078      	str	r0, [r7, #4]
 80129d8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	695b      	ldr	r3, [r3, #20]
 80129e4:	3320      	adds	r3, #32
 80129e6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	69db      	ldr	r3, [r3, #28]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d003      	beq.n	80129f8 <dir_next+0x28>
 80129f0:	68bb      	ldr	r3, [r7, #8]
 80129f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80129f6:	d301      	bcc.n	80129fc <dir_next+0x2c>
 80129f8:	2304      	movs	r3, #4
 80129fa:	e0bb      	b.n	8012b74 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	899b      	ldrh	r3, [r3, #12]
 8012a00:	461a      	mov	r2, r3
 8012a02:	68bb      	ldr	r3, [r7, #8]
 8012a04:	fbb3 f1f2 	udiv	r1, r3, r2
 8012a08:	fb01 f202 	mul.w	r2, r1, r2
 8012a0c:	1a9b      	subs	r3, r3, r2
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	f040 809d 	bne.w	8012b4e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	69db      	ldr	r3, [r3, #28]
 8012a18:	1c5a      	adds	r2, r3, #1
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	699b      	ldr	r3, [r3, #24]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d10b      	bne.n	8012a3e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012a26:	68bb      	ldr	r3, [r7, #8]
 8012a28:	095b      	lsrs	r3, r3, #5
 8012a2a:	68fa      	ldr	r2, [r7, #12]
 8012a2c:	8912      	ldrh	r2, [r2, #8]
 8012a2e:	4293      	cmp	r3, r2
 8012a30:	f0c0 808d 	bcc.w	8012b4e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	2200      	movs	r2, #0
 8012a38:	61da      	str	r2, [r3, #28]
 8012a3a:	2304      	movs	r3, #4
 8012a3c:	e09a      	b.n	8012b74 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	899b      	ldrh	r3, [r3, #12]
 8012a42:	461a      	mov	r2, r3
 8012a44:	68bb      	ldr	r3, [r7, #8]
 8012a46:	fbb3 f3f2 	udiv	r3, r3, r2
 8012a4a:	68fa      	ldr	r2, [r7, #12]
 8012a4c:	8952      	ldrh	r2, [r2, #10]
 8012a4e:	3a01      	subs	r2, #1
 8012a50:	4013      	ands	r3, r2
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d17b      	bne.n	8012b4e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012a56:	687a      	ldr	r2, [r7, #4]
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	699b      	ldr	r3, [r3, #24]
 8012a5c:	4619      	mov	r1, r3
 8012a5e:	4610      	mov	r0, r2
 8012a60:	f7ff fc0b 	bl	801227a <get_fat>
 8012a64:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012a66:	697b      	ldr	r3, [r7, #20]
 8012a68:	2b01      	cmp	r3, #1
 8012a6a:	d801      	bhi.n	8012a70 <dir_next+0xa0>
 8012a6c:	2302      	movs	r3, #2
 8012a6e:	e081      	b.n	8012b74 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012a70:	697b      	ldr	r3, [r7, #20]
 8012a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a76:	d101      	bne.n	8012a7c <dir_next+0xac>
 8012a78:	2301      	movs	r3, #1
 8012a7a:	e07b      	b.n	8012b74 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	6a1b      	ldr	r3, [r3, #32]
 8012a80:	697a      	ldr	r2, [r7, #20]
 8012a82:	429a      	cmp	r2, r3
 8012a84:	d359      	bcc.n	8012b3a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012a86:	683b      	ldr	r3, [r7, #0]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d104      	bne.n	8012a96 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	2200      	movs	r2, #0
 8012a90:	61da      	str	r2, [r3, #28]
 8012a92:	2304      	movs	r3, #4
 8012a94:	e06e      	b.n	8012b74 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012a96:	687a      	ldr	r2, [r7, #4]
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	699b      	ldr	r3, [r3, #24]
 8012a9c:	4619      	mov	r1, r3
 8012a9e:	4610      	mov	r0, r2
 8012aa0:	f7ff fe3d 	bl	801271e <create_chain>
 8012aa4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012aa6:	697b      	ldr	r3, [r7, #20]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d101      	bne.n	8012ab0 <dir_next+0xe0>
 8012aac:	2307      	movs	r3, #7
 8012aae:	e061      	b.n	8012b74 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012ab0:	697b      	ldr	r3, [r7, #20]
 8012ab2:	2b01      	cmp	r3, #1
 8012ab4:	d101      	bne.n	8012aba <dir_next+0xea>
 8012ab6:	2302      	movs	r3, #2
 8012ab8:	e05c      	b.n	8012b74 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012aba:	697b      	ldr	r3, [r7, #20]
 8012abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ac0:	d101      	bne.n	8012ac6 <dir_next+0xf6>
 8012ac2:	2301      	movs	r3, #1
 8012ac4:	e056      	b.n	8012b74 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8012ac6:	68f8      	ldr	r0, [r7, #12]
 8012ac8:	f7ff fad6 	bl	8012078 <sync_window>
 8012acc:	4603      	mov	r3, r0
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d001      	beq.n	8012ad6 <dir_next+0x106>
 8012ad2:	2301      	movs	r3, #1
 8012ad4:	e04e      	b.n	8012b74 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	899b      	ldrh	r3, [r3, #12]
 8012ae0:	461a      	mov	r2, r3
 8012ae2:	2100      	movs	r1, #0
 8012ae4:	f7ff f8ff 	bl	8011ce6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012ae8:	2300      	movs	r3, #0
 8012aea:	613b      	str	r3, [r7, #16]
 8012aec:	6979      	ldr	r1, [r7, #20]
 8012aee:	68f8      	ldr	r0, [r7, #12]
 8012af0:	f7ff fba4 	bl	801223c <clust2sect>
 8012af4:	4602      	mov	r2, r0
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	639a      	str	r2, [r3, #56]	@ 0x38
 8012afa:	e012      	b.n	8012b22 <dir_next+0x152>
						fs->wflag = 1;
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	2201      	movs	r2, #1
 8012b00:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8012b02:	68f8      	ldr	r0, [r7, #12]
 8012b04:	f7ff fab8 	bl	8012078 <sync_window>
 8012b08:	4603      	mov	r3, r0
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d001      	beq.n	8012b12 <dir_next+0x142>
 8012b0e:	2301      	movs	r3, #1
 8012b10:	e030      	b.n	8012b74 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012b12:	693b      	ldr	r3, [r7, #16]
 8012b14:	3301      	adds	r3, #1
 8012b16:	613b      	str	r3, [r7, #16]
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b1c:	1c5a      	adds	r2, r3, #1
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	639a      	str	r2, [r3, #56]	@ 0x38
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	895b      	ldrh	r3, [r3, #10]
 8012b26:	461a      	mov	r2, r3
 8012b28:	693b      	ldr	r3, [r7, #16]
 8012b2a:	4293      	cmp	r3, r2
 8012b2c:	d3e6      	bcc.n	8012afc <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012b32:	693b      	ldr	r3, [r7, #16]
 8012b34:	1ad2      	subs	r2, r2, r3
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	697a      	ldr	r2, [r7, #20]
 8012b3e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8012b40:	6979      	ldr	r1, [r7, #20]
 8012b42:	68f8      	ldr	r0, [r7, #12]
 8012b44:	f7ff fb7a 	bl	801223c <clust2sect>
 8012b48:	4602      	mov	r2, r0
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	68ba      	ldr	r2, [r7, #8]
 8012b52:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	899b      	ldrh	r3, [r3, #12]
 8012b5e:	461a      	mov	r2, r3
 8012b60:	68bb      	ldr	r3, [r7, #8]
 8012b62:	fbb3 f0f2 	udiv	r0, r3, r2
 8012b66:	fb00 f202 	mul.w	r2, r0, r2
 8012b6a:	1a9b      	subs	r3, r3, r2
 8012b6c:	18ca      	adds	r2, r1, r3
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012b72:	2300      	movs	r3, #0
}
 8012b74:	4618      	mov	r0, r3
 8012b76:	3718      	adds	r7, #24
 8012b78:	46bd      	mov	sp, r7
 8012b7a:	bd80      	pop	{r7, pc}

08012b7c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012b7c:	b580      	push	{r7, lr}
 8012b7e:	b086      	sub	sp, #24
 8012b80:	af00      	add	r7, sp, #0
 8012b82:	6078      	str	r0, [r7, #4]
 8012b84:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012b8c:	2100      	movs	r1, #0
 8012b8e:	6878      	ldr	r0, [r7, #4]
 8012b90:	f7ff fe95 	bl	80128be <dir_sdi>
 8012b94:	4603      	mov	r3, r0
 8012b96:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012b98:	7dfb      	ldrb	r3, [r7, #23]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d12b      	bne.n	8012bf6 <dir_alloc+0x7a>
		n = 0;
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	69db      	ldr	r3, [r3, #28]
 8012ba6:	4619      	mov	r1, r3
 8012ba8:	68f8      	ldr	r0, [r7, #12]
 8012baa:	f7ff faa9 	bl	8012100 <move_window>
 8012bae:	4603      	mov	r3, r0
 8012bb0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012bb2:	7dfb      	ldrb	r3, [r7, #23]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d11d      	bne.n	8012bf4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	6a1b      	ldr	r3, [r3, #32]
 8012bbc:	781b      	ldrb	r3, [r3, #0]
 8012bbe:	2be5      	cmp	r3, #229	@ 0xe5
 8012bc0:	d004      	beq.n	8012bcc <dir_alloc+0x50>
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	6a1b      	ldr	r3, [r3, #32]
 8012bc6:	781b      	ldrb	r3, [r3, #0]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d107      	bne.n	8012bdc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012bcc:	693b      	ldr	r3, [r7, #16]
 8012bce:	3301      	adds	r3, #1
 8012bd0:	613b      	str	r3, [r7, #16]
 8012bd2:	693a      	ldr	r2, [r7, #16]
 8012bd4:	683b      	ldr	r3, [r7, #0]
 8012bd6:	429a      	cmp	r2, r3
 8012bd8:	d102      	bne.n	8012be0 <dir_alloc+0x64>
 8012bda:	e00c      	b.n	8012bf6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012bdc:	2300      	movs	r3, #0
 8012bde:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012be0:	2101      	movs	r1, #1
 8012be2:	6878      	ldr	r0, [r7, #4]
 8012be4:	f7ff fef4 	bl	80129d0 <dir_next>
 8012be8:	4603      	mov	r3, r0
 8012bea:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012bec:	7dfb      	ldrb	r3, [r7, #23]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d0d7      	beq.n	8012ba2 <dir_alloc+0x26>
 8012bf2:	e000      	b.n	8012bf6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012bf4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012bf6:	7dfb      	ldrb	r3, [r7, #23]
 8012bf8:	2b04      	cmp	r3, #4
 8012bfa:	d101      	bne.n	8012c00 <dir_alloc+0x84>
 8012bfc:	2307      	movs	r3, #7
 8012bfe:	75fb      	strb	r3, [r7, #23]
	return res;
 8012c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c02:	4618      	mov	r0, r3
 8012c04:	3718      	adds	r7, #24
 8012c06:	46bd      	mov	sp, r7
 8012c08:	bd80      	pop	{r7, pc}

08012c0a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8012c0a:	b580      	push	{r7, lr}
 8012c0c:	b084      	sub	sp, #16
 8012c0e:	af00      	add	r7, sp, #0
 8012c10:	6078      	str	r0, [r7, #4]
 8012c12:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012c14:	683b      	ldr	r3, [r7, #0]
 8012c16:	331a      	adds	r3, #26
 8012c18:	4618      	mov	r0, r3
 8012c1a:	f7fe ffc1 	bl	8011ba0 <ld_word>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	781b      	ldrb	r3, [r3, #0]
 8012c26:	2b03      	cmp	r3, #3
 8012c28:	d109      	bne.n	8012c3e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012c2a:	683b      	ldr	r3, [r7, #0]
 8012c2c:	3314      	adds	r3, #20
 8012c2e:	4618      	mov	r0, r3
 8012c30:	f7fe ffb6 	bl	8011ba0 <ld_word>
 8012c34:	4603      	mov	r3, r0
 8012c36:	041b      	lsls	r3, r3, #16
 8012c38:	68fa      	ldr	r2, [r7, #12]
 8012c3a:	4313      	orrs	r3, r2
 8012c3c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012c3e:	68fb      	ldr	r3, [r7, #12]
}
 8012c40:	4618      	mov	r0, r3
 8012c42:	3710      	adds	r7, #16
 8012c44:	46bd      	mov	sp, r7
 8012c46:	bd80      	pop	{r7, pc}

08012c48 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	b084      	sub	sp, #16
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	60f8      	str	r0, [r7, #12]
 8012c50:	60b9      	str	r1, [r7, #8]
 8012c52:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012c54:	68bb      	ldr	r3, [r7, #8]
 8012c56:	331a      	adds	r3, #26
 8012c58:	687a      	ldr	r2, [r7, #4]
 8012c5a:	b292      	uxth	r2, r2
 8012c5c:	4611      	mov	r1, r2
 8012c5e:	4618      	mov	r0, r3
 8012c60:	f7fe ffd9 	bl	8011c16 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	781b      	ldrb	r3, [r3, #0]
 8012c68:	2b03      	cmp	r3, #3
 8012c6a:	d109      	bne.n	8012c80 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012c6c:	68bb      	ldr	r3, [r7, #8]
 8012c6e:	f103 0214 	add.w	r2, r3, #20
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	0c1b      	lsrs	r3, r3, #16
 8012c76:	b29b      	uxth	r3, r3
 8012c78:	4619      	mov	r1, r3
 8012c7a:	4610      	mov	r0, r2
 8012c7c:	f7fe ffcb 	bl	8011c16 <st_word>
	}
}
 8012c80:	bf00      	nop
 8012c82:	3710      	adds	r7, #16
 8012c84:	46bd      	mov	sp, r7
 8012c86:	bd80      	pop	{r7, pc}

08012c88 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8012c88:	b590      	push	{r4, r7, lr}
 8012c8a:	b087      	sub	sp, #28
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	6078      	str	r0, [r7, #4]
 8012c90:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8012c92:	683b      	ldr	r3, [r7, #0]
 8012c94:	331a      	adds	r3, #26
 8012c96:	4618      	mov	r0, r3
 8012c98:	f7fe ff82 	bl	8011ba0 <ld_word>
 8012c9c:	4603      	mov	r3, r0
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d001      	beq.n	8012ca6 <cmp_lfn+0x1e>
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	e059      	b.n	8012d5a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	781b      	ldrb	r3, [r3, #0]
 8012caa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012cae:	1e5a      	subs	r2, r3, #1
 8012cb0:	4613      	mov	r3, r2
 8012cb2:	005b      	lsls	r3, r3, #1
 8012cb4:	4413      	add	r3, r2
 8012cb6:	009b      	lsls	r3, r3, #2
 8012cb8:	4413      	add	r3, r2
 8012cba:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012cbc:	2301      	movs	r3, #1
 8012cbe:	81fb      	strh	r3, [r7, #14]
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	613b      	str	r3, [r7, #16]
 8012cc4:	e033      	b.n	8012d2e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8012cc6:	4a27      	ldr	r2, [pc, #156]	@ (8012d64 <cmp_lfn+0xdc>)
 8012cc8:	693b      	ldr	r3, [r7, #16]
 8012cca:	4413      	add	r3, r2
 8012ccc:	781b      	ldrb	r3, [r3, #0]
 8012cce:	461a      	mov	r2, r3
 8012cd0:	683b      	ldr	r3, [r7, #0]
 8012cd2:	4413      	add	r3, r2
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	f7fe ff63 	bl	8011ba0 <ld_word>
 8012cda:	4603      	mov	r3, r0
 8012cdc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8012cde:	89fb      	ldrh	r3, [r7, #14]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d01a      	beq.n	8012d1a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8012ce4:	697b      	ldr	r3, [r7, #20]
 8012ce6:	2bfe      	cmp	r3, #254	@ 0xfe
 8012ce8:	d812      	bhi.n	8012d10 <cmp_lfn+0x88>
 8012cea:	89bb      	ldrh	r3, [r7, #12]
 8012cec:	4618      	mov	r0, r3
 8012cee:	f002 ff73 	bl	8015bd8 <ff_wtoupper>
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	461c      	mov	r4, r3
 8012cf6:	697b      	ldr	r3, [r7, #20]
 8012cf8:	1c5a      	adds	r2, r3, #1
 8012cfa:	617a      	str	r2, [r7, #20]
 8012cfc:	005b      	lsls	r3, r3, #1
 8012cfe:	687a      	ldr	r2, [r7, #4]
 8012d00:	4413      	add	r3, r2
 8012d02:	881b      	ldrh	r3, [r3, #0]
 8012d04:	4618      	mov	r0, r3
 8012d06:	f002 ff67 	bl	8015bd8 <ff_wtoupper>
 8012d0a:	4603      	mov	r3, r0
 8012d0c:	429c      	cmp	r4, r3
 8012d0e:	d001      	beq.n	8012d14 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8012d10:	2300      	movs	r3, #0
 8012d12:	e022      	b.n	8012d5a <cmp_lfn+0xd2>
			}
			wc = uc;
 8012d14:	89bb      	ldrh	r3, [r7, #12]
 8012d16:	81fb      	strh	r3, [r7, #14]
 8012d18:	e006      	b.n	8012d28 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8012d1a:	89bb      	ldrh	r3, [r7, #12]
 8012d1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012d20:	4293      	cmp	r3, r2
 8012d22:	d001      	beq.n	8012d28 <cmp_lfn+0xa0>
 8012d24:	2300      	movs	r3, #0
 8012d26:	e018      	b.n	8012d5a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012d28:	693b      	ldr	r3, [r7, #16]
 8012d2a:	3301      	adds	r3, #1
 8012d2c:	613b      	str	r3, [r7, #16]
 8012d2e:	693b      	ldr	r3, [r7, #16]
 8012d30:	2b0c      	cmp	r3, #12
 8012d32:	d9c8      	bls.n	8012cc6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8012d34:	683b      	ldr	r3, [r7, #0]
 8012d36:	781b      	ldrb	r3, [r3, #0]
 8012d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d00b      	beq.n	8012d58 <cmp_lfn+0xd0>
 8012d40:	89fb      	ldrh	r3, [r7, #14]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d008      	beq.n	8012d58 <cmp_lfn+0xd0>
 8012d46:	697b      	ldr	r3, [r7, #20]
 8012d48:	005b      	lsls	r3, r3, #1
 8012d4a:	687a      	ldr	r2, [r7, #4]
 8012d4c:	4413      	add	r3, r2
 8012d4e:	881b      	ldrh	r3, [r3, #0]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d001      	beq.n	8012d58 <cmp_lfn+0xd0>
 8012d54:	2300      	movs	r3, #0
 8012d56:	e000      	b.n	8012d5a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8012d58:	2301      	movs	r3, #1
}
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	371c      	adds	r7, #28
 8012d5e:	46bd      	mov	sp, r7
 8012d60:	bd90      	pop	{r4, r7, pc}
 8012d62:	bf00      	nop
 8012d64:	08018d74 	.word	0x08018d74

08012d68 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	b086      	sub	sp, #24
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	6078      	str	r0, [r7, #4]
 8012d70:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8012d72:	683b      	ldr	r3, [r7, #0]
 8012d74:	331a      	adds	r3, #26
 8012d76:	4618      	mov	r0, r3
 8012d78:	f7fe ff12 	bl	8011ba0 <ld_word>
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d001      	beq.n	8012d86 <pick_lfn+0x1e>
 8012d82:	2300      	movs	r3, #0
 8012d84:	e04d      	b.n	8012e22 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8012d86:	683b      	ldr	r3, [r7, #0]
 8012d88:	781b      	ldrb	r3, [r3, #0]
 8012d8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012d8e:	1e5a      	subs	r2, r3, #1
 8012d90:	4613      	mov	r3, r2
 8012d92:	005b      	lsls	r3, r3, #1
 8012d94:	4413      	add	r3, r2
 8012d96:	009b      	lsls	r3, r3, #2
 8012d98:	4413      	add	r3, r2
 8012d9a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012d9c:	2301      	movs	r3, #1
 8012d9e:	81fb      	strh	r3, [r7, #14]
 8012da0:	2300      	movs	r3, #0
 8012da2:	613b      	str	r3, [r7, #16]
 8012da4:	e028      	b.n	8012df8 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8012da6:	4a21      	ldr	r2, [pc, #132]	@ (8012e2c <pick_lfn+0xc4>)
 8012da8:	693b      	ldr	r3, [r7, #16]
 8012daa:	4413      	add	r3, r2
 8012dac:	781b      	ldrb	r3, [r3, #0]
 8012dae:	461a      	mov	r2, r3
 8012db0:	683b      	ldr	r3, [r7, #0]
 8012db2:	4413      	add	r3, r2
 8012db4:	4618      	mov	r0, r3
 8012db6:	f7fe fef3 	bl	8011ba0 <ld_word>
 8012dba:	4603      	mov	r3, r0
 8012dbc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8012dbe:	89fb      	ldrh	r3, [r7, #14]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d00f      	beq.n	8012de4 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8012dc4:	697b      	ldr	r3, [r7, #20]
 8012dc6:	2bfe      	cmp	r3, #254	@ 0xfe
 8012dc8:	d901      	bls.n	8012dce <pick_lfn+0x66>
 8012dca:	2300      	movs	r3, #0
 8012dcc:	e029      	b.n	8012e22 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8012dce:	89bb      	ldrh	r3, [r7, #12]
 8012dd0:	81fb      	strh	r3, [r7, #14]
 8012dd2:	697b      	ldr	r3, [r7, #20]
 8012dd4:	1c5a      	adds	r2, r3, #1
 8012dd6:	617a      	str	r2, [r7, #20]
 8012dd8:	005b      	lsls	r3, r3, #1
 8012dda:	687a      	ldr	r2, [r7, #4]
 8012ddc:	4413      	add	r3, r2
 8012dde:	89fa      	ldrh	r2, [r7, #14]
 8012de0:	801a      	strh	r2, [r3, #0]
 8012de2:	e006      	b.n	8012df2 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8012de4:	89bb      	ldrh	r3, [r7, #12]
 8012de6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012dea:	4293      	cmp	r3, r2
 8012dec:	d001      	beq.n	8012df2 <pick_lfn+0x8a>
 8012dee:	2300      	movs	r3, #0
 8012df0:	e017      	b.n	8012e22 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012df2:	693b      	ldr	r3, [r7, #16]
 8012df4:	3301      	adds	r3, #1
 8012df6:	613b      	str	r3, [r7, #16]
 8012df8:	693b      	ldr	r3, [r7, #16]
 8012dfa:	2b0c      	cmp	r3, #12
 8012dfc:	d9d3      	bls.n	8012da6 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8012dfe:	683b      	ldr	r3, [r7, #0]
 8012e00:	781b      	ldrb	r3, [r3, #0]
 8012e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d00a      	beq.n	8012e20 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8012e0a:	697b      	ldr	r3, [r7, #20]
 8012e0c:	2bfe      	cmp	r3, #254	@ 0xfe
 8012e0e:	d901      	bls.n	8012e14 <pick_lfn+0xac>
 8012e10:	2300      	movs	r3, #0
 8012e12:	e006      	b.n	8012e22 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8012e14:	697b      	ldr	r3, [r7, #20]
 8012e16:	005b      	lsls	r3, r3, #1
 8012e18:	687a      	ldr	r2, [r7, #4]
 8012e1a:	4413      	add	r3, r2
 8012e1c:	2200      	movs	r2, #0
 8012e1e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8012e20:	2301      	movs	r3, #1
}
 8012e22:	4618      	mov	r0, r3
 8012e24:	3718      	adds	r7, #24
 8012e26:	46bd      	mov	sp, r7
 8012e28:	bd80      	pop	{r7, pc}
 8012e2a:	bf00      	nop
 8012e2c:	08018d74 	.word	0x08018d74

08012e30 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8012e30:	b580      	push	{r7, lr}
 8012e32:	b088      	sub	sp, #32
 8012e34:	af00      	add	r7, sp, #0
 8012e36:	60f8      	str	r0, [r7, #12]
 8012e38:	60b9      	str	r1, [r7, #8]
 8012e3a:	4611      	mov	r1, r2
 8012e3c:	461a      	mov	r2, r3
 8012e3e:	460b      	mov	r3, r1
 8012e40:	71fb      	strb	r3, [r7, #7]
 8012e42:	4613      	mov	r3, r2
 8012e44:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8012e46:	68bb      	ldr	r3, [r7, #8]
 8012e48:	330d      	adds	r3, #13
 8012e4a:	79ba      	ldrb	r2, [r7, #6]
 8012e4c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8012e4e:	68bb      	ldr	r3, [r7, #8]
 8012e50:	330b      	adds	r3, #11
 8012e52:	220f      	movs	r2, #15
 8012e54:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8012e56:	68bb      	ldr	r3, [r7, #8]
 8012e58:	330c      	adds	r3, #12
 8012e5a:	2200      	movs	r2, #0
 8012e5c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8012e5e:	68bb      	ldr	r3, [r7, #8]
 8012e60:	331a      	adds	r3, #26
 8012e62:	2100      	movs	r1, #0
 8012e64:	4618      	mov	r0, r3
 8012e66:	f7fe fed6 	bl	8011c16 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8012e6a:	79fb      	ldrb	r3, [r7, #7]
 8012e6c:	1e5a      	subs	r2, r3, #1
 8012e6e:	4613      	mov	r3, r2
 8012e70:	005b      	lsls	r3, r3, #1
 8012e72:	4413      	add	r3, r2
 8012e74:	009b      	lsls	r3, r3, #2
 8012e76:	4413      	add	r3, r2
 8012e78:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	82fb      	strh	r3, [r7, #22]
 8012e7e:	2300      	movs	r3, #0
 8012e80:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012e82:	8afb      	ldrh	r3, [r7, #22]
 8012e84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012e88:	4293      	cmp	r3, r2
 8012e8a:	d007      	beq.n	8012e9c <put_lfn+0x6c>
 8012e8c:	69fb      	ldr	r3, [r7, #28]
 8012e8e:	1c5a      	adds	r2, r3, #1
 8012e90:	61fa      	str	r2, [r7, #28]
 8012e92:	005b      	lsls	r3, r3, #1
 8012e94:	68fa      	ldr	r2, [r7, #12]
 8012e96:	4413      	add	r3, r2
 8012e98:	881b      	ldrh	r3, [r3, #0]
 8012e9a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8012e9c:	4a17      	ldr	r2, [pc, #92]	@ (8012efc <put_lfn+0xcc>)
 8012e9e:	69bb      	ldr	r3, [r7, #24]
 8012ea0:	4413      	add	r3, r2
 8012ea2:	781b      	ldrb	r3, [r3, #0]
 8012ea4:	461a      	mov	r2, r3
 8012ea6:	68bb      	ldr	r3, [r7, #8]
 8012ea8:	4413      	add	r3, r2
 8012eaa:	8afa      	ldrh	r2, [r7, #22]
 8012eac:	4611      	mov	r1, r2
 8012eae:	4618      	mov	r0, r3
 8012eb0:	f7fe feb1 	bl	8011c16 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8012eb4:	8afb      	ldrh	r3, [r7, #22]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d102      	bne.n	8012ec0 <put_lfn+0x90>
 8012eba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012ebe:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8012ec0:	69bb      	ldr	r3, [r7, #24]
 8012ec2:	3301      	adds	r3, #1
 8012ec4:	61bb      	str	r3, [r7, #24]
 8012ec6:	69bb      	ldr	r3, [r7, #24]
 8012ec8:	2b0c      	cmp	r3, #12
 8012eca:	d9da      	bls.n	8012e82 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8012ecc:	8afb      	ldrh	r3, [r7, #22]
 8012ece:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012ed2:	4293      	cmp	r3, r2
 8012ed4:	d006      	beq.n	8012ee4 <put_lfn+0xb4>
 8012ed6:	69fb      	ldr	r3, [r7, #28]
 8012ed8:	005b      	lsls	r3, r3, #1
 8012eda:	68fa      	ldr	r2, [r7, #12]
 8012edc:	4413      	add	r3, r2
 8012ede:	881b      	ldrh	r3, [r3, #0]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d103      	bne.n	8012eec <put_lfn+0xbc>
 8012ee4:	79fb      	ldrb	r3, [r7, #7]
 8012ee6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012eea:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8012eec:	68bb      	ldr	r3, [r7, #8]
 8012eee:	79fa      	ldrb	r2, [r7, #7]
 8012ef0:	701a      	strb	r2, [r3, #0]
}
 8012ef2:	bf00      	nop
 8012ef4:	3720      	adds	r7, #32
 8012ef6:	46bd      	mov	sp, r7
 8012ef8:	bd80      	pop	{r7, pc}
 8012efa:	bf00      	nop
 8012efc:	08018d74 	.word	0x08018d74

08012f00 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8012f00:	b580      	push	{r7, lr}
 8012f02:	b08c      	sub	sp, #48	@ 0x30
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	60f8      	str	r0, [r7, #12]
 8012f08:	60b9      	str	r1, [r7, #8]
 8012f0a:	607a      	str	r2, [r7, #4]
 8012f0c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8012f0e:	220b      	movs	r2, #11
 8012f10:	68b9      	ldr	r1, [r7, #8]
 8012f12:	68f8      	ldr	r0, [r7, #12]
 8012f14:	f7fe fec6 	bl	8011ca4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8012f18:	683b      	ldr	r3, [r7, #0]
 8012f1a:	2b05      	cmp	r3, #5
 8012f1c:	d929      	bls.n	8012f72 <gen_numname+0x72>
		sr = seq;
 8012f1e:	683b      	ldr	r3, [r7, #0]
 8012f20:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8012f22:	e020      	b.n	8012f66 <gen_numname+0x66>
			wc = *lfn++;
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	1c9a      	adds	r2, r3, #2
 8012f28:	607a      	str	r2, [r7, #4]
 8012f2a:	881b      	ldrh	r3, [r3, #0]
 8012f2c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8012f2e:	2300      	movs	r3, #0
 8012f30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012f32:	e015      	b.n	8012f60 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8012f34:	69fb      	ldr	r3, [r7, #28]
 8012f36:	005a      	lsls	r2, r3, #1
 8012f38:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012f3a:	f003 0301 	and.w	r3, r3, #1
 8012f3e:	4413      	add	r3, r2
 8012f40:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8012f42:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012f44:	085b      	lsrs	r3, r3, #1
 8012f46:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8012f48:	69fb      	ldr	r3, [r7, #28]
 8012f4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d003      	beq.n	8012f5a <gen_numname+0x5a>
 8012f52:	69fa      	ldr	r2, [r7, #28]
 8012f54:	4b30      	ldr	r3, [pc, #192]	@ (8013018 <gen_numname+0x118>)
 8012f56:	4053      	eors	r3, r2
 8012f58:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8012f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f5c:	3301      	adds	r3, #1
 8012f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f62:	2b0f      	cmp	r3, #15
 8012f64:	d9e6      	bls.n	8012f34 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	881b      	ldrh	r3, [r3, #0]
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d1da      	bne.n	8012f24 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8012f6e:	69fb      	ldr	r3, [r7, #28]
 8012f70:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8012f72:	2307      	movs	r3, #7
 8012f74:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8012f76:	683b      	ldr	r3, [r7, #0]
 8012f78:	b2db      	uxtb	r3, r3
 8012f7a:	f003 030f 	and.w	r3, r3, #15
 8012f7e:	b2db      	uxtb	r3, r3
 8012f80:	3330      	adds	r3, #48	@ 0x30
 8012f82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8012f86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012f8a:	2b39      	cmp	r3, #57	@ 0x39
 8012f8c:	d904      	bls.n	8012f98 <gen_numname+0x98>
 8012f8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012f92:	3307      	adds	r3, #7
 8012f94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8012f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f9a:	1e5a      	subs	r2, r3, #1
 8012f9c:	62ba      	str	r2, [r7, #40]	@ 0x28
 8012f9e:	3330      	adds	r3, #48	@ 0x30
 8012fa0:	443b      	add	r3, r7
 8012fa2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8012fa6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8012faa:	683b      	ldr	r3, [r7, #0]
 8012fac:	091b      	lsrs	r3, r3, #4
 8012fae:	603b      	str	r3, [r7, #0]
	} while (seq);
 8012fb0:	683b      	ldr	r3, [r7, #0]
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d1df      	bne.n	8012f76 <gen_numname+0x76>
	ns[i] = '~';
 8012fb6:	f107 0214 	add.w	r2, r7, #20
 8012fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fbc:	4413      	add	r3, r2
 8012fbe:	227e      	movs	r2, #126	@ 0x7e
 8012fc0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8012fc6:	e002      	b.n	8012fce <gen_numname+0xce>
 8012fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fca:	3301      	adds	r3, #1
 8012fcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8012fce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fd2:	429a      	cmp	r2, r3
 8012fd4:	d205      	bcs.n	8012fe2 <gen_numname+0xe2>
 8012fd6:	68fa      	ldr	r2, [r7, #12]
 8012fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fda:	4413      	add	r3, r2
 8012fdc:	781b      	ldrb	r3, [r3, #0]
 8012fde:	2b20      	cmp	r3, #32
 8012fe0:	d1f2      	bne.n	8012fc8 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fe4:	2b07      	cmp	r3, #7
 8012fe6:	d807      	bhi.n	8012ff8 <gen_numname+0xf8>
 8012fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fea:	1c5a      	adds	r2, r3, #1
 8012fec:	62ba      	str	r2, [r7, #40]	@ 0x28
 8012fee:	3330      	adds	r3, #48	@ 0x30
 8012ff0:	443b      	add	r3, r7
 8012ff2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8012ff6:	e000      	b.n	8012ffa <gen_numname+0xfa>
 8012ff8:	2120      	movs	r1, #32
 8012ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ffc:	1c5a      	adds	r2, r3, #1
 8012ffe:	627a      	str	r2, [r7, #36]	@ 0x24
 8013000:	68fa      	ldr	r2, [r7, #12]
 8013002:	4413      	add	r3, r2
 8013004:	460a      	mov	r2, r1
 8013006:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8013008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801300a:	2b07      	cmp	r3, #7
 801300c:	d9e9      	bls.n	8012fe2 <gen_numname+0xe2>
}
 801300e:	bf00      	nop
 8013010:	bf00      	nop
 8013012:	3730      	adds	r7, #48	@ 0x30
 8013014:	46bd      	mov	sp, r7
 8013016:	bd80      	pop	{r7, pc}
 8013018:	00011021 	.word	0x00011021

0801301c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801301c:	b480      	push	{r7}
 801301e:	b085      	sub	sp, #20
 8013020:	af00      	add	r7, sp, #0
 8013022:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8013024:	2300      	movs	r3, #0
 8013026:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8013028:	230b      	movs	r3, #11
 801302a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801302c:	7bfb      	ldrb	r3, [r7, #15]
 801302e:	b2da      	uxtb	r2, r3
 8013030:	0852      	lsrs	r2, r2, #1
 8013032:	01db      	lsls	r3, r3, #7
 8013034:	4313      	orrs	r3, r2
 8013036:	b2da      	uxtb	r2, r3
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	1c59      	adds	r1, r3, #1
 801303c:	6079      	str	r1, [r7, #4]
 801303e:	781b      	ldrb	r3, [r3, #0]
 8013040:	4413      	add	r3, r2
 8013042:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8013044:	68bb      	ldr	r3, [r7, #8]
 8013046:	3b01      	subs	r3, #1
 8013048:	60bb      	str	r3, [r7, #8]
 801304a:	68bb      	ldr	r3, [r7, #8]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d1ed      	bne.n	801302c <sum_sfn+0x10>
	return sum;
 8013050:	7bfb      	ldrb	r3, [r7, #15]
}
 8013052:	4618      	mov	r0, r3
 8013054:	3714      	adds	r7, #20
 8013056:	46bd      	mov	sp, r7
 8013058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801305c:	4770      	bx	lr

0801305e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801305e:	b580      	push	{r7, lr}
 8013060:	b086      	sub	sp, #24
 8013062:	af00      	add	r7, sp, #0
 8013064:	6078      	str	r0, [r7, #4]
 8013066:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8013068:	2304      	movs	r3, #4
 801306a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8013072:	23ff      	movs	r3, #255	@ 0xff
 8013074:	757b      	strb	r3, [r7, #21]
 8013076:	23ff      	movs	r3, #255	@ 0xff
 8013078:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801307a:	e081      	b.n	8013180 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	69db      	ldr	r3, [r3, #28]
 8013080:	4619      	mov	r1, r3
 8013082:	6938      	ldr	r0, [r7, #16]
 8013084:	f7ff f83c 	bl	8012100 <move_window>
 8013088:	4603      	mov	r3, r0
 801308a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801308c:	7dfb      	ldrb	r3, [r7, #23]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d17c      	bne.n	801318c <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	6a1b      	ldr	r3, [r3, #32]
 8013096:	781b      	ldrb	r3, [r3, #0]
 8013098:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801309a:	7dbb      	ldrb	r3, [r7, #22]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d102      	bne.n	80130a6 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80130a0:	2304      	movs	r3, #4
 80130a2:	75fb      	strb	r3, [r7, #23]
 80130a4:	e077      	b.n	8013196 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	6a1b      	ldr	r3, [r3, #32]
 80130aa:	330b      	adds	r3, #11
 80130ac:	781b      	ldrb	r3, [r3, #0]
 80130ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80130b2:	73fb      	strb	r3, [r7, #15]
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	7bfa      	ldrb	r2, [r7, #15]
 80130b8:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80130ba:	7dbb      	ldrb	r3, [r7, #22]
 80130bc:	2be5      	cmp	r3, #229	@ 0xe5
 80130be:	d00e      	beq.n	80130de <dir_read+0x80>
 80130c0:	7dbb      	ldrb	r3, [r7, #22]
 80130c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80130c4:	d00b      	beq.n	80130de <dir_read+0x80>
 80130c6:	7bfb      	ldrb	r3, [r7, #15]
 80130c8:	f023 0320 	bic.w	r3, r3, #32
 80130cc:	2b08      	cmp	r3, #8
 80130ce:	bf0c      	ite	eq
 80130d0:	2301      	moveq	r3, #1
 80130d2:	2300      	movne	r3, #0
 80130d4:	b2db      	uxtb	r3, r3
 80130d6:	461a      	mov	r2, r3
 80130d8:	683b      	ldr	r3, [r7, #0]
 80130da:	4293      	cmp	r3, r2
 80130dc:	d002      	beq.n	80130e4 <dir_read+0x86>
				ord = 0xFF;
 80130de:	23ff      	movs	r3, #255	@ 0xff
 80130e0:	757b      	strb	r3, [r7, #21]
 80130e2:	e044      	b.n	801316e <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 80130e4:	7bfb      	ldrb	r3, [r7, #15]
 80130e6:	2b0f      	cmp	r3, #15
 80130e8:	d12f      	bne.n	801314a <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80130ea:	7dbb      	ldrb	r3, [r7, #22]
 80130ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d00d      	beq.n	8013110 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	6a1b      	ldr	r3, [r3, #32]
 80130f8:	7b5b      	ldrb	r3, [r3, #13]
 80130fa:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80130fc:	7dbb      	ldrb	r3, [r7, #22]
 80130fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013102:	75bb      	strb	r3, [r7, #22]
 8013104:	7dbb      	ldrb	r3, [r7, #22]
 8013106:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	695a      	ldr	r2, [r3, #20]
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8013110:	7dba      	ldrb	r2, [r7, #22]
 8013112:	7d7b      	ldrb	r3, [r7, #21]
 8013114:	429a      	cmp	r2, r3
 8013116:	d115      	bne.n	8013144 <dir_read+0xe6>
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	6a1b      	ldr	r3, [r3, #32]
 801311c:	330d      	adds	r3, #13
 801311e:	781b      	ldrb	r3, [r3, #0]
 8013120:	7d3a      	ldrb	r2, [r7, #20]
 8013122:	429a      	cmp	r2, r3
 8013124:	d10e      	bne.n	8013144 <dir_read+0xe6>
 8013126:	693b      	ldr	r3, [r7, #16]
 8013128:	691a      	ldr	r2, [r3, #16]
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	6a1b      	ldr	r3, [r3, #32]
 801312e:	4619      	mov	r1, r3
 8013130:	4610      	mov	r0, r2
 8013132:	f7ff fe19 	bl	8012d68 <pick_lfn>
 8013136:	4603      	mov	r3, r0
 8013138:	2b00      	cmp	r3, #0
 801313a:	d003      	beq.n	8013144 <dir_read+0xe6>
 801313c:	7d7b      	ldrb	r3, [r7, #21]
 801313e:	3b01      	subs	r3, #1
 8013140:	b2db      	uxtb	r3, r3
 8013142:	e000      	b.n	8013146 <dir_read+0xe8>
 8013144:	23ff      	movs	r3, #255	@ 0xff
 8013146:	757b      	strb	r3, [r7, #21]
 8013148:	e011      	b.n	801316e <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801314a:	7d7b      	ldrb	r3, [r7, #21]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d109      	bne.n	8013164 <dir_read+0x106>
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	6a1b      	ldr	r3, [r3, #32]
 8013154:	4618      	mov	r0, r3
 8013156:	f7ff ff61 	bl	801301c <sum_sfn>
 801315a:	4603      	mov	r3, r0
 801315c:	461a      	mov	r2, r3
 801315e:	7d3b      	ldrb	r3, [r7, #20]
 8013160:	4293      	cmp	r3, r2
 8013162:	d015      	beq.n	8013190 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	f04f 32ff 	mov.w	r2, #4294967295
 801316a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 801316c:	e010      	b.n	8013190 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801316e:	2100      	movs	r1, #0
 8013170:	6878      	ldr	r0, [r7, #4]
 8013172:	f7ff fc2d 	bl	80129d0 <dir_next>
 8013176:	4603      	mov	r3, r0
 8013178:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801317a:	7dfb      	ldrb	r3, [r7, #23]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d109      	bne.n	8013194 <dir_read+0x136>
	while (dp->sect) {
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	69db      	ldr	r3, [r3, #28]
 8013184:	2b00      	cmp	r3, #0
 8013186:	f47f af79 	bne.w	801307c <dir_read+0x1e>
 801318a:	e004      	b.n	8013196 <dir_read+0x138>
		if (res != FR_OK) break;
 801318c:	bf00      	nop
 801318e:	e002      	b.n	8013196 <dir_read+0x138>
					break;
 8013190:	bf00      	nop
 8013192:	e000      	b.n	8013196 <dir_read+0x138>
		if (res != FR_OK) break;
 8013194:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8013196:	7dfb      	ldrb	r3, [r7, #23]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d002      	beq.n	80131a2 <dir_read+0x144>
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	2200      	movs	r2, #0
 80131a0:	61da      	str	r2, [r3, #28]
	return res;
 80131a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80131a4:	4618      	mov	r0, r3
 80131a6:	3718      	adds	r7, #24
 80131a8:	46bd      	mov	sp, r7
 80131aa:	bd80      	pop	{r7, pc}

080131ac <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80131ac:	b580      	push	{r7, lr}
 80131ae:	b086      	sub	sp, #24
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80131ba:	2100      	movs	r1, #0
 80131bc:	6878      	ldr	r0, [r7, #4]
 80131be:	f7ff fb7e 	bl	80128be <dir_sdi>
 80131c2:	4603      	mov	r3, r0
 80131c4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80131c6:	7dfb      	ldrb	r3, [r7, #23]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d001      	beq.n	80131d0 <dir_find+0x24>
 80131cc:	7dfb      	ldrb	r3, [r7, #23]
 80131ce:	e0a9      	b.n	8013324 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80131d0:	23ff      	movs	r3, #255	@ 0xff
 80131d2:	753b      	strb	r3, [r7, #20]
 80131d4:	7d3b      	ldrb	r3, [r7, #20]
 80131d6:	757b      	strb	r3, [r7, #21]
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	f04f 32ff 	mov.w	r2, #4294967295
 80131de:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	69db      	ldr	r3, [r3, #28]
 80131e4:	4619      	mov	r1, r3
 80131e6:	6938      	ldr	r0, [r7, #16]
 80131e8:	f7fe ff8a 	bl	8012100 <move_window>
 80131ec:	4603      	mov	r3, r0
 80131ee:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80131f0:	7dfb      	ldrb	r3, [r7, #23]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	f040 8090 	bne.w	8013318 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	6a1b      	ldr	r3, [r3, #32]
 80131fc:	781b      	ldrb	r3, [r3, #0]
 80131fe:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8013200:	7dbb      	ldrb	r3, [r7, #22]
 8013202:	2b00      	cmp	r3, #0
 8013204:	d102      	bne.n	801320c <dir_find+0x60>
 8013206:	2304      	movs	r3, #4
 8013208:	75fb      	strb	r3, [r7, #23]
 801320a:	e08a      	b.n	8013322 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	6a1b      	ldr	r3, [r3, #32]
 8013210:	330b      	adds	r3, #11
 8013212:	781b      	ldrb	r3, [r3, #0]
 8013214:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013218:	73fb      	strb	r3, [r7, #15]
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	7bfa      	ldrb	r2, [r7, #15]
 801321e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8013220:	7dbb      	ldrb	r3, [r7, #22]
 8013222:	2be5      	cmp	r3, #229	@ 0xe5
 8013224:	d007      	beq.n	8013236 <dir_find+0x8a>
 8013226:	7bfb      	ldrb	r3, [r7, #15]
 8013228:	f003 0308 	and.w	r3, r3, #8
 801322c:	2b00      	cmp	r3, #0
 801322e:	d009      	beq.n	8013244 <dir_find+0x98>
 8013230:	7bfb      	ldrb	r3, [r7, #15]
 8013232:	2b0f      	cmp	r3, #15
 8013234:	d006      	beq.n	8013244 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8013236:	23ff      	movs	r3, #255	@ 0xff
 8013238:	757b      	strb	r3, [r7, #21]
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	f04f 32ff 	mov.w	r2, #4294967295
 8013240:	631a      	str	r2, [r3, #48]	@ 0x30
 8013242:	e05e      	b.n	8013302 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8013244:	7bfb      	ldrb	r3, [r7, #15]
 8013246:	2b0f      	cmp	r3, #15
 8013248:	d136      	bne.n	80132b8 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013254:	2b00      	cmp	r3, #0
 8013256:	d154      	bne.n	8013302 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8013258:	7dbb      	ldrb	r3, [r7, #22]
 801325a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801325e:	2b00      	cmp	r3, #0
 8013260:	d00d      	beq.n	801327e <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	6a1b      	ldr	r3, [r3, #32]
 8013266:	7b5b      	ldrb	r3, [r3, #13]
 8013268:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801326a:	7dbb      	ldrb	r3, [r7, #22]
 801326c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013270:	75bb      	strb	r3, [r7, #22]
 8013272:	7dbb      	ldrb	r3, [r7, #22]
 8013274:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	695a      	ldr	r2, [r3, #20]
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801327e:	7dba      	ldrb	r2, [r7, #22]
 8013280:	7d7b      	ldrb	r3, [r7, #21]
 8013282:	429a      	cmp	r2, r3
 8013284:	d115      	bne.n	80132b2 <dir_find+0x106>
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	6a1b      	ldr	r3, [r3, #32]
 801328a:	330d      	adds	r3, #13
 801328c:	781b      	ldrb	r3, [r3, #0]
 801328e:	7d3a      	ldrb	r2, [r7, #20]
 8013290:	429a      	cmp	r2, r3
 8013292:	d10e      	bne.n	80132b2 <dir_find+0x106>
 8013294:	693b      	ldr	r3, [r7, #16]
 8013296:	691a      	ldr	r2, [r3, #16]
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	6a1b      	ldr	r3, [r3, #32]
 801329c:	4619      	mov	r1, r3
 801329e:	4610      	mov	r0, r2
 80132a0:	f7ff fcf2 	bl	8012c88 <cmp_lfn>
 80132a4:	4603      	mov	r3, r0
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d003      	beq.n	80132b2 <dir_find+0x106>
 80132aa:	7d7b      	ldrb	r3, [r7, #21]
 80132ac:	3b01      	subs	r3, #1
 80132ae:	b2db      	uxtb	r3, r3
 80132b0:	e000      	b.n	80132b4 <dir_find+0x108>
 80132b2:	23ff      	movs	r3, #255	@ 0xff
 80132b4:	757b      	strb	r3, [r7, #21]
 80132b6:	e024      	b.n	8013302 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80132b8:	7d7b      	ldrb	r3, [r7, #21]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d109      	bne.n	80132d2 <dir_find+0x126>
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	6a1b      	ldr	r3, [r3, #32]
 80132c2:	4618      	mov	r0, r3
 80132c4:	f7ff feaa 	bl	801301c <sum_sfn>
 80132c8:	4603      	mov	r3, r0
 80132ca:	461a      	mov	r2, r3
 80132cc:	7d3b      	ldrb	r3, [r7, #20]
 80132ce:	4293      	cmp	r3, r2
 80132d0:	d024      	beq.n	801331c <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80132d8:	f003 0301 	and.w	r3, r3, #1
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d10a      	bne.n	80132f6 <dir_find+0x14a>
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	6a18      	ldr	r0, [r3, #32]
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	3324      	adds	r3, #36	@ 0x24
 80132e8:	220b      	movs	r2, #11
 80132ea:	4619      	mov	r1, r3
 80132ec:	f7fe fd16 	bl	8011d1c <mem_cmp>
 80132f0:	4603      	mov	r3, r0
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d014      	beq.n	8013320 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80132f6:	23ff      	movs	r3, #255	@ 0xff
 80132f8:	757b      	strb	r3, [r7, #21]
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	f04f 32ff 	mov.w	r2, #4294967295
 8013300:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8013302:	2100      	movs	r1, #0
 8013304:	6878      	ldr	r0, [r7, #4]
 8013306:	f7ff fb63 	bl	80129d0 <dir_next>
 801330a:	4603      	mov	r3, r0
 801330c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801330e:	7dfb      	ldrb	r3, [r7, #23]
 8013310:	2b00      	cmp	r3, #0
 8013312:	f43f af65 	beq.w	80131e0 <dir_find+0x34>
 8013316:	e004      	b.n	8013322 <dir_find+0x176>
		if (res != FR_OK) break;
 8013318:	bf00      	nop
 801331a:	e002      	b.n	8013322 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801331c:	bf00      	nop
 801331e:	e000      	b.n	8013322 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8013320:	bf00      	nop

	return res;
 8013322:	7dfb      	ldrb	r3, [r7, #23]
}
 8013324:	4618      	mov	r0, r3
 8013326:	3718      	adds	r7, #24
 8013328:	46bd      	mov	sp, r7
 801332a:	bd80      	pop	{r7, pc}

0801332c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801332c:	b580      	push	{r7, lr}
 801332e:	b08c      	sub	sp, #48	@ 0x30
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013340:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8013344:	2b00      	cmp	r3, #0
 8013346:	d001      	beq.n	801334c <dir_register+0x20>
 8013348:	2306      	movs	r3, #6
 801334a:	e0e0      	b.n	801350e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801334c:	2300      	movs	r3, #0
 801334e:	627b      	str	r3, [r7, #36]	@ 0x24
 8013350:	e002      	b.n	8013358 <dir_register+0x2c>
 8013352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013354:	3301      	adds	r3, #1
 8013356:	627b      	str	r3, [r7, #36]	@ 0x24
 8013358:	69fb      	ldr	r3, [r7, #28]
 801335a:	691a      	ldr	r2, [r3, #16]
 801335c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801335e:	005b      	lsls	r3, r3, #1
 8013360:	4413      	add	r3, r2
 8013362:	881b      	ldrh	r3, [r3, #0]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d1f4      	bne.n	8013352 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801336e:	f107 030c 	add.w	r3, r7, #12
 8013372:	220c      	movs	r2, #12
 8013374:	4618      	mov	r0, r3
 8013376:	f7fe fc95 	bl	8011ca4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801337a:	7dfb      	ldrb	r3, [r7, #23]
 801337c:	f003 0301 	and.w	r3, r3, #1
 8013380:	2b00      	cmp	r3, #0
 8013382:	d032      	beq.n	80133ea <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	2240      	movs	r2, #64	@ 0x40
 8013388:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 801338c:	2301      	movs	r3, #1
 801338e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013390:	e016      	b.n	80133c0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8013398:	69fb      	ldr	r3, [r7, #28]
 801339a:	691a      	ldr	r2, [r3, #16]
 801339c:	f107 010c 	add.w	r1, r7, #12
 80133a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133a2:	f7ff fdad 	bl	8012f00 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80133a6:	6878      	ldr	r0, [r7, #4]
 80133a8:	f7ff ff00 	bl	80131ac <dir_find>
 80133ac:	4603      	mov	r3, r0
 80133ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 80133b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d106      	bne.n	80133c8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80133ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133bc:	3301      	adds	r3, #1
 80133be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80133c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133c2:	2b63      	cmp	r3, #99	@ 0x63
 80133c4:	d9e5      	bls.n	8013392 <dir_register+0x66>
 80133c6:	e000      	b.n	80133ca <dir_register+0x9e>
			if (res != FR_OK) break;
 80133c8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80133ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133cc:	2b64      	cmp	r3, #100	@ 0x64
 80133ce:	d101      	bne.n	80133d4 <dir_register+0xa8>
 80133d0:	2307      	movs	r3, #7
 80133d2:	e09c      	b.n	801350e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80133d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80133d8:	2b04      	cmp	r3, #4
 80133da:	d002      	beq.n	80133e2 <dir_register+0xb6>
 80133dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80133e0:	e095      	b.n	801350e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80133e2:	7dfa      	ldrb	r2, [r7, #23]
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80133ea:	7dfb      	ldrb	r3, [r7, #23]
 80133ec:	f003 0302 	and.w	r3, r3, #2
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d007      	beq.n	8013404 <dir_register+0xd8>
 80133f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133f6:	330c      	adds	r3, #12
 80133f8:	4a47      	ldr	r2, [pc, #284]	@ (8013518 <dir_register+0x1ec>)
 80133fa:	fba2 2303 	umull	r2, r3, r2, r3
 80133fe:	089b      	lsrs	r3, r3, #2
 8013400:	3301      	adds	r3, #1
 8013402:	e000      	b.n	8013406 <dir_register+0xda>
 8013404:	2301      	movs	r3, #1
 8013406:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8013408:	6a39      	ldr	r1, [r7, #32]
 801340a:	6878      	ldr	r0, [r7, #4]
 801340c:	f7ff fbb6 	bl	8012b7c <dir_alloc>
 8013410:	4603      	mov	r3, r0
 8013412:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8013416:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801341a:	2b00      	cmp	r3, #0
 801341c:	d148      	bne.n	80134b0 <dir_register+0x184>
 801341e:	6a3b      	ldr	r3, [r7, #32]
 8013420:	3b01      	subs	r3, #1
 8013422:	623b      	str	r3, [r7, #32]
 8013424:	6a3b      	ldr	r3, [r7, #32]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d042      	beq.n	80134b0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	695a      	ldr	r2, [r3, #20]
 801342e:	6a3b      	ldr	r3, [r7, #32]
 8013430:	015b      	lsls	r3, r3, #5
 8013432:	1ad3      	subs	r3, r2, r3
 8013434:	4619      	mov	r1, r3
 8013436:	6878      	ldr	r0, [r7, #4]
 8013438:	f7ff fa41 	bl	80128be <dir_sdi>
 801343c:	4603      	mov	r3, r0
 801343e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8013442:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013446:	2b00      	cmp	r3, #0
 8013448:	d132      	bne.n	80134b0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	3324      	adds	r3, #36	@ 0x24
 801344e:	4618      	mov	r0, r3
 8013450:	f7ff fde4 	bl	801301c <sum_sfn>
 8013454:	4603      	mov	r3, r0
 8013456:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	69db      	ldr	r3, [r3, #28]
 801345c:	4619      	mov	r1, r3
 801345e:	69f8      	ldr	r0, [r7, #28]
 8013460:	f7fe fe4e 	bl	8012100 <move_window>
 8013464:	4603      	mov	r3, r0
 8013466:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 801346a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801346e:	2b00      	cmp	r3, #0
 8013470:	d11d      	bne.n	80134ae <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8013472:	69fb      	ldr	r3, [r7, #28]
 8013474:	6918      	ldr	r0, [r3, #16]
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	6a19      	ldr	r1, [r3, #32]
 801347a:	6a3b      	ldr	r3, [r7, #32]
 801347c:	b2da      	uxtb	r2, r3
 801347e:	7efb      	ldrb	r3, [r7, #27]
 8013480:	f7ff fcd6 	bl	8012e30 <put_lfn>
				fs->wflag = 1;
 8013484:	69fb      	ldr	r3, [r7, #28]
 8013486:	2201      	movs	r2, #1
 8013488:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801348a:	2100      	movs	r1, #0
 801348c:	6878      	ldr	r0, [r7, #4]
 801348e:	f7ff fa9f 	bl	80129d0 <dir_next>
 8013492:	4603      	mov	r3, r0
 8013494:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8013498:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801349c:	2b00      	cmp	r3, #0
 801349e:	d107      	bne.n	80134b0 <dir_register+0x184>
 80134a0:	6a3b      	ldr	r3, [r7, #32]
 80134a2:	3b01      	subs	r3, #1
 80134a4:	623b      	str	r3, [r7, #32]
 80134a6:	6a3b      	ldr	r3, [r7, #32]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d1d5      	bne.n	8013458 <dir_register+0x12c>
 80134ac:	e000      	b.n	80134b0 <dir_register+0x184>
				if (res != FR_OK) break;
 80134ae:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80134b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d128      	bne.n	801350a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	69db      	ldr	r3, [r3, #28]
 80134bc:	4619      	mov	r1, r3
 80134be:	69f8      	ldr	r0, [r7, #28]
 80134c0:	f7fe fe1e 	bl	8012100 <move_window>
 80134c4:	4603      	mov	r3, r0
 80134c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80134ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d11b      	bne.n	801350a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	6a1b      	ldr	r3, [r3, #32]
 80134d6:	2220      	movs	r2, #32
 80134d8:	2100      	movs	r1, #0
 80134da:	4618      	mov	r0, r3
 80134dc:	f7fe fc03 	bl	8011ce6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	6a18      	ldr	r0, [r3, #32]
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	3324      	adds	r3, #36	@ 0x24
 80134e8:	220b      	movs	r2, #11
 80134ea:	4619      	mov	r1, r3
 80134ec:	f7fe fbda 	bl	8011ca4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	6a1b      	ldr	r3, [r3, #32]
 80134fa:	330c      	adds	r3, #12
 80134fc:	f002 0218 	and.w	r2, r2, #24
 8013500:	b2d2      	uxtb	r2, r2
 8013502:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8013504:	69fb      	ldr	r3, [r7, #28]
 8013506:	2201      	movs	r2, #1
 8013508:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801350a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801350e:	4618      	mov	r0, r3
 8013510:	3730      	adds	r7, #48	@ 0x30
 8013512:	46bd      	mov	sp, r7
 8013514:	bd80      	pop	{r7, pc}
 8013516:	bf00      	nop
 8013518:	4ec4ec4f 	.word	0x4ec4ec4f

0801351c <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 801351c:	b580      	push	{r7, lr}
 801351e:	b086      	sub	sp, #24
 8013520:	af00      	add	r7, sp, #0
 8013522:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	695b      	ldr	r3, [r3, #20]
 801352e:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013538:	d007      	beq.n	801354a <dir_remove+0x2e>
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801353e:	4619      	mov	r1, r3
 8013540:	6878      	ldr	r0, [r7, #4]
 8013542:	f7ff f9bc 	bl	80128be <dir_sdi>
 8013546:	4603      	mov	r3, r0
 8013548:	e000      	b.n	801354c <dir_remove+0x30>
 801354a:	2300      	movs	r3, #0
 801354c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801354e:	7dfb      	ldrb	r3, [r7, #23]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d128      	bne.n	80135a6 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	69db      	ldr	r3, [r3, #28]
 8013558:	4619      	mov	r1, r3
 801355a:	6938      	ldr	r0, [r7, #16]
 801355c:	f7fe fdd0 	bl	8012100 <move_window>
 8013560:	4603      	mov	r3, r0
 8013562:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013564:	7dfb      	ldrb	r3, [r7, #23]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d115      	bne.n	8013596 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	6a1b      	ldr	r3, [r3, #32]
 801356e:	22e5      	movs	r2, #229	@ 0xe5
 8013570:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 8013572:	693b      	ldr	r3, [r7, #16]
 8013574:	2201      	movs	r2, #1
 8013576:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	695b      	ldr	r3, [r3, #20]
 801357c:	68fa      	ldr	r2, [r7, #12]
 801357e:	429a      	cmp	r2, r3
 8013580:	d90b      	bls.n	801359a <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 8013582:	2100      	movs	r1, #0
 8013584:	6878      	ldr	r0, [r7, #4]
 8013586:	f7ff fa23 	bl	80129d0 <dir_next>
 801358a:	4603      	mov	r3, r0
 801358c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 801358e:	7dfb      	ldrb	r3, [r7, #23]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d0df      	beq.n	8013554 <dir_remove+0x38>
 8013594:	e002      	b.n	801359c <dir_remove+0x80>
			if (res != FR_OK) break;
 8013596:	bf00      	nop
 8013598:	e000      	b.n	801359c <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801359a:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 801359c:	7dfb      	ldrb	r3, [r7, #23]
 801359e:	2b04      	cmp	r3, #4
 80135a0:	d101      	bne.n	80135a6 <dir_remove+0x8a>
 80135a2:	2302      	movs	r3, #2
 80135a4:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 80135a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80135a8:	4618      	mov	r0, r3
 80135aa:	3718      	adds	r7, #24
 80135ac:	46bd      	mov	sp, r7
 80135ae:	bd80      	pop	{r7, pc}

080135b0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80135b0:	b580      	push	{r7, lr}
 80135b2:	b08a      	sub	sp, #40	@ 0x28
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	6078      	str	r0, [r7, #4]
 80135b8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80135ba:	683b      	ldr	r3, [r7, #0]
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	613b      	str	r3, [r7, #16]
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	691b      	ldr	r3, [r3, #16]
 80135c6:	60fb      	str	r3, [r7, #12]
 80135c8:	2300      	movs	r3, #0
 80135ca:	617b      	str	r3, [r7, #20]
 80135cc:	697b      	ldr	r3, [r7, #20]
 80135ce:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80135d0:	69bb      	ldr	r3, [r7, #24]
 80135d2:	1c5a      	adds	r2, r3, #1
 80135d4:	61ba      	str	r2, [r7, #24]
 80135d6:	693a      	ldr	r2, [r7, #16]
 80135d8:	4413      	add	r3, r2
 80135da:	781b      	ldrb	r3, [r3, #0]
 80135dc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80135de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80135e0:	2b1f      	cmp	r3, #31
 80135e2:	d940      	bls.n	8013666 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80135e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80135e6:	2b2f      	cmp	r3, #47	@ 0x2f
 80135e8:	d006      	beq.n	80135f8 <create_name+0x48>
 80135ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80135ec:	2b5c      	cmp	r3, #92	@ 0x5c
 80135ee:	d110      	bne.n	8013612 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80135f0:	e002      	b.n	80135f8 <create_name+0x48>
 80135f2:	69bb      	ldr	r3, [r7, #24]
 80135f4:	3301      	adds	r3, #1
 80135f6:	61bb      	str	r3, [r7, #24]
 80135f8:	693a      	ldr	r2, [r7, #16]
 80135fa:	69bb      	ldr	r3, [r7, #24]
 80135fc:	4413      	add	r3, r2
 80135fe:	781b      	ldrb	r3, [r3, #0]
 8013600:	2b2f      	cmp	r3, #47	@ 0x2f
 8013602:	d0f6      	beq.n	80135f2 <create_name+0x42>
 8013604:	693a      	ldr	r2, [r7, #16]
 8013606:	69bb      	ldr	r3, [r7, #24]
 8013608:	4413      	add	r3, r2
 801360a:	781b      	ldrb	r3, [r3, #0]
 801360c:	2b5c      	cmp	r3, #92	@ 0x5c
 801360e:	d0f0      	beq.n	80135f2 <create_name+0x42>
			break;
 8013610:	e02a      	b.n	8013668 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8013612:	697b      	ldr	r3, [r7, #20]
 8013614:	2bfe      	cmp	r3, #254	@ 0xfe
 8013616:	d901      	bls.n	801361c <create_name+0x6c>
 8013618:	2306      	movs	r3, #6
 801361a:	e1ca      	b.n	80139b2 <create_name+0x402>
#if !_LFN_UNICODE
		w &= 0xFF;
 801361c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801361e:	b2db      	uxtb	r3, r3
 8013620:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8013622:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013624:	2101      	movs	r1, #1
 8013626:	4618      	mov	r0, r3
 8013628:	f002 fa9a 	bl	8015b60 <ff_convert>
 801362c:	4603      	mov	r3, r0
 801362e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8013630:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013632:	2b00      	cmp	r3, #0
 8013634:	d101      	bne.n	801363a <create_name+0x8a>
 8013636:	2306      	movs	r3, #6
 8013638:	e1bb      	b.n	80139b2 <create_name+0x402>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801363a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801363c:	2b7f      	cmp	r3, #127	@ 0x7f
 801363e:	d809      	bhi.n	8013654 <create_name+0xa4>
 8013640:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013642:	4619      	mov	r1, r3
 8013644:	489e      	ldr	r0, [pc, #632]	@ (80138c0 <create_name+0x310>)
 8013646:	f7fe fb90 	bl	8011d6a <chk_chr>
 801364a:	4603      	mov	r3, r0
 801364c:	2b00      	cmp	r3, #0
 801364e:	d001      	beq.n	8013654 <create_name+0xa4>
 8013650:	2306      	movs	r3, #6
 8013652:	e1ae      	b.n	80139b2 <create_name+0x402>
		lfn[di++] = w;					/* Store the Unicode character */
 8013654:	697b      	ldr	r3, [r7, #20]
 8013656:	1c5a      	adds	r2, r3, #1
 8013658:	617a      	str	r2, [r7, #20]
 801365a:	005b      	lsls	r3, r3, #1
 801365c:	68fa      	ldr	r2, [r7, #12]
 801365e:	4413      	add	r3, r2
 8013660:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013662:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8013664:	e7b4      	b.n	80135d0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8013666:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8013668:	693a      	ldr	r2, [r7, #16]
 801366a:	69bb      	ldr	r3, [r7, #24]
 801366c:	441a      	add	r2, r3
 801366e:	683b      	ldr	r3, [r7, #0]
 8013670:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8013672:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013674:	2b1f      	cmp	r3, #31
 8013676:	d801      	bhi.n	801367c <create_name+0xcc>
 8013678:	2304      	movs	r3, #4
 801367a:	e000      	b.n	801367e <create_name+0xce>
 801367c:	2300      	movs	r3, #0
 801367e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 8013682:	697b      	ldr	r3, [r7, #20]
 8013684:	2b01      	cmp	r3, #1
 8013686:	d109      	bne.n	801369c <create_name+0xec>
 8013688:	697a      	ldr	r2, [r7, #20]
 801368a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801368e:	4413      	add	r3, r2
 8013690:	005b      	lsls	r3, r3, #1
 8013692:	68fa      	ldr	r2, [r7, #12]
 8013694:	4413      	add	r3, r2
 8013696:	881b      	ldrh	r3, [r3, #0]
 8013698:	2b2e      	cmp	r3, #46	@ 0x2e
 801369a:	d015      	beq.n	80136c8 <create_name+0x118>
 801369c:	697b      	ldr	r3, [r7, #20]
 801369e:	2b02      	cmp	r3, #2
 80136a0:	d14d      	bne.n	801373e <create_name+0x18e>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 80136a2:	697a      	ldr	r2, [r7, #20]
 80136a4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80136a8:	4413      	add	r3, r2
 80136aa:	005b      	lsls	r3, r3, #1
 80136ac:	68fa      	ldr	r2, [r7, #12]
 80136ae:	4413      	add	r3, r2
 80136b0:	881b      	ldrh	r3, [r3, #0]
 80136b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80136b4:	d143      	bne.n	801373e <create_name+0x18e>
 80136b6:	697a      	ldr	r2, [r7, #20]
 80136b8:	4b82      	ldr	r3, [pc, #520]	@ (80138c4 <create_name+0x314>)
 80136ba:	4413      	add	r3, r2
 80136bc:	005b      	lsls	r3, r3, #1
 80136be:	68fa      	ldr	r2, [r7, #12]
 80136c0:	4413      	add	r3, r2
 80136c2:	881b      	ldrh	r3, [r3, #0]
 80136c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80136c6:	d13a      	bne.n	801373e <create_name+0x18e>
		lfn[di] = 0;
 80136c8:	697b      	ldr	r3, [r7, #20]
 80136ca:	005b      	lsls	r3, r3, #1
 80136cc:	68fa      	ldr	r2, [r7, #12]
 80136ce:	4413      	add	r3, r2
 80136d0:	2200      	movs	r2, #0
 80136d2:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 80136d4:	2300      	movs	r3, #0
 80136d6:	623b      	str	r3, [r7, #32]
 80136d8:	e00f      	b.n	80136fa <create_name+0x14a>
			dp->fn[i] = (i < di) ? '.' : ' ';
 80136da:	6a3a      	ldr	r2, [r7, #32]
 80136dc:	697b      	ldr	r3, [r7, #20]
 80136de:	429a      	cmp	r2, r3
 80136e0:	d201      	bcs.n	80136e6 <create_name+0x136>
 80136e2:	212e      	movs	r1, #46	@ 0x2e
 80136e4:	e000      	b.n	80136e8 <create_name+0x138>
 80136e6:	2120      	movs	r1, #32
 80136e8:	687a      	ldr	r2, [r7, #4]
 80136ea:	6a3b      	ldr	r3, [r7, #32]
 80136ec:	4413      	add	r3, r2
 80136ee:	3324      	adds	r3, #36	@ 0x24
 80136f0:	460a      	mov	r2, r1
 80136f2:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 80136f4:	6a3b      	ldr	r3, [r7, #32]
 80136f6:	3301      	adds	r3, #1
 80136f8:	623b      	str	r3, [r7, #32]
 80136fa:	6a3b      	ldr	r3, [r7, #32]
 80136fc:	2b0a      	cmp	r3, #10
 80136fe:	d9ec      	bls.n	80136da <create_name+0x12a>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8013700:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013704:	f043 0320 	orr.w	r3, r3, #32
 8013708:	b2d9      	uxtb	r1, r3
 801370a:	687a      	ldr	r2, [r7, #4]
 801370c:	6a3b      	ldr	r3, [r7, #32]
 801370e:	4413      	add	r3, r2
 8013710:	3324      	adds	r3, #36	@ 0x24
 8013712:	460a      	mov	r2, r1
 8013714:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8013716:	2300      	movs	r3, #0
 8013718:	e14b      	b.n	80139b2 <create_name+0x402>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 801371a:	697a      	ldr	r2, [r7, #20]
 801371c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013720:	4413      	add	r3, r2
 8013722:	005b      	lsls	r3, r3, #1
 8013724:	68fa      	ldr	r2, [r7, #12]
 8013726:	4413      	add	r3, r2
 8013728:	881b      	ldrh	r3, [r3, #0]
 801372a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 801372c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801372e:	2b20      	cmp	r3, #32
 8013730:	d002      	beq.n	8013738 <create_name+0x188>
 8013732:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013734:	2b2e      	cmp	r3, #46	@ 0x2e
 8013736:	d106      	bne.n	8013746 <create_name+0x196>
		di--;
 8013738:	697b      	ldr	r3, [r7, #20]
 801373a:	3b01      	subs	r3, #1
 801373c:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801373e:	697b      	ldr	r3, [r7, #20]
 8013740:	2b00      	cmp	r3, #0
 8013742:	d1ea      	bne.n	801371a <create_name+0x16a>
 8013744:	e000      	b.n	8013748 <create_name+0x198>
		if (w != ' ' && w != '.') break;
 8013746:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8013748:	697b      	ldr	r3, [r7, #20]
 801374a:	005b      	lsls	r3, r3, #1
 801374c:	68fa      	ldr	r2, [r7, #12]
 801374e:	4413      	add	r3, r2
 8013750:	2200      	movs	r2, #0
 8013752:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8013754:	697b      	ldr	r3, [r7, #20]
 8013756:	2b00      	cmp	r3, #0
 8013758:	d101      	bne.n	801375e <create_name+0x1ae>
 801375a:	2306      	movs	r3, #6
 801375c:	e129      	b.n	80139b2 <create_name+0x402>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	3324      	adds	r3, #36	@ 0x24
 8013762:	220b      	movs	r2, #11
 8013764:	2120      	movs	r1, #32
 8013766:	4618      	mov	r0, r3
 8013768:	f7fe fabd 	bl	8011ce6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801376c:	2300      	movs	r3, #0
 801376e:	61bb      	str	r3, [r7, #24]
 8013770:	e002      	b.n	8013778 <create_name+0x1c8>
 8013772:	69bb      	ldr	r3, [r7, #24]
 8013774:	3301      	adds	r3, #1
 8013776:	61bb      	str	r3, [r7, #24]
 8013778:	69bb      	ldr	r3, [r7, #24]
 801377a:	005b      	lsls	r3, r3, #1
 801377c:	68fa      	ldr	r2, [r7, #12]
 801377e:	4413      	add	r3, r2
 8013780:	881b      	ldrh	r3, [r3, #0]
 8013782:	2b20      	cmp	r3, #32
 8013784:	d0f5      	beq.n	8013772 <create_name+0x1c2>
 8013786:	69bb      	ldr	r3, [r7, #24]
 8013788:	005b      	lsls	r3, r3, #1
 801378a:	68fa      	ldr	r2, [r7, #12]
 801378c:	4413      	add	r3, r2
 801378e:	881b      	ldrh	r3, [r3, #0]
 8013790:	2b2e      	cmp	r3, #46	@ 0x2e
 8013792:	d0ee      	beq.n	8013772 <create_name+0x1c2>
	if (si) cf |= NS_LOSS | NS_LFN;
 8013794:	69bb      	ldr	r3, [r7, #24]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d009      	beq.n	80137ae <create_name+0x1fe>
 801379a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801379e:	f043 0303 	orr.w	r3, r3, #3
 80137a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80137a6:	e002      	b.n	80137ae <create_name+0x1fe>
 80137a8:	697b      	ldr	r3, [r7, #20]
 80137aa:	3b01      	subs	r3, #1
 80137ac:	617b      	str	r3, [r7, #20]
 80137ae:	697b      	ldr	r3, [r7, #20]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d009      	beq.n	80137c8 <create_name+0x218>
 80137b4:	697a      	ldr	r2, [r7, #20]
 80137b6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80137ba:	4413      	add	r3, r2
 80137bc:	005b      	lsls	r3, r3, #1
 80137be:	68fa      	ldr	r2, [r7, #12]
 80137c0:	4413      	add	r3, r2
 80137c2:	881b      	ldrh	r3, [r3, #0]
 80137c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80137c6:	d1ef      	bne.n	80137a8 <create_name+0x1f8>

	i = b = 0; ni = 8;
 80137c8:	2300      	movs	r3, #0
 80137ca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80137ce:	2300      	movs	r3, #0
 80137d0:	623b      	str	r3, [r7, #32]
 80137d2:	2308      	movs	r3, #8
 80137d4:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80137d6:	69bb      	ldr	r3, [r7, #24]
 80137d8:	1c5a      	adds	r2, r3, #1
 80137da:	61ba      	str	r2, [r7, #24]
 80137dc:	005b      	lsls	r3, r3, #1
 80137de:	68fa      	ldr	r2, [r7, #12]
 80137e0:	4413      	add	r3, r2
 80137e2:	881b      	ldrh	r3, [r3, #0]
 80137e4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80137e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	f000 8098 	beq.w	801391e <create_name+0x36e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80137ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80137f0:	2b20      	cmp	r3, #32
 80137f2:	d006      	beq.n	8013802 <create_name+0x252>
 80137f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80137f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80137f8:	d10a      	bne.n	8013810 <create_name+0x260>
 80137fa:	69ba      	ldr	r2, [r7, #24]
 80137fc:	697b      	ldr	r3, [r7, #20]
 80137fe:	429a      	cmp	r2, r3
 8013800:	d006      	beq.n	8013810 <create_name+0x260>
			cf |= NS_LOSS | NS_LFN; continue;
 8013802:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013806:	f043 0303 	orr.w	r3, r3, #3
 801380a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801380e:	e085      	b.n	801391c <create_name+0x36c>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8013810:	6a3a      	ldr	r2, [r7, #32]
 8013812:	69fb      	ldr	r3, [r7, #28]
 8013814:	429a      	cmp	r2, r3
 8013816:	d203      	bcs.n	8013820 <create_name+0x270>
 8013818:	69ba      	ldr	r2, [r7, #24]
 801381a:	697b      	ldr	r3, [r7, #20]
 801381c:	429a      	cmp	r2, r3
 801381e:	d123      	bne.n	8013868 <create_name+0x2b8>
			if (ni == 11) {				/* Long extension */
 8013820:	69fb      	ldr	r3, [r7, #28]
 8013822:	2b0b      	cmp	r3, #11
 8013824:	d106      	bne.n	8013834 <create_name+0x284>
				cf |= NS_LOSS | NS_LFN; break;
 8013826:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801382a:	f043 0303 	orr.w	r3, r3, #3
 801382e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013832:	e077      	b.n	8013924 <create_name+0x374>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8013834:	69ba      	ldr	r2, [r7, #24]
 8013836:	697b      	ldr	r3, [r7, #20]
 8013838:	429a      	cmp	r2, r3
 801383a:	d005      	beq.n	8013848 <create_name+0x298>
 801383c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013840:	f043 0303 	orr.w	r3, r3, #3
 8013844:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8013848:	69ba      	ldr	r2, [r7, #24]
 801384a:	697b      	ldr	r3, [r7, #20]
 801384c:	429a      	cmp	r2, r3
 801384e:	d868      	bhi.n	8013922 <create_name+0x372>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8013850:	697b      	ldr	r3, [r7, #20]
 8013852:	61bb      	str	r3, [r7, #24]
 8013854:	2308      	movs	r3, #8
 8013856:	623b      	str	r3, [r7, #32]
 8013858:	230b      	movs	r3, #11
 801385a:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801385c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013860:	009b      	lsls	r3, r3, #2
 8013862:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013866:	e059      	b.n	801391c <create_name+0x36c>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8013868:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801386a:	2b7f      	cmp	r3, #127	@ 0x7f
 801386c:	d914      	bls.n	8013898 <create_name+0x2e8>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801386e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013870:	2100      	movs	r1, #0
 8013872:	4618      	mov	r0, r3
 8013874:	f002 f974 	bl	8015b60 <ff_convert>
 8013878:	4603      	mov	r3, r0
 801387a:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801387c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801387e:	2b00      	cmp	r3, #0
 8013880:	d004      	beq.n	801388c <create_name+0x2dc>
 8013882:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013884:	3b80      	subs	r3, #128	@ 0x80
 8013886:	4a10      	ldr	r2, [pc, #64]	@ (80138c8 <create_name+0x318>)
 8013888:	5cd3      	ldrb	r3, [r2, r3]
 801388a:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801388c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013890:	f043 0302 	orr.w	r3, r3, #2
 8013894:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8013898:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801389a:	2b00      	cmp	r3, #0
 801389c:	d007      	beq.n	80138ae <create_name+0x2fe>
 801389e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80138a0:	4619      	mov	r1, r3
 80138a2:	480a      	ldr	r0, [pc, #40]	@ (80138cc <create_name+0x31c>)
 80138a4:	f7fe fa61 	bl	8011d6a <chk_chr>
 80138a8:	4603      	mov	r3, r0
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d010      	beq.n	80138d0 <create_name+0x320>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80138ae:	235f      	movs	r3, #95	@ 0x5f
 80138b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80138b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80138b6:	f043 0303 	orr.w	r3, r3, #3
 80138ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80138be:	e023      	b.n	8013908 <create_name+0x358>
 80138c0:	08018c6c 	.word	0x08018c6c
 80138c4:	7ffffffe 	.word	0x7ffffffe
 80138c8:	08018cf4 	.word	0x08018cf4
 80138cc:	08018c78 	.word	0x08018c78
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80138d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80138d2:	2b40      	cmp	r3, #64	@ 0x40
 80138d4:	d909      	bls.n	80138ea <create_name+0x33a>
 80138d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80138d8:	2b5a      	cmp	r3, #90	@ 0x5a
 80138da:	d806      	bhi.n	80138ea <create_name+0x33a>
					b |= 2;
 80138dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80138e0:	f043 0302 	orr.w	r3, r3, #2
 80138e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80138e8:	e00e      	b.n	8013908 <create_name+0x358>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80138ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80138ec:	2b60      	cmp	r3, #96	@ 0x60
 80138ee:	d90b      	bls.n	8013908 <create_name+0x358>
 80138f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80138f2:	2b7a      	cmp	r3, #122	@ 0x7a
 80138f4:	d808      	bhi.n	8013908 <create_name+0x358>
						b |= 1; w -= 0x20;
 80138f6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80138fa:	f043 0301 	orr.w	r3, r3, #1
 80138fe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013902:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013904:	3b20      	subs	r3, #32
 8013906:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8013908:	6a3b      	ldr	r3, [r7, #32]
 801390a:	1c5a      	adds	r2, r3, #1
 801390c:	623a      	str	r2, [r7, #32]
 801390e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013910:	b2d1      	uxtb	r1, r2
 8013912:	687a      	ldr	r2, [r7, #4]
 8013914:	4413      	add	r3, r2
 8013916:	460a      	mov	r2, r1
 8013918:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 801391c:	e75b      	b.n	80137d6 <create_name+0x226>
		if (!w) break;					/* Break on end of the LFN */
 801391e:	bf00      	nop
 8013920:	e000      	b.n	8013924 <create_name+0x374>
			if (si > di) break;			/* No extension */
 8013922:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801392a:	2be5      	cmp	r3, #229	@ 0xe5
 801392c:	d103      	bne.n	8013936 <create_name+0x386>
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	2205      	movs	r2, #5
 8013932:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8013936:	69fb      	ldr	r3, [r7, #28]
 8013938:	2b08      	cmp	r3, #8
 801393a:	d104      	bne.n	8013946 <create_name+0x396>
 801393c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013940:	009b      	lsls	r3, r3, #2
 8013942:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8013946:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801394a:	f003 030c 	and.w	r3, r3, #12
 801394e:	2b0c      	cmp	r3, #12
 8013950:	d005      	beq.n	801395e <create_name+0x3ae>
 8013952:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013956:	f003 0303 	and.w	r3, r3, #3
 801395a:	2b03      	cmp	r3, #3
 801395c:	d105      	bne.n	801396a <create_name+0x3ba>
 801395e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013962:	f043 0302 	orr.w	r3, r3, #2
 8013966:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801396a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801396e:	f003 0302 	and.w	r3, r3, #2
 8013972:	2b00      	cmp	r3, #0
 8013974:	d117      	bne.n	80139a6 <create_name+0x3f6>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8013976:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801397a:	f003 0303 	and.w	r3, r3, #3
 801397e:	2b01      	cmp	r3, #1
 8013980:	d105      	bne.n	801398e <create_name+0x3de>
 8013982:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013986:	f043 0310 	orr.w	r3, r3, #16
 801398a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801398e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013992:	f003 030c 	and.w	r3, r3, #12
 8013996:	2b04      	cmp	r3, #4
 8013998:	d105      	bne.n	80139a6 <create_name+0x3f6>
 801399a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801399e:	f043 0308 	orr.w	r3, r3, #8
 80139a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80139ac:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 80139b0:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80139b2:	4618      	mov	r0, r3
 80139b4:	3728      	adds	r7, #40	@ 0x28
 80139b6:	46bd      	mov	sp, r7
 80139b8:	bd80      	pop	{r7, pc}
 80139ba:	bf00      	nop

080139bc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80139bc:	b580      	push	{r7, lr}
 80139be:	b086      	sub	sp, #24
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	6078      	str	r0, [r7, #4]
 80139c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80139ca:	693b      	ldr	r3, [r7, #16]
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 80139d0:	683b      	ldr	r3, [r7, #0]
 80139d2:	781b      	ldrb	r3, [r3, #0]
 80139d4:	2b2f      	cmp	r3, #47	@ 0x2f
 80139d6:	d00b      	beq.n	80139f0 <follow_path+0x34>
 80139d8:	683b      	ldr	r3, [r7, #0]
 80139da:	781b      	ldrb	r3, [r3, #0]
 80139dc:	2b5c      	cmp	r3, #92	@ 0x5c
 80139de:	d007      	beq.n	80139f0 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	69da      	ldr	r2, [r3, #28]
 80139e4:	693b      	ldr	r3, [r7, #16]
 80139e6:	609a      	str	r2, [r3, #8]
 80139e8:	e00d      	b.n	8013a06 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80139ea:	683b      	ldr	r3, [r7, #0]
 80139ec:	3301      	adds	r3, #1
 80139ee:	603b      	str	r3, [r7, #0]
 80139f0:	683b      	ldr	r3, [r7, #0]
 80139f2:	781b      	ldrb	r3, [r3, #0]
 80139f4:	2b2f      	cmp	r3, #47	@ 0x2f
 80139f6:	d0f8      	beq.n	80139ea <follow_path+0x2e>
 80139f8:	683b      	ldr	r3, [r7, #0]
 80139fa:	781b      	ldrb	r3, [r3, #0]
 80139fc:	2b5c      	cmp	r3, #92	@ 0x5c
 80139fe:	d0f4      	beq.n	80139ea <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8013a00:	693b      	ldr	r3, [r7, #16]
 8013a02:	2200      	movs	r2, #0
 8013a04:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8013a06:	683b      	ldr	r3, [r7, #0]
 8013a08:	781b      	ldrb	r3, [r3, #0]
 8013a0a:	2b1f      	cmp	r3, #31
 8013a0c:	d80a      	bhi.n	8013a24 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	2280      	movs	r2, #128	@ 0x80
 8013a12:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8013a16:	2100      	movs	r1, #0
 8013a18:	6878      	ldr	r0, [r7, #4]
 8013a1a:	f7fe ff50 	bl	80128be <dir_sdi>
 8013a1e:	4603      	mov	r3, r0
 8013a20:	75fb      	strb	r3, [r7, #23]
 8013a22:	e05b      	b.n	8013adc <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013a24:	463b      	mov	r3, r7
 8013a26:	4619      	mov	r1, r3
 8013a28:	6878      	ldr	r0, [r7, #4]
 8013a2a:	f7ff fdc1 	bl	80135b0 <create_name>
 8013a2e:	4603      	mov	r3, r0
 8013a30:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013a32:	7dfb      	ldrb	r3, [r7, #23]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d14c      	bne.n	8013ad2 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8013a38:	6878      	ldr	r0, [r7, #4]
 8013a3a:	f7ff fbb7 	bl	80131ac <dir_find>
 8013a3e:	4603      	mov	r3, r0
 8013a40:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013a48:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8013a4a:	7dfb      	ldrb	r3, [r7, #23]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d01b      	beq.n	8013a88 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013a50:	7dfb      	ldrb	r3, [r7, #23]
 8013a52:	2b04      	cmp	r3, #4
 8013a54:	d13f      	bne.n	8013ad6 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8013a56:	7afb      	ldrb	r3, [r7, #11]
 8013a58:	f003 0320 	and.w	r3, r3, #32
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d00b      	beq.n	8013a78 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8013a60:	7afb      	ldrb	r3, [r7, #11]
 8013a62:	f003 0304 	and.w	r3, r3, #4
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d031      	beq.n	8013ace <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	2280      	movs	r2, #128	@ 0x80
 8013a6e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
						res = FR_OK;
 8013a72:	2300      	movs	r3, #0
 8013a74:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8013a76:	e02e      	b.n	8013ad6 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8013a78:	7afb      	ldrb	r3, [r7, #11]
 8013a7a:	f003 0304 	and.w	r3, r3, #4
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d129      	bne.n	8013ad6 <follow_path+0x11a>
 8013a82:	2305      	movs	r3, #5
 8013a84:	75fb      	strb	r3, [r7, #23]
				break;
 8013a86:	e026      	b.n	8013ad6 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013a88:	7afb      	ldrb	r3, [r7, #11]
 8013a8a:	f003 0304 	and.w	r3, r3, #4
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d123      	bne.n	8013ada <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013a92:	693b      	ldr	r3, [r7, #16]
 8013a94:	799b      	ldrb	r3, [r3, #6]
 8013a96:	f003 0310 	and.w	r3, r3, #16
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d102      	bne.n	8013aa4 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8013a9e:	2305      	movs	r3, #5
 8013aa0:	75fb      	strb	r3, [r7, #23]
 8013aa2:	e01b      	b.n	8013adc <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	695b      	ldr	r3, [r3, #20]
 8013aae:	68fa      	ldr	r2, [r7, #12]
 8013ab0:	8992      	ldrh	r2, [r2, #12]
 8013ab2:	fbb3 f0f2 	udiv	r0, r3, r2
 8013ab6:	fb00 f202 	mul.w	r2, r0, r2
 8013aba:	1a9b      	subs	r3, r3, r2
 8013abc:	440b      	add	r3, r1
 8013abe:	4619      	mov	r1, r3
 8013ac0:	68f8      	ldr	r0, [r7, #12]
 8013ac2:	f7ff f8a2 	bl	8012c0a <ld_clust>
 8013ac6:	4602      	mov	r2, r0
 8013ac8:	693b      	ldr	r3, [r7, #16]
 8013aca:	609a      	str	r2, [r3, #8]
 8013acc:	e7aa      	b.n	8013a24 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8013ace:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013ad0:	e7a8      	b.n	8013a24 <follow_path+0x68>
			if (res != FR_OK) break;
 8013ad2:	bf00      	nop
 8013ad4:	e002      	b.n	8013adc <follow_path+0x120>
				break;
 8013ad6:	bf00      	nop
 8013ad8:	e000      	b.n	8013adc <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013ada:	bf00      	nop
			}
		}
	}

	return res;
 8013adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ade:	4618      	mov	r0, r3
 8013ae0:	3718      	adds	r7, #24
 8013ae2:	46bd      	mov	sp, r7
 8013ae4:	bd80      	pop	{r7, pc}

08013ae6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8013ae6:	b480      	push	{r7}
 8013ae8:	b087      	sub	sp, #28
 8013aea:	af00      	add	r7, sp, #0
 8013aec:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8013aee:	f04f 33ff 	mov.w	r3, #4294967295
 8013af2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d031      	beq.n	8013b60 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	617b      	str	r3, [r7, #20]
 8013b02:	e002      	b.n	8013b0a <get_ldnumber+0x24>
 8013b04:	697b      	ldr	r3, [r7, #20]
 8013b06:	3301      	adds	r3, #1
 8013b08:	617b      	str	r3, [r7, #20]
 8013b0a:	697b      	ldr	r3, [r7, #20]
 8013b0c:	781b      	ldrb	r3, [r3, #0]
 8013b0e:	2b1f      	cmp	r3, #31
 8013b10:	d903      	bls.n	8013b1a <get_ldnumber+0x34>
 8013b12:	697b      	ldr	r3, [r7, #20]
 8013b14:	781b      	ldrb	r3, [r3, #0]
 8013b16:	2b3a      	cmp	r3, #58	@ 0x3a
 8013b18:	d1f4      	bne.n	8013b04 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8013b1a:	697b      	ldr	r3, [r7, #20]
 8013b1c:	781b      	ldrb	r3, [r3, #0]
 8013b1e:	2b3a      	cmp	r3, #58	@ 0x3a
 8013b20:	d11c      	bne.n	8013b5c <get_ldnumber+0x76>
			tp = *path;
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	1c5a      	adds	r2, r3, #1
 8013b2c:	60fa      	str	r2, [r7, #12]
 8013b2e:	781b      	ldrb	r3, [r3, #0]
 8013b30:	3b30      	subs	r3, #48	@ 0x30
 8013b32:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8013b34:	68bb      	ldr	r3, [r7, #8]
 8013b36:	2b09      	cmp	r3, #9
 8013b38:	d80e      	bhi.n	8013b58 <get_ldnumber+0x72>
 8013b3a:	68fa      	ldr	r2, [r7, #12]
 8013b3c:	697b      	ldr	r3, [r7, #20]
 8013b3e:	429a      	cmp	r2, r3
 8013b40:	d10a      	bne.n	8013b58 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8013b42:	68bb      	ldr	r3, [r7, #8]
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d107      	bne.n	8013b58 <get_ldnumber+0x72>
					vol = (int)i;
 8013b48:	68bb      	ldr	r3, [r7, #8]
 8013b4a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8013b4c:	697b      	ldr	r3, [r7, #20]
 8013b4e:	3301      	adds	r3, #1
 8013b50:	617b      	str	r3, [r7, #20]
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	697a      	ldr	r2, [r7, #20]
 8013b56:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013b58:	693b      	ldr	r3, [r7, #16]
 8013b5a:	e002      	b.n	8013b62 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013b5c:	2300      	movs	r3, #0
 8013b5e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8013b60:	693b      	ldr	r3, [r7, #16]
}
 8013b62:	4618      	mov	r0, r3
 8013b64:	371c      	adds	r7, #28
 8013b66:	46bd      	mov	sp, r7
 8013b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b6c:	4770      	bx	lr
	...

08013b70 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013b70:	b580      	push	{r7, lr}
 8013b72:	b082      	sub	sp, #8
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	6078      	str	r0, [r7, #4]
 8013b78:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	2200      	movs	r2, #0
 8013b7e:	70da      	strb	r2, [r3, #3]
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	f04f 32ff 	mov.w	r2, #4294967295
 8013b86:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8013b88:	6839      	ldr	r1, [r7, #0]
 8013b8a:	6878      	ldr	r0, [r7, #4]
 8013b8c:	f7fe fab8 	bl	8012100 <move_window>
 8013b90:	4603      	mov	r3, r0
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d001      	beq.n	8013b9a <check_fs+0x2a>
 8013b96:	2304      	movs	r3, #4
 8013b98:	e038      	b.n	8013c0c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	333c      	adds	r3, #60	@ 0x3c
 8013b9e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013ba2:	4618      	mov	r0, r3
 8013ba4:	f7fd fffc 	bl	8011ba0 <ld_word>
 8013ba8:	4603      	mov	r3, r0
 8013baa:	461a      	mov	r2, r3
 8013bac:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8013bb0:	429a      	cmp	r2, r3
 8013bb2:	d001      	beq.n	8013bb8 <check_fs+0x48>
 8013bb4:	2303      	movs	r3, #3
 8013bb6:	e029      	b.n	8013c0c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013bbe:	2be9      	cmp	r3, #233	@ 0xe9
 8013bc0:	d009      	beq.n	8013bd6 <check_fs+0x66>
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013bc8:	2beb      	cmp	r3, #235	@ 0xeb
 8013bca:	d11e      	bne.n	8013c0a <check_fs+0x9a>
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8013bd2:	2b90      	cmp	r3, #144	@ 0x90
 8013bd4:	d119      	bne.n	8013c0a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	333c      	adds	r3, #60	@ 0x3c
 8013bda:	3336      	adds	r3, #54	@ 0x36
 8013bdc:	4618      	mov	r0, r3
 8013bde:	f7fd fff7 	bl	8011bd0 <ld_dword>
 8013be2:	4603      	mov	r3, r0
 8013be4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8013be8:	4a0a      	ldr	r2, [pc, #40]	@ (8013c14 <check_fs+0xa4>)
 8013bea:	4293      	cmp	r3, r2
 8013bec:	d101      	bne.n	8013bf2 <check_fs+0x82>
 8013bee:	2300      	movs	r3, #0
 8013bf0:	e00c      	b.n	8013c0c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	333c      	adds	r3, #60	@ 0x3c
 8013bf6:	3352      	adds	r3, #82	@ 0x52
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	f7fd ffe9 	bl	8011bd0 <ld_dword>
 8013bfe:	4603      	mov	r3, r0
 8013c00:	4a05      	ldr	r2, [pc, #20]	@ (8013c18 <check_fs+0xa8>)
 8013c02:	4293      	cmp	r3, r2
 8013c04:	d101      	bne.n	8013c0a <check_fs+0x9a>
 8013c06:	2300      	movs	r3, #0
 8013c08:	e000      	b.n	8013c0c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8013c0a:	2302      	movs	r3, #2
}
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	3708      	adds	r7, #8
 8013c10:	46bd      	mov	sp, r7
 8013c12:	bd80      	pop	{r7, pc}
 8013c14:	00544146 	.word	0x00544146
 8013c18:	33544146 	.word	0x33544146

08013c1c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b096      	sub	sp, #88	@ 0x58
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	60f8      	str	r0, [r7, #12]
 8013c24:	60b9      	str	r1, [r7, #8]
 8013c26:	4613      	mov	r3, r2
 8013c28:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8013c2a:	68bb      	ldr	r3, [r7, #8]
 8013c2c:	2200      	movs	r2, #0
 8013c2e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013c30:	68f8      	ldr	r0, [r7, #12]
 8013c32:	f7ff ff58 	bl	8013ae6 <get_ldnumber>
 8013c36:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013c38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	da01      	bge.n	8013c42 <find_volume+0x26>
 8013c3e:	230b      	movs	r3, #11
 8013c40:	e268      	b.n	8014114 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8013c42:	4a9f      	ldr	r2, [pc, #636]	@ (8013ec0 <find_volume+0x2a4>)
 8013c44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d101      	bne.n	8013c56 <find_volume+0x3a>
 8013c52:	230c      	movs	r3, #12
 8013c54:	e25e      	b.n	8014114 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8013c56:	68bb      	ldr	r3, [r7, #8]
 8013c58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013c5a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013c5c:	79fb      	ldrb	r3, [r7, #7]
 8013c5e:	f023 0301 	bic.w	r3, r3, #1
 8013c62:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c66:	781b      	ldrb	r3, [r3, #0]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d01a      	beq.n	8013ca2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8013c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c6e:	785b      	ldrb	r3, [r3, #1]
 8013c70:	4618      	mov	r0, r3
 8013c72:	f7fd fef5 	bl	8011a60 <disk_status>
 8013c76:	4603      	mov	r3, r0
 8013c78:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013c7c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013c80:	f003 0301 	and.w	r3, r3, #1
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d10c      	bne.n	8013ca2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013c88:	79fb      	ldrb	r3, [r7, #7]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d007      	beq.n	8013c9e <find_volume+0x82>
 8013c8e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013c92:	f003 0304 	and.w	r3, r3, #4
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d001      	beq.n	8013c9e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8013c9a:	230a      	movs	r3, #10
 8013c9c:	e23a      	b.n	8014114 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	e238      	b.n	8014114 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ca4:	2200      	movs	r2, #0
 8013ca6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013caa:	b2da      	uxtb	r2, r3
 8013cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013cae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013cb2:	785b      	ldrb	r3, [r3, #1]
 8013cb4:	4618      	mov	r0, r3
 8013cb6:	f7fd feed 	bl	8011a94 <disk_initialize>
 8013cba:	4603      	mov	r3, r0
 8013cbc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013cc0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013cc4:	f003 0301 	and.w	r3, r3, #1
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d001      	beq.n	8013cd0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013ccc:	2303      	movs	r3, #3
 8013cce:	e221      	b.n	8014114 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013cd0:	79fb      	ldrb	r3, [r7, #7]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d007      	beq.n	8013ce6 <find_volume+0xca>
 8013cd6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013cda:	f003 0304 	and.w	r3, r3, #4
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d001      	beq.n	8013ce6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8013ce2:	230a      	movs	r3, #10
 8013ce4:	e216      	b.n	8014114 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8013ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ce8:	7858      	ldrb	r0, [r3, #1]
 8013cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013cec:	330c      	adds	r3, #12
 8013cee:	461a      	mov	r2, r3
 8013cf0:	2102      	movs	r1, #2
 8013cf2:	f7fd ff37 	bl	8011b64 <disk_ioctl>
 8013cf6:	4603      	mov	r3, r0
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d001      	beq.n	8013d00 <find_volume+0xe4>
 8013cfc:	2301      	movs	r3, #1
 8013cfe:	e209      	b.n	8014114 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8013d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d02:	899b      	ldrh	r3, [r3, #12]
 8013d04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013d08:	d80d      	bhi.n	8013d26 <find_volume+0x10a>
 8013d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d0c:	899b      	ldrh	r3, [r3, #12]
 8013d0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013d12:	d308      	bcc.n	8013d26 <find_volume+0x10a>
 8013d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d16:	899b      	ldrh	r3, [r3, #12]
 8013d18:	461a      	mov	r2, r3
 8013d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d1c:	899b      	ldrh	r3, [r3, #12]
 8013d1e:	3b01      	subs	r3, #1
 8013d20:	4013      	ands	r3, r2
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d001      	beq.n	8013d2a <find_volume+0x10e>
 8013d26:	2301      	movs	r3, #1
 8013d28:	e1f4      	b.n	8014114 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8013d2a:	2300      	movs	r3, #0
 8013d2c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8013d2e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013d30:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013d32:	f7ff ff1d 	bl	8013b70 <check_fs>
 8013d36:	4603      	mov	r3, r0
 8013d38:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013d3c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013d40:	2b02      	cmp	r3, #2
 8013d42:	d149      	bne.n	8013dd8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013d44:	2300      	movs	r3, #0
 8013d46:	643b      	str	r3, [r7, #64]	@ 0x40
 8013d48:	e01e      	b.n	8013d88 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8013d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d4c:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8013d50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013d52:	011b      	lsls	r3, r3, #4
 8013d54:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8013d58:	4413      	add	r3, r2
 8013d5a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d5e:	3304      	adds	r3, #4
 8013d60:	781b      	ldrb	r3, [r3, #0]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d006      	beq.n	8013d74 <find_volume+0x158>
 8013d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d68:	3308      	adds	r3, #8
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	f7fd ff30 	bl	8011bd0 <ld_dword>
 8013d70:	4602      	mov	r2, r0
 8013d72:	e000      	b.n	8013d76 <find_volume+0x15a>
 8013d74:	2200      	movs	r2, #0
 8013d76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013d78:	009b      	lsls	r3, r3, #2
 8013d7a:	3358      	adds	r3, #88	@ 0x58
 8013d7c:	443b      	add	r3, r7
 8013d7e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013d82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013d84:	3301      	adds	r3, #1
 8013d86:	643b      	str	r3, [r7, #64]	@ 0x40
 8013d88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013d8a:	2b03      	cmp	r3, #3
 8013d8c:	d9dd      	bls.n	8013d4a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013d8e:	2300      	movs	r3, #0
 8013d90:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8013d92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d002      	beq.n	8013d9e <find_volume+0x182>
 8013d98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013d9a:	3b01      	subs	r3, #1
 8013d9c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013d9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013da0:	009b      	lsls	r3, r3, #2
 8013da2:	3358      	adds	r3, #88	@ 0x58
 8013da4:	443b      	add	r3, r7
 8013da6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8013daa:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013dac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d005      	beq.n	8013dbe <find_volume+0x1a2>
 8013db2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013db4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013db6:	f7ff fedb 	bl	8013b70 <check_fs>
 8013dba:	4603      	mov	r3, r0
 8013dbc:	e000      	b.n	8013dc0 <find_volume+0x1a4>
 8013dbe:	2303      	movs	r3, #3
 8013dc0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013dc4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013dc8:	2b01      	cmp	r3, #1
 8013dca:	d905      	bls.n	8013dd8 <find_volume+0x1bc>
 8013dcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013dce:	3301      	adds	r3, #1
 8013dd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8013dd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013dd4:	2b03      	cmp	r3, #3
 8013dd6:	d9e2      	bls.n	8013d9e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013dd8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013ddc:	2b04      	cmp	r3, #4
 8013dde:	d101      	bne.n	8013de4 <find_volume+0x1c8>
 8013de0:	2301      	movs	r3, #1
 8013de2:	e197      	b.n	8014114 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013de4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013de8:	2b01      	cmp	r3, #1
 8013dea:	d901      	bls.n	8013df0 <find_volume+0x1d4>
 8013dec:	230d      	movs	r3, #13
 8013dee:	e191      	b.n	8014114 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013df2:	333c      	adds	r3, #60	@ 0x3c
 8013df4:	330b      	adds	r3, #11
 8013df6:	4618      	mov	r0, r3
 8013df8:	f7fd fed2 	bl	8011ba0 <ld_word>
 8013dfc:	4603      	mov	r3, r0
 8013dfe:	461a      	mov	r2, r3
 8013e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e02:	899b      	ldrh	r3, [r3, #12]
 8013e04:	429a      	cmp	r2, r3
 8013e06:	d001      	beq.n	8013e0c <find_volume+0x1f0>
 8013e08:	230d      	movs	r3, #13
 8013e0a:	e183      	b.n	8014114 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e0e:	333c      	adds	r3, #60	@ 0x3c
 8013e10:	3316      	adds	r3, #22
 8013e12:	4618      	mov	r0, r3
 8013e14:	f7fd fec4 	bl	8011ba0 <ld_word>
 8013e18:	4603      	mov	r3, r0
 8013e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013e1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d106      	bne.n	8013e30 <find_volume+0x214>
 8013e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e24:	333c      	adds	r3, #60	@ 0x3c
 8013e26:	3324      	adds	r3, #36	@ 0x24
 8013e28:	4618      	mov	r0, r3
 8013e2a:	f7fd fed1 	bl	8011bd0 <ld_dword>
 8013e2e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8013e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e32:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013e34:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e38:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 8013e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e3e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e42:	789b      	ldrb	r3, [r3, #2]
 8013e44:	2b01      	cmp	r3, #1
 8013e46:	d005      	beq.n	8013e54 <find_volume+0x238>
 8013e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e4a:	789b      	ldrb	r3, [r3, #2]
 8013e4c:	2b02      	cmp	r3, #2
 8013e4e:	d001      	beq.n	8013e54 <find_volume+0x238>
 8013e50:	230d      	movs	r3, #13
 8013e52:	e15f      	b.n	8014114 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e56:	789b      	ldrb	r3, [r3, #2]
 8013e58:	461a      	mov	r2, r3
 8013e5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013e5c:	fb02 f303 	mul.w	r3, r2, r3
 8013e60:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8013e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e64:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8013e68:	461a      	mov	r2, r3
 8013e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e6c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e70:	895b      	ldrh	r3, [r3, #10]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d008      	beq.n	8013e88 <find_volume+0x26c>
 8013e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e78:	895b      	ldrh	r3, [r3, #10]
 8013e7a:	461a      	mov	r2, r3
 8013e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e7e:	895b      	ldrh	r3, [r3, #10]
 8013e80:	3b01      	subs	r3, #1
 8013e82:	4013      	ands	r3, r2
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d001      	beq.n	8013e8c <find_volume+0x270>
 8013e88:	230d      	movs	r3, #13
 8013e8a:	e143      	b.n	8014114 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e8e:	333c      	adds	r3, #60	@ 0x3c
 8013e90:	3311      	adds	r3, #17
 8013e92:	4618      	mov	r0, r3
 8013e94:	f7fd fe84 	bl	8011ba0 <ld_word>
 8013e98:	4603      	mov	r3, r0
 8013e9a:	461a      	mov	r2, r3
 8013e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e9e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ea2:	891b      	ldrh	r3, [r3, #8]
 8013ea4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013ea6:	8992      	ldrh	r2, [r2, #12]
 8013ea8:	0952      	lsrs	r2, r2, #5
 8013eaa:	b292      	uxth	r2, r2
 8013eac:	fbb3 f1f2 	udiv	r1, r3, r2
 8013eb0:	fb01 f202 	mul.w	r2, r1, r2
 8013eb4:	1a9b      	subs	r3, r3, r2
 8013eb6:	b29b      	uxth	r3, r3
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d003      	beq.n	8013ec4 <find_volume+0x2a8>
 8013ebc:	230d      	movs	r3, #13
 8013ebe:	e129      	b.n	8014114 <find_volume+0x4f8>
 8013ec0:	240054a0 	.word	0x240054a0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ec6:	333c      	adds	r3, #60	@ 0x3c
 8013ec8:	3313      	adds	r3, #19
 8013eca:	4618      	mov	r0, r3
 8013ecc:	f7fd fe68 	bl	8011ba0 <ld_word>
 8013ed0:	4603      	mov	r3, r0
 8013ed2:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013ed4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d106      	bne.n	8013ee8 <find_volume+0x2cc>
 8013eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013edc:	333c      	adds	r3, #60	@ 0x3c
 8013ede:	3320      	adds	r3, #32
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	f7fd fe75 	bl	8011bd0 <ld_dword>
 8013ee6:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013eea:	333c      	adds	r3, #60	@ 0x3c
 8013eec:	330e      	adds	r3, #14
 8013eee:	4618      	mov	r0, r3
 8013ef0:	f7fd fe56 	bl	8011ba0 <ld_word>
 8013ef4:	4603      	mov	r3, r0
 8013ef6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013ef8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d101      	bne.n	8013f02 <find_volume+0x2e6>
 8013efe:	230d      	movs	r3, #13
 8013f00:	e108      	b.n	8014114 <find_volume+0x4f8>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013f02:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013f04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013f06:	4413      	add	r3, r2
 8013f08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013f0a:	8911      	ldrh	r1, [r2, #8]
 8013f0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013f0e:	8992      	ldrh	r2, [r2, #12]
 8013f10:	0952      	lsrs	r2, r2, #5
 8013f12:	b292      	uxth	r2, r2
 8013f14:	fbb1 f2f2 	udiv	r2, r1, r2
 8013f18:	b292      	uxth	r2, r2
 8013f1a:	4413      	add	r3, r2
 8013f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013f1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f22:	429a      	cmp	r2, r3
 8013f24:	d201      	bcs.n	8013f2a <find_volume+0x30e>
 8013f26:	230d      	movs	r3, #13
 8013f28:	e0f4      	b.n	8014114 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013f2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f2e:	1ad3      	subs	r3, r2, r3
 8013f30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013f32:	8952      	ldrh	r2, [r2, #10]
 8013f34:	fbb3 f3f2 	udiv	r3, r3, r2
 8013f38:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d101      	bne.n	8013f44 <find_volume+0x328>
 8013f40:	230d      	movs	r3, #13
 8013f42:	e0e7      	b.n	8014114 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8013f44:	2303      	movs	r3, #3
 8013f46:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f4c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8013f50:	4293      	cmp	r3, r2
 8013f52:	d802      	bhi.n	8013f5a <find_volume+0x33e>
 8013f54:	2302      	movs	r3, #2
 8013f56:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f5c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8013f60:	4293      	cmp	r3, r2
 8013f62:	d802      	bhi.n	8013f6a <find_volume+0x34e>
 8013f64:	2301      	movs	r3, #1
 8013f66:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f6c:	1c9a      	adds	r2, r3, #2
 8013f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f70:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8013f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f74:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013f76:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013f78:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013f7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013f7c:	441a      	add	r2, r3
 8013f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f80:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8013f82:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f86:	441a      	add	r2, r3
 8013f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f8a:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 8013f8c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013f90:	2b03      	cmp	r3, #3
 8013f92:	d11e      	bne.n	8013fd2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f96:	333c      	adds	r3, #60	@ 0x3c
 8013f98:	332a      	adds	r3, #42	@ 0x2a
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	f7fd fe00 	bl	8011ba0 <ld_word>
 8013fa0:	4603      	mov	r3, r0
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d001      	beq.n	8013faa <find_volume+0x38e>
 8013fa6:	230d      	movs	r3, #13
 8013fa8:	e0b4      	b.n	8014114 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013fac:	891b      	ldrh	r3, [r3, #8]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d001      	beq.n	8013fb6 <find_volume+0x39a>
 8013fb2:	230d      	movs	r3, #13
 8013fb4:	e0ae      	b.n	8014114 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013fb8:	333c      	adds	r3, #60	@ 0x3c
 8013fba:	332c      	adds	r3, #44	@ 0x2c
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	f7fd fe07 	bl	8011bd0 <ld_dword>
 8013fc2:	4602      	mov	r2, r0
 8013fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013fc6:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013fca:	6a1b      	ldr	r3, [r3, #32]
 8013fcc:	009b      	lsls	r3, r3, #2
 8013fce:	647b      	str	r3, [r7, #68]	@ 0x44
 8013fd0:	e01f      	b.n	8014012 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013fd4:	891b      	ldrh	r3, [r3, #8]
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d101      	bne.n	8013fde <find_volume+0x3c2>
 8013fda:	230d      	movs	r3, #13
 8013fdc:	e09a      	b.n	8014114 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013fe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013fe4:	441a      	add	r2, r3
 8013fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013fe8:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013fea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013fee:	2b02      	cmp	r3, #2
 8013ff0:	d103      	bne.n	8013ffa <find_volume+0x3de>
 8013ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ff4:	6a1b      	ldr	r3, [r3, #32]
 8013ff6:	005b      	lsls	r3, r3, #1
 8013ff8:	e00a      	b.n	8014010 <find_volume+0x3f4>
 8013ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ffc:	6a1a      	ldr	r2, [r3, #32]
 8013ffe:	4613      	mov	r3, r2
 8014000:	005b      	lsls	r3, r3, #1
 8014002:	4413      	add	r3, r2
 8014004:	085a      	lsrs	r2, r3, #1
 8014006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014008:	6a1b      	ldr	r3, [r3, #32]
 801400a:	f003 0301 	and.w	r3, r3, #1
 801400e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8014010:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8014012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014014:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014018:	899b      	ldrh	r3, [r3, #12]
 801401a:	4619      	mov	r1, r3
 801401c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801401e:	440b      	add	r3, r1
 8014020:	3b01      	subs	r3, #1
 8014022:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014024:	8989      	ldrh	r1, [r1, #12]
 8014026:	fbb3 f3f1 	udiv	r3, r3, r1
 801402a:	429a      	cmp	r2, r3
 801402c:	d201      	bcs.n	8014032 <find_volume+0x416>
 801402e:	230d      	movs	r3, #13
 8014030:	e070      	b.n	8014114 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8014032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014034:	f04f 32ff 	mov.w	r2, #4294967295
 8014038:	619a      	str	r2, [r3, #24]
 801403a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801403c:	699a      	ldr	r2, [r3, #24]
 801403e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014040:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8014042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014044:	2280      	movs	r2, #128	@ 0x80
 8014046:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8014048:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801404c:	2b03      	cmp	r3, #3
 801404e:	d149      	bne.n	80140e4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8014050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014052:	333c      	adds	r3, #60	@ 0x3c
 8014054:	3330      	adds	r3, #48	@ 0x30
 8014056:	4618      	mov	r0, r3
 8014058:	f7fd fda2 	bl	8011ba0 <ld_word>
 801405c:	4603      	mov	r3, r0
 801405e:	2b01      	cmp	r3, #1
 8014060:	d140      	bne.n	80140e4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8014062:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014064:	3301      	adds	r3, #1
 8014066:	4619      	mov	r1, r3
 8014068:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801406a:	f7fe f849 	bl	8012100 <move_window>
 801406e:	4603      	mov	r3, r0
 8014070:	2b00      	cmp	r3, #0
 8014072:	d137      	bne.n	80140e4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8014074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014076:	2200      	movs	r2, #0
 8014078:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801407a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801407c:	333c      	adds	r3, #60	@ 0x3c
 801407e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014082:	4618      	mov	r0, r3
 8014084:	f7fd fd8c 	bl	8011ba0 <ld_word>
 8014088:	4603      	mov	r3, r0
 801408a:	461a      	mov	r2, r3
 801408c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8014090:	429a      	cmp	r2, r3
 8014092:	d127      	bne.n	80140e4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8014094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014096:	333c      	adds	r3, #60	@ 0x3c
 8014098:	4618      	mov	r0, r3
 801409a:	f7fd fd99 	bl	8011bd0 <ld_dword>
 801409e:	4603      	mov	r3, r0
 80140a0:	4a1e      	ldr	r2, [pc, #120]	@ (801411c <find_volume+0x500>)
 80140a2:	4293      	cmp	r3, r2
 80140a4:	d11e      	bne.n	80140e4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80140a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140a8:	333c      	adds	r3, #60	@ 0x3c
 80140aa:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80140ae:	4618      	mov	r0, r3
 80140b0:	f7fd fd8e 	bl	8011bd0 <ld_dword>
 80140b4:	4603      	mov	r3, r0
 80140b6:	4a1a      	ldr	r2, [pc, #104]	@ (8014120 <find_volume+0x504>)
 80140b8:	4293      	cmp	r3, r2
 80140ba:	d113      	bne.n	80140e4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80140bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140be:	333c      	adds	r3, #60	@ 0x3c
 80140c0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80140c4:	4618      	mov	r0, r3
 80140c6:	f7fd fd83 	bl	8011bd0 <ld_dword>
 80140ca:	4602      	mov	r2, r0
 80140cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140ce:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80140d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140d2:	333c      	adds	r3, #60	@ 0x3c
 80140d4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80140d8:	4618      	mov	r0, r3
 80140da:	f7fd fd79 	bl	8011bd0 <ld_dword>
 80140de:	4602      	mov	r2, r0
 80140e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140e2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80140e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140e6:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80140ea:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80140ec:	4b0d      	ldr	r3, [pc, #52]	@ (8014124 <find_volume+0x508>)
 80140ee:	881b      	ldrh	r3, [r3, #0]
 80140f0:	3301      	adds	r3, #1
 80140f2:	b29a      	uxth	r2, r3
 80140f4:	4b0b      	ldr	r3, [pc, #44]	@ (8014124 <find_volume+0x508>)
 80140f6:	801a      	strh	r2, [r3, #0]
 80140f8:	4b0a      	ldr	r3, [pc, #40]	@ (8014124 <find_volume+0x508>)
 80140fa:	881a      	ldrh	r2, [r3, #0]
 80140fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140fe:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8014100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014102:	4a09      	ldr	r2, [pc, #36]	@ (8014128 <find_volume+0x50c>)
 8014104:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8014106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014108:	2200      	movs	r2, #0
 801410a:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801410c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801410e:	f7fd ff8f 	bl	8012030 <clear_lock>
#endif
	return FR_OK;
 8014112:	2300      	movs	r3, #0
}
 8014114:	4618      	mov	r0, r3
 8014116:	3758      	adds	r7, #88	@ 0x58
 8014118:	46bd      	mov	sp, r7
 801411a:	bd80      	pop	{r7, pc}
 801411c:	41615252 	.word	0x41615252
 8014120:	61417272 	.word	0x61417272
 8014124:	240054a4 	.word	0x240054a4
 8014128:	240054c8 	.word	0x240054c8

0801412c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801412c:	b580      	push	{r7, lr}
 801412e:	b084      	sub	sp, #16
 8014130:	af00      	add	r7, sp, #0
 8014132:	6078      	str	r0, [r7, #4]
 8014134:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8014136:	2309      	movs	r3, #9
 8014138:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d01c      	beq.n	801417a <validate+0x4e>
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	2b00      	cmp	r3, #0
 8014146:	d018      	beq.n	801417a <validate+0x4e>
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	781b      	ldrb	r3, [r3, #0]
 801414e:	2b00      	cmp	r3, #0
 8014150:	d013      	beq.n	801417a <validate+0x4e>
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	889a      	ldrh	r2, [r3, #4]
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	88db      	ldrh	r3, [r3, #6]
 801415c:	429a      	cmp	r2, r3
 801415e:	d10c      	bne.n	801417a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	785b      	ldrb	r3, [r3, #1]
 8014166:	4618      	mov	r0, r3
 8014168:	f7fd fc7a 	bl	8011a60 <disk_status>
 801416c:	4603      	mov	r3, r0
 801416e:	f003 0301 	and.w	r3, r3, #1
 8014172:	2b00      	cmp	r3, #0
 8014174:	d101      	bne.n	801417a <validate+0x4e>
			res = FR_OK;
 8014176:	2300      	movs	r3, #0
 8014178:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801417a:	7bfb      	ldrb	r3, [r7, #15]
 801417c:	2b00      	cmp	r3, #0
 801417e:	d102      	bne.n	8014186 <validate+0x5a>
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	e000      	b.n	8014188 <validate+0x5c>
 8014186:	2300      	movs	r3, #0
 8014188:	683a      	ldr	r2, [r7, #0]
 801418a:	6013      	str	r3, [r2, #0]
	return res;
 801418c:	7bfb      	ldrb	r3, [r7, #15]
}
 801418e:	4618      	mov	r0, r3
 8014190:	3710      	adds	r7, #16
 8014192:	46bd      	mov	sp, r7
 8014194:	bd80      	pop	{r7, pc}
	...

08014198 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014198:	b580      	push	{r7, lr}
 801419a:	b088      	sub	sp, #32
 801419c:	af00      	add	r7, sp, #0
 801419e:	60f8      	str	r0, [r7, #12]
 80141a0:	60b9      	str	r1, [r7, #8]
 80141a2:	4613      	mov	r3, r2
 80141a4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80141a6:	68bb      	ldr	r3, [r7, #8]
 80141a8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80141aa:	f107 0310 	add.w	r3, r7, #16
 80141ae:	4618      	mov	r0, r3
 80141b0:	f7ff fc99 	bl	8013ae6 <get_ldnumber>
 80141b4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80141b6:	69fb      	ldr	r3, [r7, #28]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	da01      	bge.n	80141c0 <f_mount+0x28>
 80141bc:	230b      	movs	r3, #11
 80141be:	e02b      	b.n	8014218 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80141c0:	4a17      	ldr	r2, [pc, #92]	@ (8014220 <f_mount+0x88>)
 80141c2:	69fb      	ldr	r3, [r7, #28]
 80141c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80141c8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80141ca:	69bb      	ldr	r3, [r7, #24]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d005      	beq.n	80141dc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80141d0:	69b8      	ldr	r0, [r7, #24]
 80141d2:	f7fd ff2d 	bl	8012030 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80141d6:	69bb      	ldr	r3, [r7, #24]
 80141d8:	2200      	movs	r2, #0
 80141da:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d002      	beq.n	80141e8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	2200      	movs	r2, #0
 80141e6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80141e8:	68fa      	ldr	r2, [r7, #12]
 80141ea:	490d      	ldr	r1, [pc, #52]	@ (8014220 <f_mount+0x88>)
 80141ec:	69fb      	ldr	r3, [r7, #28]
 80141ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d002      	beq.n	80141fe <f_mount+0x66>
 80141f8:	79fb      	ldrb	r3, [r7, #7]
 80141fa:	2b01      	cmp	r3, #1
 80141fc:	d001      	beq.n	8014202 <f_mount+0x6a>
 80141fe:	2300      	movs	r3, #0
 8014200:	e00a      	b.n	8014218 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8014202:	f107 010c 	add.w	r1, r7, #12
 8014206:	f107 0308 	add.w	r3, r7, #8
 801420a:	2200      	movs	r2, #0
 801420c:	4618      	mov	r0, r3
 801420e:	f7ff fd05 	bl	8013c1c <find_volume>
 8014212:	4603      	mov	r3, r0
 8014214:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8014216:	7dfb      	ldrb	r3, [r7, #23]
}
 8014218:	4618      	mov	r0, r3
 801421a:	3720      	adds	r7, #32
 801421c:	46bd      	mov	sp, r7
 801421e:	bd80      	pop	{r7, pc}
 8014220:	240054a0 	.word	0x240054a0

08014224 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014224:	b580      	push	{r7, lr}
 8014226:	b09a      	sub	sp, #104	@ 0x68
 8014228:	af00      	add	r7, sp, #0
 801422a:	60f8      	str	r0, [r7, #12]
 801422c:	60b9      	str	r1, [r7, #8]
 801422e:	4613      	mov	r3, r2
 8014230:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d101      	bne.n	801423c <f_open+0x18>
 8014238:	2309      	movs	r3, #9
 801423a:	e1b7      	b.n	80145ac <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801423c:	79fb      	ldrb	r3, [r7, #7]
 801423e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014242:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8014244:	79fa      	ldrb	r2, [r7, #7]
 8014246:	f107 0114 	add.w	r1, r7, #20
 801424a:	f107 0308 	add.w	r3, r7, #8
 801424e:	4618      	mov	r0, r3
 8014250:	f7ff fce4 	bl	8013c1c <find_volume>
 8014254:	4603      	mov	r3, r0
 8014256:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 801425a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801425e:	2b00      	cmp	r3, #0
 8014260:	f040 819b 	bne.w	801459a <f_open+0x376>
		dj.obj.fs = fs;
 8014264:	697b      	ldr	r3, [r7, #20]
 8014266:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8014268:	68ba      	ldr	r2, [r7, #8]
 801426a:	f107 0318 	add.w	r3, r7, #24
 801426e:	4611      	mov	r1, r2
 8014270:	4618      	mov	r0, r3
 8014272:	f7ff fba3 	bl	80139bc <follow_path>
 8014276:	4603      	mov	r3, r0
 8014278:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801427c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8014280:	2b00      	cmp	r3, #0
 8014282:	d118      	bne.n	80142b6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8014284:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014288:	b25b      	sxtb	r3, r3
 801428a:	2b00      	cmp	r3, #0
 801428c:	da03      	bge.n	8014296 <f_open+0x72>
				res = FR_INVALID_NAME;
 801428e:	2306      	movs	r3, #6
 8014290:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8014294:	e00f      	b.n	80142b6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014296:	79fb      	ldrb	r3, [r7, #7]
 8014298:	2b01      	cmp	r3, #1
 801429a:	bf8c      	ite	hi
 801429c:	2301      	movhi	r3, #1
 801429e:	2300      	movls	r3, #0
 80142a0:	b2db      	uxtb	r3, r3
 80142a2:	461a      	mov	r2, r3
 80142a4:	f107 0318 	add.w	r3, r7, #24
 80142a8:	4611      	mov	r1, r2
 80142aa:	4618      	mov	r0, r3
 80142ac:	f7fd fd78 	bl	8011da0 <chk_lock>
 80142b0:	4603      	mov	r3, r0
 80142b2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80142b6:	79fb      	ldrb	r3, [r7, #7]
 80142b8:	f003 031c 	and.w	r3, r3, #28
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d07f      	beq.n	80143c0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80142c0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d017      	beq.n	80142f8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80142c8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80142cc:	2b04      	cmp	r3, #4
 80142ce:	d10e      	bne.n	80142ee <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80142d0:	f7fd fdc2 	bl	8011e58 <enq_lock>
 80142d4:	4603      	mov	r3, r0
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d006      	beq.n	80142e8 <f_open+0xc4>
 80142da:	f107 0318 	add.w	r3, r7, #24
 80142de:	4618      	mov	r0, r3
 80142e0:	f7ff f824 	bl	801332c <dir_register>
 80142e4:	4603      	mov	r3, r0
 80142e6:	e000      	b.n	80142ea <f_open+0xc6>
 80142e8:	2312      	movs	r3, #18
 80142ea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80142ee:	79fb      	ldrb	r3, [r7, #7]
 80142f0:	f043 0308 	orr.w	r3, r3, #8
 80142f4:	71fb      	strb	r3, [r7, #7]
 80142f6:	e010      	b.n	801431a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80142f8:	7fbb      	ldrb	r3, [r7, #30]
 80142fa:	f003 0311 	and.w	r3, r3, #17
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d003      	beq.n	801430a <f_open+0xe6>
					res = FR_DENIED;
 8014302:	2307      	movs	r3, #7
 8014304:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8014308:	e007      	b.n	801431a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801430a:	79fb      	ldrb	r3, [r7, #7]
 801430c:	f003 0304 	and.w	r3, r3, #4
 8014310:	2b00      	cmp	r3, #0
 8014312:	d002      	beq.n	801431a <f_open+0xf6>
 8014314:	2308      	movs	r3, #8
 8014316:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801431a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801431e:	2b00      	cmp	r3, #0
 8014320:	d168      	bne.n	80143f4 <f_open+0x1d0>
 8014322:	79fb      	ldrb	r3, [r7, #7]
 8014324:	f003 0308 	and.w	r3, r3, #8
 8014328:	2b00      	cmp	r3, #0
 801432a:	d063      	beq.n	80143f4 <f_open+0x1d0>
				dw = GET_FATTIME();
 801432c:	f7fc fe76 	bl	801101c <get_fattime>
 8014330:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8014332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014334:	330e      	adds	r3, #14
 8014336:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8014338:	4618      	mov	r0, r3
 801433a:	f7fd fc87 	bl	8011c4c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801433e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014340:	3316      	adds	r3, #22
 8014342:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8014344:	4618      	mov	r0, r3
 8014346:	f7fd fc81 	bl	8011c4c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801434a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801434c:	330b      	adds	r3, #11
 801434e:	2220      	movs	r2, #32
 8014350:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8014352:	697b      	ldr	r3, [r7, #20]
 8014354:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014356:	4611      	mov	r1, r2
 8014358:	4618      	mov	r0, r3
 801435a:	f7fe fc56 	bl	8012c0a <ld_clust>
 801435e:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014360:	697b      	ldr	r3, [r7, #20]
 8014362:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014364:	2200      	movs	r2, #0
 8014366:	4618      	mov	r0, r3
 8014368:	f7fe fc6e 	bl	8012c48 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801436c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801436e:	331c      	adds	r3, #28
 8014370:	2100      	movs	r1, #0
 8014372:	4618      	mov	r0, r3
 8014374:	f7fd fc6a 	bl	8011c4c <st_dword>
					fs->wflag = 1;
 8014378:	697b      	ldr	r3, [r7, #20]
 801437a:	2201      	movs	r2, #1
 801437c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801437e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014380:	2b00      	cmp	r3, #0
 8014382:	d037      	beq.n	80143f4 <f_open+0x1d0>
						dw = fs->winsect;
 8014384:	697b      	ldr	r3, [r7, #20]
 8014386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014388:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801438a:	f107 0318 	add.w	r3, r7, #24
 801438e:	2200      	movs	r2, #0
 8014390:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014392:	4618      	mov	r0, r3
 8014394:	f7fe f95e 	bl	8012654 <remove_chain>
 8014398:	4603      	mov	r3, r0
 801439a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 801439e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d126      	bne.n	80143f4 <f_open+0x1d0>
							res = move_window(fs, dw);
 80143a6:	697b      	ldr	r3, [r7, #20]
 80143a8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80143aa:	4618      	mov	r0, r3
 80143ac:	f7fd fea8 	bl	8012100 <move_window>
 80143b0:	4603      	mov	r3, r0
 80143b2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80143b6:	697b      	ldr	r3, [r7, #20]
 80143b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80143ba:	3a01      	subs	r2, #1
 80143bc:	615a      	str	r2, [r3, #20]
 80143be:	e019      	b.n	80143f4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80143c0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d115      	bne.n	80143f4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80143c8:	7fbb      	ldrb	r3, [r7, #30]
 80143ca:	f003 0310 	and.w	r3, r3, #16
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d003      	beq.n	80143da <f_open+0x1b6>
					res = FR_NO_FILE;
 80143d2:	2304      	movs	r3, #4
 80143d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80143d8:	e00c      	b.n	80143f4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80143da:	79fb      	ldrb	r3, [r7, #7]
 80143dc:	f003 0302 	and.w	r3, r3, #2
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d007      	beq.n	80143f4 <f_open+0x1d0>
 80143e4:	7fbb      	ldrb	r3, [r7, #30]
 80143e6:	f003 0301 	and.w	r3, r3, #1
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d002      	beq.n	80143f4 <f_open+0x1d0>
						res = FR_DENIED;
 80143ee:	2307      	movs	r3, #7
 80143f0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80143f4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d126      	bne.n	801444a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80143fc:	79fb      	ldrb	r3, [r7, #7]
 80143fe:	f003 0308 	and.w	r3, r3, #8
 8014402:	2b00      	cmp	r3, #0
 8014404:	d003      	beq.n	801440e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8014406:	79fb      	ldrb	r3, [r7, #7]
 8014408:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801440c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801440e:	697b      	ldr	r3, [r7, #20]
 8014410:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8014416:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801441c:	79fb      	ldrb	r3, [r7, #7]
 801441e:	2b01      	cmp	r3, #1
 8014420:	bf8c      	ite	hi
 8014422:	2301      	movhi	r3, #1
 8014424:	2300      	movls	r3, #0
 8014426:	b2db      	uxtb	r3, r3
 8014428:	461a      	mov	r2, r3
 801442a:	f107 0318 	add.w	r3, r7, #24
 801442e:	4611      	mov	r1, r2
 8014430:	4618      	mov	r0, r3
 8014432:	f7fd fd33 	bl	8011e9c <inc_lock>
 8014436:	4602      	mov	r2, r0
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	691b      	ldr	r3, [r3, #16]
 8014440:	2b00      	cmp	r3, #0
 8014442:	d102      	bne.n	801444a <f_open+0x226>
 8014444:	2302      	movs	r3, #2
 8014446:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801444a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801444e:	2b00      	cmp	r3, #0
 8014450:	f040 80a3 	bne.w	801459a <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014454:	697b      	ldr	r3, [r7, #20]
 8014456:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014458:	4611      	mov	r1, r2
 801445a:	4618      	mov	r0, r3
 801445c:	f7fe fbd5 	bl	8012c0a <ld_clust>
 8014460:	4602      	mov	r2, r0
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8014466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014468:	331c      	adds	r3, #28
 801446a:	4618      	mov	r0, r3
 801446c:	f7fd fbb0 	bl	8011bd0 <ld_dword>
 8014470:	4602      	mov	r2, r0
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	2200      	movs	r2, #0
 801447a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801447c:	697a      	ldr	r2, [r7, #20]
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8014482:	697b      	ldr	r3, [r7, #20]
 8014484:	88da      	ldrh	r2, [r3, #6]
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	79fa      	ldrb	r2, [r7, #7]
 801448e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	2200      	movs	r2, #0
 8014494:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	2200      	movs	r2, #0
 801449a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	2200      	movs	r2, #0
 80144a0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	3330      	adds	r3, #48	@ 0x30
 80144a6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80144aa:	2100      	movs	r1, #0
 80144ac:	4618      	mov	r0, r3
 80144ae:	f7fd fc1a 	bl	8011ce6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80144b2:	79fb      	ldrb	r3, [r7, #7]
 80144b4:	f003 0320 	and.w	r3, r3, #32
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d06e      	beq.n	801459a <f_open+0x376>
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	68db      	ldr	r3, [r3, #12]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d06a      	beq.n	801459a <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	68da      	ldr	r2, [r3, #12]
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80144cc:	697b      	ldr	r3, [r7, #20]
 80144ce:	895b      	ldrh	r3, [r3, #10]
 80144d0:	461a      	mov	r2, r3
 80144d2:	697b      	ldr	r3, [r7, #20]
 80144d4:	899b      	ldrh	r3, [r3, #12]
 80144d6:	fb02 f303 	mul.w	r3, r2, r3
 80144da:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	689b      	ldr	r3, [r3, #8]
 80144e0:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	68db      	ldr	r3, [r3, #12]
 80144e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80144e8:	e016      	b.n	8014518 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80144ee:	4618      	mov	r0, r3
 80144f0:	f7fd fec3 	bl	801227a <get_fat>
 80144f4:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80144f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80144f8:	2b01      	cmp	r3, #1
 80144fa:	d802      	bhi.n	8014502 <f_open+0x2de>
 80144fc:	2302      	movs	r3, #2
 80144fe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014502:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014508:	d102      	bne.n	8014510 <f_open+0x2ec>
 801450a:	2301      	movs	r3, #1
 801450c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014510:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014512:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014514:	1ad3      	subs	r3, r2, r3
 8014516:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014518:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801451c:	2b00      	cmp	r3, #0
 801451e:	d103      	bne.n	8014528 <f_open+0x304>
 8014520:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014522:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014524:	429a      	cmp	r2, r3
 8014526:	d8e0      	bhi.n	80144ea <f_open+0x2c6>
				}
				fp->clust = clst;
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801452c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801452e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8014532:	2b00      	cmp	r3, #0
 8014534:	d131      	bne.n	801459a <f_open+0x376>
 8014536:	697b      	ldr	r3, [r7, #20]
 8014538:	899b      	ldrh	r3, [r3, #12]
 801453a:	461a      	mov	r2, r3
 801453c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801453e:	fbb3 f1f2 	udiv	r1, r3, r2
 8014542:	fb01 f202 	mul.w	r2, r1, r2
 8014546:	1a9b      	subs	r3, r3, r2
 8014548:	2b00      	cmp	r3, #0
 801454a:	d026      	beq.n	801459a <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801454c:	697b      	ldr	r3, [r7, #20]
 801454e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8014550:	4618      	mov	r0, r3
 8014552:	f7fd fe73 	bl	801223c <clust2sect>
 8014556:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8014558:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801455a:	2b00      	cmp	r3, #0
 801455c:	d103      	bne.n	8014566 <f_open+0x342>
						res = FR_INT_ERR;
 801455e:	2302      	movs	r3, #2
 8014560:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8014564:	e019      	b.n	801459a <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8014566:	697b      	ldr	r3, [r7, #20]
 8014568:	899b      	ldrh	r3, [r3, #12]
 801456a:	461a      	mov	r2, r3
 801456c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801456e:	fbb3 f2f2 	udiv	r2, r3, r2
 8014572:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014574:	441a      	add	r2, r3
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801457a:	697b      	ldr	r3, [r7, #20]
 801457c:	7858      	ldrb	r0, [r3, #1]
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	6a1a      	ldr	r2, [r3, #32]
 8014588:	2301      	movs	r3, #1
 801458a:	f7fd faab 	bl	8011ae4 <disk_read>
 801458e:	4603      	mov	r3, r0
 8014590:	2b00      	cmp	r3, #0
 8014592:	d002      	beq.n	801459a <f_open+0x376>
 8014594:	2301      	movs	r3, #1
 8014596:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801459a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d002      	beq.n	80145a8 <f_open+0x384>
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	2200      	movs	r2, #0
 80145a6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80145a8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80145ac:	4618      	mov	r0, r3
 80145ae:	3768      	adds	r7, #104	@ 0x68
 80145b0:	46bd      	mov	sp, r7
 80145b2:	bd80      	pop	{r7, pc}

080145b4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80145b4:	b580      	push	{r7, lr}
 80145b6:	b08e      	sub	sp, #56	@ 0x38
 80145b8:	af00      	add	r7, sp, #0
 80145ba:	60f8      	str	r0, [r7, #12]
 80145bc:	60b9      	str	r1, [r7, #8]
 80145be:	607a      	str	r2, [r7, #4]
 80145c0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80145c2:	68bb      	ldr	r3, [r7, #8]
 80145c4:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80145c6:	683b      	ldr	r3, [r7, #0]
 80145c8:	2200      	movs	r2, #0
 80145ca:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	f107 0214 	add.w	r2, r7, #20
 80145d2:	4611      	mov	r1, r2
 80145d4:	4618      	mov	r0, r3
 80145d6:	f7ff fda9 	bl	801412c <validate>
 80145da:	4603      	mov	r3, r0
 80145dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80145e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d107      	bne.n	80145f8 <f_read+0x44>
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	7d5b      	ldrb	r3, [r3, #21]
 80145ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80145f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d002      	beq.n	80145fe <f_read+0x4a>
 80145f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80145fc:	e135      	b.n	801486a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	7d1b      	ldrb	r3, [r3, #20]
 8014602:	f003 0301 	and.w	r3, r3, #1
 8014606:	2b00      	cmp	r3, #0
 8014608:	d101      	bne.n	801460e <f_read+0x5a>
 801460a:	2307      	movs	r3, #7
 801460c:	e12d      	b.n	801486a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	68da      	ldr	r2, [r3, #12]
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	699b      	ldr	r3, [r3, #24]
 8014616:	1ad3      	subs	r3, r2, r3
 8014618:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801461a:	687a      	ldr	r2, [r7, #4]
 801461c:	6a3b      	ldr	r3, [r7, #32]
 801461e:	429a      	cmp	r2, r3
 8014620:	f240 811e 	bls.w	8014860 <f_read+0x2ac>
 8014624:	6a3b      	ldr	r3, [r7, #32]
 8014626:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8014628:	e11a      	b.n	8014860 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	699b      	ldr	r3, [r3, #24]
 801462e:	697a      	ldr	r2, [r7, #20]
 8014630:	8992      	ldrh	r2, [r2, #12]
 8014632:	fbb3 f1f2 	udiv	r1, r3, r2
 8014636:	fb01 f202 	mul.w	r2, r1, r2
 801463a:	1a9b      	subs	r3, r3, r2
 801463c:	2b00      	cmp	r3, #0
 801463e:	f040 80d5 	bne.w	80147ec <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	699b      	ldr	r3, [r3, #24]
 8014646:	697a      	ldr	r2, [r7, #20]
 8014648:	8992      	ldrh	r2, [r2, #12]
 801464a:	fbb3 f3f2 	udiv	r3, r3, r2
 801464e:	697a      	ldr	r2, [r7, #20]
 8014650:	8952      	ldrh	r2, [r2, #10]
 8014652:	3a01      	subs	r2, #1
 8014654:	4013      	ands	r3, r2
 8014656:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8014658:	69fb      	ldr	r3, [r7, #28]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d12f      	bne.n	80146be <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	699b      	ldr	r3, [r3, #24]
 8014662:	2b00      	cmp	r3, #0
 8014664:	d103      	bne.n	801466e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	689b      	ldr	r3, [r3, #8]
 801466a:	633b      	str	r3, [r7, #48]	@ 0x30
 801466c:	e013      	b.n	8014696 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014672:	2b00      	cmp	r3, #0
 8014674:	d007      	beq.n	8014686 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	699b      	ldr	r3, [r3, #24]
 801467a:	4619      	mov	r1, r3
 801467c:	68f8      	ldr	r0, [r7, #12]
 801467e:	f7fe f8e6 	bl	801284e <clmt_clust>
 8014682:	6338      	str	r0, [r7, #48]	@ 0x30
 8014684:	e007      	b.n	8014696 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8014686:	68fa      	ldr	r2, [r7, #12]
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	69db      	ldr	r3, [r3, #28]
 801468c:	4619      	mov	r1, r3
 801468e:	4610      	mov	r0, r2
 8014690:	f7fd fdf3 	bl	801227a <get_fat>
 8014694:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8014696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014698:	2b01      	cmp	r3, #1
 801469a:	d804      	bhi.n	80146a6 <f_read+0xf2>
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	2202      	movs	r2, #2
 80146a0:	755a      	strb	r2, [r3, #21]
 80146a2:	2302      	movs	r3, #2
 80146a4:	e0e1      	b.n	801486a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80146a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146ac:	d104      	bne.n	80146b8 <f_read+0x104>
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	2201      	movs	r2, #1
 80146b2:	755a      	strb	r2, [r3, #21]
 80146b4:	2301      	movs	r3, #1
 80146b6:	e0d8      	b.n	801486a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80146bc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80146be:	697a      	ldr	r2, [r7, #20]
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	69db      	ldr	r3, [r3, #28]
 80146c4:	4619      	mov	r1, r3
 80146c6:	4610      	mov	r0, r2
 80146c8:	f7fd fdb8 	bl	801223c <clust2sect>
 80146cc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80146ce:	69bb      	ldr	r3, [r7, #24]
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d104      	bne.n	80146de <f_read+0x12a>
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	2202      	movs	r2, #2
 80146d8:	755a      	strb	r2, [r3, #21]
 80146da:	2302      	movs	r3, #2
 80146dc:	e0c5      	b.n	801486a <f_read+0x2b6>
			sect += csect;
 80146de:	69ba      	ldr	r2, [r7, #24]
 80146e0:	69fb      	ldr	r3, [r7, #28]
 80146e2:	4413      	add	r3, r2
 80146e4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80146e6:	697b      	ldr	r3, [r7, #20]
 80146e8:	899b      	ldrh	r3, [r3, #12]
 80146ea:	461a      	mov	r2, r3
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80146f2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80146f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d041      	beq.n	801477e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80146fa:	69fa      	ldr	r2, [r7, #28]
 80146fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146fe:	4413      	add	r3, r2
 8014700:	697a      	ldr	r2, [r7, #20]
 8014702:	8952      	ldrh	r2, [r2, #10]
 8014704:	4293      	cmp	r3, r2
 8014706:	d905      	bls.n	8014714 <f_read+0x160>
					cc = fs->csize - csect;
 8014708:	697b      	ldr	r3, [r7, #20]
 801470a:	895b      	ldrh	r3, [r3, #10]
 801470c:	461a      	mov	r2, r3
 801470e:	69fb      	ldr	r3, [r7, #28]
 8014710:	1ad3      	subs	r3, r2, r3
 8014712:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014714:	697b      	ldr	r3, [r7, #20]
 8014716:	7858      	ldrb	r0, [r3, #1]
 8014718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801471a:	69ba      	ldr	r2, [r7, #24]
 801471c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801471e:	f7fd f9e1 	bl	8011ae4 <disk_read>
 8014722:	4603      	mov	r3, r0
 8014724:	2b00      	cmp	r3, #0
 8014726:	d004      	beq.n	8014732 <f_read+0x17e>
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	2201      	movs	r2, #1
 801472c:	755a      	strb	r2, [r3, #21]
 801472e:	2301      	movs	r3, #1
 8014730:	e09b      	b.n	801486a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	7d1b      	ldrb	r3, [r3, #20]
 8014736:	b25b      	sxtb	r3, r3
 8014738:	2b00      	cmp	r3, #0
 801473a:	da18      	bge.n	801476e <f_read+0x1ba>
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	6a1a      	ldr	r2, [r3, #32]
 8014740:	69bb      	ldr	r3, [r7, #24]
 8014742:	1ad3      	subs	r3, r2, r3
 8014744:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014746:	429a      	cmp	r2, r3
 8014748:	d911      	bls.n	801476e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	6a1a      	ldr	r2, [r3, #32]
 801474e:	69bb      	ldr	r3, [r7, #24]
 8014750:	1ad3      	subs	r3, r2, r3
 8014752:	697a      	ldr	r2, [r7, #20]
 8014754:	8992      	ldrh	r2, [r2, #12]
 8014756:	fb02 f303 	mul.w	r3, r2, r3
 801475a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801475c:	18d0      	adds	r0, r2, r3
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014764:	697b      	ldr	r3, [r7, #20]
 8014766:	899b      	ldrh	r3, [r3, #12]
 8014768:	461a      	mov	r2, r3
 801476a:	f7fd fa9b 	bl	8011ca4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801476e:	697b      	ldr	r3, [r7, #20]
 8014770:	899b      	ldrh	r3, [r3, #12]
 8014772:	461a      	mov	r2, r3
 8014774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014776:	fb02 f303 	mul.w	r3, r2, r3
 801477a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 801477c:	e05c      	b.n	8014838 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	6a1b      	ldr	r3, [r3, #32]
 8014782:	69ba      	ldr	r2, [r7, #24]
 8014784:	429a      	cmp	r2, r3
 8014786:	d02e      	beq.n	80147e6 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	7d1b      	ldrb	r3, [r3, #20]
 801478c:	b25b      	sxtb	r3, r3
 801478e:	2b00      	cmp	r3, #0
 8014790:	da18      	bge.n	80147c4 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014792:	697b      	ldr	r3, [r7, #20]
 8014794:	7858      	ldrb	r0, [r3, #1]
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	6a1a      	ldr	r2, [r3, #32]
 80147a0:	2301      	movs	r3, #1
 80147a2:	f7fd f9bf 	bl	8011b24 <disk_write>
 80147a6:	4603      	mov	r3, r0
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d004      	beq.n	80147b6 <f_read+0x202>
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	2201      	movs	r2, #1
 80147b0:	755a      	strb	r2, [r3, #21]
 80147b2:	2301      	movs	r3, #1
 80147b4:	e059      	b.n	801486a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	7d1b      	ldrb	r3, [r3, #20]
 80147ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80147be:	b2da      	uxtb	r2, r3
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80147c4:	697b      	ldr	r3, [r7, #20]
 80147c6:	7858      	ldrb	r0, [r3, #1]
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80147ce:	2301      	movs	r3, #1
 80147d0:	69ba      	ldr	r2, [r7, #24]
 80147d2:	f7fd f987 	bl	8011ae4 <disk_read>
 80147d6:	4603      	mov	r3, r0
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d004      	beq.n	80147e6 <f_read+0x232>
 80147dc:	68fb      	ldr	r3, [r7, #12]
 80147de:	2201      	movs	r2, #1
 80147e0:	755a      	strb	r2, [r3, #21]
 80147e2:	2301      	movs	r3, #1
 80147e4:	e041      	b.n	801486a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	69ba      	ldr	r2, [r7, #24]
 80147ea:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80147ec:	697b      	ldr	r3, [r7, #20]
 80147ee:	899b      	ldrh	r3, [r3, #12]
 80147f0:	4618      	mov	r0, r3
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	699b      	ldr	r3, [r3, #24]
 80147f6:	697a      	ldr	r2, [r7, #20]
 80147f8:	8992      	ldrh	r2, [r2, #12]
 80147fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80147fe:	fb01 f202 	mul.w	r2, r1, r2
 8014802:	1a9b      	subs	r3, r3, r2
 8014804:	1ac3      	subs	r3, r0, r3
 8014806:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8014808:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	429a      	cmp	r2, r3
 801480e:	d901      	bls.n	8014814 <f_read+0x260>
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801481a:	68fb      	ldr	r3, [r7, #12]
 801481c:	699b      	ldr	r3, [r3, #24]
 801481e:	697a      	ldr	r2, [r7, #20]
 8014820:	8992      	ldrh	r2, [r2, #12]
 8014822:	fbb3 f0f2 	udiv	r0, r3, r2
 8014826:	fb00 f202 	mul.w	r2, r0, r2
 801482a:	1a9b      	subs	r3, r3, r2
 801482c:	440b      	add	r3, r1
 801482e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014830:	4619      	mov	r1, r3
 8014832:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014834:	f7fd fa36 	bl	8011ca4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8014838:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801483a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801483c:	4413      	add	r3, r2
 801483e:	627b      	str	r3, [r7, #36]	@ 0x24
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	699a      	ldr	r2, [r3, #24]
 8014844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014846:	441a      	add	r2, r3
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	619a      	str	r2, [r3, #24]
 801484c:	683b      	ldr	r3, [r7, #0]
 801484e:	681a      	ldr	r2, [r3, #0]
 8014850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014852:	441a      	add	r2, r3
 8014854:	683b      	ldr	r3, [r7, #0]
 8014856:	601a      	str	r2, [r3, #0]
 8014858:	687a      	ldr	r2, [r7, #4]
 801485a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801485c:	1ad3      	subs	r3, r2, r3
 801485e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	2b00      	cmp	r3, #0
 8014864:	f47f aee1 	bne.w	801462a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8014868:	2300      	movs	r3, #0
}
 801486a:	4618      	mov	r0, r3
 801486c:	3738      	adds	r7, #56	@ 0x38
 801486e:	46bd      	mov	sp, r7
 8014870:	bd80      	pop	{r7, pc}

08014872 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014872:	b580      	push	{r7, lr}
 8014874:	b08c      	sub	sp, #48	@ 0x30
 8014876:	af00      	add	r7, sp, #0
 8014878:	60f8      	str	r0, [r7, #12]
 801487a:	60b9      	str	r1, [r7, #8]
 801487c:	607a      	str	r2, [r7, #4]
 801487e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014880:	68bb      	ldr	r3, [r7, #8]
 8014882:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014884:	683b      	ldr	r3, [r7, #0]
 8014886:	2200      	movs	r2, #0
 8014888:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	f107 0210 	add.w	r2, r7, #16
 8014890:	4611      	mov	r1, r2
 8014892:	4618      	mov	r0, r3
 8014894:	f7ff fc4a 	bl	801412c <validate>
 8014898:	4603      	mov	r3, r0
 801489a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801489e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d107      	bne.n	80148b6 <f_write+0x44>
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	7d5b      	ldrb	r3, [r3, #21]
 80148aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80148ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d002      	beq.n	80148bc <f_write+0x4a>
 80148b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80148ba:	e16a      	b.n	8014b92 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	7d1b      	ldrb	r3, [r3, #20]
 80148c0:	f003 0302 	and.w	r3, r3, #2
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d101      	bne.n	80148cc <f_write+0x5a>
 80148c8:	2307      	movs	r3, #7
 80148ca:	e162      	b.n	8014b92 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	699a      	ldr	r2, [r3, #24]
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	441a      	add	r2, r3
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	699b      	ldr	r3, [r3, #24]
 80148d8:	429a      	cmp	r2, r3
 80148da:	f080 814c 	bcs.w	8014b76 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	699b      	ldr	r3, [r3, #24]
 80148e2:	43db      	mvns	r3, r3
 80148e4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80148e6:	e146      	b.n	8014b76 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	699b      	ldr	r3, [r3, #24]
 80148ec:	693a      	ldr	r2, [r7, #16]
 80148ee:	8992      	ldrh	r2, [r2, #12]
 80148f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80148f4:	fb01 f202 	mul.w	r2, r1, r2
 80148f8:	1a9b      	subs	r3, r3, r2
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	f040 80f1 	bne.w	8014ae2 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	699b      	ldr	r3, [r3, #24]
 8014904:	693a      	ldr	r2, [r7, #16]
 8014906:	8992      	ldrh	r2, [r2, #12]
 8014908:	fbb3 f3f2 	udiv	r3, r3, r2
 801490c:	693a      	ldr	r2, [r7, #16]
 801490e:	8952      	ldrh	r2, [r2, #10]
 8014910:	3a01      	subs	r2, #1
 8014912:	4013      	ands	r3, r2
 8014914:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8014916:	69bb      	ldr	r3, [r7, #24]
 8014918:	2b00      	cmp	r3, #0
 801491a:	d143      	bne.n	80149a4 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	699b      	ldr	r3, [r3, #24]
 8014920:	2b00      	cmp	r3, #0
 8014922:	d10c      	bne.n	801493e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	689b      	ldr	r3, [r3, #8]
 8014928:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801492a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801492c:	2b00      	cmp	r3, #0
 801492e:	d11a      	bne.n	8014966 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	2100      	movs	r1, #0
 8014934:	4618      	mov	r0, r3
 8014936:	f7fd fef2 	bl	801271e <create_chain>
 801493a:	62b8      	str	r0, [r7, #40]	@ 0x28
 801493c:	e013      	b.n	8014966 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014942:	2b00      	cmp	r3, #0
 8014944:	d007      	beq.n	8014956 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	699b      	ldr	r3, [r3, #24]
 801494a:	4619      	mov	r1, r3
 801494c:	68f8      	ldr	r0, [r7, #12]
 801494e:	f7fd ff7e 	bl	801284e <clmt_clust>
 8014952:	62b8      	str	r0, [r7, #40]	@ 0x28
 8014954:	e007      	b.n	8014966 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014956:	68fa      	ldr	r2, [r7, #12]
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	69db      	ldr	r3, [r3, #28]
 801495c:	4619      	mov	r1, r3
 801495e:	4610      	mov	r0, r2
 8014960:	f7fd fedd 	bl	801271e <create_chain>
 8014964:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014968:	2b00      	cmp	r3, #0
 801496a:	f000 8109 	beq.w	8014b80 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801496e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014970:	2b01      	cmp	r3, #1
 8014972:	d104      	bne.n	801497e <f_write+0x10c>
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	2202      	movs	r2, #2
 8014978:	755a      	strb	r2, [r3, #21]
 801497a:	2302      	movs	r3, #2
 801497c:	e109      	b.n	8014b92 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801497e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014984:	d104      	bne.n	8014990 <f_write+0x11e>
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	2201      	movs	r2, #1
 801498a:	755a      	strb	r2, [r3, #21]
 801498c:	2301      	movs	r3, #1
 801498e:	e100      	b.n	8014b92 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014994:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	689b      	ldr	r3, [r3, #8]
 801499a:	2b00      	cmp	r3, #0
 801499c:	d102      	bne.n	80149a4 <f_write+0x132>
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80149a2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	7d1b      	ldrb	r3, [r3, #20]
 80149a8:	b25b      	sxtb	r3, r3
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	da18      	bge.n	80149e0 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80149ae:	693b      	ldr	r3, [r7, #16]
 80149b0:	7858      	ldrb	r0, [r3, #1]
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	6a1a      	ldr	r2, [r3, #32]
 80149bc:	2301      	movs	r3, #1
 80149be:	f7fd f8b1 	bl	8011b24 <disk_write>
 80149c2:	4603      	mov	r3, r0
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d004      	beq.n	80149d2 <f_write+0x160>
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	2201      	movs	r2, #1
 80149cc:	755a      	strb	r2, [r3, #21]
 80149ce:	2301      	movs	r3, #1
 80149d0:	e0df      	b.n	8014b92 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	7d1b      	ldrb	r3, [r3, #20]
 80149d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80149da:	b2da      	uxtb	r2, r3
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80149e0:	693a      	ldr	r2, [r7, #16]
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	69db      	ldr	r3, [r3, #28]
 80149e6:	4619      	mov	r1, r3
 80149e8:	4610      	mov	r0, r2
 80149ea:	f7fd fc27 	bl	801223c <clust2sect>
 80149ee:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80149f0:	697b      	ldr	r3, [r7, #20]
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d104      	bne.n	8014a00 <f_write+0x18e>
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	2202      	movs	r2, #2
 80149fa:	755a      	strb	r2, [r3, #21]
 80149fc:	2302      	movs	r3, #2
 80149fe:	e0c8      	b.n	8014b92 <f_write+0x320>
			sect += csect;
 8014a00:	697a      	ldr	r2, [r7, #20]
 8014a02:	69bb      	ldr	r3, [r7, #24]
 8014a04:	4413      	add	r3, r2
 8014a06:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8014a08:	693b      	ldr	r3, [r7, #16]
 8014a0a:	899b      	ldrh	r3, [r3, #12]
 8014a0c:	461a      	mov	r2, r3
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	fbb3 f3f2 	udiv	r3, r3, r2
 8014a14:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8014a16:	6a3b      	ldr	r3, [r7, #32]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d043      	beq.n	8014aa4 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014a1c:	69ba      	ldr	r2, [r7, #24]
 8014a1e:	6a3b      	ldr	r3, [r7, #32]
 8014a20:	4413      	add	r3, r2
 8014a22:	693a      	ldr	r2, [r7, #16]
 8014a24:	8952      	ldrh	r2, [r2, #10]
 8014a26:	4293      	cmp	r3, r2
 8014a28:	d905      	bls.n	8014a36 <f_write+0x1c4>
					cc = fs->csize - csect;
 8014a2a:	693b      	ldr	r3, [r7, #16]
 8014a2c:	895b      	ldrh	r3, [r3, #10]
 8014a2e:	461a      	mov	r2, r3
 8014a30:	69bb      	ldr	r3, [r7, #24]
 8014a32:	1ad3      	subs	r3, r2, r3
 8014a34:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014a36:	693b      	ldr	r3, [r7, #16]
 8014a38:	7858      	ldrb	r0, [r3, #1]
 8014a3a:	6a3b      	ldr	r3, [r7, #32]
 8014a3c:	697a      	ldr	r2, [r7, #20]
 8014a3e:	69f9      	ldr	r1, [r7, #28]
 8014a40:	f7fd f870 	bl	8011b24 <disk_write>
 8014a44:	4603      	mov	r3, r0
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d004      	beq.n	8014a54 <f_write+0x1e2>
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	2201      	movs	r2, #1
 8014a4e:	755a      	strb	r2, [r3, #21]
 8014a50:	2301      	movs	r3, #1
 8014a52:	e09e      	b.n	8014b92 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	6a1a      	ldr	r2, [r3, #32]
 8014a58:	697b      	ldr	r3, [r7, #20]
 8014a5a:	1ad3      	subs	r3, r2, r3
 8014a5c:	6a3a      	ldr	r2, [r7, #32]
 8014a5e:	429a      	cmp	r2, r3
 8014a60:	d918      	bls.n	8014a94 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	6a1a      	ldr	r2, [r3, #32]
 8014a6c:	697b      	ldr	r3, [r7, #20]
 8014a6e:	1ad3      	subs	r3, r2, r3
 8014a70:	693a      	ldr	r2, [r7, #16]
 8014a72:	8992      	ldrh	r2, [r2, #12]
 8014a74:	fb02 f303 	mul.w	r3, r2, r3
 8014a78:	69fa      	ldr	r2, [r7, #28]
 8014a7a:	18d1      	adds	r1, r2, r3
 8014a7c:	693b      	ldr	r3, [r7, #16]
 8014a7e:	899b      	ldrh	r3, [r3, #12]
 8014a80:	461a      	mov	r2, r3
 8014a82:	f7fd f90f 	bl	8011ca4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	7d1b      	ldrb	r3, [r3, #20]
 8014a8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014a8e:	b2da      	uxtb	r2, r3
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014a94:	693b      	ldr	r3, [r7, #16]
 8014a96:	899b      	ldrh	r3, [r3, #12]
 8014a98:	461a      	mov	r2, r3
 8014a9a:	6a3b      	ldr	r3, [r7, #32]
 8014a9c:	fb02 f303 	mul.w	r3, r2, r3
 8014aa0:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8014aa2:	e04b      	b.n	8014b3c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	6a1b      	ldr	r3, [r3, #32]
 8014aa8:	697a      	ldr	r2, [r7, #20]
 8014aaa:	429a      	cmp	r2, r3
 8014aac:	d016      	beq.n	8014adc <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	699a      	ldr	r2, [r3, #24]
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014ab6:	429a      	cmp	r2, r3
 8014ab8:	d210      	bcs.n	8014adc <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8014aba:	693b      	ldr	r3, [r7, #16]
 8014abc:	7858      	ldrb	r0, [r3, #1]
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014ac4:	2301      	movs	r3, #1
 8014ac6:	697a      	ldr	r2, [r7, #20]
 8014ac8:	f7fd f80c 	bl	8011ae4 <disk_read>
 8014acc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d004      	beq.n	8014adc <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	2201      	movs	r2, #1
 8014ad6:	755a      	strb	r2, [r3, #21]
 8014ad8:	2301      	movs	r3, #1
 8014ada:	e05a      	b.n	8014b92 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	697a      	ldr	r2, [r7, #20]
 8014ae0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014ae2:	693b      	ldr	r3, [r7, #16]
 8014ae4:	899b      	ldrh	r3, [r3, #12]
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	699b      	ldr	r3, [r3, #24]
 8014aec:	693a      	ldr	r2, [r7, #16]
 8014aee:	8992      	ldrh	r2, [r2, #12]
 8014af0:	fbb3 f1f2 	udiv	r1, r3, r2
 8014af4:	fb01 f202 	mul.w	r2, r1, r2
 8014af8:	1a9b      	subs	r3, r3, r2
 8014afa:	1ac3      	subs	r3, r0, r3
 8014afc:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8014afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	429a      	cmp	r2, r3
 8014b04:	d901      	bls.n	8014b0a <f_write+0x298>
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	699b      	ldr	r3, [r3, #24]
 8014b14:	693a      	ldr	r2, [r7, #16]
 8014b16:	8992      	ldrh	r2, [r2, #12]
 8014b18:	fbb3 f0f2 	udiv	r0, r3, r2
 8014b1c:	fb00 f202 	mul.w	r2, r0, r2
 8014b20:	1a9b      	subs	r3, r3, r2
 8014b22:	440b      	add	r3, r1
 8014b24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014b26:	69f9      	ldr	r1, [r7, #28]
 8014b28:	4618      	mov	r0, r3
 8014b2a:	f7fd f8bb 	bl	8011ca4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	7d1b      	ldrb	r3, [r3, #20]
 8014b32:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8014b36:	b2da      	uxtb	r2, r3
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8014b3c:	69fa      	ldr	r2, [r7, #28]
 8014b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b40:	4413      	add	r3, r2
 8014b42:	61fb      	str	r3, [r7, #28]
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	699a      	ldr	r2, [r3, #24]
 8014b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b4a:	441a      	add	r2, r3
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	619a      	str	r2, [r3, #24]
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	68da      	ldr	r2, [r3, #12]
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	699b      	ldr	r3, [r3, #24]
 8014b58:	429a      	cmp	r2, r3
 8014b5a:	bf38      	it	cc
 8014b5c:	461a      	movcc	r2, r3
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	60da      	str	r2, [r3, #12]
 8014b62:	683b      	ldr	r3, [r7, #0]
 8014b64:	681a      	ldr	r2, [r3, #0]
 8014b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b68:	441a      	add	r2, r3
 8014b6a:	683b      	ldr	r3, [r7, #0]
 8014b6c:	601a      	str	r2, [r3, #0]
 8014b6e:	687a      	ldr	r2, [r7, #4]
 8014b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b72:	1ad3      	subs	r3, r2, r3
 8014b74:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	f47f aeb5 	bne.w	80148e8 <f_write+0x76>
 8014b7e:	e000      	b.n	8014b82 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014b80:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	7d1b      	ldrb	r3, [r3, #20]
 8014b86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014b8a:	b2da      	uxtb	r2, r3
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8014b90:	2300      	movs	r3, #0
}
 8014b92:	4618      	mov	r0, r3
 8014b94:	3730      	adds	r7, #48	@ 0x30
 8014b96:	46bd      	mov	sp, r7
 8014b98:	bd80      	pop	{r7, pc}

08014b9a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8014b9a:	b580      	push	{r7, lr}
 8014b9c:	b086      	sub	sp, #24
 8014b9e:	af00      	add	r7, sp, #0
 8014ba0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	f107 0208 	add.w	r2, r7, #8
 8014ba8:	4611      	mov	r1, r2
 8014baa:	4618      	mov	r0, r3
 8014bac:	f7ff fabe 	bl	801412c <validate>
 8014bb0:	4603      	mov	r3, r0
 8014bb2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014bb4:	7dfb      	ldrb	r3, [r7, #23]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d168      	bne.n	8014c8c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	7d1b      	ldrb	r3, [r3, #20]
 8014bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d062      	beq.n	8014c8c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	7d1b      	ldrb	r3, [r3, #20]
 8014bca:	b25b      	sxtb	r3, r3
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	da15      	bge.n	8014bfc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8014bd0:	68bb      	ldr	r3, [r7, #8]
 8014bd2:	7858      	ldrb	r0, [r3, #1]
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	6a1a      	ldr	r2, [r3, #32]
 8014bde:	2301      	movs	r3, #1
 8014be0:	f7fc ffa0 	bl	8011b24 <disk_write>
 8014be4:	4603      	mov	r3, r0
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d001      	beq.n	8014bee <f_sync+0x54>
 8014bea:	2301      	movs	r3, #1
 8014bec:	e04f      	b.n	8014c8e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	7d1b      	ldrb	r3, [r3, #20]
 8014bf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014bf6:	b2da      	uxtb	r2, r3
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8014bfc:	f7fc fa0e 	bl	801101c <get_fattime>
 8014c00:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014c02:	68ba      	ldr	r2, [r7, #8]
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014c08:	4619      	mov	r1, r3
 8014c0a:	4610      	mov	r0, r2
 8014c0c:	f7fd fa78 	bl	8012100 <move_window>
 8014c10:	4603      	mov	r3, r0
 8014c12:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8014c14:	7dfb      	ldrb	r3, [r7, #23]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d138      	bne.n	8014c8c <f_sync+0xf2>
					dir = fp->dir_ptr;
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014c1e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	330b      	adds	r3, #11
 8014c24:	781a      	ldrb	r2, [r3, #0]
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	330b      	adds	r3, #11
 8014c2a:	f042 0220 	orr.w	r2, r2, #32
 8014c2e:	b2d2      	uxtb	r2, r2
 8014c30:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	6818      	ldr	r0, [r3, #0]
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	689b      	ldr	r3, [r3, #8]
 8014c3a:	461a      	mov	r2, r3
 8014c3c:	68f9      	ldr	r1, [r7, #12]
 8014c3e:	f7fe f803 	bl	8012c48 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	f103 021c 	add.w	r2, r3, #28
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	68db      	ldr	r3, [r3, #12]
 8014c4c:	4619      	mov	r1, r3
 8014c4e:	4610      	mov	r0, r2
 8014c50:	f7fc fffc 	bl	8011c4c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	3316      	adds	r3, #22
 8014c58:	6939      	ldr	r1, [r7, #16]
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	f7fc fff6 	bl	8011c4c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	3312      	adds	r3, #18
 8014c64:	2100      	movs	r1, #0
 8014c66:	4618      	mov	r0, r3
 8014c68:	f7fc ffd5 	bl	8011c16 <st_word>
					fs->wflag = 1;
 8014c6c:	68bb      	ldr	r3, [r7, #8]
 8014c6e:	2201      	movs	r2, #1
 8014c70:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014c72:	68bb      	ldr	r3, [r7, #8]
 8014c74:	4618      	mov	r0, r3
 8014c76:	f7fd fa71 	bl	801215c <sync_fs>
 8014c7a:	4603      	mov	r3, r0
 8014c7c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	7d1b      	ldrb	r3, [r3, #20]
 8014c82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014c86:	b2da      	uxtb	r2, r3
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8014c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8014c8e:	4618      	mov	r0, r3
 8014c90:	3718      	adds	r7, #24
 8014c92:	46bd      	mov	sp, r7
 8014c94:	bd80      	pop	{r7, pc}

08014c96 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8014c96:	b580      	push	{r7, lr}
 8014c98:	b084      	sub	sp, #16
 8014c9a:	af00      	add	r7, sp, #0
 8014c9c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014c9e:	6878      	ldr	r0, [r7, #4]
 8014ca0:	f7ff ff7b 	bl	8014b9a <f_sync>
 8014ca4:	4603      	mov	r3, r0
 8014ca6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8014ca8:	7bfb      	ldrb	r3, [r7, #15]
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d118      	bne.n	8014ce0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	f107 0208 	add.w	r2, r7, #8
 8014cb4:	4611      	mov	r1, r2
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	f7ff fa38 	bl	801412c <validate>
 8014cbc:	4603      	mov	r3, r0
 8014cbe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014cc0:	7bfb      	ldrb	r3, [r7, #15]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d10c      	bne.n	8014ce0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	691b      	ldr	r3, [r3, #16]
 8014cca:	4618      	mov	r0, r3
 8014ccc:	f7fd f974 	bl	8011fb8 <dec_lock>
 8014cd0:	4603      	mov	r3, r0
 8014cd2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8014cd4:	7bfb      	ldrb	r3, [r7, #15]
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d102      	bne.n	8014ce0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	2200      	movs	r2, #0
 8014cde:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8014ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	3710      	adds	r7, #16
 8014ce6:	46bd      	mov	sp, r7
 8014ce8:	bd80      	pop	{r7, pc}

08014cea <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8014cea:	b590      	push	{r4, r7, lr}
 8014cec:	b093      	sub	sp, #76	@ 0x4c
 8014cee:	af00      	add	r7, sp, #0
 8014cf0:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8014cf2:	f107 010c 	add.w	r1, r7, #12
 8014cf6:	1d3b      	adds	r3, r7, #4
 8014cf8:	2200      	movs	r2, #0
 8014cfa:	4618      	mov	r0, r3
 8014cfc:	f7fe ff8e 	bl	8013c1c <find_volume>
 8014d00:	4603      	mov	r3, r0
 8014d02:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8014d06:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d131      	bne.n	8014d72 <f_chdir+0x88>
		dj.obj.fs = fs;
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	613b      	str	r3, [r7, #16]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8014d12:	687a      	ldr	r2, [r7, #4]
 8014d14:	f107 0310 	add.w	r3, r7, #16
 8014d18:	4611      	mov	r1, r2
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	f7fe fe4e 	bl	80139bc <follow_path>
 8014d20:	4603      	mov	r3, r0
 8014d22:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		if (res == FR_OK) {					/* Follow completed */
 8014d26:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d11a      	bne.n	8014d64 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8014d2e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014d32:	b25b      	sxtb	r3, r3
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	da03      	bge.n	8014d40 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	69ba      	ldr	r2, [r7, #24]
 8014d3c:	61da      	str	r2, [r3, #28]
 8014d3e:	e011      	b.n	8014d64 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8014d40:	7dbb      	ldrb	r3, [r7, #22]
 8014d42:	f003 0310 	and.w	r3, r3, #16
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d009      	beq.n	8014d5e <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014d4e:	68fc      	ldr	r4, [r7, #12]
 8014d50:	4611      	mov	r1, r2
 8014d52:	4618      	mov	r0, r3
 8014d54:	f7fd ff59 	bl	8012c0a <ld_clust>
 8014d58:	4603      	mov	r3, r0
 8014d5a:	61e3      	str	r3, [r4, #28]
 8014d5c:	e002      	b.n	8014d64 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8014d5e:	2305      	movs	r3, #5
 8014d60:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8014d64:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014d68:	2b04      	cmp	r3, #4
 8014d6a:	d102      	bne.n	8014d72 <f_chdir+0x88>
 8014d6c:	2305      	movs	r3, #5
 8014d6e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	}

	LEAVE_FF(fs, res);
 8014d72:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8014d76:	4618      	mov	r0, r3
 8014d78:	374c      	adds	r7, #76	@ 0x4c
 8014d7a:	46bd      	mov	sp, r7
 8014d7c:	bd90      	pop	{r4, r7, pc}

08014d7e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8014d7e:	b580      	push	{r7, lr}
 8014d80:	b090      	sub	sp, #64	@ 0x40
 8014d82:	af00      	add	r7, sp, #0
 8014d84:	6078      	str	r0, [r7, #4]
 8014d86:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	f107 0208 	add.w	r2, r7, #8
 8014d8e:	4611      	mov	r1, r2
 8014d90:	4618      	mov	r0, r3
 8014d92:	f7ff f9cb 	bl	801412c <validate>
 8014d96:	4603      	mov	r3, r0
 8014d98:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8014d9c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d103      	bne.n	8014dac <f_lseek+0x2e>
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	7d5b      	ldrb	r3, [r3, #21]
 8014da8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8014dac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d002      	beq.n	8014dba <f_lseek+0x3c>
 8014db4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014db8:	e201      	b.n	80151be <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	f000 80d9 	beq.w	8014f76 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8014dc4:	683b      	ldr	r3, [r7, #0]
 8014dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014dca:	d15a      	bne.n	8014e82 <f_lseek+0x104>
			tbl = fp->cltbl;
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014dd0:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8014dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dd4:	1d1a      	adds	r2, r3, #4
 8014dd6:	627a      	str	r2, [r7, #36]	@ 0x24
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	617b      	str	r3, [r7, #20]
 8014ddc:	2302      	movs	r3, #2
 8014dde:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	689b      	ldr	r3, [r3, #8]
 8014de4:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8014de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d03a      	beq.n	8014e62 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8014dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dee:	613b      	str	r3, [r7, #16]
 8014df0:	2300      	movs	r3, #0
 8014df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014df6:	3302      	adds	r3, #2
 8014df8:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8014dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dfc:	60fb      	str	r3, [r7, #12]
 8014dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e00:	3301      	adds	r3, #1
 8014e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014e08:	4618      	mov	r0, r3
 8014e0a:	f7fd fa36 	bl	801227a <get_fat>
 8014e0e:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8014e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e12:	2b01      	cmp	r3, #1
 8014e14:	d804      	bhi.n	8014e20 <f_lseek+0xa2>
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	2202      	movs	r2, #2
 8014e1a:	755a      	strb	r2, [r3, #21]
 8014e1c:	2302      	movs	r3, #2
 8014e1e:	e1ce      	b.n	80151be <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e26:	d104      	bne.n	8014e32 <f_lseek+0xb4>
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	2201      	movs	r2, #1
 8014e2c:	755a      	strb	r2, [r3, #21]
 8014e2e:	2301      	movs	r3, #1
 8014e30:	e1c5      	b.n	80151be <f_lseek+0x440>
					} while (cl == pcl + 1);
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	3301      	adds	r3, #1
 8014e36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014e38:	429a      	cmp	r2, r3
 8014e3a:	d0de      	beq.n	8014dfa <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8014e3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014e3e:	697b      	ldr	r3, [r7, #20]
 8014e40:	429a      	cmp	r2, r3
 8014e42:	d809      	bhi.n	8014e58 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8014e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e46:	1d1a      	adds	r2, r3, #4
 8014e48:	627a      	str	r2, [r7, #36]	@ 0x24
 8014e4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014e4c:	601a      	str	r2, [r3, #0]
 8014e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e50:	1d1a      	adds	r2, r3, #4
 8014e52:	627a      	str	r2, [r7, #36]	@ 0x24
 8014e54:	693a      	ldr	r2, [r7, #16]
 8014e56:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8014e58:	68bb      	ldr	r3, [r7, #8]
 8014e5a:	6a1b      	ldr	r3, [r3, #32]
 8014e5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014e5e:	429a      	cmp	r2, r3
 8014e60:	d3c4      	bcc.n	8014dec <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014e68:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8014e6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014e6c:	697b      	ldr	r3, [r7, #20]
 8014e6e:	429a      	cmp	r2, r3
 8014e70:	d803      	bhi.n	8014e7a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8014e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e74:	2200      	movs	r2, #0
 8014e76:	601a      	str	r2, [r3, #0]
 8014e78:	e19f      	b.n	80151ba <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8014e7a:	2311      	movs	r3, #17
 8014e7c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8014e80:	e19b      	b.n	80151ba <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	68db      	ldr	r3, [r3, #12]
 8014e86:	683a      	ldr	r2, [r7, #0]
 8014e88:	429a      	cmp	r2, r3
 8014e8a:	d902      	bls.n	8014e92 <f_lseek+0x114>
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	68db      	ldr	r3, [r3, #12]
 8014e90:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	683a      	ldr	r2, [r7, #0]
 8014e96:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8014e98:	683b      	ldr	r3, [r7, #0]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	f000 818d 	beq.w	80151ba <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8014ea0:	683b      	ldr	r3, [r7, #0]
 8014ea2:	3b01      	subs	r3, #1
 8014ea4:	4619      	mov	r1, r3
 8014ea6:	6878      	ldr	r0, [r7, #4]
 8014ea8:	f7fd fcd1 	bl	801284e <clmt_clust>
 8014eac:	4602      	mov	r2, r0
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8014eb2:	68ba      	ldr	r2, [r7, #8]
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	69db      	ldr	r3, [r3, #28]
 8014eb8:	4619      	mov	r1, r3
 8014eba:	4610      	mov	r0, r2
 8014ebc:	f7fd f9be 	bl	801223c <clust2sect>
 8014ec0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8014ec2:	69bb      	ldr	r3, [r7, #24]
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d104      	bne.n	8014ed2 <f_lseek+0x154>
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	2202      	movs	r2, #2
 8014ecc:	755a      	strb	r2, [r3, #21]
 8014ece:	2302      	movs	r3, #2
 8014ed0:	e175      	b.n	80151be <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8014ed2:	683b      	ldr	r3, [r7, #0]
 8014ed4:	3b01      	subs	r3, #1
 8014ed6:	68ba      	ldr	r2, [r7, #8]
 8014ed8:	8992      	ldrh	r2, [r2, #12]
 8014eda:	fbb3 f3f2 	udiv	r3, r3, r2
 8014ede:	68ba      	ldr	r2, [r7, #8]
 8014ee0:	8952      	ldrh	r2, [r2, #10]
 8014ee2:	3a01      	subs	r2, #1
 8014ee4:	4013      	ands	r3, r2
 8014ee6:	69ba      	ldr	r2, [r7, #24]
 8014ee8:	4413      	add	r3, r2
 8014eea:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	699b      	ldr	r3, [r3, #24]
 8014ef0:	68ba      	ldr	r2, [r7, #8]
 8014ef2:	8992      	ldrh	r2, [r2, #12]
 8014ef4:	fbb3 f1f2 	udiv	r1, r3, r2
 8014ef8:	fb01 f202 	mul.w	r2, r1, r2
 8014efc:	1a9b      	subs	r3, r3, r2
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	f000 815b 	beq.w	80151ba <f_lseek+0x43c>
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	6a1b      	ldr	r3, [r3, #32]
 8014f08:	69ba      	ldr	r2, [r7, #24]
 8014f0a:	429a      	cmp	r2, r3
 8014f0c:	f000 8155 	beq.w	80151ba <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	7d1b      	ldrb	r3, [r3, #20]
 8014f14:	b25b      	sxtb	r3, r3
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	da18      	bge.n	8014f4c <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014f1a:	68bb      	ldr	r3, [r7, #8]
 8014f1c:	7858      	ldrb	r0, [r3, #1]
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	6a1a      	ldr	r2, [r3, #32]
 8014f28:	2301      	movs	r3, #1
 8014f2a:	f7fc fdfb 	bl	8011b24 <disk_write>
 8014f2e:	4603      	mov	r3, r0
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d004      	beq.n	8014f3e <f_lseek+0x1c0>
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	2201      	movs	r2, #1
 8014f38:	755a      	strb	r2, [r3, #21]
 8014f3a:	2301      	movs	r3, #1
 8014f3c:	e13f      	b.n	80151be <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	7d1b      	ldrb	r3, [r3, #20]
 8014f42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014f46:	b2da      	uxtb	r2, r3
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8014f4c:	68bb      	ldr	r3, [r7, #8]
 8014f4e:	7858      	ldrb	r0, [r3, #1]
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014f56:	2301      	movs	r3, #1
 8014f58:	69ba      	ldr	r2, [r7, #24]
 8014f5a:	f7fc fdc3 	bl	8011ae4 <disk_read>
 8014f5e:	4603      	mov	r3, r0
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d004      	beq.n	8014f6e <f_lseek+0x1f0>
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	2201      	movs	r2, #1
 8014f68:	755a      	strb	r2, [r3, #21]
 8014f6a:	2301      	movs	r3, #1
 8014f6c:	e127      	b.n	80151be <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	69ba      	ldr	r2, [r7, #24]
 8014f72:	621a      	str	r2, [r3, #32]
 8014f74:	e121      	b.n	80151ba <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	68db      	ldr	r3, [r3, #12]
 8014f7a:	683a      	ldr	r2, [r7, #0]
 8014f7c:	429a      	cmp	r2, r3
 8014f7e:	d908      	bls.n	8014f92 <f_lseek+0x214>
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	7d1b      	ldrb	r3, [r3, #20]
 8014f84:	f003 0302 	and.w	r3, r3, #2
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d102      	bne.n	8014f92 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	68db      	ldr	r3, [r3, #12]
 8014f90:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	699b      	ldr	r3, [r3, #24]
 8014f96:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8014f98:	2300      	movs	r3, #0
 8014f9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014fa0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8014fa2:	683b      	ldr	r3, [r7, #0]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	f000 80b5 	beq.w	8015114 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8014faa:	68bb      	ldr	r3, [r7, #8]
 8014fac:	895b      	ldrh	r3, [r3, #10]
 8014fae:	461a      	mov	r2, r3
 8014fb0:	68bb      	ldr	r3, [r7, #8]
 8014fb2:	899b      	ldrh	r3, [r3, #12]
 8014fb4:	fb02 f303 	mul.w	r3, r2, r3
 8014fb8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8014fba:	6a3b      	ldr	r3, [r7, #32]
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d01b      	beq.n	8014ff8 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8014fc0:	683b      	ldr	r3, [r7, #0]
 8014fc2:	1e5a      	subs	r2, r3, #1
 8014fc4:	69fb      	ldr	r3, [r7, #28]
 8014fc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8014fca:	6a3b      	ldr	r3, [r7, #32]
 8014fcc:	1e59      	subs	r1, r3, #1
 8014fce:	69fb      	ldr	r3, [r7, #28]
 8014fd0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8014fd4:	429a      	cmp	r2, r3
 8014fd6:	d30f      	bcc.n	8014ff8 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8014fd8:	6a3b      	ldr	r3, [r7, #32]
 8014fda:	1e5a      	subs	r2, r3, #1
 8014fdc:	69fb      	ldr	r3, [r7, #28]
 8014fde:	425b      	negs	r3, r3
 8014fe0:	401a      	ands	r2, r3
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	699b      	ldr	r3, [r3, #24]
 8014fea:	683a      	ldr	r2, [r7, #0]
 8014fec:	1ad3      	subs	r3, r2, r3
 8014fee:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	69db      	ldr	r3, [r3, #28]
 8014ff4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014ff6:	e022      	b.n	801503e <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	689b      	ldr	r3, [r3, #8]
 8014ffc:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8014ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015000:	2b00      	cmp	r3, #0
 8015002:	d119      	bne.n	8015038 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	2100      	movs	r1, #0
 8015008:	4618      	mov	r0, r3
 801500a:	f7fd fb88 	bl	801271e <create_chain>
 801500e:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8015010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015012:	2b01      	cmp	r3, #1
 8015014:	d104      	bne.n	8015020 <f_lseek+0x2a2>
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	2202      	movs	r2, #2
 801501a:	755a      	strb	r2, [r3, #21]
 801501c:	2302      	movs	r3, #2
 801501e:	e0ce      	b.n	80151be <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015026:	d104      	bne.n	8015032 <f_lseek+0x2b4>
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	2201      	movs	r2, #1
 801502c:	755a      	strb	r2, [r3, #21]
 801502e:	2301      	movs	r3, #1
 8015030:	e0c5      	b.n	80151be <f_lseek+0x440>
					fp->obj.sclust = clst;
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015036:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801503c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801503e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015040:	2b00      	cmp	r3, #0
 8015042:	d067      	beq.n	8015114 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8015044:	e03a      	b.n	80150bc <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8015046:	683a      	ldr	r2, [r7, #0]
 8015048:	69fb      	ldr	r3, [r7, #28]
 801504a:	1ad3      	subs	r3, r2, r3
 801504c:	603b      	str	r3, [r7, #0]
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	699a      	ldr	r2, [r3, #24]
 8015052:	69fb      	ldr	r3, [r7, #28]
 8015054:	441a      	add	r2, r3
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	7d1b      	ldrb	r3, [r3, #20]
 801505e:	f003 0302 	and.w	r3, r3, #2
 8015062:	2b00      	cmp	r3, #0
 8015064:	d00b      	beq.n	801507e <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801506a:	4618      	mov	r0, r3
 801506c:	f7fd fb57 	bl	801271e <create_chain>
 8015070:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8015072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015074:	2b00      	cmp	r3, #0
 8015076:	d108      	bne.n	801508a <f_lseek+0x30c>
							ofs = 0; break;
 8015078:	2300      	movs	r3, #0
 801507a:	603b      	str	r3, [r7, #0]
 801507c:	e022      	b.n	80150c4 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015082:	4618      	mov	r0, r3
 8015084:	f7fd f8f9 	bl	801227a <get_fat>
 8015088:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801508a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801508c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015090:	d104      	bne.n	801509c <f_lseek+0x31e>
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	2201      	movs	r2, #1
 8015096:	755a      	strb	r2, [r3, #21]
 8015098:	2301      	movs	r3, #1
 801509a:	e090      	b.n	80151be <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801509c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801509e:	2b01      	cmp	r3, #1
 80150a0:	d904      	bls.n	80150ac <f_lseek+0x32e>
 80150a2:	68bb      	ldr	r3, [r7, #8]
 80150a4:	6a1b      	ldr	r3, [r3, #32]
 80150a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80150a8:	429a      	cmp	r2, r3
 80150aa:	d304      	bcc.n	80150b6 <f_lseek+0x338>
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	2202      	movs	r2, #2
 80150b0:	755a      	strb	r2, [r3, #21]
 80150b2:	2302      	movs	r3, #2
 80150b4:	e083      	b.n	80151be <f_lseek+0x440>
					fp->clust = clst;
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80150ba:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80150bc:	683a      	ldr	r2, [r7, #0]
 80150be:	69fb      	ldr	r3, [r7, #28]
 80150c0:	429a      	cmp	r2, r3
 80150c2:	d8c0      	bhi.n	8015046 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	699a      	ldr	r2, [r3, #24]
 80150c8:	683b      	ldr	r3, [r7, #0]
 80150ca:	441a      	add	r2, r3
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80150d0:	68bb      	ldr	r3, [r7, #8]
 80150d2:	899b      	ldrh	r3, [r3, #12]
 80150d4:	461a      	mov	r2, r3
 80150d6:	683b      	ldr	r3, [r7, #0]
 80150d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80150dc:	fb01 f202 	mul.w	r2, r1, r2
 80150e0:	1a9b      	subs	r3, r3, r2
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d016      	beq.n	8015114 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80150e6:	68bb      	ldr	r3, [r7, #8]
 80150e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80150ea:	4618      	mov	r0, r3
 80150ec:	f7fd f8a6 	bl	801223c <clust2sect>
 80150f0:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80150f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d104      	bne.n	8015102 <f_lseek+0x384>
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	2202      	movs	r2, #2
 80150fc:	755a      	strb	r2, [r3, #21]
 80150fe:	2302      	movs	r3, #2
 8015100:	e05d      	b.n	80151be <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8015102:	68bb      	ldr	r3, [r7, #8]
 8015104:	899b      	ldrh	r3, [r3, #12]
 8015106:	461a      	mov	r2, r3
 8015108:	683b      	ldr	r3, [r7, #0]
 801510a:	fbb3 f3f2 	udiv	r3, r3, r2
 801510e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015110:	4413      	add	r3, r2
 8015112:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	699a      	ldr	r2, [r3, #24]
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	68db      	ldr	r3, [r3, #12]
 801511c:	429a      	cmp	r2, r3
 801511e:	d90a      	bls.n	8015136 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	699a      	ldr	r2, [r3, #24]
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	7d1b      	ldrb	r3, [r3, #20]
 801512c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015130:	b2da      	uxtb	r2, r3
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	699b      	ldr	r3, [r3, #24]
 801513a:	68ba      	ldr	r2, [r7, #8]
 801513c:	8992      	ldrh	r2, [r2, #12]
 801513e:	fbb3 f1f2 	udiv	r1, r3, r2
 8015142:	fb01 f202 	mul.w	r2, r1, r2
 8015146:	1a9b      	subs	r3, r3, r2
 8015148:	2b00      	cmp	r3, #0
 801514a:	d036      	beq.n	80151ba <f_lseek+0x43c>
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	6a1b      	ldr	r3, [r3, #32]
 8015150:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015152:	429a      	cmp	r2, r3
 8015154:	d031      	beq.n	80151ba <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	7d1b      	ldrb	r3, [r3, #20]
 801515a:	b25b      	sxtb	r3, r3
 801515c:	2b00      	cmp	r3, #0
 801515e:	da18      	bge.n	8015192 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015160:	68bb      	ldr	r3, [r7, #8]
 8015162:	7858      	ldrb	r0, [r3, #1]
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	6a1a      	ldr	r2, [r3, #32]
 801516e:	2301      	movs	r3, #1
 8015170:	f7fc fcd8 	bl	8011b24 <disk_write>
 8015174:	4603      	mov	r3, r0
 8015176:	2b00      	cmp	r3, #0
 8015178:	d004      	beq.n	8015184 <f_lseek+0x406>
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	2201      	movs	r2, #1
 801517e:	755a      	strb	r2, [r3, #21]
 8015180:	2301      	movs	r3, #1
 8015182:	e01c      	b.n	80151be <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	7d1b      	ldrb	r3, [r3, #20]
 8015188:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801518c:	b2da      	uxtb	r2, r3
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8015192:	68bb      	ldr	r3, [r7, #8]
 8015194:	7858      	ldrb	r0, [r3, #1]
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801519c:	2301      	movs	r3, #1
 801519e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80151a0:	f7fc fca0 	bl	8011ae4 <disk_read>
 80151a4:	4603      	mov	r3, r0
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d004      	beq.n	80151b4 <f_lseek+0x436>
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	2201      	movs	r2, #1
 80151ae:	755a      	strb	r2, [r3, #21]
 80151b0:	2301      	movs	r3, #1
 80151b2:	e004      	b.n	80151be <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80151b8:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80151ba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80151be:	4618      	mov	r0, r3
 80151c0:	3740      	adds	r7, #64	@ 0x40
 80151c2:	46bd      	mov	sp, r7
 80151c4:	bd80      	pop	{r7, pc}

080151c6 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80151c6:	b580      	push	{r7, lr}
 80151c8:	b0a0      	sub	sp, #128	@ 0x80
 80151ca:	af00      	add	r7, sp, #0
 80151cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80151ce:	2300      	movs	r3, #0
 80151d0:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80151d2:	f107 010c 	add.w	r1, r7, #12
 80151d6:	1d3b      	adds	r3, r7, #4
 80151d8:	2202      	movs	r2, #2
 80151da:	4618      	mov	r0, r3
 80151dc:	f7fe fd1e 	bl	8013c1c <find_volume>
 80151e0:	4603      	mov	r3, r0
 80151e2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	647b      	str	r3, [r7, #68]	@ 0x44
	if (res == FR_OK) {
 80151ea:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	f040 80a4 	bne.w	801533c <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 80151f4:	687a      	ldr	r2, [r7, #4]
 80151f6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80151fa:	4611      	mov	r1, r2
 80151fc:	4618      	mov	r0, r3
 80151fe:	f7fe fbdd 	bl	80139bc <follow_path>
 8015202:	4603      	mov	r3, r0
 8015204:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8015208:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801520c:	2b00      	cmp	r3, #0
 801520e:	d108      	bne.n	8015222 <f_unlink+0x5c>
 8015210:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8015214:	f003 0320 	and.w	r3, r3, #32
 8015218:	2b00      	cmp	r3, #0
 801521a:	d002      	beq.n	8015222 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 801521c:	2306      	movs	r3, #6
 801521e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8015222:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8015226:	2b00      	cmp	r3, #0
 8015228:	d108      	bne.n	801523c <f_unlink+0x76>
 801522a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801522e:	2102      	movs	r1, #2
 8015230:	4618      	mov	r0, r3
 8015232:	f7fc fdb5 	bl	8011da0 <chk_lock>
 8015236:	4603      	mov	r3, r0
 8015238:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801523c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8015240:	2b00      	cmp	r3, #0
 8015242:	d17b      	bne.n	801533c <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8015244:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8015248:	b25b      	sxtb	r3, r3
 801524a:	2b00      	cmp	r3, #0
 801524c:	da03      	bge.n	8015256 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801524e:	2306      	movs	r3, #6
 8015250:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8015254:	e008      	b.n	8015268 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8015256:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801525a:	f003 0301 	and.w	r3, r3, #1
 801525e:	2b00      	cmp	r3, #0
 8015260:	d002      	beq.n	8015268 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8015262:	2307      	movs	r3, #7
 8015264:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 8015268:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801526c:	2b00      	cmp	r3, #0
 801526e:	d13d      	bne.n	80152ec <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8015274:	4611      	mov	r1, r2
 8015276:	4618      	mov	r0, r3
 8015278:	f7fd fcc7 	bl	8012c0a <ld_clust>
 801527c:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801527e:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8015282:	f003 0310 	and.w	r3, r3, #16
 8015286:	2b00      	cmp	r3, #0
 8015288:	d030      	beq.n	80152ec <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	69db      	ldr	r3, [r3, #28]
 801528e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8015290:	429a      	cmp	r2, r3
 8015292:	d103      	bne.n	801529c <f_unlink+0xd6>
						res = FR_DENIED;
 8015294:	2307      	movs	r3, #7
 8015296:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 801529a:	e027      	b.n	80152ec <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80152a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80152a2:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80152a4:	f107 0310 	add.w	r3, r7, #16
 80152a8:	2100      	movs	r1, #0
 80152aa:	4618      	mov	r0, r3
 80152ac:	f7fd fb07 	bl	80128be <dir_sdi>
 80152b0:	4603      	mov	r3, r0
 80152b2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 80152b6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d116      	bne.n	80152ec <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 80152be:	f107 0310 	add.w	r3, r7, #16
 80152c2:	2100      	movs	r1, #0
 80152c4:	4618      	mov	r0, r3
 80152c6:	f7fd feca 	bl	801305e <dir_read>
 80152ca:	4603      	mov	r3, r0
 80152cc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80152d0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d102      	bne.n	80152de <f_unlink+0x118>
 80152d8:	2307      	movs	r3, #7
 80152da:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80152de:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80152e2:	2b04      	cmp	r3, #4
 80152e4:	d102      	bne.n	80152ec <f_unlink+0x126>
 80152e6:	2300      	movs	r3, #0
 80152e8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 80152ec:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d123      	bne.n	801533c <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80152f4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80152f8:	4618      	mov	r0, r3
 80152fa:	f7fe f90f 	bl	801351c <dir_remove>
 80152fe:	4603      	mov	r3, r0
 8015300:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8015304:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8015308:	2b00      	cmp	r3, #0
 801530a:	d10c      	bne.n	8015326 <f_unlink+0x160>
 801530c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801530e:	2b00      	cmp	r3, #0
 8015310:	d009      	beq.n	8015326 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8015312:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8015316:	2200      	movs	r2, #0
 8015318:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801531a:	4618      	mov	r0, r3
 801531c:	f7fd f99a 	bl	8012654 <remove_chain>
 8015320:	4603      	mov	r3, r0
 8015322:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8015326:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801532a:	2b00      	cmp	r3, #0
 801532c:	d106      	bne.n	801533c <f_unlink+0x176>
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	4618      	mov	r0, r3
 8015332:	f7fc ff13 	bl	801215c <sync_fs>
 8015336:	4603      	mov	r3, r0
 8015338:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801533c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8015340:	4618      	mov	r0, r3
 8015342:	3780      	adds	r7, #128	@ 0x80
 8015344:	46bd      	mov	sp, r7
 8015346:	bd80      	pop	{r7, pc}

08015348 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8015348:	b580      	push	{r7, lr}
 801534a:	b098      	sub	sp, #96	@ 0x60
 801534c:	af00      	add	r7, sp, #0
 801534e:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8015350:	f107 010c 	add.w	r1, r7, #12
 8015354:	1d3b      	adds	r3, r7, #4
 8015356:	2202      	movs	r2, #2
 8015358:	4618      	mov	r0, r3
 801535a:	f7fe fc5f 	bl	8013c1c <find_volume>
 801535e:	4603      	mov	r3, r0
 8015360:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	dj.obj.fs = fs;
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 8015368:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801536c:	2b00      	cmp	r3, #0
 801536e:	f040 80ff 	bne.w	8015570 <f_mkdir+0x228>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8015372:	687a      	ldr	r2, [r7, #4]
 8015374:	f107 0310 	add.w	r3, r7, #16
 8015378:	4611      	mov	r1, r2
 801537a:	4618      	mov	r0, r3
 801537c:	f7fe fb1e 	bl	80139bc <follow_path>
 8015380:	4603      	mov	r3, r0
 8015382:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8015386:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801538a:	2b00      	cmp	r3, #0
 801538c:	d102      	bne.n	8015394 <f_mkdir+0x4c>
 801538e:	2308      	movs	r3, #8
 8015390:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8015394:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015398:	2b04      	cmp	r3, #4
 801539a:	d108      	bne.n	80153ae <f_mkdir+0x66>
 801539c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80153a0:	f003 0320 	and.w	r3, r3, #32
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d002      	beq.n	80153ae <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 80153a8:	2306      	movs	r3, #6
 80153aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80153ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80153b2:	2b04      	cmp	r3, #4
 80153b4:	f040 80dc 	bne.w	8015570 <f_mkdir+0x228>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80153b8:	f107 0310 	add.w	r3, r7, #16
 80153bc:	2100      	movs	r1, #0
 80153be:	4618      	mov	r0, r3
 80153c0:	f7fd f9ad 	bl	801271e <create_chain>
 80153c4:	64f8      	str	r0, [r7, #76]	@ 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	895b      	ldrh	r3, [r3, #10]
 80153ca:	461a      	mov	r2, r3
 80153cc:	68fb      	ldr	r3, [r7, #12]
 80153ce:	899b      	ldrh	r3, [r3, #12]
 80153d0:	fb02 f303 	mul.w	r3, r2, r3
 80153d4:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 80153d6:	2300      	movs	r3, #0
 80153d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80153dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d102      	bne.n	80153e8 <f_mkdir+0xa0>
 80153e2:	2307      	movs	r3, #7
 80153e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 80153e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80153ea:	2b01      	cmp	r3, #1
 80153ec:	d102      	bne.n	80153f4 <f_mkdir+0xac>
 80153ee:	2302      	movs	r3, #2
 80153f0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80153f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80153f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153fa:	d102      	bne.n	8015402 <f_mkdir+0xba>
 80153fc:	2301      	movs	r3, #1
 80153fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8015402:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015406:	2b00      	cmp	r3, #0
 8015408:	d106      	bne.n	8015418 <f_mkdir+0xd0>
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	4618      	mov	r0, r3
 801540e:	f7fc fe33 	bl	8012078 <sync_window>
 8015412:	4603      	mov	r3, r0
 8015414:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			tm = GET_FATTIME();
 8015418:	f7fb fe00 	bl	801101c <get_fattime>
 801541c:	64b8      	str	r0, [r7, #72]	@ 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 801541e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015422:	2b00      	cmp	r3, #0
 8015424:	d16c      	bne.n	8015500 <f_mkdir+0x1b8>
				dsc = clust2sect(fs, dcl);
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801542a:	4618      	mov	r0, r3
 801542c:	f7fc ff06 	bl	801223c <clust2sect>
 8015430:	6578      	str	r0, [r7, #84]	@ 0x54
				dir = fs->win;
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	333c      	adds	r3, #60	@ 0x3c
 8015436:	647b      	str	r3, [r7, #68]	@ 0x44
				mem_set(dir, 0, SS(fs));
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	899b      	ldrh	r3, [r3, #12]
 801543c:	461a      	mov	r2, r3
 801543e:	2100      	movs	r1, #0
 8015440:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8015442:	f7fc fc50 	bl	8011ce6 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8015446:	220b      	movs	r2, #11
 8015448:	2120      	movs	r1, #32
 801544a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801544c:	f7fc fc4b 	bl	8011ce6 <mem_set>
					dir[DIR_Name] = '.';
 8015450:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015452:	222e      	movs	r2, #46	@ 0x2e
 8015454:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8015456:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015458:	330b      	adds	r3, #11
 801545a:	2210      	movs	r2, #16
 801545c:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 801545e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015460:	3316      	adds	r3, #22
 8015462:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8015464:	4618      	mov	r0, r3
 8015466:	f7fc fbf1 	bl	8011c4c <st_dword>
					st_clust(fs, dir, dcl);
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801546e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8015470:	4618      	mov	r0, r3
 8015472:	f7fd fbe9 	bl	8012c48 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8015476:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015478:	3320      	adds	r3, #32
 801547a:	2220      	movs	r2, #32
 801547c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801547e:	4618      	mov	r0, r3
 8015480:	f7fc fc10 	bl	8011ca4 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8015484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015486:	3321      	adds	r3, #33	@ 0x21
 8015488:	222e      	movs	r2, #46	@ 0x2e
 801548a:	701a      	strb	r2, [r3, #0]
 801548c:	69bb      	ldr	r3, [r7, #24]
 801548e:	653b      	str	r3, [r7, #80]	@ 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	781b      	ldrb	r3, [r3, #0]
 8015494:	2b03      	cmp	r3, #3
 8015496:	d106      	bne.n	80154a6 <f_mkdir+0x15e>
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801549c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801549e:	429a      	cmp	r2, r3
 80154a0:	d101      	bne.n	80154a6 <f_mkdir+0x15e>
 80154a2:	2300      	movs	r3, #0
 80154a4:	653b      	str	r3, [r7, #80]	@ 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 80154a6:	68f8      	ldr	r0, [r7, #12]
 80154a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80154aa:	3320      	adds	r3, #32
 80154ac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80154ae:	4619      	mov	r1, r3
 80154b0:	f7fd fbca 	bl	8012c48 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	895b      	ldrh	r3, [r3, #10]
 80154b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80154ba:	e01c      	b.n	80154f6 <f_mkdir+0x1ae>
					fs->winsect = dsc++;
 80154bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80154be:	1c5a      	adds	r2, r3, #1
 80154c0:	657a      	str	r2, [r7, #84]	@ 0x54
 80154c2:	68fa      	ldr	r2, [r7, #12]
 80154c4:	6393      	str	r3, [r2, #56]	@ 0x38
					fs->wflag = 1;
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	2201      	movs	r2, #1
 80154ca:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80154cc:	68fb      	ldr	r3, [r7, #12]
 80154ce:	4618      	mov	r0, r3
 80154d0:	f7fc fdd2 	bl	8012078 <sync_window>
 80154d4:	4603      	mov	r3, r0
 80154d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (res != FR_OK) break;
 80154da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d10d      	bne.n	80154fe <f_mkdir+0x1b6>
					mem_set(dir, 0, SS(fs));
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	899b      	ldrh	r3, [r3, #12]
 80154e6:	461a      	mov	r2, r3
 80154e8:	2100      	movs	r1, #0
 80154ea:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80154ec:	f7fc fbfb 	bl	8011ce6 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80154f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80154f2:	3b01      	subs	r3, #1
 80154f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80154f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	d1df      	bne.n	80154bc <f_mkdir+0x174>
 80154fc:	e000      	b.n	8015500 <f_mkdir+0x1b8>
					if (res != FR_OK) break;
 80154fe:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8015500:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015504:	2b00      	cmp	r3, #0
 8015506:	d107      	bne.n	8015518 <f_mkdir+0x1d0>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8015508:	f107 0310 	add.w	r3, r7, #16
 801550c:	4618      	mov	r0, r3
 801550e:	f7fd ff0d 	bl	801332c <dir_register>
 8015512:	4603      	mov	r3, r0
 8015514:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
			if (res == FR_OK) {
 8015518:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801551c:	2b00      	cmp	r3, #0
 801551e:	d120      	bne.n	8015562 <f_mkdir+0x21a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8015520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015522:	647b      	str	r3, [r7, #68]	@ 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8015524:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015526:	3316      	adds	r3, #22
 8015528:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801552a:	4618      	mov	r0, r3
 801552c:	f7fc fb8e 	bl	8011c4c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015534:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8015536:	4618      	mov	r0, r3
 8015538:	f7fd fb86 	bl	8012c48 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801553c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801553e:	330b      	adds	r3, #11
 8015540:	2210      	movs	r2, #16
 8015542:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	2201      	movs	r2, #1
 8015548:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 801554a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801554e:	2b00      	cmp	r3, #0
 8015550:	d10e      	bne.n	8015570 <f_mkdir+0x228>
					res = sync_fs(fs);
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	4618      	mov	r0, r3
 8015556:	f7fc fe01 	bl	801215c <sync_fs>
 801555a:	4603      	mov	r3, r0
 801555c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8015560:	e006      	b.n	8015570 <f_mkdir+0x228>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8015562:	f107 0310 	add.w	r3, r7, #16
 8015566:	2200      	movs	r2, #0
 8015568:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801556a:	4618      	mov	r0, r3
 801556c:	f7fd f872 	bl	8012654 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8015570:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8015574:	4618      	mov	r0, r3
 8015576:	3760      	adds	r7, #96	@ 0x60
 8015578:	46bd      	mov	sp, r7
 801557a:	bd80      	pop	{r7, pc}

0801557c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 801557c:	b580      	push	{r7, lr}
 801557e:	b084      	sub	sp, #16
 8015580:	af00      	add	r7, sp, #0
 8015582:	6078      	str	r0, [r7, #4]
 8015584:	460b      	mov	r3, r1
 8015586:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8015588:	78fb      	ldrb	r3, [r7, #3]
 801558a:	2b0a      	cmp	r3, #10
 801558c:	d103      	bne.n	8015596 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 801558e:	210d      	movs	r1, #13
 8015590:	6878      	ldr	r0, [r7, #4]
 8015592:	f7ff fff3 	bl	801557c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	685b      	ldr	r3, [r3, #4]
 801559a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	db25      	blt.n	80155ee <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	1c5a      	adds	r2, r3, #1
 80155a6:	60fa      	str	r2, [r7, #12]
 80155a8:	687a      	ldr	r2, [r7, #4]
 80155aa:	4413      	add	r3, r2
 80155ac:	78fa      	ldrb	r2, [r7, #3]
 80155ae:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	2b3c      	cmp	r3, #60	@ 0x3c
 80155b4:	dd12      	ble.n	80155dc <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	6818      	ldr	r0, [r3, #0]
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	f103 010c 	add.w	r1, r3, #12
 80155c0:	68fa      	ldr	r2, [r7, #12]
 80155c2:	f107 0308 	add.w	r3, r7, #8
 80155c6:	f7ff f954 	bl	8014872 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80155ca:	68ba      	ldr	r2, [r7, #8]
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	429a      	cmp	r2, r3
 80155d0:	d101      	bne.n	80155d6 <putc_bfd+0x5a>
 80155d2:	2300      	movs	r3, #0
 80155d4:	e001      	b.n	80155da <putc_bfd+0x5e>
 80155d6:	f04f 33ff 	mov.w	r3, #4294967295
 80155da:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	68fa      	ldr	r2, [r7, #12]
 80155e0:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	689b      	ldr	r3, [r3, #8]
 80155e6:	1c5a      	adds	r2, r3, #1
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	609a      	str	r2, [r3, #8]
 80155ec:	e000      	b.n	80155f0 <putc_bfd+0x74>
	if (i < 0) return;
 80155ee:	bf00      	nop
}
 80155f0:	3710      	adds	r7, #16
 80155f2:	46bd      	mov	sp, r7
 80155f4:	bd80      	pop	{r7, pc}

080155f6 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80155f6:	b580      	push	{r7, lr}
 80155f8:	b084      	sub	sp, #16
 80155fa:	af00      	add	r7, sp, #0
 80155fc:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	685b      	ldr	r3, [r3, #4]
 8015602:	2b00      	cmp	r3, #0
 8015604:	db16      	blt.n	8015634 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	6818      	ldr	r0, [r3, #0]
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	f103 010c 	add.w	r1, r3, #12
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	685b      	ldr	r3, [r3, #4]
 8015614:	461a      	mov	r2, r3
 8015616:	f107 030c 	add.w	r3, r7, #12
 801561a:	f7ff f92a 	bl	8014872 <f_write>
 801561e:	4603      	mov	r3, r0
 8015620:	2b00      	cmp	r3, #0
 8015622:	d107      	bne.n	8015634 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	685b      	ldr	r3, [r3, #4]
 8015628:	68fa      	ldr	r2, [r7, #12]
 801562a:	4293      	cmp	r3, r2
 801562c:	d102      	bne.n	8015634 <putc_flush+0x3e>
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	689b      	ldr	r3, [r3, #8]
 8015632:	e001      	b.n	8015638 <putc_flush+0x42>
	return EOF;
 8015634:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015638:	4618      	mov	r0, r3
 801563a:	3710      	adds	r7, #16
 801563c:	46bd      	mov	sp, r7
 801563e:	bd80      	pop	{r7, pc}

08015640 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8015640:	b480      	push	{r7}
 8015642:	b083      	sub	sp, #12
 8015644:	af00      	add	r7, sp, #0
 8015646:	6078      	str	r0, [r7, #4]
 8015648:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	683a      	ldr	r2, [r7, #0]
 801564e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	2200      	movs	r2, #0
 8015654:	605a      	str	r2, [r3, #4]
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	685a      	ldr	r2, [r3, #4]
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	609a      	str	r2, [r3, #8]
}
 801565e:	bf00      	nop
 8015660:	370c      	adds	r7, #12
 8015662:	46bd      	mov	sp, r7
 8015664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015668:	4770      	bx	lr
	...

0801566c <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 801566c:	b40e      	push	{r1, r2, r3}
 801566e:	b580      	push	{r7, lr}
 8015670:	b0a7      	sub	sp, #156	@ 0x9c
 8015672:	af00      	add	r7, sp, #0
 8015674:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8015676:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801567a:	6879      	ldr	r1, [r7, #4]
 801567c:	4618      	mov	r0, r3
 801567e:	f7ff ffdf 	bl	8015640 <putc_init>

	va_start(arp, fmt);
 8015682:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8015686:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 8015688:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801568c:	1c5a      	adds	r2, r3, #1
 801568e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8015692:	781b      	ldrb	r3, [r3, #0]
 8015694:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 8015698:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801569c:	2b00      	cmp	r3, #0
 801569e:	f000 81f2 	beq.w	8015a86 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 80156a2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80156a6:	2b25      	cmp	r3, #37	@ 0x25
 80156a8:	d008      	beq.n	80156bc <f_printf+0x50>
			putc_bfd(&pb, c);
 80156aa:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 80156ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80156b2:	4611      	mov	r1, r2
 80156b4:	4618      	mov	r0, r3
 80156b6:	f7ff ff61 	bl	801557c <putc_bfd>
			continue;
 80156ba:	e1e3      	b.n	8015a84 <f_printf+0x418>
		}
		w = f = 0;
 80156bc:	2300      	movs	r3, #0
 80156be:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80156c2:	2300      	movs	r3, #0
 80156c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 80156c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80156cc:	1c5a      	adds	r2, r3, #1
 80156ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80156d2:	781b      	ldrb	r3, [r3, #0]
 80156d4:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 80156d8:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80156dc:	2b30      	cmp	r3, #48	@ 0x30
 80156de:	d10b      	bne.n	80156f8 <f_printf+0x8c>
			f = 1; c = *fmt++;
 80156e0:	2301      	movs	r3, #1
 80156e2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80156e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80156ea:	1c5a      	adds	r2, r3, #1
 80156ec:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80156f0:	781b      	ldrb	r3, [r3, #0]
 80156f2:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 80156f6:	e024      	b.n	8015742 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 80156f8:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80156fc:	2b2d      	cmp	r3, #45	@ 0x2d
 80156fe:	d120      	bne.n	8015742 <f_printf+0xd6>
				f = 2; c = *fmt++;
 8015700:	2302      	movs	r3, #2
 8015702:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8015706:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801570a:	1c5a      	adds	r2, r3, #1
 801570c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8015710:	781b      	ldrb	r3, [r3, #0]
 8015712:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8015716:	e014      	b.n	8015742 <f_printf+0xd6>
			w = w * 10 + c - '0';
 8015718:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801571c:	4613      	mov	r3, r2
 801571e:	009b      	lsls	r3, r3, #2
 8015720:	4413      	add	r3, r2
 8015722:	005b      	lsls	r3, r3, #1
 8015724:	461a      	mov	r2, r3
 8015726:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801572a:	4413      	add	r3, r2
 801572c:	3b30      	subs	r3, #48	@ 0x30
 801572e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 8015732:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8015736:	1c5a      	adds	r2, r3, #1
 8015738:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801573c:	781b      	ldrb	r3, [r3, #0]
 801573e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 8015742:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8015746:	2b2f      	cmp	r3, #47	@ 0x2f
 8015748:	d903      	bls.n	8015752 <f_printf+0xe6>
 801574a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801574e:	2b39      	cmp	r3, #57	@ 0x39
 8015750:	d9e2      	bls.n	8015718 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8015752:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8015756:	2b6c      	cmp	r3, #108	@ 0x6c
 8015758:	d003      	beq.n	8015762 <f_printf+0xf6>
 801575a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801575e:	2b4c      	cmp	r3, #76	@ 0x4c
 8015760:	d10d      	bne.n	801577e <f_printf+0x112>
			f |= 4; c = *fmt++;
 8015762:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8015766:	f043 0304 	orr.w	r3, r3, #4
 801576a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 801576e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8015772:	1c5a      	adds	r2, r3, #1
 8015774:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8015778:	781b      	ldrb	r3, [r3, #0]
 801577a:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 801577e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8015782:	2b00      	cmp	r3, #0
 8015784:	f000 8181 	beq.w	8015a8a <f_printf+0x41e>
		d = c;
 8015788:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801578c:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 8015790:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8015794:	2b60      	cmp	r3, #96	@ 0x60
 8015796:	d908      	bls.n	80157aa <f_printf+0x13e>
 8015798:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 801579c:	2b7a      	cmp	r3, #122	@ 0x7a
 801579e:	d804      	bhi.n	80157aa <f_printf+0x13e>
 80157a0:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80157a4:	3b20      	subs	r3, #32
 80157a6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 80157aa:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80157ae:	3b42      	subs	r3, #66	@ 0x42
 80157b0:	2b16      	cmp	r3, #22
 80157b2:	f200 8098 	bhi.w	80158e6 <f_printf+0x27a>
 80157b6:	a201      	add	r2, pc, #4	@ (adr r2, 80157bc <f_printf+0x150>)
 80157b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157bc:	080158c7 	.word	0x080158c7
 80157c0:	080158af 	.word	0x080158af
 80157c4:	080158d7 	.word	0x080158d7
 80157c8:	080158e7 	.word	0x080158e7
 80157cc:	080158e7 	.word	0x080158e7
 80157d0:	080158e7 	.word	0x080158e7
 80157d4:	080158e7 	.word	0x080158e7
 80157d8:	080158e7 	.word	0x080158e7
 80157dc:	080158e7 	.word	0x080158e7
 80157e0:	080158e7 	.word	0x080158e7
 80157e4:	080158e7 	.word	0x080158e7
 80157e8:	080158e7 	.word	0x080158e7
 80157ec:	080158e7 	.word	0x080158e7
 80157f0:	080158cf 	.word	0x080158cf
 80157f4:	080158e7 	.word	0x080158e7
 80157f8:	080158e7 	.word	0x080158e7
 80157fc:	080158e7 	.word	0x080158e7
 8015800:	08015819 	.word	0x08015819
 8015804:	080158e7 	.word	0x080158e7
 8015808:	080158d7 	.word	0x080158d7
 801580c:	080158e7 	.word	0x080158e7
 8015810:	080158e7 	.word	0x080158e7
 8015814:	080158df 	.word	0x080158df
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8015818:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801581a:	1d1a      	adds	r2, r3, #4
 801581c:	67ba      	str	r2, [r7, #120]	@ 0x78
 801581e:	681b      	ldr	r3, [r3, #0]
 8015820:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 8015822:	2300      	movs	r3, #0
 8015824:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8015828:	e004      	b.n	8015834 <f_printf+0x1c8>
 801582a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801582e:	3301      	adds	r3, #1
 8015830:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8015834:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8015836:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801583a:	4413      	add	r3, r2
 801583c:	781b      	ldrb	r3, [r3, #0]
 801583e:	2b00      	cmp	r3, #0
 8015840:	d1f3      	bne.n	801582a <f_printf+0x1be>
			if (!(f & 2)) {
 8015842:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8015846:	f003 0302 	and.w	r3, r3, #2
 801584a:	2b00      	cmp	r3, #0
 801584c:	d11a      	bne.n	8015884 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 801584e:	e005      	b.n	801585c <f_printf+0x1f0>
 8015850:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8015854:	2120      	movs	r1, #32
 8015856:	4618      	mov	r0, r3
 8015858:	f7ff fe90 	bl	801557c <putc_bfd>
 801585c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015860:	1c5a      	adds	r2, r3, #1
 8015862:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8015866:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801586a:	429a      	cmp	r2, r3
 801586c:	d8f0      	bhi.n	8015850 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 801586e:	e009      	b.n	8015884 <f_printf+0x218>
 8015870:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8015872:	1c5a      	adds	r2, r3, #1
 8015874:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8015876:	781a      	ldrb	r2, [r3, #0]
 8015878:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801587c:	4611      	mov	r1, r2
 801587e:	4618      	mov	r0, r3
 8015880:	f7ff fe7c 	bl	801557c <putc_bfd>
 8015884:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8015886:	781b      	ldrb	r3, [r3, #0]
 8015888:	2b00      	cmp	r3, #0
 801588a:	d1f1      	bne.n	8015870 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 801588c:	e005      	b.n	801589a <f_printf+0x22e>
 801588e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8015892:	2120      	movs	r1, #32
 8015894:	4618      	mov	r0, r3
 8015896:	f7ff fe71 	bl	801557c <putc_bfd>
 801589a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801589e:	1c5a      	adds	r2, r3, #1
 80158a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80158a4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80158a8:	429a      	cmp	r2, r3
 80158aa:	d8f0      	bhi.n	801588e <f_printf+0x222>
			continue;
 80158ac:	e0ea      	b.n	8015a84 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 80158ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80158b0:	1d1a      	adds	r2, r3, #4
 80158b2:	67ba      	str	r2, [r7, #120]	@ 0x78
 80158b4:	681b      	ldr	r3, [r3, #0]
 80158b6:	b2da      	uxtb	r2, r3
 80158b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80158bc:	4611      	mov	r1, r2
 80158be:	4618      	mov	r0, r3
 80158c0:	f7ff fe5c 	bl	801557c <putc_bfd>
 80158c4:	e0de      	b.n	8015a84 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 80158c6:	2302      	movs	r3, #2
 80158c8:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80158cc:	e014      	b.n	80158f8 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 80158ce:	2308      	movs	r3, #8
 80158d0:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80158d4:	e010      	b.n	80158f8 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 80158d6:	230a      	movs	r3, #10
 80158d8:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80158dc:	e00c      	b.n	80158f8 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 80158de:	2310      	movs	r3, #16
 80158e0:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80158e4:	e008      	b.n	80158f8 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 80158e6:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 80158ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80158ee:	4611      	mov	r1, r2
 80158f0:	4618      	mov	r0, r3
 80158f2:	f7ff fe43 	bl	801557c <putc_bfd>
 80158f6:	e0c5      	b.n	8015a84 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80158f8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80158fc:	f003 0304 	and.w	r3, r3, #4
 8015900:	2b00      	cmp	r3, #0
 8015902:	d004      	beq.n	801590e <f_printf+0x2a2>
 8015904:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015906:	1d1a      	adds	r2, r3, #4
 8015908:	67ba      	str	r2, [r7, #120]	@ 0x78
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	e00c      	b.n	8015928 <f_printf+0x2bc>
 801590e:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8015912:	2b44      	cmp	r3, #68	@ 0x44
 8015914:	d104      	bne.n	8015920 <f_printf+0x2b4>
 8015916:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015918:	1d1a      	adds	r2, r3, #4
 801591a:	67ba      	str	r2, [r7, #120]	@ 0x78
 801591c:	681b      	ldr	r3, [r3, #0]
 801591e:	e003      	b.n	8015928 <f_printf+0x2bc>
 8015920:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015922:	1d1a      	adds	r2, r3, #4
 8015924:	67ba      	str	r2, [r7, #120]	@ 0x78
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 801592c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8015930:	2b44      	cmp	r3, #68	@ 0x44
 8015932:	d10e      	bne.n	8015952 <f_printf+0x2e6>
 8015934:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8015938:	2b00      	cmp	r3, #0
 801593a:	da0a      	bge.n	8015952 <f_printf+0x2e6>
			v = 0 - v;
 801593c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8015940:	425b      	negs	r3, r3
 8015942:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 8015946:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 801594a:	f043 0308 	orr.w	r3, r3, #8
 801594e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 8015952:	2300      	movs	r3, #0
 8015954:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8015958:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 801595c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8015960:	fbb3 f1f2 	udiv	r1, r3, r2
 8015964:	fb01 f202 	mul.w	r2, r1, r2
 8015968:	1a9b      	subs	r3, r3, r2
 801596a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 801596e:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8015972:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8015976:	fbb2 f3f3 	udiv	r3, r2, r3
 801597a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 801597e:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8015982:	2b09      	cmp	r3, #9
 8015984:	d90b      	bls.n	801599e <f_printf+0x332>
 8015986:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801598a:	2b78      	cmp	r3, #120	@ 0x78
 801598c:	d101      	bne.n	8015992 <f_printf+0x326>
 801598e:	2227      	movs	r2, #39	@ 0x27
 8015990:	e000      	b.n	8015994 <f_printf+0x328>
 8015992:	2207      	movs	r2, #7
 8015994:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8015998:	4413      	add	r3, r2
 801599a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 801599e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80159a2:	1c5a      	adds	r2, r3, #1
 80159a4:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80159a8:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 80159ac:	3230      	adds	r2, #48	@ 0x30
 80159ae:	b2d2      	uxtb	r2, r2
 80159b0:	3398      	adds	r3, #152	@ 0x98
 80159b2:	443b      	add	r3, r7
 80159b4:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 80159b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d003      	beq.n	80159c8 <f_printf+0x35c>
 80159c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80159c4:	2b1f      	cmp	r3, #31
 80159c6:	d9c7      	bls.n	8015958 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 80159c8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80159cc:	f003 0308 	and.w	r3, r3, #8
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d009      	beq.n	80159e8 <f_printf+0x37c>
 80159d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80159d8:	1c5a      	adds	r2, r3, #1
 80159da:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80159de:	3398      	adds	r3, #152	@ 0x98
 80159e0:	443b      	add	r3, r7
 80159e2:	222d      	movs	r2, #45	@ 0x2d
 80159e4:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 80159e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80159ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80159f0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80159f4:	f003 0301 	and.w	r3, r3, #1
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d001      	beq.n	8015a00 <f_printf+0x394>
 80159fc:	2330      	movs	r3, #48	@ 0x30
 80159fe:	e000      	b.n	8015a02 <f_printf+0x396>
 8015a00:	2320      	movs	r3, #32
 8015a02:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8015a06:	e007      	b.n	8015a18 <f_printf+0x3ac>
 8015a08:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8015a0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8015a10:	4611      	mov	r1, r2
 8015a12:	4618      	mov	r0, r3
 8015a14:	f7ff fdb2 	bl	801557c <putc_bfd>
 8015a18:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8015a1c:	f003 0302 	and.w	r3, r3, #2
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d108      	bne.n	8015a36 <f_printf+0x3ca>
 8015a24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015a28:	1c5a      	adds	r2, r3, #1
 8015a2a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8015a2e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8015a32:	429a      	cmp	r2, r3
 8015a34:	d8e8      	bhi.n	8015a08 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 8015a36:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8015a3a:	3b01      	subs	r3, #1
 8015a3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8015a40:	f107 020c 	add.w	r2, r7, #12
 8015a44:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8015a48:	4413      	add	r3, r2
 8015a4a:	781a      	ldrb	r2, [r3, #0]
 8015a4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8015a50:	4611      	mov	r1, r2
 8015a52:	4618      	mov	r0, r3
 8015a54:	f7ff fd92 	bl	801557c <putc_bfd>
		} while (i);
 8015a58:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d1ea      	bne.n	8015a36 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 8015a60:	e007      	b.n	8015a72 <f_printf+0x406>
 8015a62:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8015a66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8015a6a:	4611      	mov	r1, r2
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	f7ff fd85 	bl	801557c <putc_bfd>
 8015a72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015a76:	1c5a      	adds	r2, r3, #1
 8015a78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8015a7c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8015a80:	429a      	cmp	r2, r3
 8015a82:	d8ee      	bhi.n	8015a62 <f_printf+0x3f6>
		c = *fmt++;
 8015a84:	e600      	b.n	8015688 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8015a86:	bf00      	nop
 8015a88:	e000      	b.n	8015a8c <f_printf+0x420>
		if (!c) break;
 8015a8a:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8015a8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8015a90:	4618      	mov	r0, r3
 8015a92:	f7ff fdb0 	bl	80155f6 <putc_flush>
 8015a96:	4603      	mov	r3, r0
}
 8015a98:	4618      	mov	r0, r3
 8015a9a:	379c      	adds	r7, #156	@ 0x9c
 8015a9c:	46bd      	mov	sp, r7
 8015a9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015aa2:	b003      	add	sp, #12
 8015aa4:	4770      	bx	lr
 8015aa6:	bf00      	nop

08015aa8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015aa8:	b480      	push	{r7}
 8015aaa:	b087      	sub	sp, #28
 8015aac:	af00      	add	r7, sp, #0
 8015aae:	60f8      	str	r0, [r7, #12]
 8015ab0:	60b9      	str	r1, [r7, #8]
 8015ab2:	4613      	mov	r3, r2
 8015ab4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015ab6:	2301      	movs	r3, #1
 8015ab8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8015aba:	2300      	movs	r3, #0
 8015abc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015abe:	4b1f      	ldr	r3, [pc, #124]	@ (8015b3c <FATFS_LinkDriverEx+0x94>)
 8015ac0:	7a5b      	ldrb	r3, [r3, #9]
 8015ac2:	b2db      	uxtb	r3, r3
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d131      	bne.n	8015b2c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015ac8:	4b1c      	ldr	r3, [pc, #112]	@ (8015b3c <FATFS_LinkDriverEx+0x94>)
 8015aca:	7a5b      	ldrb	r3, [r3, #9]
 8015acc:	b2db      	uxtb	r3, r3
 8015ace:	461a      	mov	r2, r3
 8015ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8015b3c <FATFS_LinkDriverEx+0x94>)
 8015ad2:	2100      	movs	r1, #0
 8015ad4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015ad6:	4b19      	ldr	r3, [pc, #100]	@ (8015b3c <FATFS_LinkDriverEx+0x94>)
 8015ad8:	7a5b      	ldrb	r3, [r3, #9]
 8015ada:	b2db      	uxtb	r3, r3
 8015adc:	4a17      	ldr	r2, [pc, #92]	@ (8015b3c <FATFS_LinkDriverEx+0x94>)
 8015ade:	009b      	lsls	r3, r3, #2
 8015ae0:	4413      	add	r3, r2
 8015ae2:	68fa      	ldr	r2, [r7, #12]
 8015ae4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015ae6:	4b15      	ldr	r3, [pc, #84]	@ (8015b3c <FATFS_LinkDriverEx+0x94>)
 8015ae8:	7a5b      	ldrb	r3, [r3, #9]
 8015aea:	b2db      	uxtb	r3, r3
 8015aec:	461a      	mov	r2, r3
 8015aee:	4b13      	ldr	r3, [pc, #76]	@ (8015b3c <FATFS_LinkDriverEx+0x94>)
 8015af0:	4413      	add	r3, r2
 8015af2:	79fa      	ldrb	r2, [r7, #7]
 8015af4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8015af6:	4b11      	ldr	r3, [pc, #68]	@ (8015b3c <FATFS_LinkDriverEx+0x94>)
 8015af8:	7a5b      	ldrb	r3, [r3, #9]
 8015afa:	b2db      	uxtb	r3, r3
 8015afc:	1c5a      	adds	r2, r3, #1
 8015afe:	b2d1      	uxtb	r1, r2
 8015b00:	4a0e      	ldr	r2, [pc, #56]	@ (8015b3c <FATFS_LinkDriverEx+0x94>)
 8015b02:	7251      	strb	r1, [r2, #9]
 8015b04:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8015b06:	7dbb      	ldrb	r3, [r7, #22]
 8015b08:	3330      	adds	r3, #48	@ 0x30
 8015b0a:	b2da      	uxtb	r2, r3
 8015b0c:	68bb      	ldr	r3, [r7, #8]
 8015b0e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015b10:	68bb      	ldr	r3, [r7, #8]
 8015b12:	3301      	adds	r3, #1
 8015b14:	223a      	movs	r2, #58	@ 0x3a
 8015b16:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015b18:	68bb      	ldr	r3, [r7, #8]
 8015b1a:	3302      	adds	r3, #2
 8015b1c:	222f      	movs	r2, #47	@ 0x2f
 8015b1e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015b20:	68bb      	ldr	r3, [r7, #8]
 8015b22:	3303      	adds	r3, #3
 8015b24:	2200      	movs	r2, #0
 8015b26:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015b28:	2300      	movs	r3, #0
 8015b2a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8015b2e:	4618      	mov	r0, r3
 8015b30:	371c      	adds	r7, #28
 8015b32:	46bd      	mov	sp, r7
 8015b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b38:	4770      	bx	lr
 8015b3a:	bf00      	nop
 8015b3c:	240056c8 	.word	0x240056c8

08015b40 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015b40:	b580      	push	{r7, lr}
 8015b42:	b082      	sub	sp, #8
 8015b44:	af00      	add	r7, sp, #0
 8015b46:	6078      	str	r0, [r7, #4]
 8015b48:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8015b4a:	2200      	movs	r2, #0
 8015b4c:	6839      	ldr	r1, [r7, #0]
 8015b4e:	6878      	ldr	r0, [r7, #4]
 8015b50:	f7ff ffaa 	bl	8015aa8 <FATFS_LinkDriverEx>
 8015b54:	4603      	mov	r3, r0
}
 8015b56:	4618      	mov	r0, r3
 8015b58:	3708      	adds	r7, #8
 8015b5a:	46bd      	mov	sp, r7
 8015b5c:	bd80      	pop	{r7, pc}
	...

08015b60 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8015b60:	b480      	push	{r7}
 8015b62:	b085      	sub	sp, #20
 8015b64:	af00      	add	r7, sp, #0
 8015b66:	4603      	mov	r3, r0
 8015b68:	6039      	str	r1, [r7, #0]
 8015b6a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8015b6c:	88fb      	ldrh	r3, [r7, #6]
 8015b6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8015b70:	d802      	bhi.n	8015b78 <ff_convert+0x18>
		c = chr;
 8015b72:	88fb      	ldrh	r3, [r7, #6]
 8015b74:	81fb      	strh	r3, [r7, #14]
 8015b76:	e025      	b.n	8015bc4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8015b78:	683b      	ldr	r3, [r7, #0]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d00b      	beq.n	8015b96 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8015b7e:	88fb      	ldrh	r3, [r7, #6]
 8015b80:	2bff      	cmp	r3, #255	@ 0xff
 8015b82:	d805      	bhi.n	8015b90 <ff_convert+0x30>
 8015b84:	88fb      	ldrh	r3, [r7, #6]
 8015b86:	3b80      	subs	r3, #128	@ 0x80
 8015b88:	4a12      	ldr	r2, [pc, #72]	@ (8015bd4 <ff_convert+0x74>)
 8015b8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015b8e:	e000      	b.n	8015b92 <ff_convert+0x32>
 8015b90:	2300      	movs	r3, #0
 8015b92:	81fb      	strh	r3, [r7, #14]
 8015b94:	e016      	b.n	8015bc4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8015b96:	2300      	movs	r3, #0
 8015b98:	81fb      	strh	r3, [r7, #14]
 8015b9a:	e009      	b.n	8015bb0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8015b9c:	89fb      	ldrh	r3, [r7, #14]
 8015b9e:	4a0d      	ldr	r2, [pc, #52]	@ (8015bd4 <ff_convert+0x74>)
 8015ba0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015ba4:	88fa      	ldrh	r2, [r7, #6]
 8015ba6:	429a      	cmp	r2, r3
 8015ba8:	d006      	beq.n	8015bb8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8015baa:	89fb      	ldrh	r3, [r7, #14]
 8015bac:	3301      	adds	r3, #1
 8015bae:	81fb      	strh	r3, [r7, #14]
 8015bb0:	89fb      	ldrh	r3, [r7, #14]
 8015bb2:	2b7f      	cmp	r3, #127	@ 0x7f
 8015bb4:	d9f2      	bls.n	8015b9c <ff_convert+0x3c>
 8015bb6:	e000      	b.n	8015bba <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8015bb8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8015bba:	89fb      	ldrh	r3, [r7, #14]
 8015bbc:	3380      	adds	r3, #128	@ 0x80
 8015bbe:	b29b      	uxth	r3, r3
 8015bc0:	b2db      	uxtb	r3, r3
 8015bc2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8015bc4:	89fb      	ldrh	r3, [r7, #14]
}
 8015bc6:	4618      	mov	r0, r3
 8015bc8:	3714      	adds	r7, #20
 8015bca:	46bd      	mov	sp, r7
 8015bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bd0:	4770      	bx	lr
 8015bd2:	bf00      	nop
 8015bd4:	08018d84 	.word	0x08018d84

08015bd8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8015bd8:	b480      	push	{r7}
 8015bda:	b087      	sub	sp, #28
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	4603      	mov	r3, r0
 8015be0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8015be2:	88fb      	ldrh	r3, [r7, #6]
 8015be4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015be8:	d201      	bcs.n	8015bee <ff_wtoupper+0x16>
 8015bea:	4b3e      	ldr	r3, [pc, #248]	@ (8015ce4 <ff_wtoupper+0x10c>)
 8015bec:	e000      	b.n	8015bf0 <ff_wtoupper+0x18>
 8015bee:	4b3e      	ldr	r3, [pc, #248]	@ (8015ce8 <ff_wtoupper+0x110>)
 8015bf0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8015bf2:	697b      	ldr	r3, [r7, #20]
 8015bf4:	1c9a      	adds	r2, r3, #2
 8015bf6:	617a      	str	r2, [r7, #20]
 8015bf8:	881b      	ldrh	r3, [r3, #0]
 8015bfa:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8015bfc:	8a7b      	ldrh	r3, [r7, #18]
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d068      	beq.n	8015cd4 <ff_wtoupper+0xfc>
 8015c02:	88fa      	ldrh	r2, [r7, #6]
 8015c04:	8a7b      	ldrh	r3, [r7, #18]
 8015c06:	429a      	cmp	r2, r3
 8015c08:	d364      	bcc.n	8015cd4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8015c0a:	697b      	ldr	r3, [r7, #20]
 8015c0c:	1c9a      	adds	r2, r3, #2
 8015c0e:	617a      	str	r2, [r7, #20]
 8015c10:	881b      	ldrh	r3, [r3, #0]
 8015c12:	823b      	strh	r3, [r7, #16]
 8015c14:	8a3b      	ldrh	r3, [r7, #16]
 8015c16:	0a1b      	lsrs	r3, r3, #8
 8015c18:	81fb      	strh	r3, [r7, #14]
 8015c1a:	8a3b      	ldrh	r3, [r7, #16]
 8015c1c:	b2db      	uxtb	r3, r3
 8015c1e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8015c20:	88fa      	ldrh	r2, [r7, #6]
 8015c22:	8a79      	ldrh	r1, [r7, #18]
 8015c24:	8a3b      	ldrh	r3, [r7, #16]
 8015c26:	440b      	add	r3, r1
 8015c28:	429a      	cmp	r2, r3
 8015c2a:	da49      	bge.n	8015cc0 <ff_wtoupper+0xe8>
			switch (cmd) {
 8015c2c:	89fb      	ldrh	r3, [r7, #14]
 8015c2e:	2b08      	cmp	r3, #8
 8015c30:	d84f      	bhi.n	8015cd2 <ff_wtoupper+0xfa>
 8015c32:	a201      	add	r2, pc, #4	@ (adr r2, 8015c38 <ff_wtoupper+0x60>)
 8015c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c38:	08015c5d 	.word	0x08015c5d
 8015c3c:	08015c6f 	.word	0x08015c6f
 8015c40:	08015c85 	.word	0x08015c85
 8015c44:	08015c8d 	.word	0x08015c8d
 8015c48:	08015c95 	.word	0x08015c95
 8015c4c:	08015c9d 	.word	0x08015c9d
 8015c50:	08015ca5 	.word	0x08015ca5
 8015c54:	08015cad 	.word	0x08015cad
 8015c58:	08015cb5 	.word	0x08015cb5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8015c5c:	88fa      	ldrh	r2, [r7, #6]
 8015c5e:	8a7b      	ldrh	r3, [r7, #18]
 8015c60:	1ad3      	subs	r3, r2, r3
 8015c62:	005b      	lsls	r3, r3, #1
 8015c64:	697a      	ldr	r2, [r7, #20]
 8015c66:	4413      	add	r3, r2
 8015c68:	881b      	ldrh	r3, [r3, #0]
 8015c6a:	80fb      	strh	r3, [r7, #6]
 8015c6c:	e027      	b.n	8015cbe <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8015c6e:	88fa      	ldrh	r2, [r7, #6]
 8015c70:	8a7b      	ldrh	r3, [r7, #18]
 8015c72:	1ad3      	subs	r3, r2, r3
 8015c74:	b29b      	uxth	r3, r3
 8015c76:	f003 0301 	and.w	r3, r3, #1
 8015c7a:	b29b      	uxth	r3, r3
 8015c7c:	88fa      	ldrh	r2, [r7, #6]
 8015c7e:	1ad3      	subs	r3, r2, r3
 8015c80:	80fb      	strh	r3, [r7, #6]
 8015c82:	e01c      	b.n	8015cbe <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8015c84:	88fb      	ldrh	r3, [r7, #6]
 8015c86:	3b10      	subs	r3, #16
 8015c88:	80fb      	strh	r3, [r7, #6]
 8015c8a:	e018      	b.n	8015cbe <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8015c8c:	88fb      	ldrh	r3, [r7, #6]
 8015c8e:	3b20      	subs	r3, #32
 8015c90:	80fb      	strh	r3, [r7, #6]
 8015c92:	e014      	b.n	8015cbe <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8015c94:	88fb      	ldrh	r3, [r7, #6]
 8015c96:	3b30      	subs	r3, #48	@ 0x30
 8015c98:	80fb      	strh	r3, [r7, #6]
 8015c9a:	e010      	b.n	8015cbe <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8015c9c:	88fb      	ldrh	r3, [r7, #6]
 8015c9e:	3b1a      	subs	r3, #26
 8015ca0:	80fb      	strh	r3, [r7, #6]
 8015ca2:	e00c      	b.n	8015cbe <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8015ca4:	88fb      	ldrh	r3, [r7, #6]
 8015ca6:	3308      	adds	r3, #8
 8015ca8:	80fb      	strh	r3, [r7, #6]
 8015caa:	e008      	b.n	8015cbe <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8015cac:	88fb      	ldrh	r3, [r7, #6]
 8015cae:	3b50      	subs	r3, #80	@ 0x50
 8015cb0:	80fb      	strh	r3, [r7, #6]
 8015cb2:	e004      	b.n	8015cbe <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8015cb4:	88fb      	ldrh	r3, [r7, #6]
 8015cb6:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8015cba:	80fb      	strh	r3, [r7, #6]
 8015cbc:	bf00      	nop
			}
			break;
 8015cbe:	e008      	b.n	8015cd2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8015cc0:	89fb      	ldrh	r3, [r7, #14]
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d195      	bne.n	8015bf2 <ff_wtoupper+0x1a>
 8015cc6:	8a3b      	ldrh	r3, [r7, #16]
 8015cc8:	005b      	lsls	r3, r3, #1
 8015cca:	697a      	ldr	r2, [r7, #20]
 8015ccc:	4413      	add	r3, r2
 8015cce:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8015cd0:	e78f      	b.n	8015bf2 <ff_wtoupper+0x1a>
			break;
 8015cd2:	bf00      	nop
	}

	return chr;
 8015cd4:	88fb      	ldrh	r3, [r7, #6]
}
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	371c      	adds	r7, #28
 8015cda:	46bd      	mov	sp, r7
 8015cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ce0:	4770      	bx	lr
 8015ce2:	bf00      	nop
 8015ce4:	08018e84 	.word	0x08018e84
 8015ce8:	08019078 	.word	0x08019078

08015cec <atof>:
 8015cec:	2100      	movs	r1, #0
 8015cee:	f000 bdb5 	b.w	801685c <strtod>

08015cf2 <atoi>:
 8015cf2:	220a      	movs	r2, #10
 8015cf4:	2100      	movs	r1, #0
 8015cf6:	f000 be37 	b.w	8016968 <strtol>

08015cfa <sulp>:
 8015cfa:	b570      	push	{r4, r5, r6, lr}
 8015cfc:	4604      	mov	r4, r0
 8015cfe:	460d      	mov	r5, r1
 8015d00:	4616      	mov	r6, r2
 8015d02:	ec45 4b10 	vmov	d0, r4, r5
 8015d06:	f001 ffa7 	bl	8017c58 <__ulp>
 8015d0a:	b17e      	cbz	r6, 8015d2c <sulp+0x32>
 8015d0c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015d10:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	dd09      	ble.n	8015d2c <sulp+0x32>
 8015d18:	051b      	lsls	r3, r3, #20
 8015d1a:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8015d1e:	2000      	movs	r0, #0
 8015d20:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8015d24:	ec41 0b17 	vmov	d7, r0, r1
 8015d28:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015d2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08015d30 <_strtod_l>:
 8015d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d34:	ed2d 8b0a 	vpush	{d8-d12}
 8015d38:	b097      	sub	sp, #92	@ 0x5c
 8015d3a:	4688      	mov	r8, r1
 8015d3c:	920e      	str	r2, [sp, #56]	@ 0x38
 8015d3e:	2200      	movs	r2, #0
 8015d40:	9212      	str	r2, [sp, #72]	@ 0x48
 8015d42:	9005      	str	r0, [sp, #20]
 8015d44:	f04f 0a00 	mov.w	sl, #0
 8015d48:	f04f 0b00 	mov.w	fp, #0
 8015d4c:	460a      	mov	r2, r1
 8015d4e:	9211      	str	r2, [sp, #68]	@ 0x44
 8015d50:	7811      	ldrb	r1, [r2, #0]
 8015d52:	292b      	cmp	r1, #43	@ 0x2b
 8015d54:	d04c      	beq.n	8015df0 <_strtod_l+0xc0>
 8015d56:	d839      	bhi.n	8015dcc <_strtod_l+0x9c>
 8015d58:	290d      	cmp	r1, #13
 8015d5a:	d833      	bhi.n	8015dc4 <_strtod_l+0x94>
 8015d5c:	2908      	cmp	r1, #8
 8015d5e:	d833      	bhi.n	8015dc8 <_strtod_l+0x98>
 8015d60:	2900      	cmp	r1, #0
 8015d62:	d03c      	beq.n	8015dde <_strtod_l+0xae>
 8015d64:	2200      	movs	r2, #0
 8015d66:	9208      	str	r2, [sp, #32]
 8015d68:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8015d6a:	782a      	ldrb	r2, [r5, #0]
 8015d6c:	2a30      	cmp	r2, #48	@ 0x30
 8015d6e:	f040 80b5 	bne.w	8015edc <_strtod_l+0x1ac>
 8015d72:	786a      	ldrb	r2, [r5, #1]
 8015d74:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8015d78:	2a58      	cmp	r2, #88	@ 0x58
 8015d7a:	d170      	bne.n	8015e5e <_strtod_l+0x12e>
 8015d7c:	9302      	str	r3, [sp, #8]
 8015d7e:	9b08      	ldr	r3, [sp, #32]
 8015d80:	9301      	str	r3, [sp, #4]
 8015d82:	ab12      	add	r3, sp, #72	@ 0x48
 8015d84:	9300      	str	r3, [sp, #0]
 8015d86:	4a8b      	ldr	r2, [pc, #556]	@ (8015fb4 <_strtod_l+0x284>)
 8015d88:	9805      	ldr	r0, [sp, #20]
 8015d8a:	ab13      	add	r3, sp, #76	@ 0x4c
 8015d8c:	a911      	add	r1, sp, #68	@ 0x44
 8015d8e:	f001 f85d 	bl	8016e4c <__gethex>
 8015d92:	f010 060f 	ands.w	r6, r0, #15
 8015d96:	4604      	mov	r4, r0
 8015d98:	d005      	beq.n	8015da6 <_strtod_l+0x76>
 8015d9a:	2e06      	cmp	r6, #6
 8015d9c:	d12a      	bne.n	8015df4 <_strtod_l+0xc4>
 8015d9e:	3501      	adds	r5, #1
 8015da0:	2300      	movs	r3, #0
 8015da2:	9511      	str	r5, [sp, #68]	@ 0x44
 8015da4:	9308      	str	r3, [sp, #32]
 8015da6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	f040 852f 	bne.w	801680c <_strtod_l+0xadc>
 8015dae:	9b08      	ldr	r3, [sp, #32]
 8015db0:	ec4b ab10 	vmov	d0, sl, fp
 8015db4:	b1cb      	cbz	r3, 8015dea <_strtod_l+0xba>
 8015db6:	eeb1 0b40 	vneg.f64	d0, d0
 8015dba:	b017      	add	sp, #92	@ 0x5c
 8015dbc:	ecbd 8b0a 	vpop	{d8-d12}
 8015dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dc4:	2920      	cmp	r1, #32
 8015dc6:	d1cd      	bne.n	8015d64 <_strtod_l+0x34>
 8015dc8:	3201      	adds	r2, #1
 8015dca:	e7c0      	b.n	8015d4e <_strtod_l+0x1e>
 8015dcc:	292d      	cmp	r1, #45	@ 0x2d
 8015dce:	d1c9      	bne.n	8015d64 <_strtod_l+0x34>
 8015dd0:	2101      	movs	r1, #1
 8015dd2:	9108      	str	r1, [sp, #32]
 8015dd4:	1c51      	adds	r1, r2, #1
 8015dd6:	9111      	str	r1, [sp, #68]	@ 0x44
 8015dd8:	7852      	ldrb	r2, [r2, #1]
 8015dda:	2a00      	cmp	r2, #0
 8015ddc:	d1c4      	bne.n	8015d68 <_strtod_l+0x38>
 8015dde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015de0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	f040 850f 	bne.w	8016808 <_strtod_l+0xad8>
 8015dea:	ec4b ab10 	vmov	d0, sl, fp
 8015dee:	e7e4      	b.n	8015dba <_strtod_l+0x8a>
 8015df0:	2100      	movs	r1, #0
 8015df2:	e7ee      	b.n	8015dd2 <_strtod_l+0xa2>
 8015df4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015df6:	b13a      	cbz	r2, 8015e08 <_strtod_l+0xd8>
 8015df8:	2135      	movs	r1, #53	@ 0x35
 8015dfa:	a814      	add	r0, sp, #80	@ 0x50
 8015dfc:	f002 f823 	bl	8017e46 <__copybits>
 8015e00:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015e02:	9805      	ldr	r0, [sp, #20]
 8015e04:	f001 fbf4 	bl	80175f0 <_Bfree>
 8015e08:	1e73      	subs	r3, r6, #1
 8015e0a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015e0c:	2b04      	cmp	r3, #4
 8015e0e:	d806      	bhi.n	8015e1e <_strtod_l+0xee>
 8015e10:	e8df f003 	tbb	[pc, r3]
 8015e14:	201d0314 	.word	0x201d0314
 8015e18:	14          	.byte	0x14
 8015e19:	00          	.byte	0x00
 8015e1a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8015e1e:	05e3      	lsls	r3, r4, #23
 8015e20:	bf48      	it	mi
 8015e22:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8015e26:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015e2a:	0d1b      	lsrs	r3, r3, #20
 8015e2c:	051b      	lsls	r3, r3, #20
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d1b9      	bne.n	8015da6 <_strtod_l+0x76>
 8015e32:	f000 ff15 	bl	8016c60 <__errno>
 8015e36:	2322      	movs	r3, #34	@ 0x22
 8015e38:	6003      	str	r3, [r0, #0]
 8015e3a:	e7b4      	b.n	8015da6 <_strtod_l+0x76>
 8015e3c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8015e40:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8015e44:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8015e48:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015e4c:	e7e7      	b.n	8015e1e <_strtod_l+0xee>
 8015e4e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8015fbc <_strtod_l+0x28c>
 8015e52:	e7e4      	b.n	8015e1e <_strtod_l+0xee>
 8015e54:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8015e58:	f04f 3aff 	mov.w	sl, #4294967295
 8015e5c:	e7df      	b.n	8015e1e <_strtod_l+0xee>
 8015e5e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015e60:	1c5a      	adds	r2, r3, #1
 8015e62:	9211      	str	r2, [sp, #68]	@ 0x44
 8015e64:	785b      	ldrb	r3, [r3, #1]
 8015e66:	2b30      	cmp	r3, #48	@ 0x30
 8015e68:	d0f9      	beq.n	8015e5e <_strtod_l+0x12e>
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d09b      	beq.n	8015da6 <_strtod_l+0x76>
 8015e6e:	2301      	movs	r3, #1
 8015e70:	2600      	movs	r6, #0
 8015e72:	9307      	str	r3, [sp, #28]
 8015e74:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015e76:	930a      	str	r3, [sp, #40]	@ 0x28
 8015e78:	46b1      	mov	r9, r6
 8015e7a:	4635      	mov	r5, r6
 8015e7c:	220a      	movs	r2, #10
 8015e7e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8015e80:	7804      	ldrb	r4, [r0, #0]
 8015e82:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8015e86:	b2d9      	uxtb	r1, r3
 8015e88:	2909      	cmp	r1, #9
 8015e8a:	d929      	bls.n	8015ee0 <_strtod_l+0x1b0>
 8015e8c:	494a      	ldr	r1, [pc, #296]	@ (8015fb8 <_strtod_l+0x288>)
 8015e8e:	2201      	movs	r2, #1
 8015e90:	f000 fe8e 	bl	8016bb0 <strncmp>
 8015e94:	b378      	cbz	r0, 8015ef6 <_strtod_l+0x1c6>
 8015e96:	2000      	movs	r0, #0
 8015e98:	4622      	mov	r2, r4
 8015e9a:	462b      	mov	r3, r5
 8015e9c:	4607      	mov	r7, r0
 8015e9e:	9006      	str	r0, [sp, #24]
 8015ea0:	2a65      	cmp	r2, #101	@ 0x65
 8015ea2:	d001      	beq.n	8015ea8 <_strtod_l+0x178>
 8015ea4:	2a45      	cmp	r2, #69	@ 0x45
 8015ea6:	d117      	bne.n	8015ed8 <_strtod_l+0x1a8>
 8015ea8:	b91b      	cbnz	r3, 8015eb2 <_strtod_l+0x182>
 8015eaa:	9b07      	ldr	r3, [sp, #28]
 8015eac:	4303      	orrs	r3, r0
 8015eae:	d096      	beq.n	8015dde <_strtod_l+0xae>
 8015eb0:	2300      	movs	r3, #0
 8015eb2:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8015eb6:	f108 0201 	add.w	r2, r8, #1
 8015eba:	9211      	str	r2, [sp, #68]	@ 0x44
 8015ebc:	f898 2001 	ldrb.w	r2, [r8, #1]
 8015ec0:	2a2b      	cmp	r2, #43	@ 0x2b
 8015ec2:	d06b      	beq.n	8015f9c <_strtod_l+0x26c>
 8015ec4:	2a2d      	cmp	r2, #45	@ 0x2d
 8015ec6:	d071      	beq.n	8015fac <_strtod_l+0x27c>
 8015ec8:	f04f 0e00 	mov.w	lr, #0
 8015ecc:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8015ed0:	2c09      	cmp	r4, #9
 8015ed2:	d979      	bls.n	8015fc8 <_strtod_l+0x298>
 8015ed4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8015ed8:	2400      	movs	r4, #0
 8015eda:	e094      	b.n	8016006 <_strtod_l+0x2d6>
 8015edc:	2300      	movs	r3, #0
 8015ede:	e7c7      	b.n	8015e70 <_strtod_l+0x140>
 8015ee0:	2d08      	cmp	r5, #8
 8015ee2:	f100 0001 	add.w	r0, r0, #1
 8015ee6:	bfd4      	ite	le
 8015ee8:	fb02 3909 	mlale	r9, r2, r9, r3
 8015eec:	fb02 3606 	mlagt	r6, r2, r6, r3
 8015ef0:	3501      	adds	r5, #1
 8015ef2:	9011      	str	r0, [sp, #68]	@ 0x44
 8015ef4:	e7c3      	b.n	8015e7e <_strtod_l+0x14e>
 8015ef6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015ef8:	1c5a      	adds	r2, r3, #1
 8015efa:	9211      	str	r2, [sp, #68]	@ 0x44
 8015efc:	785a      	ldrb	r2, [r3, #1]
 8015efe:	b375      	cbz	r5, 8015f5e <_strtod_l+0x22e>
 8015f00:	4607      	mov	r7, r0
 8015f02:	462b      	mov	r3, r5
 8015f04:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8015f08:	2909      	cmp	r1, #9
 8015f0a:	d913      	bls.n	8015f34 <_strtod_l+0x204>
 8015f0c:	2101      	movs	r1, #1
 8015f0e:	9106      	str	r1, [sp, #24]
 8015f10:	e7c6      	b.n	8015ea0 <_strtod_l+0x170>
 8015f12:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015f14:	1c5a      	adds	r2, r3, #1
 8015f16:	9211      	str	r2, [sp, #68]	@ 0x44
 8015f18:	785a      	ldrb	r2, [r3, #1]
 8015f1a:	3001      	adds	r0, #1
 8015f1c:	2a30      	cmp	r2, #48	@ 0x30
 8015f1e:	d0f8      	beq.n	8015f12 <_strtod_l+0x1e2>
 8015f20:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8015f24:	2b08      	cmp	r3, #8
 8015f26:	f200 8476 	bhi.w	8016816 <_strtod_l+0xae6>
 8015f2a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015f2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8015f2e:	4607      	mov	r7, r0
 8015f30:	2000      	movs	r0, #0
 8015f32:	4603      	mov	r3, r0
 8015f34:	3a30      	subs	r2, #48	@ 0x30
 8015f36:	f100 0101 	add.w	r1, r0, #1
 8015f3a:	d023      	beq.n	8015f84 <_strtod_l+0x254>
 8015f3c:	440f      	add	r7, r1
 8015f3e:	eb00 0c03 	add.w	ip, r0, r3
 8015f42:	4619      	mov	r1, r3
 8015f44:	240a      	movs	r4, #10
 8015f46:	4561      	cmp	r1, ip
 8015f48:	d10b      	bne.n	8015f62 <_strtod_l+0x232>
 8015f4a:	1c5c      	adds	r4, r3, #1
 8015f4c:	4403      	add	r3, r0
 8015f4e:	2b08      	cmp	r3, #8
 8015f50:	4404      	add	r4, r0
 8015f52:	dc11      	bgt.n	8015f78 <_strtod_l+0x248>
 8015f54:	230a      	movs	r3, #10
 8015f56:	fb03 2909 	mla	r9, r3, r9, r2
 8015f5a:	2100      	movs	r1, #0
 8015f5c:	e013      	b.n	8015f86 <_strtod_l+0x256>
 8015f5e:	4628      	mov	r0, r5
 8015f60:	e7dc      	b.n	8015f1c <_strtod_l+0x1ec>
 8015f62:	2908      	cmp	r1, #8
 8015f64:	f101 0101 	add.w	r1, r1, #1
 8015f68:	dc02      	bgt.n	8015f70 <_strtod_l+0x240>
 8015f6a:	fb04 f909 	mul.w	r9, r4, r9
 8015f6e:	e7ea      	b.n	8015f46 <_strtod_l+0x216>
 8015f70:	2910      	cmp	r1, #16
 8015f72:	bfd8      	it	le
 8015f74:	4366      	mulle	r6, r4
 8015f76:	e7e6      	b.n	8015f46 <_strtod_l+0x216>
 8015f78:	2b0f      	cmp	r3, #15
 8015f7a:	dcee      	bgt.n	8015f5a <_strtod_l+0x22a>
 8015f7c:	230a      	movs	r3, #10
 8015f7e:	fb03 2606 	mla	r6, r3, r6, r2
 8015f82:	e7ea      	b.n	8015f5a <_strtod_l+0x22a>
 8015f84:	461c      	mov	r4, r3
 8015f86:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015f88:	1c5a      	adds	r2, r3, #1
 8015f8a:	9211      	str	r2, [sp, #68]	@ 0x44
 8015f8c:	785a      	ldrb	r2, [r3, #1]
 8015f8e:	4608      	mov	r0, r1
 8015f90:	4623      	mov	r3, r4
 8015f92:	e7b7      	b.n	8015f04 <_strtod_l+0x1d4>
 8015f94:	2301      	movs	r3, #1
 8015f96:	2700      	movs	r7, #0
 8015f98:	9306      	str	r3, [sp, #24]
 8015f9a:	e786      	b.n	8015eaa <_strtod_l+0x17a>
 8015f9c:	f04f 0e00 	mov.w	lr, #0
 8015fa0:	f108 0202 	add.w	r2, r8, #2
 8015fa4:	9211      	str	r2, [sp, #68]	@ 0x44
 8015fa6:	f898 2002 	ldrb.w	r2, [r8, #2]
 8015faa:	e78f      	b.n	8015ecc <_strtod_l+0x19c>
 8015fac:	f04f 0e01 	mov.w	lr, #1
 8015fb0:	e7f6      	b.n	8015fa0 <_strtod_l+0x270>
 8015fb2:	bf00      	nop
 8015fb4:	08019158 	.word	0x08019158
 8015fb8:	08019134 	.word	0x08019134
 8015fbc:	7ff00000 	.word	0x7ff00000
 8015fc0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015fc2:	1c54      	adds	r4, r2, #1
 8015fc4:	9411      	str	r4, [sp, #68]	@ 0x44
 8015fc6:	7852      	ldrb	r2, [r2, #1]
 8015fc8:	2a30      	cmp	r2, #48	@ 0x30
 8015fca:	d0f9      	beq.n	8015fc0 <_strtod_l+0x290>
 8015fcc:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8015fd0:	2c08      	cmp	r4, #8
 8015fd2:	d881      	bhi.n	8015ed8 <_strtod_l+0x1a8>
 8015fd4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8015fd8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015fda:	9209      	str	r2, [sp, #36]	@ 0x24
 8015fdc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015fde:	1c51      	adds	r1, r2, #1
 8015fe0:	9111      	str	r1, [sp, #68]	@ 0x44
 8015fe2:	7852      	ldrb	r2, [r2, #1]
 8015fe4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8015fe8:	2c09      	cmp	r4, #9
 8015fea:	d938      	bls.n	801605e <_strtod_l+0x32e>
 8015fec:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8015fee:	1b0c      	subs	r4, r1, r4
 8015ff0:	2c08      	cmp	r4, #8
 8015ff2:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8015ff6:	dc02      	bgt.n	8015ffe <_strtod_l+0x2ce>
 8015ff8:	4564      	cmp	r4, ip
 8015ffa:	bfa8      	it	ge
 8015ffc:	4664      	movge	r4, ip
 8015ffe:	f1be 0f00 	cmp.w	lr, #0
 8016002:	d000      	beq.n	8016006 <_strtod_l+0x2d6>
 8016004:	4264      	negs	r4, r4
 8016006:	2b00      	cmp	r3, #0
 8016008:	d14e      	bne.n	80160a8 <_strtod_l+0x378>
 801600a:	9b07      	ldr	r3, [sp, #28]
 801600c:	4318      	orrs	r0, r3
 801600e:	f47f aeca 	bne.w	8015da6 <_strtod_l+0x76>
 8016012:	9b06      	ldr	r3, [sp, #24]
 8016014:	2b00      	cmp	r3, #0
 8016016:	f47f aee2 	bne.w	8015dde <_strtod_l+0xae>
 801601a:	2a69      	cmp	r2, #105	@ 0x69
 801601c:	d027      	beq.n	801606e <_strtod_l+0x33e>
 801601e:	dc24      	bgt.n	801606a <_strtod_l+0x33a>
 8016020:	2a49      	cmp	r2, #73	@ 0x49
 8016022:	d024      	beq.n	801606e <_strtod_l+0x33e>
 8016024:	2a4e      	cmp	r2, #78	@ 0x4e
 8016026:	f47f aeda 	bne.w	8015dde <_strtod_l+0xae>
 801602a:	4997      	ldr	r1, [pc, #604]	@ (8016288 <_strtod_l+0x558>)
 801602c:	a811      	add	r0, sp, #68	@ 0x44
 801602e:	f001 f92f 	bl	8017290 <__match>
 8016032:	2800      	cmp	r0, #0
 8016034:	f43f aed3 	beq.w	8015dde <_strtod_l+0xae>
 8016038:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801603a:	781b      	ldrb	r3, [r3, #0]
 801603c:	2b28      	cmp	r3, #40	@ 0x28
 801603e:	d12d      	bne.n	801609c <_strtod_l+0x36c>
 8016040:	4992      	ldr	r1, [pc, #584]	@ (801628c <_strtod_l+0x55c>)
 8016042:	aa14      	add	r2, sp, #80	@ 0x50
 8016044:	a811      	add	r0, sp, #68	@ 0x44
 8016046:	f001 f937 	bl	80172b8 <__hexnan>
 801604a:	2805      	cmp	r0, #5
 801604c:	d126      	bne.n	801609c <_strtod_l+0x36c>
 801604e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016050:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8016054:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8016058:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801605c:	e6a3      	b.n	8015da6 <_strtod_l+0x76>
 801605e:	240a      	movs	r4, #10
 8016060:	fb04 2c0c 	mla	ip, r4, ip, r2
 8016064:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8016068:	e7b8      	b.n	8015fdc <_strtod_l+0x2ac>
 801606a:	2a6e      	cmp	r2, #110	@ 0x6e
 801606c:	e7db      	b.n	8016026 <_strtod_l+0x2f6>
 801606e:	4988      	ldr	r1, [pc, #544]	@ (8016290 <_strtod_l+0x560>)
 8016070:	a811      	add	r0, sp, #68	@ 0x44
 8016072:	f001 f90d 	bl	8017290 <__match>
 8016076:	2800      	cmp	r0, #0
 8016078:	f43f aeb1 	beq.w	8015dde <_strtod_l+0xae>
 801607c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801607e:	4985      	ldr	r1, [pc, #532]	@ (8016294 <_strtod_l+0x564>)
 8016080:	3b01      	subs	r3, #1
 8016082:	a811      	add	r0, sp, #68	@ 0x44
 8016084:	9311      	str	r3, [sp, #68]	@ 0x44
 8016086:	f001 f903 	bl	8017290 <__match>
 801608a:	b910      	cbnz	r0, 8016092 <_strtod_l+0x362>
 801608c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801608e:	3301      	adds	r3, #1
 8016090:	9311      	str	r3, [sp, #68]	@ 0x44
 8016092:	f8df b214 	ldr.w	fp, [pc, #532]	@ 80162a8 <_strtod_l+0x578>
 8016096:	f04f 0a00 	mov.w	sl, #0
 801609a:	e684      	b.n	8015da6 <_strtod_l+0x76>
 801609c:	487e      	ldr	r0, [pc, #504]	@ (8016298 <_strtod_l+0x568>)
 801609e:	f000 fe1b 	bl	8016cd8 <nan>
 80160a2:	ec5b ab10 	vmov	sl, fp, d0
 80160a6:	e67e      	b.n	8015da6 <_strtod_l+0x76>
 80160a8:	ee07 9a90 	vmov	s15, r9
 80160ac:	1be2      	subs	r2, r4, r7
 80160ae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80160b2:	2d00      	cmp	r5, #0
 80160b4:	bf08      	it	eq
 80160b6:	461d      	moveq	r5, r3
 80160b8:	2b10      	cmp	r3, #16
 80160ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80160bc:	461a      	mov	r2, r3
 80160be:	bfa8      	it	ge
 80160c0:	2210      	movge	r2, #16
 80160c2:	2b09      	cmp	r3, #9
 80160c4:	ec5b ab17 	vmov	sl, fp, d7
 80160c8:	dc15      	bgt.n	80160f6 <_strtod_l+0x3c6>
 80160ca:	1be1      	subs	r1, r4, r7
 80160cc:	2900      	cmp	r1, #0
 80160ce:	f43f ae6a 	beq.w	8015da6 <_strtod_l+0x76>
 80160d2:	eba4 0107 	sub.w	r1, r4, r7
 80160d6:	dd72      	ble.n	80161be <_strtod_l+0x48e>
 80160d8:	2916      	cmp	r1, #22
 80160da:	dc59      	bgt.n	8016190 <_strtod_l+0x460>
 80160dc:	4b6f      	ldr	r3, [pc, #444]	@ (801629c <_strtod_l+0x56c>)
 80160de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80160e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80160e4:	ed93 7b00 	vldr	d7, [r3]
 80160e8:	ec4b ab16 	vmov	d6, sl, fp
 80160ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80160f0:	ec5b ab17 	vmov	sl, fp, d7
 80160f4:	e657      	b.n	8015da6 <_strtod_l+0x76>
 80160f6:	4969      	ldr	r1, [pc, #420]	@ (801629c <_strtod_l+0x56c>)
 80160f8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80160fc:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8016100:	ee06 6a90 	vmov	s13, r6
 8016104:	2b0f      	cmp	r3, #15
 8016106:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801610a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801610e:	ec5b ab16 	vmov	sl, fp, d6
 8016112:	ddda      	ble.n	80160ca <_strtod_l+0x39a>
 8016114:	1a9a      	subs	r2, r3, r2
 8016116:	1be1      	subs	r1, r4, r7
 8016118:	440a      	add	r2, r1
 801611a:	2a00      	cmp	r2, #0
 801611c:	f340 8094 	ble.w	8016248 <_strtod_l+0x518>
 8016120:	f012 000f 	ands.w	r0, r2, #15
 8016124:	d00a      	beq.n	801613c <_strtod_l+0x40c>
 8016126:	495d      	ldr	r1, [pc, #372]	@ (801629c <_strtod_l+0x56c>)
 8016128:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801612c:	ed91 7b00 	vldr	d7, [r1]
 8016130:	ec4b ab16 	vmov	d6, sl, fp
 8016134:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016138:	ec5b ab17 	vmov	sl, fp, d7
 801613c:	f032 020f 	bics.w	r2, r2, #15
 8016140:	d073      	beq.n	801622a <_strtod_l+0x4fa>
 8016142:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8016146:	dd47      	ble.n	80161d8 <_strtod_l+0x4a8>
 8016148:	2400      	movs	r4, #0
 801614a:	4625      	mov	r5, r4
 801614c:	9407      	str	r4, [sp, #28]
 801614e:	4626      	mov	r6, r4
 8016150:	9a05      	ldr	r2, [sp, #20]
 8016152:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80162a8 <_strtod_l+0x578>
 8016156:	2322      	movs	r3, #34	@ 0x22
 8016158:	6013      	str	r3, [r2, #0]
 801615a:	f04f 0a00 	mov.w	sl, #0
 801615e:	9b07      	ldr	r3, [sp, #28]
 8016160:	2b00      	cmp	r3, #0
 8016162:	f43f ae20 	beq.w	8015da6 <_strtod_l+0x76>
 8016166:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016168:	9805      	ldr	r0, [sp, #20]
 801616a:	f001 fa41 	bl	80175f0 <_Bfree>
 801616e:	9805      	ldr	r0, [sp, #20]
 8016170:	4631      	mov	r1, r6
 8016172:	f001 fa3d 	bl	80175f0 <_Bfree>
 8016176:	9805      	ldr	r0, [sp, #20]
 8016178:	4629      	mov	r1, r5
 801617a:	f001 fa39 	bl	80175f0 <_Bfree>
 801617e:	9907      	ldr	r1, [sp, #28]
 8016180:	9805      	ldr	r0, [sp, #20]
 8016182:	f001 fa35 	bl	80175f0 <_Bfree>
 8016186:	9805      	ldr	r0, [sp, #20]
 8016188:	4621      	mov	r1, r4
 801618a:	f001 fa31 	bl	80175f0 <_Bfree>
 801618e:	e60a      	b.n	8015da6 <_strtod_l+0x76>
 8016190:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8016194:	1be0      	subs	r0, r4, r7
 8016196:	4281      	cmp	r1, r0
 8016198:	dbbc      	blt.n	8016114 <_strtod_l+0x3e4>
 801619a:	4a40      	ldr	r2, [pc, #256]	@ (801629c <_strtod_l+0x56c>)
 801619c:	f1c3 030f 	rsb	r3, r3, #15
 80161a0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80161a4:	ed91 7b00 	vldr	d7, [r1]
 80161a8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80161aa:	ec4b ab16 	vmov	d6, sl, fp
 80161ae:	1acb      	subs	r3, r1, r3
 80161b0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80161b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80161b8:	ed92 6b00 	vldr	d6, [r2]
 80161bc:	e796      	b.n	80160ec <_strtod_l+0x3bc>
 80161be:	3116      	adds	r1, #22
 80161c0:	dba8      	blt.n	8016114 <_strtod_l+0x3e4>
 80161c2:	4b36      	ldr	r3, [pc, #216]	@ (801629c <_strtod_l+0x56c>)
 80161c4:	1b3c      	subs	r4, r7, r4
 80161c6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80161ca:	ed94 7b00 	vldr	d7, [r4]
 80161ce:	ec4b ab16 	vmov	d6, sl, fp
 80161d2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80161d6:	e78b      	b.n	80160f0 <_strtod_l+0x3c0>
 80161d8:	2000      	movs	r0, #0
 80161da:	ec4b ab17 	vmov	d7, sl, fp
 80161de:	4e30      	ldr	r6, [pc, #192]	@ (80162a0 <_strtod_l+0x570>)
 80161e0:	1112      	asrs	r2, r2, #4
 80161e2:	4601      	mov	r1, r0
 80161e4:	2a01      	cmp	r2, #1
 80161e6:	dc23      	bgt.n	8016230 <_strtod_l+0x500>
 80161e8:	b108      	cbz	r0, 80161ee <_strtod_l+0x4be>
 80161ea:	ec5b ab17 	vmov	sl, fp, d7
 80161ee:	4a2c      	ldr	r2, [pc, #176]	@ (80162a0 <_strtod_l+0x570>)
 80161f0:	482c      	ldr	r0, [pc, #176]	@ (80162a4 <_strtod_l+0x574>)
 80161f2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80161f6:	ed92 7b00 	vldr	d7, [r2]
 80161fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80161fe:	ec4b ab16 	vmov	d6, sl, fp
 8016202:	4a29      	ldr	r2, [pc, #164]	@ (80162a8 <_strtod_l+0x578>)
 8016204:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016208:	ee17 1a90 	vmov	r1, s15
 801620c:	400a      	ands	r2, r1
 801620e:	4282      	cmp	r2, r0
 8016210:	ec5b ab17 	vmov	sl, fp, d7
 8016214:	d898      	bhi.n	8016148 <_strtod_l+0x418>
 8016216:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 801621a:	4282      	cmp	r2, r0
 801621c:	bf86      	itte	hi
 801621e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80162ac <_strtod_l+0x57c>
 8016222:	f04f 3aff 	movhi.w	sl, #4294967295
 8016226:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 801622a:	2200      	movs	r2, #0
 801622c:	9206      	str	r2, [sp, #24]
 801622e:	e076      	b.n	801631e <_strtod_l+0x5ee>
 8016230:	f012 0f01 	tst.w	r2, #1
 8016234:	d004      	beq.n	8016240 <_strtod_l+0x510>
 8016236:	ed96 6b00 	vldr	d6, [r6]
 801623a:	2001      	movs	r0, #1
 801623c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016240:	3101      	adds	r1, #1
 8016242:	1052      	asrs	r2, r2, #1
 8016244:	3608      	adds	r6, #8
 8016246:	e7cd      	b.n	80161e4 <_strtod_l+0x4b4>
 8016248:	d0ef      	beq.n	801622a <_strtod_l+0x4fa>
 801624a:	4252      	negs	r2, r2
 801624c:	f012 000f 	ands.w	r0, r2, #15
 8016250:	d00a      	beq.n	8016268 <_strtod_l+0x538>
 8016252:	4912      	ldr	r1, [pc, #72]	@ (801629c <_strtod_l+0x56c>)
 8016254:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8016258:	ed91 7b00 	vldr	d7, [r1]
 801625c:	ec4b ab16 	vmov	d6, sl, fp
 8016260:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8016264:	ec5b ab17 	vmov	sl, fp, d7
 8016268:	1112      	asrs	r2, r2, #4
 801626a:	d0de      	beq.n	801622a <_strtod_l+0x4fa>
 801626c:	2a1f      	cmp	r2, #31
 801626e:	dd1f      	ble.n	80162b0 <_strtod_l+0x580>
 8016270:	2400      	movs	r4, #0
 8016272:	4625      	mov	r5, r4
 8016274:	9407      	str	r4, [sp, #28]
 8016276:	4626      	mov	r6, r4
 8016278:	9a05      	ldr	r2, [sp, #20]
 801627a:	2322      	movs	r3, #34	@ 0x22
 801627c:	f04f 0a00 	mov.w	sl, #0
 8016280:	f04f 0b00 	mov.w	fp, #0
 8016284:	6013      	str	r3, [r2, #0]
 8016286:	e76a      	b.n	801615e <_strtod_l+0x42e>
 8016288:	0801913f 	.word	0x0801913f
 801628c:	08019144 	.word	0x08019144
 8016290:	08019136 	.word	0x08019136
 8016294:	08019139 	.word	0x08019139
 8016298:	080194bb 	.word	0x080194bb
 801629c:	080193b8 	.word	0x080193b8
 80162a0:	08019390 	.word	0x08019390
 80162a4:	7ca00000 	.word	0x7ca00000
 80162a8:	7ff00000 	.word	0x7ff00000
 80162ac:	7fefffff 	.word	0x7fefffff
 80162b0:	f012 0110 	ands.w	r1, r2, #16
 80162b4:	bf18      	it	ne
 80162b6:	216a      	movne	r1, #106	@ 0x6a
 80162b8:	9106      	str	r1, [sp, #24]
 80162ba:	ec4b ab17 	vmov	d7, sl, fp
 80162be:	49b0      	ldr	r1, [pc, #704]	@ (8016580 <_strtod_l+0x850>)
 80162c0:	2000      	movs	r0, #0
 80162c2:	07d6      	lsls	r6, r2, #31
 80162c4:	d504      	bpl.n	80162d0 <_strtod_l+0x5a0>
 80162c6:	ed91 6b00 	vldr	d6, [r1]
 80162ca:	2001      	movs	r0, #1
 80162cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80162d0:	1052      	asrs	r2, r2, #1
 80162d2:	f101 0108 	add.w	r1, r1, #8
 80162d6:	d1f4      	bne.n	80162c2 <_strtod_l+0x592>
 80162d8:	b108      	cbz	r0, 80162de <_strtod_l+0x5ae>
 80162da:	ec5b ab17 	vmov	sl, fp, d7
 80162de:	9a06      	ldr	r2, [sp, #24]
 80162e0:	b1b2      	cbz	r2, 8016310 <_strtod_l+0x5e0>
 80162e2:	f3cb 510a 	ubfx	r1, fp, #20, #11
 80162e6:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 80162ea:	2a00      	cmp	r2, #0
 80162ec:	4658      	mov	r0, fp
 80162ee:	dd0f      	ble.n	8016310 <_strtod_l+0x5e0>
 80162f0:	2a1f      	cmp	r2, #31
 80162f2:	dd55      	ble.n	80163a0 <_strtod_l+0x670>
 80162f4:	2a34      	cmp	r2, #52	@ 0x34
 80162f6:	bfde      	ittt	le
 80162f8:	f04f 32ff 	movle.w	r2, #4294967295
 80162fc:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8016300:	408a      	lslle	r2, r1
 8016302:	f04f 0a00 	mov.w	sl, #0
 8016306:	bfcc      	ite	gt
 8016308:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801630c:	ea02 0b00 	andle.w	fp, r2, r0
 8016310:	ec4b ab17 	vmov	d7, sl, fp
 8016314:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801631c:	d0a8      	beq.n	8016270 <_strtod_l+0x540>
 801631e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016320:	9805      	ldr	r0, [sp, #20]
 8016322:	f8cd 9000 	str.w	r9, [sp]
 8016326:	462a      	mov	r2, r5
 8016328:	f001 f9ca 	bl	80176c0 <__s2b>
 801632c:	9007      	str	r0, [sp, #28]
 801632e:	2800      	cmp	r0, #0
 8016330:	f43f af0a 	beq.w	8016148 <_strtod_l+0x418>
 8016334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016336:	1b3f      	subs	r7, r7, r4
 8016338:	2b00      	cmp	r3, #0
 801633a:	bfb4      	ite	lt
 801633c:	463b      	movlt	r3, r7
 801633e:	2300      	movge	r3, #0
 8016340:	930a      	str	r3, [sp, #40]	@ 0x28
 8016342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016344:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8016570 <_strtod_l+0x840>
 8016348:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801634c:	2400      	movs	r4, #0
 801634e:	930d      	str	r3, [sp, #52]	@ 0x34
 8016350:	4625      	mov	r5, r4
 8016352:	9b07      	ldr	r3, [sp, #28]
 8016354:	9805      	ldr	r0, [sp, #20]
 8016356:	6859      	ldr	r1, [r3, #4]
 8016358:	f001 f90a 	bl	8017570 <_Balloc>
 801635c:	4606      	mov	r6, r0
 801635e:	2800      	cmp	r0, #0
 8016360:	f43f aef6 	beq.w	8016150 <_strtod_l+0x420>
 8016364:	9b07      	ldr	r3, [sp, #28]
 8016366:	691a      	ldr	r2, [r3, #16]
 8016368:	ec4b ab19 	vmov	d9, sl, fp
 801636c:	3202      	adds	r2, #2
 801636e:	f103 010c 	add.w	r1, r3, #12
 8016372:	0092      	lsls	r2, r2, #2
 8016374:	300c      	adds	r0, #12
 8016376:	f000 fca0 	bl	8016cba <memcpy>
 801637a:	eeb0 0b49 	vmov.f64	d0, d9
 801637e:	9805      	ldr	r0, [sp, #20]
 8016380:	aa14      	add	r2, sp, #80	@ 0x50
 8016382:	a913      	add	r1, sp, #76	@ 0x4c
 8016384:	f001 fcd8 	bl	8017d38 <__d2b>
 8016388:	9012      	str	r0, [sp, #72]	@ 0x48
 801638a:	2800      	cmp	r0, #0
 801638c:	f43f aee0 	beq.w	8016150 <_strtod_l+0x420>
 8016390:	9805      	ldr	r0, [sp, #20]
 8016392:	2101      	movs	r1, #1
 8016394:	f001 fa2a 	bl	80177ec <__i2b>
 8016398:	4605      	mov	r5, r0
 801639a:	b940      	cbnz	r0, 80163ae <_strtod_l+0x67e>
 801639c:	2500      	movs	r5, #0
 801639e:	e6d7      	b.n	8016150 <_strtod_l+0x420>
 80163a0:	f04f 31ff 	mov.w	r1, #4294967295
 80163a4:	fa01 f202 	lsl.w	r2, r1, r2
 80163a8:	ea02 0a0a 	and.w	sl, r2, sl
 80163ac:	e7b0      	b.n	8016310 <_strtod_l+0x5e0>
 80163ae:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 80163b0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80163b2:	2f00      	cmp	r7, #0
 80163b4:	bfab      	itete	ge
 80163b6:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 80163b8:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 80163ba:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 80163be:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 80163c2:	bfac      	ite	ge
 80163c4:	eb07 0903 	addge.w	r9, r7, r3
 80163c8:	eba3 0807 	sublt.w	r8, r3, r7
 80163cc:	9b06      	ldr	r3, [sp, #24]
 80163ce:	1aff      	subs	r7, r7, r3
 80163d0:	4417      	add	r7, r2
 80163d2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 80163d6:	4a6b      	ldr	r2, [pc, #428]	@ (8016584 <_strtod_l+0x854>)
 80163d8:	3f01      	subs	r7, #1
 80163da:	4297      	cmp	r7, r2
 80163dc:	da51      	bge.n	8016482 <_strtod_l+0x752>
 80163de:	1bd1      	subs	r1, r2, r7
 80163e0:	291f      	cmp	r1, #31
 80163e2:	eba3 0301 	sub.w	r3, r3, r1
 80163e6:	f04f 0201 	mov.w	r2, #1
 80163ea:	dc3e      	bgt.n	801646a <_strtod_l+0x73a>
 80163ec:	408a      	lsls	r2, r1
 80163ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80163f0:	2200      	movs	r2, #0
 80163f2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80163f4:	eb09 0703 	add.w	r7, r9, r3
 80163f8:	4498      	add	r8, r3
 80163fa:	9b06      	ldr	r3, [sp, #24]
 80163fc:	45b9      	cmp	r9, r7
 80163fe:	4498      	add	r8, r3
 8016400:	464b      	mov	r3, r9
 8016402:	bfa8      	it	ge
 8016404:	463b      	movge	r3, r7
 8016406:	4543      	cmp	r3, r8
 8016408:	bfa8      	it	ge
 801640a:	4643      	movge	r3, r8
 801640c:	2b00      	cmp	r3, #0
 801640e:	bfc2      	ittt	gt
 8016410:	1aff      	subgt	r7, r7, r3
 8016412:	eba8 0803 	subgt.w	r8, r8, r3
 8016416:	eba9 0903 	subgt.w	r9, r9, r3
 801641a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801641c:	2b00      	cmp	r3, #0
 801641e:	dd16      	ble.n	801644e <_strtod_l+0x71e>
 8016420:	4629      	mov	r1, r5
 8016422:	9805      	ldr	r0, [sp, #20]
 8016424:	461a      	mov	r2, r3
 8016426:	f001 faa1 	bl	801796c <__pow5mult>
 801642a:	4605      	mov	r5, r0
 801642c:	2800      	cmp	r0, #0
 801642e:	d0b5      	beq.n	801639c <_strtod_l+0x66c>
 8016430:	4601      	mov	r1, r0
 8016432:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016434:	9805      	ldr	r0, [sp, #20]
 8016436:	f001 f9ef 	bl	8017818 <__multiply>
 801643a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801643c:	2800      	cmp	r0, #0
 801643e:	f43f ae87 	beq.w	8016150 <_strtod_l+0x420>
 8016442:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016444:	9805      	ldr	r0, [sp, #20]
 8016446:	f001 f8d3 	bl	80175f0 <_Bfree>
 801644a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801644c:	9312      	str	r3, [sp, #72]	@ 0x48
 801644e:	2f00      	cmp	r7, #0
 8016450:	dc1b      	bgt.n	801648a <_strtod_l+0x75a>
 8016452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016454:	2b00      	cmp	r3, #0
 8016456:	dd21      	ble.n	801649c <_strtod_l+0x76c>
 8016458:	4631      	mov	r1, r6
 801645a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801645c:	9805      	ldr	r0, [sp, #20]
 801645e:	f001 fa85 	bl	801796c <__pow5mult>
 8016462:	4606      	mov	r6, r0
 8016464:	b9d0      	cbnz	r0, 801649c <_strtod_l+0x76c>
 8016466:	2600      	movs	r6, #0
 8016468:	e672      	b.n	8016150 <_strtod_l+0x420>
 801646a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 801646e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8016472:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8016476:	37e2      	adds	r7, #226	@ 0xe2
 8016478:	fa02 f107 	lsl.w	r1, r2, r7
 801647c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801647e:	920c      	str	r2, [sp, #48]	@ 0x30
 8016480:	e7b8      	b.n	80163f4 <_strtod_l+0x6c4>
 8016482:	2200      	movs	r2, #0
 8016484:	920b      	str	r2, [sp, #44]	@ 0x2c
 8016486:	2201      	movs	r2, #1
 8016488:	e7f9      	b.n	801647e <_strtod_l+0x74e>
 801648a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801648c:	9805      	ldr	r0, [sp, #20]
 801648e:	463a      	mov	r2, r7
 8016490:	f001 fac6 	bl	8017a20 <__lshift>
 8016494:	9012      	str	r0, [sp, #72]	@ 0x48
 8016496:	2800      	cmp	r0, #0
 8016498:	d1db      	bne.n	8016452 <_strtod_l+0x722>
 801649a:	e659      	b.n	8016150 <_strtod_l+0x420>
 801649c:	f1b8 0f00 	cmp.w	r8, #0
 80164a0:	dd07      	ble.n	80164b2 <_strtod_l+0x782>
 80164a2:	4631      	mov	r1, r6
 80164a4:	9805      	ldr	r0, [sp, #20]
 80164a6:	4642      	mov	r2, r8
 80164a8:	f001 faba 	bl	8017a20 <__lshift>
 80164ac:	4606      	mov	r6, r0
 80164ae:	2800      	cmp	r0, #0
 80164b0:	d0d9      	beq.n	8016466 <_strtod_l+0x736>
 80164b2:	f1b9 0f00 	cmp.w	r9, #0
 80164b6:	dd08      	ble.n	80164ca <_strtod_l+0x79a>
 80164b8:	4629      	mov	r1, r5
 80164ba:	9805      	ldr	r0, [sp, #20]
 80164bc:	464a      	mov	r2, r9
 80164be:	f001 faaf 	bl	8017a20 <__lshift>
 80164c2:	4605      	mov	r5, r0
 80164c4:	2800      	cmp	r0, #0
 80164c6:	f43f ae43 	beq.w	8016150 <_strtod_l+0x420>
 80164ca:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80164cc:	9805      	ldr	r0, [sp, #20]
 80164ce:	4632      	mov	r2, r6
 80164d0:	f001 fb2e 	bl	8017b30 <__mdiff>
 80164d4:	4604      	mov	r4, r0
 80164d6:	2800      	cmp	r0, #0
 80164d8:	f43f ae3a 	beq.w	8016150 <_strtod_l+0x420>
 80164dc:	2300      	movs	r3, #0
 80164de:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80164e2:	60c3      	str	r3, [r0, #12]
 80164e4:	4629      	mov	r1, r5
 80164e6:	f001 fb07 	bl	8017af8 <__mcmp>
 80164ea:	2800      	cmp	r0, #0
 80164ec:	da4e      	bge.n	801658c <_strtod_l+0x85c>
 80164ee:	ea58 080a 	orrs.w	r8, r8, sl
 80164f2:	d174      	bne.n	80165de <_strtod_l+0x8ae>
 80164f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d170      	bne.n	80165de <_strtod_l+0x8ae>
 80164fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016500:	0d1b      	lsrs	r3, r3, #20
 8016502:	051b      	lsls	r3, r3, #20
 8016504:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016508:	d969      	bls.n	80165de <_strtod_l+0x8ae>
 801650a:	6963      	ldr	r3, [r4, #20]
 801650c:	b913      	cbnz	r3, 8016514 <_strtod_l+0x7e4>
 801650e:	6923      	ldr	r3, [r4, #16]
 8016510:	2b01      	cmp	r3, #1
 8016512:	dd64      	ble.n	80165de <_strtod_l+0x8ae>
 8016514:	4621      	mov	r1, r4
 8016516:	2201      	movs	r2, #1
 8016518:	9805      	ldr	r0, [sp, #20]
 801651a:	f001 fa81 	bl	8017a20 <__lshift>
 801651e:	4629      	mov	r1, r5
 8016520:	4604      	mov	r4, r0
 8016522:	f001 fae9 	bl	8017af8 <__mcmp>
 8016526:	2800      	cmp	r0, #0
 8016528:	dd59      	ble.n	80165de <_strtod_l+0x8ae>
 801652a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801652e:	9a06      	ldr	r2, [sp, #24]
 8016530:	0d1b      	lsrs	r3, r3, #20
 8016532:	051b      	lsls	r3, r3, #20
 8016534:	2a00      	cmp	r2, #0
 8016536:	d070      	beq.n	801661a <_strtod_l+0x8ea>
 8016538:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801653c:	d86d      	bhi.n	801661a <_strtod_l+0x8ea>
 801653e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8016542:	f67f ae99 	bls.w	8016278 <_strtod_l+0x548>
 8016546:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8016578 <_strtod_l+0x848>
 801654a:	ec4b ab16 	vmov	d6, sl, fp
 801654e:	4b0e      	ldr	r3, [pc, #56]	@ (8016588 <_strtod_l+0x858>)
 8016550:	ee26 7b07 	vmul.f64	d7, d6, d7
 8016554:	ee17 2a90 	vmov	r2, s15
 8016558:	4013      	ands	r3, r2
 801655a:	ec5b ab17 	vmov	sl, fp, d7
 801655e:	2b00      	cmp	r3, #0
 8016560:	f47f ae01 	bne.w	8016166 <_strtod_l+0x436>
 8016564:	9a05      	ldr	r2, [sp, #20]
 8016566:	2322      	movs	r3, #34	@ 0x22
 8016568:	6013      	str	r3, [r2, #0]
 801656a:	e5fc      	b.n	8016166 <_strtod_l+0x436>
 801656c:	f3af 8000 	nop.w
 8016570:	ffc00000 	.word	0xffc00000
 8016574:	41dfffff 	.word	0x41dfffff
 8016578:	00000000 	.word	0x00000000
 801657c:	39500000 	.word	0x39500000
 8016580:	08019170 	.word	0x08019170
 8016584:	fffffc02 	.word	0xfffffc02
 8016588:	7ff00000 	.word	0x7ff00000
 801658c:	46d9      	mov	r9, fp
 801658e:	d15d      	bne.n	801664c <_strtod_l+0x91c>
 8016590:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016594:	f1b8 0f00 	cmp.w	r8, #0
 8016598:	d02a      	beq.n	80165f0 <_strtod_l+0x8c0>
 801659a:	4aab      	ldr	r2, [pc, #684]	@ (8016848 <_strtod_l+0xb18>)
 801659c:	4293      	cmp	r3, r2
 801659e:	d12a      	bne.n	80165f6 <_strtod_l+0x8c6>
 80165a0:	9b06      	ldr	r3, [sp, #24]
 80165a2:	4652      	mov	r2, sl
 80165a4:	b1fb      	cbz	r3, 80165e6 <_strtod_l+0x8b6>
 80165a6:	4ba9      	ldr	r3, [pc, #676]	@ (801684c <_strtod_l+0xb1c>)
 80165a8:	ea0b 0303 	and.w	r3, fp, r3
 80165ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80165b0:	f04f 31ff 	mov.w	r1, #4294967295
 80165b4:	d81a      	bhi.n	80165ec <_strtod_l+0x8bc>
 80165b6:	0d1b      	lsrs	r3, r3, #20
 80165b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80165bc:	fa01 f303 	lsl.w	r3, r1, r3
 80165c0:	429a      	cmp	r2, r3
 80165c2:	d118      	bne.n	80165f6 <_strtod_l+0x8c6>
 80165c4:	4ba2      	ldr	r3, [pc, #648]	@ (8016850 <_strtod_l+0xb20>)
 80165c6:	4599      	cmp	r9, r3
 80165c8:	d102      	bne.n	80165d0 <_strtod_l+0x8a0>
 80165ca:	3201      	adds	r2, #1
 80165cc:	f43f adc0 	beq.w	8016150 <_strtod_l+0x420>
 80165d0:	4b9e      	ldr	r3, [pc, #632]	@ (801684c <_strtod_l+0xb1c>)
 80165d2:	ea09 0303 	and.w	r3, r9, r3
 80165d6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 80165da:	f04f 0a00 	mov.w	sl, #0
 80165de:	9b06      	ldr	r3, [sp, #24]
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	d1b0      	bne.n	8016546 <_strtod_l+0x816>
 80165e4:	e5bf      	b.n	8016166 <_strtod_l+0x436>
 80165e6:	f04f 33ff 	mov.w	r3, #4294967295
 80165ea:	e7e9      	b.n	80165c0 <_strtod_l+0x890>
 80165ec:	460b      	mov	r3, r1
 80165ee:	e7e7      	b.n	80165c0 <_strtod_l+0x890>
 80165f0:	ea53 030a 	orrs.w	r3, r3, sl
 80165f4:	d099      	beq.n	801652a <_strtod_l+0x7fa>
 80165f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80165f8:	b1c3      	cbz	r3, 801662c <_strtod_l+0x8fc>
 80165fa:	ea13 0f09 	tst.w	r3, r9
 80165fe:	d0ee      	beq.n	80165de <_strtod_l+0x8ae>
 8016600:	9a06      	ldr	r2, [sp, #24]
 8016602:	4650      	mov	r0, sl
 8016604:	4659      	mov	r1, fp
 8016606:	f1b8 0f00 	cmp.w	r8, #0
 801660a:	d013      	beq.n	8016634 <_strtod_l+0x904>
 801660c:	f7ff fb75 	bl	8015cfa <sulp>
 8016610:	ee39 7b00 	vadd.f64	d7, d9, d0
 8016614:	ec5b ab17 	vmov	sl, fp, d7
 8016618:	e7e1      	b.n	80165de <_strtod_l+0x8ae>
 801661a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801661e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016622:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016626:	f04f 3aff 	mov.w	sl, #4294967295
 801662a:	e7d8      	b.n	80165de <_strtod_l+0x8ae>
 801662c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801662e:	ea13 0f0a 	tst.w	r3, sl
 8016632:	e7e4      	b.n	80165fe <_strtod_l+0x8ce>
 8016634:	f7ff fb61 	bl	8015cfa <sulp>
 8016638:	ee39 0b40 	vsub.f64	d0, d9, d0
 801663c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8016640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016644:	ec5b ab10 	vmov	sl, fp, d0
 8016648:	d1c9      	bne.n	80165de <_strtod_l+0x8ae>
 801664a:	e615      	b.n	8016278 <_strtod_l+0x548>
 801664c:	4629      	mov	r1, r5
 801664e:	4620      	mov	r0, r4
 8016650:	f001 fbca 	bl	8017de8 <__ratio>
 8016654:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8016658:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801665c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016660:	d85d      	bhi.n	801671e <_strtod_l+0x9ee>
 8016662:	f1b8 0f00 	cmp.w	r8, #0
 8016666:	d164      	bne.n	8016732 <_strtod_l+0xa02>
 8016668:	f1ba 0f00 	cmp.w	sl, #0
 801666c:	d14b      	bne.n	8016706 <_strtod_l+0x9d6>
 801666e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016672:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8016676:	2b00      	cmp	r3, #0
 8016678:	d160      	bne.n	801673c <_strtod_l+0xa0c>
 801667a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 801667e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8016682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016686:	d401      	bmi.n	801668c <_strtod_l+0x95c>
 8016688:	ee20 8b08 	vmul.f64	d8, d0, d8
 801668c:	eeb1 ab48 	vneg.f64	d10, d8
 8016690:	486e      	ldr	r0, [pc, #440]	@ (801684c <_strtod_l+0xb1c>)
 8016692:	4970      	ldr	r1, [pc, #448]	@ (8016854 <_strtod_l+0xb24>)
 8016694:	ea09 0700 	and.w	r7, r9, r0
 8016698:	428f      	cmp	r7, r1
 801669a:	ec53 2b1a 	vmov	r2, r3, d10
 801669e:	d17d      	bne.n	801679c <_strtod_l+0xa6c>
 80166a0:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 80166a4:	ec4b ab1c 	vmov	d12, sl, fp
 80166a8:	eeb0 0b4c 	vmov.f64	d0, d12
 80166ac:	f001 fad4 	bl	8017c58 <__ulp>
 80166b0:	4866      	ldr	r0, [pc, #408]	@ (801684c <_strtod_l+0xb1c>)
 80166b2:	eea0 cb0a 	vfma.f64	d12, d0, d10
 80166b6:	ee1c 3a90 	vmov	r3, s25
 80166ba:	4a67      	ldr	r2, [pc, #412]	@ (8016858 <_strtod_l+0xb28>)
 80166bc:	ea03 0100 	and.w	r1, r3, r0
 80166c0:	4291      	cmp	r1, r2
 80166c2:	ec5b ab1c 	vmov	sl, fp, d12
 80166c6:	d93c      	bls.n	8016742 <_strtod_l+0xa12>
 80166c8:	ee19 2a90 	vmov	r2, s19
 80166cc:	4b60      	ldr	r3, [pc, #384]	@ (8016850 <_strtod_l+0xb20>)
 80166ce:	429a      	cmp	r2, r3
 80166d0:	d104      	bne.n	80166dc <_strtod_l+0x9ac>
 80166d2:	ee19 3a10 	vmov	r3, s18
 80166d6:	3301      	adds	r3, #1
 80166d8:	f43f ad3a 	beq.w	8016150 <_strtod_l+0x420>
 80166dc:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8016850 <_strtod_l+0xb20>
 80166e0:	f04f 3aff 	mov.w	sl, #4294967295
 80166e4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80166e6:	9805      	ldr	r0, [sp, #20]
 80166e8:	f000 ff82 	bl	80175f0 <_Bfree>
 80166ec:	9805      	ldr	r0, [sp, #20]
 80166ee:	4631      	mov	r1, r6
 80166f0:	f000 ff7e 	bl	80175f0 <_Bfree>
 80166f4:	9805      	ldr	r0, [sp, #20]
 80166f6:	4629      	mov	r1, r5
 80166f8:	f000 ff7a 	bl	80175f0 <_Bfree>
 80166fc:	9805      	ldr	r0, [sp, #20]
 80166fe:	4621      	mov	r1, r4
 8016700:	f000 ff76 	bl	80175f0 <_Bfree>
 8016704:	e625      	b.n	8016352 <_strtod_l+0x622>
 8016706:	f1ba 0f01 	cmp.w	sl, #1
 801670a:	d103      	bne.n	8016714 <_strtod_l+0x9e4>
 801670c:	f1bb 0f00 	cmp.w	fp, #0
 8016710:	f43f adb2 	beq.w	8016278 <_strtod_l+0x548>
 8016714:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8016718:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801671c:	e7b8      	b.n	8016690 <_strtod_l+0x960>
 801671e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8016722:	ee20 8b08 	vmul.f64	d8, d0, d8
 8016726:	f1b8 0f00 	cmp.w	r8, #0
 801672a:	d0af      	beq.n	801668c <_strtod_l+0x95c>
 801672c:	eeb0 ab48 	vmov.f64	d10, d8
 8016730:	e7ae      	b.n	8016690 <_strtod_l+0x960>
 8016732:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8016736:	eeb0 8b4a 	vmov.f64	d8, d10
 801673a:	e7a9      	b.n	8016690 <_strtod_l+0x960>
 801673c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8016740:	e7a6      	b.n	8016690 <_strtod_l+0x960>
 8016742:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8016746:	9b06      	ldr	r3, [sp, #24]
 8016748:	46d9      	mov	r9, fp
 801674a:	2b00      	cmp	r3, #0
 801674c:	d1ca      	bne.n	80166e4 <_strtod_l+0x9b4>
 801674e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016752:	0d1b      	lsrs	r3, r3, #20
 8016754:	051b      	lsls	r3, r3, #20
 8016756:	429f      	cmp	r7, r3
 8016758:	d1c4      	bne.n	80166e4 <_strtod_l+0x9b4>
 801675a:	ec51 0b18 	vmov	r0, r1, d8
 801675e:	f7ea f84b 	bl	80007f8 <__aeabi_d2lz>
 8016762:	f7e9 ffb3 	bl	80006cc <__aeabi_l2d>
 8016766:	f3cb 0913 	ubfx	r9, fp, #0, #20
 801676a:	ec41 0b17 	vmov	d7, r0, r1
 801676e:	ea49 090a 	orr.w	r9, r9, sl
 8016772:	ea59 0908 	orrs.w	r9, r9, r8
 8016776:	ee38 8b47 	vsub.f64	d8, d8, d7
 801677a:	d03c      	beq.n	80167f6 <_strtod_l+0xac6>
 801677c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8016830 <_strtod_l+0xb00>
 8016780:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016788:	f53f aced 	bmi.w	8016166 <_strtod_l+0x436>
 801678c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8016838 <_strtod_l+0xb08>
 8016790:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016798:	dda4      	ble.n	80166e4 <_strtod_l+0x9b4>
 801679a:	e4e4      	b.n	8016166 <_strtod_l+0x436>
 801679c:	9906      	ldr	r1, [sp, #24]
 801679e:	b1e1      	cbz	r1, 80167da <_strtod_l+0xaaa>
 80167a0:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 80167a4:	d819      	bhi.n	80167da <_strtod_l+0xaaa>
 80167a6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80167aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167ae:	d811      	bhi.n	80167d4 <_strtod_l+0xaa4>
 80167b0:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80167b4:	ee18 3a10 	vmov	r3, s16
 80167b8:	2b01      	cmp	r3, #1
 80167ba:	bf38      	it	cc
 80167bc:	2301      	movcc	r3, #1
 80167be:	ee08 3a10 	vmov	s16, r3
 80167c2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80167c6:	f1b8 0f00 	cmp.w	r8, #0
 80167ca:	d111      	bne.n	80167f0 <_strtod_l+0xac0>
 80167cc:	eeb1 7b48 	vneg.f64	d7, d8
 80167d0:	ec53 2b17 	vmov	r2, r3, d7
 80167d4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 80167d8:	1bcb      	subs	r3, r1, r7
 80167da:	eeb0 0b49 	vmov.f64	d0, d9
 80167de:	ec43 2b1a 	vmov	d10, r2, r3
 80167e2:	f001 fa39 	bl	8017c58 <__ulp>
 80167e6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 80167ea:	ec5b ab19 	vmov	sl, fp, d9
 80167ee:	e7aa      	b.n	8016746 <_strtod_l+0xa16>
 80167f0:	eeb0 7b48 	vmov.f64	d7, d8
 80167f4:	e7ec      	b.n	80167d0 <_strtod_l+0xaa0>
 80167f6:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8016840 <_strtod_l+0xb10>
 80167fa:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80167fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016802:	f57f af6f 	bpl.w	80166e4 <_strtod_l+0x9b4>
 8016806:	e4ae      	b.n	8016166 <_strtod_l+0x436>
 8016808:	2300      	movs	r3, #0
 801680a:	9308      	str	r3, [sp, #32]
 801680c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801680e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016810:	6013      	str	r3, [r2, #0]
 8016812:	f7ff bacc 	b.w	8015dae <_strtod_l+0x7e>
 8016816:	2a65      	cmp	r2, #101	@ 0x65
 8016818:	f43f abbc 	beq.w	8015f94 <_strtod_l+0x264>
 801681c:	2a45      	cmp	r2, #69	@ 0x45
 801681e:	f43f abb9 	beq.w	8015f94 <_strtod_l+0x264>
 8016822:	2301      	movs	r3, #1
 8016824:	9306      	str	r3, [sp, #24]
 8016826:	f7ff bbf0 	b.w	801600a <_strtod_l+0x2da>
 801682a:	bf00      	nop
 801682c:	f3af 8000 	nop.w
 8016830:	94a03595 	.word	0x94a03595
 8016834:	3fdfffff 	.word	0x3fdfffff
 8016838:	35afe535 	.word	0x35afe535
 801683c:	3fe00000 	.word	0x3fe00000
 8016840:	94a03595 	.word	0x94a03595
 8016844:	3fcfffff 	.word	0x3fcfffff
 8016848:	000fffff 	.word	0x000fffff
 801684c:	7ff00000 	.word	0x7ff00000
 8016850:	7fefffff 	.word	0x7fefffff
 8016854:	7fe00000 	.word	0x7fe00000
 8016858:	7c9fffff 	.word	0x7c9fffff

0801685c <strtod>:
 801685c:	460a      	mov	r2, r1
 801685e:	4601      	mov	r1, r0
 8016860:	4802      	ldr	r0, [pc, #8]	@ (801686c <strtod+0x10>)
 8016862:	4b03      	ldr	r3, [pc, #12]	@ (8016870 <strtod+0x14>)
 8016864:	6800      	ldr	r0, [r0, #0]
 8016866:	f7ff ba63 	b.w	8015d30 <_strtod_l>
 801686a:	bf00      	nop
 801686c:	24000260 	.word	0x24000260
 8016870:	240000f4 	.word	0x240000f4

08016874 <_strtol_l.constprop.0>:
 8016874:	2b24      	cmp	r3, #36	@ 0x24
 8016876:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801687a:	4686      	mov	lr, r0
 801687c:	4690      	mov	r8, r2
 801687e:	d801      	bhi.n	8016884 <_strtol_l.constprop.0+0x10>
 8016880:	2b01      	cmp	r3, #1
 8016882:	d106      	bne.n	8016892 <_strtol_l.constprop.0+0x1e>
 8016884:	f000 f9ec 	bl	8016c60 <__errno>
 8016888:	2316      	movs	r3, #22
 801688a:	6003      	str	r3, [r0, #0]
 801688c:	2000      	movs	r0, #0
 801688e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016892:	4834      	ldr	r0, [pc, #208]	@ (8016964 <_strtol_l.constprop.0+0xf0>)
 8016894:	460d      	mov	r5, r1
 8016896:	462a      	mov	r2, r5
 8016898:	f815 4b01 	ldrb.w	r4, [r5], #1
 801689c:	5d06      	ldrb	r6, [r0, r4]
 801689e:	f016 0608 	ands.w	r6, r6, #8
 80168a2:	d1f8      	bne.n	8016896 <_strtol_l.constprop.0+0x22>
 80168a4:	2c2d      	cmp	r4, #45	@ 0x2d
 80168a6:	d12d      	bne.n	8016904 <_strtol_l.constprop.0+0x90>
 80168a8:	782c      	ldrb	r4, [r5, #0]
 80168aa:	2601      	movs	r6, #1
 80168ac:	1c95      	adds	r5, r2, #2
 80168ae:	f033 0210 	bics.w	r2, r3, #16
 80168b2:	d109      	bne.n	80168c8 <_strtol_l.constprop.0+0x54>
 80168b4:	2c30      	cmp	r4, #48	@ 0x30
 80168b6:	d12a      	bne.n	801690e <_strtol_l.constprop.0+0x9a>
 80168b8:	782a      	ldrb	r2, [r5, #0]
 80168ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80168be:	2a58      	cmp	r2, #88	@ 0x58
 80168c0:	d125      	bne.n	801690e <_strtol_l.constprop.0+0x9a>
 80168c2:	786c      	ldrb	r4, [r5, #1]
 80168c4:	2310      	movs	r3, #16
 80168c6:	3502      	adds	r5, #2
 80168c8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80168cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80168d0:	2200      	movs	r2, #0
 80168d2:	fbbc f9f3 	udiv	r9, ip, r3
 80168d6:	4610      	mov	r0, r2
 80168d8:	fb03 ca19 	mls	sl, r3, r9, ip
 80168dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80168e0:	2f09      	cmp	r7, #9
 80168e2:	d81b      	bhi.n	801691c <_strtol_l.constprop.0+0xa8>
 80168e4:	463c      	mov	r4, r7
 80168e6:	42a3      	cmp	r3, r4
 80168e8:	dd27      	ble.n	801693a <_strtol_l.constprop.0+0xc6>
 80168ea:	1c57      	adds	r7, r2, #1
 80168ec:	d007      	beq.n	80168fe <_strtol_l.constprop.0+0x8a>
 80168ee:	4581      	cmp	r9, r0
 80168f0:	d320      	bcc.n	8016934 <_strtol_l.constprop.0+0xc0>
 80168f2:	d101      	bne.n	80168f8 <_strtol_l.constprop.0+0x84>
 80168f4:	45a2      	cmp	sl, r4
 80168f6:	db1d      	blt.n	8016934 <_strtol_l.constprop.0+0xc0>
 80168f8:	fb00 4003 	mla	r0, r0, r3, r4
 80168fc:	2201      	movs	r2, #1
 80168fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016902:	e7eb      	b.n	80168dc <_strtol_l.constprop.0+0x68>
 8016904:	2c2b      	cmp	r4, #43	@ 0x2b
 8016906:	bf04      	itt	eq
 8016908:	782c      	ldrbeq	r4, [r5, #0]
 801690a:	1c95      	addeq	r5, r2, #2
 801690c:	e7cf      	b.n	80168ae <_strtol_l.constprop.0+0x3a>
 801690e:	2b00      	cmp	r3, #0
 8016910:	d1da      	bne.n	80168c8 <_strtol_l.constprop.0+0x54>
 8016912:	2c30      	cmp	r4, #48	@ 0x30
 8016914:	bf0c      	ite	eq
 8016916:	2308      	moveq	r3, #8
 8016918:	230a      	movne	r3, #10
 801691a:	e7d5      	b.n	80168c8 <_strtol_l.constprop.0+0x54>
 801691c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8016920:	2f19      	cmp	r7, #25
 8016922:	d801      	bhi.n	8016928 <_strtol_l.constprop.0+0xb4>
 8016924:	3c37      	subs	r4, #55	@ 0x37
 8016926:	e7de      	b.n	80168e6 <_strtol_l.constprop.0+0x72>
 8016928:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801692c:	2f19      	cmp	r7, #25
 801692e:	d804      	bhi.n	801693a <_strtol_l.constprop.0+0xc6>
 8016930:	3c57      	subs	r4, #87	@ 0x57
 8016932:	e7d8      	b.n	80168e6 <_strtol_l.constprop.0+0x72>
 8016934:	f04f 32ff 	mov.w	r2, #4294967295
 8016938:	e7e1      	b.n	80168fe <_strtol_l.constprop.0+0x8a>
 801693a:	1c53      	adds	r3, r2, #1
 801693c:	d108      	bne.n	8016950 <_strtol_l.constprop.0+0xdc>
 801693e:	2322      	movs	r3, #34	@ 0x22
 8016940:	f8ce 3000 	str.w	r3, [lr]
 8016944:	4660      	mov	r0, ip
 8016946:	f1b8 0f00 	cmp.w	r8, #0
 801694a:	d0a0      	beq.n	801688e <_strtol_l.constprop.0+0x1a>
 801694c:	1e69      	subs	r1, r5, #1
 801694e:	e006      	b.n	801695e <_strtol_l.constprop.0+0xea>
 8016950:	b106      	cbz	r6, 8016954 <_strtol_l.constprop.0+0xe0>
 8016952:	4240      	negs	r0, r0
 8016954:	f1b8 0f00 	cmp.w	r8, #0
 8016958:	d099      	beq.n	801688e <_strtol_l.constprop.0+0x1a>
 801695a:	2a00      	cmp	r2, #0
 801695c:	d1f6      	bne.n	801694c <_strtol_l.constprop.0+0xd8>
 801695e:	f8c8 1000 	str.w	r1, [r8]
 8016962:	e794      	b.n	801688e <_strtol_l.constprop.0+0x1a>
 8016964:	08019199 	.word	0x08019199

08016968 <strtol>:
 8016968:	4613      	mov	r3, r2
 801696a:	460a      	mov	r2, r1
 801696c:	4601      	mov	r1, r0
 801696e:	4802      	ldr	r0, [pc, #8]	@ (8016978 <strtol+0x10>)
 8016970:	6800      	ldr	r0, [r0, #0]
 8016972:	f7ff bf7f 	b.w	8016874 <_strtol_l.constprop.0>
 8016976:	bf00      	nop
 8016978:	24000260 	.word	0x24000260

0801697c <std>:
 801697c:	2300      	movs	r3, #0
 801697e:	b510      	push	{r4, lr}
 8016980:	4604      	mov	r4, r0
 8016982:	e9c0 3300 	strd	r3, r3, [r0]
 8016986:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801698a:	6083      	str	r3, [r0, #8]
 801698c:	8181      	strh	r1, [r0, #12]
 801698e:	6643      	str	r3, [r0, #100]	@ 0x64
 8016990:	81c2      	strh	r2, [r0, #14]
 8016992:	6183      	str	r3, [r0, #24]
 8016994:	4619      	mov	r1, r3
 8016996:	2208      	movs	r2, #8
 8016998:	305c      	adds	r0, #92	@ 0x5c
 801699a:	f000 f8f4 	bl	8016b86 <memset>
 801699e:	4b0d      	ldr	r3, [pc, #52]	@ (80169d4 <std+0x58>)
 80169a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80169a2:	4b0d      	ldr	r3, [pc, #52]	@ (80169d8 <std+0x5c>)
 80169a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80169a6:	4b0d      	ldr	r3, [pc, #52]	@ (80169dc <std+0x60>)
 80169a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80169aa:	4b0d      	ldr	r3, [pc, #52]	@ (80169e0 <std+0x64>)
 80169ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80169ae:	4b0d      	ldr	r3, [pc, #52]	@ (80169e4 <std+0x68>)
 80169b0:	6224      	str	r4, [r4, #32]
 80169b2:	429c      	cmp	r4, r3
 80169b4:	d006      	beq.n	80169c4 <std+0x48>
 80169b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80169ba:	4294      	cmp	r4, r2
 80169bc:	d002      	beq.n	80169c4 <std+0x48>
 80169be:	33d0      	adds	r3, #208	@ 0xd0
 80169c0:	429c      	cmp	r4, r3
 80169c2:	d105      	bne.n	80169d0 <std+0x54>
 80169c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80169c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80169cc:	f000 b972 	b.w	8016cb4 <__retarget_lock_init_recursive>
 80169d0:	bd10      	pop	{r4, pc}
 80169d2:	bf00      	nop
 80169d4:	08016b01 	.word	0x08016b01
 80169d8:	08016b23 	.word	0x08016b23
 80169dc:	08016b5b 	.word	0x08016b5b
 80169e0:	08016b7f 	.word	0x08016b7f
 80169e4:	240056d4 	.word	0x240056d4

080169e8 <stdio_exit_handler>:
 80169e8:	4a02      	ldr	r2, [pc, #8]	@ (80169f4 <stdio_exit_handler+0xc>)
 80169ea:	4903      	ldr	r1, [pc, #12]	@ (80169f8 <stdio_exit_handler+0x10>)
 80169ec:	4803      	ldr	r0, [pc, #12]	@ (80169fc <stdio_exit_handler+0x14>)
 80169ee:	f000 b869 	b.w	8016ac4 <_fwalk_sglue>
 80169f2:	bf00      	nop
 80169f4:	240000e8 	.word	0x240000e8
 80169f8:	08017ff1 	.word	0x08017ff1
 80169fc:	24000264 	.word	0x24000264

08016a00 <cleanup_stdio>:
 8016a00:	6841      	ldr	r1, [r0, #4]
 8016a02:	4b0c      	ldr	r3, [pc, #48]	@ (8016a34 <cleanup_stdio+0x34>)
 8016a04:	4299      	cmp	r1, r3
 8016a06:	b510      	push	{r4, lr}
 8016a08:	4604      	mov	r4, r0
 8016a0a:	d001      	beq.n	8016a10 <cleanup_stdio+0x10>
 8016a0c:	f001 faf0 	bl	8017ff0 <_fflush_r>
 8016a10:	68a1      	ldr	r1, [r4, #8]
 8016a12:	4b09      	ldr	r3, [pc, #36]	@ (8016a38 <cleanup_stdio+0x38>)
 8016a14:	4299      	cmp	r1, r3
 8016a16:	d002      	beq.n	8016a1e <cleanup_stdio+0x1e>
 8016a18:	4620      	mov	r0, r4
 8016a1a:	f001 fae9 	bl	8017ff0 <_fflush_r>
 8016a1e:	68e1      	ldr	r1, [r4, #12]
 8016a20:	4b06      	ldr	r3, [pc, #24]	@ (8016a3c <cleanup_stdio+0x3c>)
 8016a22:	4299      	cmp	r1, r3
 8016a24:	d004      	beq.n	8016a30 <cleanup_stdio+0x30>
 8016a26:	4620      	mov	r0, r4
 8016a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a2c:	f001 bae0 	b.w	8017ff0 <_fflush_r>
 8016a30:	bd10      	pop	{r4, pc}
 8016a32:	bf00      	nop
 8016a34:	240056d4 	.word	0x240056d4
 8016a38:	2400573c 	.word	0x2400573c
 8016a3c:	240057a4 	.word	0x240057a4

08016a40 <global_stdio_init.part.0>:
 8016a40:	b510      	push	{r4, lr}
 8016a42:	4b0b      	ldr	r3, [pc, #44]	@ (8016a70 <global_stdio_init.part.0+0x30>)
 8016a44:	4c0b      	ldr	r4, [pc, #44]	@ (8016a74 <global_stdio_init.part.0+0x34>)
 8016a46:	4a0c      	ldr	r2, [pc, #48]	@ (8016a78 <global_stdio_init.part.0+0x38>)
 8016a48:	601a      	str	r2, [r3, #0]
 8016a4a:	4620      	mov	r0, r4
 8016a4c:	2200      	movs	r2, #0
 8016a4e:	2104      	movs	r1, #4
 8016a50:	f7ff ff94 	bl	801697c <std>
 8016a54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016a58:	2201      	movs	r2, #1
 8016a5a:	2109      	movs	r1, #9
 8016a5c:	f7ff ff8e 	bl	801697c <std>
 8016a60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016a64:	2202      	movs	r2, #2
 8016a66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a6a:	2112      	movs	r1, #18
 8016a6c:	f7ff bf86 	b.w	801697c <std>
 8016a70:	2400580c 	.word	0x2400580c
 8016a74:	240056d4 	.word	0x240056d4
 8016a78:	080169e9 	.word	0x080169e9

08016a7c <__sfp_lock_acquire>:
 8016a7c:	4801      	ldr	r0, [pc, #4]	@ (8016a84 <__sfp_lock_acquire+0x8>)
 8016a7e:	f000 b91a 	b.w	8016cb6 <__retarget_lock_acquire_recursive>
 8016a82:	bf00      	nop
 8016a84:	24005815 	.word	0x24005815

08016a88 <__sfp_lock_release>:
 8016a88:	4801      	ldr	r0, [pc, #4]	@ (8016a90 <__sfp_lock_release+0x8>)
 8016a8a:	f000 b915 	b.w	8016cb8 <__retarget_lock_release_recursive>
 8016a8e:	bf00      	nop
 8016a90:	24005815 	.word	0x24005815

08016a94 <__sinit>:
 8016a94:	b510      	push	{r4, lr}
 8016a96:	4604      	mov	r4, r0
 8016a98:	f7ff fff0 	bl	8016a7c <__sfp_lock_acquire>
 8016a9c:	6a23      	ldr	r3, [r4, #32]
 8016a9e:	b11b      	cbz	r3, 8016aa8 <__sinit+0x14>
 8016aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016aa4:	f7ff bff0 	b.w	8016a88 <__sfp_lock_release>
 8016aa8:	4b04      	ldr	r3, [pc, #16]	@ (8016abc <__sinit+0x28>)
 8016aaa:	6223      	str	r3, [r4, #32]
 8016aac:	4b04      	ldr	r3, [pc, #16]	@ (8016ac0 <__sinit+0x2c>)
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	d1f5      	bne.n	8016aa0 <__sinit+0xc>
 8016ab4:	f7ff ffc4 	bl	8016a40 <global_stdio_init.part.0>
 8016ab8:	e7f2      	b.n	8016aa0 <__sinit+0xc>
 8016aba:	bf00      	nop
 8016abc:	08016a01 	.word	0x08016a01
 8016ac0:	2400580c 	.word	0x2400580c

08016ac4 <_fwalk_sglue>:
 8016ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ac8:	4607      	mov	r7, r0
 8016aca:	4688      	mov	r8, r1
 8016acc:	4614      	mov	r4, r2
 8016ace:	2600      	movs	r6, #0
 8016ad0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016ad4:	f1b9 0901 	subs.w	r9, r9, #1
 8016ad8:	d505      	bpl.n	8016ae6 <_fwalk_sglue+0x22>
 8016ada:	6824      	ldr	r4, [r4, #0]
 8016adc:	2c00      	cmp	r4, #0
 8016ade:	d1f7      	bne.n	8016ad0 <_fwalk_sglue+0xc>
 8016ae0:	4630      	mov	r0, r6
 8016ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ae6:	89ab      	ldrh	r3, [r5, #12]
 8016ae8:	2b01      	cmp	r3, #1
 8016aea:	d907      	bls.n	8016afc <_fwalk_sglue+0x38>
 8016aec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016af0:	3301      	adds	r3, #1
 8016af2:	d003      	beq.n	8016afc <_fwalk_sglue+0x38>
 8016af4:	4629      	mov	r1, r5
 8016af6:	4638      	mov	r0, r7
 8016af8:	47c0      	blx	r8
 8016afa:	4306      	orrs	r6, r0
 8016afc:	3568      	adds	r5, #104	@ 0x68
 8016afe:	e7e9      	b.n	8016ad4 <_fwalk_sglue+0x10>

08016b00 <__sread>:
 8016b00:	b510      	push	{r4, lr}
 8016b02:	460c      	mov	r4, r1
 8016b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b08:	f000 f886 	bl	8016c18 <_read_r>
 8016b0c:	2800      	cmp	r0, #0
 8016b0e:	bfab      	itete	ge
 8016b10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016b12:	89a3      	ldrhlt	r3, [r4, #12]
 8016b14:	181b      	addge	r3, r3, r0
 8016b16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016b1a:	bfac      	ite	ge
 8016b1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016b1e:	81a3      	strhlt	r3, [r4, #12]
 8016b20:	bd10      	pop	{r4, pc}

08016b22 <__swrite>:
 8016b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b26:	461f      	mov	r7, r3
 8016b28:	898b      	ldrh	r3, [r1, #12]
 8016b2a:	05db      	lsls	r3, r3, #23
 8016b2c:	4605      	mov	r5, r0
 8016b2e:	460c      	mov	r4, r1
 8016b30:	4616      	mov	r6, r2
 8016b32:	d505      	bpl.n	8016b40 <__swrite+0x1e>
 8016b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b38:	2302      	movs	r3, #2
 8016b3a:	2200      	movs	r2, #0
 8016b3c:	f000 f85a 	bl	8016bf4 <_lseek_r>
 8016b40:	89a3      	ldrh	r3, [r4, #12]
 8016b42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016b46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016b4a:	81a3      	strh	r3, [r4, #12]
 8016b4c:	4632      	mov	r2, r6
 8016b4e:	463b      	mov	r3, r7
 8016b50:	4628      	mov	r0, r5
 8016b52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b56:	f000 b871 	b.w	8016c3c <_write_r>

08016b5a <__sseek>:
 8016b5a:	b510      	push	{r4, lr}
 8016b5c:	460c      	mov	r4, r1
 8016b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b62:	f000 f847 	bl	8016bf4 <_lseek_r>
 8016b66:	1c43      	adds	r3, r0, #1
 8016b68:	89a3      	ldrh	r3, [r4, #12]
 8016b6a:	bf15      	itete	ne
 8016b6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016b6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016b72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016b76:	81a3      	strheq	r3, [r4, #12]
 8016b78:	bf18      	it	ne
 8016b7a:	81a3      	strhne	r3, [r4, #12]
 8016b7c:	bd10      	pop	{r4, pc}

08016b7e <__sclose>:
 8016b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b82:	f000 b827 	b.w	8016bd4 <_close_r>

08016b86 <memset>:
 8016b86:	4402      	add	r2, r0
 8016b88:	4603      	mov	r3, r0
 8016b8a:	4293      	cmp	r3, r2
 8016b8c:	d100      	bne.n	8016b90 <memset+0xa>
 8016b8e:	4770      	bx	lr
 8016b90:	f803 1b01 	strb.w	r1, [r3], #1
 8016b94:	e7f9      	b.n	8016b8a <memset+0x4>

08016b96 <strchr>:
 8016b96:	b2c9      	uxtb	r1, r1
 8016b98:	4603      	mov	r3, r0
 8016b9a:	4618      	mov	r0, r3
 8016b9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016ba0:	b112      	cbz	r2, 8016ba8 <strchr+0x12>
 8016ba2:	428a      	cmp	r2, r1
 8016ba4:	d1f9      	bne.n	8016b9a <strchr+0x4>
 8016ba6:	4770      	bx	lr
 8016ba8:	2900      	cmp	r1, #0
 8016baa:	bf18      	it	ne
 8016bac:	2000      	movne	r0, #0
 8016bae:	4770      	bx	lr

08016bb0 <strncmp>:
 8016bb0:	b510      	push	{r4, lr}
 8016bb2:	b16a      	cbz	r2, 8016bd0 <strncmp+0x20>
 8016bb4:	3901      	subs	r1, #1
 8016bb6:	1884      	adds	r4, r0, r2
 8016bb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016bbc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016bc0:	429a      	cmp	r2, r3
 8016bc2:	d103      	bne.n	8016bcc <strncmp+0x1c>
 8016bc4:	42a0      	cmp	r0, r4
 8016bc6:	d001      	beq.n	8016bcc <strncmp+0x1c>
 8016bc8:	2a00      	cmp	r2, #0
 8016bca:	d1f5      	bne.n	8016bb8 <strncmp+0x8>
 8016bcc:	1ad0      	subs	r0, r2, r3
 8016bce:	bd10      	pop	{r4, pc}
 8016bd0:	4610      	mov	r0, r2
 8016bd2:	e7fc      	b.n	8016bce <strncmp+0x1e>

08016bd4 <_close_r>:
 8016bd4:	b538      	push	{r3, r4, r5, lr}
 8016bd6:	4d06      	ldr	r5, [pc, #24]	@ (8016bf0 <_close_r+0x1c>)
 8016bd8:	2300      	movs	r3, #0
 8016bda:	4604      	mov	r4, r0
 8016bdc:	4608      	mov	r0, r1
 8016bde:	602b      	str	r3, [r5, #0]
 8016be0:	f7ed fd22 	bl	8004628 <_close>
 8016be4:	1c43      	adds	r3, r0, #1
 8016be6:	d102      	bne.n	8016bee <_close_r+0x1a>
 8016be8:	682b      	ldr	r3, [r5, #0]
 8016bea:	b103      	cbz	r3, 8016bee <_close_r+0x1a>
 8016bec:	6023      	str	r3, [r4, #0]
 8016bee:	bd38      	pop	{r3, r4, r5, pc}
 8016bf0:	24005810 	.word	0x24005810

08016bf4 <_lseek_r>:
 8016bf4:	b538      	push	{r3, r4, r5, lr}
 8016bf6:	4d07      	ldr	r5, [pc, #28]	@ (8016c14 <_lseek_r+0x20>)
 8016bf8:	4604      	mov	r4, r0
 8016bfa:	4608      	mov	r0, r1
 8016bfc:	4611      	mov	r1, r2
 8016bfe:	2200      	movs	r2, #0
 8016c00:	602a      	str	r2, [r5, #0]
 8016c02:	461a      	mov	r2, r3
 8016c04:	f7ed fd37 	bl	8004676 <_lseek>
 8016c08:	1c43      	adds	r3, r0, #1
 8016c0a:	d102      	bne.n	8016c12 <_lseek_r+0x1e>
 8016c0c:	682b      	ldr	r3, [r5, #0]
 8016c0e:	b103      	cbz	r3, 8016c12 <_lseek_r+0x1e>
 8016c10:	6023      	str	r3, [r4, #0]
 8016c12:	bd38      	pop	{r3, r4, r5, pc}
 8016c14:	24005810 	.word	0x24005810

08016c18 <_read_r>:
 8016c18:	b538      	push	{r3, r4, r5, lr}
 8016c1a:	4d07      	ldr	r5, [pc, #28]	@ (8016c38 <_read_r+0x20>)
 8016c1c:	4604      	mov	r4, r0
 8016c1e:	4608      	mov	r0, r1
 8016c20:	4611      	mov	r1, r2
 8016c22:	2200      	movs	r2, #0
 8016c24:	602a      	str	r2, [r5, #0]
 8016c26:	461a      	mov	r2, r3
 8016c28:	f7ed fcc5 	bl	80045b6 <_read>
 8016c2c:	1c43      	adds	r3, r0, #1
 8016c2e:	d102      	bne.n	8016c36 <_read_r+0x1e>
 8016c30:	682b      	ldr	r3, [r5, #0]
 8016c32:	b103      	cbz	r3, 8016c36 <_read_r+0x1e>
 8016c34:	6023      	str	r3, [r4, #0]
 8016c36:	bd38      	pop	{r3, r4, r5, pc}
 8016c38:	24005810 	.word	0x24005810

08016c3c <_write_r>:
 8016c3c:	b538      	push	{r3, r4, r5, lr}
 8016c3e:	4d07      	ldr	r5, [pc, #28]	@ (8016c5c <_write_r+0x20>)
 8016c40:	4604      	mov	r4, r0
 8016c42:	4608      	mov	r0, r1
 8016c44:	4611      	mov	r1, r2
 8016c46:	2200      	movs	r2, #0
 8016c48:	602a      	str	r2, [r5, #0]
 8016c4a:	461a      	mov	r2, r3
 8016c4c:	f7ed fcd0 	bl	80045f0 <_write>
 8016c50:	1c43      	adds	r3, r0, #1
 8016c52:	d102      	bne.n	8016c5a <_write_r+0x1e>
 8016c54:	682b      	ldr	r3, [r5, #0]
 8016c56:	b103      	cbz	r3, 8016c5a <_write_r+0x1e>
 8016c58:	6023      	str	r3, [r4, #0]
 8016c5a:	bd38      	pop	{r3, r4, r5, pc}
 8016c5c:	24005810 	.word	0x24005810

08016c60 <__errno>:
 8016c60:	4b01      	ldr	r3, [pc, #4]	@ (8016c68 <__errno+0x8>)
 8016c62:	6818      	ldr	r0, [r3, #0]
 8016c64:	4770      	bx	lr
 8016c66:	bf00      	nop
 8016c68:	24000260 	.word	0x24000260

08016c6c <__libc_init_array>:
 8016c6c:	b570      	push	{r4, r5, r6, lr}
 8016c6e:	4d0d      	ldr	r5, [pc, #52]	@ (8016ca4 <__libc_init_array+0x38>)
 8016c70:	4c0d      	ldr	r4, [pc, #52]	@ (8016ca8 <__libc_init_array+0x3c>)
 8016c72:	1b64      	subs	r4, r4, r5
 8016c74:	10a4      	asrs	r4, r4, #2
 8016c76:	2600      	movs	r6, #0
 8016c78:	42a6      	cmp	r6, r4
 8016c7a:	d109      	bne.n	8016c90 <__libc_init_array+0x24>
 8016c7c:	4d0b      	ldr	r5, [pc, #44]	@ (8016cac <__libc_init_array+0x40>)
 8016c7e:	4c0c      	ldr	r4, [pc, #48]	@ (8016cb0 <__libc_init_array+0x44>)
 8016c80:	f001 ff9a 	bl	8018bb8 <_init>
 8016c84:	1b64      	subs	r4, r4, r5
 8016c86:	10a4      	asrs	r4, r4, #2
 8016c88:	2600      	movs	r6, #0
 8016c8a:	42a6      	cmp	r6, r4
 8016c8c:	d105      	bne.n	8016c9a <__libc_init_array+0x2e>
 8016c8e:	bd70      	pop	{r4, r5, r6, pc}
 8016c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8016c94:	4798      	blx	r3
 8016c96:	3601      	adds	r6, #1
 8016c98:	e7ee      	b.n	8016c78 <__libc_init_array+0xc>
 8016c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8016c9e:	4798      	blx	r3
 8016ca0:	3601      	adds	r6, #1
 8016ca2:	e7f2      	b.n	8016c8a <__libc_init_array+0x1e>
 8016ca4:	08019d88 	.word	0x08019d88
 8016ca8:	08019d88 	.word	0x08019d88
 8016cac:	08019d88 	.word	0x08019d88
 8016cb0:	08019d8c 	.word	0x08019d8c

08016cb4 <__retarget_lock_init_recursive>:
 8016cb4:	4770      	bx	lr

08016cb6 <__retarget_lock_acquire_recursive>:
 8016cb6:	4770      	bx	lr

08016cb8 <__retarget_lock_release_recursive>:
 8016cb8:	4770      	bx	lr

08016cba <memcpy>:
 8016cba:	440a      	add	r2, r1
 8016cbc:	4291      	cmp	r1, r2
 8016cbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8016cc2:	d100      	bne.n	8016cc6 <memcpy+0xc>
 8016cc4:	4770      	bx	lr
 8016cc6:	b510      	push	{r4, lr}
 8016cc8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016ccc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016cd0:	4291      	cmp	r1, r2
 8016cd2:	d1f9      	bne.n	8016cc8 <memcpy+0xe>
 8016cd4:	bd10      	pop	{r4, pc}
	...

08016cd8 <nan>:
 8016cd8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016ce0 <nan+0x8>
 8016cdc:	4770      	bx	lr
 8016cde:	bf00      	nop
 8016ce0:	00000000 	.word	0x00000000
 8016ce4:	7ff80000 	.word	0x7ff80000

08016ce8 <_free_r>:
 8016ce8:	b538      	push	{r3, r4, r5, lr}
 8016cea:	4605      	mov	r5, r0
 8016cec:	2900      	cmp	r1, #0
 8016cee:	d041      	beq.n	8016d74 <_free_r+0x8c>
 8016cf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016cf4:	1f0c      	subs	r4, r1, #4
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	bfb8      	it	lt
 8016cfa:	18e4      	addlt	r4, r4, r3
 8016cfc:	f000 fc2c 	bl	8017558 <__malloc_lock>
 8016d00:	4a1d      	ldr	r2, [pc, #116]	@ (8016d78 <_free_r+0x90>)
 8016d02:	6813      	ldr	r3, [r2, #0]
 8016d04:	b933      	cbnz	r3, 8016d14 <_free_r+0x2c>
 8016d06:	6063      	str	r3, [r4, #4]
 8016d08:	6014      	str	r4, [r2, #0]
 8016d0a:	4628      	mov	r0, r5
 8016d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016d10:	f000 bc28 	b.w	8017564 <__malloc_unlock>
 8016d14:	42a3      	cmp	r3, r4
 8016d16:	d908      	bls.n	8016d2a <_free_r+0x42>
 8016d18:	6820      	ldr	r0, [r4, #0]
 8016d1a:	1821      	adds	r1, r4, r0
 8016d1c:	428b      	cmp	r3, r1
 8016d1e:	bf01      	itttt	eq
 8016d20:	6819      	ldreq	r1, [r3, #0]
 8016d22:	685b      	ldreq	r3, [r3, #4]
 8016d24:	1809      	addeq	r1, r1, r0
 8016d26:	6021      	streq	r1, [r4, #0]
 8016d28:	e7ed      	b.n	8016d06 <_free_r+0x1e>
 8016d2a:	461a      	mov	r2, r3
 8016d2c:	685b      	ldr	r3, [r3, #4]
 8016d2e:	b10b      	cbz	r3, 8016d34 <_free_r+0x4c>
 8016d30:	42a3      	cmp	r3, r4
 8016d32:	d9fa      	bls.n	8016d2a <_free_r+0x42>
 8016d34:	6811      	ldr	r1, [r2, #0]
 8016d36:	1850      	adds	r0, r2, r1
 8016d38:	42a0      	cmp	r0, r4
 8016d3a:	d10b      	bne.n	8016d54 <_free_r+0x6c>
 8016d3c:	6820      	ldr	r0, [r4, #0]
 8016d3e:	4401      	add	r1, r0
 8016d40:	1850      	adds	r0, r2, r1
 8016d42:	4283      	cmp	r3, r0
 8016d44:	6011      	str	r1, [r2, #0]
 8016d46:	d1e0      	bne.n	8016d0a <_free_r+0x22>
 8016d48:	6818      	ldr	r0, [r3, #0]
 8016d4a:	685b      	ldr	r3, [r3, #4]
 8016d4c:	6053      	str	r3, [r2, #4]
 8016d4e:	4408      	add	r0, r1
 8016d50:	6010      	str	r0, [r2, #0]
 8016d52:	e7da      	b.n	8016d0a <_free_r+0x22>
 8016d54:	d902      	bls.n	8016d5c <_free_r+0x74>
 8016d56:	230c      	movs	r3, #12
 8016d58:	602b      	str	r3, [r5, #0]
 8016d5a:	e7d6      	b.n	8016d0a <_free_r+0x22>
 8016d5c:	6820      	ldr	r0, [r4, #0]
 8016d5e:	1821      	adds	r1, r4, r0
 8016d60:	428b      	cmp	r3, r1
 8016d62:	bf04      	itt	eq
 8016d64:	6819      	ldreq	r1, [r3, #0]
 8016d66:	685b      	ldreq	r3, [r3, #4]
 8016d68:	6063      	str	r3, [r4, #4]
 8016d6a:	bf04      	itt	eq
 8016d6c:	1809      	addeq	r1, r1, r0
 8016d6e:	6021      	streq	r1, [r4, #0]
 8016d70:	6054      	str	r4, [r2, #4]
 8016d72:	e7ca      	b.n	8016d0a <_free_r+0x22>
 8016d74:	bd38      	pop	{r3, r4, r5, pc}
 8016d76:	bf00      	nop
 8016d78:	2400581c 	.word	0x2400581c

08016d7c <rshift>:
 8016d7c:	6903      	ldr	r3, [r0, #16]
 8016d7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016d82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016d86:	ea4f 1261 	mov.w	r2, r1, asr #5
 8016d8a:	f100 0414 	add.w	r4, r0, #20
 8016d8e:	dd45      	ble.n	8016e1c <rshift+0xa0>
 8016d90:	f011 011f 	ands.w	r1, r1, #31
 8016d94:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016d98:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8016d9c:	d10c      	bne.n	8016db8 <rshift+0x3c>
 8016d9e:	f100 0710 	add.w	r7, r0, #16
 8016da2:	4629      	mov	r1, r5
 8016da4:	42b1      	cmp	r1, r6
 8016da6:	d334      	bcc.n	8016e12 <rshift+0x96>
 8016da8:	1a9b      	subs	r3, r3, r2
 8016daa:	009b      	lsls	r3, r3, #2
 8016dac:	1eea      	subs	r2, r5, #3
 8016dae:	4296      	cmp	r6, r2
 8016db0:	bf38      	it	cc
 8016db2:	2300      	movcc	r3, #0
 8016db4:	4423      	add	r3, r4
 8016db6:	e015      	b.n	8016de4 <rshift+0x68>
 8016db8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016dbc:	f1c1 0820 	rsb	r8, r1, #32
 8016dc0:	40cf      	lsrs	r7, r1
 8016dc2:	f105 0e04 	add.w	lr, r5, #4
 8016dc6:	46a1      	mov	r9, r4
 8016dc8:	4576      	cmp	r6, lr
 8016dca:	46f4      	mov	ip, lr
 8016dcc:	d815      	bhi.n	8016dfa <rshift+0x7e>
 8016dce:	1a9a      	subs	r2, r3, r2
 8016dd0:	0092      	lsls	r2, r2, #2
 8016dd2:	3a04      	subs	r2, #4
 8016dd4:	3501      	adds	r5, #1
 8016dd6:	42ae      	cmp	r6, r5
 8016dd8:	bf38      	it	cc
 8016dda:	2200      	movcc	r2, #0
 8016ddc:	18a3      	adds	r3, r4, r2
 8016dde:	50a7      	str	r7, [r4, r2]
 8016de0:	b107      	cbz	r7, 8016de4 <rshift+0x68>
 8016de2:	3304      	adds	r3, #4
 8016de4:	1b1a      	subs	r2, r3, r4
 8016de6:	42a3      	cmp	r3, r4
 8016de8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016dec:	bf08      	it	eq
 8016dee:	2300      	moveq	r3, #0
 8016df0:	6102      	str	r2, [r0, #16]
 8016df2:	bf08      	it	eq
 8016df4:	6143      	streq	r3, [r0, #20]
 8016df6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016dfa:	f8dc c000 	ldr.w	ip, [ip]
 8016dfe:	fa0c fc08 	lsl.w	ip, ip, r8
 8016e02:	ea4c 0707 	orr.w	r7, ip, r7
 8016e06:	f849 7b04 	str.w	r7, [r9], #4
 8016e0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016e0e:	40cf      	lsrs	r7, r1
 8016e10:	e7da      	b.n	8016dc8 <rshift+0x4c>
 8016e12:	f851 cb04 	ldr.w	ip, [r1], #4
 8016e16:	f847 cf04 	str.w	ip, [r7, #4]!
 8016e1a:	e7c3      	b.n	8016da4 <rshift+0x28>
 8016e1c:	4623      	mov	r3, r4
 8016e1e:	e7e1      	b.n	8016de4 <rshift+0x68>

08016e20 <__hexdig_fun>:
 8016e20:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8016e24:	2b09      	cmp	r3, #9
 8016e26:	d802      	bhi.n	8016e2e <__hexdig_fun+0xe>
 8016e28:	3820      	subs	r0, #32
 8016e2a:	b2c0      	uxtb	r0, r0
 8016e2c:	4770      	bx	lr
 8016e2e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8016e32:	2b05      	cmp	r3, #5
 8016e34:	d801      	bhi.n	8016e3a <__hexdig_fun+0x1a>
 8016e36:	3847      	subs	r0, #71	@ 0x47
 8016e38:	e7f7      	b.n	8016e2a <__hexdig_fun+0xa>
 8016e3a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8016e3e:	2b05      	cmp	r3, #5
 8016e40:	d801      	bhi.n	8016e46 <__hexdig_fun+0x26>
 8016e42:	3827      	subs	r0, #39	@ 0x27
 8016e44:	e7f1      	b.n	8016e2a <__hexdig_fun+0xa>
 8016e46:	2000      	movs	r0, #0
 8016e48:	4770      	bx	lr
	...

08016e4c <__gethex>:
 8016e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e50:	b085      	sub	sp, #20
 8016e52:	468a      	mov	sl, r1
 8016e54:	9302      	str	r3, [sp, #8]
 8016e56:	680b      	ldr	r3, [r1, #0]
 8016e58:	9001      	str	r0, [sp, #4]
 8016e5a:	4690      	mov	r8, r2
 8016e5c:	1c9c      	adds	r4, r3, #2
 8016e5e:	46a1      	mov	r9, r4
 8016e60:	f814 0b01 	ldrb.w	r0, [r4], #1
 8016e64:	2830      	cmp	r0, #48	@ 0x30
 8016e66:	d0fa      	beq.n	8016e5e <__gethex+0x12>
 8016e68:	eba9 0303 	sub.w	r3, r9, r3
 8016e6c:	f1a3 0b02 	sub.w	fp, r3, #2
 8016e70:	f7ff ffd6 	bl	8016e20 <__hexdig_fun>
 8016e74:	4605      	mov	r5, r0
 8016e76:	2800      	cmp	r0, #0
 8016e78:	d168      	bne.n	8016f4c <__gethex+0x100>
 8016e7a:	49a0      	ldr	r1, [pc, #640]	@ (80170fc <__gethex+0x2b0>)
 8016e7c:	2201      	movs	r2, #1
 8016e7e:	4648      	mov	r0, r9
 8016e80:	f7ff fe96 	bl	8016bb0 <strncmp>
 8016e84:	4607      	mov	r7, r0
 8016e86:	2800      	cmp	r0, #0
 8016e88:	d167      	bne.n	8016f5a <__gethex+0x10e>
 8016e8a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8016e8e:	4626      	mov	r6, r4
 8016e90:	f7ff ffc6 	bl	8016e20 <__hexdig_fun>
 8016e94:	2800      	cmp	r0, #0
 8016e96:	d062      	beq.n	8016f5e <__gethex+0x112>
 8016e98:	4623      	mov	r3, r4
 8016e9a:	7818      	ldrb	r0, [r3, #0]
 8016e9c:	2830      	cmp	r0, #48	@ 0x30
 8016e9e:	4699      	mov	r9, r3
 8016ea0:	f103 0301 	add.w	r3, r3, #1
 8016ea4:	d0f9      	beq.n	8016e9a <__gethex+0x4e>
 8016ea6:	f7ff ffbb 	bl	8016e20 <__hexdig_fun>
 8016eaa:	fab0 f580 	clz	r5, r0
 8016eae:	096d      	lsrs	r5, r5, #5
 8016eb0:	f04f 0b01 	mov.w	fp, #1
 8016eb4:	464a      	mov	r2, r9
 8016eb6:	4616      	mov	r6, r2
 8016eb8:	3201      	adds	r2, #1
 8016eba:	7830      	ldrb	r0, [r6, #0]
 8016ebc:	f7ff ffb0 	bl	8016e20 <__hexdig_fun>
 8016ec0:	2800      	cmp	r0, #0
 8016ec2:	d1f8      	bne.n	8016eb6 <__gethex+0x6a>
 8016ec4:	498d      	ldr	r1, [pc, #564]	@ (80170fc <__gethex+0x2b0>)
 8016ec6:	2201      	movs	r2, #1
 8016ec8:	4630      	mov	r0, r6
 8016eca:	f7ff fe71 	bl	8016bb0 <strncmp>
 8016ece:	2800      	cmp	r0, #0
 8016ed0:	d13f      	bne.n	8016f52 <__gethex+0x106>
 8016ed2:	b944      	cbnz	r4, 8016ee6 <__gethex+0x9a>
 8016ed4:	1c74      	adds	r4, r6, #1
 8016ed6:	4622      	mov	r2, r4
 8016ed8:	4616      	mov	r6, r2
 8016eda:	3201      	adds	r2, #1
 8016edc:	7830      	ldrb	r0, [r6, #0]
 8016ede:	f7ff ff9f 	bl	8016e20 <__hexdig_fun>
 8016ee2:	2800      	cmp	r0, #0
 8016ee4:	d1f8      	bne.n	8016ed8 <__gethex+0x8c>
 8016ee6:	1ba4      	subs	r4, r4, r6
 8016ee8:	00a7      	lsls	r7, r4, #2
 8016eea:	7833      	ldrb	r3, [r6, #0]
 8016eec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8016ef0:	2b50      	cmp	r3, #80	@ 0x50
 8016ef2:	d13e      	bne.n	8016f72 <__gethex+0x126>
 8016ef4:	7873      	ldrb	r3, [r6, #1]
 8016ef6:	2b2b      	cmp	r3, #43	@ 0x2b
 8016ef8:	d033      	beq.n	8016f62 <__gethex+0x116>
 8016efa:	2b2d      	cmp	r3, #45	@ 0x2d
 8016efc:	d034      	beq.n	8016f68 <__gethex+0x11c>
 8016efe:	1c71      	adds	r1, r6, #1
 8016f00:	2400      	movs	r4, #0
 8016f02:	7808      	ldrb	r0, [r1, #0]
 8016f04:	f7ff ff8c 	bl	8016e20 <__hexdig_fun>
 8016f08:	1e43      	subs	r3, r0, #1
 8016f0a:	b2db      	uxtb	r3, r3
 8016f0c:	2b18      	cmp	r3, #24
 8016f0e:	d830      	bhi.n	8016f72 <__gethex+0x126>
 8016f10:	f1a0 0210 	sub.w	r2, r0, #16
 8016f14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016f18:	f7ff ff82 	bl	8016e20 <__hexdig_fun>
 8016f1c:	f100 3cff 	add.w	ip, r0, #4294967295
 8016f20:	fa5f fc8c 	uxtb.w	ip, ip
 8016f24:	f1bc 0f18 	cmp.w	ip, #24
 8016f28:	f04f 030a 	mov.w	r3, #10
 8016f2c:	d91e      	bls.n	8016f6c <__gethex+0x120>
 8016f2e:	b104      	cbz	r4, 8016f32 <__gethex+0xe6>
 8016f30:	4252      	negs	r2, r2
 8016f32:	4417      	add	r7, r2
 8016f34:	f8ca 1000 	str.w	r1, [sl]
 8016f38:	b1ed      	cbz	r5, 8016f76 <__gethex+0x12a>
 8016f3a:	f1bb 0f00 	cmp.w	fp, #0
 8016f3e:	bf0c      	ite	eq
 8016f40:	2506      	moveq	r5, #6
 8016f42:	2500      	movne	r5, #0
 8016f44:	4628      	mov	r0, r5
 8016f46:	b005      	add	sp, #20
 8016f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f4c:	2500      	movs	r5, #0
 8016f4e:	462c      	mov	r4, r5
 8016f50:	e7b0      	b.n	8016eb4 <__gethex+0x68>
 8016f52:	2c00      	cmp	r4, #0
 8016f54:	d1c7      	bne.n	8016ee6 <__gethex+0x9a>
 8016f56:	4627      	mov	r7, r4
 8016f58:	e7c7      	b.n	8016eea <__gethex+0x9e>
 8016f5a:	464e      	mov	r6, r9
 8016f5c:	462f      	mov	r7, r5
 8016f5e:	2501      	movs	r5, #1
 8016f60:	e7c3      	b.n	8016eea <__gethex+0x9e>
 8016f62:	2400      	movs	r4, #0
 8016f64:	1cb1      	adds	r1, r6, #2
 8016f66:	e7cc      	b.n	8016f02 <__gethex+0xb6>
 8016f68:	2401      	movs	r4, #1
 8016f6a:	e7fb      	b.n	8016f64 <__gethex+0x118>
 8016f6c:	fb03 0002 	mla	r0, r3, r2, r0
 8016f70:	e7ce      	b.n	8016f10 <__gethex+0xc4>
 8016f72:	4631      	mov	r1, r6
 8016f74:	e7de      	b.n	8016f34 <__gethex+0xe8>
 8016f76:	eba6 0309 	sub.w	r3, r6, r9
 8016f7a:	3b01      	subs	r3, #1
 8016f7c:	4629      	mov	r1, r5
 8016f7e:	2b07      	cmp	r3, #7
 8016f80:	dc0a      	bgt.n	8016f98 <__gethex+0x14c>
 8016f82:	9801      	ldr	r0, [sp, #4]
 8016f84:	f000 faf4 	bl	8017570 <_Balloc>
 8016f88:	4604      	mov	r4, r0
 8016f8a:	b940      	cbnz	r0, 8016f9e <__gethex+0x152>
 8016f8c:	4b5c      	ldr	r3, [pc, #368]	@ (8017100 <__gethex+0x2b4>)
 8016f8e:	4602      	mov	r2, r0
 8016f90:	21e4      	movs	r1, #228	@ 0xe4
 8016f92:	485c      	ldr	r0, [pc, #368]	@ (8017104 <__gethex+0x2b8>)
 8016f94:	f001 f864 	bl	8018060 <__assert_func>
 8016f98:	3101      	adds	r1, #1
 8016f9a:	105b      	asrs	r3, r3, #1
 8016f9c:	e7ef      	b.n	8016f7e <__gethex+0x132>
 8016f9e:	f100 0a14 	add.w	sl, r0, #20
 8016fa2:	2300      	movs	r3, #0
 8016fa4:	4655      	mov	r5, sl
 8016fa6:	469b      	mov	fp, r3
 8016fa8:	45b1      	cmp	r9, r6
 8016faa:	d337      	bcc.n	801701c <__gethex+0x1d0>
 8016fac:	f845 bb04 	str.w	fp, [r5], #4
 8016fb0:	eba5 050a 	sub.w	r5, r5, sl
 8016fb4:	10ad      	asrs	r5, r5, #2
 8016fb6:	6125      	str	r5, [r4, #16]
 8016fb8:	4658      	mov	r0, fp
 8016fba:	f000 fbcb 	bl	8017754 <__hi0bits>
 8016fbe:	016d      	lsls	r5, r5, #5
 8016fc0:	f8d8 6000 	ldr.w	r6, [r8]
 8016fc4:	1a2d      	subs	r5, r5, r0
 8016fc6:	42b5      	cmp	r5, r6
 8016fc8:	dd54      	ble.n	8017074 <__gethex+0x228>
 8016fca:	1bad      	subs	r5, r5, r6
 8016fcc:	4629      	mov	r1, r5
 8016fce:	4620      	mov	r0, r4
 8016fd0:	f000 ff5c 	bl	8017e8c <__any_on>
 8016fd4:	4681      	mov	r9, r0
 8016fd6:	b178      	cbz	r0, 8016ff8 <__gethex+0x1ac>
 8016fd8:	1e6b      	subs	r3, r5, #1
 8016fda:	1159      	asrs	r1, r3, #5
 8016fdc:	f003 021f 	and.w	r2, r3, #31
 8016fe0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8016fe4:	f04f 0901 	mov.w	r9, #1
 8016fe8:	fa09 f202 	lsl.w	r2, r9, r2
 8016fec:	420a      	tst	r2, r1
 8016fee:	d003      	beq.n	8016ff8 <__gethex+0x1ac>
 8016ff0:	454b      	cmp	r3, r9
 8016ff2:	dc36      	bgt.n	8017062 <__gethex+0x216>
 8016ff4:	f04f 0902 	mov.w	r9, #2
 8016ff8:	4629      	mov	r1, r5
 8016ffa:	4620      	mov	r0, r4
 8016ffc:	f7ff febe 	bl	8016d7c <rshift>
 8017000:	442f      	add	r7, r5
 8017002:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017006:	42bb      	cmp	r3, r7
 8017008:	da42      	bge.n	8017090 <__gethex+0x244>
 801700a:	9801      	ldr	r0, [sp, #4]
 801700c:	4621      	mov	r1, r4
 801700e:	f000 faef 	bl	80175f0 <_Bfree>
 8017012:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017014:	2300      	movs	r3, #0
 8017016:	6013      	str	r3, [r2, #0]
 8017018:	25a3      	movs	r5, #163	@ 0xa3
 801701a:	e793      	b.n	8016f44 <__gethex+0xf8>
 801701c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8017020:	2a2e      	cmp	r2, #46	@ 0x2e
 8017022:	d012      	beq.n	801704a <__gethex+0x1fe>
 8017024:	2b20      	cmp	r3, #32
 8017026:	d104      	bne.n	8017032 <__gethex+0x1e6>
 8017028:	f845 bb04 	str.w	fp, [r5], #4
 801702c:	f04f 0b00 	mov.w	fp, #0
 8017030:	465b      	mov	r3, fp
 8017032:	7830      	ldrb	r0, [r6, #0]
 8017034:	9303      	str	r3, [sp, #12]
 8017036:	f7ff fef3 	bl	8016e20 <__hexdig_fun>
 801703a:	9b03      	ldr	r3, [sp, #12]
 801703c:	f000 000f 	and.w	r0, r0, #15
 8017040:	4098      	lsls	r0, r3
 8017042:	ea4b 0b00 	orr.w	fp, fp, r0
 8017046:	3304      	adds	r3, #4
 8017048:	e7ae      	b.n	8016fa8 <__gethex+0x15c>
 801704a:	45b1      	cmp	r9, r6
 801704c:	d8ea      	bhi.n	8017024 <__gethex+0x1d8>
 801704e:	492b      	ldr	r1, [pc, #172]	@ (80170fc <__gethex+0x2b0>)
 8017050:	9303      	str	r3, [sp, #12]
 8017052:	2201      	movs	r2, #1
 8017054:	4630      	mov	r0, r6
 8017056:	f7ff fdab 	bl	8016bb0 <strncmp>
 801705a:	9b03      	ldr	r3, [sp, #12]
 801705c:	2800      	cmp	r0, #0
 801705e:	d1e1      	bne.n	8017024 <__gethex+0x1d8>
 8017060:	e7a2      	b.n	8016fa8 <__gethex+0x15c>
 8017062:	1ea9      	subs	r1, r5, #2
 8017064:	4620      	mov	r0, r4
 8017066:	f000 ff11 	bl	8017e8c <__any_on>
 801706a:	2800      	cmp	r0, #0
 801706c:	d0c2      	beq.n	8016ff4 <__gethex+0x1a8>
 801706e:	f04f 0903 	mov.w	r9, #3
 8017072:	e7c1      	b.n	8016ff8 <__gethex+0x1ac>
 8017074:	da09      	bge.n	801708a <__gethex+0x23e>
 8017076:	1b75      	subs	r5, r6, r5
 8017078:	4621      	mov	r1, r4
 801707a:	9801      	ldr	r0, [sp, #4]
 801707c:	462a      	mov	r2, r5
 801707e:	f000 fccf 	bl	8017a20 <__lshift>
 8017082:	1b7f      	subs	r7, r7, r5
 8017084:	4604      	mov	r4, r0
 8017086:	f100 0a14 	add.w	sl, r0, #20
 801708a:	f04f 0900 	mov.w	r9, #0
 801708e:	e7b8      	b.n	8017002 <__gethex+0x1b6>
 8017090:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017094:	42bd      	cmp	r5, r7
 8017096:	dd6f      	ble.n	8017178 <__gethex+0x32c>
 8017098:	1bed      	subs	r5, r5, r7
 801709a:	42ae      	cmp	r6, r5
 801709c:	dc34      	bgt.n	8017108 <__gethex+0x2bc>
 801709e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80170a2:	2b02      	cmp	r3, #2
 80170a4:	d022      	beq.n	80170ec <__gethex+0x2a0>
 80170a6:	2b03      	cmp	r3, #3
 80170a8:	d024      	beq.n	80170f4 <__gethex+0x2a8>
 80170aa:	2b01      	cmp	r3, #1
 80170ac:	d115      	bne.n	80170da <__gethex+0x28e>
 80170ae:	42ae      	cmp	r6, r5
 80170b0:	d113      	bne.n	80170da <__gethex+0x28e>
 80170b2:	2e01      	cmp	r6, #1
 80170b4:	d10b      	bne.n	80170ce <__gethex+0x282>
 80170b6:	9a02      	ldr	r2, [sp, #8]
 80170b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80170bc:	6013      	str	r3, [r2, #0]
 80170be:	2301      	movs	r3, #1
 80170c0:	6123      	str	r3, [r4, #16]
 80170c2:	f8ca 3000 	str.w	r3, [sl]
 80170c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80170c8:	2562      	movs	r5, #98	@ 0x62
 80170ca:	601c      	str	r4, [r3, #0]
 80170cc:	e73a      	b.n	8016f44 <__gethex+0xf8>
 80170ce:	1e71      	subs	r1, r6, #1
 80170d0:	4620      	mov	r0, r4
 80170d2:	f000 fedb 	bl	8017e8c <__any_on>
 80170d6:	2800      	cmp	r0, #0
 80170d8:	d1ed      	bne.n	80170b6 <__gethex+0x26a>
 80170da:	9801      	ldr	r0, [sp, #4]
 80170dc:	4621      	mov	r1, r4
 80170de:	f000 fa87 	bl	80175f0 <_Bfree>
 80170e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80170e4:	2300      	movs	r3, #0
 80170e6:	6013      	str	r3, [r2, #0]
 80170e8:	2550      	movs	r5, #80	@ 0x50
 80170ea:	e72b      	b.n	8016f44 <__gethex+0xf8>
 80170ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	d1f3      	bne.n	80170da <__gethex+0x28e>
 80170f2:	e7e0      	b.n	80170b6 <__gethex+0x26a>
 80170f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	d1dd      	bne.n	80170b6 <__gethex+0x26a>
 80170fa:	e7ee      	b.n	80170da <__gethex+0x28e>
 80170fc:	08019134 	.word	0x08019134
 8017100:	080192a1 	.word	0x080192a1
 8017104:	080192b2 	.word	0x080192b2
 8017108:	1e6f      	subs	r7, r5, #1
 801710a:	f1b9 0f00 	cmp.w	r9, #0
 801710e:	d130      	bne.n	8017172 <__gethex+0x326>
 8017110:	b127      	cbz	r7, 801711c <__gethex+0x2d0>
 8017112:	4639      	mov	r1, r7
 8017114:	4620      	mov	r0, r4
 8017116:	f000 feb9 	bl	8017e8c <__any_on>
 801711a:	4681      	mov	r9, r0
 801711c:	117a      	asrs	r2, r7, #5
 801711e:	2301      	movs	r3, #1
 8017120:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8017124:	f007 071f 	and.w	r7, r7, #31
 8017128:	40bb      	lsls	r3, r7
 801712a:	4213      	tst	r3, r2
 801712c:	4629      	mov	r1, r5
 801712e:	4620      	mov	r0, r4
 8017130:	bf18      	it	ne
 8017132:	f049 0902 	orrne.w	r9, r9, #2
 8017136:	f7ff fe21 	bl	8016d7c <rshift>
 801713a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801713e:	1b76      	subs	r6, r6, r5
 8017140:	2502      	movs	r5, #2
 8017142:	f1b9 0f00 	cmp.w	r9, #0
 8017146:	d047      	beq.n	80171d8 <__gethex+0x38c>
 8017148:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801714c:	2b02      	cmp	r3, #2
 801714e:	d015      	beq.n	801717c <__gethex+0x330>
 8017150:	2b03      	cmp	r3, #3
 8017152:	d017      	beq.n	8017184 <__gethex+0x338>
 8017154:	2b01      	cmp	r3, #1
 8017156:	d109      	bne.n	801716c <__gethex+0x320>
 8017158:	f019 0f02 	tst.w	r9, #2
 801715c:	d006      	beq.n	801716c <__gethex+0x320>
 801715e:	f8da 3000 	ldr.w	r3, [sl]
 8017162:	ea49 0903 	orr.w	r9, r9, r3
 8017166:	f019 0f01 	tst.w	r9, #1
 801716a:	d10e      	bne.n	801718a <__gethex+0x33e>
 801716c:	f045 0510 	orr.w	r5, r5, #16
 8017170:	e032      	b.n	80171d8 <__gethex+0x38c>
 8017172:	f04f 0901 	mov.w	r9, #1
 8017176:	e7d1      	b.n	801711c <__gethex+0x2d0>
 8017178:	2501      	movs	r5, #1
 801717a:	e7e2      	b.n	8017142 <__gethex+0x2f6>
 801717c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801717e:	f1c3 0301 	rsb	r3, r3, #1
 8017182:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017186:	2b00      	cmp	r3, #0
 8017188:	d0f0      	beq.n	801716c <__gethex+0x320>
 801718a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801718e:	f104 0314 	add.w	r3, r4, #20
 8017192:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8017196:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801719a:	f04f 0c00 	mov.w	ip, #0
 801719e:	4618      	mov	r0, r3
 80171a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80171a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80171a8:	d01b      	beq.n	80171e2 <__gethex+0x396>
 80171aa:	3201      	adds	r2, #1
 80171ac:	6002      	str	r2, [r0, #0]
 80171ae:	2d02      	cmp	r5, #2
 80171b0:	f104 0314 	add.w	r3, r4, #20
 80171b4:	d13c      	bne.n	8017230 <__gethex+0x3e4>
 80171b6:	f8d8 2000 	ldr.w	r2, [r8]
 80171ba:	3a01      	subs	r2, #1
 80171bc:	42b2      	cmp	r2, r6
 80171be:	d109      	bne.n	80171d4 <__gethex+0x388>
 80171c0:	1171      	asrs	r1, r6, #5
 80171c2:	2201      	movs	r2, #1
 80171c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80171c8:	f006 061f 	and.w	r6, r6, #31
 80171cc:	fa02 f606 	lsl.w	r6, r2, r6
 80171d0:	421e      	tst	r6, r3
 80171d2:	d13a      	bne.n	801724a <__gethex+0x3fe>
 80171d4:	f045 0520 	orr.w	r5, r5, #32
 80171d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80171da:	601c      	str	r4, [r3, #0]
 80171dc:	9b02      	ldr	r3, [sp, #8]
 80171de:	601f      	str	r7, [r3, #0]
 80171e0:	e6b0      	b.n	8016f44 <__gethex+0xf8>
 80171e2:	4299      	cmp	r1, r3
 80171e4:	f843 cc04 	str.w	ip, [r3, #-4]
 80171e8:	d8d9      	bhi.n	801719e <__gethex+0x352>
 80171ea:	68a3      	ldr	r3, [r4, #8]
 80171ec:	459b      	cmp	fp, r3
 80171ee:	db17      	blt.n	8017220 <__gethex+0x3d4>
 80171f0:	6861      	ldr	r1, [r4, #4]
 80171f2:	9801      	ldr	r0, [sp, #4]
 80171f4:	3101      	adds	r1, #1
 80171f6:	f000 f9bb 	bl	8017570 <_Balloc>
 80171fa:	4681      	mov	r9, r0
 80171fc:	b918      	cbnz	r0, 8017206 <__gethex+0x3ba>
 80171fe:	4b1a      	ldr	r3, [pc, #104]	@ (8017268 <__gethex+0x41c>)
 8017200:	4602      	mov	r2, r0
 8017202:	2184      	movs	r1, #132	@ 0x84
 8017204:	e6c5      	b.n	8016f92 <__gethex+0x146>
 8017206:	6922      	ldr	r2, [r4, #16]
 8017208:	3202      	adds	r2, #2
 801720a:	f104 010c 	add.w	r1, r4, #12
 801720e:	0092      	lsls	r2, r2, #2
 8017210:	300c      	adds	r0, #12
 8017212:	f7ff fd52 	bl	8016cba <memcpy>
 8017216:	4621      	mov	r1, r4
 8017218:	9801      	ldr	r0, [sp, #4]
 801721a:	f000 f9e9 	bl	80175f0 <_Bfree>
 801721e:	464c      	mov	r4, r9
 8017220:	6923      	ldr	r3, [r4, #16]
 8017222:	1c5a      	adds	r2, r3, #1
 8017224:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017228:	6122      	str	r2, [r4, #16]
 801722a:	2201      	movs	r2, #1
 801722c:	615a      	str	r2, [r3, #20]
 801722e:	e7be      	b.n	80171ae <__gethex+0x362>
 8017230:	6922      	ldr	r2, [r4, #16]
 8017232:	455a      	cmp	r2, fp
 8017234:	dd0b      	ble.n	801724e <__gethex+0x402>
 8017236:	2101      	movs	r1, #1
 8017238:	4620      	mov	r0, r4
 801723a:	f7ff fd9f 	bl	8016d7c <rshift>
 801723e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017242:	3701      	adds	r7, #1
 8017244:	42bb      	cmp	r3, r7
 8017246:	f6ff aee0 	blt.w	801700a <__gethex+0x1be>
 801724a:	2501      	movs	r5, #1
 801724c:	e7c2      	b.n	80171d4 <__gethex+0x388>
 801724e:	f016 061f 	ands.w	r6, r6, #31
 8017252:	d0fa      	beq.n	801724a <__gethex+0x3fe>
 8017254:	4453      	add	r3, sl
 8017256:	f1c6 0620 	rsb	r6, r6, #32
 801725a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801725e:	f000 fa79 	bl	8017754 <__hi0bits>
 8017262:	42b0      	cmp	r0, r6
 8017264:	dbe7      	blt.n	8017236 <__gethex+0x3ea>
 8017266:	e7f0      	b.n	801724a <__gethex+0x3fe>
 8017268:	080192a1 	.word	0x080192a1

0801726c <L_shift>:
 801726c:	f1c2 0208 	rsb	r2, r2, #8
 8017270:	0092      	lsls	r2, r2, #2
 8017272:	b570      	push	{r4, r5, r6, lr}
 8017274:	f1c2 0620 	rsb	r6, r2, #32
 8017278:	6843      	ldr	r3, [r0, #4]
 801727a:	6804      	ldr	r4, [r0, #0]
 801727c:	fa03 f506 	lsl.w	r5, r3, r6
 8017280:	432c      	orrs	r4, r5
 8017282:	40d3      	lsrs	r3, r2
 8017284:	6004      	str	r4, [r0, #0]
 8017286:	f840 3f04 	str.w	r3, [r0, #4]!
 801728a:	4288      	cmp	r0, r1
 801728c:	d3f4      	bcc.n	8017278 <L_shift+0xc>
 801728e:	bd70      	pop	{r4, r5, r6, pc}

08017290 <__match>:
 8017290:	b530      	push	{r4, r5, lr}
 8017292:	6803      	ldr	r3, [r0, #0]
 8017294:	3301      	adds	r3, #1
 8017296:	f811 4b01 	ldrb.w	r4, [r1], #1
 801729a:	b914      	cbnz	r4, 80172a2 <__match+0x12>
 801729c:	6003      	str	r3, [r0, #0]
 801729e:	2001      	movs	r0, #1
 80172a0:	bd30      	pop	{r4, r5, pc}
 80172a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80172a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80172aa:	2d19      	cmp	r5, #25
 80172ac:	bf98      	it	ls
 80172ae:	3220      	addls	r2, #32
 80172b0:	42a2      	cmp	r2, r4
 80172b2:	d0f0      	beq.n	8017296 <__match+0x6>
 80172b4:	2000      	movs	r0, #0
 80172b6:	e7f3      	b.n	80172a0 <__match+0x10>

080172b8 <__hexnan>:
 80172b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172bc:	680b      	ldr	r3, [r1, #0]
 80172be:	6801      	ldr	r1, [r0, #0]
 80172c0:	115e      	asrs	r6, r3, #5
 80172c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80172c6:	f013 031f 	ands.w	r3, r3, #31
 80172ca:	b087      	sub	sp, #28
 80172cc:	bf18      	it	ne
 80172ce:	3604      	addne	r6, #4
 80172d0:	2500      	movs	r5, #0
 80172d2:	1f37      	subs	r7, r6, #4
 80172d4:	4682      	mov	sl, r0
 80172d6:	4690      	mov	r8, r2
 80172d8:	9301      	str	r3, [sp, #4]
 80172da:	f846 5c04 	str.w	r5, [r6, #-4]
 80172de:	46b9      	mov	r9, r7
 80172e0:	463c      	mov	r4, r7
 80172e2:	9502      	str	r5, [sp, #8]
 80172e4:	46ab      	mov	fp, r5
 80172e6:	784a      	ldrb	r2, [r1, #1]
 80172e8:	1c4b      	adds	r3, r1, #1
 80172ea:	9303      	str	r3, [sp, #12]
 80172ec:	b342      	cbz	r2, 8017340 <__hexnan+0x88>
 80172ee:	4610      	mov	r0, r2
 80172f0:	9105      	str	r1, [sp, #20]
 80172f2:	9204      	str	r2, [sp, #16]
 80172f4:	f7ff fd94 	bl	8016e20 <__hexdig_fun>
 80172f8:	2800      	cmp	r0, #0
 80172fa:	d151      	bne.n	80173a0 <__hexnan+0xe8>
 80172fc:	9a04      	ldr	r2, [sp, #16]
 80172fe:	9905      	ldr	r1, [sp, #20]
 8017300:	2a20      	cmp	r2, #32
 8017302:	d818      	bhi.n	8017336 <__hexnan+0x7e>
 8017304:	9b02      	ldr	r3, [sp, #8]
 8017306:	459b      	cmp	fp, r3
 8017308:	dd13      	ble.n	8017332 <__hexnan+0x7a>
 801730a:	454c      	cmp	r4, r9
 801730c:	d206      	bcs.n	801731c <__hexnan+0x64>
 801730e:	2d07      	cmp	r5, #7
 8017310:	dc04      	bgt.n	801731c <__hexnan+0x64>
 8017312:	462a      	mov	r2, r5
 8017314:	4649      	mov	r1, r9
 8017316:	4620      	mov	r0, r4
 8017318:	f7ff ffa8 	bl	801726c <L_shift>
 801731c:	4544      	cmp	r4, r8
 801731e:	d952      	bls.n	80173c6 <__hexnan+0x10e>
 8017320:	2300      	movs	r3, #0
 8017322:	f1a4 0904 	sub.w	r9, r4, #4
 8017326:	f844 3c04 	str.w	r3, [r4, #-4]
 801732a:	f8cd b008 	str.w	fp, [sp, #8]
 801732e:	464c      	mov	r4, r9
 8017330:	461d      	mov	r5, r3
 8017332:	9903      	ldr	r1, [sp, #12]
 8017334:	e7d7      	b.n	80172e6 <__hexnan+0x2e>
 8017336:	2a29      	cmp	r2, #41	@ 0x29
 8017338:	d157      	bne.n	80173ea <__hexnan+0x132>
 801733a:	3102      	adds	r1, #2
 801733c:	f8ca 1000 	str.w	r1, [sl]
 8017340:	f1bb 0f00 	cmp.w	fp, #0
 8017344:	d051      	beq.n	80173ea <__hexnan+0x132>
 8017346:	454c      	cmp	r4, r9
 8017348:	d206      	bcs.n	8017358 <__hexnan+0xa0>
 801734a:	2d07      	cmp	r5, #7
 801734c:	dc04      	bgt.n	8017358 <__hexnan+0xa0>
 801734e:	462a      	mov	r2, r5
 8017350:	4649      	mov	r1, r9
 8017352:	4620      	mov	r0, r4
 8017354:	f7ff ff8a 	bl	801726c <L_shift>
 8017358:	4544      	cmp	r4, r8
 801735a:	d936      	bls.n	80173ca <__hexnan+0x112>
 801735c:	f1a8 0204 	sub.w	r2, r8, #4
 8017360:	4623      	mov	r3, r4
 8017362:	f853 1b04 	ldr.w	r1, [r3], #4
 8017366:	f842 1f04 	str.w	r1, [r2, #4]!
 801736a:	429f      	cmp	r7, r3
 801736c:	d2f9      	bcs.n	8017362 <__hexnan+0xaa>
 801736e:	1b3b      	subs	r3, r7, r4
 8017370:	f023 0303 	bic.w	r3, r3, #3
 8017374:	3304      	adds	r3, #4
 8017376:	3401      	adds	r4, #1
 8017378:	3e03      	subs	r6, #3
 801737a:	42b4      	cmp	r4, r6
 801737c:	bf88      	it	hi
 801737e:	2304      	movhi	r3, #4
 8017380:	4443      	add	r3, r8
 8017382:	2200      	movs	r2, #0
 8017384:	f843 2b04 	str.w	r2, [r3], #4
 8017388:	429f      	cmp	r7, r3
 801738a:	d2fb      	bcs.n	8017384 <__hexnan+0xcc>
 801738c:	683b      	ldr	r3, [r7, #0]
 801738e:	b91b      	cbnz	r3, 8017398 <__hexnan+0xe0>
 8017390:	4547      	cmp	r7, r8
 8017392:	d128      	bne.n	80173e6 <__hexnan+0x12e>
 8017394:	2301      	movs	r3, #1
 8017396:	603b      	str	r3, [r7, #0]
 8017398:	2005      	movs	r0, #5
 801739a:	b007      	add	sp, #28
 801739c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173a0:	3501      	adds	r5, #1
 80173a2:	2d08      	cmp	r5, #8
 80173a4:	f10b 0b01 	add.w	fp, fp, #1
 80173a8:	dd06      	ble.n	80173b8 <__hexnan+0x100>
 80173aa:	4544      	cmp	r4, r8
 80173ac:	d9c1      	bls.n	8017332 <__hexnan+0x7a>
 80173ae:	2300      	movs	r3, #0
 80173b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80173b4:	2501      	movs	r5, #1
 80173b6:	3c04      	subs	r4, #4
 80173b8:	6822      	ldr	r2, [r4, #0]
 80173ba:	f000 000f 	and.w	r0, r0, #15
 80173be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80173c2:	6020      	str	r0, [r4, #0]
 80173c4:	e7b5      	b.n	8017332 <__hexnan+0x7a>
 80173c6:	2508      	movs	r5, #8
 80173c8:	e7b3      	b.n	8017332 <__hexnan+0x7a>
 80173ca:	9b01      	ldr	r3, [sp, #4]
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d0dd      	beq.n	801738c <__hexnan+0xd4>
 80173d0:	f1c3 0320 	rsb	r3, r3, #32
 80173d4:	f04f 32ff 	mov.w	r2, #4294967295
 80173d8:	40da      	lsrs	r2, r3
 80173da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80173de:	4013      	ands	r3, r2
 80173e0:	f846 3c04 	str.w	r3, [r6, #-4]
 80173e4:	e7d2      	b.n	801738c <__hexnan+0xd4>
 80173e6:	3f04      	subs	r7, #4
 80173e8:	e7d0      	b.n	801738c <__hexnan+0xd4>
 80173ea:	2004      	movs	r0, #4
 80173ec:	e7d5      	b.n	801739a <__hexnan+0xe2>
	...

080173f0 <sbrk_aligned>:
 80173f0:	b570      	push	{r4, r5, r6, lr}
 80173f2:	4e0f      	ldr	r6, [pc, #60]	@ (8017430 <sbrk_aligned+0x40>)
 80173f4:	460c      	mov	r4, r1
 80173f6:	6831      	ldr	r1, [r6, #0]
 80173f8:	4605      	mov	r5, r0
 80173fa:	b911      	cbnz	r1, 8017402 <sbrk_aligned+0x12>
 80173fc:	f000 fe20 	bl	8018040 <_sbrk_r>
 8017400:	6030      	str	r0, [r6, #0]
 8017402:	4621      	mov	r1, r4
 8017404:	4628      	mov	r0, r5
 8017406:	f000 fe1b 	bl	8018040 <_sbrk_r>
 801740a:	1c43      	adds	r3, r0, #1
 801740c:	d103      	bne.n	8017416 <sbrk_aligned+0x26>
 801740e:	f04f 34ff 	mov.w	r4, #4294967295
 8017412:	4620      	mov	r0, r4
 8017414:	bd70      	pop	{r4, r5, r6, pc}
 8017416:	1cc4      	adds	r4, r0, #3
 8017418:	f024 0403 	bic.w	r4, r4, #3
 801741c:	42a0      	cmp	r0, r4
 801741e:	d0f8      	beq.n	8017412 <sbrk_aligned+0x22>
 8017420:	1a21      	subs	r1, r4, r0
 8017422:	4628      	mov	r0, r5
 8017424:	f000 fe0c 	bl	8018040 <_sbrk_r>
 8017428:	3001      	adds	r0, #1
 801742a:	d1f2      	bne.n	8017412 <sbrk_aligned+0x22>
 801742c:	e7ef      	b.n	801740e <sbrk_aligned+0x1e>
 801742e:	bf00      	nop
 8017430:	24005818 	.word	0x24005818

08017434 <_malloc_r>:
 8017434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017438:	1ccd      	adds	r5, r1, #3
 801743a:	f025 0503 	bic.w	r5, r5, #3
 801743e:	3508      	adds	r5, #8
 8017440:	2d0c      	cmp	r5, #12
 8017442:	bf38      	it	cc
 8017444:	250c      	movcc	r5, #12
 8017446:	2d00      	cmp	r5, #0
 8017448:	4606      	mov	r6, r0
 801744a:	db01      	blt.n	8017450 <_malloc_r+0x1c>
 801744c:	42a9      	cmp	r1, r5
 801744e:	d904      	bls.n	801745a <_malloc_r+0x26>
 8017450:	230c      	movs	r3, #12
 8017452:	6033      	str	r3, [r6, #0]
 8017454:	2000      	movs	r0, #0
 8017456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801745a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017530 <_malloc_r+0xfc>
 801745e:	f000 f87b 	bl	8017558 <__malloc_lock>
 8017462:	f8d8 3000 	ldr.w	r3, [r8]
 8017466:	461c      	mov	r4, r3
 8017468:	bb44      	cbnz	r4, 80174bc <_malloc_r+0x88>
 801746a:	4629      	mov	r1, r5
 801746c:	4630      	mov	r0, r6
 801746e:	f7ff ffbf 	bl	80173f0 <sbrk_aligned>
 8017472:	1c43      	adds	r3, r0, #1
 8017474:	4604      	mov	r4, r0
 8017476:	d158      	bne.n	801752a <_malloc_r+0xf6>
 8017478:	f8d8 4000 	ldr.w	r4, [r8]
 801747c:	4627      	mov	r7, r4
 801747e:	2f00      	cmp	r7, #0
 8017480:	d143      	bne.n	801750a <_malloc_r+0xd6>
 8017482:	2c00      	cmp	r4, #0
 8017484:	d04b      	beq.n	801751e <_malloc_r+0xea>
 8017486:	6823      	ldr	r3, [r4, #0]
 8017488:	4639      	mov	r1, r7
 801748a:	4630      	mov	r0, r6
 801748c:	eb04 0903 	add.w	r9, r4, r3
 8017490:	f000 fdd6 	bl	8018040 <_sbrk_r>
 8017494:	4581      	cmp	r9, r0
 8017496:	d142      	bne.n	801751e <_malloc_r+0xea>
 8017498:	6821      	ldr	r1, [r4, #0]
 801749a:	1a6d      	subs	r5, r5, r1
 801749c:	4629      	mov	r1, r5
 801749e:	4630      	mov	r0, r6
 80174a0:	f7ff ffa6 	bl	80173f0 <sbrk_aligned>
 80174a4:	3001      	adds	r0, #1
 80174a6:	d03a      	beq.n	801751e <_malloc_r+0xea>
 80174a8:	6823      	ldr	r3, [r4, #0]
 80174aa:	442b      	add	r3, r5
 80174ac:	6023      	str	r3, [r4, #0]
 80174ae:	f8d8 3000 	ldr.w	r3, [r8]
 80174b2:	685a      	ldr	r2, [r3, #4]
 80174b4:	bb62      	cbnz	r2, 8017510 <_malloc_r+0xdc>
 80174b6:	f8c8 7000 	str.w	r7, [r8]
 80174ba:	e00f      	b.n	80174dc <_malloc_r+0xa8>
 80174bc:	6822      	ldr	r2, [r4, #0]
 80174be:	1b52      	subs	r2, r2, r5
 80174c0:	d420      	bmi.n	8017504 <_malloc_r+0xd0>
 80174c2:	2a0b      	cmp	r2, #11
 80174c4:	d917      	bls.n	80174f6 <_malloc_r+0xc2>
 80174c6:	1961      	adds	r1, r4, r5
 80174c8:	42a3      	cmp	r3, r4
 80174ca:	6025      	str	r5, [r4, #0]
 80174cc:	bf18      	it	ne
 80174ce:	6059      	strne	r1, [r3, #4]
 80174d0:	6863      	ldr	r3, [r4, #4]
 80174d2:	bf08      	it	eq
 80174d4:	f8c8 1000 	streq.w	r1, [r8]
 80174d8:	5162      	str	r2, [r4, r5]
 80174da:	604b      	str	r3, [r1, #4]
 80174dc:	4630      	mov	r0, r6
 80174de:	f000 f841 	bl	8017564 <__malloc_unlock>
 80174e2:	f104 000b 	add.w	r0, r4, #11
 80174e6:	1d23      	adds	r3, r4, #4
 80174e8:	f020 0007 	bic.w	r0, r0, #7
 80174ec:	1ac2      	subs	r2, r0, r3
 80174ee:	bf1c      	itt	ne
 80174f0:	1a1b      	subne	r3, r3, r0
 80174f2:	50a3      	strne	r3, [r4, r2]
 80174f4:	e7af      	b.n	8017456 <_malloc_r+0x22>
 80174f6:	6862      	ldr	r2, [r4, #4]
 80174f8:	42a3      	cmp	r3, r4
 80174fa:	bf0c      	ite	eq
 80174fc:	f8c8 2000 	streq.w	r2, [r8]
 8017500:	605a      	strne	r2, [r3, #4]
 8017502:	e7eb      	b.n	80174dc <_malloc_r+0xa8>
 8017504:	4623      	mov	r3, r4
 8017506:	6864      	ldr	r4, [r4, #4]
 8017508:	e7ae      	b.n	8017468 <_malloc_r+0x34>
 801750a:	463c      	mov	r4, r7
 801750c:	687f      	ldr	r7, [r7, #4]
 801750e:	e7b6      	b.n	801747e <_malloc_r+0x4a>
 8017510:	461a      	mov	r2, r3
 8017512:	685b      	ldr	r3, [r3, #4]
 8017514:	42a3      	cmp	r3, r4
 8017516:	d1fb      	bne.n	8017510 <_malloc_r+0xdc>
 8017518:	2300      	movs	r3, #0
 801751a:	6053      	str	r3, [r2, #4]
 801751c:	e7de      	b.n	80174dc <_malloc_r+0xa8>
 801751e:	230c      	movs	r3, #12
 8017520:	6033      	str	r3, [r6, #0]
 8017522:	4630      	mov	r0, r6
 8017524:	f000 f81e 	bl	8017564 <__malloc_unlock>
 8017528:	e794      	b.n	8017454 <_malloc_r+0x20>
 801752a:	6005      	str	r5, [r0, #0]
 801752c:	e7d6      	b.n	80174dc <_malloc_r+0xa8>
 801752e:	bf00      	nop
 8017530:	2400581c 	.word	0x2400581c

08017534 <__ascii_mbtowc>:
 8017534:	b082      	sub	sp, #8
 8017536:	b901      	cbnz	r1, 801753a <__ascii_mbtowc+0x6>
 8017538:	a901      	add	r1, sp, #4
 801753a:	b142      	cbz	r2, 801754e <__ascii_mbtowc+0x1a>
 801753c:	b14b      	cbz	r3, 8017552 <__ascii_mbtowc+0x1e>
 801753e:	7813      	ldrb	r3, [r2, #0]
 8017540:	600b      	str	r3, [r1, #0]
 8017542:	7812      	ldrb	r2, [r2, #0]
 8017544:	1e10      	subs	r0, r2, #0
 8017546:	bf18      	it	ne
 8017548:	2001      	movne	r0, #1
 801754a:	b002      	add	sp, #8
 801754c:	4770      	bx	lr
 801754e:	4610      	mov	r0, r2
 8017550:	e7fb      	b.n	801754a <__ascii_mbtowc+0x16>
 8017552:	f06f 0001 	mvn.w	r0, #1
 8017556:	e7f8      	b.n	801754a <__ascii_mbtowc+0x16>

08017558 <__malloc_lock>:
 8017558:	4801      	ldr	r0, [pc, #4]	@ (8017560 <__malloc_lock+0x8>)
 801755a:	f7ff bbac 	b.w	8016cb6 <__retarget_lock_acquire_recursive>
 801755e:	bf00      	nop
 8017560:	24005814 	.word	0x24005814

08017564 <__malloc_unlock>:
 8017564:	4801      	ldr	r0, [pc, #4]	@ (801756c <__malloc_unlock+0x8>)
 8017566:	f7ff bba7 	b.w	8016cb8 <__retarget_lock_release_recursive>
 801756a:	bf00      	nop
 801756c:	24005814 	.word	0x24005814

08017570 <_Balloc>:
 8017570:	b570      	push	{r4, r5, r6, lr}
 8017572:	69c6      	ldr	r6, [r0, #28]
 8017574:	4604      	mov	r4, r0
 8017576:	460d      	mov	r5, r1
 8017578:	b976      	cbnz	r6, 8017598 <_Balloc+0x28>
 801757a:	2010      	movs	r0, #16
 801757c:	f000 fda2 	bl	80180c4 <malloc>
 8017580:	4602      	mov	r2, r0
 8017582:	61e0      	str	r0, [r4, #28]
 8017584:	b920      	cbnz	r0, 8017590 <_Balloc+0x20>
 8017586:	4b18      	ldr	r3, [pc, #96]	@ (80175e8 <_Balloc+0x78>)
 8017588:	4818      	ldr	r0, [pc, #96]	@ (80175ec <_Balloc+0x7c>)
 801758a:	216b      	movs	r1, #107	@ 0x6b
 801758c:	f000 fd68 	bl	8018060 <__assert_func>
 8017590:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017594:	6006      	str	r6, [r0, #0]
 8017596:	60c6      	str	r6, [r0, #12]
 8017598:	69e6      	ldr	r6, [r4, #28]
 801759a:	68f3      	ldr	r3, [r6, #12]
 801759c:	b183      	cbz	r3, 80175c0 <_Balloc+0x50>
 801759e:	69e3      	ldr	r3, [r4, #28]
 80175a0:	68db      	ldr	r3, [r3, #12]
 80175a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80175a6:	b9b8      	cbnz	r0, 80175d8 <_Balloc+0x68>
 80175a8:	2101      	movs	r1, #1
 80175aa:	fa01 f605 	lsl.w	r6, r1, r5
 80175ae:	1d72      	adds	r2, r6, #5
 80175b0:	0092      	lsls	r2, r2, #2
 80175b2:	4620      	mov	r0, r4
 80175b4:	f000 fd72 	bl	801809c <_calloc_r>
 80175b8:	b160      	cbz	r0, 80175d4 <_Balloc+0x64>
 80175ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80175be:	e00e      	b.n	80175de <_Balloc+0x6e>
 80175c0:	2221      	movs	r2, #33	@ 0x21
 80175c2:	2104      	movs	r1, #4
 80175c4:	4620      	mov	r0, r4
 80175c6:	f000 fd69 	bl	801809c <_calloc_r>
 80175ca:	69e3      	ldr	r3, [r4, #28]
 80175cc:	60f0      	str	r0, [r6, #12]
 80175ce:	68db      	ldr	r3, [r3, #12]
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d1e4      	bne.n	801759e <_Balloc+0x2e>
 80175d4:	2000      	movs	r0, #0
 80175d6:	bd70      	pop	{r4, r5, r6, pc}
 80175d8:	6802      	ldr	r2, [r0, #0]
 80175da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80175de:	2300      	movs	r3, #0
 80175e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80175e4:	e7f7      	b.n	80175d6 <_Balloc+0x66>
 80175e6:	bf00      	nop
 80175e8:	08019312 	.word	0x08019312
 80175ec:	08019329 	.word	0x08019329

080175f0 <_Bfree>:
 80175f0:	b570      	push	{r4, r5, r6, lr}
 80175f2:	69c6      	ldr	r6, [r0, #28]
 80175f4:	4605      	mov	r5, r0
 80175f6:	460c      	mov	r4, r1
 80175f8:	b976      	cbnz	r6, 8017618 <_Bfree+0x28>
 80175fa:	2010      	movs	r0, #16
 80175fc:	f000 fd62 	bl	80180c4 <malloc>
 8017600:	4602      	mov	r2, r0
 8017602:	61e8      	str	r0, [r5, #28]
 8017604:	b920      	cbnz	r0, 8017610 <_Bfree+0x20>
 8017606:	4b09      	ldr	r3, [pc, #36]	@ (801762c <_Bfree+0x3c>)
 8017608:	4809      	ldr	r0, [pc, #36]	@ (8017630 <_Bfree+0x40>)
 801760a:	218f      	movs	r1, #143	@ 0x8f
 801760c:	f000 fd28 	bl	8018060 <__assert_func>
 8017610:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017614:	6006      	str	r6, [r0, #0]
 8017616:	60c6      	str	r6, [r0, #12]
 8017618:	b13c      	cbz	r4, 801762a <_Bfree+0x3a>
 801761a:	69eb      	ldr	r3, [r5, #28]
 801761c:	6862      	ldr	r2, [r4, #4]
 801761e:	68db      	ldr	r3, [r3, #12]
 8017620:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017624:	6021      	str	r1, [r4, #0]
 8017626:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801762a:	bd70      	pop	{r4, r5, r6, pc}
 801762c:	08019312 	.word	0x08019312
 8017630:	08019329 	.word	0x08019329

08017634 <__multadd>:
 8017634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017638:	690d      	ldr	r5, [r1, #16]
 801763a:	4607      	mov	r7, r0
 801763c:	460c      	mov	r4, r1
 801763e:	461e      	mov	r6, r3
 8017640:	f101 0c14 	add.w	ip, r1, #20
 8017644:	2000      	movs	r0, #0
 8017646:	f8dc 3000 	ldr.w	r3, [ip]
 801764a:	b299      	uxth	r1, r3
 801764c:	fb02 6101 	mla	r1, r2, r1, r6
 8017650:	0c1e      	lsrs	r6, r3, #16
 8017652:	0c0b      	lsrs	r3, r1, #16
 8017654:	fb02 3306 	mla	r3, r2, r6, r3
 8017658:	b289      	uxth	r1, r1
 801765a:	3001      	adds	r0, #1
 801765c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017660:	4285      	cmp	r5, r0
 8017662:	f84c 1b04 	str.w	r1, [ip], #4
 8017666:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801766a:	dcec      	bgt.n	8017646 <__multadd+0x12>
 801766c:	b30e      	cbz	r6, 80176b2 <__multadd+0x7e>
 801766e:	68a3      	ldr	r3, [r4, #8]
 8017670:	42ab      	cmp	r3, r5
 8017672:	dc19      	bgt.n	80176a8 <__multadd+0x74>
 8017674:	6861      	ldr	r1, [r4, #4]
 8017676:	4638      	mov	r0, r7
 8017678:	3101      	adds	r1, #1
 801767a:	f7ff ff79 	bl	8017570 <_Balloc>
 801767e:	4680      	mov	r8, r0
 8017680:	b928      	cbnz	r0, 801768e <__multadd+0x5a>
 8017682:	4602      	mov	r2, r0
 8017684:	4b0c      	ldr	r3, [pc, #48]	@ (80176b8 <__multadd+0x84>)
 8017686:	480d      	ldr	r0, [pc, #52]	@ (80176bc <__multadd+0x88>)
 8017688:	21ba      	movs	r1, #186	@ 0xba
 801768a:	f000 fce9 	bl	8018060 <__assert_func>
 801768e:	6922      	ldr	r2, [r4, #16]
 8017690:	3202      	adds	r2, #2
 8017692:	f104 010c 	add.w	r1, r4, #12
 8017696:	0092      	lsls	r2, r2, #2
 8017698:	300c      	adds	r0, #12
 801769a:	f7ff fb0e 	bl	8016cba <memcpy>
 801769e:	4621      	mov	r1, r4
 80176a0:	4638      	mov	r0, r7
 80176a2:	f7ff ffa5 	bl	80175f0 <_Bfree>
 80176a6:	4644      	mov	r4, r8
 80176a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80176ac:	3501      	adds	r5, #1
 80176ae:	615e      	str	r6, [r3, #20]
 80176b0:	6125      	str	r5, [r4, #16]
 80176b2:	4620      	mov	r0, r4
 80176b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176b8:	080192a1 	.word	0x080192a1
 80176bc:	08019329 	.word	0x08019329

080176c0 <__s2b>:
 80176c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80176c4:	460c      	mov	r4, r1
 80176c6:	4615      	mov	r5, r2
 80176c8:	461f      	mov	r7, r3
 80176ca:	2209      	movs	r2, #9
 80176cc:	3308      	adds	r3, #8
 80176ce:	4606      	mov	r6, r0
 80176d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80176d4:	2100      	movs	r1, #0
 80176d6:	2201      	movs	r2, #1
 80176d8:	429a      	cmp	r2, r3
 80176da:	db09      	blt.n	80176f0 <__s2b+0x30>
 80176dc:	4630      	mov	r0, r6
 80176de:	f7ff ff47 	bl	8017570 <_Balloc>
 80176e2:	b940      	cbnz	r0, 80176f6 <__s2b+0x36>
 80176e4:	4602      	mov	r2, r0
 80176e6:	4b19      	ldr	r3, [pc, #100]	@ (801774c <__s2b+0x8c>)
 80176e8:	4819      	ldr	r0, [pc, #100]	@ (8017750 <__s2b+0x90>)
 80176ea:	21d3      	movs	r1, #211	@ 0xd3
 80176ec:	f000 fcb8 	bl	8018060 <__assert_func>
 80176f0:	0052      	lsls	r2, r2, #1
 80176f2:	3101      	adds	r1, #1
 80176f4:	e7f0      	b.n	80176d8 <__s2b+0x18>
 80176f6:	9b08      	ldr	r3, [sp, #32]
 80176f8:	6143      	str	r3, [r0, #20]
 80176fa:	2d09      	cmp	r5, #9
 80176fc:	f04f 0301 	mov.w	r3, #1
 8017700:	6103      	str	r3, [r0, #16]
 8017702:	dd16      	ble.n	8017732 <__s2b+0x72>
 8017704:	f104 0909 	add.w	r9, r4, #9
 8017708:	46c8      	mov	r8, r9
 801770a:	442c      	add	r4, r5
 801770c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8017710:	4601      	mov	r1, r0
 8017712:	3b30      	subs	r3, #48	@ 0x30
 8017714:	220a      	movs	r2, #10
 8017716:	4630      	mov	r0, r6
 8017718:	f7ff ff8c 	bl	8017634 <__multadd>
 801771c:	45a0      	cmp	r8, r4
 801771e:	d1f5      	bne.n	801770c <__s2b+0x4c>
 8017720:	f1a5 0408 	sub.w	r4, r5, #8
 8017724:	444c      	add	r4, r9
 8017726:	1b2d      	subs	r5, r5, r4
 8017728:	1963      	adds	r3, r4, r5
 801772a:	42bb      	cmp	r3, r7
 801772c:	db04      	blt.n	8017738 <__s2b+0x78>
 801772e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017732:	340a      	adds	r4, #10
 8017734:	2509      	movs	r5, #9
 8017736:	e7f6      	b.n	8017726 <__s2b+0x66>
 8017738:	f814 3b01 	ldrb.w	r3, [r4], #1
 801773c:	4601      	mov	r1, r0
 801773e:	3b30      	subs	r3, #48	@ 0x30
 8017740:	220a      	movs	r2, #10
 8017742:	4630      	mov	r0, r6
 8017744:	f7ff ff76 	bl	8017634 <__multadd>
 8017748:	e7ee      	b.n	8017728 <__s2b+0x68>
 801774a:	bf00      	nop
 801774c:	080192a1 	.word	0x080192a1
 8017750:	08019329 	.word	0x08019329

08017754 <__hi0bits>:
 8017754:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8017758:	4603      	mov	r3, r0
 801775a:	bf36      	itet	cc
 801775c:	0403      	lslcc	r3, r0, #16
 801775e:	2000      	movcs	r0, #0
 8017760:	2010      	movcc	r0, #16
 8017762:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8017766:	bf3c      	itt	cc
 8017768:	021b      	lslcc	r3, r3, #8
 801776a:	3008      	addcc	r0, #8
 801776c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017770:	bf3c      	itt	cc
 8017772:	011b      	lslcc	r3, r3, #4
 8017774:	3004      	addcc	r0, #4
 8017776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801777a:	bf3c      	itt	cc
 801777c:	009b      	lslcc	r3, r3, #2
 801777e:	3002      	addcc	r0, #2
 8017780:	2b00      	cmp	r3, #0
 8017782:	db05      	blt.n	8017790 <__hi0bits+0x3c>
 8017784:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8017788:	f100 0001 	add.w	r0, r0, #1
 801778c:	bf08      	it	eq
 801778e:	2020      	moveq	r0, #32
 8017790:	4770      	bx	lr

08017792 <__lo0bits>:
 8017792:	6803      	ldr	r3, [r0, #0]
 8017794:	4602      	mov	r2, r0
 8017796:	f013 0007 	ands.w	r0, r3, #7
 801779a:	d00b      	beq.n	80177b4 <__lo0bits+0x22>
 801779c:	07d9      	lsls	r1, r3, #31
 801779e:	d421      	bmi.n	80177e4 <__lo0bits+0x52>
 80177a0:	0798      	lsls	r0, r3, #30
 80177a2:	bf49      	itett	mi
 80177a4:	085b      	lsrmi	r3, r3, #1
 80177a6:	089b      	lsrpl	r3, r3, #2
 80177a8:	2001      	movmi	r0, #1
 80177aa:	6013      	strmi	r3, [r2, #0]
 80177ac:	bf5c      	itt	pl
 80177ae:	6013      	strpl	r3, [r2, #0]
 80177b0:	2002      	movpl	r0, #2
 80177b2:	4770      	bx	lr
 80177b4:	b299      	uxth	r1, r3
 80177b6:	b909      	cbnz	r1, 80177bc <__lo0bits+0x2a>
 80177b8:	0c1b      	lsrs	r3, r3, #16
 80177ba:	2010      	movs	r0, #16
 80177bc:	b2d9      	uxtb	r1, r3
 80177be:	b909      	cbnz	r1, 80177c4 <__lo0bits+0x32>
 80177c0:	3008      	adds	r0, #8
 80177c2:	0a1b      	lsrs	r3, r3, #8
 80177c4:	0719      	lsls	r1, r3, #28
 80177c6:	bf04      	itt	eq
 80177c8:	091b      	lsreq	r3, r3, #4
 80177ca:	3004      	addeq	r0, #4
 80177cc:	0799      	lsls	r1, r3, #30
 80177ce:	bf04      	itt	eq
 80177d0:	089b      	lsreq	r3, r3, #2
 80177d2:	3002      	addeq	r0, #2
 80177d4:	07d9      	lsls	r1, r3, #31
 80177d6:	d403      	bmi.n	80177e0 <__lo0bits+0x4e>
 80177d8:	085b      	lsrs	r3, r3, #1
 80177da:	f100 0001 	add.w	r0, r0, #1
 80177de:	d003      	beq.n	80177e8 <__lo0bits+0x56>
 80177e0:	6013      	str	r3, [r2, #0]
 80177e2:	4770      	bx	lr
 80177e4:	2000      	movs	r0, #0
 80177e6:	4770      	bx	lr
 80177e8:	2020      	movs	r0, #32
 80177ea:	4770      	bx	lr

080177ec <__i2b>:
 80177ec:	b510      	push	{r4, lr}
 80177ee:	460c      	mov	r4, r1
 80177f0:	2101      	movs	r1, #1
 80177f2:	f7ff febd 	bl	8017570 <_Balloc>
 80177f6:	4602      	mov	r2, r0
 80177f8:	b928      	cbnz	r0, 8017806 <__i2b+0x1a>
 80177fa:	4b05      	ldr	r3, [pc, #20]	@ (8017810 <__i2b+0x24>)
 80177fc:	4805      	ldr	r0, [pc, #20]	@ (8017814 <__i2b+0x28>)
 80177fe:	f240 1145 	movw	r1, #325	@ 0x145
 8017802:	f000 fc2d 	bl	8018060 <__assert_func>
 8017806:	2301      	movs	r3, #1
 8017808:	6144      	str	r4, [r0, #20]
 801780a:	6103      	str	r3, [r0, #16]
 801780c:	bd10      	pop	{r4, pc}
 801780e:	bf00      	nop
 8017810:	080192a1 	.word	0x080192a1
 8017814:	08019329 	.word	0x08019329

08017818 <__multiply>:
 8017818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801781c:	4614      	mov	r4, r2
 801781e:	690a      	ldr	r2, [r1, #16]
 8017820:	6923      	ldr	r3, [r4, #16]
 8017822:	429a      	cmp	r2, r3
 8017824:	bfa8      	it	ge
 8017826:	4623      	movge	r3, r4
 8017828:	460f      	mov	r7, r1
 801782a:	bfa4      	itt	ge
 801782c:	460c      	movge	r4, r1
 801782e:	461f      	movge	r7, r3
 8017830:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8017834:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8017838:	68a3      	ldr	r3, [r4, #8]
 801783a:	6861      	ldr	r1, [r4, #4]
 801783c:	eb0a 0609 	add.w	r6, sl, r9
 8017840:	42b3      	cmp	r3, r6
 8017842:	b085      	sub	sp, #20
 8017844:	bfb8      	it	lt
 8017846:	3101      	addlt	r1, #1
 8017848:	f7ff fe92 	bl	8017570 <_Balloc>
 801784c:	b930      	cbnz	r0, 801785c <__multiply+0x44>
 801784e:	4602      	mov	r2, r0
 8017850:	4b44      	ldr	r3, [pc, #272]	@ (8017964 <__multiply+0x14c>)
 8017852:	4845      	ldr	r0, [pc, #276]	@ (8017968 <__multiply+0x150>)
 8017854:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8017858:	f000 fc02 	bl	8018060 <__assert_func>
 801785c:	f100 0514 	add.w	r5, r0, #20
 8017860:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017864:	462b      	mov	r3, r5
 8017866:	2200      	movs	r2, #0
 8017868:	4543      	cmp	r3, r8
 801786a:	d321      	bcc.n	80178b0 <__multiply+0x98>
 801786c:	f107 0114 	add.w	r1, r7, #20
 8017870:	f104 0214 	add.w	r2, r4, #20
 8017874:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8017878:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801787c:	9302      	str	r3, [sp, #8]
 801787e:	1b13      	subs	r3, r2, r4
 8017880:	3b15      	subs	r3, #21
 8017882:	f023 0303 	bic.w	r3, r3, #3
 8017886:	3304      	adds	r3, #4
 8017888:	f104 0715 	add.w	r7, r4, #21
 801788c:	42ba      	cmp	r2, r7
 801788e:	bf38      	it	cc
 8017890:	2304      	movcc	r3, #4
 8017892:	9301      	str	r3, [sp, #4]
 8017894:	9b02      	ldr	r3, [sp, #8]
 8017896:	9103      	str	r1, [sp, #12]
 8017898:	428b      	cmp	r3, r1
 801789a:	d80c      	bhi.n	80178b6 <__multiply+0x9e>
 801789c:	2e00      	cmp	r6, #0
 801789e:	dd03      	ble.n	80178a8 <__multiply+0x90>
 80178a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	d05b      	beq.n	8017960 <__multiply+0x148>
 80178a8:	6106      	str	r6, [r0, #16]
 80178aa:	b005      	add	sp, #20
 80178ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178b0:	f843 2b04 	str.w	r2, [r3], #4
 80178b4:	e7d8      	b.n	8017868 <__multiply+0x50>
 80178b6:	f8b1 a000 	ldrh.w	sl, [r1]
 80178ba:	f1ba 0f00 	cmp.w	sl, #0
 80178be:	d024      	beq.n	801790a <__multiply+0xf2>
 80178c0:	f104 0e14 	add.w	lr, r4, #20
 80178c4:	46a9      	mov	r9, r5
 80178c6:	f04f 0c00 	mov.w	ip, #0
 80178ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80178ce:	f8d9 3000 	ldr.w	r3, [r9]
 80178d2:	fa1f fb87 	uxth.w	fp, r7
 80178d6:	b29b      	uxth	r3, r3
 80178d8:	fb0a 330b 	mla	r3, sl, fp, r3
 80178dc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80178e0:	f8d9 7000 	ldr.w	r7, [r9]
 80178e4:	4463      	add	r3, ip
 80178e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80178ea:	fb0a c70b 	mla	r7, sl, fp, ip
 80178ee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80178f2:	b29b      	uxth	r3, r3
 80178f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80178f8:	4572      	cmp	r2, lr
 80178fa:	f849 3b04 	str.w	r3, [r9], #4
 80178fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8017902:	d8e2      	bhi.n	80178ca <__multiply+0xb2>
 8017904:	9b01      	ldr	r3, [sp, #4]
 8017906:	f845 c003 	str.w	ip, [r5, r3]
 801790a:	9b03      	ldr	r3, [sp, #12]
 801790c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8017910:	3104      	adds	r1, #4
 8017912:	f1b9 0f00 	cmp.w	r9, #0
 8017916:	d021      	beq.n	801795c <__multiply+0x144>
 8017918:	682b      	ldr	r3, [r5, #0]
 801791a:	f104 0c14 	add.w	ip, r4, #20
 801791e:	46ae      	mov	lr, r5
 8017920:	f04f 0a00 	mov.w	sl, #0
 8017924:	f8bc b000 	ldrh.w	fp, [ip]
 8017928:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801792c:	fb09 770b 	mla	r7, r9, fp, r7
 8017930:	4457      	add	r7, sl
 8017932:	b29b      	uxth	r3, r3
 8017934:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8017938:	f84e 3b04 	str.w	r3, [lr], #4
 801793c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8017940:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017944:	f8be 3000 	ldrh.w	r3, [lr]
 8017948:	fb09 330a 	mla	r3, r9, sl, r3
 801794c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8017950:	4562      	cmp	r2, ip
 8017952:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017956:	d8e5      	bhi.n	8017924 <__multiply+0x10c>
 8017958:	9f01      	ldr	r7, [sp, #4]
 801795a:	51eb      	str	r3, [r5, r7]
 801795c:	3504      	adds	r5, #4
 801795e:	e799      	b.n	8017894 <__multiply+0x7c>
 8017960:	3e01      	subs	r6, #1
 8017962:	e79b      	b.n	801789c <__multiply+0x84>
 8017964:	080192a1 	.word	0x080192a1
 8017968:	08019329 	.word	0x08019329

0801796c <__pow5mult>:
 801796c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017970:	4615      	mov	r5, r2
 8017972:	f012 0203 	ands.w	r2, r2, #3
 8017976:	4607      	mov	r7, r0
 8017978:	460e      	mov	r6, r1
 801797a:	d007      	beq.n	801798c <__pow5mult+0x20>
 801797c:	4c25      	ldr	r4, [pc, #148]	@ (8017a14 <__pow5mult+0xa8>)
 801797e:	3a01      	subs	r2, #1
 8017980:	2300      	movs	r3, #0
 8017982:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017986:	f7ff fe55 	bl	8017634 <__multadd>
 801798a:	4606      	mov	r6, r0
 801798c:	10ad      	asrs	r5, r5, #2
 801798e:	d03d      	beq.n	8017a0c <__pow5mult+0xa0>
 8017990:	69fc      	ldr	r4, [r7, #28]
 8017992:	b97c      	cbnz	r4, 80179b4 <__pow5mult+0x48>
 8017994:	2010      	movs	r0, #16
 8017996:	f000 fb95 	bl	80180c4 <malloc>
 801799a:	4602      	mov	r2, r0
 801799c:	61f8      	str	r0, [r7, #28]
 801799e:	b928      	cbnz	r0, 80179ac <__pow5mult+0x40>
 80179a0:	4b1d      	ldr	r3, [pc, #116]	@ (8017a18 <__pow5mult+0xac>)
 80179a2:	481e      	ldr	r0, [pc, #120]	@ (8017a1c <__pow5mult+0xb0>)
 80179a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80179a8:	f000 fb5a 	bl	8018060 <__assert_func>
 80179ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80179b0:	6004      	str	r4, [r0, #0]
 80179b2:	60c4      	str	r4, [r0, #12]
 80179b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80179b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80179bc:	b94c      	cbnz	r4, 80179d2 <__pow5mult+0x66>
 80179be:	f240 2171 	movw	r1, #625	@ 0x271
 80179c2:	4638      	mov	r0, r7
 80179c4:	f7ff ff12 	bl	80177ec <__i2b>
 80179c8:	2300      	movs	r3, #0
 80179ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80179ce:	4604      	mov	r4, r0
 80179d0:	6003      	str	r3, [r0, #0]
 80179d2:	f04f 0900 	mov.w	r9, #0
 80179d6:	07eb      	lsls	r3, r5, #31
 80179d8:	d50a      	bpl.n	80179f0 <__pow5mult+0x84>
 80179da:	4631      	mov	r1, r6
 80179dc:	4622      	mov	r2, r4
 80179de:	4638      	mov	r0, r7
 80179e0:	f7ff ff1a 	bl	8017818 <__multiply>
 80179e4:	4631      	mov	r1, r6
 80179e6:	4680      	mov	r8, r0
 80179e8:	4638      	mov	r0, r7
 80179ea:	f7ff fe01 	bl	80175f0 <_Bfree>
 80179ee:	4646      	mov	r6, r8
 80179f0:	106d      	asrs	r5, r5, #1
 80179f2:	d00b      	beq.n	8017a0c <__pow5mult+0xa0>
 80179f4:	6820      	ldr	r0, [r4, #0]
 80179f6:	b938      	cbnz	r0, 8017a08 <__pow5mult+0x9c>
 80179f8:	4622      	mov	r2, r4
 80179fa:	4621      	mov	r1, r4
 80179fc:	4638      	mov	r0, r7
 80179fe:	f7ff ff0b 	bl	8017818 <__multiply>
 8017a02:	6020      	str	r0, [r4, #0]
 8017a04:	f8c0 9000 	str.w	r9, [r0]
 8017a08:	4604      	mov	r4, r0
 8017a0a:	e7e4      	b.n	80179d6 <__pow5mult+0x6a>
 8017a0c:	4630      	mov	r0, r6
 8017a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a12:	bf00      	nop
 8017a14:	08019384 	.word	0x08019384
 8017a18:	08019312 	.word	0x08019312
 8017a1c:	08019329 	.word	0x08019329

08017a20 <__lshift>:
 8017a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a24:	460c      	mov	r4, r1
 8017a26:	6849      	ldr	r1, [r1, #4]
 8017a28:	6923      	ldr	r3, [r4, #16]
 8017a2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017a2e:	68a3      	ldr	r3, [r4, #8]
 8017a30:	4607      	mov	r7, r0
 8017a32:	4691      	mov	r9, r2
 8017a34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017a38:	f108 0601 	add.w	r6, r8, #1
 8017a3c:	42b3      	cmp	r3, r6
 8017a3e:	db0b      	blt.n	8017a58 <__lshift+0x38>
 8017a40:	4638      	mov	r0, r7
 8017a42:	f7ff fd95 	bl	8017570 <_Balloc>
 8017a46:	4605      	mov	r5, r0
 8017a48:	b948      	cbnz	r0, 8017a5e <__lshift+0x3e>
 8017a4a:	4602      	mov	r2, r0
 8017a4c:	4b28      	ldr	r3, [pc, #160]	@ (8017af0 <__lshift+0xd0>)
 8017a4e:	4829      	ldr	r0, [pc, #164]	@ (8017af4 <__lshift+0xd4>)
 8017a50:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8017a54:	f000 fb04 	bl	8018060 <__assert_func>
 8017a58:	3101      	adds	r1, #1
 8017a5a:	005b      	lsls	r3, r3, #1
 8017a5c:	e7ee      	b.n	8017a3c <__lshift+0x1c>
 8017a5e:	2300      	movs	r3, #0
 8017a60:	f100 0114 	add.w	r1, r0, #20
 8017a64:	f100 0210 	add.w	r2, r0, #16
 8017a68:	4618      	mov	r0, r3
 8017a6a:	4553      	cmp	r3, sl
 8017a6c:	db33      	blt.n	8017ad6 <__lshift+0xb6>
 8017a6e:	6920      	ldr	r0, [r4, #16]
 8017a70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017a74:	f104 0314 	add.w	r3, r4, #20
 8017a78:	f019 091f 	ands.w	r9, r9, #31
 8017a7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017a80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017a84:	d02b      	beq.n	8017ade <__lshift+0xbe>
 8017a86:	f1c9 0e20 	rsb	lr, r9, #32
 8017a8a:	468a      	mov	sl, r1
 8017a8c:	2200      	movs	r2, #0
 8017a8e:	6818      	ldr	r0, [r3, #0]
 8017a90:	fa00 f009 	lsl.w	r0, r0, r9
 8017a94:	4310      	orrs	r0, r2
 8017a96:	f84a 0b04 	str.w	r0, [sl], #4
 8017a9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8017a9e:	459c      	cmp	ip, r3
 8017aa0:	fa22 f20e 	lsr.w	r2, r2, lr
 8017aa4:	d8f3      	bhi.n	8017a8e <__lshift+0x6e>
 8017aa6:	ebac 0304 	sub.w	r3, ip, r4
 8017aaa:	3b15      	subs	r3, #21
 8017aac:	f023 0303 	bic.w	r3, r3, #3
 8017ab0:	3304      	adds	r3, #4
 8017ab2:	f104 0015 	add.w	r0, r4, #21
 8017ab6:	4584      	cmp	ip, r0
 8017ab8:	bf38      	it	cc
 8017aba:	2304      	movcc	r3, #4
 8017abc:	50ca      	str	r2, [r1, r3]
 8017abe:	b10a      	cbz	r2, 8017ac4 <__lshift+0xa4>
 8017ac0:	f108 0602 	add.w	r6, r8, #2
 8017ac4:	3e01      	subs	r6, #1
 8017ac6:	4638      	mov	r0, r7
 8017ac8:	612e      	str	r6, [r5, #16]
 8017aca:	4621      	mov	r1, r4
 8017acc:	f7ff fd90 	bl	80175f0 <_Bfree>
 8017ad0:	4628      	mov	r0, r5
 8017ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ad6:	f842 0f04 	str.w	r0, [r2, #4]!
 8017ada:	3301      	adds	r3, #1
 8017adc:	e7c5      	b.n	8017a6a <__lshift+0x4a>
 8017ade:	3904      	subs	r1, #4
 8017ae0:	f853 2b04 	ldr.w	r2, [r3], #4
 8017ae4:	f841 2f04 	str.w	r2, [r1, #4]!
 8017ae8:	459c      	cmp	ip, r3
 8017aea:	d8f9      	bhi.n	8017ae0 <__lshift+0xc0>
 8017aec:	e7ea      	b.n	8017ac4 <__lshift+0xa4>
 8017aee:	bf00      	nop
 8017af0:	080192a1 	.word	0x080192a1
 8017af4:	08019329 	.word	0x08019329

08017af8 <__mcmp>:
 8017af8:	690a      	ldr	r2, [r1, #16]
 8017afa:	4603      	mov	r3, r0
 8017afc:	6900      	ldr	r0, [r0, #16]
 8017afe:	1a80      	subs	r0, r0, r2
 8017b00:	b530      	push	{r4, r5, lr}
 8017b02:	d10e      	bne.n	8017b22 <__mcmp+0x2a>
 8017b04:	3314      	adds	r3, #20
 8017b06:	3114      	adds	r1, #20
 8017b08:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8017b0c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8017b10:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017b14:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017b18:	4295      	cmp	r5, r2
 8017b1a:	d003      	beq.n	8017b24 <__mcmp+0x2c>
 8017b1c:	d205      	bcs.n	8017b2a <__mcmp+0x32>
 8017b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8017b22:	bd30      	pop	{r4, r5, pc}
 8017b24:	42a3      	cmp	r3, r4
 8017b26:	d3f3      	bcc.n	8017b10 <__mcmp+0x18>
 8017b28:	e7fb      	b.n	8017b22 <__mcmp+0x2a>
 8017b2a:	2001      	movs	r0, #1
 8017b2c:	e7f9      	b.n	8017b22 <__mcmp+0x2a>
	...

08017b30 <__mdiff>:
 8017b30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b34:	4689      	mov	r9, r1
 8017b36:	4606      	mov	r6, r0
 8017b38:	4611      	mov	r1, r2
 8017b3a:	4648      	mov	r0, r9
 8017b3c:	4614      	mov	r4, r2
 8017b3e:	f7ff ffdb 	bl	8017af8 <__mcmp>
 8017b42:	1e05      	subs	r5, r0, #0
 8017b44:	d112      	bne.n	8017b6c <__mdiff+0x3c>
 8017b46:	4629      	mov	r1, r5
 8017b48:	4630      	mov	r0, r6
 8017b4a:	f7ff fd11 	bl	8017570 <_Balloc>
 8017b4e:	4602      	mov	r2, r0
 8017b50:	b928      	cbnz	r0, 8017b5e <__mdiff+0x2e>
 8017b52:	4b3f      	ldr	r3, [pc, #252]	@ (8017c50 <__mdiff+0x120>)
 8017b54:	f240 2137 	movw	r1, #567	@ 0x237
 8017b58:	483e      	ldr	r0, [pc, #248]	@ (8017c54 <__mdiff+0x124>)
 8017b5a:	f000 fa81 	bl	8018060 <__assert_func>
 8017b5e:	2301      	movs	r3, #1
 8017b60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017b64:	4610      	mov	r0, r2
 8017b66:	b003      	add	sp, #12
 8017b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b6c:	bfbc      	itt	lt
 8017b6e:	464b      	movlt	r3, r9
 8017b70:	46a1      	movlt	r9, r4
 8017b72:	4630      	mov	r0, r6
 8017b74:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8017b78:	bfba      	itte	lt
 8017b7a:	461c      	movlt	r4, r3
 8017b7c:	2501      	movlt	r5, #1
 8017b7e:	2500      	movge	r5, #0
 8017b80:	f7ff fcf6 	bl	8017570 <_Balloc>
 8017b84:	4602      	mov	r2, r0
 8017b86:	b918      	cbnz	r0, 8017b90 <__mdiff+0x60>
 8017b88:	4b31      	ldr	r3, [pc, #196]	@ (8017c50 <__mdiff+0x120>)
 8017b8a:	f240 2145 	movw	r1, #581	@ 0x245
 8017b8e:	e7e3      	b.n	8017b58 <__mdiff+0x28>
 8017b90:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8017b94:	6926      	ldr	r6, [r4, #16]
 8017b96:	60c5      	str	r5, [r0, #12]
 8017b98:	f109 0310 	add.w	r3, r9, #16
 8017b9c:	f109 0514 	add.w	r5, r9, #20
 8017ba0:	f104 0e14 	add.w	lr, r4, #20
 8017ba4:	f100 0b14 	add.w	fp, r0, #20
 8017ba8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8017bac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8017bb0:	9301      	str	r3, [sp, #4]
 8017bb2:	46d9      	mov	r9, fp
 8017bb4:	f04f 0c00 	mov.w	ip, #0
 8017bb8:	9b01      	ldr	r3, [sp, #4]
 8017bba:	f85e 0b04 	ldr.w	r0, [lr], #4
 8017bbe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8017bc2:	9301      	str	r3, [sp, #4]
 8017bc4:	fa1f f38a 	uxth.w	r3, sl
 8017bc8:	4619      	mov	r1, r3
 8017bca:	b283      	uxth	r3, r0
 8017bcc:	1acb      	subs	r3, r1, r3
 8017bce:	0c00      	lsrs	r0, r0, #16
 8017bd0:	4463      	add	r3, ip
 8017bd2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8017bd6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8017bda:	b29b      	uxth	r3, r3
 8017bdc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8017be0:	4576      	cmp	r6, lr
 8017be2:	f849 3b04 	str.w	r3, [r9], #4
 8017be6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017bea:	d8e5      	bhi.n	8017bb8 <__mdiff+0x88>
 8017bec:	1b33      	subs	r3, r6, r4
 8017bee:	3b15      	subs	r3, #21
 8017bf0:	f023 0303 	bic.w	r3, r3, #3
 8017bf4:	3415      	adds	r4, #21
 8017bf6:	3304      	adds	r3, #4
 8017bf8:	42a6      	cmp	r6, r4
 8017bfa:	bf38      	it	cc
 8017bfc:	2304      	movcc	r3, #4
 8017bfe:	441d      	add	r5, r3
 8017c00:	445b      	add	r3, fp
 8017c02:	461e      	mov	r6, r3
 8017c04:	462c      	mov	r4, r5
 8017c06:	4544      	cmp	r4, r8
 8017c08:	d30e      	bcc.n	8017c28 <__mdiff+0xf8>
 8017c0a:	f108 0103 	add.w	r1, r8, #3
 8017c0e:	1b49      	subs	r1, r1, r5
 8017c10:	f021 0103 	bic.w	r1, r1, #3
 8017c14:	3d03      	subs	r5, #3
 8017c16:	45a8      	cmp	r8, r5
 8017c18:	bf38      	it	cc
 8017c1a:	2100      	movcc	r1, #0
 8017c1c:	440b      	add	r3, r1
 8017c1e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017c22:	b191      	cbz	r1, 8017c4a <__mdiff+0x11a>
 8017c24:	6117      	str	r7, [r2, #16]
 8017c26:	e79d      	b.n	8017b64 <__mdiff+0x34>
 8017c28:	f854 1b04 	ldr.w	r1, [r4], #4
 8017c2c:	46e6      	mov	lr, ip
 8017c2e:	0c08      	lsrs	r0, r1, #16
 8017c30:	fa1c fc81 	uxtah	ip, ip, r1
 8017c34:	4471      	add	r1, lr
 8017c36:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8017c3a:	b289      	uxth	r1, r1
 8017c3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8017c40:	f846 1b04 	str.w	r1, [r6], #4
 8017c44:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017c48:	e7dd      	b.n	8017c06 <__mdiff+0xd6>
 8017c4a:	3f01      	subs	r7, #1
 8017c4c:	e7e7      	b.n	8017c1e <__mdiff+0xee>
 8017c4e:	bf00      	nop
 8017c50:	080192a1 	.word	0x080192a1
 8017c54:	08019329 	.word	0x08019329

08017c58 <__ulp>:
 8017c58:	b082      	sub	sp, #8
 8017c5a:	ed8d 0b00 	vstr	d0, [sp]
 8017c5e:	9a01      	ldr	r2, [sp, #4]
 8017c60:	4b0f      	ldr	r3, [pc, #60]	@ (8017ca0 <__ulp+0x48>)
 8017c62:	4013      	ands	r3, r2
 8017c64:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	dc08      	bgt.n	8017c7e <__ulp+0x26>
 8017c6c:	425b      	negs	r3, r3
 8017c6e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8017c72:	ea4f 5223 	mov.w	r2, r3, asr #20
 8017c76:	da04      	bge.n	8017c82 <__ulp+0x2a>
 8017c78:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8017c7c:	4113      	asrs	r3, r2
 8017c7e:	2200      	movs	r2, #0
 8017c80:	e008      	b.n	8017c94 <__ulp+0x3c>
 8017c82:	f1a2 0314 	sub.w	r3, r2, #20
 8017c86:	2b1e      	cmp	r3, #30
 8017c88:	bfda      	itte	le
 8017c8a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8017c8e:	40da      	lsrle	r2, r3
 8017c90:	2201      	movgt	r2, #1
 8017c92:	2300      	movs	r3, #0
 8017c94:	4619      	mov	r1, r3
 8017c96:	4610      	mov	r0, r2
 8017c98:	ec41 0b10 	vmov	d0, r0, r1
 8017c9c:	b002      	add	sp, #8
 8017c9e:	4770      	bx	lr
 8017ca0:	7ff00000 	.word	0x7ff00000

08017ca4 <__b2d>:
 8017ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ca8:	6906      	ldr	r6, [r0, #16]
 8017caa:	f100 0814 	add.w	r8, r0, #20
 8017cae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8017cb2:	1f37      	subs	r7, r6, #4
 8017cb4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8017cb8:	4610      	mov	r0, r2
 8017cba:	f7ff fd4b 	bl	8017754 <__hi0bits>
 8017cbe:	f1c0 0320 	rsb	r3, r0, #32
 8017cc2:	280a      	cmp	r0, #10
 8017cc4:	600b      	str	r3, [r1, #0]
 8017cc6:	491b      	ldr	r1, [pc, #108]	@ (8017d34 <__b2d+0x90>)
 8017cc8:	dc15      	bgt.n	8017cf6 <__b2d+0x52>
 8017cca:	f1c0 0c0b 	rsb	ip, r0, #11
 8017cce:	fa22 f30c 	lsr.w	r3, r2, ip
 8017cd2:	45b8      	cmp	r8, r7
 8017cd4:	ea43 0501 	orr.w	r5, r3, r1
 8017cd8:	bf34      	ite	cc
 8017cda:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8017cde:	2300      	movcs	r3, #0
 8017ce0:	3015      	adds	r0, #21
 8017ce2:	fa02 f000 	lsl.w	r0, r2, r0
 8017ce6:	fa23 f30c 	lsr.w	r3, r3, ip
 8017cea:	4303      	orrs	r3, r0
 8017cec:	461c      	mov	r4, r3
 8017cee:	ec45 4b10 	vmov	d0, r4, r5
 8017cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017cf6:	45b8      	cmp	r8, r7
 8017cf8:	bf3a      	itte	cc
 8017cfa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8017cfe:	f1a6 0708 	subcc.w	r7, r6, #8
 8017d02:	2300      	movcs	r3, #0
 8017d04:	380b      	subs	r0, #11
 8017d06:	d012      	beq.n	8017d2e <__b2d+0x8a>
 8017d08:	f1c0 0120 	rsb	r1, r0, #32
 8017d0c:	fa23 f401 	lsr.w	r4, r3, r1
 8017d10:	4082      	lsls	r2, r0
 8017d12:	4322      	orrs	r2, r4
 8017d14:	4547      	cmp	r7, r8
 8017d16:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8017d1a:	bf8c      	ite	hi
 8017d1c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8017d20:	2200      	movls	r2, #0
 8017d22:	4083      	lsls	r3, r0
 8017d24:	40ca      	lsrs	r2, r1
 8017d26:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8017d2a:	4313      	orrs	r3, r2
 8017d2c:	e7de      	b.n	8017cec <__b2d+0x48>
 8017d2e:	ea42 0501 	orr.w	r5, r2, r1
 8017d32:	e7db      	b.n	8017cec <__b2d+0x48>
 8017d34:	3ff00000 	.word	0x3ff00000

08017d38 <__d2b>:
 8017d38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017d3c:	460f      	mov	r7, r1
 8017d3e:	2101      	movs	r1, #1
 8017d40:	ec59 8b10 	vmov	r8, r9, d0
 8017d44:	4616      	mov	r6, r2
 8017d46:	f7ff fc13 	bl	8017570 <_Balloc>
 8017d4a:	4604      	mov	r4, r0
 8017d4c:	b930      	cbnz	r0, 8017d5c <__d2b+0x24>
 8017d4e:	4602      	mov	r2, r0
 8017d50:	4b23      	ldr	r3, [pc, #140]	@ (8017de0 <__d2b+0xa8>)
 8017d52:	4824      	ldr	r0, [pc, #144]	@ (8017de4 <__d2b+0xac>)
 8017d54:	f240 310f 	movw	r1, #783	@ 0x30f
 8017d58:	f000 f982 	bl	8018060 <__assert_func>
 8017d5c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017d60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017d64:	b10d      	cbz	r5, 8017d6a <__d2b+0x32>
 8017d66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8017d6a:	9301      	str	r3, [sp, #4]
 8017d6c:	f1b8 0300 	subs.w	r3, r8, #0
 8017d70:	d023      	beq.n	8017dba <__d2b+0x82>
 8017d72:	4668      	mov	r0, sp
 8017d74:	9300      	str	r3, [sp, #0]
 8017d76:	f7ff fd0c 	bl	8017792 <__lo0bits>
 8017d7a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8017d7e:	b1d0      	cbz	r0, 8017db6 <__d2b+0x7e>
 8017d80:	f1c0 0320 	rsb	r3, r0, #32
 8017d84:	fa02 f303 	lsl.w	r3, r2, r3
 8017d88:	430b      	orrs	r3, r1
 8017d8a:	40c2      	lsrs	r2, r0
 8017d8c:	6163      	str	r3, [r4, #20]
 8017d8e:	9201      	str	r2, [sp, #4]
 8017d90:	9b01      	ldr	r3, [sp, #4]
 8017d92:	61a3      	str	r3, [r4, #24]
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	bf0c      	ite	eq
 8017d98:	2201      	moveq	r2, #1
 8017d9a:	2202      	movne	r2, #2
 8017d9c:	6122      	str	r2, [r4, #16]
 8017d9e:	b1a5      	cbz	r5, 8017dca <__d2b+0x92>
 8017da0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8017da4:	4405      	add	r5, r0
 8017da6:	603d      	str	r5, [r7, #0]
 8017da8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8017dac:	6030      	str	r0, [r6, #0]
 8017dae:	4620      	mov	r0, r4
 8017db0:	b003      	add	sp, #12
 8017db2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017db6:	6161      	str	r1, [r4, #20]
 8017db8:	e7ea      	b.n	8017d90 <__d2b+0x58>
 8017dba:	a801      	add	r0, sp, #4
 8017dbc:	f7ff fce9 	bl	8017792 <__lo0bits>
 8017dc0:	9b01      	ldr	r3, [sp, #4]
 8017dc2:	6163      	str	r3, [r4, #20]
 8017dc4:	3020      	adds	r0, #32
 8017dc6:	2201      	movs	r2, #1
 8017dc8:	e7e8      	b.n	8017d9c <__d2b+0x64>
 8017dca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017dce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8017dd2:	6038      	str	r0, [r7, #0]
 8017dd4:	6918      	ldr	r0, [r3, #16]
 8017dd6:	f7ff fcbd 	bl	8017754 <__hi0bits>
 8017dda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017dde:	e7e5      	b.n	8017dac <__d2b+0x74>
 8017de0:	080192a1 	.word	0x080192a1
 8017de4:	08019329 	.word	0x08019329

08017de8 <__ratio>:
 8017de8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dec:	4688      	mov	r8, r1
 8017dee:	4669      	mov	r1, sp
 8017df0:	4681      	mov	r9, r0
 8017df2:	f7ff ff57 	bl	8017ca4 <__b2d>
 8017df6:	a901      	add	r1, sp, #4
 8017df8:	4640      	mov	r0, r8
 8017dfa:	ec55 4b10 	vmov	r4, r5, d0
 8017dfe:	f7ff ff51 	bl	8017ca4 <__b2d>
 8017e02:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8017e06:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8017e0a:	1ad2      	subs	r2, r2, r3
 8017e0c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8017e10:	1a5b      	subs	r3, r3, r1
 8017e12:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8017e16:	ec57 6b10 	vmov	r6, r7, d0
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	bfd6      	itet	le
 8017e1e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017e22:	462a      	movgt	r2, r5
 8017e24:	463a      	movle	r2, r7
 8017e26:	46ab      	mov	fp, r5
 8017e28:	46a2      	mov	sl, r4
 8017e2a:	bfce      	itee	gt
 8017e2c:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8017e30:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8017e34:	ee00 3a90 	vmovle	s1, r3
 8017e38:	ec4b ab17 	vmov	d7, sl, fp
 8017e3c:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8017e40:	b003      	add	sp, #12
 8017e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017e46 <__copybits>:
 8017e46:	3901      	subs	r1, #1
 8017e48:	b570      	push	{r4, r5, r6, lr}
 8017e4a:	1149      	asrs	r1, r1, #5
 8017e4c:	6914      	ldr	r4, [r2, #16]
 8017e4e:	3101      	adds	r1, #1
 8017e50:	f102 0314 	add.w	r3, r2, #20
 8017e54:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017e58:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017e5c:	1f05      	subs	r5, r0, #4
 8017e5e:	42a3      	cmp	r3, r4
 8017e60:	d30c      	bcc.n	8017e7c <__copybits+0x36>
 8017e62:	1aa3      	subs	r3, r4, r2
 8017e64:	3b11      	subs	r3, #17
 8017e66:	f023 0303 	bic.w	r3, r3, #3
 8017e6a:	3211      	adds	r2, #17
 8017e6c:	42a2      	cmp	r2, r4
 8017e6e:	bf88      	it	hi
 8017e70:	2300      	movhi	r3, #0
 8017e72:	4418      	add	r0, r3
 8017e74:	2300      	movs	r3, #0
 8017e76:	4288      	cmp	r0, r1
 8017e78:	d305      	bcc.n	8017e86 <__copybits+0x40>
 8017e7a:	bd70      	pop	{r4, r5, r6, pc}
 8017e7c:	f853 6b04 	ldr.w	r6, [r3], #4
 8017e80:	f845 6f04 	str.w	r6, [r5, #4]!
 8017e84:	e7eb      	b.n	8017e5e <__copybits+0x18>
 8017e86:	f840 3b04 	str.w	r3, [r0], #4
 8017e8a:	e7f4      	b.n	8017e76 <__copybits+0x30>

08017e8c <__any_on>:
 8017e8c:	f100 0214 	add.w	r2, r0, #20
 8017e90:	6900      	ldr	r0, [r0, #16]
 8017e92:	114b      	asrs	r3, r1, #5
 8017e94:	4298      	cmp	r0, r3
 8017e96:	b510      	push	{r4, lr}
 8017e98:	db11      	blt.n	8017ebe <__any_on+0x32>
 8017e9a:	dd0a      	ble.n	8017eb2 <__any_on+0x26>
 8017e9c:	f011 011f 	ands.w	r1, r1, #31
 8017ea0:	d007      	beq.n	8017eb2 <__any_on+0x26>
 8017ea2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017ea6:	fa24 f001 	lsr.w	r0, r4, r1
 8017eaa:	fa00 f101 	lsl.w	r1, r0, r1
 8017eae:	428c      	cmp	r4, r1
 8017eb0:	d10b      	bne.n	8017eca <__any_on+0x3e>
 8017eb2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017eb6:	4293      	cmp	r3, r2
 8017eb8:	d803      	bhi.n	8017ec2 <__any_on+0x36>
 8017eba:	2000      	movs	r0, #0
 8017ebc:	bd10      	pop	{r4, pc}
 8017ebe:	4603      	mov	r3, r0
 8017ec0:	e7f7      	b.n	8017eb2 <__any_on+0x26>
 8017ec2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017ec6:	2900      	cmp	r1, #0
 8017ec8:	d0f5      	beq.n	8017eb6 <__any_on+0x2a>
 8017eca:	2001      	movs	r0, #1
 8017ecc:	e7f6      	b.n	8017ebc <__any_on+0x30>

08017ece <__ascii_wctomb>:
 8017ece:	4603      	mov	r3, r0
 8017ed0:	4608      	mov	r0, r1
 8017ed2:	b141      	cbz	r1, 8017ee6 <__ascii_wctomb+0x18>
 8017ed4:	2aff      	cmp	r2, #255	@ 0xff
 8017ed6:	d904      	bls.n	8017ee2 <__ascii_wctomb+0x14>
 8017ed8:	228a      	movs	r2, #138	@ 0x8a
 8017eda:	601a      	str	r2, [r3, #0]
 8017edc:	f04f 30ff 	mov.w	r0, #4294967295
 8017ee0:	4770      	bx	lr
 8017ee2:	700a      	strb	r2, [r1, #0]
 8017ee4:	2001      	movs	r0, #1
 8017ee6:	4770      	bx	lr

08017ee8 <__sflush_r>:
 8017ee8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ef0:	0716      	lsls	r6, r2, #28
 8017ef2:	4605      	mov	r5, r0
 8017ef4:	460c      	mov	r4, r1
 8017ef6:	d454      	bmi.n	8017fa2 <__sflush_r+0xba>
 8017ef8:	684b      	ldr	r3, [r1, #4]
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	dc02      	bgt.n	8017f04 <__sflush_r+0x1c>
 8017efe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	dd48      	ble.n	8017f96 <__sflush_r+0xae>
 8017f04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017f06:	2e00      	cmp	r6, #0
 8017f08:	d045      	beq.n	8017f96 <__sflush_r+0xae>
 8017f0a:	2300      	movs	r3, #0
 8017f0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017f10:	682f      	ldr	r7, [r5, #0]
 8017f12:	6a21      	ldr	r1, [r4, #32]
 8017f14:	602b      	str	r3, [r5, #0]
 8017f16:	d030      	beq.n	8017f7a <__sflush_r+0x92>
 8017f18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017f1a:	89a3      	ldrh	r3, [r4, #12]
 8017f1c:	0759      	lsls	r1, r3, #29
 8017f1e:	d505      	bpl.n	8017f2c <__sflush_r+0x44>
 8017f20:	6863      	ldr	r3, [r4, #4]
 8017f22:	1ad2      	subs	r2, r2, r3
 8017f24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017f26:	b10b      	cbz	r3, 8017f2c <__sflush_r+0x44>
 8017f28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017f2a:	1ad2      	subs	r2, r2, r3
 8017f2c:	2300      	movs	r3, #0
 8017f2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017f30:	6a21      	ldr	r1, [r4, #32]
 8017f32:	4628      	mov	r0, r5
 8017f34:	47b0      	blx	r6
 8017f36:	1c43      	adds	r3, r0, #1
 8017f38:	89a3      	ldrh	r3, [r4, #12]
 8017f3a:	d106      	bne.n	8017f4a <__sflush_r+0x62>
 8017f3c:	6829      	ldr	r1, [r5, #0]
 8017f3e:	291d      	cmp	r1, #29
 8017f40:	d82b      	bhi.n	8017f9a <__sflush_r+0xb2>
 8017f42:	4a2a      	ldr	r2, [pc, #168]	@ (8017fec <__sflush_r+0x104>)
 8017f44:	410a      	asrs	r2, r1
 8017f46:	07d6      	lsls	r6, r2, #31
 8017f48:	d427      	bmi.n	8017f9a <__sflush_r+0xb2>
 8017f4a:	2200      	movs	r2, #0
 8017f4c:	6062      	str	r2, [r4, #4]
 8017f4e:	04d9      	lsls	r1, r3, #19
 8017f50:	6922      	ldr	r2, [r4, #16]
 8017f52:	6022      	str	r2, [r4, #0]
 8017f54:	d504      	bpl.n	8017f60 <__sflush_r+0x78>
 8017f56:	1c42      	adds	r2, r0, #1
 8017f58:	d101      	bne.n	8017f5e <__sflush_r+0x76>
 8017f5a:	682b      	ldr	r3, [r5, #0]
 8017f5c:	b903      	cbnz	r3, 8017f60 <__sflush_r+0x78>
 8017f5e:	6560      	str	r0, [r4, #84]	@ 0x54
 8017f60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017f62:	602f      	str	r7, [r5, #0]
 8017f64:	b1b9      	cbz	r1, 8017f96 <__sflush_r+0xae>
 8017f66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017f6a:	4299      	cmp	r1, r3
 8017f6c:	d002      	beq.n	8017f74 <__sflush_r+0x8c>
 8017f6e:	4628      	mov	r0, r5
 8017f70:	f7fe feba 	bl	8016ce8 <_free_r>
 8017f74:	2300      	movs	r3, #0
 8017f76:	6363      	str	r3, [r4, #52]	@ 0x34
 8017f78:	e00d      	b.n	8017f96 <__sflush_r+0xae>
 8017f7a:	2301      	movs	r3, #1
 8017f7c:	4628      	mov	r0, r5
 8017f7e:	47b0      	blx	r6
 8017f80:	4602      	mov	r2, r0
 8017f82:	1c50      	adds	r0, r2, #1
 8017f84:	d1c9      	bne.n	8017f1a <__sflush_r+0x32>
 8017f86:	682b      	ldr	r3, [r5, #0]
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	d0c6      	beq.n	8017f1a <__sflush_r+0x32>
 8017f8c:	2b1d      	cmp	r3, #29
 8017f8e:	d001      	beq.n	8017f94 <__sflush_r+0xac>
 8017f90:	2b16      	cmp	r3, #22
 8017f92:	d11e      	bne.n	8017fd2 <__sflush_r+0xea>
 8017f94:	602f      	str	r7, [r5, #0]
 8017f96:	2000      	movs	r0, #0
 8017f98:	e022      	b.n	8017fe0 <__sflush_r+0xf8>
 8017f9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017f9e:	b21b      	sxth	r3, r3
 8017fa0:	e01b      	b.n	8017fda <__sflush_r+0xf2>
 8017fa2:	690f      	ldr	r7, [r1, #16]
 8017fa4:	2f00      	cmp	r7, #0
 8017fa6:	d0f6      	beq.n	8017f96 <__sflush_r+0xae>
 8017fa8:	0793      	lsls	r3, r2, #30
 8017faa:	680e      	ldr	r6, [r1, #0]
 8017fac:	bf08      	it	eq
 8017fae:	694b      	ldreq	r3, [r1, #20]
 8017fb0:	600f      	str	r7, [r1, #0]
 8017fb2:	bf18      	it	ne
 8017fb4:	2300      	movne	r3, #0
 8017fb6:	eba6 0807 	sub.w	r8, r6, r7
 8017fba:	608b      	str	r3, [r1, #8]
 8017fbc:	f1b8 0f00 	cmp.w	r8, #0
 8017fc0:	dde9      	ble.n	8017f96 <__sflush_r+0xae>
 8017fc2:	6a21      	ldr	r1, [r4, #32]
 8017fc4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017fc6:	4643      	mov	r3, r8
 8017fc8:	463a      	mov	r2, r7
 8017fca:	4628      	mov	r0, r5
 8017fcc:	47b0      	blx	r6
 8017fce:	2800      	cmp	r0, #0
 8017fd0:	dc08      	bgt.n	8017fe4 <__sflush_r+0xfc>
 8017fd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017fd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017fda:	81a3      	strh	r3, [r4, #12]
 8017fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8017fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fe4:	4407      	add	r7, r0
 8017fe6:	eba8 0800 	sub.w	r8, r8, r0
 8017fea:	e7e7      	b.n	8017fbc <__sflush_r+0xd4>
 8017fec:	dfbffffe 	.word	0xdfbffffe

08017ff0 <_fflush_r>:
 8017ff0:	b538      	push	{r3, r4, r5, lr}
 8017ff2:	690b      	ldr	r3, [r1, #16]
 8017ff4:	4605      	mov	r5, r0
 8017ff6:	460c      	mov	r4, r1
 8017ff8:	b913      	cbnz	r3, 8018000 <_fflush_r+0x10>
 8017ffa:	2500      	movs	r5, #0
 8017ffc:	4628      	mov	r0, r5
 8017ffe:	bd38      	pop	{r3, r4, r5, pc}
 8018000:	b118      	cbz	r0, 801800a <_fflush_r+0x1a>
 8018002:	6a03      	ldr	r3, [r0, #32]
 8018004:	b90b      	cbnz	r3, 801800a <_fflush_r+0x1a>
 8018006:	f7fe fd45 	bl	8016a94 <__sinit>
 801800a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801800e:	2b00      	cmp	r3, #0
 8018010:	d0f3      	beq.n	8017ffa <_fflush_r+0xa>
 8018012:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018014:	07d0      	lsls	r0, r2, #31
 8018016:	d404      	bmi.n	8018022 <_fflush_r+0x32>
 8018018:	0599      	lsls	r1, r3, #22
 801801a:	d402      	bmi.n	8018022 <_fflush_r+0x32>
 801801c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801801e:	f7fe fe4a 	bl	8016cb6 <__retarget_lock_acquire_recursive>
 8018022:	4628      	mov	r0, r5
 8018024:	4621      	mov	r1, r4
 8018026:	f7ff ff5f 	bl	8017ee8 <__sflush_r>
 801802a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801802c:	07da      	lsls	r2, r3, #31
 801802e:	4605      	mov	r5, r0
 8018030:	d4e4      	bmi.n	8017ffc <_fflush_r+0xc>
 8018032:	89a3      	ldrh	r3, [r4, #12]
 8018034:	059b      	lsls	r3, r3, #22
 8018036:	d4e1      	bmi.n	8017ffc <_fflush_r+0xc>
 8018038:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801803a:	f7fe fe3d 	bl	8016cb8 <__retarget_lock_release_recursive>
 801803e:	e7dd      	b.n	8017ffc <_fflush_r+0xc>

08018040 <_sbrk_r>:
 8018040:	b538      	push	{r3, r4, r5, lr}
 8018042:	4d06      	ldr	r5, [pc, #24]	@ (801805c <_sbrk_r+0x1c>)
 8018044:	2300      	movs	r3, #0
 8018046:	4604      	mov	r4, r0
 8018048:	4608      	mov	r0, r1
 801804a:	602b      	str	r3, [r5, #0]
 801804c:	f7ec fb20 	bl	8004690 <_sbrk>
 8018050:	1c43      	adds	r3, r0, #1
 8018052:	d102      	bne.n	801805a <_sbrk_r+0x1a>
 8018054:	682b      	ldr	r3, [r5, #0]
 8018056:	b103      	cbz	r3, 801805a <_sbrk_r+0x1a>
 8018058:	6023      	str	r3, [r4, #0]
 801805a:	bd38      	pop	{r3, r4, r5, pc}
 801805c:	24005810 	.word	0x24005810

08018060 <__assert_func>:
 8018060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018062:	4614      	mov	r4, r2
 8018064:	461a      	mov	r2, r3
 8018066:	4b09      	ldr	r3, [pc, #36]	@ (801808c <__assert_func+0x2c>)
 8018068:	681b      	ldr	r3, [r3, #0]
 801806a:	4605      	mov	r5, r0
 801806c:	68d8      	ldr	r0, [r3, #12]
 801806e:	b954      	cbnz	r4, 8018086 <__assert_func+0x26>
 8018070:	4b07      	ldr	r3, [pc, #28]	@ (8018090 <__assert_func+0x30>)
 8018072:	461c      	mov	r4, r3
 8018074:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018078:	9100      	str	r1, [sp, #0]
 801807a:	462b      	mov	r3, r5
 801807c:	4905      	ldr	r1, [pc, #20]	@ (8018094 <__assert_func+0x34>)
 801807e:	f000 f829 	bl	80180d4 <fiprintf>
 8018082:	f000 f839 	bl	80180f8 <abort>
 8018086:	4b04      	ldr	r3, [pc, #16]	@ (8018098 <__assert_func+0x38>)
 8018088:	e7f4      	b.n	8018074 <__assert_func+0x14>
 801808a:	bf00      	nop
 801808c:	24000260 	.word	0x24000260
 8018090:	080194bb 	.word	0x080194bb
 8018094:	0801948d 	.word	0x0801948d
 8018098:	08019480 	.word	0x08019480

0801809c <_calloc_r>:
 801809c:	b570      	push	{r4, r5, r6, lr}
 801809e:	fba1 5402 	umull	r5, r4, r1, r2
 80180a2:	b93c      	cbnz	r4, 80180b4 <_calloc_r+0x18>
 80180a4:	4629      	mov	r1, r5
 80180a6:	f7ff f9c5 	bl	8017434 <_malloc_r>
 80180aa:	4606      	mov	r6, r0
 80180ac:	b928      	cbnz	r0, 80180ba <_calloc_r+0x1e>
 80180ae:	2600      	movs	r6, #0
 80180b0:	4630      	mov	r0, r6
 80180b2:	bd70      	pop	{r4, r5, r6, pc}
 80180b4:	220c      	movs	r2, #12
 80180b6:	6002      	str	r2, [r0, #0]
 80180b8:	e7f9      	b.n	80180ae <_calloc_r+0x12>
 80180ba:	462a      	mov	r2, r5
 80180bc:	4621      	mov	r1, r4
 80180be:	f7fe fd62 	bl	8016b86 <memset>
 80180c2:	e7f5      	b.n	80180b0 <_calloc_r+0x14>

080180c4 <malloc>:
 80180c4:	4b02      	ldr	r3, [pc, #8]	@ (80180d0 <malloc+0xc>)
 80180c6:	4601      	mov	r1, r0
 80180c8:	6818      	ldr	r0, [r3, #0]
 80180ca:	f7ff b9b3 	b.w	8017434 <_malloc_r>
 80180ce:	bf00      	nop
 80180d0:	24000260 	.word	0x24000260

080180d4 <fiprintf>:
 80180d4:	b40e      	push	{r1, r2, r3}
 80180d6:	b503      	push	{r0, r1, lr}
 80180d8:	4601      	mov	r1, r0
 80180da:	ab03      	add	r3, sp, #12
 80180dc:	4805      	ldr	r0, [pc, #20]	@ (80180f4 <fiprintf+0x20>)
 80180de:	f853 2b04 	ldr.w	r2, [r3], #4
 80180e2:	6800      	ldr	r0, [r0, #0]
 80180e4:	9301      	str	r3, [sp, #4]
 80180e6:	f000 f837 	bl	8018158 <_vfiprintf_r>
 80180ea:	b002      	add	sp, #8
 80180ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80180f0:	b003      	add	sp, #12
 80180f2:	4770      	bx	lr
 80180f4:	24000260 	.word	0x24000260

080180f8 <abort>:
 80180f8:	b508      	push	{r3, lr}
 80180fa:	2006      	movs	r0, #6
 80180fc:	f000 fb8e 	bl	801881c <raise>
 8018100:	2001      	movs	r0, #1
 8018102:	f7ec fa4d 	bl	80045a0 <_exit>

08018106 <__sfputc_r>:
 8018106:	6893      	ldr	r3, [r2, #8]
 8018108:	3b01      	subs	r3, #1
 801810a:	2b00      	cmp	r3, #0
 801810c:	b410      	push	{r4}
 801810e:	6093      	str	r3, [r2, #8]
 8018110:	da08      	bge.n	8018124 <__sfputc_r+0x1e>
 8018112:	6994      	ldr	r4, [r2, #24]
 8018114:	42a3      	cmp	r3, r4
 8018116:	db01      	blt.n	801811c <__sfputc_r+0x16>
 8018118:	290a      	cmp	r1, #10
 801811a:	d103      	bne.n	8018124 <__sfputc_r+0x1e>
 801811c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018120:	f000 bac0 	b.w	80186a4 <__swbuf_r>
 8018124:	6813      	ldr	r3, [r2, #0]
 8018126:	1c58      	adds	r0, r3, #1
 8018128:	6010      	str	r0, [r2, #0]
 801812a:	7019      	strb	r1, [r3, #0]
 801812c:	4608      	mov	r0, r1
 801812e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018132:	4770      	bx	lr

08018134 <__sfputs_r>:
 8018134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018136:	4606      	mov	r6, r0
 8018138:	460f      	mov	r7, r1
 801813a:	4614      	mov	r4, r2
 801813c:	18d5      	adds	r5, r2, r3
 801813e:	42ac      	cmp	r4, r5
 8018140:	d101      	bne.n	8018146 <__sfputs_r+0x12>
 8018142:	2000      	movs	r0, #0
 8018144:	e007      	b.n	8018156 <__sfputs_r+0x22>
 8018146:	f814 1b01 	ldrb.w	r1, [r4], #1
 801814a:	463a      	mov	r2, r7
 801814c:	4630      	mov	r0, r6
 801814e:	f7ff ffda 	bl	8018106 <__sfputc_r>
 8018152:	1c43      	adds	r3, r0, #1
 8018154:	d1f3      	bne.n	801813e <__sfputs_r+0xa>
 8018156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018158 <_vfiprintf_r>:
 8018158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801815c:	460d      	mov	r5, r1
 801815e:	b09d      	sub	sp, #116	@ 0x74
 8018160:	4614      	mov	r4, r2
 8018162:	4698      	mov	r8, r3
 8018164:	4606      	mov	r6, r0
 8018166:	b118      	cbz	r0, 8018170 <_vfiprintf_r+0x18>
 8018168:	6a03      	ldr	r3, [r0, #32]
 801816a:	b90b      	cbnz	r3, 8018170 <_vfiprintf_r+0x18>
 801816c:	f7fe fc92 	bl	8016a94 <__sinit>
 8018170:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018172:	07d9      	lsls	r1, r3, #31
 8018174:	d405      	bmi.n	8018182 <_vfiprintf_r+0x2a>
 8018176:	89ab      	ldrh	r3, [r5, #12]
 8018178:	059a      	lsls	r2, r3, #22
 801817a:	d402      	bmi.n	8018182 <_vfiprintf_r+0x2a>
 801817c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801817e:	f7fe fd9a 	bl	8016cb6 <__retarget_lock_acquire_recursive>
 8018182:	89ab      	ldrh	r3, [r5, #12]
 8018184:	071b      	lsls	r3, r3, #28
 8018186:	d501      	bpl.n	801818c <_vfiprintf_r+0x34>
 8018188:	692b      	ldr	r3, [r5, #16]
 801818a:	b99b      	cbnz	r3, 80181b4 <_vfiprintf_r+0x5c>
 801818c:	4629      	mov	r1, r5
 801818e:	4630      	mov	r0, r6
 8018190:	f000 fac6 	bl	8018720 <__swsetup_r>
 8018194:	b170      	cbz	r0, 80181b4 <_vfiprintf_r+0x5c>
 8018196:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018198:	07dc      	lsls	r4, r3, #31
 801819a:	d504      	bpl.n	80181a6 <_vfiprintf_r+0x4e>
 801819c:	f04f 30ff 	mov.w	r0, #4294967295
 80181a0:	b01d      	add	sp, #116	@ 0x74
 80181a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181a6:	89ab      	ldrh	r3, [r5, #12]
 80181a8:	0598      	lsls	r0, r3, #22
 80181aa:	d4f7      	bmi.n	801819c <_vfiprintf_r+0x44>
 80181ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80181ae:	f7fe fd83 	bl	8016cb8 <__retarget_lock_release_recursive>
 80181b2:	e7f3      	b.n	801819c <_vfiprintf_r+0x44>
 80181b4:	2300      	movs	r3, #0
 80181b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80181b8:	2320      	movs	r3, #32
 80181ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80181be:	f8cd 800c 	str.w	r8, [sp, #12]
 80181c2:	2330      	movs	r3, #48	@ 0x30
 80181c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018374 <_vfiprintf_r+0x21c>
 80181c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80181cc:	f04f 0901 	mov.w	r9, #1
 80181d0:	4623      	mov	r3, r4
 80181d2:	469a      	mov	sl, r3
 80181d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80181d8:	b10a      	cbz	r2, 80181de <_vfiprintf_r+0x86>
 80181da:	2a25      	cmp	r2, #37	@ 0x25
 80181dc:	d1f9      	bne.n	80181d2 <_vfiprintf_r+0x7a>
 80181de:	ebba 0b04 	subs.w	fp, sl, r4
 80181e2:	d00b      	beq.n	80181fc <_vfiprintf_r+0xa4>
 80181e4:	465b      	mov	r3, fp
 80181e6:	4622      	mov	r2, r4
 80181e8:	4629      	mov	r1, r5
 80181ea:	4630      	mov	r0, r6
 80181ec:	f7ff ffa2 	bl	8018134 <__sfputs_r>
 80181f0:	3001      	adds	r0, #1
 80181f2:	f000 80a7 	beq.w	8018344 <_vfiprintf_r+0x1ec>
 80181f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80181f8:	445a      	add	r2, fp
 80181fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80181fc:	f89a 3000 	ldrb.w	r3, [sl]
 8018200:	2b00      	cmp	r3, #0
 8018202:	f000 809f 	beq.w	8018344 <_vfiprintf_r+0x1ec>
 8018206:	2300      	movs	r3, #0
 8018208:	f04f 32ff 	mov.w	r2, #4294967295
 801820c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018210:	f10a 0a01 	add.w	sl, sl, #1
 8018214:	9304      	str	r3, [sp, #16]
 8018216:	9307      	str	r3, [sp, #28]
 8018218:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801821c:	931a      	str	r3, [sp, #104]	@ 0x68
 801821e:	4654      	mov	r4, sl
 8018220:	2205      	movs	r2, #5
 8018222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018226:	4853      	ldr	r0, [pc, #332]	@ (8018374 <_vfiprintf_r+0x21c>)
 8018228:	f7e8 f872 	bl	8000310 <memchr>
 801822c:	9a04      	ldr	r2, [sp, #16]
 801822e:	b9d8      	cbnz	r0, 8018268 <_vfiprintf_r+0x110>
 8018230:	06d1      	lsls	r1, r2, #27
 8018232:	bf44      	itt	mi
 8018234:	2320      	movmi	r3, #32
 8018236:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801823a:	0713      	lsls	r3, r2, #28
 801823c:	bf44      	itt	mi
 801823e:	232b      	movmi	r3, #43	@ 0x2b
 8018240:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018244:	f89a 3000 	ldrb.w	r3, [sl]
 8018248:	2b2a      	cmp	r3, #42	@ 0x2a
 801824a:	d015      	beq.n	8018278 <_vfiprintf_r+0x120>
 801824c:	9a07      	ldr	r2, [sp, #28]
 801824e:	4654      	mov	r4, sl
 8018250:	2000      	movs	r0, #0
 8018252:	f04f 0c0a 	mov.w	ip, #10
 8018256:	4621      	mov	r1, r4
 8018258:	f811 3b01 	ldrb.w	r3, [r1], #1
 801825c:	3b30      	subs	r3, #48	@ 0x30
 801825e:	2b09      	cmp	r3, #9
 8018260:	d94b      	bls.n	80182fa <_vfiprintf_r+0x1a2>
 8018262:	b1b0      	cbz	r0, 8018292 <_vfiprintf_r+0x13a>
 8018264:	9207      	str	r2, [sp, #28]
 8018266:	e014      	b.n	8018292 <_vfiprintf_r+0x13a>
 8018268:	eba0 0308 	sub.w	r3, r0, r8
 801826c:	fa09 f303 	lsl.w	r3, r9, r3
 8018270:	4313      	orrs	r3, r2
 8018272:	9304      	str	r3, [sp, #16]
 8018274:	46a2      	mov	sl, r4
 8018276:	e7d2      	b.n	801821e <_vfiprintf_r+0xc6>
 8018278:	9b03      	ldr	r3, [sp, #12]
 801827a:	1d19      	adds	r1, r3, #4
 801827c:	681b      	ldr	r3, [r3, #0]
 801827e:	9103      	str	r1, [sp, #12]
 8018280:	2b00      	cmp	r3, #0
 8018282:	bfbb      	ittet	lt
 8018284:	425b      	neglt	r3, r3
 8018286:	f042 0202 	orrlt.w	r2, r2, #2
 801828a:	9307      	strge	r3, [sp, #28]
 801828c:	9307      	strlt	r3, [sp, #28]
 801828e:	bfb8      	it	lt
 8018290:	9204      	strlt	r2, [sp, #16]
 8018292:	7823      	ldrb	r3, [r4, #0]
 8018294:	2b2e      	cmp	r3, #46	@ 0x2e
 8018296:	d10a      	bne.n	80182ae <_vfiprintf_r+0x156>
 8018298:	7863      	ldrb	r3, [r4, #1]
 801829a:	2b2a      	cmp	r3, #42	@ 0x2a
 801829c:	d132      	bne.n	8018304 <_vfiprintf_r+0x1ac>
 801829e:	9b03      	ldr	r3, [sp, #12]
 80182a0:	1d1a      	adds	r2, r3, #4
 80182a2:	681b      	ldr	r3, [r3, #0]
 80182a4:	9203      	str	r2, [sp, #12]
 80182a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80182aa:	3402      	adds	r4, #2
 80182ac:	9305      	str	r3, [sp, #20]
 80182ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018384 <_vfiprintf_r+0x22c>
 80182b2:	7821      	ldrb	r1, [r4, #0]
 80182b4:	2203      	movs	r2, #3
 80182b6:	4650      	mov	r0, sl
 80182b8:	f7e8 f82a 	bl	8000310 <memchr>
 80182bc:	b138      	cbz	r0, 80182ce <_vfiprintf_r+0x176>
 80182be:	9b04      	ldr	r3, [sp, #16]
 80182c0:	eba0 000a 	sub.w	r0, r0, sl
 80182c4:	2240      	movs	r2, #64	@ 0x40
 80182c6:	4082      	lsls	r2, r0
 80182c8:	4313      	orrs	r3, r2
 80182ca:	3401      	adds	r4, #1
 80182cc:	9304      	str	r3, [sp, #16]
 80182ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80182d2:	4829      	ldr	r0, [pc, #164]	@ (8018378 <_vfiprintf_r+0x220>)
 80182d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80182d8:	2206      	movs	r2, #6
 80182da:	f7e8 f819 	bl	8000310 <memchr>
 80182de:	2800      	cmp	r0, #0
 80182e0:	d03f      	beq.n	8018362 <_vfiprintf_r+0x20a>
 80182e2:	4b26      	ldr	r3, [pc, #152]	@ (801837c <_vfiprintf_r+0x224>)
 80182e4:	bb1b      	cbnz	r3, 801832e <_vfiprintf_r+0x1d6>
 80182e6:	9b03      	ldr	r3, [sp, #12]
 80182e8:	3307      	adds	r3, #7
 80182ea:	f023 0307 	bic.w	r3, r3, #7
 80182ee:	3308      	adds	r3, #8
 80182f0:	9303      	str	r3, [sp, #12]
 80182f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80182f4:	443b      	add	r3, r7
 80182f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80182f8:	e76a      	b.n	80181d0 <_vfiprintf_r+0x78>
 80182fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80182fe:	460c      	mov	r4, r1
 8018300:	2001      	movs	r0, #1
 8018302:	e7a8      	b.n	8018256 <_vfiprintf_r+0xfe>
 8018304:	2300      	movs	r3, #0
 8018306:	3401      	adds	r4, #1
 8018308:	9305      	str	r3, [sp, #20]
 801830a:	4619      	mov	r1, r3
 801830c:	f04f 0c0a 	mov.w	ip, #10
 8018310:	4620      	mov	r0, r4
 8018312:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018316:	3a30      	subs	r2, #48	@ 0x30
 8018318:	2a09      	cmp	r2, #9
 801831a:	d903      	bls.n	8018324 <_vfiprintf_r+0x1cc>
 801831c:	2b00      	cmp	r3, #0
 801831e:	d0c6      	beq.n	80182ae <_vfiprintf_r+0x156>
 8018320:	9105      	str	r1, [sp, #20]
 8018322:	e7c4      	b.n	80182ae <_vfiprintf_r+0x156>
 8018324:	fb0c 2101 	mla	r1, ip, r1, r2
 8018328:	4604      	mov	r4, r0
 801832a:	2301      	movs	r3, #1
 801832c:	e7f0      	b.n	8018310 <_vfiprintf_r+0x1b8>
 801832e:	ab03      	add	r3, sp, #12
 8018330:	9300      	str	r3, [sp, #0]
 8018332:	462a      	mov	r2, r5
 8018334:	4b12      	ldr	r3, [pc, #72]	@ (8018380 <_vfiprintf_r+0x228>)
 8018336:	a904      	add	r1, sp, #16
 8018338:	4630      	mov	r0, r6
 801833a:	f3af 8000 	nop.w
 801833e:	4607      	mov	r7, r0
 8018340:	1c78      	adds	r0, r7, #1
 8018342:	d1d6      	bne.n	80182f2 <_vfiprintf_r+0x19a>
 8018344:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018346:	07d9      	lsls	r1, r3, #31
 8018348:	d405      	bmi.n	8018356 <_vfiprintf_r+0x1fe>
 801834a:	89ab      	ldrh	r3, [r5, #12]
 801834c:	059a      	lsls	r2, r3, #22
 801834e:	d402      	bmi.n	8018356 <_vfiprintf_r+0x1fe>
 8018350:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018352:	f7fe fcb1 	bl	8016cb8 <__retarget_lock_release_recursive>
 8018356:	89ab      	ldrh	r3, [r5, #12]
 8018358:	065b      	lsls	r3, r3, #25
 801835a:	f53f af1f 	bmi.w	801819c <_vfiprintf_r+0x44>
 801835e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018360:	e71e      	b.n	80181a0 <_vfiprintf_r+0x48>
 8018362:	ab03      	add	r3, sp, #12
 8018364:	9300      	str	r3, [sp, #0]
 8018366:	462a      	mov	r2, r5
 8018368:	4b05      	ldr	r3, [pc, #20]	@ (8018380 <_vfiprintf_r+0x228>)
 801836a:	a904      	add	r1, sp, #16
 801836c:	4630      	mov	r0, r6
 801836e:	f000 f879 	bl	8018464 <_printf_i>
 8018372:	e7e4      	b.n	801833e <_vfiprintf_r+0x1e6>
 8018374:	080194bc 	.word	0x080194bc
 8018378:	080194c6 	.word	0x080194c6
 801837c:	00000000 	.word	0x00000000
 8018380:	08018135 	.word	0x08018135
 8018384:	080194c2 	.word	0x080194c2

08018388 <_printf_common>:
 8018388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801838c:	4616      	mov	r6, r2
 801838e:	4698      	mov	r8, r3
 8018390:	688a      	ldr	r2, [r1, #8]
 8018392:	690b      	ldr	r3, [r1, #16]
 8018394:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018398:	4293      	cmp	r3, r2
 801839a:	bfb8      	it	lt
 801839c:	4613      	movlt	r3, r2
 801839e:	6033      	str	r3, [r6, #0]
 80183a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80183a4:	4607      	mov	r7, r0
 80183a6:	460c      	mov	r4, r1
 80183a8:	b10a      	cbz	r2, 80183ae <_printf_common+0x26>
 80183aa:	3301      	adds	r3, #1
 80183ac:	6033      	str	r3, [r6, #0]
 80183ae:	6823      	ldr	r3, [r4, #0]
 80183b0:	0699      	lsls	r1, r3, #26
 80183b2:	bf42      	ittt	mi
 80183b4:	6833      	ldrmi	r3, [r6, #0]
 80183b6:	3302      	addmi	r3, #2
 80183b8:	6033      	strmi	r3, [r6, #0]
 80183ba:	6825      	ldr	r5, [r4, #0]
 80183bc:	f015 0506 	ands.w	r5, r5, #6
 80183c0:	d106      	bne.n	80183d0 <_printf_common+0x48>
 80183c2:	f104 0a19 	add.w	sl, r4, #25
 80183c6:	68e3      	ldr	r3, [r4, #12]
 80183c8:	6832      	ldr	r2, [r6, #0]
 80183ca:	1a9b      	subs	r3, r3, r2
 80183cc:	42ab      	cmp	r3, r5
 80183ce:	dc26      	bgt.n	801841e <_printf_common+0x96>
 80183d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80183d4:	6822      	ldr	r2, [r4, #0]
 80183d6:	3b00      	subs	r3, #0
 80183d8:	bf18      	it	ne
 80183da:	2301      	movne	r3, #1
 80183dc:	0692      	lsls	r2, r2, #26
 80183de:	d42b      	bmi.n	8018438 <_printf_common+0xb0>
 80183e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80183e4:	4641      	mov	r1, r8
 80183e6:	4638      	mov	r0, r7
 80183e8:	47c8      	blx	r9
 80183ea:	3001      	adds	r0, #1
 80183ec:	d01e      	beq.n	801842c <_printf_common+0xa4>
 80183ee:	6823      	ldr	r3, [r4, #0]
 80183f0:	6922      	ldr	r2, [r4, #16]
 80183f2:	f003 0306 	and.w	r3, r3, #6
 80183f6:	2b04      	cmp	r3, #4
 80183f8:	bf02      	ittt	eq
 80183fa:	68e5      	ldreq	r5, [r4, #12]
 80183fc:	6833      	ldreq	r3, [r6, #0]
 80183fe:	1aed      	subeq	r5, r5, r3
 8018400:	68a3      	ldr	r3, [r4, #8]
 8018402:	bf0c      	ite	eq
 8018404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018408:	2500      	movne	r5, #0
 801840a:	4293      	cmp	r3, r2
 801840c:	bfc4      	itt	gt
 801840e:	1a9b      	subgt	r3, r3, r2
 8018410:	18ed      	addgt	r5, r5, r3
 8018412:	2600      	movs	r6, #0
 8018414:	341a      	adds	r4, #26
 8018416:	42b5      	cmp	r5, r6
 8018418:	d11a      	bne.n	8018450 <_printf_common+0xc8>
 801841a:	2000      	movs	r0, #0
 801841c:	e008      	b.n	8018430 <_printf_common+0xa8>
 801841e:	2301      	movs	r3, #1
 8018420:	4652      	mov	r2, sl
 8018422:	4641      	mov	r1, r8
 8018424:	4638      	mov	r0, r7
 8018426:	47c8      	blx	r9
 8018428:	3001      	adds	r0, #1
 801842a:	d103      	bne.n	8018434 <_printf_common+0xac>
 801842c:	f04f 30ff 	mov.w	r0, #4294967295
 8018430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018434:	3501      	adds	r5, #1
 8018436:	e7c6      	b.n	80183c6 <_printf_common+0x3e>
 8018438:	18e1      	adds	r1, r4, r3
 801843a:	1c5a      	adds	r2, r3, #1
 801843c:	2030      	movs	r0, #48	@ 0x30
 801843e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018442:	4422      	add	r2, r4
 8018444:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018448:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801844c:	3302      	adds	r3, #2
 801844e:	e7c7      	b.n	80183e0 <_printf_common+0x58>
 8018450:	2301      	movs	r3, #1
 8018452:	4622      	mov	r2, r4
 8018454:	4641      	mov	r1, r8
 8018456:	4638      	mov	r0, r7
 8018458:	47c8      	blx	r9
 801845a:	3001      	adds	r0, #1
 801845c:	d0e6      	beq.n	801842c <_printf_common+0xa4>
 801845e:	3601      	adds	r6, #1
 8018460:	e7d9      	b.n	8018416 <_printf_common+0x8e>
	...

08018464 <_printf_i>:
 8018464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018468:	7e0f      	ldrb	r7, [r1, #24]
 801846a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801846c:	2f78      	cmp	r7, #120	@ 0x78
 801846e:	4691      	mov	r9, r2
 8018470:	4680      	mov	r8, r0
 8018472:	460c      	mov	r4, r1
 8018474:	469a      	mov	sl, r3
 8018476:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801847a:	d807      	bhi.n	801848c <_printf_i+0x28>
 801847c:	2f62      	cmp	r7, #98	@ 0x62
 801847e:	d80a      	bhi.n	8018496 <_printf_i+0x32>
 8018480:	2f00      	cmp	r7, #0
 8018482:	f000 80d2 	beq.w	801862a <_printf_i+0x1c6>
 8018486:	2f58      	cmp	r7, #88	@ 0x58
 8018488:	f000 80b9 	beq.w	80185fe <_printf_i+0x19a>
 801848c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018490:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018494:	e03a      	b.n	801850c <_printf_i+0xa8>
 8018496:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801849a:	2b15      	cmp	r3, #21
 801849c:	d8f6      	bhi.n	801848c <_printf_i+0x28>
 801849e:	a101      	add	r1, pc, #4	@ (adr r1, 80184a4 <_printf_i+0x40>)
 80184a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80184a4:	080184fd 	.word	0x080184fd
 80184a8:	08018511 	.word	0x08018511
 80184ac:	0801848d 	.word	0x0801848d
 80184b0:	0801848d 	.word	0x0801848d
 80184b4:	0801848d 	.word	0x0801848d
 80184b8:	0801848d 	.word	0x0801848d
 80184bc:	08018511 	.word	0x08018511
 80184c0:	0801848d 	.word	0x0801848d
 80184c4:	0801848d 	.word	0x0801848d
 80184c8:	0801848d 	.word	0x0801848d
 80184cc:	0801848d 	.word	0x0801848d
 80184d0:	08018611 	.word	0x08018611
 80184d4:	0801853b 	.word	0x0801853b
 80184d8:	080185cb 	.word	0x080185cb
 80184dc:	0801848d 	.word	0x0801848d
 80184e0:	0801848d 	.word	0x0801848d
 80184e4:	08018633 	.word	0x08018633
 80184e8:	0801848d 	.word	0x0801848d
 80184ec:	0801853b 	.word	0x0801853b
 80184f0:	0801848d 	.word	0x0801848d
 80184f4:	0801848d 	.word	0x0801848d
 80184f8:	080185d3 	.word	0x080185d3
 80184fc:	6833      	ldr	r3, [r6, #0]
 80184fe:	1d1a      	adds	r2, r3, #4
 8018500:	681b      	ldr	r3, [r3, #0]
 8018502:	6032      	str	r2, [r6, #0]
 8018504:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018508:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801850c:	2301      	movs	r3, #1
 801850e:	e09d      	b.n	801864c <_printf_i+0x1e8>
 8018510:	6833      	ldr	r3, [r6, #0]
 8018512:	6820      	ldr	r0, [r4, #0]
 8018514:	1d19      	adds	r1, r3, #4
 8018516:	6031      	str	r1, [r6, #0]
 8018518:	0606      	lsls	r6, r0, #24
 801851a:	d501      	bpl.n	8018520 <_printf_i+0xbc>
 801851c:	681d      	ldr	r5, [r3, #0]
 801851e:	e003      	b.n	8018528 <_printf_i+0xc4>
 8018520:	0645      	lsls	r5, r0, #25
 8018522:	d5fb      	bpl.n	801851c <_printf_i+0xb8>
 8018524:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018528:	2d00      	cmp	r5, #0
 801852a:	da03      	bge.n	8018534 <_printf_i+0xd0>
 801852c:	232d      	movs	r3, #45	@ 0x2d
 801852e:	426d      	negs	r5, r5
 8018530:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018534:	4859      	ldr	r0, [pc, #356]	@ (801869c <_printf_i+0x238>)
 8018536:	230a      	movs	r3, #10
 8018538:	e011      	b.n	801855e <_printf_i+0xfa>
 801853a:	6821      	ldr	r1, [r4, #0]
 801853c:	6833      	ldr	r3, [r6, #0]
 801853e:	0608      	lsls	r0, r1, #24
 8018540:	f853 5b04 	ldr.w	r5, [r3], #4
 8018544:	d402      	bmi.n	801854c <_printf_i+0xe8>
 8018546:	0649      	lsls	r1, r1, #25
 8018548:	bf48      	it	mi
 801854a:	b2ad      	uxthmi	r5, r5
 801854c:	2f6f      	cmp	r7, #111	@ 0x6f
 801854e:	4853      	ldr	r0, [pc, #332]	@ (801869c <_printf_i+0x238>)
 8018550:	6033      	str	r3, [r6, #0]
 8018552:	bf14      	ite	ne
 8018554:	230a      	movne	r3, #10
 8018556:	2308      	moveq	r3, #8
 8018558:	2100      	movs	r1, #0
 801855a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801855e:	6866      	ldr	r6, [r4, #4]
 8018560:	60a6      	str	r6, [r4, #8]
 8018562:	2e00      	cmp	r6, #0
 8018564:	bfa2      	ittt	ge
 8018566:	6821      	ldrge	r1, [r4, #0]
 8018568:	f021 0104 	bicge.w	r1, r1, #4
 801856c:	6021      	strge	r1, [r4, #0]
 801856e:	b90d      	cbnz	r5, 8018574 <_printf_i+0x110>
 8018570:	2e00      	cmp	r6, #0
 8018572:	d04b      	beq.n	801860c <_printf_i+0x1a8>
 8018574:	4616      	mov	r6, r2
 8018576:	fbb5 f1f3 	udiv	r1, r5, r3
 801857a:	fb03 5711 	mls	r7, r3, r1, r5
 801857e:	5dc7      	ldrb	r7, [r0, r7]
 8018580:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018584:	462f      	mov	r7, r5
 8018586:	42bb      	cmp	r3, r7
 8018588:	460d      	mov	r5, r1
 801858a:	d9f4      	bls.n	8018576 <_printf_i+0x112>
 801858c:	2b08      	cmp	r3, #8
 801858e:	d10b      	bne.n	80185a8 <_printf_i+0x144>
 8018590:	6823      	ldr	r3, [r4, #0]
 8018592:	07df      	lsls	r7, r3, #31
 8018594:	d508      	bpl.n	80185a8 <_printf_i+0x144>
 8018596:	6923      	ldr	r3, [r4, #16]
 8018598:	6861      	ldr	r1, [r4, #4]
 801859a:	4299      	cmp	r1, r3
 801859c:	bfde      	ittt	le
 801859e:	2330      	movle	r3, #48	@ 0x30
 80185a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80185a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80185a8:	1b92      	subs	r2, r2, r6
 80185aa:	6122      	str	r2, [r4, #16]
 80185ac:	f8cd a000 	str.w	sl, [sp]
 80185b0:	464b      	mov	r3, r9
 80185b2:	aa03      	add	r2, sp, #12
 80185b4:	4621      	mov	r1, r4
 80185b6:	4640      	mov	r0, r8
 80185b8:	f7ff fee6 	bl	8018388 <_printf_common>
 80185bc:	3001      	adds	r0, #1
 80185be:	d14a      	bne.n	8018656 <_printf_i+0x1f2>
 80185c0:	f04f 30ff 	mov.w	r0, #4294967295
 80185c4:	b004      	add	sp, #16
 80185c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80185ca:	6823      	ldr	r3, [r4, #0]
 80185cc:	f043 0320 	orr.w	r3, r3, #32
 80185d0:	6023      	str	r3, [r4, #0]
 80185d2:	4833      	ldr	r0, [pc, #204]	@ (80186a0 <_printf_i+0x23c>)
 80185d4:	2778      	movs	r7, #120	@ 0x78
 80185d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80185da:	6823      	ldr	r3, [r4, #0]
 80185dc:	6831      	ldr	r1, [r6, #0]
 80185de:	061f      	lsls	r7, r3, #24
 80185e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80185e4:	d402      	bmi.n	80185ec <_printf_i+0x188>
 80185e6:	065f      	lsls	r7, r3, #25
 80185e8:	bf48      	it	mi
 80185ea:	b2ad      	uxthmi	r5, r5
 80185ec:	6031      	str	r1, [r6, #0]
 80185ee:	07d9      	lsls	r1, r3, #31
 80185f0:	bf44      	itt	mi
 80185f2:	f043 0320 	orrmi.w	r3, r3, #32
 80185f6:	6023      	strmi	r3, [r4, #0]
 80185f8:	b11d      	cbz	r5, 8018602 <_printf_i+0x19e>
 80185fa:	2310      	movs	r3, #16
 80185fc:	e7ac      	b.n	8018558 <_printf_i+0xf4>
 80185fe:	4827      	ldr	r0, [pc, #156]	@ (801869c <_printf_i+0x238>)
 8018600:	e7e9      	b.n	80185d6 <_printf_i+0x172>
 8018602:	6823      	ldr	r3, [r4, #0]
 8018604:	f023 0320 	bic.w	r3, r3, #32
 8018608:	6023      	str	r3, [r4, #0]
 801860a:	e7f6      	b.n	80185fa <_printf_i+0x196>
 801860c:	4616      	mov	r6, r2
 801860e:	e7bd      	b.n	801858c <_printf_i+0x128>
 8018610:	6833      	ldr	r3, [r6, #0]
 8018612:	6825      	ldr	r5, [r4, #0]
 8018614:	6961      	ldr	r1, [r4, #20]
 8018616:	1d18      	adds	r0, r3, #4
 8018618:	6030      	str	r0, [r6, #0]
 801861a:	062e      	lsls	r6, r5, #24
 801861c:	681b      	ldr	r3, [r3, #0]
 801861e:	d501      	bpl.n	8018624 <_printf_i+0x1c0>
 8018620:	6019      	str	r1, [r3, #0]
 8018622:	e002      	b.n	801862a <_printf_i+0x1c6>
 8018624:	0668      	lsls	r0, r5, #25
 8018626:	d5fb      	bpl.n	8018620 <_printf_i+0x1bc>
 8018628:	8019      	strh	r1, [r3, #0]
 801862a:	2300      	movs	r3, #0
 801862c:	6123      	str	r3, [r4, #16]
 801862e:	4616      	mov	r6, r2
 8018630:	e7bc      	b.n	80185ac <_printf_i+0x148>
 8018632:	6833      	ldr	r3, [r6, #0]
 8018634:	1d1a      	adds	r2, r3, #4
 8018636:	6032      	str	r2, [r6, #0]
 8018638:	681e      	ldr	r6, [r3, #0]
 801863a:	6862      	ldr	r2, [r4, #4]
 801863c:	2100      	movs	r1, #0
 801863e:	4630      	mov	r0, r6
 8018640:	f7e7 fe66 	bl	8000310 <memchr>
 8018644:	b108      	cbz	r0, 801864a <_printf_i+0x1e6>
 8018646:	1b80      	subs	r0, r0, r6
 8018648:	6060      	str	r0, [r4, #4]
 801864a:	6863      	ldr	r3, [r4, #4]
 801864c:	6123      	str	r3, [r4, #16]
 801864e:	2300      	movs	r3, #0
 8018650:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018654:	e7aa      	b.n	80185ac <_printf_i+0x148>
 8018656:	6923      	ldr	r3, [r4, #16]
 8018658:	4632      	mov	r2, r6
 801865a:	4649      	mov	r1, r9
 801865c:	4640      	mov	r0, r8
 801865e:	47d0      	blx	sl
 8018660:	3001      	adds	r0, #1
 8018662:	d0ad      	beq.n	80185c0 <_printf_i+0x15c>
 8018664:	6823      	ldr	r3, [r4, #0]
 8018666:	079b      	lsls	r3, r3, #30
 8018668:	d413      	bmi.n	8018692 <_printf_i+0x22e>
 801866a:	68e0      	ldr	r0, [r4, #12]
 801866c:	9b03      	ldr	r3, [sp, #12]
 801866e:	4298      	cmp	r0, r3
 8018670:	bfb8      	it	lt
 8018672:	4618      	movlt	r0, r3
 8018674:	e7a6      	b.n	80185c4 <_printf_i+0x160>
 8018676:	2301      	movs	r3, #1
 8018678:	4632      	mov	r2, r6
 801867a:	4649      	mov	r1, r9
 801867c:	4640      	mov	r0, r8
 801867e:	47d0      	blx	sl
 8018680:	3001      	adds	r0, #1
 8018682:	d09d      	beq.n	80185c0 <_printf_i+0x15c>
 8018684:	3501      	adds	r5, #1
 8018686:	68e3      	ldr	r3, [r4, #12]
 8018688:	9903      	ldr	r1, [sp, #12]
 801868a:	1a5b      	subs	r3, r3, r1
 801868c:	42ab      	cmp	r3, r5
 801868e:	dcf2      	bgt.n	8018676 <_printf_i+0x212>
 8018690:	e7eb      	b.n	801866a <_printf_i+0x206>
 8018692:	2500      	movs	r5, #0
 8018694:	f104 0619 	add.w	r6, r4, #25
 8018698:	e7f5      	b.n	8018686 <_printf_i+0x222>
 801869a:	bf00      	nop
 801869c:	080194cd 	.word	0x080194cd
 80186a0:	080194de 	.word	0x080194de

080186a4 <__swbuf_r>:
 80186a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186a6:	460e      	mov	r6, r1
 80186a8:	4614      	mov	r4, r2
 80186aa:	4605      	mov	r5, r0
 80186ac:	b118      	cbz	r0, 80186b6 <__swbuf_r+0x12>
 80186ae:	6a03      	ldr	r3, [r0, #32]
 80186b0:	b90b      	cbnz	r3, 80186b6 <__swbuf_r+0x12>
 80186b2:	f7fe f9ef 	bl	8016a94 <__sinit>
 80186b6:	69a3      	ldr	r3, [r4, #24]
 80186b8:	60a3      	str	r3, [r4, #8]
 80186ba:	89a3      	ldrh	r3, [r4, #12]
 80186bc:	071a      	lsls	r2, r3, #28
 80186be:	d501      	bpl.n	80186c4 <__swbuf_r+0x20>
 80186c0:	6923      	ldr	r3, [r4, #16]
 80186c2:	b943      	cbnz	r3, 80186d6 <__swbuf_r+0x32>
 80186c4:	4621      	mov	r1, r4
 80186c6:	4628      	mov	r0, r5
 80186c8:	f000 f82a 	bl	8018720 <__swsetup_r>
 80186cc:	b118      	cbz	r0, 80186d6 <__swbuf_r+0x32>
 80186ce:	f04f 37ff 	mov.w	r7, #4294967295
 80186d2:	4638      	mov	r0, r7
 80186d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80186d6:	6823      	ldr	r3, [r4, #0]
 80186d8:	6922      	ldr	r2, [r4, #16]
 80186da:	1a98      	subs	r0, r3, r2
 80186dc:	6963      	ldr	r3, [r4, #20]
 80186de:	b2f6      	uxtb	r6, r6
 80186e0:	4283      	cmp	r3, r0
 80186e2:	4637      	mov	r7, r6
 80186e4:	dc05      	bgt.n	80186f2 <__swbuf_r+0x4e>
 80186e6:	4621      	mov	r1, r4
 80186e8:	4628      	mov	r0, r5
 80186ea:	f7ff fc81 	bl	8017ff0 <_fflush_r>
 80186ee:	2800      	cmp	r0, #0
 80186f0:	d1ed      	bne.n	80186ce <__swbuf_r+0x2a>
 80186f2:	68a3      	ldr	r3, [r4, #8]
 80186f4:	3b01      	subs	r3, #1
 80186f6:	60a3      	str	r3, [r4, #8]
 80186f8:	6823      	ldr	r3, [r4, #0]
 80186fa:	1c5a      	adds	r2, r3, #1
 80186fc:	6022      	str	r2, [r4, #0]
 80186fe:	701e      	strb	r6, [r3, #0]
 8018700:	6962      	ldr	r2, [r4, #20]
 8018702:	1c43      	adds	r3, r0, #1
 8018704:	429a      	cmp	r2, r3
 8018706:	d004      	beq.n	8018712 <__swbuf_r+0x6e>
 8018708:	89a3      	ldrh	r3, [r4, #12]
 801870a:	07db      	lsls	r3, r3, #31
 801870c:	d5e1      	bpl.n	80186d2 <__swbuf_r+0x2e>
 801870e:	2e0a      	cmp	r6, #10
 8018710:	d1df      	bne.n	80186d2 <__swbuf_r+0x2e>
 8018712:	4621      	mov	r1, r4
 8018714:	4628      	mov	r0, r5
 8018716:	f7ff fc6b 	bl	8017ff0 <_fflush_r>
 801871a:	2800      	cmp	r0, #0
 801871c:	d0d9      	beq.n	80186d2 <__swbuf_r+0x2e>
 801871e:	e7d6      	b.n	80186ce <__swbuf_r+0x2a>

08018720 <__swsetup_r>:
 8018720:	b538      	push	{r3, r4, r5, lr}
 8018722:	4b29      	ldr	r3, [pc, #164]	@ (80187c8 <__swsetup_r+0xa8>)
 8018724:	4605      	mov	r5, r0
 8018726:	6818      	ldr	r0, [r3, #0]
 8018728:	460c      	mov	r4, r1
 801872a:	b118      	cbz	r0, 8018734 <__swsetup_r+0x14>
 801872c:	6a03      	ldr	r3, [r0, #32]
 801872e:	b90b      	cbnz	r3, 8018734 <__swsetup_r+0x14>
 8018730:	f7fe f9b0 	bl	8016a94 <__sinit>
 8018734:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018738:	0719      	lsls	r1, r3, #28
 801873a:	d422      	bmi.n	8018782 <__swsetup_r+0x62>
 801873c:	06da      	lsls	r2, r3, #27
 801873e:	d407      	bmi.n	8018750 <__swsetup_r+0x30>
 8018740:	2209      	movs	r2, #9
 8018742:	602a      	str	r2, [r5, #0]
 8018744:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018748:	81a3      	strh	r3, [r4, #12]
 801874a:	f04f 30ff 	mov.w	r0, #4294967295
 801874e:	e033      	b.n	80187b8 <__swsetup_r+0x98>
 8018750:	0758      	lsls	r0, r3, #29
 8018752:	d512      	bpl.n	801877a <__swsetup_r+0x5a>
 8018754:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018756:	b141      	cbz	r1, 801876a <__swsetup_r+0x4a>
 8018758:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801875c:	4299      	cmp	r1, r3
 801875e:	d002      	beq.n	8018766 <__swsetup_r+0x46>
 8018760:	4628      	mov	r0, r5
 8018762:	f7fe fac1 	bl	8016ce8 <_free_r>
 8018766:	2300      	movs	r3, #0
 8018768:	6363      	str	r3, [r4, #52]	@ 0x34
 801876a:	89a3      	ldrh	r3, [r4, #12]
 801876c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018770:	81a3      	strh	r3, [r4, #12]
 8018772:	2300      	movs	r3, #0
 8018774:	6063      	str	r3, [r4, #4]
 8018776:	6923      	ldr	r3, [r4, #16]
 8018778:	6023      	str	r3, [r4, #0]
 801877a:	89a3      	ldrh	r3, [r4, #12]
 801877c:	f043 0308 	orr.w	r3, r3, #8
 8018780:	81a3      	strh	r3, [r4, #12]
 8018782:	6923      	ldr	r3, [r4, #16]
 8018784:	b94b      	cbnz	r3, 801879a <__swsetup_r+0x7a>
 8018786:	89a3      	ldrh	r3, [r4, #12]
 8018788:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801878c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018790:	d003      	beq.n	801879a <__swsetup_r+0x7a>
 8018792:	4621      	mov	r1, r4
 8018794:	4628      	mov	r0, r5
 8018796:	f000 f883 	bl	80188a0 <__smakebuf_r>
 801879a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801879e:	f013 0201 	ands.w	r2, r3, #1
 80187a2:	d00a      	beq.n	80187ba <__swsetup_r+0x9a>
 80187a4:	2200      	movs	r2, #0
 80187a6:	60a2      	str	r2, [r4, #8]
 80187a8:	6962      	ldr	r2, [r4, #20]
 80187aa:	4252      	negs	r2, r2
 80187ac:	61a2      	str	r2, [r4, #24]
 80187ae:	6922      	ldr	r2, [r4, #16]
 80187b0:	b942      	cbnz	r2, 80187c4 <__swsetup_r+0xa4>
 80187b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80187b6:	d1c5      	bne.n	8018744 <__swsetup_r+0x24>
 80187b8:	bd38      	pop	{r3, r4, r5, pc}
 80187ba:	0799      	lsls	r1, r3, #30
 80187bc:	bf58      	it	pl
 80187be:	6962      	ldrpl	r2, [r4, #20]
 80187c0:	60a2      	str	r2, [r4, #8]
 80187c2:	e7f4      	b.n	80187ae <__swsetup_r+0x8e>
 80187c4:	2000      	movs	r0, #0
 80187c6:	e7f7      	b.n	80187b8 <__swsetup_r+0x98>
 80187c8:	24000260 	.word	0x24000260

080187cc <_raise_r>:
 80187cc:	291f      	cmp	r1, #31
 80187ce:	b538      	push	{r3, r4, r5, lr}
 80187d0:	4605      	mov	r5, r0
 80187d2:	460c      	mov	r4, r1
 80187d4:	d904      	bls.n	80187e0 <_raise_r+0x14>
 80187d6:	2316      	movs	r3, #22
 80187d8:	6003      	str	r3, [r0, #0]
 80187da:	f04f 30ff 	mov.w	r0, #4294967295
 80187de:	bd38      	pop	{r3, r4, r5, pc}
 80187e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80187e2:	b112      	cbz	r2, 80187ea <_raise_r+0x1e>
 80187e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80187e8:	b94b      	cbnz	r3, 80187fe <_raise_r+0x32>
 80187ea:	4628      	mov	r0, r5
 80187ec:	f000 f830 	bl	8018850 <_getpid_r>
 80187f0:	4622      	mov	r2, r4
 80187f2:	4601      	mov	r1, r0
 80187f4:	4628      	mov	r0, r5
 80187f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80187fa:	f000 b817 	b.w	801882c <_kill_r>
 80187fe:	2b01      	cmp	r3, #1
 8018800:	d00a      	beq.n	8018818 <_raise_r+0x4c>
 8018802:	1c59      	adds	r1, r3, #1
 8018804:	d103      	bne.n	801880e <_raise_r+0x42>
 8018806:	2316      	movs	r3, #22
 8018808:	6003      	str	r3, [r0, #0]
 801880a:	2001      	movs	r0, #1
 801880c:	e7e7      	b.n	80187de <_raise_r+0x12>
 801880e:	2100      	movs	r1, #0
 8018810:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018814:	4620      	mov	r0, r4
 8018816:	4798      	blx	r3
 8018818:	2000      	movs	r0, #0
 801881a:	e7e0      	b.n	80187de <_raise_r+0x12>

0801881c <raise>:
 801881c:	4b02      	ldr	r3, [pc, #8]	@ (8018828 <raise+0xc>)
 801881e:	4601      	mov	r1, r0
 8018820:	6818      	ldr	r0, [r3, #0]
 8018822:	f7ff bfd3 	b.w	80187cc <_raise_r>
 8018826:	bf00      	nop
 8018828:	24000260 	.word	0x24000260

0801882c <_kill_r>:
 801882c:	b538      	push	{r3, r4, r5, lr}
 801882e:	4d07      	ldr	r5, [pc, #28]	@ (801884c <_kill_r+0x20>)
 8018830:	2300      	movs	r3, #0
 8018832:	4604      	mov	r4, r0
 8018834:	4608      	mov	r0, r1
 8018836:	4611      	mov	r1, r2
 8018838:	602b      	str	r3, [r5, #0]
 801883a:	f7eb fea1 	bl	8004580 <_kill>
 801883e:	1c43      	adds	r3, r0, #1
 8018840:	d102      	bne.n	8018848 <_kill_r+0x1c>
 8018842:	682b      	ldr	r3, [r5, #0]
 8018844:	b103      	cbz	r3, 8018848 <_kill_r+0x1c>
 8018846:	6023      	str	r3, [r4, #0]
 8018848:	bd38      	pop	{r3, r4, r5, pc}
 801884a:	bf00      	nop
 801884c:	24005810 	.word	0x24005810

08018850 <_getpid_r>:
 8018850:	f7eb be8e 	b.w	8004570 <_getpid>

08018854 <__swhatbuf_r>:
 8018854:	b570      	push	{r4, r5, r6, lr}
 8018856:	460c      	mov	r4, r1
 8018858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801885c:	2900      	cmp	r1, #0
 801885e:	b096      	sub	sp, #88	@ 0x58
 8018860:	4615      	mov	r5, r2
 8018862:	461e      	mov	r6, r3
 8018864:	da0d      	bge.n	8018882 <__swhatbuf_r+0x2e>
 8018866:	89a3      	ldrh	r3, [r4, #12]
 8018868:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801886c:	f04f 0100 	mov.w	r1, #0
 8018870:	bf14      	ite	ne
 8018872:	2340      	movne	r3, #64	@ 0x40
 8018874:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018878:	2000      	movs	r0, #0
 801887a:	6031      	str	r1, [r6, #0]
 801887c:	602b      	str	r3, [r5, #0]
 801887e:	b016      	add	sp, #88	@ 0x58
 8018880:	bd70      	pop	{r4, r5, r6, pc}
 8018882:	466a      	mov	r2, sp
 8018884:	f000 f848 	bl	8018918 <_fstat_r>
 8018888:	2800      	cmp	r0, #0
 801888a:	dbec      	blt.n	8018866 <__swhatbuf_r+0x12>
 801888c:	9901      	ldr	r1, [sp, #4]
 801888e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018892:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018896:	4259      	negs	r1, r3
 8018898:	4159      	adcs	r1, r3
 801889a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801889e:	e7eb      	b.n	8018878 <__swhatbuf_r+0x24>

080188a0 <__smakebuf_r>:
 80188a0:	898b      	ldrh	r3, [r1, #12]
 80188a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80188a4:	079d      	lsls	r5, r3, #30
 80188a6:	4606      	mov	r6, r0
 80188a8:	460c      	mov	r4, r1
 80188aa:	d507      	bpl.n	80188bc <__smakebuf_r+0x1c>
 80188ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80188b0:	6023      	str	r3, [r4, #0]
 80188b2:	6123      	str	r3, [r4, #16]
 80188b4:	2301      	movs	r3, #1
 80188b6:	6163      	str	r3, [r4, #20]
 80188b8:	b003      	add	sp, #12
 80188ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80188bc:	ab01      	add	r3, sp, #4
 80188be:	466a      	mov	r2, sp
 80188c0:	f7ff ffc8 	bl	8018854 <__swhatbuf_r>
 80188c4:	9f00      	ldr	r7, [sp, #0]
 80188c6:	4605      	mov	r5, r0
 80188c8:	4639      	mov	r1, r7
 80188ca:	4630      	mov	r0, r6
 80188cc:	f7fe fdb2 	bl	8017434 <_malloc_r>
 80188d0:	b948      	cbnz	r0, 80188e6 <__smakebuf_r+0x46>
 80188d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80188d6:	059a      	lsls	r2, r3, #22
 80188d8:	d4ee      	bmi.n	80188b8 <__smakebuf_r+0x18>
 80188da:	f023 0303 	bic.w	r3, r3, #3
 80188de:	f043 0302 	orr.w	r3, r3, #2
 80188e2:	81a3      	strh	r3, [r4, #12]
 80188e4:	e7e2      	b.n	80188ac <__smakebuf_r+0xc>
 80188e6:	89a3      	ldrh	r3, [r4, #12]
 80188e8:	6020      	str	r0, [r4, #0]
 80188ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80188ee:	81a3      	strh	r3, [r4, #12]
 80188f0:	9b01      	ldr	r3, [sp, #4]
 80188f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80188f6:	b15b      	cbz	r3, 8018910 <__smakebuf_r+0x70>
 80188f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80188fc:	4630      	mov	r0, r6
 80188fe:	f000 f81d 	bl	801893c <_isatty_r>
 8018902:	b128      	cbz	r0, 8018910 <__smakebuf_r+0x70>
 8018904:	89a3      	ldrh	r3, [r4, #12]
 8018906:	f023 0303 	bic.w	r3, r3, #3
 801890a:	f043 0301 	orr.w	r3, r3, #1
 801890e:	81a3      	strh	r3, [r4, #12]
 8018910:	89a3      	ldrh	r3, [r4, #12]
 8018912:	431d      	orrs	r5, r3
 8018914:	81a5      	strh	r5, [r4, #12]
 8018916:	e7cf      	b.n	80188b8 <__smakebuf_r+0x18>

08018918 <_fstat_r>:
 8018918:	b538      	push	{r3, r4, r5, lr}
 801891a:	4d07      	ldr	r5, [pc, #28]	@ (8018938 <_fstat_r+0x20>)
 801891c:	2300      	movs	r3, #0
 801891e:	4604      	mov	r4, r0
 8018920:	4608      	mov	r0, r1
 8018922:	4611      	mov	r1, r2
 8018924:	602b      	str	r3, [r5, #0]
 8018926:	f7eb fe8b 	bl	8004640 <_fstat>
 801892a:	1c43      	adds	r3, r0, #1
 801892c:	d102      	bne.n	8018934 <_fstat_r+0x1c>
 801892e:	682b      	ldr	r3, [r5, #0]
 8018930:	b103      	cbz	r3, 8018934 <_fstat_r+0x1c>
 8018932:	6023      	str	r3, [r4, #0]
 8018934:	bd38      	pop	{r3, r4, r5, pc}
 8018936:	bf00      	nop
 8018938:	24005810 	.word	0x24005810

0801893c <_isatty_r>:
 801893c:	b538      	push	{r3, r4, r5, lr}
 801893e:	4d06      	ldr	r5, [pc, #24]	@ (8018958 <_isatty_r+0x1c>)
 8018940:	2300      	movs	r3, #0
 8018942:	4604      	mov	r4, r0
 8018944:	4608      	mov	r0, r1
 8018946:	602b      	str	r3, [r5, #0]
 8018948:	f7eb fe8a 	bl	8004660 <_isatty>
 801894c:	1c43      	adds	r3, r0, #1
 801894e:	d102      	bne.n	8018956 <_isatty_r+0x1a>
 8018950:	682b      	ldr	r3, [r5, #0]
 8018952:	b103      	cbz	r3, 8018956 <_isatty_r+0x1a>
 8018954:	6023      	str	r3, [r4, #0]
 8018956:	bd38      	pop	{r3, r4, r5, pc}
 8018958:	24005810 	.word	0x24005810
 801895c:	00000000 	.word	0x00000000

08018960 <log>:
 8018960:	b4f0      	push	{r4, r5, r6, r7}
 8018962:	ee10 0a90 	vmov	r0, s1
 8018966:	ee10 3a10 	vmov	r3, s0
 801896a:	f04f 34ff 	mov.w	r4, #4294967295
 801896e:	429c      	cmp	r4, r3
 8018970:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 8018974:	4c70      	ldr	r4, [pc, #448]	@ (8018b38 <log+0x1d8>)
 8018976:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 801897a:	418c      	sbcs	r4, r1
 801897c:	ed2d 8b02 	vpush	{d8}
 8018980:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8018984:	d35a      	bcc.n	8018a3c <log+0xdc>
 8018986:	4a6d      	ldr	r2, [pc, #436]	@ (8018b3c <log+0x1dc>)
 8018988:	4290      	cmp	r0, r2
 801898a:	bf08      	it	eq
 801898c:	2b00      	cmpeq	r3, #0
 801898e:	f000 80c4 	beq.w	8018b1a <log+0x1ba>
 8018992:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8018996:	ee30 0b47 	vsub.f64	d0, d0, d7
 801899a:	4b69      	ldr	r3, [pc, #420]	@ (8018b40 <log+0x1e0>)
 801899c:	ee20 2b00 	vmul.f64	d2, d0, d0
 80189a0:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 80189a4:	ee20 4b02 	vmul.f64	d4, d0, d2
 80189a8:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 80189ac:	eea6 7b00 	vfma.f64	d7, d6, d0
 80189b0:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 80189b4:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 80189b8:	eea6 7b02 	vfma.f64	d7, d6, d2
 80189bc:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 80189c0:	eea5 6b00 	vfma.f64	d6, d5, d0
 80189c4:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 80189c8:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 80189cc:	eea5 6b02 	vfma.f64	d6, d5, d2
 80189d0:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 80189d4:	eea3 5b00 	vfma.f64	d5, d3, d0
 80189d8:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 80189dc:	eea3 5b02 	vfma.f64	d5, d3, d2
 80189e0:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 80189e4:	eea3 5b04 	vfma.f64	d5, d3, d4
 80189e8:	eea5 6b04 	vfma.f64	d6, d5, d4
 80189ec:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 80189f0:	eea6 7b04 	vfma.f64	d7, d6, d4
 80189f4:	eeb0 2b47 	vmov.f64	d2, d7
 80189f8:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8018b20 <log+0x1c0>
 80189fc:	eeb0 6b40 	vmov.f64	d6, d0
 8018a00:	eeb0 3b40 	vmov.f64	d3, d0
 8018a04:	eea0 6b07 	vfma.f64	d6, d0, d7
 8018a08:	eea0 6b47 	vfms.f64	d6, d0, d7
 8018a0c:	ee30 8b46 	vsub.f64	d8, d0, d6
 8018a10:	ee26 1b06 	vmul.f64	d1, d6, d6
 8018a14:	eea1 3b05 	vfma.f64	d3, d1, d5
 8018a18:	ee30 7b43 	vsub.f64	d7, d0, d3
 8018a1c:	ee30 0b06 	vadd.f64	d0, d0, d6
 8018a20:	eea1 7b05 	vfma.f64	d7, d1, d5
 8018a24:	ee25 5b08 	vmul.f64	d5, d5, d8
 8018a28:	eea5 7b00 	vfma.f64	d7, d5, d0
 8018a2c:	eea2 7b04 	vfma.f64	d7, d2, d4
 8018a30:	ee33 0b07 	vadd.f64	d0, d3, d7
 8018a34:	ecbd 8b02 	vpop	{d8}
 8018a38:	bcf0      	pop	{r4, r5, r6, r7}
 8018a3a:	4770      	bx	lr
 8018a3c:	f1a2 0410 	sub.w	r4, r2, #16
 8018a40:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 8018a44:	428c      	cmp	r4, r1
 8018a46:	d923      	bls.n	8018a90 <log+0x130>
 8018a48:	18d9      	adds	r1, r3, r3
 8018a4a:	eb40 0400 	adc.w	r4, r0, r0
 8018a4e:	4321      	orrs	r1, r4
 8018a50:	d105      	bne.n	8018a5e <log+0xfe>
 8018a52:	ecbd 8b02 	vpop	{d8}
 8018a56:	2001      	movs	r0, #1
 8018a58:	bcf0      	pop	{r4, r5, r6, r7}
 8018a5a:	f000 b885 	b.w	8018b68 <__math_divzero>
 8018a5e:	4939      	ldr	r1, [pc, #228]	@ (8018b44 <log+0x1e4>)
 8018a60:	4288      	cmp	r0, r1
 8018a62:	bf08      	it	eq
 8018a64:	2b00      	cmpeq	r3, #0
 8018a66:	d0e5      	beq.n	8018a34 <log+0xd4>
 8018a68:	0413      	lsls	r3, r2, #16
 8018a6a:	d403      	bmi.n	8018a74 <log+0x114>
 8018a6c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8018a70:	4393      	bics	r3, r2
 8018a72:	d104      	bne.n	8018a7e <log+0x11e>
 8018a74:	ecbd 8b02 	vpop	{d8}
 8018a78:	bcf0      	pop	{r4, r5, r6, r7}
 8018a7a:	f000 b88d 	b.w	8018b98 <__math_invalid>
 8018a7e:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8018b28 <log+0x1c8>
 8018a82:	ee20 7b07 	vmul.f64	d7, d0, d7
 8018a86:	ec53 2b17 	vmov	r2, r3, d7
 8018a8a:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 8018a8e:	4613      	mov	r3, r2
 8018a90:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 8018a94:	492a      	ldr	r1, [pc, #168]	@ (8018b40 <log+0x1e0>)
 8018a96:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 8018a9a:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 8018a9e:	f3c2 3446 	ubfx	r4, r2, #13, #7
 8018aa2:	0d15      	lsrs	r5, r2, #20
 8018aa4:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 8018aa8:	052d      	lsls	r5, r5, #20
 8018aaa:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 8018aae:	1e1e      	subs	r6, r3, #0
 8018ab0:	1b47      	subs	r7, r0, r5
 8018ab2:	ec47 6b16 	vmov	d6, r6, r7
 8018ab6:	1512      	asrs	r2, r2, #20
 8018ab8:	eea7 5b06 	vfma.f64	d5, d7, d6
 8018abc:	ee07 2a90 	vmov	s15, r2
 8018ac0:	ee25 2b05 	vmul.f64	d2, d5, d5
 8018ac4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8018ac8:	ed91 4b00 	vldr	d4, [r1]
 8018acc:	ee25 1b02 	vmul.f64	d1, d5, d2
 8018ad0:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 8018ad4:	eea4 7b06 	vfma.f64	d7, d4, d6
 8018ad8:	ee35 4b07 	vadd.f64	d4, d5, d7
 8018adc:	ee37 0b44 	vsub.f64	d0, d7, d4
 8018ae0:	ed91 7b02 	vldr	d7, [r1, #8]
 8018ae4:	ee30 0b05 	vadd.f64	d0, d0, d5
 8018ae8:	eea7 0b06 	vfma.f64	d0, d7, d6
 8018aec:	ed91 7b04 	vldr	d7, [r1, #16]
 8018af0:	ed91 6b08 	vldr	d6, [r1, #32]
 8018af4:	eea7 0b02 	vfma.f64	d0, d7, d2
 8018af8:	ed91 7b06 	vldr	d7, [r1, #24]
 8018afc:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 8018b00:	eea6 7b05 	vfma.f64	d7, d6, d5
 8018b04:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8018b08:	eea3 6b05 	vfma.f64	d6, d3, d5
 8018b0c:	eea6 7b02 	vfma.f64	d7, d6, d2
 8018b10:	eea1 0b07 	vfma.f64	d0, d1, d7
 8018b14:	ee30 0b04 	vadd.f64	d0, d0, d4
 8018b18:	e78c      	b.n	8018a34 <log+0xd4>
 8018b1a:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8018b30 <log+0x1d0>
 8018b1e:	e789      	b.n	8018a34 <log+0xd4>
 8018b20:	00000000 	.word	0x00000000
 8018b24:	41a00000 	.word	0x41a00000
 8018b28:	00000000 	.word	0x00000000
 8018b2c:	43300000 	.word	0x43300000
	...
 8018b38:	000308ff 	.word	0x000308ff
 8018b3c:	3ff00000 	.word	0x3ff00000
 8018b40:	080194f0 	.word	0x080194f0
 8018b44:	7ff00000 	.word	0x7ff00000

08018b48 <with_errno>:
 8018b48:	b510      	push	{r4, lr}
 8018b4a:	ed2d 8b02 	vpush	{d8}
 8018b4e:	eeb0 8b40 	vmov.f64	d8, d0
 8018b52:	4604      	mov	r4, r0
 8018b54:	f7fe f884 	bl	8016c60 <__errno>
 8018b58:	eeb0 0b48 	vmov.f64	d0, d8
 8018b5c:	ecbd 8b02 	vpop	{d8}
 8018b60:	6004      	str	r4, [r0, #0]
 8018b62:	bd10      	pop	{r4, pc}
 8018b64:	0000      	movs	r0, r0
	...

08018b68 <__math_divzero>:
 8018b68:	b082      	sub	sp, #8
 8018b6a:	2800      	cmp	r0, #0
 8018b6c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8018b70:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8018b74:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8018b78:	ed8d 7b00 	vstr	d7, [sp]
 8018b7c:	ed9d 0b00 	vldr	d0, [sp]
 8018b80:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8018b90 <__math_divzero+0x28>
 8018b84:	2022      	movs	r0, #34	@ 0x22
 8018b86:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8018b8a:	b002      	add	sp, #8
 8018b8c:	f7ff bfdc 	b.w	8018b48 <with_errno>
	...

08018b98 <__math_invalid>:
 8018b98:	eeb0 7b40 	vmov.f64	d7, d0
 8018b9c:	eeb4 7b47 	vcmp.f64	d7, d7
 8018ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ba4:	ee30 6b40 	vsub.f64	d6, d0, d0
 8018ba8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8018bac:	d602      	bvs.n	8018bb4 <__math_invalid+0x1c>
 8018bae:	2021      	movs	r0, #33	@ 0x21
 8018bb0:	f7ff bfca 	b.w	8018b48 <with_errno>
 8018bb4:	4770      	bx	lr
	...

08018bb8 <_init>:
 8018bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018bba:	bf00      	nop
 8018bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018bbe:	bc08      	pop	{r3}
 8018bc0:	469e      	mov	lr, r3
 8018bc2:	4770      	bx	lr

08018bc4 <_fini>:
 8018bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018bc6:	bf00      	nop
 8018bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018bca:	bc08      	pop	{r3}
 8018bcc:	469e      	mov	lr, r3
 8018bce:	4770      	bx	lr
