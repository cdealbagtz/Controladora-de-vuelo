
Controladora-de-vuelo-V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014188  080002b0  080002b0  000012b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc8  08014438  08014438  00015438  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015200  08015200  00016200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015208  08015208  00016208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801520c  0801520c  0001620c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000011c  24000000  08015210  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002d34  24000120  0801532c  00017120  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24002e54  0801532c  00017e54  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001711c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00029bc6  00000000  00000000  0001714a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005519  00000000  00000000  00040d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001fd8  00000000  00000000  00046230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000018c7  00000000  00000000  00048208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037f4f  00000000  00000000  00049acf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00031fc5  00000000  00000000  00081a1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00155779  00000000  00000000  000b39e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020915c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000088bc  00000000  00000000  002091a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  00211a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000120 	.word	0x24000120
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08014420 	.word	0x08014420

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000124 	.word	0x24000124
 80002ec:	08014420 	.word	0x08014420

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295
 800030e:	f000 b9b5 	b.w	800067c <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	460a      	mov	r2, r1
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	4613      	mov	r3, r2
 800068e:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 8000690:	2200      	movs	r2, #0
 8000692:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000696:	480f      	ldr	r0, [pc, #60]	@ (80006d4 <BMP280_write+0x54>)
 8000698:	f007 fc06 	bl	8007ea8 <HAL_GPIO_WritePin>
	Address &= 0x7F;
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80006a6:	1df9      	adds	r1, r7, #7
 80006a8:	2364      	movs	r3, #100	@ 0x64
 80006aa:	2201      	movs	r2, #1
 80006ac:	480a      	ldr	r0, [pc, #40]	@ (80006d8 <BMP280_write+0x58>)
 80006ae:	f00a fc45 	bl	800af3c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 80006b2:	1db9      	adds	r1, r7, #6
 80006b4:	2364      	movs	r3, #100	@ 0x64
 80006b6:	2201      	movs	r2, #1
 80006b8:	4807      	ldr	r0, [pc, #28]	@ (80006d8 <BMP280_write+0x58>)
 80006ba:	f00a fc3f 	bl	800af3c <HAL_SPI_Transmit>

	BMP280_unselect();
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006c4:	4803      	ldr	r0, [pc, #12]	@ (80006d4 <BMP280_write+0x54>)
 80006c6:	f007 fbef 	bl	8007ea8 <HAL_GPIO_WritePin>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	58020400 	.word	0x58020400
 80006d8:	24002544 	.word	0x24002544

080006dc <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006f6:	480e      	ldr	r0, [pc, #56]	@ (8000730 <BMP280_read+0x54>)
 80006f8:	f007 fbd6 	bl	8007ea8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 80006fc:	f107 010f 	add.w	r1, r7, #15
 8000700:	2364      	movs	r3, #100	@ 0x64
 8000702:	2201      	movs	r2, #1
 8000704:	480b      	ldr	r0, [pc, #44]	@ (8000734 <BMP280_read+0x58>)
 8000706:	f00a fc19 	bl	800af3c <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 800070a:	f107 010f 	add.w	r1, r7, #15
 800070e:	2364      	movs	r3, #100	@ 0x64
 8000710:	2201      	movs	r2, #1
 8000712:	4808      	ldr	r0, [pc, #32]	@ (8000734 <BMP280_read+0x58>)
 8000714:	f00a fe00 	bl	800b318 <HAL_SPI_Receive>
	BMP280_unselect();
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800071e:	4804      	ldr	r0, [pc, #16]	@ (8000730 <BMP280_read+0x54>)
 8000720:	f007 fbc2 	bl	8007ea8 <HAL_GPIO_WritePin>

	return Buffer;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	58020400 	.word	0x58020400
 8000734:	24002544 	.word	0x24002544

08000738 <BMP280_config>:

void BMP280_config(void){
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 800073c:	2157      	movs	r1, #87	@ 0x57
 800073e:	20f4      	movs	r0, #244	@ 0xf4
 8000740:	f7ff ff9e 	bl	8000680 <BMP280_write>
	BMP280_write(config, 0x10);
 8000744:	2110      	movs	r1, #16
 8000746:	20f5      	movs	r0, #245	@ 0xf5
 8000748:	f7ff ff9a 	bl	8000680 <BMP280_write>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 8000756:	2388      	movs	r3, #136	@ 0x88
 8000758:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
	BMP280_select();
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000774:	4843      	ldr	r0, [pc, #268]	@ (8000884 <BMP280_calibrationData+0x134>)
 8000776:	f007 fb97 	bl	8007ea8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 800077a:	f107 011f 	add.w	r1, r7, #31
 800077e:	2364      	movs	r3, #100	@ 0x64
 8000780:	2201      	movs	r2, #1
 8000782:	4841      	ldr	r0, [pc, #260]	@ (8000888 <BMP280_calibrationData+0x138>)
 8000784:	f00a fbda 	bl	800af3c <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 8000788:	1d39      	adds	r1, r7, #4
 800078a:	2364      	movs	r3, #100	@ 0x64
 800078c:	2218      	movs	r2, #24
 800078e:	483e      	ldr	r0, [pc, #248]	@ (8000888 <BMP280_calibrationData+0x138>)
 8000790:	f00a fdc2 	bl	800b318 <HAL_SPI_Receive>
	BMP280_unselect();
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800079a:	483a      	ldr	r0, [pc, #232]	@ (8000884 <BMP280_calibrationData+0x134>)
 800079c:	f007 fb84 	bl	8007ea8 <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 80007a0:	797b      	ldrb	r3, [r7, #5]
 80007a2:	021b      	lsls	r3, r3, #8
 80007a4:	b21a      	sxth	r2, r3
 80007a6:	793b      	ldrb	r3, [r7, #4]
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b21b      	sxth	r3, r3
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	4b36      	ldr	r3, [pc, #216]	@ (800088c <BMP280_calibrationData+0x13c>)
 80007b2:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	021b      	lsls	r3, r3, #8
 80007b8:	b21a      	sxth	r2, r3
 80007ba:	79bb      	ldrb	r3, [r7, #6]
 80007bc:	b21b      	sxth	r3, r3
 80007be:	4313      	orrs	r3, r2
 80007c0:	b21a      	sxth	r2, r3
 80007c2:	4b33      	ldr	r3, [pc, #204]	@ (8000890 <BMP280_calibrationData+0x140>)
 80007c4:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 80007c6:	7a7b      	ldrb	r3, [r7, #9]
 80007c8:	021b      	lsls	r3, r3, #8
 80007ca:	b21a      	sxth	r2, r3
 80007cc:	7a3b      	ldrb	r3, [r7, #8]
 80007ce:	b21b      	sxth	r3, r3
 80007d0:	4313      	orrs	r3, r2
 80007d2:	b21a      	sxth	r2, r3
 80007d4:	4b2f      	ldr	r3, [pc, #188]	@ (8000894 <BMP280_calibrationData+0x144>)
 80007d6:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 80007d8:	7afb      	ldrb	r3, [r7, #11]
 80007da:	021b      	lsls	r3, r3, #8
 80007dc:	b21a      	sxth	r2, r3
 80007de:	7abb      	ldrb	r3, [r7, #10]
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000898 <BMP280_calibrationData+0x148>)
 80007ea:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 80007ec:	7b7b      	ldrb	r3, [r7, #13]
 80007ee:	021b      	lsls	r3, r3, #8
 80007f0:	b21a      	sxth	r2, r3
 80007f2:	7b3b      	ldrb	r3, [r7, #12]
 80007f4:	b21b      	sxth	r3, r3
 80007f6:	4313      	orrs	r3, r2
 80007f8:	b21a      	sxth	r2, r3
 80007fa:	4b28      	ldr	r3, [pc, #160]	@ (800089c <BMP280_calibrationData+0x14c>)
 80007fc:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	021b      	lsls	r3, r3, #8
 8000802:	b21a      	sxth	r2, r3
 8000804:	7bbb      	ldrb	r3, [r7, #14]
 8000806:	b21b      	sxth	r3, r3
 8000808:	4313      	orrs	r3, r2
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b24      	ldr	r3, [pc, #144]	@ (80008a0 <BMP280_calibrationData+0x150>)
 800080e:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8000810:	7c7b      	ldrb	r3, [r7, #17]
 8000812:	021b      	lsls	r3, r3, #8
 8000814:	b21a      	sxth	r2, r3
 8000816:	7c3b      	ldrb	r3, [r7, #16]
 8000818:	b21b      	sxth	r3, r3
 800081a:	4313      	orrs	r3, r2
 800081c:	b21a      	sxth	r2, r3
 800081e:	4b21      	ldr	r3, [pc, #132]	@ (80008a4 <BMP280_calibrationData+0x154>)
 8000820:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 8000822:	7cfb      	ldrb	r3, [r7, #19]
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	b21a      	sxth	r2, r3
 8000828:	7cbb      	ldrb	r3, [r7, #18]
 800082a:	b21b      	sxth	r3, r3
 800082c:	4313      	orrs	r3, r2
 800082e:	b21a      	sxth	r2, r3
 8000830:	4b1d      	ldr	r3, [pc, #116]	@ (80008a8 <BMP280_calibrationData+0x158>)
 8000832:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 8000834:	7d7b      	ldrb	r3, [r7, #21]
 8000836:	021b      	lsls	r3, r3, #8
 8000838:	b21a      	sxth	r2, r3
 800083a:	7d3b      	ldrb	r3, [r7, #20]
 800083c:	b21b      	sxth	r3, r3
 800083e:	4313      	orrs	r3, r2
 8000840:	b21a      	sxth	r2, r3
 8000842:	4b1a      	ldr	r3, [pc, #104]	@ (80008ac <BMP280_calibrationData+0x15c>)
 8000844:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 8000846:	7dfb      	ldrb	r3, [r7, #23]
 8000848:	021b      	lsls	r3, r3, #8
 800084a:	b21a      	sxth	r2, r3
 800084c:	7dbb      	ldrb	r3, [r7, #22]
 800084e:	b21b      	sxth	r3, r3
 8000850:	4313      	orrs	r3, r2
 8000852:	b21a      	sxth	r2, r3
 8000854:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <BMP280_calibrationData+0x160>)
 8000856:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 8000858:	7e7b      	ldrb	r3, [r7, #25]
 800085a:	021b      	lsls	r3, r3, #8
 800085c:	b21a      	sxth	r2, r3
 800085e:	7e3b      	ldrb	r3, [r7, #24]
 8000860:	b21b      	sxth	r3, r3
 8000862:	4313      	orrs	r3, r2
 8000864:	b21a      	sxth	r2, r3
 8000866:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <BMP280_calibrationData+0x164>)
 8000868:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 800086a:	7efb      	ldrb	r3, [r7, #27]
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	b21a      	sxth	r2, r3
 8000870:	7ebb      	ldrb	r3, [r7, #26]
 8000872:	b21b      	sxth	r3, r3
 8000874:	4313      	orrs	r3, r2
 8000876:	b21a      	sxth	r2, r3
 8000878:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <BMP280_calibrationData+0x168>)
 800087a:	801a      	strh	r2, [r3, #0]
}
 800087c:	bf00      	nop
 800087e:	3720      	adds	r7, #32
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	58020400 	.word	0x58020400
 8000888:	24002544 	.word	0x24002544
 800088c:	24000150 	.word	0x24000150
 8000890:	24000154 	.word	0x24000154
 8000894:	24000156 	.word	0x24000156
 8000898:	24000152 	.word	0x24000152
 800089c:	24000158 	.word	0x24000158
 80008a0:	2400015a 	.word	0x2400015a
 80008a4:	2400015c 	.word	0x2400015c
 80008a8:	2400015e 	.word	0x2400015e
 80008ac:	24000160 	.word	0x24000160
 80008b0:	24000162 	.word	0x24000162
 80008b4:	24000164 	.word	0x24000164
 80008b8:	24000166 	.word	0x24000166

080008bc <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 80008c2:	23f7      	movs	r3, #247	@ 0xf7
 80008c4:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	2300      	movs	r3, #0
 80008cc:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008d4:	4817      	ldr	r0, [pc, #92]	@ (8000934 <BMP280_readRawValues+0x78>)
 80008d6:	f007 fae7 	bl	8007ea8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80008da:	1df9      	adds	r1, r7, #7
 80008dc:	2364      	movs	r3, #100	@ 0x64
 80008de:	2201      	movs	r2, #1
 80008e0:	4815      	ldr	r0, [pc, #84]	@ (8000938 <BMP280_readRawValues+0x7c>)
 80008e2:	f00a fb2b 	bl	800af3c <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 80008e6:	4639      	mov	r1, r7
 80008e8:	2364      	movs	r3, #100	@ 0x64
 80008ea:	2206      	movs	r2, #6
 80008ec:	4812      	ldr	r0, [pc, #72]	@ (8000938 <BMP280_readRawValues+0x7c>)
 80008ee:	f00a fd13 	bl	800b318 <HAL_SPI_Receive>
	BMP280_unselect();
 80008f2:	2201      	movs	r2, #1
 80008f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008f8:	480e      	ldr	r0, [pc, #56]	@ (8000934 <BMP280_readRawValues+0x78>)
 80008fa:	f007 fad5 	bl	8007ea8 <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 80008fe:	783b      	ldrb	r3, [r7, #0]
 8000900:	031a      	lsls	r2, r3, #12
 8000902:	787b      	ldrb	r3, [r7, #1]
 8000904:	011b      	lsls	r3, r3, #4
 8000906:	4313      	orrs	r3, r2
 8000908:	78ba      	ldrb	r2, [r7, #2]
 800090a:	0912      	lsrs	r2, r2, #4
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	4313      	orrs	r3, r2
 8000910:	4a0a      	ldr	r2, [pc, #40]	@ (800093c <BMP280_readRawValues+0x80>)
 8000912:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 8000914:	78fb      	ldrb	r3, [r7, #3]
 8000916:	031a      	lsls	r2, r3, #12
 8000918:	793b      	ldrb	r3, [r7, #4]
 800091a:	011b      	lsls	r3, r3, #4
 800091c:	4313      	orrs	r3, r2
 800091e:	797a      	ldrb	r2, [r7, #5]
 8000920:	0912      	lsrs	r2, r2, #4
 8000922:	b2d2      	uxtb	r2, r2
 8000924:	4313      	orrs	r3, r2
 8000926:	4a06      	ldr	r2, [pc, #24]	@ (8000940 <BMP280_readRawValues+0x84>)
 8000928:	6013      	str	r3, [r2, #0]
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	58020400 	.word	0x58020400
 8000938:	24002544 	.word	0x24002544
 800093c:	2400016c 	.word	0x2400016c
 8000940:	24000168 	.word	0x24000168

08000944 <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 8000944:	b480      	push	{r7}
 8000946:	b087      	sub	sp, #28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 800094c:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <BMP280_measureT+0x74>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	10da      	asrs	r2, r3, #3
 8000952:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <BMP280_measureT+0x78>)
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	4a19      	ldr	r2, [pc, #100]	@ (80009c0 <BMP280_measureT+0x7c>)
 800095c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	12db      	asrs	r3, r3, #11
 8000966:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	111b      	asrs	r3, r3, #4
 800096c:	4a13      	ldr	r2, [pc, #76]	@ (80009bc <BMP280_measureT+0x78>)
 800096e:	8812      	ldrh	r2, [r2, #0]
 8000970:	1a9b      	subs	r3, r3, r2
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	1112      	asrs	r2, r2, #4
 8000976:	4911      	ldr	r1, [pc, #68]	@ (80009bc <BMP280_measureT+0x78>)
 8000978:	8809      	ldrh	r1, [r1, #0]
 800097a:	1a52      	subs	r2, r2, r1
 800097c:	fb02 f303 	mul.w	r3, r2, r3
 8000980:	131b      	asrs	r3, r3, #12
 8000982:	4a10      	ldr	r2, [pc, #64]	@ (80009c4 <BMP280_measureT+0x80>)
 8000984:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000988:	fb02 f303 	mul.w	r3, r2, r3
 800098c:	139b      	asrs	r3, r3, #14
 800098e:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000990:	697a      	ldr	r2, [r7, #20]
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	4413      	add	r3, r2
 8000996:	4a0c      	ldr	r2, [pc, #48]	@ (80009c8 <BMP280_measureT+0x84>)
 8000998:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800099a:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <BMP280_measureT+0x84>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	4613      	mov	r3, r2
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	4413      	add	r3, r2
 80009a4:	3380      	adds	r3, #128	@ 0x80
 80009a6:	121b      	asrs	r3, r3, #8
 80009a8:	60fb      	str	r3, [r7, #12]
	return T;
 80009aa:	68fb      	ldr	r3, [r7, #12]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	371c      	adds	r7, #28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	24000168 	.word	0x24000168
 80009bc:	24000150 	.word	0x24000150
 80009c0:	24000154 	.word	0x24000154
 80009c4:	24000156 	.word	0x24000156
 80009c8:	24000170 	.word	0x24000170

080009cc <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 80009cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80009d0:	b0ca      	sub	sp, #296	@ 0x128
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80009d8:	4baf      	ldr	r3, [pc, #700]	@ (8000c98 <BMP280_measureP+0x2cc>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	17da      	asrs	r2, r3, #31
 80009de:	461c      	mov	r4, r3
 80009e0:	4615      	mov	r5, r2
 80009e2:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 80009e6:	f145 3bff 	adc.w	fp, r5, #4294967295
 80009ea:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80009ee:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80009f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80009f6:	fb03 f102 	mul.w	r1, r3, r2
 80009fa:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80009fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a02:	fb02 f303 	mul.w	r3, r2, r3
 8000a06:	18ca      	adds	r2, r1, r3
 8000a08:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a0c:	fba3 8903 	umull	r8, r9, r3, r3
 8000a10:	eb02 0309 	add.w	r3, r2, r9
 8000a14:	4699      	mov	r9, r3
 8000a16:	4ba1      	ldr	r3, [pc, #644]	@ (8000c9c <BMP280_measureP+0x2d0>)
 8000a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a1c:	b21b      	sxth	r3, r3
 8000a1e:	17da      	asrs	r2, r3, #31
 8000a20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000a24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000a28:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	fb03 f209 	mul.w	r2, r3, r9
 8000a32:	460b      	mov	r3, r1
 8000a34:	fb08 f303 	mul.w	r3, r8, r3
 8000a38:	4413      	add	r3, r2
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	fba8 1202 	umull	r1, r2, r8, r2
 8000a40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000a44:	460a      	mov	r2, r1
 8000a46:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000a4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000a4e:	4413      	add	r3, r2
 8000a50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000a54:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000a58:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8000a5c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8000a60:	4b8f      	ldr	r3, [pc, #572]	@ (8000ca0 <BMP280_measureP+0x2d4>)
 8000a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	17da      	asrs	r2, r3, #31
 8000a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000a6e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000a72:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a76:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000a7a:	462a      	mov	r2, r5
 8000a7c:	fb02 f203 	mul.w	r2, r2, r3
 8000a80:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000a84:	4621      	mov	r1, r4
 8000a86:	fb01 f303 	mul.w	r3, r1, r3
 8000a8a:	441a      	add	r2, r3
 8000a8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a90:	4621      	mov	r1, r4
 8000a92:	fba3 1301 	umull	r1, r3, r3, r1
 8000a96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000aa4:	18d3      	adds	r3, r2, r3
 8000aa6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000aaa:	f04f 0000 	mov.w	r0, #0
 8000aae:	f04f 0100 	mov.w	r1, #0
 8000ab2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000ab6:	462b      	mov	r3, r5
 8000ab8:	0459      	lsls	r1, r3, #17
 8000aba:	4623      	mov	r3, r4
 8000abc:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000ac0:	4623      	mov	r3, r4
 8000ac2:	0458      	lsls	r0, r3, #17
 8000ac4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ac8:	1814      	adds	r4, r2, r0
 8000aca:	643c      	str	r4, [r7, #64]	@ 0x40
 8000acc:	414b      	adcs	r3, r1
 8000ace:	647b      	str	r3, [r7, #68]	@ 0x44
 8000ad0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000ad4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8000ad8:	4b72      	ldr	r3, [pc, #456]	@ (8000ca4 <BMP280_measureP+0x2d8>)
 8000ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	17da      	asrs	r2, r3, #31
 8000ae2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000ae6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	f04f 0100 	mov.w	r1, #0
 8000af2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000af6:	00d9      	lsls	r1, r3, #3
 8000af8:	2000      	movs	r0, #0
 8000afa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000afe:	1814      	adds	r4, r2, r0
 8000b00:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000b02:	414b      	adcs	r3, r1
 8000b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b06:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000b0a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8000b0e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b12:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b16:	fb03 f102 	mul.w	r1, r3, r2
 8000b1a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b22:	fb02 f303 	mul.w	r3, r2, r3
 8000b26:	18ca      	adds	r2, r1, r3
 8000b28:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b2c:	fba3 1303 	umull	r1, r3, r3, r3
 8000b30:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000b34:	460b      	mov	r3, r1
 8000b36:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000b3e:	18d3      	adds	r3, r2, r3
 8000b40:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000b44:	4b58      	ldr	r3, [pc, #352]	@ (8000ca8 <BMP280_measureP+0x2dc>)
 8000b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	17da      	asrs	r2, r3, #31
 8000b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000b52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000b56:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000b5a:	462b      	mov	r3, r5
 8000b5c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000b60:	4642      	mov	r2, r8
 8000b62:	fb02 f203 	mul.w	r2, r2, r3
 8000b66:	464b      	mov	r3, r9
 8000b68:	4621      	mov	r1, r4
 8000b6a:	fb01 f303 	mul.w	r3, r1, r3
 8000b6e:	4413      	add	r3, r2
 8000b70:	4622      	mov	r2, r4
 8000b72:	4641      	mov	r1, r8
 8000b74:	fba2 1201 	umull	r1, r2, r2, r1
 8000b78:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000b7c:	460a      	mov	r2, r1
 8000b7e:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000b82:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000b86:	4413      	add	r3, r2
 8000b88:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	f04f 0100 	mov.w	r1, #0
 8000b94:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000b98:	4623      	mov	r3, r4
 8000b9a:	0a18      	lsrs	r0, r3, #8
 8000b9c:	462b      	mov	r3, r5
 8000b9e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000ba2:	462b      	mov	r3, r5
 8000ba4:	1219      	asrs	r1, r3, #8
 8000ba6:	4b41      	ldr	r3, [pc, #260]	@ (8000cac <BMP280_measureP+0x2e0>)
 8000ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	17da      	asrs	r2, r3, #31
 8000bb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000bb4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000bb8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bbc:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8000bc0:	464a      	mov	r2, r9
 8000bc2:	fb02 f203 	mul.w	r2, r2, r3
 8000bc6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000bca:	4644      	mov	r4, r8
 8000bcc:	fb04 f303 	mul.w	r3, r4, r3
 8000bd0:	441a      	add	r2, r3
 8000bd2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bd6:	4644      	mov	r4, r8
 8000bd8:	fba3 4304 	umull	r4, r3, r3, r4
 8000bdc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000be0:	4623      	mov	r3, r4
 8000be2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000be6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000bea:	18d3      	adds	r3, r2, r3
 8000bec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000bf0:	f04f 0200 	mov.w	r2, #0
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8000bfc:	464c      	mov	r4, r9
 8000bfe:	0323      	lsls	r3, r4, #12
 8000c00:	4644      	mov	r4, r8
 8000c02:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000c06:	4644      	mov	r4, r8
 8000c08:	0322      	lsls	r2, r4, #12
 8000c0a:	1884      	adds	r4, r0, r2
 8000c0c:	633c      	str	r4, [r7, #48]	@ 0x30
 8000c0e:	eb41 0303 	adc.w	r3, r1, r3
 8000c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c14:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000c18:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8000c1c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c20:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8000c24:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8000c28:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000c2c:	4b20      	ldr	r3, [pc, #128]	@ (8000cb0 <BMP280_measureP+0x2e4>)
 8000c2e:	881b      	ldrh	r3, [r3, #0]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	2200      	movs	r2, #0
 8000c34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000c38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000c3c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8000c40:	462b      	mov	r3, r5
 8000c42:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8000c46:	4642      	mov	r2, r8
 8000c48:	fb02 f203 	mul.w	r2, r2, r3
 8000c4c:	464b      	mov	r3, r9
 8000c4e:	4621      	mov	r1, r4
 8000c50:	fb01 f303 	mul.w	r3, r1, r3
 8000c54:	4413      	add	r3, r2
 8000c56:	4622      	mov	r2, r4
 8000c58:	4641      	mov	r1, r8
 8000c5a:	fba2 1201 	umull	r1, r2, r2, r1
 8000c5e:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8000c62:	460a      	mov	r2, r1
 8000c64:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8000c68:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000c6c:	4413      	add	r3, r2
 8000c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000c72:	f04f 0200 	mov.w	r2, #0
 8000c76:	f04f 0300 	mov.w	r3, #0
 8000c7a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000c7e:	4629      	mov	r1, r5
 8000c80:	104a      	asrs	r2, r1, #1
 8000c82:	4629      	mov	r1, r5
 8000c84:	17cb      	asrs	r3, r1, #31
 8000c86:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8000c8a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	d110      	bne.n	8000cb4 <BMP280_measureP+0x2e8>
	{
	return 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e154      	b.n	8000f40 <BMP280_measureP+0x574>
 8000c96:	bf00      	nop
 8000c98:	24000170 	.word	0x24000170
 8000c9c:	24000160 	.word	0x24000160
 8000ca0:	2400015e 	.word	0x2400015e
 8000ca4:	2400015c 	.word	0x2400015c
 8000ca8:	2400015a 	.word	0x2400015a
 8000cac:	24000158 	.word	0x24000158
 8000cb0:	24000152 	.word	0x24000152
	}
	p = 1048576-adc_P;
 8000cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000cb8:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8000cbc:	17da      	asrs	r2, r3, #31
 8000cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000cc2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000cc6:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8000cca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000cce:	105b      	asrs	r3, r3, #1
 8000cd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000cd4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000cd8:	07db      	lsls	r3, r3, #31
 8000cda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000cde:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ce2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000ce6:	4621      	mov	r1, r4
 8000ce8:	1a89      	subs	r1, r1, r2
 8000cea:	67b9      	str	r1, [r7, #120]	@ 0x78
 8000cec:	4629      	mov	r1, r5
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000cf4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8000cf8:	4622      	mov	r2, r4
 8000cfa:	462b      	mov	r3, r5
 8000cfc:	1891      	adds	r1, r2, r2
 8000cfe:	6239      	str	r1, [r7, #32]
 8000d00:	415b      	adcs	r3, r3
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d04:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000d08:	4621      	mov	r1, r4
 8000d0a:	1851      	adds	r1, r2, r1
 8000d0c:	61b9      	str	r1, [r7, #24]
 8000d0e:	4629      	mov	r1, r5
 8000d10:	414b      	adcs	r3, r1
 8000d12:	61fb      	str	r3, [r7, #28]
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000d20:	4649      	mov	r1, r9
 8000d22:	018b      	lsls	r3, r1, #6
 8000d24:	4641      	mov	r1, r8
 8000d26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000d2a:	4641      	mov	r1, r8
 8000d2c:	018a      	lsls	r2, r1, #6
 8000d2e:	4641      	mov	r1, r8
 8000d30:	1889      	adds	r1, r1, r2
 8000d32:	6139      	str	r1, [r7, #16]
 8000d34:	4649      	mov	r1, r9
 8000d36:	eb43 0101 	adc.w	r1, r3, r1
 8000d3a:	6179      	str	r1, [r7, #20]
 8000d3c:	f04f 0200 	mov.w	r2, #0
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000d48:	4649      	mov	r1, r9
 8000d4a:	008b      	lsls	r3, r1, #2
 8000d4c:	4641      	mov	r1, r8
 8000d4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d52:	4641      	mov	r1, r8
 8000d54:	008a      	lsls	r2, r1, #2
 8000d56:	4610      	mov	r0, r2
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4622      	mov	r2, r4
 8000d5e:	189b      	adds	r3, r3, r2
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	460b      	mov	r3, r1
 8000d64:	462a      	mov	r2, r5
 8000d66:	eb42 0303 	adc.w	r3, r2, r3
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	f04f 0200 	mov.w	r2, #0
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000d78:	4649      	mov	r1, r9
 8000d7a:	008b      	lsls	r3, r1, #2
 8000d7c:	4641      	mov	r1, r8
 8000d7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d82:	4641      	mov	r1, r8
 8000d84:	008a      	lsls	r2, r1, #2
 8000d86:	4610      	mov	r0, r2
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4622      	mov	r2, r4
 8000d8e:	189b      	adds	r3, r3, r2
 8000d90:	673b      	str	r3, [r7, #112]	@ 0x70
 8000d92:	462b      	mov	r3, r5
 8000d94:	460a      	mov	r2, r1
 8000d96:	eb42 0303 	adc.w	r3, r2, r3
 8000d9a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000d9c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000da0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000da4:	f7ff faa4 	bl	80002f0 <__aeabi_ldivmod>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8000db0:	4b66      	ldr	r3, [pc, #408]	@ (8000f4c <BMP280_measureP+0x580>)
 8000db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	17da      	asrs	r2, r3, #31
 8000dba:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000dbc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000dbe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	f04f 0100 	mov.w	r1, #0
 8000dca:	0b50      	lsrs	r0, r2, #13
 8000dcc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000dd0:	1359      	asrs	r1, r3, #13
 8000dd2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000dd6:	462b      	mov	r3, r5
 8000dd8:	fb00 f203 	mul.w	r2, r0, r3
 8000ddc:	4623      	mov	r3, r4
 8000dde:	fb03 f301 	mul.w	r3, r3, r1
 8000de2:	4413      	add	r3, r2
 8000de4:	4622      	mov	r2, r4
 8000de6:	fba2 1200 	umull	r1, r2, r2, r0
 8000dea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000dee:	460a      	mov	r2, r1
 8000df0:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8000df4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000df8:	4413      	add	r3, r2
 8000dfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000dfe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000e02:	f04f 0000 	mov.w	r0, #0
 8000e06:	f04f 0100 	mov.w	r1, #0
 8000e0a:	0b50      	lsrs	r0, r2, #13
 8000e0c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000e10:	1359      	asrs	r1, r3, #13
 8000e12:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8000e16:	462b      	mov	r3, r5
 8000e18:	fb00 f203 	mul.w	r2, r0, r3
 8000e1c:	4623      	mov	r3, r4
 8000e1e:	fb03 f301 	mul.w	r3, r3, r1
 8000e22:	4413      	add	r3, r2
 8000e24:	4622      	mov	r2, r4
 8000e26:	fba2 1200 	umull	r1, r2, r2, r0
 8000e2a:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000e2e:	460a      	mov	r2, r1
 8000e30:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8000e34:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8000e38:	4413      	add	r3, r2
 8000e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000e3e:	f04f 0200 	mov.w	r2, #0
 8000e42:	f04f 0300 	mov.w	r3, #0
 8000e46:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8000e4a:	4621      	mov	r1, r4
 8000e4c:	0e4a      	lsrs	r2, r1, #25
 8000e4e:	4629      	mov	r1, r5
 8000e50:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000e54:	4629      	mov	r1, r5
 8000e56:	164b      	asrs	r3, r1, #25
 8000e58:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8000e5c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f50 <BMP280_measureP+0x584>)
 8000e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	17da      	asrs	r2, r3, #31
 8000e66:	663b      	str	r3, [r7, #96]	@ 0x60
 8000e68:	667a      	str	r2, [r7, #100]	@ 0x64
 8000e6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000e6e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8000e72:	462a      	mov	r2, r5
 8000e74:	fb02 f203 	mul.w	r2, r2, r3
 8000e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e7c:	4621      	mov	r1, r4
 8000e7e:	fb01 f303 	mul.w	r3, r1, r3
 8000e82:	4413      	add	r3, r2
 8000e84:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000e88:	4621      	mov	r1, r4
 8000e8a:	fba2 1201 	umull	r1, r2, r2, r1
 8000e8e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8000e92:	460a      	mov	r2, r1
 8000e94:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8000e98:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8000e9c:	4413      	add	r3, r2
 8000e9e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	f04f 0300 	mov.w	r3, #0
 8000eaa:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8000eae:	4621      	mov	r1, r4
 8000eb0:	0cca      	lsrs	r2, r1, #19
 8000eb2:	4629      	mov	r1, r5
 8000eb4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000eb8:	4629      	mov	r1, r5
 8000eba:	14cb      	asrs	r3, r1, #19
 8000ebc:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8000ec0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8000ec4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000ec8:	1884      	adds	r4, r0, r2
 8000eca:	65bc      	str	r4, [r7, #88]	@ 0x58
 8000ecc:	eb41 0303 	adc.w	r3, r1, r3
 8000ed0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000ed2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ed6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8000eda:	4621      	mov	r1, r4
 8000edc:	1889      	adds	r1, r1, r2
 8000ede:	6539      	str	r1, [r7, #80]	@ 0x50
 8000ee0:	4629      	mov	r1, r5
 8000ee2:	eb43 0101 	adc.w	r1, r3, r1
 8000ee6:	6579      	str	r1, [r7, #84]	@ 0x54
 8000ee8:	f04f 0000 	mov.w	r0, #0
 8000eec:	f04f 0100 	mov.w	r1, #0
 8000ef0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8000ef4:	4623      	mov	r3, r4
 8000ef6:	0a18      	lsrs	r0, r3, #8
 8000ef8:	462b      	mov	r3, r5
 8000efa:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000efe:	462b      	mov	r3, r5
 8000f00:	1219      	asrs	r1, r3, #8
 8000f02:	4b14      	ldr	r3, [pc, #80]	@ (8000f54 <BMP280_measureP+0x588>)
 8000f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f08:	b21b      	sxth	r3, r3
 8000f0a:	17da      	asrs	r2, r3, #31
 8000f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000f0e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000f10:	f04f 0200 	mov.w	r2, #0
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8000f1c:	464c      	mov	r4, r9
 8000f1e:	0123      	lsls	r3, r4, #4
 8000f20:	4644      	mov	r4, r8
 8000f22:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000f26:	4644      	mov	r4, r8
 8000f28:	0122      	lsls	r2, r4, #4
 8000f2a:	1884      	adds	r4, r0, r2
 8000f2c:	603c      	str	r4, [r7, #0]
 8000f2e:	eb41 0303 	adc.w	r3, r1, r3
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000f38:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8000f3c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8000f46:	46bd      	mov	sp, r7
 8000f48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000f4c:	24000166 	.word	0x24000166
 8000f50:	24000164 	.word	0x24000164
 8000f54:	24000162 	.word	0x24000162

08000f58 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d101      	bne.n	8000f6c <BMP280_measureH+0x14>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e03d      	b.n	8000fe8 <BMP280_measureH+0x90>
	var1 = -log(((double)Pres)/101325);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	ee07 3a90 	vmov	s15, r3
 8000f72:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f76:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8000ff0 <BMP280_measureH+0x98>
 8000f7a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000f7e:	eeb0 0b46 	vmov.f64	d0, d6
 8000f82:	f013 f921 	bl	80141c8 <log>
 8000f86:	eeb0 7b40 	vmov.f64	d7, d0
 8000f8a:	eeb1 7b47 	vneg.f64	d7, d7
 8000f8e:	ed87 7b06 	vstr	d7, [r7, #24]

	if(var1 == 0) return 0;
 8000f92:	ed97 7b06 	vldr	d7, [r7, #24]
 8000f96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9e:	d101      	bne.n	8000fa4 <BMP280_measureH+0x4c>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	e021      	b.n	8000fe8 <BMP280_measureH+0x90>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	ee07 3a90 	vmov	s15, r3
 8000faa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fae:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8000ff8 <BMP280_measureH+0xa0>
 8000fb2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fb6:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8001000 <BMP280_measureH+0xa8>
 8000fba:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000fbe:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8001008 <BMP280_measureH+0xb0>
 8000fc2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fc6:	ed87 7b04 	vstr	d7, [r7, #16]
	h = var1/var2;
 8000fca:	ed97 5b06 	vldr	d5, [r7, #24]
 8000fce:	ed97 6b04 	vldr	d6, [r7, #16]
 8000fd2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fd6:	ed87 7b02 	vstr	d7, [r7, #8]
	return (uint16_t)h;
 8000fda:	ed97 7b02 	vldr	d7, [r7, #8]
 8000fde:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fe2:	ee17 3a90 	vmov	r3, s15
 8000fe6:	b29b      	uxth	r3, r3
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3720      	adds	r7, #32
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	00000000 	.word	0x00000000
 8000ff4:	40f8bcd0 	.word	0x40f8bcd0
 8000ff8:	00000000 	.word	0x00000000
 8000ffc:	40590000 	.word	0x40590000
 8001000:	66666666 	.word	0x66666666
 8001004:	40711266 	.word	0x40711266
 8001008:	ca402a92 	.word	0xca402a92
 800100c:	3fa17e3e 	.word	0x3fa17e3e

08001010 <BMP280_init>:

void BMP280_init(void){
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	BMP280_unselect();
 8001014:	2201      	movs	r2, #1
 8001016:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800101a:	480d      	ldr	r0, [pc, #52]	@ (8001050 <BMP280_init+0x40>)
 800101c:	f006 ff44 	bl	8007ea8 <HAL_GPIO_WritePin>
	BMP280_config();
 8001020:	f7ff fb8a 	bl	8000738 <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 8001024:	2089      	movs	r0, #137	@ 0x89
 8001026:	f7ff fb59 	bl	80006dc <BMP280_read>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <BMP280_init+0x44>)
 8001030:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 8001032:	f7ff fb8d 	bl	8000750 <BMP280_calibrationData>
	BMP280_readRawValues();
 8001036:	f7ff fc41 	bl	80008bc <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 800103a:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <BMP280_init+0x48>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fc80 	bl	8000944 <BMP280_measureT>
 8001044:	4603      	mov	r3, r0
 8001046:	4a03      	ldr	r2, [pc, #12]	@ (8001054 <BMP280_init+0x44>)
 8001048:	6093      	str	r3, [r2, #8]
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	58020400 	.word	0x58020400
 8001054:	2400013c 	.word	0x2400013c
 8001058:	24000168 	.word	0x24000168

0800105c <BMP280_calculate>:

void BMP280_calculate(void){
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	//BMP280.ID = 0;
	BMP280.ID = BMP280_read(0x89);
 8001060:	2089      	movs	r0, #137	@ 0x89
 8001062:	f7ff fb3b 	bl	80006dc <BMP280_read>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <BMP280_calculate+0x68>)
 800106c:	701a      	strb	r2, [r3, #0]
	BMP280_readRawValues();
 800106e:	f7ff fc25 	bl	80008bc <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 8001072:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <BMP280_calculate+0x6c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fc64 	bl	8000944 <BMP280_measureT>
 800107c:	4603      	mov	r3, r0
 800107e:	4a11      	ldr	r2, [pc, #68]	@ (80010c4 <BMP280_calculate+0x68>)
 8001080:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 8001082:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <BMP280_calculate+0x70>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fca0 	bl	80009cc <BMP280_measureP>
 800108c:	4603      	mov	r3, r0
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	4a0c      	ldr	r2, [pc, #48]	@ (80010c4 <BMP280_calculate+0x68>)
 8001092:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 8001094:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <BMP280_calculate+0x68>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <BMP280_calculate+0x68>)
 800109a:	6892      	ldr	r2, [r2, #8]
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff5a 	bl	8000f58 <BMP280_measureH>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <BMP280_calculate+0x68>)
 80010aa:	821a      	strh	r2, [r3, #16]

	if(BMP280.Barometric_Altitude > BMP280.Max_Altitude) BMP280.Max_Altitude = BMP280.Barometric_Altitude;
 80010ac:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <BMP280_calculate+0x68>)
 80010ae:	8a1a      	ldrh	r2, [r3, #16]
 80010b0:	4b04      	ldr	r3, [pc, #16]	@ (80010c4 <BMP280_calculate+0x68>)
 80010b2:	8a5b      	ldrh	r3, [r3, #18]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d903      	bls.n	80010c0 <BMP280_calculate+0x64>
 80010b8:	4b02      	ldr	r3, [pc, #8]	@ (80010c4 <BMP280_calculate+0x68>)
 80010ba:	8a1a      	ldrh	r2, [r3, #16]
 80010bc:	4b01      	ldr	r3, [pc, #4]	@ (80010c4 <BMP280_calculate+0x68>)
 80010be:	825a      	strh	r2, [r3, #18]
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	2400013c 	.word	0x2400013c
 80010c8:	24000168 	.word	0x24000168
 80010cc:	2400016c 	.word	0x2400016c

080010d0 <bno055_delay>:

BNO_CurrentState_e BNO_CurrentState = Init;

IMU_t IMU;

void bno055_delay(uint8_t time) {
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
	BNO_DelayCounter += time;
 80010da:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <bno055_delay+0x24>)
 80010dc:	781a      	ldrb	r2, [r3, #0]
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	4413      	add	r3, r2
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	4b03      	ldr	r3, [pc, #12]	@ (80010f4 <bno055_delay+0x24>)
 80010e6:	701a      	strb	r2, [r3, #0]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	24000277 	.word	0x24000277

080010f8 <BNO_Read>:

HAL_StatusTypeDef BNO_Read(uint8_t Address,uint8_t Size){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	460a      	mov	r2, r1
 8001102:	71fb      	strb	r3, [r7, #7]
 8001104:	4613      	mov	r3, r2
 8001106:	71bb      	strb	r3, [r7, #6]
	uint8_t ReadCommand[4] = {0xAA, 0x01, Address, Size};
 8001108:	23aa      	movs	r3, #170	@ 0xaa
 800110a:	723b      	strb	r3, [r7, #8]
 800110c:	2301      	movs	r3, #1
 800110e:	727b      	strb	r3, [r7, #9]
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	72bb      	strb	r3, [r7, #10]
 8001114:	79bb      	ldrb	r3, [r7, #6]
 8001116:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef uartError;

	BNO_RxBuffer[0] = Address;
 8001118:	4a08      	ldr	r2, [pc, #32]	@ (800113c <BNO_Read+0x44>)
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	7013      	strb	r3, [r2, #0]

	uartError = HAL_UART_Transmit(&huart3, ReadCommand, 4,100);
 800111e:	f107 0108 	add.w	r1, r7, #8
 8001122:	2364      	movs	r3, #100	@ 0x64
 8001124:	2204      	movs	r2, #4
 8001126:	4806      	ldr	r0, [pc, #24]	@ (8001140 <BNO_Read+0x48>)
 8001128:	f00c f8a2 	bl	800d270 <HAL_UART_Transmit>
 800112c:	4603      	mov	r3, r0
 800112e:	73fb      	strb	r3, [r7, #15]
	return uartError;
 8001130:	7bfb      	ldrb	r3, [r7, #15]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	24000174 	.word	0x24000174
 8001140:	240028bc 	.word	0x240028bc

08001144 <BNO_Write>:

HAL_StatusTypeDef BNO_Write(uint8_t Address,uint8_t Data){
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	460a      	mov	r2, r1
 800114e:	71fb      	strb	r3, [r7, #7]
 8001150:	4613      	mov	r3, r2
 8001152:	71bb      	strb	r3, [r7, #6]
	uint8_t WriteCommand[5];
	HAL_StatusTypeDef uartError;

	WriteCommand[0] = 0xAA;
 8001154:	23aa      	movs	r3, #170	@ 0xaa
 8001156:	723b      	strb	r3, [r7, #8]
	WriteCommand[1] = 0x00;
 8001158:	2300      	movs	r3, #0
 800115a:	727b      	strb	r3, [r7, #9]
	WriteCommand[2] = Address;
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	72bb      	strb	r3, [r7, #10]
	WriteCommand[3] = 1;
 8001160:	2301      	movs	r3, #1
 8001162:	72fb      	strb	r3, [r7, #11]
	WriteCommand[4] = Data;
 8001164:	79bb      	ldrb	r3, [r7, #6]
 8001166:	733b      	strb	r3, [r7, #12]

	uartError = HAL_UART_Transmit(&huart3, WriteCommand,5,100);
 8001168:	f107 0108 	add.w	r1, r7, #8
 800116c:	2364      	movs	r3, #100	@ 0x64
 800116e:	2205      	movs	r2, #5
 8001170:	4804      	ldr	r0, [pc, #16]	@ (8001184 <BNO_Write+0x40>)
 8001172:	f00c f87d 	bl	800d270 <HAL_UART_Transmit>
 8001176:	4603      	mov	r3, r0
 8001178:	73fb      	strb	r3, [r7, #15]
	return uartError;
 800117a:	7bfb      	ldrb	r3, [r7, #15]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	240028bc 	.word	0x240028bc

08001188 <BNO_Write_MB>:

HAL_StatusTypeDef BNO_Write_MB(uint8_t Address,uint8_t Size, uint8_t *pData){
 8001188:	b580      	push	{r7, lr}
 800118a:	b0c4      	sub	sp, #272	@ 0x110
 800118c:	af00      	add	r7, sp, #0
 800118e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001192:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800119c:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80011a0:	4602      	mov	r2, r0
 80011a2:	701a      	strb	r2, [r3, #0]
 80011a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011a8:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80011ac:	460a      	mov	r2, r1
 80011ae:	701a      	strb	r2, [r3, #0]
    uint8_t WriteCommand[255];
    HAL_StatusTypeDef uartError;

    WriteCommand[0] = 0xAA;
 80011b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011b8:	22aa      	movs	r2, #170	@ 0xaa
 80011ba:	701a      	strb	r2, [r3, #0]
    WriteCommand[1] = 0x00;
 80011bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011c4:	2200      	movs	r2, #0
 80011c6:	705a      	strb	r2, [r3, #1]
    WriteCommand[2] = Address;
 80011c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011d0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80011d4:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 80011d8:	7812      	ldrb	r2, [r2, #0]
 80011da:	709a      	strb	r2, [r3, #2]
    WriteCommand[3] = Size;
 80011dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011e4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80011e8:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80011ec:	7812      	ldrb	r2, [r2, #0]
 80011ee:	70da      	strb	r2, [r3, #3]

    for (uint8_t n = 0; n < Size; ++n) {
 80011f0:	2300      	movs	r3, #0
 80011f2:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80011f6:	e015      	b.n	8001224 <BNO_Write_MB+0x9c>
        WriteCommand[n + 4] = pData[n];
 80011f8:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80011fc:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001200:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001204:	6812      	ldr	r2, [r2, #0]
 8001206:	441a      	add	r2, r3
 8001208:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800120c:	3304      	adds	r3, #4
 800120e:	7811      	ldrb	r1, [r2, #0]
 8001210:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001214:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001218:	54d1      	strb	r1, [r2, r3]
    for (uint8_t n = 0; n < Size; ++n) {
 800121a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800121e:	3301      	adds	r3, #1
 8001220:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001224:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001228:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800122c:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	429a      	cmp	r2, r3
 8001234:	d3e0      	bcc.n	80011f8 <BNO_Write_MB+0x70>
    }

    uartError = HAL_UART_Transmit(&huart3, WriteCommand, (Size + 4),100);
 8001236:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800123a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b29b      	uxth	r3, r3
 8001242:	3304      	adds	r3, #4
 8001244:	b29a      	uxth	r2, r3
 8001246:	f107 010c 	add.w	r1, r7, #12
 800124a:	2364      	movs	r3, #100	@ 0x64
 800124c:	4806      	ldr	r0, [pc, #24]	@ (8001268 <BNO_Write_MB+0xe0>)
 800124e:	f00c f80f 	bl	800d270 <HAL_UART_Transmit>
 8001252:	4603      	mov	r3, r0
 8001254:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    return uartError;
 8001258:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
}
 800125c:	4618      	mov	r0, r3
 800125e:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	240028bc 	.word	0x240028bc
 800126c:	00000000 	.word	0x00000000

08001270 <BNO_Page0Adress>:

void BNO_Page0Adress(void){
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 8001274:	4ba6      	ldr	r3, [pc, #664]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b55      	cmp	r3, #85	@ 0x55
 800127a:	f300 8247 	bgt.w	800170c <BNO_Page0Adress+0x49c>
 800127e:	2b35      	cmp	r3, #53	@ 0x35
 8001280:	da0a      	bge.n	8001298 <BNO_Page0Adress+0x28>
 8001282:	2b08      	cmp	r3, #8
 8001284:	f000 814a 	beq.w	800151c <BNO_Page0Adress+0x2ac>
 8001288:	2b08      	cmp	r3, #8
 800128a:	f300 823f 	bgt.w	800170c <BNO_Page0Adress+0x49c>
 800128e:	2b00      	cmp	r3, #0
 8001290:	d04c      	beq.n	800132c <BNO_Page0Adress+0xbc>
 8001292:	2b07      	cmp	r3, #7
 8001294:	d065      	beq.n	8001362 <BNO_Page0Adress+0xf2>
			IMU.Roll = ((double)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;

			BNO_ErrorHandler = ReadSucces;
			break;
		default:
			break;
 8001296:	e239      	b.n	800170c <BNO_Page0Adress+0x49c>
	switch (BNO_RxBuffer[0]) {
 8001298:	3b35      	subs	r3, #53	@ 0x35
 800129a:	2b20      	cmp	r3, #32
 800129c:	f200 8236 	bhi.w	800170c <BNO_Page0Adress+0x49c>
 80012a0:	a201      	add	r2, pc, #4	@ (adr r2, 80012a8 <BNO_Page0Adress+0x38>)
 80012a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a6:	bf00      	nop
 80012a8:	080013ab 	.word	0x080013ab
 80012ac:	0800170d 	.word	0x0800170d
 80012b0:	0800170d 	.word	0x0800170d
 80012b4:	0800170d 	.word	0x0800170d
 80012b8:	08001387 	.word	0x08001387
 80012bc:	0800170d 	.word	0x0800170d
 80012c0:	08001375 	.word	0x08001375
 80012c4:	0800170d 	.word	0x0800170d
 80012c8:	08001399 	.word	0x08001399
 80012cc:	0800170d 	.word	0x0800170d
 80012d0:	0800170d 	.word	0x0800170d
 80012d4:	0800170d 	.word	0x0800170d
 80012d8:	0800170d 	.word	0x0800170d
 80012dc:	0800170d 	.word	0x0800170d
 80012e0:	0800170d 	.word	0x0800170d
 80012e4:	0800170d 	.word	0x0800170d
 80012e8:	0800170d 	.word	0x0800170d
 80012ec:	0800170d 	.word	0x0800170d
 80012f0:	0800170d 	.word	0x0800170d
 80012f4:	0800170d 	.word	0x0800170d
 80012f8:	0800170d 	.word	0x0800170d
 80012fc:	0800170d 	.word	0x0800170d
 8001300:	0800170d 	.word	0x0800170d
 8001304:	0800170d 	.word	0x0800170d
 8001308:	0800170d 	.word	0x0800170d
 800130c:	0800170d 	.word	0x0800170d
 8001310:	0800170d 	.word	0x0800170d
 8001314:	0800170d 	.word	0x0800170d
 8001318:	0800170d 	.word	0x0800170d
 800131c:	0800170d 	.word	0x0800170d
 8001320:	0800170d 	.word	0x0800170d
 8001324:	0800170d 	.word	0x0800170d
 8001328:	08001403 	.word	0x08001403
			if(BNO_RxBuffer[1] != 160) return;
 800132c:	4b78      	ldr	r3, [pc, #480]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 800132e:	785b      	ldrb	r3, [r3, #1]
 8001330:	2ba0      	cmp	r3, #160	@ 0xa0
 8001332:	f040 81ed 	bne.w	8001710 <BNO_Page0Adress+0x4a0>
			IMU.ID = BNO_RxBuffer[1];
 8001336:	4b76      	ldr	r3, [pc, #472]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001338:	785a      	ldrb	r2, [r3, #1]
 800133a:	4b76      	ldr	r3, [pc, #472]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 800133c:	701a      	strb	r2, [r3, #0]
			IMU.ACC.ID = BNO_RxBuffer[2];
 800133e:	4b74      	ldr	r3, [pc, #464]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001340:	789a      	ldrb	r2, [r3, #2]
 8001342:	4b74      	ldr	r3, [pc, #464]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 8001344:	721a      	strb	r2, [r3, #8]
			IMU.MAG.ID = BNO_RxBuffer[3];
 8001346:	4b72      	ldr	r3, [pc, #456]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001348:	78da      	ldrb	r2, [r3, #3]
 800134a:	4b72      	ldr	r3, [pc, #456]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 800134c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			IMU.GYR.ID = BNO_RxBuffer[4];
 8001350:	4b6f      	ldr	r3, [pc, #444]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001352:	791a      	ldrb	r2, [r3, #4]
 8001354:	4b6f      	ldr	r3, [pc, #444]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 8001356:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			BNO_ErrorHandler = ReadSucces;
 800135a:	4b6f      	ldr	r3, [pc, #444]	@ (8001518 <BNO_Page0Adress+0x2a8>)
 800135c:	220b      	movs	r2, #11
 800135e:	701a      	strb	r2, [r3, #0]
			break;
 8001360:	e1d7      	b.n	8001712 <BNO_Page0Adress+0x4a2>
			IMU.Page = BNO_RxBuffer[1];
 8001362:	4b6b      	ldr	r3, [pc, #428]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001364:	785a      	ldrb	r2, [r3, #1]
 8001366:	4b6b      	ldr	r3, [pc, #428]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 8001368:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			BNO_ErrorHandler = ReadSucces;
 800136c:	4b6a      	ldr	r3, [pc, #424]	@ (8001518 <BNO_Page0Adress+0x2a8>)
 800136e:	220b      	movs	r2, #11
 8001370:	701a      	strb	r2, [r3, #0]
			break;
 8001372:	e1ce      	b.n	8001712 <BNO_Page0Adress+0x4a2>
			IMU.Unit_Select = BNO_RxBuffer[1];
 8001374:	4b66      	ldr	r3, [pc, #408]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001376:	785a      	ldrb	r2, [r3, #1]
 8001378:	4b66      	ldr	r3, [pc, #408]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 800137a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
			BNO_ErrorHandler = ReadSucces;
 800137e:	4b66      	ldr	r3, [pc, #408]	@ (8001518 <BNO_Page0Adress+0x2a8>)
 8001380:	220b      	movs	r2, #11
 8001382:	701a      	strb	r2, [r3, #0]
			break;
 8001384:	e1c5      	b.n	8001712 <BNO_Page0Adress+0x4a2>
			IMU.System_Status = BNO_RxBuffer[1];
 8001386:	4b62      	ldr	r3, [pc, #392]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001388:	785a      	ldrb	r2, [r3, #1]
 800138a:	4b62      	ldr	r3, [pc, #392]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 800138c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
			BNO_ErrorHandler = ReadSucces;
 8001390:	4b61      	ldr	r3, [pc, #388]	@ (8001518 <BNO_Page0Adress+0x2a8>)
 8001392:	220b      	movs	r2, #11
 8001394:	701a      	strb	r2, [r3, #0]
			break;
 8001396:	e1bc      	b.n	8001712 <BNO_Page0Adress+0x4a2>
			IMU.Op_Mode = BNO_RxBuffer[1];
 8001398:	4b5d      	ldr	r3, [pc, #372]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 800139a:	785a      	ldrb	r2, [r3, #1]
 800139c:	4b5d      	ldr	r3, [pc, #372]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 800139e:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
			BNO_ErrorHandler = ReadSucces;
 80013a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001518 <BNO_Page0Adress+0x2a8>)
 80013a4:	220b      	movs	r2, #11
 80013a6:	701a      	strb	r2, [r3, #0]
			break;
 80013a8:	e1b3      	b.n	8001712 <BNO_Page0Adress+0x4a2>
			IMU.CalSatus.Full = BNO_RxBuffer[1];
 80013aa:	4b59      	ldr	r3, [pc, #356]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80013ac:	785a      	ldrb	r2, [r3, #1]
 80013ae:	4b59      	ldr	r3, [pc, #356]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 80013b0:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
			IMU.CalSatus.Sys = (BNO_RxBuffer[1] >> 6) & 0x03;
 80013b4:	4b56      	ldr	r3, [pc, #344]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80013b6:	785b      	ldrb	r3, [r3, #1]
 80013b8:	099b      	lsrs	r3, r3, #6
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	4b55      	ldr	r3, [pc, #340]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 80013be:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
			IMU.CalSatus.Gyr = (BNO_RxBuffer[1] >> 4) & 0x03;
 80013c2:	4b53      	ldr	r3, [pc, #332]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80013c4:	785b      	ldrb	r3, [r3, #1]
 80013c6:	091b      	lsrs	r3, r3, #4
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	f003 0303 	and.w	r3, r3, #3
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	4b50      	ldr	r3, [pc, #320]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 80013d2:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
			IMU.CalSatus.Acc = (BNO_RxBuffer[1] >> 2) & 0x03;
 80013d6:	4b4e      	ldr	r3, [pc, #312]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80013d8:	785b      	ldrb	r3, [r3, #1]
 80013da:	089b      	lsrs	r3, r3, #2
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	4b4b      	ldr	r3, [pc, #300]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 80013e6:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
			IMU.CalSatus.Mag = BNO_RxBuffer[1] & 0x03;
 80013ea:	4b49      	ldr	r3, [pc, #292]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80013ec:	785b      	ldrb	r3, [r3, #1]
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	4b47      	ldr	r3, [pc, #284]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 80013f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
			BNO_ErrorHandler = ReadSucces;
 80013fa:	4b47      	ldr	r3, [pc, #284]	@ (8001518 <BNO_Page0Adress+0x2a8>)
 80013fc:	220b      	movs	r2, #11
 80013fe:	701a      	strb	r2, [r3, #0]
			break;
 8001400:	e187      	b.n	8001712 <BNO_Page0Adress+0x4a2>
			IMU.Calibration_Data.offset.accel.x = (int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1]);
 8001402:	4b43      	ldr	r3, [pc, #268]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001404:	789b      	ldrb	r3, [r3, #2]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	b21a      	sxth	r2, r3
 800140a:	4b41      	ldr	r3, [pc, #260]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 800140c:	785b      	ldrb	r3, [r3, #1]
 800140e:	b21b      	sxth	r3, r3
 8001410:	4313      	orrs	r3, r2
 8001412:	b21a      	sxth	r2, r3
 8001414:	4b3f      	ldr	r3, [pc, #252]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 8001416:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
			IMU.Calibration_Data.offset.accel.y = (int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3]);
 800141a:	4b3d      	ldr	r3, [pc, #244]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 800141c:	791b      	ldrb	r3, [r3, #4]
 800141e:	021b      	lsls	r3, r3, #8
 8001420:	b21a      	sxth	r2, r3
 8001422:	4b3b      	ldr	r3, [pc, #236]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001424:	78db      	ldrb	r3, [r3, #3]
 8001426:	b21b      	sxth	r3, r3
 8001428:	4313      	orrs	r3, r2
 800142a:	b21a      	sxth	r2, r3
 800142c:	4b39      	ldr	r3, [pc, #228]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 800142e:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
			IMU.Calibration_Data.offset.accel.z = (int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5]);
 8001432:	4b37      	ldr	r3, [pc, #220]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001434:	799b      	ldrb	r3, [r3, #6]
 8001436:	021b      	lsls	r3, r3, #8
 8001438:	b21a      	sxth	r2, r3
 800143a:	4b35      	ldr	r3, [pc, #212]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 800143c:	795b      	ldrb	r3, [r3, #5]
 800143e:	b21b      	sxth	r3, r3
 8001440:	4313      	orrs	r3, r2
 8001442:	b21a      	sxth	r2, r3
 8001444:	4b33      	ldr	r3, [pc, #204]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 8001446:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
			IMU.Calibration_Data.offset.mag.x = (int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7]);
 800144a:	4b31      	ldr	r3, [pc, #196]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 800144c:	7a1b      	ldrb	r3, [r3, #8]
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	b21a      	sxth	r2, r3
 8001452:	4b2f      	ldr	r3, [pc, #188]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001454:	79db      	ldrb	r3, [r3, #7]
 8001456:	b21b      	sxth	r3, r3
 8001458:	4313      	orrs	r3, r2
 800145a:	b21a      	sxth	r2, r3
 800145c:	4b2d      	ldr	r3, [pc, #180]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 800145e:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
			IMU.Calibration_Data.offset.mag.y = (int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9]);
 8001462:	4b2b      	ldr	r3, [pc, #172]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001464:	7a9b      	ldrb	r3, [r3, #10]
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	b21a      	sxth	r2, r3
 800146a:	4b29      	ldr	r3, [pc, #164]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 800146c:	7a5b      	ldrb	r3, [r3, #9]
 800146e:	b21b      	sxth	r3, r3
 8001470:	4313      	orrs	r3, r2
 8001472:	b21a      	sxth	r2, r3
 8001474:	4b27      	ldr	r3, [pc, #156]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 8001476:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
			IMU.Calibration_Data.offset.mag.z = (int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11]);
 800147a:	4b25      	ldr	r3, [pc, #148]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 800147c:	7b1b      	ldrb	r3, [r3, #12]
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	b21a      	sxth	r2, r3
 8001482:	4b23      	ldr	r3, [pc, #140]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001484:	7adb      	ldrb	r3, [r3, #11]
 8001486:	b21b      	sxth	r3, r3
 8001488:	4313      	orrs	r3, r2
 800148a:	b21a      	sxth	r2, r3
 800148c:	4b21      	ldr	r3, [pc, #132]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 800148e:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
			IMU.Calibration_Data.offset.gyro.x = (int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13]);
 8001492:	4b1f      	ldr	r3, [pc, #124]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001494:	7b9b      	ldrb	r3, [r3, #14]
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	b21a      	sxth	r2, r3
 800149a:	4b1d      	ldr	r3, [pc, #116]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 800149c:	7b5b      	ldrb	r3, [r3, #13]
 800149e:	b21b      	sxth	r3, r3
 80014a0:	4313      	orrs	r3, r2
 80014a2:	b21a      	sxth	r2, r3
 80014a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 80014a6:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
			IMU.Calibration_Data.offset.gyro.y = (int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15]);
 80014aa:	4b19      	ldr	r3, [pc, #100]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80014ac:	7c1b      	ldrb	r3, [r3, #16]
 80014ae:	021b      	lsls	r3, r3, #8
 80014b0:	b21a      	sxth	r2, r3
 80014b2:	4b17      	ldr	r3, [pc, #92]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80014b4:	7bdb      	ldrb	r3, [r3, #15]
 80014b6:	b21b      	sxth	r3, r3
 80014b8:	4313      	orrs	r3, r2
 80014ba:	b21a      	sxth	r2, r3
 80014bc:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 80014be:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
			IMU.Calibration_Data.offset.gyro.z = (int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17]);
 80014c2:	4b13      	ldr	r3, [pc, #76]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80014c4:	7c9b      	ldrb	r3, [r3, #18]
 80014c6:	021b      	lsls	r3, r3, #8
 80014c8:	b21a      	sxth	r2, r3
 80014ca:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80014cc:	7c5b      	ldrb	r3, [r3, #17]
 80014ce:	b21b      	sxth	r3, r3
 80014d0:	4313      	orrs	r3, r2
 80014d2:	b21a      	sxth	r2, r3
 80014d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 80014d6:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
			IMU.Calibration_Data.radius.accel = (uint16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19]);
 80014da:	4b0d      	ldr	r3, [pc, #52]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80014dc:	7d1b      	ldrb	r3, [r3, #20]
 80014de:	021b      	lsls	r3, r3, #8
 80014e0:	b21a      	sxth	r2, r3
 80014e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80014e4:	7cdb      	ldrb	r3, [r3, #19]
 80014e6:	b21b      	sxth	r3, r3
 80014e8:	4313      	orrs	r3, r2
 80014ea:	b21b      	sxth	r3, r3
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	4b09      	ldr	r3, [pc, #36]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 80014f0:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
			IMU.Calibration_Data.radius.mag   = (uint16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21]);
 80014f4:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80014f6:	7d9b      	ldrb	r3, [r3, #22]
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	b21a      	sxth	r2, r3
 80014fc:	4b04      	ldr	r3, [pc, #16]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80014fe:	7d5b      	ldrb	r3, [r3, #21]
 8001500:	b21b      	sxth	r3, r3
 8001502:	4313      	orrs	r3, r2
 8001504:	b21b      	sxth	r3, r3
 8001506:	b29a      	uxth	r2, r3
 8001508:	4b02      	ldr	r3, [pc, #8]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 800150a:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
			break;
 800150e:	e100      	b.n	8001712 <BNO_Page0Adress+0x4a2>
 8001510:	24000174 	.word	0x24000174
 8001514:	24000280 	.word	0x24000280
 8001518:	24000275 	.word	0x24000275
			IMU.ACC.x = ((double)((int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1])))/100;
 800151c:	4b82      	ldr	r3, [pc, #520]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 800151e:	789b      	ldrb	r3, [r3, #2]
 8001520:	021b      	lsls	r3, r3, #8
 8001522:	b21a      	sxth	r2, r3
 8001524:	4b80      	ldr	r3, [pc, #512]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 8001526:	785b      	ldrb	r3, [r3, #1]
 8001528:	b21b      	sxth	r3, r3
 800152a:	4313      	orrs	r3, r2
 800152c:	b21b      	sxth	r3, r3
 800152e:	ee07 3a90 	vmov	s15, r3
 8001532:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001536:	ed9f 5b7a 	vldr	d5, [pc, #488]	@ 8001720 <BNO_Page0Adress+0x4b0>
 800153a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800153e:	4b7b      	ldr	r3, [pc, #492]	@ (800172c <BNO_Page0Adress+0x4bc>)
 8001540:	ed83 7b04 	vstr	d7, [r3, #16]
			IMU.ACC.y = ((double)((int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3])))/100;
 8001544:	4b78      	ldr	r3, [pc, #480]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 8001546:	791b      	ldrb	r3, [r3, #4]
 8001548:	021b      	lsls	r3, r3, #8
 800154a:	b21a      	sxth	r2, r3
 800154c:	4b76      	ldr	r3, [pc, #472]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 800154e:	78db      	ldrb	r3, [r3, #3]
 8001550:	b21b      	sxth	r3, r3
 8001552:	4313      	orrs	r3, r2
 8001554:	b21b      	sxth	r3, r3
 8001556:	ee07 3a90 	vmov	s15, r3
 800155a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800155e:	ed9f 5b70 	vldr	d5, [pc, #448]	@ 8001720 <BNO_Page0Adress+0x4b0>
 8001562:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001566:	4b71      	ldr	r3, [pc, #452]	@ (800172c <BNO_Page0Adress+0x4bc>)
 8001568:	ed83 7b06 	vstr	d7, [r3, #24]
			IMU.ACC.z = ((double)((int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5])))/100;
 800156c:	4b6e      	ldr	r3, [pc, #440]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 800156e:	799b      	ldrb	r3, [r3, #6]
 8001570:	021b      	lsls	r3, r3, #8
 8001572:	b21a      	sxth	r2, r3
 8001574:	4b6c      	ldr	r3, [pc, #432]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 8001576:	795b      	ldrb	r3, [r3, #5]
 8001578:	b21b      	sxth	r3, r3
 800157a:	4313      	orrs	r3, r2
 800157c:	b21b      	sxth	r3, r3
 800157e:	ee07 3a90 	vmov	s15, r3
 8001582:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001586:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8001720 <BNO_Page0Adress+0x4b0>
 800158a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800158e:	4b67      	ldr	r3, [pc, #412]	@ (800172c <BNO_Page0Adress+0x4bc>)
 8001590:	ed83 7b08 	vstr	d7, [r3, #32]
			IMU.MAG.x = ((double)((int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7])))/16;
 8001594:	4b64      	ldr	r3, [pc, #400]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 8001596:	7a1b      	ldrb	r3, [r3, #8]
 8001598:	021b      	lsls	r3, r3, #8
 800159a:	b21a      	sxth	r2, r3
 800159c:	4b62      	ldr	r3, [pc, #392]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 800159e:	79db      	ldrb	r3, [r3, #7]
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	4313      	orrs	r3, r2
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	ee07 3a90 	vmov	s15, r3
 80015aa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80015ae:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80015b2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015b6:	4b5d      	ldr	r3, [pc, #372]	@ (800172c <BNO_Page0Adress+0x4bc>)
 80015b8:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
			IMU.MAG.y = ((double)((int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9])))/16;
 80015bc:	4b5a      	ldr	r3, [pc, #360]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 80015be:	7a9b      	ldrb	r3, [r3, #10]
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	b21a      	sxth	r2, r3
 80015c4:	4b58      	ldr	r3, [pc, #352]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 80015c6:	7a5b      	ldrb	r3, [r3, #9]
 80015c8:	b21b      	sxth	r3, r3
 80015ca:	4313      	orrs	r3, r2
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	ee07 3a90 	vmov	s15, r3
 80015d2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80015d6:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80015da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015de:	4b53      	ldr	r3, [pc, #332]	@ (800172c <BNO_Page0Adress+0x4bc>)
 80015e0:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
			IMU.MAG.z = ((double)((int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11])))/16;
 80015e4:	4b50      	ldr	r3, [pc, #320]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 80015e6:	7b1b      	ldrb	r3, [r3, #12]
 80015e8:	021b      	lsls	r3, r3, #8
 80015ea:	b21a      	sxth	r2, r3
 80015ec:	4b4e      	ldr	r3, [pc, #312]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 80015ee:	7adb      	ldrb	r3, [r3, #11]
 80015f0:	b21b      	sxth	r3, r3
 80015f2:	4313      	orrs	r3, r2
 80015f4:	b21b      	sxth	r3, r3
 80015f6:	ee07 3a90 	vmov	s15, r3
 80015fa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80015fe:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001602:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001606:	4b49      	ldr	r3, [pc, #292]	@ (800172c <BNO_Page0Adress+0x4bc>)
 8001608:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
			IMU.GYR.x = ((double)((int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13])))/16;
 800160c:	4b46      	ldr	r3, [pc, #280]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 800160e:	7b9b      	ldrb	r3, [r3, #14]
 8001610:	021b      	lsls	r3, r3, #8
 8001612:	b21a      	sxth	r2, r3
 8001614:	4b44      	ldr	r3, [pc, #272]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 8001616:	7b5b      	ldrb	r3, [r3, #13]
 8001618:	b21b      	sxth	r3, r3
 800161a:	4313      	orrs	r3, r2
 800161c:	b21b      	sxth	r3, r3
 800161e:	ee07 3a90 	vmov	s15, r3
 8001622:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001626:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 800162a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800162e:	4b3f      	ldr	r3, [pc, #252]	@ (800172c <BNO_Page0Adress+0x4bc>)
 8001630:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
			IMU.GYR.y = -((double)((int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15])))/16;
 8001634:	4b3c      	ldr	r3, [pc, #240]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 8001636:	7c1b      	ldrb	r3, [r3, #16]
 8001638:	021b      	lsls	r3, r3, #8
 800163a:	b21a      	sxth	r2, r3
 800163c:	4b3a      	ldr	r3, [pc, #232]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 800163e:	7bdb      	ldrb	r3, [r3, #15]
 8001640:	b21b      	sxth	r3, r3
 8001642:	4313      	orrs	r3, r2
 8001644:	b21b      	sxth	r3, r3
 8001646:	ee07 3a90 	vmov	s15, r3
 800164a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800164e:	eeb1 6b47 	vneg.f64	d6, d7
 8001652:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001656:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800165a:	4b34      	ldr	r3, [pc, #208]	@ (800172c <BNO_Page0Adress+0x4bc>)
 800165c:	ed83 7b16 	vstr	d7, [r3, #88]	@ 0x58
			IMU.GYR.z = -((double)((int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17])))/16;
 8001660:	4b31      	ldr	r3, [pc, #196]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 8001662:	7c9b      	ldrb	r3, [r3, #18]
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	b21a      	sxth	r2, r3
 8001668:	4b2f      	ldr	r3, [pc, #188]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 800166a:	7c5b      	ldrb	r3, [r3, #17]
 800166c:	b21b      	sxth	r3, r3
 800166e:	4313      	orrs	r3, r2
 8001670:	b21b      	sxth	r3, r3
 8001672:	ee07 3a90 	vmov	s15, r3
 8001676:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800167a:	eeb1 6b47 	vneg.f64	d6, d7
 800167e:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001682:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001686:	4b29      	ldr	r3, [pc, #164]	@ (800172c <BNO_Page0Adress+0x4bc>)
 8001688:	ed83 7b18 	vstr	d7, [r3, #96]	@ 0x60
			IMU.Heading = ((double)((int16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19])))/16;
 800168c:	4b26      	ldr	r3, [pc, #152]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 800168e:	7d1b      	ldrb	r3, [r3, #20]
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	b21a      	sxth	r2, r3
 8001694:	4b24      	ldr	r3, [pc, #144]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 8001696:	7cdb      	ldrb	r3, [r3, #19]
 8001698:	b21b      	sxth	r3, r3
 800169a:	4313      	orrs	r3, r2
 800169c:	b21b      	sxth	r3, r3
 800169e:	ee07 3a90 	vmov	s15, r3
 80016a2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80016a6:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80016aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016ae:	4b1f      	ldr	r3, [pc, #124]	@ (800172c <BNO_Page0Adress+0x4bc>)
 80016b0:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68
			IMU.Pitch = ((double)((int16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21])))/16;
 80016b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 80016b6:	7d9b      	ldrb	r3, [r3, #22]
 80016b8:	021b      	lsls	r3, r3, #8
 80016ba:	b21a      	sxth	r2, r3
 80016bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 80016be:	7d5b      	ldrb	r3, [r3, #21]
 80016c0:	b21b      	sxth	r3, r3
 80016c2:	4313      	orrs	r3, r2
 80016c4:	b21b      	sxth	r3, r3
 80016c6:	ee07 3a90 	vmov	s15, r3
 80016ca:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80016ce:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80016d2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016d6:	4b15      	ldr	r3, [pc, #84]	@ (800172c <BNO_Page0Adress+0x4bc>)
 80016d8:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70
			IMU.Roll = ((double)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;
 80016dc:	4b12      	ldr	r3, [pc, #72]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 80016de:	7e1b      	ldrb	r3, [r3, #24]
 80016e0:	021b      	lsls	r3, r3, #8
 80016e2:	b21a      	sxth	r2, r3
 80016e4:	4b10      	ldr	r3, [pc, #64]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 80016e6:	7ddb      	ldrb	r3, [r3, #23]
 80016e8:	b21b      	sxth	r3, r3
 80016ea:	4313      	orrs	r3, r2
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	ee07 3a90 	vmov	s15, r3
 80016f2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80016f6:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80016fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016fe:	4b0b      	ldr	r3, [pc, #44]	@ (800172c <BNO_Page0Adress+0x4bc>)
 8001700:	ed83 7b1e 	vstr	d7, [r3, #120]	@ 0x78
			BNO_ErrorHandler = ReadSucces;
 8001704:	4b0a      	ldr	r3, [pc, #40]	@ (8001730 <BNO_Page0Adress+0x4c0>)
 8001706:	220b      	movs	r2, #11
 8001708:	701a      	strb	r2, [r3, #0]
			break;
 800170a:	e002      	b.n	8001712 <BNO_Page0Adress+0x4a2>
			break;
 800170c:	bf00      	nop
 800170e:	e000      	b.n	8001712 <BNO_Page0Adress+0x4a2>
			if(BNO_RxBuffer[1] != 160) return;
 8001710:	bf00      	nop
	}
}
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	f3af 8000 	nop.w
 8001720:	00000000 	.word	0x00000000
 8001724:	40590000 	.word	0x40590000
 8001728:	24000174 	.word	0x24000174
 800172c:	24000280 	.word	0x24000280
 8001730:	24000275 	.word	0x24000275

08001734 <BNO_Page1Adress>:

void BNO_Page1Adress(void){
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 8001738:	4b09      	ldr	r3, [pc, #36]	@ (8001760 <BNO_Page1Adress+0x2c>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b07      	cmp	r3, #7
 800173e:	d108      	bne.n	8001752 <BNO_Page1Adress+0x1e>
		case BNO055_PAGE_ID:
			IMU.Page = BNO_RxBuffer[1];
 8001740:	4b07      	ldr	r3, [pc, #28]	@ (8001760 <BNO_Page1Adress+0x2c>)
 8001742:	785a      	ldrb	r2, [r3, #1]
 8001744:	4b07      	ldr	r3, [pc, #28]	@ (8001764 <BNO_Page1Adress+0x30>)
 8001746:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			BNO_ErrorHandler = ReadSucces;
 800174a:	4b07      	ldr	r3, [pc, #28]	@ (8001768 <BNO_Page1Adress+0x34>)
 800174c:	220b      	movs	r2, #11
 800174e:	701a      	strb	r2, [r3, #0]
			break;
 8001750:	e000      	b.n	8001754 <BNO_Page1Adress+0x20>

		default:
			break;
 8001752:	bf00      	nop
	}
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	24000174 	.word	0x24000174
 8001764:	24000280 	.word	0x24000280
 8001768:	24000275 	.word	0x24000275

0800176c <BNO_EmptyingBuffer>:

void BNO_EmptyingBuffer(void){
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
	switch (IMU.Page) {
 8001770:	4b0a      	ldr	r3, [pc, #40]	@ (800179c <BNO_EmptyingBuffer+0x30>)
 8001772:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001776:	2b00      	cmp	r3, #0
 8001778:	d002      	beq.n	8001780 <BNO_EmptyingBuffer+0x14>
 800177a:	2b01      	cmp	r3, #1
 800177c:	d003      	beq.n	8001786 <BNO_EmptyingBuffer+0x1a>
			break;
		case 1:
			BNO_Page1Adress();
			break;
		default:
			break;
 800177e:	e005      	b.n	800178c <BNO_EmptyingBuffer+0x20>
			BNO_Page0Adress();
 8001780:	f7ff fd76 	bl	8001270 <BNO_Page0Adress>
			break;
 8001784:	e002      	b.n	800178c <BNO_EmptyingBuffer+0x20>
			BNO_Page1Adress();
 8001786:	f7ff ffd5 	bl	8001734 <BNO_Page1Adress>
			break;
 800178a:	bf00      	nop
	}
	memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 800178c:	22ff      	movs	r2, #255	@ 0xff
 800178e:	2100      	movs	r1, #0
 8001790:	4803      	ldr	r0, [pc, #12]	@ (80017a0 <BNO_EmptyingBuffer+0x34>)
 8001792:	f012 fcd7 	bl	8014144 <memset>
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	24000280 	.word	0x24000280
 80017a0:	24000174 	.word	0x24000174

080017a4 <BNO_SWReset>:



}

void BNO_SWReset(void){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
	BNO_Write(BNO055_SYS_TRIGGER,0x20);
 80017a8:	2120      	movs	r1, #32
 80017aa:	203f      	movs	r0, #63	@ 0x3f
 80017ac:	f7ff fcca 	bl	8001144 <BNO_Write>
	bno055_delay(70);
 80017b0:	2046      	movs	r0, #70	@ 0x46
 80017b2:	f7ff fc8d 	bl	80010d0 <bno055_delay>
	IMU.ID = 0x00;
 80017b6:	4b04      	ldr	r3, [pc, #16]	@ (80017c8 <BNO_SWReset+0x24>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
	BNO_CurrentState = Config;
 80017bc:	4b03      	ldr	r3, [pc, #12]	@ (80017cc <BNO_SWReset+0x28>)
 80017be:	2201      	movs	r2, #1
 80017c0:	701a      	strb	r2, [r3, #0]
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	24000280 	.word	0x24000280
 80017cc:	24000278 	.word	0x24000278

080017d0 <bno055_setOperationMode>:

void bno055_setOperationMode(bno055_opmode_t mode) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
  BNO_Write(BNO055_OPR_MODE, mode);
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	4619      	mov	r1, r3
 80017de:	203d      	movs	r0, #61	@ 0x3d
 80017e0:	f7ff fcb0 	bl	8001144 <BNO_Write>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d103      	bne.n	80017f2 <bno055_setOperationMode+0x22>
    bno055_delay(5);
 80017ea:	2005      	movs	r0, #5
 80017ec:	f7ff fc70 	bl	80010d0 <bno055_delay>
  } else {
    bno055_delay(3);
  }
}
 80017f0:	e002      	b.n	80017f8 <bno055_setOperationMode+0x28>
    bno055_delay(3);
 80017f2:	2003      	movs	r0, #3
 80017f4:	f7ff fc6c 	bl	80010d0 <bno055_delay>
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001804:	2000      	movs	r0, #0
 8001806:	f7ff ffe3 	bl	80017d0 <bno055_setOperationMode>
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}

0800180e <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 800180e:	b580      	push	{r7, lr}
 8001810:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001812:	200c      	movs	r0, #12
 8001814:	f7ff ffdc 	bl	80017d0 <bno055_setOperationMode>
}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}

0800181c <BNO_GetCalibrationData>:

void BNO_GetCalibrationData(void){
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_OFFSET_X_LSB, 22);
 8001820:	2116      	movs	r1, #22
 8001822:	2055      	movs	r0, #85	@ 0x55
 8001824:	f7ff fc68 	bl	80010f8 <BNO_Read>
}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}

0800182c <BNO_SetCalibrationData>:

void BNO_SetCalibrationData(void){
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
	uint8_t buffer[22];

	  memcpy(&IMU.Calibration_Data.offset.accel, buffer, 6);
 8001832:	463b      	mov	r3, r7
 8001834:	2206      	movs	r2, #6
 8001836:	4619      	mov	r1, r3
 8001838:	4814      	ldr	r0, [pc, #80]	@ (800188c <BNO_SetCalibrationData+0x60>)
 800183a:	f012 fcb5 	bl	80141a8 <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.mag, buffer + 6, 6);
 800183e:	463b      	mov	r3, r7
 8001840:	3306      	adds	r3, #6
 8001842:	2206      	movs	r2, #6
 8001844:	4619      	mov	r1, r3
 8001846:	4812      	ldr	r0, [pc, #72]	@ (8001890 <BNO_SetCalibrationData+0x64>)
 8001848:	f012 fcae 	bl	80141a8 <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.gyro, buffer + 12, 6);
 800184c:	463b      	mov	r3, r7
 800184e:	330c      	adds	r3, #12
 8001850:	2206      	movs	r2, #6
 8001852:	4619      	mov	r1, r3
 8001854:	480f      	ldr	r0, [pc, #60]	@ (8001894 <BNO_SetCalibrationData+0x68>)
 8001856:	f012 fca7 	bl	80141a8 <memcpy>
	  memcpy(&IMU.Calibration_Data.radius.accel, buffer + 18, 2);
 800185a:	463b      	mov	r3, r7
 800185c:	3312      	adds	r3, #18
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	b29a      	uxth	r2, r3
 8001862:	4b0d      	ldr	r3, [pc, #52]	@ (8001898 <BNO_SetCalibrationData+0x6c>)
 8001864:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
	  memcpy(&IMU.Calibration_Data.radius.mag, buffer + 20, 2);
 8001868:	463b      	mov	r3, r7
 800186a:	3314      	adds	r3, #20
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	b29a      	uxth	r2, r3
 8001870:	4b09      	ldr	r3, [pc, #36]	@ (8001898 <BNO_SetCalibrationData+0x6c>)
 8001872:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

	BNO_Write_MB(BNO055_ACC_OFFSET_X_LSB, 22, buffer);
 8001876:	463b      	mov	r3, r7
 8001878:	461a      	mov	r2, r3
 800187a:	2116      	movs	r1, #22
 800187c:	2055      	movs	r0, #85	@ 0x55
 800187e:	f7ff fc83 	bl	8001188 <BNO_Write_MB>
}
 8001882:	bf00      	nop
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	24000316 	.word	0x24000316
 8001890:	24000310 	.word	0x24000310
 8001894:	2400030a 	.word	0x2400030a
 8001898:	24000280 	.word	0x24000280

0800189c <BNO_Init>:

void BNO_Init(void){
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, SET);
 80018a0:	2201      	movs	r2, #1
 80018a2:	2104      	movs	r1, #4
 80018a4:	4808      	ldr	r0, [pc, #32]	@ (80018c8 <BNO_Init+0x2c>)
 80018a6:	f006 faff 	bl	8007ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IMU_BOOT_GPIO_Port, IMU_BOOT_Pin, SET);
 80018aa:	2201      	movs	r2, #1
 80018ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018b0:	4806      	ldr	r0, [pc, #24]	@ (80018cc <BNO_Init+0x30>)
 80018b2:	f006 faf9 	bl	8007ea8 <HAL_GPIO_WritePin>

	bno055_delay(100);
 80018b6:	2064      	movs	r0, #100	@ 0x64
 80018b8:	f7ff fc0a 	bl	80010d0 <bno055_delay>

	BNO_CurrentState = Reset;
 80018bc:	4b04      	ldr	r3, [pc, #16]	@ (80018d0 <BNO_Init+0x34>)
 80018be:	2204      	movs	r2, #4
 80018c0:	701a      	strb	r2, [r3, #0]
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	58020c00 	.word	0x58020c00
 80018cc:	58020400 	.word	0x58020400
 80018d0:	24000278 	.word	0x24000278

080018d4 <BNO_Config>:

void BNO_Config(void){
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
	static uint8_t ConfigFlag = 0;

	switch (ConfigFlag) {
 80018d8:	4b20      	ldr	r3, [pc, #128]	@ (800195c <BNO_Config+0x88>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b03      	cmp	r3, #3
 80018de:	d839      	bhi.n	8001954 <BNO_Config+0x80>
 80018e0:	a201      	add	r2, pc, #4	@ (adr r2, 80018e8 <BNO_Config+0x14>)
 80018e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e6:	bf00      	nop
 80018e8:	080018f9 	.word	0x080018f9
 80018ec:	08001909 	.word	0x08001909
 80018f0:	08001915 	.word	0x08001915
 80018f4:	08001937 	.word	0x08001937
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 80018f8:	2100      	movs	r1, #0
 80018fa:	203f      	movs	r0, #63	@ 0x3f
 80018fc:	f7ff fc22 	bl	8001144 <BNO_Write>
			ConfigFlag = 1;
 8001900:	4b16      	ldr	r3, [pc, #88]	@ (800195c <BNO_Config+0x88>)
 8001902:	2201      	movs	r2, #1
 8001904:	701a      	strb	r2, [r3, #0]
			break;
 8001906:	e026      	b.n	8001956 <BNO_Config+0x82>
		case 1:
			bno055_setOperationModeConfig();
 8001908:	f7ff ff7a 	bl	8001800 <bno055_setOperationModeConfig>
			ConfigFlag = 2;
 800190c:	4b13      	ldr	r3, [pc, #76]	@ (800195c <BNO_Config+0x88>)
 800190e:	2202      	movs	r2, #2
 8001910:	701a      	strb	r2, [r3, #0]
			break;
 8001912:	e020      	b.n	8001956 <BNO_Config+0x82>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 8001914:	2101      	movs	r1, #1
 8001916:	203d      	movs	r0, #61	@ 0x3d
 8001918:	f7ff fbee 	bl	80010f8 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 800191c:	4b10      	ldr	r3, [pc, #64]	@ (8001960 <BNO_Config+0x8c>)
 800191e:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001922:	2b00      	cmp	r3, #0
 8001924:	d103      	bne.n	800192e <BNO_Config+0x5a>
				ConfigFlag = 3;
 8001926:	4b0d      	ldr	r3, [pc, #52]	@ (800195c <BNO_Config+0x88>)
 8001928:	2203      	movs	r2, #3
 800192a:	701a      	strb	r2, [r3, #0]
			}
			else ConfigFlag = 1;
			break;
 800192c:	e013      	b.n	8001956 <BNO_Config+0x82>
			else ConfigFlag = 1;
 800192e:	4b0b      	ldr	r3, [pc, #44]	@ (800195c <BNO_Config+0x88>)
 8001930:	2201      	movs	r2, #1
 8001932:	701a      	strb	r2, [r3, #0]
			break;
 8001934:	e00f      	b.n	8001956 <BNO_Config+0x82>
		case 3:
			BNO_Read(BNO055_CHIP_ID, 4);
 8001936:	2104      	movs	r1, #4
 8001938:	2000      	movs	r0, #0
 800193a:	f7ff fbdd 	bl	80010f8 <BNO_Read>

			if(IMU.ID == BNO055_ID){
 800193e:	4b08      	ldr	r3, [pc, #32]	@ (8001960 <BNO_Config+0x8c>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2ba0      	cmp	r3, #160	@ 0xa0
 8001944:	d102      	bne.n	800194c <BNO_Config+0x78>
				BNO_CurrentState = Calibration;
 8001946:	4b07      	ldr	r3, [pc, #28]	@ (8001964 <BNO_Config+0x90>)
 8001948:	2202      	movs	r2, #2
 800194a:	701a      	strb	r2, [r3, #0]
			}
			ConfigFlag = 0;
 800194c:	4b03      	ldr	r3, [pc, #12]	@ (800195c <BNO_Config+0x88>)
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
			break;
 8001952:	e000      	b.n	8001956 <BNO_Config+0x82>
		default:
			break;
 8001954:	bf00      	nop
	}

}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	24000320 	.word	0x24000320
 8001960:	24000280 	.word	0x24000280
 8001964:	24000278 	.word	0x24000278

08001968 <BNO_CalibrationStatus>:

void BNO_CalibrationStatus(void){
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
	static uint8_t CalibrationFlag = 0;
	static uint8_t Calibrated = 1;

	switch (CalibrationFlag) {
 800196c:	4b3d      	ldr	r3, [pc, #244]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b07      	cmp	r3, #7
 8001972:	d870      	bhi.n	8001a56 <BNO_CalibrationStatus+0xee>
 8001974:	a201      	add	r2, pc, #4	@ (adr r2, 800197c <BNO_CalibrationStatus+0x14>)
 8001976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197a:	bf00      	nop
 800197c:	0800199d 	.word	0x0800199d
 8001980:	080019ad 	.word	0x080019ad
 8001984:	080019b9 	.word	0x080019b9
 8001988:	080019f1 	.word	0x080019f1
 800198c:	08001a0b 	.word	0x08001a0b
 8001990:	08001a17 	.word	0x08001a17
 8001994:	08001a39 	.word	0x08001a39
 8001998:	08001a4b 	.word	0x08001a4b
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 800199c:	2100      	movs	r1, #0
 800199e:	203f      	movs	r0, #63	@ 0x3f
 80019a0:	f7ff fbd0 	bl	8001144 <BNO_Write>
			CalibrationFlag = 1;
 80019a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	701a      	strb	r2, [r3, #0]
			break;
 80019aa:	e059      	b.n	8001a60 <BNO_CalibrationStatus+0xf8>
		case 1:
			bno055_setOperationModeNDOF();
 80019ac:	f7ff ff2f 	bl	800180e <bno055_setOperationModeNDOF>
			CalibrationFlag = 2;
 80019b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 80019b2:	2202      	movs	r2, #2
 80019b4:	701a      	strb	r2, [r3, #0]
			break;
 80019b6:	e053      	b.n	8001a60 <BNO_CalibrationStatus+0xf8>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 80019b8:	2101      	movs	r1, #1
 80019ba:	203d      	movs	r0, #61	@ 0x3d
 80019bc:	f7ff fb9c 	bl	80010f8 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_NDOF){
 80019c0:	4b29      	ldr	r3, [pc, #164]	@ (8001a68 <BNO_CalibrationStatus+0x100>)
 80019c2:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 80019c6:	2b0c      	cmp	r3, #12
 80019c8:	d10e      	bne.n	80019e8 <BNO_CalibrationStatus+0x80>
				if(Calibrated){
 80019ca:	4b28      	ldr	r3, [pc, #160]	@ (8001a6c <BNO_CalibrationStatus+0x104>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d006      	beq.n	80019e0 <BNO_CalibrationStatus+0x78>
					CalibrationFlag = 0;
 80019d2:	4b24      	ldr	r3, [pc, #144]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
					BNO_CurrentState = Operation;
 80019d8:	4b25      	ldr	r3, [pc, #148]	@ (8001a70 <BNO_CalibrationStatus+0x108>)
 80019da:	2203      	movs	r2, #3
 80019dc:	701a      	strb	r2, [r3, #0]
				}
				else CalibrationFlag = 3;
			}
			else CalibrationFlag = 1;
			break;
 80019de:	e03f      	b.n	8001a60 <BNO_CalibrationStatus+0xf8>
				else CalibrationFlag = 3;
 80019e0:	4b20      	ldr	r3, [pc, #128]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 80019e2:	2203      	movs	r2, #3
 80019e4:	701a      	strb	r2, [r3, #0]
			break;
 80019e6:	e03b      	b.n	8001a60 <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 1;
 80019e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	701a      	strb	r2, [r3, #0]
			break;
 80019ee:	e037      	b.n	8001a60 <BNO_CalibrationStatus+0xf8>
		case 3:
			BNO_Read(BNO055_CALIB_STAT, 1);
 80019f0:	2101      	movs	r1, #1
 80019f2:	2035      	movs	r0, #53	@ 0x35
 80019f4:	f7ff fb80 	bl	80010f8 <BNO_Read>
			if(IMU.CalSatus.Full == 0xFF){
 80019f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a68 <BNO_CalibrationStatus+0x100>)
 80019fa:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 80019fe:	2bff      	cmp	r3, #255	@ 0xff
 8001a00:	d12d      	bne.n	8001a5e <BNO_CalibrationStatus+0xf6>
				CalibrationFlag = 4;
 8001a02:	4b18      	ldr	r3, [pc, #96]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 8001a04:	2204      	movs	r2, #4
 8001a06:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001a08:	e029      	b.n	8001a5e <BNO_CalibrationStatus+0xf6>
		case 4:
			bno055_setOperationModeConfig();
 8001a0a:	f7ff fef9 	bl	8001800 <bno055_setOperationModeConfig>
			CalibrationFlag = 5;
 8001a0e:	4b15      	ldr	r3, [pc, #84]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 8001a10:	2205      	movs	r2, #5
 8001a12:	701a      	strb	r2, [r3, #0]
			break;
 8001a14:	e024      	b.n	8001a60 <BNO_CalibrationStatus+0xf8>
		case 5:
			BNO_Read(BNO055_OPR_MODE, 1);
 8001a16:	2101      	movs	r1, #1
 8001a18:	203d      	movs	r0, #61	@ 0x3d
 8001a1a:	f7ff fb6d 	bl	80010f8 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 8001a1e:	4b12      	ldr	r3, [pc, #72]	@ (8001a68 <BNO_CalibrationStatus+0x100>)
 8001a20:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d103      	bne.n	8001a30 <BNO_CalibrationStatus+0xc8>
				CalibrationFlag = 6;
 8001a28:	4b0e      	ldr	r3, [pc, #56]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 8001a2a:	2206      	movs	r2, #6
 8001a2c:	701a      	strb	r2, [r3, #0]

			}
			else CalibrationFlag = 4;
			break;
 8001a2e:	e017      	b.n	8001a60 <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 4;
 8001a30:	4b0c      	ldr	r3, [pc, #48]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 8001a32:	2204      	movs	r2, #4
 8001a34:	701a      	strb	r2, [r3, #0]
			break;
 8001a36:	e013      	b.n	8001a60 <BNO_CalibrationStatus+0xf8>
		case 6:
			BNO_GetCalibrationData();
 8001a38:	f7ff fef0 	bl	800181c <BNO_GetCalibrationData>
			Calibrated = 1;
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a6c <BNO_CalibrationStatus+0x104>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	701a      	strb	r2, [r3, #0]
			CalibrationFlag = 1;
 8001a42:	4b08      	ldr	r3, [pc, #32]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	701a      	strb	r2, [r3, #0]
			break;
 8001a48:	e00a      	b.n	8001a60 <BNO_CalibrationStatus+0xf8>
		case 7:
			BNO_SetCalibrationData();
 8001a4a:	f7ff feef 	bl	800182c <BNO_SetCalibrationData>
			CalibrationFlag = 1;
 8001a4e:	4b05      	ldr	r3, [pc, #20]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
			break;
 8001a54:	e004      	b.n	8001a60 <BNO_CalibrationStatus+0xf8>
		default:
			CalibrationFlag = 0;
 8001a56:	4b03      	ldr	r3, [pc, #12]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
			break;
 8001a5c:	e000      	b.n	8001a60 <BNO_CalibrationStatus+0xf8>
			break;
 8001a5e:	bf00      	nop
    	BNO_CurrentState = Operation;
    }
    else bno055_setOperationModeNDOF();
    */

}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	24000321 	.word	0x24000321
 8001a68:	24000280 	.word	0x24000280
 8001a6c:	24000000 	.word	0x24000000
 8001a70:	24000278 	.word	0x24000278

08001a74 <BNO_GetData>:

void BNO_GetData(void){
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_DATA_X_LSB,24);
 8001a78:	2118      	movs	r1, #24
 8001a7a:	2008      	movs	r0, #8
 8001a7c:	f7ff fb3c 	bl	80010f8 <BNO_Read>
}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <BNO_Receive>:

void BNO_Receive(uint8_t Buffer){
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
	static uint8_t MsgSize = 0;
	static uint8_t Counter = 0;

	BNO_ComsCounter = 0;
 8001a8e:	4b2c      	ldr	r3, [pc, #176]	@ (8001b40 <BNO_Receive+0xbc>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]

	switch (BNO_Rx_Status) {
 8001a94:	4b2b      	ldr	r3, [pc, #172]	@ (8001b44 <BNO_Receive+0xc0>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2bff      	cmp	r3, #255	@ 0xff
 8001a9a:	d027      	beq.n	8001aec <BNO_Receive+0x68>
 8001a9c:	2bff      	cmp	r3, #255	@ 0xff
 8001a9e:	dc46      	bgt.n	8001b2e <BNO_Receive+0xaa>
 8001aa0:	2bee      	cmp	r3, #238	@ 0xee
 8001aa2:	d017      	beq.n	8001ad4 <BNO_Receive+0x50>
 8001aa4:	2bee      	cmp	r3, #238	@ 0xee
 8001aa6:	dc42      	bgt.n	8001b2e <BNO_Receive+0xaa>
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d002      	beq.n	8001ab2 <BNO_Receive+0x2e>
 8001aac:	2bbb      	cmp	r3, #187	@ 0xbb
 8001aae:	d00a      	beq.n	8001ac6 <BNO_Receive+0x42>
				BNO_EmptyingBuffer();
			}

			break;
		default:
			break;
 8001ab0:	e03d      	b.n	8001b2e <BNO_Receive+0xaa>
			if(Buffer == Read_Response || Buffer == Header) BNO_Rx_Status = Buffer;
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	2bbb      	cmp	r3, #187	@ 0xbb
 8001ab6:	d002      	beq.n	8001abe <BNO_Receive+0x3a>
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	2bee      	cmp	r3, #238	@ 0xee
 8001abc:	d139      	bne.n	8001b32 <BNO_Receive+0xae>
 8001abe:	4a21      	ldr	r2, [pc, #132]	@ (8001b44 <BNO_Receive+0xc0>)
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	7013      	strb	r3, [r2, #0]
			break;
 8001ac4:	e035      	b.n	8001b32 <BNO_Receive+0xae>
			MsgSize = Buffer;
 8001ac6:	4a20      	ldr	r2, [pc, #128]	@ (8001b48 <BNO_Receive+0xc4>)
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = Emptying_Buffer;
 8001acc:	4b1d      	ldr	r3, [pc, #116]	@ (8001b44 <BNO_Receive+0xc0>)
 8001ace:	22ff      	movs	r2, #255	@ 0xff
 8001ad0:	701a      	strb	r2, [r3, #0]
			break;
 8001ad2:	e031      	b.n	8001b38 <BNO_Receive+0xb4>
			BNO_ErrorHandler = Buffer;
 8001ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8001b4c <BNO_Receive+0xc8>)
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = AwaitingMsg;
 8001ada:	4b1a      	ldr	r3, [pc, #104]	@ (8001b44 <BNO_Receive+0xc0>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]
			memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 8001ae0:	22ff      	movs	r2, #255	@ 0xff
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	481a      	ldr	r0, [pc, #104]	@ (8001b50 <BNO_Receive+0xcc>)
 8001ae6:	f012 fb2d 	bl	8014144 <memset>
			break;
 8001aea:	e025      	b.n	8001b38 <BNO_Receive+0xb4>
			BNO_RxBuffer[Counter + 1] = Buffer;
 8001aec:	4b19      	ldr	r3, [pc, #100]	@ (8001b54 <BNO_Receive+0xd0>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	3301      	adds	r3, #1
 8001af2:	4917      	ldr	r1, [pc, #92]	@ (8001b50 <BNO_Receive+0xcc>)
 8001af4:	79fa      	ldrb	r2, [r7, #7]
 8001af6:	54ca      	strb	r2, [r1, r3]
			Counter++;
 8001af8:	4b16      	ldr	r3, [pc, #88]	@ (8001b54 <BNO_Receive+0xd0>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	3301      	adds	r3, #1
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	4b14      	ldr	r3, [pc, #80]	@ (8001b54 <BNO_Receive+0xd0>)
 8001b02:	701a      	strb	r2, [r3, #0]
			if(Counter == MsgSize){
 8001b04:	4b13      	ldr	r3, [pc, #76]	@ (8001b54 <BNO_Receive+0xd0>)
 8001b06:	781a      	ldrb	r2, [r3, #0]
 8001b08:	4b0f      	ldr	r3, [pc, #60]	@ (8001b48 <BNO_Receive+0xc4>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d112      	bne.n	8001b36 <BNO_Receive+0xb2>
				Counter = 0;
 8001b10:	4b10      	ldr	r3, [pc, #64]	@ (8001b54 <BNO_Receive+0xd0>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	701a      	strb	r2, [r3, #0]
				MsgSize = 0;
 8001b16:	4b0c      	ldr	r3, [pc, #48]	@ (8001b48 <BNO_Receive+0xc4>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]
				BNO_Rx_Status = AwaitingMsg;
 8001b1c:	4b09      	ldr	r3, [pc, #36]	@ (8001b44 <BNO_Receive+0xc0>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
				BNO_ErrorHandler = ReadSucces;
 8001b22:	4b0a      	ldr	r3, [pc, #40]	@ (8001b4c <BNO_Receive+0xc8>)
 8001b24:	220b      	movs	r2, #11
 8001b26:	701a      	strb	r2, [r3, #0]
				BNO_EmptyingBuffer();
 8001b28:	f7ff fe20 	bl	800176c <BNO_EmptyingBuffer>
			break;
 8001b2c:	e003      	b.n	8001b36 <BNO_Receive+0xb2>
			break;
 8001b2e:	bf00      	nop
 8001b30:	e002      	b.n	8001b38 <BNO_Receive+0xb4>
			break;
 8001b32:	bf00      	nop
 8001b34:	e000      	b.n	8001b38 <BNO_Receive+0xb4>
			break;
 8001b36:	bf00      	nop
	}
}
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	24000276 	.word	0x24000276
 8001b44:	24000274 	.word	0x24000274
 8001b48:	24000322 	.word	0x24000322
 8001b4c:	24000275 	.word	0x24000275
 8001b50:	24000174 	.word	0x24000174
 8001b54:	24000323 	.word	0x24000323

08001b58 <BNO_FaultManager>:

void BNO_FaultManager(void){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
	if(BNO_ComsCounter > 3){
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b90 <BNO_FaultManager+0x38>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d912      	bls.n	8001b8a <BNO_FaultManager+0x32>
		Reset_UART(&huart3);
 8001b64:	480b      	ldr	r0, [pc, #44]	@ (8001b94 <BNO_FaultManager+0x3c>)
 8001b66:	f002 fb55 	bl	8004214 <Reset_UART>
		BNO_ComsCounter = 0;
 8001b6a:	4b09      	ldr	r3, [pc, #36]	@ (8001b90 <BNO_FaultManager+0x38>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]
		BNO_Rx_Status = AwaitingMsg;
 8001b70:	4b09      	ldr	r3, [pc, #36]	@ (8001b98 <BNO_FaultManager+0x40>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8001b76:	2201      	movs	r2, #1
 8001b78:	4908      	ldr	r1, [pc, #32]	@ (8001b9c <BNO_FaultManager+0x44>)
 8001b7a:	4806      	ldr	r0, [pc, #24]	@ (8001b94 <BNO_FaultManager+0x3c>)
 8001b7c:	f00b fc06 	bl	800d38c <HAL_UART_Receive_DMA>
		memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 8001b80:	22ff      	movs	r2, #255	@ 0xff
 8001b82:	2100      	movs	r1, #0
 8001b84:	4806      	ldr	r0, [pc, #24]	@ (8001ba0 <BNO_FaultManager+0x48>)
 8001b86:	f012 fadd 	bl	8014144 <memset>
	}
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	24000276 	.word	0x24000276
 8001b94:	240028bc 	.word	0x240028bc
 8001b98:	24000274 	.word	0x24000274
 8001b9c:	24000273 	.word	0x24000273
 8001ba0:	24000174 	.word	0x24000174

08001ba4 <BNO_Tasks>:

void BNO_Tasks(void){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
	if(BNO_DelayCounter == 0){
 8001ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c18 <BNO_Tasks+0x74>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d128      	bne.n	8001c02 <BNO_Tasks+0x5e>
		switch (BNO_CurrentState) {
 8001bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c1c <BNO_Tasks+0x78>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d81c      	bhi.n	8001bf2 <BNO_Tasks+0x4e>
 8001bb8:	a201      	add	r2, pc, #4	@ (adr r2, 8001bc0 <BNO_Tasks+0x1c>)
 8001bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bbe:	bf00      	nop
 8001bc0:	08001bd5 	.word	0x08001bd5
 8001bc4:	08001be1 	.word	0x08001be1
 8001bc8:	08001be7 	.word	0x08001be7
 8001bcc:	08001bed 	.word	0x08001bed
 8001bd0:	08001bdb 	.word	0x08001bdb
			case Init:
				BNO_Init();
 8001bd4:	f7ff fe62 	bl	800189c <BNO_Init>
				break;
 8001bd8:	e00c      	b.n	8001bf4 <BNO_Tasks+0x50>
			case Reset:
				BNO_SWReset();
 8001bda:	f7ff fde3 	bl	80017a4 <BNO_SWReset>
			break;
 8001bde:	e009      	b.n	8001bf4 <BNO_Tasks+0x50>
			case Config:
				BNO_Config();
 8001be0:	f7ff fe78 	bl	80018d4 <BNO_Config>
				break;
 8001be4:	e006      	b.n	8001bf4 <BNO_Tasks+0x50>
			case Calibration:
				BNO_CalibrationStatus();
 8001be6:	f7ff febf 	bl	8001968 <BNO_CalibrationStatus>
				break;
 8001bea:	e003      	b.n	8001bf4 <BNO_Tasks+0x50>
			case Operation:
				BNO_GetData();
 8001bec:	f7ff ff42 	bl	8001a74 <BNO_GetData>
				break;
 8001bf0:	e000      	b.n	8001bf4 <BNO_Tasks+0x50>

			default:
				break;
 8001bf2:	bf00      	nop
		}
		++BNO_ComsCounter;
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8001c20 <BNO_Tasks+0x7c>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	4b08      	ldr	r3, [pc, #32]	@ (8001c20 <BNO_Tasks+0x7c>)
 8001bfe:	701a      	strb	r2, [r3, #0]
 8001c00:	e005      	b.n	8001c0e <BNO_Tasks+0x6a>
	}
	else{
		--BNO_DelayCounter;
 8001c02:	4b05      	ldr	r3, [pc, #20]	@ (8001c18 <BNO_Tasks+0x74>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4b03      	ldr	r3, [pc, #12]	@ (8001c18 <BNO_Tasks+0x74>)
 8001c0c:	701a      	strb	r2, [r3, #0]
	}
	BNO_FaultManager();
 8001c0e:	f7ff ffa3 	bl	8001b58 <BNO_FaultManager>
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	24000277 	.word	0x24000277
 8001c1c:	24000278 	.word	0x24000278
 8001c20:	24000276 	.word	0x24000276

08001c24 <LED_blink>:

		.G_LED.LED_GPIO_GPIOx = LED_5_GPIO_Port,
		.G_LED.LED_GPIO_Pin   = LED_5_Pin
};

LED_config_t LED_blink(LED_config_t LED){
 8001c24:	b084      	sub	sp, #16
 8001c26:	b590      	push	{r4, r7, lr}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	f107 001c 	add.w	r0, r7, #28
 8001c32:	e880 000e 	stmia.w	r0, {r1, r2, r3}

		switch (LED.Blink_status) {
 8001c36:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d002      	beq.n	8001c44 <LED_blink+0x20>
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d010      	beq.n	8001c64 <LED_blink+0x40>
 8001c42:	e01f      	b.n	8001c84 <LED_blink+0x60>
			case 0x00:
				if(LED.count >= LED.Time_Off){
 8001c44:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001c46:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d31f      	bcc.n	8001c8c <LED_blink+0x68>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	8c39      	ldrh	r1, [r7, #32]
 8001c50:	2201      	movs	r2, #1
 8001c52:	4618      	mov	r0, r3
 8001c54:	f006 f928 	bl	8007ea8 <HAL_GPIO_WritePin>
					LED.Blink_status = 1;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 8001c62:	e013      	b.n	8001c8c <LED_blink+0x68>
			case 0x01:
				if(LED.count >= LED.Time_On){
 8001c64:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001c66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d311      	bcc.n	8001c90 <LED_blink+0x6c>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	8c39      	ldrh	r1, [r7, #32]
 8001c70:	2200      	movs	r2, #0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f006 f918 	bl	8007ea8 <HAL_GPIO_WritePin>
					LED.Blink_status = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 8001c82:	e005      	b.n	8001c90 <LED_blink+0x6c>
			default:
				LED.Blink_status = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
				break;
 8001c8a:	e002      	b.n	8001c92 <LED_blink+0x6e>
				break;
 8001c8c:	bf00      	nop
 8001c8e:	e000      	b.n	8001c92 <LED_blink+0x6e>
				break;
 8001c90:	bf00      	nop
		}

	LED.count++;
 8001c92:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001c94:	3301      	adds	r3, #1
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	853b      	strh	r3, [r7, #40]	@ 0x28
	return LED;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	461c      	mov	r4, r3
 8001c9e:	f107 031c 	add.w	r3, r7, #28
 8001ca2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ca4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001cb2:	b004      	add	sp, #16
 8001cb4:	4770      	bx	lr

08001cb6 <LED_Rutine>:

LED_config_t LED_Rutine(LED_config_t LED){
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	b590      	push	{r4, r7, lr}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af02      	add	r7, sp, #8
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	f107 001c 	add.w	r0, r7, #28
 8001cc4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(LED.LED_status == 1){
 8001cc8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d117      	bne.n	8001d00 <LED_Rutine+0x4a>
		switch (LED.Sequence) {
 8001cd0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d002      	beq.n	8001cde <LED_Rutine+0x28>
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d007      	beq.n	8001cec <LED_Rutine+0x36>
				break;
			case Blink:
				LED = LED_blink(LED);
				break;
			default:
				break;
 8001cdc:	e018      	b.n	8001d10 <LED_Rutine+0x5a>
				HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	8c39      	ldrh	r1, [r7, #32]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f006 f8df 	bl	8007ea8 <HAL_GPIO_WritePin>
				break;
 8001cea:	e011      	b.n	8001d10 <LED_Rutine+0x5a>
				LED = LED_blink(LED);
 8001cec:	f107 001c 	add.w	r0, r7, #28
 8001cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	f107 031c 	add.w	r3, r7, #28
 8001cf8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cfa:	f7ff ff93 	bl	8001c24 <LED_blink>
				break;
 8001cfe:	e007      	b.n	8001d10 <LED_Rutine+0x5a>
		}
	}
	else{
		HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	8c39      	ldrh	r1, [r7, #32]
 8001d04:	2200      	movs	r2, #0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f006 f8ce 	bl	8007ea8 <HAL_GPIO_WritePin>
		LED.count = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	853b      	strh	r3, [r7, #40]	@ 0x28
	}
	return LED;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	461c      	mov	r4, r3
 8001d14:	f107 031c 	add.w	r3, r7, #28
 8001d18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001d28:	b004      	add	sp, #16
 8001d2a:	4770      	bx	lr

08001d2c <LED_Tasks>:

void LED_Tasks (void){
 8001d2c:	b590      	push	{r4, r7, lr}
 8001d2e:	b087      	sub	sp, #28
 8001d30:	af02      	add	r7, sp, #8
	LED_Info.R_LED = LED_Rutine(LED_Info.R_LED);
 8001d32:	4c24      	ldr	r4, [pc, #144]	@ (8001dc4 <LED_Tasks+0x98>)
 8001d34:	4638      	mov	r0, r7
 8001d36:	4b23      	ldr	r3, [pc, #140]	@ (8001dc4 <LED_Tasks+0x98>)
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	9200      	str	r2, [sp, #0]
 8001d3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d3e:	f7ff ffba 	bl	8001cb6 <LED_Rutine>
 8001d42:	463b      	mov	r3, r7
 8001d44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED1 = LED_Rutine(LED_Info.B_LED1);
 8001d4a:	4c1e      	ldr	r4, [pc, #120]	@ (8001dc4 <LED_Tasks+0x98>)
 8001d4c:	4638      	mov	r0, r7
 8001d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc4 <LED_Tasks+0x98>)
 8001d50:	69da      	ldr	r2, [r3, #28]
 8001d52:	9200      	str	r2, [sp, #0]
 8001d54:	3310      	adds	r3, #16
 8001d56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d58:	f7ff ffad 	bl	8001cb6 <LED_Rutine>
 8001d5c:	3410      	adds	r4, #16
 8001d5e:	463b      	mov	r3, r7
 8001d60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED2 = LED_Rutine(LED_Info.B_LED2);
 8001d66:	4c17      	ldr	r4, [pc, #92]	@ (8001dc4 <LED_Tasks+0x98>)
 8001d68:	4638      	mov	r0, r7
 8001d6a:	4b16      	ldr	r3, [pc, #88]	@ (8001dc4 <LED_Tasks+0x98>)
 8001d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d6e:	9200      	str	r2, [sp, #0]
 8001d70:	3320      	adds	r3, #32
 8001d72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d74:	f7ff ff9f 	bl	8001cb6 <LED_Rutine>
 8001d78:	3420      	adds	r4, #32
 8001d7a:	463b      	mov	r3, r7
 8001d7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED3 = LED_Rutine(LED_Info.B_LED3);
 8001d82:	4c10      	ldr	r4, [pc, #64]	@ (8001dc4 <LED_Tasks+0x98>)
 8001d84:	4638      	mov	r0, r7
 8001d86:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc4 <LED_Tasks+0x98>)
 8001d88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d8a:	9200      	str	r2, [sp, #0]
 8001d8c:	3330      	adds	r3, #48	@ 0x30
 8001d8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d90:	f7ff ff91 	bl	8001cb6 <LED_Rutine>
 8001d94:	3430      	adds	r4, #48	@ 0x30
 8001d96:	463b      	mov	r3, r7
 8001d98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.G_LED = LED_Rutine(LED_Info.G_LED);
 8001d9e:	4c09      	ldr	r4, [pc, #36]	@ (8001dc4 <LED_Tasks+0x98>)
 8001da0:	4638      	mov	r0, r7
 8001da2:	4b08      	ldr	r3, [pc, #32]	@ (8001dc4 <LED_Tasks+0x98>)
 8001da4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001da6:	9200      	str	r2, [sp, #0]
 8001da8:	3340      	adds	r3, #64	@ 0x40
 8001daa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dac:	f7ff ff83 	bl	8001cb6 <LED_Rutine>
 8001db0:	3440      	adds	r4, #64	@ 0x40
 8001db2:	463b      	mov	r3, r7
 8001db4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001db6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd90      	pop	{r4, r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	24000004 	.word	0x24000004

08001dc8 <PWM_Assing>:
		.Canal_8  = 1500,
		.Canal_9  = 1500,
		.Canal_10 = 1500,
};

void PWM_Assing(void){
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
	TIM2->CCR1 = PWM_Output.Canal_1;
 8001dcc:	4b2a      	ldr	r3, [pc, #168]	@ (8001e78 <PWM_Assing+0xb0>)
 8001dce:	881a      	ldrh	r2, [r3, #0]
 8001dd0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001dd4:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = PWM_Output.Canal_2;
 8001dd6:	4b28      	ldr	r3, [pc, #160]	@ (8001e78 <PWM_Assing+0xb0>)
 8001dd8:	885a      	ldrh	r2, [r3, #2]
 8001dda:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001dde:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM3->CCR1 = PWM_Output.Canal_3;
 8001de0:	4b25      	ldr	r3, [pc, #148]	@ (8001e78 <PWM_Assing+0xb0>)
 8001de2:	889a      	ldrh	r2, [r3, #4]
 8001de4:	4b25      	ldr	r3, [pc, #148]	@ (8001e7c <PWM_Assing+0xb4>)
 8001de6:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = PWM_Output.Canal_4;
 8001de8:	4b23      	ldr	r3, [pc, #140]	@ (8001e78 <PWM_Assing+0xb0>)
 8001dea:	88da      	ldrh	r2, [r3, #6]
 8001dec:	4b23      	ldr	r3, [pc, #140]	@ (8001e7c <PWM_Assing+0xb4>)
 8001dee:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM4->CCR1 = PWM_Output.Canal_5;
 8001df0:	4b21      	ldr	r3, [pc, #132]	@ (8001e78 <PWM_Assing+0xb0>)
 8001df2:	891a      	ldrh	r2, [r3, #8]
 8001df4:	4b22      	ldr	r3, [pc, #136]	@ (8001e80 <PWM_Assing+0xb8>)
 8001df6:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM4->CCR2 = PWM_Output.Canal_6;
 8001df8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e78 <PWM_Assing+0xb0>)
 8001dfa:	895a      	ldrh	r2, [r3, #10]
 8001dfc:	4b20      	ldr	r3, [pc, #128]	@ (8001e80 <PWM_Assing+0xb8>)
 8001dfe:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM4->CCR3 = PWM_Output.Canal_7;
 8001e00:	4b1d      	ldr	r3, [pc, #116]	@ (8001e78 <PWM_Assing+0xb0>)
 8001e02:	899a      	ldrh	r2, [r3, #12]
 8001e04:	4b1e      	ldr	r3, [pc, #120]	@ (8001e80 <PWM_Assing+0xb8>)
 8001e06:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM4->CCR4 = PWM_Output.Canal_8;
 8001e08:	4b1b      	ldr	r3, [pc, #108]	@ (8001e78 <PWM_Assing+0xb0>)
 8001e0a:	89da      	ldrh	r2, [r3, #14]
 8001e0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001e80 <PWM_Assing+0xb8>)
 8001e0e:	641a      	str	r2, [r3, #64]	@ 0x40

	TIM2->CCR4 = PWM_Output.Canal_9;
 8001e10:	4b19      	ldr	r3, [pc, #100]	@ (8001e78 <PWM_Assing+0xb0>)
 8001e12:	8a1a      	ldrh	r2, [r3, #16]
 8001e14:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e18:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM2->CCR3 = PWM_Output.Canal_10;
 8001e1a:	4b17      	ldr	r3, [pc, #92]	@ (8001e78 <PWM_Assing+0xb0>)
 8001e1c:	8a5a      	ldrh	r2, [r3, #18]
 8001e1e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e22:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001e24:	2100      	movs	r1, #0
 8001e26:	4817      	ldr	r0, [pc, #92]	@ (8001e84 <PWM_Assing+0xbc>)
 8001e28:	f00a fa32 	bl	800c290 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001e2c:	2104      	movs	r1, #4
 8001e2e:	4815      	ldr	r0, [pc, #84]	@ (8001e84 <PWM_Assing+0xbc>)
 8001e30:	f00a fa2e 	bl	800c290 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001e34:	2108      	movs	r1, #8
 8001e36:	4813      	ldr	r0, [pc, #76]	@ (8001e84 <PWM_Assing+0xbc>)
 8001e38:	f00a fa2a 	bl	800c290 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001e3c:	210c      	movs	r1, #12
 8001e3e:	4811      	ldr	r0, [pc, #68]	@ (8001e84 <PWM_Assing+0xbc>)
 8001e40:	f00a fa26 	bl	800c290 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001e44:	2100      	movs	r1, #0
 8001e46:	4810      	ldr	r0, [pc, #64]	@ (8001e88 <PWM_Assing+0xc0>)
 8001e48:	f00a fa22 	bl	800c290 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001e4c:	2104      	movs	r1, #4
 8001e4e:	480e      	ldr	r0, [pc, #56]	@ (8001e88 <PWM_Assing+0xc0>)
 8001e50:	f00a fa1e 	bl	800c290 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001e54:	2100      	movs	r1, #0
 8001e56:	480d      	ldr	r0, [pc, #52]	@ (8001e8c <PWM_Assing+0xc4>)
 8001e58:	f00a fa1a 	bl	800c290 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001e5c:	2104      	movs	r1, #4
 8001e5e:	480b      	ldr	r0, [pc, #44]	@ (8001e8c <PWM_Assing+0xc4>)
 8001e60:	f00a fa16 	bl	800c290 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001e64:	2108      	movs	r1, #8
 8001e66:	4809      	ldr	r0, [pc, #36]	@ (8001e8c <PWM_Assing+0xc4>)
 8001e68:	f00a fa12 	bl	800c290 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001e6c:	210c      	movs	r1, #12
 8001e6e:	4807      	ldr	r0, [pc, #28]	@ (8001e8c <PWM_Assing+0xc4>)
 8001e70:	f00a fa0e 	bl	800c290 <HAL_TIM_PWM_Start>
}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	24000054 	.word	0x24000054
 8001e7c:	40000400 	.word	0x40000400
 8001e80:	40000800 	.word	0x40000800
 8001e84:	240025cc 	.word	0x240025cc
 8001e88:	24002618 	.word	0x24002618
 8001e8c:	24002664 	.word	0x24002664

08001e90 <SBUS_Receive>:
void SBUS_init(void){
	HAL_UART_Receive_DMA(SBUS_UART_handler, &SBUS_RxBuffer, 1);

}

void SBUS_Receive(uint8_t SBUS_RxBuffer){
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	71fb      	strb	r3, [r7, #7]
	static uint8_t Actual_status = 0;
	static uint8_t RxCount;

	switch (Actual_status) {
 8001e9a:	4b20      	ldr	r3, [pc, #128]	@ (8001f1c <SBUS_Receive+0x8c>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d002      	beq.n	8001ea8 <SBUS_Receive+0x18>
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d017      	beq.n	8001ed6 <SBUS_Receive+0x46>
 8001ea6:	e02f      	b.n	8001f08 <SBUS_Receive+0x78>
		case 0:
			if(SBUS_RxBuffer == 0x0F){
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	2b0f      	cmp	r3, #15
 8001eac:	d10f      	bne.n	8001ece <SBUS_Receive+0x3e>
				SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 8001eae:	4b1c      	ldr	r3, [pc, #112]	@ (8001f20 <SBUS_Receive+0x90>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8001f24 <SBUS_Receive+0x94>)
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	5453      	strb	r3, [r2, r1]
				Actual_status = 1;
 8001eba:	4b18      	ldr	r3, [pc, #96]	@ (8001f1c <SBUS_Receive+0x8c>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	701a      	strb	r2, [r3, #0]
				RxCount++;
 8001ec0:	4b17      	ldr	r3, [pc, #92]	@ (8001f20 <SBUS_Receive+0x90>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <SBUS_Receive+0x90>)
 8001eca:	701a      	strb	r2, [r3, #0]
			}
			else{
				RxCount = 0;
			}
			break;
 8001ecc:	e021      	b.n	8001f12 <SBUS_Receive+0x82>
				RxCount = 0;
 8001ece:	4b14      	ldr	r3, [pc, #80]	@ (8001f20 <SBUS_Receive+0x90>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	701a      	strb	r2, [r3, #0]
			break;
 8001ed4:	e01d      	b.n	8001f12 <SBUS_Receive+0x82>
		case 1:
			SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 8001ed6:	4b12      	ldr	r3, [pc, #72]	@ (8001f20 <SBUS_Receive+0x90>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	4619      	mov	r1, r3
 8001edc:	4a11      	ldr	r2, [pc, #68]	@ (8001f24 <SBUS_Receive+0x94>)
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	5453      	strb	r3, [r2, r1]
			RxCount++;
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8001f20 <SBUS_Receive+0x90>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4b0d      	ldr	r3, [pc, #52]	@ (8001f20 <SBUS_Receive+0x90>)
 8001eec:	701a      	strb	r2, [r3, #0]
			if(RxCount == 24){
 8001eee:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <SBUS_Receive+0x90>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b18      	cmp	r3, #24
 8001ef4:	d10c      	bne.n	8001f10 <SBUS_Receive+0x80>
				RxCount = 0;
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f20 <SBUS_Receive+0x90>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	701a      	strb	r2, [r3, #0]
				Actual_status = 0;
 8001efc:	4b07      	ldr	r3, [pc, #28]	@ (8001f1c <SBUS_Receive+0x8c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	701a      	strb	r2, [r3, #0]
				SBUS_getData();
 8001f02:	f000 f843 	bl	8001f8c <SBUS_getData>
			}
			break;
 8001f06:	e003      	b.n	8001f10 <SBUS_Receive+0x80>
		default:
			Actual_status = 0;
 8001f08:	4b04      	ldr	r3, [pc, #16]	@ (8001f1c <SBUS_Receive+0x8c>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
			break;
 8001f0e:	e000      	b.n	8001f12 <SBUS_Receive+0x82>
			break;
 8001f10:	bf00      	nop
	}
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	2400033e 	.word	0x2400033e
 8001f20:	2400033f 	.word	0x2400033f
 8001f24:	24000324 	.word	0x24000324

08001f28 <Temp_BypassFunct>:

void Temp_BypassFunct (void){
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
	PWM_Output.Canal_1  = Radio_input.Canal_1;
 8001f2c:	4b15      	ldr	r3, [pc, #84]	@ (8001f84 <Temp_BypassFunct+0x5c>)
 8001f2e:	881a      	ldrh	r2, [r3, #0]
 8001f30:	4b15      	ldr	r3, [pc, #84]	@ (8001f88 <Temp_BypassFunct+0x60>)
 8001f32:	801a      	strh	r2, [r3, #0]
	PWM_Output.Canal_2  = Radio_input.Canal_2;
 8001f34:	4b13      	ldr	r3, [pc, #76]	@ (8001f84 <Temp_BypassFunct+0x5c>)
 8001f36:	885a      	ldrh	r2, [r3, #2]
 8001f38:	4b13      	ldr	r3, [pc, #76]	@ (8001f88 <Temp_BypassFunct+0x60>)
 8001f3a:	805a      	strh	r2, [r3, #2]
	PWM_Output.Canal_3  = Radio_input.Canal_3;
 8001f3c:	4b11      	ldr	r3, [pc, #68]	@ (8001f84 <Temp_BypassFunct+0x5c>)
 8001f3e:	889a      	ldrh	r2, [r3, #4]
 8001f40:	4b11      	ldr	r3, [pc, #68]	@ (8001f88 <Temp_BypassFunct+0x60>)
 8001f42:	809a      	strh	r2, [r3, #4]
	PWM_Output.Canal_4  = Radio_input.Canal_4;
 8001f44:	4b0f      	ldr	r3, [pc, #60]	@ (8001f84 <Temp_BypassFunct+0x5c>)
 8001f46:	88da      	ldrh	r2, [r3, #6]
 8001f48:	4b0f      	ldr	r3, [pc, #60]	@ (8001f88 <Temp_BypassFunct+0x60>)
 8001f4a:	80da      	strh	r2, [r3, #6]
	PWM_Output.Canal_5  = Radio_input.Canal_5;
 8001f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001f84 <Temp_BypassFunct+0x5c>)
 8001f4e:	891a      	ldrh	r2, [r3, #8]
 8001f50:	4b0d      	ldr	r3, [pc, #52]	@ (8001f88 <Temp_BypassFunct+0x60>)
 8001f52:	811a      	strh	r2, [r3, #8]
	PWM_Output.Canal_6  = Radio_input.Canal_6;
 8001f54:	4b0b      	ldr	r3, [pc, #44]	@ (8001f84 <Temp_BypassFunct+0x5c>)
 8001f56:	895a      	ldrh	r2, [r3, #10]
 8001f58:	4b0b      	ldr	r3, [pc, #44]	@ (8001f88 <Temp_BypassFunct+0x60>)
 8001f5a:	815a      	strh	r2, [r3, #10]
	PWM_Output.Canal_7  = Radio_input.Canal_7;
 8001f5c:	4b09      	ldr	r3, [pc, #36]	@ (8001f84 <Temp_BypassFunct+0x5c>)
 8001f5e:	899a      	ldrh	r2, [r3, #12]
 8001f60:	4b09      	ldr	r3, [pc, #36]	@ (8001f88 <Temp_BypassFunct+0x60>)
 8001f62:	819a      	strh	r2, [r3, #12]
	PWM_Output.Canal_8  = Radio_input.Canal_8;
 8001f64:	4b07      	ldr	r3, [pc, #28]	@ (8001f84 <Temp_BypassFunct+0x5c>)
 8001f66:	89da      	ldrh	r2, [r3, #14]
 8001f68:	4b07      	ldr	r3, [pc, #28]	@ (8001f88 <Temp_BypassFunct+0x60>)
 8001f6a:	81da      	strh	r2, [r3, #14]
	PWM_Output.Canal_9  = Radio_input.Canal_9;
 8001f6c:	4b05      	ldr	r3, [pc, #20]	@ (8001f84 <Temp_BypassFunct+0x5c>)
 8001f6e:	8a1a      	ldrh	r2, [r3, #16]
 8001f70:	4b05      	ldr	r3, [pc, #20]	@ (8001f88 <Temp_BypassFunct+0x60>)
 8001f72:	821a      	strh	r2, [r3, #16]
	PWM_Output.Canal_10 = Radio_input.Canal_10;
 8001f74:	4b03      	ldr	r3, [pc, #12]	@ (8001f84 <Temp_BypassFunct+0x5c>)
 8001f76:	8a5a      	ldrh	r2, [r3, #18]
 8001f78:	4b03      	ldr	r3, [pc, #12]	@ (8001f88 <Temp_BypassFunct+0x60>)
 8001f7a:	825a      	strh	r2, [r3, #18]

	PWM_Assing();
 8001f7c:	f7ff ff24 	bl	8001dc8 <PWM_Assing>
}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	24000068 	.word	0x24000068
 8001f88:	24000054 	.word	0x24000054

08001f8c <SBUS_getData>:

void SBUS_getData(void){
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
	//Se hace el corrimiento de bits para dar la estructura de los 16 canales, donde cada canal esta compuesto por 11 bits
	//pero cada paquete es de 1 byte. Para cada canal se utilizan los 8 bits (O los que correspondan) de el byte 1
	//(O el que corresponda) como los bits menos significativos del canal 1, y los tres bits faltantes se toman los 3 bits
	// menos significativos (O los que correspondan) del byte 2 y se colocan como los 3 bits más significativos del canal 1.
	Radio_input.Canal_1 = ((SBUS_UART_Rx[1] | SBUS_UART_Rx[2] << 8) & 0x07FF);
 8001f90:	4b95      	ldr	r3, [pc, #596]	@ (80021e8 <SBUS_getData+0x25c>)
 8001f92:	785b      	ldrb	r3, [r3, #1]
 8001f94:	b21a      	sxth	r2, r3
 8001f96:	4b94      	ldr	r3, [pc, #592]	@ (80021e8 <SBUS_getData+0x25c>)
 8001f98:	789b      	ldrb	r3, [r3, #2]
 8001f9a:	021b      	lsls	r3, r3, #8
 8001f9c:	b21b      	sxth	r3, r3
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	b21b      	sxth	r3, r3
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	4b90      	ldr	r3, [pc, #576]	@ (80021ec <SBUS_getData+0x260>)
 8001fac:	801a      	strh	r2, [r3, #0]
	Radio_input.Canal_2 = ((SBUS_UART_Rx[2] >> 3 | SBUS_UART_Rx[3] << 5) & 0x07FF);
 8001fae:	4b8e      	ldr	r3, [pc, #568]	@ (80021e8 <SBUS_getData+0x25c>)
 8001fb0:	789b      	ldrb	r3, [r3, #2]
 8001fb2:	08db      	lsrs	r3, r3, #3
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	b21a      	sxth	r2, r3
 8001fb8:	4b8b      	ldr	r3, [pc, #556]	@ (80021e8 <SBUS_getData+0x25c>)
 8001fba:	78db      	ldrb	r3, [r3, #3]
 8001fbc:	015b      	lsls	r3, r3, #5
 8001fbe:	b21b      	sxth	r3, r3
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	b21b      	sxth	r3, r3
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	4b87      	ldr	r3, [pc, #540]	@ (80021ec <SBUS_getData+0x260>)
 8001fce:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_3 = ((SBUS_UART_Rx[3] >> 6 | SBUS_UART_Rx[4] << 2 | SBUS_UART_Rx[5] << 10) & 0x07FF);
 8001fd0:	4b85      	ldr	r3, [pc, #532]	@ (80021e8 <SBUS_getData+0x25c>)
 8001fd2:	78db      	ldrb	r3, [r3, #3]
 8001fd4:	099b      	lsrs	r3, r3, #6
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	b21a      	sxth	r2, r3
 8001fda:	4b83      	ldr	r3, [pc, #524]	@ (80021e8 <SBUS_getData+0x25c>)
 8001fdc:	791b      	ldrb	r3, [r3, #4]
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	b21b      	sxth	r3, r3
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	b21a      	sxth	r2, r3
 8001fe6:	4b80      	ldr	r3, [pc, #512]	@ (80021e8 <SBUS_getData+0x25c>)
 8001fe8:	795b      	ldrb	r3, [r3, #5]
 8001fea:	029b      	lsls	r3, r3, #10
 8001fec:	b21b      	sxth	r3, r3
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	b21b      	sxth	r3, r3
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	4b7c      	ldr	r3, [pc, #496]	@ (80021ec <SBUS_getData+0x260>)
 8001ffc:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_4 = ((SBUS_UART_Rx[5] >> 1 | SBUS_UART_Rx[6] << 7) & 0x07FF);
 8001ffe:	4b7a      	ldr	r3, [pc, #488]	@ (80021e8 <SBUS_getData+0x25c>)
 8002000:	795b      	ldrb	r3, [r3, #5]
 8002002:	085b      	lsrs	r3, r3, #1
 8002004:	b2db      	uxtb	r3, r3
 8002006:	b21a      	sxth	r2, r3
 8002008:	4b77      	ldr	r3, [pc, #476]	@ (80021e8 <SBUS_getData+0x25c>)
 800200a:	799b      	ldrb	r3, [r3, #6]
 800200c:	01db      	lsls	r3, r3, #7
 800200e:	b21b      	sxth	r3, r3
 8002010:	4313      	orrs	r3, r2
 8002012:	b21b      	sxth	r3, r3
 8002014:	b29b      	uxth	r3, r3
 8002016:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800201a:	b29a      	uxth	r2, r3
 800201c:	4b73      	ldr	r3, [pc, #460]	@ (80021ec <SBUS_getData+0x260>)
 800201e:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_5 = ((SBUS_UART_Rx[6] >> 4 | SBUS_UART_Rx[7] << 4) & 0x07FF);
 8002020:	4b71      	ldr	r3, [pc, #452]	@ (80021e8 <SBUS_getData+0x25c>)
 8002022:	799b      	ldrb	r3, [r3, #6]
 8002024:	091b      	lsrs	r3, r3, #4
 8002026:	b2db      	uxtb	r3, r3
 8002028:	b21a      	sxth	r2, r3
 800202a:	4b6f      	ldr	r3, [pc, #444]	@ (80021e8 <SBUS_getData+0x25c>)
 800202c:	79db      	ldrb	r3, [r3, #7]
 800202e:	011b      	lsls	r3, r3, #4
 8002030:	b21b      	sxth	r3, r3
 8002032:	4313      	orrs	r3, r2
 8002034:	b21b      	sxth	r3, r3
 8002036:	b29b      	uxth	r3, r3
 8002038:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800203c:	b29a      	uxth	r2, r3
 800203e:	4b6b      	ldr	r3, [pc, #428]	@ (80021ec <SBUS_getData+0x260>)
 8002040:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_6 = ((SBUS_UART_Rx[7] >> 7 | SBUS_UART_Rx[8] << 1 | SBUS_UART_Rx[9] << 9) & 0x07FF);
 8002042:	4b69      	ldr	r3, [pc, #420]	@ (80021e8 <SBUS_getData+0x25c>)
 8002044:	79db      	ldrb	r3, [r3, #7]
 8002046:	09db      	lsrs	r3, r3, #7
 8002048:	b2db      	uxtb	r3, r3
 800204a:	b21a      	sxth	r2, r3
 800204c:	4b66      	ldr	r3, [pc, #408]	@ (80021e8 <SBUS_getData+0x25c>)
 800204e:	7a1b      	ldrb	r3, [r3, #8]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	b21b      	sxth	r3, r3
 8002054:	4313      	orrs	r3, r2
 8002056:	b21a      	sxth	r2, r3
 8002058:	4b63      	ldr	r3, [pc, #396]	@ (80021e8 <SBUS_getData+0x25c>)
 800205a:	7a5b      	ldrb	r3, [r3, #9]
 800205c:	025b      	lsls	r3, r3, #9
 800205e:	b21b      	sxth	r3, r3
 8002060:	4313      	orrs	r3, r2
 8002062:	b21b      	sxth	r3, r3
 8002064:	b29b      	uxth	r3, r3
 8002066:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800206a:	b29a      	uxth	r2, r3
 800206c:	4b5f      	ldr	r3, [pc, #380]	@ (80021ec <SBUS_getData+0x260>)
 800206e:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_7 = ((SBUS_UART_Rx[9] >> 2 | SBUS_UART_Rx[10] << 6) & 0x07FF);
 8002070:	4b5d      	ldr	r3, [pc, #372]	@ (80021e8 <SBUS_getData+0x25c>)
 8002072:	7a5b      	ldrb	r3, [r3, #9]
 8002074:	089b      	lsrs	r3, r3, #2
 8002076:	b2db      	uxtb	r3, r3
 8002078:	b21a      	sxth	r2, r3
 800207a:	4b5b      	ldr	r3, [pc, #364]	@ (80021e8 <SBUS_getData+0x25c>)
 800207c:	7a9b      	ldrb	r3, [r3, #10]
 800207e:	019b      	lsls	r3, r3, #6
 8002080:	b21b      	sxth	r3, r3
 8002082:	4313      	orrs	r3, r2
 8002084:	b21b      	sxth	r3, r3
 8002086:	b29b      	uxth	r3, r3
 8002088:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800208c:	b29a      	uxth	r2, r3
 800208e:	4b57      	ldr	r3, [pc, #348]	@ (80021ec <SBUS_getData+0x260>)
 8002090:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_8 = ((SBUS_UART_Rx[10] >> 5 | SBUS_UART_Rx[11] << 3) & 0x07FF);
 8002092:	4b55      	ldr	r3, [pc, #340]	@ (80021e8 <SBUS_getData+0x25c>)
 8002094:	7a9b      	ldrb	r3, [r3, #10]
 8002096:	095b      	lsrs	r3, r3, #5
 8002098:	b2db      	uxtb	r3, r3
 800209a:	b21a      	sxth	r2, r3
 800209c:	4b52      	ldr	r3, [pc, #328]	@ (80021e8 <SBUS_getData+0x25c>)
 800209e:	7adb      	ldrb	r3, [r3, #11]
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	b21b      	sxth	r3, r3
 80020a4:	4313      	orrs	r3, r2
 80020a6:	b21b      	sxth	r3, r3
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	4b4e      	ldr	r3, [pc, #312]	@ (80021ec <SBUS_getData+0x260>)
 80020b2:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_9 = ((SBUS_UART_Rx[12] | SBUS_UART_Rx[13] << 8) & 0x07FF);
 80020b4:	4b4c      	ldr	r3, [pc, #304]	@ (80021e8 <SBUS_getData+0x25c>)
 80020b6:	7b1b      	ldrb	r3, [r3, #12]
 80020b8:	b21a      	sxth	r2, r3
 80020ba:	4b4b      	ldr	r3, [pc, #300]	@ (80021e8 <SBUS_getData+0x25c>)
 80020bc:	7b5b      	ldrb	r3, [r3, #13]
 80020be:	021b      	lsls	r3, r3, #8
 80020c0:	b21b      	sxth	r3, r3
 80020c2:	4313      	orrs	r3, r2
 80020c4:	b21b      	sxth	r3, r3
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	4b47      	ldr	r3, [pc, #284]	@ (80021ec <SBUS_getData+0x260>)
 80020d0:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_10 = ((SBUS_UART_Rx[13] >> 3 | SBUS_UART_Rx[14] << 5) & 0x07FF);
 80020d2:	4b45      	ldr	r3, [pc, #276]	@ (80021e8 <SBUS_getData+0x25c>)
 80020d4:	7b5b      	ldrb	r3, [r3, #13]
 80020d6:	08db      	lsrs	r3, r3, #3
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	b21a      	sxth	r2, r3
 80020dc:	4b42      	ldr	r3, [pc, #264]	@ (80021e8 <SBUS_getData+0x25c>)
 80020de:	7b9b      	ldrb	r3, [r3, #14]
 80020e0:	015b      	lsls	r3, r3, #5
 80020e2:	b21b      	sxth	r3, r3
 80020e4:	4313      	orrs	r3, r2
 80020e6:	b21b      	sxth	r3, r3
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	4b3e      	ldr	r3, [pc, #248]	@ (80021ec <SBUS_getData+0x260>)
 80020f2:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_11 = ((SBUS_UART_Rx[14] >> 6 | SBUS_UART_Rx[15] << 2 | SBUS_UART_Rx[16] << 10) & 0x07FF);
 80020f4:	4b3c      	ldr	r3, [pc, #240]	@ (80021e8 <SBUS_getData+0x25c>)
 80020f6:	7b9b      	ldrb	r3, [r3, #14]
 80020f8:	099b      	lsrs	r3, r3, #6
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	b21a      	sxth	r2, r3
 80020fe:	4b3a      	ldr	r3, [pc, #232]	@ (80021e8 <SBUS_getData+0x25c>)
 8002100:	7bdb      	ldrb	r3, [r3, #15]
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	b21b      	sxth	r3, r3
 8002106:	4313      	orrs	r3, r2
 8002108:	b21a      	sxth	r2, r3
 800210a:	4b37      	ldr	r3, [pc, #220]	@ (80021e8 <SBUS_getData+0x25c>)
 800210c:	7c1b      	ldrb	r3, [r3, #16]
 800210e:	029b      	lsls	r3, r3, #10
 8002110:	b21b      	sxth	r3, r3
 8002112:	4313      	orrs	r3, r2
 8002114:	b21b      	sxth	r3, r3
 8002116:	b29b      	uxth	r3, r3
 8002118:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800211c:	b29a      	uxth	r2, r3
 800211e:	4b33      	ldr	r3, [pc, #204]	@ (80021ec <SBUS_getData+0x260>)
 8002120:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_12 = ((SBUS_UART_Rx[16] >> 1 | SBUS_UART_Rx[17] << 7) & 0x07FF);
 8002122:	4b31      	ldr	r3, [pc, #196]	@ (80021e8 <SBUS_getData+0x25c>)
 8002124:	7c1b      	ldrb	r3, [r3, #16]
 8002126:	085b      	lsrs	r3, r3, #1
 8002128:	b2db      	uxtb	r3, r3
 800212a:	b21a      	sxth	r2, r3
 800212c:	4b2e      	ldr	r3, [pc, #184]	@ (80021e8 <SBUS_getData+0x25c>)
 800212e:	7c5b      	ldrb	r3, [r3, #17]
 8002130:	01db      	lsls	r3, r3, #7
 8002132:	b21b      	sxth	r3, r3
 8002134:	4313      	orrs	r3, r2
 8002136:	b21b      	sxth	r3, r3
 8002138:	b29b      	uxth	r3, r3
 800213a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800213e:	b29a      	uxth	r2, r3
 8002140:	4b2a      	ldr	r3, [pc, #168]	@ (80021ec <SBUS_getData+0x260>)
 8002142:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_13 = ((SBUS_UART_Rx[17] >> 4 | SBUS_UART_Rx[18] << 4) & 0x07FF);
 8002144:	4b28      	ldr	r3, [pc, #160]	@ (80021e8 <SBUS_getData+0x25c>)
 8002146:	7c5b      	ldrb	r3, [r3, #17]
 8002148:	091b      	lsrs	r3, r3, #4
 800214a:	b2db      	uxtb	r3, r3
 800214c:	b21a      	sxth	r2, r3
 800214e:	4b26      	ldr	r3, [pc, #152]	@ (80021e8 <SBUS_getData+0x25c>)
 8002150:	7c9b      	ldrb	r3, [r3, #18]
 8002152:	011b      	lsls	r3, r3, #4
 8002154:	b21b      	sxth	r3, r3
 8002156:	4313      	orrs	r3, r2
 8002158:	b21b      	sxth	r3, r3
 800215a:	b29b      	uxth	r3, r3
 800215c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002160:	b29a      	uxth	r2, r3
 8002162:	4b22      	ldr	r3, [pc, #136]	@ (80021ec <SBUS_getData+0x260>)
 8002164:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_14 = ((SBUS_UART_Rx[18] >> 7 | SBUS_UART_Rx[19] << 1 | SBUS_UART_Rx[20] << 9) & 0x07FF);
 8002166:	4b20      	ldr	r3, [pc, #128]	@ (80021e8 <SBUS_getData+0x25c>)
 8002168:	7c9b      	ldrb	r3, [r3, #18]
 800216a:	09db      	lsrs	r3, r3, #7
 800216c:	b2db      	uxtb	r3, r3
 800216e:	b21a      	sxth	r2, r3
 8002170:	4b1d      	ldr	r3, [pc, #116]	@ (80021e8 <SBUS_getData+0x25c>)
 8002172:	7cdb      	ldrb	r3, [r3, #19]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	b21b      	sxth	r3, r3
 8002178:	4313      	orrs	r3, r2
 800217a:	b21a      	sxth	r2, r3
 800217c:	4b1a      	ldr	r3, [pc, #104]	@ (80021e8 <SBUS_getData+0x25c>)
 800217e:	7d1b      	ldrb	r3, [r3, #20]
 8002180:	025b      	lsls	r3, r3, #9
 8002182:	b21b      	sxth	r3, r3
 8002184:	4313      	orrs	r3, r2
 8002186:	b21b      	sxth	r3, r3
 8002188:	b29b      	uxth	r3, r3
 800218a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800218e:	b29a      	uxth	r2, r3
 8002190:	4b16      	ldr	r3, [pc, #88]	@ (80021ec <SBUS_getData+0x260>)
 8002192:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_15 = ((SBUS_UART_Rx[20] >> 2 | SBUS_UART_Rx[21] << 6) & 0x07FF);
 8002194:	4b14      	ldr	r3, [pc, #80]	@ (80021e8 <SBUS_getData+0x25c>)
 8002196:	7d1b      	ldrb	r3, [r3, #20]
 8002198:	089b      	lsrs	r3, r3, #2
 800219a:	b2db      	uxtb	r3, r3
 800219c:	b21a      	sxth	r2, r3
 800219e:	4b12      	ldr	r3, [pc, #72]	@ (80021e8 <SBUS_getData+0x25c>)
 80021a0:	7d5b      	ldrb	r3, [r3, #21]
 80021a2:	019b      	lsls	r3, r3, #6
 80021a4:	b21b      	sxth	r3, r3
 80021a6:	4313      	orrs	r3, r2
 80021a8:	b21b      	sxth	r3, r3
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	4b0e      	ldr	r3, [pc, #56]	@ (80021ec <SBUS_getData+0x260>)
 80021b4:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_16 = ((SBUS_UART_Rx[21] >> 5 | SBUS_UART_Rx[22] << 3) & 0x07FF);
 80021b6:	4b0c      	ldr	r3, [pc, #48]	@ (80021e8 <SBUS_getData+0x25c>)
 80021b8:	7d5b      	ldrb	r3, [r3, #21]
 80021ba:	095b      	lsrs	r3, r3, #5
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	b21a      	sxth	r2, r3
 80021c0:	4b09      	ldr	r3, [pc, #36]	@ (80021e8 <SBUS_getData+0x25c>)
 80021c2:	7d9b      	ldrb	r3, [r3, #22]
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	b21b      	sxth	r3, r3
 80021c8:	4313      	orrs	r3, r2
 80021ca:	b21b      	sxth	r3, r3
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	4b05      	ldr	r3, [pc, #20]	@ (80021ec <SBUS_getData+0x260>)
 80021d6:	83da      	strh	r2, [r3, #30]

	Radio_input.Canal_1 = (uint16_t)((((float)Radio_input.Canal_1 - 352) /1344 ) * 1000) + 1000;
 80021d8:	4b04      	ldr	r3, [pc, #16]	@ (80021ec <SBUS_getData+0x260>)
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	ee07 3a90 	vmov	s15, r3
 80021e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021e4:	e00a      	b.n	80021fc <SBUS_getData+0x270>
 80021e6:	bf00      	nop
 80021e8:	24000324 	.word	0x24000324
 80021ec:	24000068 	.word	0x24000068
 80021f0:	43b00000 	.word	0x43b00000
 80021f4:	44a80000 	.word	0x44a80000
 80021f8:	447a0000 	.word	0x447a0000
 80021fc:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 80021f0 <SBUS_getData+0x264>
 8002200:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002204:	ed5f 6a05 	vldr	s13, [pc, #-20]	@ 80021f4 <SBUS_getData+0x268>
 8002208:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800220c:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 80021f8 <SBUS_getData+0x26c>
 8002210:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002218:	ee17 3a90 	vmov	r3, s15
 800221c:	b29b      	uxth	r3, r3
 800221e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002222:	b29a      	uxth	r2, r3
 8002224:	4bd1      	ldr	r3, [pc, #836]	@ (800256c <SBUS_getData+0x5e0>)
 8002226:	801a      	strh	r2, [r3, #0]
	Radio_input.Canal_2 = (uint16_t)((((float)Radio_input.Canal_2 - 352) /1344 ) * 1000) + 1000;
 8002228:	4bd0      	ldr	r3, [pc, #832]	@ (800256c <SBUS_getData+0x5e0>)
 800222a:	885b      	ldrh	r3, [r3, #2]
 800222c:	ee07 3a90 	vmov	s15, r3
 8002230:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002234:	ed9f 7ace 	vldr	s14, [pc, #824]	@ 8002570 <SBUS_getData+0x5e4>
 8002238:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800223c:	eddf 6acd 	vldr	s13, [pc, #820]	@ 8002574 <SBUS_getData+0x5e8>
 8002240:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002244:	ed9f 7acc 	vldr	s14, [pc, #816]	@ 8002578 <SBUS_getData+0x5ec>
 8002248:	ee67 7a87 	vmul.f32	s15, s15, s14
 800224c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002250:	ee17 3a90 	vmov	r3, s15
 8002254:	b29b      	uxth	r3, r3
 8002256:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800225a:	b29a      	uxth	r2, r3
 800225c:	4bc3      	ldr	r3, [pc, #780]	@ (800256c <SBUS_getData+0x5e0>)
 800225e:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_3 = (uint16_t)((((float)Radio_input.Canal_3 - 352) /1344 ) * 1000) + 1000;
 8002260:	4bc2      	ldr	r3, [pc, #776]	@ (800256c <SBUS_getData+0x5e0>)
 8002262:	889b      	ldrh	r3, [r3, #4]
 8002264:	ee07 3a90 	vmov	s15, r3
 8002268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800226c:	ed9f 7ac0 	vldr	s14, [pc, #768]	@ 8002570 <SBUS_getData+0x5e4>
 8002270:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002274:	eddf 6abf 	vldr	s13, [pc, #764]	@ 8002574 <SBUS_getData+0x5e8>
 8002278:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800227c:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 8002578 <SBUS_getData+0x5ec>
 8002280:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002284:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002288:	ee17 3a90 	vmov	r3, s15
 800228c:	b29b      	uxth	r3, r3
 800228e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002292:	b29a      	uxth	r2, r3
 8002294:	4bb5      	ldr	r3, [pc, #724]	@ (800256c <SBUS_getData+0x5e0>)
 8002296:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_4 = (uint16_t)((((float)Radio_input.Canal_4 - 352) /1344 ) * 1000) + 1000;
 8002298:	4bb4      	ldr	r3, [pc, #720]	@ (800256c <SBUS_getData+0x5e0>)
 800229a:	88db      	ldrh	r3, [r3, #6]
 800229c:	ee07 3a90 	vmov	s15, r3
 80022a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022a4:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8002570 <SBUS_getData+0x5e4>
 80022a8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80022ac:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8002574 <SBUS_getData+0x5e8>
 80022b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022b4:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8002578 <SBUS_getData+0x5ec>
 80022b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022c0:	ee17 3a90 	vmov	r3, s15
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	4ba7      	ldr	r3, [pc, #668]	@ (800256c <SBUS_getData+0x5e0>)
 80022ce:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_5 = (uint16_t)((((float)Radio_input.Canal_5 - 352) /1344 ) * 1000) + 1000;
 80022d0:	4ba6      	ldr	r3, [pc, #664]	@ (800256c <SBUS_getData+0x5e0>)
 80022d2:	891b      	ldrh	r3, [r3, #8]
 80022d4:	ee07 3a90 	vmov	s15, r3
 80022d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022dc:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8002570 <SBUS_getData+0x5e4>
 80022e0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80022e4:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8002574 <SBUS_getData+0x5e8>
 80022e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022ec:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8002578 <SBUS_getData+0x5ec>
 80022f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022f8:	ee17 3a90 	vmov	r3, s15
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002302:	b29a      	uxth	r2, r3
 8002304:	4b99      	ldr	r3, [pc, #612]	@ (800256c <SBUS_getData+0x5e0>)
 8002306:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_6 = (uint16_t)((((float)Radio_input.Canal_6 - 352) /1344 ) * 1000) + 1000;
 8002308:	4b98      	ldr	r3, [pc, #608]	@ (800256c <SBUS_getData+0x5e0>)
 800230a:	895b      	ldrh	r3, [r3, #10]
 800230c:	ee07 3a90 	vmov	s15, r3
 8002310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002314:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8002570 <SBUS_getData+0x5e4>
 8002318:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800231c:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8002574 <SBUS_getData+0x5e8>
 8002320:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002324:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8002578 <SBUS_getData+0x5ec>
 8002328:	ee67 7a87 	vmul.f32	s15, s15, s14
 800232c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002330:	ee17 3a90 	vmov	r3, s15
 8002334:	b29b      	uxth	r3, r3
 8002336:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800233a:	b29a      	uxth	r2, r3
 800233c:	4b8b      	ldr	r3, [pc, #556]	@ (800256c <SBUS_getData+0x5e0>)
 800233e:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_7 = (uint16_t)((((float)Radio_input.Canal_7 - 352) /1344 ) * 1000) + 1000;
 8002340:	4b8a      	ldr	r3, [pc, #552]	@ (800256c <SBUS_getData+0x5e0>)
 8002342:	899b      	ldrh	r3, [r3, #12]
 8002344:	ee07 3a90 	vmov	s15, r3
 8002348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800234c:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8002570 <SBUS_getData+0x5e4>
 8002350:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002354:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8002574 <SBUS_getData+0x5e8>
 8002358:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800235c:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002578 <SBUS_getData+0x5ec>
 8002360:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002364:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002368:	ee17 3a90 	vmov	r3, s15
 800236c:	b29b      	uxth	r3, r3
 800236e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002372:	b29a      	uxth	r2, r3
 8002374:	4b7d      	ldr	r3, [pc, #500]	@ (800256c <SBUS_getData+0x5e0>)
 8002376:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_8 = (uint16_t)((((float)Radio_input.Canal_8 - 352) /1344 ) * 1000) + 1000;
 8002378:	4b7c      	ldr	r3, [pc, #496]	@ (800256c <SBUS_getData+0x5e0>)
 800237a:	89db      	ldrh	r3, [r3, #14]
 800237c:	ee07 3a90 	vmov	s15, r3
 8002380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002384:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8002570 <SBUS_getData+0x5e4>
 8002388:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800238c:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8002574 <SBUS_getData+0x5e8>
 8002390:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002394:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8002578 <SBUS_getData+0x5ec>
 8002398:	ee67 7a87 	vmul.f32	s15, s15, s14
 800239c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023a0:	ee17 3a90 	vmov	r3, s15
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	4b6f      	ldr	r3, [pc, #444]	@ (800256c <SBUS_getData+0x5e0>)
 80023ae:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_9 = (uint16_t)((((float)Radio_input.Canal_9 - 352) /1344 ) * 1000) + 1000;
 80023b0:	4b6e      	ldr	r3, [pc, #440]	@ (800256c <SBUS_getData+0x5e0>)
 80023b2:	8a1b      	ldrh	r3, [r3, #16]
 80023b4:	ee07 3a90 	vmov	s15, r3
 80023b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023bc:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8002570 <SBUS_getData+0x5e4>
 80023c0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80023c4:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8002574 <SBUS_getData+0x5e8>
 80023c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023cc:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8002578 <SBUS_getData+0x5ec>
 80023d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023d8:	ee17 3a90 	vmov	r3, s15
 80023dc:	b29b      	uxth	r3, r3
 80023de:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	4b61      	ldr	r3, [pc, #388]	@ (800256c <SBUS_getData+0x5e0>)
 80023e6:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_10 = (uint16_t)((((float)Radio_input.Canal_10 - 352) /1344 ) * 1000) + 1000;
 80023e8:	4b60      	ldr	r3, [pc, #384]	@ (800256c <SBUS_getData+0x5e0>)
 80023ea:	8a5b      	ldrh	r3, [r3, #18]
 80023ec:	ee07 3a90 	vmov	s15, r3
 80023f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023f4:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8002570 <SBUS_getData+0x5e4>
 80023f8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80023fc:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8002574 <SBUS_getData+0x5e8>
 8002400:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002404:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8002578 <SBUS_getData+0x5ec>
 8002408:	ee67 7a87 	vmul.f32	s15, s15, s14
 800240c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002410:	ee17 3a90 	vmov	r3, s15
 8002414:	b29b      	uxth	r3, r3
 8002416:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800241a:	b29a      	uxth	r2, r3
 800241c:	4b53      	ldr	r3, [pc, #332]	@ (800256c <SBUS_getData+0x5e0>)
 800241e:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_11 = (uint16_t)((((float)Radio_input.Canal_11 - 352) /1344 ) * 1000) + 1000;
 8002420:	4b52      	ldr	r3, [pc, #328]	@ (800256c <SBUS_getData+0x5e0>)
 8002422:	8a9b      	ldrh	r3, [r3, #20]
 8002424:	ee07 3a90 	vmov	s15, r3
 8002428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800242c:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8002570 <SBUS_getData+0x5e4>
 8002430:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002434:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002574 <SBUS_getData+0x5e8>
 8002438:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800243c:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8002578 <SBUS_getData+0x5ec>
 8002440:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002444:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002448:	ee17 3a90 	vmov	r3, s15
 800244c:	b29b      	uxth	r3, r3
 800244e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002452:	b29a      	uxth	r2, r3
 8002454:	4b45      	ldr	r3, [pc, #276]	@ (800256c <SBUS_getData+0x5e0>)
 8002456:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_12 = (uint16_t)((((float)Radio_input.Canal_12 - 352) /1344 ) * 1000) + 1000;
 8002458:	4b44      	ldr	r3, [pc, #272]	@ (800256c <SBUS_getData+0x5e0>)
 800245a:	8adb      	ldrh	r3, [r3, #22]
 800245c:	ee07 3a90 	vmov	s15, r3
 8002460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002464:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8002570 <SBUS_getData+0x5e4>
 8002468:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800246c:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8002574 <SBUS_getData+0x5e8>
 8002470:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002474:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8002578 <SBUS_getData+0x5ec>
 8002478:	ee67 7a87 	vmul.f32	s15, s15, s14
 800247c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002480:	ee17 3a90 	vmov	r3, s15
 8002484:	b29b      	uxth	r3, r3
 8002486:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800248a:	b29a      	uxth	r2, r3
 800248c:	4b37      	ldr	r3, [pc, #220]	@ (800256c <SBUS_getData+0x5e0>)
 800248e:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_13 = (uint16_t)((((float)Radio_input.Canal_13 - 352) /1344 ) * 1000) + 1000;
 8002490:	4b36      	ldr	r3, [pc, #216]	@ (800256c <SBUS_getData+0x5e0>)
 8002492:	8b1b      	ldrh	r3, [r3, #24]
 8002494:	ee07 3a90 	vmov	s15, r3
 8002498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800249c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8002570 <SBUS_getData+0x5e4>
 80024a0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80024a4:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8002574 <SBUS_getData+0x5e8>
 80024a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024ac:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002578 <SBUS_getData+0x5ec>
 80024b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024b8:	ee17 3a90 	vmov	r3, s15
 80024bc:	b29b      	uxth	r3, r3
 80024be:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	4b29      	ldr	r3, [pc, #164]	@ (800256c <SBUS_getData+0x5e0>)
 80024c6:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_14 = (uint16_t)((((float)Radio_input.Canal_14 - 352) /1344 ) * 1000) + 1000;
 80024c8:	4b28      	ldr	r3, [pc, #160]	@ (800256c <SBUS_getData+0x5e0>)
 80024ca:	8b5b      	ldrh	r3, [r3, #26]
 80024cc:	ee07 3a90 	vmov	s15, r3
 80024d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024d4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002570 <SBUS_getData+0x5e4>
 80024d8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80024dc:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8002574 <SBUS_getData+0x5e8>
 80024e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024e4:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8002578 <SBUS_getData+0x5ec>
 80024e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024f0:	ee17 3a90 	vmov	r3, s15
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	4b1b      	ldr	r3, [pc, #108]	@ (800256c <SBUS_getData+0x5e0>)
 80024fe:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_15 = (uint16_t)((((float)Radio_input.Canal_15 - 352) /1344 ) * 1000) + 1000;
 8002500:	4b1a      	ldr	r3, [pc, #104]	@ (800256c <SBUS_getData+0x5e0>)
 8002502:	8b9b      	ldrh	r3, [r3, #28]
 8002504:	ee07 3a90 	vmov	s15, r3
 8002508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800250c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002570 <SBUS_getData+0x5e4>
 8002510:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002514:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8002574 <SBUS_getData+0x5e8>
 8002518:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800251c:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8002578 <SBUS_getData+0x5ec>
 8002520:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002528:	ee17 3a90 	vmov	r3, s15
 800252c:	b29b      	uxth	r3, r3
 800252e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002532:	b29a      	uxth	r2, r3
 8002534:	4b0d      	ldr	r3, [pc, #52]	@ (800256c <SBUS_getData+0x5e0>)
 8002536:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_16 = (uint16_t)((((float)Radio_input.Canal_16 - 352) /1344 ) * 1000) + 1000;
 8002538:	4b0c      	ldr	r3, [pc, #48]	@ (800256c <SBUS_getData+0x5e0>)
 800253a:	8bdb      	ldrh	r3, [r3, #30]
 800253c:	ee07 3a90 	vmov	s15, r3
 8002540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002544:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002570 <SBUS_getData+0x5e4>
 8002548:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800254c:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8002574 <SBUS_getData+0x5e8>
 8002550:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002554:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002578 <SBUS_getData+0x5ec>
 8002558:	ee67 7a87 	vmul.f32	s15, s15, s14
 800255c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002560:	ee17 3a90 	vmov	r3, s15
 8002564:	b29b      	uxth	r3, r3
 8002566:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800256a:	e007      	b.n	800257c <SBUS_getData+0x5f0>
 800256c:	24000068 	.word	0x24000068
 8002570:	43b00000 	.word	0x43b00000
 8002574:	44a80000 	.word	0x44a80000
 8002578:	447a0000 	.word	0x447a0000
 800257c:	b29a      	uxth	r2, r3
 800257e:	4b28      	ldr	r3, [pc, #160]	@ (8002620 <SBUS_getData+0x694>)
 8002580:	83da      	strh	r2, [r3, #30]

	//En el caso del byte 24, el primer bit menos significativo corresponde al canal 17, el segundo al canal 18, el tercero a el fail safe y
	//el cuarto a la perdida de paquetes. Los 4 restantes no se utilizan.
	if(SBUS_UART_Rx[23]>=8){
 8002582:	4b28      	ldr	r3, [pc, #160]	@ (8002624 <SBUS_getData+0x698>)
 8002584:	7ddb      	ldrb	r3, [r3, #23]
 8002586:	2b07      	cmp	r3, #7
 8002588:	d90a      	bls.n	80025a0 <SBUS_getData+0x614>
		SBUS_UART_Rx[23]-=8;
 800258a:	4b26      	ldr	r3, [pc, #152]	@ (8002624 <SBUS_getData+0x698>)
 800258c:	7ddb      	ldrb	r3, [r3, #23]
 800258e:	3b08      	subs	r3, #8
 8002590:	b2da      	uxtb	r2, r3
 8002592:	4b24      	ldr	r3, [pc, #144]	@ (8002624 <SBUS_getData+0x698>)
 8002594:	75da      	strb	r2, [r3, #23]
		Radio_input.fail_safe = FailSafe;
 8002596:	4b22      	ldr	r3, [pc, #136]	@ (8002620 <SBUS_getData+0x694>)
 8002598:	2235      	movs	r2, #53	@ 0x35
 800259a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 800259e:	e003      	b.n	80025a8 <SBUS_getData+0x61c>
	}else Radio_input.fail_safe= Ok;
 80025a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002620 <SBUS_getData+0x694>)
 80025a2:	22aa      	movs	r2, #170	@ 0xaa
 80025a4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	if(SBUS_UART_Rx[23]>=4){
 80025a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002624 <SBUS_getData+0x698>)
 80025aa:	7ddb      	ldrb	r3, [r3, #23]
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	d90a      	bls.n	80025c6 <SBUS_getData+0x63a>
		SBUS_UART_Rx[23]-=4;
 80025b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002624 <SBUS_getData+0x698>)
 80025b2:	7ddb      	ldrb	r3, [r3, #23]
 80025b4:	3b04      	subs	r3, #4
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002624 <SBUS_getData+0x698>)
 80025ba:	75da      	strb	r2, [r3, #23]
		Radio_input.pkg_lost = Pkg_Lost;
 80025bc:	4b18      	ldr	r3, [pc, #96]	@ (8002620 <SBUS_getData+0x694>)
 80025be:	2210      	movs	r2, #16
 80025c0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 80025c4:	e003      	b.n	80025ce <SBUS_getData+0x642>
	}else Radio_input.pkg_lost=Ok;
 80025c6:	4b16      	ldr	r3, [pc, #88]	@ (8002620 <SBUS_getData+0x694>)
 80025c8:	22aa      	movs	r2, #170	@ 0xaa
 80025ca:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	if(SBUS_UART_Rx[23]>=2){
 80025ce:	4b15      	ldr	r3, [pc, #84]	@ (8002624 <SBUS_getData+0x698>)
 80025d0:	7ddb      	ldrb	r3, [r3, #23]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d90a      	bls.n	80025ec <SBUS_getData+0x660>
		SBUS_UART_Rx[23]-=2;
 80025d6:	4b13      	ldr	r3, [pc, #76]	@ (8002624 <SBUS_getData+0x698>)
 80025d8:	7ddb      	ldrb	r3, [r3, #23]
 80025da:	3b02      	subs	r3, #2
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	4b11      	ldr	r3, [pc, #68]	@ (8002624 <SBUS_getData+0x698>)
 80025e0:	75da      	strb	r2, [r3, #23]
		Radio_input.Interruptor_2=ON;
 80025e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002620 <SBUS_getData+0x694>)
 80025e4:	22ff      	movs	r2, #255	@ 0xff
 80025e6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 80025ea:	e003      	b.n	80025f4 <SBUS_getData+0x668>
	}else Radio_input.Interruptor_2=OFF;
 80025ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002620 <SBUS_getData+0x694>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	if(SBUS_UART_Rx[23]){
 80025f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002624 <SBUS_getData+0x698>)
 80025f6:	7ddb      	ldrb	r3, [r3, #23]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d004      	beq.n	8002606 <SBUS_getData+0x67a>
		Radio_input.Interruptor_1=ON;
 80025fc:	4b08      	ldr	r3, [pc, #32]	@ (8002620 <SBUS_getData+0x694>)
 80025fe:	22ff      	movs	r2, #255	@ 0xff
 8002600:	f883 2020 	strb.w	r2, [r3, #32]
 8002604:	e003      	b.n	800260e <SBUS_getData+0x682>
	}else Radio_input.Interruptor_1=OFF;
 8002606:	4b06      	ldr	r3, [pc, #24]	@ (8002620 <SBUS_getData+0x694>)
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2020 	strb.w	r2, [r3, #32]


	Radio_input.Uart_Counter = 0;
 800260e:	4b04      	ldr	r3, [pc, #16]	@ (8002620 <SBUS_getData+0x694>)
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	Temp_BypassFunct();
 8002616:	f7ff fc87 	bl	8001f28 <Temp_BypassFunct>

}
 800261a:	bf00      	nop
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	24000068 	.word	0x24000068
 8002624:	24000324 	.word	0x24000324

08002628 <SBUS_IntegrityVerification>:

void SBUS_IntegrityVerification(void){
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0

	if(Radio_input.Uart_Counter != 255){
 800262c:	4b0f      	ldr	r3, [pc, #60]	@ (800266c <SBUS_IntegrityVerification+0x44>)
 800262e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002632:	2bff      	cmp	r3, #255	@ 0xff
 8002634:	d00c      	beq.n	8002650 <SBUS_IntegrityVerification+0x28>
		Radio_input.Uart_Counter++;
 8002636:	4b0d      	ldr	r3, [pc, #52]	@ (800266c <SBUS_IntegrityVerification+0x44>)
 8002638:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800263c:	3301      	adds	r3, #1
 800263e:	b2da      	uxtb	r2, r3
 8002640:	4b0a      	ldr	r3, [pc, #40]	@ (800266c <SBUS_IntegrityVerification+0x44>)
 8002642:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		Radio_input.uart_error = Ok;
 8002646:	4b09      	ldr	r3, [pc, #36]	@ (800266c <SBUS_IntegrityVerification+0x44>)
 8002648:	22aa      	movs	r2, #170	@ 0xaa
 800264a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	}
	else{
		Radio_input.uart_error = Uart_Error;
		Radio_input.fail_safe = FailSafe;
	}
}
 800264e:	e007      	b.n	8002660 <SBUS_IntegrityVerification+0x38>
		Radio_input.uart_error = Uart_Error;
 8002650:	4b06      	ldr	r3, [pc, #24]	@ (800266c <SBUS_IntegrityVerification+0x44>)
 8002652:	2220      	movs	r2, #32
 8002654:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		Radio_input.fail_safe = FailSafe;
 8002658:	4b04      	ldr	r3, [pc, #16]	@ (800266c <SBUS_IntegrityVerification+0x44>)
 800265a:	2235      	movs	r2, #53	@ 0x35
 800265c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
}
 8002660:	bf00      	nop
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	24000068 	.word	0x24000068

08002670 <ASCII2uint8>:
char fileName[] = "FD000.csv";

char ConfigFile[10] = "Config.txt";
char GainsFile[9]    = "Gains.csv";

uint8_t ASCII2uint8(char *buffer, uint8_t Size){
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	70fb      	strb	r3, [r7, #3]
	uint8_t inter = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	73fb      	strb	r3, [r7, #15]

	for (uint8_t n = 0; n < Size; ++n) {
 8002680:	2300      	movs	r3, #0
 8002682:	73bb      	strb	r3, [r7, #14]
 8002684:	e011      	b.n	80026aa <ASCII2uint8+0x3a>
		inter *= 10;
 8002686:	7bfb      	ldrb	r3, [r7, #15]
 8002688:	461a      	mov	r2, r3
 800268a:	0092      	lsls	r2, r2, #2
 800268c:	4413      	add	r3, r2
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	73fb      	strb	r3, [r7, #15]

		inter += (buffer[n] - 48);
 8002692:	7bbb      	ldrb	r3, [r7, #14]
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	4413      	add	r3, r2
 8002698:	781a      	ldrb	r2, [r3, #0]
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	4413      	add	r3, r2
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	3b30      	subs	r3, #48	@ 0x30
 80026a2:	73fb      	strb	r3, [r7, #15]
	for (uint8_t n = 0; n < Size; ++n) {
 80026a4:	7bbb      	ldrb	r3, [r7, #14]
 80026a6:	3301      	adds	r3, #1
 80026a8:	73bb      	strb	r3, [r7, #14]
 80026aa:	7bba      	ldrb	r2, [r7, #14]
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d3e9      	bcc.n	8002686 <ASCII2uint8+0x16>
	}
	return inter;
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <uint82ASCII>:

void uint82ASCII(uint8_t Inter, char *Output){
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	6039      	str	r1, [r7, #0]
 80026ca:	71fb      	strb	r3, [r7, #7]
	Output[0] = Inter/100;
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	4a27      	ldr	r2, [pc, #156]	@ (800276c <uint82ASCII+0xac>)
 80026d0:	fba2 2303 	umull	r2, r3, r2, r3
 80026d4:	095b      	lsrs	r3, r3, #5
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	701a      	strb	r2, [r3, #0]
	Output[1] = (Inter - Output[0]*100) /10;
 80026dc:	79fa      	ldrb	r2, [r7, #7]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	4619      	mov	r1, r3
 80026e4:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80026e8:	fb01 f303 	mul.w	r3, r1, r3
 80026ec:	4413      	add	r3, r2
 80026ee:	4a20      	ldr	r2, [pc, #128]	@ (8002770 <uint82ASCII+0xb0>)
 80026f0:	fb82 1203 	smull	r1, r2, r2, r3
 80026f4:	1092      	asrs	r2, r2, #2
 80026f6:	17db      	asrs	r3, r3, #31
 80026f8:	1ad2      	subs	r2, r2, r3
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	3301      	adds	r3, #1
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	701a      	strb	r2, [r3, #0]
	Output[2] = (Inter - Output[0]*100 - Output[1]*10) ;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	461a      	mov	r2, r3
 8002708:	0092      	lsls	r2, r2, #2
 800270a:	441a      	add	r2, r3
 800270c:	00d2      	lsls	r2, r2, #3
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	b2da      	uxtb	r2, r3
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	3301      	adds	r3, #1
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	4619      	mov	r1, r3
 800271c:	0149      	lsls	r1, r1, #5
 800271e:	1ac9      	subs	r1, r1, r3
 8002720:	0089      	lsls	r1, r1, #2
 8002722:	1acb      	subs	r3, r1, r3
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	b2db      	uxtb	r3, r3
 8002728:	4413      	add	r3, r2
 800272a:	b2d9      	uxtb	r1, r3
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	3302      	adds	r3, #2
 8002730:	79fa      	ldrb	r2, [r7, #7]
 8002732:	440a      	add	r2, r1
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	701a      	strb	r2, [r3, #0]

	for (uint8_t n = 0; n < 3; ++n) {
 8002738:	2300      	movs	r3, #0
 800273a:	73fb      	strb	r3, [r7, #15]
 800273c:	e00c      	b.n	8002758 <uint82ASCII+0x98>
		Output[n] +=48;
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	4413      	add	r3, r2
 8002744:	781a      	ldrb	r2, [r3, #0]
 8002746:	7bfb      	ldrb	r3, [r7, #15]
 8002748:	6839      	ldr	r1, [r7, #0]
 800274a:	440b      	add	r3, r1
 800274c:	3230      	adds	r2, #48	@ 0x30
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	701a      	strb	r2, [r3, #0]
	for (uint8_t n = 0; n < 3; ++n) {
 8002752:	7bfb      	ldrb	r3, [r7, #15]
 8002754:	3301      	adds	r3, #1
 8002756:	73fb      	strb	r3, [r7, #15]
 8002758:	7bfb      	ldrb	r3, [r7, #15]
 800275a:	2b02      	cmp	r3, #2
 800275c:	d9ef      	bls.n	800273e <uint82ASCII+0x7e>
	}
}
 800275e:	bf00      	nop
 8002760:	bf00      	nop
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	51eb851f 	.word	0x51eb851f
 8002770:	66666667 	.word	0x66666667

08002774 <ConfigFile_Create>:

void ConfigFile_Create(void){
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0

	f_unlink(ConfigFile);
 8002778:	480c      	ldr	r0, [pc, #48]	@ (80027ac <ConfigFile_Create+0x38>)
 800277a:	f011 f86a 	bl	8013852 <f_unlink>

	f_open(&Config, ConfigFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800277e:	2213      	movs	r2, #19
 8002780:	490a      	ldr	r1, [pc, #40]	@ (80027ac <ConfigFile_Create+0x38>)
 8002782:	480b      	ldr	r0, [pc, #44]	@ (80027b0 <ConfigFile_Create+0x3c>)
 8002784:	f010 f8de 	bl	8012944 <f_open>

	f_printf(&Config, "Version: ");
 8002788:	490a      	ldr	r1, [pc, #40]	@ (80027b4 <ConfigFile_Create+0x40>)
 800278a:	4809      	ldr	r0, [pc, #36]	@ (80027b0 <ConfigFile_Create+0x3c>)
 800278c:	f011 f99a 	bl	8013ac4 <f_printf>
	f_printf(&Config,  SystemConfig.FWVersion);
 8002790:	4909      	ldr	r1, [pc, #36]	@ (80027b8 <ConfigFile_Create+0x44>)
 8002792:	4807      	ldr	r0, [pc, #28]	@ (80027b0 <ConfigFile_Create+0x3c>)
 8002794:	f011 f996 	bl	8013ac4 <f_printf>
	f_printf(&Config, "\nN. Reset: 000\n");
 8002798:	4908      	ldr	r1, [pc, #32]	@ (80027bc <ConfigFile_Create+0x48>)
 800279a:	4805      	ldr	r0, [pc, #20]	@ (80027b0 <ConfigFile_Create+0x3c>)
 800279c:	f011 f992 	bl	8013ac4 <f_printf>
	f_close(&Config);
 80027a0:	4803      	ldr	r0, [pc, #12]	@ (80027b0 <ConfigFile_Create+0x3c>)
 80027a2:	f010 fe08 	bl	80133b6 <f_close>
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	24000098 	.word	0x24000098
 80027b0:	2400137c 	.word	0x2400137c
 80027b4:	08014438 	.word	0x08014438
 80027b8:	24000090 	.word	0x24000090
 80027bc:	08014444 	.word	0x08014444

080027c0 <ConfigFile_Init>:

void ConfigFile_Init(void){
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
	char FileVersion[5] = {0};
 80027c6:	2300      	movs	r3, #0
 80027c8:	60bb      	str	r3, [r7, #8]
 80027ca:	2300      	movs	r3, #0
 80027cc:	733b      	strb	r3, [r7, #12]
	char NResetChar[3]  = {255};
 80027ce:	4b30      	ldr	r3, [pc, #192]	@ (8002890 <ConfigFile_Init+0xd0>)
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	80bb      	strh	r3, [r7, #4]
 80027d4:	2300      	movs	r3, #0
 80027d6:	71bb      	strb	r3, [r7, #6]

	f_open(&Config, ConfigFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80027d8:	2213      	movs	r2, #19
 80027da:	492e      	ldr	r1, [pc, #184]	@ (8002894 <ConfigFile_Init+0xd4>)
 80027dc:	482e      	ldr	r0, [pc, #184]	@ (8002898 <ConfigFile_Init+0xd8>)
 80027de:	f010 f8b1 	bl	8012944 <f_open>

	f_lseek(&Config, Config_FWVersion);
 80027e2:	2109      	movs	r1, #9
 80027e4:	482c      	ldr	r0, [pc, #176]	@ (8002898 <ConfigFile_Init+0xd8>)
 80027e6:	f010 fe10 	bl	801340a <f_lseek>

	f_read(&Config, FileVersion, 5, &br);
 80027ea:	f107 0108 	add.w	r1, r7, #8
 80027ee:	4b2b      	ldr	r3, [pc, #172]	@ (800289c <ConfigFile_Init+0xdc>)
 80027f0:	2205      	movs	r2, #5
 80027f2:	4829      	ldr	r0, [pc, #164]	@ (8002898 <ConfigFile_Init+0xd8>)
 80027f4:	f010 fa6e 	bl	8012cd4 <f_read>

	f_close(&Config);
 80027f8:	4827      	ldr	r0, [pc, #156]	@ (8002898 <ConfigFile_Init+0xd8>)
 80027fa:	f010 fddc 	bl	80133b6 <f_close>

	for (uint8_t n = 0; n < 5; ++n) {
 80027fe:	2300      	movs	r3, #0
 8002800:	73fb      	strb	r3, [r7, #15]
 8002802:	e010      	b.n	8002826 <ConfigFile_Init+0x66>
		if(FileVersion[n] != SystemConfig.FWVersion[n]){
 8002804:	7bfb      	ldrb	r3, [r7, #15]
 8002806:	3310      	adds	r3, #16
 8002808:	443b      	add	r3, r7
 800280a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	4923      	ldr	r1, [pc, #140]	@ (80028a0 <ConfigFile_Init+0xe0>)
 8002812:	5ccb      	ldrb	r3, [r1, r3]
 8002814:	429a      	cmp	r2, r3
 8002816:	d003      	beq.n	8002820 <ConfigFile_Init+0x60>
			ConfigFile_Create();
 8002818:	f7ff ffac 	bl	8002774 <ConfigFile_Create>
			n = 5;
 800281c:	2305      	movs	r3, #5
 800281e:	73fb      	strb	r3, [r7, #15]
	for (uint8_t n = 0; n < 5; ++n) {
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	3301      	adds	r3, #1
 8002824:	73fb      	strb	r3, [r7, #15]
 8002826:	7bfb      	ldrb	r3, [r7, #15]
 8002828:	2b04      	cmp	r3, #4
 800282a:	d9eb      	bls.n	8002804 <ConfigFile_Init+0x44>
		}
	}
	f_open(&Config, ConfigFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800282c:	2213      	movs	r2, #19
 800282e:	4919      	ldr	r1, [pc, #100]	@ (8002894 <ConfigFile_Init+0xd4>)
 8002830:	4819      	ldr	r0, [pc, #100]	@ (8002898 <ConfigFile_Init+0xd8>)
 8002832:	f010 f887 	bl	8012944 <f_open>

	f_lseek(&Config, 26);
 8002836:	211a      	movs	r1, #26
 8002838:	4817      	ldr	r0, [pc, #92]	@ (8002898 <ConfigFile_Init+0xd8>)
 800283a:	f010 fde6 	bl	801340a <f_lseek>
	f_read(&Config, NResetChar, 3, &br);
 800283e:	1d39      	adds	r1, r7, #4
 8002840:	4b16      	ldr	r3, [pc, #88]	@ (800289c <ConfigFile_Init+0xdc>)
 8002842:	2203      	movs	r2, #3
 8002844:	4814      	ldr	r0, [pc, #80]	@ (8002898 <ConfigFile_Init+0xd8>)
 8002846:	f010 fa45 	bl	8012cd4 <f_read>

	SystemConfig.ResetCounter = ASCII2uint8(NResetChar, 3) + 1;
 800284a:	1d3b      	adds	r3, r7, #4
 800284c:	2103      	movs	r1, #3
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff ff0e 	bl	8002670 <ASCII2uint8>
 8002854:	4603      	mov	r3, r0
 8002856:	3301      	adds	r3, #1
 8002858:	b2da      	uxtb	r2, r3
 800285a:	4b11      	ldr	r3, [pc, #68]	@ (80028a0 <ConfigFile_Init+0xe0>)
 800285c:	715a      	strb	r2, [r3, #5]
	uint82ASCII(SystemConfig.ResetCounter, NResetChar);
 800285e:	4b10      	ldr	r3, [pc, #64]	@ (80028a0 <ConfigFile_Init+0xe0>)
 8002860:	795b      	ldrb	r3, [r3, #5]
 8002862:	1d3a      	adds	r2, r7, #4
 8002864:	4611      	mov	r1, r2
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff ff2a 	bl	80026c0 <uint82ASCII>

	f_lseek(&Config, 26);
 800286c:	211a      	movs	r1, #26
 800286e:	480a      	ldr	r0, [pc, #40]	@ (8002898 <ConfigFile_Init+0xd8>)
 8002870:	f010 fdcb 	bl	801340a <f_lseek>
	f_write(&Config, NResetChar, 3, &bw);
 8002874:	1d39      	adds	r1, r7, #4
 8002876:	4b0b      	ldr	r3, [pc, #44]	@ (80028a4 <ConfigFile_Init+0xe4>)
 8002878:	2203      	movs	r2, #3
 800287a:	4807      	ldr	r0, [pc, #28]	@ (8002898 <ConfigFile_Init+0xd8>)
 800287c:	f010 fb89 	bl	8012f92 <f_write>

	f_close(&Config);
 8002880:	4805      	ldr	r0, [pc, #20]	@ (8002898 <ConfigFile_Init+0xd8>)
 8002882:	f010 fd98 	bl	80133b6 <f_close>

}
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	08014454 	.word	0x08014454
 8002894:	24000098 	.word	0x24000098
 8002898:	2400137c 	.word	0x2400137c
 800289c:	240023b0 	.word	0x240023b0
 80028a0:	24000090 	.word	0x24000090
 80028a4:	240023b4 	.word	0x240023b4

080028a8 <SD_init>:

void SD_init(void){
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
	  fresult = f_mount(&fs, "/", 1);
 80028ac:	2201      	movs	r2, #1
 80028ae:	4906      	ldr	r1, [pc, #24]	@ (80028c8 <SD_init+0x20>)
 80028b0:	4806      	ldr	r0, [pc, #24]	@ (80028cc <SD_init+0x24>)
 80028b2:	f010 f801 	bl	80128b8 <f_mount>
 80028b6:	4603      	mov	r3, r0
 80028b8:	461a      	mov	r2, r3
 80028ba:	4b05      	ldr	r3, [pc, #20]	@ (80028d0 <SD_init+0x28>)
 80028bc:	701a      	strb	r2, [r3, #0]

	  ConfigFile_Init();
 80028be:	f7ff ff7f 	bl	80027c0 <ConfigFile_Init>
}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	08014458 	.word	0x08014458
 80028cc:	24000340 	.word	0x24000340
 80028d0:	240023ac 	.word	0x240023ac

080028d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028da:	4b11      	ldr	r3, [pc, #68]	@ (8002920 <MX_DMA_Init+0x4c>)
 80028dc:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80028e0:	4a0f      	ldr	r2, [pc, #60]	@ (8002920 <MX_DMA_Init+0x4c>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80028ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002920 <MX_DMA_Init+0x4c>)
 80028ec:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	607b      	str	r3, [r7, #4]
 80028f6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80028f8:	2200      	movs	r2, #0
 80028fa:	2100      	movs	r1, #0
 80028fc:	200b      	movs	r0, #11
 80028fe:	f001 fe34 	bl	800456a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002902:	200b      	movs	r0, #11
 8002904:	f001 fe4b 	bl	800459e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002908:	2200      	movs	r2, #0
 800290a:	2100      	movs	r1, #0
 800290c:	200c      	movs	r0, #12
 800290e:	f001 fe2c 	bl	800456a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002912:	200c      	movs	r0, #12
 8002914:	f001 fe43 	bl	800459e <HAL_NVIC_EnableIRQ>

}
 8002918:	bf00      	nop
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	58024400 	.word	0x58024400

08002924 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002928:	4b2e      	ldr	r3, [pc, #184]	@ (80029e4 <MX_FDCAN1_Init+0xc0>)
 800292a:	4a2f      	ldr	r2, [pc, #188]	@ (80029e8 <MX_FDCAN1_Init+0xc4>)
 800292c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800292e:	4b2d      	ldr	r3, [pc, #180]	@ (80029e4 <MX_FDCAN1_Init+0xc0>)
 8002930:	2200      	movs	r2, #0
 8002932:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002934:	4b2b      	ldr	r3, [pc, #172]	@ (80029e4 <MX_FDCAN1_Init+0xc0>)
 8002936:	2200      	movs	r2, #0
 8002938:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800293a:	4b2a      	ldr	r3, [pc, #168]	@ (80029e4 <MX_FDCAN1_Init+0xc0>)
 800293c:	2200      	movs	r2, #0
 800293e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002940:	4b28      	ldr	r3, [pc, #160]	@ (80029e4 <MX_FDCAN1_Init+0xc0>)
 8002942:	2200      	movs	r2, #0
 8002944:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002946:	4b27      	ldr	r3, [pc, #156]	@ (80029e4 <MX_FDCAN1_Init+0xc0>)
 8002948:	2200      	movs	r2, #0
 800294a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800294c:	4b25      	ldr	r3, [pc, #148]	@ (80029e4 <MX_FDCAN1_Init+0xc0>)
 800294e:	2210      	movs	r2, #16
 8002950:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8002952:	4b24      	ldr	r3, [pc, #144]	@ (80029e4 <MX_FDCAN1_Init+0xc0>)
 8002954:	2201      	movs	r2, #1
 8002956:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8002958:	4b22      	ldr	r3, [pc, #136]	@ (80029e4 <MX_FDCAN1_Init+0xc0>)
 800295a:	2202      	movs	r2, #2
 800295c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800295e:	4b21      	ldr	r3, [pc, #132]	@ (80029e4 <MX_FDCAN1_Init+0xc0>)
 8002960:	2202      	movs	r2, #2
 8002962:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8002964:	4b1f      	ldr	r3, [pc, #124]	@ (80029e4 <MX_FDCAN1_Init+0xc0>)
 8002966:	2201      	movs	r2, #1
 8002968:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800296a:	4b1e      	ldr	r3, [pc, #120]	@ (80029e4 <MX_FDCAN1_Init+0xc0>)
 800296c:	2201      	movs	r2, #1
 800296e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8002970:	4b1c      	ldr	r3, [pc, #112]	@ (80029e4 <MX_FDCAN1_Init+0xc0>)
 8002972:	2201      	movs	r2, #1
 8002974:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8002976:	4b1b      	ldr	r3, [pc, #108]	@ (80029e4 <MX_FDCAN1_Init+0xc0>)
 8002978:	2201      	movs	r2, #1
 800297a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800297c:	4b19      	ldr	r3, [pc, #100]	@ (80029e4 <MX_FDCAN1_Init+0xc0>)
 800297e:	2200      	movs	r2, #0
 8002980:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8002982:	4b18      	ldr	r3, [pc, #96]	@ (80029e4 <MX_FDCAN1_Init+0xc0>)
 8002984:	2200      	movs	r2, #0
 8002986:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002988:	4b16      	ldr	r3, [pc, #88]	@ (80029e4 <MX_FDCAN1_Init+0xc0>)
 800298a:	2200      	movs	r2, #0
 800298c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800298e:	4b15      	ldr	r3, [pc, #84]	@ (80029e4 <MX_FDCAN1_Init+0xc0>)
 8002990:	2200      	movs	r2, #0
 8002992:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8002994:	4b13      	ldr	r3, [pc, #76]	@ (80029e4 <MX_FDCAN1_Init+0xc0>)
 8002996:	2204      	movs	r2, #4
 8002998:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800299a:	4b12      	ldr	r3, [pc, #72]	@ (80029e4 <MX_FDCAN1_Init+0xc0>)
 800299c:	2200      	movs	r2, #0
 800299e:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80029a0:	4b10      	ldr	r3, [pc, #64]	@ (80029e4 <MX_FDCAN1_Init+0xc0>)
 80029a2:	2204      	movs	r2, #4
 80029a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80029a6:	4b0f      	ldr	r3, [pc, #60]	@ (80029e4 <MX_FDCAN1_Init+0xc0>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80029ac:	4b0d      	ldr	r3, [pc, #52]	@ (80029e4 <MX_FDCAN1_Init+0xc0>)
 80029ae:	2204      	movs	r2, #4
 80029b0:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80029b2:	4b0c      	ldr	r3, [pc, #48]	@ (80029e4 <MX_FDCAN1_Init+0xc0>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80029b8:	4b0a      	ldr	r3, [pc, #40]	@ (80029e4 <MX_FDCAN1_Init+0xc0>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80029be:	4b09      	ldr	r3, [pc, #36]	@ (80029e4 <MX_FDCAN1_Init+0xc0>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80029c4:	4b07      	ldr	r3, [pc, #28]	@ (80029e4 <MX_FDCAN1_Init+0xc0>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80029ca:	4b06      	ldr	r3, [pc, #24]	@ (80029e4 <MX_FDCAN1_Init+0xc0>)
 80029cc:	2204      	movs	r2, #4
 80029ce:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80029d0:	4804      	ldr	r0, [pc, #16]	@ (80029e4 <MX_FDCAN1_Init+0xc0>)
 80029d2:	f004 fd55 	bl	8007480 <HAL_FDCAN_Init>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80029dc:	f000 fb4c 	bl	8003078 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80029e0:	bf00      	nop
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	240023b8 	.word	0x240023b8
 80029e8:	4000a000 	.word	0x4000a000

080029ec <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b0ba      	sub	sp, #232	@ 0xe8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	60da      	str	r2, [r3, #12]
 8002a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a04:	f107 0310 	add.w	r3, r7, #16
 8002a08:	22c0      	movs	r2, #192	@ 0xc0
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f011 fb99 	bl	8014144 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a2f      	ldr	r2, [pc, #188]	@ (8002ad4 <HAL_FDCAN_MspInit+0xe8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d157      	bne.n	8002acc <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002a1c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002a20:	f04f 0300 	mov.w	r3, #0
 8002a24:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8002a28:	2304      	movs	r3, #4
 8002a2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 8002a2c:	2308      	movs	r3, #8
 8002a2e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8002a30:	2302      	movs	r3, #2
 8002a32:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8002a34:	2301      	movs	r3, #1
 8002a36:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8002a3c:	23c0      	movs	r3, #192	@ 0xc0
 8002a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8002a40:	2300      	movs	r3, #0
 8002a42:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002a44:	2300      	movs	r3, #0
 8002a46:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8002a48:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002a4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a50:	f107 0310 	add.w	r3, r7, #16
 8002a54:	4618      	mov	r0, r3
 8002a56:	f006 fb6d 	bl	8009134 <HAL_RCCEx_PeriphCLKConfig>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8002a60:	f000 fb0a 	bl	8003078 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002a64:	4b1c      	ldr	r3, [pc, #112]	@ (8002ad8 <HAL_FDCAN_MspInit+0xec>)
 8002a66:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8002a6a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ad8 <HAL_FDCAN_MspInit+0xec>)
 8002a6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a70:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8002a74:	4b18      	ldr	r3, [pc, #96]	@ (8002ad8 <HAL_FDCAN_MspInit+0xec>)
 8002a76:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8002a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a82:	4b15      	ldr	r3, [pc, #84]	@ (8002ad8 <HAL_FDCAN_MspInit+0xec>)
 8002a84:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002a88:	4a13      	ldr	r2, [pc, #76]	@ (8002ad8 <HAL_FDCAN_MspInit+0xec>)
 8002a8a:	f043 0301 	orr.w	r3, r3, #1
 8002a8e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002a92:	4b11      	ldr	r3, [pc, #68]	@ (8002ad8 <HAL_FDCAN_MspInit+0xec>)
 8002a94:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002aa0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002aa4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002aba:	2309      	movs	r3, #9
 8002abc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4805      	ldr	r0, [pc, #20]	@ (8002adc <HAL_FDCAN_MspInit+0xf0>)
 8002ac8:	f005 f83e 	bl	8007b48 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8002acc:	bf00      	nop
 8002ace:	37e8      	adds	r7, #232	@ 0xe8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	4000a000 	.word	0x4000a000
 8002ad8:	58024400 	.word	0x58024400
 8002adc:	58020000 	.word	0x58020000

08002ae0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08a      	sub	sp, #40	@ 0x28
 8002ae4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae6:	f107 0314 	add.w	r3, r7, #20
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	605a      	str	r2, [r3, #4]
 8002af0:	609a      	str	r2, [r3, #8]
 8002af2:	60da      	str	r2, [r3, #12]
 8002af4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002af6:	4b4e      	ldr	r3, [pc, #312]	@ (8002c30 <MX_GPIO_Init+0x150>)
 8002af8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002afc:	4a4c      	ldr	r2, [pc, #304]	@ (8002c30 <MX_GPIO_Init+0x150>)
 8002afe:	f043 0304 	orr.w	r3, r3, #4
 8002b02:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002b06:	4b4a      	ldr	r3, [pc, #296]	@ (8002c30 <MX_GPIO_Init+0x150>)
 8002b08:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b14:	4b46      	ldr	r3, [pc, #280]	@ (8002c30 <MX_GPIO_Init+0x150>)
 8002b16:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002b1a:	4a45      	ldr	r2, [pc, #276]	@ (8002c30 <MX_GPIO_Init+0x150>)
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002b24:	4b42      	ldr	r3, [pc, #264]	@ (8002c30 <MX_GPIO_Init+0x150>)
 8002b26:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b32:	4b3f      	ldr	r3, [pc, #252]	@ (8002c30 <MX_GPIO_Init+0x150>)
 8002b34:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002b38:	4a3d      	ldr	r2, [pc, #244]	@ (8002c30 <MX_GPIO_Init+0x150>)
 8002b3a:	f043 0302 	orr.w	r3, r3, #2
 8002b3e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002b42:	4b3b      	ldr	r3, [pc, #236]	@ (8002c30 <MX_GPIO_Init+0x150>)
 8002b44:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	60bb      	str	r3, [r7, #8]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b50:	4b37      	ldr	r3, [pc, #220]	@ (8002c30 <MX_GPIO_Init+0x150>)
 8002b52:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002b56:	4a36      	ldr	r2, [pc, #216]	@ (8002c30 <MX_GPIO_Init+0x150>)
 8002b58:	f043 0308 	orr.w	r3, r3, #8
 8002b5c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002b60:	4b33      	ldr	r3, [pc, #204]	@ (8002c30 <MX_GPIO_Init+0x150>)
 8002b62:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	607b      	str	r3, [r7, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f242 010f 	movw	r1, #8207	@ 0x200f
 8002b74:	482f      	ldr	r0, [pc, #188]	@ (8002c34 <MX_GPIO_Init+0x154>)
 8002b76:	f005 f997 	bl	8007ea8 <HAL_GPIO_WritePin>
                          |LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2110      	movs	r1, #16
 8002b7e:	482e      	ldr	r0, [pc, #184]	@ (8002c38 <MX_GPIO_Init+0x158>)
 8002b80:	f005 f992 	bl	8007ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU_BOOT_Pin|BME_NSS_Pin, GPIO_PIN_RESET);
 8002b84:	2200      	movs	r2, #0
 8002b86:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8002b8a:	482c      	ldr	r0, [pc, #176]	@ (8002c3c <MX_GPIO_Init+0x15c>)
 8002b8c:	f005 f98c 	bl	8007ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, GPIO_PIN_RESET);
 8002b90:	2200      	movs	r2, #0
 8002b92:	2104      	movs	r1, #4
 8002b94:	482a      	ldr	r0, [pc, #168]	@ (8002c40 <MX_GPIO_Init+0x160>)
 8002b96:	f005 f987 	bl	8007ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8002b9a:	f242 030f 	movw	r3, #8207	@ 0x200f
 8002b9e:	617b      	str	r3, [r7, #20]
                          |LED_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bac:	f107 0314 	add.w	r3, r7, #20
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4820      	ldr	r0, [pc, #128]	@ (8002c34 <MX_GPIO_Init+0x154>)
 8002bb4:	f004 ffc8 	bl	8007b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 8002bb8:	2310      	movs	r3, #16
 8002bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 8002bc8:	f107 0314 	add.w	r3, r7, #20
 8002bcc:	4619      	mov	r1, r3
 8002bce:	481a      	ldr	r0, [pc, #104]	@ (8002c38 <MX_GPIO_Init+0x158>)
 8002bd0:	f004 ffba 	bl	8007b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IMU_BOOT_Pin|BME_NSS_Pin;
 8002bd4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be2:	2300      	movs	r3, #0
 8002be4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be6:	f107 0314 	add.w	r3, r7, #20
 8002bea:	4619      	mov	r1, r3
 8002bec:	4813      	ldr	r0, [pc, #76]	@ (8002c3c <MX_GPIO_Init+0x15c>)
 8002bee:	f004 ffab 	bl	8007b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8002bf2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8002c00:	f107 0314 	add.w	r3, r7, #20
 8002c04:	4619      	mov	r1, r3
 8002c06:	480b      	ldr	r0, [pc, #44]	@ (8002c34 <MX_GPIO_Init+0x154>)
 8002c08:	f004 ff9e 	bl	8007b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin;
 8002c0c:	2304      	movs	r3, #4
 8002c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c10:	2301      	movs	r3, #1
 8002c12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_RST_GPIO_Port, &GPIO_InitStruct);
 8002c1c:	f107 0314 	add.w	r3, r7, #20
 8002c20:	4619      	mov	r1, r3
 8002c22:	4807      	ldr	r0, [pc, #28]	@ (8002c40 <MX_GPIO_Init+0x160>)
 8002c24:	f004 ff90 	bl	8007b48 <HAL_GPIO_Init>

}
 8002c28:	bf00      	nop
 8002c2a:	3728      	adds	r7, #40	@ 0x28
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	58024400 	.word	0x58024400
 8002c34:	58020800 	.word	0x58020800
 8002c38:	58020000 	.word	0x58020000
 8002c3c:	58020400 	.word	0x58020400
 8002c40:	58020c00 	.word	0x58020c00

08002c44 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002c48:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb8 <MX_I2C3_Init+0x74>)
 8002c4a:	4a1c      	ldr	r2, [pc, #112]	@ (8002cbc <MX_I2C3_Init+0x78>)
 8002c4c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B0CCFF;
 8002c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002cb8 <MX_I2C3_Init+0x74>)
 8002c50:	4a1b      	ldr	r2, [pc, #108]	@ (8002cc0 <MX_I2C3_Init+0x7c>)
 8002c52:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002c54:	4b18      	ldr	r3, [pc, #96]	@ (8002cb8 <MX_I2C3_Init+0x74>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c5a:	4b17      	ldr	r3, [pc, #92]	@ (8002cb8 <MX_I2C3_Init+0x74>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c60:	4b15      	ldr	r3, [pc, #84]	@ (8002cb8 <MX_I2C3_Init+0x74>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002c66:	4b14      	ldr	r3, [pc, #80]	@ (8002cb8 <MX_I2C3_Init+0x74>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c6c:	4b12      	ldr	r3, [pc, #72]	@ (8002cb8 <MX_I2C3_Init+0x74>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c72:	4b11      	ldr	r3, [pc, #68]	@ (8002cb8 <MX_I2C3_Init+0x74>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c78:	4b0f      	ldr	r3, [pc, #60]	@ (8002cb8 <MX_I2C3_Init+0x74>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002c7e:	480e      	ldr	r0, [pc, #56]	@ (8002cb8 <MX_I2C3_Init+0x74>)
 8002c80:	f005 f92c 	bl	8007edc <HAL_I2C_Init>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002c8a:	f000 f9f5 	bl	8003078 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002c8e:	2100      	movs	r1, #0
 8002c90:	4809      	ldr	r0, [pc, #36]	@ (8002cb8 <MX_I2C3_Init+0x74>)
 8002c92:	f005 f9bf 	bl	8008014 <HAL_I2CEx_ConfigAnalogFilter>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002c9c:	f000 f9ec 	bl	8003078 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4805      	ldr	r0, [pc, #20]	@ (8002cb8 <MX_I2C3_Init+0x74>)
 8002ca4:	f005 fa01 	bl	80080aa <HAL_I2CEx_ConfigDigitalFilter>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002cae:	f000 f9e3 	bl	8003078 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002cb2:	bf00      	nop
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	24002458 	.word	0x24002458
 8002cbc:	40005c00 	.word	0x40005c00
 8002cc0:	20b0ccff 	.word	0x20b0ccff

08002cc4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b0bc      	sub	sp, #240	@ 0xf0
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ccc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cdc:	f107 0318 	add.w	r3, r7, #24
 8002ce0:	22c0      	movs	r2, #192	@ 0xc0
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f011 fa2d 	bl	8014144 <memset>
  if(i2cHandle->Instance==I2C3)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a39      	ldr	r2, [pc, #228]	@ (8002dd4 <HAL_I2C_MspInit+0x110>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d16b      	bne.n	8002dcc <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002cf4:	f04f 0208 	mov.w	r2, #8
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002d00:	2300      	movs	r3, #0
 8002d02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d06:	f107 0318 	add.w	r3, r7, #24
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f006 fa12 	bl	8009134 <HAL_RCCEx_PeriphCLKConfig>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002d16:	f000 f9af 	bl	8003078 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d1a:	4b2f      	ldr	r3, [pc, #188]	@ (8002dd8 <HAL_I2C_MspInit+0x114>)
 8002d1c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002d20:	4a2d      	ldr	r2, [pc, #180]	@ (8002dd8 <HAL_I2C_MspInit+0x114>)
 8002d22:	f043 0304 	orr.w	r3, r3, #4
 8002d26:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002d2a:	4b2b      	ldr	r3, [pc, #172]	@ (8002dd8 <HAL_I2C_MspInit+0x114>)
 8002d2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d38:	4b27      	ldr	r3, [pc, #156]	@ (8002dd8 <HAL_I2C_MspInit+0x114>)
 8002d3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002d3e:	4a26      	ldr	r2, [pc, #152]	@ (8002dd8 <HAL_I2C_MspInit+0x114>)
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002d48:	4b23      	ldr	r3, [pc, #140]	@ (8002dd8 <HAL_I2C_MspInit+0x114>)
 8002d4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	613b      	str	r3, [r7, #16]
 8002d54:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d5e:	2312      	movs	r3, #18
 8002d60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d70:	2304      	movs	r3, #4
 8002d72:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d76:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4817      	ldr	r0, [pc, #92]	@ (8002ddc <HAL_I2C_MspInit+0x118>)
 8002d7e:	f004 fee3 	bl	8007b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d8a:	2312      	movs	r3, #18
 8002d8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d96:	2300      	movs	r3, #0
 8002d98:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d9c:	2304      	movs	r3, #4
 8002d9e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002da6:	4619      	mov	r1, r3
 8002da8:	480d      	ldr	r0, [pc, #52]	@ (8002de0 <HAL_I2C_MspInit+0x11c>)
 8002daa:	f004 fecd 	bl	8007b48 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002dae:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd8 <HAL_I2C_MspInit+0x114>)
 8002db0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002db4:	4a08      	ldr	r2, [pc, #32]	@ (8002dd8 <HAL_I2C_MspInit+0x114>)
 8002db6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002dba:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002dbe:	4b06      	ldr	r3, [pc, #24]	@ (8002dd8 <HAL_I2C_MspInit+0x114>)
 8002dc0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002dc4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002dcc:	bf00      	nop
 8002dce:	37f0      	adds	r7, #240	@ 0xf0
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40005c00 	.word	0x40005c00
 8002dd8:	58024400 	.word	0x58024400
 8002ddc:	58020800 	.word	0x58020800
 8002de0:	58020000 	.word	0x58020000

08002de4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8002de8:	f000 f91a 	bl	8003020 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002dec:	f001 fa50 	bl	8004290 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002df0:	f000 f83c 	bl	8002e6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002df4:	f7ff fe74 	bl	8002ae0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002df8:	f7ff fd6c 	bl	80028d4 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8002dfc:	f7ff fd92 	bl	8002924 <MX_FDCAN1_Init>
  MX_I2C3_Init();
 8002e00:	f7ff ff20 	bl	8002c44 <MX_I2C3_Init>
  MX_SPI1_Init();
 8002e04:	f000 f93e 	bl	8003084 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002e08:	f000 f992 	bl	8003130 <MX_SPI2_Init>
  MX_TIM2_Init();
 8002e0c:	f000 fbb4 	bl	8003578 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002e10:	f000 fc2e 	bl	8003670 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002e14:	f000 fc92 	bl	800373c <MX_TIM4_Init>
  MX_UART4_Init();
 8002e18:	f000 fef6 	bl	8003c08 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8002e1c:	f000 ff40 	bl	8003ca0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002e20:	f000 ffda 	bl	8003dd8 <MX_USART6_UART_Init>
  MX_TIM13_Init();
 8002e24:	f000 fd76 	bl	8003914 <MX_TIM13_Init>
  MX_FATFS_Init();
 8002e28:	f00c fc76 	bl	800f718 <MX_FATFS_Init>
  MX_TIM6_Init();
 8002e2c:	f000 fd02 	bl	8003834 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8002e30:	f000 ff86 	bl	8003d40 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8002e34:	f000 fd36 	bl	80038a4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  BMP280_init();
 8002e38:	f7fe f8ea 	bl	8001010 <BMP280_init>
  SD_init();
 8002e3c:	f7ff fd34 	bl	80028a8 <SD_init>
  HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8002e40:	2201      	movs	r2, #1
 8002e42:	4906      	ldr	r1, [pc, #24]	@ (8002e5c <main+0x78>)
 8002e44:	4806      	ldr	r0, [pc, #24]	@ (8002e60 <main+0x7c>)
 8002e46:	f00a faa1 	bl	800d38c <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim6);
 8002e4a:	4806      	ldr	r0, [pc, #24]	@ (8002e64 <main+0x80>)
 8002e4c:	f009 f950 	bl	800c0f0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8002e50:	4805      	ldr	r0, [pc, #20]	@ (8002e68 <main+0x84>)
 8002e52:	f009 f94d 	bl	800c0f0 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002e56:	bf00      	nop
 8002e58:	e7fd      	b.n	8002e56 <main+0x72>
 8002e5a:	bf00      	nop
 8002e5c:	24000273 	.word	0x24000273
 8002e60:	240028bc 	.word	0x240028bc
 8002e64:	240026b0 	.word	0x240026b0
 8002e68:	240026fc 	.word	0x240026fc

08002e6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b09c      	sub	sp, #112	@ 0x70
 8002e70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e76:	224c      	movs	r2, #76	@ 0x4c
 8002e78:	2100      	movs	r1, #0
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f011 f962 	bl	8014144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e80:	1d3b      	adds	r3, r7, #4
 8002e82:	2220      	movs	r2, #32
 8002e84:	2100      	movs	r1, #0
 8002e86:	4618      	mov	r0, r3
 8002e88:	f011 f95c 	bl	8014144 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8002e8c:	4b30      	ldr	r3, [pc, #192]	@ (8002f50 <SystemClock_Config+0xe4>)
 8002e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8002e92:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002e96:	2002      	movs	r0, #2
 8002e98:	f005 f954 	bl	8008144 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	603b      	str	r3, [r7, #0]
 8002ea0:	4b2c      	ldr	r3, [pc, #176]	@ (8002f54 <SystemClock_Config+0xe8>)
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	4a2b      	ldr	r2, [pc, #172]	@ (8002f54 <SystemClock_Config+0xe8>)
 8002ea6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002eaa:	6193      	str	r3, [r2, #24]
 8002eac:	4b29      	ldr	r3, [pc, #164]	@ (8002f54 <SystemClock_Config+0xe8>)
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002eb4:	603b      	str	r3, [r7, #0]
 8002eb6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002eb8:	bf00      	nop
 8002eba:	4b26      	ldr	r3, [pc, #152]	@ (8002f54 <SystemClock_Config+0xe8>)
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ec2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ec6:	d1f8      	bne.n	8002eba <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8002ed0:	2340      	movs	r3, #64	@ 0x40
 8002ed2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002edc:	2304      	movs	r3, #4
 8002ede:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8002ee0:	2323      	movs	r3, #35	@ 0x23
 8002ee2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002eec:	2302      	movs	r3, #2
 8002eee:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002ef0:	230c      	movs	r3, #12
 8002ef2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002efc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f00:	4618      	mov	r0, r3
 8002f02:	f005 f959 	bl	80081b8 <HAL_RCC_OscConfig>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002f0c:	f000 f8b4 	bl	8003078 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f10:	233f      	movs	r3, #63	@ 0x3f
 8002f12:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f14:	2303      	movs	r3, #3
 8002f16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002f20:	2340      	movs	r3, #64	@ 0x40
 8002f22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002f24:	2340      	movs	r3, #64	@ 0x40
 8002f26:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002f28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f2c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002f2e:	2340      	movs	r3, #64	@ 0x40
 8002f30:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002f32:	1d3b      	adds	r3, r7, #4
 8002f34:	2106      	movs	r1, #6
 8002f36:	4618      	mov	r0, r3
 8002f38:	f005 fd70 	bl	8008a1c <HAL_RCC_ClockConfig>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8002f42:	f000 f899 	bl	8003078 <Error_Handler>
  }
}
 8002f46:	bf00      	nop
 8002f48:	3770      	adds	r7, #112	@ 0x70
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	58024400 	.word	0x58024400
 8002f54:	58024800 	.word	0x58024800

08002f58 <HAL_UART_RxCpltCallback>:

uint64_t TimeOn_Counter = 0x00;
HAL_StatusTypeDef Reception_Info = 0x00;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1){
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a12      	ldr	r2, [pc, #72]	@ (8002fb0 <HAL_UART_RxCpltCallback+0x58>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d10a      	bne.n	8002f80 <HAL_UART_RxCpltCallback+0x28>
		SBUS_Receive(SBUS_RxBuffer);
 8002f6a:	4b12      	ldr	r3, [pc, #72]	@ (8002fb4 <HAL_UART_RxCpltCallback+0x5c>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fe ff8e 	bl	8001e90 <SBUS_Receive>
		HAL_UART_Receive_DMA(&huart1, &SBUS_RxBuffer, 1);
 8002f74:	2201      	movs	r2, #1
 8002f76:	490f      	ldr	r1, [pc, #60]	@ (8002fb4 <HAL_UART_RxCpltCallback+0x5c>)
 8002f78:	480f      	ldr	r0, [pc, #60]	@ (8002fb8 <HAL_UART_RxCpltCallback+0x60>)
 8002f7a:	f00a fa07 	bl	800d38c <HAL_UART_Receive_DMA>
	}
    else if (huart -> Instance == USART3){
        BNO_Receive(BNO_BufferByte);
        Reception_Info =  HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
    }
}
 8002f7e:	e012      	b.n	8002fa6 <HAL_UART_RxCpltCallback+0x4e>
    else if (huart -> Instance == USART3){
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a0d      	ldr	r2, [pc, #52]	@ (8002fbc <HAL_UART_RxCpltCallback+0x64>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d10d      	bne.n	8002fa6 <HAL_UART_RxCpltCallback+0x4e>
        BNO_Receive(BNO_BufferByte);
 8002f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002fc0 <HAL_UART_RxCpltCallback+0x68>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fe fd78 	bl	8001a84 <BNO_Receive>
        Reception_Info =  HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8002f94:	2201      	movs	r2, #1
 8002f96:	490a      	ldr	r1, [pc, #40]	@ (8002fc0 <HAL_UART_RxCpltCallback+0x68>)
 8002f98:	480a      	ldr	r0, [pc, #40]	@ (8002fc4 <HAL_UART_RxCpltCallback+0x6c>)
 8002f9a:	f00a f9f7 	bl	800d38c <HAL_UART_Receive_DMA>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4b09      	ldr	r3, [pc, #36]	@ (8002fc8 <HAL_UART_RxCpltCallback+0x70>)
 8002fa4:	701a      	strb	r2, [r3, #0]
}
 8002fa6:	bf00      	nop
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40011000 	.word	0x40011000
 8002fb4:	2400033d 	.word	0x2400033d
 8002fb8:	24002828 	.word	0x24002828
 8002fbc:	40004800 	.word	0x40004800
 8002fc0:	24000273 	.word	0x24000273
 8002fc4:	240028bc 	.word	0x240028bc
 8002fc8:	240024b8 	.word	0x240024b8

08002fcc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002fcc:	b5b0      	push	{r4, r5, r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
	//Interrupción cada 1 ms
	if (htim -> Instance == TIM6){
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a0e      	ldr	r2, [pc, #56]	@ (8003014 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_TIM_PeriodElapsedCallback+0x2c>
		TimeOn_Counter++;
 8002fde:	4b0e      	ldr	r3, [pc, #56]	@ (8003018 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe4:	1c54      	adds	r4, r2, #1
 8002fe6:	f143 0500 	adc.w	r5, r3, #0
 8002fea:	4b0b      	ldr	r3, [pc, #44]	@ (8003018 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002fec:	e9c3 4500 	strd	r4, r5, [r3]
		LED_Tasks();
 8002ff0:	f7fe fe9c 	bl	8001d2c <LED_Tasks>
		SBUS_IntegrityVerification();
 8002ff4:	f7ff fb18 	bl	8002628 <SBUS_IntegrityVerification>
	}
	//Interrupción cada 10 ms
	if (htim -> Instance == TIM7){
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a07      	ldr	r2, [pc, #28]	@ (800301c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d103      	bne.n	800300a <HAL_TIM_PeriodElapsedCallback+0x3e>
		BNO_Tasks();
 8003002:	f7fe fdcf 	bl	8001ba4 <BNO_Tasks>
		BMP280_calculate();
 8003006:	f7fe f829 	bl	800105c <BMP280_calculate>
	}
}
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bdb0      	pop	{r4, r5, r7, pc}
 8003012:	bf00      	nop
 8003014:	40001000 	.word	0x40001000
 8003018:	240024b0 	.word	0x240024b0
 800301c:	40001400 	.word	0x40001400

08003020 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003026:	463b      	mov	r3, r7
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	609a      	str	r2, [r3, #8]
 8003030:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8003032:	f001 facf 	bl	80045d4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003036:	2301      	movs	r3, #1
 8003038:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800303a:	2300      	movs	r3, #0
 800303c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800303e:	2300      	movs	r3, #0
 8003040:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8003042:	231f      	movs	r3, #31
 8003044:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8003046:	2387      	movs	r3, #135	@ 0x87
 8003048:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800304a:	2300      	movs	r3, #0
 800304c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800304e:	2300      	movs	r3, #0
 8003050:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8003052:	2301      	movs	r3, #1
 8003054:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003056:	2301      	movs	r3, #1
 8003058:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800305a:	2300      	movs	r3, #0
 800305c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800305e:	2300      	movs	r3, #0
 8003060:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003062:	463b      	mov	r3, r7
 8003064:	4618      	mov	r0, r3
 8003066:	f001 faed 	bl	8004644 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800306a:	2004      	movs	r0, #4
 800306c:	f001 faca 	bl	8004604 <HAL_MPU_Enable>

}
 8003070:	bf00      	nop
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800307c:	b672      	cpsid	i
}
 800307e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003080:	bf00      	nop
 8003082:	e7fd      	b.n	8003080 <Error_Handler+0x8>

08003084 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003088:	4b27      	ldr	r3, [pc, #156]	@ (8003128 <MX_SPI1_Init+0xa4>)
 800308a:	4a28      	ldr	r2, [pc, #160]	@ (800312c <MX_SPI1_Init+0xa8>)
 800308c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800308e:	4b26      	ldr	r3, [pc, #152]	@ (8003128 <MX_SPI1_Init+0xa4>)
 8003090:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003094:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003096:	4b24      	ldr	r3, [pc, #144]	@ (8003128 <MX_SPI1_Init+0xa4>)
 8003098:	2200      	movs	r2, #0
 800309a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800309c:	4b22      	ldr	r3, [pc, #136]	@ (8003128 <MX_SPI1_Init+0xa4>)
 800309e:	2207      	movs	r2, #7
 80030a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80030a2:	4b21      	ldr	r3, [pc, #132]	@ (8003128 <MX_SPI1_Init+0xa4>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030a8:	4b1f      	ldr	r3, [pc, #124]	@ (8003128 <MX_SPI1_Init+0xa4>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80030ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003128 <MX_SPI1_Init+0xa4>)
 80030b0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80030b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80030b6:	4b1c      	ldr	r3, [pc, #112]	@ (8003128 <MX_SPI1_Init+0xa4>)
 80030b8:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 80030bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030be:	4b1a      	ldr	r3, [pc, #104]	@ (8003128 <MX_SPI1_Init+0xa4>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80030c4:	4b18      	ldr	r3, [pc, #96]	@ (8003128 <MX_SPI1_Init+0xa4>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030ca:	4b17      	ldr	r3, [pc, #92]	@ (8003128 <MX_SPI1_Init+0xa4>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80030d0:	4b15      	ldr	r3, [pc, #84]	@ (8003128 <MX_SPI1_Init+0xa4>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80030d6:	4b14      	ldr	r3, [pc, #80]	@ (8003128 <MX_SPI1_Init+0xa4>)
 80030d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80030dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80030de:	4b12      	ldr	r3, [pc, #72]	@ (8003128 <MX_SPI1_Init+0xa4>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80030e4:	4b10      	ldr	r3, [pc, #64]	@ (8003128 <MX_SPI1_Init+0xa4>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80030ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003128 <MX_SPI1_Init+0xa4>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80030f0:	4b0d      	ldr	r3, [pc, #52]	@ (8003128 <MX_SPI1_Init+0xa4>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80030f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003128 <MX_SPI1_Init+0xa4>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80030fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003128 <MX_SPI1_Init+0xa4>)
 80030fe:	2200      	movs	r2, #0
 8003100:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003102:	4b09      	ldr	r3, [pc, #36]	@ (8003128 <MX_SPI1_Init+0xa4>)
 8003104:	2200      	movs	r2, #0
 8003106:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003108:	4b07      	ldr	r3, [pc, #28]	@ (8003128 <MX_SPI1_Init+0xa4>)
 800310a:	2200      	movs	r2, #0
 800310c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800310e:	4b06      	ldr	r3, [pc, #24]	@ (8003128 <MX_SPI1_Init+0xa4>)
 8003110:	2200      	movs	r2, #0
 8003112:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003114:	4804      	ldr	r0, [pc, #16]	@ (8003128 <MX_SPI1_Init+0xa4>)
 8003116:	f007 fded 	bl	800acf4 <HAL_SPI_Init>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8003120:	f7ff ffaa 	bl	8003078 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003124:	bf00      	nop
 8003126:	bd80      	pop	{r7, pc}
 8003128:	240024bc 	.word	0x240024bc
 800312c:	40013000 	.word	0x40013000

08003130 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003134:	4b27      	ldr	r3, [pc, #156]	@ (80031d4 <MX_SPI2_Init+0xa4>)
 8003136:	4a28      	ldr	r2, [pc, #160]	@ (80031d8 <MX_SPI2_Init+0xa8>)
 8003138:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800313a:	4b26      	ldr	r3, [pc, #152]	@ (80031d4 <MX_SPI2_Init+0xa4>)
 800313c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003140:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003142:	4b24      	ldr	r3, [pc, #144]	@ (80031d4 <MX_SPI2_Init+0xa4>)
 8003144:	2200      	movs	r2, #0
 8003146:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003148:	4b22      	ldr	r3, [pc, #136]	@ (80031d4 <MX_SPI2_Init+0xa4>)
 800314a:	2207      	movs	r2, #7
 800314c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800314e:	4b21      	ldr	r3, [pc, #132]	@ (80031d4 <MX_SPI2_Init+0xa4>)
 8003150:	2200      	movs	r2, #0
 8003152:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003154:	4b1f      	ldr	r3, [pc, #124]	@ (80031d4 <MX_SPI2_Init+0xa4>)
 8003156:	2200      	movs	r2, #0
 8003158:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800315a:	4b1e      	ldr	r3, [pc, #120]	@ (80031d4 <MX_SPI2_Init+0xa4>)
 800315c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003160:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003162:	4b1c      	ldr	r3, [pc, #112]	@ (80031d4 <MX_SPI2_Init+0xa4>)
 8003164:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8003168:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800316a:	4b1a      	ldr	r3, [pc, #104]	@ (80031d4 <MX_SPI2_Init+0xa4>)
 800316c:	2200      	movs	r2, #0
 800316e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003170:	4b18      	ldr	r3, [pc, #96]	@ (80031d4 <MX_SPI2_Init+0xa4>)
 8003172:	2200      	movs	r2, #0
 8003174:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003176:	4b17      	ldr	r3, [pc, #92]	@ (80031d4 <MX_SPI2_Init+0xa4>)
 8003178:	2200      	movs	r2, #0
 800317a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800317c:	4b15      	ldr	r3, [pc, #84]	@ (80031d4 <MX_SPI2_Init+0xa4>)
 800317e:	2200      	movs	r2, #0
 8003180:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003182:	4b14      	ldr	r3, [pc, #80]	@ (80031d4 <MX_SPI2_Init+0xa4>)
 8003184:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003188:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800318a:	4b12      	ldr	r3, [pc, #72]	@ (80031d4 <MX_SPI2_Init+0xa4>)
 800318c:	2200      	movs	r2, #0
 800318e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003190:	4b10      	ldr	r3, [pc, #64]	@ (80031d4 <MX_SPI2_Init+0xa4>)
 8003192:	2200      	movs	r2, #0
 8003194:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003196:	4b0f      	ldr	r3, [pc, #60]	@ (80031d4 <MX_SPI2_Init+0xa4>)
 8003198:	2200      	movs	r2, #0
 800319a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800319c:	4b0d      	ldr	r3, [pc, #52]	@ (80031d4 <MX_SPI2_Init+0xa4>)
 800319e:	2200      	movs	r2, #0
 80031a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80031a2:	4b0c      	ldr	r3, [pc, #48]	@ (80031d4 <MX_SPI2_Init+0xa4>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80031a8:	4b0a      	ldr	r3, [pc, #40]	@ (80031d4 <MX_SPI2_Init+0xa4>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80031ae:	4b09      	ldr	r3, [pc, #36]	@ (80031d4 <MX_SPI2_Init+0xa4>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80031b4:	4b07      	ldr	r3, [pc, #28]	@ (80031d4 <MX_SPI2_Init+0xa4>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80031ba:	4b06      	ldr	r3, [pc, #24]	@ (80031d4 <MX_SPI2_Init+0xa4>)
 80031bc:	2200      	movs	r2, #0
 80031be:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80031c0:	4804      	ldr	r0, [pc, #16]	@ (80031d4 <MX_SPI2_Init+0xa4>)
 80031c2:	f007 fd97 	bl	800acf4 <HAL_SPI_Init>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80031cc:	f7ff ff54 	bl	8003078 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80031d0:	bf00      	nop
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	24002544 	.word	0x24002544
 80031d8:	40003800 	.word	0x40003800

080031dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b0bc      	sub	sp, #240	@ 0xf0
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	605a      	str	r2, [r3, #4]
 80031ee:	609a      	str	r2, [r3, #8]
 80031f0:	60da      	str	r2, [r3, #12]
 80031f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031f4:	f107 0318 	add.w	r3, r7, #24
 80031f8:	22c0      	movs	r2, #192	@ 0xc0
 80031fa:	2100      	movs	r1, #0
 80031fc:	4618      	mov	r0, r3
 80031fe:	f010 ffa1 	bl	8014144 <memset>
  if(spiHandle->Instance==SPI1)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a4c      	ldr	r2, [pc, #304]	@ (8003338 <HAL_SPI_MspInit+0x15c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d145      	bne.n	8003298 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800320c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003210:	f04f 0300 	mov.w	r3, #0
 8003214:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003218:	2300      	movs	r3, #0
 800321a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800321c:	f107 0318 	add.w	r3, r7, #24
 8003220:	4618      	mov	r0, r3
 8003222:	f005 ff87 	bl	8009134 <HAL_RCCEx_PeriphCLKConfig>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800322c:	f7ff ff24 	bl	8003078 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003230:	4b42      	ldr	r3, [pc, #264]	@ (800333c <HAL_SPI_MspInit+0x160>)
 8003232:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003236:	4a41      	ldr	r2, [pc, #260]	@ (800333c <HAL_SPI_MspInit+0x160>)
 8003238:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800323c:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8003240:	4b3e      	ldr	r3, [pc, #248]	@ (800333c <HAL_SPI_MspInit+0x160>)
 8003242:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003246:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800324a:	617b      	str	r3, [r7, #20]
 800324c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800324e:	4b3b      	ldr	r3, [pc, #236]	@ (800333c <HAL_SPI_MspInit+0x160>)
 8003250:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003254:	4a39      	ldr	r2, [pc, #228]	@ (800333c <HAL_SPI_MspInit+0x160>)
 8003256:	f043 0301 	orr.w	r3, r3, #1
 800325a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800325e:	4b37      	ldr	r3, [pc, #220]	@ (800333c <HAL_SPI_MspInit+0x160>)
 8003260:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 800326c:	23e0      	movs	r3, #224	@ 0xe0
 800326e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003272:	2302      	movs	r3, #2
 8003274:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003278:	2300      	movs	r3, #0
 800327a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800327e:	2300      	movs	r3, #0
 8003280:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003284:	2305      	movs	r3, #5
 8003286:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800328a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800328e:	4619      	mov	r1, r3
 8003290:	482b      	ldr	r0, [pc, #172]	@ (8003340 <HAL_SPI_MspInit+0x164>)
 8003292:	f004 fc59 	bl	8007b48 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003296:	e04a      	b.n	800332e <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a29      	ldr	r2, [pc, #164]	@ (8003344 <HAL_SPI_MspInit+0x168>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d145      	bne.n	800332e <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80032a2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80032a6:	f04f 0300 	mov.w	r3, #0
 80032aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80032ae:	2300      	movs	r3, #0
 80032b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032b2:	f107 0318 	add.w	r3, r7, #24
 80032b6:	4618      	mov	r0, r3
 80032b8:	f005 ff3c 	bl	8009134 <HAL_RCCEx_PeriphCLKConfig>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 80032c2:	f7ff fed9 	bl	8003078 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80032c6:	4b1d      	ldr	r3, [pc, #116]	@ (800333c <HAL_SPI_MspInit+0x160>)
 80032c8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80032cc:	4a1b      	ldr	r2, [pc, #108]	@ (800333c <HAL_SPI_MspInit+0x160>)
 80032ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032d2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80032d6:	4b19      	ldr	r3, [pc, #100]	@ (800333c <HAL_SPI_MspInit+0x160>)
 80032d8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80032dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032e4:	4b15      	ldr	r3, [pc, #84]	@ (800333c <HAL_SPI_MspInit+0x160>)
 80032e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80032ea:	4a14      	ldr	r2, [pc, #80]	@ (800333c <HAL_SPI_MspInit+0x160>)
 80032ec:	f043 0302 	orr.w	r3, r3, #2
 80032f0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80032f4:	4b11      	ldr	r3, [pc, #68]	@ (800333c <HAL_SPI_MspInit+0x160>)
 80032f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	60bb      	str	r3, [r7, #8]
 8003300:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 8003302:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003306:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330a:	2302      	movs	r3, #2
 800330c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003310:	2300      	movs	r3, #0
 8003312:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003316:	2300      	movs	r3, #0
 8003318:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800331c:	2305      	movs	r3, #5
 800331e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003322:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003326:	4619      	mov	r1, r3
 8003328:	4807      	ldr	r0, [pc, #28]	@ (8003348 <HAL_SPI_MspInit+0x16c>)
 800332a:	f004 fc0d 	bl	8007b48 <HAL_GPIO_Init>
}
 800332e:	bf00      	nop
 8003330:	37f0      	adds	r7, #240	@ 0xf0
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40013000 	.word	0x40013000
 800333c:	58024400 	.word	0x58024400
 8003340:	58020000 	.word	0x58020000
 8003344:	40003800 	.word	0x40003800
 8003348:	58020400 	.word	0x58020400

0800334c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003352:	4b0a      	ldr	r3, [pc, #40]	@ (800337c <HAL_MspInit+0x30>)
 8003354:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003358:	4a08      	ldr	r2, [pc, #32]	@ (800337c <HAL_MspInit+0x30>)
 800335a:	f043 0302 	orr.w	r3, r3, #2
 800335e:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8003362:	4b06      	ldr	r3, [pc, #24]	@ (800337c <HAL_MspInit+0x30>)
 8003364:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	607b      	str	r3, [r7, #4]
 800336e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	58024400 	.word	0x58024400

08003380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003384:	bf00      	nop
 8003386:	e7fd      	b.n	8003384 <NMI_Handler+0x4>

08003388 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800338c:	bf00      	nop
 800338e:	e7fd      	b.n	800338c <HardFault_Handler+0x4>

08003390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003394:	bf00      	nop
 8003396:	e7fd      	b.n	8003394 <MemManage_Handler+0x4>

08003398 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800339c:	bf00      	nop
 800339e:	e7fd      	b.n	800339c <BusFault_Handler+0x4>

080033a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033a4:	bf00      	nop
 80033a6:	e7fd      	b.n	80033a4 <UsageFault_Handler+0x4>

080033a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033ac:	bf00      	nop
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033b6:	b480      	push	{r7}
 80033b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033ba:	bf00      	nop
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033c8:	bf00      	nop
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
	...

080033d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  if(Timer1 > 0)
 80033d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003408 <SysTick_Handler+0x34>)
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d005      	beq.n	80033ec <SysTick_Handler+0x18>
	    Timer1--;
 80033e0:	4b09      	ldr	r3, [pc, #36]	@ (8003408 <SysTick_Handler+0x34>)
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	3b01      	subs	r3, #1
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	4b07      	ldr	r3, [pc, #28]	@ (8003408 <SysTick_Handler+0x34>)
 80033ea:	801a      	strh	r2, [r3, #0]
	  if(Timer2 > 0)
 80033ec:	4b07      	ldr	r3, [pc, #28]	@ (800340c <SysTick_Handler+0x38>)
 80033ee:	881b      	ldrh	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <SysTick_Handler+0x2c>
	    Timer2--;
 80033f4:	4b05      	ldr	r3, [pc, #20]	@ (800340c <SysTick_Handler+0x38>)
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	4b03      	ldr	r3, [pc, #12]	@ (800340c <SysTick_Handler+0x38>)
 80033fe:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003400:	f000 ffb8 	bl	8004374 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003404:	bf00      	nop
 8003406:	bd80      	pop	{r7, pc}
 8003408:	24002ae0 	.word	0x24002ae0
 800340c:	24002ae2 	.word	0x24002ae2

08003410 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003414:	4802      	ldr	r0, [pc, #8]	@ (8003420 <DMA1_Stream0_IRQHandler+0x10>)
 8003416:	f002 fcb1 	bl	8005d7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800341a:	bf00      	nop
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	240029e4 	.word	0x240029e4

08003424 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003428:	4802      	ldr	r0, [pc, #8]	@ (8003434 <DMA1_Stream1_IRQHandler+0x10>)
 800342a:	f002 fca7 	bl	8005d7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800342e:	bf00      	nop
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	24002a5c 	.word	0x24002a5c

08003438 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800343c:	4802      	ldr	r0, [pc, #8]	@ (8003448 <USART1_IRQHandler+0x10>)
 800343e:	f00a f92d 	bl	800d69c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003442:	bf00      	nop
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	24002828 	.word	0x24002828

0800344c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003450:	4802      	ldr	r0, [pc, #8]	@ (800345c <USART3_IRQHandler+0x10>)
 8003452:	f00a f923 	bl	800d69c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003456:	bf00      	nop
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	240028bc 	.word	0x240028bc

08003460 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003464:	4802      	ldr	r0, [pc, #8]	@ (8003470 <TIM6_DAC_IRQHandler+0x10>)
 8003466:	f009 f821 	bl	800c4ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800346a:	bf00      	nop
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	240026b0 	.word	0x240026b0

08003474 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003478:	4802      	ldr	r0, [pc, #8]	@ (8003484 <TIM7_IRQHandler+0x10>)
 800347a:	f009 f817 	bl	800c4ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800347e:	bf00      	nop
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	240026fc 	.word	0x240026fc

08003488 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800348c:	4b32      	ldr	r3, [pc, #200]	@ (8003558 <SystemInit+0xd0>)
 800348e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003492:	4a31      	ldr	r2, [pc, #196]	@ (8003558 <SystemInit+0xd0>)
 8003494:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003498:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800349c:	4b2f      	ldr	r3, [pc, #188]	@ (800355c <SystemInit+0xd4>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 030f 	and.w	r3, r3, #15
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d807      	bhi.n	80034b8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80034a8:	4b2c      	ldr	r3, [pc, #176]	@ (800355c <SystemInit+0xd4>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f023 030f 	bic.w	r3, r3, #15
 80034b0:	4a2a      	ldr	r2, [pc, #168]	@ (800355c <SystemInit+0xd4>)
 80034b2:	f043 0303 	orr.w	r3, r3, #3
 80034b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80034b8:	4b29      	ldr	r3, [pc, #164]	@ (8003560 <SystemInit+0xd8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a28      	ldr	r2, [pc, #160]	@ (8003560 <SystemInit+0xd8>)
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80034c4:	4b26      	ldr	r3, [pc, #152]	@ (8003560 <SystemInit+0xd8>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80034ca:	4b25      	ldr	r3, [pc, #148]	@ (8003560 <SystemInit+0xd8>)
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	4924      	ldr	r1, [pc, #144]	@ (8003560 <SystemInit+0xd8>)
 80034d0:	4b24      	ldr	r3, [pc, #144]	@ (8003564 <SystemInit+0xdc>)
 80034d2:	4013      	ands	r3, r2
 80034d4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80034d6:	4b21      	ldr	r3, [pc, #132]	@ (800355c <SystemInit+0xd4>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 030c 	and.w	r3, r3, #12
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d007      	beq.n	80034f2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80034e2:	4b1e      	ldr	r3, [pc, #120]	@ (800355c <SystemInit+0xd4>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f023 030f 	bic.w	r3, r3, #15
 80034ea:	4a1c      	ldr	r2, [pc, #112]	@ (800355c <SystemInit+0xd4>)
 80034ec:	f043 0303 	orr.w	r3, r3, #3
 80034f0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80034f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003560 <SystemInit+0xd8>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80034f8:	4b19      	ldr	r3, [pc, #100]	@ (8003560 <SystemInit+0xd8>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80034fe:	4b18      	ldr	r3, [pc, #96]	@ (8003560 <SystemInit+0xd8>)
 8003500:	2200      	movs	r2, #0
 8003502:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003504:	4b16      	ldr	r3, [pc, #88]	@ (8003560 <SystemInit+0xd8>)
 8003506:	4a18      	ldr	r2, [pc, #96]	@ (8003568 <SystemInit+0xe0>)
 8003508:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800350a:	4b15      	ldr	r3, [pc, #84]	@ (8003560 <SystemInit+0xd8>)
 800350c:	4a17      	ldr	r2, [pc, #92]	@ (800356c <SystemInit+0xe4>)
 800350e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003510:	4b13      	ldr	r3, [pc, #76]	@ (8003560 <SystemInit+0xd8>)
 8003512:	4a17      	ldr	r2, [pc, #92]	@ (8003570 <SystemInit+0xe8>)
 8003514:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003516:	4b12      	ldr	r3, [pc, #72]	@ (8003560 <SystemInit+0xd8>)
 8003518:	2200      	movs	r2, #0
 800351a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800351c:	4b10      	ldr	r3, [pc, #64]	@ (8003560 <SystemInit+0xd8>)
 800351e:	4a14      	ldr	r2, [pc, #80]	@ (8003570 <SystemInit+0xe8>)
 8003520:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003522:	4b0f      	ldr	r3, [pc, #60]	@ (8003560 <SystemInit+0xd8>)
 8003524:	2200      	movs	r2, #0
 8003526:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003528:	4b0d      	ldr	r3, [pc, #52]	@ (8003560 <SystemInit+0xd8>)
 800352a:	4a11      	ldr	r2, [pc, #68]	@ (8003570 <SystemInit+0xe8>)
 800352c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800352e:	4b0c      	ldr	r3, [pc, #48]	@ (8003560 <SystemInit+0xd8>)
 8003530:	2200      	movs	r2, #0
 8003532:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003534:	4b0a      	ldr	r3, [pc, #40]	@ (8003560 <SystemInit+0xd8>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a09      	ldr	r2, [pc, #36]	@ (8003560 <SystemInit+0xd8>)
 800353a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800353e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003540:	4b07      	ldr	r3, [pc, #28]	@ (8003560 <SystemInit+0xd8>)
 8003542:	2200      	movs	r2, #0
 8003544:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003546:	4b0b      	ldr	r3, [pc, #44]	@ (8003574 <SystemInit+0xec>)
 8003548:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800354c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800354e:	bf00      	nop
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	e000ed00 	.word	0xe000ed00
 800355c:	52002000 	.word	0x52002000
 8003560:	58024400 	.word	0x58024400
 8003564:	eaf6ed7f 	.word	0xeaf6ed7f
 8003568:	02020200 	.word	0x02020200
 800356c:	01ff0000 	.word	0x01ff0000
 8003570:	01010280 	.word	0x01010280
 8003574:	52004000 	.word	0x52004000

08003578 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08a      	sub	sp, #40	@ 0x28
 800357c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800357e:	f107 031c 	add.w	r3, r7, #28
 8003582:	2200      	movs	r2, #0
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	605a      	str	r2, [r3, #4]
 8003588:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800358a:	463b      	mov	r3, r7
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	605a      	str	r2, [r3, #4]
 8003592:	609a      	str	r2, [r3, #8]
 8003594:	60da      	str	r2, [r3, #12]
 8003596:	611a      	str	r2, [r3, #16]
 8003598:	615a      	str	r2, [r3, #20]
 800359a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800359c:	4b33      	ldr	r3, [pc, #204]	@ (800366c <MX_TIM2_Init+0xf4>)
 800359e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80035a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280-1;
 80035a4:	4b31      	ldr	r3, [pc, #196]	@ (800366c <MX_TIM2_Init+0xf4>)
 80035a6:	f240 1217 	movw	r2, #279	@ 0x117
 80035aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035ac:	4b2f      	ldr	r3, [pc, #188]	@ (800366c <MX_TIM2_Init+0xf4>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 80035b2:	4b2e      	ldr	r3, [pc, #184]	@ (800366c <MX_TIM2_Init+0xf4>)
 80035b4:	f641 3258 	movw	r2, #7000	@ 0x1b58
 80035b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035ba:	4b2c      	ldr	r3, [pc, #176]	@ (800366c <MX_TIM2_Init+0xf4>)
 80035bc:	2200      	movs	r2, #0
 80035be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80035c0:	4b2a      	ldr	r3, [pc, #168]	@ (800366c <MX_TIM2_Init+0xf4>)
 80035c2:	2280      	movs	r2, #128	@ 0x80
 80035c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80035c6:	4829      	ldr	r0, [pc, #164]	@ (800366c <MX_TIM2_Init+0xf4>)
 80035c8:	f008 fe0a 	bl	800c1e0 <HAL_TIM_PWM_Init>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 80035d2:	f7ff fd51 	bl	8003078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035d6:	2300      	movs	r3, #0
 80035d8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035da:	2300      	movs	r3, #0
 80035dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80035de:	f107 031c 	add.w	r3, r7, #28
 80035e2:	4619      	mov	r1, r3
 80035e4:	4821      	ldr	r0, [pc, #132]	@ (800366c <MX_TIM2_Init+0xf4>)
 80035e6:	f009 fd47 	bl	800d078 <HAL_TIMEx_MasterConfigSynchronization>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80035f0:	f7ff fd42 	bl	8003078 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035f4:	2360      	movs	r3, #96	@ 0x60
 80035f6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80035f8:	2300      	movs	r3, #0
 80035fa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035fc:	2300      	movs	r3, #0
 80035fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003600:	2300      	movs	r3, #0
 8003602:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003604:	463b      	mov	r3, r7
 8003606:	2200      	movs	r2, #0
 8003608:	4619      	mov	r1, r3
 800360a:	4818      	ldr	r0, [pc, #96]	@ (800366c <MX_TIM2_Init+0xf4>)
 800360c:	f009 f856 	bl	800c6bc <HAL_TIM_PWM_ConfigChannel>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8003616:	f7ff fd2f 	bl	8003078 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800361a:	463b      	mov	r3, r7
 800361c:	2204      	movs	r2, #4
 800361e:	4619      	mov	r1, r3
 8003620:	4812      	ldr	r0, [pc, #72]	@ (800366c <MX_TIM2_Init+0xf4>)
 8003622:	f009 f84b 	bl	800c6bc <HAL_TIM_PWM_ConfigChannel>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 800362c:	f7ff fd24 	bl	8003078 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003630:	463b      	mov	r3, r7
 8003632:	2208      	movs	r2, #8
 8003634:	4619      	mov	r1, r3
 8003636:	480d      	ldr	r0, [pc, #52]	@ (800366c <MX_TIM2_Init+0xf4>)
 8003638:	f009 f840 	bl	800c6bc <HAL_TIM_PWM_ConfigChannel>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8003642:	f7ff fd19 	bl	8003078 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003646:	463b      	mov	r3, r7
 8003648:	220c      	movs	r2, #12
 800364a:	4619      	mov	r1, r3
 800364c:	4807      	ldr	r0, [pc, #28]	@ (800366c <MX_TIM2_Init+0xf4>)
 800364e:	f009 f835 	bl	800c6bc <HAL_TIM_PWM_ConfigChannel>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8003658:	f7ff fd0e 	bl	8003078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800365c:	4803      	ldr	r0, [pc, #12]	@ (800366c <MX_TIM2_Init+0xf4>)
 800365e:	f000 fa29 	bl	8003ab4 <HAL_TIM_MspPostInit>

}
 8003662:	bf00      	nop
 8003664:	3728      	adds	r7, #40	@ 0x28
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	240025cc 	.word	0x240025cc

08003670 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b08a      	sub	sp, #40	@ 0x28
 8003674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003676:	f107 031c 	add.w	r3, r7, #28
 800367a:	2200      	movs	r2, #0
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	605a      	str	r2, [r3, #4]
 8003680:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003682:	463b      	mov	r3, r7
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	605a      	str	r2, [r3, #4]
 800368a:	609a      	str	r2, [r3, #8]
 800368c:	60da      	str	r2, [r3, #12]
 800368e:	611a      	str	r2, [r3, #16]
 8003690:	615a      	str	r2, [r3, #20]
 8003692:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003694:	4b27      	ldr	r3, [pc, #156]	@ (8003734 <MX_TIM3_Init+0xc4>)
 8003696:	4a28      	ldr	r2, [pc, #160]	@ (8003738 <MX_TIM3_Init+0xc8>)
 8003698:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280-1;
 800369a:	4b26      	ldr	r3, [pc, #152]	@ (8003734 <MX_TIM3_Init+0xc4>)
 800369c:	f240 1217 	movw	r2, #279	@ 0x117
 80036a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036a2:	4b24      	ldr	r3, [pc, #144]	@ (8003734 <MX_TIM3_Init+0xc4>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7000;
 80036a8:	4b22      	ldr	r3, [pc, #136]	@ (8003734 <MX_TIM3_Init+0xc4>)
 80036aa:	f641 3258 	movw	r2, #7000	@ 0x1b58
 80036ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036b0:	4b20      	ldr	r3, [pc, #128]	@ (8003734 <MX_TIM3_Init+0xc4>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80036b6:	4b1f      	ldr	r3, [pc, #124]	@ (8003734 <MX_TIM3_Init+0xc4>)
 80036b8:	2280      	movs	r2, #128	@ 0x80
 80036ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80036bc:	481d      	ldr	r0, [pc, #116]	@ (8003734 <MX_TIM3_Init+0xc4>)
 80036be:	f008 fd8f 	bl	800c1e0 <HAL_TIM_PWM_Init>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 80036c8:	f7ff fcd6 	bl	8003078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036cc:	2300      	movs	r3, #0
 80036ce:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036d0:	2300      	movs	r3, #0
 80036d2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80036d4:	f107 031c 	add.w	r3, r7, #28
 80036d8:	4619      	mov	r1, r3
 80036da:	4816      	ldr	r0, [pc, #88]	@ (8003734 <MX_TIM3_Init+0xc4>)
 80036dc:	f009 fccc 	bl	800d078 <HAL_TIMEx_MasterConfigSynchronization>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80036e6:	f7ff fcc7 	bl	8003078 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036ea:	2360      	movs	r3, #96	@ 0x60
 80036ec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80036ee:	2300      	movs	r3, #0
 80036f0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036f2:	2300      	movs	r3, #0
 80036f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036f6:	2300      	movs	r3, #0
 80036f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80036fa:	463b      	mov	r3, r7
 80036fc:	2200      	movs	r2, #0
 80036fe:	4619      	mov	r1, r3
 8003700:	480c      	ldr	r0, [pc, #48]	@ (8003734 <MX_TIM3_Init+0xc4>)
 8003702:	f008 ffdb 	bl	800c6bc <HAL_TIM_PWM_ConfigChannel>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 800370c:	f7ff fcb4 	bl	8003078 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003710:	463b      	mov	r3, r7
 8003712:	2204      	movs	r2, #4
 8003714:	4619      	mov	r1, r3
 8003716:	4807      	ldr	r0, [pc, #28]	@ (8003734 <MX_TIM3_Init+0xc4>)
 8003718:	f008 ffd0 	bl	800c6bc <HAL_TIM_PWM_ConfigChannel>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8003722:	f7ff fca9 	bl	8003078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003726:	4803      	ldr	r0, [pc, #12]	@ (8003734 <MX_TIM3_Init+0xc4>)
 8003728:	f000 f9c4 	bl	8003ab4 <HAL_TIM_MspPostInit>

}
 800372c:	bf00      	nop
 800372e:	3728      	adds	r7, #40	@ 0x28
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	24002618 	.word	0x24002618
 8003738:	40000400 	.word	0x40000400

0800373c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b08a      	sub	sp, #40	@ 0x28
 8003740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003742:	f107 031c 	add.w	r3, r7, #28
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	605a      	str	r2, [r3, #4]
 800374c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800374e:	463b      	mov	r3, r7
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	605a      	str	r2, [r3, #4]
 8003756:	609a      	str	r2, [r3, #8]
 8003758:	60da      	str	r2, [r3, #12]
 800375a:	611a      	str	r2, [r3, #16]
 800375c:	615a      	str	r2, [r3, #20]
 800375e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003760:	4b32      	ldr	r3, [pc, #200]	@ (800382c <MX_TIM4_Init+0xf0>)
 8003762:	4a33      	ldr	r2, [pc, #204]	@ (8003830 <MX_TIM4_Init+0xf4>)
 8003764:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 280-1;
 8003766:	4b31      	ldr	r3, [pc, #196]	@ (800382c <MX_TIM4_Init+0xf0>)
 8003768:	f240 1217 	movw	r2, #279	@ 0x117
 800376c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800376e:	4b2f      	ldr	r3, [pc, #188]	@ (800382c <MX_TIM4_Init+0xf0>)
 8003770:	2200      	movs	r2, #0
 8003772:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7000;
 8003774:	4b2d      	ldr	r3, [pc, #180]	@ (800382c <MX_TIM4_Init+0xf0>)
 8003776:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800377a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800377c:	4b2b      	ldr	r3, [pc, #172]	@ (800382c <MX_TIM4_Init+0xf0>)
 800377e:	2200      	movs	r2, #0
 8003780:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003782:	4b2a      	ldr	r3, [pc, #168]	@ (800382c <MX_TIM4_Init+0xf0>)
 8003784:	2280      	movs	r2, #128	@ 0x80
 8003786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003788:	4828      	ldr	r0, [pc, #160]	@ (800382c <MX_TIM4_Init+0xf0>)
 800378a:	f008 fd29 	bl	800c1e0 <HAL_TIM_PWM_Init>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8003794:	f7ff fc70 	bl	8003078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003798:	2300      	movs	r3, #0
 800379a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800379c:	2300      	movs	r3, #0
 800379e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80037a0:	f107 031c 	add.w	r3, r7, #28
 80037a4:	4619      	mov	r1, r3
 80037a6:	4821      	ldr	r0, [pc, #132]	@ (800382c <MX_TIM4_Init+0xf0>)
 80037a8:	f009 fc66 	bl	800d078 <HAL_TIMEx_MasterConfigSynchronization>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 80037b2:	f7ff fc61 	bl	8003078 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037b6:	2360      	movs	r3, #96	@ 0x60
 80037b8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80037ba:	2300      	movs	r3, #0
 80037bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037be:	2300      	movs	r3, #0
 80037c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037c2:	2300      	movs	r3, #0
 80037c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037c6:	463b      	mov	r3, r7
 80037c8:	2200      	movs	r2, #0
 80037ca:	4619      	mov	r1, r3
 80037cc:	4817      	ldr	r0, [pc, #92]	@ (800382c <MX_TIM4_Init+0xf0>)
 80037ce:	f008 ff75 	bl	800c6bc <HAL_TIM_PWM_ConfigChannel>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 80037d8:	f7ff fc4e 	bl	8003078 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80037dc:	463b      	mov	r3, r7
 80037de:	2204      	movs	r2, #4
 80037e0:	4619      	mov	r1, r3
 80037e2:	4812      	ldr	r0, [pc, #72]	@ (800382c <MX_TIM4_Init+0xf0>)
 80037e4:	f008 ff6a 	bl	800c6bc <HAL_TIM_PWM_ConfigChannel>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 80037ee:	f7ff fc43 	bl	8003078 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80037f2:	463b      	mov	r3, r7
 80037f4:	2208      	movs	r2, #8
 80037f6:	4619      	mov	r1, r3
 80037f8:	480c      	ldr	r0, [pc, #48]	@ (800382c <MX_TIM4_Init+0xf0>)
 80037fa:	f008 ff5f 	bl	800c6bc <HAL_TIM_PWM_ConfigChannel>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8003804:	f7ff fc38 	bl	8003078 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003808:	463b      	mov	r3, r7
 800380a:	220c      	movs	r2, #12
 800380c:	4619      	mov	r1, r3
 800380e:	4807      	ldr	r0, [pc, #28]	@ (800382c <MX_TIM4_Init+0xf0>)
 8003810:	f008 ff54 	bl	800c6bc <HAL_TIM_PWM_ConfigChannel>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 800381a:	f7ff fc2d 	bl	8003078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800381e:	4803      	ldr	r0, [pc, #12]	@ (800382c <MX_TIM4_Init+0xf0>)
 8003820:	f000 f948 	bl	8003ab4 <HAL_TIM_MspPostInit>

}
 8003824:	bf00      	nop
 8003826:	3728      	adds	r7, #40	@ 0x28
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	24002664 	.word	0x24002664
 8003830:	40000800 	.word	0x40000800

08003834 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800383a:	1d3b      	adds	r3, r7, #4
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	605a      	str	r2, [r3, #4]
 8003842:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003844:	4b15      	ldr	r3, [pc, #84]	@ (800389c <MX_TIM6_Init+0x68>)
 8003846:	4a16      	ldr	r2, [pc, #88]	@ (80038a0 <MX_TIM6_Init+0x6c>)
 8003848:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 800384a:	4b14      	ldr	r3, [pc, #80]	@ (800389c <MX_TIM6_Init+0x68>)
 800384c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003850:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003852:	4b12      	ldr	r3, [pc, #72]	@ (800389c <MX_TIM6_Init+0x68>)
 8003854:	2200      	movs	r2, #0
 8003856:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 279;
 8003858:	4b10      	ldr	r3, [pc, #64]	@ (800389c <MX_TIM6_Init+0x68>)
 800385a:	f240 1217 	movw	r2, #279	@ 0x117
 800385e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003860:	4b0e      	ldr	r3, [pc, #56]	@ (800389c <MX_TIM6_Init+0x68>)
 8003862:	2200      	movs	r2, #0
 8003864:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003866:	480d      	ldr	r0, [pc, #52]	@ (800389c <MX_TIM6_Init+0x68>)
 8003868:	f008 fbeb 	bl	800c042 <HAL_TIM_Base_Init>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003872:	f7ff fc01 	bl	8003078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003876:	2300      	movs	r3, #0
 8003878:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800387e:	1d3b      	adds	r3, r7, #4
 8003880:	4619      	mov	r1, r3
 8003882:	4806      	ldr	r0, [pc, #24]	@ (800389c <MX_TIM6_Init+0x68>)
 8003884:	f009 fbf8 	bl	800d078 <HAL_TIMEx_MasterConfigSynchronization>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800388e:	f7ff fbf3 	bl	8003078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  /* USER CODE END TIM6_Init 2 */

}
 8003892:	bf00      	nop
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	240026b0 	.word	0x240026b0
 80038a0:	40001000 	.word	0x40001000

080038a4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038aa:	1d3b      	adds	r3, r7, #4
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	605a      	str	r2, [r3, #4]
 80038b2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80038b4:	4b15      	ldr	r3, [pc, #84]	@ (800390c <MX_TIM7_Init+0x68>)
 80038b6:	4a16      	ldr	r2, [pc, #88]	@ (8003910 <MX_TIM7_Init+0x6c>)
 80038b8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 80038ba:	4b14      	ldr	r3, [pc, #80]	@ (800390c <MX_TIM7_Init+0x68>)
 80038bc:	f242 720f 	movw	r2, #9999	@ 0x270f
 80038c0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038c2:	4b12      	ldr	r3, [pc, #72]	@ (800390c <MX_TIM7_Init+0x68>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 279;
 80038c8:	4b10      	ldr	r3, [pc, #64]	@ (800390c <MX_TIM7_Init+0x68>)
 80038ca:	f240 1217 	movw	r2, #279	@ 0x117
 80038ce:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038d0:	4b0e      	ldr	r3, [pc, #56]	@ (800390c <MX_TIM7_Init+0x68>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80038d6:	480d      	ldr	r0, [pc, #52]	@ (800390c <MX_TIM7_Init+0x68>)
 80038d8:	f008 fbb3 	bl	800c042 <HAL_TIM_Base_Init>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80038e2:	f7ff fbc9 	bl	8003078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038e6:	2300      	movs	r3, #0
 80038e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038ea:	2300      	movs	r3, #0
 80038ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80038ee:	1d3b      	adds	r3, r7, #4
 80038f0:	4619      	mov	r1, r3
 80038f2:	4806      	ldr	r0, [pc, #24]	@ (800390c <MX_TIM7_Init+0x68>)
 80038f4:	f009 fbc0 	bl	800d078 <HAL_TIMEx_MasterConfigSynchronization>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80038fe:	f7ff fbbb 	bl	8003078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003902:	bf00      	nop
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	240026fc 	.word	0x240026fc
 8003910:	40001400 	.word	0x40001400

08003914 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003918:	4b0e      	ldr	r3, [pc, #56]	@ (8003954 <MX_TIM13_Init+0x40>)
 800391a:	4a0f      	ldr	r2, [pc, #60]	@ (8003958 <MX_TIM13_Init+0x44>)
 800391c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 280-1;
 800391e:	4b0d      	ldr	r3, [pc, #52]	@ (8003954 <MX_TIM13_Init+0x40>)
 8003920:	f240 1217 	movw	r2, #279	@ 0x117
 8003924:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003926:	4b0b      	ldr	r3, [pc, #44]	@ (8003954 <MX_TIM13_Init+0x40>)
 8003928:	2200      	movs	r2, #0
 800392a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800392c:	4b09      	ldr	r3, [pc, #36]	@ (8003954 <MX_TIM13_Init+0x40>)
 800392e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003932:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003934:	4b07      	ldr	r3, [pc, #28]	@ (8003954 <MX_TIM13_Init+0x40>)
 8003936:	2200      	movs	r2, #0
 8003938:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800393a:	4b06      	ldr	r3, [pc, #24]	@ (8003954 <MX_TIM13_Init+0x40>)
 800393c:	2280      	movs	r2, #128	@ 0x80
 800393e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003940:	4804      	ldr	r0, [pc, #16]	@ (8003954 <MX_TIM13_Init+0x40>)
 8003942:	f008 fb7e 	bl	800c042 <HAL_TIM_Base_Init>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 800394c:	f7ff fb94 	bl	8003078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8003950:	bf00      	nop
 8003952:	bd80      	pop	{r7, pc}
 8003954:	24002748 	.word	0x24002748
 8003958:	40001c00 	.word	0x40001c00

0800395c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800396c:	d10f      	bne.n	800398e <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800396e:	4b1f      	ldr	r3, [pc, #124]	@ (80039ec <HAL_TIM_PWM_MspInit+0x90>)
 8003970:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003974:	4a1d      	ldr	r2, [pc, #116]	@ (80039ec <HAL_TIM_PWM_MspInit+0x90>)
 8003976:	f043 0301 	orr.w	r3, r3, #1
 800397a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800397e:	4b1b      	ldr	r3, [pc, #108]	@ (80039ec <HAL_TIM_PWM_MspInit+0x90>)
 8003980:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	617b      	str	r3, [r7, #20]
 800398a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800398c:	e028      	b.n	80039e0 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM3)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a17      	ldr	r2, [pc, #92]	@ (80039f0 <HAL_TIM_PWM_MspInit+0x94>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d10f      	bne.n	80039b8 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003998:	4b14      	ldr	r3, [pc, #80]	@ (80039ec <HAL_TIM_PWM_MspInit+0x90>)
 800399a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800399e:	4a13      	ldr	r2, [pc, #76]	@ (80039ec <HAL_TIM_PWM_MspInit+0x90>)
 80039a0:	f043 0302 	orr.w	r3, r3, #2
 80039a4:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80039a8:	4b10      	ldr	r3, [pc, #64]	@ (80039ec <HAL_TIM_PWM_MspInit+0x90>)
 80039aa:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	613b      	str	r3, [r7, #16]
 80039b4:	693b      	ldr	r3, [r7, #16]
}
 80039b6:	e013      	b.n	80039e0 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM4)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a0d      	ldr	r2, [pc, #52]	@ (80039f4 <HAL_TIM_PWM_MspInit+0x98>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d10e      	bne.n	80039e0 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80039c2:	4b0a      	ldr	r3, [pc, #40]	@ (80039ec <HAL_TIM_PWM_MspInit+0x90>)
 80039c4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80039c8:	4a08      	ldr	r2, [pc, #32]	@ (80039ec <HAL_TIM_PWM_MspInit+0x90>)
 80039ca:	f043 0304 	orr.w	r3, r3, #4
 80039ce:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80039d2:	4b06      	ldr	r3, [pc, #24]	@ (80039ec <HAL_TIM_PWM_MspInit+0x90>)
 80039d4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	68fb      	ldr	r3, [r7, #12]
}
 80039e0:	bf00      	nop
 80039e2:	371c      	adds	r7, #28
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	58024400 	.word	0x58024400
 80039f0:	40000400 	.word	0x40000400
 80039f4:	40000800 	.word	0x40000800

080039f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a27      	ldr	r2, [pc, #156]	@ (8003aa4 <HAL_TIM_Base_MspInit+0xac>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d117      	bne.n	8003a3a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003a0a:	4b27      	ldr	r3, [pc, #156]	@ (8003aa8 <HAL_TIM_Base_MspInit+0xb0>)
 8003a0c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003a10:	4a25      	ldr	r2, [pc, #148]	@ (8003aa8 <HAL_TIM_Base_MspInit+0xb0>)
 8003a12:	f043 0310 	orr.w	r3, r3, #16
 8003a16:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003a1a:	4b23      	ldr	r3, [pc, #140]	@ (8003aa8 <HAL_TIM_Base_MspInit+0xb0>)
 8003a1c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003a20:	f003 0310 	and.w	r3, r3, #16
 8003a24:	617b      	str	r3, [r7, #20]
 8003a26:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003a28:	2200      	movs	r2, #0
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	2036      	movs	r0, #54	@ 0x36
 8003a2e:	f000 fd9c 	bl	800456a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003a32:	2036      	movs	r0, #54	@ 0x36
 8003a34:	f000 fdb3 	bl	800459e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8003a38:	e030      	b.n	8003a9c <HAL_TIM_Base_MspInit+0xa4>
  else if(tim_baseHandle->Instance==TIM7)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a1b      	ldr	r2, [pc, #108]	@ (8003aac <HAL_TIM_Base_MspInit+0xb4>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d117      	bne.n	8003a74 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003a44:	4b18      	ldr	r3, [pc, #96]	@ (8003aa8 <HAL_TIM_Base_MspInit+0xb0>)
 8003a46:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003a4a:	4a17      	ldr	r2, [pc, #92]	@ (8003aa8 <HAL_TIM_Base_MspInit+0xb0>)
 8003a4c:	f043 0320 	orr.w	r3, r3, #32
 8003a50:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003a54:	4b14      	ldr	r3, [pc, #80]	@ (8003aa8 <HAL_TIM_Base_MspInit+0xb0>)
 8003a56:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003a5a:	f003 0320 	and.w	r3, r3, #32
 8003a5e:	613b      	str	r3, [r7, #16]
 8003a60:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003a62:	2200      	movs	r2, #0
 8003a64:	2100      	movs	r1, #0
 8003a66:	2037      	movs	r0, #55	@ 0x37
 8003a68:	f000 fd7f 	bl	800456a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003a6c:	2037      	movs	r0, #55	@ 0x37
 8003a6e:	f000 fd96 	bl	800459e <HAL_NVIC_EnableIRQ>
}
 8003a72:	e013      	b.n	8003a9c <HAL_TIM_Base_MspInit+0xa4>
  else if(tim_baseHandle->Instance==TIM13)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a0d      	ldr	r2, [pc, #52]	@ (8003ab0 <HAL_TIM_Base_MspInit+0xb8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d10e      	bne.n	8003a9c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa8 <HAL_TIM_Base_MspInit+0xb0>)
 8003a80:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003a84:	4a08      	ldr	r2, [pc, #32]	@ (8003aa8 <HAL_TIM_Base_MspInit+0xb0>)
 8003a86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a8a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003a8e:	4b06      	ldr	r3, [pc, #24]	@ (8003aa8 <HAL_TIM_Base_MspInit+0xb0>)
 8003a90:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003a94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
}
 8003a9c:	bf00      	nop
 8003a9e:	3718      	adds	r7, #24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40001000 	.word	0x40001000
 8003aa8:	58024400 	.word	0x58024400
 8003aac:	40001400 	.word	0x40001400
 8003ab0:	40001c00 	.word	0x40001c00

08003ab4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08c      	sub	sp, #48	@ 0x30
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003abc:	f107 031c 	add.w	r3, r7, #28
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	605a      	str	r2, [r3, #4]
 8003ac6:	609a      	str	r2, [r3, #8]
 8003ac8:	60da      	str	r2, [r3, #12]
 8003aca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ad4:	d13f      	bne.n	8003b56 <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ad6:	4b47      	ldr	r3, [pc, #284]	@ (8003bf4 <HAL_TIM_MspPostInit+0x140>)
 8003ad8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003adc:	4a45      	ldr	r2, [pc, #276]	@ (8003bf4 <HAL_TIM_MspPostInit+0x140>)
 8003ade:	f043 0301 	orr.w	r3, r3, #1
 8003ae2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003ae6:	4b43      	ldr	r3, [pc, #268]	@ (8003bf4 <HAL_TIM_MspPostInit+0x140>)
 8003ae8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	61bb      	str	r3, [r7, #24]
 8003af2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003af4:	4b3f      	ldr	r3, [pc, #252]	@ (8003bf4 <HAL_TIM_MspPostInit+0x140>)
 8003af6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003afa:	4a3e      	ldr	r2, [pc, #248]	@ (8003bf4 <HAL_TIM_MspPostInit+0x140>)
 8003afc:	f043 0302 	orr.w	r3, r3, #2
 8003b00:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003b04:	4b3b      	ldr	r3, [pc, #236]	@ (8003bf4 <HAL_TIM_MspPostInit+0x140>)
 8003b06:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8003b12:	f248 030c 	movw	r3, #32780	@ 0x800c
 8003b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b18:	2302      	movs	r3, #2
 8003b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b20:	2300      	movs	r3, #0
 8003b22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003b24:	2301      	movs	r3, #1
 8003b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b28:	f107 031c 	add.w	r3, r7, #28
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4832      	ldr	r0, [pc, #200]	@ (8003bf8 <HAL_TIM_MspPostInit+0x144>)
 8003b30:	f004 f80a 	bl	8007b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003b34:	2308      	movs	r3, #8
 8003b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b38:	2302      	movs	r3, #2
 8003b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b40:	2300      	movs	r3, #0
 8003b42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003b44:	2301      	movs	r3, #1
 8003b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b48:	f107 031c 	add.w	r3, r7, #28
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	482b      	ldr	r0, [pc, #172]	@ (8003bfc <HAL_TIM_MspPostInit+0x148>)
 8003b50:	f003 fffa 	bl	8007b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003b54:	e049      	b.n	8003bea <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM3)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a29      	ldr	r2, [pc, #164]	@ (8003c00 <HAL_TIM_MspPostInit+0x14c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d11f      	bne.n	8003ba0 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b60:	4b24      	ldr	r3, [pc, #144]	@ (8003bf4 <HAL_TIM_MspPostInit+0x140>)
 8003b62:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003b66:	4a23      	ldr	r2, [pc, #140]	@ (8003bf4 <HAL_TIM_MspPostInit+0x140>)
 8003b68:	f043 0302 	orr.w	r3, r3, #2
 8003b6c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003b70:	4b20      	ldr	r3, [pc, #128]	@ (8003bf4 <HAL_TIM_MspPostInit+0x140>)
 8003b72:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	613b      	str	r3, [r7, #16]
 8003b7c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003b7e:	2330      	movs	r3, #48	@ 0x30
 8003b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b82:	2302      	movs	r3, #2
 8003b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b8e:	2302      	movs	r3, #2
 8003b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b92:	f107 031c 	add.w	r3, r7, #28
 8003b96:	4619      	mov	r1, r3
 8003b98:	4818      	ldr	r0, [pc, #96]	@ (8003bfc <HAL_TIM_MspPostInit+0x148>)
 8003b9a:	f003 ffd5 	bl	8007b48 <HAL_GPIO_Init>
}
 8003b9e:	e024      	b.n	8003bea <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a17      	ldr	r2, [pc, #92]	@ (8003c04 <HAL_TIM_MspPostInit+0x150>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d11f      	bne.n	8003bea <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003baa:	4b12      	ldr	r3, [pc, #72]	@ (8003bf4 <HAL_TIM_MspPostInit+0x140>)
 8003bac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003bb0:	4a10      	ldr	r2, [pc, #64]	@ (8003bf4 <HAL_TIM_MspPostInit+0x140>)
 8003bb2:	f043 0302 	orr.w	r3, r3, #2
 8003bb6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003bba:	4b0e      	ldr	r3, [pc, #56]	@ (8003bf4 <HAL_TIM_MspPostInit+0x140>)
 8003bbc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	60fb      	str	r3, [r7, #12]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003bc8:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bce:	2302      	movs	r3, #2
 8003bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003bda:	2302      	movs	r3, #2
 8003bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bde:	f107 031c 	add.w	r3, r7, #28
 8003be2:	4619      	mov	r1, r3
 8003be4:	4805      	ldr	r0, [pc, #20]	@ (8003bfc <HAL_TIM_MspPostInit+0x148>)
 8003be6:	f003 ffaf 	bl	8007b48 <HAL_GPIO_Init>
}
 8003bea:	bf00      	nop
 8003bec:	3730      	adds	r7, #48	@ 0x30
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	58024400 	.word	0x58024400
 8003bf8:	58020000 	.word	0x58020000
 8003bfc:	58020400 	.word	0x58020400
 8003c00:	40000400 	.word	0x40000400
 8003c04:	40000800 	.word	0x40000800

08003c08 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003c0c:	4b22      	ldr	r3, [pc, #136]	@ (8003c98 <MX_UART4_Init+0x90>)
 8003c0e:	4a23      	ldr	r2, [pc, #140]	@ (8003c9c <MX_UART4_Init+0x94>)
 8003c10:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003c12:	4b21      	ldr	r3, [pc, #132]	@ (8003c98 <MX_UART4_Init+0x90>)
 8003c14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003c18:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003c1a:	4b1f      	ldr	r3, [pc, #124]	@ (8003c98 <MX_UART4_Init+0x90>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003c20:	4b1d      	ldr	r3, [pc, #116]	@ (8003c98 <MX_UART4_Init+0x90>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003c26:	4b1c      	ldr	r3, [pc, #112]	@ (8003c98 <MX_UART4_Init+0x90>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8003c98 <MX_UART4_Init+0x90>)
 8003c2e:	220c      	movs	r2, #12
 8003c30:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c32:	4b19      	ldr	r3, [pc, #100]	@ (8003c98 <MX_UART4_Init+0x90>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c38:	4b17      	ldr	r3, [pc, #92]	@ (8003c98 <MX_UART4_Init+0x90>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c3e:	4b16      	ldr	r3, [pc, #88]	@ (8003c98 <MX_UART4_Init+0x90>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003c44:	4b14      	ldr	r3, [pc, #80]	@ (8003c98 <MX_UART4_Init+0x90>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c4a:	4b13      	ldr	r3, [pc, #76]	@ (8003c98 <MX_UART4_Init+0x90>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003c50:	4811      	ldr	r0, [pc, #68]	@ (8003c98 <MX_UART4_Init+0x90>)
 8003c52:	f009 fabd 	bl	800d1d0 <HAL_UART_Init>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8003c5c:	f7ff fa0c 	bl	8003078 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c60:	2100      	movs	r1, #0
 8003c62:	480d      	ldr	r0, [pc, #52]	@ (8003c98 <MX_UART4_Init+0x90>)
 8003c64:	f00b fc8d 	bl	800f582 <HAL_UARTEx_SetTxFifoThreshold>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8003c6e:	f7ff fa03 	bl	8003078 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c72:	2100      	movs	r1, #0
 8003c74:	4808      	ldr	r0, [pc, #32]	@ (8003c98 <MX_UART4_Init+0x90>)
 8003c76:	f00b fcc2 	bl	800f5fe <HAL_UARTEx_SetRxFifoThreshold>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8003c80:	f7ff f9fa 	bl	8003078 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003c84:	4804      	ldr	r0, [pc, #16]	@ (8003c98 <MX_UART4_Init+0x90>)
 8003c86:	f00b fc43 	bl	800f510 <HAL_UARTEx_DisableFifoMode>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8003c90:	f7ff f9f2 	bl	8003078 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003c94:	bf00      	nop
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	24002794 	.word	0x24002794
 8003c9c:	40004c00 	.word	0x40004c00

08003ca0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ca4:	4b23      	ldr	r3, [pc, #140]	@ (8003d34 <MX_USART1_UART_Init+0x94>)
 8003ca6:	4a24      	ldr	r2, [pc, #144]	@ (8003d38 <MX_USART1_UART_Init+0x98>)
 8003ca8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8003caa:	4b22      	ldr	r3, [pc, #136]	@ (8003d34 <MX_USART1_UART_Init+0x94>)
 8003cac:	4a23      	ldr	r2, [pc, #140]	@ (8003d3c <MX_USART1_UART_Init+0x9c>)
 8003cae:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8003cb0:	4b20      	ldr	r3, [pc, #128]	@ (8003d34 <MX_USART1_UART_Init+0x94>)
 8003cb2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003cb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003cb8:	4b1e      	ldr	r3, [pc, #120]	@ (8003d34 <MX_USART1_UART_Init+0x94>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8003cbe:	4b1d      	ldr	r3, [pc, #116]	@ (8003d34 <MX_USART1_UART_Init+0x94>)
 8003cc0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cc4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8003d34 <MX_USART1_UART_Init+0x94>)
 8003cc8:	220c      	movs	r2, #12
 8003cca:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ccc:	4b19      	ldr	r3, [pc, #100]	@ (8003d34 <MX_USART1_UART_Init+0x94>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cd2:	4b18      	ldr	r3, [pc, #96]	@ (8003d34 <MX_USART1_UART_Init+0x94>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003cd8:	4b16      	ldr	r3, [pc, #88]	@ (8003d34 <MX_USART1_UART_Init+0x94>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003cde:	4b15      	ldr	r3, [pc, #84]	@ (8003d34 <MX_USART1_UART_Init+0x94>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ce4:	4b13      	ldr	r3, [pc, #76]	@ (8003d34 <MX_USART1_UART_Init+0x94>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003cea:	4812      	ldr	r0, [pc, #72]	@ (8003d34 <MX_USART1_UART_Init+0x94>)
 8003cec:	f009 fa70 	bl	800d1d0 <HAL_UART_Init>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8003cf6:	f7ff f9bf 	bl	8003078 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	480d      	ldr	r0, [pc, #52]	@ (8003d34 <MX_USART1_UART_Init+0x94>)
 8003cfe:	f00b fc40 	bl	800f582 <HAL_UARTEx_SetTxFifoThreshold>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8003d08:	f7ff f9b6 	bl	8003078 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	4809      	ldr	r0, [pc, #36]	@ (8003d34 <MX_USART1_UART_Init+0x94>)
 8003d10:	f00b fc75 	bl	800f5fe <HAL_UARTEx_SetRxFifoThreshold>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8003d1a:	f7ff f9ad 	bl	8003078 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003d1e:	4805      	ldr	r0, [pc, #20]	@ (8003d34 <MX_USART1_UART_Init+0x94>)
 8003d20:	f00b fbf6 	bl	800f510 <HAL_UARTEx_DisableFifoMode>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8003d2a:	f7ff f9a5 	bl	8003078 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003d2e:	bf00      	nop
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	24002828 	.word	0x24002828
 8003d38:	40011000 	.word	0x40011000
 8003d3c:	000186a0 	.word	0x000186a0

08003d40 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003d44:	4b22      	ldr	r3, [pc, #136]	@ (8003dd0 <MX_USART3_UART_Init+0x90>)
 8003d46:	4a23      	ldr	r2, [pc, #140]	@ (8003dd4 <MX_USART3_UART_Init+0x94>)
 8003d48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003d4a:	4b21      	ldr	r3, [pc, #132]	@ (8003dd0 <MX_USART3_UART_Init+0x90>)
 8003d4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003d50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003d52:	4b1f      	ldr	r3, [pc, #124]	@ (8003dd0 <MX_USART3_UART_Init+0x90>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003d58:	4b1d      	ldr	r3, [pc, #116]	@ (8003dd0 <MX_USART3_UART_Init+0x90>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8003dd0 <MX_USART3_UART_Init+0x90>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003d64:	4b1a      	ldr	r3, [pc, #104]	@ (8003dd0 <MX_USART3_UART_Init+0x90>)
 8003d66:	220c      	movs	r2, #12
 8003d68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d6a:	4b19      	ldr	r3, [pc, #100]	@ (8003dd0 <MX_USART3_UART_Init+0x90>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d70:	4b17      	ldr	r3, [pc, #92]	@ (8003dd0 <MX_USART3_UART_Init+0x90>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d76:	4b16      	ldr	r3, [pc, #88]	@ (8003dd0 <MX_USART3_UART_Init+0x90>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003d7c:	4b14      	ldr	r3, [pc, #80]	@ (8003dd0 <MX_USART3_UART_Init+0x90>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d82:	4b13      	ldr	r3, [pc, #76]	@ (8003dd0 <MX_USART3_UART_Init+0x90>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003d88:	4811      	ldr	r0, [pc, #68]	@ (8003dd0 <MX_USART3_UART_Init+0x90>)
 8003d8a:	f009 fa21 	bl	800d1d0 <HAL_UART_Init>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003d94:	f7ff f970 	bl	8003078 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d98:	2100      	movs	r1, #0
 8003d9a:	480d      	ldr	r0, [pc, #52]	@ (8003dd0 <MX_USART3_UART_Init+0x90>)
 8003d9c:	f00b fbf1 	bl	800f582 <HAL_UARTEx_SetTxFifoThreshold>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8003da6:	f7ff f967 	bl	8003078 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003daa:	2100      	movs	r1, #0
 8003dac:	4808      	ldr	r0, [pc, #32]	@ (8003dd0 <MX_USART3_UART_Init+0x90>)
 8003dae:	f00b fc26 	bl	800f5fe <HAL_UARTEx_SetRxFifoThreshold>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003db8:	f7ff f95e 	bl	8003078 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003dbc:	4804      	ldr	r0, [pc, #16]	@ (8003dd0 <MX_USART3_UART_Init+0x90>)
 8003dbe:	f00b fba7 	bl	800f510 <HAL_UARTEx_DisableFifoMode>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003dc8:	f7ff f956 	bl	8003078 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003dcc:	bf00      	nop
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	240028bc 	.word	0x240028bc
 8003dd4:	40004800 	.word	0x40004800

08003dd8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003ddc:	4b22      	ldr	r3, [pc, #136]	@ (8003e68 <MX_USART6_UART_Init+0x90>)
 8003dde:	4a23      	ldr	r2, [pc, #140]	@ (8003e6c <MX_USART6_UART_Init+0x94>)
 8003de0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003de2:	4b21      	ldr	r3, [pc, #132]	@ (8003e68 <MX_USART6_UART_Init+0x90>)
 8003de4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003de8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003dea:	4b1f      	ldr	r3, [pc, #124]	@ (8003e68 <MX_USART6_UART_Init+0x90>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003df0:	4b1d      	ldr	r3, [pc, #116]	@ (8003e68 <MX_USART6_UART_Init+0x90>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003df6:	4b1c      	ldr	r3, [pc, #112]	@ (8003e68 <MX_USART6_UART_Init+0x90>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8003e68 <MX_USART6_UART_Init+0x90>)
 8003dfe:	220c      	movs	r2, #12
 8003e00:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e02:	4b19      	ldr	r3, [pc, #100]	@ (8003e68 <MX_USART6_UART_Init+0x90>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e08:	4b17      	ldr	r3, [pc, #92]	@ (8003e68 <MX_USART6_UART_Init+0x90>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e0e:	4b16      	ldr	r3, [pc, #88]	@ (8003e68 <MX_USART6_UART_Init+0x90>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003e14:	4b14      	ldr	r3, [pc, #80]	@ (8003e68 <MX_USART6_UART_Init+0x90>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e1a:	4b13      	ldr	r3, [pc, #76]	@ (8003e68 <MX_USART6_UART_Init+0x90>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003e20:	4811      	ldr	r0, [pc, #68]	@ (8003e68 <MX_USART6_UART_Init+0x90>)
 8003e22:	f009 f9d5 	bl	800d1d0 <HAL_UART_Init>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8003e2c:	f7ff f924 	bl	8003078 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e30:	2100      	movs	r1, #0
 8003e32:	480d      	ldr	r0, [pc, #52]	@ (8003e68 <MX_USART6_UART_Init+0x90>)
 8003e34:	f00b fba5 	bl	800f582 <HAL_UARTEx_SetTxFifoThreshold>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8003e3e:	f7ff f91b 	bl	8003078 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e42:	2100      	movs	r1, #0
 8003e44:	4808      	ldr	r0, [pc, #32]	@ (8003e68 <MX_USART6_UART_Init+0x90>)
 8003e46:	f00b fbda 	bl	800f5fe <HAL_UARTEx_SetRxFifoThreshold>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8003e50:	f7ff f912 	bl	8003078 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8003e54:	4804      	ldr	r0, [pc, #16]	@ (8003e68 <MX_USART6_UART_Init+0x90>)
 8003e56:	f00b fb5b 	bl	800f510 <HAL_UARTEx_DisableFifoMode>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8003e60:	f7ff f90a 	bl	8003078 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003e64:	bf00      	nop
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	24002950 	.word	0x24002950
 8003e6c:	40011400 	.word	0x40011400

08003e70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b0c0      	sub	sp, #256	@ 0x100
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e78:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	605a      	str	r2, [r3, #4]
 8003e82:	609a      	str	r2, [r3, #8]
 8003e84:	60da      	str	r2, [r3, #12]
 8003e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e88:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003e8c:	22c0      	movs	r2, #192	@ 0xc0
 8003e8e:	2100      	movs	r1, #0
 8003e90:	4618      	mov	r0, r3
 8003e92:	f010 f957 	bl	8014144 <memset>
  if(uartHandle->Instance==UART4)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4aa9      	ldr	r2, [pc, #676]	@ (8004140 <HAL_UART_MspInit+0x2d0>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d146      	bne.n	8003f2e <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003ea0:	f04f 0202 	mov.w	r2, #2
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003eac:	2300      	movs	r3, #0
 8003eae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003eb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f005 f93c 	bl	8009134 <HAL_RCCEx_PeriphCLKConfig>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003ec2:	f7ff f8d9 	bl	8003078 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003ec6:	4b9f      	ldr	r3, [pc, #636]	@ (8004144 <HAL_UART_MspInit+0x2d4>)
 8003ec8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003ecc:	4a9d      	ldr	r2, [pc, #628]	@ (8004144 <HAL_UART_MspInit+0x2d4>)
 8003ece:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003ed2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003ed6:	4b9b      	ldr	r3, [pc, #620]	@ (8004144 <HAL_UART_MspInit+0x2d4>)
 8003ed8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003edc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ee0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ee4:	4b97      	ldr	r3, [pc, #604]	@ (8004144 <HAL_UART_MspInit+0x2d4>)
 8003ee6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003eea:	4a96      	ldr	r2, [pc, #600]	@ (8004144 <HAL_UART_MspInit+0x2d4>)
 8003eec:	f043 0301 	orr.w	r3, r3, #1
 8003ef0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003ef4:	4b93      	ldr	r3, [pc, #588]	@ (8004144 <HAL_UART_MspInit+0x2d4>)
 8003ef6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	623b      	str	r3, [r7, #32]
 8003f00:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003f02:	2303      	movs	r3, #3
 8003f04:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f08:	2302      	movs	r3, #2
 8003f0a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f14:	2300      	movs	r3, #0
 8003f16:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003f1a:	2308      	movs	r3, #8
 8003f1c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f20:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003f24:	4619      	mov	r1, r3
 8003f26:	4888      	ldr	r0, [pc, #544]	@ (8004148 <HAL_UART_MspInit+0x2d8>)
 8003f28:	f003 fe0e 	bl	8007b48 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003f2c:	e167      	b.n	80041fe <HAL_UART_MspInit+0x38e>
  else if(uartHandle->Instance==USART1)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a86      	ldr	r2, [pc, #536]	@ (800414c <HAL_UART_MspInit+0x2dc>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d17f      	bne.n	8004038 <HAL_UART_MspInit+0x1c8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003f38:	f04f 0201 	mov.w	r2, #1
 8003f3c:	f04f 0300 	mov.w	r3, #0
 8003f40:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003f44:	2300      	movs	r3, #0
 8003f46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f005 f8f0 	bl	8009134 <HAL_RCCEx_PeriphCLKConfig>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <HAL_UART_MspInit+0xee>
      Error_Handler();
 8003f5a:	f7ff f88d 	bl	8003078 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f5e:	4b79      	ldr	r3, [pc, #484]	@ (8004144 <HAL_UART_MspInit+0x2d4>)
 8003f60:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003f64:	4a77      	ldr	r2, [pc, #476]	@ (8004144 <HAL_UART_MspInit+0x2d4>)
 8003f66:	f043 0310 	orr.w	r3, r3, #16
 8003f6a:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8003f6e:	4b75      	ldr	r3, [pc, #468]	@ (8004144 <HAL_UART_MspInit+0x2d4>)
 8003f70:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003f74:	f003 0310 	and.w	r3, r3, #16
 8003f78:	61fb      	str	r3, [r7, #28]
 8003f7a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f7c:	4b71      	ldr	r3, [pc, #452]	@ (8004144 <HAL_UART_MspInit+0x2d4>)
 8003f7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003f82:	4a70      	ldr	r2, [pc, #448]	@ (8004144 <HAL_UART_MspInit+0x2d4>)
 8003f84:	f043 0301 	orr.w	r3, r3, #1
 8003f88:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003f8c:	4b6d      	ldr	r3, [pc, #436]	@ (8004144 <HAL_UART_MspInit+0x2d4>)
 8003f8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	61bb      	str	r3, [r7, #24]
 8003f98:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|SBUS_RX_Pin;
 8003f9a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003f9e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003fb4:	2307      	movs	r3, #7
 8003fb6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fba:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	4861      	ldr	r0, [pc, #388]	@ (8004148 <HAL_UART_MspInit+0x2d8>)
 8003fc2:	f003 fdc1 	bl	8007b48 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8003fc6:	4b62      	ldr	r3, [pc, #392]	@ (8004150 <HAL_UART_MspInit+0x2e0>)
 8003fc8:	4a62      	ldr	r2, [pc, #392]	@ (8004154 <HAL_UART_MspInit+0x2e4>)
 8003fca:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003fcc:	4b60      	ldr	r3, [pc, #384]	@ (8004150 <HAL_UART_MspInit+0x2e0>)
 8003fce:	2229      	movs	r2, #41	@ 0x29
 8003fd0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fd2:	4b5f      	ldr	r3, [pc, #380]	@ (8004150 <HAL_UART_MspInit+0x2e0>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fd8:	4b5d      	ldr	r3, [pc, #372]	@ (8004150 <HAL_UART_MspInit+0x2e0>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003fde:	4b5c      	ldr	r3, [pc, #368]	@ (8004150 <HAL_UART_MspInit+0x2e0>)
 8003fe0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003fe4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003fe6:	4b5a      	ldr	r3, [pc, #360]	@ (8004150 <HAL_UART_MspInit+0x2e0>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003fec:	4b58      	ldr	r3, [pc, #352]	@ (8004150 <HAL_UART_MspInit+0x2e0>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003ff2:	4b57      	ldr	r3, [pc, #348]	@ (8004150 <HAL_UART_MspInit+0x2e0>)
 8003ff4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ff8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003ffa:	4b55      	ldr	r3, [pc, #340]	@ (8004150 <HAL_UART_MspInit+0x2e0>)
 8003ffc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004000:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004002:	4b53      	ldr	r3, [pc, #332]	@ (8004150 <HAL_UART_MspInit+0x2e0>)
 8004004:	2200      	movs	r2, #0
 8004006:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004008:	4851      	ldr	r0, [pc, #324]	@ (8004150 <HAL_UART_MspInit+0x2e0>)
 800400a:	f000 fb5b 	bl	80046c4 <HAL_DMA_Init>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8004014:	f7ff f830 	bl	8003078 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a4d      	ldr	r2, [pc, #308]	@ (8004150 <HAL_UART_MspInit+0x2e0>)
 800401c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004020:	4a4b      	ldr	r2, [pc, #300]	@ (8004150 <HAL_UART_MspInit+0x2e0>)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004026:	2200      	movs	r2, #0
 8004028:	2100      	movs	r1, #0
 800402a:	2025      	movs	r0, #37	@ 0x25
 800402c:	f000 fa9d 	bl	800456a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004030:	2025      	movs	r0, #37	@ 0x25
 8004032:	f000 fab4 	bl	800459e <HAL_NVIC_EnableIRQ>
}
 8004036:	e0e2      	b.n	80041fe <HAL_UART_MspInit+0x38e>
  else if(uartHandle->Instance==USART3)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a46      	ldr	r2, [pc, #280]	@ (8004158 <HAL_UART_MspInit+0x2e8>)
 800403e:	4293      	cmp	r3, r2
 8004040:	f040 8092 	bne.w	8004168 <HAL_UART_MspInit+0x2f8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004044:	f04f 0202 	mov.w	r2, #2
 8004048:	f04f 0300 	mov.w	r3, #0
 800404c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004050:	2300      	movs	r3, #0
 8004052:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004056:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800405a:	4618      	mov	r0, r3
 800405c:	f005 f86a 	bl	8009134 <HAL_RCCEx_PeriphCLKConfig>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 8004066:	f7ff f807 	bl	8003078 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800406a:	4b36      	ldr	r3, [pc, #216]	@ (8004144 <HAL_UART_MspInit+0x2d4>)
 800406c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004070:	4a34      	ldr	r2, [pc, #208]	@ (8004144 <HAL_UART_MspInit+0x2d4>)
 8004072:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004076:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800407a:	4b32      	ldr	r3, [pc, #200]	@ (8004144 <HAL_UART_MspInit+0x2d4>)
 800407c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004080:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004084:	617b      	str	r3, [r7, #20]
 8004086:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004088:	4b2e      	ldr	r3, [pc, #184]	@ (8004144 <HAL_UART_MspInit+0x2d4>)
 800408a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800408e:	4a2d      	ldr	r2, [pc, #180]	@ (8004144 <HAL_UART_MspInit+0x2d4>)
 8004090:	f043 0304 	orr.w	r3, r3, #4
 8004094:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004098:	4b2a      	ldr	r3, [pc, #168]	@ (8004144 <HAL_UART_MspInit+0x2d4>)
 800409a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800409e:	f003 0304 	and.w	r3, r3, #4
 80040a2:	613b      	str	r3, [r7, #16]
 80040a4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80040a6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80040aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ae:	2302      	movs	r3, #2
 80040b0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b4:	2300      	movs	r3, #0
 80040b6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ba:	2300      	movs	r3, #0
 80040bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80040c0:	2307      	movs	r3, #7
 80040c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040c6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80040ca:	4619      	mov	r1, r3
 80040cc:	4823      	ldr	r0, [pc, #140]	@ (800415c <HAL_UART_MspInit+0x2ec>)
 80040ce:	f003 fd3b 	bl	8007b48 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80040d2:	4b23      	ldr	r3, [pc, #140]	@ (8004160 <HAL_UART_MspInit+0x2f0>)
 80040d4:	4a23      	ldr	r2, [pc, #140]	@ (8004164 <HAL_UART_MspInit+0x2f4>)
 80040d6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80040d8:	4b21      	ldr	r3, [pc, #132]	@ (8004160 <HAL_UART_MspInit+0x2f0>)
 80040da:	222d      	movs	r2, #45	@ 0x2d
 80040dc:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040de:	4b20      	ldr	r3, [pc, #128]	@ (8004160 <HAL_UART_MspInit+0x2f0>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040e4:	4b1e      	ldr	r3, [pc, #120]	@ (8004160 <HAL_UART_MspInit+0x2f0>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80040ea:	4b1d      	ldr	r3, [pc, #116]	@ (8004160 <HAL_UART_MspInit+0x2f0>)
 80040ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80040f0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004160 <HAL_UART_MspInit+0x2f0>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040f8:	4b19      	ldr	r3, [pc, #100]	@ (8004160 <HAL_UART_MspInit+0x2f0>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80040fe:	4b18      	ldr	r3, [pc, #96]	@ (8004160 <HAL_UART_MspInit+0x2f0>)
 8004100:	2200      	movs	r2, #0
 8004102:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004104:	4b16      	ldr	r3, [pc, #88]	@ (8004160 <HAL_UART_MspInit+0x2f0>)
 8004106:	2200      	movs	r2, #0
 8004108:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800410a:	4b15      	ldr	r3, [pc, #84]	@ (8004160 <HAL_UART_MspInit+0x2f0>)
 800410c:	2200      	movs	r2, #0
 800410e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004110:	4813      	ldr	r0, [pc, #76]	@ (8004160 <HAL_UART_MspInit+0x2f0>)
 8004112:	f000 fad7 	bl	80046c4 <HAL_DMA_Init>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <HAL_UART_MspInit+0x2b0>
      Error_Handler();
 800411c:	f7fe ffac 	bl	8003078 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a0f      	ldr	r2, [pc, #60]	@ (8004160 <HAL_UART_MspInit+0x2f0>)
 8004124:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004128:	4a0d      	ldr	r2, [pc, #52]	@ (8004160 <HAL_UART_MspInit+0x2f0>)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800412e:	2200      	movs	r2, #0
 8004130:	2100      	movs	r1, #0
 8004132:	2027      	movs	r0, #39	@ 0x27
 8004134:	f000 fa19 	bl	800456a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004138:	2027      	movs	r0, #39	@ 0x27
 800413a:	f000 fa30 	bl	800459e <HAL_NVIC_EnableIRQ>
}
 800413e:	e05e      	b.n	80041fe <HAL_UART_MspInit+0x38e>
 8004140:	40004c00 	.word	0x40004c00
 8004144:	58024400 	.word	0x58024400
 8004148:	58020000 	.word	0x58020000
 800414c:	40011000 	.word	0x40011000
 8004150:	240029e4 	.word	0x240029e4
 8004154:	40020010 	.word	0x40020010
 8004158:	40004800 	.word	0x40004800
 800415c:	58020800 	.word	0x58020800
 8004160:	24002a5c 	.word	0x24002a5c
 8004164:	40020028 	.word	0x40020028
  else if(uartHandle->Instance==USART6)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a26      	ldr	r2, [pc, #152]	@ (8004208 <HAL_UART_MspInit+0x398>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d145      	bne.n	80041fe <HAL_UART_MspInit+0x38e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004172:	f04f 0201 	mov.w	r2, #1
 8004176:	f04f 0300 	mov.w	r3, #0
 800417a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800417e:	2300      	movs	r3, #0
 8004180:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004184:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004188:	4618      	mov	r0, r3
 800418a:	f004 ffd3 	bl	8009134 <HAL_RCCEx_PeriphCLKConfig>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <HAL_UART_MspInit+0x328>
      Error_Handler();
 8004194:	f7fe ff70 	bl	8003078 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004198:	4b1c      	ldr	r3, [pc, #112]	@ (800420c <HAL_UART_MspInit+0x39c>)
 800419a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800419e:	4a1b      	ldr	r2, [pc, #108]	@ (800420c <HAL_UART_MspInit+0x39c>)
 80041a0:	f043 0320 	orr.w	r3, r3, #32
 80041a4:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80041a8:	4b18      	ldr	r3, [pc, #96]	@ (800420c <HAL_UART_MspInit+0x39c>)
 80041aa:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80041ae:	f003 0320 	and.w	r3, r3, #32
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041b6:	4b15      	ldr	r3, [pc, #84]	@ (800420c <HAL_UART_MspInit+0x39c>)
 80041b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80041bc:	4a13      	ldr	r2, [pc, #76]	@ (800420c <HAL_UART_MspInit+0x39c>)
 80041be:	f043 0304 	orr.w	r3, r3, #4
 80041c2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80041c6:	4b11      	ldr	r3, [pc, #68]	@ (800420c <HAL_UART_MspInit+0x39c>)
 80041c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	60bb      	str	r3, [r7, #8]
 80041d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80041d4:	23c0      	movs	r3, #192	@ 0xc0
 80041d6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041da:	2302      	movs	r3, #2
 80041dc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e0:	2300      	movs	r3, #0
 80041e2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041e6:	2300      	movs	r3, #0
 80041e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80041ec:	2307      	movs	r3, #7
 80041ee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041f2:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80041f6:	4619      	mov	r1, r3
 80041f8:	4805      	ldr	r0, [pc, #20]	@ (8004210 <HAL_UART_MspInit+0x3a0>)
 80041fa:	f003 fca5 	bl	8007b48 <HAL_GPIO_Init>
}
 80041fe:	bf00      	nop
 8004200:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40011400 	.word	0x40011400
 800420c:	58024400 	.word	0x58024400
 8004210:	58020800 	.word	0x58020800

08004214 <Reset_UART>:
  /* USER CODE END USART6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void Reset_UART(UART_HandleTypeDef *huart) {
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]

      // Clear any pending error flags
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF | UART_CLEAR_OREF);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	220f      	movs	r2, #15
 8004222:	621a      	str	r2, [r3, #32]

    // Abort ongoing UART transfer
    if (HAL_UART_Abort_IT(huart) != HAL_OK) {
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f009 f8fd 	bl	800d424 <HAL_UART_Abort_IT>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <Reset_UART+0x20>
        // Abort Error
        Error_Handler();
 8004230:	f7fe ff22 	bl	8003078 <Error_Handler>
    }
     if(huart == &huart3){
    	 MX_USART3_UART_Init();
     }
*/
}
 8004234:	bf00      	nop
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800423c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004274 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004240:	f7ff f922 	bl	8003488 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004244:	480c      	ldr	r0, [pc, #48]	@ (8004278 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004246:	490d      	ldr	r1, [pc, #52]	@ (800427c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004248:	4a0d      	ldr	r2, [pc, #52]	@ (8004280 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800424a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800424c:	e002      	b.n	8004254 <LoopCopyDataInit>

0800424e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800424e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004252:	3304      	adds	r3, #4

08004254 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8004254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004258:	d3f9      	bcc.n	800424e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800425a:	4a0a      	ldr	r2, [pc, #40]	@ (8004284 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800425c:	4c0a      	ldr	r4, [pc, #40]	@ (8004288 <LoopFillZerobss+0x22>)
  movs r3, #0
 800425e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004260:	e001      	b.n	8004266 <LoopFillZerobss>

08004262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004264:	3204      	adds	r2, #4

08004266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004268:	d3fb      	bcc.n	8004262 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800426a:	f00f ff79 	bl	8014160 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800426e:	f7fe fdb9 	bl	8002de4 <main>
  bx  lr
 8004272:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004274:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8004278:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800427c:	2400011c 	.word	0x2400011c
  ldr r2, =_sidata
 8004280:	08015210 	.word	0x08015210
  ldr r2, =_sbss
 8004284:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 8004288:	24002e54 	.word	0x24002e54

0800428c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800428c:	e7fe      	b.n	800428c <ADC_IRQHandler>
	...

08004290 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004296:	2003      	movs	r0, #3
 8004298:	f000 f95c 	bl	8004554 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800429c:	f004 fd74 	bl	8008d88 <HAL_RCC_GetSysClockFreq>
 80042a0:	4602      	mov	r2, r0
 80042a2:	4b15      	ldr	r3, [pc, #84]	@ (80042f8 <HAL_Init+0x68>)
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	0a1b      	lsrs	r3, r3, #8
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	4913      	ldr	r1, [pc, #76]	@ (80042fc <HAL_Init+0x6c>)
 80042ae:	5ccb      	ldrb	r3, [r1, r3]
 80042b0:	f003 031f 	and.w	r3, r3, #31
 80042b4:	fa22 f303 	lsr.w	r3, r2, r3
 80042b8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80042ba:	4b0f      	ldr	r3, [pc, #60]	@ (80042f8 <HAL_Init+0x68>)
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	4a0e      	ldr	r2, [pc, #56]	@ (80042fc <HAL_Init+0x6c>)
 80042c4:	5cd3      	ldrb	r3, [r2, r3]
 80042c6:	f003 031f 	and.w	r3, r3, #31
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	fa22 f303 	lsr.w	r3, r2, r3
 80042d0:	4a0b      	ldr	r2, [pc, #44]	@ (8004300 <HAL_Init+0x70>)
 80042d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80042d4:	4a0b      	ldr	r2, [pc, #44]	@ (8004304 <HAL_Init+0x74>)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80042da:	200f      	movs	r0, #15
 80042dc:	f000 f814 	bl	8004308 <HAL_InitTick>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e002      	b.n	80042f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80042ea:	f7ff f82f 	bl	800334c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	58024400 	.word	0x58024400
 80042fc:	080144f0 	.word	0x080144f0
 8004300:	240000a8 	.word	0x240000a8
 8004304:	240000a4 	.word	0x240000a4

08004308 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004310:	4b15      	ldr	r3, [pc, #84]	@ (8004368 <HAL_InitTick+0x60>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d101      	bne.n	800431c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e021      	b.n	8004360 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800431c:	4b13      	ldr	r3, [pc, #76]	@ (800436c <HAL_InitTick+0x64>)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	4b11      	ldr	r3, [pc, #68]	@ (8004368 <HAL_InitTick+0x60>)
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	4619      	mov	r1, r3
 8004326:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800432a:	fbb3 f3f1 	udiv	r3, r3, r1
 800432e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004332:	4618      	mov	r0, r3
 8004334:	f000 f941 	bl	80045ba <HAL_SYSTICK_Config>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e00e      	b.n	8004360 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b0f      	cmp	r3, #15
 8004346:	d80a      	bhi.n	800435e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004348:	2200      	movs	r2, #0
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	f04f 30ff 	mov.w	r0, #4294967295
 8004350:	f000 f90b 	bl	800456a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004354:	4a06      	ldr	r2, [pc, #24]	@ (8004370 <HAL_InitTick+0x68>)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	e000      	b.n	8004360 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
}
 8004360:	4618      	mov	r0, r3
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	240000b0 	.word	0x240000b0
 800436c:	240000a4 	.word	0x240000a4
 8004370:	240000ac 	.word	0x240000ac

08004374 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004378:	4b06      	ldr	r3, [pc, #24]	@ (8004394 <HAL_IncTick+0x20>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	461a      	mov	r2, r3
 800437e:	4b06      	ldr	r3, [pc, #24]	@ (8004398 <HAL_IncTick+0x24>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4413      	add	r3, r2
 8004384:	4a04      	ldr	r2, [pc, #16]	@ (8004398 <HAL_IncTick+0x24>)
 8004386:	6013      	str	r3, [r2, #0]
}
 8004388:	bf00      	nop
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	240000b0 	.word	0x240000b0
 8004398:	24002ad4 	.word	0x24002ad4

0800439c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  return uwTick;
 80043a0:	4b03      	ldr	r3, [pc, #12]	@ (80043b0 <HAL_GetTick+0x14>)
 80043a2:	681b      	ldr	r3, [r3, #0]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	24002ad4 	.word	0x24002ad4

080043b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f003 0307 	and.w	r3, r3, #7
 80043c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043c4:	4b0b      	ldr	r3, [pc, #44]	@ (80043f4 <__NVIC_SetPriorityGrouping+0x40>)
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80043d0:	4013      	ands	r3, r2
 80043d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80043dc:	4b06      	ldr	r3, [pc, #24]	@ (80043f8 <__NVIC_SetPriorityGrouping+0x44>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043e2:	4a04      	ldr	r2, [pc, #16]	@ (80043f4 <__NVIC_SetPriorityGrouping+0x40>)
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	60d3      	str	r3, [r2, #12]
}
 80043e8:	bf00      	nop
 80043ea:	3714      	adds	r7, #20
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	e000ed00 	.word	0xe000ed00
 80043f8:	05fa0000 	.word	0x05fa0000

080043fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004400:	4b04      	ldr	r3, [pc, #16]	@ (8004414 <__NVIC_GetPriorityGrouping+0x18>)
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	0a1b      	lsrs	r3, r3, #8
 8004406:	f003 0307 	and.w	r3, r3, #7
}
 800440a:	4618      	mov	r0, r3
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	e000ed00 	.word	0xe000ed00

08004418 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	4603      	mov	r3, r0
 8004420:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004422:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004426:	2b00      	cmp	r3, #0
 8004428:	db0b      	blt.n	8004442 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800442a:	88fb      	ldrh	r3, [r7, #6]
 800442c:	f003 021f 	and.w	r2, r3, #31
 8004430:	4907      	ldr	r1, [pc, #28]	@ (8004450 <__NVIC_EnableIRQ+0x38>)
 8004432:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004436:	095b      	lsrs	r3, r3, #5
 8004438:	2001      	movs	r0, #1
 800443a:	fa00 f202 	lsl.w	r2, r0, r2
 800443e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004442:	bf00      	nop
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	e000e100 	.word	0xe000e100

08004454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	4603      	mov	r3, r0
 800445c:	6039      	str	r1, [r7, #0]
 800445e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004460:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004464:	2b00      	cmp	r3, #0
 8004466:	db0a      	blt.n	800447e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	b2da      	uxtb	r2, r3
 800446c:	490c      	ldr	r1, [pc, #48]	@ (80044a0 <__NVIC_SetPriority+0x4c>)
 800446e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004472:	0112      	lsls	r2, r2, #4
 8004474:	b2d2      	uxtb	r2, r2
 8004476:	440b      	add	r3, r1
 8004478:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800447c:	e00a      	b.n	8004494 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	b2da      	uxtb	r2, r3
 8004482:	4908      	ldr	r1, [pc, #32]	@ (80044a4 <__NVIC_SetPriority+0x50>)
 8004484:	88fb      	ldrh	r3, [r7, #6]
 8004486:	f003 030f 	and.w	r3, r3, #15
 800448a:	3b04      	subs	r3, #4
 800448c:	0112      	lsls	r2, r2, #4
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	440b      	add	r3, r1
 8004492:	761a      	strb	r2, [r3, #24]
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	e000e100 	.word	0xe000e100
 80044a4:	e000ed00 	.word	0xe000ed00

080044a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b089      	sub	sp, #36	@ 0x24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	f1c3 0307 	rsb	r3, r3, #7
 80044c2:	2b04      	cmp	r3, #4
 80044c4:	bf28      	it	cs
 80044c6:	2304      	movcs	r3, #4
 80044c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	3304      	adds	r3, #4
 80044ce:	2b06      	cmp	r3, #6
 80044d0:	d902      	bls.n	80044d8 <NVIC_EncodePriority+0x30>
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	3b03      	subs	r3, #3
 80044d6:	e000      	b.n	80044da <NVIC_EncodePriority+0x32>
 80044d8:	2300      	movs	r3, #0
 80044da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044dc:	f04f 32ff 	mov.w	r2, #4294967295
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	fa02 f303 	lsl.w	r3, r2, r3
 80044e6:	43da      	mvns	r2, r3
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	401a      	ands	r2, r3
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044f0:	f04f 31ff 	mov.w	r1, #4294967295
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	fa01 f303 	lsl.w	r3, r1, r3
 80044fa:	43d9      	mvns	r1, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004500:	4313      	orrs	r3, r2
         );
}
 8004502:	4618      	mov	r0, r3
 8004504:	3724      	adds	r7, #36	@ 0x24
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
	...

08004510 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	3b01      	subs	r3, #1
 800451c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004520:	d301      	bcc.n	8004526 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004522:	2301      	movs	r3, #1
 8004524:	e00f      	b.n	8004546 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004526:	4a0a      	ldr	r2, [pc, #40]	@ (8004550 <SysTick_Config+0x40>)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	3b01      	subs	r3, #1
 800452c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800452e:	210f      	movs	r1, #15
 8004530:	f04f 30ff 	mov.w	r0, #4294967295
 8004534:	f7ff ff8e 	bl	8004454 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004538:	4b05      	ldr	r3, [pc, #20]	@ (8004550 <SysTick_Config+0x40>)
 800453a:	2200      	movs	r2, #0
 800453c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800453e:	4b04      	ldr	r3, [pc, #16]	@ (8004550 <SysTick_Config+0x40>)
 8004540:	2207      	movs	r2, #7
 8004542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	e000e010 	.word	0xe000e010

08004554 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f7ff ff29 	bl	80043b4 <__NVIC_SetPriorityGrouping>
}
 8004562:	bf00      	nop
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b086      	sub	sp, #24
 800456e:	af00      	add	r7, sp, #0
 8004570:	4603      	mov	r3, r0
 8004572:	60b9      	str	r1, [r7, #8]
 8004574:	607a      	str	r2, [r7, #4]
 8004576:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004578:	f7ff ff40 	bl	80043fc <__NVIC_GetPriorityGrouping>
 800457c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	68b9      	ldr	r1, [r7, #8]
 8004582:	6978      	ldr	r0, [r7, #20]
 8004584:	f7ff ff90 	bl	80044a8 <NVIC_EncodePriority>
 8004588:	4602      	mov	r2, r0
 800458a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800458e:	4611      	mov	r1, r2
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff ff5f 	bl	8004454 <__NVIC_SetPriority>
}
 8004596:	bf00      	nop
 8004598:	3718      	adds	r7, #24
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b082      	sub	sp, #8
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	4603      	mov	r3, r0
 80045a6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7ff ff33 	bl	8004418 <__NVIC_EnableIRQ>
}
 80045b2:	bf00      	nop
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b082      	sub	sp, #8
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7ff ffa4 	bl	8004510 <SysTick_Config>
 80045c8:	4603      	mov	r3, r0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
	...

080045d4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80045d8:	f3bf 8f5f 	dmb	sy
}
 80045dc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80045de:	4b07      	ldr	r3, [pc, #28]	@ (80045fc <HAL_MPU_Disable+0x28>)
 80045e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e2:	4a06      	ldr	r2, [pc, #24]	@ (80045fc <HAL_MPU_Disable+0x28>)
 80045e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045e8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80045ea:	4b05      	ldr	r3, [pc, #20]	@ (8004600 <HAL_MPU_Disable+0x2c>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	605a      	str	r2, [r3, #4]
}
 80045f0:	bf00      	nop
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	e000ed00 	.word	0xe000ed00
 8004600:	e000ed90 	.word	0xe000ed90

08004604 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800460c:	4a0b      	ldr	r2, [pc, #44]	@ (800463c <HAL_MPU_Enable+0x38>)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f043 0301 	orr.w	r3, r3, #1
 8004614:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004616:	4b0a      	ldr	r3, [pc, #40]	@ (8004640 <HAL_MPU_Enable+0x3c>)
 8004618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461a:	4a09      	ldr	r2, [pc, #36]	@ (8004640 <HAL_MPU_Enable+0x3c>)
 800461c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004620:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004622:	f3bf 8f4f 	dsb	sy
}
 8004626:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004628:	f3bf 8f6f 	isb	sy
}
 800462c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	e000ed90 	.word	0xe000ed90
 8004640:	e000ed00 	.word	0xe000ed00

08004644 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	785a      	ldrb	r2, [r3, #1]
 8004650:	4b1b      	ldr	r3, [pc, #108]	@ (80046c0 <HAL_MPU_ConfigRegion+0x7c>)
 8004652:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004654:	4b1a      	ldr	r3, [pc, #104]	@ (80046c0 <HAL_MPU_ConfigRegion+0x7c>)
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	4a19      	ldr	r2, [pc, #100]	@ (80046c0 <HAL_MPU_ConfigRegion+0x7c>)
 800465a:	f023 0301 	bic.w	r3, r3, #1
 800465e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004660:	4a17      	ldr	r2, [pc, #92]	@ (80046c0 <HAL_MPU_ConfigRegion+0x7c>)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	7b1b      	ldrb	r3, [r3, #12]
 800466c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	7adb      	ldrb	r3, [r3, #11]
 8004672:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004674:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	7a9b      	ldrb	r3, [r3, #10]
 800467a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800467c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	7b5b      	ldrb	r3, [r3, #13]
 8004682:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004684:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	7b9b      	ldrb	r3, [r3, #14]
 800468a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800468c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	7bdb      	ldrb	r3, [r3, #15]
 8004692:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004694:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	7a5b      	ldrb	r3, [r3, #9]
 800469a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800469c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	7a1b      	ldrb	r3, [r3, #8]
 80046a2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80046a4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	7812      	ldrb	r2, [r2, #0]
 80046aa:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80046ac:	4a04      	ldr	r2, [pc, #16]	@ (80046c0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80046ae:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80046b0:	6113      	str	r3, [r2, #16]
}
 80046b2:	bf00      	nop
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	e000ed90 	.word	0xe000ed90

080046c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80046cc:	f7ff fe66 	bl	800439c <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e37d      	b.n	8004dd8 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a66      	ldr	r2, [pc, #408]	@ (800487c <HAL_DMA_Init+0x1b8>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d04a      	beq.n	800477c <HAL_DMA_Init+0xb8>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a65      	ldr	r2, [pc, #404]	@ (8004880 <HAL_DMA_Init+0x1bc>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d045      	beq.n	800477c <HAL_DMA_Init+0xb8>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a63      	ldr	r2, [pc, #396]	@ (8004884 <HAL_DMA_Init+0x1c0>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d040      	beq.n	800477c <HAL_DMA_Init+0xb8>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a62      	ldr	r2, [pc, #392]	@ (8004888 <HAL_DMA_Init+0x1c4>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d03b      	beq.n	800477c <HAL_DMA_Init+0xb8>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a60      	ldr	r2, [pc, #384]	@ (800488c <HAL_DMA_Init+0x1c8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d036      	beq.n	800477c <HAL_DMA_Init+0xb8>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a5f      	ldr	r2, [pc, #380]	@ (8004890 <HAL_DMA_Init+0x1cc>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d031      	beq.n	800477c <HAL_DMA_Init+0xb8>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a5d      	ldr	r2, [pc, #372]	@ (8004894 <HAL_DMA_Init+0x1d0>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d02c      	beq.n	800477c <HAL_DMA_Init+0xb8>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a5c      	ldr	r2, [pc, #368]	@ (8004898 <HAL_DMA_Init+0x1d4>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d027      	beq.n	800477c <HAL_DMA_Init+0xb8>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a5a      	ldr	r2, [pc, #360]	@ (800489c <HAL_DMA_Init+0x1d8>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d022      	beq.n	800477c <HAL_DMA_Init+0xb8>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a59      	ldr	r2, [pc, #356]	@ (80048a0 <HAL_DMA_Init+0x1dc>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d01d      	beq.n	800477c <HAL_DMA_Init+0xb8>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a57      	ldr	r2, [pc, #348]	@ (80048a4 <HAL_DMA_Init+0x1e0>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d018      	beq.n	800477c <HAL_DMA_Init+0xb8>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a56      	ldr	r2, [pc, #344]	@ (80048a8 <HAL_DMA_Init+0x1e4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d013      	beq.n	800477c <HAL_DMA_Init+0xb8>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a54      	ldr	r2, [pc, #336]	@ (80048ac <HAL_DMA_Init+0x1e8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00e      	beq.n	800477c <HAL_DMA_Init+0xb8>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a53      	ldr	r2, [pc, #332]	@ (80048b0 <HAL_DMA_Init+0x1ec>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d009      	beq.n	800477c <HAL_DMA_Init+0xb8>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a51      	ldr	r2, [pc, #324]	@ (80048b4 <HAL_DMA_Init+0x1f0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d004      	beq.n	800477c <HAL_DMA_Init+0xb8>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a50      	ldr	r2, [pc, #320]	@ (80048b8 <HAL_DMA_Init+0x1f4>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d101      	bne.n	8004780 <HAL_DMA_Init+0xbc>
 800477c:	2301      	movs	r3, #1
 800477e:	e000      	b.n	8004782 <HAL_DMA_Init+0xbe>
 8004780:	2300      	movs	r3, #0
 8004782:	2b00      	cmp	r3, #0
 8004784:	f000 813c 	beq.w	8004a00 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a37      	ldr	r2, [pc, #220]	@ (800487c <HAL_DMA_Init+0x1b8>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d04a      	beq.n	8004838 <HAL_DMA_Init+0x174>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a36      	ldr	r2, [pc, #216]	@ (8004880 <HAL_DMA_Init+0x1bc>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d045      	beq.n	8004838 <HAL_DMA_Init+0x174>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a34      	ldr	r2, [pc, #208]	@ (8004884 <HAL_DMA_Init+0x1c0>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d040      	beq.n	8004838 <HAL_DMA_Init+0x174>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a33      	ldr	r2, [pc, #204]	@ (8004888 <HAL_DMA_Init+0x1c4>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d03b      	beq.n	8004838 <HAL_DMA_Init+0x174>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a31      	ldr	r2, [pc, #196]	@ (800488c <HAL_DMA_Init+0x1c8>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d036      	beq.n	8004838 <HAL_DMA_Init+0x174>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a30      	ldr	r2, [pc, #192]	@ (8004890 <HAL_DMA_Init+0x1cc>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d031      	beq.n	8004838 <HAL_DMA_Init+0x174>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a2e      	ldr	r2, [pc, #184]	@ (8004894 <HAL_DMA_Init+0x1d0>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d02c      	beq.n	8004838 <HAL_DMA_Init+0x174>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a2d      	ldr	r2, [pc, #180]	@ (8004898 <HAL_DMA_Init+0x1d4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d027      	beq.n	8004838 <HAL_DMA_Init+0x174>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a2b      	ldr	r2, [pc, #172]	@ (800489c <HAL_DMA_Init+0x1d8>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d022      	beq.n	8004838 <HAL_DMA_Init+0x174>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a2a      	ldr	r2, [pc, #168]	@ (80048a0 <HAL_DMA_Init+0x1dc>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d01d      	beq.n	8004838 <HAL_DMA_Init+0x174>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a28      	ldr	r2, [pc, #160]	@ (80048a4 <HAL_DMA_Init+0x1e0>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d018      	beq.n	8004838 <HAL_DMA_Init+0x174>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a27      	ldr	r2, [pc, #156]	@ (80048a8 <HAL_DMA_Init+0x1e4>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d013      	beq.n	8004838 <HAL_DMA_Init+0x174>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a25      	ldr	r2, [pc, #148]	@ (80048ac <HAL_DMA_Init+0x1e8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d00e      	beq.n	8004838 <HAL_DMA_Init+0x174>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a24      	ldr	r2, [pc, #144]	@ (80048b0 <HAL_DMA_Init+0x1ec>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d009      	beq.n	8004838 <HAL_DMA_Init+0x174>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a22      	ldr	r2, [pc, #136]	@ (80048b4 <HAL_DMA_Init+0x1f0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d004      	beq.n	8004838 <HAL_DMA_Init+0x174>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a21      	ldr	r2, [pc, #132]	@ (80048b8 <HAL_DMA_Init+0x1f4>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d108      	bne.n	800484a <HAL_DMA_Init+0x186>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 0201 	bic.w	r2, r2, #1
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	e007      	b.n	800485a <HAL_DMA_Init+0x196>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0201 	bic.w	r2, r2, #1
 8004858:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800485a:	e02f      	b.n	80048bc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800485c:	f7ff fd9e 	bl	800439c <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b05      	cmp	r3, #5
 8004868:	d928      	bls.n	80048bc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2220      	movs	r2, #32
 800486e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2203      	movs	r2, #3
 8004874:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e2ad      	b.n	8004dd8 <HAL_DMA_Init+0x714>
 800487c:	40020010 	.word	0x40020010
 8004880:	40020028 	.word	0x40020028
 8004884:	40020040 	.word	0x40020040
 8004888:	40020058 	.word	0x40020058
 800488c:	40020070 	.word	0x40020070
 8004890:	40020088 	.word	0x40020088
 8004894:	400200a0 	.word	0x400200a0
 8004898:	400200b8 	.word	0x400200b8
 800489c:	40020410 	.word	0x40020410
 80048a0:	40020428 	.word	0x40020428
 80048a4:	40020440 	.word	0x40020440
 80048a8:	40020458 	.word	0x40020458
 80048ac:	40020470 	.word	0x40020470
 80048b0:	40020488 	.word	0x40020488
 80048b4:	400204a0 	.word	0x400204a0
 80048b8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1c8      	bne.n	800485c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	4b73      	ldr	r3, [pc, #460]	@ (8004aa4 <HAL_DMA_Init+0x3e0>)
 80048d6:	4013      	ands	r3, r2
 80048d8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80048e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048fa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	4313      	orrs	r3, r2
 8004906:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800490c:	2b04      	cmp	r3, #4
 800490e:	d107      	bne.n	8004920 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004918:	4313      	orrs	r3, r2
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	4313      	orrs	r3, r2
 800491e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	2b28      	cmp	r3, #40	@ 0x28
 8004926:	d903      	bls.n	8004930 <HAL_DMA_Init+0x26c>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	2b2e      	cmp	r3, #46	@ 0x2e
 800492e:	d91f      	bls.n	8004970 <HAL_DMA_Init+0x2ac>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	2b3e      	cmp	r3, #62	@ 0x3e
 8004936:	d903      	bls.n	8004940 <HAL_DMA_Init+0x27c>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	2b42      	cmp	r3, #66	@ 0x42
 800493e:	d917      	bls.n	8004970 <HAL_DMA_Init+0x2ac>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	2b46      	cmp	r3, #70	@ 0x46
 8004946:	d903      	bls.n	8004950 <HAL_DMA_Init+0x28c>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	2b48      	cmp	r3, #72	@ 0x48
 800494e:	d90f      	bls.n	8004970 <HAL_DMA_Init+0x2ac>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	2b4e      	cmp	r3, #78	@ 0x4e
 8004956:	d903      	bls.n	8004960 <HAL_DMA_Init+0x29c>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	2b52      	cmp	r3, #82	@ 0x52
 800495e:	d907      	bls.n	8004970 <HAL_DMA_Init+0x2ac>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	2b73      	cmp	r3, #115	@ 0x73
 8004966:	d905      	bls.n	8004974 <HAL_DMA_Init+0x2b0>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	2b77      	cmp	r3, #119	@ 0x77
 800496e:	d801      	bhi.n	8004974 <HAL_DMA_Init+0x2b0>
 8004970:	2301      	movs	r3, #1
 8004972:	e000      	b.n	8004976 <HAL_DMA_Init+0x2b2>
 8004974:	2300      	movs	r3, #0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004980:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f023 0307 	bic.w	r3, r3, #7
 8004998:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a8:	2b04      	cmp	r3, #4
 80049aa:	d117      	bne.n	80049dc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00e      	beq.n	80049dc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f002 fbd4 	bl	800716c <DMA_CheckFifoParam>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d008      	beq.n	80049dc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2240      	movs	r2, #64	@ 0x40
 80049ce:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e1fd      	b.n	8004dd8 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f002 fb0f 	bl	8007008 <DMA_CalcBaseAndBitshift>
 80049ea:	4603      	mov	r3, r0
 80049ec:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f2:	f003 031f 	and.w	r3, r3, #31
 80049f6:	223f      	movs	r2, #63	@ 0x3f
 80049f8:	409a      	lsls	r2, r3
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	609a      	str	r2, [r3, #8]
 80049fe:	e0fd      	b.n	8004bfc <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a28      	ldr	r2, [pc, #160]	@ (8004aa8 <HAL_DMA_Init+0x3e4>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d04a      	beq.n	8004aa0 <HAL_DMA_Init+0x3dc>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a27      	ldr	r2, [pc, #156]	@ (8004aac <HAL_DMA_Init+0x3e8>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d045      	beq.n	8004aa0 <HAL_DMA_Init+0x3dc>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a25      	ldr	r2, [pc, #148]	@ (8004ab0 <HAL_DMA_Init+0x3ec>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d040      	beq.n	8004aa0 <HAL_DMA_Init+0x3dc>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a24      	ldr	r2, [pc, #144]	@ (8004ab4 <HAL_DMA_Init+0x3f0>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d03b      	beq.n	8004aa0 <HAL_DMA_Init+0x3dc>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a22      	ldr	r2, [pc, #136]	@ (8004ab8 <HAL_DMA_Init+0x3f4>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d036      	beq.n	8004aa0 <HAL_DMA_Init+0x3dc>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a21      	ldr	r2, [pc, #132]	@ (8004abc <HAL_DMA_Init+0x3f8>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d031      	beq.n	8004aa0 <HAL_DMA_Init+0x3dc>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a1f      	ldr	r2, [pc, #124]	@ (8004ac0 <HAL_DMA_Init+0x3fc>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d02c      	beq.n	8004aa0 <HAL_DMA_Init+0x3dc>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ac4 <HAL_DMA_Init+0x400>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d027      	beq.n	8004aa0 <HAL_DMA_Init+0x3dc>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a1c      	ldr	r2, [pc, #112]	@ (8004ac8 <HAL_DMA_Init+0x404>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d022      	beq.n	8004aa0 <HAL_DMA_Init+0x3dc>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a1b      	ldr	r2, [pc, #108]	@ (8004acc <HAL_DMA_Init+0x408>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d01d      	beq.n	8004aa0 <HAL_DMA_Init+0x3dc>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a19      	ldr	r2, [pc, #100]	@ (8004ad0 <HAL_DMA_Init+0x40c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d018      	beq.n	8004aa0 <HAL_DMA_Init+0x3dc>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a18      	ldr	r2, [pc, #96]	@ (8004ad4 <HAL_DMA_Init+0x410>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d013      	beq.n	8004aa0 <HAL_DMA_Init+0x3dc>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a16      	ldr	r2, [pc, #88]	@ (8004ad8 <HAL_DMA_Init+0x414>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d00e      	beq.n	8004aa0 <HAL_DMA_Init+0x3dc>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a15      	ldr	r2, [pc, #84]	@ (8004adc <HAL_DMA_Init+0x418>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d009      	beq.n	8004aa0 <HAL_DMA_Init+0x3dc>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a13      	ldr	r2, [pc, #76]	@ (8004ae0 <HAL_DMA_Init+0x41c>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d004      	beq.n	8004aa0 <HAL_DMA_Init+0x3dc>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a12      	ldr	r2, [pc, #72]	@ (8004ae4 <HAL_DMA_Init+0x420>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d123      	bne.n	8004ae8 <HAL_DMA_Init+0x424>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e022      	b.n	8004aea <HAL_DMA_Init+0x426>
 8004aa4:	fe10803f 	.word	0xfe10803f
 8004aa8:	48022c08 	.word	0x48022c08
 8004aac:	48022c1c 	.word	0x48022c1c
 8004ab0:	48022c30 	.word	0x48022c30
 8004ab4:	48022c44 	.word	0x48022c44
 8004ab8:	48022c58 	.word	0x48022c58
 8004abc:	48022c6c 	.word	0x48022c6c
 8004ac0:	48022c80 	.word	0x48022c80
 8004ac4:	48022c94 	.word	0x48022c94
 8004ac8:	58025408 	.word	0x58025408
 8004acc:	5802541c 	.word	0x5802541c
 8004ad0:	58025430 	.word	0x58025430
 8004ad4:	58025444 	.word	0x58025444
 8004ad8:	58025458 	.word	0x58025458
 8004adc:	5802546c 	.word	0x5802546c
 8004ae0:	58025480 	.word	0x58025480
 8004ae4:	58025494 	.word	0x58025494
 8004ae8:	2300      	movs	r3, #0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d07d      	beq.n	8004bea <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a7f      	ldr	r2, [pc, #508]	@ (8004cf0 <HAL_DMA_Init+0x62c>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d021      	beq.n	8004b3c <HAL_DMA_Init+0x478>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a7d      	ldr	r2, [pc, #500]	@ (8004cf4 <HAL_DMA_Init+0x630>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d01c      	beq.n	8004b3c <HAL_DMA_Init+0x478>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a7c      	ldr	r2, [pc, #496]	@ (8004cf8 <HAL_DMA_Init+0x634>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d017      	beq.n	8004b3c <HAL_DMA_Init+0x478>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a7a      	ldr	r2, [pc, #488]	@ (8004cfc <HAL_DMA_Init+0x638>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d012      	beq.n	8004b3c <HAL_DMA_Init+0x478>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a79      	ldr	r2, [pc, #484]	@ (8004d00 <HAL_DMA_Init+0x63c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d00d      	beq.n	8004b3c <HAL_DMA_Init+0x478>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a77      	ldr	r2, [pc, #476]	@ (8004d04 <HAL_DMA_Init+0x640>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d008      	beq.n	8004b3c <HAL_DMA_Init+0x478>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a76      	ldr	r2, [pc, #472]	@ (8004d08 <HAL_DMA_Init+0x644>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d003      	beq.n	8004b3c <HAL_DMA_Init+0x478>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a74      	ldr	r2, [pc, #464]	@ (8004d0c <HAL_DMA_Init+0x648>)
 8004b3a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	4b6e      	ldr	r3, [pc, #440]	@ (8004d10 <HAL_DMA_Init+0x64c>)
 8004b58:	4013      	ands	r3, r2
 8004b5a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	2b40      	cmp	r3, #64	@ 0x40
 8004b62:	d008      	beq.n	8004b76 <HAL_DMA_Init+0x4b2>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	2b80      	cmp	r3, #128	@ 0x80
 8004b6a:	d102      	bne.n	8004b72 <HAL_DMA_Init+0x4ae>
 8004b6c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004b70:	e002      	b.n	8004b78 <HAL_DMA_Init+0x4b4>
 8004b72:	2300      	movs	r3, #0
 8004b74:	e000      	b.n	8004b78 <HAL_DMA_Init+0x4b4>
 8004b76:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	68d2      	ldr	r2, [r2, #12]
 8004b7c:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b7e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004b86:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004b8e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004b96:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	69db      	ldr	r3, [r3, #28]
 8004b9c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004b9e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004ba6:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	4b55      	ldr	r3, [pc, #340]	@ (8004d14 <HAL_DMA_Init+0x650>)
 8004bbe:	4413      	add	r3, r2
 8004bc0:	4a55      	ldr	r2, [pc, #340]	@ (8004d18 <HAL_DMA_Init+0x654>)
 8004bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc6:	091b      	lsrs	r3, r3, #4
 8004bc8:	009a      	lsls	r2, r3, #2
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f002 fa1a 	bl	8007008 <DMA_CalcBaseAndBitshift>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bdc:	f003 031f 	and.w	r3, r3, #31
 8004be0:	2201      	movs	r2, #1
 8004be2:	409a      	lsls	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	605a      	str	r2, [r3, #4]
 8004be8:	e008      	b.n	8004bfc <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2240      	movs	r2, #64	@ 0x40
 8004bee:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2203      	movs	r2, #3
 8004bf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e0ed      	b.n	8004dd8 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a46      	ldr	r2, [pc, #280]	@ (8004d1c <HAL_DMA_Init+0x658>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d072      	beq.n	8004cec <HAL_DMA_Init+0x628>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a45      	ldr	r2, [pc, #276]	@ (8004d20 <HAL_DMA_Init+0x65c>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d06d      	beq.n	8004cec <HAL_DMA_Init+0x628>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a43      	ldr	r2, [pc, #268]	@ (8004d24 <HAL_DMA_Init+0x660>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d068      	beq.n	8004cec <HAL_DMA_Init+0x628>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a42      	ldr	r2, [pc, #264]	@ (8004d28 <HAL_DMA_Init+0x664>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d063      	beq.n	8004cec <HAL_DMA_Init+0x628>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a40      	ldr	r2, [pc, #256]	@ (8004d2c <HAL_DMA_Init+0x668>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d05e      	beq.n	8004cec <HAL_DMA_Init+0x628>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a3f      	ldr	r2, [pc, #252]	@ (8004d30 <HAL_DMA_Init+0x66c>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d059      	beq.n	8004cec <HAL_DMA_Init+0x628>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a3d      	ldr	r2, [pc, #244]	@ (8004d34 <HAL_DMA_Init+0x670>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d054      	beq.n	8004cec <HAL_DMA_Init+0x628>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a3c      	ldr	r2, [pc, #240]	@ (8004d38 <HAL_DMA_Init+0x674>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d04f      	beq.n	8004cec <HAL_DMA_Init+0x628>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a3a      	ldr	r2, [pc, #232]	@ (8004d3c <HAL_DMA_Init+0x678>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d04a      	beq.n	8004cec <HAL_DMA_Init+0x628>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a39      	ldr	r2, [pc, #228]	@ (8004d40 <HAL_DMA_Init+0x67c>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d045      	beq.n	8004cec <HAL_DMA_Init+0x628>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a37      	ldr	r2, [pc, #220]	@ (8004d44 <HAL_DMA_Init+0x680>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d040      	beq.n	8004cec <HAL_DMA_Init+0x628>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a36      	ldr	r2, [pc, #216]	@ (8004d48 <HAL_DMA_Init+0x684>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d03b      	beq.n	8004cec <HAL_DMA_Init+0x628>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a34      	ldr	r2, [pc, #208]	@ (8004d4c <HAL_DMA_Init+0x688>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d036      	beq.n	8004cec <HAL_DMA_Init+0x628>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a33      	ldr	r2, [pc, #204]	@ (8004d50 <HAL_DMA_Init+0x68c>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d031      	beq.n	8004cec <HAL_DMA_Init+0x628>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a31      	ldr	r2, [pc, #196]	@ (8004d54 <HAL_DMA_Init+0x690>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d02c      	beq.n	8004cec <HAL_DMA_Init+0x628>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a30      	ldr	r2, [pc, #192]	@ (8004d58 <HAL_DMA_Init+0x694>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d027      	beq.n	8004cec <HAL_DMA_Init+0x628>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a13      	ldr	r2, [pc, #76]	@ (8004cf0 <HAL_DMA_Init+0x62c>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d022      	beq.n	8004cec <HAL_DMA_Init+0x628>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a12      	ldr	r2, [pc, #72]	@ (8004cf4 <HAL_DMA_Init+0x630>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d01d      	beq.n	8004cec <HAL_DMA_Init+0x628>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a10      	ldr	r2, [pc, #64]	@ (8004cf8 <HAL_DMA_Init+0x634>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d018      	beq.n	8004cec <HAL_DMA_Init+0x628>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a0f      	ldr	r2, [pc, #60]	@ (8004cfc <HAL_DMA_Init+0x638>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d013      	beq.n	8004cec <HAL_DMA_Init+0x628>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8004d00 <HAL_DMA_Init+0x63c>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d00e      	beq.n	8004cec <HAL_DMA_Init+0x628>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a0c      	ldr	r2, [pc, #48]	@ (8004d04 <HAL_DMA_Init+0x640>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d009      	beq.n	8004cec <HAL_DMA_Init+0x628>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8004d08 <HAL_DMA_Init+0x644>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d004      	beq.n	8004cec <HAL_DMA_Init+0x628>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a09      	ldr	r2, [pc, #36]	@ (8004d0c <HAL_DMA_Init+0x648>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d137      	bne.n	8004d5c <HAL_DMA_Init+0x698>
 8004cec:	2301      	movs	r3, #1
 8004cee:	e036      	b.n	8004d5e <HAL_DMA_Init+0x69a>
 8004cf0:	58025408 	.word	0x58025408
 8004cf4:	5802541c 	.word	0x5802541c
 8004cf8:	58025430 	.word	0x58025430
 8004cfc:	58025444 	.word	0x58025444
 8004d00:	58025458 	.word	0x58025458
 8004d04:	5802546c 	.word	0x5802546c
 8004d08:	58025480 	.word	0x58025480
 8004d0c:	58025494 	.word	0x58025494
 8004d10:	fffe000f 	.word	0xfffe000f
 8004d14:	a7fdabf8 	.word	0xa7fdabf8
 8004d18:	cccccccd 	.word	0xcccccccd
 8004d1c:	40020010 	.word	0x40020010
 8004d20:	40020028 	.word	0x40020028
 8004d24:	40020040 	.word	0x40020040
 8004d28:	40020058 	.word	0x40020058
 8004d2c:	40020070 	.word	0x40020070
 8004d30:	40020088 	.word	0x40020088
 8004d34:	400200a0 	.word	0x400200a0
 8004d38:	400200b8 	.word	0x400200b8
 8004d3c:	40020410 	.word	0x40020410
 8004d40:	40020428 	.word	0x40020428
 8004d44:	40020440 	.word	0x40020440
 8004d48:	40020458 	.word	0x40020458
 8004d4c:	40020470 	.word	0x40020470
 8004d50:	40020488 	.word	0x40020488
 8004d54:	400204a0 	.word	0x400204a0
 8004d58:	400204b8 	.word	0x400204b8
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d032      	beq.n	8004dc8 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f002 fa7e 	bl	8007264 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	2b80      	cmp	r3, #128	@ 0x80
 8004d6e:	d102      	bne.n	8004d76 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d7e:	b2d2      	uxtb	r2, r2
 8004d80:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004d8a:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d010      	beq.n	8004db6 <HAL_DMA_Init+0x6f2>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	d80c      	bhi.n	8004db6 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f002 fafb 	bl	8007398 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004da6:	2200      	movs	r2, #0
 8004da8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004db2:	605a      	str	r2, [r3, #4]
 8004db4:	e008      	b.n	8004dc8 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3718      	adds	r7, #24
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
 8004dec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d101      	bne.n	8004dfc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e226      	b.n	800524a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d101      	bne.n	8004e0a <HAL_DMA_Start_IT+0x2a>
 8004e06:	2302      	movs	r3, #2
 8004e08:	e21f      	b.n	800524a <HAL_DMA_Start_IT+0x46a>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	f040 820a 	bne.w	8005234 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2202      	movs	r2, #2
 8004e24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a68      	ldr	r2, [pc, #416]	@ (8004fd4 <HAL_DMA_Start_IT+0x1f4>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d04a      	beq.n	8004ece <HAL_DMA_Start_IT+0xee>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a66      	ldr	r2, [pc, #408]	@ (8004fd8 <HAL_DMA_Start_IT+0x1f8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d045      	beq.n	8004ece <HAL_DMA_Start_IT+0xee>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a65      	ldr	r2, [pc, #404]	@ (8004fdc <HAL_DMA_Start_IT+0x1fc>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d040      	beq.n	8004ece <HAL_DMA_Start_IT+0xee>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a63      	ldr	r2, [pc, #396]	@ (8004fe0 <HAL_DMA_Start_IT+0x200>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d03b      	beq.n	8004ece <HAL_DMA_Start_IT+0xee>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a62      	ldr	r2, [pc, #392]	@ (8004fe4 <HAL_DMA_Start_IT+0x204>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d036      	beq.n	8004ece <HAL_DMA_Start_IT+0xee>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a60      	ldr	r2, [pc, #384]	@ (8004fe8 <HAL_DMA_Start_IT+0x208>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d031      	beq.n	8004ece <HAL_DMA_Start_IT+0xee>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a5f      	ldr	r2, [pc, #380]	@ (8004fec <HAL_DMA_Start_IT+0x20c>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d02c      	beq.n	8004ece <HAL_DMA_Start_IT+0xee>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a5d      	ldr	r2, [pc, #372]	@ (8004ff0 <HAL_DMA_Start_IT+0x210>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d027      	beq.n	8004ece <HAL_DMA_Start_IT+0xee>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a5c      	ldr	r2, [pc, #368]	@ (8004ff4 <HAL_DMA_Start_IT+0x214>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d022      	beq.n	8004ece <HAL_DMA_Start_IT+0xee>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a5a      	ldr	r2, [pc, #360]	@ (8004ff8 <HAL_DMA_Start_IT+0x218>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d01d      	beq.n	8004ece <HAL_DMA_Start_IT+0xee>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a59      	ldr	r2, [pc, #356]	@ (8004ffc <HAL_DMA_Start_IT+0x21c>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d018      	beq.n	8004ece <HAL_DMA_Start_IT+0xee>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a57      	ldr	r2, [pc, #348]	@ (8005000 <HAL_DMA_Start_IT+0x220>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d013      	beq.n	8004ece <HAL_DMA_Start_IT+0xee>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a56      	ldr	r2, [pc, #344]	@ (8005004 <HAL_DMA_Start_IT+0x224>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d00e      	beq.n	8004ece <HAL_DMA_Start_IT+0xee>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a54      	ldr	r2, [pc, #336]	@ (8005008 <HAL_DMA_Start_IT+0x228>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d009      	beq.n	8004ece <HAL_DMA_Start_IT+0xee>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a53      	ldr	r2, [pc, #332]	@ (800500c <HAL_DMA_Start_IT+0x22c>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d004      	beq.n	8004ece <HAL_DMA_Start_IT+0xee>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a51      	ldr	r2, [pc, #324]	@ (8005010 <HAL_DMA_Start_IT+0x230>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d108      	bne.n	8004ee0 <HAL_DMA_Start_IT+0x100>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 0201 	bic.w	r2, r2, #1
 8004edc:	601a      	str	r2, [r3, #0]
 8004ede:	e007      	b.n	8004ef0 <HAL_DMA_Start_IT+0x110>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 0201 	bic.w	r2, r2, #1
 8004eee:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	68b9      	ldr	r1, [r7, #8]
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f001 fea2 	bl	8006c40 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a34      	ldr	r2, [pc, #208]	@ (8004fd4 <HAL_DMA_Start_IT+0x1f4>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d04a      	beq.n	8004f9c <HAL_DMA_Start_IT+0x1bc>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a33      	ldr	r2, [pc, #204]	@ (8004fd8 <HAL_DMA_Start_IT+0x1f8>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d045      	beq.n	8004f9c <HAL_DMA_Start_IT+0x1bc>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a31      	ldr	r2, [pc, #196]	@ (8004fdc <HAL_DMA_Start_IT+0x1fc>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d040      	beq.n	8004f9c <HAL_DMA_Start_IT+0x1bc>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a30      	ldr	r2, [pc, #192]	@ (8004fe0 <HAL_DMA_Start_IT+0x200>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d03b      	beq.n	8004f9c <HAL_DMA_Start_IT+0x1bc>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a2e      	ldr	r2, [pc, #184]	@ (8004fe4 <HAL_DMA_Start_IT+0x204>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d036      	beq.n	8004f9c <HAL_DMA_Start_IT+0x1bc>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a2d      	ldr	r2, [pc, #180]	@ (8004fe8 <HAL_DMA_Start_IT+0x208>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d031      	beq.n	8004f9c <HAL_DMA_Start_IT+0x1bc>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a2b      	ldr	r2, [pc, #172]	@ (8004fec <HAL_DMA_Start_IT+0x20c>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d02c      	beq.n	8004f9c <HAL_DMA_Start_IT+0x1bc>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a2a      	ldr	r2, [pc, #168]	@ (8004ff0 <HAL_DMA_Start_IT+0x210>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d027      	beq.n	8004f9c <HAL_DMA_Start_IT+0x1bc>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a28      	ldr	r2, [pc, #160]	@ (8004ff4 <HAL_DMA_Start_IT+0x214>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d022      	beq.n	8004f9c <HAL_DMA_Start_IT+0x1bc>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a27      	ldr	r2, [pc, #156]	@ (8004ff8 <HAL_DMA_Start_IT+0x218>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d01d      	beq.n	8004f9c <HAL_DMA_Start_IT+0x1bc>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a25      	ldr	r2, [pc, #148]	@ (8004ffc <HAL_DMA_Start_IT+0x21c>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d018      	beq.n	8004f9c <HAL_DMA_Start_IT+0x1bc>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a24      	ldr	r2, [pc, #144]	@ (8005000 <HAL_DMA_Start_IT+0x220>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d013      	beq.n	8004f9c <HAL_DMA_Start_IT+0x1bc>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a22      	ldr	r2, [pc, #136]	@ (8005004 <HAL_DMA_Start_IT+0x224>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d00e      	beq.n	8004f9c <HAL_DMA_Start_IT+0x1bc>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a21      	ldr	r2, [pc, #132]	@ (8005008 <HAL_DMA_Start_IT+0x228>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d009      	beq.n	8004f9c <HAL_DMA_Start_IT+0x1bc>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a1f      	ldr	r2, [pc, #124]	@ (800500c <HAL_DMA_Start_IT+0x22c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d004      	beq.n	8004f9c <HAL_DMA_Start_IT+0x1bc>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a1e      	ldr	r2, [pc, #120]	@ (8005010 <HAL_DMA_Start_IT+0x230>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d101      	bne.n	8004fa0 <HAL_DMA_Start_IT+0x1c0>
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e000      	b.n	8004fa2 <HAL_DMA_Start_IT+0x1c2>
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d036      	beq.n	8005014 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f023 021e 	bic.w	r2, r3, #30
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f042 0216 	orr.w	r2, r2, #22
 8004fb8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d03e      	beq.n	8005040 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f042 0208 	orr.w	r2, r2, #8
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	e035      	b.n	8005040 <HAL_DMA_Start_IT+0x260>
 8004fd4:	40020010 	.word	0x40020010
 8004fd8:	40020028 	.word	0x40020028
 8004fdc:	40020040 	.word	0x40020040
 8004fe0:	40020058 	.word	0x40020058
 8004fe4:	40020070 	.word	0x40020070
 8004fe8:	40020088 	.word	0x40020088
 8004fec:	400200a0 	.word	0x400200a0
 8004ff0:	400200b8 	.word	0x400200b8
 8004ff4:	40020410 	.word	0x40020410
 8004ff8:	40020428 	.word	0x40020428
 8004ffc:	40020440 	.word	0x40020440
 8005000:	40020458 	.word	0x40020458
 8005004:	40020470 	.word	0x40020470
 8005008:	40020488 	.word	0x40020488
 800500c:	400204a0 	.word	0x400204a0
 8005010:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f023 020e 	bic.w	r2, r3, #14
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f042 020a 	orr.w	r2, r2, #10
 8005026:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502c:	2b00      	cmp	r3, #0
 800502e:	d007      	beq.n	8005040 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f042 0204 	orr.w	r2, r2, #4
 800503e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a83      	ldr	r2, [pc, #524]	@ (8005254 <HAL_DMA_Start_IT+0x474>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d072      	beq.n	8005130 <HAL_DMA_Start_IT+0x350>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a82      	ldr	r2, [pc, #520]	@ (8005258 <HAL_DMA_Start_IT+0x478>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d06d      	beq.n	8005130 <HAL_DMA_Start_IT+0x350>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a80      	ldr	r2, [pc, #512]	@ (800525c <HAL_DMA_Start_IT+0x47c>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d068      	beq.n	8005130 <HAL_DMA_Start_IT+0x350>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a7f      	ldr	r2, [pc, #508]	@ (8005260 <HAL_DMA_Start_IT+0x480>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d063      	beq.n	8005130 <HAL_DMA_Start_IT+0x350>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a7d      	ldr	r2, [pc, #500]	@ (8005264 <HAL_DMA_Start_IT+0x484>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d05e      	beq.n	8005130 <HAL_DMA_Start_IT+0x350>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a7c      	ldr	r2, [pc, #496]	@ (8005268 <HAL_DMA_Start_IT+0x488>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d059      	beq.n	8005130 <HAL_DMA_Start_IT+0x350>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a7a      	ldr	r2, [pc, #488]	@ (800526c <HAL_DMA_Start_IT+0x48c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d054      	beq.n	8005130 <HAL_DMA_Start_IT+0x350>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a79      	ldr	r2, [pc, #484]	@ (8005270 <HAL_DMA_Start_IT+0x490>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d04f      	beq.n	8005130 <HAL_DMA_Start_IT+0x350>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a77      	ldr	r2, [pc, #476]	@ (8005274 <HAL_DMA_Start_IT+0x494>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d04a      	beq.n	8005130 <HAL_DMA_Start_IT+0x350>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a76      	ldr	r2, [pc, #472]	@ (8005278 <HAL_DMA_Start_IT+0x498>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d045      	beq.n	8005130 <HAL_DMA_Start_IT+0x350>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a74      	ldr	r2, [pc, #464]	@ (800527c <HAL_DMA_Start_IT+0x49c>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d040      	beq.n	8005130 <HAL_DMA_Start_IT+0x350>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a73      	ldr	r2, [pc, #460]	@ (8005280 <HAL_DMA_Start_IT+0x4a0>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d03b      	beq.n	8005130 <HAL_DMA_Start_IT+0x350>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a71      	ldr	r2, [pc, #452]	@ (8005284 <HAL_DMA_Start_IT+0x4a4>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d036      	beq.n	8005130 <HAL_DMA_Start_IT+0x350>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a70      	ldr	r2, [pc, #448]	@ (8005288 <HAL_DMA_Start_IT+0x4a8>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d031      	beq.n	8005130 <HAL_DMA_Start_IT+0x350>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a6e      	ldr	r2, [pc, #440]	@ (800528c <HAL_DMA_Start_IT+0x4ac>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d02c      	beq.n	8005130 <HAL_DMA_Start_IT+0x350>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a6d      	ldr	r2, [pc, #436]	@ (8005290 <HAL_DMA_Start_IT+0x4b0>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d027      	beq.n	8005130 <HAL_DMA_Start_IT+0x350>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a6b      	ldr	r2, [pc, #428]	@ (8005294 <HAL_DMA_Start_IT+0x4b4>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d022      	beq.n	8005130 <HAL_DMA_Start_IT+0x350>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a6a      	ldr	r2, [pc, #424]	@ (8005298 <HAL_DMA_Start_IT+0x4b8>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d01d      	beq.n	8005130 <HAL_DMA_Start_IT+0x350>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a68      	ldr	r2, [pc, #416]	@ (800529c <HAL_DMA_Start_IT+0x4bc>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d018      	beq.n	8005130 <HAL_DMA_Start_IT+0x350>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a67      	ldr	r2, [pc, #412]	@ (80052a0 <HAL_DMA_Start_IT+0x4c0>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d013      	beq.n	8005130 <HAL_DMA_Start_IT+0x350>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a65      	ldr	r2, [pc, #404]	@ (80052a4 <HAL_DMA_Start_IT+0x4c4>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d00e      	beq.n	8005130 <HAL_DMA_Start_IT+0x350>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a64      	ldr	r2, [pc, #400]	@ (80052a8 <HAL_DMA_Start_IT+0x4c8>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d009      	beq.n	8005130 <HAL_DMA_Start_IT+0x350>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a62      	ldr	r2, [pc, #392]	@ (80052ac <HAL_DMA_Start_IT+0x4cc>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d004      	beq.n	8005130 <HAL_DMA_Start_IT+0x350>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a61      	ldr	r2, [pc, #388]	@ (80052b0 <HAL_DMA_Start_IT+0x4d0>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d101      	bne.n	8005134 <HAL_DMA_Start_IT+0x354>
 8005130:	2301      	movs	r3, #1
 8005132:	e000      	b.n	8005136 <HAL_DMA_Start_IT+0x356>
 8005134:	2300      	movs	r3, #0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d01a      	beq.n	8005170 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d007      	beq.n	8005158 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005152:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005156:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800515c:	2b00      	cmp	r3, #0
 800515e:	d007      	beq.n	8005170 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800516a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800516e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a37      	ldr	r2, [pc, #220]	@ (8005254 <HAL_DMA_Start_IT+0x474>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d04a      	beq.n	8005210 <HAL_DMA_Start_IT+0x430>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a36      	ldr	r2, [pc, #216]	@ (8005258 <HAL_DMA_Start_IT+0x478>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d045      	beq.n	8005210 <HAL_DMA_Start_IT+0x430>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a34      	ldr	r2, [pc, #208]	@ (800525c <HAL_DMA_Start_IT+0x47c>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d040      	beq.n	8005210 <HAL_DMA_Start_IT+0x430>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a33      	ldr	r2, [pc, #204]	@ (8005260 <HAL_DMA_Start_IT+0x480>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d03b      	beq.n	8005210 <HAL_DMA_Start_IT+0x430>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a31      	ldr	r2, [pc, #196]	@ (8005264 <HAL_DMA_Start_IT+0x484>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d036      	beq.n	8005210 <HAL_DMA_Start_IT+0x430>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a30      	ldr	r2, [pc, #192]	@ (8005268 <HAL_DMA_Start_IT+0x488>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d031      	beq.n	8005210 <HAL_DMA_Start_IT+0x430>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a2e      	ldr	r2, [pc, #184]	@ (800526c <HAL_DMA_Start_IT+0x48c>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d02c      	beq.n	8005210 <HAL_DMA_Start_IT+0x430>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a2d      	ldr	r2, [pc, #180]	@ (8005270 <HAL_DMA_Start_IT+0x490>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d027      	beq.n	8005210 <HAL_DMA_Start_IT+0x430>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a2b      	ldr	r2, [pc, #172]	@ (8005274 <HAL_DMA_Start_IT+0x494>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d022      	beq.n	8005210 <HAL_DMA_Start_IT+0x430>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a2a      	ldr	r2, [pc, #168]	@ (8005278 <HAL_DMA_Start_IT+0x498>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d01d      	beq.n	8005210 <HAL_DMA_Start_IT+0x430>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a28      	ldr	r2, [pc, #160]	@ (800527c <HAL_DMA_Start_IT+0x49c>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d018      	beq.n	8005210 <HAL_DMA_Start_IT+0x430>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a27      	ldr	r2, [pc, #156]	@ (8005280 <HAL_DMA_Start_IT+0x4a0>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d013      	beq.n	8005210 <HAL_DMA_Start_IT+0x430>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a25      	ldr	r2, [pc, #148]	@ (8005284 <HAL_DMA_Start_IT+0x4a4>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d00e      	beq.n	8005210 <HAL_DMA_Start_IT+0x430>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a24      	ldr	r2, [pc, #144]	@ (8005288 <HAL_DMA_Start_IT+0x4a8>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d009      	beq.n	8005210 <HAL_DMA_Start_IT+0x430>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a22      	ldr	r2, [pc, #136]	@ (800528c <HAL_DMA_Start_IT+0x4ac>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d004      	beq.n	8005210 <HAL_DMA_Start_IT+0x430>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a21      	ldr	r2, [pc, #132]	@ (8005290 <HAL_DMA_Start_IT+0x4b0>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d108      	bne.n	8005222 <HAL_DMA_Start_IT+0x442>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0201 	orr.w	r2, r2, #1
 800521e:	601a      	str	r2, [r3, #0]
 8005220:	e012      	b.n	8005248 <HAL_DMA_Start_IT+0x468>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f042 0201 	orr.w	r2, r2, #1
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	e009      	b.n	8005248 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800523a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005248:	7dfb      	ldrb	r3, [r7, #23]
}
 800524a:	4618      	mov	r0, r3
 800524c:	3718      	adds	r7, #24
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	40020010 	.word	0x40020010
 8005258:	40020028 	.word	0x40020028
 800525c:	40020040 	.word	0x40020040
 8005260:	40020058 	.word	0x40020058
 8005264:	40020070 	.word	0x40020070
 8005268:	40020088 	.word	0x40020088
 800526c:	400200a0 	.word	0x400200a0
 8005270:	400200b8 	.word	0x400200b8
 8005274:	40020410 	.word	0x40020410
 8005278:	40020428 	.word	0x40020428
 800527c:	40020440 	.word	0x40020440
 8005280:	40020458 	.word	0x40020458
 8005284:	40020470 	.word	0x40020470
 8005288:	40020488 	.word	0x40020488
 800528c:	400204a0 	.word	0x400204a0
 8005290:	400204b8 	.word	0x400204b8
 8005294:	58025408 	.word	0x58025408
 8005298:	5802541c 	.word	0x5802541c
 800529c:	58025430 	.word	0x58025430
 80052a0:	58025444 	.word	0x58025444
 80052a4:	58025458 	.word	0x58025458
 80052a8:	5802546c 	.word	0x5802546c
 80052ac:	58025480 	.word	0x58025480
 80052b0:	58025494 	.word	0x58025494

080052b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80052bc:	f7ff f86e 	bl	800439c <HAL_GetTick>
 80052c0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e2dc      	b.n	8005886 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d008      	beq.n	80052ea <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2280      	movs	r2, #128	@ 0x80
 80052dc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e2cd      	b.n	8005886 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a76      	ldr	r2, [pc, #472]	@ (80054c8 <HAL_DMA_Abort+0x214>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d04a      	beq.n	800538a <HAL_DMA_Abort+0xd6>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a74      	ldr	r2, [pc, #464]	@ (80054cc <HAL_DMA_Abort+0x218>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d045      	beq.n	800538a <HAL_DMA_Abort+0xd6>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a73      	ldr	r2, [pc, #460]	@ (80054d0 <HAL_DMA_Abort+0x21c>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d040      	beq.n	800538a <HAL_DMA_Abort+0xd6>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a71      	ldr	r2, [pc, #452]	@ (80054d4 <HAL_DMA_Abort+0x220>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d03b      	beq.n	800538a <HAL_DMA_Abort+0xd6>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a70      	ldr	r2, [pc, #448]	@ (80054d8 <HAL_DMA_Abort+0x224>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d036      	beq.n	800538a <HAL_DMA_Abort+0xd6>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a6e      	ldr	r2, [pc, #440]	@ (80054dc <HAL_DMA_Abort+0x228>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d031      	beq.n	800538a <HAL_DMA_Abort+0xd6>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a6d      	ldr	r2, [pc, #436]	@ (80054e0 <HAL_DMA_Abort+0x22c>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d02c      	beq.n	800538a <HAL_DMA_Abort+0xd6>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a6b      	ldr	r2, [pc, #428]	@ (80054e4 <HAL_DMA_Abort+0x230>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d027      	beq.n	800538a <HAL_DMA_Abort+0xd6>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a6a      	ldr	r2, [pc, #424]	@ (80054e8 <HAL_DMA_Abort+0x234>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d022      	beq.n	800538a <HAL_DMA_Abort+0xd6>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a68      	ldr	r2, [pc, #416]	@ (80054ec <HAL_DMA_Abort+0x238>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d01d      	beq.n	800538a <HAL_DMA_Abort+0xd6>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a67      	ldr	r2, [pc, #412]	@ (80054f0 <HAL_DMA_Abort+0x23c>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d018      	beq.n	800538a <HAL_DMA_Abort+0xd6>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a65      	ldr	r2, [pc, #404]	@ (80054f4 <HAL_DMA_Abort+0x240>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d013      	beq.n	800538a <HAL_DMA_Abort+0xd6>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a64      	ldr	r2, [pc, #400]	@ (80054f8 <HAL_DMA_Abort+0x244>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d00e      	beq.n	800538a <HAL_DMA_Abort+0xd6>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a62      	ldr	r2, [pc, #392]	@ (80054fc <HAL_DMA_Abort+0x248>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d009      	beq.n	800538a <HAL_DMA_Abort+0xd6>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a61      	ldr	r2, [pc, #388]	@ (8005500 <HAL_DMA_Abort+0x24c>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d004      	beq.n	800538a <HAL_DMA_Abort+0xd6>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a5f      	ldr	r2, [pc, #380]	@ (8005504 <HAL_DMA_Abort+0x250>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d101      	bne.n	800538e <HAL_DMA_Abort+0xda>
 800538a:	2301      	movs	r3, #1
 800538c:	e000      	b.n	8005390 <HAL_DMA_Abort+0xdc>
 800538e:	2300      	movs	r3, #0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d013      	beq.n	80053bc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f022 021e 	bic.w	r2, r2, #30
 80053a2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	695a      	ldr	r2, [r3, #20]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80053b2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	617b      	str	r3, [r7, #20]
 80053ba:	e00a      	b.n	80053d2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 020e 	bic.w	r2, r2, #14
 80053ca:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a3c      	ldr	r2, [pc, #240]	@ (80054c8 <HAL_DMA_Abort+0x214>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d072      	beq.n	80054c2 <HAL_DMA_Abort+0x20e>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a3a      	ldr	r2, [pc, #232]	@ (80054cc <HAL_DMA_Abort+0x218>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d06d      	beq.n	80054c2 <HAL_DMA_Abort+0x20e>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a39      	ldr	r2, [pc, #228]	@ (80054d0 <HAL_DMA_Abort+0x21c>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d068      	beq.n	80054c2 <HAL_DMA_Abort+0x20e>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a37      	ldr	r2, [pc, #220]	@ (80054d4 <HAL_DMA_Abort+0x220>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d063      	beq.n	80054c2 <HAL_DMA_Abort+0x20e>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a36      	ldr	r2, [pc, #216]	@ (80054d8 <HAL_DMA_Abort+0x224>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d05e      	beq.n	80054c2 <HAL_DMA_Abort+0x20e>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a34      	ldr	r2, [pc, #208]	@ (80054dc <HAL_DMA_Abort+0x228>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d059      	beq.n	80054c2 <HAL_DMA_Abort+0x20e>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a33      	ldr	r2, [pc, #204]	@ (80054e0 <HAL_DMA_Abort+0x22c>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d054      	beq.n	80054c2 <HAL_DMA_Abort+0x20e>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a31      	ldr	r2, [pc, #196]	@ (80054e4 <HAL_DMA_Abort+0x230>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d04f      	beq.n	80054c2 <HAL_DMA_Abort+0x20e>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a30      	ldr	r2, [pc, #192]	@ (80054e8 <HAL_DMA_Abort+0x234>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d04a      	beq.n	80054c2 <HAL_DMA_Abort+0x20e>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a2e      	ldr	r2, [pc, #184]	@ (80054ec <HAL_DMA_Abort+0x238>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d045      	beq.n	80054c2 <HAL_DMA_Abort+0x20e>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a2d      	ldr	r2, [pc, #180]	@ (80054f0 <HAL_DMA_Abort+0x23c>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d040      	beq.n	80054c2 <HAL_DMA_Abort+0x20e>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a2b      	ldr	r2, [pc, #172]	@ (80054f4 <HAL_DMA_Abort+0x240>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d03b      	beq.n	80054c2 <HAL_DMA_Abort+0x20e>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a2a      	ldr	r2, [pc, #168]	@ (80054f8 <HAL_DMA_Abort+0x244>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d036      	beq.n	80054c2 <HAL_DMA_Abort+0x20e>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a28      	ldr	r2, [pc, #160]	@ (80054fc <HAL_DMA_Abort+0x248>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d031      	beq.n	80054c2 <HAL_DMA_Abort+0x20e>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a27      	ldr	r2, [pc, #156]	@ (8005500 <HAL_DMA_Abort+0x24c>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d02c      	beq.n	80054c2 <HAL_DMA_Abort+0x20e>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a25      	ldr	r2, [pc, #148]	@ (8005504 <HAL_DMA_Abort+0x250>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d027      	beq.n	80054c2 <HAL_DMA_Abort+0x20e>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a24      	ldr	r2, [pc, #144]	@ (8005508 <HAL_DMA_Abort+0x254>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d022      	beq.n	80054c2 <HAL_DMA_Abort+0x20e>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a22      	ldr	r2, [pc, #136]	@ (800550c <HAL_DMA_Abort+0x258>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d01d      	beq.n	80054c2 <HAL_DMA_Abort+0x20e>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a21      	ldr	r2, [pc, #132]	@ (8005510 <HAL_DMA_Abort+0x25c>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d018      	beq.n	80054c2 <HAL_DMA_Abort+0x20e>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a1f      	ldr	r2, [pc, #124]	@ (8005514 <HAL_DMA_Abort+0x260>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d013      	beq.n	80054c2 <HAL_DMA_Abort+0x20e>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a1e      	ldr	r2, [pc, #120]	@ (8005518 <HAL_DMA_Abort+0x264>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d00e      	beq.n	80054c2 <HAL_DMA_Abort+0x20e>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a1c      	ldr	r2, [pc, #112]	@ (800551c <HAL_DMA_Abort+0x268>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d009      	beq.n	80054c2 <HAL_DMA_Abort+0x20e>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a1b      	ldr	r2, [pc, #108]	@ (8005520 <HAL_DMA_Abort+0x26c>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d004      	beq.n	80054c2 <HAL_DMA_Abort+0x20e>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a19      	ldr	r2, [pc, #100]	@ (8005524 <HAL_DMA_Abort+0x270>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d132      	bne.n	8005528 <HAL_DMA_Abort+0x274>
 80054c2:	2301      	movs	r3, #1
 80054c4:	e031      	b.n	800552a <HAL_DMA_Abort+0x276>
 80054c6:	bf00      	nop
 80054c8:	40020010 	.word	0x40020010
 80054cc:	40020028 	.word	0x40020028
 80054d0:	40020040 	.word	0x40020040
 80054d4:	40020058 	.word	0x40020058
 80054d8:	40020070 	.word	0x40020070
 80054dc:	40020088 	.word	0x40020088
 80054e0:	400200a0 	.word	0x400200a0
 80054e4:	400200b8 	.word	0x400200b8
 80054e8:	40020410 	.word	0x40020410
 80054ec:	40020428 	.word	0x40020428
 80054f0:	40020440 	.word	0x40020440
 80054f4:	40020458 	.word	0x40020458
 80054f8:	40020470 	.word	0x40020470
 80054fc:	40020488 	.word	0x40020488
 8005500:	400204a0 	.word	0x400204a0
 8005504:	400204b8 	.word	0x400204b8
 8005508:	58025408 	.word	0x58025408
 800550c:	5802541c 	.word	0x5802541c
 8005510:	58025430 	.word	0x58025430
 8005514:	58025444 	.word	0x58025444
 8005518:	58025458 	.word	0x58025458
 800551c:	5802546c 	.word	0x5802546c
 8005520:	58025480 	.word	0x58025480
 8005524:	58025494 	.word	0x58025494
 8005528:	2300      	movs	r3, #0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d007      	beq.n	800553e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005538:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800553c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a6d      	ldr	r2, [pc, #436]	@ (80056f8 <HAL_DMA_Abort+0x444>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d04a      	beq.n	80055de <HAL_DMA_Abort+0x32a>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a6b      	ldr	r2, [pc, #428]	@ (80056fc <HAL_DMA_Abort+0x448>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d045      	beq.n	80055de <HAL_DMA_Abort+0x32a>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a6a      	ldr	r2, [pc, #424]	@ (8005700 <HAL_DMA_Abort+0x44c>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d040      	beq.n	80055de <HAL_DMA_Abort+0x32a>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a68      	ldr	r2, [pc, #416]	@ (8005704 <HAL_DMA_Abort+0x450>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d03b      	beq.n	80055de <HAL_DMA_Abort+0x32a>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a67      	ldr	r2, [pc, #412]	@ (8005708 <HAL_DMA_Abort+0x454>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d036      	beq.n	80055de <HAL_DMA_Abort+0x32a>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a65      	ldr	r2, [pc, #404]	@ (800570c <HAL_DMA_Abort+0x458>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d031      	beq.n	80055de <HAL_DMA_Abort+0x32a>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a64      	ldr	r2, [pc, #400]	@ (8005710 <HAL_DMA_Abort+0x45c>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d02c      	beq.n	80055de <HAL_DMA_Abort+0x32a>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a62      	ldr	r2, [pc, #392]	@ (8005714 <HAL_DMA_Abort+0x460>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d027      	beq.n	80055de <HAL_DMA_Abort+0x32a>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a61      	ldr	r2, [pc, #388]	@ (8005718 <HAL_DMA_Abort+0x464>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d022      	beq.n	80055de <HAL_DMA_Abort+0x32a>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a5f      	ldr	r2, [pc, #380]	@ (800571c <HAL_DMA_Abort+0x468>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d01d      	beq.n	80055de <HAL_DMA_Abort+0x32a>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a5e      	ldr	r2, [pc, #376]	@ (8005720 <HAL_DMA_Abort+0x46c>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d018      	beq.n	80055de <HAL_DMA_Abort+0x32a>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a5c      	ldr	r2, [pc, #368]	@ (8005724 <HAL_DMA_Abort+0x470>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d013      	beq.n	80055de <HAL_DMA_Abort+0x32a>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a5b      	ldr	r2, [pc, #364]	@ (8005728 <HAL_DMA_Abort+0x474>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d00e      	beq.n	80055de <HAL_DMA_Abort+0x32a>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a59      	ldr	r2, [pc, #356]	@ (800572c <HAL_DMA_Abort+0x478>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d009      	beq.n	80055de <HAL_DMA_Abort+0x32a>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a58      	ldr	r2, [pc, #352]	@ (8005730 <HAL_DMA_Abort+0x47c>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d004      	beq.n	80055de <HAL_DMA_Abort+0x32a>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a56      	ldr	r2, [pc, #344]	@ (8005734 <HAL_DMA_Abort+0x480>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d108      	bne.n	80055f0 <HAL_DMA_Abort+0x33c>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 0201 	bic.w	r2, r2, #1
 80055ec:	601a      	str	r2, [r3, #0]
 80055ee:	e007      	b.n	8005600 <HAL_DMA_Abort+0x34c>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f022 0201 	bic.w	r2, r2, #1
 80055fe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005600:	e013      	b.n	800562a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005602:	f7fe fecb 	bl	800439c <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b05      	cmp	r3, #5
 800560e:	d90c      	bls.n	800562a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2220      	movs	r2, #32
 8005614:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2203      	movs	r2, #3
 800561a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e12d      	b.n	8005886 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1e5      	bne.n	8005602 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a2f      	ldr	r2, [pc, #188]	@ (80056f8 <HAL_DMA_Abort+0x444>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d04a      	beq.n	80056d6 <HAL_DMA_Abort+0x422>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a2d      	ldr	r2, [pc, #180]	@ (80056fc <HAL_DMA_Abort+0x448>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d045      	beq.n	80056d6 <HAL_DMA_Abort+0x422>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a2c      	ldr	r2, [pc, #176]	@ (8005700 <HAL_DMA_Abort+0x44c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d040      	beq.n	80056d6 <HAL_DMA_Abort+0x422>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a2a      	ldr	r2, [pc, #168]	@ (8005704 <HAL_DMA_Abort+0x450>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d03b      	beq.n	80056d6 <HAL_DMA_Abort+0x422>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a29      	ldr	r2, [pc, #164]	@ (8005708 <HAL_DMA_Abort+0x454>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d036      	beq.n	80056d6 <HAL_DMA_Abort+0x422>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a27      	ldr	r2, [pc, #156]	@ (800570c <HAL_DMA_Abort+0x458>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d031      	beq.n	80056d6 <HAL_DMA_Abort+0x422>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a26      	ldr	r2, [pc, #152]	@ (8005710 <HAL_DMA_Abort+0x45c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d02c      	beq.n	80056d6 <HAL_DMA_Abort+0x422>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a24      	ldr	r2, [pc, #144]	@ (8005714 <HAL_DMA_Abort+0x460>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d027      	beq.n	80056d6 <HAL_DMA_Abort+0x422>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a23      	ldr	r2, [pc, #140]	@ (8005718 <HAL_DMA_Abort+0x464>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d022      	beq.n	80056d6 <HAL_DMA_Abort+0x422>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a21      	ldr	r2, [pc, #132]	@ (800571c <HAL_DMA_Abort+0x468>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d01d      	beq.n	80056d6 <HAL_DMA_Abort+0x422>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a20      	ldr	r2, [pc, #128]	@ (8005720 <HAL_DMA_Abort+0x46c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d018      	beq.n	80056d6 <HAL_DMA_Abort+0x422>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a1e      	ldr	r2, [pc, #120]	@ (8005724 <HAL_DMA_Abort+0x470>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d013      	beq.n	80056d6 <HAL_DMA_Abort+0x422>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a1d      	ldr	r2, [pc, #116]	@ (8005728 <HAL_DMA_Abort+0x474>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d00e      	beq.n	80056d6 <HAL_DMA_Abort+0x422>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a1b      	ldr	r2, [pc, #108]	@ (800572c <HAL_DMA_Abort+0x478>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d009      	beq.n	80056d6 <HAL_DMA_Abort+0x422>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a1a      	ldr	r2, [pc, #104]	@ (8005730 <HAL_DMA_Abort+0x47c>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d004      	beq.n	80056d6 <HAL_DMA_Abort+0x422>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a18      	ldr	r2, [pc, #96]	@ (8005734 <HAL_DMA_Abort+0x480>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d101      	bne.n	80056da <HAL_DMA_Abort+0x426>
 80056d6:	2301      	movs	r3, #1
 80056d8:	e000      	b.n	80056dc <HAL_DMA_Abort+0x428>
 80056da:	2300      	movs	r3, #0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d02b      	beq.n	8005738 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056e4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056ea:	f003 031f 	and.w	r3, r3, #31
 80056ee:	223f      	movs	r2, #63	@ 0x3f
 80056f0:	409a      	lsls	r2, r3
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	609a      	str	r2, [r3, #8]
 80056f6:	e02a      	b.n	800574e <HAL_DMA_Abort+0x49a>
 80056f8:	40020010 	.word	0x40020010
 80056fc:	40020028 	.word	0x40020028
 8005700:	40020040 	.word	0x40020040
 8005704:	40020058 	.word	0x40020058
 8005708:	40020070 	.word	0x40020070
 800570c:	40020088 	.word	0x40020088
 8005710:	400200a0 	.word	0x400200a0
 8005714:	400200b8 	.word	0x400200b8
 8005718:	40020410 	.word	0x40020410
 800571c:	40020428 	.word	0x40020428
 8005720:	40020440 	.word	0x40020440
 8005724:	40020458 	.word	0x40020458
 8005728:	40020470 	.word	0x40020470
 800572c:	40020488 	.word	0x40020488
 8005730:	400204a0 	.word	0x400204a0
 8005734:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800573c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005742:	f003 031f 	and.w	r3, r3, #31
 8005746:	2201      	movs	r2, #1
 8005748:	409a      	lsls	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a4f      	ldr	r2, [pc, #316]	@ (8005890 <HAL_DMA_Abort+0x5dc>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d072      	beq.n	800583e <HAL_DMA_Abort+0x58a>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a4d      	ldr	r2, [pc, #308]	@ (8005894 <HAL_DMA_Abort+0x5e0>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d06d      	beq.n	800583e <HAL_DMA_Abort+0x58a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a4c      	ldr	r2, [pc, #304]	@ (8005898 <HAL_DMA_Abort+0x5e4>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d068      	beq.n	800583e <HAL_DMA_Abort+0x58a>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a4a      	ldr	r2, [pc, #296]	@ (800589c <HAL_DMA_Abort+0x5e8>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d063      	beq.n	800583e <HAL_DMA_Abort+0x58a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a49      	ldr	r2, [pc, #292]	@ (80058a0 <HAL_DMA_Abort+0x5ec>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d05e      	beq.n	800583e <HAL_DMA_Abort+0x58a>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a47      	ldr	r2, [pc, #284]	@ (80058a4 <HAL_DMA_Abort+0x5f0>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d059      	beq.n	800583e <HAL_DMA_Abort+0x58a>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a46      	ldr	r2, [pc, #280]	@ (80058a8 <HAL_DMA_Abort+0x5f4>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d054      	beq.n	800583e <HAL_DMA_Abort+0x58a>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a44      	ldr	r2, [pc, #272]	@ (80058ac <HAL_DMA_Abort+0x5f8>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d04f      	beq.n	800583e <HAL_DMA_Abort+0x58a>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a43      	ldr	r2, [pc, #268]	@ (80058b0 <HAL_DMA_Abort+0x5fc>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d04a      	beq.n	800583e <HAL_DMA_Abort+0x58a>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a41      	ldr	r2, [pc, #260]	@ (80058b4 <HAL_DMA_Abort+0x600>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d045      	beq.n	800583e <HAL_DMA_Abort+0x58a>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a40      	ldr	r2, [pc, #256]	@ (80058b8 <HAL_DMA_Abort+0x604>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d040      	beq.n	800583e <HAL_DMA_Abort+0x58a>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a3e      	ldr	r2, [pc, #248]	@ (80058bc <HAL_DMA_Abort+0x608>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d03b      	beq.n	800583e <HAL_DMA_Abort+0x58a>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a3d      	ldr	r2, [pc, #244]	@ (80058c0 <HAL_DMA_Abort+0x60c>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d036      	beq.n	800583e <HAL_DMA_Abort+0x58a>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a3b      	ldr	r2, [pc, #236]	@ (80058c4 <HAL_DMA_Abort+0x610>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d031      	beq.n	800583e <HAL_DMA_Abort+0x58a>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a3a      	ldr	r2, [pc, #232]	@ (80058c8 <HAL_DMA_Abort+0x614>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d02c      	beq.n	800583e <HAL_DMA_Abort+0x58a>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a38      	ldr	r2, [pc, #224]	@ (80058cc <HAL_DMA_Abort+0x618>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d027      	beq.n	800583e <HAL_DMA_Abort+0x58a>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a37      	ldr	r2, [pc, #220]	@ (80058d0 <HAL_DMA_Abort+0x61c>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d022      	beq.n	800583e <HAL_DMA_Abort+0x58a>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a35      	ldr	r2, [pc, #212]	@ (80058d4 <HAL_DMA_Abort+0x620>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d01d      	beq.n	800583e <HAL_DMA_Abort+0x58a>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a34      	ldr	r2, [pc, #208]	@ (80058d8 <HAL_DMA_Abort+0x624>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d018      	beq.n	800583e <HAL_DMA_Abort+0x58a>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a32      	ldr	r2, [pc, #200]	@ (80058dc <HAL_DMA_Abort+0x628>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d013      	beq.n	800583e <HAL_DMA_Abort+0x58a>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a31      	ldr	r2, [pc, #196]	@ (80058e0 <HAL_DMA_Abort+0x62c>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d00e      	beq.n	800583e <HAL_DMA_Abort+0x58a>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a2f      	ldr	r2, [pc, #188]	@ (80058e4 <HAL_DMA_Abort+0x630>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d009      	beq.n	800583e <HAL_DMA_Abort+0x58a>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a2e      	ldr	r2, [pc, #184]	@ (80058e8 <HAL_DMA_Abort+0x634>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d004      	beq.n	800583e <HAL_DMA_Abort+0x58a>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a2c      	ldr	r2, [pc, #176]	@ (80058ec <HAL_DMA_Abort+0x638>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d101      	bne.n	8005842 <HAL_DMA_Abort+0x58e>
 800583e:	2301      	movs	r3, #1
 8005840:	e000      	b.n	8005844 <HAL_DMA_Abort+0x590>
 8005842:	2300      	movs	r3, #0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d015      	beq.n	8005874 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005850:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00c      	beq.n	8005874 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005864:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005868:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005872:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	40020010 	.word	0x40020010
 8005894:	40020028 	.word	0x40020028
 8005898:	40020040 	.word	0x40020040
 800589c:	40020058 	.word	0x40020058
 80058a0:	40020070 	.word	0x40020070
 80058a4:	40020088 	.word	0x40020088
 80058a8:	400200a0 	.word	0x400200a0
 80058ac:	400200b8 	.word	0x400200b8
 80058b0:	40020410 	.word	0x40020410
 80058b4:	40020428 	.word	0x40020428
 80058b8:	40020440 	.word	0x40020440
 80058bc:	40020458 	.word	0x40020458
 80058c0:	40020470 	.word	0x40020470
 80058c4:	40020488 	.word	0x40020488
 80058c8:	400204a0 	.word	0x400204a0
 80058cc:	400204b8 	.word	0x400204b8
 80058d0:	58025408 	.word	0x58025408
 80058d4:	5802541c 	.word	0x5802541c
 80058d8:	58025430 	.word	0x58025430
 80058dc:	58025444 	.word	0x58025444
 80058e0:	58025458 	.word	0x58025458
 80058e4:	5802546c 	.word	0x5802546c
 80058e8:	58025480 	.word	0x58025480
 80058ec:	58025494 	.word	0x58025494

080058f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d101      	bne.n	8005902 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e237      	b.n	8005d72 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b02      	cmp	r3, #2
 800590c:	d004      	beq.n	8005918 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2280      	movs	r2, #128	@ 0x80
 8005912:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e22c      	b.n	8005d72 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a5c      	ldr	r2, [pc, #368]	@ (8005a90 <HAL_DMA_Abort_IT+0x1a0>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d04a      	beq.n	80059b8 <HAL_DMA_Abort_IT+0xc8>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a5b      	ldr	r2, [pc, #364]	@ (8005a94 <HAL_DMA_Abort_IT+0x1a4>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d045      	beq.n	80059b8 <HAL_DMA_Abort_IT+0xc8>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a59      	ldr	r2, [pc, #356]	@ (8005a98 <HAL_DMA_Abort_IT+0x1a8>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d040      	beq.n	80059b8 <HAL_DMA_Abort_IT+0xc8>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a58      	ldr	r2, [pc, #352]	@ (8005a9c <HAL_DMA_Abort_IT+0x1ac>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d03b      	beq.n	80059b8 <HAL_DMA_Abort_IT+0xc8>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a56      	ldr	r2, [pc, #344]	@ (8005aa0 <HAL_DMA_Abort_IT+0x1b0>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d036      	beq.n	80059b8 <HAL_DMA_Abort_IT+0xc8>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a55      	ldr	r2, [pc, #340]	@ (8005aa4 <HAL_DMA_Abort_IT+0x1b4>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d031      	beq.n	80059b8 <HAL_DMA_Abort_IT+0xc8>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a53      	ldr	r2, [pc, #332]	@ (8005aa8 <HAL_DMA_Abort_IT+0x1b8>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d02c      	beq.n	80059b8 <HAL_DMA_Abort_IT+0xc8>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a52      	ldr	r2, [pc, #328]	@ (8005aac <HAL_DMA_Abort_IT+0x1bc>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d027      	beq.n	80059b8 <HAL_DMA_Abort_IT+0xc8>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a50      	ldr	r2, [pc, #320]	@ (8005ab0 <HAL_DMA_Abort_IT+0x1c0>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d022      	beq.n	80059b8 <HAL_DMA_Abort_IT+0xc8>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a4f      	ldr	r2, [pc, #316]	@ (8005ab4 <HAL_DMA_Abort_IT+0x1c4>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d01d      	beq.n	80059b8 <HAL_DMA_Abort_IT+0xc8>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a4d      	ldr	r2, [pc, #308]	@ (8005ab8 <HAL_DMA_Abort_IT+0x1c8>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d018      	beq.n	80059b8 <HAL_DMA_Abort_IT+0xc8>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a4c      	ldr	r2, [pc, #304]	@ (8005abc <HAL_DMA_Abort_IT+0x1cc>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d013      	beq.n	80059b8 <HAL_DMA_Abort_IT+0xc8>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a4a      	ldr	r2, [pc, #296]	@ (8005ac0 <HAL_DMA_Abort_IT+0x1d0>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d00e      	beq.n	80059b8 <HAL_DMA_Abort_IT+0xc8>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a49      	ldr	r2, [pc, #292]	@ (8005ac4 <HAL_DMA_Abort_IT+0x1d4>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d009      	beq.n	80059b8 <HAL_DMA_Abort_IT+0xc8>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a47      	ldr	r2, [pc, #284]	@ (8005ac8 <HAL_DMA_Abort_IT+0x1d8>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d004      	beq.n	80059b8 <HAL_DMA_Abort_IT+0xc8>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a46      	ldr	r2, [pc, #280]	@ (8005acc <HAL_DMA_Abort_IT+0x1dc>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d101      	bne.n	80059bc <HAL_DMA_Abort_IT+0xcc>
 80059b8:	2301      	movs	r3, #1
 80059ba:	e000      	b.n	80059be <HAL_DMA_Abort_IT+0xce>
 80059bc:	2300      	movs	r3, #0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f000 8086 	beq.w	8005ad0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2204      	movs	r2, #4
 80059c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a2f      	ldr	r2, [pc, #188]	@ (8005a90 <HAL_DMA_Abort_IT+0x1a0>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d04a      	beq.n	8005a6c <HAL_DMA_Abort_IT+0x17c>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a2e      	ldr	r2, [pc, #184]	@ (8005a94 <HAL_DMA_Abort_IT+0x1a4>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d045      	beq.n	8005a6c <HAL_DMA_Abort_IT+0x17c>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a2c      	ldr	r2, [pc, #176]	@ (8005a98 <HAL_DMA_Abort_IT+0x1a8>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d040      	beq.n	8005a6c <HAL_DMA_Abort_IT+0x17c>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a2b      	ldr	r2, [pc, #172]	@ (8005a9c <HAL_DMA_Abort_IT+0x1ac>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d03b      	beq.n	8005a6c <HAL_DMA_Abort_IT+0x17c>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a29      	ldr	r2, [pc, #164]	@ (8005aa0 <HAL_DMA_Abort_IT+0x1b0>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d036      	beq.n	8005a6c <HAL_DMA_Abort_IT+0x17c>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a28      	ldr	r2, [pc, #160]	@ (8005aa4 <HAL_DMA_Abort_IT+0x1b4>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d031      	beq.n	8005a6c <HAL_DMA_Abort_IT+0x17c>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a26      	ldr	r2, [pc, #152]	@ (8005aa8 <HAL_DMA_Abort_IT+0x1b8>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d02c      	beq.n	8005a6c <HAL_DMA_Abort_IT+0x17c>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a25      	ldr	r2, [pc, #148]	@ (8005aac <HAL_DMA_Abort_IT+0x1bc>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d027      	beq.n	8005a6c <HAL_DMA_Abort_IT+0x17c>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a23      	ldr	r2, [pc, #140]	@ (8005ab0 <HAL_DMA_Abort_IT+0x1c0>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d022      	beq.n	8005a6c <HAL_DMA_Abort_IT+0x17c>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a22      	ldr	r2, [pc, #136]	@ (8005ab4 <HAL_DMA_Abort_IT+0x1c4>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d01d      	beq.n	8005a6c <HAL_DMA_Abort_IT+0x17c>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a20      	ldr	r2, [pc, #128]	@ (8005ab8 <HAL_DMA_Abort_IT+0x1c8>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d018      	beq.n	8005a6c <HAL_DMA_Abort_IT+0x17c>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a1f      	ldr	r2, [pc, #124]	@ (8005abc <HAL_DMA_Abort_IT+0x1cc>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d013      	beq.n	8005a6c <HAL_DMA_Abort_IT+0x17c>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a1d      	ldr	r2, [pc, #116]	@ (8005ac0 <HAL_DMA_Abort_IT+0x1d0>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d00e      	beq.n	8005a6c <HAL_DMA_Abort_IT+0x17c>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a1c      	ldr	r2, [pc, #112]	@ (8005ac4 <HAL_DMA_Abort_IT+0x1d4>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d009      	beq.n	8005a6c <HAL_DMA_Abort_IT+0x17c>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a1a      	ldr	r2, [pc, #104]	@ (8005ac8 <HAL_DMA_Abort_IT+0x1d8>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d004      	beq.n	8005a6c <HAL_DMA_Abort_IT+0x17c>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a19      	ldr	r2, [pc, #100]	@ (8005acc <HAL_DMA_Abort_IT+0x1dc>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d108      	bne.n	8005a7e <HAL_DMA_Abort_IT+0x18e>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f022 0201 	bic.w	r2, r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]
 8005a7c:	e178      	b.n	8005d70 <HAL_DMA_Abort_IT+0x480>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 0201 	bic.w	r2, r2, #1
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	e16f      	b.n	8005d70 <HAL_DMA_Abort_IT+0x480>
 8005a90:	40020010 	.word	0x40020010
 8005a94:	40020028 	.word	0x40020028
 8005a98:	40020040 	.word	0x40020040
 8005a9c:	40020058 	.word	0x40020058
 8005aa0:	40020070 	.word	0x40020070
 8005aa4:	40020088 	.word	0x40020088
 8005aa8:	400200a0 	.word	0x400200a0
 8005aac:	400200b8 	.word	0x400200b8
 8005ab0:	40020410 	.word	0x40020410
 8005ab4:	40020428 	.word	0x40020428
 8005ab8:	40020440 	.word	0x40020440
 8005abc:	40020458 	.word	0x40020458
 8005ac0:	40020470 	.word	0x40020470
 8005ac4:	40020488 	.word	0x40020488
 8005ac8:	400204a0 	.word	0x400204a0
 8005acc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f022 020e 	bic.w	r2, r2, #14
 8005ade:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a6c      	ldr	r2, [pc, #432]	@ (8005c98 <HAL_DMA_Abort_IT+0x3a8>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d04a      	beq.n	8005b80 <HAL_DMA_Abort_IT+0x290>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a6b      	ldr	r2, [pc, #428]	@ (8005c9c <HAL_DMA_Abort_IT+0x3ac>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d045      	beq.n	8005b80 <HAL_DMA_Abort_IT+0x290>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a69      	ldr	r2, [pc, #420]	@ (8005ca0 <HAL_DMA_Abort_IT+0x3b0>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d040      	beq.n	8005b80 <HAL_DMA_Abort_IT+0x290>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a68      	ldr	r2, [pc, #416]	@ (8005ca4 <HAL_DMA_Abort_IT+0x3b4>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d03b      	beq.n	8005b80 <HAL_DMA_Abort_IT+0x290>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a66      	ldr	r2, [pc, #408]	@ (8005ca8 <HAL_DMA_Abort_IT+0x3b8>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d036      	beq.n	8005b80 <HAL_DMA_Abort_IT+0x290>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a65      	ldr	r2, [pc, #404]	@ (8005cac <HAL_DMA_Abort_IT+0x3bc>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d031      	beq.n	8005b80 <HAL_DMA_Abort_IT+0x290>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a63      	ldr	r2, [pc, #396]	@ (8005cb0 <HAL_DMA_Abort_IT+0x3c0>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d02c      	beq.n	8005b80 <HAL_DMA_Abort_IT+0x290>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a62      	ldr	r2, [pc, #392]	@ (8005cb4 <HAL_DMA_Abort_IT+0x3c4>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d027      	beq.n	8005b80 <HAL_DMA_Abort_IT+0x290>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a60      	ldr	r2, [pc, #384]	@ (8005cb8 <HAL_DMA_Abort_IT+0x3c8>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d022      	beq.n	8005b80 <HAL_DMA_Abort_IT+0x290>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a5f      	ldr	r2, [pc, #380]	@ (8005cbc <HAL_DMA_Abort_IT+0x3cc>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d01d      	beq.n	8005b80 <HAL_DMA_Abort_IT+0x290>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a5d      	ldr	r2, [pc, #372]	@ (8005cc0 <HAL_DMA_Abort_IT+0x3d0>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d018      	beq.n	8005b80 <HAL_DMA_Abort_IT+0x290>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a5c      	ldr	r2, [pc, #368]	@ (8005cc4 <HAL_DMA_Abort_IT+0x3d4>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d013      	beq.n	8005b80 <HAL_DMA_Abort_IT+0x290>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a5a      	ldr	r2, [pc, #360]	@ (8005cc8 <HAL_DMA_Abort_IT+0x3d8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d00e      	beq.n	8005b80 <HAL_DMA_Abort_IT+0x290>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a59      	ldr	r2, [pc, #356]	@ (8005ccc <HAL_DMA_Abort_IT+0x3dc>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d009      	beq.n	8005b80 <HAL_DMA_Abort_IT+0x290>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a57      	ldr	r2, [pc, #348]	@ (8005cd0 <HAL_DMA_Abort_IT+0x3e0>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d004      	beq.n	8005b80 <HAL_DMA_Abort_IT+0x290>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a56      	ldr	r2, [pc, #344]	@ (8005cd4 <HAL_DMA_Abort_IT+0x3e4>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d108      	bne.n	8005b92 <HAL_DMA_Abort_IT+0x2a2>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 0201 	bic.w	r2, r2, #1
 8005b8e:	601a      	str	r2, [r3, #0]
 8005b90:	e007      	b.n	8005ba2 <HAL_DMA_Abort_IT+0x2b2>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 0201 	bic.w	r2, r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a3c      	ldr	r2, [pc, #240]	@ (8005c98 <HAL_DMA_Abort_IT+0x3a8>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d072      	beq.n	8005c92 <HAL_DMA_Abort_IT+0x3a2>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a3a      	ldr	r2, [pc, #232]	@ (8005c9c <HAL_DMA_Abort_IT+0x3ac>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d06d      	beq.n	8005c92 <HAL_DMA_Abort_IT+0x3a2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a39      	ldr	r2, [pc, #228]	@ (8005ca0 <HAL_DMA_Abort_IT+0x3b0>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d068      	beq.n	8005c92 <HAL_DMA_Abort_IT+0x3a2>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a37      	ldr	r2, [pc, #220]	@ (8005ca4 <HAL_DMA_Abort_IT+0x3b4>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d063      	beq.n	8005c92 <HAL_DMA_Abort_IT+0x3a2>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a36      	ldr	r2, [pc, #216]	@ (8005ca8 <HAL_DMA_Abort_IT+0x3b8>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d05e      	beq.n	8005c92 <HAL_DMA_Abort_IT+0x3a2>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a34      	ldr	r2, [pc, #208]	@ (8005cac <HAL_DMA_Abort_IT+0x3bc>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d059      	beq.n	8005c92 <HAL_DMA_Abort_IT+0x3a2>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a33      	ldr	r2, [pc, #204]	@ (8005cb0 <HAL_DMA_Abort_IT+0x3c0>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d054      	beq.n	8005c92 <HAL_DMA_Abort_IT+0x3a2>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a31      	ldr	r2, [pc, #196]	@ (8005cb4 <HAL_DMA_Abort_IT+0x3c4>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d04f      	beq.n	8005c92 <HAL_DMA_Abort_IT+0x3a2>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a30      	ldr	r2, [pc, #192]	@ (8005cb8 <HAL_DMA_Abort_IT+0x3c8>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d04a      	beq.n	8005c92 <HAL_DMA_Abort_IT+0x3a2>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a2e      	ldr	r2, [pc, #184]	@ (8005cbc <HAL_DMA_Abort_IT+0x3cc>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d045      	beq.n	8005c92 <HAL_DMA_Abort_IT+0x3a2>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a2d      	ldr	r2, [pc, #180]	@ (8005cc0 <HAL_DMA_Abort_IT+0x3d0>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d040      	beq.n	8005c92 <HAL_DMA_Abort_IT+0x3a2>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a2b      	ldr	r2, [pc, #172]	@ (8005cc4 <HAL_DMA_Abort_IT+0x3d4>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d03b      	beq.n	8005c92 <HAL_DMA_Abort_IT+0x3a2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a2a      	ldr	r2, [pc, #168]	@ (8005cc8 <HAL_DMA_Abort_IT+0x3d8>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d036      	beq.n	8005c92 <HAL_DMA_Abort_IT+0x3a2>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a28      	ldr	r2, [pc, #160]	@ (8005ccc <HAL_DMA_Abort_IT+0x3dc>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d031      	beq.n	8005c92 <HAL_DMA_Abort_IT+0x3a2>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a27      	ldr	r2, [pc, #156]	@ (8005cd0 <HAL_DMA_Abort_IT+0x3e0>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d02c      	beq.n	8005c92 <HAL_DMA_Abort_IT+0x3a2>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a25      	ldr	r2, [pc, #148]	@ (8005cd4 <HAL_DMA_Abort_IT+0x3e4>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d027      	beq.n	8005c92 <HAL_DMA_Abort_IT+0x3a2>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a24      	ldr	r2, [pc, #144]	@ (8005cd8 <HAL_DMA_Abort_IT+0x3e8>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d022      	beq.n	8005c92 <HAL_DMA_Abort_IT+0x3a2>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a22      	ldr	r2, [pc, #136]	@ (8005cdc <HAL_DMA_Abort_IT+0x3ec>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d01d      	beq.n	8005c92 <HAL_DMA_Abort_IT+0x3a2>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a21      	ldr	r2, [pc, #132]	@ (8005ce0 <HAL_DMA_Abort_IT+0x3f0>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d018      	beq.n	8005c92 <HAL_DMA_Abort_IT+0x3a2>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a1f      	ldr	r2, [pc, #124]	@ (8005ce4 <HAL_DMA_Abort_IT+0x3f4>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d013      	beq.n	8005c92 <HAL_DMA_Abort_IT+0x3a2>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a1e      	ldr	r2, [pc, #120]	@ (8005ce8 <HAL_DMA_Abort_IT+0x3f8>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d00e      	beq.n	8005c92 <HAL_DMA_Abort_IT+0x3a2>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a1c      	ldr	r2, [pc, #112]	@ (8005cec <HAL_DMA_Abort_IT+0x3fc>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d009      	beq.n	8005c92 <HAL_DMA_Abort_IT+0x3a2>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a1b      	ldr	r2, [pc, #108]	@ (8005cf0 <HAL_DMA_Abort_IT+0x400>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d004      	beq.n	8005c92 <HAL_DMA_Abort_IT+0x3a2>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a19      	ldr	r2, [pc, #100]	@ (8005cf4 <HAL_DMA_Abort_IT+0x404>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d132      	bne.n	8005cf8 <HAL_DMA_Abort_IT+0x408>
 8005c92:	2301      	movs	r3, #1
 8005c94:	e031      	b.n	8005cfa <HAL_DMA_Abort_IT+0x40a>
 8005c96:	bf00      	nop
 8005c98:	40020010 	.word	0x40020010
 8005c9c:	40020028 	.word	0x40020028
 8005ca0:	40020040 	.word	0x40020040
 8005ca4:	40020058 	.word	0x40020058
 8005ca8:	40020070 	.word	0x40020070
 8005cac:	40020088 	.word	0x40020088
 8005cb0:	400200a0 	.word	0x400200a0
 8005cb4:	400200b8 	.word	0x400200b8
 8005cb8:	40020410 	.word	0x40020410
 8005cbc:	40020428 	.word	0x40020428
 8005cc0:	40020440 	.word	0x40020440
 8005cc4:	40020458 	.word	0x40020458
 8005cc8:	40020470 	.word	0x40020470
 8005ccc:	40020488 	.word	0x40020488
 8005cd0:	400204a0 	.word	0x400204a0
 8005cd4:	400204b8 	.word	0x400204b8
 8005cd8:	58025408 	.word	0x58025408
 8005cdc:	5802541c 	.word	0x5802541c
 8005ce0:	58025430 	.word	0x58025430
 8005ce4:	58025444 	.word	0x58025444
 8005ce8:	58025458 	.word	0x58025458
 8005cec:	5802546c 	.word	0x5802546c
 8005cf0:	58025480 	.word	0x58025480
 8005cf4:	58025494 	.word	0x58025494
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d028      	beq.n	8005d50 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d0c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d12:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d18:	f003 031f 	and.w	r3, r3, #31
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	409a      	lsls	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005d2c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00c      	beq.n	8005d50 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d44:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005d4e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d003      	beq.n	8005d70 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop

08005d7c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b08a      	sub	sp, #40	@ 0x28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005d84:	2300      	movs	r3, #0
 8005d86:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005d88:	4b67      	ldr	r3, [pc, #412]	@ (8005f28 <HAL_DMA_IRQHandler+0x1ac>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a67      	ldr	r2, [pc, #412]	@ (8005f2c <HAL_DMA_IRQHandler+0x1b0>)
 8005d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d92:	0a9b      	lsrs	r3, r3, #10
 8005d94:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d9a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005da0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005da2:	6a3b      	ldr	r3, [r7, #32]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a5f      	ldr	r2, [pc, #380]	@ (8005f30 <HAL_DMA_IRQHandler+0x1b4>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d04a      	beq.n	8005e4e <HAL_DMA_IRQHandler+0xd2>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a5d      	ldr	r2, [pc, #372]	@ (8005f34 <HAL_DMA_IRQHandler+0x1b8>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d045      	beq.n	8005e4e <HAL_DMA_IRQHandler+0xd2>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a5c      	ldr	r2, [pc, #368]	@ (8005f38 <HAL_DMA_IRQHandler+0x1bc>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d040      	beq.n	8005e4e <HAL_DMA_IRQHandler+0xd2>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a5a      	ldr	r2, [pc, #360]	@ (8005f3c <HAL_DMA_IRQHandler+0x1c0>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d03b      	beq.n	8005e4e <HAL_DMA_IRQHandler+0xd2>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a59      	ldr	r2, [pc, #356]	@ (8005f40 <HAL_DMA_IRQHandler+0x1c4>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d036      	beq.n	8005e4e <HAL_DMA_IRQHandler+0xd2>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a57      	ldr	r2, [pc, #348]	@ (8005f44 <HAL_DMA_IRQHandler+0x1c8>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d031      	beq.n	8005e4e <HAL_DMA_IRQHandler+0xd2>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a56      	ldr	r2, [pc, #344]	@ (8005f48 <HAL_DMA_IRQHandler+0x1cc>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d02c      	beq.n	8005e4e <HAL_DMA_IRQHandler+0xd2>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a54      	ldr	r2, [pc, #336]	@ (8005f4c <HAL_DMA_IRQHandler+0x1d0>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d027      	beq.n	8005e4e <HAL_DMA_IRQHandler+0xd2>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a53      	ldr	r2, [pc, #332]	@ (8005f50 <HAL_DMA_IRQHandler+0x1d4>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d022      	beq.n	8005e4e <HAL_DMA_IRQHandler+0xd2>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a51      	ldr	r2, [pc, #324]	@ (8005f54 <HAL_DMA_IRQHandler+0x1d8>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d01d      	beq.n	8005e4e <HAL_DMA_IRQHandler+0xd2>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a50      	ldr	r2, [pc, #320]	@ (8005f58 <HAL_DMA_IRQHandler+0x1dc>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d018      	beq.n	8005e4e <HAL_DMA_IRQHandler+0xd2>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a4e      	ldr	r2, [pc, #312]	@ (8005f5c <HAL_DMA_IRQHandler+0x1e0>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d013      	beq.n	8005e4e <HAL_DMA_IRQHandler+0xd2>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a4d      	ldr	r2, [pc, #308]	@ (8005f60 <HAL_DMA_IRQHandler+0x1e4>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d00e      	beq.n	8005e4e <HAL_DMA_IRQHandler+0xd2>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a4b      	ldr	r2, [pc, #300]	@ (8005f64 <HAL_DMA_IRQHandler+0x1e8>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d009      	beq.n	8005e4e <HAL_DMA_IRQHandler+0xd2>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a4a      	ldr	r2, [pc, #296]	@ (8005f68 <HAL_DMA_IRQHandler+0x1ec>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d004      	beq.n	8005e4e <HAL_DMA_IRQHandler+0xd2>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a48      	ldr	r2, [pc, #288]	@ (8005f6c <HAL_DMA_IRQHandler+0x1f0>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d101      	bne.n	8005e52 <HAL_DMA_IRQHandler+0xd6>
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e000      	b.n	8005e54 <HAL_DMA_IRQHandler+0xd8>
 8005e52:	2300      	movs	r3, #0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f000 842b 	beq.w	80066b0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e5e:	f003 031f 	and.w	r3, r3, #31
 8005e62:	2208      	movs	r2, #8
 8005e64:	409a      	lsls	r2, r3
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	4013      	ands	r3, r2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 80a2 	beq.w	8005fb4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a2e      	ldr	r2, [pc, #184]	@ (8005f30 <HAL_DMA_IRQHandler+0x1b4>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d04a      	beq.n	8005f10 <HAL_DMA_IRQHandler+0x194>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a2d      	ldr	r2, [pc, #180]	@ (8005f34 <HAL_DMA_IRQHandler+0x1b8>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d045      	beq.n	8005f10 <HAL_DMA_IRQHandler+0x194>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a2b      	ldr	r2, [pc, #172]	@ (8005f38 <HAL_DMA_IRQHandler+0x1bc>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d040      	beq.n	8005f10 <HAL_DMA_IRQHandler+0x194>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a2a      	ldr	r2, [pc, #168]	@ (8005f3c <HAL_DMA_IRQHandler+0x1c0>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d03b      	beq.n	8005f10 <HAL_DMA_IRQHandler+0x194>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a28      	ldr	r2, [pc, #160]	@ (8005f40 <HAL_DMA_IRQHandler+0x1c4>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d036      	beq.n	8005f10 <HAL_DMA_IRQHandler+0x194>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a27      	ldr	r2, [pc, #156]	@ (8005f44 <HAL_DMA_IRQHandler+0x1c8>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d031      	beq.n	8005f10 <HAL_DMA_IRQHandler+0x194>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a25      	ldr	r2, [pc, #148]	@ (8005f48 <HAL_DMA_IRQHandler+0x1cc>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d02c      	beq.n	8005f10 <HAL_DMA_IRQHandler+0x194>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a24      	ldr	r2, [pc, #144]	@ (8005f4c <HAL_DMA_IRQHandler+0x1d0>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d027      	beq.n	8005f10 <HAL_DMA_IRQHandler+0x194>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a22      	ldr	r2, [pc, #136]	@ (8005f50 <HAL_DMA_IRQHandler+0x1d4>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d022      	beq.n	8005f10 <HAL_DMA_IRQHandler+0x194>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a21      	ldr	r2, [pc, #132]	@ (8005f54 <HAL_DMA_IRQHandler+0x1d8>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d01d      	beq.n	8005f10 <HAL_DMA_IRQHandler+0x194>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a1f      	ldr	r2, [pc, #124]	@ (8005f58 <HAL_DMA_IRQHandler+0x1dc>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d018      	beq.n	8005f10 <HAL_DMA_IRQHandler+0x194>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a1e      	ldr	r2, [pc, #120]	@ (8005f5c <HAL_DMA_IRQHandler+0x1e0>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d013      	beq.n	8005f10 <HAL_DMA_IRQHandler+0x194>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a1c      	ldr	r2, [pc, #112]	@ (8005f60 <HAL_DMA_IRQHandler+0x1e4>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d00e      	beq.n	8005f10 <HAL_DMA_IRQHandler+0x194>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a1b      	ldr	r2, [pc, #108]	@ (8005f64 <HAL_DMA_IRQHandler+0x1e8>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d009      	beq.n	8005f10 <HAL_DMA_IRQHandler+0x194>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a19      	ldr	r2, [pc, #100]	@ (8005f68 <HAL_DMA_IRQHandler+0x1ec>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d004      	beq.n	8005f10 <HAL_DMA_IRQHandler+0x194>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a18      	ldr	r2, [pc, #96]	@ (8005f6c <HAL_DMA_IRQHandler+0x1f0>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d12f      	bne.n	8005f70 <HAL_DMA_IRQHandler+0x1f4>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0304 	and.w	r3, r3, #4
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	bf14      	ite	ne
 8005f1e:	2301      	movne	r3, #1
 8005f20:	2300      	moveq	r3, #0
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	e02e      	b.n	8005f84 <HAL_DMA_IRQHandler+0x208>
 8005f26:	bf00      	nop
 8005f28:	240000a4 	.word	0x240000a4
 8005f2c:	1b4e81b5 	.word	0x1b4e81b5
 8005f30:	40020010 	.word	0x40020010
 8005f34:	40020028 	.word	0x40020028
 8005f38:	40020040 	.word	0x40020040
 8005f3c:	40020058 	.word	0x40020058
 8005f40:	40020070 	.word	0x40020070
 8005f44:	40020088 	.word	0x40020088
 8005f48:	400200a0 	.word	0x400200a0
 8005f4c:	400200b8 	.word	0x400200b8
 8005f50:	40020410 	.word	0x40020410
 8005f54:	40020428 	.word	0x40020428
 8005f58:	40020440 	.word	0x40020440
 8005f5c:	40020458 	.word	0x40020458
 8005f60:	40020470 	.word	0x40020470
 8005f64:	40020488 	.word	0x40020488
 8005f68:	400204a0 	.word	0x400204a0
 8005f6c:	400204b8 	.word	0x400204b8
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0308 	and.w	r3, r3, #8
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	bf14      	ite	ne
 8005f7e:	2301      	movne	r3, #1
 8005f80:	2300      	moveq	r3, #0
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d015      	beq.n	8005fb4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0204 	bic.w	r2, r2, #4
 8005f96:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f9c:	f003 031f 	and.w	r3, r3, #31
 8005fa0:	2208      	movs	r2, #8
 8005fa2:	409a      	lsls	r2, r3
 8005fa4:	6a3b      	ldr	r3, [r7, #32]
 8005fa6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fac:	f043 0201 	orr.w	r2, r3, #1
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fb8:	f003 031f 	and.w	r3, r3, #31
 8005fbc:	69ba      	ldr	r2, [r7, #24]
 8005fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d06e      	beq.n	80060a8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a69      	ldr	r2, [pc, #420]	@ (8006174 <HAL_DMA_IRQHandler+0x3f8>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d04a      	beq.n	800606a <HAL_DMA_IRQHandler+0x2ee>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a67      	ldr	r2, [pc, #412]	@ (8006178 <HAL_DMA_IRQHandler+0x3fc>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d045      	beq.n	800606a <HAL_DMA_IRQHandler+0x2ee>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a66      	ldr	r2, [pc, #408]	@ (800617c <HAL_DMA_IRQHandler+0x400>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d040      	beq.n	800606a <HAL_DMA_IRQHandler+0x2ee>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a64      	ldr	r2, [pc, #400]	@ (8006180 <HAL_DMA_IRQHandler+0x404>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d03b      	beq.n	800606a <HAL_DMA_IRQHandler+0x2ee>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a63      	ldr	r2, [pc, #396]	@ (8006184 <HAL_DMA_IRQHandler+0x408>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d036      	beq.n	800606a <HAL_DMA_IRQHandler+0x2ee>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a61      	ldr	r2, [pc, #388]	@ (8006188 <HAL_DMA_IRQHandler+0x40c>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d031      	beq.n	800606a <HAL_DMA_IRQHandler+0x2ee>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a60      	ldr	r2, [pc, #384]	@ (800618c <HAL_DMA_IRQHandler+0x410>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d02c      	beq.n	800606a <HAL_DMA_IRQHandler+0x2ee>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a5e      	ldr	r2, [pc, #376]	@ (8006190 <HAL_DMA_IRQHandler+0x414>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d027      	beq.n	800606a <HAL_DMA_IRQHandler+0x2ee>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a5d      	ldr	r2, [pc, #372]	@ (8006194 <HAL_DMA_IRQHandler+0x418>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d022      	beq.n	800606a <HAL_DMA_IRQHandler+0x2ee>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a5b      	ldr	r2, [pc, #364]	@ (8006198 <HAL_DMA_IRQHandler+0x41c>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d01d      	beq.n	800606a <HAL_DMA_IRQHandler+0x2ee>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a5a      	ldr	r2, [pc, #360]	@ (800619c <HAL_DMA_IRQHandler+0x420>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d018      	beq.n	800606a <HAL_DMA_IRQHandler+0x2ee>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a58      	ldr	r2, [pc, #352]	@ (80061a0 <HAL_DMA_IRQHandler+0x424>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d013      	beq.n	800606a <HAL_DMA_IRQHandler+0x2ee>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a57      	ldr	r2, [pc, #348]	@ (80061a4 <HAL_DMA_IRQHandler+0x428>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d00e      	beq.n	800606a <HAL_DMA_IRQHandler+0x2ee>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a55      	ldr	r2, [pc, #340]	@ (80061a8 <HAL_DMA_IRQHandler+0x42c>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d009      	beq.n	800606a <HAL_DMA_IRQHandler+0x2ee>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a54      	ldr	r2, [pc, #336]	@ (80061ac <HAL_DMA_IRQHandler+0x430>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d004      	beq.n	800606a <HAL_DMA_IRQHandler+0x2ee>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a52      	ldr	r2, [pc, #328]	@ (80061b0 <HAL_DMA_IRQHandler+0x434>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d10a      	bne.n	8006080 <HAL_DMA_IRQHandler+0x304>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006074:	2b00      	cmp	r3, #0
 8006076:	bf14      	ite	ne
 8006078:	2301      	movne	r3, #1
 800607a:	2300      	moveq	r3, #0
 800607c:	b2db      	uxtb	r3, r3
 800607e:	e003      	b.n	8006088 <HAL_DMA_IRQHandler+0x30c>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2300      	movs	r3, #0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00d      	beq.n	80060a8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006090:	f003 031f 	and.w	r3, r3, #31
 8006094:	2201      	movs	r2, #1
 8006096:	409a      	lsls	r2, r3
 8006098:	6a3b      	ldr	r3, [r7, #32]
 800609a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060a0:	f043 0202 	orr.w	r2, r3, #2
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060ac:	f003 031f 	and.w	r3, r3, #31
 80060b0:	2204      	movs	r2, #4
 80060b2:	409a      	lsls	r2, r3
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	4013      	ands	r3, r2
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f000 808f 	beq.w	80061dc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a2c      	ldr	r2, [pc, #176]	@ (8006174 <HAL_DMA_IRQHandler+0x3f8>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d04a      	beq.n	800615e <HAL_DMA_IRQHandler+0x3e2>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a2a      	ldr	r2, [pc, #168]	@ (8006178 <HAL_DMA_IRQHandler+0x3fc>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d045      	beq.n	800615e <HAL_DMA_IRQHandler+0x3e2>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a29      	ldr	r2, [pc, #164]	@ (800617c <HAL_DMA_IRQHandler+0x400>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d040      	beq.n	800615e <HAL_DMA_IRQHandler+0x3e2>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a27      	ldr	r2, [pc, #156]	@ (8006180 <HAL_DMA_IRQHandler+0x404>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d03b      	beq.n	800615e <HAL_DMA_IRQHandler+0x3e2>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a26      	ldr	r2, [pc, #152]	@ (8006184 <HAL_DMA_IRQHandler+0x408>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d036      	beq.n	800615e <HAL_DMA_IRQHandler+0x3e2>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a24      	ldr	r2, [pc, #144]	@ (8006188 <HAL_DMA_IRQHandler+0x40c>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d031      	beq.n	800615e <HAL_DMA_IRQHandler+0x3e2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a23      	ldr	r2, [pc, #140]	@ (800618c <HAL_DMA_IRQHandler+0x410>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d02c      	beq.n	800615e <HAL_DMA_IRQHandler+0x3e2>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a21      	ldr	r2, [pc, #132]	@ (8006190 <HAL_DMA_IRQHandler+0x414>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d027      	beq.n	800615e <HAL_DMA_IRQHandler+0x3e2>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a20      	ldr	r2, [pc, #128]	@ (8006194 <HAL_DMA_IRQHandler+0x418>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d022      	beq.n	800615e <HAL_DMA_IRQHandler+0x3e2>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a1e      	ldr	r2, [pc, #120]	@ (8006198 <HAL_DMA_IRQHandler+0x41c>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d01d      	beq.n	800615e <HAL_DMA_IRQHandler+0x3e2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a1d      	ldr	r2, [pc, #116]	@ (800619c <HAL_DMA_IRQHandler+0x420>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d018      	beq.n	800615e <HAL_DMA_IRQHandler+0x3e2>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a1b      	ldr	r2, [pc, #108]	@ (80061a0 <HAL_DMA_IRQHandler+0x424>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d013      	beq.n	800615e <HAL_DMA_IRQHandler+0x3e2>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a1a      	ldr	r2, [pc, #104]	@ (80061a4 <HAL_DMA_IRQHandler+0x428>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d00e      	beq.n	800615e <HAL_DMA_IRQHandler+0x3e2>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a18      	ldr	r2, [pc, #96]	@ (80061a8 <HAL_DMA_IRQHandler+0x42c>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d009      	beq.n	800615e <HAL_DMA_IRQHandler+0x3e2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a17      	ldr	r2, [pc, #92]	@ (80061ac <HAL_DMA_IRQHandler+0x430>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d004      	beq.n	800615e <HAL_DMA_IRQHandler+0x3e2>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a15      	ldr	r2, [pc, #84]	@ (80061b0 <HAL_DMA_IRQHandler+0x434>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d12a      	bne.n	80061b4 <HAL_DMA_IRQHandler+0x438>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0302 	and.w	r3, r3, #2
 8006168:	2b00      	cmp	r3, #0
 800616a:	bf14      	ite	ne
 800616c:	2301      	movne	r3, #1
 800616e:	2300      	moveq	r3, #0
 8006170:	b2db      	uxtb	r3, r3
 8006172:	e023      	b.n	80061bc <HAL_DMA_IRQHandler+0x440>
 8006174:	40020010 	.word	0x40020010
 8006178:	40020028 	.word	0x40020028
 800617c:	40020040 	.word	0x40020040
 8006180:	40020058 	.word	0x40020058
 8006184:	40020070 	.word	0x40020070
 8006188:	40020088 	.word	0x40020088
 800618c:	400200a0 	.word	0x400200a0
 8006190:	400200b8 	.word	0x400200b8
 8006194:	40020410 	.word	0x40020410
 8006198:	40020428 	.word	0x40020428
 800619c:	40020440 	.word	0x40020440
 80061a0:	40020458 	.word	0x40020458
 80061a4:	40020470 	.word	0x40020470
 80061a8:	40020488 	.word	0x40020488
 80061ac:	400204a0 	.word	0x400204a0
 80061b0:	400204b8 	.word	0x400204b8
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2300      	movs	r3, #0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00d      	beq.n	80061dc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061c4:	f003 031f 	and.w	r3, r3, #31
 80061c8:	2204      	movs	r2, #4
 80061ca:	409a      	lsls	r2, r3
 80061cc:	6a3b      	ldr	r3, [r7, #32]
 80061ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061d4:	f043 0204 	orr.w	r2, r3, #4
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061e0:	f003 031f 	and.w	r3, r3, #31
 80061e4:	2210      	movs	r2, #16
 80061e6:	409a      	lsls	r2, r3
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	4013      	ands	r3, r2
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f000 80a6 	beq.w	800633e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a85      	ldr	r2, [pc, #532]	@ (800640c <HAL_DMA_IRQHandler+0x690>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d04a      	beq.n	8006292 <HAL_DMA_IRQHandler+0x516>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a83      	ldr	r2, [pc, #524]	@ (8006410 <HAL_DMA_IRQHandler+0x694>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d045      	beq.n	8006292 <HAL_DMA_IRQHandler+0x516>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a82      	ldr	r2, [pc, #520]	@ (8006414 <HAL_DMA_IRQHandler+0x698>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d040      	beq.n	8006292 <HAL_DMA_IRQHandler+0x516>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a80      	ldr	r2, [pc, #512]	@ (8006418 <HAL_DMA_IRQHandler+0x69c>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d03b      	beq.n	8006292 <HAL_DMA_IRQHandler+0x516>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a7f      	ldr	r2, [pc, #508]	@ (800641c <HAL_DMA_IRQHandler+0x6a0>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d036      	beq.n	8006292 <HAL_DMA_IRQHandler+0x516>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a7d      	ldr	r2, [pc, #500]	@ (8006420 <HAL_DMA_IRQHandler+0x6a4>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d031      	beq.n	8006292 <HAL_DMA_IRQHandler+0x516>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a7c      	ldr	r2, [pc, #496]	@ (8006424 <HAL_DMA_IRQHandler+0x6a8>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d02c      	beq.n	8006292 <HAL_DMA_IRQHandler+0x516>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a7a      	ldr	r2, [pc, #488]	@ (8006428 <HAL_DMA_IRQHandler+0x6ac>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d027      	beq.n	8006292 <HAL_DMA_IRQHandler+0x516>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a79      	ldr	r2, [pc, #484]	@ (800642c <HAL_DMA_IRQHandler+0x6b0>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d022      	beq.n	8006292 <HAL_DMA_IRQHandler+0x516>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a77      	ldr	r2, [pc, #476]	@ (8006430 <HAL_DMA_IRQHandler+0x6b4>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d01d      	beq.n	8006292 <HAL_DMA_IRQHandler+0x516>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a76      	ldr	r2, [pc, #472]	@ (8006434 <HAL_DMA_IRQHandler+0x6b8>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d018      	beq.n	8006292 <HAL_DMA_IRQHandler+0x516>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a74      	ldr	r2, [pc, #464]	@ (8006438 <HAL_DMA_IRQHandler+0x6bc>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d013      	beq.n	8006292 <HAL_DMA_IRQHandler+0x516>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a73      	ldr	r2, [pc, #460]	@ (800643c <HAL_DMA_IRQHandler+0x6c0>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d00e      	beq.n	8006292 <HAL_DMA_IRQHandler+0x516>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a71      	ldr	r2, [pc, #452]	@ (8006440 <HAL_DMA_IRQHandler+0x6c4>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d009      	beq.n	8006292 <HAL_DMA_IRQHandler+0x516>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a70      	ldr	r2, [pc, #448]	@ (8006444 <HAL_DMA_IRQHandler+0x6c8>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d004      	beq.n	8006292 <HAL_DMA_IRQHandler+0x516>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a6e      	ldr	r2, [pc, #440]	@ (8006448 <HAL_DMA_IRQHandler+0x6cc>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d10a      	bne.n	80062a8 <HAL_DMA_IRQHandler+0x52c>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0308 	and.w	r3, r3, #8
 800629c:	2b00      	cmp	r3, #0
 800629e:	bf14      	ite	ne
 80062a0:	2301      	movne	r3, #1
 80062a2:	2300      	moveq	r3, #0
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	e009      	b.n	80062bc <HAL_DMA_IRQHandler+0x540>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0304 	and.w	r3, r3, #4
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	bf14      	ite	ne
 80062b6:	2301      	movne	r3, #1
 80062b8:	2300      	moveq	r3, #0
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d03e      	beq.n	800633e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062c4:	f003 031f 	and.w	r3, r3, #31
 80062c8:	2210      	movs	r2, #16
 80062ca:	409a      	lsls	r2, r3
 80062cc:	6a3b      	ldr	r3, [r7, #32]
 80062ce:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d018      	beq.n	8006310 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d108      	bne.n	80062fe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d024      	beq.n	800633e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	4798      	blx	r3
 80062fc:	e01f      	b.n	800633e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006302:	2b00      	cmp	r3, #0
 8006304:	d01b      	beq.n	800633e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	4798      	blx	r3
 800630e:	e016      	b.n	800633e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800631a:	2b00      	cmp	r3, #0
 800631c:	d107      	bne.n	800632e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f022 0208 	bic.w	r2, r2, #8
 800632c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006342:	f003 031f 	and.w	r3, r3, #31
 8006346:	2220      	movs	r2, #32
 8006348:	409a      	lsls	r2, r3
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	4013      	ands	r3, r2
 800634e:	2b00      	cmp	r3, #0
 8006350:	f000 8110 	beq.w	8006574 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a2c      	ldr	r2, [pc, #176]	@ (800640c <HAL_DMA_IRQHandler+0x690>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d04a      	beq.n	80063f4 <HAL_DMA_IRQHandler+0x678>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a2b      	ldr	r2, [pc, #172]	@ (8006410 <HAL_DMA_IRQHandler+0x694>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d045      	beq.n	80063f4 <HAL_DMA_IRQHandler+0x678>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a29      	ldr	r2, [pc, #164]	@ (8006414 <HAL_DMA_IRQHandler+0x698>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d040      	beq.n	80063f4 <HAL_DMA_IRQHandler+0x678>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a28      	ldr	r2, [pc, #160]	@ (8006418 <HAL_DMA_IRQHandler+0x69c>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d03b      	beq.n	80063f4 <HAL_DMA_IRQHandler+0x678>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a26      	ldr	r2, [pc, #152]	@ (800641c <HAL_DMA_IRQHandler+0x6a0>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d036      	beq.n	80063f4 <HAL_DMA_IRQHandler+0x678>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a25      	ldr	r2, [pc, #148]	@ (8006420 <HAL_DMA_IRQHandler+0x6a4>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d031      	beq.n	80063f4 <HAL_DMA_IRQHandler+0x678>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a23      	ldr	r2, [pc, #140]	@ (8006424 <HAL_DMA_IRQHandler+0x6a8>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d02c      	beq.n	80063f4 <HAL_DMA_IRQHandler+0x678>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a22      	ldr	r2, [pc, #136]	@ (8006428 <HAL_DMA_IRQHandler+0x6ac>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d027      	beq.n	80063f4 <HAL_DMA_IRQHandler+0x678>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a20      	ldr	r2, [pc, #128]	@ (800642c <HAL_DMA_IRQHandler+0x6b0>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d022      	beq.n	80063f4 <HAL_DMA_IRQHandler+0x678>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a1f      	ldr	r2, [pc, #124]	@ (8006430 <HAL_DMA_IRQHandler+0x6b4>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d01d      	beq.n	80063f4 <HAL_DMA_IRQHandler+0x678>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a1d      	ldr	r2, [pc, #116]	@ (8006434 <HAL_DMA_IRQHandler+0x6b8>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d018      	beq.n	80063f4 <HAL_DMA_IRQHandler+0x678>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a1c      	ldr	r2, [pc, #112]	@ (8006438 <HAL_DMA_IRQHandler+0x6bc>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d013      	beq.n	80063f4 <HAL_DMA_IRQHandler+0x678>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a1a      	ldr	r2, [pc, #104]	@ (800643c <HAL_DMA_IRQHandler+0x6c0>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d00e      	beq.n	80063f4 <HAL_DMA_IRQHandler+0x678>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a19      	ldr	r2, [pc, #100]	@ (8006440 <HAL_DMA_IRQHandler+0x6c4>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d009      	beq.n	80063f4 <HAL_DMA_IRQHandler+0x678>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a17      	ldr	r2, [pc, #92]	@ (8006444 <HAL_DMA_IRQHandler+0x6c8>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d004      	beq.n	80063f4 <HAL_DMA_IRQHandler+0x678>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a16      	ldr	r2, [pc, #88]	@ (8006448 <HAL_DMA_IRQHandler+0x6cc>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d12b      	bne.n	800644c <HAL_DMA_IRQHandler+0x6d0>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0310 	and.w	r3, r3, #16
 80063fe:	2b00      	cmp	r3, #0
 8006400:	bf14      	ite	ne
 8006402:	2301      	movne	r3, #1
 8006404:	2300      	moveq	r3, #0
 8006406:	b2db      	uxtb	r3, r3
 8006408:	e02a      	b.n	8006460 <HAL_DMA_IRQHandler+0x6e4>
 800640a:	bf00      	nop
 800640c:	40020010 	.word	0x40020010
 8006410:	40020028 	.word	0x40020028
 8006414:	40020040 	.word	0x40020040
 8006418:	40020058 	.word	0x40020058
 800641c:	40020070 	.word	0x40020070
 8006420:	40020088 	.word	0x40020088
 8006424:	400200a0 	.word	0x400200a0
 8006428:	400200b8 	.word	0x400200b8
 800642c:	40020410 	.word	0x40020410
 8006430:	40020428 	.word	0x40020428
 8006434:	40020440 	.word	0x40020440
 8006438:	40020458 	.word	0x40020458
 800643c:	40020470 	.word	0x40020470
 8006440:	40020488 	.word	0x40020488
 8006444:	400204a0 	.word	0x400204a0
 8006448:	400204b8 	.word	0x400204b8
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0302 	and.w	r3, r3, #2
 8006456:	2b00      	cmp	r3, #0
 8006458:	bf14      	ite	ne
 800645a:	2301      	movne	r3, #1
 800645c:	2300      	moveq	r3, #0
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 8087 	beq.w	8006574 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800646a:	f003 031f 	and.w	r3, r3, #31
 800646e:	2220      	movs	r2, #32
 8006470:	409a      	lsls	r2, r3
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b04      	cmp	r3, #4
 8006480:	d139      	bne.n	80064f6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f022 0216 	bic.w	r2, r2, #22
 8006490:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	695a      	ldr	r2, [r3, #20]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80064a0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d103      	bne.n	80064b2 <HAL_DMA_IRQHandler+0x736>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d007      	beq.n	80064c2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f022 0208 	bic.w	r2, r2, #8
 80064c0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064c6:	f003 031f 	and.w	r3, r3, #31
 80064ca:	223f      	movs	r2, #63	@ 0x3f
 80064cc:	409a      	lsls	r2, r3
 80064ce:	6a3b      	ldr	r3, [r7, #32]
 80064d0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f000 8382 	beq.w	8006bf0 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	4798      	blx	r3
          }
          return;
 80064f4:	e37c      	b.n	8006bf0 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d018      	beq.n	8006536 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d108      	bne.n	8006524 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006516:	2b00      	cmp	r3, #0
 8006518:	d02c      	beq.n	8006574 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	4798      	blx	r3
 8006522:	e027      	b.n	8006574 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006528:	2b00      	cmp	r3, #0
 800652a:	d023      	beq.n	8006574 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	4798      	blx	r3
 8006534:	e01e      	b.n	8006574 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10f      	bne.n	8006564 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f022 0210 	bic.w	r2, r2, #16
 8006552:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006568:	2b00      	cmp	r3, #0
 800656a:	d003      	beq.n	8006574 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006578:	2b00      	cmp	r3, #0
 800657a:	f000 833e 	beq.w	8006bfa <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006582:	f003 0301 	and.w	r3, r3, #1
 8006586:	2b00      	cmp	r3, #0
 8006588:	f000 8088 	beq.w	800669c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2204      	movs	r2, #4
 8006590:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a89      	ldr	r2, [pc, #548]	@ (80067c0 <HAL_DMA_IRQHandler+0xa44>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d04a      	beq.n	8006634 <HAL_DMA_IRQHandler+0x8b8>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a88      	ldr	r2, [pc, #544]	@ (80067c4 <HAL_DMA_IRQHandler+0xa48>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d045      	beq.n	8006634 <HAL_DMA_IRQHandler+0x8b8>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a86      	ldr	r2, [pc, #536]	@ (80067c8 <HAL_DMA_IRQHandler+0xa4c>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d040      	beq.n	8006634 <HAL_DMA_IRQHandler+0x8b8>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a85      	ldr	r2, [pc, #532]	@ (80067cc <HAL_DMA_IRQHandler+0xa50>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d03b      	beq.n	8006634 <HAL_DMA_IRQHandler+0x8b8>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a83      	ldr	r2, [pc, #524]	@ (80067d0 <HAL_DMA_IRQHandler+0xa54>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d036      	beq.n	8006634 <HAL_DMA_IRQHandler+0x8b8>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a82      	ldr	r2, [pc, #520]	@ (80067d4 <HAL_DMA_IRQHandler+0xa58>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d031      	beq.n	8006634 <HAL_DMA_IRQHandler+0x8b8>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a80      	ldr	r2, [pc, #512]	@ (80067d8 <HAL_DMA_IRQHandler+0xa5c>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d02c      	beq.n	8006634 <HAL_DMA_IRQHandler+0x8b8>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a7f      	ldr	r2, [pc, #508]	@ (80067dc <HAL_DMA_IRQHandler+0xa60>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d027      	beq.n	8006634 <HAL_DMA_IRQHandler+0x8b8>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a7d      	ldr	r2, [pc, #500]	@ (80067e0 <HAL_DMA_IRQHandler+0xa64>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d022      	beq.n	8006634 <HAL_DMA_IRQHandler+0x8b8>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a7c      	ldr	r2, [pc, #496]	@ (80067e4 <HAL_DMA_IRQHandler+0xa68>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d01d      	beq.n	8006634 <HAL_DMA_IRQHandler+0x8b8>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a7a      	ldr	r2, [pc, #488]	@ (80067e8 <HAL_DMA_IRQHandler+0xa6c>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d018      	beq.n	8006634 <HAL_DMA_IRQHandler+0x8b8>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a79      	ldr	r2, [pc, #484]	@ (80067ec <HAL_DMA_IRQHandler+0xa70>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d013      	beq.n	8006634 <HAL_DMA_IRQHandler+0x8b8>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a77      	ldr	r2, [pc, #476]	@ (80067f0 <HAL_DMA_IRQHandler+0xa74>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d00e      	beq.n	8006634 <HAL_DMA_IRQHandler+0x8b8>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a76      	ldr	r2, [pc, #472]	@ (80067f4 <HAL_DMA_IRQHandler+0xa78>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d009      	beq.n	8006634 <HAL_DMA_IRQHandler+0x8b8>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a74      	ldr	r2, [pc, #464]	@ (80067f8 <HAL_DMA_IRQHandler+0xa7c>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d004      	beq.n	8006634 <HAL_DMA_IRQHandler+0x8b8>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a73      	ldr	r2, [pc, #460]	@ (80067fc <HAL_DMA_IRQHandler+0xa80>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d108      	bne.n	8006646 <HAL_DMA_IRQHandler+0x8ca>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f022 0201 	bic.w	r2, r2, #1
 8006642:	601a      	str	r2, [r3, #0]
 8006644:	e007      	b.n	8006656 <HAL_DMA_IRQHandler+0x8da>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f022 0201 	bic.w	r2, r2, #1
 8006654:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	3301      	adds	r3, #1
 800665a:	60fb      	str	r3, [r7, #12]
 800665c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800665e:	429a      	cmp	r2, r3
 8006660:	d307      	bcc.n	8006672 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1f2      	bne.n	8006656 <HAL_DMA_IRQHandler+0x8da>
 8006670:	e000      	b.n	8006674 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006672:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0301 	and.w	r3, r3, #1
 800667e:	2b00      	cmp	r3, #0
 8006680:	d004      	beq.n	800668c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2203      	movs	r2, #3
 8006686:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800668a:	e003      	b.n	8006694 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f000 82aa 	beq.w	8006bfa <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	4798      	blx	r3
 80066ae:	e2a4      	b.n	8006bfa <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a52      	ldr	r2, [pc, #328]	@ (8006800 <HAL_DMA_IRQHandler+0xa84>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d04a      	beq.n	8006750 <HAL_DMA_IRQHandler+0x9d4>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a51      	ldr	r2, [pc, #324]	@ (8006804 <HAL_DMA_IRQHandler+0xa88>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d045      	beq.n	8006750 <HAL_DMA_IRQHandler+0x9d4>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a4f      	ldr	r2, [pc, #316]	@ (8006808 <HAL_DMA_IRQHandler+0xa8c>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d040      	beq.n	8006750 <HAL_DMA_IRQHandler+0x9d4>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a4e      	ldr	r2, [pc, #312]	@ (800680c <HAL_DMA_IRQHandler+0xa90>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d03b      	beq.n	8006750 <HAL_DMA_IRQHandler+0x9d4>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a4c      	ldr	r2, [pc, #304]	@ (8006810 <HAL_DMA_IRQHandler+0xa94>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d036      	beq.n	8006750 <HAL_DMA_IRQHandler+0x9d4>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a4b      	ldr	r2, [pc, #300]	@ (8006814 <HAL_DMA_IRQHandler+0xa98>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d031      	beq.n	8006750 <HAL_DMA_IRQHandler+0x9d4>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a49      	ldr	r2, [pc, #292]	@ (8006818 <HAL_DMA_IRQHandler+0xa9c>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d02c      	beq.n	8006750 <HAL_DMA_IRQHandler+0x9d4>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a48      	ldr	r2, [pc, #288]	@ (800681c <HAL_DMA_IRQHandler+0xaa0>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d027      	beq.n	8006750 <HAL_DMA_IRQHandler+0x9d4>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a46      	ldr	r2, [pc, #280]	@ (8006820 <HAL_DMA_IRQHandler+0xaa4>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d022      	beq.n	8006750 <HAL_DMA_IRQHandler+0x9d4>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a45      	ldr	r2, [pc, #276]	@ (8006824 <HAL_DMA_IRQHandler+0xaa8>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d01d      	beq.n	8006750 <HAL_DMA_IRQHandler+0x9d4>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a43      	ldr	r2, [pc, #268]	@ (8006828 <HAL_DMA_IRQHandler+0xaac>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d018      	beq.n	8006750 <HAL_DMA_IRQHandler+0x9d4>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a42      	ldr	r2, [pc, #264]	@ (800682c <HAL_DMA_IRQHandler+0xab0>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d013      	beq.n	8006750 <HAL_DMA_IRQHandler+0x9d4>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a40      	ldr	r2, [pc, #256]	@ (8006830 <HAL_DMA_IRQHandler+0xab4>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d00e      	beq.n	8006750 <HAL_DMA_IRQHandler+0x9d4>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a3f      	ldr	r2, [pc, #252]	@ (8006834 <HAL_DMA_IRQHandler+0xab8>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d009      	beq.n	8006750 <HAL_DMA_IRQHandler+0x9d4>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a3d      	ldr	r2, [pc, #244]	@ (8006838 <HAL_DMA_IRQHandler+0xabc>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d004      	beq.n	8006750 <HAL_DMA_IRQHandler+0x9d4>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a3c      	ldr	r2, [pc, #240]	@ (800683c <HAL_DMA_IRQHandler+0xac0>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d101      	bne.n	8006754 <HAL_DMA_IRQHandler+0x9d8>
 8006750:	2301      	movs	r3, #1
 8006752:	e000      	b.n	8006756 <HAL_DMA_IRQHandler+0x9da>
 8006754:	2300      	movs	r3, #0
 8006756:	2b00      	cmp	r3, #0
 8006758:	f000 824f 	beq.w	8006bfa <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006768:	f003 031f 	and.w	r3, r3, #31
 800676c:	2204      	movs	r2, #4
 800676e:	409a      	lsls	r2, r3
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	4013      	ands	r3, r2
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 80dd 	beq.w	8006934 <HAL_DMA_IRQHandler+0xbb8>
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	f003 0304 	and.w	r3, r3, #4
 8006780:	2b00      	cmp	r3, #0
 8006782:	f000 80d7 	beq.w	8006934 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800678a:	f003 031f 	and.w	r3, r3, #31
 800678e:	2204      	movs	r2, #4
 8006790:	409a      	lsls	r2, r3
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800679c:	2b00      	cmp	r3, #0
 800679e:	d059      	beq.n	8006854 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d14a      	bne.n	8006840 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f000 8220 	beq.w	8006bf4 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067bc:	e21a      	b.n	8006bf4 <HAL_DMA_IRQHandler+0xe78>
 80067be:	bf00      	nop
 80067c0:	40020010 	.word	0x40020010
 80067c4:	40020028 	.word	0x40020028
 80067c8:	40020040 	.word	0x40020040
 80067cc:	40020058 	.word	0x40020058
 80067d0:	40020070 	.word	0x40020070
 80067d4:	40020088 	.word	0x40020088
 80067d8:	400200a0 	.word	0x400200a0
 80067dc:	400200b8 	.word	0x400200b8
 80067e0:	40020410 	.word	0x40020410
 80067e4:	40020428 	.word	0x40020428
 80067e8:	40020440 	.word	0x40020440
 80067ec:	40020458 	.word	0x40020458
 80067f0:	40020470 	.word	0x40020470
 80067f4:	40020488 	.word	0x40020488
 80067f8:	400204a0 	.word	0x400204a0
 80067fc:	400204b8 	.word	0x400204b8
 8006800:	48022c08 	.word	0x48022c08
 8006804:	48022c1c 	.word	0x48022c1c
 8006808:	48022c30 	.word	0x48022c30
 800680c:	48022c44 	.word	0x48022c44
 8006810:	48022c58 	.word	0x48022c58
 8006814:	48022c6c 	.word	0x48022c6c
 8006818:	48022c80 	.word	0x48022c80
 800681c:	48022c94 	.word	0x48022c94
 8006820:	58025408 	.word	0x58025408
 8006824:	5802541c 	.word	0x5802541c
 8006828:	58025430 	.word	0x58025430
 800682c:	58025444 	.word	0x58025444
 8006830:	58025458 	.word	0x58025458
 8006834:	5802546c 	.word	0x5802546c
 8006838:	58025480 	.word	0x58025480
 800683c:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006844:	2b00      	cmp	r3, #0
 8006846:	f000 81d5 	beq.w	8006bf4 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006852:	e1cf      	b.n	8006bf4 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	f003 0320 	and.w	r3, r3, #32
 800685a:	2b00      	cmp	r3, #0
 800685c:	d160      	bne.n	8006920 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a7f      	ldr	r2, [pc, #508]	@ (8006a60 <HAL_DMA_IRQHandler+0xce4>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d04a      	beq.n	80068fe <HAL_DMA_IRQHandler+0xb82>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a7d      	ldr	r2, [pc, #500]	@ (8006a64 <HAL_DMA_IRQHandler+0xce8>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d045      	beq.n	80068fe <HAL_DMA_IRQHandler+0xb82>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a7c      	ldr	r2, [pc, #496]	@ (8006a68 <HAL_DMA_IRQHandler+0xcec>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d040      	beq.n	80068fe <HAL_DMA_IRQHandler+0xb82>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a7a      	ldr	r2, [pc, #488]	@ (8006a6c <HAL_DMA_IRQHandler+0xcf0>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d03b      	beq.n	80068fe <HAL_DMA_IRQHandler+0xb82>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a79      	ldr	r2, [pc, #484]	@ (8006a70 <HAL_DMA_IRQHandler+0xcf4>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d036      	beq.n	80068fe <HAL_DMA_IRQHandler+0xb82>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a77      	ldr	r2, [pc, #476]	@ (8006a74 <HAL_DMA_IRQHandler+0xcf8>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d031      	beq.n	80068fe <HAL_DMA_IRQHandler+0xb82>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a76      	ldr	r2, [pc, #472]	@ (8006a78 <HAL_DMA_IRQHandler+0xcfc>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d02c      	beq.n	80068fe <HAL_DMA_IRQHandler+0xb82>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a74      	ldr	r2, [pc, #464]	@ (8006a7c <HAL_DMA_IRQHandler+0xd00>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d027      	beq.n	80068fe <HAL_DMA_IRQHandler+0xb82>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a73      	ldr	r2, [pc, #460]	@ (8006a80 <HAL_DMA_IRQHandler+0xd04>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d022      	beq.n	80068fe <HAL_DMA_IRQHandler+0xb82>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a71      	ldr	r2, [pc, #452]	@ (8006a84 <HAL_DMA_IRQHandler+0xd08>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d01d      	beq.n	80068fe <HAL_DMA_IRQHandler+0xb82>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a70      	ldr	r2, [pc, #448]	@ (8006a88 <HAL_DMA_IRQHandler+0xd0c>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d018      	beq.n	80068fe <HAL_DMA_IRQHandler+0xb82>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a6e      	ldr	r2, [pc, #440]	@ (8006a8c <HAL_DMA_IRQHandler+0xd10>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d013      	beq.n	80068fe <HAL_DMA_IRQHandler+0xb82>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a6d      	ldr	r2, [pc, #436]	@ (8006a90 <HAL_DMA_IRQHandler+0xd14>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d00e      	beq.n	80068fe <HAL_DMA_IRQHandler+0xb82>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a6b      	ldr	r2, [pc, #428]	@ (8006a94 <HAL_DMA_IRQHandler+0xd18>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d009      	beq.n	80068fe <HAL_DMA_IRQHandler+0xb82>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a6a      	ldr	r2, [pc, #424]	@ (8006a98 <HAL_DMA_IRQHandler+0xd1c>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d004      	beq.n	80068fe <HAL_DMA_IRQHandler+0xb82>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a68      	ldr	r2, [pc, #416]	@ (8006a9c <HAL_DMA_IRQHandler+0xd20>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d108      	bne.n	8006910 <HAL_DMA_IRQHandler+0xb94>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 0208 	bic.w	r2, r2, #8
 800690c:	601a      	str	r2, [r3, #0]
 800690e:	e007      	b.n	8006920 <HAL_DMA_IRQHandler+0xba4>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f022 0204 	bic.w	r2, r2, #4
 800691e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 8165 	beq.w	8006bf4 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006932:	e15f      	b.n	8006bf4 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006938:	f003 031f 	and.w	r3, r3, #31
 800693c:	2202      	movs	r2, #2
 800693e:	409a      	lsls	r2, r3
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	4013      	ands	r3, r2
 8006944:	2b00      	cmp	r3, #0
 8006946:	f000 80c5 	beq.w	8006ad4 <HAL_DMA_IRQHandler+0xd58>
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f003 0302 	and.w	r3, r3, #2
 8006950:	2b00      	cmp	r3, #0
 8006952:	f000 80bf 	beq.w	8006ad4 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800695a:	f003 031f 	and.w	r3, r3, #31
 800695e:	2202      	movs	r2, #2
 8006960:	409a      	lsls	r2, r3
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d018      	beq.n	80069a2 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d109      	bne.n	800698e <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800697e:	2b00      	cmp	r3, #0
 8006980:	f000 813a 	beq.w	8006bf8 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800698c:	e134      	b.n	8006bf8 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006992:	2b00      	cmp	r3, #0
 8006994:	f000 8130 	beq.w	8006bf8 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069a0:	e12a      	b.n	8006bf8 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	f003 0320 	and.w	r3, r3, #32
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f040 8089 	bne.w	8006ac0 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a2b      	ldr	r2, [pc, #172]	@ (8006a60 <HAL_DMA_IRQHandler+0xce4>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d04a      	beq.n	8006a4e <HAL_DMA_IRQHandler+0xcd2>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a29      	ldr	r2, [pc, #164]	@ (8006a64 <HAL_DMA_IRQHandler+0xce8>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d045      	beq.n	8006a4e <HAL_DMA_IRQHandler+0xcd2>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a28      	ldr	r2, [pc, #160]	@ (8006a68 <HAL_DMA_IRQHandler+0xcec>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d040      	beq.n	8006a4e <HAL_DMA_IRQHandler+0xcd2>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a26      	ldr	r2, [pc, #152]	@ (8006a6c <HAL_DMA_IRQHandler+0xcf0>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d03b      	beq.n	8006a4e <HAL_DMA_IRQHandler+0xcd2>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a25      	ldr	r2, [pc, #148]	@ (8006a70 <HAL_DMA_IRQHandler+0xcf4>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d036      	beq.n	8006a4e <HAL_DMA_IRQHandler+0xcd2>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a23      	ldr	r2, [pc, #140]	@ (8006a74 <HAL_DMA_IRQHandler+0xcf8>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d031      	beq.n	8006a4e <HAL_DMA_IRQHandler+0xcd2>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a22      	ldr	r2, [pc, #136]	@ (8006a78 <HAL_DMA_IRQHandler+0xcfc>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d02c      	beq.n	8006a4e <HAL_DMA_IRQHandler+0xcd2>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a20      	ldr	r2, [pc, #128]	@ (8006a7c <HAL_DMA_IRQHandler+0xd00>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d027      	beq.n	8006a4e <HAL_DMA_IRQHandler+0xcd2>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a1f      	ldr	r2, [pc, #124]	@ (8006a80 <HAL_DMA_IRQHandler+0xd04>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d022      	beq.n	8006a4e <HAL_DMA_IRQHandler+0xcd2>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8006a84 <HAL_DMA_IRQHandler+0xd08>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d01d      	beq.n	8006a4e <HAL_DMA_IRQHandler+0xcd2>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a1c      	ldr	r2, [pc, #112]	@ (8006a88 <HAL_DMA_IRQHandler+0xd0c>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d018      	beq.n	8006a4e <HAL_DMA_IRQHandler+0xcd2>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a1a      	ldr	r2, [pc, #104]	@ (8006a8c <HAL_DMA_IRQHandler+0xd10>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d013      	beq.n	8006a4e <HAL_DMA_IRQHandler+0xcd2>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a19      	ldr	r2, [pc, #100]	@ (8006a90 <HAL_DMA_IRQHandler+0xd14>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d00e      	beq.n	8006a4e <HAL_DMA_IRQHandler+0xcd2>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a17      	ldr	r2, [pc, #92]	@ (8006a94 <HAL_DMA_IRQHandler+0xd18>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d009      	beq.n	8006a4e <HAL_DMA_IRQHandler+0xcd2>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a16      	ldr	r2, [pc, #88]	@ (8006a98 <HAL_DMA_IRQHandler+0xd1c>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d004      	beq.n	8006a4e <HAL_DMA_IRQHandler+0xcd2>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a14      	ldr	r2, [pc, #80]	@ (8006a9c <HAL_DMA_IRQHandler+0xd20>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d128      	bne.n	8006aa0 <HAL_DMA_IRQHandler+0xd24>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f022 0214 	bic.w	r2, r2, #20
 8006a5c:	601a      	str	r2, [r3, #0]
 8006a5e:	e027      	b.n	8006ab0 <HAL_DMA_IRQHandler+0xd34>
 8006a60:	40020010 	.word	0x40020010
 8006a64:	40020028 	.word	0x40020028
 8006a68:	40020040 	.word	0x40020040
 8006a6c:	40020058 	.word	0x40020058
 8006a70:	40020070 	.word	0x40020070
 8006a74:	40020088 	.word	0x40020088
 8006a78:	400200a0 	.word	0x400200a0
 8006a7c:	400200b8 	.word	0x400200b8
 8006a80:	40020410 	.word	0x40020410
 8006a84:	40020428 	.word	0x40020428
 8006a88:	40020440 	.word	0x40020440
 8006a8c:	40020458 	.word	0x40020458
 8006a90:	40020470 	.word	0x40020470
 8006a94:	40020488 	.word	0x40020488
 8006a98:	400204a0 	.word	0x400204a0
 8006a9c:	400204b8 	.word	0x400204b8
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f022 020a 	bic.w	r2, r2, #10
 8006aae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f000 8097 	beq.w	8006bf8 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ad2:	e091      	b.n	8006bf8 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ad8:	f003 031f 	and.w	r3, r3, #31
 8006adc:	2208      	movs	r2, #8
 8006ade:	409a      	lsls	r2, r3
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 8088 	beq.w	8006bfa <HAL_DMA_IRQHandler+0xe7e>
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	f003 0308 	and.w	r3, r3, #8
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f000 8082 	beq.w	8006bfa <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a41      	ldr	r2, [pc, #260]	@ (8006c00 <HAL_DMA_IRQHandler+0xe84>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d04a      	beq.n	8006b96 <HAL_DMA_IRQHandler+0xe1a>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a3f      	ldr	r2, [pc, #252]	@ (8006c04 <HAL_DMA_IRQHandler+0xe88>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d045      	beq.n	8006b96 <HAL_DMA_IRQHandler+0xe1a>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a3e      	ldr	r2, [pc, #248]	@ (8006c08 <HAL_DMA_IRQHandler+0xe8c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d040      	beq.n	8006b96 <HAL_DMA_IRQHandler+0xe1a>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a3c      	ldr	r2, [pc, #240]	@ (8006c0c <HAL_DMA_IRQHandler+0xe90>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d03b      	beq.n	8006b96 <HAL_DMA_IRQHandler+0xe1a>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a3b      	ldr	r2, [pc, #236]	@ (8006c10 <HAL_DMA_IRQHandler+0xe94>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d036      	beq.n	8006b96 <HAL_DMA_IRQHandler+0xe1a>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a39      	ldr	r2, [pc, #228]	@ (8006c14 <HAL_DMA_IRQHandler+0xe98>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d031      	beq.n	8006b96 <HAL_DMA_IRQHandler+0xe1a>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a38      	ldr	r2, [pc, #224]	@ (8006c18 <HAL_DMA_IRQHandler+0xe9c>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d02c      	beq.n	8006b96 <HAL_DMA_IRQHandler+0xe1a>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a36      	ldr	r2, [pc, #216]	@ (8006c1c <HAL_DMA_IRQHandler+0xea0>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d027      	beq.n	8006b96 <HAL_DMA_IRQHandler+0xe1a>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a35      	ldr	r2, [pc, #212]	@ (8006c20 <HAL_DMA_IRQHandler+0xea4>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d022      	beq.n	8006b96 <HAL_DMA_IRQHandler+0xe1a>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a33      	ldr	r2, [pc, #204]	@ (8006c24 <HAL_DMA_IRQHandler+0xea8>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d01d      	beq.n	8006b96 <HAL_DMA_IRQHandler+0xe1a>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a32      	ldr	r2, [pc, #200]	@ (8006c28 <HAL_DMA_IRQHandler+0xeac>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d018      	beq.n	8006b96 <HAL_DMA_IRQHandler+0xe1a>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a30      	ldr	r2, [pc, #192]	@ (8006c2c <HAL_DMA_IRQHandler+0xeb0>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d013      	beq.n	8006b96 <HAL_DMA_IRQHandler+0xe1a>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a2f      	ldr	r2, [pc, #188]	@ (8006c30 <HAL_DMA_IRQHandler+0xeb4>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d00e      	beq.n	8006b96 <HAL_DMA_IRQHandler+0xe1a>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a2d      	ldr	r2, [pc, #180]	@ (8006c34 <HAL_DMA_IRQHandler+0xeb8>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d009      	beq.n	8006b96 <HAL_DMA_IRQHandler+0xe1a>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a2c      	ldr	r2, [pc, #176]	@ (8006c38 <HAL_DMA_IRQHandler+0xebc>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d004      	beq.n	8006b96 <HAL_DMA_IRQHandler+0xe1a>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a2a      	ldr	r2, [pc, #168]	@ (8006c3c <HAL_DMA_IRQHandler+0xec0>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d108      	bne.n	8006ba8 <HAL_DMA_IRQHandler+0xe2c>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 021c 	bic.w	r2, r2, #28
 8006ba4:	601a      	str	r2, [r3, #0]
 8006ba6:	e007      	b.n	8006bb8 <HAL_DMA_IRQHandler+0xe3c>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f022 020e 	bic.w	r2, r2, #14
 8006bb6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bbc:	f003 031f 	and.w	r3, r3, #31
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	409a      	lsls	r2, r3
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d009      	beq.n	8006bfa <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	4798      	blx	r3
 8006bee:	e004      	b.n	8006bfa <HAL_DMA_IRQHandler+0xe7e>
          return;
 8006bf0:	bf00      	nop
 8006bf2:	e002      	b.n	8006bfa <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bf4:	bf00      	nop
 8006bf6:	e000      	b.n	8006bfa <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bf8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006bfa:	3728      	adds	r7, #40	@ 0x28
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	40020010 	.word	0x40020010
 8006c04:	40020028 	.word	0x40020028
 8006c08:	40020040 	.word	0x40020040
 8006c0c:	40020058 	.word	0x40020058
 8006c10:	40020070 	.word	0x40020070
 8006c14:	40020088 	.word	0x40020088
 8006c18:	400200a0 	.word	0x400200a0
 8006c1c:	400200b8 	.word	0x400200b8
 8006c20:	40020410 	.word	0x40020410
 8006c24:	40020428 	.word	0x40020428
 8006c28:	40020440 	.word	0x40020440
 8006c2c:	40020458 	.word	0x40020458
 8006c30:	40020470 	.word	0x40020470
 8006c34:	40020488 	.word	0x40020488
 8006c38:	400204a0 	.word	0x400204a0
 8006c3c:	400204b8 	.word	0x400204b8

08006c40 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b087      	sub	sp, #28
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]
 8006c4c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c52:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c58:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a7f      	ldr	r2, [pc, #508]	@ (8006e5c <DMA_SetConfig+0x21c>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d072      	beq.n	8006d4a <DMA_SetConfig+0x10a>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a7d      	ldr	r2, [pc, #500]	@ (8006e60 <DMA_SetConfig+0x220>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d06d      	beq.n	8006d4a <DMA_SetConfig+0x10a>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a7c      	ldr	r2, [pc, #496]	@ (8006e64 <DMA_SetConfig+0x224>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d068      	beq.n	8006d4a <DMA_SetConfig+0x10a>
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a7a      	ldr	r2, [pc, #488]	@ (8006e68 <DMA_SetConfig+0x228>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d063      	beq.n	8006d4a <DMA_SetConfig+0x10a>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a79      	ldr	r2, [pc, #484]	@ (8006e6c <DMA_SetConfig+0x22c>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d05e      	beq.n	8006d4a <DMA_SetConfig+0x10a>
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a77      	ldr	r2, [pc, #476]	@ (8006e70 <DMA_SetConfig+0x230>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d059      	beq.n	8006d4a <DMA_SetConfig+0x10a>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a76      	ldr	r2, [pc, #472]	@ (8006e74 <DMA_SetConfig+0x234>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d054      	beq.n	8006d4a <DMA_SetConfig+0x10a>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a74      	ldr	r2, [pc, #464]	@ (8006e78 <DMA_SetConfig+0x238>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d04f      	beq.n	8006d4a <DMA_SetConfig+0x10a>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a73      	ldr	r2, [pc, #460]	@ (8006e7c <DMA_SetConfig+0x23c>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d04a      	beq.n	8006d4a <DMA_SetConfig+0x10a>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a71      	ldr	r2, [pc, #452]	@ (8006e80 <DMA_SetConfig+0x240>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d045      	beq.n	8006d4a <DMA_SetConfig+0x10a>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a70      	ldr	r2, [pc, #448]	@ (8006e84 <DMA_SetConfig+0x244>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d040      	beq.n	8006d4a <DMA_SetConfig+0x10a>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a6e      	ldr	r2, [pc, #440]	@ (8006e88 <DMA_SetConfig+0x248>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d03b      	beq.n	8006d4a <DMA_SetConfig+0x10a>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a6d      	ldr	r2, [pc, #436]	@ (8006e8c <DMA_SetConfig+0x24c>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d036      	beq.n	8006d4a <DMA_SetConfig+0x10a>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a6b      	ldr	r2, [pc, #428]	@ (8006e90 <DMA_SetConfig+0x250>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d031      	beq.n	8006d4a <DMA_SetConfig+0x10a>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a6a      	ldr	r2, [pc, #424]	@ (8006e94 <DMA_SetConfig+0x254>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d02c      	beq.n	8006d4a <DMA_SetConfig+0x10a>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a68      	ldr	r2, [pc, #416]	@ (8006e98 <DMA_SetConfig+0x258>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d027      	beq.n	8006d4a <DMA_SetConfig+0x10a>
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a67      	ldr	r2, [pc, #412]	@ (8006e9c <DMA_SetConfig+0x25c>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d022      	beq.n	8006d4a <DMA_SetConfig+0x10a>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a65      	ldr	r2, [pc, #404]	@ (8006ea0 <DMA_SetConfig+0x260>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d01d      	beq.n	8006d4a <DMA_SetConfig+0x10a>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a64      	ldr	r2, [pc, #400]	@ (8006ea4 <DMA_SetConfig+0x264>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d018      	beq.n	8006d4a <DMA_SetConfig+0x10a>
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a62      	ldr	r2, [pc, #392]	@ (8006ea8 <DMA_SetConfig+0x268>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d013      	beq.n	8006d4a <DMA_SetConfig+0x10a>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a61      	ldr	r2, [pc, #388]	@ (8006eac <DMA_SetConfig+0x26c>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d00e      	beq.n	8006d4a <DMA_SetConfig+0x10a>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a5f      	ldr	r2, [pc, #380]	@ (8006eb0 <DMA_SetConfig+0x270>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d009      	beq.n	8006d4a <DMA_SetConfig+0x10a>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a5e      	ldr	r2, [pc, #376]	@ (8006eb4 <DMA_SetConfig+0x274>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d004      	beq.n	8006d4a <DMA_SetConfig+0x10a>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a5c      	ldr	r2, [pc, #368]	@ (8006eb8 <DMA_SetConfig+0x278>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d101      	bne.n	8006d4e <DMA_SetConfig+0x10e>
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e000      	b.n	8006d50 <DMA_SetConfig+0x110>
 8006d4e:	2300      	movs	r3, #0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00d      	beq.n	8006d70 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006d5c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d004      	beq.n	8006d70 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006d6e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a39      	ldr	r2, [pc, #228]	@ (8006e5c <DMA_SetConfig+0x21c>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d04a      	beq.n	8006e10 <DMA_SetConfig+0x1d0>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a38      	ldr	r2, [pc, #224]	@ (8006e60 <DMA_SetConfig+0x220>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d045      	beq.n	8006e10 <DMA_SetConfig+0x1d0>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a36      	ldr	r2, [pc, #216]	@ (8006e64 <DMA_SetConfig+0x224>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d040      	beq.n	8006e10 <DMA_SetConfig+0x1d0>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a35      	ldr	r2, [pc, #212]	@ (8006e68 <DMA_SetConfig+0x228>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d03b      	beq.n	8006e10 <DMA_SetConfig+0x1d0>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a33      	ldr	r2, [pc, #204]	@ (8006e6c <DMA_SetConfig+0x22c>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d036      	beq.n	8006e10 <DMA_SetConfig+0x1d0>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a32      	ldr	r2, [pc, #200]	@ (8006e70 <DMA_SetConfig+0x230>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d031      	beq.n	8006e10 <DMA_SetConfig+0x1d0>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a30      	ldr	r2, [pc, #192]	@ (8006e74 <DMA_SetConfig+0x234>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d02c      	beq.n	8006e10 <DMA_SetConfig+0x1d0>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a2f      	ldr	r2, [pc, #188]	@ (8006e78 <DMA_SetConfig+0x238>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d027      	beq.n	8006e10 <DMA_SetConfig+0x1d0>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a2d      	ldr	r2, [pc, #180]	@ (8006e7c <DMA_SetConfig+0x23c>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d022      	beq.n	8006e10 <DMA_SetConfig+0x1d0>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a2c      	ldr	r2, [pc, #176]	@ (8006e80 <DMA_SetConfig+0x240>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d01d      	beq.n	8006e10 <DMA_SetConfig+0x1d0>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a2a      	ldr	r2, [pc, #168]	@ (8006e84 <DMA_SetConfig+0x244>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d018      	beq.n	8006e10 <DMA_SetConfig+0x1d0>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a29      	ldr	r2, [pc, #164]	@ (8006e88 <DMA_SetConfig+0x248>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d013      	beq.n	8006e10 <DMA_SetConfig+0x1d0>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a27      	ldr	r2, [pc, #156]	@ (8006e8c <DMA_SetConfig+0x24c>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d00e      	beq.n	8006e10 <DMA_SetConfig+0x1d0>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a26      	ldr	r2, [pc, #152]	@ (8006e90 <DMA_SetConfig+0x250>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d009      	beq.n	8006e10 <DMA_SetConfig+0x1d0>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a24      	ldr	r2, [pc, #144]	@ (8006e94 <DMA_SetConfig+0x254>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d004      	beq.n	8006e10 <DMA_SetConfig+0x1d0>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a23      	ldr	r2, [pc, #140]	@ (8006e98 <DMA_SetConfig+0x258>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d101      	bne.n	8006e14 <DMA_SetConfig+0x1d4>
 8006e10:	2301      	movs	r3, #1
 8006e12:	e000      	b.n	8006e16 <DMA_SetConfig+0x1d6>
 8006e14:	2300      	movs	r3, #0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d059      	beq.n	8006ece <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e1e:	f003 031f 	and.w	r3, r3, #31
 8006e22:	223f      	movs	r2, #63	@ 0x3f
 8006e24:	409a      	lsls	r2, r3
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006e38:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	2b40      	cmp	r3, #64	@ 0x40
 8006e48:	d138      	bne.n	8006ebc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68ba      	ldr	r2, [r7, #8]
 8006e58:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006e5a:	e0ae      	b.n	8006fba <DMA_SetConfig+0x37a>
 8006e5c:	40020010 	.word	0x40020010
 8006e60:	40020028 	.word	0x40020028
 8006e64:	40020040 	.word	0x40020040
 8006e68:	40020058 	.word	0x40020058
 8006e6c:	40020070 	.word	0x40020070
 8006e70:	40020088 	.word	0x40020088
 8006e74:	400200a0 	.word	0x400200a0
 8006e78:	400200b8 	.word	0x400200b8
 8006e7c:	40020410 	.word	0x40020410
 8006e80:	40020428 	.word	0x40020428
 8006e84:	40020440 	.word	0x40020440
 8006e88:	40020458 	.word	0x40020458
 8006e8c:	40020470 	.word	0x40020470
 8006e90:	40020488 	.word	0x40020488
 8006e94:	400204a0 	.word	0x400204a0
 8006e98:	400204b8 	.word	0x400204b8
 8006e9c:	58025408 	.word	0x58025408
 8006ea0:	5802541c 	.word	0x5802541c
 8006ea4:	58025430 	.word	0x58025430
 8006ea8:	58025444 	.word	0x58025444
 8006eac:	58025458 	.word	0x58025458
 8006eb0:	5802546c 	.word	0x5802546c
 8006eb4:	58025480 	.word	0x58025480
 8006eb8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	60da      	str	r2, [r3, #12]
}
 8006ecc:	e075      	b.n	8006fba <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a3d      	ldr	r2, [pc, #244]	@ (8006fc8 <DMA_SetConfig+0x388>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d04a      	beq.n	8006f6e <DMA_SetConfig+0x32e>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a3b      	ldr	r2, [pc, #236]	@ (8006fcc <DMA_SetConfig+0x38c>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d045      	beq.n	8006f6e <DMA_SetConfig+0x32e>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a3a      	ldr	r2, [pc, #232]	@ (8006fd0 <DMA_SetConfig+0x390>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d040      	beq.n	8006f6e <DMA_SetConfig+0x32e>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a38      	ldr	r2, [pc, #224]	@ (8006fd4 <DMA_SetConfig+0x394>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d03b      	beq.n	8006f6e <DMA_SetConfig+0x32e>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a37      	ldr	r2, [pc, #220]	@ (8006fd8 <DMA_SetConfig+0x398>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d036      	beq.n	8006f6e <DMA_SetConfig+0x32e>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a35      	ldr	r2, [pc, #212]	@ (8006fdc <DMA_SetConfig+0x39c>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d031      	beq.n	8006f6e <DMA_SetConfig+0x32e>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a34      	ldr	r2, [pc, #208]	@ (8006fe0 <DMA_SetConfig+0x3a0>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d02c      	beq.n	8006f6e <DMA_SetConfig+0x32e>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a32      	ldr	r2, [pc, #200]	@ (8006fe4 <DMA_SetConfig+0x3a4>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d027      	beq.n	8006f6e <DMA_SetConfig+0x32e>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a31      	ldr	r2, [pc, #196]	@ (8006fe8 <DMA_SetConfig+0x3a8>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d022      	beq.n	8006f6e <DMA_SetConfig+0x32e>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a2f      	ldr	r2, [pc, #188]	@ (8006fec <DMA_SetConfig+0x3ac>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d01d      	beq.n	8006f6e <DMA_SetConfig+0x32e>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a2e      	ldr	r2, [pc, #184]	@ (8006ff0 <DMA_SetConfig+0x3b0>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d018      	beq.n	8006f6e <DMA_SetConfig+0x32e>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a2c      	ldr	r2, [pc, #176]	@ (8006ff4 <DMA_SetConfig+0x3b4>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d013      	beq.n	8006f6e <DMA_SetConfig+0x32e>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a2b      	ldr	r2, [pc, #172]	@ (8006ff8 <DMA_SetConfig+0x3b8>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d00e      	beq.n	8006f6e <DMA_SetConfig+0x32e>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a29      	ldr	r2, [pc, #164]	@ (8006ffc <DMA_SetConfig+0x3bc>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d009      	beq.n	8006f6e <DMA_SetConfig+0x32e>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a28      	ldr	r2, [pc, #160]	@ (8007000 <DMA_SetConfig+0x3c0>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d004      	beq.n	8006f6e <DMA_SetConfig+0x32e>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a26      	ldr	r2, [pc, #152]	@ (8007004 <DMA_SetConfig+0x3c4>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d101      	bne.n	8006f72 <DMA_SetConfig+0x332>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e000      	b.n	8006f74 <DMA_SetConfig+0x334>
 8006f72:	2300      	movs	r3, #0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d020      	beq.n	8006fba <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f7c:	f003 031f 	and.w	r3, r3, #31
 8006f80:	2201      	movs	r2, #1
 8006f82:	409a      	lsls	r2, r3
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	683a      	ldr	r2, [r7, #0]
 8006f8e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	2b40      	cmp	r3, #64	@ 0x40
 8006f96:	d108      	bne.n	8006faa <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	60da      	str	r2, [r3, #12]
}
 8006fa8:	e007      	b.n	8006fba <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	60da      	str	r2, [r3, #12]
}
 8006fba:	bf00      	nop
 8006fbc:	371c      	adds	r7, #28
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	48022c08 	.word	0x48022c08
 8006fcc:	48022c1c 	.word	0x48022c1c
 8006fd0:	48022c30 	.word	0x48022c30
 8006fd4:	48022c44 	.word	0x48022c44
 8006fd8:	48022c58 	.word	0x48022c58
 8006fdc:	48022c6c 	.word	0x48022c6c
 8006fe0:	48022c80 	.word	0x48022c80
 8006fe4:	48022c94 	.word	0x48022c94
 8006fe8:	58025408 	.word	0x58025408
 8006fec:	5802541c 	.word	0x5802541c
 8006ff0:	58025430 	.word	0x58025430
 8006ff4:	58025444 	.word	0x58025444
 8006ff8:	58025458 	.word	0x58025458
 8006ffc:	5802546c 	.word	0x5802546c
 8007000:	58025480 	.word	0x58025480
 8007004:	58025494 	.word	0x58025494

08007008 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a42      	ldr	r2, [pc, #264]	@ (8007120 <DMA_CalcBaseAndBitshift+0x118>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d04a      	beq.n	80070b0 <DMA_CalcBaseAndBitshift+0xa8>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a41      	ldr	r2, [pc, #260]	@ (8007124 <DMA_CalcBaseAndBitshift+0x11c>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d045      	beq.n	80070b0 <DMA_CalcBaseAndBitshift+0xa8>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a3f      	ldr	r2, [pc, #252]	@ (8007128 <DMA_CalcBaseAndBitshift+0x120>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d040      	beq.n	80070b0 <DMA_CalcBaseAndBitshift+0xa8>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a3e      	ldr	r2, [pc, #248]	@ (800712c <DMA_CalcBaseAndBitshift+0x124>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d03b      	beq.n	80070b0 <DMA_CalcBaseAndBitshift+0xa8>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a3c      	ldr	r2, [pc, #240]	@ (8007130 <DMA_CalcBaseAndBitshift+0x128>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d036      	beq.n	80070b0 <DMA_CalcBaseAndBitshift+0xa8>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a3b      	ldr	r2, [pc, #236]	@ (8007134 <DMA_CalcBaseAndBitshift+0x12c>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d031      	beq.n	80070b0 <DMA_CalcBaseAndBitshift+0xa8>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a39      	ldr	r2, [pc, #228]	@ (8007138 <DMA_CalcBaseAndBitshift+0x130>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d02c      	beq.n	80070b0 <DMA_CalcBaseAndBitshift+0xa8>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a38      	ldr	r2, [pc, #224]	@ (800713c <DMA_CalcBaseAndBitshift+0x134>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d027      	beq.n	80070b0 <DMA_CalcBaseAndBitshift+0xa8>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a36      	ldr	r2, [pc, #216]	@ (8007140 <DMA_CalcBaseAndBitshift+0x138>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d022      	beq.n	80070b0 <DMA_CalcBaseAndBitshift+0xa8>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a35      	ldr	r2, [pc, #212]	@ (8007144 <DMA_CalcBaseAndBitshift+0x13c>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d01d      	beq.n	80070b0 <DMA_CalcBaseAndBitshift+0xa8>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a33      	ldr	r2, [pc, #204]	@ (8007148 <DMA_CalcBaseAndBitshift+0x140>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d018      	beq.n	80070b0 <DMA_CalcBaseAndBitshift+0xa8>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a32      	ldr	r2, [pc, #200]	@ (800714c <DMA_CalcBaseAndBitshift+0x144>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d013      	beq.n	80070b0 <DMA_CalcBaseAndBitshift+0xa8>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a30      	ldr	r2, [pc, #192]	@ (8007150 <DMA_CalcBaseAndBitshift+0x148>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d00e      	beq.n	80070b0 <DMA_CalcBaseAndBitshift+0xa8>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a2f      	ldr	r2, [pc, #188]	@ (8007154 <DMA_CalcBaseAndBitshift+0x14c>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d009      	beq.n	80070b0 <DMA_CalcBaseAndBitshift+0xa8>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a2d      	ldr	r2, [pc, #180]	@ (8007158 <DMA_CalcBaseAndBitshift+0x150>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d004      	beq.n	80070b0 <DMA_CalcBaseAndBitshift+0xa8>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a2c      	ldr	r2, [pc, #176]	@ (800715c <DMA_CalcBaseAndBitshift+0x154>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d101      	bne.n	80070b4 <DMA_CalcBaseAndBitshift+0xac>
 80070b0:	2301      	movs	r3, #1
 80070b2:	e000      	b.n	80070b6 <DMA_CalcBaseAndBitshift+0xae>
 80070b4:	2300      	movs	r3, #0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d024      	beq.n	8007104 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	3b10      	subs	r3, #16
 80070c2:	4a27      	ldr	r2, [pc, #156]	@ (8007160 <DMA_CalcBaseAndBitshift+0x158>)
 80070c4:	fba2 2303 	umull	r2, r3, r2, r3
 80070c8:	091b      	lsrs	r3, r3, #4
 80070ca:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f003 0307 	and.w	r3, r3, #7
 80070d2:	4a24      	ldr	r2, [pc, #144]	@ (8007164 <DMA_CalcBaseAndBitshift+0x15c>)
 80070d4:	5cd3      	ldrb	r3, [r2, r3]
 80070d6:	461a      	mov	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2b03      	cmp	r3, #3
 80070e0:	d908      	bls.n	80070f4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	461a      	mov	r2, r3
 80070e8:	4b1f      	ldr	r3, [pc, #124]	@ (8007168 <DMA_CalcBaseAndBitshift+0x160>)
 80070ea:	4013      	ands	r3, r2
 80070ec:	1d1a      	adds	r2, r3, #4
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	659a      	str	r2, [r3, #88]	@ 0x58
 80070f2:	e00d      	b.n	8007110 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	461a      	mov	r2, r3
 80070fa:	4b1b      	ldr	r3, [pc, #108]	@ (8007168 <DMA_CalcBaseAndBitshift+0x160>)
 80070fc:	4013      	ands	r3, r2
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	6593      	str	r3, [r2, #88]	@ 0x58
 8007102:	e005      	b.n	8007110 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007114:	4618      	mov	r0, r3
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	40020010 	.word	0x40020010
 8007124:	40020028 	.word	0x40020028
 8007128:	40020040 	.word	0x40020040
 800712c:	40020058 	.word	0x40020058
 8007130:	40020070 	.word	0x40020070
 8007134:	40020088 	.word	0x40020088
 8007138:	400200a0 	.word	0x400200a0
 800713c:	400200b8 	.word	0x400200b8
 8007140:	40020410 	.word	0x40020410
 8007144:	40020428 	.word	0x40020428
 8007148:	40020440 	.word	0x40020440
 800714c:	40020458 	.word	0x40020458
 8007150:	40020470 	.word	0x40020470
 8007154:	40020488 	.word	0x40020488
 8007158:	400204a0 	.word	0x400204a0
 800715c:	400204b8 	.word	0x400204b8
 8007160:	aaaaaaab 	.word	0xaaaaaaab
 8007164:	08014500 	.word	0x08014500
 8007168:	fffffc00 	.word	0xfffffc00

0800716c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007174:	2300      	movs	r3, #0
 8007176:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d120      	bne.n	80071c2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007184:	2b03      	cmp	r3, #3
 8007186:	d858      	bhi.n	800723a <DMA_CheckFifoParam+0xce>
 8007188:	a201      	add	r2, pc, #4	@ (adr r2, 8007190 <DMA_CheckFifoParam+0x24>)
 800718a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800718e:	bf00      	nop
 8007190:	080071a1 	.word	0x080071a1
 8007194:	080071b3 	.word	0x080071b3
 8007198:	080071a1 	.word	0x080071a1
 800719c:	0800723b 	.word	0x0800723b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d048      	beq.n	800723e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80071b0:	e045      	b.n	800723e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80071ba:	d142      	bne.n	8007242 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80071c0:	e03f      	b.n	8007242 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071ca:	d123      	bne.n	8007214 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d0:	2b03      	cmp	r3, #3
 80071d2:	d838      	bhi.n	8007246 <DMA_CheckFifoParam+0xda>
 80071d4:	a201      	add	r2, pc, #4	@ (adr r2, 80071dc <DMA_CheckFifoParam+0x70>)
 80071d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071da:	bf00      	nop
 80071dc:	080071ed 	.word	0x080071ed
 80071e0:	080071f3 	.word	0x080071f3
 80071e4:	080071ed 	.word	0x080071ed
 80071e8:	08007205 	.word	0x08007205
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	73fb      	strb	r3, [r7, #15]
        break;
 80071f0:	e030      	b.n	8007254 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d025      	beq.n	800724a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007202:	e022      	b.n	800724a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007208:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800720c:	d11f      	bne.n	800724e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007212:	e01c      	b.n	800724e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007218:	2b02      	cmp	r3, #2
 800721a:	d902      	bls.n	8007222 <DMA_CheckFifoParam+0xb6>
 800721c:	2b03      	cmp	r3, #3
 800721e:	d003      	beq.n	8007228 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007220:	e018      	b.n	8007254 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	73fb      	strb	r3, [r7, #15]
        break;
 8007226:	e015      	b.n	8007254 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800722c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00e      	beq.n	8007252 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	73fb      	strb	r3, [r7, #15]
    break;
 8007238:	e00b      	b.n	8007252 <DMA_CheckFifoParam+0xe6>
        break;
 800723a:	bf00      	nop
 800723c:	e00a      	b.n	8007254 <DMA_CheckFifoParam+0xe8>
        break;
 800723e:	bf00      	nop
 8007240:	e008      	b.n	8007254 <DMA_CheckFifoParam+0xe8>
        break;
 8007242:	bf00      	nop
 8007244:	e006      	b.n	8007254 <DMA_CheckFifoParam+0xe8>
        break;
 8007246:	bf00      	nop
 8007248:	e004      	b.n	8007254 <DMA_CheckFifoParam+0xe8>
        break;
 800724a:	bf00      	nop
 800724c:	e002      	b.n	8007254 <DMA_CheckFifoParam+0xe8>
        break;
 800724e:	bf00      	nop
 8007250:	e000      	b.n	8007254 <DMA_CheckFifoParam+0xe8>
    break;
 8007252:	bf00      	nop
    }
  }

  return status;
 8007254:	7bfb      	ldrb	r3, [r7, #15]
}
 8007256:	4618      	mov	r0, r3
 8007258:	3714      	adds	r7, #20
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop

08007264 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a38      	ldr	r2, [pc, #224]	@ (8007358 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d022      	beq.n	80072c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a36      	ldr	r2, [pc, #216]	@ (800735c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d01d      	beq.n	80072c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a35      	ldr	r2, [pc, #212]	@ (8007360 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d018      	beq.n	80072c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a33      	ldr	r2, [pc, #204]	@ (8007364 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d013      	beq.n	80072c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a32      	ldr	r2, [pc, #200]	@ (8007368 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d00e      	beq.n	80072c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a30      	ldr	r2, [pc, #192]	@ (800736c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d009      	beq.n	80072c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a2f      	ldr	r2, [pc, #188]	@ (8007370 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d004      	beq.n	80072c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a2d      	ldr	r2, [pc, #180]	@ (8007374 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d101      	bne.n	80072c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80072c2:	2301      	movs	r3, #1
 80072c4:	e000      	b.n	80072c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80072c6:	2300      	movs	r3, #0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d01a      	beq.n	8007302 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	3b08      	subs	r3, #8
 80072d4:	4a28      	ldr	r2, [pc, #160]	@ (8007378 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80072d6:	fba2 2303 	umull	r2, r3, r2, r3
 80072da:	091b      	lsrs	r3, r3, #4
 80072dc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	4b26      	ldr	r3, [pc, #152]	@ (800737c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80072e2:	4413      	add	r3, r2
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	461a      	mov	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a24      	ldr	r2, [pc, #144]	@ (8007380 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80072f0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f003 031f 	and.w	r3, r3, #31
 80072f8:	2201      	movs	r2, #1
 80072fa:	409a      	lsls	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007300:	e024      	b.n	800734c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	b2db      	uxtb	r3, r3
 8007308:	3b10      	subs	r3, #16
 800730a:	4a1e      	ldr	r2, [pc, #120]	@ (8007384 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800730c:	fba2 2303 	umull	r2, r3, r2, r3
 8007310:	091b      	lsrs	r3, r3, #4
 8007312:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	4a1c      	ldr	r2, [pc, #112]	@ (8007388 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d806      	bhi.n	800732a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	4a1b      	ldr	r2, [pc, #108]	@ (800738c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d902      	bls.n	800732a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	3308      	adds	r3, #8
 8007328:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	4b18      	ldr	r3, [pc, #96]	@ (8007390 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800732e:	4413      	add	r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	461a      	mov	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a16      	ldr	r2, [pc, #88]	@ (8007394 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800733c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f003 031f 	and.w	r3, r3, #31
 8007344:	2201      	movs	r2, #1
 8007346:	409a      	lsls	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800734c:	bf00      	nop
 800734e:	3714      	adds	r7, #20
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr
 8007358:	58025408 	.word	0x58025408
 800735c:	5802541c 	.word	0x5802541c
 8007360:	58025430 	.word	0x58025430
 8007364:	58025444 	.word	0x58025444
 8007368:	58025458 	.word	0x58025458
 800736c:	5802546c 	.word	0x5802546c
 8007370:	58025480 	.word	0x58025480
 8007374:	58025494 	.word	0x58025494
 8007378:	cccccccd 	.word	0xcccccccd
 800737c:	16009600 	.word	0x16009600
 8007380:	58025880 	.word	0x58025880
 8007384:	aaaaaaab 	.word	0xaaaaaaab
 8007388:	400204b8 	.word	0x400204b8
 800738c:	4002040f 	.word	0x4002040f
 8007390:	10008200 	.word	0x10008200
 8007394:	40020880 	.word	0x40020880

08007398 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d04a      	beq.n	8007444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2b08      	cmp	r3, #8
 80073b2:	d847      	bhi.n	8007444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a25      	ldr	r2, [pc, #148]	@ (8007450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d022      	beq.n	8007404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a24      	ldr	r2, [pc, #144]	@ (8007454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d01d      	beq.n	8007404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a22      	ldr	r2, [pc, #136]	@ (8007458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d018      	beq.n	8007404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a21      	ldr	r2, [pc, #132]	@ (800745c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d013      	beq.n	8007404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a1f      	ldr	r2, [pc, #124]	@ (8007460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d00e      	beq.n	8007404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a1e      	ldr	r2, [pc, #120]	@ (8007464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d009      	beq.n	8007404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a1c      	ldr	r2, [pc, #112]	@ (8007468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d004      	beq.n	8007404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a1b      	ldr	r2, [pc, #108]	@ (800746c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d101      	bne.n	8007408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007404:	2301      	movs	r3, #1
 8007406:	e000      	b.n	800740a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007408:	2300      	movs	r3, #0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00a      	beq.n	8007424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	4b17      	ldr	r3, [pc, #92]	@ (8007470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007412:	4413      	add	r3, r2
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	461a      	mov	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4a15      	ldr	r2, [pc, #84]	@ (8007474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007420:	671a      	str	r2, [r3, #112]	@ 0x70
 8007422:	e009      	b.n	8007438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	4b14      	ldr	r3, [pc, #80]	@ (8007478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007428:	4413      	add	r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	461a      	mov	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a11      	ldr	r2, [pc, #68]	@ (800747c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007436:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	3b01      	subs	r3, #1
 800743c:	2201      	movs	r2, #1
 800743e:	409a      	lsls	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8007444:	bf00      	nop
 8007446:	3714      	adds	r7, #20
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr
 8007450:	58025408 	.word	0x58025408
 8007454:	5802541c 	.word	0x5802541c
 8007458:	58025430 	.word	0x58025430
 800745c:	58025444 	.word	0x58025444
 8007460:	58025458 	.word	0x58025458
 8007464:	5802546c 	.word	0x5802546c
 8007468:	58025480 	.word	0x58025480
 800746c:	58025494 	.word	0x58025494
 8007470:	1600963f 	.word	0x1600963f
 8007474:	58025940 	.word	0x58025940
 8007478:	1000823f 	.word	0x1000823f
 800747c:	40020940 	.word	0x40020940

08007480 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b098      	sub	sp, #96	@ 0x60
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8007488:	4a84      	ldr	r2, [pc, #528]	@ (800769c <HAL_FDCAN_Init+0x21c>)
 800748a:	f107 030c 	add.w	r3, r7, #12
 800748e:	4611      	mov	r1, r2
 8007490:	224c      	movs	r2, #76	@ 0x4c
 8007492:	4618      	mov	r0, r3
 8007494:	f00c fe88 	bl	80141a8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d101      	bne.n	80074a2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e1c6      	b.n	8007830 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a7e      	ldr	r2, [pc, #504]	@ (80076a0 <HAL_FDCAN_Init+0x220>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d106      	bne.n	80074ba <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80074b4:	461a      	mov	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d106      	bne.n	80074d4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f7fb fa8c 	bl	80029ec <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	699a      	ldr	r2, [r3, #24]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f022 0210 	bic.w	r2, r2, #16
 80074e2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80074e4:	f7fc ff5a 	bl	800439c <HAL_GetTick>
 80074e8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80074ea:	e014      	b.n	8007516 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80074ec:	f7fc ff56 	bl	800439c <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	2b0a      	cmp	r3, #10
 80074f8:	d90d      	bls.n	8007516 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007500:	f043 0201 	orr.w	r2, r3, #1
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2203      	movs	r2, #3
 800750e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e18c      	b.n	8007830 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	f003 0308 	and.w	r3, r3, #8
 8007520:	2b08      	cmp	r3, #8
 8007522:	d0e3      	beq.n	80074ec <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	699a      	ldr	r2, [r3, #24]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f042 0201 	orr.w	r2, r2, #1
 8007532:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007534:	f7fc ff32 	bl	800439c <HAL_GetTick>
 8007538:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800753a:	e014      	b.n	8007566 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800753c:	f7fc ff2e 	bl	800439c <HAL_GetTick>
 8007540:	4602      	mov	r2, r0
 8007542:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007544:	1ad3      	subs	r3, r2, r3
 8007546:	2b0a      	cmp	r3, #10
 8007548:	d90d      	bls.n	8007566 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007550:	f043 0201 	orr.w	r2, r3, #1
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2203      	movs	r2, #3
 800755e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e164      	b.n	8007830 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	f003 0301 	and.w	r3, r3, #1
 8007570:	2b00      	cmp	r3, #0
 8007572:	d0e3      	beq.n	800753c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	699a      	ldr	r2, [r3, #24]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f042 0202 	orr.w	r2, r2, #2
 8007582:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	7c1b      	ldrb	r3, [r3, #16]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d108      	bne.n	800759e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	699a      	ldr	r2, [r3, #24]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800759a:	619a      	str	r2, [r3, #24]
 800759c:	e007      	b.n	80075ae <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	699a      	ldr	r2, [r3, #24]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075ac:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	7c5b      	ldrb	r3, [r3, #17]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d108      	bne.n	80075c8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	699a      	ldr	r2, [r3, #24]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80075c4:	619a      	str	r2, [r3, #24]
 80075c6:	e007      	b.n	80075d8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	699a      	ldr	r2, [r3, #24]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80075d6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	7c9b      	ldrb	r3, [r3, #18]
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d108      	bne.n	80075f2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	699a      	ldr	r2, [r3, #24]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80075ee:	619a      	str	r2, [r3, #24]
 80075f0:	e007      	b.n	8007602 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	699a      	ldr	r2, [r3, #24]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007600:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	689a      	ldr	r2, [r3, #8]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	430a      	orrs	r2, r1
 8007616:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	699a      	ldr	r2, [r3, #24]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8007626:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	691a      	ldr	r2, [r3, #16]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f022 0210 	bic.w	r2, r2, #16
 8007636:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d108      	bne.n	8007652 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	699a      	ldr	r2, [r3, #24]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f042 0204 	orr.w	r2, r2, #4
 800764e:	619a      	str	r2, [r3, #24]
 8007650:	e030      	b.n	80076b4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d02c      	beq.n	80076b4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	2b02      	cmp	r3, #2
 8007660:	d020      	beq.n	80076a4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	699a      	ldr	r2, [r3, #24]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007670:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	691a      	ldr	r2, [r3, #16]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f042 0210 	orr.w	r2, r2, #16
 8007680:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	2b03      	cmp	r3, #3
 8007688:	d114      	bne.n	80076b4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	699a      	ldr	r2, [r3, #24]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f042 0220 	orr.w	r2, r2, #32
 8007698:	619a      	str	r2, [r3, #24]
 800769a:	e00b      	b.n	80076b4 <HAL_FDCAN_Init+0x234>
 800769c:	0801445c 	.word	0x0801445c
 80076a0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	699a      	ldr	r2, [r3, #24]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f042 0220 	orr.w	r2, r2, #32
 80076b2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	699b      	ldr	r3, [r3, #24]
 80076b8:	3b01      	subs	r3, #1
 80076ba:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	69db      	ldr	r3, [r3, #28]
 80076c0:	3b01      	subs	r3, #1
 80076c2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80076c4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80076cc:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	695b      	ldr	r3, [r3, #20]
 80076d4:	3b01      	subs	r3, #1
 80076d6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80076dc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80076de:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076e8:	d115      	bne.n	8007716 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ee:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f4:	3b01      	subs	r3, #1
 80076f6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80076f8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076fe:	3b01      	subs	r3, #1
 8007700:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007702:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800770a:	3b01      	subs	r3, #1
 800770c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007712:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007714:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00a      	beq.n	8007734 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	430a      	orrs	r2, r1
 8007730:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800773c:	4413      	add	r3, r2
 800773e:	2b00      	cmp	r3, #0
 8007740:	d011      	beq.n	8007766 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800774a:	f023 0107 	bic.w	r1, r3, #7
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	3360      	adds	r3, #96	@ 0x60
 8007756:	443b      	add	r3, r7
 8007758:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	430a      	orrs	r2, r1
 8007762:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800776a:	2b00      	cmp	r3, #0
 800776c:	d011      	beq.n	8007792 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007776:	f023 0107 	bic.w	r1, r3, #7
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	3360      	adds	r3, #96	@ 0x60
 8007782:	443b      	add	r3, r7
 8007784:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	430a      	orrs	r2, r1
 800778e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007796:	2b00      	cmp	r3, #0
 8007798:	d012      	beq.n	80077c0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80077a2:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	3360      	adds	r3, #96	@ 0x60
 80077ae:	443b      	add	r3, r7
 80077b0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80077b4:	011a      	lsls	r2, r3, #4
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	430a      	orrs	r2, r1
 80077bc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d012      	beq.n	80077ee <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80077d0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	3360      	adds	r3, #96	@ 0x60
 80077dc:	443b      	add	r3, r7
 80077de:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80077e2:	021a      	lsls	r2, r3, #8
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	430a      	orrs	r2, r1
 80077ea:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a11      	ldr	r2, [pc, #68]	@ (8007838 <HAL_FDCAN_Init+0x3b8>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d107      	bne.n	8007808 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	689a      	ldr	r2, [r3, #8]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	f022 0203 	bic.w	r2, r2, #3
 8007806:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f80b 	bl	800783c <FDCAN_CalcultateRamBlockAddresses>
 8007826:	4603      	mov	r3, r0
 8007828:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 800782c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8007830:	4618      	mov	r0, r3
 8007832:	3760      	adds	r7, #96	@ 0x60
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	4000a000 	.word	0x4000a000

0800783c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800783c:	b480      	push	{r7}
 800783e:	b085      	sub	sp, #20
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007848:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007852:	4ba7      	ldr	r3, [pc, #668]	@ (8007af0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007854:	4013      	ands	r3, r2
 8007856:	68ba      	ldr	r2, [r7, #8]
 8007858:	0091      	lsls	r1, r2, #2
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	6812      	ldr	r2, [r2, #0]
 800785e:	430b      	orrs	r3, r1
 8007860:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800786c:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007874:	041a      	lsls	r2, r3, #16
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	430a      	orrs	r2, r1
 800787c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007884:	68ba      	ldr	r2, [r7, #8]
 8007886:	4413      	add	r3, r2
 8007888:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007892:	4b97      	ldr	r3, [pc, #604]	@ (8007af0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007894:	4013      	ands	r3, r2
 8007896:	68ba      	ldr	r2, [r7, #8]
 8007898:	0091      	lsls	r1, r2, #2
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	6812      	ldr	r2, [r2, #0]
 800789e:	430b      	orrs	r3, r1
 80078a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078ac:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078b4:	041a      	lsls	r2, r3, #16
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	430a      	orrs	r2, r1
 80078bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078c4:	005b      	lsls	r3, r3, #1
 80078c6:	68ba      	ldr	r2, [r7, #8]
 80078c8:	4413      	add	r3, r2
 80078ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80078d4:	4b86      	ldr	r3, [pc, #536]	@ (8007af0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80078d6:	4013      	ands	r3, r2
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	0091      	lsls	r1, r2, #2
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	6812      	ldr	r2, [r2, #0]
 80078e0:	430b      	orrs	r3, r1
 80078e2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80078ee:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078f6:	041a      	lsls	r2, r3, #16
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	430a      	orrs	r2, r1
 80078fe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800790a:	fb02 f303 	mul.w	r3, r2, r3
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	4413      	add	r3, r2
 8007912:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800791c:	4b74      	ldr	r3, [pc, #464]	@ (8007af0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800791e:	4013      	ands	r3, r2
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	0091      	lsls	r1, r2, #2
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	6812      	ldr	r2, [r2, #0]
 8007928:	430b      	orrs	r3, r1
 800792a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007936:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800793e:	041a      	lsls	r2, r3, #16
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	430a      	orrs	r2, r1
 8007946:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007952:	fb02 f303 	mul.w	r3, r2, r3
 8007956:	68ba      	ldr	r2, [r7, #8]
 8007958:	4413      	add	r3, r2
 800795a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8007964:	4b62      	ldr	r3, [pc, #392]	@ (8007af0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007966:	4013      	ands	r3, r2
 8007968:	68ba      	ldr	r2, [r7, #8]
 800796a:	0091      	lsls	r1, r2, #2
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	6812      	ldr	r2, [r2, #0]
 8007970:	430b      	orrs	r3, r1
 8007972:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800797e:	fb02 f303 	mul.w	r3, r2, r3
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	4413      	add	r3, r2
 8007986:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8007990:	4b57      	ldr	r3, [pc, #348]	@ (8007af0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007992:	4013      	ands	r3, r2
 8007994:	68ba      	ldr	r2, [r7, #8]
 8007996:	0091      	lsls	r1, r2, #2
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	6812      	ldr	r2, [r2, #0]
 800799c:	430b      	orrs	r3, r1
 800799e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079aa:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079b2:	041a      	lsls	r2, r3, #16
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	430a      	orrs	r2, r1
 80079ba:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079c2:	005b      	lsls	r3, r3, #1
 80079c4:	68ba      	ldr	r2, [r7, #8]
 80079c6:	4413      	add	r3, r2
 80079c8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80079d2:	4b47      	ldr	r3, [pc, #284]	@ (8007af0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079d4:	4013      	ands	r3, r2
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	0091      	lsls	r1, r2, #2
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	6812      	ldr	r2, [r2, #0]
 80079de:	430b      	orrs	r3, r1
 80079e0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80079ec:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079f4:	041a      	lsls	r2, r3, #16
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	430a      	orrs	r2, r1
 80079fc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007a08:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a10:	061a      	lsls	r2, r3, #24
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	430a      	orrs	r2, r1
 8007a18:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a20:	4b34      	ldr	r3, [pc, #208]	@ (8007af4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007a22:	4413      	add	r3, r2
 8007a24:	009a      	lsls	r2, r3, #2
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	441a      	add	r2, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a42:	00db      	lsls	r3, r3, #3
 8007a44:	441a      	add	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a52:	6879      	ldr	r1, [r7, #4]
 8007a54:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8007a56:	fb01 f303 	mul.w	r3, r1, r3
 8007a5a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8007a5c:	441a      	add	r2, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a6a:	6879      	ldr	r1, [r7, #4]
 8007a6c:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8007a6e:	fb01 f303 	mul.w	r3, r1, r3
 8007a72:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8007a74:	441a      	add	r2, r3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a82:	6879      	ldr	r1, [r7, #4]
 8007a84:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8007a86:	fb01 f303 	mul.w	r3, r1, r3
 8007a8a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8007a8c:	441a      	add	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a9e:	00db      	lsls	r3, r3, #3
 8007aa0:	441a      	add	r2, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ab2:	6879      	ldr	r1, [r7, #4]
 8007ab4:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8007ab6:	fb01 f303 	mul.w	r3, r1, r3
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	441a      	add	r2, r3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ace:	6879      	ldr	r1, [r7, #4]
 8007ad0:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8007ad2:	fb01 f303 	mul.w	r3, r1, r3
 8007ad6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8007ad8:	441a      	add	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ae6:	4a04      	ldr	r2, [pc, #16]	@ (8007af8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d915      	bls.n	8007b18 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007aec:	e006      	b.n	8007afc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007aee:	bf00      	nop
 8007af0:	ffff0003 	.word	0xffff0003
 8007af4:	10002b00 	.word	0x10002b00
 8007af8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b02:	f043 0220 	orr.w	r2, r3, #32
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2203      	movs	r2, #3
 8007b10:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e010      	b.n	8007b3a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b1c:	60fb      	str	r3, [r7, #12]
 8007b1e:	e005      	b.n	8007b2c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	3304      	adds	r3, #4
 8007b2a:	60fb      	str	r3, [r7, #12]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d3f3      	bcc.n	8007b20 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3714      	adds	r7, #20
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop

08007b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b089      	sub	sp, #36	@ 0x24
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007b52:	2300      	movs	r3, #0
 8007b54:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007b56:	4b89      	ldr	r3, [pc, #548]	@ (8007d7c <HAL_GPIO_Init+0x234>)
 8007b58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007b5a:	e194      	b.n	8007e86 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	2101      	movs	r1, #1
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	fa01 f303 	lsl.w	r3, r1, r3
 8007b68:	4013      	ands	r3, r2
 8007b6a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	f000 8186 	beq.w	8007e80 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	f003 0303 	and.w	r3, r3, #3
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d005      	beq.n	8007b8c <HAL_GPIO_Init+0x44>
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	f003 0303 	and.w	r3, r3, #3
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d130      	bne.n	8007bee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	005b      	lsls	r3, r3, #1
 8007b96:	2203      	movs	r2, #3
 8007b98:	fa02 f303 	lsl.w	r3, r2, r3
 8007b9c:	43db      	mvns	r3, r3
 8007b9e:	69ba      	ldr	r2, [r7, #24]
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	68da      	ldr	r2, [r3, #12]
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	005b      	lsls	r3, r3, #1
 8007bac:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb0:	69ba      	ldr	r2, [r7, #24]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	69ba      	ldr	r2, [r7, #24]
 8007bba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bca:	43db      	mvns	r3, r3
 8007bcc:	69ba      	ldr	r2, [r7, #24]
 8007bce:	4013      	ands	r3, r2
 8007bd0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	091b      	lsrs	r3, r3, #4
 8007bd8:	f003 0201 	and.w	r2, r3, #1
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	fa02 f303 	lsl.w	r3, r2, r3
 8007be2:	69ba      	ldr	r2, [r7, #24]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	69ba      	ldr	r2, [r7, #24]
 8007bec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	f003 0303 	and.w	r3, r3, #3
 8007bf6:	2b03      	cmp	r3, #3
 8007bf8:	d017      	beq.n	8007c2a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	005b      	lsls	r3, r3, #1
 8007c04:	2203      	movs	r2, #3
 8007c06:	fa02 f303 	lsl.w	r3, r2, r3
 8007c0a:	43db      	mvns	r3, r3
 8007c0c:	69ba      	ldr	r2, [r7, #24]
 8007c0e:	4013      	ands	r3, r2
 8007c10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	689a      	ldr	r2, [r3, #8]
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	005b      	lsls	r3, r3, #1
 8007c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c1e:	69ba      	ldr	r2, [r7, #24]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	69ba      	ldr	r2, [r7, #24]
 8007c28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	f003 0303 	and.w	r3, r3, #3
 8007c32:	2b02      	cmp	r3, #2
 8007c34:	d123      	bne.n	8007c7e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	08da      	lsrs	r2, r3, #3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	3208      	adds	r2, #8
 8007c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	f003 0307 	and.w	r3, r3, #7
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	220f      	movs	r2, #15
 8007c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c52:	43db      	mvns	r3, r3
 8007c54:	69ba      	ldr	r2, [r7, #24]
 8007c56:	4013      	ands	r3, r2
 8007c58:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	691a      	ldr	r2, [r3, #16]
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	f003 0307 	and.w	r3, r3, #7
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6a:	69ba      	ldr	r2, [r7, #24]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	08da      	lsrs	r2, r3, #3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	3208      	adds	r2, #8
 8007c78:	69b9      	ldr	r1, [r7, #24]
 8007c7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	005b      	lsls	r3, r3, #1
 8007c88:	2203      	movs	r2, #3
 8007c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c8e:	43db      	mvns	r3, r3
 8007c90:	69ba      	ldr	r2, [r7, #24]
 8007c92:	4013      	ands	r3, r2
 8007c94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	f003 0203 	and.w	r2, r3, #3
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	005b      	lsls	r3, r3, #1
 8007ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca6:	69ba      	ldr	r2, [r7, #24]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	69ba      	ldr	r2, [r7, #24]
 8007cb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f000 80e0 	beq.w	8007e80 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007cc0:	4b2f      	ldr	r3, [pc, #188]	@ (8007d80 <HAL_GPIO_Init+0x238>)
 8007cc2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8007cc6:	4a2e      	ldr	r2, [pc, #184]	@ (8007d80 <HAL_GPIO_Init+0x238>)
 8007cc8:	f043 0302 	orr.w	r3, r3, #2
 8007ccc:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8007cd0:	4b2b      	ldr	r3, [pc, #172]	@ (8007d80 <HAL_GPIO_Init+0x238>)
 8007cd2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8007cd6:	f003 0302 	and.w	r3, r3, #2
 8007cda:	60fb      	str	r3, [r7, #12]
 8007cdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007cde:	4a29      	ldr	r2, [pc, #164]	@ (8007d84 <HAL_GPIO_Init+0x23c>)
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	089b      	lsrs	r3, r3, #2
 8007ce4:	3302      	adds	r3, #2
 8007ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	f003 0303 	and.w	r3, r3, #3
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	220f      	movs	r2, #15
 8007cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cfa:	43db      	mvns	r3, r3
 8007cfc:	69ba      	ldr	r2, [r7, #24]
 8007cfe:	4013      	ands	r3, r2
 8007d00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a20      	ldr	r2, [pc, #128]	@ (8007d88 <HAL_GPIO_Init+0x240>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d052      	beq.n	8007db0 <HAL_GPIO_Init+0x268>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a1f      	ldr	r2, [pc, #124]	@ (8007d8c <HAL_GPIO_Init+0x244>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d031      	beq.n	8007d76 <HAL_GPIO_Init+0x22e>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a1e      	ldr	r2, [pc, #120]	@ (8007d90 <HAL_GPIO_Init+0x248>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d02b      	beq.n	8007d72 <HAL_GPIO_Init+0x22a>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8007d94 <HAL_GPIO_Init+0x24c>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d025      	beq.n	8007d6e <HAL_GPIO_Init+0x226>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a1c      	ldr	r2, [pc, #112]	@ (8007d98 <HAL_GPIO_Init+0x250>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d01f      	beq.n	8007d6a <HAL_GPIO_Init+0x222>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a1b      	ldr	r2, [pc, #108]	@ (8007d9c <HAL_GPIO_Init+0x254>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d019      	beq.n	8007d66 <HAL_GPIO_Init+0x21e>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4a1a      	ldr	r2, [pc, #104]	@ (8007da0 <HAL_GPIO_Init+0x258>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d013      	beq.n	8007d62 <HAL_GPIO_Init+0x21a>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a19      	ldr	r2, [pc, #100]	@ (8007da4 <HAL_GPIO_Init+0x25c>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d00d      	beq.n	8007d5e <HAL_GPIO_Init+0x216>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a18      	ldr	r2, [pc, #96]	@ (8007da8 <HAL_GPIO_Init+0x260>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d007      	beq.n	8007d5a <HAL_GPIO_Init+0x212>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4a17      	ldr	r2, [pc, #92]	@ (8007dac <HAL_GPIO_Init+0x264>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d101      	bne.n	8007d56 <HAL_GPIO_Init+0x20e>
 8007d52:	2309      	movs	r3, #9
 8007d54:	e02d      	b.n	8007db2 <HAL_GPIO_Init+0x26a>
 8007d56:	230a      	movs	r3, #10
 8007d58:	e02b      	b.n	8007db2 <HAL_GPIO_Init+0x26a>
 8007d5a:	2308      	movs	r3, #8
 8007d5c:	e029      	b.n	8007db2 <HAL_GPIO_Init+0x26a>
 8007d5e:	2307      	movs	r3, #7
 8007d60:	e027      	b.n	8007db2 <HAL_GPIO_Init+0x26a>
 8007d62:	2306      	movs	r3, #6
 8007d64:	e025      	b.n	8007db2 <HAL_GPIO_Init+0x26a>
 8007d66:	2305      	movs	r3, #5
 8007d68:	e023      	b.n	8007db2 <HAL_GPIO_Init+0x26a>
 8007d6a:	2304      	movs	r3, #4
 8007d6c:	e021      	b.n	8007db2 <HAL_GPIO_Init+0x26a>
 8007d6e:	2303      	movs	r3, #3
 8007d70:	e01f      	b.n	8007db2 <HAL_GPIO_Init+0x26a>
 8007d72:	2302      	movs	r3, #2
 8007d74:	e01d      	b.n	8007db2 <HAL_GPIO_Init+0x26a>
 8007d76:	2301      	movs	r3, #1
 8007d78:	e01b      	b.n	8007db2 <HAL_GPIO_Init+0x26a>
 8007d7a:	bf00      	nop
 8007d7c:	58000080 	.word	0x58000080
 8007d80:	58024400 	.word	0x58024400
 8007d84:	58000400 	.word	0x58000400
 8007d88:	58020000 	.word	0x58020000
 8007d8c:	58020400 	.word	0x58020400
 8007d90:	58020800 	.word	0x58020800
 8007d94:	58020c00 	.word	0x58020c00
 8007d98:	58021000 	.word	0x58021000
 8007d9c:	58021400 	.word	0x58021400
 8007da0:	58021800 	.word	0x58021800
 8007da4:	58021c00 	.word	0x58021c00
 8007da8:	58022000 	.word	0x58022000
 8007dac:	58022400 	.word	0x58022400
 8007db0:	2300      	movs	r3, #0
 8007db2:	69fa      	ldr	r2, [r7, #28]
 8007db4:	f002 0203 	and.w	r2, r2, #3
 8007db8:	0092      	lsls	r2, r2, #2
 8007dba:	4093      	lsls	r3, r2
 8007dbc:	69ba      	ldr	r2, [r7, #24]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007dc2:	4938      	ldr	r1, [pc, #224]	@ (8007ea4 <HAL_GPIO_Init+0x35c>)
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	089b      	lsrs	r3, r3, #2
 8007dc8:	3302      	adds	r3, #2
 8007dca:	69ba      	ldr	r2, [r7, #24]
 8007dcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007dd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	43db      	mvns	r3, r3
 8007ddc:	69ba      	ldr	r2, [r7, #24]
 8007dde:	4013      	ands	r3, r2
 8007de0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d003      	beq.n	8007df6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007dee:	69ba      	ldr	r2, [r7, #24]
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007df6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007dfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	43db      	mvns	r3, r3
 8007e0a:	69ba      	ldr	r2, [r7, #24]
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d003      	beq.n	8007e24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007e1c:	69ba      	ldr	r2, [r7, #24]
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007e24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	43db      	mvns	r3, r3
 8007e36:	69ba      	ldr	r2, [r7, #24]
 8007e38:	4013      	ands	r3, r2
 8007e3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d003      	beq.n	8007e50 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007e48:	69ba      	ldr	r2, [r7, #24]
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	69ba      	ldr	r2, [r7, #24]
 8007e54:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	43db      	mvns	r3, r3
 8007e60:	69ba      	ldr	r2, [r7, #24]
 8007e62:	4013      	ands	r3, r2
 8007e64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d003      	beq.n	8007e7a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007e72:	69ba      	ldr	r2, [r7, #24]
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	69ba      	ldr	r2, [r7, #24]
 8007e7e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	3301      	adds	r3, #1
 8007e84:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f47f ae63 	bne.w	8007b5c <HAL_GPIO_Init+0x14>
  }
}
 8007e96:	bf00      	nop
 8007e98:	bf00      	nop
 8007e9a:	3724      	adds	r7, #36	@ 0x24
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr
 8007ea4:	58000400 	.word	0x58000400

08007ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	807b      	strh	r3, [r7, #2]
 8007eb4:	4613      	mov	r3, r2
 8007eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007eb8:	787b      	ldrb	r3, [r7, #1]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d003      	beq.n	8007ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007ebe:	887a      	ldrh	r2, [r7, #2]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007ec4:	e003      	b.n	8007ece <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007ec6:	887b      	ldrh	r3, [r7, #2]
 8007ec8:	041a      	lsls	r2, r3, #16
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	619a      	str	r2, [r3, #24]
}
 8007ece:	bf00      	nop
 8007ed0:	370c      	adds	r7, #12
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr
	...

08007edc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d101      	bne.n	8007eee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e08b      	b.n	8008006 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d106      	bne.n	8007f08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f7fa fede 	bl	8002cc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2224      	movs	r2, #36	@ 0x24
 8007f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f022 0201 	bic.w	r2, r2, #1
 8007f1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	685a      	ldr	r2, [r3, #4]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007f2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	689a      	ldr	r2, [r3, #8]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007f3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d107      	bne.n	8007f56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	689a      	ldr	r2, [r3, #8]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007f52:	609a      	str	r2, [r3, #8]
 8007f54:	e006      	b.n	8007f64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	689a      	ldr	r2, [r3, #8]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007f62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	2b02      	cmp	r3, #2
 8007f6a:	d108      	bne.n	8007f7e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	685a      	ldr	r2, [r3, #4]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f7a:	605a      	str	r2, [r3, #4]
 8007f7c:	e007      	b.n	8007f8e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	685a      	ldr	r2, [r3, #4]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007f8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	6859      	ldr	r1, [r3, #4]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	4b1d      	ldr	r3, [pc, #116]	@ (8008010 <HAL_I2C_Init+0x134>)
 8007f9a:	430b      	orrs	r3, r1
 8007f9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68da      	ldr	r2, [r3, #12]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007fac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	691a      	ldr	r2, [r3, #16]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	695b      	ldr	r3, [r3, #20]
 8007fb6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	699b      	ldr	r3, [r3, #24]
 8007fbe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	430a      	orrs	r2, r1
 8007fc6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	69d9      	ldr	r1, [r3, #28]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6a1a      	ldr	r2, [r3, #32]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	430a      	orrs	r2, r1
 8007fd6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f042 0201 	orr.w	r2, r2, #1
 8007fe6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2220      	movs	r2, #32
 8007ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3708      	adds	r7, #8
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	02008000 	.word	0x02008000

08008014 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2b20      	cmp	r3, #32
 8008028:	d138      	bne.n	800809c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008030:	2b01      	cmp	r3, #1
 8008032:	d101      	bne.n	8008038 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008034:	2302      	movs	r3, #2
 8008036:	e032      	b.n	800809e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2224      	movs	r2, #36	@ 0x24
 8008044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f022 0201 	bic.w	r2, r2, #1
 8008056:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008066:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	6819      	ldr	r1, [r3, #0]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	683a      	ldr	r2, [r7, #0]
 8008074:	430a      	orrs	r2, r1
 8008076:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f042 0201 	orr.w	r2, r2, #1
 8008086:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2220      	movs	r2, #32
 800808c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008098:	2300      	movs	r3, #0
 800809a:	e000      	b.n	800809e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800809c:	2302      	movs	r3, #2
  }
}
 800809e:	4618      	mov	r0, r3
 80080a0:	370c      	adds	r7, #12
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr

080080aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80080aa:	b480      	push	{r7}
 80080ac:	b085      	sub	sp, #20
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	2b20      	cmp	r3, #32
 80080be:	d139      	bne.n	8008134 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d101      	bne.n	80080ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80080ca:	2302      	movs	r3, #2
 80080cc:	e033      	b.n	8008136 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2224      	movs	r2, #36	@ 0x24
 80080da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f022 0201 	bic.w	r2, r2, #1
 80080ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80080fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	021b      	lsls	r3, r3, #8
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	4313      	orrs	r3, r2
 8008106:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f042 0201 	orr.w	r2, r2, #1
 800811e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2220      	movs	r2, #32
 8008124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008130:	2300      	movs	r3, #0
 8008132:	e000      	b.n	8008136 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008134:	2302      	movs	r3, #2
  }
}
 8008136:	4618      	mov	r0, r3
 8008138:	3714      	adds	r7, #20
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr
	...

08008144 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800814c:	4b19      	ldr	r3, [pc, #100]	@ (80081b4 <HAL_PWREx_ConfigSupply+0x70>)
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	f003 0304 	and.w	r3, r3, #4
 8008154:	2b04      	cmp	r3, #4
 8008156:	d00a      	beq.n	800816e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008158:	4b16      	ldr	r3, [pc, #88]	@ (80081b4 <HAL_PWREx_ConfigSupply+0x70>)
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	f003 0307 	and.w	r3, r3, #7
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	429a      	cmp	r2, r3
 8008164:	d001      	beq.n	800816a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	e01f      	b.n	80081aa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800816a:	2300      	movs	r3, #0
 800816c:	e01d      	b.n	80081aa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800816e:	4b11      	ldr	r3, [pc, #68]	@ (80081b4 <HAL_PWREx_ConfigSupply+0x70>)
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	f023 0207 	bic.w	r2, r3, #7
 8008176:	490f      	ldr	r1, [pc, #60]	@ (80081b4 <HAL_PWREx_ConfigSupply+0x70>)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4313      	orrs	r3, r2
 800817c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800817e:	f7fc f90d 	bl	800439c <HAL_GetTick>
 8008182:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008184:	e009      	b.n	800819a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008186:	f7fc f909 	bl	800439c <HAL_GetTick>
 800818a:	4602      	mov	r2, r0
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	1ad3      	subs	r3, r2, r3
 8008190:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008194:	d901      	bls.n	800819a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e007      	b.n	80081aa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800819a:	4b06      	ldr	r3, [pc, #24]	@ (80081b4 <HAL_PWREx_ConfigSupply+0x70>)
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80081a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081a6:	d1ee      	bne.n	8008186 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	58024800 	.word	0x58024800

080081b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b08c      	sub	sp, #48	@ 0x30
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d102      	bne.n	80081cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	f000 bc1f 	b.w	8008a0a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 0301 	and.w	r3, r3, #1
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f000 80b3 	beq.w	8008340 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081da:	4b95      	ldr	r3, [pc, #596]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80081e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80081e4:	4b92      	ldr	r3, [pc, #584]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 80081e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80081ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ec:	2b10      	cmp	r3, #16
 80081ee:	d007      	beq.n	8008200 <HAL_RCC_OscConfig+0x48>
 80081f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081f2:	2b18      	cmp	r3, #24
 80081f4:	d112      	bne.n	800821c <HAL_RCC_OscConfig+0x64>
 80081f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081f8:	f003 0303 	and.w	r3, r3, #3
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	d10d      	bne.n	800821c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008200:	4b8b      	ldr	r3, [pc, #556]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008208:	2b00      	cmp	r3, #0
 800820a:	f000 8098 	beq.w	800833e <HAL_RCC_OscConfig+0x186>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	2b00      	cmp	r3, #0
 8008214:	f040 8093 	bne.w	800833e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	e3f6      	b.n	8008a0a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008224:	d106      	bne.n	8008234 <HAL_RCC_OscConfig+0x7c>
 8008226:	4b82      	ldr	r3, [pc, #520]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a81      	ldr	r2, [pc, #516]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 800822c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008230:	6013      	str	r3, [r2, #0]
 8008232:	e058      	b.n	80082e6 <HAL_RCC_OscConfig+0x12e>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d112      	bne.n	8008262 <HAL_RCC_OscConfig+0xaa>
 800823c:	4b7c      	ldr	r3, [pc, #496]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a7b      	ldr	r2, [pc, #492]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 8008242:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008246:	6013      	str	r3, [r2, #0]
 8008248:	4b79      	ldr	r3, [pc, #484]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a78      	ldr	r2, [pc, #480]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 800824e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008252:	6013      	str	r3, [r2, #0]
 8008254:	4b76      	ldr	r3, [pc, #472]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a75      	ldr	r2, [pc, #468]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 800825a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800825e:	6013      	str	r3, [r2, #0]
 8008260:	e041      	b.n	80082e6 <HAL_RCC_OscConfig+0x12e>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800826a:	d112      	bne.n	8008292 <HAL_RCC_OscConfig+0xda>
 800826c:	4b70      	ldr	r3, [pc, #448]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a6f      	ldr	r2, [pc, #444]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 8008272:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008276:	6013      	str	r3, [r2, #0]
 8008278:	4b6d      	ldr	r3, [pc, #436]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a6c      	ldr	r2, [pc, #432]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 800827e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008282:	6013      	str	r3, [r2, #0]
 8008284:	4b6a      	ldr	r3, [pc, #424]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a69      	ldr	r2, [pc, #420]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 800828a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800828e:	6013      	str	r3, [r2, #0]
 8008290:	e029      	b.n	80082e6 <HAL_RCC_OscConfig+0x12e>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800829a:	d112      	bne.n	80082c2 <HAL_RCC_OscConfig+0x10a>
 800829c:	4b64      	ldr	r3, [pc, #400]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a63      	ldr	r2, [pc, #396]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 80082a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80082a6:	6013      	str	r3, [r2, #0]
 80082a8:	4b61      	ldr	r3, [pc, #388]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a60      	ldr	r2, [pc, #384]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 80082ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80082b2:	6013      	str	r3, [r2, #0]
 80082b4:	4b5e      	ldr	r3, [pc, #376]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a5d      	ldr	r2, [pc, #372]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 80082ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80082be:	6013      	str	r3, [r2, #0]
 80082c0:	e011      	b.n	80082e6 <HAL_RCC_OscConfig+0x12e>
 80082c2:	4b5b      	ldr	r3, [pc, #364]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a5a      	ldr	r2, [pc, #360]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 80082c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082cc:	6013      	str	r3, [r2, #0]
 80082ce:	4b58      	ldr	r3, [pc, #352]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a57      	ldr	r2, [pc, #348]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 80082d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80082d8:	6013      	str	r3, [r2, #0]
 80082da:	4b55      	ldr	r3, [pc, #340]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a54      	ldr	r2, [pc, #336]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 80082e0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80082e4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d013      	beq.n	8008316 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082ee:	f7fc f855 	bl	800439c <HAL_GetTick>
 80082f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80082f4:	e008      	b.n	8008308 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082f6:	f7fc f851 	bl	800439c <HAL_GetTick>
 80082fa:	4602      	mov	r2, r0
 80082fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	2b64      	cmp	r3, #100	@ 0x64
 8008302:	d901      	bls.n	8008308 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8008304:	2303      	movs	r3, #3
 8008306:	e380      	b.n	8008a0a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008308:	4b49      	ldr	r3, [pc, #292]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008310:	2b00      	cmp	r3, #0
 8008312:	d0f0      	beq.n	80082f6 <HAL_RCC_OscConfig+0x13e>
 8008314:	e014      	b.n	8008340 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008316:	f7fc f841 	bl	800439c <HAL_GetTick>
 800831a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800831c:	e008      	b.n	8008330 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800831e:	f7fc f83d 	bl	800439c <HAL_GetTick>
 8008322:	4602      	mov	r2, r0
 8008324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008326:	1ad3      	subs	r3, r2, r3
 8008328:	2b64      	cmp	r3, #100	@ 0x64
 800832a:	d901      	bls.n	8008330 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800832c:	2303      	movs	r3, #3
 800832e:	e36c      	b.n	8008a0a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008330:	4b3f      	ldr	r3, [pc, #252]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1f0      	bne.n	800831e <HAL_RCC_OscConfig+0x166>
 800833c:	e000      	b.n	8008340 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800833e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 0302 	and.w	r3, r3, #2
 8008348:	2b00      	cmp	r3, #0
 800834a:	f000 808c 	beq.w	8008466 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800834e:	4b38      	ldr	r3, [pc, #224]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008356:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008358:	4b35      	ldr	r3, [pc, #212]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 800835a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800835c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800835e:	6a3b      	ldr	r3, [r7, #32]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d007      	beq.n	8008374 <HAL_RCC_OscConfig+0x1bc>
 8008364:	6a3b      	ldr	r3, [r7, #32]
 8008366:	2b18      	cmp	r3, #24
 8008368:	d137      	bne.n	80083da <HAL_RCC_OscConfig+0x222>
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	f003 0303 	and.w	r3, r3, #3
 8008370:	2b00      	cmp	r3, #0
 8008372:	d132      	bne.n	80083da <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008374:	4b2e      	ldr	r3, [pc, #184]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 0304 	and.w	r3, r3, #4
 800837c:	2b00      	cmp	r3, #0
 800837e:	d005      	beq.n	800838c <HAL_RCC_OscConfig+0x1d4>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d101      	bne.n	800838c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	e33e      	b.n	8008a0a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800838c:	4b28      	ldr	r3, [pc, #160]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f023 0219 	bic.w	r2, r3, #25
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	4925      	ldr	r1, [pc, #148]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 800839a:	4313      	orrs	r3, r2
 800839c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800839e:	f7fb fffd 	bl	800439c <HAL_GetTick>
 80083a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083a4:	e008      	b.n	80083b8 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80083a6:	f7fb fff9 	bl	800439c <HAL_GetTick>
 80083aa:	4602      	mov	r2, r0
 80083ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	2b02      	cmp	r3, #2
 80083b2:	d901      	bls.n	80083b8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80083b4:	2303      	movs	r3, #3
 80083b6:	e328      	b.n	8008a0a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083b8:	4b1d      	ldr	r3, [pc, #116]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 0304 	and.w	r3, r3, #4
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d0f0      	beq.n	80083a6 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083c4:	4b1a      	ldr	r3, [pc, #104]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	061b      	lsls	r3, r3, #24
 80083d2:	4917      	ldr	r1, [pc, #92]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 80083d4:	4313      	orrs	r3, r2
 80083d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083d8:	e045      	b.n	8008466 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d028      	beq.n	8008434 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80083e2:	4b13      	ldr	r3, [pc, #76]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f023 0219 	bic.w	r2, r3, #25
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	68db      	ldr	r3, [r3, #12]
 80083ee:	4910      	ldr	r1, [pc, #64]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 80083f0:	4313      	orrs	r3, r2
 80083f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083f4:	f7fb ffd2 	bl	800439c <HAL_GetTick>
 80083f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083fa:	e008      	b.n	800840e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80083fc:	f7fb ffce 	bl	800439c <HAL_GetTick>
 8008400:	4602      	mov	r2, r0
 8008402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008404:	1ad3      	subs	r3, r2, r3
 8008406:	2b02      	cmp	r3, #2
 8008408:	d901      	bls.n	800840e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800840a:	2303      	movs	r3, #3
 800840c:	e2fd      	b.n	8008a0a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800840e:	4b08      	ldr	r3, [pc, #32]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f003 0304 	and.w	r3, r3, #4
 8008416:	2b00      	cmp	r3, #0
 8008418:	d0f0      	beq.n	80083fc <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800841a:	4b05      	ldr	r3, [pc, #20]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	061b      	lsls	r3, r3, #24
 8008428:	4901      	ldr	r1, [pc, #4]	@ (8008430 <HAL_RCC_OscConfig+0x278>)
 800842a:	4313      	orrs	r3, r2
 800842c:	604b      	str	r3, [r1, #4]
 800842e:	e01a      	b.n	8008466 <HAL_RCC_OscConfig+0x2ae>
 8008430:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008434:	4b97      	ldr	r3, [pc, #604]	@ (8008694 <HAL_RCC_OscConfig+0x4dc>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a96      	ldr	r2, [pc, #600]	@ (8008694 <HAL_RCC_OscConfig+0x4dc>)
 800843a:	f023 0301 	bic.w	r3, r3, #1
 800843e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008440:	f7fb ffac 	bl	800439c <HAL_GetTick>
 8008444:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008446:	e008      	b.n	800845a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008448:	f7fb ffa8 	bl	800439c <HAL_GetTick>
 800844c:	4602      	mov	r2, r0
 800844e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008450:	1ad3      	subs	r3, r2, r3
 8008452:	2b02      	cmp	r3, #2
 8008454:	d901      	bls.n	800845a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8008456:	2303      	movs	r3, #3
 8008458:	e2d7      	b.n	8008a0a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800845a:	4b8e      	ldr	r3, [pc, #568]	@ (8008694 <HAL_RCC_OscConfig+0x4dc>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 0304 	and.w	r3, r3, #4
 8008462:	2b00      	cmp	r3, #0
 8008464:	d1f0      	bne.n	8008448 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f003 0310 	and.w	r3, r3, #16
 800846e:	2b00      	cmp	r3, #0
 8008470:	d06a      	beq.n	8008548 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008472:	4b88      	ldr	r3, [pc, #544]	@ (8008694 <HAL_RCC_OscConfig+0x4dc>)
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800847a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800847c:	4b85      	ldr	r3, [pc, #532]	@ (8008694 <HAL_RCC_OscConfig+0x4dc>)
 800847e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008480:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008482:	69bb      	ldr	r3, [r7, #24]
 8008484:	2b08      	cmp	r3, #8
 8008486:	d007      	beq.n	8008498 <HAL_RCC_OscConfig+0x2e0>
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	2b18      	cmp	r3, #24
 800848c:	d11b      	bne.n	80084c6 <HAL_RCC_OscConfig+0x30e>
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	f003 0303 	and.w	r3, r3, #3
 8008494:	2b01      	cmp	r3, #1
 8008496:	d116      	bne.n	80084c6 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008498:	4b7e      	ldr	r3, [pc, #504]	@ (8008694 <HAL_RCC_OscConfig+0x4dc>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d005      	beq.n	80084b0 <HAL_RCC_OscConfig+0x2f8>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	69db      	ldr	r3, [r3, #28]
 80084a8:	2b80      	cmp	r3, #128	@ 0x80
 80084aa:	d001      	beq.n	80084b0 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	e2ac      	b.n	8008a0a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80084b0:	4b78      	ldr	r3, [pc, #480]	@ (8008694 <HAL_RCC_OscConfig+0x4dc>)
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6a1b      	ldr	r3, [r3, #32]
 80084bc:	061b      	lsls	r3, r3, #24
 80084be:	4975      	ldr	r1, [pc, #468]	@ (8008694 <HAL_RCC_OscConfig+0x4dc>)
 80084c0:	4313      	orrs	r3, r2
 80084c2:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80084c4:	e040      	b.n	8008548 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	69db      	ldr	r3, [r3, #28]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d023      	beq.n	8008516 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80084ce:	4b71      	ldr	r3, [pc, #452]	@ (8008694 <HAL_RCC_OscConfig+0x4dc>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a70      	ldr	r2, [pc, #448]	@ (8008694 <HAL_RCC_OscConfig+0x4dc>)
 80084d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084da:	f7fb ff5f 	bl	800439c <HAL_GetTick>
 80084de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80084e0:	e008      	b.n	80084f4 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80084e2:	f7fb ff5b 	bl	800439c <HAL_GetTick>
 80084e6:	4602      	mov	r2, r0
 80084e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ea:	1ad3      	subs	r3, r2, r3
 80084ec:	2b02      	cmp	r3, #2
 80084ee:	d901      	bls.n	80084f4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80084f0:	2303      	movs	r3, #3
 80084f2:	e28a      	b.n	8008a0a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80084f4:	4b67      	ldr	r3, [pc, #412]	@ (8008694 <HAL_RCC_OscConfig+0x4dc>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d0f0      	beq.n	80084e2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008500:	4b64      	ldr	r3, [pc, #400]	@ (8008694 <HAL_RCC_OscConfig+0x4dc>)
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6a1b      	ldr	r3, [r3, #32]
 800850c:	061b      	lsls	r3, r3, #24
 800850e:	4961      	ldr	r1, [pc, #388]	@ (8008694 <HAL_RCC_OscConfig+0x4dc>)
 8008510:	4313      	orrs	r3, r2
 8008512:	60cb      	str	r3, [r1, #12]
 8008514:	e018      	b.n	8008548 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008516:	4b5f      	ldr	r3, [pc, #380]	@ (8008694 <HAL_RCC_OscConfig+0x4dc>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a5e      	ldr	r2, [pc, #376]	@ (8008694 <HAL_RCC_OscConfig+0x4dc>)
 800851c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008520:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008522:	f7fb ff3b 	bl	800439c <HAL_GetTick>
 8008526:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008528:	e008      	b.n	800853c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800852a:	f7fb ff37 	bl	800439c <HAL_GetTick>
 800852e:	4602      	mov	r2, r0
 8008530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008532:	1ad3      	subs	r3, r2, r3
 8008534:	2b02      	cmp	r3, #2
 8008536:	d901      	bls.n	800853c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8008538:	2303      	movs	r3, #3
 800853a:	e266      	b.n	8008a0a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800853c:	4b55      	ldr	r3, [pc, #340]	@ (8008694 <HAL_RCC_OscConfig+0x4dc>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008544:	2b00      	cmp	r3, #0
 8008546:	d1f0      	bne.n	800852a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 0308 	and.w	r3, r3, #8
 8008550:	2b00      	cmp	r3, #0
 8008552:	d036      	beq.n	80085c2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	695b      	ldr	r3, [r3, #20]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d019      	beq.n	8008590 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800855c:	4b4d      	ldr	r3, [pc, #308]	@ (8008694 <HAL_RCC_OscConfig+0x4dc>)
 800855e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008560:	4a4c      	ldr	r2, [pc, #304]	@ (8008694 <HAL_RCC_OscConfig+0x4dc>)
 8008562:	f043 0301 	orr.w	r3, r3, #1
 8008566:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008568:	f7fb ff18 	bl	800439c <HAL_GetTick>
 800856c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800856e:	e008      	b.n	8008582 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008570:	f7fb ff14 	bl	800439c <HAL_GetTick>
 8008574:	4602      	mov	r2, r0
 8008576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008578:	1ad3      	subs	r3, r2, r3
 800857a:	2b02      	cmp	r3, #2
 800857c:	d901      	bls.n	8008582 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800857e:	2303      	movs	r3, #3
 8008580:	e243      	b.n	8008a0a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008582:	4b44      	ldr	r3, [pc, #272]	@ (8008694 <HAL_RCC_OscConfig+0x4dc>)
 8008584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008586:	f003 0302 	and.w	r3, r3, #2
 800858a:	2b00      	cmp	r3, #0
 800858c:	d0f0      	beq.n	8008570 <HAL_RCC_OscConfig+0x3b8>
 800858e:	e018      	b.n	80085c2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008590:	4b40      	ldr	r3, [pc, #256]	@ (8008694 <HAL_RCC_OscConfig+0x4dc>)
 8008592:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008594:	4a3f      	ldr	r2, [pc, #252]	@ (8008694 <HAL_RCC_OscConfig+0x4dc>)
 8008596:	f023 0301 	bic.w	r3, r3, #1
 800859a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800859c:	f7fb fefe 	bl	800439c <HAL_GetTick>
 80085a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80085a2:	e008      	b.n	80085b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085a4:	f7fb fefa 	bl	800439c <HAL_GetTick>
 80085a8:	4602      	mov	r2, r0
 80085aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	d901      	bls.n	80085b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80085b2:	2303      	movs	r3, #3
 80085b4:	e229      	b.n	8008a0a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80085b6:	4b37      	ldr	r3, [pc, #220]	@ (8008694 <HAL_RCC_OscConfig+0x4dc>)
 80085b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085ba:	f003 0302 	and.w	r3, r3, #2
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1f0      	bne.n	80085a4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 0320 	and.w	r3, r3, #32
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d036      	beq.n	800863c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d019      	beq.n	800860a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80085d6:	4b2f      	ldr	r3, [pc, #188]	@ (8008694 <HAL_RCC_OscConfig+0x4dc>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a2e      	ldr	r2, [pc, #184]	@ (8008694 <HAL_RCC_OscConfig+0x4dc>)
 80085dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80085e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80085e2:	f7fb fedb 	bl	800439c <HAL_GetTick>
 80085e6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80085e8:	e008      	b.n	80085fc <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80085ea:	f7fb fed7 	bl	800439c <HAL_GetTick>
 80085ee:	4602      	mov	r2, r0
 80085f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f2:	1ad3      	subs	r3, r2, r3
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d901      	bls.n	80085fc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80085f8:	2303      	movs	r3, #3
 80085fa:	e206      	b.n	8008a0a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80085fc:	4b25      	ldr	r3, [pc, #148]	@ (8008694 <HAL_RCC_OscConfig+0x4dc>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008604:	2b00      	cmp	r3, #0
 8008606:	d0f0      	beq.n	80085ea <HAL_RCC_OscConfig+0x432>
 8008608:	e018      	b.n	800863c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800860a:	4b22      	ldr	r3, [pc, #136]	@ (8008694 <HAL_RCC_OscConfig+0x4dc>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a21      	ldr	r2, [pc, #132]	@ (8008694 <HAL_RCC_OscConfig+0x4dc>)
 8008610:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008614:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008616:	f7fb fec1 	bl	800439c <HAL_GetTick>
 800861a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800861c:	e008      	b.n	8008630 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800861e:	f7fb febd 	bl	800439c <HAL_GetTick>
 8008622:	4602      	mov	r2, r0
 8008624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	2b02      	cmp	r3, #2
 800862a:	d901      	bls.n	8008630 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800862c:	2303      	movs	r3, #3
 800862e:	e1ec      	b.n	8008a0a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008630:	4b18      	ldr	r3, [pc, #96]	@ (8008694 <HAL_RCC_OscConfig+0x4dc>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1f0      	bne.n	800861e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 0304 	and.w	r3, r3, #4
 8008644:	2b00      	cmp	r3, #0
 8008646:	f000 80af 	beq.w	80087a8 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800864a:	4b13      	ldr	r3, [pc, #76]	@ (8008698 <HAL_RCC_OscConfig+0x4e0>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a12      	ldr	r2, [pc, #72]	@ (8008698 <HAL_RCC_OscConfig+0x4e0>)
 8008650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008654:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008656:	f7fb fea1 	bl	800439c <HAL_GetTick>
 800865a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800865c:	e008      	b.n	8008670 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800865e:	f7fb fe9d 	bl	800439c <HAL_GetTick>
 8008662:	4602      	mov	r2, r0
 8008664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008666:	1ad3      	subs	r3, r2, r3
 8008668:	2b64      	cmp	r3, #100	@ 0x64
 800866a:	d901      	bls.n	8008670 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800866c:	2303      	movs	r3, #3
 800866e:	e1cc      	b.n	8008a0a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008670:	4b09      	ldr	r3, [pc, #36]	@ (8008698 <HAL_RCC_OscConfig+0x4e0>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008678:	2b00      	cmp	r3, #0
 800867a:	d0f0      	beq.n	800865e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d10b      	bne.n	800869c <HAL_RCC_OscConfig+0x4e4>
 8008684:	4b03      	ldr	r3, [pc, #12]	@ (8008694 <HAL_RCC_OscConfig+0x4dc>)
 8008686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008688:	4a02      	ldr	r2, [pc, #8]	@ (8008694 <HAL_RCC_OscConfig+0x4dc>)
 800868a:	f043 0301 	orr.w	r3, r3, #1
 800868e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008690:	e05b      	b.n	800874a <HAL_RCC_OscConfig+0x592>
 8008692:	bf00      	nop
 8008694:	58024400 	.word	0x58024400
 8008698:	58024800 	.word	0x58024800
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d112      	bne.n	80086ca <HAL_RCC_OscConfig+0x512>
 80086a4:	4b9d      	ldr	r3, [pc, #628]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 80086a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086a8:	4a9c      	ldr	r2, [pc, #624]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 80086aa:	f023 0301 	bic.w	r3, r3, #1
 80086ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80086b0:	4b9a      	ldr	r3, [pc, #616]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 80086b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086b4:	4a99      	ldr	r2, [pc, #612]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 80086b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80086bc:	4b97      	ldr	r3, [pc, #604]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 80086be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086c0:	4a96      	ldr	r2, [pc, #600]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 80086c2:	f023 0304 	bic.w	r3, r3, #4
 80086c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80086c8:	e03f      	b.n	800874a <HAL_RCC_OscConfig+0x592>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	2b05      	cmp	r3, #5
 80086d0:	d112      	bne.n	80086f8 <HAL_RCC_OscConfig+0x540>
 80086d2:	4b92      	ldr	r3, [pc, #584]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 80086d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086d6:	4a91      	ldr	r2, [pc, #580]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 80086d8:	f043 0304 	orr.w	r3, r3, #4
 80086dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80086de:	4b8f      	ldr	r3, [pc, #572]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 80086e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086e2:	4a8e      	ldr	r2, [pc, #568]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 80086e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80086ea:	4b8c      	ldr	r3, [pc, #560]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 80086ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086ee:	4a8b      	ldr	r2, [pc, #556]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 80086f0:	f043 0301 	orr.w	r3, r3, #1
 80086f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80086f6:	e028      	b.n	800874a <HAL_RCC_OscConfig+0x592>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	2b85      	cmp	r3, #133	@ 0x85
 80086fe:	d112      	bne.n	8008726 <HAL_RCC_OscConfig+0x56e>
 8008700:	4b86      	ldr	r3, [pc, #536]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 8008702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008704:	4a85      	ldr	r2, [pc, #532]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 8008706:	f043 0304 	orr.w	r3, r3, #4
 800870a:	6713      	str	r3, [r2, #112]	@ 0x70
 800870c:	4b83      	ldr	r3, [pc, #524]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 800870e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008710:	4a82      	ldr	r2, [pc, #520]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 8008712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008716:	6713      	str	r3, [r2, #112]	@ 0x70
 8008718:	4b80      	ldr	r3, [pc, #512]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 800871a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800871c:	4a7f      	ldr	r2, [pc, #508]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 800871e:	f043 0301 	orr.w	r3, r3, #1
 8008722:	6713      	str	r3, [r2, #112]	@ 0x70
 8008724:	e011      	b.n	800874a <HAL_RCC_OscConfig+0x592>
 8008726:	4b7d      	ldr	r3, [pc, #500]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 8008728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800872a:	4a7c      	ldr	r2, [pc, #496]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 800872c:	f023 0301 	bic.w	r3, r3, #1
 8008730:	6713      	str	r3, [r2, #112]	@ 0x70
 8008732:	4b7a      	ldr	r3, [pc, #488]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 8008734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008736:	4a79      	ldr	r2, [pc, #484]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 8008738:	f023 0304 	bic.w	r3, r3, #4
 800873c:	6713      	str	r3, [r2, #112]	@ 0x70
 800873e:	4b77      	ldr	r3, [pc, #476]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 8008740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008742:	4a76      	ldr	r2, [pc, #472]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 8008744:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008748:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d015      	beq.n	800877e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008752:	f7fb fe23 	bl	800439c <HAL_GetTick>
 8008756:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008758:	e00a      	b.n	8008770 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800875a:	f7fb fe1f 	bl	800439c <HAL_GetTick>
 800875e:	4602      	mov	r2, r0
 8008760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008762:	1ad3      	subs	r3, r2, r3
 8008764:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008768:	4293      	cmp	r3, r2
 800876a:	d901      	bls.n	8008770 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800876c:	2303      	movs	r3, #3
 800876e:	e14c      	b.n	8008a0a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008770:	4b6a      	ldr	r3, [pc, #424]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 8008772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008774:	f003 0302 	and.w	r3, r3, #2
 8008778:	2b00      	cmp	r3, #0
 800877a:	d0ee      	beq.n	800875a <HAL_RCC_OscConfig+0x5a2>
 800877c:	e014      	b.n	80087a8 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800877e:	f7fb fe0d 	bl	800439c <HAL_GetTick>
 8008782:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008784:	e00a      	b.n	800879c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008786:	f7fb fe09 	bl	800439c <HAL_GetTick>
 800878a:	4602      	mov	r2, r0
 800878c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800878e:	1ad3      	subs	r3, r2, r3
 8008790:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008794:	4293      	cmp	r3, r2
 8008796:	d901      	bls.n	800879c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8008798:	2303      	movs	r3, #3
 800879a:	e136      	b.n	8008a0a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800879c:	4b5f      	ldr	r3, [pc, #380]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 800879e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087a0:	f003 0302 	and.w	r3, r3, #2
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1ee      	bne.n	8008786 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	f000 812b 	beq.w	8008a08 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80087b2:	4b5a      	ldr	r3, [pc, #360]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 80087b4:	691b      	ldr	r3, [r3, #16]
 80087b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80087ba:	2b18      	cmp	r3, #24
 80087bc:	f000 80bb 	beq.w	8008936 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	f040 8095 	bne.w	80088f4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087ca:	4b54      	ldr	r3, [pc, #336]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a53      	ldr	r2, [pc, #332]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 80087d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80087d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087d6:	f7fb fde1 	bl	800439c <HAL_GetTick>
 80087da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80087dc:	e008      	b.n	80087f0 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087de:	f7fb fddd 	bl	800439c <HAL_GetTick>
 80087e2:	4602      	mov	r2, r0
 80087e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e6:	1ad3      	subs	r3, r2, r3
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	d901      	bls.n	80087f0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80087ec:	2303      	movs	r3, #3
 80087ee:	e10c      	b.n	8008a0a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80087f0:	4b4a      	ldr	r3, [pc, #296]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d1f0      	bne.n	80087de <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80087fc:	4b47      	ldr	r3, [pc, #284]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 80087fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008800:	4b47      	ldr	r3, [pc, #284]	@ (8008920 <HAL_RCC_OscConfig+0x768>)
 8008802:	4013      	ands	r3, r2
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800880c:	0112      	lsls	r2, r2, #4
 800880e:	430a      	orrs	r2, r1
 8008810:	4942      	ldr	r1, [pc, #264]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 8008812:	4313      	orrs	r3, r2
 8008814:	628b      	str	r3, [r1, #40]	@ 0x28
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800881a:	3b01      	subs	r3, #1
 800881c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008824:	3b01      	subs	r3, #1
 8008826:	025b      	lsls	r3, r3, #9
 8008828:	b29b      	uxth	r3, r3
 800882a:	431a      	orrs	r2, r3
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008830:	3b01      	subs	r3, #1
 8008832:	041b      	lsls	r3, r3, #16
 8008834:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008838:	431a      	orrs	r2, r3
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800883e:	3b01      	subs	r3, #1
 8008840:	061b      	lsls	r3, r3, #24
 8008842:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008846:	4935      	ldr	r1, [pc, #212]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 8008848:	4313      	orrs	r3, r2
 800884a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800884c:	4b33      	ldr	r3, [pc, #204]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 800884e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008850:	4a32      	ldr	r2, [pc, #200]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 8008852:	f023 0301 	bic.w	r3, r3, #1
 8008856:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008858:	4b30      	ldr	r3, [pc, #192]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 800885a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800885c:	4b31      	ldr	r3, [pc, #196]	@ (8008924 <HAL_RCC_OscConfig+0x76c>)
 800885e:	4013      	ands	r3, r2
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008864:	00d2      	lsls	r2, r2, #3
 8008866:	492d      	ldr	r1, [pc, #180]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 8008868:	4313      	orrs	r3, r2
 800886a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800886c:	4b2b      	ldr	r3, [pc, #172]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 800886e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008870:	f023 020c 	bic.w	r2, r3, #12
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008878:	4928      	ldr	r1, [pc, #160]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 800887a:	4313      	orrs	r3, r2
 800887c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800887e:	4b27      	ldr	r3, [pc, #156]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 8008880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008882:	f023 0202 	bic.w	r2, r3, #2
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800888a:	4924      	ldr	r1, [pc, #144]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 800888c:	4313      	orrs	r3, r2
 800888e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008890:	4b22      	ldr	r3, [pc, #136]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 8008892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008894:	4a21      	ldr	r2, [pc, #132]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 8008896:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800889a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800889c:	4b1f      	ldr	r3, [pc, #124]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 800889e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a0:	4a1e      	ldr	r2, [pc, #120]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 80088a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80088a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80088a8:	4b1c      	ldr	r3, [pc, #112]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 80088aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ac:	4a1b      	ldr	r2, [pc, #108]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 80088ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80088b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80088b4:	4b19      	ldr	r3, [pc, #100]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 80088b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088b8:	4a18      	ldr	r2, [pc, #96]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 80088ba:	f043 0301 	orr.w	r3, r3, #1
 80088be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80088c0:	4b16      	ldr	r3, [pc, #88]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a15      	ldr	r2, [pc, #84]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 80088c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80088ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088cc:	f7fb fd66 	bl	800439c <HAL_GetTick>
 80088d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80088d2:	e008      	b.n	80088e6 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088d4:	f7fb fd62 	bl	800439c <HAL_GetTick>
 80088d8:	4602      	mov	r2, r0
 80088da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088dc:	1ad3      	subs	r3, r2, r3
 80088de:	2b02      	cmp	r3, #2
 80088e0:	d901      	bls.n	80088e6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80088e2:	2303      	movs	r3, #3
 80088e4:	e091      	b.n	8008a0a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80088e6:	4b0d      	ldr	r3, [pc, #52]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d0f0      	beq.n	80088d4 <HAL_RCC_OscConfig+0x71c>
 80088f2:	e089      	b.n	8008a08 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088f4:	4b09      	ldr	r3, [pc, #36]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a08      	ldr	r2, [pc, #32]	@ (800891c <HAL_RCC_OscConfig+0x764>)
 80088fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80088fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008900:	f7fb fd4c 	bl	800439c <HAL_GetTick>
 8008904:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008906:	e00f      	b.n	8008928 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008908:	f7fb fd48 	bl	800439c <HAL_GetTick>
 800890c:	4602      	mov	r2, r0
 800890e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008910:	1ad3      	subs	r3, r2, r3
 8008912:	2b02      	cmp	r3, #2
 8008914:	d908      	bls.n	8008928 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8008916:	2303      	movs	r3, #3
 8008918:	e077      	b.n	8008a0a <HAL_RCC_OscConfig+0x852>
 800891a:	bf00      	nop
 800891c:	58024400 	.word	0x58024400
 8008920:	fffffc0c 	.word	0xfffffc0c
 8008924:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008928:	4b3a      	ldr	r3, [pc, #232]	@ (8008a14 <HAL_RCC_OscConfig+0x85c>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1e9      	bne.n	8008908 <HAL_RCC_OscConfig+0x750>
 8008934:	e068      	b.n	8008a08 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008936:	4b37      	ldr	r3, [pc, #220]	@ (8008a14 <HAL_RCC_OscConfig+0x85c>)
 8008938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800893a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800893c:	4b35      	ldr	r3, [pc, #212]	@ (8008a14 <HAL_RCC_OscConfig+0x85c>)
 800893e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008940:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008946:	2b01      	cmp	r3, #1
 8008948:	d031      	beq.n	80089ae <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	f003 0203 	and.w	r2, r3, #3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008954:	429a      	cmp	r2, r3
 8008956:	d12a      	bne.n	80089ae <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	091b      	lsrs	r3, r3, #4
 800895c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008964:	429a      	cmp	r2, r3
 8008966:	d122      	bne.n	80089ae <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008972:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008974:	429a      	cmp	r2, r3
 8008976:	d11a      	bne.n	80089ae <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	0a5b      	lsrs	r3, r3, #9
 800897c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008984:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008986:	429a      	cmp	r2, r3
 8008988:	d111      	bne.n	80089ae <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	0c1b      	lsrs	r3, r3, #16
 800898e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008996:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008998:	429a      	cmp	r2, r3
 800899a:	d108      	bne.n	80089ae <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	0e1b      	lsrs	r3, r3, #24
 80089a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d001      	beq.n	80089b2 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	e02b      	b.n	8008a0a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80089b2:	4b18      	ldr	r3, [pc, #96]	@ (8008a14 <HAL_RCC_OscConfig+0x85c>)
 80089b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089b6:	08db      	lsrs	r3, r3, #3
 80089b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089bc:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089c2:	693a      	ldr	r2, [r7, #16]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d01f      	beq.n	8008a08 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80089c8:	4b12      	ldr	r3, [pc, #72]	@ (8008a14 <HAL_RCC_OscConfig+0x85c>)
 80089ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089cc:	4a11      	ldr	r2, [pc, #68]	@ (8008a14 <HAL_RCC_OscConfig+0x85c>)
 80089ce:	f023 0301 	bic.w	r3, r3, #1
 80089d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80089d4:	f7fb fce2 	bl	800439c <HAL_GetTick>
 80089d8:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80089da:	bf00      	nop
 80089dc:	f7fb fcde 	bl	800439c <HAL_GetTick>
 80089e0:	4602      	mov	r2, r0
 80089e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d0f9      	beq.n	80089dc <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80089e8:	4b0a      	ldr	r3, [pc, #40]	@ (8008a14 <HAL_RCC_OscConfig+0x85c>)
 80089ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008a18 <HAL_RCC_OscConfig+0x860>)
 80089ee:	4013      	ands	r3, r2
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80089f4:	00d2      	lsls	r2, r2, #3
 80089f6:	4907      	ldr	r1, [pc, #28]	@ (8008a14 <HAL_RCC_OscConfig+0x85c>)
 80089f8:	4313      	orrs	r3, r2
 80089fa:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80089fc:	4b05      	ldr	r3, [pc, #20]	@ (8008a14 <HAL_RCC_OscConfig+0x85c>)
 80089fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a00:	4a04      	ldr	r2, [pc, #16]	@ (8008a14 <HAL_RCC_OscConfig+0x85c>)
 8008a02:	f043 0301 	orr.w	r3, r3, #1
 8008a06:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3730      	adds	r7, #48	@ 0x30
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	58024400 	.word	0x58024400
 8008a18:	ffff0007 	.word	0xffff0007

08008a1c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b086      	sub	sp, #24
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d101      	bne.n	8008a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e19c      	b.n	8008d6a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008a30:	4b8a      	ldr	r3, [pc, #552]	@ (8008c5c <HAL_RCC_ClockConfig+0x240>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f003 030f 	and.w	r3, r3, #15
 8008a38:	683a      	ldr	r2, [r7, #0]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d910      	bls.n	8008a60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a3e:	4b87      	ldr	r3, [pc, #540]	@ (8008c5c <HAL_RCC_ClockConfig+0x240>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f023 020f 	bic.w	r2, r3, #15
 8008a46:	4985      	ldr	r1, [pc, #532]	@ (8008c5c <HAL_RCC_ClockConfig+0x240>)
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a4e:	4b83      	ldr	r3, [pc, #524]	@ (8008c5c <HAL_RCC_ClockConfig+0x240>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f003 030f 	and.w	r3, r3, #15
 8008a56:	683a      	ldr	r2, [r7, #0]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d001      	beq.n	8008a60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e184      	b.n	8008d6a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f003 0304 	and.w	r3, r3, #4
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d010      	beq.n	8008a8e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	691a      	ldr	r2, [r3, #16]
 8008a70:	4b7b      	ldr	r3, [pc, #492]	@ (8008c60 <HAL_RCC_ClockConfig+0x244>)
 8008a72:	699b      	ldr	r3, [r3, #24]
 8008a74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d908      	bls.n	8008a8e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008a7c:	4b78      	ldr	r3, [pc, #480]	@ (8008c60 <HAL_RCC_ClockConfig+0x244>)
 8008a7e:	699b      	ldr	r3, [r3, #24]
 8008a80:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	4975      	ldr	r1, [pc, #468]	@ (8008c60 <HAL_RCC_ClockConfig+0x244>)
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f003 0308 	and.w	r3, r3, #8
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d010      	beq.n	8008abc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	695a      	ldr	r2, [r3, #20]
 8008a9e:	4b70      	ldr	r3, [pc, #448]	@ (8008c60 <HAL_RCC_ClockConfig+0x244>)
 8008aa0:	69db      	ldr	r3, [r3, #28]
 8008aa2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d908      	bls.n	8008abc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008aaa:	4b6d      	ldr	r3, [pc, #436]	@ (8008c60 <HAL_RCC_ClockConfig+0x244>)
 8008aac:	69db      	ldr	r3, [r3, #28]
 8008aae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	695b      	ldr	r3, [r3, #20]
 8008ab6:	496a      	ldr	r1, [pc, #424]	@ (8008c60 <HAL_RCC_ClockConfig+0x244>)
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f003 0310 	and.w	r3, r3, #16
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d010      	beq.n	8008aea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	699a      	ldr	r2, [r3, #24]
 8008acc:	4b64      	ldr	r3, [pc, #400]	@ (8008c60 <HAL_RCC_ClockConfig+0x244>)
 8008ace:	69db      	ldr	r3, [r3, #28]
 8008ad0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d908      	bls.n	8008aea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ad8:	4b61      	ldr	r3, [pc, #388]	@ (8008c60 <HAL_RCC_ClockConfig+0x244>)
 8008ada:	69db      	ldr	r3, [r3, #28]
 8008adc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	699b      	ldr	r3, [r3, #24]
 8008ae4:	495e      	ldr	r1, [pc, #376]	@ (8008c60 <HAL_RCC_ClockConfig+0x244>)
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f003 0320 	and.w	r3, r3, #32
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d010      	beq.n	8008b18 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	69da      	ldr	r2, [r3, #28]
 8008afa:	4b59      	ldr	r3, [pc, #356]	@ (8008c60 <HAL_RCC_ClockConfig+0x244>)
 8008afc:	6a1b      	ldr	r3, [r3, #32]
 8008afe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d908      	bls.n	8008b18 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008b06:	4b56      	ldr	r3, [pc, #344]	@ (8008c60 <HAL_RCC_ClockConfig+0x244>)
 8008b08:	6a1b      	ldr	r3, [r3, #32]
 8008b0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	69db      	ldr	r3, [r3, #28]
 8008b12:	4953      	ldr	r1, [pc, #332]	@ (8008c60 <HAL_RCC_ClockConfig+0x244>)
 8008b14:	4313      	orrs	r3, r2
 8008b16:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f003 0302 	and.w	r3, r3, #2
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d010      	beq.n	8008b46 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	68da      	ldr	r2, [r3, #12]
 8008b28:	4b4d      	ldr	r3, [pc, #308]	@ (8008c60 <HAL_RCC_ClockConfig+0x244>)
 8008b2a:	699b      	ldr	r3, [r3, #24]
 8008b2c:	f003 030f 	and.w	r3, r3, #15
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d908      	bls.n	8008b46 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b34:	4b4a      	ldr	r3, [pc, #296]	@ (8008c60 <HAL_RCC_ClockConfig+0x244>)
 8008b36:	699b      	ldr	r3, [r3, #24]
 8008b38:	f023 020f 	bic.w	r2, r3, #15
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	4947      	ldr	r1, [pc, #284]	@ (8008c60 <HAL_RCC_ClockConfig+0x244>)
 8008b42:	4313      	orrs	r3, r2
 8008b44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f003 0301 	and.w	r3, r3, #1
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d055      	beq.n	8008bfe <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008b52:	4b43      	ldr	r3, [pc, #268]	@ (8008c60 <HAL_RCC_ClockConfig+0x244>)
 8008b54:	699b      	ldr	r3, [r3, #24]
 8008b56:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	4940      	ldr	r1, [pc, #256]	@ (8008c60 <HAL_RCC_ClockConfig+0x244>)
 8008b60:	4313      	orrs	r3, r2
 8008b62:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	2b02      	cmp	r3, #2
 8008b6a:	d107      	bne.n	8008b7c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008b6c:	4b3c      	ldr	r3, [pc, #240]	@ (8008c60 <HAL_RCC_ClockConfig+0x244>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d121      	bne.n	8008bbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e0f6      	b.n	8008d6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	2b03      	cmp	r3, #3
 8008b82:	d107      	bne.n	8008b94 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b84:	4b36      	ldr	r3, [pc, #216]	@ (8008c60 <HAL_RCC_ClockConfig+0x244>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d115      	bne.n	8008bbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	e0ea      	b.n	8008d6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d107      	bne.n	8008bac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008b9c:	4b30      	ldr	r3, [pc, #192]	@ (8008c60 <HAL_RCC_ClockConfig+0x244>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d109      	bne.n	8008bbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	e0de      	b.n	8008d6a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008bac:	4b2c      	ldr	r3, [pc, #176]	@ (8008c60 <HAL_RCC_ClockConfig+0x244>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 0304 	and.w	r3, r3, #4
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d101      	bne.n	8008bbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e0d6      	b.n	8008d6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008bbc:	4b28      	ldr	r3, [pc, #160]	@ (8008c60 <HAL_RCC_ClockConfig+0x244>)
 8008bbe:	691b      	ldr	r3, [r3, #16]
 8008bc0:	f023 0207 	bic.w	r2, r3, #7
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	4925      	ldr	r1, [pc, #148]	@ (8008c60 <HAL_RCC_ClockConfig+0x244>)
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bce:	f7fb fbe5 	bl	800439c <HAL_GetTick>
 8008bd2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bd4:	e00a      	b.n	8008bec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bd6:	f7fb fbe1 	bl	800439c <HAL_GetTick>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	1ad3      	subs	r3, r2, r3
 8008be0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d901      	bls.n	8008bec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008be8:	2303      	movs	r3, #3
 8008bea:	e0be      	b.n	8008d6a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bec:	4b1c      	ldr	r3, [pc, #112]	@ (8008c60 <HAL_RCC_ClockConfig+0x244>)
 8008bee:	691b      	ldr	r3, [r3, #16]
 8008bf0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	00db      	lsls	r3, r3, #3
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d1eb      	bne.n	8008bd6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f003 0302 	and.w	r3, r3, #2
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d010      	beq.n	8008c2c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	68da      	ldr	r2, [r3, #12]
 8008c0e:	4b14      	ldr	r3, [pc, #80]	@ (8008c60 <HAL_RCC_ClockConfig+0x244>)
 8008c10:	699b      	ldr	r3, [r3, #24]
 8008c12:	f003 030f 	and.w	r3, r3, #15
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d208      	bcs.n	8008c2c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c1a:	4b11      	ldr	r3, [pc, #68]	@ (8008c60 <HAL_RCC_ClockConfig+0x244>)
 8008c1c:	699b      	ldr	r3, [r3, #24]
 8008c1e:	f023 020f 	bic.w	r2, r3, #15
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	68db      	ldr	r3, [r3, #12]
 8008c26:	490e      	ldr	r1, [pc, #56]	@ (8008c60 <HAL_RCC_ClockConfig+0x244>)
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8008c5c <HAL_RCC_ClockConfig+0x240>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f003 030f 	and.w	r3, r3, #15
 8008c34:	683a      	ldr	r2, [r7, #0]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d214      	bcs.n	8008c64 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c3a:	4b08      	ldr	r3, [pc, #32]	@ (8008c5c <HAL_RCC_ClockConfig+0x240>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f023 020f 	bic.w	r2, r3, #15
 8008c42:	4906      	ldr	r1, [pc, #24]	@ (8008c5c <HAL_RCC_ClockConfig+0x240>)
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c4a:	4b04      	ldr	r3, [pc, #16]	@ (8008c5c <HAL_RCC_ClockConfig+0x240>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f003 030f 	and.w	r3, r3, #15
 8008c52:	683a      	ldr	r2, [r7, #0]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d005      	beq.n	8008c64 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	e086      	b.n	8008d6a <HAL_RCC_ClockConfig+0x34e>
 8008c5c:	52002000 	.word	0x52002000
 8008c60:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 0304 	and.w	r3, r3, #4
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d010      	beq.n	8008c92 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	691a      	ldr	r2, [r3, #16]
 8008c74:	4b3f      	ldr	r3, [pc, #252]	@ (8008d74 <HAL_RCC_ClockConfig+0x358>)
 8008c76:	699b      	ldr	r3, [r3, #24]
 8008c78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d208      	bcs.n	8008c92 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008c80:	4b3c      	ldr	r3, [pc, #240]	@ (8008d74 <HAL_RCC_ClockConfig+0x358>)
 8008c82:	699b      	ldr	r3, [r3, #24]
 8008c84:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	4939      	ldr	r1, [pc, #228]	@ (8008d74 <HAL_RCC_ClockConfig+0x358>)
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f003 0308 	and.w	r3, r3, #8
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d010      	beq.n	8008cc0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	695a      	ldr	r2, [r3, #20]
 8008ca2:	4b34      	ldr	r3, [pc, #208]	@ (8008d74 <HAL_RCC_ClockConfig+0x358>)
 8008ca4:	69db      	ldr	r3, [r3, #28]
 8008ca6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d208      	bcs.n	8008cc0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008cae:	4b31      	ldr	r3, [pc, #196]	@ (8008d74 <HAL_RCC_ClockConfig+0x358>)
 8008cb0:	69db      	ldr	r3, [r3, #28]
 8008cb2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	695b      	ldr	r3, [r3, #20]
 8008cba:	492e      	ldr	r1, [pc, #184]	@ (8008d74 <HAL_RCC_ClockConfig+0x358>)
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f003 0310 	and.w	r3, r3, #16
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d010      	beq.n	8008cee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	699a      	ldr	r2, [r3, #24]
 8008cd0:	4b28      	ldr	r3, [pc, #160]	@ (8008d74 <HAL_RCC_ClockConfig+0x358>)
 8008cd2:	69db      	ldr	r3, [r3, #28]
 8008cd4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d208      	bcs.n	8008cee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008cdc:	4b25      	ldr	r3, [pc, #148]	@ (8008d74 <HAL_RCC_ClockConfig+0x358>)
 8008cde:	69db      	ldr	r3, [r3, #28]
 8008ce0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	699b      	ldr	r3, [r3, #24]
 8008ce8:	4922      	ldr	r1, [pc, #136]	@ (8008d74 <HAL_RCC_ClockConfig+0x358>)
 8008cea:	4313      	orrs	r3, r2
 8008cec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f003 0320 	and.w	r3, r3, #32
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d010      	beq.n	8008d1c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	69da      	ldr	r2, [r3, #28]
 8008cfe:	4b1d      	ldr	r3, [pc, #116]	@ (8008d74 <HAL_RCC_ClockConfig+0x358>)
 8008d00:	6a1b      	ldr	r3, [r3, #32]
 8008d02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d208      	bcs.n	8008d1c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8008d74 <HAL_RCC_ClockConfig+0x358>)
 8008d0c:	6a1b      	ldr	r3, [r3, #32]
 8008d0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	69db      	ldr	r3, [r3, #28]
 8008d16:	4917      	ldr	r1, [pc, #92]	@ (8008d74 <HAL_RCC_ClockConfig+0x358>)
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8008d1c:	f000 f834 	bl	8008d88 <HAL_RCC_GetSysClockFreq>
 8008d20:	4602      	mov	r2, r0
 8008d22:	4b14      	ldr	r3, [pc, #80]	@ (8008d74 <HAL_RCC_ClockConfig+0x358>)
 8008d24:	699b      	ldr	r3, [r3, #24]
 8008d26:	0a1b      	lsrs	r3, r3, #8
 8008d28:	f003 030f 	and.w	r3, r3, #15
 8008d2c:	4912      	ldr	r1, [pc, #72]	@ (8008d78 <HAL_RCC_ClockConfig+0x35c>)
 8008d2e:	5ccb      	ldrb	r3, [r1, r3]
 8008d30:	f003 031f 	and.w	r3, r3, #31
 8008d34:	fa22 f303 	lsr.w	r3, r2, r3
 8008d38:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8008d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8008d74 <HAL_RCC_ClockConfig+0x358>)
 8008d3c:	699b      	ldr	r3, [r3, #24]
 8008d3e:	f003 030f 	and.w	r3, r3, #15
 8008d42:	4a0d      	ldr	r2, [pc, #52]	@ (8008d78 <HAL_RCC_ClockConfig+0x35c>)
 8008d44:	5cd3      	ldrb	r3, [r2, r3]
 8008d46:	f003 031f 	and.w	r3, r3, #31
 8008d4a:	693a      	ldr	r2, [r7, #16]
 8008d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d50:	4a0a      	ldr	r2, [pc, #40]	@ (8008d7c <HAL_RCC_ClockConfig+0x360>)
 8008d52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008d54:	4a0a      	ldr	r2, [pc, #40]	@ (8008d80 <HAL_RCC_ClockConfig+0x364>)
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8008d84 <HAL_RCC_ClockConfig+0x368>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7fb fad2 	bl	8004308 <HAL_InitTick>
 8008d64:	4603      	mov	r3, r0
 8008d66:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3718      	adds	r7, #24
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	58024400 	.word	0x58024400
 8008d78:	080144f0 	.word	0x080144f0
 8008d7c:	240000a8 	.word	0x240000a8
 8008d80:	240000a4 	.word	0x240000a4
 8008d84:	240000ac 	.word	0x240000ac

08008d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b089      	sub	sp, #36	@ 0x24
 8008d8c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d8e:	4bb3      	ldr	r3, [pc, #716]	@ (800905c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d96:	2b18      	cmp	r3, #24
 8008d98:	f200 8155 	bhi.w	8009046 <HAL_RCC_GetSysClockFreq+0x2be>
 8008d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8008da4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da2:	bf00      	nop
 8008da4:	08008e09 	.word	0x08008e09
 8008da8:	08009047 	.word	0x08009047
 8008dac:	08009047 	.word	0x08009047
 8008db0:	08009047 	.word	0x08009047
 8008db4:	08009047 	.word	0x08009047
 8008db8:	08009047 	.word	0x08009047
 8008dbc:	08009047 	.word	0x08009047
 8008dc0:	08009047 	.word	0x08009047
 8008dc4:	08008e2f 	.word	0x08008e2f
 8008dc8:	08009047 	.word	0x08009047
 8008dcc:	08009047 	.word	0x08009047
 8008dd0:	08009047 	.word	0x08009047
 8008dd4:	08009047 	.word	0x08009047
 8008dd8:	08009047 	.word	0x08009047
 8008ddc:	08009047 	.word	0x08009047
 8008de0:	08009047 	.word	0x08009047
 8008de4:	08008e35 	.word	0x08008e35
 8008de8:	08009047 	.word	0x08009047
 8008dec:	08009047 	.word	0x08009047
 8008df0:	08009047 	.word	0x08009047
 8008df4:	08009047 	.word	0x08009047
 8008df8:	08009047 	.word	0x08009047
 8008dfc:	08009047 	.word	0x08009047
 8008e00:	08009047 	.word	0x08009047
 8008e04:	08008e3b 	.word	0x08008e3b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e08:	4b94      	ldr	r3, [pc, #592]	@ (800905c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f003 0320 	and.w	r3, r3, #32
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d009      	beq.n	8008e28 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e14:	4b91      	ldr	r3, [pc, #580]	@ (800905c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	08db      	lsrs	r3, r3, #3
 8008e1a:	f003 0303 	and.w	r3, r3, #3
 8008e1e:	4a90      	ldr	r2, [pc, #576]	@ (8009060 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008e20:	fa22 f303 	lsr.w	r3, r2, r3
 8008e24:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008e26:	e111      	b.n	800904c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008e28:	4b8d      	ldr	r3, [pc, #564]	@ (8009060 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008e2a:	61bb      	str	r3, [r7, #24]
      break;
 8008e2c:	e10e      	b.n	800904c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008e2e:	4b8d      	ldr	r3, [pc, #564]	@ (8009064 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008e30:	61bb      	str	r3, [r7, #24]
      break;
 8008e32:	e10b      	b.n	800904c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008e34:	4b8c      	ldr	r3, [pc, #560]	@ (8009068 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008e36:	61bb      	str	r3, [r7, #24]
      break;
 8008e38:	e108      	b.n	800904c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e3a:	4b88      	ldr	r3, [pc, #544]	@ (800905c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e3e:	f003 0303 	and.w	r3, r3, #3
 8008e42:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008e44:	4b85      	ldr	r3, [pc, #532]	@ (800905c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e48:	091b      	lsrs	r3, r3, #4
 8008e4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e4e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008e50:	4b82      	ldr	r3, [pc, #520]	@ (800905c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e54:	f003 0301 	and.w	r3, r3, #1
 8008e58:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008e5a:	4b80      	ldr	r3, [pc, #512]	@ (800905c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e5e:	08db      	lsrs	r3, r3, #3
 8008e60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e64:	68fa      	ldr	r2, [r7, #12]
 8008e66:	fb02 f303 	mul.w	r3, r2, r3
 8008e6a:	ee07 3a90 	vmov	s15, r3
 8008e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e72:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	f000 80e1 	beq.w	8009040 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	2b02      	cmp	r3, #2
 8008e82:	f000 8083 	beq.w	8008f8c <HAL_RCC_GetSysClockFreq+0x204>
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	2b02      	cmp	r3, #2
 8008e8a:	f200 80a1 	bhi.w	8008fd0 <HAL_RCC_GetSysClockFreq+0x248>
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d003      	beq.n	8008e9c <HAL_RCC_GetSysClockFreq+0x114>
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d056      	beq.n	8008f48 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008e9a:	e099      	b.n	8008fd0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e9c:	4b6f      	ldr	r3, [pc, #444]	@ (800905c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f003 0320 	and.w	r3, r3, #32
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d02d      	beq.n	8008f04 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ea8:	4b6c      	ldr	r3, [pc, #432]	@ (800905c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	08db      	lsrs	r3, r3, #3
 8008eae:	f003 0303 	and.w	r3, r3, #3
 8008eb2:	4a6b      	ldr	r2, [pc, #428]	@ (8009060 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8008eb8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	ee07 3a90 	vmov	s15, r3
 8008ec0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	ee07 3a90 	vmov	s15, r3
 8008eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ed2:	4b62      	ldr	r3, [pc, #392]	@ (800905c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eda:	ee07 3a90 	vmov	s15, r3
 8008ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ee2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ee6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800906c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ef2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008efe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008f02:	e087      	b.n	8009014 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	ee07 3a90 	vmov	s15, r3
 8008f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f0e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009070 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f16:	4b51      	ldr	r3, [pc, #324]	@ (800905c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f1e:	ee07 3a90 	vmov	s15, r3
 8008f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f26:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f2a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800906c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008f46:	e065      	b.n	8009014 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	ee07 3a90 	vmov	s15, r3
 8008f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f52:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009074 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f5a:	4b40      	ldr	r3, [pc, #256]	@ (800905c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f62:	ee07 3a90 	vmov	s15, r3
 8008f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f6e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800906c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008f8a:	e043      	b.n	8009014 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	ee07 3a90 	vmov	s15, r3
 8008f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f96:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009078 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f9e:	4b2f      	ldr	r3, [pc, #188]	@ (800905c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fa6:	ee07 3a90 	vmov	s15, r3
 8008faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fae:	ed97 6a02 	vldr	s12, [r7, #8]
 8008fb2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800906c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008fce:	e021      	b.n	8009014 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	ee07 3a90 	vmov	s15, r3
 8008fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fda:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009074 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fe2:	4b1e      	ldr	r3, [pc, #120]	@ (800905c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fea:	ee07 3a90 	vmov	s15, r3
 8008fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ff2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ff6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800906c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009002:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800900a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800900e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009012:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009014:	4b11      	ldr	r3, [pc, #68]	@ (800905c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009018:	0a5b      	lsrs	r3, r3, #9
 800901a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800901e:	3301      	adds	r3, #1
 8009020:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	ee07 3a90 	vmov	s15, r3
 8009028:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800902c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009030:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009034:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009038:	ee17 3a90 	vmov	r3, s15
 800903c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800903e:	e005      	b.n	800904c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009040:	2300      	movs	r3, #0
 8009042:	61bb      	str	r3, [r7, #24]
      break;
 8009044:	e002      	b.n	800904c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009046:	4b07      	ldr	r3, [pc, #28]	@ (8009064 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009048:	61bb      	str	r3, [r7, #24]
      break;
 800904a:	bf00      	nop
  }

  return sysclockfreq;
 800904c:	69bb      	ldr	r3, [r7, #24]
}
 800904e:	4618      	mov	r0, r3
 8009050:	3724      	adds	r7, #36	@ 0x24
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr
 800905a:	bf00      	nop
 800905c:	58024400 	.word	0x58024400
 8009060:	03d09000 	.word	0x03d09000
 8009064:	003d0900 	.word	0x003d0900
 8009068:	016e3600 	.word	0x016e3600
 800906c:	46000000 	.word	0x46000000
 8009070:	4c742400 	.word	0x4c742400
 8009074:	4a742400 	.word	0x4a742400
 8009078:	4bb71b00 	.word	0x4bb71b00

0800907c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8009082:	f7ff fe81 	bl	8008d88 <HAL_RCC_GetSysClockFreq>
 8009086:	4602      	mov	r2, r0
 8009088:	4b10      	ldr	r3, [pc, #64]	@ (80090cc <HAL_RCC_GetHCLKFreq+0x50>)
 800908a:	699b      	ldr	r3, [r3, #24]
 800908c:	0a1b      	lsrs	r3, r3, #8
 800908e:	f003 030f 	and.w	r3, r3, #15
 8009092:	490f      	ldr	r1, [pc, #60]	@ (80090d0 <HAL_RCC_GetHCLKFreq+0x54>)
 8009094:	5ccb      	ldrb	r3, [r1, r3]
 8009096:	f003 031f 	and.w	r3, r3, #31
 800909a:	fa22 f303 	lsr.w	r3, r2, r3
 800909e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80090a0:	4b0a      	ldr	r3, [pc, #40]	@ (80090cc <HAL_RCC_GetHCLKFreq+0x50>)
 80090a2:	699b      	ldr	r3, [r3, #24]
 80090a4:	f003 030f 	and.w	r3, r3, #15
 80090a8:	4a09      	ldr	r2, [pc, #36]	@ (80090d0 <HAL_RCC_GetHCLKFreq+0x54>)
 80090aa:	5cd3      	ldrb	r3, [r2, r3]
 80090ac:	f003 031f 	and.w	r3, r3, #31
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	fa22 f303 	lsr.w	r3, r2, r3
 80090b6:	4a07      	ldr	r2, [pc, #28]	@ (80090d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80090b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80090ba:	4a07      	ldr	r2, [pc, #28]	@ (80090d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80090c0:	4b04      	ldr	r3, [pc, #16]	@ (80090d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80090c2:	681b      	ldr	r3, [r3, #0]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3708      	adds	r7, #8
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	58024400 	.word	0x58024400
 80090d0:	080144f0 	.word	0x080144f0
 80090d4:	240000a8 	.word	0x240000a8
 80090d8:	240000a4 	.word	0x240000a4

080090dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80090e0:	f7ff ffcc 	bl	800907c <HAL_RCC_GetHCLKFreq>
 80090e4:	4602      	mov	r2, r0
 80090e6:	4b06      	ldr	r3, [pc, #24]	@ (8009100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80090e8:	69db      	ldr	r3, [r3, #28]
 80090ea:	091b      	lsrs	r3, r3, #4
 80090ec:	f003 0307 	and.w	r3, r3, #7
 80090f0:	4904      	ldr	r1, [pc, #16]	@ (8009104 <HAL_RCC_GetPCLK1Freq+0x28>)
 80090f2:	5ccb      	ldrb	r3, [r1, r3]
 80090f4:	f003 031f 	and.w	r3, r3, #31
 80090f8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	58024400 	.word	0x58024400
 8009104:	080144f0 	.word	0x080144f0

08009108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800910c:	f7ff ffb6 	bl	800907c <HAL_RCC_GetHCLKFreq>
 8009110:	4602      	mov	r2, r0
 8009112:	4b06      	ldr	r3, [pc, #24]	@ (800912c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009114:	69db      	ldr	r3, [r3, #28]
 8009116:	0a1b      	lsrs	r3, r3, #8
 8009118:	f003 0307 	and.w	r3, r3, #7
 800911c:	4904      	ldr	r1, [pc, #16]	@ (8009130 <HAL_RCC_GetPCLK2Freq+0x28>)
 800911e:	5ccb      	ldrb	r3, [r1, r3]
 8009120:	f003 031f 	and.w	r3, r3, #31
 8009124:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8009128:	4618      	mov	r0, r3
 800912a:	bd80      	pop	{r7, pc}
 800912c:	58024400 	.word	0x58024400
 8009130:	080144f0 	.word	0x080144f0

08009134 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009138:	b0c8      	sub	sp, #288	@ 0x120
 800913a:	af00      	add	r7, sp, #0
 800913c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009140:	2300      	movs	r3, #0
 8009142:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009146:	2300      	movs	r3, #0
 8009148:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800914c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009154:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009158:	2500      	movs	r5, #0
 800915a:	ea54 0305 	orrs.w	r3, r4, r5
 800915e:	d049      	beq.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009160:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009164:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009166:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800916a:	d02f      	beq.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800916c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009170:	d828      	bhi.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009172:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009176:	d01a      	beq.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009178:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800917c:	d822      	bhi.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800917e:	2b00      	cmp	r3, #0
 8009180:	d003      	beq.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009182:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009186:	d007      	beq.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009188:	e01c      	b.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800918a:	4ba7      	ldr	r3, [pc, #668]	@ (8009428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800918c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800918e:	4aa6      	ldr	r2, [pc, #664]	@ (8009428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009190:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009194:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009196:	e01a      	b.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009198:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800919c:	3308      	adds	r3, #8
 800919e:	2102      	movs	r1, #2
 80091a0:	4618      	mov	r0, r3
 80091a2:	f001 fc43 	bl	800aa2c <RCCEx_PLL2_Config>
 80091a6:	4603      	mov	r3, r0
 80091a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80091ac:	e00f      	b.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80091ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091b2:	3328      	adds	r3, #40	@ 0x28
 80091b4:	2102      	movs	r1, #2
 80091b6:	4618      	mov	r0, r3
 80091b8:	f001 fcea 	bl	800ab90 <RCCEx_PLL3_Config>
 80091bc:	4603      	mov	r3, r0
 80091be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80091c2:	e004      	b.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091c4:	2301      	movs	r3, #1
 80091c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80091ca:	e000      	b.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80091cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d10a      	bne.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80091d6:	4b94      	ldr	r3, [pc, #592]	@ (8009428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80091d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091da:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80091de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091e4:	4a90      	ldr	r2, [pc, #576]	@ (8009428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80091e6:	430b      	orrs	r3, r1
 80091e8:	6513      	str	r3, [r2, #80]	@ 0x50
 80091ea:	e003      	b.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091f0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80091f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009200:	f04f 0900 	mov.w	r9, #0
 8009204:	ea58 0309 	orrs.w	r3, r8, r9
 8009208:	d047      	beq.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800920a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800920e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009210:	2b04      	cmp	r3, #4
 8009212:	d82a      	bhi.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009214:	a201      	add	r2, pc, #4	@ (adr r2, 800921c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800921a:	bf00      	nop
 800921c:	08009231 	.word	0x08009231
 8009220:	0800923f 	.word	0x0800923f
 8009224:	08009255 	.word	0x08009255
 8009228:	08009273 	.word	0x08009273
 800922c:	08009273 	.word	0x08009273
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009230:	4b7d      	ldr	r3, [pc, #500]	@ (8009428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009234:	4a7c      	ldr	r2, [pc, #496]	@ (8009428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009236:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800923a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800923c:	e01a      	b.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800923e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009242:	3308      	adds	r3, #8
 8009244:	2100      	movs	r1, #0
 8009246:	4618      	mov	r0, r3
 8009248:	f001 fbf0 	bl	800aa2c <RCCEx_PLL2_Config>
 800924c:	4603      	mov	r3, r0
 800924e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009252:	e00f      	b.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009254:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009258:	3328      	adds	r3, #40	@ 0x28
 800925a:	2100      	movs	r1, #0
 800925c:	4618      	mov	r0, r3
 800925e:	f001 fc97 	bl	800ab90 <RCCEx_PLL3_Config>
 8009262:	4603      	mov	r3, r0
 8009264:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009268:	e004      	b.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800926a:	2301      	movs	r3, #1
 800926c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009270:	e000      	b.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009272:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009274:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009278:	2b00      	cmp	r3, #0
 800927a:	d10a      	bne.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800927c:	4b6a      	ldr	r3, [pc, #424]	@ (8009428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800927e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009280:	f023 0107 	bic.w	r1, r3, #7
 8009284:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800928a:	4a67      	ldr	r2, [pc, #412]	@ (8009428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800928c:	430b      	orrs	r3, r1
 800928e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009290:	e003      	b.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009292:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009296:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800929a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800929e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80092a6:	f04f 0b00 	mov.w	fp, #0
 80092aa:	ea5a 030b 	orrs.w	r3, sl, fp
 80092ae:	d054      	beq.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80092b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092b6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80092ba:	d036      	beq.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80092bc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80092c0:	d82f      	bhi.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80092c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092c6:	d032      	beq.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80092c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092cc:	d829      	bhi.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80092ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80092d0:	d02f      	beq.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80092d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80092d4:	d825      	bhi.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80092d6:	2b80      	cmp	r3, #128	@ 0x80
 80092d8:	d018      	beq.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80092da:	2b80      	cmp	r3, #128	@ 0x80
 80092dc:	d821      	bhi.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d002      	beq.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80092e2:	2b40      	cmp	r3, #64	@ 0x40
 80092e4:	d007      	beq.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80092e6:	e01c      	b.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092e8:	4b4f      	ldr	r3, [pc, #316]	@ (8009428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80092ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ec:	4a4e      	ldr	r2, [pc, #312]	@ (8009428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80092ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80092f4:	e01e      	b.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092fa:	3308      	adds	r3, #8
 80092fc:	2100      	movs	r1, #0
 80092fe:	4618      	mov	r0, r3
 8009300:	f001 fb94 	bl	800aa2c <RCCEx_PLL2_Config>
 8009304:	4603      	mov	r3, r0
 8009306:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800930a:	e013      	b.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800930c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009310:	3328      	adds	r3, #40	@ 0x28
 8009312:	2100      	movs	r1, #0
 8009314:	4618      	mov	r0, r3
 8009316:	f001 fc3b 	bl	800ab90 <RCCEx_PLL3_Config>
 800931a:	4603      	mov	r3, r0
 800931c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8009320:	e008      	b.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009322:	2301      	movs	r3, #1
 8009324:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009328:	e004      	b.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800932a:	bf00      	nop
 800932c:	e002      	b.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800932e:	bf00      	nop
 8009330:	e000      	b.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8009332:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009334:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009338:	2b00      	cmp	r3, #0
 800933a:	d10a      	bne.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800933c:	4b3a      	ldr	r3, [pc, #232]	@ (8009428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800933e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009340:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009344:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800934a:	4a37      	ldr	r2, [pc, #220]	@ (8009428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800934c:	430b      	orrs	r3, r1
 800934e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009350:	e003      	b.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009352:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009356:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800935a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800935e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009362:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009366:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800936a:	2300      	movs	r3, #0
 800936c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009370:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009374:	460b      	mov	r3, r1
 8009376:	4313      	orrs	r3, r2
 8009378:	d05c      	beq.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800937a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800937e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009380:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009384:	d03b      	beq.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009386:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800938a:	d834      	bhi.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800938c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009390:	d037      	beq.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8009392:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009396:	d82e      	bhi.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8009398:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800939c:	d033      	beq.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800939e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80093a2:	d828      	bhi.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80093a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093a8:	d01a      	beq.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80093aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093ae:	d822      	bhi.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d003      	beq.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x288>
 80093b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093b8:	d007      	beq.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x296>
 80093ba:	e01c      	b.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093bc:	4b1a      	ldr	r3, [pc, #104]	@ (8009428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80093be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093c0:	4a19      	ldr	r2, [pc, #100]	@ (8009428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80093c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80093c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80093c8:	e01e      	b.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093ce:	3308      	adds	r3, #8
 80093d0:	2100      	movs	r1, #0
 80093d2:	4618      	mov	r0, r3
 80093d4:	f001 fb2a 	bl	800aa2c <RCCEx_PLL2_Config>
 80093d8:	4603      	mov	r3, r0
 80093da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80093de:	e013      	b.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80093e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093e4:	3328      	adds	r3, #40	@ 0x28
 80093e6:	2100      	movs	r1, #0
 80093e8:	4618      	mov	r0, r3
 80093ea:	f001 fbd1 	bl	800ab90 <RCCEx_PLL3_Config>
 80093ee:	4603      	mov	r3, r0
 80093f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80093f4:	e008      	b.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80093fc:	e004      	b.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80093fe:	bf00      	nop
 8009400:	e002      	b.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8009402:	bf00      	nop
 8009404:	e000      	b.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8009406:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009408:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800940c:	2b00      	cmp	r3, #0
 800940e:	d10d      	bne.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8009410:	4b05      	ldr	r3, [pc, #20]	@ (8009428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009414:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8009418:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800941c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800941e:	4a02      	ldr	r2, [pc, #8]	@ (8009428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009420:	430b      	orrs	r3, r1
 8009422:	6513      	str	r3, [r2, #80]	@ 0x50
 8009424:	e006      	b.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8009426:	bf00      	nop
 8009428:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800942c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009430:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009434:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009440:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009444:	2300      	movs	r3, #0
 8009446:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800944a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800944e:	460b      	mov	r3, r1
 8009450:	4313      	orrs	r3, r2
 8009452:	d03a      	beq.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8009454:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800945a:	2b30      	cmp	r3, #48	@ 0x30
 800945c:	d01f      	beq.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800945e:	2b30      	cmp	r3, #48	@ 0x30
 8009460:	d819      	bhi.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8009462:	2b20      	cmp	r3, #32
 8009464:	d00c      	beq.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8009466:	2b20      	cmp	r3, #32
 8009468:	d815      	bhi.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800946a:	2b00      	cmp	r3, #0
 800946c:	d019      	beq.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800946e:	2b10      	cmp	r3, #16
 8009470:	d111      	bne.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009472:	4bae      	ldr	r3, [pc, #696]	@ (800972c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009476:	4aad      	ldr	r2, [pc, #692]	@ (800972c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009478:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800947c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800947e:	e011      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009480:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009484:	3308      	adds	r3, #8
 8009486:	2102      	movs	r1, #2
 8009488:	4618      	mov	r0, r3
 800948a:	f001 facf 	bl	800aa2c <RCCEx_PLL2_Config>
 800948e:	4603      	mov	r3, r0
 8009490:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009494:	e006      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009496:	2301      	movs	r3, #1
 8009498:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800949c:	e002      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800949e:	bf00      	nop
 80094a0:	e000      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80094a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d10a      	bne.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80094ac:	4b9f      	ldr	r3, [pc, #636]	@ (800972c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80094ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094b0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80094b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094ba:	4a9c      	ldr	r2, [pc, #624]	@ (800972c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80094bc:	430b      	orrs	r3, r1
 80094be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80094c0:	e003      	b.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80094c6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80094ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80094d6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80094da:	2300      	movs	r3, #0
 80094dc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80094e0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80094e4:	460b      	mov	r3, r1
 80094e6:	4313      	orrs	r3, r2
 80094e8:	d051      	beq.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80094ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80094f4:	d035      	beq.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80094f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80094fa:	d82e      	bhi.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80094fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009500:	d031      	beq.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8009502:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009506:	d828      	bhi.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8009508:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800950c:	d01a      	beq.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800950e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009512:	d822      	bhi.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8009514:	2b00      	cmp	r3, #0
 8009516:	d003      	beq.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8009518:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800951c:	d007      	beq.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800951e:	e01c      	b.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009520:	4b82      	ldr	r3, [pc, #520]	@ (800972c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009524:	4a81      	ldr	r2, [pc, #516]	@ (800972c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009526:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800952a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800952c:	e01c      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800952e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009532:	3308      	adds	r3, #8
 8009534:	2100      	movs	r1, #0
 8009536:	4618      	mov	r0, r3
 8009538:	f001 fa78 	bl	800aa2c <RCCEx_PLL2_Config>
 800953c:	4603      	mov	r3, r0
 800953e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009542:	e011      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009544:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009548:	3328      	adds	r3, #40	@ 0x28
 800954a:	2100      	movs	r1, #0
 800954c:	4618      	mov	r0, r3
 800954e:	f001 fb1f 	bl	800ab90 <RCCEx_PLL3_Config>
 8009552:	4603      	mov	r3, r0
 8009554:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009558:	e006      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800955a:	2301      	movs	r3, #1
 800955c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009560:	e002      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8009562:	bf00      	nop
 8009564:	e000      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8009566:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009568:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800956c:	2b00      	cmp	r3, #0
 800956e:	d10a      	bne.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009570:	4b6e      	ldr	r3, [pc, #440]	@ (800972c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009574:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009578:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800957c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800957e:	4a6b      	ldr	r2, [pc, #428]	@ (800972c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009580:	430b      	orrs	r3, r1
 8009582:	6513      	str	r3, [r2, #80]	@ 0x50
 8009584:	e003      	b.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009586:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800958a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800958e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009596:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800959a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800959e:	2300      	movs	r3, #0
 80095a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80095a4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80095a8:	460b      	mov	r3, r1
 80095aa:	4313      	orrs	r3, r2
 80095ac:	d053      	beq.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80095ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80095b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80095b8:	d033      	beq.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80095ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80095be:	d82c      	bhi.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80095c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80095c4:	d02f      	beq.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80095c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80095ca:	d826      	bhi.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80095cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80095d0:	d02b      	beq.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80095d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80095d6:	d820      	bhi.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80095d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095dc:	d012      	beq.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80095de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095e2:	d81a      	bhi.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d022      	beq.n	800962e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80095e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095ec:	d115      	bne.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80095ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095f2:	3308      	adds	r3, #8
 80095f4:	2101      	movs	r1, #1
 80095f6:	4618      	mov	r0, r3
 80095f8:	f001 fa18 	bl	800aa2c <RCCEx_PLL2_Config>
 80095fc:	4603      	mov	r3, r0
 80095fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009602:	e015      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009604:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009608:	3328      	adds	r3, #40	@ 0x28
 800960a:	2101      	movs	r1, #1
 800960c:	4618      	mov	r0, r3
 800960e:	f001 fabf 	bl	800ab90 <RCCEx_PLL3_Config>
 8009612:	4603      	mov	r3, r0
 8009614:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009618:	e00a      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009620:	e006      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8009622:	bf00      	nop
 8009624:	e004      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8009626:	bf00      	nop
 8009628:	e002      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800962a:	bf00      	nop
 800962c:	e000      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800962e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009630:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009634:	2b00      	cmp	r3, #0
 8009636:	d10a      	bne.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009638:	4b3c      	ldr	r3, [pc, #240]	@ (800972c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800963a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800963c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009640:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009644:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009646:	4a39      	ldr	r2, [pc, #228]	@ (800972c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009648:	430b      	orrs	r3, r1
 800964a:	6513      	str	r3, [r2, #80]	@ 0x50
 800964c:	e003      	b.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800964e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009652:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009656:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800965a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009662:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009666:	2300      	movs	r3, #0
 8009668:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800966c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009670:	460b      	mov	r3, r1
 8009672:	4313      	orrs	r3, r2
 8009674:	d060      	beq.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009676:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800967a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800967e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8009682:	d039      	beq.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8009684:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8009688:	d832      	bhi.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800968a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800968e:	d035      	beq.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009690:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009694:	d82c      	bhi.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009696:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800969a:	d031      	beq.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800969c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096a0:	d826      	bhi.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80096a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80096a6:	d02d      	beq.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80096a8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80096ac:	d820      	bhi.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80096ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096b2:	d012      	beq.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80096b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096b8:	d81a      	bhi.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d024      	beq.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80096be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096c2:	d115      	bne.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80096c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096c8:	3308      	adds	r3, #8
 80096ca:	2101      	movs	r1, #1
 80096cc:	4618      	mov	r0, r3
 80096ce:	f001 f9ad 	bl	800aa2c <RCCEx_PLL2_Config>
 80096d2:	4603      	mov	r3, r0
 80096d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80096d8:	e017      	b.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80096da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096de:	3328      	adds	r3, #40	@ 0x28
 80096e0:	2101      	movs	r1, #1
 80096e2:	4618      	mov	r0, r3
 80096e4:	f001 fa54 	bl	800ab90 <RCCEx_PLL3_Config>
 80096e8:	4603      	mov	r3, r0
 80096ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80096ee:	e00c      	b.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80096f0:	2301      	movs	r3, #1
 80096f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80096f6:	e008      	b.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80096f8:	bf00      	nop
 80096fa:	e006      	b.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80096fc:	bf00      	nop
 80096fe:	e004      	b.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009700:	bf00      	nop
 8009702:	e002      	b.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009704:	bf00      	nop
 8009706:	e000      	b.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800970a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800970e:	2b00      	cmp	r3, #0
 8009710:	d10e      	bne.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009712:	4b06      	ldr	r3, [pc, #24]	@ (800972c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009716:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800971a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800971e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009722:	4a02      	ldr	r2, [pc, #8]	@ (800972c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009724:	430b      	orrs	r3, r1
 8009726:	6593      	str	r3, [r2, #88]	@ 0x58
 8009728:	e006      	b.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800972a:	bf00      	nop
 800972c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009730:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009734:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009738:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800973c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009740:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009744:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009748:	2300      	movs	r3, #0
 800974a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800974e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009752:	460b      	mov	r3, r1
 8009754:	4313      	orrs	r3, r2
 8009756:	d037      	beq.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009758:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800975c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800975e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009762:	d00e      	beq.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009764:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009768:	d816      	bhi.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800976a:	2b00      	cmp	r3, #0
 800976c:	d018      	beq.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800976e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009772:	d111      	bne.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009774:	4bc4      	ldr	r3, [pc, #784]	@ (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009778:	4ac3      	ldr	r2, [pc, #780]	@ (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800977a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800977e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009780:	e00f      	b.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009782:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009786:	3308      	adds	r3, #8
 8009788:	2101      	movs	r1, #1
 800978a:	4618      	mov	r0, r3
 800978c:	f001 f94e 	bl	800aa2c <RCCEx_PLL2_Config>
 8009790:	4603      	mov	r3, r0
 8009792:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009796:	e004      	b.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009798:	2301      	movs	r3, #1
 800979a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800979e:	e000      	b.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80097a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d10a      	bne.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80097aa:	4bb7      	ldr	r3, [pc, #732]	@ (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80097ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097ae:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80097b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80097b8:	4ab3      	ldr	r2, [pc, #716]	@ (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80097ba:	430b      	orrs	r3, r1
 80097bc:	6513      	str	r3, [r2, #80]	@ 0x50
 80097be:	e003      	b.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80097c4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80097c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80097d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80097d8:	2300      	movs	r3, #0
 80097da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80097de:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80097e2:	460b      	mov	r3, r1
 80097e4:	4313      	orrs	r3, r2
 80097e6:	d039      	beq.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80097e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097ee:	2b03      	cmp	r3, #3
 80097f0:	d81c      	bhi.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80097f2:	a201      	add	r2, pc, #4	@ (adr r2, 80097f8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80097f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f8:	08009835 	.word	0x08009835
 80097fc:	08009809 	.word	0x08009809
 8009800:	08009817 	.word	0x08009817
 8009804:	08009835 	.word	0x08009835
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009808:	4b9f      	ldr	r3, [pc, #636]	@ (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800980a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800980c:	4a9e      	ldr	r2, [pc, #632]	@ (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800980e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009812:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009814:	e00f      	b.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009816:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800981a:	3308      	adds	r3, #8
 800981c:	2102      	movs	r1, #2
 800981e:	4618      	mov	r0, r3
 8009820:	f001 f904 	bl	800aa2c <RCCEx_PLL2_Config>
 8009824:	4603      	mov	r3, r0
 8009826:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800982a:	e004      	b.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800982c:	2301      	movs	r3, #1
 800982e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009832:	e000      	b.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009834:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009836:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800983a:	2b00      	cmp	r3, #0
 800983c:	d10a      	bne.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800983e:	4b92      	ldr	r3, [pc, #584]	@ (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009842:	f023 0103 	bic.w	r1, r3, #3
 8009846:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800984a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800984c:	4a8e      	ldr	r2, [pc, #568]	@ (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800984e:	430b      	orrs	r3, r1
 8009850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009852:	e003      	b.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009854:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009858:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800985c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009864:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009868:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800986c:	2300      	movs	r3, #0
 800986e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009872:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009876:	460b      	mov	r3, r1
 8009878:	4313      	orrs	r3, r2
 800987a:	f000 8099 	beq.w	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800987e:	4b83      	ldr	r3, [pc, #524]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a82      	ldr	r2, [pc, #520]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009884:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009888:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800988a:	f7fa fd87 	bl	800439c <HAL_GetTick>
 800988e:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009892:	e00b      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009894:	f7fa fd82 	bl	800439c <HAL_GetTick>
 8009898:	4602      	mov	r2, r0
 800989a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800989e:	1ad3      	subs	r3, r2, r3
 80098a0:	2b64      	cmp	r3, #100	@ 0x64
 80098a2:	d903      	bls.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80098a4:	2303      	movs	r3, #3
 80098a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80098aa:	e005      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80098ac:	4b77      	ldr	r3, [pc, #476]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d0ed      	beq.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80098b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d173      	bne.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80098c0:	4b71      	ldr	r3, [pc, #452]	@ (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80098c2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80098c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80098cc:	4053      	eors	r3, r2
 80098ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d015      	beq.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80098d6:	4b6c      	ldr	r3, [pc, #432]	@ (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80098d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098de:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80098e2:	4b69      	ldr	r3, [pc, #420]	@ (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80098e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098e6:	4a68      	ldr	r2, [pc, #416]	@ (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80098e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80098ec:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80098ee:	4b66      	ldr	r3, [pc, #408]	@ (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80098f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098f2:	4a65      	ldr	r2, [pc, #404]	@ (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80098f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80098f8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80098fa:	4a63      	ldr	r2, [pc, #396]	@ (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80098fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009900:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009902:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009906:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800990a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800990e:	d118      	bne.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009910:	f7fa fd44 	bl	800439c <HAL_GetTick>
 8009914:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009918:	e00d      	b.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800991a:	f7fa fd3f 	bl	800439c <HAL_GetTick>
 800991e:	4602      	mov	r2, r0
 8009920:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009924:	1ad2      	subs	r2, r2, r3
 8009926:	f241 3388 	movw	r3, #5000	@ 0x1388
 800992a:	429a      	cmp	r2, r3
 800992c:	d903      	bls.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800992e:	2303      	movs	r3, #3
 8009930:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8009934:	e005      	b.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009936:	4b54      	ldr	r3, [pc, #336]	@ (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800993a:	f003 0302 	and.w	r3, r3, #2
 800993e:	2b00      	cmp	r3, #0
 8009940:	d0eb      	beq.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009942:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009946:	2b00      	cmp	r3, #0
 8009948:	d129      	bne.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800994a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800994e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009952:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009956:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800995a:	d10e      	bne.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800995c:	4b4a      	ldr	r3, [pc, #296]	@ (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800995e:	691b      	ldr	r3, [r3, #16]
 8009960:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009964:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009968:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800996c:	091a      	lsrs	r2, r3, #4
 800996e:	4b48      	ldr	r3, [pc, #288]	@ (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009970:	4013      	ands	r3, r2
 8009972:	4a45      	ldr	r2, [pc, #276]	@ (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009974:	430b      	orrs	r3, r1
 8009976:	6113      	str	r3, [r2, #16]
 8009978:	e005      	b.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800997a:	4b43      	ldr	r3, [pc, #268]	@ (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800997c:	691b      	ldr	r3, [r3, #16]
 800997e:	4a42      	ldr	r2, [pc, #264]	@ (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009980:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009984:	6113      	str	r3, [r2, #16]
 8009986:	4b40      	ldr	r3, [pc, #256]	@ (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009988:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800998a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800998e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009996:	4a3c      	ldr	r2, [pc, #240]	@ (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009998:	430b      	orrs	r3, r1
 800999a:	6713      	str	r3, [r2, #112]	@ 0x70
 800999c:	e008      	b.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800999e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80099a2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80099a6:	e003      	b.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80099ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80099b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b8:	f002 0301 	and.w	r3, r2, #1
 80099bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80099c0:	2300      	movs	r3, #0
 80099c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80099c6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80099ca:	460b      	mov	r3, r1
 80099cc:	4313      	orrs	r3, r2
 80099ce:	f000 8090 	beq.w	8009af2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80099d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099da:	2b28      	cmp	r3, #40	@ 0x28
 80099dc:	d870      	bhi.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80099de:	a201      	add	r2, pc, #4	@ (adr r2, 80099e4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80099e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e4:	08009ac9 	.word	0x08009ac9
 80099e8:	08009ac1 	.word	0x08009ac1
 80099ec:	08009ac1 	.word	0x08009ac1
 80099f0:	08009ac1 	.word	0x08009ac1
 80099f4:	08009ac1 	.word	0x08009ac1
 80099f8:	08009ac1 	.word	0x08009ac1
 80099fc:	08009ac1 	.word	0x08009ac1
 8009a00:	08009ac1 	.word	0x08009ac1
 8009a04:	08009a95 	.word	0x08009a95
 8009a08:	08009ac1 	.word	0x08009ac1
 8009a0c:	08009ac1 	.word	0x08009ac1
 8009a10:	08009ac1 	.word	0x08009ac1
 8009a14:	08009ac1 	.word	0x08009ac1
 8009a18:	08009ac1 	.word	0x08009ac1
 8009a1c:	08009ac1 	.word	0x08009ac1
 8009a20:	08009ac1 	.word	0x08009ac1
 8009a24:	08009aab 	.word	0x08009aab
 8009a28:	08009ac1 	.word	0x08009ac1
 8009a2c:	08009ac1 	.word	0x08009ac1
 8009a30:	08009ac1 	.word	0x08009ac1
 8009a34:	08009ac1 	.word	0x08009ac1
 8009a38:	08009ac1 	.word	0x08009ac1
 8009a3c:	08009ac1 	.word	0x08009ac1
 8009a40:	08009ac1 	.word	0x08009ac1
 8009a44:	08009ac9 	.word	0x08009ac9
 8009a48:	08009ac1 	.word	0x08009ac1
 8009a4c:	08009ac1 	.word	0x08009ac1
 8009a50:	08009ac1 	.word	0x08009ac1
 8009a54:	08009ac1 	.word	0x08009ac1
 8009a58:	08009ac1 	.word	0x08009ac1
 8009a5c:	08009ac1 	.word	0x08009ac1
 8009a60:	08009ac1 	.word	0x08009ac1
 8009a64:	08009ac9 	.word	0x08009ac9
 8009a68:	08009ac1 	.word	0x08009ac1
 8009a6c:	08009ac1 	.word	0x08009ac1
 8009a70:	08009ac1 	.word	0x08009ac1
 8009a74:	08009ac1 	.word	0x08009ac1
 8009a78:	08009ac1 	.word	0x08009ac1
 8009a7c:	08009ac1 	.word	0x08009ac1
 8009a80:	08009ac1 	.word	0x08009ac1
 8009a84:	08009ac9 	.word	0x08009ac9
 8009a88:	58024400 	.word	0x58024400
 8009a8c:	58024800 	.word	0x58024800
 8009a90:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a98:	3308      	adds	r3, #8
 8009a9a:	2101      	movs	r1, #1
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f000 ffc5 	bl	800aa2c <RCCEx_PLL2_Config>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009aa8:	e00f      	b.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009aaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009aae:	3328      	adds	r3, #40	@ 0x28
 8009ab0:	2101      	movs	r1, #1
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f001 f86c 	bl	800ab90 <RCCEx_PLL3_Config>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009abe:	e004      	b.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009ac6:	e000      	b.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009ac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009aca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d10b      	bne.n	8009aea <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009ad2:	4bc0      	ldr	r3, [pc, #768]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ad6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ae2:	4abc      	ldr	r2, [pc, #752]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009ae4:	430b      	orrs	r3, r1
 8009ae6:	6553      	str	r3, [r2, #84]	@ 0x54
 8009ae8:	e003      	b.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009aee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009af2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afa:	f002 0302 	and.w	r3, r2, #2
 8009afe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009b02:	2300      	movs	r3, #0
 8009b04:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009b08:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	d043      	beq.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009b12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b1a:	2b05      	cmp	r3, #5
 8009b1c:	d824      	bhi.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8009b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8009b24 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8009b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b24:	08009b71 	.word	0x08009b71
 8009b28:	08009b3d 	.word	0x08009b3d
 8009b2c:	08009b53 	.word	0x08009b53
 8009b30:	08009b71 	.word	0x08009b71
 8009b34:	08009b71 	.word	0x08009b71
 8009b38:	08009b71 	.word	0x08009b71
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b40:	3308      	adds	r3, #8
 8009b42:	2101      	movs	r1, #1
 8009b44:	4618      	mov	r0, r3
 8009b46:	f000 ff71 	bl	800aa2c <RCCEx_PLL2_Config>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009b50:	e00f      	b.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b56:	3328      	adds	r3, #40	@ 0x28
 8009b58:	2101      	movs	r1, #1
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f001 f818 	bl	800ab90 <RCCEx_PLL3_Config>
 8009b60:	4603      	mov	r3, r0
 8009b62:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009b66:	e004      	b.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009b6e:	e000      	b.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8009b70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b72:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d10b      	bne.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009b7a:	4b96      	ldr	r3, [pc, #600]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b7e:	f023 0107 	bic.w	r1, r3, #7
 8009b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b8a:	4a92      	ldr	r2, [pc, #584]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009b8c:	430b      	orrs	r3, r1
 8009b8e:	6553      	str	r3, [r2, #84]	@ 0x54
 8009b90:	e003      	b.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b92:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009b96:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009b9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba2:	f002 0304 	and.w	r3, r2, #4
 8009ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009baa:	2300      	movs	r3, #0
 8009bac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009bb0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	d043      	beq.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009bba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009bc2:	2b05      	cmp	r3, #5
 8009bc4:	d824      	bhi.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8009bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8009bcc <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8009bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bcc:	08009c19 	.word	0x08009c19
 8009bd0:	08009be5 	.word	0x08009be5
 8009bd4:	08009bfb 	.word	0x08009bfb
 8009bd8:	08009c19 	.word	0x08009c19
 8009bdc:	08009c19 	.word	0x08009c19
 8009be0:	08009c19 	.word	0x08009c19
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009be4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009be8:	3308      	adds	r3, #8
 8009bea:	2101      	movs	r1, #1
 8009bec:	4618      	mov	r0, r3
 8009bee:	f000 ff1d 	bl	800aa2c <RCCEx_PLL2_Config>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009bf8:	e00f      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009bfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bfe:	3328      	adds	r3, #40	@ 0x28
 8009c00:	2101      	movs	r1, #1
 8009c02:	4618      	mov	r0, r3
 8009c04:	f000 ffc4 	bl	800ab90 <RCCEx_PLL3_Config>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009c0e:	e004      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c10:	2301      	movs	r3, #1
 8009c12:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009c16:	e000      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8009c18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c1a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d10b      	bne.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009c22:	4b6c      	ldr	r3, [pc, #432]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c26:	f023 0107 	bic.w	r1, r3, #7
 8009c2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009c32:	4a68      	ldr	r2, [pc, #416]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009c34:	430b      	orrs	r3, r1
 8009c36:	6593      	str	r3, [r2, #88]	@ 0x58
 8009c38:	e003      	b.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009c3e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009c42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4a:	f002 0320 	and.w	r3, r2, #32
 8009c4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009c52:	2300      	movs	r3, #0
 8009c54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009c58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	d055      	beq.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009c62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009c6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009c6e:	d033      	beq.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8009c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009c74:	d82c      	bhi.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009c76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c7a:	d02f      	beq.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8009c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c80:	d826      	bhi.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009c82:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009c86:	d02b      	beq.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009c88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009c8c:	d820      	bhi.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009c8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c92:	d012      	beq.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009c94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c98:	d81a      	bhi.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d022      	beq.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8009c9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ca2:	d115      	bne.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ca8:	3308      	adds	r3, #8
 8009caa:	2100      	movs	r1, #0
 8009cac:	4618      	mov	r0, r3
 8009cae:	f000 febd 	bl	800aa2c <RCCEx_PLL2_Config>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009cb8:	e015      	b.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009cba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cbe:	3328      	adds	r3, #40	@ 0x28
 8009cc0:	2102      	movs	r1, #2
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f000 ff64 	bl	800ab90 <RCCEx_PLL3_Config>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009cce:	e00a      	b.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009cd6:	e006      	b.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009cd8:	bf00      	nop
 8009cda:	e004      	b.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009cdc:	bf00      	nop
 8009cde:	e002      	b.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009ce0:	bf00      	nop
 8009ce2:	e000      	b.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009ce4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ce6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d10b      	bne.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009cee:	4b39      	ldr	r3, [pc, #228]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cf2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009cf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009cfe:	4a35      	ldr	r2, [pc, #212]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009d00:	430b      	orrs	r3, r1
 8009d02:	6553      	str	r3, [r2, #84]	@ 0x54
 8009d04:	e003      	b.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d06:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009d0a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009d0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d16:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009d1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009d1e:	2300      	movs	r3, #0
 8009d20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009d24:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009d28:	460b      	mov	r3, r1
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	d058      	beq.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009d2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009d36:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009d3a:	d033      	beq.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009d3c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009d40:	d82c      	bhi.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009d42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d46:	d02f      	beq.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8009d48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d4c:	d826      	bhi.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009d4e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009d52:	d02b      	beq.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8009d54:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009d58:	d820      	bhi.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009d5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d5e:	d012      	beq.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8009d60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d64:	d81a      	bhi.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d022      	beq.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8009d6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d6e:	d115      	bne.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d74:	3308      	adds	r3, #8
 8009d76:	2100      	movs	r1, #0
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f000 fe57 	bl	800aa2c <RCCEx_PLL2_Config>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009d84:	e015      	b.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d8a:	3328      	adds	r3, #40	@ 0x28
 8009d8c:	2102      	movs	r1, #2
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f000 fefe 	bl	800ab90 <RCCEx_PLL3_Config>
 8009d94:	4603      	mov	r3, r0
 8009d96:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009d9a:	e00a      	b.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009da2:	e006      	b.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009da4:	bf00      	nop
 8009da6:	e004      	b.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009da8:	bf00      	nop
 8009daa:	e002      	b.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009dac:	bf00      	nop
 8009dae:	e000      	b.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009db0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009db2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d10e      	bne.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009dba:	4b06      	ldr	r3, [pc, #24]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dbe:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dc6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009dca:	4a02      	ldr	r2, [pc, #8]	@ (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009dcc:	430b      	orrs	r3, r1
 8009dce:	6593      	str	r3, [r2, #88]	@ 0x58
 8009dd0:	e006      	b.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8009dd2:	bf00      	nop
 8009dd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dd8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009ddc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009de0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009dec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009df0:	2300      	movs	r3, #0
 8009df2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009df6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009dfa:	460b      	mov	r3, r1
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	d055      	beq.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e04:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009e08:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009e0c:	d033      	beq.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8009e0e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009e12:	d82c      	bhi.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8009e14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e18:	d02f      	beq.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8009e1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e1e:	d826      	bhi.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8009e20:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009e24:	d02b      	beq.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8009e26:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009e2a:	d820      	bhi.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8009e2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e30:	d012      	beq.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8009e32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e36:	d81a      	bhi.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d022      	beq.n	8009e82 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8009e3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e40:	d115      	bne.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e46:	3308      	adds	r3, #8
 8009e48:	2100      	movs	r1, #0
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f000 fdee 	bl	800aa2c <RCCEx_PLL2_Config>
 8009e50:	4603      	mov	r3, r0
 8009e52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009e56:	e015      	b.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009e58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e5c:	3328      	adds	r3, #40	@ 0x28
 8009e5e:	2102      	movs	r1, #2
 8009e60:	4618      	mov	r0, r3
 8009e62:	f000 fe95 	bl	800ab90 <RCCEx_PLL3_Config>
 8009e66:	4603      	mov	r3, r0
 8009e68:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009e6c:	e00a      	b.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009e74:	e006      	b.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8009e76:	bf00      	nop
 8009e78:	e004      	b.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8009e7a:	bf00      	nop
 8009e7c:	e002      	b.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8009e7e:	bf00      	nop
 8009e80:	e000      	b.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8009e82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e84:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d10b      	bne.n	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009e8c:	4ba1      	ldr	r3, [pc, #644]	@ (800a114 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e90:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009e94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009e9c:	4a9d      	ldr	r2, [pc, #628]	@ (800a114 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009e9e:	430b      	orrs	r3, r1
 8009ea0:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ea2:	e003      	b.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ea4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009ea8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009eac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb4:	f002 0308 	and.w	r3, r2, #8
 8009eb8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009ec2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	d01e      	beq.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009ecc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009ed4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ed8:	d10c      	bne.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009eda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ede:	3328      	adds	r3, #40	@ 0x28
 8009ee0:	2102      	movs	r1, #2
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f000 fe54 	bl	800ab90 <RCCEx_PLL3_Config>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d002      	beq.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009ef4:	4b87      	ldr	r3, [pc, #540]	@ (800a114 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ef8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009f04:	4a83      	ldr	r2, [pc, #524]	@ (800a114 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009f06:	430b      	orrs	r3, r1
 8009f08:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009f0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f12:	f002 0310 	and.w	r3, r2, #16
 8009f16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009f20:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009f24:	460b      	mov	r3, r1
 8009f26:	4313      	orrs	r3, r2
 8009f28:	d01e      	beq.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009f32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f36:	d10c      	bne.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009f38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f3c:	3328      	adds	r3, #40	@ 0x28
 8009f3e:	2102      	movs	r1, #2
 8009f40:	4618      	mov	r0, r3
 8009f42:	f000 fe25 	bl	800ab90 <RCCEx_PLL3_Config>
 8009f46:	4603      	mov	r3, r0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d002      	beq.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009f52:	4b70      	ldr	r3, [pc, #448]	@ (800a114 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f56:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009f5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009f62:	4a6c      	ldr	r2, [pc, #432]	@ (800a114 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009f64:	430b      	orrs	r3, r1
 8009f66:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f70:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009f74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009f78:	2300      	movs	r3, #0
 8009f7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f7e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009f82:	460b      	mov	r3, r1
 8009f84:	4313      	orrs	r3, r2
 8009f86:	d03e      	beq.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009f88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009f90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f94:	d022      	beq.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8009f96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f9a:	d81b      	bhi.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d003      	beq.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8009fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fa4:	d00b      	beq.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8009fa6:	e015      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009fa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fac:	3308      	adds	r3, #8
 8009fae:	2100      	movs	r1, #0
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f000 fd3b 	bl	800aa2c <RCCEx_PLL2_Config>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009fbc:	e00f      	b.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fc2:	3328      	adds	r3, #40	@ 0x28
 8009fc4:	2102      	movs	r1, #2
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f000 fde2 	bl	800ab90 <RCCEx_PLL3_Config>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009fd2:	e004      	b.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009fda:	e000      	b.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8009fdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fde:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d10b      	bne.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009fe6:	4b4b      	ldr	r3, [pc, #300]	@ (800a114 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fea:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ff2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009ff6:	4a47      	ldr	r2, [pc, #284]	@ (800a114 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009ff8:	430b      	orrs	r3, r1
 8009ffa:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ffc:	e003      	b.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ffe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a002:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a006:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a012:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a014:	2300      	movs	r3, #0
 800a016:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a018:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a01c:	460b      	mov	r3, r1
 800a01e:	4313      	orrs	r3, r2
 800a020:	d03b      	beq.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a022:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a02a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a02e:	d01f      	beq.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800a030:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a034:	d818      	bhi.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a036:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a03a:	d003      	beq.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800a03c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a040:	d007      	beq.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800a042:	e011      	b.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a044:	4b33      	ldr	r3, [pc, #204]	@ (800a114 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a048:	4a32      	ldr	r2, [pc, #200]	@ (800a114 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a04a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a04e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a050:	e00f      	b.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a052:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a056:	3328      	adds	r3, #40	@ 0x28
 800a058:	2101      	movs	r1, #1
 800a05a:	4618      	mov	r0, r3
 800a05c:	f000 fd98 	bl	800ab90 <RCCEx_PLL3_Config>
 800a060:	4603      	mov	r3, r0
 800a062:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800a066:	e004      	b.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a068:	2301      	movs	r3, #1
 800a06a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a06e:	e000      	b.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800a070:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a072:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a076:	2b00      	cmp	r3, #0
 800a078:	d10b      	bne.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a07a:	4b26      	ldr	r3, [pc, #152]	@ (800a114 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a07c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a07e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a082:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a08a:	4a22      	ldr	r2, [pc, #136]	@ (800a114 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a08c:	430b      	orrs	r3, r1
 800a08e:	6553      	str	r3, [r2, #84]	@ 0x54
 800a090:	e003      	b.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a092:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a096:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a09a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a0a6:	673b      	str	r3, [r7, #112]	@ 0x70
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	677b      	str	r3, [r7, #116]	@ 0x74
 800a0ac:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	d034      	beq.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a0b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d003      	beq.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800a0c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0c4:	d007      	beq.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800a0c6:	e011      	b.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0c8:	4b12      	ldr	r3, [pc, #72]	@ (800a114 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a0ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0cc:	4a11      	ldr	r2, [pc, #68]	@ (800a114 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a0ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a0d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a0d4:	e00e      	b.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a0d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0da:	3308      	adds	r3, #8
 800a0dc:	2102      	movs	r1, #2
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f000 fca4 	bl	800aa2c <RCCEx_PLL2_Config>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a0ea:	e003      	b.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a0f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d10d      	bne.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a0fc:	4b05      	ldr	r3, [pc, #20]	@ (800a114 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a0fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a100:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a104:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a108:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a10a:	4a02      	ldr	r2, [pc, #8]	@ (800a114 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a10c:	430b      	orrs	r3, r1
 800a10e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a110:	e006      	b.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800a112:	bf00      	nop
 800a114:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a118:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a11c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a120:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a128:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a12c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a12e:	2300      	movs	r3, #0
 800a130:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a132:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a136:	460b      	mov	r3, r1
 800a138:	4313      	orrs	r3, r2
 800a13a:	d00c      	beq.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a13c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a140:	3328      	adds	r3, #40	@ 0x28
 800a142:	2102      	movs	r1, #2
 800a144:	4618      	mov	r0, r3
 800a146:	f000 fd23 	bl	800ab90 <RCCEx_PLL3_Config>
 800a14a:	4603      	mov	r3, r0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d002      	beq.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800a150:	2301      	movs	r3, #1
 800a152:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a156:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a162:	663b      	str	r3, [r7, #96]	@ 0x60
 800a164:	2300      	movs	r3, #0
 800a166:	667b      	str	r3, [r7, #100]	@ 0x64
 800a168:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a16c:	460b      	mov	r3, r1
 800a16e:	4313      	orrs	r3, r2
 800a170:	d038      	beq.n	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a172:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a17a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a17e:	d018      	beq.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800a180:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a184:	d811      	bhi.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800a186:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a18a:	d014      	beq.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800a18c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a190:	d80b      	bhi.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800a192:	2b00      	cmp	r3, #0
 800a194:	d011      	beq.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800a196:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a19a:	d106      	bne.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a19c:	4bc3      	ldr	r3, [pc, #780]	@ (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a19e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1a0:	4ac2      	ldr	r2, [pc, #776]	@ (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a1a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a1a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a1a8:	e008      	b.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a1b0:	e004      	b.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800a1b2:	bf00      	nop
 800a1b4:	e002      	b.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800a1b6:	bf00      	nop
 800a1b8:	e000      	b.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800a1ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d10b      	bne.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a1c4:	4bb9      	ldr	r3, [pc, #740]	@ (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a1c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1c8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a1cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1d4:	4ab5      	ldr	r2, [pc, #724]	@ (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a1d6:	430b      	orrs	r3, r1
 800a1d8:	6553      	str	r3, [r2, #84]	@ 0x54
 800a1da:	e003      	b.n	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a1e0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a1e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ec:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a1f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a1f6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	d009      	beq.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a200:	4baa      	ldr	r3, [pc, #680]	@ (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a202:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a204:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a208:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a20c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a20e:	4aa7      	ldr	r2, [pc, #668]	@ (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a210:	430b      	orrs	r3, r1
 800a212:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a214:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a220:	653b      	str	r3, [r7, #80]	@ 0x50
 800a222:	2300      	movs	r3, #0
 800a224:	657b      	str	r3, [r7, #84]	@ 0x54
 800a226:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a22a:	460b      	mov	r3, r1
 800a22c:	4313      	orrs	r3, r2
 800a22e:	d009      	beq.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a230:	4b9e      	ldr	r3, [pc, #632]	@ (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a232:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a234:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a238:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a23c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a23e:	4a9b      	ldr	r2, [pc, #620]	@ (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a240:	430b      	orrs	r3, r1
 800a242:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800a244:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a250:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a252:	2300      	movs	r3, #0
 800a254:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a256:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a25a:	460b      	mov	r3, r1
 800a25c:	4313      	orrs	r3, r2
 800a25e:	d009      	beq.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800a260:	4b92      	ldr	r3, [pc, #584]	@ (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a264:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800a268:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a26c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a26e:	4a8f      	ldr	r2, [pc, #572]	@ (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a270:	430b      	orrs	r3, r1
 800a272:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a274:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a280:	643b      	str	r3, [r7, #64]	@ 0x40
 800a282:	2300      	movs	r3, #0
 800a284:	647b      	str	r3, [r7, #68]	@ 0x44
 800a286:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a28a:	460b      	mov	r3, r1
 800a28c:	4313      	orrs	r3, r2
 800a28e:	d00e      	beq.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a290:	4b86      	ldr	r3, [pc, #536]	@ (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a292:	691b      	ldr	r3, [r3, #16]
 800a294:	4a85      	ldr	r2, [pc, #532]	@ (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a296:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a29a:	6113      	str	r3, [r2, #16]
 800a29c:	4b83      	ldr	r3, [pc, #524]	@ (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a29e:	6919      	ldr	r1, [r3, #16]
 800a2a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a2a8:	4a80      	ldr	r2, [pc, #512]	@ (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a2aa:	430b      	orrs	r3, r1
 800a2ac:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a2ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a2ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a2bc:	2300      	movs	r3, #0
 800a2be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2c0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	d009      	beq.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a2ca:	4b78      	ldr	r3, [pc, #480]	@ (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a2cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2ce:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a2d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2d8:	4a74      	ldr	r2, [pc, #464]	@ (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a2da:	430b      	orrs	r3, r1
 800a2dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a2de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a2ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2f0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	d00a      	beq.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a2fa:	4b6c      	ldr	r3, [pc, #432]	@ (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a2fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2fe:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a302:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a306:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a30a:	4a68      	ldr	r2, [pc, #416]	@ (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a30c:	430b      	orrs	r3, r1
 800a30e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a310:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a318:	2100      	movs	r1, #0
 800a31a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a31c:	f003 0301 	and.w	r3, r3, #1
 800a320:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a322:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a326:	460b      	mov	r3, r1
 800a328:	4313      	orrs	r3, r2
 800a32a:	d011      	beq.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a32c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a330:	3308      	adds	r3, #8
 800a332:	2100      	movs	r1, #0
 800a334:	4618      	mov	r0, r3
 800a336:	f000 fb79 	bl	800aa2c <RCCEx_PLL2_Config>
 800a33a:	4603      	mov	r3, r0
 800a33c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a340:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a344:	2b00      	cmp	r3, #0
 800a346:	d003      	beq.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a348:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a34c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a350:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a358:	2100      	movs	r1, #0
 800a35a:	6239      	str	r1, [r7, #32]
 800a35c:	f003 0302 	and.w	r3, r3, #2
 800a360:	627b      	str	r3, [r7, #36]	@ 0x24
 800a362:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a366:	460b      	mov	r3, r1
 800a368:	4313      	orrs	r3, r2
 800a36a:	d011      	beq.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a36c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a370:	3308      	adds	r3, #8
 800a372:	2101      	movs	r1, #1
 800a374:	4618      	mov	r0, r3
 800a376:	f000 fb59 	bl	800aa2c <RCCEx_PLL2_Config>
 800a37a:	4603      	mov	r3, r0
 800a37c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a380:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a384:	2b00      	cmp	r3, #0
 800a386:	d003      	beq.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a388:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a38c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a390:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a398:	2100      	movs	r1, #0
 800a39a:	61b9      	str	r1, [r7, #24]
 800a39c:	f003 0304 	and.w	r3, r3, #4
 800a3a0:	61fb      	str	r3, [r7, #28]
 800a3a2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	d011      	beq.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a3ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3b0:	3308      	adds	r3, #8
 800a3b2:	2102      	movs	r1, #2
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f000 fb39 	bl	800aa2c <RCCEx_PLL2_Config>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a3c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d003      	beq.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a3cc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a3d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d8:	2100      	movs	r1, #0
 800a3da:	6139      	str	r1, [r7, #16]
 800a3dc:	f003 0308 	and.w	r3, r3, #8
 800a3e0:	617b      	str	r3, [r7, #20]
 800a3e2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a3e6:	460b      	mov	r3, r1
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	d011      	beq.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a3ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3f0:	3328      	adds	r3, #40	@ 0x28
 800a3f2:	2100      	movs	r1, #0
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f000 fbcb 	bl	800ab90 <RCCEx_PLL3_Config>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800a400:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a404:	2b00      	cmp	r3, #0
 800a406:	d003      	beq.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a408:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a40c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a410:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a418:	2100      	movs	r1, #0
 800a41a:	60b9      	str	r1, [r7, #8]
 800a41c:	f003 0310 	and.w	r3, r3, #16
 800a420:	60fb      	str	r3, [r7, #12]
 800a422:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a426:	460b      	mov	r3, r1
 800a428:	4313      	orrs	r3, r2
 800a42a:	d011      	beq.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a42c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a430:	3328      	adds	r3, #40	@ 0x28
 800a432:	2101      	movs	r1, #1
 800a434:	4618      	mov	r0, r3
 800a436:	f000 fbab 	bl	800ab90 <RCCEx_PLL3_Config>
 800a43a:	4603      	mov	r3, r0
 800a43c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a440:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a444:	2b00      	cmp	r3, #0
 800a446:	d003      	beq.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a448:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a44c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a450:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a458:	2100      	movs	r1, #0
 800a45a:	6039      	str	r1, [r7, #0]
 800a45c:	f003 0320 	and.w	r3, r3, #32
 800a460:	607b      	str	r3, [r7, #4]
 800a462:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a466:	460b      	mov	r3, r1
 800a468:	4313      	orrs	r3, r2
 800a46a:	d011      	beq.n	800a490 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a46c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a470:	3328      	adds	r3, #40	@ 0x28
 800a472:	2102      	movs	r1, #2
 800a474:	4618      	mov	r0, r3
 800a476:	f000 fb8b 	bl	800ab90 <RCCEx_PLL3_Config>
 800a47a:	4603      	mov	r3, r0
 800a47c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a480:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a484:	2b00      	cmp	r3, #0
 800a486:	d003      	beq.n	800a490 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a488:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a48c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800a490:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800a494:	2b00      	cmp	r3, #0
 800a496:	d101      	bne.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800a498:	2300      	movs	r3, #0
 800a49a:	e000      	b.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800a49c:	2301      	movs	r3, #1
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a4aa:	bf00      	nop
 800a4ac:	58024400 	.word	0x58024400

0800a4b0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800a4b4:	f7fe fde2 	bl	800907c <HAL_RCC_GetHCLKFreq>
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	4b06      	ldr	r3, [pc, #24]	@ (800a4d4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a4bc:	6a1b      	ldr	r3, [r3, #32]
 800a4be:	091b      	lsrs	r3, r3, #4
 800a4c0:	f003 0307 	and.w	r3, r3, #7
 800a4c4:	4904      	ldr	r1, [pc, #16]	@ (800a4d8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a4c6:	5ccb      	ldrb	r3, [r1, r3]
 800a4c8:	f003 031f 	and.w	r3, r3, #31
 800a4cc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	bd80      	pop	{r7, pc}
 800a4d4:	58024400 	.word	0x58024400
 800a4d8:	080144f0 	.word	0x080144f0

0800a4dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b089      	sub	sp, #36	@ 0x24
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a4e4:	4ba1      	ldr	r3, [pc, #644]	@ (800a76c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4e8:	f003 0303 	and.w	r3, r3, #3
 800a4ec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a4ee:	4b9f      	ldr	r3, [pc, #636]	@ (800a76c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4f2:	0b1b      	lsrs	r3, r3, #12
 800a4f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a4f8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a4fa:	4b9c      	ldr	r3, [pc, #624]	@ (800a76c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4fe:	091b      	lsrs	r3, r3, #4
 800a500:	f003 0301 	and.w	r3, r3, #1
 800a504:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a506:	4b99      	ldr	r3, [pc, #612]	@ (800a76c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a50a:	08db      	lsrs	r3, r3, #3
 800a50c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a510:	693a      	ldr	r2, [r7, #16]
 800a512:	fb02 f303 	mul.w	r3, r2, r3
 800a516:	ee07 3a90 	vmov	s15, r3
 800a51a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a51e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	2b00      	cmp	r3, #0
 800a526:	f000 8111 	beq.w	800a74c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a52a:	69bb      	ldr	r3, [r7, #24]
 800a52c:	2b02      	cmp	r3, #2
 800a52e:	f000 8083 	beq.w	800a638 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a532:	69bb      	ldr	r3, [r7, #24]
 800a534:	2b02      	cmp	r3, #2
 800a536:	f200 80a1 	bhi.w	800a67c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a53a:	69bb      	ldr	r3, [r7, #24]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d003      	beq.n	800a548 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a540:	69bb      	ldr	r3, [r7, #24]
 800a542:	2b01      	cmp	r3, #1
 800a544:	d056      	beq.n	800a5f4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a546:	e099      	b.n	800a67c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a548:	4b88      	ldr	r3, [pc, #544]	@ (800a76c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f003 0320 	and.w	r3, r3, #32
 800a550:	2b00      	cmp	r3, #0
 800a552:	d02d      	beq.n	800a5b0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a554:	4b85      	ldr	r3, [pc, #532]	@ (800a76c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	08db      	lsrs	r3, r3, #3
 800a55a:	f003 0303 	and.w	r3, r3, #3
 800a55e:	4a84      	ldr	r2, [pc, #528]	@ (800a770 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a560:	fa22 f303 	lsr.w	r3, r2, r3
 800a564:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	ee07 3a90 	vmov	s15, r3
 800a56c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	ee07 3a90 	vmov	s15, r3
 800a576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a57a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a57e:	4b7b      	ldr	r3, [pc, #492]	@ (800a76c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a586:	ee07 3a90 	vmov	s15, r3
 800a58a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a58e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a592:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a774 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a59a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a59e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a5a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a5ae:	e087      	b.n	800a6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	ee07 3a90 	vmov	s15, r3
 800a5b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5ba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a778 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a5be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5c2:	4b6a      	ldr	r3, [pc, #424]	@ (800a76c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5ca:	ee07 3a90 	vmov	s15, r3
 800a5ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5d6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a774 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a5da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a5e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5f2:	e065      	b.n	800a6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	ee07 3a90 	vmov	s15, r3
 800a5fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5fe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a77c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a606:	4b59      	ldr	r3, [pc, #356]	@ (800a76c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a60a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a60e:	ee07 3a90 	vmov	s15, r3
 800a612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a616:	ed97 6a03 	vldr	s12, [r7, #12]
 800a61a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a774 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a61e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a626:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a62a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a62e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a632:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a636:	e043      	b.n	800a6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	ee07 3a90 	vmov	s15, r3
 800a63e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a642:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a780 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a64a:	4b48      	ldr	r3, [pc, #288]	@ (800a76c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a64c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a64e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a652:	ee07 3a90 	vmov	s15, r3
 800a656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a65a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a65e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a774 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a66a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a66e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a672:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a676:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a67a:	e021      	b.n	800a6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	ee07 3a90 	vmov	s15, r3
 800a682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a686:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a77c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a68a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a68e:	4b37      	ldr	r3, [pc, #220]	@ (800a76c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a696:	ee07 3a90 	vmov	s15, r3
 800a69a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a69e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6a2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a774 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a6a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a6b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a6be:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a6c0:	4b2a      	ldr	r3, [pc, #168]	@ (800a76c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6c4:	0a5b      	lsrs	r3, r3, #9
 800a6c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6ca:	ee07 3a90 	vmov	s15, r3
 800a6ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a6d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a6da:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6e6:	ee17 2a90 	vmov	r2, s15
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a6ee:	4b1f      	ldr	r3, [pc, #124]	@ (800a76c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6f2:	0c1b      	lsrs	r3, r3, #16
 800a6f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6f8:	ee07 3a90 	vmov	s15, r3
 800a6fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a700:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a704:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a708:	edd7 6a07 	vldr	s13, [r7, #28]
 800a70c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a710:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a714:	ee17 2a90 	vmov	r2, s15
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a71c:	4b13      	ldr	r3, [pc, #76]	@ (800a76c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a71e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a720:	0e1b      	lsrs	r3, r3, #24
 800a722:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a726:	ee07 3a90 	vmov	s15, r3
 800a72a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a72e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a732:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a736:	edd7 6a07 	vldr	s13, [r7, #28]
 800a73a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a73e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a742:	ee17 2a90 	vmov	r2, s15
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a74a:	e008      	b.n	800a75e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2200      	movs	r2, #0
 800a750:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2200      	movs	r2, #0
 800a756:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2200      	movs	r2, #0
 800a75c:	609a      	str	r2, [r3, #8]
}
 800a75e:	bf00      	nop
 800a760:	3724      	adds	r7, #36	@ 0x24
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr
 800a76a:	bf00      	nop
 800a76c:	58024400 	.word	0x58024400
 800a770:	03d09000 	.word	0x03d09000
 800a774:	46000000 	.word	0x46000000
 800a778:	4c742400 	.word	0x4c742400
 800a77c:	4a742400 	.word	0x4a742400
 800a780:	4bb71b00 	.word	0x4bb71b00

0800a784 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a784:	b480      	push	{r7}
 800a786:	b089      	sub	sp, #36	@ 0x24
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a78c:	4ba1      	ldr	r3, [pc, #644]	@ (800aa14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a78e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a790:	f003 0303 	and.w	r3, r3, #3
 800a794:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a796:	4b9f      	ldr	r3, [pc, #636]	@ (800aa14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a79a:	0d1b      	lsrs	r3, r3, #20
 800a79c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a7a0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a7a2:	4b9c      	ldr	r3, [pc, #624]	@ (800aa14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7a6:	0a1b      	lsrs	r3, r3, #8
 800a7a8:	f003 0301 	and.w	r3, r3, #1
 800a7ac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a7ae:	4b99      	ldr	r3, [pc, #612]	@ (800aa14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7b2:	08db      	lsrs	r3, r3, #3
 800a7b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a7b8:	693a      	ldr	r2, [r7, #16]
 800a7ba:	fb02 f303 	mul.w	r3, r2, r3
 800a7be:	ee07 3a90 	vmov	s15, r3
 800a7c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	f000 8111 	beq.w	800a9f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a7d2:	69bb      	ldr	r3, [r7, #24]
 800a7d4:	2b02      	cmp	r3, #2
 800a7d6:	f000 8083 	beq.w	800a8e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a7da:	69bb      	ldr	r3, [r7, #24]
 800a7dc:	2b02      	cmp	r3, #2
 800a7de:	f200 80a1 	bhi.w	800a924 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a7e2:	69bb      	ldr	r3, [r7, #24]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d003      	beq.n	800a7f0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	d056      	beq.n	800a89c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a7ee:	e099      	b.n	800a924 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7f0:	4b88      	ldr	r3, [pc, #544]	@ (800aa14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f003 0320 	and.w	r3, r3, #32
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d02d      	beq.n	800a858 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7fc:	4b85      	ldr	r3, [pc, #532]	@ (800aa14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	08db      	lsrs	r3, r3, #3
 800a802:	f003 0303 	and.w	r3, r3, #3
 800a806:	4a84      	ldr	r2, [pc, #528]	@ (800aa18 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a808:	fa22 f303 	lsr.w	r3, r2, r3
 800a80c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	ee07 3a90 	vmov	s15, r3
 800a814:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	ee07 3a90 	vmov	s15, r3
 800a81e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a826:	4b7b      	ldr	r3, [pc, #492]	@ (800aa14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a82a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a82e:	ee07 3a90 	vmov	s15, r3
 800a832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a836:	ed97 6a03 	vldr	s12, [r7, #12]
 800a83a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800aa1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a83e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a846:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a84a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a84e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a852:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a856:	e087      	b.n	800a968 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	ee07 3a90 	vmov	s15, r3
 800a85e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a862:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800aa20 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a86a:	4b6a      	ldr	r3, [pc, #424]	@ (800aa14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a86c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a86e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a872:	ee07 3a90 	vmov	s15, r3
 800a876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a87a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a87e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800aa1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a88a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a88e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a892:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a896:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a89a:	e065      	b.n	800a968 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	ee07 3a90 	vmov	s15, r3
 800a8a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8a6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800aa24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a8aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8ae:	4b59      	ldr	r3, [pc, #356]	@ (800aa14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8b6:	ee07 3a90 	vmov	s15, r3
 800a8ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8be:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8c2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800aa1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a8c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a8d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a8de:	e043      	b.n	800a968 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	ee07 3a90 	vmov	s15, r3
 800a8e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8ea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800aa28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a8ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8f2:	4b48      	ldr	r3, [pc, #288]	@ (800aa14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8fa:	ee07 3a90 	vmov	s15, r3
 800a8fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a902:	ed97 6a03 	vldr	s12, [r7, #12]
 800a906:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800aa1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a90a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a90e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a912:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a91a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a91e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a922:	e021      	b.n	800a968 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	ee07 3a90 	vmov	s15, r3
 800a92a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a92e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800aa24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a936:	4b37      	ldr	r3, [pc, #220]	@ (800aa14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a93a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a93e:	ee07 3a90 	vmov	s15, r3
 800a942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a946:	ed97 6a03 	vldr	s12, [r7, #12]
 800a94a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800aa1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a94e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a956:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a95a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a95e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a962:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a966:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a968:	4b2a      	ldr	r3, [pc, #168]	@ (800aa14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a96a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a96c:	0a5b      	lsrs	r3, r3, #9
 800a96e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a972:	ee07 3a90 	vmov	s15, r3
 800a976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a97a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a97e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a982:	edd7 6a07 	vldr	s13, [r7, #28]
 800a986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a98a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a98e:	ee17 2a90 	vmov	r2, s15
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a996:	4b1f      	ldr	r3, [pc, #124]	@ (800aa14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a99a:	0c1b      	lsrs	r3, r3, #16
 800a99c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a9a0:	ee07 3a90 	vmov	s15, r3
 800a9a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a9ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a9b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a9b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9bc:	ee17 2a90 	vmov	r2, s15
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a9c4:	4b13      	ldr	r3, [pc, #76]	@ (800aa14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9c8:	0e1b      	lsrs	r3, r3, #24
 800a9ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a9ce:	ee07 3a90 	vmov	s15, r3
 800a9d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a9da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a9de:	edd7 6a07 	vldr	s13, [r7, #28]
 800a9e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9ea:	ee17 2a90 	vmov	r2, s15
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a9f2:	e008      	b.n	800aa06 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2200      	movs	r2, #0
 800aa04:	609a      	str	r2, [r3, #8]
}
 800aa06:	bf00      	nop
 800aa08:	3724      	adds	r7, #36	@ 0x24
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr
 800aa12:	bf00      	nop
 800aa14:	58024400 	.word	0x58024400
 800aa18:	03d09000 	.word	0x03d09000
 800aa1c:	46000000 	.word	0x46000000
 800aa20:	4c742400 	.word	0x4c742400
 800aa24:	4a742400 	.word	0x4a742400
 800aa28:	4bb71b00 	.word	0x4bb71b00

0800aa2c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b084      	sub	sp, #16
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
 800aa34:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aa36:	2300      	movs	r3, #0
 800aa38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aa3a:	4b53      	ldr	r3, [pc, #332]	@ (800ab88 <RCCEx_PLL2_Config+0x15c>)
 800aa3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa3e:	f003 0303 	and.w	r3, r3, #3
 800aa42:	2b03      	cmp	r3, #3
 800aa44:	d101      	bne.n	800aa4a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800aa46:	2301      	movs	r3, #1
 800aa48:	e099      	b.n	800ab7e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800aa4a:	4b4f      	ldr	r3, [pc, #316]	@ (800ab88 <RCCEx_PLL2_Config+0x15c>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	4a4e      	ldr	r2, [pc, #312]	@ (800ab88 <RCCEx_PLL2_Config+0x15c>)
 800aa50:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800aa54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa56:	f7f9 fca1 	bl	800439c <HAL_GetTick>
 800aa5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aa5c:	e008      	b.n	800aa70 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800aa5e:	f7f9 fc9d 	bl	800439c <HAL_GetTick>
 800aa62:	4602      	mov	r2, r0
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	1ad3      	subs	r3, r2, r3
 800aa68:	2b02      	cmp	r3, #2
 800aa6a:	d901      	bls.n	800aa70 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aa6c:	2303      	movs	r3, #3
 800aa6e:	e086      	b.n	800ab7e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aa70:	4b45      	ldr	r3, [pc, #276]	@ (800ab88 <RCCEx_PLL2_Config+0x15c>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d1f0      	bne.n	800aa5e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800aa7c:	4b42      	ldr	r3, [pc, #264]	@ (800ab88 <RCCEx_PLL2_Config+0x15c>)
 800aa7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa80:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	031b      	lsls	r3, r3, #12
 800aa8a:	493f      	ldr	r1, [pc, #252]	@ (800ab88 <RCCEx_PLL2_Config+0x15c>)
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	628b      	str	r3, [r1, #40]	@ 0x28
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	3b01      	subs	r3, #1
 800aa96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	689b      	ldr	r3, [r3, #8]
 800aa9e:	3b01      	subs	r3, #1
 800aaa0:	025b      	lsls	r3, r3, #9
 800aaa2:	b29b      	uxth	r3, r3
 800aaa4:	431a      	orrs	r2, r3
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	68db      	ldr	r3, [r3, #12]
 800aaaa:	3b01      	subs	r3, #1
 800aaac:	041b      	lsls	r3, r3, #16
 800aaae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800aab2:	431a      	orrs	r2, r3
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	691b      	ldr	r3, [r3, #16]
 800aab8:	3b01      	subs	r3, #1
 800aaba:	061b      	lsls	r3, r3, #24
 800aabc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800aac0:	4931      	ldr	r1, [pc, #196]	@ (800ab88 <RCCEx_PLL2_Config+0x15c>)
 800aac2:	4313      	orrs	r3, r2
 800aac4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800aac6:	4b30      	ldr	r3, [pc, #192]	@ (800ab88 <RCCEx_PLL2_Config+0x15c>)
 800aac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	695b      	ldr	r3, [r3, #20]
 800aad2:	492d      	ldr	r1, [pc, #180]	@ (800ab88 <RCCEx_PLL2_Config+0x15c>)
 800aad4:	4313      	orrs	r3, r2
 800aad6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800aad8:	4b2b      	ldr	r3, [pc, #172]	@ (800ab88 <RCCEx_PLL2_Config+0x15c>)
 800aada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aadc:	f023 0220 	bic.w	r2, r3, #32
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	699b      	ldr	r3, [r3, #24]
 800aae4:	4928      	ldr	r1, [pc, #160]	@ (800ab88 <RCCEx_PLL2_Config+0x15c>)
 800aae6:	4313      	orrs	r3, r2
 800aae8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800aaea:	4b27      	ldr	r3, [pc, #156]	@ (800ab88 <RCCEx_PLL2_Config+0x15c>)
 800aaec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaee:	4a26      	ldr	r2, [pc, #152]	@ (800ab88 <RCCEx_PLL2_Config+0x15c>)
 800aaf0:	f023 0310 	bic.w	r3, r3, #16
 800aaf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800aaf6:	4b24      	ldr	r3, [pc, #144]	@ (800ab88 <RCCEx_PLL2_Config+0x15c>)
 800aaf8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aafa:	4b24      	ldr	r3, [pc, #144]	@ (800ab8c <RCCEx_PLL2_Config+0x160>)
 800aafc:	4013      	ands	r3, r2
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	69d2      	ldr	r2, [r2, #28]
 800ab02:	00d2      	lsls	r2, r2, #3
 800ab04:	4920      	ldr	r1, [pc, #128]	@ (800ab88 <RCCEx_PLL2_Config+0x15c>)
 800ab06:	4313      	orrs	r3, r2
 800ab08:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ab0a:	4b1f      	ldr	r3, [pc, #124]	@ (800ab88 <RCCEx_PLL2_Config+0x15c>)
 800ab0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab0e:	4a1e      	ldr	r2, [pc, #120]	@ (800ab88 <RCCEx_PLL2_Config+0x15c>)
 800ab10:	f043 0310 	orr.w	r3, r3, #16
 800ab14:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d106      	bne.n	800ab2a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ab1c:	4b1a      	ldr	r3, [pc, #104]	@ (800ab88 <RCCEx_PLL2_Config+0x15c>)
 800ab1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab20:	4a19      	ldr	r2, [pc, #100]	@ (800ab88 <RCCEx_PLL2_Config+0x15c>)
 800ab22:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ab26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ab28:	e00f      	b.n	800ab4a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d106      	bne.n	800ab3e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ab30:	4b15      	ldr	r3, [pc, #84]	@ (800ab88 <RCCEx_PLL2_Config+0x15c>)
 800ab32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab34:	4a14      	ldr	r2, [pc, #80]	@ (800ab88 <RCCEx_PLL2_Config+0x15c>)
 800ab36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ab3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ab3c:	e005      	b.n	800ab4a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ab3e:	4b12      	ldr	r3, [pc, #72]	@ (800ab88 <RCCEx_PLL2_Config+0x15c>)
 800ab40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab42:	4a11      	ldr	r2, [pc, #68]	@ (800ab88 <RCCEx_PLL2_Config+0x15c>)
 800ab44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ab48:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ab4a:	4b0f      	ldr	r3, [pc, #60]	@ (800ab88 <RCCEx_PLL2_Config+0x15c>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	4a0e      	ldr	r2, [pc, #56]	@ (800ab88 <RCCEx_PLL2_Config+0x15c>)
 800ab50:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ab54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab56:	f7f9 fc21 	bl	800439c <HAL_GetTick>
 800ab5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ab5c:	e008      	b.n	800ab70 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ab5e:	f7f9 fc1d 	bl	800439c <HAL_GetTick>
 800ab62:	4602      	mov	r2, r0
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	1ad3      	subs	r3, r2, r3
 800ab68:	2b02      	cmp	r3, #2
 800ab6a:	d901      	bls.n	800ab70 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ab6c:	2303      	movs	r3, #3
 800ab6e:	e006      	b.n	800ab7e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ab70:	4b05      	ldr	r3, [pc, #20]	@ (800ab88 <RCCEx_PLL2_Config+0x15c>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d0f0      	beq.n	800ab5e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ab7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3710      	adds	r7, #16
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
 800ab86:	bf00      	nop
 800ab88:	58024400 	.word	0x58024400
 800ab8c:	ffff0007 	.word	0xffff0007

0800ab90 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b084      	sub	sp, #16
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ab9e:	4b53      	ldr	r3, [pc, #332]	@ (800acec <RCCEx_PLL3_Config+0x15c>)
 800aba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aba2:	f003 0303 	and.w	r3, r3, #3
 800aba6:	2b03      	cmp	r3, #3
 800aba8:	d101      	bne.n	800abae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800abaa:	2301      	movs	r3, #1
 800abac:	e099      	b.n	800ace2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800abae:	4b4f      	ldr	r3, [pc, #316]	@ (800acec <RCCEx_PLL3_Config+0x15c>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4a4e      	ldr	r2, [pc, #312]	@ (800acec <RCCEx_PLL3_Config+0x15c>)
 800abb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800abb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800abba:	f7f9 fbef 	bl	800439c <HAL_GetTick>
 800abbe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800abc0:	e008      	b.n	800abd4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800abc2:	f7f9 fbeb 	bl	800439c <HAL_GetTick>
 800abc6:	4602      	mov	r2, r0
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	1ad3      	subs	r3, r2, r3
 800abcc:	2b02      	cmp	r3, #2
 800abce:	d901      	bls.n	800abd4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800abd0:	2303      	movs	r3, #3
 800abd2:	e086      	b.n	800ace2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800abd4:	4b45      	ldr	r3, [pc, #276]	@ (800acec <RCCEx_PLL3_Config+0x15c>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d1f0      	bne.n	800abc2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800abe0:	4b42      	ldr	r3, [pc, #264]	@ (800acec <RCCEx_PLL3_Config+0x15c>)
 800abe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abe4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	051b      	lsls	r3, r3, #20
 800abee:	493f      	ldr	r1, [pc, #252]	@ (800acec <RCCEx_PLL3_Config+0x15c>)
 800abf0:	4313      	orrs	r3, r2
 800abf2:	628b      	str	r3, [r1, #40]	@ 0x28
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	3b01      	subs	r3, #1
 800abfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	689b      	ldr	r3, [r3, #8]
 800ac02:	3b01      	subs	r3, #1
 800ac04:	025b      	lsls	r3, r3, #9
 800ac06:	b29b      	uxth	r3, r3
 800ac08:	431a      	orrs	r2, r3
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	68db      	ldr	r3, [r3, #12]
 800ac0e:	3b01      	subs	r3, #1
 800ac10:	041b      	lsls	r3, r3, #16
 800ac12:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ac16:	431a      	orrs	r2, r3
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	691b      	ldr	r3, [r3, #16]
 800ac1c:	3b01      	subs	r3, #1
 800ac1e:	061b      	lsls	r3, r3, #24
 800ac20:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ac24:	4931      	ldr	r1, [pc, #196]	@ (800acec <RCCEx_PLL3_Config+0x15c>)
 800ac26:	4313      	orrs	r3, r2
 800ac28:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ac2a:	4b30      	ldr	r3, [pc, #192]	@ (800acec <RCCEx_PLL3_Config+0x15c>)
 800ac2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac2e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	695b      	ldr	r3, [r3, #20]
 800ac36:	492d      	ldr	r1, [pc, #180]	@ (800acec <RCCEx_PLL3_Config+0x15c>)
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ac3c:	4b2b      	ldr	r3, [pc, #172]	@ (800acec <RCCEx_PLL3_Config+0x15c>)
 800ac3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac40:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	699b      	ldr	r3, [r3, #24]
 800ac48:	4928      	ldr	r1, [pc, #160]	@ (800acec <RCCEx_PLL3_Config+0x15c>)
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ac4e:	4b27      	ldr	r3, [pc, #156]	@ (800acec <RCCEx_PLL3_Config+0x15c>)
 800ac50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac52:	4a26      	ldr	r2, [pc, #152]	@ (800acec <RCCEx_PLL3_Config+0x15c>)
 800ac54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ac58:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ac5a:	4b24      	ldr	r3, [pc, #144]	@ (800acec <RCCEx_PLL3_Config+0x15c>)
 800ac5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac5e:	4b24      	ldr	r3, [pc, #144]	@ (800acf0 <RCCEx_PLL3_Config+0x160>)
 800ac60:	4013      	ands	r3, r2
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	69d2      	ldr	r2, [r2, #28]
 800ac66:	00d2      	lsls	r2, r2, #3
 800ac68:	4920      	ldr	r1, [pc, #128]	@ (800acec <RCCEx_PLL3_Config+0x15c>)
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ac6e:	4b1f      	ldr	r3, [pc, #124]	@ (800acec <RCCEx_PLL3_Config+0x15c>)
 800ac70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac72:	4a1e      	ldr	r2, [pc, #120]	@ (800acec <RCCEx_PLL3_Config+0x15c>)
 800ac74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ac78:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d106      	bne.n	800ac8e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ac80:	4b1a      	ldr	r3, [pc, #104]	@ (800acec <RCCEx_PLL3_Config+0x15c>)
 800ac82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac84:	4a19      	ldr	r2, [pc, #100]	@ (800acec <RCCEx_PLL3_Config+0x15c>)
 800ac86:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ac8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ac8c:	e00f      	b.n	800acae <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	d106      	bne.n	800aca2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ac94:	4b15      	ldr	r3, [pc, #84]	@ (800acec <RCCEx_PLL3_Config+0x15c>)
 800ac96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac98:	4a14      	ldr	r2, [pc, #80]	@ (800acec <RCCEx_PLL3_Config+0x15c>)
 800ac9a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ac9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800aca0:	e005      	b.n	800acae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800aca2:	4b12      	ldr	r3, [pc, #72]	@ (800acec <RCCEx_PLL3_Config+0x15c>)
 800aca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aca6:	4a11      	ldr	r2, [pc, #68]	@ (800acec <RCCEx_PLL3_Config+0x15c>)
 800aca8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800acac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800acae:	4b0f      	ldr	r3, [pc, #60]	@ (800acec <RCCEx_PLL3_Config+0x15c>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	4a0e      	ldr	r2, [pc, #56]	@ (800acec <RCCEx_PLL3_Config+0x15c>)
 800acb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800acb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800acba:	f7f9 fb6f 	bl	800439c <HAL_GetTick>
 800acbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800acc0:	e008      	b.n	800acd4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800acc2:	f7f9 fb6b 	bl	800439c <HAL_GetTick>
 800acc6:	4602      	mov	r2, r0
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	1ad3      	subs	r3, r2, r3
 800accc:	2b02      	cmp	r3, #2
 800acce:	d901      	bls.n	800acd4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800acd0:	2303      	movs	r3, #3
 800acd2:	e006      	b.n	800ace2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800acd4:	4b05      	ldr	r3, [pc, #20]	@ (800acec <RCCEx_PLL3_Config+0x15c>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d0f0      	beq.n	800acc2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ace0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3710      	adds	r7, #16
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	bf00      	nop
 800acec:	58024400 	.word	0x58024400
 800acf0:	ffff0007 	.word	0xffff0007

0800acf4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d101      	bne.n	800ad06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ad02:	2301      	movs	r3, #1
 800ad04:	e10f      	b.n	800af26 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a87      	ldr	r2, [pc, #540]	@ (800af30 <HAL_SPI_Init+0x23c>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d00f      	beq.n	800ad36 <HAL_SPI_Init+0x42>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a86      	ldr	r2, [pc, #536]	@ (800af34 <HAL_SPI_Init+0x240>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d00a      	beq.n	800ad36 <HAL_SPI_Init+0x42>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a84      	ldr	r2, [pc, #528]	@ (800af38 <HAL_SPI_Init+0x244>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d005      	beq.n	800ad36 <HAL_SPI_Init+0x42>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	68db      	ldr	r3, [r3, #12]
 800ad2e:	2b0f      	cmp	r3, #15
 800ad30:	d901      	bls.n	800ad36 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ad32:	2301      	movs	r3, #1
 800ad34:	e0f7      	b.n	800af26 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f001 f968 	bl	800c00c <SPI_GetPacketSize>
 800ad3c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4a7b      	ldr	r2, [pc, #492]	@ (800af30 <HAL_SPI_Init+0x23c>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d00c      	beq.n	800ad62 <HAL_SPI_Init+0x6e>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4a79      	ldr	r2, [pc, #484]	@ (800af34 <HAL_SPI_Init+0x240>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d007      	beq.n	800ad62 <HAL_SPI_Init+0x6e>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	4a78      	ldr	r2, [pc, #480]	@ (800af38 <HAL_SPI_Init+0x244>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d002      	beq.n	800ad62 <HAL_SPI_Init+0x6e>
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2b08      	cmp	r3, #8
 800ad60:	d811      	bhi.n	800ad86 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ad66:	4a72      	ldr	r2, [pc, #456]	@ (800af30 <HAL_SPI_Init+0x23c>)
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d009      	beq.n	800ad80 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	4a70      	ldr	r2, [pc, #448]	@ (800af34 <HAL_SPI_Init+0x240>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d004      	beq.n	800ad80 <HAL_SPI_Init+0x8c>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4a6f      	ldr	r2, [pc, #444]	@ (800af38 <HAL_SPI_Init+0x244>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d104      	bne.n	800ad8a <HAL_SPI_Init+0x96>
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	2b10      	cmp	r3, #16
 800ad84:	d901      	bls.n	800ad8a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ad86:	2301      	movs	r3, #1
 800ad88:	e0cd      	b.n	800af26 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ad90:	b2db      	uxtb	r3, r3
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d106      	bne.n	800ada4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f7f8 fa1c 	bl	80031dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2202      	movs	r2, #2
 800ada8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f022 0201 	bic.w	r2, r2, #1
 800adba:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	689b      	ldr	r3, [r3, #8]
 800adc2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800adc6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	699b      	ldr	r3, [r3, #24]
 800adcc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800add0:	d119      	bne.n	800ae06 <HAL_SPI_Init+0x112>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800adda:	d103      	bne.n	800ade4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d008      	beq.n	800adf6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d10c      	bne.n	800ae06 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800adf0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800adf4:	d107      	bne.n	800ae06 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	681a      	ldr	r2, [r3, #0]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ae04:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d00f      	beq.n	800ae32 <HAL_SPI_Init+0x13e>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	68db      	ldr	r3, [r3, #12]
 800ae16:	2b06      	cmp	r3, #6
 800ae18:	d90b      	bls.n	800ae32 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	430a      	orrs	r2, r1
 800ae2e:	601a      	str	r2, [r3, #0]
 800ae30:	e007      	b.n	800ae42 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	681a      	ldr	r2, [r3, #0]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ae40:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	69da      	ldr	r2, [r3, #28]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae4a:	431a      	orrs	r2, r3
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	431a      	orrs	r2, r3
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae54:	ea42 0103 	orr.w	r1, r2, r3
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	68da      	ldr	r2, [r3, #12]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	430a      	orrs	r2, r1
 800ae62:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae6c:	431a      	orrs	r2, r3
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae72:	431a      	orrs	r2, r3
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	699b      	ldr	r3, [r3, #24]
 800ae78:	431a      	orrs	r2, r3
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	691b      	ldr	r3, [r3, #16]
 800ae7e:	431a      	orrs	r2, r3
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	695b      	ldr	r3, [r3, #20]
 800ae84:	431a      	orrs	r2, r3
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6a1b      	ldr	r3, [r3, #32]
 800ae8a:	431a      	orrs	r2, r3
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	431a      	orrs	r2, r3
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae96:	431a      	orrs	r2, r3
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	689b      	ldr	r3, [r3, #8]
 800ae9c:	431a      	orrs	r2, r3
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aea2:	ea42 0103 	orr.w	r1, r2, r3
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	430a      	orrs	r2, r1
 800aeb0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d113      	bne.n	800aee2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	689b      	ldr	r3, [r3, #8]
 800aec0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aecc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	689b      	ldr	r3, [r3, #8]
 800aed4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800aee0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f022 0201 	bic.w	r2, r2, #1
 800aef0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d00a      	beq.n	800af14 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	68db      	ldr	r3, [r3, #12]
 800af04:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	430a      	orrs	r2, r1
 800af12:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2200      	movs	r2, #0
 800af18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2201      	movs	r2, #1
 800af20:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800af24:	2300      	movs	r3, #0
}
 800af26:	4618      	mov	r0, r3
 800af28:	3710      	adds	r7, #16
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	40013000 	.word	0x40013000
 800af34:	40003800 	.word	0x40003800
 800af38:	40003c00 	.word	0x40003c00

0800af3c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b088      	sub	sp, #32
 800af40:	af02      	add	r7, sp, #8
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	60b9      	str	r1, [r7, #8]
 800af46:	603b      	str	r3, [r7, #0]
 800af48:	4613      	mov	r3, r2
 800af4a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	3320      	adds	r3, #32
 800af52:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800af54:	f7f9 fa22 	bl	800439c <HAL_GetTick>
 800af58:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800af60:	b2db      	uxtb	r3, r3
 800af62:	2b01      	cmp	r3, #1
 800af64:	d001      	beq.n	800af6a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800af66:	2302      	movs	r3, #2
 800af68:	e1d1      	b.n	800b30e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d002      	beq.n	800af76 <HAL_SPI_Transmit+0x3a>
 800af70:	88fb      	ldrh	r3, [r7, #6]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d101      	bne.n	800af7a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800af76:	2301      	movs	r3, #1
 800af78:	e1c9      	b.n	800b30e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800af80:	2b01      	cmp	r3, #1
 800af82:	d101      	bne.n	800af88 <HAL_SPI_Transmit+0x4c>
 800af84:	2302      	movs	r3, #2
 800af86:	e1c2      	b.n	800b30e <HAL_SPI_Transmit+0x3d2>
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	2201      	movs	r2, #1
 800af8c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2203      	movs	r2, #3
 800af94:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2200      	movs	r2, #0
 800af9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	68ba      	ldr	r2, [r7, #8]
 800afa4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	88fa      	ldrh	r2, [r7, #6]
 800afaa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	88fa      	ldrh	r2, [r7, #6]
 800afb2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	2200      	movs	r2, #0
 800afba:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	2200      	movs	r2, #0
 800afc0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2200      	movs	r2, #0
 800afc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2200      	movs	r2, #0
 800afd0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	2200      	movs	r2, #0
 800afd6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	689b      	ldr	r3, [r3, #8]
 800afdc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800afe0:	d108      	bne.n	800aff4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	681a      	ldr	r2, [r3, #0]
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aff0:	601a      	str	r2, [r3, #0]
 800aff2:	e009      	b.n	800b008 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	68db      	ldr	r3, [r3, #12]
 800affa:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b006:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	685a      	ldr	r2, [r3, #4]
 800b00e:	4b96      	ldr	r3, [pc, #600]	@ (800b268 <HAL_SPI_Transmit+0x32c>)
 800b010:	4013      	ands	r3, r2
 800b012:	88f9      	ldrh	r1, [r7, #6]
 800b014:	68fa      	ldr	r2, [r7, #12]
 800b016:	6812      	ldr	r2, [r2, #0]
 800b018:	430b      	orrs	r3, r1
 800b01a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	681a      	ldr	r2, [r3, #0]
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f042 0201 	orr.w	r2, r2, #1
 800b02a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b034:	d107      	bne.n	800b046 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	681a      	ldr	r2, [r3, #0]
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b044:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	68db      	ldr	r3, [r3, #12]
 800b04a:	2b0f      	cmp	r3, #15
 800b04c:	d947      	bls.n	800b0de <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b04e:	e03f      	b.n	800b0d0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	695b      	ldr	r3, [r3, #20]
 800b056:	f003 0302 	and.w	r3, r3, #2
 800b05a:	2b02      	cmp	r3, #2
 800b05c:	d114      	bne.n	800b088 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	6812      	ldr	r2, [r2, #0]
 800b068:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b06e:	1d1a      	adds	r2, r3, #4
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b07a:	b29b      	uxth	r3, r3
 800b07c:	3b01      	subs	r3, #1
 800b07e:	b29a      	uxth	r2, r3
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b086:	e023      	b.n	800b0d0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b088:	f7f9 f988 	bl	800439c <HAL_GetTick>
 800b08c:	4602      	mov	r2, r0
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	1ad3      	subs	r3, r2, r3
 800b092:	683a      	ldr	r2, [r7, #0]
 800b094:	429a      	cmp	r2, r3
 800b096:	d803      	bhi.n	800b0a0 <HAL_SPI_Transmit+0x164>
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b09e:	d102      	bne.n	800b0a6 <HAL_SPI_Transmit+0x16a>
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d114      	bne.n	800b0d0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b0a6:	68f8      	ldr	r0, [r7, #12]
 800b0a8:	f000 fee2 	bl	800be70 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b0b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2201      	movs	r2, #1
 800b0c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b0cc:	2303      	movs	r3, #3
 800b0ce:	e11e      	b.n	800b30e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b0d6:	b29b      	uxth	r3, r3
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d1b9      	bne.n	800b050 <HAL_SPI_Transmit+0x114>
 800b0dc:	e0f1      	b.n	800b2c2 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	68db      	ldr	r3, [r3, #12]
 800b0e2:	2b07      	cmp	r3, #7
 800b0e4:	f240 80e6 	bls.w	800b2b4 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b0e8:	e05d      	b.n	800b1a6 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	695b      	ldr	r3, [r3, #20]
 800b0f0:	f003 0302 	and.w	r3, r3, #2
 800b0f4:	2b02      	cmp	r3, #2
 800b0f6:	d132      	bne.n	800b15e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b0fe:	b29b      	uxth	r3, r3
 800b100:	2b01      	cmp	r3, #1
 800b102:	d918      	bls.n	800b136 <HAL_SPI_Transmit+0x1fa>
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d014      	beq.n	800b136 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	6812      	ldr	r2, [r2, #0]
 800b116:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b11c:	1d1a      	adds	r2, r3, #4
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b128:	b29b      	uxth	r3, r3
 800b12a:	3b02      	subs	r3, #2
 800b12c:	b29a      	uxth	r2, r3
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b134:	e037      	b.n	800b1a6 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b13a:	881a      	ldrh	r2, [r3, #0]
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b144:	1c9a      	adds	r2, r3, #2
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b150:	b29b      	uxth	r3, r3
 800b152:	3b01      	subs	r3, #1
 800b154:	b29a      	uxth	r2, r3
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b15c:	e023      	b.n	800b1a6 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b15e:	f7f9 f91d 	bl	800439c <HAL_GetTick>
 800b162:	4602      	mov	r2, r0
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	1ad3      	subs	r3, r2, r3
 800b168:	683a      	ldr	r2, [r7, #0]
 800b16a:	429a      	cmp	r2, r3
 800b16c:	d803      	bhi.n	800b176 <HAL_SPI_Transmit+0x23a>
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b174:	d102      	bne.n	800b17c <HAL_SPI_Transmit+0x240>
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d114      	bne.n	800b1a6 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b17c:	68f8      	ldr	r0, [r7, #12]
 800b17e:	f000 fe77 	bl	800be70 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b188:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2201      	movs	r2, #1
 800b196:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2200      	movs	r2, #0
 800b19e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b1a2:	2303      	movs	r3, #3
 800b1a4:	e0b3      	b.n	800b30e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d19b      	bne.n	800b0ea <HAL_SPI_Transmit+0x1ae>
 800b1b2:	e086      	b.n	800b2c2 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	695b      	ldr	r3, [r3, #20]
 800b1ba:	f003 0302 	and.w	r3, r3, #2
 800b1be:	2b02      	cmp	r3, #2
 800b1c0:	d154      	bne.n	800b26c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	2b03      	cmp	r3, #3
 800b1cc:	d918      	bls.n	800b200 <HAL_SPI_Transmit+0x2c4>
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1d2:	2b40      	cmp	r3, #64	@ 0x40
 800b1d4:	d914      	bls.n	800b200 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	6812      	ldr	r2, [r2, #0]
 800b1e0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b1e6:	1d1a      	adds	r2, r3, #4
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b1f2:	b29b      	uxth	r3, r3
 800b1f4:	3b04      	subs	r3, #4
 800b1f6:	b29a      	uxth	r2, r3
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b1fe:	e059      	b.n	800b2b4 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b206:	b29b      	uxth	r3, r3
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d917      	bls.n	800b23c <HAL_SPI_Transmit+0x300>
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b210:	2b00      	cmp	r3, #0
 800b212:	d013      	beq.n	800b23c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b218:	881a      	ldrh	r2, [r3, #0]
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b222:	1c9a      	adds	r2, r3, #2
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b22e:	b29b      	uxth	r3, r3
 800b230:	3b02      	subs	r3, #2
 800b232:	b29a      	uxth	r2, r3
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b23a:	e03b      	b.n	800b2b4 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	3320      	adds	r3, #32
 800b246:	7812      	ldrb	r2, [r2, #0]
 800b248:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b24e:	1c5a      	adds	r2, r3, #1
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b25a:	b29b      	uxth	r3, r3
 800b25c:	3b01      	subs	r3, #1
 800b25e:	b29a      	uxth	r2, r3
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b266:	e025      	b.n	800b2b4 <HAL_SPI_Transmit+0x378>
 800b268:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b26c:	f7f9 f896 	bl	800439c <HAL_GetTick>
 800b270:	4602      	mov	r2, r0
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	1ad3      	subs	r3, r2, r3
 800b276:	683a      	ldr	r2, [r7, #0]
 800b278:	429a      	cmp	r2, r3
 800b27a:	d803      	bhi.n	800b284 <HAL_SPI_Transmit+0x348>
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b282:	d102      	bne.n	800b28a <HAL_SPI_Transmit+0x34e>
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d114      	bne.n	800b2b4 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b28a:	68f8      	ldr	r0, [r7, #12]
 800b28c:	f000 fdf0 	bl	800be70 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b296:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b2b0:	2303      	movs	r3, #3
 800b2b2:	e02c      	b.n	800b30e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	f47f af79 	bne.w	800b1b4 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	9300      	str	r3, [sp, #0]
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	2108      	movs	r1, #8
 800b2cc:	68f8      	ldr	r0, [r7, #12]
 800b2ce:	f000 fe6f 	bl	800bfb0 <SPI_WaitOnFlagUntilTimeout>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d007      	beq.n	800b2e8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b2de:	f043 0220 	orr.w	r2, r3, #32
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b2e8:	68f8      	ldr	r0, [r7, #12]
 800b2ea:	f000 fdc1 	bl	800be70 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2201      	movs	r2, #1
 800b2f2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b304:	2b00      	cmp	r3, #0
 800b306:	d001      	beq.n	800b30c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800b308:	2301      	movs	r3, #1
 800b30a:	e000      	b.n	800b30e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800b30c:	2300      	movs	r3, #0
  }
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3718      	adds	r7, #24
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
 800b316:	bf00      	nop

0800b318 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b088      	sub	sp, #32
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	60f8      	str	r0, [r7, #12]
 800b320:	60b9      	str	r1, [r7, #8]
 800b322:	603b      	str	r3, [r7, #0]
 800b324:	4613      	mov	r3, r2
 800b326:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b32c:	095b      	lsrs	r3, r3, #5
 800b32e:	b29b      	uxth	r3, r3
 800b330:	3301      	adds	r3, #1
 800b332:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	3330      	adds	r3, #48	@ 0x30
 800b33a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b33c:	f7f9 f82e 	bl	800439c <HAL_GetTick>
 800b340:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b348:	b2db      	uxtb	r3, r3
 800b34a:	2b01      	cmp	r3, #1
 800b34c:	d001      	beq.n	800b352 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800b34e:	2302      	movs	r3, #2
 800b350:	e250      	b.n	800b7f4 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d002      	beq.n	800b35e <HAL_SPI_Receive+0x46>
 800b358:	88fb      	ldrh	r3, [r7, #6]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d101      	bne.n	800b362 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800b35e:	2301      	movs	r3, #1
 800b360:	e248      	b.n	800b7f4 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b368:	2b01      	cmp	r3, #1
 800b36a:	d101      	bne.n	800b370 <HAL_SPI_Receive+0x58>
 800b36c:	2302      	movs	r3, #2
 800b36e:	e241      	b.n	800b7f4 <HAL_SPI_Receive+0x4dc>
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	2201      	movs	r2, #1
 800b374:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2204      	movs	r2, #4
 800b37c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2200      	movs	r2, #0
 800b384:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	68ba      	ldr	r2, [r7, #8]
 800b38c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	88fa      	ldrh	r2, [r7, #6]
 800b392:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	88fa      	ldrh	r2, [r7, #6]
 800b39a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	689b      	ldr	r3, [r3, #8]
 800b3c4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b3c8:	d108      	bne.n	800b3dc <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	681a      	ldr	r2, [r3, #0]
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b3d8:	601a      	str	r2, [r3, #0]
 800b3da:	e009      	b.n	800b3f0 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	68db      	ldr	r3, [r3, #12]
 800b3e2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800b3ee:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	685a      	ldr	r2, [r3, #4]
 800b3f6:	4b95      	ldr	r3, [pc, #596]	@ (800b64c <HAL_SPI_Receive+0x334>)
 800b3f8:	4013      	ands	r3, r2
 800b3fa:	88f9      	ldrh	r1, [r7, #6]
 800b3fc:	68fa      	ldr	r2, [r7, #12]
 800b3fe:	6812      	ldr	r2, [r2, #0]
 800b400:	430b      	orrs	r3, r1
 800b402:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	681a      	ldr	r2, [r3, #0]
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f042 0201 	orr.w	r2, r2, #1
 800b412:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b41c:	d107      	bne.n	800b42e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b42c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	68db      	ldr	r3, [r3, #12]
 800b432:	2b0f      	cmp	r3, #15
 800b434:	d96c      	bls.n	800b510 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b436:	e064      	b.n	800b502 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	695b      	ldr	r3, [r3, #20]
 800b43e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	695b      	ldr	r3, [r3, #20]
 800b446:	f003 0301 	and.w	r3, r3, #1
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	d114      	bne.n	800b478 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681a      	ldr	r2, [r3, #0]
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b456:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b458:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b45e:	1d1a      	adds	r2, r3, #4
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	3b01      	subs	r3, #1
 800b46e:	b29a      	uxth	r2, r3
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b476:	e044      	b.n	800b502 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b47e:	b29b      	uxth	r3, r3
 800b480:	8bfa      	ldrh	r2, [r7, #30]
 800b482:	429a      	cmp	r2, r3
 800b484:	d919      	bls.n	800b4ba <HAL_SPI_Receive+0x1a2>
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d014      	beq.n	800b4ba <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681a      	ldr	r2, [r3, #0]
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b498:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b49a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b4a0:	1d1a      	adds	r2, r3, #4
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b4ac:	b29b      	uxth	r3, r3
 800b4ae:	3b01      	subs	r3, #1
 800b4b0:	b29a      	uxth	r2, r3
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b4b8:	e023      	b.n	800b502 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b4ba:	f7f8 ff6f 	bl	800439c <HAL_GetTick>
 800b4be:	4602      	mov	r2, r0
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	1ad3      	subs	r3, r2, r3
 800b4c4:	683a      	ldr	r2, [r7, #0]
 800b4c6:	429a      	cmp	r2, r3
 800b4c8:	d803      	bhi.n	800b4d2 <HAL_SPI_Receive+0x1ba>
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4d0:	d102      	bne.n	800b4d8 <HAL_SPI_Receive+0x1c0>
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d114      	bne.n	800b502 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b4d8:	68f8      	ldr	r0, [r7, #12]
 800b4da:	f000 fcc9 	bl	800be70 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b4e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b4fe:	2303      	movs	r3, #3
 800b500:	e178      	b.n	800b7f4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b508:	b29b      	uxth	r3, r3
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d194      	bne.n	800b438 <HAL_SPI_Receive+0x120>
 800b50e:	e15e      	b.n	800b7ce <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	2b07      	cmp	r3, #7
 800b516:	f240 8153 	bls.w	800b7c0 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b51a:	e08f      	b.n	800b63c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	695b      	ldr	r3, [r3, #20]
 800b522:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	695b      	ldr	r3, [r3, #20]
 800b52a:	f003 0301 	and.w	r3, r3, #1
 800b52e:	2b01      	cmp	r3, #1
 800b530:	d114      	bne.n	800b55c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b536:	69ba      	ldr	r2, [r7, #24]
 800b538:	8812      	ldrh	r2, [r2, #0]
 800b53a:	b292      	uxth	r2, r2
 800b53c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b542:	1c9a      	adds	r2, r3, #2
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b54e:	b29b      	uxth	r3, r3
 800b550:	3b01      	subs	r3, #1
 800b552:	b29a      	uxth	r2, r3
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b55a:	e06f      	b.n	800b63c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b562:	b29b      	uxth	r3, r3
 800b564:	8bfa      	ldrh	r2, [r7, #30]
 800b566:	429a      	cmp	r2, r3
 800b568:	d924      	bls.n	800b5b4 <HAL_SPI_Receive+0x29c>
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b570:	2b00      	cmp	r3, #0
 800b572:	d01f      	beq.n	800b5b4 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b578:	69ba      	ldr	r2, [r7, #24]
 800b57a:	8812      	ldrh	r2, [r2, #0]
 800b57c:	b292      	uxth	r2, r2
 800b57e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b584:	1c9a      	adds	r2, r3, #2
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b58e:	69ba      	ldr	r2, [r7, #24]
 800b590:	8812      	ldrh	r2, [r2, #0]
 800b592:	b292      	uxth	r2, r2
 800b594:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b59a:	1c9a      	adds	r2, r3, #2
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b5a6:	b29b      	uxth	r3, r3
 800b5a8:	3b02      	subs	r3, #2
 800b5aa:	b29a      	uxth	r2, r3
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b5b2:	e043      	b.n	800b63c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b5ba:	b29b      	uxth	r3, r3
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	d119      	bne.n	800b5f4 <HAL_SPI_Receive+0x2dc>
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d014      	beq.n	800b5f4 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b5ce:	69ba      	ldr	r2, [r7, #24]
 800b5d0:	8812      	ldrh	r2, [r2, #0]
 800b5d2:	b292      	uxth	r2, r2
 800b5d4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b5da:	1c9a      	adds	r2, r3, #2
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b5e6:	b29b      	uxth	r3, r3
 800b5e8:	3b01      	subs	r3, #1
 800b5ea:	b29a      	uxth	r2, r3
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b5f2:	e023      	b.n	800b63c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b5f4:	f7f8 fed2 	bl	800439c <HAL_GetTick>
 800b5f8:	4602      	mov	r2, r0
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	1ad3      	subs	r3, r2, r3
 800b5fe:	683a      	ldr	r2, [r7, #0]
 800b600:	429a      	cmp	r2, r3
 800b602:	d803      	bhi.n	800b60c <HAL_SPI_Receive+0x2f4>
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b60a:	d102      	bne.n	800b612 <HAL_SPI_Receive+0x2fa>
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d114      	bne.n	800b63c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b612:	68f8      	ldr	r0, [r7, #12]
 800b614:	f000 fc2c 	bl	800be70 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b61e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2201      	movs	r2, #1
 800b62c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2200      	movs	r2, #0
 800b634:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b638:	2303      	movs	r3, #3
 800b63a:	e0db      	b.n	800b7f4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b642:	b29b      	uxth	r3, r3
 800b644:	2b00      	cmp	r3, #0
 800b646:	f47f af69 	bne.w	800b51c <HAL_SPI_Receive+0x204>
 800b64a:	e0c0      	b.n	800b7ce <HAL_SPI_Receive+0x4b6>
 800b64c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	695b      	ldr	r3, [r3, #20]
 800b656:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	695b      	ldr	r3, [r3, #20]
 800b65e:	f003 0301 	and.w	r3, r3, #1
 800b662:	2b01      	cmp	r3, #1
 800b664:	d117      	bne.n	800b696 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b672:	7812      	ldrb	r2, [r2, #0]
 800b674:	b2d2      	uxtb	r2, r2
 800b676:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b67c:	1c5a      	adds	r2, r3, #1
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b688:	b29b      	uxth	r3, r3
 800b68a:	3b01      	subs	r3, #1
 800b68c:	b29a      	uxth	r2, r3
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b694:	e094      	b.n	800b7c0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b69c:	b29b      	uxth	r3, r3
 800b69e:	8bfa      	ldrh	r2, [r7, #30]
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d946      	bls.n	800b732 <HAL_SPI_Receive+0x41a>
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d041      	beq.n	800b732 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b6ba:	7812      	ldrb	r2, [r2, #0]
 800b6bc:	b2d2      	uxtb	r2, r2
 800b6be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b6c4:	1c5a      	adds	r2, r3, #1
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b6d6:	7812      	ldrb	r2, [r2, #0]
 800b6d8:	b2d2      	uxtb	r2, r2
 800b6da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b6e0:	1c5a      	adds	r2, r3, #1
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b6f2:	7812      	ldrb	r2, [r2, #0]
 800b6f4:	b2d2      	uxtb	r2, r2
 800b6f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b6fc:	1c5a      	adds	r2, r3, #1
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b70e:	7812      	ldrb	r2, [r2, #0]
 800b710:	b2d2      	uxtb	r2, r2
 800b712:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b718:	1c5a      	adds	r2, r3, #1
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b724:	b29b      	uxth	r3, r3
 800b726:	3b04      	subs	r3, #4
 800b728:	b29a      	uxth	r2, r3
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b730:	e046      	b.n	800b7c0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b738:	b29b      	uxth	r3, r3
 800b73a:	2b03      	cmp	r3, #3
 800b73c:	d81c      	bhi.n	800b778 <HAL_SPI_Receive+0x460>
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800b744:	2b00      	cmp	r3, #0
 800b746:	d017      	beq.n	800b778 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b754:	7812      	ldrb	r2, [r2, #0]
 800b756:	b2d2      	uxtb	r2, r2
 800b758:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b75e:	1c5a      	adds	r2, r3, #1
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b76a:	b29b      	uxth	r3, r3
 800b76c:	3b01      	subs	r3, #1
 800b76e:	b29a      	uxth	r2, r3
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b776:	e023      	b.n	800b7c0 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b778:	f7f8 fe10 	bl	800439c <HAL_GetTick>
 800b77c:	4602      	mov	r2, r0
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	1ad3      	subs	r3, r2, r3
 800b782:	683a      	ldr	r2, [r7, #0]
 800b784:	429a      	cmp	r2, r3
 800b786:	d803      	bhi.n	800b790 <HAL_SPI_Receive+0x478>
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b78e:	d102      	bne.n	800b796 <HAL_SPI_Receive+0x47e>
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d114      	bne.n	800b7c0 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b796:	68f8      	ldr	r0, [r7, #12]
 800b798:	f000 fb6a 	bl	800be70 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b7a2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b7bc:	2303      	movs	r3, #3
 800b7be:	e019      	b.n	800b7f4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	f47f af41 	bne.w	800b650 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b7ce:	68f8      	ldr	r0, [r7, #12]
 800b7d0:	f000 fb4e 	bl	800be70 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d001      	beq.n	800b7f2 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	e000      	b.n	800b7f4 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800b7f2:	2300      	movs	r3, #0
  }
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3720      	adds	r7, #32
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b08e      	sub	sp, #56	@ 0x38
 800b800:	af02      	add	r7, sp, #8
 800b802:	60f8      	str	r0, [r7, #12]
 800b804:	60b9      	str	r1, [r7, #8]
 800b806:	607a      	str	r2, [r7, #4]
 800b808:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	3320      	adds	r3, #32
 800b810:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	3330      	adds	r3, #48	@ 0x30
 800b818:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b81e:	095b      	lsrs	r3, r3, #5
 800b820:	b29b      	uxth	r3, r3
 800b822:	3301      	adds	r3, #1
 800b824:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b826:	f7f8 fdb9 	bl	800439c <HAL_GetTick>
 800b82a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800b82c:	887b      	ldrh	r3, [r7, #2]
 800b82e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800b830:	887b      	ldrh	r3, [r7, #2]
 800b832:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b83a:	b2db      	uxtb	r3, r3
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	d001      	beq.n	800b844 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800b840:	2302      	movs	r3, #2
 800b842:	e310      	b.n	800be66 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d005      	beq.n	800b856 <HAL_SPI_TransmitReceive+0x5a>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d002      	beq.n	800b856 <HAL_SPI_TransmitReceive+0x5a>
 800b850:	887b      	ldrh	r3, [r7, #2]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d101      	bne.n	800b85a <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800b856:	2301      	movs	r3, #1
 800b858:	e305      	b.n	800be66 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b860:	2b01      	cmp	r3, #1
 800b862:	d101      	bne.n	800b868 <HAL_SPI_TransmitReceive+0x6c>
 800b864:	2302      	movs	r3, #2
 800b866:	e2fe      	b.n	800be66 <HAL_SPI_TransmitReceive+0x66a>
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2201      	movs	r2, #1
 800b86c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	2205      	movs	r2, #5
 800b874:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	2200      	movs	r2, #0
 800b87c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	687a      	ldr	r2, [r7, #4]
 800b884:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	887a      	ldrh	r2, [r7, #2]
 800b88a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	887a      	ldrh	r2, [r7, #2]
 800b892:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	68ba      	ldr	r2, [r7, #8]
 800b89a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	887a      	ldrh	r2, [r7, #2]
 800b8a0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	887a      	ldrh	r2, [r7, #2]
 800b8a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	68da      	ldr	r2, [r3, #12]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800b8c6:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	4a70      	ldr	r2, [pc, #448]	@ (800ba90 <HAL_SPI_TransmitReceive+0x294>)
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d009      	beq.n	800b8e6 <HAL_SPI_TransmitReceive+0xea>
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	4a6f      	ldr	r2, [pc, #444]	@ (800ba94 <HAL_SPI_TransmitReceive+0x298>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d004      	beq.n	800b8e6 <HAL_SPI_TransmitReceive+0xea>
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	4a6d      	ldr	r2, [pc, #436]	@ (800ba98 <HAL_SPI_TransmitReceive+0x29c>)
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d102      	bne.n	800b8ec <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800b8e6:	2310      	movs	r3, #16
 800b8e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b8ea:	e001      	b.n	800b8f0 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800b8ec:	2308      	movs	r3, #8
 800b8ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	685a      	ldr	r2, [r3, #4]
 800b8f6:	4b69      	ldr	r3, [pc, #420]	@ (800ba9c <HAL_SPI_TransmitReceive+0x2a0>)
 800b8f8:	4013      	ands	r3, r2
 800b8fa:	8879      	ldrh	r1, [r7, #2]
 800b8fc:	68fa      	ldr	r2, [r7, #12]
 800b8fe:	6812      	ldr	r2, [r2, #0]
 800b900:	430b      	orrs	r3, r1
 800b902:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f042 0201 	orr.w	r2, r2, #1
 800b912:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b91c:	d107      	bne.n	800b92e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	681a      	ldr	r2, [r3, #0]
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b92c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	68db      	ldr	r3, [r3, #12]
 800b932:	2b0f      	cmp	r3, #15
 800b934:	f240 80a2 	bls.w	800ba7c <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800b938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b93a:	089b      	lsrs	r3, r3, #2
 800b93c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b93e:	e094      	b.n	800ba6a <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	695b      	ldr	r3, [r3, #20]
 800b946:	f003 0302 	and.w	r3, r3, #2
 800b94a:	2b02      	cmp	r3, #2
 800b94c:	d120      	bne.n	800b990 <HAL_SPI_TransmitReceive+0x194>
 800b94e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b950:	2b00      	cmp	r3, #0
 800b952:	d01d      	beq.n	800b990 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800b954:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b956:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800b958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b95a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d217      	bcs.n	800b990 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	6812      	ldr	r2, [r2, #0]
 800b96a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b970:	1d1a      	adds	r2, r3, #4
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b97c:	b29b      	uxth	r3, r3
 800b97e:	3b01      	subs	r3, #1
 800b980:	b29a      	uxth	r2, r3
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b98e:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	695b      	ldr	r3, [r3, #20]
 800b996:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800b998:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d065      	beq.n	800ba6a <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	695b      	ldr	r3, [r3, #20]
 800b9a4:	f003 0301 	and.w	r3, r3, #1
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	d118      	bne.n	800b9de <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681a      	ldr	r2, [r3, #0]
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b9b6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9bc:	1d1a      	adds	r2, r3, #4
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b9c8:	b29b      	uxth	r3, r3
 800b9ca:	3b01      	subs	r3, #1
 800b9cc:	b29a      	uxth	r2, r3
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b9da:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b9dc:	e045      	b.n	800ba6a <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b9de:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b9e0:	8bfb      	ldrh	r3, [r7, #30]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d21d      	bcs.n	800ba22 <HAL_SPI_TransmitReceive+0x226>
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d018      	beq.n	800ba22 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681a      	ldr	r2, [r3, #0]
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9f8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b9fa:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba00:	1d1a      	adds	r2, r3, #4
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ba0c:	b29b      	uxth	r3, r3
 800ba0e:	3b01      	subs	r3, #1
 800ba10:	b29a      	uxth	r2, r3
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ba1e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ba20:	e023      	b.n	800ba6a <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba22:	f7f8 fcbb 	bl	800439c <HAL_GetTick>
 800ba26:	4602      	mov	r2, r0
 800ba28:	69bb      	ldr	r3, [r7, #24]
 800ba2a:	1ad3      	subs	r3, r2, r3
 800ba2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d803      	bhi.n	800ba3a <HAL_SPI_TransmitReceive+0x23e>
 800ba32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba38:	d102      	bne.n	800ba40 <HAL_SPI_TransmitReceive+0x244>
 800ba3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d114      	bne.n	800ba6a <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800ba40:	68f8      	ldr	r0, [r7, #12]
 800ba42:	f000 fa15 	bl	800be70 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba4c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2201      	movs	r2, #1
 800ba5a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	2200      	movs	r2, #0
 800ba62:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800ba66:	2303      	movs	r3, #3
 800ba68:	e1fd      	b.n	800be66 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ba6a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	f47f af67 	bne.w	800b940 <HAL_SPI_TransmitReceive+0x144>
 800ba72:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	f47f af63 	bne.w	800b940 <HAL_SPI_TransmitReceive+0x144>
 800ba7a:	e1ce      	b.n	800be1a <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	68db      	ldr	r3, [r3, #12]
 800ba80:	2b07      	cmp	r3, #7
 800ba82:	f240 81c2 	bls.w	800be0a <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800ba86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba88:	085b      	lsrs	r3, r3, #1
 800ba8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ba8c:	e0c9      	b.n	800bc22 <HAL_SPI_TransmitReceive+0x426>
 800ba8e:	bf00      	nop
 800ba90:	40013000 	.word	0x40013000
 800ba94:	40003800 	.word	0x40003800
 800ba98:	40003c00 	.word	0x40003c00
 800ba9c:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	695b      	ldr	r3, [r3, #20]
 800baa6:	f003 0302 	and.w	r3, r3, #2
 800baaa:	2b02      	cmp	r3, #2
 800baac:	d11f      	bne.n	800baee <HAL_SPI_TransmitReceive+0x2f2>
 800baae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d01c      	beq.n	800baee <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800bab4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800bab6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800bab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baba:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800babc:	429a      	cmp	r2, r3
 800babe:	d216      	bcs.n	800baee <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bac4:	881a      	ldrh	r2, [r3, #0]
 800bac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bac8:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bace:	1c9a      	adds	r2, r3, #2
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bada:	b29b      	uxth	r3, r3
 800badc:	3b01      	subs	r3, #1
 800bade:	b29a      	uxth	r2, r3
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800baec:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	695b      	ldr	r3, [r3, #20]
 800baf4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800baf6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	f000 8092 	beq.w	800bc22 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	695b      	ldr	r3, [r3, #20]
 800bb04:	f003 0301 	and.w	r3, r3, #1
 800bb08:	2b01      	cmp	r3, #1
 800bb0a:	d118      	bne.n	800bb3e <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb10:	6a3a      	ldr	r2, [r7, #32]
 800bb12:	8812      	ldrh	r2, [r2, #0]
 800bb14:	b292      	uxth	r2, r2
 800bb16:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb1c:	1c9a      	adds	r2, r3, #2
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bb28:	b29b      	uxth	r3, r3
 800bb2a:	3b01      	subs	r3, #1
 800bb2c:	b29a      	uxth	r2, r3
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bb3a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800bb3c:	e071      	b.n	800bc22 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bb3e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800bb40:	8bfb      	ldrh	r3, [r7, #30]
 800bb42:	429a      	cmp	r2, r3
 800bb44:	d228      	bcs.n	800bb98 <HAL_SPI_TransmitReceive+0x39c>
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d023      	beq.n	800bb98 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb54:	6a3a      	ldr	r2, [r7, #32]
 800bb56:	8812      	ldrh	r2, [r2, #0]
 800bb58:	b292      	uxth	r2, r2
 800bb5a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb60:	1c9a      	adds	r2, r3, #2
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb6a:	6a3a      	ldr	r2, [r7, #32]
 800bb6c:	8812      	ldrh	r2, [r2, #0]
 800bb6e:	b292      	uxth	r2, r2
 800bb70:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb76:	1c9a      	adds	r2, r3, #2
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bb82:	b29b      	uxth	r3, r3
 800bb84:	3b02      	subs	r3, #2
 800bb86:	b29a      	uxth	r2, r3
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bb94:	853b      	strh	r3, [r7, #40]	@ 0x28
 800bb96:	e044      	b.n	800bc22 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800bb98:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bb9a:	2b01      	cmp	r3, #1
 800bb9c:	d11d      	bne.n	800bbda <HAL_SPI_TransmitReceive+0x3de>
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d018      	beq.n	800bbda <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bbac:	6a3a      	ldr	r2, [r7, #32]
 800bbae:	8812      	ldrh	r2, [r2, #0]
 800bbb0:	b292      	uxth	r2, r2
 800bbb2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bbb8:	1c9a      	adds	r2, r3, #2
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bbc4:	b29b      	uxth	r3, r3
 800bbc6:	3b01      	subs	r3, #1
 800bbc8:	b29a      	uxth	r2, r3
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bbd6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800bbd8:	e023      	b.n	800bc22 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bbda:	f7f8 fbdf 	bl	800439c <HAL_GetTick>
 800bbde:	4602      	mov	r2, r0
 800bbe0:	69bb      	ldr	r3, [r7, #24]
 800bbe2:	1ad3      	subs	r3, r2, r3
 800bbe4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d803      	bhi.n	800bbf2 <HAL_SPI_TransmitReceive+0x3f6>
 800bbea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbf0:	d102      	bne.n	800bbf8 <HAL_SPI_TransmitReceive+0x3fc>
 800bbf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d114      	bne.n	800bc22 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800bbf8:	68f8      	ldr	r0, [r7, #12]
 800bbfa:	f000 f939 	bl	800be70 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc04:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2201      	movs	r2, #1
 800bc12:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800bc1e:	2303      	movs	r3, #3
 800bc20:	e121      	b.n	800be66 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bc22:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	f47f af3b 	bne.w	800baa0 <HAL_SPI_TransmitReceive+0x2a4>
 800bc2a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	f47f af37 	bne.w	800baa0 <HAL_SPI_TransmitReceive+0x2a4>
 800bc32:	e0f2      	b.n	800be1a <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	695b      	ldr	r3, [r3, #20]
 800bc3a:	f003 0302 	and.w	r3, r3, #2
 800bc3e:	2b02      	cmp	r3, #2
 800bc40:	d121      	bne.n	800bc86 <HAL_SPI_TransmitReceive+0x48a>
 800bc42:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d01e      	beq.n	800bc86 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800bc48:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800bc4a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800bc4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc4e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800bc50:	429a      	cmp	r2, r3
 800bc52:	d218      	bcs.n	800bc86 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	3320      	adds	r3, #32
 800bc5e:	7812      	ldrb	r2, [r2, #0]
 800bc60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bc66:	1c5a      	adds	r2, r3, #1
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	3b01      	subs	r3, #1
 800bc76:	b29a      	uxth	r2, r3
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bc84:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	695b      	ldr	r3, [r3, #20]
 800bc8c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800bc8e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	f000 80ba 	beq.w	800be0a <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	695b      	ldr	r3, [r3, #20]
 800bc9c:	f003 0301 	and.w	r3, r3, #1
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	d11b      	bne.n	800bcdc <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcb0:	7812      	ldrb	r2, [r2, #0]
 800bcb2:	b2d2      	uxtb	r2, r2
 800bcb4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcba:	1c5a      	adds	r2, r3, #1
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bcc6:	b29b      	uxth	r3, r3
 800bcc8:	3b01      	subs	r3, #1
 800bcca:	b29a      	uxth	r2, r3
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bcd8:	853b      	strh	r3, [r7, #40]	@ 0x28
 800bcda:	e096      	b.n	800be0a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bcdc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800bcde:	8bfb      	ldrh	r3, [r7, #30]
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d24a      	bcs.n	800bd7a <HAL_SPI_TransmitReceive+0x57e>
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d045      	beq.n	800bd7a <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcfa:	7812      	ldrb	r2, [r2, #0]
 800bcfc:	b2d2      	uxtb	r2, r2
 800bcfe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd04:	1c5a      	adds	r2, r3, #1
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd16:	7812      	ldrb	r2, [r2, #0]
 800bd18:	b2d2      	uxtb	r2, r2
 800bd1a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd20:	1c5a      	adds	r2, r3, #1
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd32:	7812      	ldrb	r2, [r2, #0]
 800bd34:	b2d2      	uxtb	r2, r2
 800bd36:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd3c:	1c5a      	adds	r2, r3, #1
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd4e:	7812      	ldrb	r2, [r2, #0]
 800bd50:	b2d2      	uxtb	r2, r2
 800bd52:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd58:	1c5a      	adds	r2, r3, #1
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd64:	b29b      	uxth	r3, r3
 800bd66:	3b04      	subs	r3, #4
 800bd68:	b29a      	uxth	r2, r3
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd76:	853b      	strh	r3, [r7, #40]	@ 0x28
 800bd78:	e047      	b.n	800be0a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800bd7a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bd7c:	2b03      	cmp	r3, #3
 800bd7e:	d820      	bhi.n	800bdc2 <HAL_SPI_TransmitReceive+0x5c6>
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d01b      	beq.n	800bdc2 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd96:	7812      	ldrb	r2, [r2, #0]
 800bd98:	b2d2      	uxtb	r2, r2
 800bd9a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bda0:	1c5a      	adds	r2, r3, #1
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bdac:	b29b      	uxth	r3, r3
 800bdae:	3b01      	subs	r3, #1
 800bdb0:	b29a      	uxth	r2, r3
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bdbe:	853b      	strh	r3, [r7, #40]	@ 0x28
 800bdc0:	e023      	b.n	800be0a <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bdc2:	f7f8 faeb 	bl	800439c <HAL_GetTick>
 800bdc6:	4602      	mov	r2, r0
 800bdc8:	69bb      	ldr	r3, [r7, #24]
 800bdca:	1ad3      	subs	r3, r2, r3
 800bdcc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d803      	bhi.n	800bdda <HAL_SPI_TransmitReceive+0x5de>
 800bdd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdd8:	d102      	bne.n	800bde0 <HAL_SPI_TransmitReceive+0x5e4>
 800bdda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d114      	bne.n	800be0a <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800bde0:	68f8      	ldr	r0, [r7, #12]
 800bde2:	f000 f845 	bl	800be70 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bdec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	2200      	movs	r2, #0
 800be02:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800be06:	2303      	movs	r3, #3
 800be08:	e02d      	b.n	800be66 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800be0a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	f47f af11 	bne.w	800bc34 <HAL_SPI_TransmitReceive+0x438>
 800be12:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800be14:	2b00      	cmp	r3, #0
 800be16:	f47f af0d 	bne.w	800bc34 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800be1a:	69bb      	ldr	r3, [r7, #24]
 800be1c:	9300      	str	r3, [sp, #0]
 800be1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be20:	2200      	movs	r2, #0
 800be22:	2108      	movs	r1, #8
 800be24:	68f8      	ldr	r0, [r7, #12]
 800be26:	f000 f8c3 	bl	800bfb0 <SPI_WaitOnFlagUntilTimeout>
 800be2a:	4603      	mov	r3, r0
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d007      	beq.n	800be40 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be36:	f043 0220 	orr.w	r2, r3, #32
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800be40:	68f8      	ldr	r0, [r7, #12]
 800be42:	f000 f815 	bl	800be70 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	2201      	movs	r2, #1
 800be4a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	2200      	movs	r2, #0
 800be52:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d001      	beq.n	800be64 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800be60:	2301      	movs	r3, #1
 800be62:	e000      	b.n	800be66 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800be64:	2300      	movs	r3, #0
  }
}
 800be66:	4618      	mov	r0, r3
 800be68:	3730      	adds	r7, #48	@ 0x30
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop

0800be70 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800be70:	b480      	push	{r7}
 800be72:	b085      	sub	sp, #20
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	695b      	ldr	r3, [r3, #20]
 800be7e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	699a      	ldr	r2, [r3, #24]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f042 0208 	orr.w	r2, r2, #8
 800be8e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	699a      	ldr	r2, [r3, #24]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f042 0210 	orr.w	r2, r2, #16
 800be9e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	681a      	ldr	r2, [r3, #0]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f022 0201 	bic.w	r2, r2, #1
 800beae:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	6919      	ldr	r1, [r3, #16]
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681a      	ldr	r2, [r3, #0]
 800beba:	4b3c      	ldr	r3, [pc, #240]	@ (800bfac <SPI_CloseTransfer+0x13c>)
 800bebc:	400b      	ands	r3, r1
 800bebe:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	689a      	ldr	r2, [r3, #8]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800bece:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bed6:	b2db      	uxtb	r3, r3
 800bed8:	2b04      	cmp	r3, #4
 800beda:	d014      	beq.n	800bf06 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	f003 0320 	and.w	r3, r3, #32
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d00f      	beq.n	800bf06 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800beec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	699a      	ldr	r2, [r3, #24]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f042 0220 	orr.w	r2, r2, #32
 800bf04:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bf0c:	b2db      	uxtb	r3, r3
 800bf0e:	2b03      	cmp	r3, #3
 800bf10:	d014      	beq.n	800bf3c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d00f      	beq.n	800bf3c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf22:	f043 0204 	orr.w	r2, r3, #4
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	699a      	ldr	r2, [r3, #24]
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bf3a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d00f      	beq.n	800bf66 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf4c:	f043 0201 	orr.w	r2, r3, #1
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	699a      	ldr	r2, [r3, #24]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bf64:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d00f      	beq.n	800bf90 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf76:	f043 0208 	orr.w	r2, r3, #8
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	699a      	ldr	r2, [r3, #24]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bf8e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2200      	movs	r2, #0
 800bf94:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800bfa0:	bf00      	nop
 800bfa2:	3714      	adds	r7, #20
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfaa:	4770      	bx	lr
 800bfac:	fffffc90 	.word	0xfffffc90

0800bfb0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b084      	sub	sp, #16
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	60f8      	str	r0, [r7, #12]
 800bfb8:	60b9      	str	r1, [r7, #8]
 800bfba:	603b      	str	r3, [r7, #0]
 800bfbc:	4613      	mov	r3, r2
 800bfbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800bfc0:	e010      	b.n	800bfe4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bfc2:	f7f8 f9eb 	bl	800439c <HAL_GetTick>
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	69bb      	ldr	r3, [r7, #24]
 800bfca:	1ad3      	subs	r3, r2, r3
 800bfcc:	683a      	ldr	r2, [r7, #0]
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d803      	bhi.n	800bfda <SPI_WaitOnFlagUntilTimeout+0x2a>
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfd8:	d102      	bne.n	800bfe0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d101      	bne.n	800bfe4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800bfe0:	2303      	movs	r3, #3
 800bfe2:	e00f      	b.n	800c004 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	695a      	ldr	r2, [r3, #20]
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	4013      	ands	r3, r2
 800bfee:	68ba      	ldr	r2, [r7, #8]
 800bff0:	429a      	cmp	r2, r3
 800bff2:	bf0c      	ite	eq
 800bff4:	2301      	moveq	r3, #1
 800bff6:	2300      	movne	r3, #0
 800bff8:	b2db      	uxtb	r3, r3
 800bffa:	461a      	mov	r2, r3
 800bffc:	79fb      	ldrb	r3, [r7, #7]
 800bffe:	429a      	cmp	r2, r3
 800c000:	d0df      	beq.n	800bfc2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c002:	2300      	movs	r3, #0
}
 800c004:	4618      	mov	r0, r3
 800c006:	3710      	adds	r7, #16
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b085      	sub	sp, #20
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c018:	095b      	lsrs	r3, r3, #5
 800c01a:	3301      	adds	r3, #1
 800c01c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	68db      	ldr	r3, [r3, #12]
 800c022:	3301      	adds	r3, #1
 800c024:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	3307      	adds	r3, #7
 800c02a:	08db      	lsrs	r3, r3, #3
 800c02c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	68fa      	ldr	r2, [r7, #12]
 800c032:	fb02 f303 	mul.w	r3, r2, r3
}
 800c036:	4618      	mov	r0, r3
 800c038:	3714      	adds	r7, #20
 800c03a:	46bd      	mov	sp, r7
 800c03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c040:	4770      	bx	lr

0800c042 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c042:	b580      	push	{r7, lr}
 800c044:	b082      	sub	sp, #8
 800c046:	af00      	add	r7, sp, #0
 800c048:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d101      	bne.n	800c054 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c050:	2301      	movs	r3, #1
 800c052:	e049      	b.n	800c0e8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c05a:	b2db      	uxtb	r3, r3
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d106      	bne.n	800c06e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2200      	movs	r2, #0
 800c064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f7f7 fcc5 	bl	80039f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2202      	movs	r2, #2
 800c072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681a      	ldr	r2, [r3, #0]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	3304      	adds	r3, #4
 800c07e:	4619      	mov	r1, r3
 800c080:	4610      	mov	r0, r2
 800c082:	f000 fc57 	bl	800c934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2201      	movs	r2, #1
 800c08a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2201      	movs	r2, #1
 800c092:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2201      	movs	r2, #1
 800c09a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2201      	movs	r2, #1
 800c0d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2201      	movs	r2, #1
 800c0da:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2201      	movs	r2, #1
 800c0e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c0e6:	2300      	movs	r3, #0
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3708      	adds	r7, #8
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b085      	sub	sp, #20
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c0fe:	b2db      	uxtb	r3, r3
 800c100:	2b01      	cmp	r3, #1
 800c102:	d001      	beq.n	800c108 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c104:	2301      	movs	r3, #1
 800c106:	e054      	b.n	800c1b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2202      	movs	r2, #2
 800c10c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	68da      	ldr	r2, [r3, #12]
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f042 0201 	orr.w	r2, r2, #1
 800c11e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4a26      	ldr	r2, [pc, #152]	@ (800c1c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d022      	beq.n	800c170 <HAL_TIM_Base_Start_IT+0x80>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c132:	d01d      	beq.n	800c170 <HAL_TIM_Base_Start_IT+0x80>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	4a22      	ldr	r2, [pc, #136]	@ (800c1c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d018      	beq.n	800c170 <HAL_TIM_Base_Start_IT+0x80>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	4a21      	ldr	r2, [pc, #132]	@ (800c1c8 <HAL_TIM_Base_Start_IT+0xd8>)
 800c144:	4293      	cmp	r3, r2
 800c146:	d013      	beq.n	800c170 <HAL_TIM_Base_Start_IT+0x80>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	4a1f      	ldr	r2, [pc, #124]	@ (800c1cc <HAL_TIM_Base_Start_IT+0xdc>)
 800c14e:	4293      	cmp	r3, r2
 800c150:	d00e      	beq.n	800c170 <HAL_TIM_Base_Start_IT+0x80>
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	4a1e      	ldr	r2, [pc, #120]	@ (800c1d0 <HAL_TIM_Base_Start_IT+0xe0>)
 800c158:	4293      	cmp	r3, r2
 800c15a:	d009      	beq.n	800c170 <HAL_TIM_Base_Start_IT+0x80>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	4a1c      	ldr	r2, [pc, #112]	@ (800c1d4 <HAL_TIM_Base_Start_IT+0xe4>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d004      	beq.n	800c170 <HAL_TIM_Base_Start_IT+0x80>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	4a1b      	ldr	r2, [pc, #108]	@ (800c1d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800c16c:	4293      	cmp	r3, r2
 800c16e:	d115      	bne.n	800c19c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	689a      	ldr	r2, [r3, #8]
 800c176:	4b19      	ldr	r3, [pc, #100]	@ (800c1dc <HAL_TIM_Base_Start_IT+0xec>)
 800c178:	4013      	ands	r3, r2
 800c17a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2b06      	cmp	r3, #6
 800c180:	d015      	beq.n	800c1ae <HAL_TIM_Base_Start_IT+0xbe>
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c188:	d011      	beq.n	800c1ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	681a      	ldr	r2, [r3, #0]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f042 0201 	orr.w	r2, r2, #1
 800c198:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c19a:	e008      	b.n	800c1ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	681a      	ldr	r2, [r3, #0]
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f042 0201 	orr.w	r2, r2, #1
 800c1aa:	601a      	str	r2, [r3, #0]
 800c1ac:	e000      	b.n	800c1b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c1b0:	2300      	movs	r3, #0
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3714      	adds	r7, #20
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1bc:	4770      	bx	lr
 800c1be:	bf00      	nop
 800c1c0:	40010000 	.word	0x40010000
 800c1c4:	40000400 	.word	0x40000400
 800c1c8:	40000800 	.word	0x40000800
 800c1cc:	40000c00 	.word	0x40000c00
 800c1d0:	40010400 	.word	0x40010400
 800c1d4:	40001800 	.word	0x40001800
 800c1d8:	40014000 	.word	0x40014000
 800c1dc:	00010007 	.word	0x00010007

0800c1e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b082      	sub	sp, #8
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d101      	bne.n	800c1f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	e049      	b.n	800c286 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c1f8:	b2db      	uxtb	r3, r3
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d106      	bne.n	800c20c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2200      	movs	r2, #0
 800c202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f7f7 fba8 	bl	800395c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2202      	movs	r2, #2
 800c210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681a      	ldr	r2, [r3, #0]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	3304      	adds	r3, #4
 800c21c:	4619      	mov	r1, r3
 800c21e:	4610      	mov	r0, r2
 800c220:	f000 fb88 	bl	800c934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2201      	movs	r2, #1
 800c228:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2201      	movs	r2, #1
 800c230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2201      	movs	r2, #1
 800c238:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2201      	movs	r2, #1
 800c240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2201      	movs	r2, #1
 800c248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2201      	movs	r2, #1
 800c250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2201      	movs	r2, #1
 800c258:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2201      	movs	r2, #1
 800c260:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2201      	movs	r2, #1
 800c268:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2201      	movs	r2, #1
 800c270:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2201      	movs	r2, #1
 800c278:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2201      	movs	r2, #1
 800c280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c284:	2300      	movs	r3, #0
}
 800c286:	4618      	mov	r0, r3
 800c288:	3708      	adds	r7, #8
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}
	...

0800c290 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d109      	bne.n	800c2b4 <HAL_TIM_PWM_Start+0x24>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c2a6:	b2db      	uxtb	r3, r3
 800c2a8:	2b01      	cmp	r3, #1
 800c2aa:	bf14      	ite	ne
 800c2ac:	2301      	movne	r3, #1
 800c2ae:	2300      	moveq	r3, #0
 800c2b0:	b2db      	uxtb	r3, r3
 800c2b2:	e03c      	b.n	800c32e <HAL_TIM_PWM_Start+0x9e>
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	2b04      	cmp	r3, #4
 800c2b8:	d109      	bne.n	800c2ce <HAL_TIM_PWM_Start+0x3e>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c2c0:	b2db      	uxtb	r3, r3
 800c2c2:	2b01      	cmp	r3, #1
 800c2c4:	bf14      	ite	ne
 800c2c6:	2301      	movne	r3, #1
 800c2c8:	2300      	moveq	r3, #0
 800c2ca:	b2db      	uxtb	r3, r3
 800c2cc:	e02f      	b.n	800c32e <HAL_TIM_PWM_Start+0x9e>
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	2b08      	cmp	r3, #8
 800c2d2:	d109      	bne.n	800c2e8 <HAL_TIM_PWM_Start+0x58>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c2da:	b2db      	uxtb	r3, r3
 800c2dc:	2b01      	cmp	r3, #1
 800c2de:	bf14      	ite	ne
 800c2e0:	2301      	movne	r3, #1
 800c2e2:	2300      	moveq	r3, #0
 800c2e4:	b2db      	uxtb	r3, r3
 800c2e6:	e022      	b.n	800c32e <HAL_TIM_PWM_Start+0x9e>
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	2b0c      	cmp	r3, #12
 800c2ec:	d109      	bne.n	800c302 <HAL_TIM_PWM_Start+0x72>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c2f4:	b2db      	uxtb	r3, r3
 800c2f6:	2b01      	cmp	r3, #1
 800c2f8:	bf14      	ite	ne
 800c2fa:	2301      	movne	r3, #1
 800c2fc:	2300      	moveq	r3, #0
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	e015      	b.n	800c32e <HAL_TIM_PWM_Start+0x9e>
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	2b10      	cmp	r3, #16
 800c306:	d109      	bne.n	800c31c <HAL_TIM_PWM_Start+0x8c>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c30e:	b2db      	uxtb	r3, r3
 800c310:	2b01      	cmp	r3, #1
 800c312:	bf14      	ite	ne
 800c314:	2301      	movne	r3, #1
 800c316:	2300      	moveq	r3, #0
 800c318:	b2db      	uxtb	r3, r3
 800c31a:	e008      	b.n	800c32e <HAL_TIM_PWM_Start+0x9e>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c322:	b2db      	uxtb	r3, r3
 800c324:	2b01      	cmp	r3, #1
 800c326:	bf14      	ite	ne
 800c328:	2301      	movne	r3, #1
 800c32a:	2300      	moveq	r3, #0
 800c32c:	b2db      	uxtb	r3, r3
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d001      	beq.n	800c336 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c332:	2301      	movs	r3, #1
 800c334:	e0a1      	b.n	800c47a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d104      	bne.n	800c346 <HAL_TIM_PWM_Start+0xb6>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2202      	movs	r2, #2
 800c340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c344:	e023      	b.n	800c38e <HAL_TIM_PWM_Start+0xfe>
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	2b04      	cmp	r3, #4
 800c34a:	d104      	bne.n	800c356 <HAL_TIM_PWM_Start+0xc6>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2202      	movs	r2, #2
 800c350:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c354:	e01b      	b.n	800c38e <HAL_TIM_PWM_Start+0xfe>
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	2b08      	cmp	r3, #8
 800c35a:	d104      	bne.n	800c366 <HAL_TIM_PWM_Start+0xd6>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2202      	movs	r2, #2
 800c360:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c364:	e013      	b.n	800c38e <HAL_TIM_PWM_Start+0xfe>
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	2b0c      	cmp	r3, #12
 800c36a:	d104      	bne.n	800c376 <HAL_TIM_PWM_Start+0xe6>
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2202      	movs	r2, #2
 800c370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c374:	e00b      	b.n	800c38e <HAL_TIM_PWM_Start+0xfe>
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	2b10      	cmp	r3, #16
 800c37a:	d104      	bne.n	800c386 <HAL_TIM_PWM_Start+0xf6>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2202      	movs	r2, #2
 800c380:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c384:	e003      	b.n	800c38e <HAL_TIM_PWM_Start+0xfe>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2202      	movs	r2, #2
 800c38a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	2201      	movs	r2, #1
 800c394:	6839      	ldr	r1, [r7, #0]
 800c396:	4618      	mov	r0, r3
 800c398:	f000 fe48 	bl	800d02c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	4a38      	ldr	r2, [pc, #224]	@ (800c484 <HAL_TIM_PWM_Start+0x1f4>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d013      	beq.n	800c3ce <HAL_TIM_PWM_Start+0x13e>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4a37      	ldr	r2, [pc, #220]	@ (800c488 <HAL_TIM_PWM_Start+0x1f8>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d00e      	beq.n	800c3ce <HAL_TIM_PWM_Start+0x13e>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	4a35      	ldr	r2, [pc, #212]	@ (800c48c <HAL_TIM_PWM_Start+0x1fc>)
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d009      	beq.n	800c3ce <HAL_TIM_PWM_Start+0x13e>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	4a34      	ldr	r2, [pc, #208]	@ (800c490 <HAL_TIM_PWM_Start+0x200>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d004      	beq.n	800c3ce <HAL_TIM_PWM_Start+0x13e>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4a32      	ldr	r2, [pc, #200]	@ (800c494 <HAL_TIM_PWM_Start+0x204>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d101      	bne.n	800c3d2 <HAL_TIM_PWM_Start+0x142>
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	e000      	b.n	800c3d4 <HAL_TIM_PWM_Start+0x144>
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d007      	beq.n	800c3e8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c3e6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4a25      	ldr	r2, [pc, #148]	@ (800c484 <HAL_TIM_PWM_Start+0x1f4>)
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	d022      	beq.n	800c438 <HAL_TIM_PWM_Start+0x1a8>
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c3fa:	d01d      	beq.n	800c438 <HAL_TIM_PWM_Start+0x1a8>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4a25      	ldr	r2, [pc, #148]	@ (800c498 <HAL_TIM_PWM_Start+0x208>)
 800c402:	4293      	cmp	r3, r2
 800c404:	d018      	beq.n	800c438 <HAL_TIM_PWM_Start+0x1a8>
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4a24      	ldr	r2, [pc, #144]	@ (800c49c <HAL_TIM_PWM_Start+0x20c>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d013      	beq.n	800c438 <HAL_TIM_PWM_Start+0x1a8>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	4a22      	ldr	r2, [pc, #136]	@ (800c4a0 <HAL_TIM_PWM_Start+0x210>)
 800c416:	4293      	cmp	r3, r2
 800c418:	d00e      	beq.n	800c438 <HAL_TIM_PWM_Start+0x1a8>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	4a1a      	ldr	r2, [pc, #104]	@ (800c488 <HAL_TIM_PWM_Start+0x1f8>)
 800c420:	4293      	cmp	r3, r2
 800c422:	d009      	beq.n	800c438 <HAL_TIM_PWM_Start+0x1a8>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	4a1e      	ldr	r2, [pc, #120]	@ (800c4a4 <HAL_TIM_PWM_Start+0x214>)
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d004      	beq.n	800c438 <HAL_TIM_PWM_Start+0x1a8>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	4a16      	ldr	r2, [pc, #88]	@ (800c48c <HAL_TIM_PWM_Start+0x1fc>)
 800c434:	4293      	cmp	r3, r2
 800c436:	d115      	bne.n	800c464 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	689a      	ldr	r2, [r3, #8]
 800c43e:	4b1a      	ldr	r3, [pc, #104]	@ (800c4a8 <HAL_TIM_PWM_Start+0x218>)
 800c440:	4013      	ands	r3, r2
 800c442:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	2b06      	cmp	r3, #6
 800c448:	d015      	beq.n	800c476 <HAL_TIM_PWM_Start+0x1e6>
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c450:	d011      	beq.n	800c476 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	681a      	ldr	r2, [r3, #0]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f042 0201 	orr.w	r2, r2, #1
 800c460:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c462:	e008      	b.n	800c476 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	681a      	ldr	r2, [r3, #0]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f042 0201 	orr.w	r2, r2, #1
 800c472:	601a      	str	r2, [r3, #0]
 800c474:	e000      	b.n	800c478 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c476:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c478:	2300      	movs	r3, #0
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3710      	adds	r7, #16
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}
 800c482:	bf00      	nop
 800c484:	40010000 	.word	0x40010000
 800c488:	40010400 	.word	0x40010400
 800c48c:	40014000 	.word	0x40014000
 800c490:	40014400 	.word	0x40014400
 800c494:	40014800 	.word	0x40014800
 800c498:	40000400 	.word	0x40000400
 800c49c:	40000800 	.word	0x40000800
 800c4a0:	40000c00 	.word	0x40000c00
 800c4a4:	40001800 	.word	0x40001800
 800c4a8:	00010007 	.word	0x00010007

0800c4ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b084      	sub	sp, #16
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	68db      	ldr	r3, [r3, #12]
 800c4ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	691b      	ldr	r3, [r3, #16]
 800c4c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	f003 0302 	and.w	r3, r3, #2
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d020      	beq.n	800c510 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	f003 0302 	and.w	r3, r3, #2
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d01b      	beq.n	800c510 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f06f 0202 	mvn.w	r2, #2
 800c4e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2201      	movs	r2, #1
 800c4e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	699b      	ldr	r3, [r3, #24]
 800c4ee:	f003 0303 	and.w	r3, r3, #3
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d003      	beq.n	800c4fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f000 f9fe 	bl	800c8f8 <HAL_TIM_IC_CaptureCallback>
 800c4fc:	e005      	b.n	800c50a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f000 f9f0 	bl	800c8e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f000 fa01 	bl	800c90c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2200      	movs	r2, #0
 800c50e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	f003 0304 	and.w	r3, r3, #4
 800c516:	2b00      	cmp	r3, #0
 800c518:	d020      	beq.n	800c55c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	f003 0304 	and.w	r3, r3, #4
 800c520:	2b00      	cmp	r3, #0
 800c522:	d01b      	beq.n	800c55c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f06f 0204 	mvn.w	r2, #4
 800c52c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2202      	movs	r2, #2
 800c532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	699b      	ldr	r3, [r3, #24]
 800c53a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d003      	beq.n	800c54a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f000 f9d8 	bl	800c8f8 <HAL_TIM_IC_CaptureCallback>
 800c548:	e005      	b.n	800c556 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f000 f9ca 	bl	800c8e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f000 f9db 	bl	800c90c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2200      	movs	r2, #0
 800c55a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	f003 0308 	and.w	r3, r3, #8
 800c562:	2b00      	cmp	r3, #0
 800c564:	d020      	beq.n	800c5a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	f003 0308 	and.w	r3, r3, #8
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d01b      	beq.n	800c5a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f06f 0208 	mvn.w	r2, #8
 800c578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2204      	movs	r2, #4
 800c57e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	69db      	ldr	r3, [r3, #28]
 800c586:	f003 0303 	and.w	r3, r3, #3
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d003      	beq.n	800c596 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f000 f9b2 	bl	800c8f8 <HAL_TIM_IC_CaptureCallback>
 800c594:	e005      	b.n	800c5a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f000 f9a4 	bl	800c8e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f000 f9b5 	bl	800c90c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	f003 0310 	and.w	r3, r3, #16
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d020      	beq.n	800c5f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	f003 0310 	and.w	r3, r3, #16
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d01b      	beq.n	800c5f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f06f 0210 	mvn.w	r2, #16
 800c5c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2208      	movs	r2, #8
 800c5ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	69db      	ldr	r3, [r3, #28]
 800c5d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d003      	beq.n	800c5e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f000 f98c 	bl	800c8f8 <HAL_TIM_IC_CaptureCallback>
 800c5e0:	e005      	b.n	800c5ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f000 f97e 	bl	800c8e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f000 f98f 	bl	800c90c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	f003 0301 	and.w	r3, r3, #1
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d00c      	beq.n	800c618 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	f003 0301 	and.w	r3, r3, #1
 800c604:	2b00      	cmp	r3, #0
 800c606:	d007      	beq.n	800c618 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	f06f 0201 	mvn.w	r2, #1
 800c610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f7f6 fcda 	bl	8002fcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d104      	bne.n	800c62c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d00c      	beq.n	800c646 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c632:	2b00      	cmp	r3, #0
 800c634:	d007      	beq.n	800c646 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c63e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f000 fdb1 	bl	800d1a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d00c      	beq.n	800c66a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c656:	2b00      	cmp	r3, #0
 800c658:	d007      	beq.n	800c66a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f000 fda9 	bl	800d1bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c670:	2b00      	cmp	r3, #0
 800c672:	d00c      	beq.n	800c68e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d007      	beq.n	800c68e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f000 f949 	bl	800c920 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	f003 0320 	and.w	r3, r3, #32
 800c694:	2b00      	cmp	r3, #0
 800c696:	d00c      	beq.n	800c6b2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	f003 0320 	and.w	r3, r3, #32
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d007      	beq.n	800c6b2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f06f 0220 	mvn.w	r2, #32
 800c6aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f000 fd71 	bl	800d194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c6b2:	bf00      	nop
 800c6b4:	3710      	adds	r7, #16
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}
	...

0800c6bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b086      	sub	sp, #24
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	60f8      	str	r0, [r7, #12]
 800c6c4:	60b9      	str	r1, [r7, #8]
 800c6c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d101      	bne.n	800c6da <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c6d6:	2302      	movs	r3, #2
 800c6d8:	e0ff      	b.n	800c8da <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	2201      	movs	r2, #1
 800c6de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2b14      	cmp	r3, #20
 800c6e6:	f200 80f0 	bhi.w	800c8ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c6ea:	a201      	add	r2, pc, #4	@ (adr r2, 800c6f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c6ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6f0:	0800c745 	.word	0x0800c745
 800c6f4:	0800c8cb 	.word	0x0800c8cb
 800c6f8:	0800c8cb 	.word	0x0800c8cb
 800c6fc:	0800c8cb 	.word	0x0800c8cb
 800c700:	0800c785 	.word	0x0800c785
 800c704:	0800c8cb 	.word	0x0800c8cb
 800c708:	0800c8cb 	.word	0x0800c8cb
 800c70c:	0800c8cb 	.word	0x0800c8cb
 800c710:	0800c7c7 	.word	0x0800c7c7
 800c714:	0800c8cb 	.word	0x0800c8cb
 800c718:	0800c8cb 	.word	0x0800c8cb
 800c71c:	0800c8cb 	.word	0x0800c8cb
 800c720:	0800c807 	.word	0x0800c807
 800c724:	0800c8cb 	.word	0x0800c8cb
 800c728:	0800c8cb 	.word	0x0800c8cb
 800c72c:	0800c8cb 	.word	0x0800c8cb
 800c730:	0800c849 	.word	0x0800c849
 800c734:	0800c8cb 	.word	0x0800c8cb
 800c738:	0800c8cb 	.word	0x0800c8cb
 800c73c:	0800c8cb 	.word	0x0800c8cb
 800c740:	0800c889 	.word	0x0800c889
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	68b9      	ldr	r1, [r7, #8]
 800c74a:	4618      	mov	r0, r3
 800c74c:	f000 f998 	bl	800ca80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	699a      	ldr	r2, [r3, #24]
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f042 0208 	orr.w	r2, r2, #8
 800c75e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	699a      	ldr	r2, [r3, #24]
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f022 0204 	bic.w	r2, r2, #4
 800c76e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	6999      	ldr	r1, [r3, #24]
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	691a      	ldr	r2, [r3, #16]
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	430a      	orrs	r2, r1
 800c780:	619a      	str	r2, [r3, #24]
      break;
 800c782:	e0a5      	b.n	800c8d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	68b9      	ldr	r1, [r7, #8]
 800c78a:	4618      	mov	r0, r3
 800c78c:	f000 fa08 	bl	800cba0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	699a      	ldr	r2, [r3, #24]
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c79e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	699a      	ldr	r2, [r3, #24]
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c7ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	6999      	ldr	r1, [r3, #24]
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	691b      	ldr	r3, [r3, #16]
 800c7ba:	021a      	lsls	r2, r3, #8
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	430a      	orrs	r2, r1
 800c7c2:	619a      	str	r2, [r3, #24]
      break;
 800c7c4:	e084      	b.n	800c8d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	68b9      	ldr	r1, [r7, #8]
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f000 fa71 	bl	800ccb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	69da      	ldr	r2, [r3, #28]
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f042 0208 	orr.w	r2, r2, #8
 800c7e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	69da      	ldr	r2, [r3, #28]
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f022 0204 	bic.w	r2, r2, #4
 800c7f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	69d9      	ldr	r1, [r3, #28]
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	691a      	ldr	r2, [r3, #16]
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	430a      	orrs	r2, r1
 800c802:	61da      	str	r2, [r3, #28]
      break;
 800c804:	e064      	b.n	800c8d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	68b9      	ldr	r1, [r7, #8]
 800c80c:	4618      	mov	r0, r3
 800c80e:	f000 fad9 	bl	800cdc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	69da      	ldr	r2, [r3, #28]
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c820:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	69da      	ldr	r2, [r3, #28]
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c830:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	69d9      	ldr	r1, [r3, #28]
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	691b      	ldr	r3, [r3, #16]
 800c83c:	021a      	lsls	r2, r3, #8
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	430a      	orrs	r2, r1
 800c844:	61da      	str	r2, [r3, #28]
      break;
 800c846:	e043      	b.n	800c8d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	68b9      	ldr	r1, [r7, #8]
 800c84e:	4618      	mov	r0, r3
 800c850:	f000 fb22 	bl	800ce98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f042 0208 	orr.w	r2, r2, #8
 800c862:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f022 0204 	bic.w	r2, r2, #4
 800c872:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	691a      	ldr	r2, [r3, #16]
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	430a      	orrs	r2, r1
 800c884:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c886:	e023      	b.n	800c8d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	68b9      	ldr	r1, [r7, #8]
 800c88e:	4618      	mov	r0, r3
 800c890:	f000 fb66 	bl	800cf60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c8a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c8b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	691b      	ldr	r3, [r3, #16]
 800c8be:	021a      	lsls	r2, r3, #8
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	430a      	orrs	r2, r1
 800c8c6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c8c8:	e002      	b.n	800c8d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	75fb      	strb	r3, [r7, #23]
      break;
 800c8ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c8d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3718      	adds	r7, #24
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}
 800c8e2:	bf00      	nop

0800c8e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b083      	sub	sp, #12
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c8ec:	bf00      	nop
 800c8ee:	370c      	adds	r7, #12
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f6:	4770      	bx	lr

0800c8f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b083      	sub	sp, #12
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c900:	bf00      	nop
 800c902:	370c      	adds	r7, #12
 800c904:	46bd      	mov	sp, r7
 800c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90a:	4770      	bx	lr

0800c90c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c90c:	b480      	push	{r7}
 800c90e:	b083      	sub	sp, #12
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c914:	bf00      	nop
 800c916:	370c      	adds	r7, #12
 800c918:	46bd      	mov	sp, r7
 800c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91e:	4770      	bx	lr

0800c920 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c920:	b480      	push	{r7}
 800c922:	b083      	sub	sp, #12
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c928:	bf00      	nop
 800c92a:	370c      	adds	r7, #12
 800c92c:	46bd      	mov	sp, r7
 800c92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c932:	4770      	bx	lr

0800c934 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c934:	b480      	push	{r7}
 800c936:	b085      	sub	sp, #20
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	4a46      	ldr	r2, [pc, #280]	@ (800ca60 <TIM_Base_SetConfig+0x12c>)
 800c948:	4293      	cmp	r3, r2
 800c94a:	d013      	beq.n	800c974 <TIM_Base_SetConfig+0x40>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c952:	d00f      	beq.n	800c974 <TIM_Base_SetConfig+0x40>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	4a43      	ldr	r2, [pc, #268]	@ (800ca64 <TIM_Base_SetConfig+0x130>)
 800c958:	4293      	cmp	r3, r2
 800c95a:	d00b      	beq.n	800c974 <TIM_Base_SetConfig+0x40>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	4a42      	ldr	r2, [pc, #264]	@ (800ca68 <TIM_Base_SetConfig+0x134>)
 800c960:	4293      	cmp	r3, r2
 800c962:	d007      	beq.n	800c974 <TIM_Base_SetConfig+0x40>
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	4a41      	ldr	r2, [pc, #260]	@ (800ca6c <TIM_Base_SetConfig+0x138>)
 800c968:	4293      	cmp	r3, r2
 800c96a:	d003      	beq.n	800c974 <TIM_Base_SetConfig+0x40>
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	4a40      	ldr	r2, [pc, #256]	@ (800ca70 <TIM_Base_SetConfig+0x13c>)
 800c970:	4293      	cmp	r3, r2
 800c972:	d108      	bne.n	800c986 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c97a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	685b      	ldr	r3, [r3, #4]
 800c980:	68fa      	ldr	r2, [r7, #12]
 800c982:	4313      	orrs	r3, r2
 800c984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	4a35      	ldr	r2, [pc, #212]	@ (800ca60 <TIM_Base_SetConfig+0x12c>)
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d01f      	beq.n	800c9ce <TIM_Base_SetConfig+0x9a>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c994:	d01b      	beq.n	800c9ce <TIM_Base_SetConfig+0x9a>
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	4a32      	ldr	r2, [pc, #200]	@ (800ca64 <TIM_Base_SetConfig+0x130>)
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d017      	beq.n	800c9ce <TIM_Base_SetConfig+0x9a>
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	4a31      	ldr	r2, [pc, #196]	@ (800ca68 <TIM_Base_SetConfig+0x134>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d013      	beq.n	800c9ce <TIM_Base_SetConfig+0x9a>
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	4a30      	ldr	r2, [pc, #192]	@ (800ca6c <TIM_Base_SetConfig+0x138>)
 800c9aa:	4293      	cmp	r3, r2
 800c9ac:	d00f      	beq.n	800c9ce <TIM_Base_SetConfig+0x9a>
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	4a2f      	ldr	r2, [pc, #188]	@ (800ca70 <TIM_Base_SetConfig+0x13c>)
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d00b      	beq.n	800c9ce <TIM_Base_SetConfig+0x9a>
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	4a2e      	ldr	r2, [pc, #184]	@ (800ca74 <TIM_Base_SetConfig+0x140>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d007      	beq.n	800c9ce <TIM_Base_SetConfig+0x9a>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	4a2d      	ldr	r2, [pc, #180]	@ (800ca78 <TIM_Base_SetConfig+0x144>)
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d003      	beq.n	800c9ce <TIM_Base_SetConfig+0x9a>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	4a2c      	ldr	r2, [pc, #176]	@ (800ca7c <TIM_Base_SetConfig+0x148>)
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d108      	bne.n	800c9e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c9d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	68db      	ldr	r3, [r3, #12]
 800c9da:	68fa      	ldr	r2, [r7, #12]
 800c9dc:	4313      	orrs	r3, r2
 800c9de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	695b      	ldr	r3, [r3, #20]
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	68fa      	ldr	r2, [r7, #12]
 800c9f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	689a      	ldr	r2, [r3, #8]
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	681a      	ldr	r2, [r3, #0]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	4a16      	ldr	r2, [pc, #88]	@ (800ca60 <TIM_Base_SetConfig+0x12c>)
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d00f      	beq.n	800ca2c <TIM_Base_SetConfig+0xf8>
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	4a18      	ldr	r2, [pc, #96]	@ (800ca70 <TIM_Base_SetConfig+0x13c>)
 800ca10:	4293      	cmp	r3, r2
 800ca12:	d00b      	beq.n	800ca2c <TIM_Base_SetConfig+0xf8>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	4a17      	ldr	r2, [pc, #92]	@ (800ca74 <TIM_Base_SetConfig+0x140>)
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	d007      	beq.n	800ca2c <TIM_Base_SetConfig+0xf8>
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	4a16      	ldr	r2, [pc, #88]	@ (800ca78 <TIM_Base_SetConfig+0x144>)
 800ca20:	4293      	cmp	r3, r2
 800ca22:	d003      	beq.n	800ca2c <TIM_Base_SetConfig+0xf8>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	4a15      	ldr	r2, [pc, #84]	@ (800ca7c <TIM_Base_SetConfig+0x148>)
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	d103      	bne.n	800ca34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	691a      	ldr	r2, [r3, #16]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2201      	movs	r2, #1
 800ca38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	691b      	ldr	r3, [r3, #16]
 800ca3e:	f003 0301 	and.w	r3, r3, #1
 800ca42:	2b01      	cmp	r3, #1
 800ca44:	d105      	bne.n	800ca52 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	691b      	ldr	r3, [r3, #16]
 800ca4a:	f023 0201 	bic.w	r2, r3, #1
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	611a      	str	r2, [r3, #16]
  }
}
 800ca52:	bf00      	nop
 800ca54:	3714      	adds	r7, #20
 800ca56:	46bd      	mov	sp, r7
 800ca58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5c:	4770      	bx	lr
 800ca5e:	bf00      	nop
 800ca60:	40010000 	.word	0x40010000
 800ca64:	40000400 	.word	0x40000400
 800ca68:	40000800 	.word	0x40000800
 800ca6c:	40000c00 	.word	0x40000c00
 800ca70:	40010400 	.word	0x40010400
 800ca74:	40014000 	.word	0x40014000
 800ca78:	40014400 	.word	0x40014400
 800ca7c:	40014800 	.word	0x40014800

0800ca80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b087      	sub	sp, #28
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6a1b      	ldr	r3, [r3, #32]
 800ca8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6a1b      	ldr	r3, [r3, #32]
 800ca94:	f023 0201 	bic.w	r2, r3, #1
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	699b      	ldr	r3, [r3, #24]
 800caa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800caa8:	68fa      	ldr	r2, [r7, #12]
 800caaa:	4b37      	ldr	r3, [pc, #220]	@ (800cb88 <TIM_OC1_SetConfig+0x108>)
 800caac:	4013      	ands	r3, r2
 800caae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f023 0303 	bic.w	r3, r3, #3
 800cab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	68fa      	ldr	r2, [r7, #12]
 800cabe:	4313      	orrs	r3, r2
 800cac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	f023 0302 	bic.w	r3, r3, #2
 800cac8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	689b      	ldr	r3, [r3, #8]
 800cace:	697a      	ldr	r2, [r7, #20]
 800cad0:	4313      	orrs	r3, r2
 800cad2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	4a2d      	ldr	r2, [pc, #180]	@ (800cb8c <TIM_OC1_SetConfig+0x10c>)
 800cad8:	4293      	cmp	r3, r2
 800cada:	d00f      	beq.n	800cafc <TIM_OC1_SetConfig+0x7c>
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	4a2c      	ldr	r2, [pc, #176]	@ (800cb90 <TIM_OC1_SetConfig+0x110>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d00b      	beq.n	800cafc <TIM_OC1_SetConfig+0x7c>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	4a2b      	ldr	r2, [pc, #172]	@ (800cb94 <TIM_OC1_SetConfig+0x114>)
 800cae8:	4293      	cmp	r3, r2
 800caea:	d007      	beq.n	800cafc <TIM_OC1_SetConfig+0x7c>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	4a2a      	ldr	r2, [pc, #168]	@ (800cb98 <TIM_OC1_SetConfig+0x118>)
 800caf0:	4293      	cmp	r3, r2
 800caf2:	d003      	beq.n	800cafc <TIM_OC1_SetConfig+0x7c>
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	4a29      	ldr	r2, [pc, #164]	@ (800cb9c <TIM_OC1_SetConfig+0x11c>)
 800caf8:	4293      	cmp	r3, r2
 800cafa:	d10c      	bne.n	800cb16 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	f023 0308 	bic.w	r3, r3, #8
 800cb02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	68db      	ldr	r3, [r3, #12]
 800cb08:	697a      	ldr	r2, [r7, #20]
 800cb0a:	4313      	orrs	r3, r2
 800cb0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	f023 0304 	bic.w	r3, r3, #4
 800cb14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	4a1c      	ldr	r2, [pc, #112]	@ (800cb8c <TIM_OC1_SetConfig+0x10c>)
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d00f      	beq.n	800cb3e <TIM_OC1_SetConfig+0xbe>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	4a1b      	ldr	r2, [pc, #108]	@ (800cb90 <TIM_OC1_SetConfig+0x110>)
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d00b      	beq.n	800cb3e <TIM_OC1_SetConfig+0xbe>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	4a1a      	ldr	r2, [pc, #104]	@ (800cb94 <TIM_OC1_SetConfig+0x114>)
 800cb2a:	4293      	cmp	r3, r2
 800cb2c:	d007      	beq.n	800cb3e <TIM_OC1_SetConfig+0xbe>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	4a19      	ldr	r2, [pc, #100]	@ (800cb98 <TIM_OC1_SetConfig+0x118>)
 800cb32:	4293      	cmp	r3, r2
 800cb34:	d003      	beq.n	800cb3e <TIM_OC1_SetConfig+0xbe>
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	4a18      	ldr	r2, [pc, #96]	@ (800cb9c <TIM_OC1_SetConfig+0x11c>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d111      	bne.n	800cb62 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cb44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cb4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	695b      	ldr	r3, [r3, #20]
 800cb52:	693a      	ldr	r2, [r7, #16]
 800cb54:	4313      	orrs	r3, r2
 800cb56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	699b      	ldr	r3, [r3, #24]
 800cb5c:	693a      	ldr	r2, [r7, #16]
 800cb5e:	4313      	orrs	r3, r2
 800cb60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	693a      	ldr	r2, [r7, #16]
 800cb66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	68fa      	ldr	r2, [r7, #12]
 800cb6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	685a      	ldr	r2, [r3, #4]
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	697a      	ldr	r2, [r7, #20]
 800cb7a:	621a      	str	r2, [r3, #32]
}
 800cb7c:	bf00      	nop
 800cb7e:	371c      	adds	r7, #28
 800cb80:	46bd      	mov	sp, r7
 800cb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb86:	4770      	bx	lr
 800cb88:	fffeff8f 	.word	0xfffeff8f
 800cb8c:	40010000 	.word	0x40010000
 800cb90:	40010400 	.word	0x40010400
 800cb94:	40014000 	.word	0x40014000
 800cb98:	40014400 	.word	0x40014400
 800cb9c:	40014800 	.word	0x40014800

0800cba0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cba0:	b480      	push	{r7}
 800cba2:	b087      	sub	sp, #28
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6a1b      	ldr	r3, [r3, #32]
 800cbae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6a1b      	ldr	r3, [r3, #32]
 800cbb4:	f023 0210 	bic.w	r2, r3, #16
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	685b      	ldr	r3, [r3, #4]
 800cbc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	699b      	ldr	r3, [r3, #24]
 800cbc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cbc8:	68fa      	ldr	r2, [r7, #12]
 800cbca:	4b34      	ldr	r3, [pc, #208]	@ (800cc9c <TIM_OC2_SetConfig+0xfc>)
 800cbcc:	4013      	ands	r3, r2
 800cbce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cbd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	021b      	lsls	r3, r3, #8
 800cbde:	68fa      	ldr	r2, [r7, #12]
 800cbe0:	4313      	orrs	r3, r2
 800cbe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	f023 0320 	bic.w	r3, r3, #32
 800cbea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	689b      	ldr	r3, [r3, #8]
 800cbf0:	011b      	lsls	r3, r3, #4
 800cbf2:	697a      	ldr	r2, [r7, #20]
 800cbf4:	4313      	orrs	r3, r2
 800cbf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	4a29      	ldr	r2, [pc, #164]	@ (800cca0 <TIM_OC2_SetConfig+0x100>)
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d003      	beq.n	800cc08 <TIM_OC2_SetConfig+0x68>
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	4a28      	ldr	r2, [pc, #160]	@ (800cca4 <TIM_OC2_SetConfig+0x104>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d10d      	bne.n	800cc24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cc0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	68db      	ldr	r3, [r3, #12]
 800cc14:	011b      	lsls	r3, r3, #4
 800cc16:	697a      	ldr	r2, [r7, #20]
 800cc18:	4313      	orrs	r3, r2
 800cc1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	4a1e      	ldr	r2, [pc, #120]	@ (800cca0 <TIM_OC2_SetConfig+0x100>)
 800cc28:	4293      	cmp	r3, r2
 800cc2a:	d00f      	beq.n	800cc4c <TIM_OC2_SetConfig+0xac>
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	4a1d      	ldr	r2, [pc, #116]	@ (800cca4 <TIM_OC2_SetConfig+0x104>)
 800cc30:	4293      	cmp	r3, r2
 800cc32:	d00b      	beq.n	800cc4c <TIM_OC2_SetConfig+0xac>
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	4a1c      	ldr	r2, [pc, #112]	@ (800cca8 <TIM_OC2_SetConfig+0x108>)
 800cc38:	4293      	cmp	r3, r2
 800cc3a:	d007      	beq.n	800cc4c <TIM_OC2_SetConfig+0xac>
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	4a1b      	ldr	r2, [pc, #108]	@ (800ccac <TIM_OC2_SetConfig+0x10c>)
 800cc40:	4293      	cmp	r3, r2
 800cc42:	d003      	beq.n	800cc4c <TIM_OC2_SetConfig+0xac>
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	4a1a      	ldr	r2, [pc, #104]	@ (800ccb0 <TIM_OC2_SetConfig+0x110>)
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	d113      	bne.n	800cc74 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cc52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cc5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	695b      	ldr	r3, [r3, #20]
 800cc60:	009b      	lsls	r3, r3, #2
 800cc62:	693a      	ldr	r2, [r7, #16]
 800cc64:	4313      	orrs	r3, r2
 800cc66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	699b      	ldr	r3, [r3, #24]
 800cc6c:	009b      	lsls	r3, r3, #2
 800cc6e:	693a      	ldr	r2, [r7, #16]
 800cc70:	4313      	orrs	r3, r2
 800cc72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	693a      	ldr	r2, [r7, #16]
 800cc78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	68fa      	ldr	r2, [r7, #12]
 800cc7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	685a      	ldr	r2, [r3, #4]
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	697a      	ldr	r2, [r7, #20]
 800cc8c:	621a      	str	r2, [r3, #32]
}
 800cc8e:	bf00      	nop
 800cc90:	371c      	adds	r7, #28
 800cc92:	46bd      	mov	sp, r7
 800cc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc98:	4770      	bx	lr
 800cc9a:	bf00      	nop
 800cc9c:	feff8fff 	.word	0xfeff8fff
 800cca0:	40010000 	.word	0x40010000
 800cca4:	40010400 	.word	0x40010400
 800cca8:	40014000 	.word	0x40014000
 800ccac:	40014400 	.word	0x40014400
 800ccb0:	40014800 	.word	0x40014800

0800ccb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b087      	sub	sp, #28
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6a1b      	ldr	r3, [r3, #32]
 800ccc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	6a1b      	ldr	r3, [r3, #32]
 800ccc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	685b      	ldr	r3, [r3, #4]
 800ccd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	69db      	ldr	r3, [r3, #28]
 800ccda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ccdc:	68fa      	ldr	r2, [r7, #12]
 800ccde:	4b33      	ldr	r3, [pc, #204]	@ (800cdac <TIM_OC3_SetConfig+0xf8>)
 800cce0:	4013      	ands	r3, r2
 800cce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	f023 0303 	bic.w	r3, r3, #3
 800ccea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	68fa      	ldr	r2, [r7, #12]
 800ccf2:	4313      	orrs	r3, r2
 800ccf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ccfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	689b      	ldr	r3, [r3, #8]
 800cd02:	021b      	lsls	r3, r3, #8
 800cd04:	697a      	ldr	r2, [r7, #20]
 800cd06:	4313      	orrs	r3, r2
 800cd08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	4a28      	ldr	r2, [pc, #160]	@ (800cdb0 <TIM_OC3_SetConfig+0xfc>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d003      	beq.n	800cd1a <TIM_OC3_SetConfig+0x66>
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	4a27      	ldr	r2, [pc, #156]	@ (800cdb4 <TIM_OC3_SetConfig+0x100>)
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d10d      	bne.n	800cd36 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cd20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	68db      	ldr	r3, [r3, #12]
 800cd26:	021b      	lsls	r3, r3, #8
 800cd28:	697a      	ldr	r2, [r7, #20]
 800cd2a:	4313      	orrs	r3, r2
 800cd2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cd34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	4a1d      	ldr	r2, [pc, #116]	@ (800cdb0 <TIM_OC3_SetConfig+0xfc>)
 800cd3a:	4293      	cmp	r3, r2
 800cd3c:	d00f      	beq.n	800cd5e <TIM_OC3_SetConfig+0xaa>
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	4a1c      	ldr	r2, [pc, #112]	@ (800cdb4 <TIM_OC3_SetConfig+0x100>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d00b      	beq.n	800cd5e <TIM_OC3_SetConfig+0xaa>
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	4a1b      	ldr	r2, [pc, #108]	@ (800cdb8 <TIM_OC3_SetConfig+0x104>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d007      	beq.n	800cd5e <TIM_OC3_SetConfig+0xaa>
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	4a1a      	ldr	r2, [pc, #104]	@ (800cdbc <TIM_OC3_SetConfig+0x108>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d003      	beq.n	800cd5e <TIM_OC3_SetConfig+0xaa>
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	4a19      	ldr	r2, [pc, #100]	@ (800cdc0 <TIM_OC3_SetConfig+0x10c>)
 800cd5a:	4293      	cmp	r3, r2
 800cd5c:	d113      	bne.n	800cd86 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cd64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cd6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	695b      	ldr	r3, [r3, #20]
 800cd72:	011b      	lsls	r3, r3, #4
 800cd74:	693a      	ldr	r2, [r7, #16]
 800cd76:	4313      	orrs	r3, r2
 800cd78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	699b      	ldr	r3, [r3, #24]
 800cd7e:	011b      	lsls	r3, r3, #4
 800cd80:	693a      	ldr	r2, [r7, #16]
 800cd82:	4313      	orrs	r3, r2
 800cd84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	693a      	ldr	r2, [r7, #16]
 800cd8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	68fa      	ldr	r2, [r7, #12]
 800cd90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	685a      	ldr	r2, [r3, #4]
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	697a      	ldr	r2, [r7, #20]
 800cd9e:	621a      	str	r2, [r3, #32]
}
 800cda0:	bf00      	nop
 800cda2:	371c      	adds	r7, #28
 800cda4:	46bd      	mov	sp, r7
 800cda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdaa:	4770      	bx	lr
 800cdac:	fffeff8f 	.word	0xfffeff8f
 800cdb0:	40010000 	.word	0x40010000
 800cdb4:	40010400 	.word	0x40010400
 800cdb8:	40014000 	.word	0x40014000
 800cdbc:	40014400 	.word	0x40014400
 800cdc0:	40014800 	.word	0x40014800

0800cdc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b087      	sub	sp, #28
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6a1b      	ldr	r3, [r3, #32]
 800cdd2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6a1b      	ldr	r3, [r3, #32]
 800cdd8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	69db      	ldr	r3, [r3, #28]
 800cdea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cdec:	68fa      	ldr	r2, [r7, #12]
 800cdee:	4b24      	ldr	r3, [pc, #144]	@ (800ce80 <TIM_OC4_SetConfig+0xbc>)
 800cdf0:	4013      	ands	r3, r2
 800cdf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cdfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	021b      	lsls	r3, r3, #8
 800ce02:	68fa      	ldr	r2, [r7, #12]
 800ce04:	4313      	orrs	r3, r2
 800ce06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ce0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	689b      	ldr	r3, [r3, #8]
 800ce14:	031b      	lsls	r3, r3, #12
 800ce16:	693a      	ldr	r2, [r7, #16]
 800ce18:	4313      	orrs	r3, r2
 800ce1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	4a19      	ldr	r2, [pc, #100]	@ (800ce84 <TIM_OC4_SetConfig+0xc0>)
 800ce20:	4293      	cmp	r3, r2
 800ce22:	d00f      	beq.n	800ce44 <TIM_OC4_SetConfig+0x80>
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	4a18      	ldr	r2, [pc, #96]	@ (800ce88 <TIM_OC4_SetConfig+0xc4>)
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	d00b      	beq.n	800ce44 <TIM_OC4_SetConfig+0x80>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	4a17      	ldr	r2, [pc, #92]	@ (800ce8c <TIM_OC4_SetConfig+0xc8>)
 800ce30:	4293      	cmp	r3, r2
 800ce32:	d007      	beq.n	800ce44 <TIM_OC4_SetConfig+0x80>
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	4a16      	ldr	r2, [pc, #88]	@ (800ce90 <TIM_OC4_SetConfig+0xcc>)
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d003      	beq.n	800ce44 <TIM_OC4_SetConfig+0x80>
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	4a15      	ldr	r2, [pc, #84]	@ (800ce94 <TIM_OC4_SetConfig+0xd0>)
 800ce40:	4293      	cmp	r3, r2
 800ce42:	d109      	bne.n	800ce58 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ce4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	695b      	ldr	r3, [r3, #20]
 800ce50:	019b      	lsls	r3, r3, #6
 800ce52:	697a      	ldr	r2, [r7, #20]
 800ce54:	4313      	orrs	r3, r2
 800ce56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	697a      	ldr	r2, [r7, #20]
 800ce5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	68fa      	ldr	r2, [r7, #12]
 800ce62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	685a      	ldr	r2, [r3, #4]
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	693a      	ldr	r2, [r7, #16]
 800ce70:	621a      	str	r2, [r3, #32]
}
 800ce72:	bf00      	nop
 800ce74:	371c      	adds	r7, #28
 800ce76:	46bd      	mov	sp, r7
 800ce78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7c:	4770      	bx	lr
 800ce7e:	bf00      	nop
 800ce80:	feff8fff 	.word	0xfeff8fff
 800ce84:	40010000 	.word	0x40010000
 800ce88:	40010400 	.word	0x40010400
 800ce8c:	40014000 	.word	0x40014000
 800ce90:	40014400 	.word	0x40014400
 800ce94:	40014800 	.word	0x40014800

0800ce98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b087      	sub	sp, #28
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6a1b      	ldr	r3, [r3, #32]
 800cea6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6a1b      	ldr	r3, [r3, #32]
 800ceac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	685b      	ldr	r3, [r3, #4]
 800ceb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cec0:	68fa      	ldr	r2, [r7, #12]
 800cec2:	4b21      	ldr	r3, [pc, #132]	@ (800cf48 <TIM_OC5_SetConfig+0xb0>)
 800cec4:	4013      	ands	r3, r2
 800cec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	68fa      	ldr	r2, [r7, #12]
 800cece:	4313      	orrs	r3, r2
 800ced0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ced8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	689b      	ldr	r3, [r3, #8]
 800cede:	041b      	lsls	r3, r3, #16
 800cee0:	693a      	ldr	r2, [r7, #16]
 800cee2:	4313      	orrs	r3, r2
 800cee4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	4a18      	ldr	r2, [pc, #96]	@ (800cf4c <TIM_OC5_SetConfig+0xb4>)
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d00f      	beq.n	800cf0e <TIM_OC5_SetConfig+0x76>
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	4a17      	ldr	r2, [pc, #92]	@ (800cf50 <TIM_OC5_SetConfig+0xb8>)
 800cef2:	4293      	cmp	r3, r2
 800cef4:	d00b      	beq.n	800cf0e <TIM_OC5_SetConfig+0x76>
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	4a16      	ldr	r2, [pc, #88]	@ (800cf54 <TIM_OC5_SetConfig+0xbc>)
 800cefa:	4293      	cmp	r3, r2
 800cefc:	d007      	beq.n	800cf0e <TIM_OC5_SetConfig+0x76>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	4a15      	ldr	r2, [pc, #84]	@ (800cf58 <TIM_OC5_SetConfig+0xc0>)
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d003      	beq.n	800cf0e <TIM_OC5_SetConfig+0x76>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	4a14      	ldr	r2, [pc, #80]	@ (800cf5c <TIM_OC5_SetConfig+0xc4>)
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	d109      	bne.n	800cf22 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cf14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	695b      	ldr	r3, [r3, #20]
 800cf1a:	021b      	lsls	r3, r3, #8
 800cf1c:	697a      	ldr	r2, [r7, #20]
 800cf1e:	4313      	orrs	r3, r2
 800cf20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	697a      	ldr	r2, [r7, #20]
 800cf26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	68fa      	ldr	r2, [r7, #12]
 800cf2c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	685a      	ldr	r2, [r3, #4]
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	693a      	ldr	r2, [r7, #16]
 800cf3a:	621a      	str	r2, [r3, #32]
}
 800cf3c:	bf00      	nop
 800cf3e:	371c      	adds	r7, #28
 800cf40:	46bd      	mov	sp, r7
 800cf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf46:	4770      	bx	lr
 800cf48:	fffeff8f 	.word	0xfffeff8f
 800cf4c:	40010000 	.word	0x40010000
 800cf50:	40010400 	.word	0x40010400
 800cf54:	40014000 	.word	0x40014000
 800cf58:	40014400 	.word	0x40014400
 800cf5c:	40014800 	.word	0x40014800

0800cf60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cf60:	b480      	push	{r7}
 800cf62:	b087      	sub	sp, #28
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
 800cf68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6a1b      	ldr	r3, [r3, #32]
 800cf6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	6a1b      	ldr	r3, [r3, #32]
 800cf74:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	685b      	ldr	r3, [r3, #4]
 800cf80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cf88:	68fa      	ldr	r2, [r7, #12]
 800cf8a:	4b22      	ldr	r3, [pc, #136]	@ (800d014 <TIM_OC6_SetConfig+0xb4>)
 800cf8c:	4013      	ands	r3, r2
 800cf8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	021b      	lsls	r3, r3, #8
 800cf96:	68fa      	ldr	r2, [r7, #12]
 800cf98:	4313      	orrs	r3, r2
 800cf9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cf9c:	693b      	ldr	r3, [r7, #16]
 800cf9e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cfa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	689b      	ldr	r3, [r3, #8]
 800cfa8:	051b      	lsls	r3, r3, #20
 800cfaa:	693a      	ldr	r2, [r7, #16]
 800cfac:	4313      	orrs	r3, r2
 800cfae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	4a19      	ldr	r2, [pc, #100]	@ (800d018 <TIM_OC6_SetConfig+0xb8>)
 800cfb4:	4293      	cmp	r3, r2
 800cfb6:	d00f      	beq.n	800cfd8 <TIM_OC6_SetConfig+0x78>
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	4a18      	ldr	r2, [pc, #96]	@ (800d01c <TIM_OC6_SetConfig+0xbc>)
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	d00b      	beq.n	800cfd8 <TIM_OC6_SetConfig+0x78>
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	4a17      	ldr	r2, [pc, #92]	@ (800d020 <TIM_OC6_SetConfig+0xc0>)
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	d007      	beq.n	800cfd8 <TIM_OC6_SetConfig+0x78>
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	4a16      	ldr	r2, [pc, #88]	@ (800d024 <TIM_OC6_SetConfig+0xc4>)
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	d003      	beq.n	800cfd8 <TIM_OC6_SetConfig+0x78>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	4a15      	ldr	r2, [pc, #84]	@ (800d028 <TIM_OC6_SetConfig+0xc8>)
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d109      	bne.n	800cfec <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cfde:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	695b      	ldr	r3, [r3, #20]
 800cfe4:	029b      	lsls	r3, r3, #10
 800cfe6:	697a      	ldr	r2, [r7, #20]
 800cfe8:	4313      	orrs	r3, r2
 800cfea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	697a      	ldr	r2, [r7, #20]
 800cff0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	68fa      	ldr	r2, [r7, #12]
 800cff6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	685a      	ldr	r2, [r3, #4]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	693a      	ldr	r2, [r7, #16]
 800d004:	621a      	str	r2, [r3, #32]
}
 800d006:	bf00      	nop
 800d008:	371c      	adds	r7, #28
 800d00a:	46bd      	mov	sp, r7
 800d00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d010:	4770      	bx	lr
 800d012:	bf00      	nop
 800d014:	feff8fff 	.word	0xfeff8fff
 800d018:	40010000 	.word	0x40010000
 800d01c:	40010400 	.word	0x40010400
 800d020:	40014000 	.word	0x40014000
 800d024:	40014400 	.word	0x40014400
 800d028:	40014800 	.word	0x40014800

0800d02c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d02c:	b480      	push	{r7}
 800d02e:	b087      	sub	sp, #28
 800d030:	af00      	add	r7, sp, #0
 800d032:	60f8      	str	r0, [r7, #12]
 800d034:	60b9      	str	r1, [r7, #8]
 800d036:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	f003 031f 	and.w	r3, r3, #31
 800d03e:	2201      	movs	r2, #1
 800d040:	fa02 f303 	lsl.w	r3, r2, r3
 800d044:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	6a1a      	ldr	r2, [r3, #32]
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	43db      	mvns	r3, r3
 800d04e:	401a      	ands	r2, r3
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	6a1a      	ldr	r2, [r3, #32]
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	f003 031f 	and.w	r3, r3, #31
 800d05e:	6879      	ldr	r1, [r7, #4]
 800d060:	fa01 f303 	lsl.w	r3, r1, r3
 800d064:	431a      	orrs	r2, r3
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	621a      	str	r2, [r3, #32]
}
 800d06a:	bf00      	nop
 800d06c:	371c      	adds	r7, #28
 800d06e:	46bd      	mov	sp, r7
 800d070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d074:	4770      	bx	lr
	...

0800d078 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d078:	b480      	push	{r7}
 800d07a:	b085      	sub	sp, #20
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
 800d080:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d088:	2b01      	cmp	r3, #1
 800d08a:	d101      	bne.n	800d090 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d08c:	2302      	movs	r3, #2
 800d08e:	e06d      	b.n	800d16c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2201      	movs	r2, #1
 800d094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2202      	movs	r2, #2
 800d09c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	685b      	ldr	r3, [r3, #4]
 800d0a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	689b      	ldr	r3, [r3, #8]
 800d0ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4a30      	ldr	r2, [pc, #192]	@ (800d178 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d004      	beq.n	800d0c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	4a2f      	ldr	r2, [pc, #188]	@ (800d17c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d0c0:	4293      	cmp	r3, r2
 800d0c2:	d108      	bne.n	800d0d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d0ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	685b      	ldr	r3, [r3, #4]
 800d0d0:	68fa      	ldr	r2, [r7, #12]
 800d0d2:	4313      	orrs	r3, r2
 800d0d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d0dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	68fa      	ldr	r2, [r7, #12]
 800d0e4:	4313      	orrs	r3, r2
 800d0e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	68fa      	ldr	r2, [r7, #12]
 800d0ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	4a20      	ldr	r2, [pc, #128]	@ (800d178 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d022      	beq.n	800d140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d102:	d01d      	beq.n	800d140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	4a1d      	ldr	r2, [pc, #116]	@ (800d180 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d10a:	4293      	cmp	r3, r2
 800d10c:	d018      	beq.n	800d140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	4a1c      	ldr	r2, [pc, #112]	@ (800d184 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d114:	4293      	cmp	r3, r2
 800d116:	d013      	beq.n	800d140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	4a1a      	ldr	r2, [pc, #104]	@ (800d188 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d11e:	4293      	cmp	r3, r2
 800d120:	d00e      	beq.n	800d140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	4a15      	ldr	r2, [pc, #84]	@ (800d17c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d128:	4293      	cmp	r3, r2
 800d12a:	d009      	beq.n	800d140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	4a16      	ldr	r2, [pc, #88]	@ (800d18c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d132:	4293      	cmp	r3, r2
 800d134:	d004      	beq.n	800d140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	4a15      	ldr	r2, [pc, #84]	@ (800d190 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d13c:	4293      	cmp	r3, r2
 800d13e:	d10c      	bne.n	800d15a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d140:	68bb      	ldr	r3, [r7, #8]
 800d142:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d146:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	689b      	ldr	r3, [r3, #8]
 800d14c:	68ba      	ldr	r2, [r7, #8]
 800d14e:	4313      	orrs	r3, r2
 800d150:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	68ba      	ldr	r2, [r7, #8]
 800d158:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2201      	movs	r2, #1
 800d15e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	2200      	movs	r2, #0
 800d166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d16a:	2300      	movs	r3, #0
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	3714      	adds	r7, #20
 800d170:	46bd      	mov	sp, r7
 800d172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d176:	4770      	bx	lr
 800d178:	40010000 	.word	0x40010000
 800d17c:	40010400 	.word	0x40010400
 800d180:	40000400 	.word	0x40000400
 800d184:	40000800 	.word	0x40000800
 800d188:	40000c00 	.word	0x40000c00
 800d18c:	40001800 	.word	0x40001800
 800d190:	40014000 	.word	0x40014000

0800d194 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d194:	b480      	push	{r7}
 800d196:	b083      	sub	sp, #12
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d19c:	bf00      	nop
 800d19e:	370c      	adds	r7, #12
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a6:	4770      	bx	lr

0800d1a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d1a8:	b480      	push	{r7}
 800d1aa:	b083      	sub	sp, #12
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d1b0:	bf00      	nop
 800d1b2:	370c      	adds	r7, #12
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ba:	4770      	bx	lr

0800d1bc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b083      	sub	sp, #12
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d1c4:	bf00      	nop
 800d1c6:	370c      	adds	r7, #12
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ce:	4770      	bx	lr

0800d1d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b082      	sub	sp, #8
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d101      	bne.n	800d1e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d1de:	2301      	movs	r3, #1
 800d1e0:	e042      	b.n	800d268 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d106      	bne.n	800d1fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f7f6 fe3b 	bl	8003e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2224      	movs	r2, #36	@ 0x24
 800d1fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	681a      	ldr	r2, [r3, #0]
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f022 0201 	bic.w	r2, r2, #1
 800d210:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d216:	2b00      	cmp	r3, #0
 800d218:	d002      	beq.n	800d220 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f001 fc98 	bl	800eb50 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f000 fe29 	bl	800de78 <UART_SetConfig>
 800d226:	4603      	mov	r3, r0
 800d228:	2b01      	cmp	r3, #1
 800d22a:	d101      	bne.n	800d230 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d22c:	2301      	movs	r3, #1
 800d22e:	e01b      	b.n	800d268 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	685a      	ldr	r2, [r3, #4]
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d23e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	689a      	ldr	r2, [r3, #8]
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d24e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	681a      	ldr	r2, [r3, #0]
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	f042 0201 	orr.w	r2, r2, #1
 800d25e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f001 fd17 	bl	800ec94 <UART_CheckIdleState>
 800d266:	4603      	mov	r3, r0
}
 800d268:	4618      	mov	r0, r3
 800d26a:	3708      	adds	r7, #8
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}

0800d270 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b08a      	sub	sp, #40	@ 0x28
 800d274:	af02      	add	r7, sp, #8
 800d276:	60f8      	str	r0, [r7, #12]
 800d278:	60b9      	str	r1, [r7, #8]
 800d27a:	603b      	str	r3, [r7, #0]
 800d27c:	4613      	mov	r3, r2
 800d27e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d286:	2b20      	cmp	r3, #32
 800d288:	d17b      	bne.n	800d382 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d002      	beq.n	800d296 <HAL_UART_Transmit+0x26>
 800d290:	88fb      	ldrh	r3, [r7, #6]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d101      	bne.n	800d29a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d296:	2301      	movs	r3, #1
 800d298:	e074      	b.n	800d384 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	2200      	movs	r2, #0
 800d29e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	2221      	movs	r2, #33	@ 0x21
 800d2a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d2aa:	f7f7 f877 	bl	800439c <HAL_GetTick>
 800d2ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	88fa      	ldrh	r2, [r7, #6]
 800d2b4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	88fa      	ldrh	r2, [r7, #6]
 800d2bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	689b      	ldr	r3, [r3, #8]
 800d2c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d2c8:	d108      	bne.n	800d2dc <HAL_UART_Transmit+0x6c>
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	691b      	ldr	r3, [r3, #16]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d104      	bne.n	800d2dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	61bb      	str	r3, [r7, #24]
 800d2da:	e003      	b.n	800d2e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d2e4:	e030      	b.n	800d348 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	9300      	str	r3, [sp, #0]
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	2180      	movs	r1, #128	@ 0x80
 800d2f0:	68f8      	ldr	r0, [r7, #12]
 800d2f2:	f001 fd79 	bl	800ede8 <UART_WaitOnFlagUntilTimeout>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d005      	beq.n	800d308 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	2220      	movs	r2, #32
 800d300:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800d304:	2303      	movs	r3, #3
 800d306:	e03d      	b.n	800d384 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d308:	69fb      	ldr	r3, [r7, #28]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d10b      	bne.n	800d326 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d30e:	69bb      	ldr	r3, [r7, #24]
 800d310:	881b      	ldrh	r3, [r3, #0]
 800d312:	461a      	mov	r2, r3
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d31c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800d31e:	69bb      	ldr	r3, [r7, #24]
 800d320:	3302      	adds	r3, #2
 800d322:	61bb      	str	r3, [r7, #24]
 800d324:	e007      	b.n	800d336 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d326:	69fb      	ldr	r3, [r7, #28]
 800d328:	781a      	ldrb	r2, [r3, #0]
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800d330:	69fb      	ldr	r3, [r7, #28]
 800d332:	3301      	adds	r3, #1
 800d334:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d33c:	b29b      	uxth	r3, r3
 800d33e:	3b01      	subs	r3, #1
 800d340:	b29a      	uxth	r2, r3
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d34e:	b29b      	uxth	r3, r3
 800d350:	2b00      	cmp	r3, #0
 800d352:	d1c8      	bne.n	800d2e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	9300      	str	r3, [sp, #0]
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	2200      	movs	r2, #0
 800d35c:	2140      	movs	r1, #64	@ 0x40
 800d35e:	68f8      	ldr	r0, [r7, #12]
 800d360:	f001 fd42 	bl	800ede8 <UART_WaitOnFlagUntilTimeout>
 800d364:	4603      	mov	r3, r0
 800d366:	2b00      	cmp	r3, #0
 800d368:	d005      	beq.n	800d376 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	2220      	movs	r2, #32
 800d36e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800d372:	2303      	movs	r3, #3
 800d374:	e006      	b.n	800d384 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	2220      	movs	r2, #32
 800d37a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800d37e:	2300      	movs	r3, #0
 800d380:	e000      	b.n	800d384 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d382:	2302      	movs	r3, #2
  }
}
 800d384:	4618      	mov	r0, r3
 800d386:	3720      	adds	r7, #32
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b08a      	sub	sp, #40	@ 0x28
 800d390:	af00      	add	r7, sp, #0
 800d392:	60f8      	str	r0, [r7, #12]
 800d394:	60b9      	str	r1, [r7, #8]
 800d396:	4613      	mov	r3, r2
 800d398:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d3a0:	2b20      	cmp	r3, #32
 800d3a2:	d137      	bne.n	800d414 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d002      	beq.n	800d3b0 <HAL_UART_Receive_DMA+0x24>
 800d3aa:	88fb      	ldrh	r3, [r7, #6]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d101      	bne.n	800d3b4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	e030      	b.n	800d416 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	4a18      	ldr	r2, [pc, #96]	@ (800d420 <HAL_UART_Receive_DMA+0x94>)
 800d3c0:	4293      	cmp	r3, r2
 800d3c2:	d01f      	beq.n	800d404 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	685b      	ldr	r3, [r3, #4]
 800d3ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d018      	beq.n	800d404 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	e853 3f00 	ldrex	r3, [r3]
 800d3de:	613b      	str	r3, [r7, #16]
   return(result);
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d3e6:	627b      	str	r3, [r7, #36]	@ 0x24
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	461a      	mov	r2, r3
 800d3ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3f0:	623b      	str	r3, [r7, #32]
 800d3f2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3f4:	69f9      	ldr	r1, [r7, #28]
 800d3f6:	6a3a      	ldr	r2, [r7, #32]
 800d3f8:	e841 2300 	strex	r3, r2, [r1]
 800d3fc:	61bb      	str	r3, [r7, #24]
   return(result);
 800d3fe:	69bb      	ldr	r3, [r7, #24]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d1e6      	bne.n	800d3d2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d404:	88fb      	ldrh	r3, [r7, #6]
 800d406:	461a      	mov	r2, r3
 800d408:	68b9      	ldr	r1, [r7, #8]
 800d40a:	68f8      	ldr	r0, [r7, #12]
 800d40c:	f001 fd5a 	bl	800eec4 <UART_Start_Receive_DMA>
 800d410:	4603      	mov	r3, r0
 800d412:	e000      	b.n	800d416 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d414:	2302      	movs	r3, #2
  }
}
 800d416:	4618      	mov	r0, r3
 800d418:	3728      	adds	r7, #40	@ 0x28
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
 800d41e:	bf00      	nop
 800d420:	58000c00 	.word	0x58000c00

0800d424 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b0a2      	sub	sp, #136	@ 0x88
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 800d42c:	2301      	movs	r3, #1
 800d42e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d438:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d43a:	e853 3f00 	ldrex	r3, [r3]
 800d43e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d440:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d442:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800d446:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	461a      	mov	r2, r3
 800d450:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d454:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d456:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d458:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d45a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d45c:	e841 2300 	strex	r3, r2, [r1]
 800d460:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d462:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d464:	2b00      	cmp	r3, #0
 800d466:	d1e4      	bne.n	800d432 <HAL_UART_Abort_IT+0xe>
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	3308      	adds	r3, #8
 800d46e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d470:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d472:	e853 3f00 	ldrex	r3, [r3]
 800d476:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d478:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d47a:	4b85      	ldr	r3, [pc, #532]	@ (800d690 <HAL_UART_Abort_IT+0x26c>)
 800d47c:	4013      	ands	r3, r2
 800d47e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	3308      	adds	r3, #8
 800d486:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d488:	65ba      	str	r2, [r7, #88]	@ 0x58
 800d48a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d48c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d48e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d490:	e841 2300 	strex	r3, r2, [r1]
 800d494:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d496:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d1e5      	bne.n	800d468 <HAL_UART_Abort_IT+0x44>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d4a0:	2b01      	cmp	r3, #1
 800d4a2:	d118      	bne.n	800d4d6 <HAL_UART_Abort_IT+0xb2>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4ac:	e853 3f00 	ldrex	r3, [r3]
 800d4b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d4b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4b4:	f023 0310 	bic.w	r3, r3, #16
 800d4b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	461a      	mov	r2, r3
 800d4c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d4c2:	647b      	str	r3, [r7, #68]	@ 0x44
 800d4c4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d4c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d4ca:	e841 2300 	strex	r3, r2, [r1]
 800d4ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d4d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d1e6      	bne.n	800d4a4 <HAL_UART_Abort_IT+0x80>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d00f      	beq.n	800d4fe <HAL_UART_Abort_IT+0xda>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	689b      	ldr	r3, [r3, #8]
 800d4e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d4e8:	2b80      	cmp	r3, #128	@ 0x80
 800d4ea:	d104      	bne.n	800d4f6 <HAL_UART_Abort_IT+0xd2>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d4f0:	4a68      	ldr	r2, [pc, #416]	@ (800d694 <HAL_UART_Abort_IT+0x270>)
 800d4f2:	651a      	str	r2, [r3, #80]	@ 0x50
 800d4f4:	e003      	b.n	800d4fe <HAL_UART_Abort_IT+0xda>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d504:	2b00      	cmp	r3, #0
 800d506:	d011      	beq.n	800d52c <HAL_UART_Abort_IT+0x108>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	689b      	ldr	r3, [r3, #8]
 800d50e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d512:	2b40      	cmp	r3, #64	@ 0x40
 800d514:	d105      	bne.n	800d522 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d51c:	4a5e      	ldr	r2, [pc, #376]	@ (800d698 <HAL_UART_Abort_IT+0x274>)
 800d51e:	651a      	str	r2, [r3, #80]	@ 0x50
 800d520:	e004      	b.n	800d52c <HAL_UART_Abort_IT+0x108>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d528:	2200      	movs	r2, #0
 800d52a:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	689b      	ldr	r3, [r3, #8]
 800d532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d536:	2b80      	cmp	r3, #128	@ 0x80
 800d538:	d12d      	bne.n	800d596 <HAL_UART_Abort_IT+0x172>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	3308      	adds	r3, #8
 800d540:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d544:	e853 3f00 	ldrex	r3, [r3]
 800d548:	623b      	str	r3, [r7, #32]
   return(result);
 800d54a:	6a3b      	ldr	r3, [r7, #32]
 800d54c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d550:	677b      	str	r3, [r7, #116]	@ 0x74
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	3308      	adds	r3, #8
 800d558:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800d55a:	633a      	str	r2, [r7, #48]	@ 0x30
 800d55c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d55e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d560:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d562:	e841 2300 	strex	r3, r2, [r1]
 800d566:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d1e5      	bne.n	800d53a <HAL_UART_Abort_IT+0x116>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d572:	2b00      	cmp	r3, #0
 800d574:	d00f      	beq.n	800d596 <HAL_UART_Abort_IT+0x172>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d57a:	4618      	mov	r0, r3
 800d57c:	f7f8 f9b8 	bl	80058f0 <HAL_DMA_Abort_IT>
 800d580:	4603      	mov	r3, r0
 800d582:	2b00      	cmp	r3, #0
 800d584:	d004      	beq.n	800d590 <HAL_UART_Abort_IT+0x16c>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d58a:	2200      	movs	r2, #0
 800d58c:	651a      	str	r2, [r3, #80]	@ 0x50
 800d58e:	e002      	b.n	800d596 <HAL_UART_Abort_IT+0x172>
      }
      else
      {
        abortcplt = 0U;
 800d590:	2300      	movs	r3, #0
 800d592:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	689b      	ldr	r3, [r3, #8]
 800d59c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5a0:	2b40      	cmp	r3, #64	@ 0x40
 800d5a2:	d133      	bne.n	800d60c <HAL_UART_Abort_IT+0x1e8>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	3308      	adds	r3, #8
 800d5aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5ac:	693b      	ldr	r3, [r7, #16]
 800d5ae:	e853 3f00 	ldrex	r3, [r3]
 800d5b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d5ba:	673b      	str	r3, [r7, #112]	@ 0x70
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	3308      	adds	r3, #8
 800d5c2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800d5c4:	61fa      	str	r2, [r7, #28]
 800d5c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5c8:	69b9      	ldr	r1, [r7, #24]
 800d5ca:	69fa      	ldr	r2, [r7, #28]
 800d5cc:	e841 2300 	strex	r3, r2, [r1]
 800d5d0:	617b      	str	r3, [r7, #20]
   return(result);
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d1e5      	bne.n	800d5a4 <HAL_UART_Abort_IT+0x180>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d014      	beq.n	800d60c <HAL_UART_Abort_IT+0x1e8>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f7f8 f981 	bl	80058f0 <HAL_DMA_Abort_IT>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d008      	beq.n	800d606 <HAL_UART_Abort_IT+0x1e2>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	651a      	str	r2, [r3, #80]	@ 0x50
        abortcplt = 1U;
 800d5fe:	2301      	movs	r3, #1
 800d600:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d604:	e002      	b.n	800d60c <HAL_UART_Abort_IT+0x1e8>
      }
      else
      {
        abortcplt = 0U;
 800d606:	2300      	movs	r3, #0
 800d608:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 800d60c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d610:	2b01      	cmp	r3, #1
 800d612:	d138      	bne.n	800d686 <HAL_UART_Abort_IT+0x262>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2200      	movs	r2, #0
 800d618:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->RxXferCount = 0U;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2200      	movs	r2, #0
 800d620:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2200      	movs	r2, #0
 800d628:	675a      	str	r2, [r3, #116]	@ 0x74
    huart->TxISR = NULL;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2200      	movs	r2, #0
 800d62e:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2200      	movs	r2, #0
 800d634:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	220f      	movs	r2, #15
 800d63e:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d644:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d648:	d107      	bne.n	800d65a <HAL_UART_Abort_IT+0x236>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	699a      	ldr	r2, [r3, #24]
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	f042 0210 	orr.w	r2, r2, #16
 800d658:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	699a      	ldr	r2, [r3, #24]
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	f042 0208 	orr.w	r2, r2, #8
 800d668:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2220      	movs	r2, #32
 800d66e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    huart->RxState = HAL_UART_STATE_READY;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2220      	movs	r2, #32
 800d676:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2200      	movs	r2, #0
 800d67e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f000 fbe3 	bl	800de4c <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800d686:	2300      	movs	r3, #0
}
 800d688:	4618      	mov	r0, r3
 800d68a:	3788      	adds	r7, #136	@ 0x88
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}
 800d690:	ef7ffffe 	.word	0xef7ffffe
 800d694:	0800f373 	.word	0x0800f373
 800d698:	0800f3ff 	.word	0x0800f3ff

0800d69c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b0ba      	sub	sp, #232	@ 0xe8
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	69db      	ldr	r3, [r3, #28]
 800d6aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	689b      	ldr	r3, [r3, #8]
 800d6be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d6c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800d6c6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800d6ca:	4013      	ands	r3, r2
 800d6cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800d6d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d11b      	bne.n	800d710 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d6d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d6dc:	f003 0320 	and.w	r3, r3, #32
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d015      	beq.n	800d710 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d6e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d6e8:	f003 0320 	and.w	r3, r3, #32
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d105      	bne.n	800d6fc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d6f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d6f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d009      	beq.n	800d710 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d700:	2b00      	cmp	r3, #0
 800d702:	f000 8377 	beq.w	800ddf4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	4798      	blx	r3
      }
      return;
 800d70e:	e371      	b.n	800ddf4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d710:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d714:	2b00      	cmp	r3, #0
 800d716:	f000 8123 	beq.w	800d960 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d71a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d71e:	4b8d      	ldr	r3, [pc, #564]	@ (800d954 <HAL_UART_IRQHandler+0x2b8>)
 800d720:	4013      	ands	r3, r2
 800d722:	2b00      	cmp	r3, #0
 800d724:	d106      	bne.n	800d734 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d726:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800d72a:	4b8b      	ldr	r3, [pc, #556]	@ (800d958 <HAL_UART_IRQHandler+0x2bc>)
 800d72c:	4013      	ands	r3, r2
 800d72e:	2b00      	cmp	r3, #0
 800d730:	f000 8116 	beq.w	800d960 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d738:	f003 0301 	and.w	r3, r3, #1
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d011      	beq.n	800d764 <HAL_UART_IRQHandler+0xc8>
 800d740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d00b      	beq.n	800d764 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	2201      	movs	r2, #1
 800d752:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d75a:	f043 0201 	orr.w	r2, r3, #1
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d768:	f003 0302 	and.w	r3, r3, #2
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d011      	beq.n	800d794 <HAL_UART_IRQHandler+0xf8>
 800d770:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d774:	f003 0301 	and.w	r3, r3, #1
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d00b      	beq.n	800d794 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	2202      	movs	r2, #2
 800d782:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d78a:	f043 0204 	orr.w	r2, r3, #4
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d798:	f003 0304 	and.w	r3, r3, #4
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d011      	beq.n	800d7c4 <HAL_UART_IRQHandler+0x128>
 800d7a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d7a4:	f003 0301 	and.w	r3, r3, #1
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d00b      	beq.n	800d7c4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	2204      	movs	r2, #4
 800d7b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d7ba:	f043 0202 	orr.w	r2, r3, #2
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d7c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d7c8:	f003 0308 	and.w	r3, r3, #8
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d017      	beq.n	800d800 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d7d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d7d4:	f003 0320 	and.w	r3, r3, #32
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d105      	bne.n	800d7e8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d7dc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d7e0:	4b5c      	ldr	r3, [pc, #368]	@ (800d954 <HAL_UART_IRQHandler+0x2b8>)
 800d7e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d00b      	beq.n	800d800 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	2208      	movs	r2, #8
 800d7ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d7f6:	f043 0208 	orr.w	r2, r3, #8
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d804:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d012      	beq.n	800d832 <HAL_UART_IRQHandler+0x196>
 800d80c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d810:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d814:	2b00      	cmp	r3, #0
 800d816:	d00c      	beq.n	800d832 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d820:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d828:	f043 0220 	orr.w	r2, r3, #32
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d838:	2b00      	cmp	r3, #0
 800d83a:	f000 82dd 	beq.w	800ddf8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d83e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d842:	f003 0320 	and.w	r3, r3, #32
 800d846:	2b00      	cmp	r3, #0
 800d848:	d013      	beq.n	800d872 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d84a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d84e:	f003 0320 	and.w	r3, r3, #32
 800d852:	2b00      	cmp	r3, #0
 800d854:	d105      	bne.n	800d862 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d85a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d007      	beq.n	800d872 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d866:	2b00      	cmp	r3, #0
 800d868:	d003      	beq.n	800d872 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d878:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	689b      	ldr	r3, [r3, #8]
 800d882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d886:	2b40      	cmp	r3, #64	@ 0x40
 800d888:	d005      	beq.n	800d896 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d88a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d88e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d892:	2b00      	cmp	r3, #0
 800d894:	d054      	beq.n	800d940 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f001 fbfc 	bl	800f094 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	689b      	ldr	r3, [r3, #8]
 800d8a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d8a6:	2b40      	cmp	r3, #64	@ 0x40
 800d8a8:	d146      	bne.n	800d938 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	3308      	adds	r3, #8
 800d8b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d8b8:	e853 3f00 	ldrex	r3, [r3]
 800d8bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d8c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d8c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d8c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	3308      	adds	r3, #8
 800d8d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d8d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d8da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d8e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d8e6:	e841 2300 	strex	r3, r2, [r1]
 800d8ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d8ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d1d9      	bne.n	800d8aa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d017      	beq.n	800d930 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d906:	4a15      	ldr	r2, [pc, #84]	@ (800d95c <HAL_UART_IRQHandler+0x2c0>)
 800d908:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d910:	4618      	mov	r0, r3
 800d912:	f7f7 ffed 	bl	80058f0 <HAL_DMA_Abort_IT>
 800d916:	4603      	mov	r3, r0
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d019      	beq.n	800d950 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d922:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d924:	687a      	ldr	r2, [r7, #4]
 800d926:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d92a:	4610      	mov	r0, r2
 800d92c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d92e:	e00f      	b.n	800d950 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	f000 fa81 	bl	800de38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d936:	e00b      	b.n	800d950 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	f000 fa7d 	bl	800de38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d93e:	e007      	b.n	800d950 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f000 fa79 	bl	800de38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2200      	movs	r2, #0
 800d94a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d94e:	e253      	b.n	800ddf8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d950:	bf00      	nop
    return;
 800d952:	e251      	b.n	800ddf8 <HAL_UART_IRQHandler+0x75c>
 800d954:	10000001 	.word	0x10000001
 800d958:	04000120 	.word	0x04000120
 800d95c:	0800f347 	.word	0x0800f347

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d964:	2b01      	cmp	r3, #1
 800d966:	f040 81e7 	bne.w	800dd38 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d96a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d96e:	f003 0310 	and.w	r3, r3, #16
 800d972:	2b00      	cmp	r3, #0
 800d974:	f000 81e0 	beq.w	800dd38 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d97c:	f003 0310 	and.w	r3, r3, #16
 800d980:	2b00      	cmp	r3, #0
 800d982:	f000 81d9 	beq.w	800dd38 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	2210      	movs	r2, #16
 800d98c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	689b      	ldr	r3, [r3, #8]
 800d994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d998:	2b40      	cmp	r3, #64	@ 0x40
 800d99a:	f040 8151 	bne.w	800dc40 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	4a96      	ldr	r2, [pc, #600]	@ (800dc00 <HAL_UART_IRQHandler+0x564>)
 800d9a8:	4293      	cmp	r3, r2
 800d9aa:	d068      	beq.n	800da7e <HAL_UART_IRQHandler+0x3e2>
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	4a93      	ldr	r2, [pc, #588]	@ (800dc04 <HAL_UART_IRQHandler+0x568>)
 800d9b6:	4293      	cmp	r3, r2
 800d9b8:	d061      	beq.n	800da7e <HAL_UART_IRQHandler+0x3e2>
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	4a91      	ldr	r2, [pc, #580]	@ (800dc08 <HAL_UART_IRQHandler+0x56c>)
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d05a      	beq.n	800da7e <HAL_UART_IRQHandler+0x3e2>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	4a8e      	ldr	r2, [pc, #568]	@ (800dc0c <HAL_UART_IRQHandler+0x570>)
 800d9d2:	4293      	cmp	r3, r2
 800d9d4:	d053      	beq.n	800da7e <HAL_UART_IRQHandler+0x3e2>
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	4a8c      	ldr	r2, [pc, #560]	@ (800dc10 <HAL_UART_IRQHandler+0x574>)
 800d9e0:	4293      	cmp	r3, r2
 800d9e2:	d04c      	beq.n	800da7e <HAL_UART_IRQHandler+0x3e2>
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	4a89      	ldr	r2, [pc, #548]	@ (800dc14 <HAL_UART_IRQHandler+0x578>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d045      	beq.n	800da7e <HAL_UART_IRQHandler+0x3e2>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	4a87      	ldr	r2, [pc, #540]	@ (800dc18 <HAL_UART_IRQHandler+0x57c>)
 800d9fc:	4293      	cmp	r3, r2
 800d9fe:	d03e      	beq.n	800da7e <HAL_UART_IRQHandler+0x3e2>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	4a84      	ldr	r2, [pc, #528]	@ (800dc1c <HAL_UART_IRQHandler+0x580>)
 800da0a:	4293      	cmp	r3, r2
 800da0c:	d037      	beq.n	800da7e <HAL_UART_IRQHandler+0x3e2>
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	4a82      	ldr	r2, [pc, #520]	@ (800dc20 <HAL_UART_IRQHandler+0x584>)
 800da18:	4293      	cmp	r3, r2
 800da1a:	d030      	beq.n	800da7e <HAL_UART_IRQHandler+0x3e2>
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	4a7f      	ldr	r2, [pc, #508]	@ (800dc24 <HAL_UART_IRQHandler+0x588>)
 800da26:	4293      	cmp	r3, r2
 800da28:	d029      	beq.n	800da7e <HAL_UART_IRQHandler+0x3e2>
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	4a7d      	ldr	r2, [pc, #500]	@ (800dc28 <HAL_UART_IRQHandler+0x58c>)
 800da34:	4293      	cmp	r3, r2
 800da36:	d022      	beq.n	800da7e <HAL_UART_IRQHandler+0x3e2>
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	4a7a      	ldr	r2, [pc, #488]	@ (800dc2c <HAL_UART_IRQHandler+0x590>)
 800da42:	4293      	cmp	r3, r2
 800da44:	d01b      	beq.n	800da7e <HAL_UART_IRQHandler+0x3e2>
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	4a78      	ldr	r2, [pc, #480]	@ (800dc30 <HAL_UART_IRQHandler+0x594>)
 800da50:	4293      	cmp	r3, r2
 800da52:	d014      	beq.n	800da7e <HAL_UART_IRQHandler+0x3e2>
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	4a75      	ldr	r2, [pc, #468]	@ (800dc34 <HAL_UART_IRQHandler+0x598>)
 800da5e:	4293      	cmp	r3, r2
 800da60:	d00d      	beq.n	800da7e <HAL_UART_IRQHandler+0x3e2>
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	4a73      	ldr	r2, [pc, #460]	@ (800dc38 <HAL_UART_IRQHandler+0x59c>)
 800da6c:	4293      	cmp	r3, r2
 800da6e:	d006      	beq.n	800da7e <HAL_UART_IRQHandler+0x3e2>
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	4a70      	ldr	r2, [pc, #448]	@ (800dc3c <HAL_UART_IRQHandler+0x5a0>)
 800da7a:	4293      	cmp	r3, r2
 800da7c:	d106      	bne.n	800da8c <HAL_UART_IRQHandler+0x3f0>
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	685b      	ldr	r3, [r3, #4]
 800da88:	b29b      	uxth	r3, r3
 800da8a:	e005      	b.n	800da98 <HAL_UART_IRQHandler+0x3fc>
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	685b      	ldr	r3, [r3, #4]
 800da96:	b29b      	uxth	r3, r3
 800da98:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800da9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	f000 81ab 	beq.w	800ddfc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800daac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800dab0:	429a      	cmp	r2, r3
 800dab2:	f080 81a3 	bcs.w	800ddfc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800dabc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dac6:	69db      	ldr	r3, [r3, #28]
 800dac8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dacc:	f000 8087 	beq.w	800dbde <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dad8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800dadc:	e853 3f00 	ldrex	r3, [r3]
 800dae0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800dae4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dae8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800daec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	461a      	mov	r2, r3
 800daf6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800dafa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800dafe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db02:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800db06:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800db0a:	e841 2300 	strex	r3, r2, [r1]
 800db0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800db12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800db16:	2b00      	cmp	r3, #0
 800db18:	d1da      	bne.n	800dad0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	3308      	adds	r3, #8
 800db20:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800db24:	e853 3f00 	ldrex	r3, [r3]
 800db28:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800db2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800db2c:	f023 0301 	bic.w	r3, r3, #1
 800db30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	3308      	adds	r3, #8
 800db3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800db3e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800db42:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db44:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800db46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800db4a:	e841 2300 	strex	r3, r2, [r1]
 800db4e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800db50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800db52:	2b00      	cmp	r3, #0
 800db54:	d1e1      	bne.n	800db1a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	3308      	adds	r3, #8
 800db5c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800db60:	e853 3f00 	ldrex	r3, [r3]
 800db64:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800db66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800db68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800db6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	3308      	adds	r3, #8
 800db76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800db7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800db7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db7e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800db80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800db82:	e841 2300 	strex	r3, r2, [r1]
 800db86:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800db88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d1e3      	bne.n	800db56 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	2220      	movs	r2, #32
 800db92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2200      	movs	r2, #0
 800db9a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dba2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dba4:	e853 3f00 	ldrex	r3, [r3]
 800dba8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800dbaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dbac:	f023 0310 	bic.w	r3, r3, #16
 800dbb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	461a      	mov	r2, r3
 800dbba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dbbe:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dbc0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbc2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800dbc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dbc6:	e841 2300 	strex	r3, r2, [r1]
 800dbca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800dbcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d1e4      	bne.n	800db9c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f7f7 fb6b 	bl	80052b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	2202      	movs	r2, #2
 800dbe2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dbf0:	b29b      	uxth	r3, r3
 800dbf2:	1ad3      	subs	r3, r2, r3
 800dbf4:	b29b      	uxth	r3, r3
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f000 f931 	bl	800de60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dbfe:	e0fd      	b.n	800ddfc <HAL_UART_IRQHandler+0x760>
 800dc00:	40020010 	.word	0x40020010
 800dc04:	40020028 	.word	0x40020028
 800dc08:	40020040 	.word	0x40020040
 800dc0c:	40020058 	.word	0x40020058
 800dc10:	40020070 	.word	0x40020070
 800dc14:	40020088 	.word	0x40020088
 800dc18:	400200a0 	.word	0x400200a0
 800dc1c:	400200b8 	.word	0x400200b8
 800dc20:	40020410 	.word	0x40020410
 800dc24:	40020428 	.word	0x40020428
 800dc28:	40020440 	.word	0x40020440
 800dc2c:	40020458 	.word	0x40020458
 800dc30:	40020470 	.word	0x40020470
 800dc34:	40020488 	.word	0x40020488
 800dc38:	400204a0 	.word	0x400204a0
 800dc3c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dc4c:	b29b      	uxth	r3, r3
 800dc4e:	1ad3      	subs	r3, r2, r3
 800dc50:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dc5a:	b29b      	uxth	r3, r3
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	f000 80cf 	beq.w	800de00 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800dc62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	f000 80ca 	beq.w	800de00 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc74:	e853 3f00 	ldrex	r3, [r3]
 800dc78:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800dc7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dc80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	461a      	mov	r2, r3
 800dc8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dc8e:	647b      	str	r3, [r7, #68]	@ 0x44
 800dc90:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dc94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dc96:	e841 2300 	strex	r3, r2, [r1]
 800dc9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dc9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d1e4      	bne.n	800dc6c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	3308      	adds	r3, #8
 800dca8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcac:	e853 3f00 	ldrex	r3, [r3]
 800dcb0:	623b      	str	r3, [r7, #32]
   return(result);
 800dcb2:	6a3a      	ldr	r2, [r7, #32]
 800dcb4:	4b55      	ldr	r3, [pc, #340]	@ (800de0c <HAL_UART_IRQHandler+0x770>)
 800dcb6:	4013      	ands	r3, r2
 800dcb8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	3308      	adds	r3, #8
 800dcc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800dcc6:	633a      	str	r2, [r7, #48]	@ 0x30
 800dcc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dccc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dcce:	e841 2300 	strex	r3, r2, [r1]
 800dcd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dcd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d1e3      	bne.n	800dca2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2220      	movs	r2, #32
 800dcde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2200      	movs	r2, #0
 800dce6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2200      	movs	r2, #0
 800dcec:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcf4:	693b      	ldr	r3, [r7, #16]
 800dcf6:	e853 3f00 	ldrex	r3, [r3]
 800dcfa:	60fb      	str	r3, [r7, #12]
   return(result);
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	f023 0310 	bic.w	r3, r3, #16
 800dd02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	461a      	mov	r2, r3
 800dd0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800dd10:	61fb      	str	r3, [r7, #28]
 800dd12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd14:	69b9      	ldr	r1, [r7, #24]
 800dd16:	69fa      	ldr	r2, [r7, #28]
 800dd18:	e841 2300 	strex	r3, r2, [r1]
 800dd1c:	617b      	str	r3, [r7, #20]
   return(result);
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d1e4      	bne.n	800dcee <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2202      	movs	r2, #2
 800dd28:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dd2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800dd2e:	4619      	mov	r1, r3
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f000 f895 	bl	800de60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dd36:	e063      	b.n	800de00 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800dd38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dd3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d00e      	beq.n	800dd62 <HAL_UART_IRQHandler+0x6c6>
 800dd44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dd48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d008      	beq.n	800dd62 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800dd58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f001 fbba 	bl	800f4d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dd60:	e051      	b.n	800de06 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800dd62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dd66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d014      	beq.n	800dd98 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800dd6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dd72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d105      	bne.n	800dd86 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800dd7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dd7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d008      	beq.n	800dd98 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d03a      	beq.n	800de04 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	4798      	blx	r3
    }
    return;
 800dd96:	e035      	b.n	800de04 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dd98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dd9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d009      	beq.n	800ddb8 <HAL_UART_IRQHandler+0x71c>
 800dda4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dda8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d003      	beq.n	800ddb8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800ddb0:	6878      	ldr	r0, [r7, #4]
 800ddb2:	f001 fb64 	bl	800f47e <UART_EndTransmit_IT>
    return;
 800ddb6:	e026      	b.n	800de06 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ddb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ddbc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d009      	beq.n	800ddd8 <HAL_UART_IRQHandler+0x73c>
 800ddc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ddc8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d003      	beq.n	800ddd8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ddd0:	6878      	ldr	r0, [r7, #4]
 800ddd2:	f001 fb93 	bl	800f4fc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ddd6:	e016      	b.n	800de06 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ddd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dddc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d010      	beq.n	800de06 <HAL_UART_IRQHandler+0x76a>
 800dde4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	da0c      	bge.n	800de06 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f001 fb7b 	bl	800f4e8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ddf2:	e008      	b.n	800de06 <HAL_UART_IRQHandler+0x76a>
      return;
 800ddf4:	bf00      	nop
 800ddf6:	e006      	b.n	800de06 <HAL_UART_IRQHandler+0x76a>
    return;
 800ddf8:	bf00      	nop
 800ddfa:	e004      	b.n	800de06 <HAL_UART_IRQHandler+0x76a>
      return;
 800ddfc:	bf00      	nop
 800ddfe:	e002      	b.n	800de06 <HAL_UART_IRQHandler+0x76a>
      return;
 800de00:	bf00      	nop
 800de02:	e000      	b.n	800de06 <HAL_UART_IRQHandler+0x76a>
    return;
 800de04:	bf00      	nop
  }
}
 800de06:	37e8      	adds	r7, #232	@ 0xe8
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}
 800de0c:	effffffe 	.word	0xeffffffe

0800de10 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800de10:	b480      	push	{r7}
 800de12:	b083      	sub	sp, #12
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800de18:	bf00      	nop
 800de1a:	370c      	adds	r7, #12
 800de1c:	46bd      	mov	sp, r7
 800de1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de22:	4770      	bx	lr

0800de24 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800de24:	b480      	push	{r7}
 800de26:	b083      	sub	sp, #12
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800de2c:	bf00      	nop
 800de2e:	370c      	adds	r7, #12
 800de30:	46bd      	mov	sp, r7
 800de32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de36:	4770      	bx	lr

0800de38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800de38:	b480      	push	{r7}
 800de3a:	b083      	sub	sp, #12
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800de40:	bf00      	nop
 800de42:	370c      	adds	r7, #12
 800de44:	46bd      	mov	sp, r7
 800de46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4a:	4770      	bx	lr

0800de4c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800de4c:	b480      	push	{r7}
 800de4e:	b083      	sub	sp, #12
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800de54:	bf00      	nop
 800de56:	370c      	adds	r7, #12
 800de58:	46bd      	mov	sp, r7
 800de5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5e:	4770      	bx	lr

0800de60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800de60:	b480      	push	{r7}
 800de62:	b083      	sub	sp, #12
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
 800de68:	460b      	mov	r3, r1
 800de6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800de6c:	bf00      	nop
 800de6e:	370c      	adds	r7, #12
 800de70:	46bd      	mov	sp, r7
 800de72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de76:	4770      	bx	lr

0800de78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800de78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800de7c:	b092      	sub	sp, #72	@ 0x48
 800de7e:	af00      	add	r7, sp, #0
 800de80:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800de82:	2300      	movs	r3, #0
 800de84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800de88:	697b      	ldr	r3, [r7, #20]
 800de8a:	689a      	ldr	r2, [r3, #8]
 800de8c:	697b      	ldr	r3, [r7, #20]
 800de8e:	691b      	ldr	r3, [r3, #16]
 800de90:	431a      	orrs	r2, r3
 800de92:	697b      	ldr	r3, [r7, #20]
 800de94:	695b      	ldr	r3, [r3, #20]
 800de96:	431a      	orrs	r2, r3
 800de98:	697b      	ldr	r3, [r7, #20]
 800de9a:	69db      	ldr	r3, [r3, #28]
 800de9c:	4313      	orrs	r3, r2
 800de9e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dea0:	697b      	ldr	r3, [r7, #20]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	681a      	ldr	r2, [r3, #0]
 800dea6:	4bbe      	ldr	r3, [pc, #760]	@ (800e1a0 <UART_SetConfig+0x328>)
 800dea8:	4013      	ands	r3, r2
 800deaa:	697a      	ldr	r2, [r7, #20]
 800deac:	6812      	ldr	r2, [r2, #0]
 800deae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800deb0:	430b      	orrs	r3, r1
 800deb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800deb4:	697b      	ldr	r3, [r7, #20]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	685b      	ldr	r3, [r3, #4]
 800deba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	68da      	ldr	r2, [r3, #12]
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	430a      	orrs	r2, r1
 800dec8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	699b      	ldr	r3, [r3, #24]
 800dece:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	4ab3      	ldr	r2, [pc, #716]	@ (800e1a4 <UART_SetConfig+0x32c>)
 800ded6:	4293      	cmp	r3, r2
 800ded8:	d004      	beq.n	800dee4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	6a1b      	ldr	r3, [r3, #32]
 800dede:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dee0:	4313      	orrs	r3, r2
 800dee2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dee4:	697b      	ldr	r3, [r7, #20]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	689a      	ldr	r2, [r3, #8]
 800deea:	4baf      	ldr	r3, [pc, #700]	@ (800e1a8 <UART_SetConfig+0x330>)
 800deec:	4013      	ands	r3, r2
 800deee:	697a      	ldr	r2, [r7, #20]
 800def0:	6812      	ldr	r2, [r2, #0]
 800def2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800def4:	430b      	orrs	r3, r1
 800def6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800defe:	f023 010f 	bic.w	r1, r3, #15
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800df06:	697b      	ldr	r3, [r7, #20]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	430a      	orrs	r2, r1
 800df0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	4aa6      	ldr	r2, [pc, #664]	@ (800e1ac <UART_SetConfig+0x334>)
 800df14:	4293      	cmp	r3, r2
 800df16:	d177      	bne.n	800e008 <UART_SetConfig+0x190>
 800df18:	4ba5      	ldr	r3, [pc, #660]	@ (800e1b0 <UART_SetConfig+0x338>)
 800df1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800df20:	2b28      	cmp	r3, #40	@ 0x28
 800df22:	d86d      	bhi.n	800e000 <UART_SetConfig+0x188>
 800df24:	a201      	add	r2, pc, #4	@ (adr r2, 800df2c <UART_SetConfig+0xb4>)
 800df26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df2a:	bf00      	nop
 800df2c:	0800dfd1 	.word	0x0800dfd1
 800df30:	0800e001 	.word	0x0800e001
 800df34:	0800e001 	.word	0x0800e001
 800df38:	0800e001 	.word	0x0800e001
 800df3c:	0800e001 	.word	0x0800e001
 800df40:	0800e001 	.word	0x0800e001
 800df44:	0800e001 	.word	0x0800e001
 800df48:	0800e001 	.word	0x0800e001
 800df4c:	0800dfd9 	.word	0x0800dfd9
 800df50:	0800e001 	.word	0x0800e001
 800df54:	0800e001 	.word	0x0800e001
 800df58:	0800e001 	.word	0x0800e001
 800df5c:	0800e001 	.word	0x0800e001
 800df60:	0800e001 	.word	0x0800e001
 800df64:	0800e001 	.word	0x0800e001
 800df68:	0800e001 	.word	0x0800e001
 800df6c:	0800dfe1 	.word	0x0800dfe1
 800df70:	0800e001 	.word	0x0800e001
 800df74:	0800e001 	.word	0x0800e001
 800df78:	0800e001 	.word	0x0800e001
 800df7c:	0800e001 	.word	0x0800e001
 800df80:	0800e001 	.word	0x0800e001
 800df84:	0800e001 	.word	0x0800e001
 800df88:	0800e001 	.word	0x0800e001
 800df8c:	0800dfe9 	.word	0x0800dfe9
 800df90:	0800e001 	.word	0x0800e001
 800df94:	0800e001 	.word	0x0800e001
 800df98:	0800e001 	.word	0x0800e001
 800df9c:	0800e001 	.word	0x0800e001
 800dfa0:	0800e001 	.word	0x0800e001
 800dfa4:	0800e001 	.word	0x0800e001
 800dfa8:	0800e001 	.word	0x0800e001
 800dfac:	0800dff1 	.word	0x0800dff1
 800dfb0:	0800e001 	.word	0x0800e001
 800dfb4:	0800e001 	.word	0x0800e001
 800dfb8:	0800e001 	.word	0x0800e001
 800dfbc:	0800e001 	.word	0x0800e001
 800dfc0:	0800e001 	.word	0x0800e001
 800dfc4:	0800e001 	.word	0x0800e001
 800dfc8:	0800e001 	.word	0x0800e001
 800dfcc:	0800dff9 	.word	0x0800dff9
 800dfd0:	2301      	movs	r3, #1
 800dfd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfd6:	e326      	b.n	800e626 <UART_SetConfig+0x7ae>
 800dfd8:	2304      	movs	r3, #4
 800dfda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfde:	e322      	b.n	800e626 <UART_SetConfig+0x7ae>
 800dfe0:	2308      	movs	r3, #8
 800dfe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfe6:	e31e      	b.n	800e626 <UART_SetConfig+0x7ae>
 800dfe8:	2310      	movs	r3, #16
 800dfea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfee:	e31a      	b.n	800e626 <UART_SetConfig+0x7ae>
 800dff0:	2320      	movs	r3, #32
 800dff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dff6:	e316      	b.n	800e626 <UART_SetConfig+0x7ae>
 800dff8:	2340      	movs	r3, #64	@ 0x40
 800dffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dffe:	e312      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e000:	2380      	movs	r3, #128	@ 0x80
 800e002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e006:	e30e      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	4a69      	ldr	r2, [pc, #420]	@ (800e1b4 <UART_SetConfig+0x33c>)
 800e00e:	4293      	cmp	r3, r2
 800e010:	d130      	bne.n	800e074 <UART_SetConfig+0x1fc>
 800e012:	4b67      	ldr	r3, [pc, #412]	@ (800e1b0 <UART_SetConfig+0x338>)
 800e014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e016:	f003 0307 	and.w	r3, r3, #7
 800e01a:	2b05      	cmp	r3, #5
 800e01c:	d826      	bhi.n	800e06c <UART_SetConfig+0x1f4>
 800e01e:	a201      	add	r2, pc, #4	@ (adr r2, 800e024 <UART_SetConfig+0x1ac>)
 800e020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e024:	0800e03d 	.word	0x0800e03d
 800e028:	0800e045 	.word	0x0800e045
 800e02c:	0800e04d 	.word	0x0800e04d
 800e030:	0800e055 	.word	0x0800e055
 800e034:	0800e05d 	.word	0x0800e05d
 800e038:	0800e065 	.word	0x0800e065
 800e03c:	2300      	movs	r3, #0
 800e03e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e042:	e2f0      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e044:	2304      	movs	r3, #4
 800e046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e04a:	e2ec      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e04c:	2308      	movs	r3, #8
 800e04e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e052:	e2e8      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e054:	2310      	movs	r3, #16
 800e056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e05a:	e2e4      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e05c:	2320      	movs	r3, #32
 800e05e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e062:	e2e0      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e064:	2340      	movs	r3, #64	@ 0x40
 800e066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e06a:	e2dc      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e06c:	2380      	movs	r3, #128	@ 0x80
 800e06e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e072:	e2d8      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e074:	697b      	ldr	r3, [r7, #20]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	4a4f      	ldr	r2, [pc, #316]	@ (800e1b8 <UART_SetConfig+0x340>)
 800e07a:	4293      	cmp	r3, r2
 800e07c:	d130      	bne.n	800e0e0 <UART_SetConfig+0x268>
 800e07e:	4b4c      	ldr	r3, [pc, #304]	@ (800e1b0 <UART_SetConfig+0x338>)
 800e080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e082:	f003 0307 	and.w	r3, r3, #7
 800e086:	2b05      	cmp	r3, #5
 800e088:	d826      	bhi.n	800e0d8 <UART_SetConfig+0x260>
 800e08a:	a201      	add	r2, pc, #4	@ (adr r2, 800e090 <UART_SetConfig+0x218>)
 800e08c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e090:	0800e0a9 	.word	0x0800e0a9
 800e094:	0800e0b1 	.word	0x0800e0b1
 800e098:	0800e0b9 	.word	0x0800e0b9
 800e09c:	0800e0c1 	.word	0x0800e0c1
 800e0a0:	0800e0c9 	.word	0x0800e0c9
 800e0a4:	0800e0d1 	.word	0x0800e0d1
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0ae:	e2ba      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e0b0:	2304      	movs	r3, #4
 800e0b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0b6:	e2b6      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e0b8:	2308      	movs	r3, #8
 800e0ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0be:	e2b2      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e0c0:	2310      	movs	r3, #16
 800e0c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0c6:	e2ae      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e0c8:	2320      	movs	r3, #32
 800e0ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0ce:	e2aa      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e0d0:	2340      	movs	r3, #64	@ 0x40
 800e0d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0d6:	e2a6      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e0d8:	2380      	movs	r3, #128	@ 0x80
 800e0da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0de:	e2a2      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e0e0:	697b      	ldr	r3, [r7, #20]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	4a35      	ldr	r2, [pc, #212]	@ (800e1bc <UART_SetConfig+0x344>)
 800e0e6:	4293      	cmp	r3, r2
 800e0e8:	d130      	bne.n	800e14c <UART_SetConfig+0x2d4>
 800e0ea:	4b31      	ldr	r3, [pc, #196]	@ (800e1b0 <UART_SetConfig+0x338>)
 800e0ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e0ee:	f003 0307 	and.w	r3, r3, #7
 800e0f2:	2b05      	cmp	r3, #5
 800e0f4:	d826      	bhi.n	800e144 <UART_SetConfig+0x2cc>
 800e0f6:	a201      	add	r2, pc, #4	@ (adr r2, 800e0fc <UART_SetConfig+0x284>)
 800e0f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0fc:	0800e115 	.word	0x0800e115
 800e100:	0800e11d 	.word	0x0800e11d
 800e104:	0800e125 	.word	0x0800e125
 800e108:	0800e12d 	.word	0x0800e12d
 800e10c:	0800e135 	.word	0x0800e135
 800e110:	0800e13d 	.word	0x0800e13d
 800e114:	2300      	movs	r3, #0
 800e116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e11a:	e284      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e11c:	2304      	movs	r3, #4
 800e11e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e122:	e280      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e124:	2308      	movs	r3, #8
 800e126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e12a:	e27c      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e12c:	2310      	movs	r3, #16
 800e12e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e132:	e278      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e134:	2320      	movs	r3, #32
 800e136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e13a:	e274      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e13c:	2340      	movs	r3, #64	@ 0x40
 800e13e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e142:	e270      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e144:	2380      	movs	r3, #128	@ 0x80
 800e146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e14a:	e26c      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	4a1b      	ldr	r2, [pc, #108]	@ (800e1c0 <UART_SetConfig+0x348>)
 800e152:	4293      	cmp	r3, r2
 800e154:	d142      	bne.n	800e1dc <UART_SetConfig+0x364>
 800e156:	4b16      	ldr	r3, [pc, #88]	@ (800e1b0 <UART_SetConfig+0x338>)
 800e158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e15a:	f003 0307 	and.w	r3, r3, #7
 800e15e:	2b05      	cmp	r3, #5
 800e160:	d838      	bhi.n	800e1d4 <UART_SetConfig+0x35c>
 800e162:	a201      	add	r2, pc, #4	@ (adr r2, 800e168 <UART_SetConfig+0x2f0>)
 800e164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e168:	0800e181 	.word	0x0800e181
 800e16c:	0800e189 	.word	0x0800e189
 800e170:	0800e191 	.word	0x0800e191
 800e174:	0800e199 	.word	0x0800e199
 800e178:	0800e1c5 	.word	0x0800e1c5
 800e17c:	0800e1cd 	.word	0x0800e1cd
 800e180:	2300      	movs	r3, #0
 800e182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e186:	e24e      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e188:	2304      	movs	r3, #4
 800e18a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e18e:	e24a      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e190:	2308      	movs	r3, #8
 800e192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e196:	e246      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e198:	2310      	movs	r3, #16
 800e19a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e19e:	e242      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e1a0:	cfff69f3 	.word	0xcfff69f3
 800e1a4:	58000c00 	.word	0x58000c00
 800e1a8:	11fff4ff 	.word	0x11fff4ff
 800e1ac:	40011000 	.word	0x40011000
 800e1b0:	58024400 	.word	0x58024400
 800e1b4:	40004400 	.word	0x40004400
 800e1b8:	40004800 	.word	0x40004800
 800e1bc:	40004c00 	.word	0x40004c00
 800e1c0:	40005000 	.word	0x40005000
 800e1c4:	2320      	movs	r3, #32
 800e1c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e1ca:	e22c      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e1cc:	2340      	movs	r3, #64	@ 0x40
 800e1ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e1d2:	e228      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e1d4:	2380      	movs	r3, #128	@ 0x80
 800e1d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e1da:	e224      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e1dc:	697b      	ldr	r3, [r7, #20]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	4ab1      	ldr	r2, [pc, #708]	@ (800e4a8 <UART_SetConfig+0x630>)
 800e1e2:	4293      	cmp	r3, r2
 800e1e4:	d176      	bne.n	800e2d4 <UART_SetConfig+0x45c>
 800e1e6:	4bb1      	ldr	r3, [pc, #708]	@ (800e4ac <UART_SetConfig+0x634>)
 800e1e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e1ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e1ee:	2b28      	cmp	r3, #40	@ 0x28
 800e1f0:	d86c      	bhi.n	800e2cc <UART_SetConfig+0x454>
 800e1f2:	a201      	add	r2, pc, #4	@ (adr r2, 800e1f8 <UART_SetConfig+0x380>)
 800e1f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1f8:	0800e29d 	.word	0x0800e29d
 800e1fc:	0800e2cd 	.word	0x0800e2cd
 800e200:	0800e2cd 	.word	0x0800e2cd
 800e204:	0800e2cd 	.word	0x0800e2cd
 800e208:	0800e2cd 	.word	0x0800e2cd
 800e20c:	0800e2cd 	.word	0x0800e2cd
 800e210:	0800e2cd 	.word	0x0800e2cd
 800e214:	0800e2cd 	.word	0x0800e2cd
 800e218:	0800e2a5 	.word	0x0800e2a5
 800e21c:	0800e2cd 	.word	0x0800e2cd
 800e220:	0800e2cd 	.word	0x0800e2cd
 800e224:	0800e2cd 	.word	0x0800e2cd
 800e228:	0800e2cd 	.word	0x0800e2cd
 800e22c:	0800e2cd 	.word	0x0800e2cd
 800e230:	0800e2cd 	.word	0x0800e2cd
 800e234:	0800e2cd 	.word	0x0800e2cd
 800e238:	0800e2ad 	.word	0x0800e2ad
 800e23c:	0800e2cd 	.word	0x0800e2cd
 800e240:	0800e2cd 	.word	0x0800e2cd
 800e244:	0800e2cd 	.word	0x0800e2cd
 800e248:	0800e2cd 	.word	0x0800e2cd
 800e24c:	0800e2cd 	.word	0x0800e2cd
 800e250:	0800e2cd 	.word	0x0800e2cd
 800e254:	0800e2cd 	.word	0x0800e2cd
 800e258:	0800e2b5 	.word	0x0800e2b5
 800e25c:	0800e2cd 	.word	0x0800e2cd
 800e260:	0800e2cd 	.word	0x0800e2cd
 800e264:	0800e2cd 	.word	0x0800e2cd
 800e268:	0800e2cd 	.word	0x0800e2cd
 800e26c:	0800e2cd 	.word	0x0800e2cd
 800e270:	0800e2cd 	.word	0x0800e2cd
 800e274:	0800e2cd 	.word	0x0800e2cd
 800e278:	0800e2bd 	.word	0x0800e2bd
 800e27c:	0800e2cd 	.word	0x0800e2cd
 800e280:	0800e2cd 	.word	0x0800e2cd
 800e284:	0800e2cd 	.word	0x0800e2cd
 800e288:	0800e2cd 	.word	0x0800e2cd
 800e28c:	0800e2cd 	.word	0x0800e2cd
 800e290:	0800e2cd 	.word	0x0800e2cd
 800e294:	0800e2cd 	.word	0x0800e2cd
 800e298:	0800e2c5 	.word	0x0800e2c5
 800e29c:	2301      	movs	r3, #1
 800e29e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e2a2:	e1c0      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e2a4:	2304      	movs	r3, #4
 800e2a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e2aa:	e1bc      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e2ac:	2308      	movs	r3, #8
 800e2ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e2b2:	e1b8      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e2b4:	2310      	movs	r3, #16
 800e2b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e2ba:	e1b4      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e2bc:	2320      	movs	r3, #32
 800e2be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e2c2:	e1b0      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e2c4:	2340      	movs	r3, #64	@ 0x40
 800e2c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e2ca:	e1ac      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e2cc:	2380      	movs	r3, #128	@ 0x80
 800e2ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e2d2:	e1a8      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e2d4:	697b      	ldr	r3, [r7, #20]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	4a75      	ldr	r2, [pc, #468]	@ (800e4b0 <UART_SetConfig+0x638>)
 800e2da:	4293      	cmp	r3, r2
 800e2dc:	d130      	bne.n	800e340 <UART_SetConfig+0x4c8>
 800e2de:	4b73      	ldr	r3, [pc, #460]	@ (800e4ac <UART_SetConfig+0x634>)
 800e2e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e2e2:	f003 0307 	and.w	r3, r3, #7
 800e2e6:	2b05      	cmp	r3, #5
 800e2e8:	d826      	bhi.n	800e338 <UART_SetConfig+0x4c0>
 800e2ea:	a201      	add	r2, pc, #4	@ (adr r2, 800e2f0 <UART_SetConfig+0x478>)
 800e2ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2f0:	0800e309 	.word	0x0800e309
 800e2f4:	0800e311 	.word	0x0800e311
 800e2f8:	0800e319 	.word	0x0800e319
 800e2fc:	0800e321 	.word	0x0800e321
 800e300:	0800e329 	.word	0x0800e329
 800e304:	0800e331 	.word	0x0800e331
 800e308:	2300      	movs	r3, #0
 800e30a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e30e:	e18a      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e310:	2304      	movs	r3, #4
 800e312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e316:	e186      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e318:	2308      	movs	r3, #8
 800e31a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e31e:	e182      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e320:	2310      	movs	r3, #16
 800e322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e326:	e17e      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e328:	2320      	movs	r3, #32
 800e32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e32e:	e17a      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e330:	2340      	movs	r3, #64	@ 0x40
 800e332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e336:	e176      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e338:	2380      	movs	r3, #128	@ 0x80
 800e33a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e33e:	e172      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e340:	697b      	ldr	r3, [r7, #20]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	4a5b      	ldr	r2, [pc, #364]	@ (800e4b4 <UART_SetConfig+0x63c>)
 800e346:	4293      	cmp	r3, r2
 800e348:	d130      	bne.n	800e3ac <UART_SetConfig+0x534>
 800e34a:	4b58      	ldr	r3, [pc, #352]	@ (800e4ac <UART_SetConfig+0x634>)
 800e34c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e34e:	f003 0307 	and.w	r3, r3, #7
 800e352:	2b05      	cmp	r3, #5
 800e354:	d826      	bhi.n	800e3a4 <UART_SetConfig+0x52c>
 800e356:	a201      	add	r2, pc, #4	@ (adr r2, 800e35c <UART_SetConfig+0x4e4>)
 800e358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e35c:	0800e375 	.word	0x0800e375
 800e360:	0800e37d 	.word	0x0800e37d
 800e364:	0800e385 	.word	0x0800e385
 800e368:	0800e38d 	.word	0x0800e38d
 800e36c:	0800e395 	.word	0x0800e395
 800e370:	0800e39d 	.word	0x0800e39d
 800e374:	2300      	movs	r3, #0
 800e376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e37a:	e154      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e37c:	2304      	movs	r3, #4
 800e37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e382:	e150      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e384:	2308      	movs	r3, #8
 800e386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e38a:	e14c      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e38c:	2310      	movs	r3, #16
 800e38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e392:	e148      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e394:	2320      	movs	r3, #32
 800e396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e39a:	e144      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e39c:	2340      	movs	r3, #64	@ 0x40
 800e39e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3a2:	e140      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e3a4:	2380      	movs	r3, #128	@ 0x80
 800e3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3aa:	e13c      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e3ac:	697b      	ldr	r3, [r7, #20]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	4a41      	ldr	r2, [pc, #260]	@ (800e4b8 <UART_SetConfig+0x640>)
 800e3b2:	4293      	cmp	r3, r2
 800e3b4:	f040 8082 	bne.w	800e4bc <UART_SetConfig+0x644>
 800e3b8:	4b3c      	ldr	r3, [pc, #240]	@ (800e4ac <UART_SetConfig+0x634>)
 800e3ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e3bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e3c0:	2b28      	cmp	r3, #40	@ 0x28
 800e3c2:	d86d      	bhi.n	800e4a0 <UART_SetConfig+0x628>
 800e3c4:	a201      	add	r2, pc, #4	@ (adr r2, 800e3cc <UART_SetConfig+0x554>)
 800e3c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3ca:	bf00      	nop
 800e3cc:	0800e471 	.word	0x0800e471
 800e3d0:	0800e4a1 	.word	0x0800e4a1
 800e3d4:	0800e4a1 	.word	0x0800e4a1
 800e3d8:	0800e4a1 	.word	0x0800e4a1
 800e3dc:	0800e4a1 	.word	0x0800e4a1
 800e3e0:	0800e4a1 	.word	0x0800e4a1
 800e3e4:	0800e4a1 	.word	0x0800e4a1
 800e3e8:	0800e4a1 	.word	0x0800e4a1
 800e3ec:	0800e479 	.word	0x0800e479
 800e3f0:	0800e4a1 	.word	0x0800e4a1
 800e3f4:	0800e4a1 	.word	0x0800e4a1
 800e3f8:	0800e4a1 	.word	0x0800e4a1
 800e3fc:	0800e4a1 	.word	0x0800e4a1
 800e400:	0800e4a1 	.word	0x0800e4a1
 800e404:	0800e4a1 	.word	0x0800e4a1
 800e408:	0800e4a1 	.word	0x0800e4a1
 800e40c:	0800e481 	.word	0x0800e481
 800e410:	0800e4a1 	.word	0x0800e4a1
 800e414:	0800e4a1 	.word	0x0800e4a1
 800e418:	0800e4a1 	.word	0x0800e4a1
 800e41c:	0800e4a1 	.word	0x0800e4a1
 800e420:	0800e4a1 	.word	0x0800e4a1
 800e424:	0800e4a1 	.word	0x0800e4a1
 800e428:	0800e4a1 	.word	0x0800e4a1
 800e42c:	0800e489 	.word	0x0800e489
 800e430:	0800e4a1 	.word	0x0800e4a1
 800e434:	0800e4a1 	.word	0x0800e4a1
 800e438:	0800e4a1 	.word	0x0800e4a1
 800e43c:	0800e4a1 	.word	0x0800e4a1
 800e440:	0800e4a1 	.word	0x0800e4a1
 800e444:	0800e4a1 	.word	0x0800e4a1
 800e448:	0800e4a1 	.word	0x0800e4a1
 800e44c:	0800e491 	.word	0x0800e491
 800e450:	0800e4a1 	.word	0x0800e4a1
 800e454:	0800e4a1 	.word	0x0800e4a1
 800e458:	0800e4a1 	.word	0x0800e4a1
 800e45c:	0800e4a1 	.word	0x0800e4a1
 800e460:	0800e4a1 	.word	0x0800e4a1
 800e464:	0800e4a1 	.word	0x0800e4a1
 800e468:	0800e4a1 	.word	0x0800e4a1
 800e46c:	0800e499 	.word	0x0800e499
 800e470:	2301      	movs	r3, #1
 800e472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e476:	e0d6      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e478:	2304      	movs	r3, #4
 800e47a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e47e:	e0d2      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e480:	2308      	movs	r3, #8
 800e482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e486:	e0ce      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e488:	2310      	movs	r3, #16
 800e48a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e48e:	e0ca      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e490:	2320      	movs	r3, #32
 800e492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e496:	e0c6      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e498:	2340      	movs	r3, #64	@ 0x40
 800e49a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e49e:	e0c2      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e4a0:	2380      	movs	r3, #128	@ 0x80
 800e4a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e4a6:	e0be      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e4a8:	40011400 	.word	0x40011400
 800e4ac:	58024400 	.word	0x58024400
 800e4b0:	40007800 	.word	0x40007800
 800e4b4:	40007c00 	.word	0x40007c00
 800e4b8:	40011800 	.word	0x40011800
 800e4bc:	697b      	ldr	r3, [r7, #20]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	4aad      	ldr	r2, [pc, #692]	@ (800e778 <UART_SetConfig+0x900>)
 800e4c2:	4293      	cmp	r3, r2
 800e4c4:	d176      	bne.n	800e5b4 <UART_SetConfig+0x73c>
 800e4c6:	4bad      	ldr	r3, [pc, #692]	@ (800e77c <UART_SetConfig+0x904>)
 800e4c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e4ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e4ce:	2b28      	cmp	r3, #40	@ 0x28
 800e4d0:	d86c      	bhi.n	800e5ac <UART_SetConfig+0x734>
 800e4d2:	a201      	add	r2, pc, #4	@ (adr r2, 800e4d8 <UART_SetConfig+0x660>)
 800e4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4d8:	0800e57d 	.word	0x0800e57d
 800e4dc:	0800e5ad 	.word	0x0800e5ad
 800e4e0:	0800e5ad 	.word	0x0800e5ad
 800e4e4:	0800e5ad 	.word	0x0800e5ad
 800e4e8:	0800e5ad 	.word	0x0800e5ad
 800e4ec:	0800e5ad 	.word	0x0800e5ad
 800e4f0:	0800e5ad 	.word	0x0800e5ad
 800e4f4:	0800e5ad 	.word	0x0800e5ad
 800e4f8:	0800e585 	.word	0x0800e585
 800e4fc:	0800e5ad 	.word	0x0800e5ad
 800e500:	0800e5ad 	.word	0x0800e5ad
 800e504:	0800e5ad 	.word	0x0800e5ad
 800e508:	0800e5ad 	.word	0x0800e5ad
 800e50c:	0800e5ad 	.word	0x0800e5ad
 800e510:	0800e5ad 	.word	0x0800e5ad
 800e514:	0800e5ad 	.word	0x0800e5ad
 800e518:	0800e58d 	.word	0x0800e58d
 800e51c:	0800e5ad 	.word	0x0800e5ad
 800e520:	0800e5ad 	.word	0x0800e5ad
 800e524:	0800e5ad 	.word	0x0800e5ad
 800e528:	0800e5ad 	.word	0x0800e5ad
 800e52c:	0800e5ad 	.word	0x0800e5ad
 800e530:	0800e5ad 	.word	0x0800e5ad
 800e534:	0800e5ad 	.word	0x0800e5ad
 800e538:	0800e595 	.word	0x0800e595
 800e53c:	0800e5ad 	.word	0x0800e5ad
 800e540:	0800e5ad 	.word	0x0800e5ad
 800e544:	0800e5ad 	.word	0x0800e5ad
 800e548:	0800e5ad 	.word	0x0800e5ad
 800e54c:	0800e5ad 	.word	0x0800e5ad
 800e550:	0800e5ad 	.word	0x0800e5ad
 800e554:	0800e5ad 	.word	0x0800e5ad
 800e558:	0800e59d 	.word	0x0800e59d
 800e55c:	0800e5ad 	.word	0x0800e5ad
 800e560:	0800e5ad 	.word	0x0800e5ad
 800e564:	0800e5ad 	.word	0x0800e5ad
 800e568:	0800e5ad 	.word	0x0800e5ad
 800e56c:	0800e5ad 	.word	0x0800e5ad
 800e570:	0800e5ad 	.word	0x0800e5ad
 800e574:	0800e5ad 	.word	0x0800e5ad
 800e578:	0800e5a5 	.word	0x0800e5a5
 800e57c:	2301      	movs	r3, #1
 800e57e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e582:	e050      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e584:	2304      	movs	r3, #4
 800e586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e58a:	e04c      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e58c:	2308      	movs	r3, #8
 800e58e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e592:	e048      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e594:	2310      	movs	r3, #16
 800e596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e59a:	e044      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e59c:	2320      	movs	r3, #32
 800e59e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e5a2:	e040      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e5a4:	2340      	movs	r3, #64	@ 0x40
 800e5a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e5aa:	e03c      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e5ac:	2380      	movs	r3, #128	@ 0x80
 800e5ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e5b2:	e038      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e5b4:	697b      	ldr	r3, [r7, #20]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	4a71      	ldr	r2, [pc, #452]	@ (800e780 <UART_SetConfig+0x908>)
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	d130      	bne.n	800e620 <UART_SetConfig+0x7a8>
 800e5be:	4b6f      	ldr	r3, [pc, #444]	@ (800e77c <UART_SetConfig+0x904>)
 800e5c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e5c2:	f003 0307 	and.w	r3, r3, #7
 800e5c6:	2b05      	cmp	r3, #5
 800e5c8:	d826      	bhi.n	800e618 <UART_SetConfig+0x7a0>
 800e5ca:	a201      	add	r2, pc, #4	@ (adr r2, 800e5d0 <UART_SetConfig+0x758>)
 800e5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5d0:	0800e5e9 	.word	0x0800e5e9
 800e5d4:	0800e5f1 	.word	0x0800e5f1
 800e5d8:	0800e5f9 	.word	0x0800e5f9
 800e5dc:	0800e601 	.word	0x0800e601
 800e5e0:	0800e609 	.word	0x0800e609
 800e5e4:	0800e611 	.word	0x0800e611
 800e5e8:	2302      	movs	r3, #2
 800e5ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e5ee:	e01a      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e5f0:	2304      	movs	r3, #4
 800e5f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e5f6:	e016      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e5f8:	2308      	movs	r3, #8
 800e5fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e5fe:	e012      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e600:	2310      	movs	r3, #16
 800e602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e606:	e00e      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e608:	2320      	movs	r3, #32
 800e60a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e60e:	e00a      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e610:	2340      	movs	r3, #64	@ 0x40
 800e612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e616:	e006      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e618:	2380      	movs	r3, #128	@ 0x80
 800e61a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e61e:	e002      	b.n	800e626 <UART_SetConfig+0x7ae>
 800e620:	2380      	movs	r3, #128	@ 0x80
 800e622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e626:	697b      	ldr	r3, [r7, #20]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	4a55      	ldr	r2, [pc, #340]	@ (800e780 <UART_SetConfig+0x908>)
 800e62c:	4293      	cmp	r3, r2
 800e62e:	f040 80f8 	bne.w	800e822 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e632:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e636:	2b20      	cmp	r3, #32
 800e638:	dc46      	bgt.n	800e6c8 <UART_SetConfig+0x850>
 800e63a:	2b02      	cmp	r3, #2
 800e63c:	db75      	blt.n	800e72a <UART_SetConfig+0x8b2>
 800e63e:	3b02      	subs	r3, #2
 800e640:	2b1e      	cmp	r3, #30
 800e642:	d872      	bhi.n	800e72a <UART_SetConfig+0x8b2>
 800e644:	a201      	add	r2, pc, #4	@ (adr r2, 800e64c <UART_SetConfig+0x7d4>)
 800e646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e64a:	bf00      	nop
 800e64c:	0800e6cf 	.word	0x0800e6cf
 800e650:	0800e72b 	.word	0x0800e72b
 800e654:	0800e6d7 	.word	0x0800e6d7
 800e658:	0800e72b 	.word	0x0800e72b
 800e65c:	0800e72b 	.word	0x0800e72b
 800e660:	0800e72b 	.word	0x0800e72b
 800e664:	0800e6e7 	.word	0x0800e6e7
 800e668:	0800e72b 	.word	0x0800e72b
 800e66c:	0800e72b 	.word	0x0800e72b
 800e670:	0800e72b 	.word	0x0800e72b
 800e674:	0800e72b 	.word	0x0800e72b
 800e678:	0800e72b 	.word	0x0800e72b
 800e67c:	0800e72b 	.word	0x0800e72b
 800e680:	0800e72b 	.word	0x0800e72b
 800e684:	0800e6f7 	.word	0x0800e6f7
 800e688:	0800e72b 	.word	0x0800e72b
 800e68c:	0800e72b 	.word	0x0800e72b
 800e690:	0800e72b 	.word	0x0800e72b
 800e694:	0800e72b 	.word	0x0800e72b
 800e698:	0800e72b 	.word	0x0800e72b
 800e69c:	0800e72b 	.word	0x0800e72b
 800e6a0:	0800e72b 	.word	0x0800e72b
 800e6a4:	0800e72b 	.word	0x0800e72b
 800e6a8:	0800e72b 	.word	0x0800e72b
 800e6ac:	0800e72b 	.word	0x0800e72b
 800e6b0:	0800e72b 	.word	0x0800e72b
 800e6b4:	0800e72b 	.word	0x0800e72b
 800e6b8:	0800e72b 	.word	0x0800e72b
 800e6bc:	0800e72b 	.word	0x0800e72b
 800e6c0:	0800e72b 	.word	0x0800e72b
 800e6c4:	0800e71d 	.word	0x0800e71d
 800e6c8:	2b40      	cmp	r3, #64	@ 0x40
 800e6ca:	d02a      	beq.n	800e722 <UART_SetConfig+0x8aa>
 800e6cc:	e02d      	b.n	800e72a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e6ce:	f7fb feef 	bl	800a4b0 <HAL_RCCEx_GetD3PCLK1Freq>
 800e6d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e6d4:	e02f      	b.n	800e736 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e6d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f7fb fefe 	bl	800a4dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e6e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e6e4:	e027      	b.n	800e736 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e6e6:	f107 0318 	add.w	r3, r7, #24
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f7fc f84a 	bl	800a784 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e6f0:	69fb      	ldr	r3, [r7, #28]
 800e6f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e6f4:	e01f      	b.n	800e736 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e6f6:	4b21      	ldr	r3, [pc, #132]	@ (800e77c <UART_SetConfig+0x904>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	f003 0320 	and.w	r3, r3, #32
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d009      	beq.n	800e716 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e702:	4b1e      	ldr	r3, [pc, #120]	@ (800e77c <UART_SetConfig+0x904>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	08db      	lsrs	r3, r3, #3
 800e708:	f003 0303 	and.w	r3, r3, #3
 800e70c:	4a1d      	ldr	r2, [pc, #116]	@ (800e784 <UART_SetConfig+0x90c>)
 800e70e:	fa22 f303 	lsr.w	r3, r2, r3
 800e712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e714:	e00f      	b.n	800e736 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e716:	4b1b      	ldr	r3, [pc, #108]	@ (800e784 <UART_SetConfig+0x90c>)
 800e718:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e71a:	e00c      	b.n	800e736 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e71c:	4b1a      	ldr	r3, [pc, #104]	@ (800e788 <UART_SetConfig+0x910>)
 800e71e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e720:	e009      	b.n	800e736 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e722:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e728:	e005      	b.n	800e736 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e72a:	2300      	movs	r3, #0
 800e72c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e72e:	2301      	movs	r3, #1
 800e730:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e734:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e738:	2b00      	cmp	r3, #0
 800e73a:	f000 81ee 	beq.w	800eb1a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e73e:	697b      	ldr	r3, [r7, #20]
 800e740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e742:	4a12      	ldr	r2, [pc, #72]	@ (800e78c <UART_SetConfig+0x914>)
 800e744:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e748:	461a      	mov	r2, r3
 800e74a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e74c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e750:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e752:	697b      	ldr	r3, [r7, #20]
 800e754:	685a      	ldr	r2, [r3, #4]
 800e756:	4613      	mov	r3, r2
 800e758:	005b      	lsls	r3, r3, #1
 800e75a:	4413      	add	r3, r2
 800e75c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e75e:	429a      	cmp	r2, r3
 800e760:	d305      	bcc.n	800e76e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	685b      	ldr	r3, [r3, #4]
 800e766:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e768:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e76a:	429a      	cmp	r2, r3
 800e76c:	d910      	bls.n	800e790 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800e76e:	2301      	movs	r3, #1
 800e770:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e774:	e1d1      	b.n	800eb1a <UART_SetConfig+0xca2>
 800e776:	bf00      	nop
 800e778:	40011c00 	.word	0x40011c00
 800e77c:	58024400 	.word	0x58024400
 800e780:	58000c00 	.word	0x58000c00
 800e784:	03d09000 	.word	0x03d09000
 800e788:	003d0900 	.word	0x003d0900
 800e78c:	08014508 	.word	0x08014508
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e792:	2200      	movs	r2, #0
 800e794:	60bb      	str	r3, [r7, #8]
 800e796:	60fa      	str	r2, [r7, #12]
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e79c:	4ac0      	ldr	r2, [pc, #768]	@ (800eaa0 <UART_SetConfig+0xc28>)
 800e79e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e7a2:	b29b      	uxth	r3, r3
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	603b      	str	r3, [r7, #0]
 800e7a8:	607a      	str	r2, [r7, #4]
 800e7aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e7b2:	f7f1 fded 	bl	8000390 <__aeabi_uldivmod>
 800e7b6:	4602      	mov	r2, r0
 800e7b8:	460b      	mov	r3, r1
 800e7ba:	4610      	mov	r0, r2
 800e7bc:	4619      	mov	r1, r3
 800e7be:	f04f 0200 	mov.w	r2, #0
 800e7c2:	f04f 0300 	mov.w	r3, #0
 800e7c6:	020b      	lsls	r3, r1, #8
 800e7c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e7cc:	0202      	lsls	r2, r0, #8
 800e7ce:	6979      	ldr	r1, [r7, #20]
 800e7d0:	6849      	ldr	r1, [r1, #4]
 800e7d2:	0849      	lsrs	r1, r1, #1
 800e7d4:	2000      	movs	r0, #0
 800e7d6:	460c      	mov	r4, r1
 800e7d8:	4605      	mov	r5, r0
 800e7da:	eb12 0804 	adds.w	r8, r2, r4
 800e7de:	eb43 0905 	adc.w	r9, r3, r5
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	685b      	ldr	r3, [r3, #4]
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	469a      	mov	sl, r3
 800e7ea:	4693      	mov	fp, r2
 800e7ec:	4652      	mov	r2, sl
 800e7ee:	465b      	mov	r3, fp
 800e7f0:	4640      	mov	r0, r8
 800e7f2:	4649      	mov	r1, r9
 800e7f4:	f7f1 fdcc 	bl	8000390 <__aeabi_uldivmod>
 800e7f8:	4602      	mov	r2, r0
 800e7fa:	460b      	mov	r3, r1
 800e7fc:	4613      	mov	r3, r2
 800e7fe:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e802:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e806:	d308      	bcc.n	800e81a <UART_SetConfig+0x9a2>
 800e808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e80a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e80e:	d204      	bcs.n	800e81a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e816:	60da      	str	r2, [r3, #12]
 800e818:	e17f      	b.n	800eb1a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e81a:	2301      	movs	r3, #1
 800e81c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e820:	e17b      	b.n	800eb1a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	69db      	ldr	r3, [r3, #28]
 800e826:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e82a:	f040 80bd 	bne.w	800e9a8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e82e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e832:	2b20      	cmp	r3, #32
 800e834:	dc48      	bgt.n	800e8c8 <UART_SetConfig+0xa50>
 800e836:	2b00      	cmp	r3, #0
 800e838:	db7b      	blt.n	800e932 <UART_SetConfig+0xaba>
 800e83a:	2b20      	cmp	r3, #32
 800e83c:	d879      	bhi.n	800e932 <UART_SetConfig+0xaba>
 800e83e:	a201      	add	r2, pc, #4	@ (adr r2, 800e844 <UART_SetConfig+0x9cc>)
 800e840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e844:	0800e8cf 	.word	0x0800e8cf
 800e848:	0800e8d7 	.word	0x0800e8d7
 800e84c:	0800e933 	.word	0x0800e933
 800e850:	0800e933 	.word	0x0800e933
 800e854:	0800e8df 	.word	0x0800e8df
 800e858:	0800e933 	.word	0x0800e933
 800e85c:	0800e933 	.word	0x0800e933
 800e860:	0800e933 	.word	0x0800e933
 800e864:	0800e8ef 	.word	0x0800e8ef
 800e868:	0800e933 	.word	0x0800e933
 800e86c:	0800e933 	.word	0x0800e933
 800e870:	0800e933 	.word	0x0800e933
 800e874:	0800e933 	.word	0x0800e933
 800e878:	0800e933 	.word	0x0800e933
 800e87c:	0800e933 	.word	0x0800e933
 800e880:	0800e933 	.word	0x0800e933
 800e884:	0800e8ff 	.word	0x0800e8ff
 800e888:	0800e933 	.word	0x0800e933
 800e88c:	0800e933 	.word	0x0800e933
 800e890:	0800e933 	.word	0x0800e933
 800e894:	0800e933 	.word	0x0800e933
 800e898:	0800e933 	.word	0x0800e933
 800e89c:	0800e933 	.word	0x0800e933
 800e8a0:	0800e933 	.word	0x0800e933
 800e8a4:	0800e933 	.word	0x0800e933
 800e8a8:	0800e933 	.word	0x0800e933
 800e8ac:	0800e933 	.word	0x0800e933
 800e8b0:	0800e933 	.word	0x0800e933
 800e8b4:	0800e933 	.word	0x0800e933
 800e8b8:	0800e933 	.word	0x0800e933
 800e8bc:	0800e933 	.word	0x0800e933
 800e8c0:	0800e933 	.word	0x0800e933
 800e8c4:	0800e925 	.word	0x0800e925
 800e8c8:	2b40      	cmp	r3, #64	@ 0x40
 800e8ca:	d02e      	beq.n	800e92a <UART_SetConfig+0xab2>
 800e8cc:	e031      	b.n	800e932 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e8ce:	f7fa fc05 	bl	80090dc <HAL_RCC_GetPCLK1Freq>
 800e8d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e8d4:	e033      	b.n	800e93e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e8d6:	f7fa fc17 	bl	8009108 <HAL_RCC_GetPCLK2Freq>
 800e8da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e8dc:	e02f      	b.n	800e93e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e8de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	f7fb fdfa 	bl	800a4dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e8e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e8ec:	e027      	b.n	800e93e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e8ee:	f107 0318 	add.w	r3, r7, #24
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f7fb ff46 	bl	800a784 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e8f8:	69fb      	ldr	r3, [r7, #28]
 800e8fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e8fc:	e01f      	b.n	800e93e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e8fe:	4b69      	ldr	r3, [pc, #420]	@ (800eaa4 <UART_SetConfig+0xc2c>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	f003 0320 	and.w	r3, r3, #32
 800e906:	2b00      	cmp	r3, #0
 800e908:	d009      	beq.n	800e91e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e90a:	4b66      	ldr	r3, [pc, #408]	@ (800eaa4 <UART_SetConfig+0xc2c>)
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	08db      	lsrs	r3, r3, #3
 800e910:	f003 0303 	and.w	r3, r3, #3
 800e914:	4a64      	ldr	r2, [pc, #400]	@ (800eaa8 <UART_SetConfig+0xc30>)
 800e916:	fa22 f303 	lsr.w	r3, r2, r3
 800e91a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e91c:	e00f      	b.n	800e93e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e91e:	4b62      	ldr	r3, [pc, #392]	@ (800eaa8 <UART_SetConfig+0xc30>)
 800e920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e922:	e00c      	b.n	800e93e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e924:	4b61      	ldr	r3, [pc, #388]	@ (800eaac <UART_SetConfig+0xc34>)
 800e926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e928:	e009      	b.n	800e93e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e92a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e92e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e930:	e005      	b.n	800e93e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e932:	2300      	movs	r3, #0
 800e934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e936:	2301      	movs	r3, #1
 800e938:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e93c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e93e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e940:	2b00      	cmp	r3, #0
 800e942:	f000 80ea 	beq.w	800eb1a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e946:	697b      	ldr	r3, [r7, #20]
 800e948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e94a:	4a55      	ldr	r2, [pc, #340]	@ (800eaa0 <UART_SetConfig+0xc28>)
 800e94c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e950:	461a      	mov	r2, r3
 800e952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e954:	fbb3 f3f2 	udiv	r3, r3, r2
 800e958:	005a      	lsls	r2, r3, #1
 800e95a:	697b      	ldr	r3, [r7, #20]
 800e95c:	685b      	ldr	r3, [r3, #4]
 800e95e:	085b      	lsrs	r3, r3, #1
 800e960:	441a      	add	r2, r3
 800e962:	697b      	ldr	r3, [r7, #20]
 800e964:	685b      	ldr	r3, [r3, #4]
 800e966:	fbb2 f3f3 	udiv	r3, r2, r3
 800e96a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e96c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e96e:	2b0f      	cmp	r3, #15
 800e970:	d916      	bls.n	800e9a0 <UART_SetConfig+0xb28>
 800e972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e978:	d212      	bcs.n	800e9a0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e97a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e97c:	b29b      	uxth	r3, r3
 800e97e:	f023 030f 	bic.w	r3, r3, #15
 800e982:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e986:	085b      	lsrs	r3, r3, #1
 800e988:	b29b      	uxth	r3, r3
 800e98a:	f003 0307 	and.w	r3, r3, #7
 800e98e:	b29a      	uxth	r2, r3
 800e990:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e992:	4313      	orrs	r3, r2
 800e994:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800e996:	697b      	ldr	r3, [r7, #20]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e99c:	60da      	str	r2, [r3, #12]
 800e99e:	e0bc      	b.n	800eb1a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e9a0:	2301      	movs	r3, #1
 800e9a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e9a6:	e0b8      	b.n	800eb1a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e9a8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e9ac:	2b20      	cmp	r3, #32
 800e9ae:	dc4b      	bgt.n	800ea48 <UART_SetConfig+0xbd0>
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	f2c0 8087 	blt.w	800eac4 <UART_SetConfig+0xc4c>
 800e9b6:	2b20      	cmp	r3, #32
 800e9b8:	f200 8084 	bhi.w	800eac4 <UART_SetConfig+0xc4c>
 800e9bc:	a201      	add	r2, pc, #4	@ (adr r2, 800e9c4 <UART_SetConfig+0xb4c>)
 800e9be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9c2:	bf00      	nop
 800e9c4:	0800ea4f 	.word	0x0800ea4f
 800e9c8:	0800ea57 	.word	0x0800ea57
 800e9cc:	0800eac5 	.word	0x0800eac5
 800e9d0:	0800eac5 	.word	0x0800eac5
 800e9d4:	0800ea5f 	.word	0x0800ea5f
 800e9d8:	0800eac5 	.word	0x0800eac5
 800e9dc:	0800eac5 	.word	0x0800eac5
 800e9e0:	0800eac5 	.word	0x0800eac5
 800e9e4:	0800ea6f 	.word	0x0800ea6f
 800e9e8:	0800eac5 	.word	0x0800eac5
 800e9ec:	0800eac5 	.word	0x0800eac5
 800e9f0:	0800eac5 	.word	0x0800eac5
 800e9f4:	0800eac5 	.word	0x0800eac5
 800e9f8:	0800eac5 	.word	0x0800eac5
 800e9fc:	0800eac5 	.word	0x0800eac5
 800ea00:	0800eac5 	.word	0x0800eac5
 800ea04:	0800ea7f 	.word	0x0800ea7f
 800ea08:	0800eac5 	.word	0x0800eac5
 800ea0c:	0800eac5 	.word	0x0800eac5
 800ea10:	0800eac5 	.word	0x0800eac5
 800ea14:	0800eac5 	.word	0x0800eac5
 800ea18:	0800eac5 	.word	0x0800eac5
 800ea1c:	0800eac5 	.word	0x0800eac5
 800ea20:	0800eac5 	.word	0x0800eac5
 800ea24:	0800eac5 	.word	0x0800eac5
 800ea28:	0800eac5 	.word	0x0800eac5
 800ea2c:	0800eac5 	.word	0x0800eac5
 800ea30:	0800eac5 	.word	0x0800eac5
 800ea34:	0800eac5 	.word	0x0800eac5
 800ea38:	0800eac5 	.word	0x0800eac5
 800ea3c:	0800eac5 	.word	0x0800eac5
 800ea40:	0800eac5 	.word	0x0800eac5
 800ea44:	0800eab7 	.word	0x0800eab7
 800ea48:	2b40      	cmp	r3, #64	@ 0x40
 800ea4a:	d037      	beq.n	800eabc <UART_SetConfig+0xc44>
 800ea4c:	e03a      	b.n	800eac4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ea4e:	f7fa fb45 	bl	80090dc <HAL_RCC_GetPCLK1Freq>
 800ea52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ea54:	e03c      	b.n	800ead0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ea56:	f7fa fb57 	bl	8009108 <HAL_RCC_GetPCLK2Freq>
 800ea5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ea5c:	e038      	b.n	800ead0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ea5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ea62:	4618      	mov	r0, r3
 800ea64:	f7fb fd3a 	bl	800a4dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ea68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ea6c:	e030      	b.n	800ead0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ea6e:	f107 0318 	add.w	r3, r7, #24
 800ea72:	4618      	mov	r0, r3
 800ea74:	f7fb fe86 	bl	800a784 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ea78:	69fb      	ldr	r3, [r7, #28]
 800ea7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ea7c:	e028      	b.n	800ead0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ea7e:	4b09      	ldr	r3, [pc, #36]	@ (800eaa4 <UART_SetConfig+0xc2c>)
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	f003 0320 	and.w	r3, r3, #32
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d012      	beq.n	800eab0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ea8a:	4b06      	ldr	r3, [pc, #24]	@ (800eaa4 <UART_SetConfig+0xc2c>)
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	08db      	lsrs	r3, r3, #3
 800ea90:	f003 0303 	and.w	r3, r3, #3
 800ea94:	4a04      	ldr	r2, [pc, #16]	@ (800eaa8 <UART_SetConfig+0xc30>)
 800ea96:	fa22 f303 	lsr.w	r3, r2, r3
 800ea9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ea9c:	e018      	b.n	800ead0 <UART_SetConfig+0xc58>
 800ea9e:	bf00      	nop
 800eaa0:	08014508 	.word	0x08014508
 800eaa4:	58024400 	.word	0x58024400
 800eaa8:	03d09000 	.word	0x03d09000
 800eaac:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800eab0:	4b24      	ldr	r3, [pc, #144]	@ (800eb44 <UART_SetConfig+0xccc>)
 800eab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eab4:	e00c      	b.n	800ead0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800eab6:	4b24      	ldr	r3, [pc, #144]	@ (800eb48 <UART_SetConfig+0xcd0>)
 800eab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eaba:	e009      	b.n	800ead0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eabc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800eac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eac2:	e005      	b.n	800ead0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800eac4:	2300      	movs	r3, #0
 800eac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800eac8:	2301      	movs	r3, #1
 800eaca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800eace:	bf00      	nop
    }

    if (pclk != 0U)
 800ead0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d021      	beq.n	800eb1a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ead6:	697b      	ldr	r3, [r7, #20]
 800ead8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eada:	4a1c      	ldr	r2, [pc, #112]	@ (800eb4c <UART_SetConfig+0xcd4>)
 800eadc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eae0:	461a      	mov	r2, r3
 800eae2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eae4:	fbb3 f2f2 	udiv	r2, r3, r2
 800eae8:	697b      	ldr	r3, [r7, #20]
 800eaea:	685b      	ldr	r3, [r3, #4]
 800eaec:	085b      	lsrs	r3, r3, #1
 800eaee:	441a      	add	r2, r3
 800eaf0:	697b      	ldr	r3, [r7, #20]
 800eaf2:	685b      	ldr	r3, [r3, #4]
 800eaf4:	fbb2 f3f3 	udiv	r3, r2, r3
 800eaf8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eafa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eafc:	2b0f      	cmp	r3, #15
 800eafe:	d909      	bls.n	800eb14 <UART_SetConfig+0xc9c>
 800eb00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eb06:	d205      	bcs.n	800eb14 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800eb08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb0a:	b29a      	uxth	r2, r3
 800eb0c:	697b      	ldr	r3, [r7, #20]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	60da      	str	r2, [r3, #12]
 800eb12:	e002      	b.n	800eb1a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800eb14:	2301      	movs	r3, #1
 800eb16:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800eb1a:	697b      	ldr	r3, [r7, #20]
 800eb1c:	2201      	movs	r2, #1
 800eb1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800eb22:	697b      	ldr	r3, [r7, #20]
 800eb24:	2201      	movs	r2, #1
 800eb26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800eb2a:	697b      	ldr	r3, [r7, #20]
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800eb30:	697b      	ldr	r3, [r7, #20]
 800eb32:	2200      	movs	r2, #0
 800eb34:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800eb36:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	3748      	adds	r7, #72	@ 0x48
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eb44:	03d09000 	.word	0x03d09000
 800eb48:	003d0900 	.word	0x003d0900
 800eb4c:	08014508 	.word	0x08014508

0800eb50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800eb50:	b480      	push	{r7}
 800eb52:	b083      	sub	sp, #12
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb5c:	f003 0308 	and.w	r3, r3, #8
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d00a      	beq.n	800eb7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	685b      	ldr	r3, [r3, #4]
 800eb6a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	430a      	orrs	r2, r1
 800eb78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb7e:	f003 0301 	and.w	r3, r3, #1
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d00a      	beq.n	800eb9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	685b      	ldr	r3, [r3, #4]
 800eb8c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	430a      	orrs	r2, r1
 800eb9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eba0:	f003 0302 	and.w	r3, r3, #2
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d00a      	beq.n	800ebbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	685b      	ldr	r3, [r3, #4]
 800ebae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	430a      	orrs	r2, r1
 800ebbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ebc2:	f003 0304 	and.w	r3, r3, #4
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d00a      	beq.n	800ebe0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	685b      	ldr	r3, [r3, #4]
 800ebd0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	430a      	orrs	r2, r1
 800ebde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ebe4:	f003 0310 	and.w	r3, r3, #16
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d00a      	beq.n	800ec02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	689b      	ldr	r3, [r3, #8]
 800ebf2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	430a      	orrs	r2, r1
 800ec00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec06:	f003 0320 	and.w	r3, r3, #32
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d00a      	beq.n	800ec24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	689b      	ldr	r3, [r3, #8]
 800ec14:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	430a      	orrs	r2, r1
 800ec22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d01a      	beq.n	800ec66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	685b      	ldr	r3, [r3, #4]
 800ec36:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	430a      	orrs	r2, r1
 800ec44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ec4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ec4e:	d10a      	bne.n	800ec66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	685b      	ldr	r3, [r3, #4]
 800ec56:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	430a      	orrs	r2, r1
 800ec64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d00a      	beq.n	800ec88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	685b      	ldr	r3, [r3, #4]
 800ec78:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	430a      	orrs	r2, r1
 800ec86:	605a      	str	r2, [r3, #4]
  }
}
 800ec88:	bf00      	nop
 800ec8a:	370c      	adds	r7, #12
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec92:	4770      	bx	lr

0800ec94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b098      	sub	sp, #96	@ 0x60
 800ec98:	af02      	add	r7, sp, #8
 800ec9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2200      	movs	r2, #0
 800eca0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800eca4:	f7f5 fb7a 	bl	800439c <HAL_GetTick>
 800eca8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	f003 0308 	and.w	r3, r3, #8
 800ecb4:	2b08      	cmp	r3, #8
 800ecb6:	d12f      	bne.n	800ed18 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ecb8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ecbc:	9300      	str	r3, [sp, #0]
 800ecbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ecc6:	6878      	ldr	r0, [r7, #4]
 800ecc8:	f000 f88e 	bl	800ede8 <UART_WaitOnFlagUntilTimeout>
 800eccc:	4603      	mov	r3, r0
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d022      	beq.n	800ed18 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecda:	e853 3f00 	ldrex	r3, [r3]
 800ecde:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ece0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ece2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ece6:	653b      	str	r3, [r7, #80]	@ 0x50
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	461a      	mov	r2, r3
 800ecee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ecf0:	647b      	str	r3, [r7, #68]	@ 0x44
 800ecf2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecf4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ecf6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ecf8:	e841 2300 	strex	r3, r2, [r1]
 800ecfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ecfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d1e6      	bne.n	800ecd2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2220      	movs	r2, #32
 800ed08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2200      	movs	r2, #0
 800ed10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ed14:	2303      	movs	r3, #3
 800ed16:	e063      	b.n	800ede0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	f003 0304 	and.w	r3, r3, #4
 800ed22:	2b04      	cmp	r3, #4
 800ed24:	d149      	bne.n	800edba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ed26:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ed2a:	9300      	str	r3, [sp, #0]
 800ed2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed2e:	2200      	movs	r2, #0
 800ed30:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ed34:	6878      	ldr	r0, [r7, #4]
 800ed36:	f000 f857 	bl	800ede8 <UART_WaitOnFlagUntilTimeout>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d03c      	beq.n	800edba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed48:	e853 3f00 	ldrex	r3, [r3]
 800ed4c:	623b      	str	r3, [r7, #32]
   return(result);
 800ed4e:	6a3b      	ldr	r3, [r7, #32]
 800ed50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ed54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	461a      	mov	r2, r3
 800ed5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed5e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ed60:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ed64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed66:	e841 2300 	strex	r3, r2, [r1]
 800ed6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ed6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d1e6      	bne.n	800ed40 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	3308      	adds	r3, #8
 800ed78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed7a:	693b      	ldr	r3, [r7, #16]
 800ed7c:	e853 3f00 	ldrex	r3, [r3]
 800ed80:	60fb      	str	r3, [r7, #12]
   return(result);
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	f023 0301 	bic.w	r3, r3, #1
 800ed88:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	3308      	adds	r3, #8
 800ed90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ed92:	61fa      	str	r2, [r7, #28]
 800ed94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed96:	69b9      	ldr	r1, [r7, #24]
 800ed98:	69fa      	ldr	r2, [r7, #28]
 800ed9a:	e841 2300 	strex	r3, r2, [r1]
 800ed9e:	617b      	str	r3, [r7, #20]
   return(result);
 800eda0:	697b      	ldr	r3, [r7, #20]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d1e5      	bne.n	800ed72 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	2220      	movs	r2, #32
 800edaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	2200      	movs	r2, #0
 800edb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800edb6:	2303      	movs	r3, #3
 800edb8:	e012      	b.n	800ede0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	2220      	movs	r2, #32
 800edbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	2220      	movs	r2, #32
 800edc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	2200      	movs	r2, #0
 800edce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2200      	movs	r2, #0
 800edd4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2200      	movs	r2, #0
 800edda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800edde:	2300      	movs	r3, #0
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	3758      	adds	r7, #88	@ 0x58
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}

0800ede8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b084      	sub	sp, #16
 800edec:	af00      	add	r7, sp, #0
 800edee:	60f8      	str	r0, [r7, #12]
 800edf0:	60b9      	str	r1, [r7, #8]
 800edf2:	603b      	str	r3, [r7, #0]
 800edf4:	4613      	mov	r3, r2
 800edf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800edf8:	e04f      	b.n	800ee9a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800edfa:	69bb      	ldr	r3, [r7, #24]
 800edfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee00:	d04b      	beq.n	800ee9a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ee02:	f7f5 facb 	bl	800439c <HAL_GetTick>
 800ee06:	4602      	mov	r2, r0
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	1ad3      	subs	r3, r2, r3
 800ee0c:	69ba      	ldr	r2, [r7, #24]
 800ee0e:	429a      	cmp	r2, r3
 800ee10:	d302      	bcc.n	800ee18 <UART_WaitOnFlagUntilTimeout+0x30>
 800ee12:	69bb      	ldr	r3, [r7, #24]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d101      	bne.n	800ee1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ee18:	2303      	movs	r3, #3
 800ee1a:	e04e      	b.n	800eeba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	f003 0304 	and.w	r3, r3, #4
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d037      	beq.n	800ee9a <UART_WaitOnFlagUntilTimeout+0xb2>
 800ee2a:	68bb      	ldr	r3, [r7, #8]
 800ee2c:	2b80      	cmp	r3, #128	@ 0x80
 800ee2e:	d034      	beq.n	800ee9a <UART_WaitOnFlagUntilTimeout+0xb2>
 800ee30:	68bb      	ldr	r3, [r7, #8]
 800ee32:	2b40      	cmp	r3, #64	@ 0x40
 800ee34:	d031      	beq.n	800ee9a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	69db      	ldr	r3, [r3, #28]
 800ee3c:	f003 0308 	and.w	r3, r3, #8
 800ee40:	2b08      	cmp	r3, #8
 800ee42:	d110      	bne.n	800ee66 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	2208      	movs	r2, #8
 800ee4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ee4c:	68f8      	ldr	r0, [r7, #12]
 800ee4e:	f000 f921 	bl	800f094 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	2208      	movs	r2, #8
 800ee56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ee62:	2301      	movs	r3, #1
 800ee64:	e029      	b.n	800eeba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	69db      	ldr	r3, [r3, #28]
 800ee6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ee70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ee74:	d111      	bne.n	800ee9a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ee7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ee80:	68f8      	ldr	r0, [r7, #12]
 800ee82:	f000 f907 	bl	800f094 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	2220      	movs	r2, #32
 800ee8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	2200      	movs	r2, #0
 800ee92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ee96:	2303      	movs	r3, #3
 800ee98:	e00f      	b.n	800eeba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	69da      	ldr	r2, [r3, #28]
 800eea0:	68bb      	ldr	r3, [r7, #8]
 800eea2:	4013      	ands	r3, r2
 800eea4:	68ba      	ldr	r2, [r7, #8]
 800eea6:	429a      	cmp	r2, r3
 800eea8:	bf0c      	ite	eq
 800eeaa:	2301      	moveq	r3, #1
 800eeac:	2300      	movne	r3, #0
 800eeae:	b2db      	uxtb	r3, r3
 800eeb0:	461a      	mov	r2, r3
 800eeb2:	79fb      	ldrb	r3, [r7, #7]
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	d0a0      	beq.n	800edfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800eeb8:	2300      	movs	r3, #0
}
 800eeba:	4618      	mov	r0, r3
 800eebc:	3710      	adds	r7, #16
 800eebe:	46bd      	mov	sp, r7
 800eec0:	bd80      	pop	{r7, pc}
	...

0800eec4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b096      	sub	sp, #88	@ 0x58
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	60f8      	str	r0, [r7, #12]
 800eecc:	60b9      	str	r1, [r7, #8]
 800eece:	4613      	mov	r3, r2
 800eed0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	68ba      	ldr	r2, [r7, #8]
 800eed6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	88fa      	ldrh	r2, [r7, #6]
 800eedc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	2200      	movs	r2, #0
 800eee4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	2222      	movs	r2, #34	@ 0x22
 800eeec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d02d      	beq.n	800ef56 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef00:	4a40      	ldr	r2, [pc, #256]	@ (800f004 <UART_Start_Receive_DMA+0x140>)
 800ef02:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef0a:	4a3f      	ldr	r2, [pc, #252]	@ (800f008 <UART_Start_Receive_DMA+0x144>)
 800ef0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef14:	4a3d      	ldr	r2, [pc, #244]	@ (800f00c <UART_Start_Receive_DMA+0x148>)
 800ef16:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef1e:	2200      	movs	r2, #0
 800ef20:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	3324      	adds	r3, #36	@ 0x24
 800ef2e:	4619      	mov	r1, r3
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef34:	461a      	mov	r2, r3
 800ef36:	88fb      	ldrh	r3, [r7, #6]
 800ef38:	f7f5 ff52 	bl	8004de0 <HAL_DMA_Start_IT>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d009      	beq.n	800ef56 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	2210      	movs	r2, #16
 800ef46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	2220      	movs	r2, #32
 800ef4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800ef52:	2301      	movs	r3, #1
 800ef54:	e051      	b.n	800effa <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	691b      	ldr	r3, [r3, #16]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d018      	beq.n	800ef90 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef66:	e853 3f00 	ldrex	r3, [r3]
 800ef6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ef6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ef72:	657b      	str	r3, [r7, #84]	@ 0x54
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	461a      	mov	r2, r3
 800ef7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ef7e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef80:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ef82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ef84:	e841 2300 	strex	r3, r2, [r1]
 800ef88:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ef8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d1e6      	bne.n	800ef5e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	3308      	adds	r3, #8
 800ef96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef9a:	e853 3f00 	ldrex	r3, [r3]
 800ef9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800efa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efa2:	f043 0301 	orr.w	r3, r3, #1
 800efa6:	653b      	str	r3, [r7, #80]	@ 0x50
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	3308      	adds	r3, #8
 800efae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800efb0:	637a      	str	r2, [r7, #52]	@ 0x34
 800efb2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efb4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800efb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800efb8:	e841 2300 	strex	r3, r2, [r1]
 800efbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800efbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d1e5      	bne.n	800ef90 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	3308      	adds	r3, #8
 800efca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efcc:	697b      	ldr	r3, [r7, #20]
 800efce:	e853 3f00 	ldrex	r3, [r3]
 800efd2:	613b      	str	r3, [r7, #16]
   return(result);
 800efd4:	693b      	ldr	r3, [r7, #16]
 800efd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800efda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	3308      	adds	r3, #8
 800efe2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800efe4:	623a      	str	r2, [r7, #32]
 800efe6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efe8:	69f9      	ldr	r1, [r7, #28]
 800efea:	6a3a      	ldr	r2, [r7, #32]
 800efec:	e841 2300 	strex	r3, r2, [r1]
 800eff0:	61bb      	str	r3, [r7, #24]
   return(result);
 800eff2:	69bb      	ldr	r3, [r7, #24]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d1e5      	bne.n	800efc4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800eff8:	2300      	movs	r3, #0
}
 800effa:	4618      	mov	r0, r3
 800effc:	3758      	adds	r7, #88	@ 0x58
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}
 800f002:	bf00      	nop
 800f004:	0800f161 	.word	0x0800f161
 800f008:	0800f289 	.word	0x0800f289
 800f00c:	0800f2c7 	.word	0x0800f2c7

0800f010 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f010:	b480      	push	{r7}
 800f012:	b08f      	sub	sp, #60	@ 0x3c
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f01e:	6a3b      	ldr	r3, [r7, #32]
 800f020:	e853 3f00 	ldrex	r3, [r3]
 800f024:	61fb      	str	r3, [r7, #28]
   return(result);
 800f026:	69fb      	ldr	r3, [r7, #28]
 800f028:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800f02c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	461a      	mov	r2, r3
 800f034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f036:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f038:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f03a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f03c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f03e:	e841 2300 	strex	r3, r2, [r1]
 800f042:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f046:	2b00      	cmp	r3, #0
 800f048:	d1e6      	bne.n	800f018 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	3308      	adds	r3, #8
 800f050:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	e853 3f00 	ldrex	r3, [r3]
 800f058:	60bb      	str	r3, [r7, #8]
   return(result);
 800f05a:	68bb      	ldr	r3, [r7, #8]
 800f05c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800f060:	633b      	str	r3, [r7, #48]	@ 0x30
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	3308      	adds	r3, #8
 800f068:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f06a:	61ba      	str	r2, [r7, #24]
 800f06c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f06e:	6979      	ldr	r1, [r7, #20]
 800f070:	69ba      	ldr	r2, [r7, #24]
 800f072:	e841 2300 	strex	r3, r2, [r1]
 800f076:	613b      	str	r3, [r7, #16]
   return(result);
 800f078:	693b      	ldr	r3, [r7, #16]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d1e5      	bne.n	800f04a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	2220      	movs	r2, #32
 800f082:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800f086:	bf00      	nop
 800f088:	373c      	adds	r7, #60	@ 0x3c
 800f08a:	46bd      	mov	sp, r7
 800f08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f090:	4770      	bx	lr
	...

0800f094 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f094:	b480      	push	{r7}
 800f096:	b095      	sub	sp, #84	@ 0x54
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0a4:	e853 3f00 	ldrex	r3, [r3]
 800f0a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f0b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	461a      	mov	r2, r3
 800f0b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f0ba:	643b      	str	r3, [r7, #64]	@ 0x40
 800f0bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f0c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f0c2:	e841 2300 	strex	r3, r2, [r1]
 800f0c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f0c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d1e6      	bne.n	800f09c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	3308      	adds	r3, #8
 800f0d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0d6:	6a3b      	ldr	r3, [r7, #32]
 800f0d8:	e853 3f00 	ldrex	r3, [r3]
 800f0dc:	61fb      	str	r3, [r7, #28]
   return(result);
 800f0de:	69fa      	ldr	r2, [r7, #28]
 800f0e0:	4b1e      	ldr	r3, [pc, #120]	@ (800f15c <UART_EndRxTransfer+0xc8>)
 800f0e2:	4013      	ands	r3, r2
 800f0e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	3308      	adds	r3, #8
 800f0ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f0ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f0f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f0f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f0f6:	e841 2300 	strex	r3, r2, [r1]
 800f0fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f0fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d1e5      	bne.n	800f0ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f106:	2b01      	cmp	r3, #1
 800f108:	d118      	bne.n	800f13c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	e853 3f00 	ldrex	r3, [r3]
 800f116:	60bb      	str	r3, [r7, #8]
   return(result);
 800f118:	68bb      	ldr	r3, [r7, #8]
 800f11a:	f023 0310 	bic.w	r3, r3, #16
 800f11e:	647b      	str	r3, [r7, #68]	@ 0x44
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	461a      	mov	r2, r3
 800f126:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f128:	61bb      	str	r3, [r7, #24]
 800f12a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f12c:	6979      	ldr	r1, [r7, #20]
 800f12e:	69ba      	ldr	r2, [r7, #24]
 800f130:	e841 2300 	strex	r3, r2, [r1]
 800f134:	613b      	str	r3, [r7, #16]
   return(result);
 800f136:	693b      	ldr	r3, [r7, #16]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d1e6      	bne.n	800f10a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2220      	movs	r2, #32
 800f140:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2200      	movs	r2, #0
 800f148:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	2200      	movs	r2, #0
 800f14e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f150:	bf00      	nop
 800f152:	3754      	adds	r7, #84	@ 0x54
 800f154:	46bd      	mov	sp, r7
 800f156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15a:	4770      	bx	lr
 800f15c:	effffffe 	.word	0xeffffffe

0800f160 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b09c      	sub	sp, #112	@ 0x70
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f16c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	69db      	ldr	r3, [r3, #28]
 800f172:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f176:	d071      	beq.n	800f25c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800f178:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f17a:	2200      	movs	r2, #0
 800f17c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f180:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f186:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f188:	e853 3f00 	ldrex	r3, [r3]
 800f18c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f18e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f190:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f194:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f196:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	461a      	mov	r2, r3
 800f19c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f19e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f1a0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f1a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f1a6:	e841 2300 	strex	r3, r2, [r1]
 800f1aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f1ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d1e6      	bne.n	800f180 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f1b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	3308      	adds	r3, #8
 800f1b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1bc:	e853 3f00 	ldrex	r3, [r3]
 800f1c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f1c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1c4:	f023 0301 	bic.w	r3, r3, #1
 800f1c8:	667b      	str	r3, [r7, #100]	@ 0x64
 800f1ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	3308      	adds	r3, #8
 800f1d0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f1d2:	647a      	str	r2, [r7, #68]	@ 0x44
 800f1d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f1d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f1da:	e841 2300 	strex	r3, r2, [r1]
 800f1de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f1e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d1e5      	bne.n	800f1b2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f1e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	3308      	adds	r3, #8
 800f1ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1f0:	e853 3f00 	ldrex	r3, [r3]
 800f1f4:	623b      	str	r3, [r7, #32]
   return(result);
 800f1f6:	6a3b      	ldr	r3, [r7, #32]
 800f1f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f1fc:	663b      	str	r3, [r7, #96]	@ 0x60
 800f1fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	3308      	adds	r3, #8
 800f204:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f206:	633a      	str	r2, [r7, #48]	@ 0x30
 800f208:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f20a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f20c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f20e:	e841 2300 	strex	r3, r2, [r1]
 800f212:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f216:	2b00      	cmp	r3, #0
 800f218:	d1e5      	bne.n	800f1e6 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f21a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f21c:	2220      	movs	r2, #32
 800f21e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f222:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f224:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f226:	2b01      	cmp	r3, #1
 800f228:	d118      	bne.n	800f25c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f22a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f230:	693b      	ldr	r3, [r7, #16]
 800f232:	e853 3f00 	ldrex	r3, [r3]
 800f236:	60fb      	str	r3, [r7, #12]
   return(result);
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	f023 0310 	bic.w	r3, r3, #16
 800f23e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f240:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	461a      	mov	r2, r3
 800f246:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f248:	61fb      	str	r3, [r7, #28]
 800f24a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f24c:	69b9      	ldr	r1, [r7, #24]
 800f24e:	69fa      	ldr	r2, [r7, #28]
 800f250:	e841 2300 	strex	r3, r2, [r1]
 800f254:	617b      	str	r3, [r7, #20]
   return(result);
 800f256:	697b      	ldr	r3, [r7, #20]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d1e6      	bne.n	800f22a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f25c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f25e:	2200      	movs	r2, #0
 800f260:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f262:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f264:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f266:	2b01      	cmp	r3, #1
 800f268:	d107      	bne.n	800f27a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f26a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f26c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f270:	4619      	mov	r1, r3
 800f272:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f274:	f7fe fdf4 	bl	800de60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f278:	e002      	b.n	800f280 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800f27a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f27c:	f7f3 fe6c 	bl	8002f58 <HAL_UART_RxCpltCallback>
}
 800f280:	bf00      	nop
 800f282:	3770      	adds	r7, #112	@ 0x70
 800f284:	46bd      	mov	sp, r7
 800f286:	bd80      	pop	{r7, pc}

0800f288 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b084      	sub	sp, #16
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f294:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	2201      	movs	r2, #1
 800f29a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f2a0:	2b01      	cmp	r3, #1
 800f2a2:	d109      	bne.n	800f2b8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f2aa:	085b      	lsrs	r3, r3, #1
 800f2ac:	b29b      	uxth	r3, r3
 800f2ae:	4619      	mov	r1, r3
 800f2b0:	68f8      	ldr	r0, [r7, #12]
 800f2b2:	f7fe fdd5 	bl	800de60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f2b6:	e002      	b.n	800f2be <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800f2b8:	68f8      	ldr	r0, [r7, #12]
 800f2ba:	f7fe fdb3 	bl	800de24 <HAL_UART_RxHalfCpltCallback>
}
 800f2be:	bf00      	nop
 800f2c0:	3710      	adds	r7, #16
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bd80      	pop	{r7, pc}

0800f2c6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f2c6:	b580      	push	{r7, lr}
 800f2c8:	b086      	sub	sp, #24
 800f2ca:	af00      	add	r7, sp, #0
 800f2cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2d2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f2d4:	697b      	ldr	r3, [r7, #20]
 800f2d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f2da:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f2dc:	697b      	ldr	r3, [r7, #20]
 800f2de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f2e2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f2e4:	697b      	ldr	r3, [r7, #20]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	689b      	ldr	r3, [r3, #8]
 800f2ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f2ee:	2b80      	cmp	r3, #128	@ 0x80
 800f2f0:	d109      	bne.n	800f306 <UART_DMAError+0x40>
 800f2f2:	693b      	ldr	r3, [r7, #16]
 800f2f4:	2b21      	cmp	r3, #33	@ 0x21
 800f2f6:	d106      	bne.n	800f306 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f2f8:	697b      	ldr	r3, [r7, #20]
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800f300:	6978      	ldr	r0, [r7, #20]
 800f302:	f7ff fe85 	bl	800f010 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f306:	697b      	ldr	r3, [r7, #20]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	689b      	ldr	r3, [r3, #8]
 800f30c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f310:	2b40      	cmp	r3, #64	@ 0x40
 800f312:	d109      	bne.n	800f328 <UART_DMAError+0x62>
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	2b22      	cmp	r3, #34	@ 0x22
 800f318:	d106      	bne.n	800f328 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f31a:	697b      	ldr	r3, [r7, #20]
 800f31c:	2200      	movs	r2, #0
 800f31e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800f322:	6978      	ldr	r0, [r7, #20]
 800f324:	f7ff feb6 	bl	800f094 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f328:	697b      	ldr	r3, [r7, #20]
 800f32a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f32e:	f043 0210 	orr.w	r2, r3, #16
 800f332:	697b      	ldr	r3, [r7, #20]
 800f334:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f338:	6978      	ldr	r0, [r7, #20]
 800f33a:	f7fe fd7d 	bl	800de38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f33e:	bf00      	nop
 800f340:	3718      	adds	r7, #24
 800f342:	46bd      	mov	sp, r7
 800f344:	bd80      	pop	{r7, pc}

0800f346 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f346:	b580      	push	{r7, lr}
 800f348:	b084      	sub	sp, #16
 800f34a:	af00      	add	r7, sp, #0
 800f34c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f352:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	2200      	movs	r2, #0
 800f358:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	2200      	movs	r2, #0
 800f360:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f364:	68f8      	ldr	r0, [r7, #12]
 800f366:	f7fe fd67 	bl	800de38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f36a:	bf00      	nop
 800f36c:	3710      	adds	r7, #16
 800f36e:	46bd      	mov	sp, r7
 800f370:	bd80      	pop	{r7, pc}

0800f372 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800f372:	b580      	push	{r7, lr}
 800f374:	b084      	sub	sp, #16
 800f376:	af00      	add	r7, sp, #0
 800f378:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f37e:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f384:	2200      	movs	r2, #0
 800f386:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d005      	beq.n	800f39e <UART_DMATxAbortCallback+0x2c>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f398:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d12b      	bne.n	800f3f6 <UART_DMATxAbortCallback+0x84>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	220f      	movs	r2, #15
 800f3bc:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f3c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f3c6:	d107      	bne.n	800f3d8 <UART_DMATxAbortCallback+0x66>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	699a      	ldr	r2, [r3, #24]
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	f042 0210 	orr.w	r2, r2, #16
 800f3d6:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	2220      	movs	r2, #32
 800f3dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	2220      	movs	r2, #32
 800f3e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800f3ee:	68f8      	ldr	r0, [r7, #12]
 800f3f0:	f7fe fd2c 	bl	800de4c <HAL_UART_AbortCpltCallback>
 800f3f4:	e000      	b.n	800f3f8 <UART_DMATxAbortCallback+0x86>
      return;
 800f3f6:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f3f8:	3710      	adds	r7, #16
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}

0800f3fe <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800f3fe:	b580      	push	{r7, lr}
 800f400:	b084      	sub	sp, #16
 800f402:	af00      	add	r7, sp, #0
 800f404:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f40a:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f412:	2200      	movs	r2, #0
 800f414:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d004      	beq.n	800f428 <UART_DMARxAbortCallback+0x2a>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f424:	2b00      	cmp	r3, #0
 800f426:	d126      	bne.n	800f476 <UART_DMARxAbortCallback+0x78>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	2200      	movs	r2, #0
 800f42c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	2200      	movs	r2, #0
 800f434:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	2200      	movs	r2, #0
 800f43c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	220f      	movs	r2, #15
 800f446:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	699a      	ldr	r2, [r3, #24]
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	f042 0208 	orr.w	r2, r2, #8
 800f456:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	2220      	movs	r2, #32
 800f45c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	2220      	movs	r2, #32
 800f464:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	2200      	movs	r2, #0
 800f46c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800f46e:	68f8      	ldr	r0, [r7, #12]
 800f470:	f7fe fcec 	bl	800de4c <HAL_UART_AbortCpltCallback>
 800f474:	e000      	b.n	800f478 <UART_DMARxAbortCallback+0x7a>
      return;
 800f476:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f478:	3710      	adds	r7, #16
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}

0800f47e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f47e:	b580      	push	{r7, lr}
 800f480:	b088      	sub	sp, #32
 800f482:	af00      	add	r7, sp, #0
 800f484:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	e853 3f00 	ldrex	r3, [r3]
 800f492:	60bb      	str	r3, [r7, #8]
   return(result);
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f49a:	61fb      	str	r3, [r7, #28]
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	461a      	mov	r2, r3
 800f4a2:	69fb      	ldr	r3, [r7, #28]
 800f4a4:	61bb      	str	r3, [r7, #24]
 800f4a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4a8:	6979      	ldr	r1, [r7, #20]
 800f4aa:	69ba      	ldr	r2, [r7, #24]
 800f4ac:	e841 2300 	strex	r3, r2, [r1]
 800f4b0:	613b      	str	r3, [r7, #16]
   return(result);
 800f4b2:	693b      	ldr	r3, [r7, #16]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d1e6      	bne.n	800f486 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	2220      	movs	r2, #32
 800f4bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f4c6:	6878      	ldr	r0, [r7, #4]
 800f4c8:	f7fe fca2 	bl	800de10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f4cc:	bf00      	nop
 800f4ce:	3720      	adds	r7, #32
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}

0800f4d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f4d4:	b480      	push	{r7}
 800f4d6:	b083      	sub	sp, #12
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f4dc:	bf00      	nop
 800f4de:	370c      	adds	r7, #12
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e6:	4770      	bx	lr

0800f4e8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f4e8:	b480      	push	{r7}
 800f4ea:	b083      	sub	sp, #12
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f4f0:	bf00      	nop
 800f4f2:	370c      	adds	r7, #12
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fa:	4770      	bx	lr

0800f4fc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f4fc:	b480      	push	{r7}
 800f4fe:	b083      	sub	sp, #12
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f504:	bf00      	nop
 800f506:	370c      	adds	r7, #12
 800f508:	46bd      	mov	sp, r7
 800f50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50e:	4770      	bx	lr

0800f510 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f510:	b480      	push	{r7}
 800f512:	b085      	sub	sp, #20
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f51e:	2b01      	cmp	r3, #1
 800f520:	d101      	bne.n	800f526 <HAL_UARTEx_DisableFifoMode+0x16>
 800f522:	2302      	movs	r3, #2
 800f524:	e027      	b.n	800f576 <HAL_UARTEx_DisableFifoMode+0x66>
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	2201      	movs	r2, #1
 800f52a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	2224      	movs	r2, #36	@ 0x24
 800f532:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	681a      	ldr	r2, [r3, #0]
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	f022 0201 	bic.w	r2, r2, #1
 800f54c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f554:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	2200      	movs	r2, #0
 800f55a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	68fa      	ldr	r2, [r7, #12]
 800f562:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	2220      	movs	r2, #32
 800f568:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2200      	movs	r2, #0
 800f570:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f574:	2300      	movs	r3, #0
}
 800f576:	4618      	mov	r0, r3
 800f578:	3714      	adds	r7, #20
 800f57a:	46bd      	mov	sp, r7
 800f57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f580:	4770      	bx	lr

0800f582 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f582:	b580      	push	{r7, lr}
 800f584:	b084      	sub	sp, #16
 800f586:	af00      	add	r7, sp, #0
 800f588:	6078      	str	r0, [r7, #4]
 800f58a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f592:	2b01      	cmp	r3, #1
 800f594:	d101      	bne.n	800f59a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f596:	2302      	movs	r3, #2
 800f598:	e02d      	b.n	800f5f6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	2201      	movs	r2, #1
 800f59e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	2224      	movs	r2, #36	@ 0x24
 800f5a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	681a      	ldr	r2, [r3, #0]
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	f022 0201 	bic.w	r2, r2, #1
 800f5c0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	689b      	ldr	r3, [r3, #8]
 800f5c8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	683a      	ldr	r2, [r7, #0]
 800f5d2:	430a      	orrs	r2, r1
 800f5d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f5d6:	6878      	ldr	r0, [r7, #4]
 800f5d8:	f000 f850 	bl	800f67c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	68fa      	ldr	r2, [r7, #12]
 800f5e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2220      	movs	r2, #32
 800f5e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f5f4:	2300      	movs	r3, #0
}
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	3710      	adds	r7, #16
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}

0800f5fe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f5fe:	b580      	push	{r7, lr}
 800f600:	b084      	sub	sp, #16
 800f602:	af00      	add	r7, sp, #0
 800f604:	6078      	str	r0, [r7, #4]
 800f606:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f60e:	2b01      	cmp	r3, #1
 800f610:	d101      	bne.n	800f616 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f612:	2302      	movs	r3, #2
 800f614:	e02d      	b.n	800f672 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	2201      	movs	r2, #1
 800f61a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	2224      	movs	r2, #36	@ 0x24
 800f622:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	681a      	ldr	r2, [r3, #0]
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	f022 0201 	bic.w	r2, r2, #1
 800f63c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	689b      	ldr	r3, [r3, #8]
 800f644:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	683a      	ldr	r2, [r7, #0]
 800f64e:	430a      	orrs	r2, r1
 800f650:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f652:	6878      	ldr	r0, [r7, #4]
 800f654:	f000 f812 	bl	800f67c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	68fa      	ldr	r2, [r7, #12]
 800f65e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	2220      	movs	r2, #32
 800f664:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2200      	movs	r2, #0
 800f66c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f670:	2300      	movs	r3, #0
}
 800f672:	4618      	mov	r0, r3
 800f674:	3710      	adds	r7, #16
 800f676:	46bd      	mov	sp, r7
 800f678:	bd80      	pop	{r7, pc}
	...

0800f67c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f67c:	b480      	push	{r7}
 800f67e:	b085      	sub	sp, #20
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d108      	bne.n	800f69e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	2201      	movs	r2, #1
 800f690:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	2201      	movs	r2, #1
 800f698:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f69c:	e031      	b.n	800f702 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f69e:	2310      	movs	r3, #16
 800f6a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f6a2:	2310      	movs	r3, #16
 800f6a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	689b      	ldr	r3, [r3, #8]
 800f6ac:	0e5b      	lsrs	r3, r3, #25
 800f6ae:	b2db      	uxtb	r3, r3
 800f6b0:	f003 0307 	and.w	r3, r3, #7
 800f6b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	689b      	ldr	r3, [r3, #8]
 800f6bc:	0f5b      	lsrs	r3, r3, #29
 800f6be:	b2db      	uxtb	r3, r3
 800f6c0:	f003 0307 	and.w	r3, r3, #7
 800f6c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f6c6:	7bbb      	ldrb	r3, [r7, #14]
 800f6c8:	7b3a      	ldrb	r2, [r7, #12]
 800f6ca:	4911      	ldr	r1, [pc, #68]	@ (800f710 <UARTEx_SetNbDataToProcess+0x94>)
 800f6cc:	5c8a      	ldrb	r2, [r1, r2]
 800f6ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f6d2:	7b3a      	ldrb	r2, [r7, #12]
 800f6d4:	490f      	ldr	r1, [pc, #60]	@ (800f714 <UARTEx_SetNbDataToProcess+0x98>)
 800f6d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f6d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800f6dc:	b29a      	uxth	r2, r3
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f6e4:	7bfb      	ldrb	r3, [r7, #15]
 800f6e6:	7b7a      	ldrb	r2, [r7, #13]
 800f6e8:	4909      	ldr	r1, [pc, #36]	@ (800f710 <UARTEx_SetNbDataToProcess+0x94>)
 800f6ea:	5c8a      	ldrb	r2, [r1, r2]
 800f6ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f6f0:	7b7a      	ldrb	r2, [r7, #13]
 800f6f2:	4908      	ldr	r1, [pc, #32]	@ (800f714 <UARTEx_SetNbDataToProcess+0x98>)
 800f6f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f6f6:	fb93 f3f2 	sdiv	r3, r3, r2
 800f6fa:	b29a      	uxth	r2, r3
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f702:	bf00      	nop
 800f704:	3714      	adds	r7, #20
 800f706:	46bd      	mov	sp, r7
 800f708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70c:	4770      	bx	lr
 800f70e:	bf00      	nop
 800f710:	08014520 	.word	0x08014520
 800f714:	08014528 	.word	0x08014528

0800f718 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800f71c:	4904      	ldr	r1, [pc, #16]	@ (800f730 <MX_FATFS_Init+0x18>)
 800f71e:	4805      	ldr	r0, [pc, #20]	@ (800f734 <MX_FATFS_Init+0x1c>)
 800f720:	f004 fc3a 	bl	8013f98 <FATFS_LinkDriver>
 800f724:	4603      	mov	r3, r0
 800f726:	461a      	mov	r2, r3
 800f728:	4b03      	ldr	r3, [pc, #12]	@ (800f738 <MX_FATFS_Init+0x20>)
 800f72a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f72c:	bf00      	nop
 800f72e:	bd80      	pop	{r7, pc}
 800f730:	24002adc 	.word	0x24002adc
 800f734:	240000b4 	.word	0x240000b4
 800f738:	24002ad8 	.word	0x24002ad8

0800f73c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800f73c:	b480      	push	{r7}
 800f73e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800f740:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800f742:	4618      	mov	r0, r3
 800f744:	46bd      	mov	sp, r7
 800f746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74a:	4770      	bx	lr

0800f74c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b082      	sub	sp, #8
 800f750:	af00      	add	r7, sp, #0
 800f752:	4603      	mov	r3, r0
 800f754:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800f756:	79fb      	ldrb	r3, [r7, #7]
 800f758:	4618      	mov	r0, r3
 800f75a:	f000 f9fd 	bl	800fb58 <SD_disk_initialize>
 800f75e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800f760:	4618      	mov	r0, r3
 800f762:	3708      	adds	r7, #8
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}

0800f768 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b082      	sub	sp, #8
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	4603      	mov	r3, r0
 800f770:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800f772:	79fb      	ldrb	r3, [r7, #7]
 800f774:	4618      	mov	r0, r3
 800f776:	f000 fad5 	bl	800fd24 <SD_disk_status>
 800f77a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800f77c:	4618      	mov	r0, r3
 800f77e:	3708      	adds	r7, #8
 800f780:	46bd      	mov	sp, r7
 800f782:	bd80      	pop	{r7, pc}

0800f784 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b084      	sub	sp, #16
 800f788:	af00      	add	r7, sp, #0
 800f78a:	60b9      	str	r1, [r7, #8]
 800f78c:	607a      	str	r2, [r7, #4]
 800f78e:	603b      	str	r3, [r7, #0]
 800f790:	4603      	mov	r3, r0
 800f792:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800f794:	7bf8      	ldrb	r0, [r7, #15]
 800f796:	683b      	ldr	r3, [r7, #0]
 800f798:	687a      	ldr	r2, [r7, #4]
 800f79a:	68b9      	ldr	r1, [r7, #8]
 800f79c:	f000 fad8 	bl	800fd50 <SD_disk_read>
 800f7a0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	3710      	adds	r7, #16
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	bd80      	pop	{r7, pc}

0800f7aa <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800f7aa:	b580      	push	{r7, lr}
 800f7ac:	b084      	sub	sp, #16
 800f7ae:	af00      	add	r7, sp, #0
 800f7b0:	60b9      	str	r1, [r7, #8]
 800f7b2:	607a      	str	r2, [r7, #4]
 800f7b4:	603b      	str	r3, [r7, #0]
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800f7ba:	7bf8      	ldrb	r0, [r7, #15]
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	687a      	ldr	r2, [r7, #4]
 800f7c0:	68b9      	ldr	r1, [r7, #8]
 800f7c2:	f000 fb2f 	bl	800fe24 <SD_disk_write>
 800f7c6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	3710      	adds	r7, #16
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	bd80      	pop	{r7, pc}

0800f7d0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b082      	sub	sp, #8
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	603a      	str	r2, [r7, #0]
 800f7da:	71fb      	strb	r3, [r7, #7]
 800f7dc:	460b      	mov	r3, r1
 800f7de:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800f7e0:	79b9      	ldrb	r1, [r7, #6]
 800f7e2:	79fb      	ldrb	r3, [r7, #7]
 800f7e4:	683a      	ldr	r2, [r7, #0]
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f000 fba0 	bl	800ff2c <SD_disk_ioctl>
 800f7ec:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	3708      	adds	r7, #8
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd80      	pop	{r7, pc}
	...

0800f7f8 <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	2110      	movs	r1, #16
 800f800:	4802      	ldr	r0, [pc, #8]	@ (800f80c <SELECT+0x14>)
 800f802:	f7f8 fb51 	bl	8007ea8 <HAL_GPIO_WritePin>
}
 800f806:	bf00      	nop
 800f808:	bd80      	pop	{r7, pc}
 800f80a:	bf00      	nop
 800f80c:	58020000 	.word	0x58020000

0800f810 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800f814:	2201      	movs	r2, #1
 800f816:	2110      	movs	r1, #16
 800f818:	4802      	ldr	r0, [pc, #8]	@ (800f824 <DESELECT+0x14>)
 800f81a:	f7f8 fb45 	bl	8007ea8 <HAL_GPIO_WritePin>
}
 800f81e:	bf00      	nop
 800f820:	bd80      	pop	{r7, pc}
 800f822:	bf00      	nop
 800f824:	58020000 	.word	0x58020000

0800f828 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b082      	sub	sp, #8
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	4603      	mov	r3, r0
 800f830:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800f832:	bf00      	nop
 800f834:	4b08      	ldr	r3, [pc, #32]	@ (800f858 <SPI_TxByte+0x30>)
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	695b      	ldr	r3, [r3, #20]
 800f83a:	f003 0302 	and.w	r3, r3, #2
 800f83e:	2b02      	cmp	r3, #2
 800f840:	d1f8      	bne.n	800f834 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800f842:	1df9      	adds	r1, r7, #7
 800f844:	2364      	movs	r3, #100	@ 0x64
 800f846:	2201      	movs	r2, #1
 800f848:	4803      	ldr	r0, [pc, #12]	@ (800f858 <SPI_TxByte+0x30>)
 800f84a:	f7fb fb77 	bl	800af3c <HAL_SPI_Transmit>
}
 800f84e:	bf00      	nop
 800f850:	3708      	adds	r7, #8
 800f852:	46bd      	mov	sp, r7
 800f854:	bd80      	pop	{r7, pc}
 800f856:	bf00      	nop
 800f858:	240024bc 	.word	0x240024bc

0800f85c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b082      	sub	sp, #8
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
 800f864:	460b      	mov	r3, r1
 800f866:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800f868:	bf00      	nop
 800f86a:	4b08      	ldr	r3, [pc, #32]	@ (800f88c <SPI_TxBuffer+0x30>)
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	695b      	ldr	r3, [r3, #20]
 800f870:	f003 0302 	and.w	r3, r3, #2
 800f874:	2b02      	cmp	r3, #2
 800f876:	d1f8      	bne.n	800f86a <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800f878:	887a      	ldrh	r2, [r7, #2]
 800f87a:	2364      	movs	r3, #100	@ 0x64
 800f87c:	6879      	ldr	r1, [r7, #4]
 800f87e:	4803      	ldr	r0, [pc, #12]	@ (800f88c <SPI_TxBuffer+0x30>)
 800f880:	f7fb fb5c 	bl	800af3c <HAL_SPI_Transmit>
}
 800f884:	bf00      	nop
 800f886:	3708      	adds	r7, #8
 800f888:	46bd      	mov	sp, r7
 800f88a:	bd80      	pop	{r7, pc}
 800f88c:	240024bc 	.word	0x240024bc

0800f890 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b084      	sub	sp, #16
 800f894:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800f896:	23ff      	movs	r3, #255	@ 0xff
 800f898:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800f89a:	bf00      	nop
 800f89c:	4b09      	ldr	r3, [pc, #36]	@ (800f8c4 <SPI_RxByte+0x34>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	695b      	ldr	r3, [r3, #20]
 800f8a2:	f003 0302 	and.w	r3, r3, #2
 800f8a6:	2b02      	cmp	r3, #2
 800f8a8:	d1f8      	bne.n	800f89c <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800f8aa:	1dba      	adds	r2, r7, #6
 800f8ac:	1df9      	adds	r1, r7, #7
 800f8ae:	2364      	movs	r3, #100	@ 0x64
 800f8b0:	9300      	str	r3, [sp, #0]
 800f8b2:	2301      	movs	r3, #1
 800f8b4:	4803      	ldr	r0, [pc, #12]	@ (800f8c4 <SPI_RxByte+0x34>)
 800f8b6:	f7fb ffa1 	bl	800b7fc <HAL_SPI_TransmitReceive>
  return data;
 800f8ba:	79bb      	ldrb	r3, [r7, #6]
}
 800f8bc:	4618      	mov	r0, r3
 800f8be:	3708      	adds	r7, #8
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bd80      	pop	{r7, pc}
 800f8c4:	240024bc 	.word	0x240024bc

0800f8c8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b082      	sub	sp, #8
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800f8d0:	f7ff ffde 	bl	800f890 <SPI_RxByte>
 800f8d4:	4603      	mov	r3, r0
 800f8d6:	461a      	mov	r2, r3
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	701a      	strb	r2, [r3, #0]
}
 800f8dc:	bf00      	nop
 800f8de:	3708      	adds	r7, #8
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}

0800f8e4 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b082      	sub	sp, #8
 800f8e8:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 800f8ea:	4b0a      	ldr	r3, [pc, #40]	@ (800f914 <SD_ReadyWait+0x30>)
 800f8ec:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800f8f0:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 800f8f2:	f7ff ffcd 	bl	800f890 <SPI_RxByte>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800f8fa:	79fb      	ldrb	r3, [r7, #7]
 800f8fc:	2bff      	cmp	r3, #255	@ 0xff
 800f8fe:	d003      	beq.n	800f908 <SD_ReadyWait+0x24>
 800f900:	4b04      	ldr	r3, [pc, #16]	@ (800f914 <SD_ReadyWait+0x30>)
 800f902:	881b      	ldrh	r3, [r3, #0]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d1f4      	bne.n	800f8f2 <SD_ReadyWait+0xe>
  return res;
 800f908:	79fb      	ldrb	r3, [r7, #7]
}
 800f90a:	4618      	mov	r0, r3
 800f90c:	3708      	adds	r7, #8
 800f90e:	46bd      	mov	sp, r7
 800f910:	bd80      	pop	{r7, pc}
 800f912:	bf00      	nop
 800f914:	24002ae2 	.word	0x24002ae2

0800f918 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b084      	sub	sp, #16
 800f91c:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 800f91e:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800f922:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 800f924:	f7ff ff74 	bl	800f810 <DESELECT>
  for(int i = 0; i < 10; i++)
 800f928:	2300      	movs	r3, #0
 800f92a:	60bb      	str	r3, [r7, #8]
 800f92c:	e005      	b.n	800f93a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800f92e:	20ff      	movs	r0, #255	@ 0xff
 800f930:	f7ff ff7a 	bl	800f828 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800f934:	68bb      	ldr	r3, [r7, #8]
 800f936:	3301      	adds	r3, #1
 800f938:	60bb      	str	r3, [r7, #8]
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	2b09      	cmp	r3, #9
 800f93e:	ddf6      	ble.n	800f92e <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 800f940:	f7ff ff5a 	bl	800f7f8 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 800f944:	2340      	movs	r3, #64	@ 0x40
 800f946:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 800f948:	2300      	movs	r3, #0
 800f94a:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 800f94c:	2300      	movs	r3, #0
 800f94e:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 800f950:	2300      	movs	r3, #0
 800f952:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 800f954:	2300      	movs	r3, #0
 800f956:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 800f958:	2395      	movs	r3, #149	@ 0x95
 800f95a:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 800f95c:	463b      	mov	r3, r7
 800f95e:	2106      	movs	r1, #6
 800f960:	4618      	mov	r0, r3
 800f962:	f7ff ff7b 	bl	800f85c <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 800f966:	e002      	b.n	800f96e <SD_PowerOn+0x56>
  {
    cnt--;
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	3b01      	subs	r3, #1
 800f96c:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 800f96e:	f7ff ff8f 	bl	800f890 <SPI_RxByte>
 800f972:	4603      	mov	r3, r0
 800f974:	2b01      	cmp	r3, #1
 800f976:	d002      	beq.n	800f97e <SD_PowerOn+0x66>
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d1f4      	bne.n	800f968 <SD_PowerOn+0x50>
  }
  DESELECT();
 800f97e:	f7ff ff47 	bl	800f810 <DESELECT>
  SPI_TxByte(0XFF);
 800f982:	20ff      	movs	r0, #255	@ 0xff
 800f984:	f7ff ff50 	bl	800f828 <SPI_TxByte>
  PowerFlag = 1;
 800f988:	4b03      	ldr	r3, [pc, #12]	@ (800f998 <SD_PowerOn+0x80>)
 800f98a:	2201      	movs	r2, #1
 800f98c:	701a      	strb	r2, [r3, #0]
}
 800f98e:	bf00      	nop
 800f990:	3710      	adds	r7, #16
 800f992:	46bd      	mov	sp, r7
 800f994:	bd80      	pop	{r7, pc}
 800f996:	bf00      	nop
 800f998:	24002ae5 	.word	0x24002ae5

0800f99c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800f99c:	b480      	push	{r7}
 800f99e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800f9a0:	4b03      	ldr	r3, [pc, #12]	@ (800f9b0 <SD_PowerOff+0x14>)
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	701a      	strb	r2, [r3, #0]
}
 800f9a6:	bf00      	nop
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ae:	4770      	bx	lr
 800f9b0:	24002ae5 	.word	0x24002ae5

0800f9b4 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800f9b4:	b480      	push	{r7}
 800f9b6:	af00      	add	r7, sp, #0
  return PowerFlag;
 800f9b8:	4b03      	ldr	r3, [pc, #12]	@ (800f9c8 <SD_CheckPower+0x14>)
 800f9ba:	781b      	ldrb	r3, [r3, #0]
}
 800f9bc:	4618      	mov	r0, r3
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c4:	4770      	bx	lr
 800f9c6:	bf00      	nop
 800f9c8:	24002ae5 	.word	0x24002ae5

0800f9cc <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b084      	sub	sp, #16
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
 800f9d4:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 800f9d6:	4b13      	ldr	r3, [pc, #76]	@ (800fa24 <SD_RxDataBlock+0x58>)
 800f9d8:	22c8      	movs	r2, #200	@ 0xc8
 800f9da:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 800f9dc:	f7ff ff58 	bl	800f890 <SPI_RxByte>
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800f9e4:	7bfb      	ldrb	r3, [r7, #15]
 800f9e6:	2bff      	cmp	r3, #255	@ 0xff
 800f9e8:	d103      	bne.n	800f9f2 <SD_RxDataBlock+0x26>
 800f9ea:	4b0e      	ldr	r3, [pc, #56]	@ (800fa24 <SD_RxDataBlock+0x58>)
 800f9ec:	881b      	ldrh	r3, [r3, #0]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d1f4      	bne.n	800f9dc <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 800f9f2:	7bfb      	ldrb	r3, [r7, #15]
 800f9f4:	2bfe      	cmp	r3, #254	@ 0xfe
 800f9f6:	d001      	beq.n	800f9fc <SD_RxDataBlock+0x30>
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	e00f      	b.n	800fa1c <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	1c5a      	adds	r2, r3, #1
 800fa00:	607a      	str	r2, [r7, #4]
 800fa02:	4618      	mov	r0, r3
 800fa04:	f7ff ff60 	bl	800f8c8 <SPI_RxBytePtr>
  } while(len--);
 800fa08:	683b      	ldr	r3, [r7, #0]
 800fa0a:	1e5a      	subs	r2, r3, #1
 800fa0c:	603a      	str	r2, [r7, #0]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d1f4      	bne.n	800f9fc <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 800fa12:	f7ff ff3d 	bl	800f890 <SPI_RxByte>
  SPI_RxByte();
 800fa16:	f7ff ff3b 	bl	800f890 <SPI_RxByte>
  return TRUE;
 800fa1a:	2301      	movs	r3, #1
}
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	3710      	adds	r7, #16
 800fa20:	46bd      	mov	sp, r7
 800fa22:	bd80      	pop	{r7, pc}
 800fa24:	24002ae0 	.word	0x24002ae0

0800fa28 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b084      	sub	sp, #16
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
 800fa30:	460b      	mov	r3, r1
 800fa32:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 800fa34:	2300      	movs	r3, #0
 800fa36:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 800fa38:	f7ff ff54 	bl	800f8e4 <SD_ReadyWait>
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	2bff      	cmp	r3, #255	@ 0xff
 800fa40:	d001      	beq.n	800fa46 <SD_TxDataBlock+0x1e>
 800fa42:	2300      	movs	r3, #0
 800fa44:	e02f      	b.n	800faa6 <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 800fa46:	78fb      	ldrb	r3, [r7, #3]
 800fa48:	4618      	mov	r0, r3
 800fa4a:	f7ff feed 	bl	800f828 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 800fa4e:	78fb      	ldrb	r3, [r7, #3]
 800fa50:	2bfd      	cmp	r3, #253	@ 0xfd
 800fa52:	d020      	beq.n	800fa96 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 800fa54:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	f7ff feff 	bl	800f85c <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 800fa5e:	f7ff ff17 	bl	800f890 <SPI_RxByte>
    SPI_RxByte();
 800fa62:	f7ff ff15 	bl	800f890 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 800fa66:	e00b      	b.n	800fa80 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 800fa68:	f7ff ff12 	bl	800f890 <SPI_RxByte>
 800fa6c:	4603      	mov	r3, r0
 800fa6e:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 800fa70:	7bfb      	ldrb	r3, [r7, #15]
 800fa72:	f003 031f 	and.w	r3, r3, #31
 800fa76:	2b05      	cmp	r3, #5
 800fa78:	d006      	beq.n	800fa88 <SD_TxDataBlock+0x60>
      i++;
 800fa7a:	7bbb      	ldrb	r3, [r7, #14]
 800fa7c:	3301      	adds	r3, #1
 800fa7e:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 800fa80:	7bbb      	ldrb	r3, [r7, #14]
 800fa82:	2b40      	cmp	r3, #64	@ 0x40
 800fa84:	d9f0      	bls.n	800fa68 <SD_TxDataBlock+0x40>
 800fa86:	e000      	b.n	800fa8a <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 800fa88:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800fa8a:	bf00      	nop
 800fa8c:	f7ff ff00 	bl	800f890 <SPI_RxByte>
 800fa90:	4603      	mov	r3, r0
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d0fa      	beq.n	800fa8c <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 800fa96:	7bfb      	ldrb	r3, [r7, #15]
 800fa98:	f003 031f 	and.w	r3, r3, #31
 800fa9c:	2b05      	cmp	r3, #5
 800fa9e:	d101      	bne.n	800faa4 <SD_TxDataBlock+0x7c>
 800faa0:	2301      	movs	r3, #1
 800faa2:	e000      	b.n	800faa6 <SD_TxDataBlock+0x7e>

  return FALSE;
 800faa4:	2300      	movs	r3, #0
}
 800faa6:	4618      	mov	r0, r3
 800faa8:	3710      	adds	r7, #16
 800faaa:	46bd      	mov	sp, r7
 800faac:	bd80      	pop	{r7, pc}

0800faae <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800faae:	b580      	push	{r7, lr}
 800fab0:	b084      	sub	sp, #16
 800fab2:	af00      	add	r7, sp, #0
 800fab4:	4603      	mov	r3, r0
 800fab6:	6039      	str	r1, [r7, #0]
 800fab8:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800faba:	f7ff ff13 	bl	800f8e4 <SD_ReadyWait>
 800fabe:	4603      	mov	r3, r0
 800fac0:	2bff      	cmp	r3, #255	@ 0xff
 800fac2:	d001      	beq.n	800fac8 <SD_SendCmd+0x1a>
 800fac4:	23ff      	movs	r3, #255	@ 0xff
 800fac6:	e042      	b.n	800fb4e <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 800fac8:	79fb      	ldrb	r3, [r7, #7]
 800faca:	4618      	mov	r0, r3
 800facc:	f7ff feac 	bl	800f828 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 800fad0:	683b      	ldr	r3, [r7, #0]
 800fad2:	0e1b      	lsrs	r3, r3, #24
 800fad4:	b2db      	uxtb	r3, r3
 800fad6:	4618      	mov	r0, r3
 800fad8:	f7ff fea6 	bl	800f828 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 800fadc:	683b      	ldr	r3, [r7, #0]
 800fade:	0c1b      	lsrs	r3, r3, #16
 800fae0:	b2db      	uxtb	r3, r3
 800fae2:	4618      	mov	r0, r3
 800fae4:	f7ff fea0 	bl	800f828 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	0a1b      	lsrs	r3, r3, #8
 800faec:	b2db      	uxtb	r3, r3
 800faee:	4618      	mov	r0, r3
 800faf0:	f7ff fe9a 	bl	800f828 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	b2db      	uxtb	r3, r3
 800faf8:	4618      	mov	r0, r3
 800fafa:	f7ff fe95 	bl	800f828 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 800fafe:	79fb      	ldrb	r3, [r7, #7]
 800fb00:	2b40      	cmp	r3, #64	@ 0x40
 800fb02:	d102      	bne.n	800fb0a <SD_SendCmd+0x5c>
 800fb04:	2395      	movs	r3, #149	@ 0x95
 800fb06:	73fb      	strb	r3, [r7, #15]
 800fb08:	e007      	b.n	800fb1a <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800fb0a:	79fb      	ldrb	r3, [r7, #7]
 800fb0c:	2b48      	cmp	r3, #72	@ 0x48
 800fb0e:	d102      	bne.n	800fb16 <SD_SendCmd+0x68>
 800fb10:	2387      	movs	r3, #135	@ 0x87
 800fb12:	73fb      	strb	r3, [r7, #15]
 800fb14:	e001      	b.n	800fb1a <SD_SendCmd+0x6c>
  else crc = 1;
 800fb16:	2301      	movs	r3, #1
 800fb18:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 800fb1a:	7bfb      	ldrb	r3, [r7, #15]
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f7ff fe83 	bl	800f828 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 800fb22:	79fb      	ldrb	r3, [r7, #7]
 800fb24:	2b4c      	cmp	r3, #76	@ 0x4c
 800fb26:	d101      	bne.n	800fb2c <SD_SendCmd+0x7e>
 800fb28:	f7ff feb2 	bl	800f890 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 800fb2c:	230a      	movs	r3, #10
 800fb2e:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 800fb30:	f7ff feae 	bl	800f890 <SPI_RxByte>
 800fb34:	4603      	mov	r3, r0
 800fb36:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800fb38:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	da05      	bge.n	800fb4c <SD_SendCmd+0x9e>
 800fb40:	7bbb      	ldrb	r3, [r7, #14]
 800fb42:	3b01      	subs	r3, #1
 800fb44:	73bb      	strb	r3, [r7, #14]
 800fb46:	7bbb      	ldrb	r3, [r7, #14]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d1f1      	bne.n	800fb30 <SD_SendCmd+0x82>

  return res;
 800fb4c:	7b7b      	ldrb	r3, [r7, #13]
}
 800fb4e:	4618      	mov	r0, r3
 800fb50:	3710      	adds	r7, #16
 800fb52:	46bd      	mov	sp, r7
 800fb54:	bd80      	pop	{r7, pc}
	...

0800fb58 <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800fb58:	b590      	push	{r4, r7, lr}
 800fb5a:	b085      	sub	sp, #20
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	4603      	mov	r3, r0
 800fb60:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 800fb62:	79fb      	ldrb	r3, [r7, #7]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d001      	beq.n	800fb6c <SD_disk_initialize+0x14>
 800fb68:	2301      	movs	r3, #1
 800fb6a:	e0d1      	b.n	800fd10 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 800fb6c:	4b6a      	ldr	r3, [pc, #424]	@ (800fd18 <SD_disk_initialize+0x1c0>)
 800fb6e:	781b      	ldrb	r3, [r3, #0]
 800fb70:	b2db      	uxtb	r3, r3
 800fb72:	f003 0302 	and.w	r3, r3, #2
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d003      	beq.n	800fb82 <SD_disk_initialize+0x2a>
 800fb7a:	4b67      	ldr	r3, [pc, #412]	@ (800fd18 <SD_disk_initialize+0x1c0>)
 800fb7c:	781b      	ldrb	r3, [r3, #0]
 800fb7e:	b2db      	uxtb	r3, r3
 800fb80:	e0c6      	b.n	800fd10 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 800fb82:	f7ff fec9 	bl	800f918 <SD_PowerOn>
  /* slave select */
  SELECT();
 800fb86:	f7ff fe37 	bl	800f7f8 <SELECT>
  /* check disk type */
  type = 0;
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800fb8e:	2100      	movs	r1, #0
 800fb90:	2040      	movs	r0, #64	@ 0x40
 800fb92:	f7ff ff8c 	bl	800faae <SD_SendCmd>
 800fb96:	4603      	mov	r3, r0
 800fb98:	2b01      	cmp	r3, #1
 800fb9a:	f040 80a1 	bne.w	800fce0 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800fb9e:	4b5f      	ldr	r3, [pc, #380]	@ (800fd1c <SD_disk_initialize+0x1c4>)
 800fba0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800fba4:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800fba6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800fbaa:	2048      	movs	r0, #72	@ 0x48
 800fbac:	f7ff ff7f 	bl	800faae <SD_SendCmd>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	2b01      	cmp	r3, #1
 800fbb4:	d155      	bne.n	800fc62 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	73fb      	strb	r3, [r7, #15]
 800fbba:	e00c      	b.n	800fbd6 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 800fbbc:	7bfc      	ldrb	r4, [r7, #15]
 800fbbe:	f7ff fe67 	bl	800f890 <SPI_RxByte>
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	461a      	mov	r2, r3
 800fbc6:	f104 0310 	add.w	r3, r4, #16
 800fbca:	443b      	add	r3, r7
 800fbcc:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800fbd0:	7bfb      	ldrb	r3, [r7, #15]
 800fbd2:	3301      	adds	r3, #1
 800fbd4:	73fb      	strb	r3, [r7, #15]
 800fbd6:	7bfb      	ldrb	r3, [r7, #15]
 800fbd8:	2b03      	cmp	r3, #3
 800fbda:	d9ef      	bls.n	800fbbc <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800fbdc:	7abb      	ldrb	r3, [r7, #10]
 800fbde:	2b01      	cmp	r3, #1
 800fbe0:	d17e      	bne.n	800fce0 <SD_disk_initialize+0x188>
 800fbe2:	7afb      	ldrb	r3, [r7, #11]
 800fbe4:	2baa      	cmp	r3, #170	@ 0xaa
 800fbe6:	d17b      	bne.n	800fce0 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800fbe8:	2100      	movs	r1, #0
 800fbea:	2077      	movs	r0, #119	@ 0x77
 800fbec:	f7ff ff5f 	bl	800faae <SD_SendCmd>
 800fbf0:	4603      	mov	r3, r0
 800fbf2:	2b01      	cmp	r3, #1
 800fbf4:	d807      	bhi.n	800fc06 <SD_disk_initialize+0xae>
 800fbf6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800fbfa:	2069      	movs	r0, #105	@ 0x69
 800fbfc:	f7ff ff57 	bl	800faae <SD_SendCmd>
 800fc00:	4603      	mov	r3, r0
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d004      	beq.n	800fc10 <SD_disk_initialize+0xb8>
        } while (Timer1);
 800fc06:	4b45      	ldr	r3, [pc, #276]	@ (800fd1c <SD_disk_initialize+0x1c4>)
 800fc08:	881b      	ldrh	r3, [r3, #0]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d1ec      	bne.n	800fbe8 <SD_disk_initialize+0x90>
 800fc0e:	e000      	b.n	800fc12 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800fc10:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800fc12:	4b42      	ldr	r3, [pc, #264]	@ (800fd1c <SD_disk_initialize+0x1c4>)
 800fc14:	881b      	ldrh	r3, [r3, #0]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d062      	beq.n	800fce0 <SD_disk_initialize+0x188>
 800fc1a:	2100      	movs	r1, #0
 800fc1c:	207a      	movs	r0, #122	@ 0x7a
 800fc1e:	f7ff ff46 	bl	800faae <SD_SendCmd>
 800fc22:	4603      	mov	r3, r0
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d15b      	bne.n	800fce0 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 800fc28:	2300      	movs	r3, #0
 800fc2a:	73fb      	strb	r3, [r7, #15]
 800fc2c:	e00c      	b.n	800fc48 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 800fc2e:	7bfc      	ldrb	r4, [r7, #15]
 800fc30:	f7ff fe2e 	bl	800f890 <SPI_RxByte>
 800fc34:	4603      	mov	r3, r0
 800fc36:	461a      	mov	r2, r3
 800fc38:	f104 0310 	add.w	r3, r4, #16
 800fc3c:	443b      	add	r3, r7
 800fc3e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800fc42:	7bfb      	ldrb	r3, [r7, #15]
 800fc44:	3301      	adds	r3, #1
 800fc46:	73fb      	strb	r3, [r7, #15]
 800fc48:	7bfb      	ldrb	r3, [r7, #15]
 800fc4a:	2b03      	cmp	r3, #3
 800fc4c:	d9ef      	bls.n	800fc2e <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800fc4e:	7a3b      	ldrb	r3, [r7, #8]
 800fc50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d001      	beq.n	800fc5c <SD_disk_initialize+0x104>
 800fc58:	230c      	movs	r3, #12
 800fc5a:	e000      	b.n	800fc5e <SD_disk_initialize+0x106>
 800fc5c:	2304      	movs	r3, #4
 800fc5e:	73bb      	strb	r3, [r7, #14]
 800fc60:	e03e      	b.n	800fce0 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800fc62:	2100      	movs	r1, #0
 800fc64:	2077      	movs	r0, #119	@ 0x77
 800fc66:	f7ff ff22 	bl	800faae <SD_SendCmd>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	2b01      	cmp	r3, #1
 800fc6e:	d808      	bhi.n	800fc82 <SD_disk_initialize+0x12a>
 800fc70:	2100      	movs	r1, #0
 800fc72:	2069      	movs	r0, #105	@ 0x69
 800fc74:	f7ff ff1b 	bl	800faae <SD_SendCmd>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	2b01      	cmp	r3, #1
 800fc7c:	d801      	bhi.n	800fc82 <SD_disk_initialize+0x12a>
 800fc7e:	2302      	movs	r3, #2
 800fc80:	e000      	b.n	800fc84 <SD_disk_initialize+0x12c>
 800fc82:	2301      	movs	r3, #1
 800fc84:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 800fc86:	7bbb      	ldrb	r3, [r7, #14]
 800fc88:	2b02      	cmp	r3, #2
 800fc8a:	d10e      	bne.n	800fcaa <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800fc8c:	2100      	movs	r1, #0
 800fc8e:	2077      	movs	r0, #119	@ 0x77
 800fc90:	f7ff ff0d 	bl	800faae <SD_SendCmd>
 800fc94:	4603      	mov	r3, r0
 800fc96:	2b01      	cmp	r3, #1
 800fc98:	d80e      	bhi.n	800fcb8 <SD_disk_initialize+0x160>
 800fc9a:	2100      	movs	r1, #0
 800fc9c:	2069      	movs	r0, #105	@ 0x69
 800fc9e:	f7ff ff06 	bl	800faae <SD_SendCmd>
 800fca2:	4603      	mov	r3, r0
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d107      	bne.n	800fcb8 <SD_disk_initialize+0x160>
 800fca8:	e00c      	b.n	800fcc4 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800fcaa:	2100      	movs	r1, #0
 800fcac:	2041      	movs	r0, #65	@ 0x41
 800fcae:	f7ff fefe 	bl	800faae <SD_SendCmd>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d004      	beq.n	800fcc2 <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 800fcb8:	4b18      	ldr	r3, [pc, #96]	@ (800fd1c <SD_disk_initialize+0x1c4>)
 800fcba:	881b      	ldrh	r3, [r3, #0]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d1e2      	bne.n	800fc86 <SD_disk_initialize+0x12e>
 800fcc0:	e000      	b.n	800fcc4 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800fcc2:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800fcc4:	4b15      	ldr	r3, [pc, #84]	@ (800fd1c <SD_disk_initialize+0x1c4>)
 800fcc6:	881b      	ldrh	r3, [r3, #0]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d007      	beq.n	800fcdc <SD_disk_initialize+0x184>
 800fccc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800fcd0:	2050      	movs	r0, #80	@ 0x50
 800fcd2:	f7ff feec 	bl	800faae <SD_SendCmd>
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d001      	beq.n	800fce0 <SD_disk_initialize+0x188>
 800fcdc:	2300      	movs	r3, #0
 800fcde:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 800fce0:	4a0f      	ldr	r2, [pc, #60]	@ (800fd20 <SD_disk_initialize+0x1c8>)
 800fce2:	7bbb      	ldrb	r3, [r7, #14]
 800fce4:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 800fce6:	f7ff fd93 	bl	800f810 <DESELECT>
  SPI_RxByte();
 800fcea:	f7ff fdd1 	bl	800f890 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 800fcee:	7bbb      	ldrb	r3, [r7, #14]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d008      	beq.n	800fd06 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 800fcf4:	4b08      	ldr	r3, [pc, #32]	@ (800fd18 <SD_disk_initialize+0x1c0>)
 800fcf6:	781b      	ldrb	r3, [r3, #0]
 800fcf8:	b2db      	uxtb	r3, r3
 800fcfa:	f023 0301 	bic.w	r3, r3, #1
 800fcfe:	b2da      	uxtb	r2, r3
 800fd00:	4b05      	ldr	r3, [pc, #20]	@ (800fd18 <SD_disk_initialize+0x1c0>)
 800fd02:	701a      	strb	r2, [r3, #0]
 800fd04:	e001      	b.n	800fd0a <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800fd06:	f7ff fe49 	bl	800f99c <SD_PowerOff>
  }
  return Stat;
 800fd0a:	4b03      	ldr	r3, [pc, #12]	@ (800fd18 <SD_disk_initialize+0x1c0>)
 800fd0c:	781b      	ldrb	r3, [r3, #0]
 800fd0e:	b2db      	uxtb	r3, r3
}
 800fd10:	4618      	mov	r0, r3
 800fd12:	3714      	adds	r7, #20
 800fd14:	46bd      	mov	sp, r7
 800fd16:	bd90      	pop	{r4, r7, pc}
 800fd18:	240000c8 	.word	0x240000c8
 800fd1c:	24002ae0 	.word	0x24002ae0
 800fd20:	24002ae4 	.word	0x24002ae4

0800fd24 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800fd24:	b480      	push	{r7}
 800fd26:	b083      	sub	sp, #12
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 800fd2e:	79fb      	ldrb	r3, [r7, #7]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d001      	beq.n	800fd38 <SD_disk_status+0x14>
 800fd34:	2301      	movs	r3, #1
 800fd36:	e002      	b.n	800fd3e <SD_disk_status+0x1a>
  return Stat;
 800fd38:	4b04      	ldr	r3, [pc, #16]	@ (800fd4c <SD_disk_status+0x28>)
 800fd3a:	781b      	ldrb	r3, [r3, #0]
 800fd3c:	b2db      	uxtb	r3, r3
}
 800fd3e:	4618      	mov	r0, r3
 800fd40:	370c      	adds	r7, #12
 800fd42:	46bd      	mov	sp, r7
 800fd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd48:	4770      	bx	lr
 800fd4a:	bf00      	nop
 800fd4c:	240000c8 	.word	0x240000c8

0800fd50 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b084      	sub	sp, #16
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	60b9      	str	r1, [r7, #8]
 800fd58:	607a      	str	r2, [r7, #4]
 800fd5a:	603b      	str	r3, [r7, #0]
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800fd60:	7bfb      	ldrb	r3, [r7, #15]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d102      	bne.n	800fd6c <SD_disk_read+0x1c>
 800fd66:	683b      	ldr	r3, [r7, #0]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d101      	bne.n	800fd70 <SD_disk_read+0x20>
 800fd6c:	2304      	movs	r3, #4
 800fd6e:	e051      	b.n	800fe14 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800fd70:	4b2a      	ldr	r3, [pc, #168]	@ (800fe1c <SD_disk_read+0xcc>)
 800fd72:	781b      	ldrb	r3, [r3, #0]
 800fd74:	b2db      	uxtb	r3, r3
 800fd76:	f003 0301 	and.w	r3, r3, #1
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d001      	beq.n	800fd82 <SD_disk_read+0x32>
 800fd7e:	2303      	movs	r3, #3
 800fd80:	e048      	b.n	800fe14 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800fd82:	4b27      	ldr	r3, [pc, #156]	@ (800fe20 <SD_disk_read+0xd0>)
 800fd84:	781b      	ldrb	r3, [r3, #0]
 800fd86:	f003 0304 	and.w	r3, r3, #4
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d102      	bne.n	800fd94 <SD_disk_read+0x44>
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	025b      	lsls	r3, r3, #9
 800fd92:	607b      	str	r3, [r7, #4]

  SELECT();
 800fd94:	f7ff fd30 	bl	800f7f8 <SELECT>

  if (count == 1)
 800fd98:	683b      	ldr	r3, [r7, #0]
 800fd9a:	2b01      	cmp	r3, #1
 800fd9c:	d111      	bne.n	800fdc2 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800fd9e:	6879      	ldr	r1, [r7, #4]
 800fda0:	2051      	movs	r0, #81	@ 0x51
 800fda2:	f7ff fe84 	bl	800faae <SD_SendCmd>
 800fda6:	4603      	mov	r3, r0
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d129      	bne.n	800fe00 <SD_disk_read+0xb0>
 800fdac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800fdb0:	68b8      	ldr	r0, [r7, #8]
 800fdb2:	f7ff fe0b 	bl	800f9cc <SD_RxDataBlock>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d021      	beq.n	800fe00 <SD_disk_read+0xb0>
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	603b      	str	r3, [r7, #0]
 800fdc0:	e01e      	b.n	800fe00 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 800fdc2:	6879      	ldr	r1, [r7, #4]
 800fdc4:	2052      	movs	r0, #82	@ 0x52
 800fdc6:	f7ff fe72 	bl	800faae <SD_SendCmd>
 800fdca:	4603      	mov	r3, r0
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d117      	bne.n	800fe00 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 800fdd0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800fdd4:	68b8      	ldr	r0, [r7, #8]
 800fdd6:	f7ff fdf9 	bl	800f9cc <SD_RxDataBlock>
 800fdda:	4603      	mov	r3, r0
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d00a      	beq.n	800fdf6 <SD_disk_read+0xa6>
        buff += 512;
 800fde0:	68bb      	ldr	r3, [r7, #8]
 800fde2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800fde6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800fde8:	683b      	ldr	r3, [r7, #0]
 800fdea:	3b01      	subs	r3, #1
 800fdec:	603b      	str	r3, [r7, #0]
 800fdee:	683b      	ldr	r3, [r7, #0]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d1ed      	bne.n	800fdd0 <SD_disk_read+0x80>
 800fdf4:	e000      	b.n	800fdf8 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 800fdf6:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 800fdf8:	2100      	movs	r1, #0
 800fdfa:	204c      	movs	r0, #76	@ 0x4c
 800fdfc:	f7ff fe57 	bl	800faae <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 800fe00:	f7ff fd06 	bl	800f810 <DESELECT>
  SPI_RxByte();
 800fe04:	f7ff fd44 	bl	800f890 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	bf14      	ite	ne
 800fe0e:	2301      	movne	r3, #1
 800fe10:	2300      	moveq	r3, #0
 800fe12:	b2db      	uxtb	r3, r3
}
 800fe14:	4618      	mov	r0, r3
 800fe16:	3710      	adds	r7, #16
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bd80      	pop	{r7, pc}
 800fe1c:	240000c8 	.word	0x240000c8
 800fe20:	24002ae4 	.word	0x24002ae4

0800fe24 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b084      	sub	sp, #16
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	60b9      	str	r1, [r7, #8]
 800fe2c:	607a      	str	r2, [r7, #4]
 800fe2e:	603b      	str	r3, [r7, #0]
 800fe30:	4603      	mov	r3, r0
 800fe32:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800fe34:	7bfb      	ldrb	r3, [r7, #15]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d102      	bne.n	800fe40 <SD_disk_write+0x1c>
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d101      	bne.n	800fe44 <SD_disk_write+0x20>
 800fe40:	2304      	movs	r3, #4
 800fe42:	e06b      	b.n	800ff1c <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800fe44:	4b37      	ldr	r3, [pc, #220]	@ (800ff24 <SD_disk_write+0x100>)
 800fe46:	781b      	ldrb	r3, [r3, #0]
 800fe48:	b2db      	uxtb	r3, r3
 800fe4a:	f003 0301 	and.w	r3, r3, #1
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d001      	beq.n	800fe56 <SD_disk_write+0x32>
 800fe52:	2303      	movs	r3, #3
 800fe54:	e062      	b.n	800ff1c <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 800fe56:	4b33      	ldr	r3, [pc, #204]	@ (800ff24 <SD_disk_write+0x100>)
 800fe58:	781b      	ldrb	r3, [r3, #0]
 800fe5a:	b2db      	uxtb	r3, r3
 800fe5c:	f003 0304 	and.w	r3, r3, #4
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d001      	beq.n	800fe68 <SD_disk_write+0x44>
 800fe64:	2302      	movs	r3, #2
 800fe66:	e059      	b.n	800ff1c <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800fe68:	4b2f      	ldr	r3, [pc, #188]	@ (800ff28 <SD_disk_write+0x104>)
 800fe6a:	781b      	ldrb	r3, [r3, #0]
 800fe6c:	f003 0304 	and.w	r3, r3, #4
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d102      	bne.n	800fe7a <SD_disk_write+0x56>
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	025b      	lsls	r3, r3, #9
 800fe78:	607b      	str	r3, [r7, #4]

  SELECT();
 800fe7a:	f7ff fcbd 	bl	800f7f8 <SELECT>

  if (count == 1)
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	2b01      	cmp	r3, #1
 800fe82:	d110      	bne.n	800fea6 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800fe84:	6879      	ldr	r1, [r7, #4]
 800fe86:	2058      	movs	r0, #88	@ 0x58
 800fe88:	f7ff fe11 	bl	800faae <SD_SendCmd>
 800fe8c:	4603      	mov	r3, r0
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d13a      	bne.n	800ff08 <SD_disk_write+0xe4>
 800fe92:	21fe      	movs	r1, #254	@ 0xfe
 800fe94:	68b8      	ldr	r0, [r7, #8]
 800fe96:	f7ff fdc7 	bl	800fa28 <SD_TxDataBlock>
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d033      	beq.n	800ff08 <SD_disk_write+0xe4>
      count = 0;
 800fea0:	2300      	movs	r3, #0
 800fea2:	603b      	str	r3, [r7, #0]
 800fea4:	e030      	b.n	800ff08 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 800fea6:	4b20      	ldr	r3, [pc, #128]	@ (800ff28 <SD_disk_write+0x104>)
 800fea8:	781b      	ldrb	r3, [r3, #0]
 800feaa:	f003 0302 	and.w	r3, r3, #2
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d007      	beq.n	800fec2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800feb2:	2100      	movs	r1, #0
 800feb4:	2077      	movs	r0, #119	@ 0x77
 800feb6:	f7ff fdfa 	bl	800faae <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800feba:	6839      	ldr	r1, [r7, #0]
 800febc:	2057      	movs	r0, #87	@ 0x57
 800febe:	f7ff fdf6 	bl	800faae <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800fec2:	6879      	ldr	r1, [r7, #4]
 800fec4:	2059      	movs	r0, #89	@ 0x59
 800fec6:	f7ff fdf2 	bl	800faae <SD_SendCmd>
 800feca:	4603      	mov	r3, r0
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d11b      	bne.n	800ff08 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800fed0:	21fc      	movs	r1, #252	@ 0xfc
 800fed2:	68b8      	ldr	r0, [r7, #8]
 800fed4:	f7ff fda8 	bl	800fa28 <SD_TxDataBlock>
 800fed8:	4603      	mov	r3, r0
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d00a      	beq.n	800fef4 <SD_disk_write+0xd0>
        buff += 512;
 800fede:	68bb      	ldr	r3, [r7, #8]
 800fee0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800fee4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800fee6:	683b      	ldr	r3, [r7, #0]
 800fee8:	3b01      	subs	r3, #1
 800feea:	603b      	str	r3, [r7, #0]
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d1ee      	bne.n	800fed0 <SD_disk_write+0xac>
 800fef2:	e000      	b.n	800fef6 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800fef4:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 800fef6:	21fd      	movs	r1, #253	@ 0xfd
 800fef8:	2000      	movs	r0, #0
 800fefa:	f7ff fd95 	bl	800fa28 <SD_TxDataBlock>
 800fefe:	4603      	mov	r3, r0
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d101      	bne.n	800ff08 <SD_disk_write+0xe4>
      {
        count = 1;
 800ff04:	2301      	movs	r3, #1
 800ff06:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 800ff08:	f7ff fc82 	bl	800f810 <DESELECT>
  SPI_RxByte();
 800ff0c:	f7ff fcc0 	bl	800f890 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	bf14      	ite	ne
 800ff16:	2301      	movne	r3, #1
 800ff18:	2300      	moveq	r3, #0
 800ff1a:	b2db      	uxtb	r3, r3
}
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	3710      	adds	r7, #16
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd80      	pop	{r7, pc}
 800ff24:	240000c8 	.word	0x240000c8
 800ff28:	24002ae4 	.word	0x24002ae4

0800ff2c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800ff2c:	b590      	push	{r4, r7, lr}
 800ff2e:	b08b      	sub	sp, #44	@ 0x2c
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	4603      	mov	r3, r0
 800ff34:	603a      	str	r2, [r7, #0]
 800ff36:	71fb      	strb	r3, [r7, #7]
 800ff38:	460b      	mov	r3, r1
 800ff3a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 800ff40:	79fb      	ldrb	r3, [r7, #7]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d001      	beq.n	800ff4a <SD_disk_ioctl+0x1e>
 800ff46:	2304      	movs	r3, #4
 800ff48:	e113      	b.n	8010172 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 800ff4a:	2301      	movs	r3, #1
 800ff4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 800ff50:	79bb      	ldrb	r3, [r7, #6]
 800ff52:	2b05      	cmp	r3, #5
 800ff54:	d124      	bne.n	800ffa0 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 800ff56:	6a3b      	ldr	r3, [r7, #32]
 800ff58:	781b      	ldrb	r3, [r3, #0]
 800ff5a:	2b02      	cmp	r3, #2
 800ff5c:	d012      	beq.n	800ff84 <SD_disk_ioctl+0x58>
 800ff5e:	2b02      	cmp	r3, #2
 800ff60:	dc1a      	bgt.n	800ff98 <SD_disk_ioctl+0x6c>
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d002      	beq.n	800ff6c <SD_disk_ioctl+0x40>
 800ff66:	2b01      	cmp	r3, #1
 800ff68:	d006      	beq.n	800ff78 <SD_disk_ioctl+0x4c>
 800ff6a:	e015      	b.n	800ff98 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 800ff6c:	f7ff fd16 	bl	800f99c <SD_PowerOff>
      res = RES_OK;
 800ff70:	2300      	movs	r3, #0
 800ff72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800ff76:	e0fa      	b.n	801016e <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 800ff78:	f7ff fcce 	bl	800f918 <SD_PowerOn>
      res = RES_OK;
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800ff82:	e0f4      	b.n	801016e <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 800ff84:	6a3b      	ldr	r3, [r7, #32]
 800ff86:	1c5c      	adds	r4, r3, #1
 800ff88:	f7ff fd14 	bl	800f9b4 <SD_CheckPower>
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 800ff90:	2300      	movs	r3, #0
 800ff92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800ff96:	e0ea      	b.n	801016e <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 800ff98:	2304      	movs	r3, #4
 800ff9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ff9e:	e0e6      	b.n	801016e <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 800ffa0:	4b76      	ldr	r3, [pc, #472]	@ (801017c <SD_disk_ioctl+0x250>)
 800ffa2:	781b      	ldrb	r3, [r3, #0]
 800ffa4:	b2db      	uxtb	r3, r3
 800ffa6:	f003 0301 	and.w	r3, r3, #1
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d001      	beq.n	800ffb2 <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 800ffae:	2303      	movs	r3, #3
 800ffb0:	e0df      	b.n	8010172 <SD_disk_ioctl+0x246>
    }
    SELECT();
 800ffb2:	f7ff fc21 	bl	800f7f8 <SELECT>
    switch (ctrl)
 800ffb6:	79bb      	ldrb	r3, [r7, #6]
 800ffb8:	2b0d      	cmp	r3, #13
 800ffba:	f200 80c9 	bhi.w	8010150 <SD_disk_ioctl+0x224>
 800ffbe:	a201      	add	r2, pc, #4	@ (adr r2, 800ffc4 <SD_disk_ioctl+0x98>)
 800ffc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffc4:	080100bb 	.word	0x080100bb
 800ffc8:	0800fffd 	.word	0x0800fffd
 800ffcc:	080100ab 	.word	0x080100ab
 800ffd0:	08010151 	.word	0x08010151
 800ffd4:	08010151 	.word	0x08010151
 800ffd8:	08010151 	.word	0x08010151
 800ffdc:	08010151 	.word	0x08010151
 800ffe0:	08010151 	.word	0x08010151
 800ffe4:	08010151 	.word	0x08010151
 800ffe8:	08010151 	.word	0x08010151
 800ffec:	08010151 	.word	0x08010151
 800fff0:	080100cd 	.word	0x080100cd
 800fff4:	080100f1 	.word	0x080100f1
 800fff8:	08010115 	.word	0x08010115
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800fffc:	2100      	movs	r1, #0
 800fffe:	2049      	movs	r0, #73	@ 0x49
 8010000:	f7ff fd55 	bl	800faae <SD_SendCmd>
 8010004:	4603      	mov	r3, r0
 8010006:	2b00      	cmp	r3, #0
 8010008:	f040 80a6 	bne.w	8010158 <SD_disk_ioctl+0x22c>
 801000c:	f107 030c 	add.w	r3, r7, #12
 8010010:	2110      	movs	r1, #16
 8010012:	4618      	mov	r0, r3
 8010014:	f7ff fcda 	bl	800f9cc <SD_RxDataBlock>
 8010018:	4603      	mov	r3, r0
 801001a:	2b00      	cmp	r3, #0
 801001c:	f000 809c 	beq.w	8010158 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8010020:	7b3b      	ldrb	r3, [r7, #12]
 8010022:	099b      	lsrs	r3, r3, #6
 8010024:	b2db      	uxtb	r3, r3
 8010026:	2b01      	cmp	r3, #1
 8010028:	d10d      	bne.n	8010046 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 801002a:	7d7b      	ldrb	r3, [r7, #21]
 801002c:	461a      	mov	r2, r3
 801002e:	7d3b      	ldrb	r3, [r7, #20]
 8010030:	021b      	lsls	r3, r3, #8
 8010032:	b29b      	uxth	r3, r3
 8010034:	4413      	add	r3, r2
 8010036:	b29b      	uxth	r3, r3
 8010038:	3301      	adds	r3, #1
 801003a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 801003c:	8bfb      	ldrh	r3, [r7, #30]
 801003e:	029a      	lsls	r2, r3, #10
 8010040:	683b      	ldr	r3, [r7, #0]
 8010042:	601a      	str	r2, [r3, #0]
 8010044:	e02d      	b.n	80100a2 <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8010046:	7c7b      	ldrb	r3, [r7, #17]
 8010048:	f003 030f 	and.w	r3, r3, #15
 801004c:	b2da      	uxtb	r2, r3
 801004e:	7dbb      	ldrb	r3, [r7, #22]
 8010050:	09db      	lsrs	r3, r3, #7
 8010052:	b2db      	uxtb	r3, r3
 8010054:	4413      	add	r3, r2
 8010056:	b2da      	uxtb	r2, r3
 8010058:	7d7b      	ldrb	r3, [r7, #21]
 801005a:	005b      	lsls	r3, r3, #1
 801005c:	b2db      	uxtb	r3, r3
 801005e:	f003 0306 	and.w	r3, r3, #6
 8010062:	b2db      	uxtb	r3, r3
 8010064:	4413      	add	r3, r2
 8010066:	b2db      	uxtb	r3, r3
 8010068:	3302      	adds	r3, #2
 801006a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 801006e:	7d3b      	ldrb	r3, [r7, #20]
 8010070:	099b      	lsrs	r3, r3, #6
 8010072:	b2db      	uxtb	r3, r3
 8010074:	461a      	mov	r2, r3
 8010076:	7cfb      	ldrb	r3, [r7, #19]
 8010078:	009b      	lsls	r3, r3, #2
 801007a:	b29b      	uxth	r3, r3
 801007c:	4413      	add	r3, r2
 801007e:	b29a      	uxth	r2, r3
 8010080:	7cbb      	ldrb	r3, [r7, #18]
 8010082:	029b      	lsls	r3, r3, #10
 8010084:	b29b      	uxth	r3, r3
 8010086:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 801008a:	b29b      	uxth	r3, r3
 801008c:	4413      	add	r3, r2
 801008e:	b29b      	uxth	r3, r3
 8010090:	3301      	adds	r3, #1
 8010092:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8010094:	8bfa      	ldrh	r2, [r7, #30]
 8010096:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801009a:	3b09      	subs	r3, #9
 801009c:	409a      	lsls	r2, r3
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 80100a2:	2300      	movs	r3, #0
 80100a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 80100a8:	e056      	b.n	8010158 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80100b0:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80100b2:	2300      	movs	r3, #0
 80100b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80100b8:	e055      	b.n	8010166 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80100ba:	f7ff fc13 	bl	800f8e4 <SD_ReadyWait>
 80100be:	4603      	mov	r3, r0
 80100c0:	2bff      	cmp	r3, #255	@ 0xff
 80100c2:	d14b      	bne.n	801015c <SD_disk_ioctl+0x230>
 80100c4:	2300      	movs	r3, #0
 80100c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80100ca:	e047      	b.n	801015c <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80100cc:	2100      	movs	r1, #0
 80100ce:	2049      	movs	r0, #73	@ 0x49
 80100d0:	f7ff fced 	bl	800faae <SD_SendCmd>
 80100d4:	4603      	mov	r3, r0
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d142      	bne.n	8010160 <SD_disk_ioctl+0x234>
 80100da:	2110      	movs	r1, #16
 80100dc:	6a38      	ldr	r0, [r7, #32]
 80100de:	f7ff fc75 	bl	800f9cc <SD_RxDataBlock>
 80100e2:	4603      	mov	r3, r0
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d03b      	beq.n	8010160 <SD_disk_ioctl+0x234>
 80100e8:	2300      	movs	r3, #0
 80100ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80100ee:	e037      	b.n	8010160 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80100f0:	2100      	movs	r1, #0
 80100f2:	204a      	movs	r0, #74	@ 0x4a
 80100f4:	f7ff fcdb 	bl	800faae <SD_SendCmd>
 80100f8:	4603      	mov	r3, r0
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d132      	bne.n	8010164 <SD_disk_ioctl+0x238>
 80100fe:	2110      	movs	r1, #16
 8010100:	6a38      	ldr	r0, [r7, #32]
 8010102:	f7ff fc63 	bl	800f9cc <SD_RxDataBlock>
 8010106:	4603      	mov	r3, r0
 8010108:	2b00      	cmp	r3, #0
 801010a:	d02b      	beq.n	8010164 <SD_disk_ioctl+0x238>
 801010c:	2300      	movs	r3, #0
 801010e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8010112:	e027      	b.n	8010164 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8010114:	2100      	movs	r1, #0
 8010116:	207a      	movs	r0, #122	@ 0x7a
 8010118:	f7ff fcc9 	bl	800faae <SD_SendCmd>
 801011c:	4603      	mov	r3, r0
 801011e:	2b00      	cmp	r3, #0
 8010120:	d116      	bne.n	8010150 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 8010122:	2300      	movs	r3, #0
 8010124:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010128:	e00b      	b.n	8010142 <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 801012a:	6a3c      	ldr	r4, [r7, #32]
 801012c:	1c63      	adds	r3, r4, #1
 801012e:	623b      	str	r3, [r7, #32]
 8010130:	f7ff fbae 	bl	800f890 <SPI_RxByte>
 8010134:	4603      	mov	r3, r0
 8010136:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8010138:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801013c:	3301      	adds	r3, #1
 801013e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010142:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010146:	2b03      	cmp	r3, #3
 8010148:	d9ef      	bls.n	801012a <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 801014a:	2300      	movs	r3, #0
 801014c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8010150:	2304      	movs	r3, #4
 8010152:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010156:	e006      	b.n	8010166 <SD_disk_ioctl+0x23a>
      break;
 8010158:	bf00      	nop
 801015a:	e004      	b.n	8010166 <SD_disk_ioctl+0x23a>
      break;
 801015c:	bf00      	nop
 801015e:	e002      	b.n	8010166 <SD_disk_ioctl+0x23a>
      break;
 8010160:	bf00      	nop
 8010162:	e000      	b.n	8010166 <SD_disk_ioctl+0x23a>
      break;
 8010164:	bf00      	nop
    }
    DESELECT();
 8010166:	f7ff fb53 	bl	800f810 <DESELECT>
    SPI_RxByte();
 801016a:	f7ff fb91 	bl	800f890 <SPI_RxByte>
  }
  return res;
 801016e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8010172:	4618      	mov	r0, r3
 8010174:	372c      	adds	r7, #44	@ 0x2c
 8010176:	46bd      	mov	sp, r7
 8010178:	bd90      	pop	{r4, r7, pc}
 801017a:	bf00      	nop
 801017c:	240000c8 	.word	0x240000c8

08010180 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b084      	sub	sp, #16
 8010184:	af00      	add	r7, sp, #0
 8010186:	4603      	mov	r3, r0
 8010188:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801018a:	79fb      	ldrb	r3, [r7, #7]
 801018c:	4a08      	ldr	r2, [pc, #32]	@ (80101b0 <disk_status+0x30>)
 801018e:	009b      	lsls	r3, r3, #2
 8010190:	4413      	add	r3, r2
 8010192:	685b      	ldr	r3, [r3, #4]
 8010194:	685b      	ldr	r3, [r3, #4]
 8010196:	79fa      	ldrb	r2, [r7, #7]
 8010198:	4905      	ldr	r1, [pc, #20]	@ (80101b0 <disk_status+0x30>)
 801019a:	440a      	add	r2, r1
 801019c:	7a12      	ldrb	r2, [r2, #8]
 801019e:	4610      	mov	r0, r2
 80101a0:	4798      	blx	r3
 80101a2:	4603      	mov	r3, r0
 80101a4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80101a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80101a8:	4618      	mov	r0, r3
 80101aa:	3710      	adds	r7, #16
 80101ac:	46bd      	mov	sp, r7
 80101ae:	bd80      	pop	{r7, pc}
 80101b0:	24002d10 	.word	0x24002d10

080101b4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b084      	sub	sp, #16
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	4603      	mov	r3, r0
 80101bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80101be:	2300      	movs	r3, #0
 80101c0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80101c2:	79fb      	ldrb	r3, [r7, #7]
 80101c4:	4a0e      	ldr	r2, [pc, #56]	@ (8010200 <disk_initialize+0x4c>)
 80101c6:	5cd3      	ldrb	r3, [r2, r3]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d114      	bne.n	80101f6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80101cc:	79fb      	ldrb	r3, [r7, #7]
 80101ce:	4a0c      	ldr	r2, [pc, #48]	@ (8010200 <disk_initialize+0x4c>)
 80101d0:	009b      	lsls	r3, r3, #2
 80101d2:	4413      	add	r3, r2
 80101d4:	685b      	ldr	r3, [r3, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	79fa      	ldrb	r2, [r7, #7]
 80101da:	4909      	ldr	r1, [pc, #36]	@ (8010200 <disk_initialize+0x4c>)
 80101dc:	440a      	add	r2, r1
 80101de:	7a12      	ldrb	r2, [r2, #8]
 80101e0:	4610      	mov	r0, r2
 80101e2:	4798      	blx	r3
 80101e4:	4603      	mov	r3, r0
 80101e6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80101e8:	7bfb      	ldrb	r3, [r7, #15]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d103      	bne.n	80101f6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80101ee:	79fb      	ldrb	r3, [r7, #7]
 80101f0:	4a03      	ldr	r2, [pc, #12]	@ (8010200 <disk_initialize+0x4c>)
 80101f2:	2101      	movs	r1, #1
 80101f4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80101f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80101f8:	4618      	mov	r0, r3
 80101fa:	3710      	adds	r7, #16
 80101fc:	46bd      	mov	sp, r7
 80101fe:	bd80      	pop	{r7, pc}
 8010200:	24002d10 	.word	0x24002d10

08010204 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010204:	b590      	push	{r4, r7, lr}
 8010206:	b087      	sub	sp, #28
 8010208:	af00      	add	r7, sp, #0
 801020a:	60b9      	str	r1, [r7, #8]
 801020c:	607a      	str	r2, [r7, #4]
 801020e:	603b      	str	r3, [r7, #0]
 8010210:	4603      	mov	r3, r0
 8010212:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010214:	7bfb      	ldrb	r3, [r7, #15]
 8010216:	4a0a      	ldr	r2, [pc, #40]	@ (8010240 <disk_read+0x3c>)
 8010218:	009b      	lsls	r3, r3, #2
 801021a:	4413      	add	r3, r2
 801021c:	685b      	ldr	r3, [r3, #4]
 801021e:	689c      	ldr	r4, [r3, #8]
 8010220:	7bfb      	ldrb	r3, [r7, #15]
 8010222:	4a07      	ldr	r2, [pc, #28]	@ (8010240 <disk_read+0x3c>)
 8010224:	4413      	add	r3, r2
 8010226:	7a18      	ldrb	r0, [r3, #8]
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	687a      	ldr	r2, [r7, #4]
 801022c:	68b9      	ldr	r1, [r7, #8]
 801022e:	47a0      	blx	r4
 8010230:	4603      	mov	r3, r0
 8010232:	75fb      	strb	r3, [r7, #23]
  return res;
 8010234:	7dfb      	ldrb	r3, [r7, #23]
}
 8010236:	4618      	mov	r0, r3
 8010238:	371c      	adds	r7, #28
 801023a:	46bd      	mov	sp, r7
 801023c:	bd90      	pop	{r4, r7, pc}
 801023e:	bf00      	nop
 8010240:	24002d10 	.word	0x24002d10

08010244 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010244:	b590      	push	{r4, r7, lr}
 8010246:	b087      	sub	sp, #28
 8010248:	af00      	add	r7, sp, #0
 801024a:	60b9      	str	r1, [r7, #8]
 801024c:	607a      	str	r2, [r7, #4]
 801024e:	603b      	str	r3, [r7, #0]
 8010250:	4603      	mov	r3, r0
 8010252:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010254:	7bfb      	ldrb	r3, [r7, #15]
 8010256:	4a0a      	ldr	r2, [pc, #40]	@ (8010280 <disk_write+0x3c>)
 8010258:	009b      	lsls	r3, r3, #2
 801025a:	4413      	add	r3, r2
 801025c:	685b      	ldr	r3, [r3, #4]
 801025e:	68dc      	ldr	r4, [r3, #12]
 8010260:	7bfb      	ldrb	r3, [r7, #15]
 8010262:	4a07      	ldr	r2, [pc, #28]	@ (8010280 <disk_write+0x3c>)
 8010264:	4413      	add	r3, r2
 8010266:	7a18      	ldrb	r0, [r3, #8]
 8010268:	683b      	ldr	r3, [r7, #0]
 801026a:	687a      	ldr	r2, [r7, #4]
 801026c:	68b9      	ldr	r1, [r7, #8]
 801026e:	47a0      	blx	r4
 8010270:	4603      	mov	r3, r0
 8010272:	75fb      	strb	r3, [r7, #23]
  return res;
 8010274:	7dfb      	ldrb	r3, [r7, #23]
}
 8010276:	4618      	mov	r0, r3
 8010278:	371c      	adds	r7, #28
 801027a:	46bd      	mov	sp, r7
 801027c:	bd90      	pop	{r4, r7, pc}
 801027e:	bf00      	nop
 8010280:	24002d10 	.word	0x24002d10

08010284 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b084      	sub	sp, #16
 8010288:	af00      	add	r7, sp, #0
 801028a:	4603      	mov	r3, r0
 801028c:	603a      	str	r2, [r7, #0]
 801028e:	71fb      	strb	r3, [r7, #7]
 8010290:	460b      	mov	r3, r1
 8010292:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010294:	79fb      	ldrb	r3, [r7, #7]
 8010296:	4a09      	ldr	r2, [pc, #36]	@ (80102bc <disk_ioctl+0x38>)
 8010298:	009b      	lsls	r3, r3, #2
 801029a:	4413      	add	r3, r2
 801029c:	685b      	ldr	r3, [r3, #4]
 801029e:	691b      	ldr	r3, [r3, #16]
 80102a0:	79fa      	ldrb	r2, [r7, #7]
 80102a2:	4906      	ldr	r1, [pc, #24]	@ (80102bc <disk_ioctl+0x38>)
 80102a4:	440a      	add	r2, r1
 80102a6:	7a10      	ldrb	r0, [r2, #8]
 80102a8:	79b9      	ldrb	r1, [r7, #6]
 80102aa:	683a      	ldr	r2, [r7, #0]
 80102ac:	4798      	blx	r3
 80102ae:	4603      	mov	r3, r0
 80102b0:	73fb      	strb	r3, [r7, #15]
  return res;
 80102b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80102b4:	4618      	mov	r0, r3
 80102b6:	3710      	adds	r7, #16
 80102b8:	46bd      	mov	sp, r7
 80102ba:	bd80      	pop	{r7, pc}
 80102bc:	24002d10 	.word	0x24002d10

080102c0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80102c0:	b480      	push	{r7}
 80102c2:	b085      	sub	sp, #20
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	3301      	adds	r3, #1
 80102cc:	781b      	ldrb	r3, [r3, #0]
 80102ce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80102d0:	89fb      	ldrh	r3, [r7, #14]
 80102d2:	021b      	lsls	r3, r3, #8
 80102d4:	b21a      	sxth	r2, r3
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	781b      	ldrb	r3, [r3, #0]
 80102da:	b21b      	sxth	r3, r3
 80102dc:	4313      	orrs	r3, r2
 80102de:	b21b      	sxth	r3, r3
 80102e0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80102e2:	89fb      	ldrh	r3, [r7, #14]
}
 80102e4:	4618      	mov	r0, r3
 80102e6:	3714      	adds	r7, #20
 80102e8:	46bd      	mov	sp, r7
 80102ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ee:	4770      	bx	lr

080102f0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80102f0:	b480      	push	{r7}
 80102f2:	b085      	sub	sp, #20
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	3303      	adds	r3, #3
 80102fc:	781b      	ldrb	r3, [r3, #0]
 80102fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	021b      	lsls	r3, r3, #8
 8010304:	687a      	ldr	r2, [r7, #4]
 8010306:	3202      	adds	r2, #2
 8010308:	7812      	ldrb	r2, [r2, #0]
 801030a:	4313      	orrs	r3, r2
 801030c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	021b      	lsls	r3, r3, #8
 8010312:	687a      	ldr	r2, [r7, #4]
 8010314:	3201      	adds	r2, #1
 8010316:	7812      	ldrb	r2, [r2, #0]
 8010318:	4313      	orrs	r3, r2
 801031a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	021b      	lsls	r3, r3, #8
 8010320:	687a      	ldr	r2, [r7, #4]
 8010322:	7812      	ldrb	r2, [r2, #0]
 8010324:	4313      	orrs	r3, r2
 8010326:	60fb      	str	r3, [r7, #12]
	return rv;
 8010328:	68fb      	ldr	r3, [r7, #12]
}
 801032a:	4618      	mov	r0, r3
 801032c:	3714      	adds	r7, #20
 801032e:	46bd      	mov	sp, r7
 8010330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010334:	4770      	bx	lr

08010336 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010336:	b480      	push	{r7}
 8010338:	b083      	sub	sp, #12
 801033a:	af00      	add	r7, sp, #0
 801033c:	6078      	str	r0, [r7, #4]
 801033e:	460b      	mov	r3, r1
 8010340:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	1c5a      	adds	r2, r3, #1
 8010346:	607a      	str	r2, [r7, #4]
 8010348:	887a      	ldrh	r2, [r7, #2]
 801034a:	b2d2      	uxtb	r2, r2
 801034c:	701a      	strb	r2, [r3, #0]
 801034e:	887b      	ldrh	r3, [r7, #2]
 8010350:	0a1b      	lsrs	r3, r3, #8
 8010352:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	1c5a      	adds	r2, r3, #1
 8010358:	607a      	str	r2, [r7, #4]
 801035a:	887a      	ldrh	r2, [r7, #2]
 801035c:	b2d2      	uxtb	r2, r2
 801035e:	701a      	strb	r2, [r3, #0]
}
 8010360:	bf00      	nop
 8010362:	370c      	adds	r7, #12
 8010364:	46bd      	mov	sp, r7
 8010366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036a:	4770      	bx	lr

0801036c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801036c:	b480      	push	{r7}
 801036e:	b083      	sub	sp, #12
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
 8010374:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	1c5a      	adds	r2, r3, #1
 801037a:	607a      	str	r2, [r7, #4]
 801037c:	683a      	ldr	r2, [r7, #0]
 801037e:	b2d2      	uxtb	r2, r2
 8010380:	701a      	strb	r2, [r3, #0]
 8010382:	683b      	ldr	r3, [r7, #0]
 8010384:	0a1b      	lsrs	r3, r3, #8
 8010386:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	1c5a      	adds	r2, r3, #1
 801038c:	607a      	str	r2, [r7, #4]
 801038e:	683a      	ldr	r2, [r7, #0]
 8010390:	b2d2      	uxtb	r2, r2
 8010392:	701a      	strb	r2, [r3, #0]
 8010394:	683b      	ldr	r3, [r7, #0]
 8010396:	0a1b      	lsrs	r3, r3, #8
 8010398:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	1c5a      	adds	r2, r3, #1
 801039e:	607a      	str	r2, [r7, #4]
 80103a0:	683a      	ldr	r2, [r7, #0]
 80103a2:	b2d2      	uxtb	r2, r2
 80103a4:	701a      	strb	r2, [r3, #0]
 80103a6:	683b      	ldr	r3, [r7, #0]
 80103a8:	0a1b      	lsrs	r3, r3, #8
 80103aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	1c5a      	adds	r2, r3, #1
 80103b0:	607a      	str	r2, [r7, #4]
 80103b2:	683a      	ldr	r2, [r7, #0]
 80103b4:	b2d2      	uxtb	r2, r2
 80103b6:	701a      	strb	r2, [r3, #0]
}
 80103b8:	bf00      	nop
 80103ba:	370c      	adds	r7, #12
 80103bc:	46bd      	mov	sp, r7
 80103be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c2:	4770      	bx	lr

080103c4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80103c4:	b480      	push	{r7}
 80103c6:	b087      	sub	sp, #28
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	60f8      	str	r0, [r7, #12]
 80103cc:	60b9      	str	r1, [r7, #8]
 80103ce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d00d      	beq.n	80103fa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80103de:	693a      	ldr	r2, [r7, #16]
 80103e0:	1c53      	adds	r3, r2, #1
 80103e2:	613b      	str	r3, [r7, #16]
 80103e4:	697b      	ldr	r3, [r7, #20]
 80103e6:	1c59      	adds	r1, r3, #1
 80103e8:	6179      	str	r1, [r7, #20]
 80103ea:	7812      	ldrb	r2, [r2, #0]
 80103ec:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	3b01      	subs	r3, #1
 80103f2:	607b      	str	r3, [r7, #4]
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d1f1      	bne.n	80103de <mem_cpy+0x1a>
	}
}
 80103fa:	bf00      	nop
 80103fc:	371c      	adds	r7, #28
 80103fe:	46bd      	mov	sp, r7
 8010400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010404:	4770      	bx	lr

08010406 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010406:	b480      	push	{r7}
 8010408:	b087      	sub	sp, #28
 801040a:	af00      	add	r7, sp, #0
 801040c:	60f8      	str	r0, [r7, #12]
 801040e:	60b9      	str	r1, [r7, #8]
 8010410:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010416:	697b      	ldr	r3, [r7, #20]
 8010418:	1c5a      	adds	r2, r3, #1
 801041a:	617a      	str	r2, [r7, #20]
 801041c:	68ba      	ldr	r2, [r7, #8]
 801041e:	b2d2      	uxtb	r2, r2
 8010420:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	3b01      	subs	r3, #1
 8010426:	607b      	str	r3, [r7, #4]
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d1f3      	bne.n	8010416 <mem_set+0x10>
}
 801042e:	bf00      	nop
 8010430:	bf00      	nop
 8010432:	371c      	adds	r7, #28
 8010434:	46bd      	mov	sp, r7
 8010436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043a:	4770      	bx	lr

0801043c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801043c:	b480      	push	{r7}
 801043e:	b089      	sub	sp, #36	@ 0x24
 8010440:	af00      	add	r7, sp, #0
 8010442:	60f8      	str	r0, [r7, #12]
 8010444:	60b9      	str	r1, [r7, #8]
 8010446:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	61fb      	str	r3, [r7, #28]
 801044c:	68bb      	ldr	r3, [r7, #8]
 801044e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010450:	2300      	movs	r3, #0
 8010452:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010454:	69fb      	ldr	r3, [r7, #28]
 8010456:	1c5a      	adds	r2, r3, #1
 8010458:	61fa      	str	r2, [r7, #28]
 801045a:	781b      	ldrb	r3, [r3, #0]
 801045c:	4619      	mov	r1, r3
 801045e:	69bb      	ldr	r3, [r7, #24]
 8010460:	1c5a      	adds	r2, r3, #1
 8010462:	61ba      	str	r2, [r7, #24]
 8010464:	781b      	ldrb	r3, [r3, #0]
 8010466:	1acb      	subs	r3, r1, r3
 8010468:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	3b01      	subs	r3, #1
 801046e:	607b      	str	r3, [r7, #4]
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d002      	beq.n	801047c <mem_cmp+0x40>
 8010476:	697b      	ldr	r3, [r7, #20]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d0eb      	beq.n	8010454 <mem_cmp+0x18>

	return r;
 801047c:	697b      	ldr	r3, [r7, #20]
}
 801047e:	4618      	mov	r0, r3
 8010480:	3724      	adds	r7, #36	@ 0x24
 8010482:	46bd      	mov	sp, r7
 8010484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010488:	4770      	bx	lr

0801048a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801048a:	b480      	push	{r7}
 801048c:	b083      	sub	sp, #12
 801048e:	af00      	add	r7, sp, #0
 8010490:	6078      	str	r0, [r7, #4]
 8010492:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010494:	e002      	b.n	801049c <chk_chr+0x12>
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	3301      	adds	r3, #1
 801049a:	607b      	str	r3, [r7, #4]
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	781b      	ldrb	r3, [r3, #0]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d005      	beq.n	80104b0 <chk_chr+0x26>
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	781b      	ldrb	r3, [r3, #0]
 80104a8:	461a      	mov	r2, r3
 80104aa:	683b      	ldr	r3, [r7, #0]
 80104ac:	4293      	cmp	r3, r2
 80104ae:	d1f2      	bne.n	8010496 <chk_chr+0xc>
	return *str;
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	781b      	ldrb	r3, [r3, #0]
}
 80104b4:	4618      	mov	r0, r3
 80104b6:	370c      	adds	r7, #12
 80104b8:	46bd      	mov	sp, r7
 80104ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104be:	4770      	bx	lr

080104c0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80104c0:	b480      	push	{r7}
 80104c2:	b085      	sub	sp, #20
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
 80104c8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80104ca:	2300      	movs	r3, #0
 80104cc:	60bb      	str	r3, [r7, #8]
 80104ce:	68bb      	ldr	r3, [r7, #8]
 80104d0:	60fb      	str	r3, [r7, #12]
 80104d2:	e029      	b.n	8010528 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80104d4:	4a27      	ldr	r2, [pc, #156]	@ (8010574 <chk_lock+0xb4>)
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	011b      	lsls	r3, r3, #4
 80104da:	4413      	add	r3, r2
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d01d      	beq.n	801051e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80104e2:	4a24      	ldr	r2, [pc, #144]	@ (8010574 <chk_lock+0xb4>)
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	011b      	lsls	r3, r3, #4
 80104e8:	4413      	add	r3, r2
 80104ea:	681a      	ldr	r2, [r3, #0]
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	429a      	cmp	r2, r3
 80104f2:	d116      	bne.n	8010522 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80104f4:	4a1f      	ldr	r2, [pc, #124]	@ (8010574 <chk_lock+0xb4>)
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	011b      	lsls	r3, r3, #4
 80104fa:	4413      	add	r3, r2
 80104fc:	3304      	adds	r3, #4
 80104fe:	681a      	ldr	r2, [r3, #0]
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010504:	429a      	cmp	r2, r3
 8010506:	d10c      	bne.n	8010522 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010508:	4a1a      	ldr	r2, [pc, #104]	@ (8010574 <chk_lock+0xb4>)
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	011b      	lsls	r3, r3, #4
 801050e:	4413      	add	r3, r2
 8010510:	3308      	adds	r3, #8
 8010512:	681a      	ldr	r2, [r3, #0]
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8010518:	429a      	cmp	r2, r3
 801051a:	d102      	bne.n	8010522 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801051c:	e007      	b.n	801052e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801051e:	2301      	movs	r3, #1
 8010520:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	3301      	adds	r3, #1
 8010526:	60fb      	str	r3, [r7, #12]
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	2b01      	cmp	r3, #1
 801052c:	d9d2      	bls.n	80104d4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	2b02      	cmp	r3, #2
 8010532:	d109      	bne.n	8010548 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010534:	68bb      	ldr	r3, [r7, #8]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d102      	bne.n	8010540 <chk_lock+0x80>
 801053a:	683b      	ldr	r3, [r7, #0]
 801053c:	2b02      	cmp	r3, #2
 801053e:	d101      	bne.n	8010544 <chk_lock+0x84>
 8010540:	2300      	movs	r3, #0
 8010542:	e010      	b.n	8010566 <chk_lock+0xa6>
 8010544:	2312      	movs	r3, #18
 8010546:	e00e      	b.n	8010566 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010548:	683b      	ldr	r3, [r7, #0]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d108      	bne.n	8010560 <chk_lock+0xa0>
 801054e:	4a09      	ldr	r2, [pc, #36]	@ (8010574 <chk_lock+0xb4>)
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	011b      	lsls	r3, r3, #4
 8010554:	4413      	add	r3, r2
 8010556:	330c      	adds	r3, #12
 8010558:	881b      	ldrh	r3, [r3, #0]
 801055a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801055e:	d101      	bne.n	8010564 <chk_lock+0xa4>
 8010560:	2310      	movs	r3, #16
 8010562:	e000      	b.n	8010566 <chk_lock+0xa6>
 8010564:	2300      	movs	r3, #0
}
 8010566:	4618      	mov	r0, r3
 8010568:	3714      	adds	r7, #20
 801056a:	46bd      	mov	sp, r7
 801056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010570:	4770      	bx	lr
 8010572:	bf00      	nop
 8010574:	24002af0 	.word	0x24002af0

08010578 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010578:	b480      	push	{r7}
 801057a:	b083      	sub	sp, #12
 801057c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801057e:	2300      	movs	r3, #0
 8010580:	607b      	str	r3, [r7, #4]
 8010582:	e002      	b.n	801058a <enq_lock+0x12>
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	3301      	adds	r3, #1
 8010588:	607b      	str	r3, [r7, #4]
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	2b01      	cmp	r3, #1
 801058e:	d806      	bhi.n	801059e <enq_lock+0x26>
 8010590:	4a09      	ldr	r2, [pc, #36]	@ (80105b8 <enq_lock+0x40>)
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	011b      	lsls	r3, r3, #4
 8010596:	4413      	add	r3, r2
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d1f2      	bne.n	8010584 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	2b02      	cmp	r3, #2
 80105a2:	bf14      	ite	ne
 80105a4:	2301      	movne	r3, #1
 80105a6:	2300      	moveq	r3, #0
 80105a8:	b2db      	uxtb	r3, r3
}
 80105aa:	4618      	mov	r0, r3
 80105ac:	370c      	adds	r7, #12
 80105ae:	46bd      	mov	sp, r7
 80105b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b4:	4770      	bx	lr
 80105b6:	bf00      	nop
 80105b8:	24002af0 	.word	0x24002af0

080105bc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80105bc:	b480      	push	{r7}
 80105be:	b085      	sub	sp, #20
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
 80105c4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80105c6:	2300      	movs	r3, #0
 80105c8:	60fb      	str	r3, [r7, #12]
 80105ca:	e01f      	b.n	801060c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80105cc:	4a41      	ldr	r2, [pc, #260]	@ (80106d4 <inc_lock+0x118>)
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	011b      	lsls	r3, r3, #4
 80105d2:	4413      	add	r3, r2
 80105d4:	681a      	ldr	r2, [r3, #0]
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	429a      	cmp	r2, r3
 80105dc:	d113      	bne.n	8010606 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80105de:	4a3d      	ldr	r2, [pc, #244]	@ (80106d4 <inc_lock+0x118>)
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	011b      	lsls	r3, r3, #4
 80105e4:	4413      	add	r3, r2
 80105e6:	3304      	adds	r3, #4
 80105e8:	681a      	ldr	r2, [r3, #0]
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80105ee:	429a      	cmp	r2, r3
 80105f0:	d109      	bne.n	8010606 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80105f2:	4a38      	ldr	r2, [pc, #224]	@ (80106d4 <inc_lock+0x118>)
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	011b      	lsls	r3, r3, #4
 80105f8:	4413      	add	r3, r2
 80105fa:	3308      	adds	r3, #8
 80105fc:	681a      	ldr	r2, [r3, #0]
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8010602:	429a      	cmp	r2, r3
 8010604:	d006      	beq.n	8010614 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	3301      	adds	r3, #1
 801060a:	60fb      	str	r3, [r7, #12]
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	2b01      	cmp	r3, #1
 8010610:	d9dc      	bls.n	80105cc <inc_lock+0x10>
 8010612:	e000      	b.n	8010616 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8010614:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	2b02      	cmp	r3, #2
 801061a:	d132      	bne.n	8010682 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801061c:	2300      	movs	r3, #0
 801061e:	60fb      	str	r3, [r7, #12]
 8010620:	e002      	b.n	8010628 <inc_lock+0x6c>
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	3301      	adds	r3, #1
 8010626:	60fb      	str	r3, [r7, #12]
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	2b01      	cmp	r3, #1
 801062c:	d806      	bhi.n	801063c <inc_lock+0x80>
 801062e:	4a29      	ldr	r2, [pc, #164]	@ (80106d4 <inc_lock+0x118>)
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	011b      	lsls	r3, r3, #4
 8010634:	4413      	add	r3, r2
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d1f2      	bne.n	8010622 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	2b02      	cmp	r3, #2
 8010640:	d101      	bne.n	8010646 <inc_lock+0x8a>
 8010642:	2300      	movs	r3, #0
 8010644:	e040      	b.n	80106c8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	681a      	ldr	r2, [r3, #0]
 801064a:	4922      	ldr	r1, [pc, #136]	@ (80106d4 <inc_lock+0x118>)
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	011b      	lsls	r3, r3, #4
 8010650:	440b      	add	r3, r1
 8010652:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	689a      	ldr	r2, [r3, #8]
 8010658:	491e      	ldr	r1, [pc, #120]	@ (80106d4 <inc_lock+0x118>)
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	011b      	lsls	r3, r3, #4
 801065e:	440b      	add	r3, r1
 8010660:	3304      	adds	r3, #4
 8010662:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	695a      	ldr	r2, [r3, #20]
 8010668:	491a      	ldr	r1, [pc, #104]	@ (80106d4 <inc_lock+0x118>)
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	011b      	lsls	r3, r3, #4
 801066e:	440b      	add	r3, r1
 8010670:	3308      	adds	r3, #8
 8010672:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8010674:	4a17      	ldr	r2, [pc, #92]	@ (80106d4 <inc_lock+0x118>)
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	011b      	lsls	r3, r3, #4
 801067a:	4413      	add	r3, r2
 801067c:	330c      	adds	r3, #12
 801067e:	2200      	movs	r2, #0
 8010680:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010682:	683b      	ldr	r3, [r7, #0]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d009      	beq.n	801069c <inc_lock+0xe0>
 8010688:	4a12      	ldr	r2, [pc, #72]	@ (80106d4 <inc_lock+0x118>)
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	011b      	lsls	r3, r3, #4
 801068e:	4413      	add	r3, r2
 8010690:	330c      	adds	r3, #12
 8010692:	881b      	ldrh	r3, [r3, #0]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d001      	beq.n	801069c <inc_lock+0xe0>
 8010698:	2300      	movs	r3, #0
 801069a:	e015      	b.n	80106c8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d108      	bne.n	80106b4 <inc_lock+0xf8>
 80106a2:	4a0c      	ldr	r2, [pc, #48]	@ (80106d4 <inc_lock+0x118>)
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	011b      	lsls	r3, r3, #4
 80106a8:	4413      	add	r3, r2
 80106aa:	330c      	adds	r3, #12
 80106ac:	881b      	ldrh	r3, [r3, #0]
 80106ae:	3301      	adds	r3, #1
 80106b0:	b29a      	uxth	r2, r3
 80106b2:	e001      	b.n	80106b8 <inc_lock+0xfc>
 80106b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80106b8:	4906      	ldr	r1, [pc, #24]	@ (80106d4 <inc_lock+0x118>)
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	011b      	lsls	r3, r3, #4
 80106be:	440b      	add	r3, r1
 80106c0:	330c      	adds	r3, #12
 80106c2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	3301      	adds	r3, #1
}
 80106c8:	4618      	mov	r0, r3
 80106ca:	3714      	adds	r7, #20
 80106cc:	46bd      	mov	sp, r7
 80106ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d2:	4770      	bx	lr
 80106d4:	24002af0 	.word	0x24002af0

080106d8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80106d8:	b480      	push	{r7}
 80106da:	b085      	sub	sp, #20
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	3b01      	subs	r3, #1
 80106e4:	607b      	str	r3, [r7, #4]
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	2b01      	cmp	r3, #1
 80106ea:	d825      	bhi.n	8010738 <dec_lock+0x60>
		n = Files[i].ctr;
 80106ec:	4a17      	ldr	r2, [pc, #92]	@ (801074c <dec_lock+0x74>)
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	011b      	lsls	r3, r3, #4
 80106f2:	4413      	add	r3, r2
 80106f4:	330c      	adds	r3, #12
 80106f6:	881b      	ldrh	r3, [r3, #0]
 80106f8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80106fa:	89fb      	ldrh	r3, [r7, #14]
 80106fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010700:	d101      	bne.n	8010706 <dec_lock+0x2e>
 8010702:	2300      	movs	r3, #0
 8010704:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8010706:	89fb      	ldrh	r3, [r7, #14]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d002      	beq.n	8010712 <dec_lock+0x3a>
 801070c:	89fb      	ldrh	r3, [r7, #14]
 801070e:	3b01      	subs	r3, #1
 8010710:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8010712:	4a0e      	ldr	r2, [pc, #56]	@ (801074c <dec_lock+0x74>)
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	011b      	lsls	r3, r3, #4
 8010718:	4413      	add	r3, r2
 801071a:	330c      	adds	r3, #12
 801071c:	89fa      	ldrh	r2, [r7, #14]
 801071e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010720:	89fb      	ldrh	r3, [r7, #14]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d105      	bne.n	8010732 <dec_lock+0x5a>
 8010726:	4a09      	ldr	r2, [pc, #36]	@ (801074c <dec_lock+0x74>)
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	011b      	lsls	r3, r3, #4
 801072c:	4413      	add	r3, r2
 801072e:	2200      	movs	r2, #0
 8010730:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8010732:	2300      	movs	r3, #0
 8010734:	737b      	strb	r3, [r7, #13]
 8010736:	e001      	b.n	801073c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8010738:	2302      	movs	r3, #2
 801073a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801073c:	7b7b      	ldrb	r3, [r7, #13]
}
 801073e:	4618      	mov	r0, r3
 8010740:	3714      	adds	r7, #20
 8010742:	46bd      	mov	sp, r7
 8010744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010748:	4770      	bx	lr
 801074a:	bf00      	nop
 801074c:	24002af0 	.word	0x24002af0

08010750 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010750:	b480      	push	{r7}
 8010752:	b085      	sub	sp, #20
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010758:	2300      	movs	r3, #0
 801075a:	60fb      	str	r3, [r7, #12]
 801075c:	e010      	b.n	8010780 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801075e:	4a0d      	ldr	r2, [pc, #52]	@ (8010794 <clear_lock+0x44>)
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	011b      	lsls	r3, r3, #4
 8010764:	4413      	add	r3, r2
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	687a      	ldr	r2, [r7, #4]
 801076a:	429a      	cmp	r2, r3
 801076c:	d105      	bne.n	801077a <clear_lock+0x2a>
 801076e:	4a09      	ldr	r2, [pc, #36]	@ (8010794 <clear_lock+0x44>)
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	011b      	lsls	r3, r3, #4
 8010774:	4413      	add	r3, r2
 8010776:	2200      	movs	r2, #0
 8010778:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	3301      	adds	r3, #1
 801077e:	60fb      	str	r3, [r7, #12]
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	2b01      	cmp	r3, #1
 8010784:	d9eb      	bls.n	801075e <clear_lock+0xe>
	}
}
 8010786:	bf00      	nop
 8010788:	bf00      	nop
 801078a:	3714      	adds	r7, #20
 801078c:	46bd      	mov	sp, r7
 801078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010792:	4770      	bx	lr
 8010794:	24002af0 	.word	0x24002af0

08010798 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b086      	sub	sp, #24
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80107a0:	2300      	movs	r3, #0
 80107a2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	78db      	ldrb	r3, [r3, #3]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d034      	beq.n	8010816 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107b0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	7858      	ldrb	r0, [r3, #1]
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80107bc:	2301      	movs	r3, #1
 80107be:	697a      	ldr	r2, [r7, #20]
 80107c0:	f7ff fd40 	bl	8010244 <disk_write>
 80107c4:	4603      	mov	r3, r0
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d002      	beq.n	80107d0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80107ca:	2301      	movs	r3, #1
 80107cc:	73fb      	strb	r3, [r7, #15]
 80107ce:	e022      	b.n	8010816 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	2200      	movs	r2, #0
 80107d4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107da:	697a      	ldr	r2, [r7, #20]
 80107dc:	1ad2      	subs	r2, r2, r3
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107e2:	429a      	cmp	r2, r3
 80107e4:	d217      	bcs.n	8010816 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	789b      	ldrb	r3, [r3, #2]
 80107ea:	613b      	str	r3, [r7, #16]
 80107ec:	e010      	b.n	8010810 <sync_window+0x78>
					wsect += fs->fsize;
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107f2:	697a      	ldr	r2, [r7, #20]
 80107f4:	4413      	add	r3, r2
 80107f6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	7858      	ldrb	r0, [r3, #1]
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010802:	2301      	movs	r3, #1
 8010804:	697a      	ldr	r2, [r7, #20]
 8010806:	f7ff fd1d 	bl	8010244 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801080a:	693b      	ldr	r3, [r7, #16]
 801080c:	3b01      	subs	r3, #1
 801080e:	613b      	str	r3, [r7, #16]
 8010810:	693b      	ldr	r3, [r7, #16]
 8010812:	2b01      	cmp	r3, #1
 8010814:	d8eb      	bhi.n	80107ee <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8010816:	7bfb      	ldrb	r3, [r7, #15]
}
 8010818:	4618      	mov	r0, r3
 801081a:	3718      	adds	r7, #24
 801081c:	46bd      	mov	sp, r7
 801081e:	bd80      	pop	{r7, pc}

08010820 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010820:	b580      	push	{r7, lr}
 8010822:	b084      	sub	sp, #16
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
 8010828:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801082a:	2300      	movs	r3, #0
 801082c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010832:	683a      	ldr	r2, [r7, #0]
 8010834:	429a      	cmp	r2, r3
 8010836:	d01b      	beq.n	8010870 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010838:	6878      	ldr	r0, [r7, #4]
 801083a:	f7ff ffad 	bl	8010798 <sync_window>
 801083e:	4603      	mov	r3, r0
 8010840:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010842:	7bfb      	ldrb	r3, [r7, #15]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d113      	bne.n	8010870 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	7858      	ldrb	r0, [r3, #1]
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010852:	2301      	movs	r3, #1
 8010854:	683a      	ldr	r2, [r7, #0]
 8010856:	f7ff fcd5 	bl	8010204 <disk_read>
 801085a:	4603      	mov	r3, r0
 801085c:	2b00      	cmp	r3, #0
 801085e:	d004      	beq.n	801086a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010860:	f04f 33ff 	mov.w	r3, #4294967295
 8010864:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010866:	2301      	movs	r3, #1
 8010868:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	683a      	ldr	r2, [r7, #0]
 801086e:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 8010870:	7bfb      	ldrb	r3, [r7, #15]
}
 8010872:	4618      	mov	r0, r3
 8010874:	3710      	adds	r7, #16
 8010876:	46bd      	mov	sp, r7
 8010878:	bd80      	pop	{r7, pc}
	...

0801087c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801087c:	b580      	push	{r7, lr}
 801087e:	b084      	sub	sp, #16
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010884:	6878      	ldr	r0, [r7, #4]
 8010886:	f7ff ff87 	bl	8010798 <sync_window>
 801088a:	4603      	mov	r3, r0
 801088c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801088e:	7bfb      	ldrb	r3, [r7, #15]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d159      	bne.n	8010948 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	781b      	ldrb	r3, [r3, #0]
 8010898:	2b03      	cmp	r3, #3
 801089a:	d149      	bne.n	8010930 <sync_fs+0xb4>
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	791b      	ldrb	r3, [r3, #4]
 80108a0:	2b01      	cmp	r3, #1
 80108a2:	d145      	bne.n	8010930 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	899b      	ldrh	r3, [r3, #12]
 80108ae:	461a      	mov	r2, r3
 80108b0:	2100      	movs	r1, #0
 80108b2:	f7ff fda8 	bl	8010406 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	333c      	adds	r3, #60	@ 0x3c
 80108ba:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80108be:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80108c2:	4618      	mov	r0, r3
 80108c4:	f7ff fd37 	bl	8010336 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	333c      	adds	r3, #60	@ 0x3c
 80108cc:	4921      	ldr	r1, [pc, #132]	@ (8010954 <sync_fs+0xd8>)
 80108ce:	4618      	mov	r0, r3
 80108d0:	f7ff fd4c 	bl	801036c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	333c      	adds	r3, #60	@ 0x3c
 80108d8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80108dc:	491e      	ldr	r1, [pc, #120]	@ (8010958 <sync_fs+0xdc>)
 80108de:	4618      	mov	r0, r3
 80108e0:	f7ff fd44 	bl	801036c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	333c      	adds	r3, #60	@ 0x3c
 80108e8:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	699b      	ldr	r3, [r3, #24]
 80108f0:	4619      	mov	r1, r3
 80108f2:	4610      	mov	r0, r2
 80108f4:	f7ff fd3a 	bl	801036c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	333c      	adds	r3, #60	@ 0x3c
 80108fc:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	695b      	ldr	r3, [r3, #20]
 8010904:	4619      	mov	r1, r3
 8010906:	4610      	mov	r0, r2
 8010908:	f7ff fd30 	bl	801036c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010910:	1c5a      	adds	r2, r3, #1
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	7858      	ldrb	r0, [r3, #1]
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010924:	2301      	movs	r3, #1
 8010926:	f7ff fc8d 	bl	8010244 <disk_write>
			fs->fsi_flag = 0;
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	2200      	movs	r2, #0
 801092e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	785b      	ldrb	r3, [r3, #1]
 8010934:	2200      	movs	r2, #0
 8010936:	2100      	movs	r1, #0
 8010938:	4618      	mov	r0, r3
 801093a:	f7ff fca3 	bl	8010284 <disk_ioctl>
 801093e:	4603      	mov	r3, r0
 8010940:	2b00      	cmp	r3, #0
 8010942:	d001      	beq.n	8010948 <sync_fs+0xcc>
 8010944:	2301      	movs	r3, #1
 8010946:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010948:	7bfb      	ldrb	r3, [r7, #15]
}
 801094a:	4618      	mov	r0, r3
 801094c:	3710      	adds	r7, #16
 801094e:	46bd      	mov	sp, r7
 8010950:	bd80      	pop	{r7, pc}
 8010952:	bf00      	nop
 8010954:	41615252 	.word	0x41615252
 8010958:	61417272 	.word	0x61417272

0801095c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801095c:	b480      	push	{r7}
 801095e:	b083      	sub	sp, #12
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
 8010964:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010966:	683b      	ldr	r3, [r7, #0]
 8010968:	3b02      	subs	r3, #2
 801096a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	6a1b      	ldr	r3, [r3, #32]
 8010970:	3b02      	subs	r3, #2
 8010972:	683a      	ldr	r2, [r7, #0]
 8010974:	429a      	cmp	r2, r3
 8010976:	d301      	bcc.n	801097c <clust2sect+0x20>
 8010978:	2300      	movs	r3, #0
 801097a:	e008      	b.n	801098e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	895b      	ldrh	r3, [r3, #10]
 8010980:	461a      	mov	r2, r3
 8010982:	683b      	ldr	r3, [r7, #0]
 8010984:	fb03 f202 	mul.w	r2, r3, r2
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801098c:	4413      	add	r3, r2
}
 801098e:	4618      	mov	r0, r3
 8010990:	370c      	adds	r7, #12
 8010992:	46bd      	mov	sp, r7
 8010994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010998:	4770      	bx	lr

0801099a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801099a:	b580      	push	{r7, lr}
 801099c:	b086      	sub	sp, #24
 801099e:	af00      	add	r7, sp, #0
 80109a0:	6078      	str	r0, [r7, #4]
 80109a2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80109aa:	683b      	ldr	r3, [r7, #0]
 80109ac:	2b01      	cmp	r3, #1
 80109ae:	d904      	bls.n	80109ba <get_fat+0x20>
 80109b0:	693b      	ldr	r3, [r7, #16]
 80109b2:	6a1b      	ldr	r3, [r3, #32]
 80109b4:	683a      	ldr	r2, [r7, #0]
 80109b6:	429a      	cmp	r2, r3
 80109b8:	d302      	bcc.n	80109c0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80109ba:	2301      	movs	r3, #1
 80109bc:	617b      	str	r3, [r7, #20]
 80109be:	e0ba      	b.n	8010b36 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80109c0:	f04f 33ff 	mov.w	r3, #4294967295
 80109c4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80109c6:	693b      	ldr	r3, [r7, #16]
 80109c8:	781b      	ldrb	r3, [r3, #0]
 80109ca:	2b03      	cmp	r3, #3
 80109cc:	f000 8082 	beq.w	8010ad4 <get_fat+0x13a>
 80109d0:	2b03      	cmp	r3, #3
 80109d2:	f300 80a6 	bgt.w	8010b22 <get_fat+0x188>
 80109d6:	2b01      	cmp	r3, #1
 80109d8:	d002      	beq.n	80109e0 <get_fat+0x46>
 80109da:	2b02      	cmp	r3, #2
 80109dc:	d055      	beq.n	8010a8a <get_fat+0xf0>
 80109de:	e0a0      	b.n	8010b22 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80109e0:	683b      	ldr	r3, [r7, #0]
 80109e2:	60fb      	str	r3, [r7, #12]
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	085b      	lsrs	r3, r3, #1
 80109e8:	68fa      	ldr	r2, [r7, #12]
 80109ea:	4413      	add	r3, r2
 80109ec:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80109ee:	693b      	ldr	r3, [r7, #16]
 80109f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109f2:	693b      	ldr	r3, [r7, #16]
 80109f4:	899b      	ldrh	r3, [r3, #12]
 80109f6:	4619      	mov	r1, r3
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80109fe:	4413      	add	r3, r2
 8010a00:	4619      	mov	r1, r3
 8010a02:	6938      	ldr	r0, [r7, #16]
 8010a04:	f7ff ff0c 	bl	8010820 <move_window>
 8010a08:	4603      	mov	r3, r0
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	f040 808c 	bne.w	8010b28 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	1c5a      	adds	r2, r3, #1
 8010a14:	60fa      	str	r2, [r7, #12]
 8010a16:	693a      	ldr	r2, [r7, #16]
 8010a18:	8992      	ldrh	r2, [r2, #12]
 8010a1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8010a1e:	fb01 f202 	mul.w	r2, r1, r2
 8010a22:	1a9b      	subs	r3, r3, r2
 8010a24:	693a      	ldr	r2, [r7, #16]
 8010a26:	4413      	add	r3, r2
 8010a28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010a2c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010a2e:	693b      	ldr	r3, [r7, #16]
 8010a30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a32:	693b      	ldr	r3, [r7, #16]
 8010a34:	899b      	ldrh	r3, [r3, #12]
 8010a36:	4619      	mov	r1, r3
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8010a3e:	4413      	add	r3, r2
 8010a40:	4619      	mov	r1, r3
 8010a42:	6938      	ldr	r0, [r7, #16]
 8010a44:	f7ff feec 	bl	8010820 <move_window>
 8010a48:	4603      	mov	r3, r0
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d16e      	bne.n	8010b2c <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010a4e:	693b      	ldr	r3, [r7, #16]
 8010a50:	899b      	ldrh	r3, [r3, #12]
 8010a52:	461a      	mov	r2, r3
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	fbb3 f1f2 	udiv	r1, r3, r2
 8010a5a:	fb01 f202 	mul.w	r2, r1, r2
 8010a5e:	1a9b      	subs	r3, r3, r2
 8010a60:	693a      	ldr	r2, [r7, #16]
 8010a62:	4413      	add	r3, r2
 8010a64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010a68:	021b      	lsls	r3, r3, #8
 8010a6a:	68ba      	ldr	r2, [r7, #8]
 8010a6c:	4313      	orrs	r3, r2
 8010a6e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010a70:	683b      	ldr	r3, [r7, #0]
 8010a72:	f003 0301 	and.w	r3, r3, #1
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d002      	beq.n	8010a80 <get_fat+0xe6>
 8010a7a:	68bb      	ldr	r3, [r7, #8]
 8010a7c:	091b      	lsrs	r3, r3, #4
 8010a7e:	e002      	b.n	8010a86 <get_fat+0xec>
 8010a80:	68bb      	ldr	r3, [r7, #8]
 8010a82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010a86:	617b      	str	r3, [r7, #20]
			break;
 8010a88:	e055      	b.n	8010b36 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010a8a:	693b      	ldr	r3, [r7, #16]
 8010a8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a8e:	693b      	ldr	r3, [r7, #16]
 8010a90:	899b      	ldrh	r3, [r3, #12]
 8010a92:	085b      	lsrs	r3, r3, #1
 8010a94:	b29b      	uxth	r3, r3
 8010a96:	4619      	mov	r1, r3
 8010a98:	683b      	ldr	r3, [r7, #0]
 8010a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8010a9e:	4413      	add	r3, r2
 8010aa0:	4619      	mov	r1, r3
 8010aa2:	6938      	ldr	r0, [r7, #16]
 8010aa4:	f7ff febc 	bl	8010820 <move_window>
 8010aa8:	4603      	mov	r3, r0
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d140      	bne.n	8010b30 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010aae:	693b      	ldr	r3, [r7, #16]
 8010ab0:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010ab4:	683b      	ldr	r3, [r7, #0]
 8010ab6:	005b      	lsls	r3, r3, #1
 8010ab8:	693a      	ldr	r2, [r7, #16]
 8010aba:	8992      	ldrh	r2, [r2, #12]
 8010abc:	fbb3 f0f2 	udiv	r0, r3, r2
 8010ac0:	fb00 f202 	mul.w	r2, r0, r2
 8010ac4:	1a9b      	subs	r3, r3, r2
 8010ac6:	440b      	add	r3, r1
 8010ac8:	4618      	mov	r0, r3
 8010aca:	f7ff fbf9 	bl	80102c0 <ld_word>
 8010ace:	4603      	mov	r3, r0
 8010ad0:	617b      	str	r3, [r7, #20]
			break;
 8010ad2:	e030      	b.n	8010b36 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010ad4:	693b      	ldr	r3, [r7, #16]
 8010ad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ad8:	693b      	ldr	r3, [r7, #16]
 8010ada:	899b      	ldrh	r3, [r3, #12]
 8010adc:	089b      	lsrs	r3, r3, #2
 8010ade:	b29b      	uxth	r3, r3
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	683b      	ldr	r3, [r7, #0]
 8010ae4:	fbb3 f3f1 	udiv	r3, r3, r1
 8010ae8:	4413      	add	r3, r2
 8010aea:	4619      	mov	r1, r3
 8010aec:	6938      	ldr	r0, [r7, #16]
 8010aee:	f7ff fe97 	bl	8010820 <move_window>
 8010af2:	4603      	mov	r3, r0
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d11d      	bne.n	8010b34 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010af8:	693b      	ldr	r3, [r7, #16]
 8010afa:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	009b      	lsls	r3, r3, #2
 8010b02:	693a      	ldr	r2, [r7, #16]
 8010b04:	8992      	ldrh	r2, [r2, #12]
 8010b06:	fbb3 f0f2 	udiv	r0, r3, r2
 8010b0a:	fb00 f202 	mul.w	r2, r0, r2
 8010b0e:	1a9b      	subs	r3, r3, r2
 8010b10:	440b      	add	r3, r1
 8010b12:	4618      	mov	r0, r3
 8010b14:	f7ff fbec 	bl	80102f0 <ld_dword>
 8010b18:	4603      	mov	r3, r0
 8010b1a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8010b1e:	617b      	str	r3, [r7, #20]
			break;
 8010b20:	e009      	b.n	8010b36 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010b22:	2301      	movs	r3, #1
 8010b24:	617b      	str	r3, [r7, #20]
 8010b26:	e006      	b.n	8010b36 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010b28:	bf00      	nop
 8010b2a:	e004      	b.n	8010b36 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010b2c:	bf00      	nop
 8010b2e:	e002      	b.n	8010b36 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010b30:	bf00      	nop
 8010b32:	e000      	b.n	8010b36 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010b34:	bf00      	nop
		}
	}

	return val;
 8010b36:	697b      	ldr	r3, [r7, #20]
}
 8010b38:	4618      	mov	r0, r3
 8010b3a:	3718      	adds	r7, #24
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	bd80      	pop	{r7, pc}

08010b40 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010b40:	b590      	push	{r4, r7, lr}
 8010b42:	b089      	sub	sp, #36	@ 0x24
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	60f8      	str	r0, [r7, #12]
 8010b48:	60b9      	str	r1, [r7, #8]
 8010b4a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010b4c:	2302      	movs	r3, #2
 8010b4e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010b50:	68bb      	ldr	r3, [r7, #8]
 8010b52:	2b01      	cmp	r3, #1
 8010b54:	f240 8109 	bls.w	8010d6a <put_fat+0x22a>
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	6a1b      	ldr	r3, [r3, #32]
 8010b5c:	68ba      	ldr	r2, [r7, #8]
 8010b5e:	429a      	cmp	r2, r3
 8010b60:	f080 8103 	bcs.w	8010d6a <put_fat+0x22a>
		switch (fs->fs_type) {
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	781b      	ldrb	r3, [r3, #0]
 8010b68:	2b03      	cmp	r3, #3
 8010b6a:	f000 80b6 	beq.w	8010cda <put_fat+0x19a>
 8010b6e:	2b03      	cmp	r3, #3
 8010b70:	f300 80fb 	bgt.w	8010d6a <put_fat+0x22a>
 8010b74:	2b01      	cmp	r3, #1
 8010b76:	d003      	beq.n	8010b80 <put_fat+0x40>
 8010b78:	2b02      	cmp	r3, #2
 8010b7a:	f000 8083 	beq.w	8010c84 <put_fat+0x144>
 8010b7e:	e0f4      	b.n	8010d6a <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010b80:	68bb      	ldr	r3, [r7, #8]
 8010b82:	61bb      	str	r3, [r7, #24]
 8010b84:	69bb      	ldr	r3, [r7, #24]
 8010b86:	085b      	lsrs	r3, r3, #1
 8010b88:	69ba      	ldr	r2, [r7, #24]
 8010b8a:	4413      	add	r3, r2
 8010b8c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	899b      	ldrh	r3, [r3, #12]
 8010b96:	4619      	mov	r1, r3
 8010b98:	69bb      	ldr	r3, [r7, #24]
 8010b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8010b9e:	4413      	add	r3, r2
 8010ba0:	4619      	mov	r1, r3
 8010ba2:	68f8      	ldr	r0, [r7, #12]
 8010ba4:	f7ff fe3c 	bl	8010820 <move_window>
 8010ba8:	4603      	mov	r3, r0
 8010baa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010bac:	7ffb      	ldrb	r3, [r7, #31]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	f040 80d4 	bne.w	8010d5c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010bba:	69bb      	ldr	r3, [r7, #24]
 8010bbc:	1c5a      	adds	r2, r3, #1
 8010bbe:	61ba      	str	r2, [r7, #24]
 8010bc0:	68fa      	ldr	r2, [r7, #12]
 8010bc2:	8992      	ldrh	r2, [r2, #12]
 8010bc4:	fbb3 f0f2 	udiv	r0, r3, r2
 8010bc8:	fb00 f202 	mul.w	r2, r0, r2
 8010bcc:	1a9b      	subs	r3, r3, r2
 8010bce:	440b      	add	r3, r1
 8010bd0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010bd2:	68bb      	ldr	r3, [r7, #8]
 8010bd4:	f003 0301 	and.w	r3, r3, #1
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d00d      	beq.n	8010bf8 <put_fat+0xb8>
 8010bdc:	697b      	ldr	r3, [r7, #20]
 8010bde:	781b      	ldrb	r3, [r3, #0]
 8010be0:	b25b      	sxtb	r3, r3
 8010be2:	f003 030f 	and.w	r3, r3, #15
 8010be6:	b25a      	sxtb	r2, r3
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	b2db      	uxtb	r3, r3
 8010bec:	011b      	lsls	r3, r3, #4
 8010bee:	b25b      	sxtb	r3, r3
 8010bf0:	4313      	orrs	r3, r2
 8010bf2:	b25b      	sxtb	r3, r3
 8010bf4:	b2db      	uxtb	r3, r3
 8010bf6:	e001      	b.n	8010bfc <put_fat+0xbc>
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	b2db      	uxtb	r3, r3
 8010bfc:	697a      	ldr	r2, [r7, #20]
 8010bfe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	2201      	movs	r2, #1
 8010c04:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	899b      	ldrh	r3, [r3, #12]
 8010c0e:	4619      	mov	r1, r3
 8010c10:	69bb      	ldr	r3, [r7, #24]
 8010c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8010c16:	4413      	add	r3, r2
 8010c18:	4619      	mov	r1, r3
 8010c1a:	68f8      	ldr	r0, [r7, #12]
 8010c1c:	f7ff fe00 	bl	8010820 <move_window>
 8010c20:	4603      	mov	r3, r0
 8010c22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010c24:	7ffb      	ldrb	r3, [r7, #31]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	f040 809a 	bne.w	8010d60 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	899b      	ldrh	r3, [r3, #12]
 8010c36:	461a      	mov	r2, r3
 8010c38:	69bb      	ldr	r3, [r7, #24]
 8010c3a:	fbb3 f0f2 	udiv	r0, r3, r2
 8010c3e:	fb00 f202 	mul.w	r2, r0, r2
 8010c42:	1a9b      	subs	r3, r3, r2
 8010c44:	440b      	add	r3, r1
 8010c46:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010c48:	68bb      	ldr	r3, [r7, #8]
 8010c4a:	f003 0301 	and.w	r3, r3, #1
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d003      	beq.n	8010c5a <put_fat+0x11a>
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	091b      	lsrs	r3, r3, #4
 8010c56:	b2db      	uxtb	r3, r3
 8010c58:	e00e      	b.n	8010c78 <put_fat+0x138>
 8010c5a:	697b      	ldr	r3, [r7, #20]
 8010c5c:	781b      	ldrb	r3, [r3, #0]
 8010c5e:	b25b      	sxtb	r3, r3
 8010c60:	f023 030f 	bic.w	r3, r3, #15
 8010c64:	b25a      	sxtb	r2, r3
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	0a1b      	lsrs	r3, r3, #8
 8010c6a:	b25b      	sxtb	r3, r3
 8010c6c:	f003 030f 	and.w	r3, r3, #15
 8010c70:	b25b      	sxtb	r3, r3
 8010c72:	4313      	orrs	r3, r2
 8010c74:	b25b      	sxtb	r3, r3
 8010c76:	b2db      	uxtb	r3, r3
 8010c78:	697a      	ldr	r2, [r7, #20]
 8010c7a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	2201      	movs	r2, #1
 8010c80:	70da      	strb	r2, [r3, #3]
			break;
 8010c82:	e072      	b.n	8010d6a <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	899b      	ldrh	r3, [r3, #12]
 8010c8c:	085b      	lsrs	r3, r3, #1
 8010c8e:	b29b      	uxth	r3, r3
 8010c90:	4619      	mov	r1, r3
 8010c92:	68bb      	ldr	r3, [r7, #8]
 8010c94:	fbb3 f3f1 	udiv	r3, r3, r1
 8010c98:	4413      	add	r3, r2
 8010c9a:	4619      	mov	r1, r3
 8010c9c:	68f8      	ldr	r0, [r7, #12]
 8010c9e:	f7ff fdbf 	bl	8010820 <move_window>
 8010ca2:	4603      	mov	r3, r0
 8010ca4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010ca6:	7ffb      	ldrb	r3, [r7, #31]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d15b      	bne.n	8010d64 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010cb2:	68bb      	ldr	r3, [r7, #8]
 8010cb4:	005b      	lsls	r3, r3, #1
 8010cb6:	68fa      	ldr	r2, [r7, #12]
 8010cb8:	8992      	ldrh	r2, [r2, #12]
 8010cba:	fbb3 f0f2 	udiv	r0, r3, r2
 8010cbe:	fb00 f202 	mul.w	r2, r0, r2
 8010cc2:	1a9b      	subs	r3, r3, r2
 8010cc4:	440b      	add	r3, r1
 8010cc6:	687a      	ldr	r2, [r7, #4]
 8010cc8:	b292      	uxth	r2, r2
 8010cca:	4611      	mov	r1, r2
 8010ccc:	4618      	mov	r0, r3
 8010cce:	f7ff fb32 	bl	8010336 <st_word>
			fs->wflag = 1;
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	2201      	movs	r2, #1
 8010cd6:	70da      	strb	r2, [r3, #3]
			break;
 8010cd8:	e047      	b.n	8010d6a <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	899b      	ldrh	r3, [r3, #12]
 8010ce2:	089b      	lsrs	r3, r3, #2
 8010ce4:	b29b      	uxth	r3, r3
 8010ce6:	4619      	mov	r1, r3
 8010ce8:	68bb      	ldr	r3, [r7, #8]
 8010cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8010cee:	4413      	add	r3, r2
 8010cf0:	4619      	mov	r1, r3
 8010cf2:	68f8      	ldr	r0, [r7, #12]
 8010cf4:	f7ff fd94 	bl	8010820 <move_window>
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010cfc:	7ffb      	ldrb	r3, [r7, #31]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d132      	bne.n	8010d68 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010d0e:	68bb      	ldr	r3, [r7, #8]
 8010d10:	009b      	lsls	r3, r3, #2
 8010d12:	68fa      	ldr	r2, [r7, #12]
 8010d14:	8992      	ldrh	r2, [r2, #12]
 8010d16:	fbb3 f0f2 	udiv	r0, r3, r2
 8010d1a:	fb00 f202 	mul.w	r2, r0, r2
 8010d1e:	1a9b      	subs	r3, r3, r2
 8010d20:	440b      	add	r3, r1
 8010d22:	4618      	mov	r0, r3
 8010d24:	f7ff fae4 	bl	80102f0 <ld_dword>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8010d2e:	4323      	orrs	r3, r4
 8010d30:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010d38:	68bb      	ldr	r3, [r7, #8]
 8010d3a:	009b      	lsls	r3, r3, #2
 8010d3c:	68fa      	ldr	r2, [r7, #12]
 8010d3e:	8992      	ldrh	r2, [r2, #12]
 8010d40:	fbb3 f0f2 	udiv	r0, r3, r2
 8010d44:	fb00 f202 	mul.w	r2, r0, r2
 8010d48:	1a9b      	subs	r3, r3, r2
 8010d4a:	440b      	add	r3, r1
 8010d4c:	6879      	ldr	r1, [r7, #4]
 8010d4e:	4618      	mov	r0, r3
 8010d50:	f7ff fb0c 	bl	801036c <st_dword>
			fs->wflag = 1;
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	2201      	movs	r2, #1
 8010d58:	70da      	strb	r2, [r3, #3]
			break;
 8010d5a:	e006      	b.n	8010d6a <put_fat+0x22a>
			if (res != FR_OK) break;
 8010d5c:	bf00      	nop
 8010d5e:	e004      	b.n	8010d6a <put_fat+0x22a>
			if (res != FR_OK) break;
 8010d60:	bf00      	nop
 8010d62:	e002      	b.n	8010d6a <put_fat+0x22a>
			if (res != FR_OK) break;
 8010d64:	bf00      	nop
 8010d66:	e000      	b.n	8010d6a <put_fat+0x22a>
			if (res != FR_OK) break;
 8010d68:	bf00      	nop
		}
	}
	return res;
 8010d6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	3724      	adds	r7, #36	@ 0x24
 8010d70:	46bd      	mov	sp, r7
 8010d72:	bd90      	pop	{r4, r7, pc}

08010d74 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b088      	sub	sp, #32
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	60f8      	str	r0, [r7, #12]
 8010d7c:	60b9      	str	r1, [r7, #8]
 8010d7e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010d80:	2300      	movs	r3, #0
 8010d82:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010d8a:	68bb      	ldr	r3, [r7, #8]
 8010d8c:	2b01      	cmp	r3, #1
 8010d8e:	d904      	bls.n	8010d9a <remove_chain+0x26>
 8010d90:	69bb      	ldr	r3, [r7, #24]
 8010d92:	6a1b      	ldr	r3, [r3, #32]
 8010d94:	68ba      	ldr	r2, [r7, #8]
 8010d96:	429a      	cmp	r2, r3
 8010d98:	d301      	bcc.n	8010d9e <remove_chain+0x2a>
 8010d9a:	2302      	movs	r3, #2
 8010d9c:	e04b      	b.n	8010e36 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d00c      	beq.n	8010dbe <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010da4:	f04f 32ff 	mov.w	r2, #4294967295
 8010da8:	6879      	ldr	r1, [r7, #4]
 8010daa:	69b8      	ldr	r0, [r7, #24]
 8010dac:	f7ff fec8 	bl	8010b40 <put_fat>
 8010db0:	4603      	mov	r3, r0
 8010db2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010db4:	7ffb      	ldrb	r3, [r7, #31]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d001      	beq.n	8010dbe <remove_chain+0x4a>
 8010dba:	7ffb      	ldrb	r3, [r7, #31]
 8010dbc:	e03b      	b.n	8010e36 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8010dbe:	68b9      	ldr	r1, [r7, #8]
 8010dc0:	68f8      	ldr	r0, [r7, #12]
 8010dc2:	f7ff fdea 	bl	801099a <get_fat>
 8010dc6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010dc8:	697b      	ldr	r3, [r7, #20]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d031      	beq.n	8010e32 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8010dce:	697b      	ldr	r3, [r7, #20]
 8010dd0:	2b01      	cmp	r3, #1
 8010dd2:	d101      	bne.n	8010dd8 <remove_chain+0x64>
 8010dd4:	2302      	movs	r3, #2
 8010dd6:	e02e      	b.n	8010e36 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010dd8:	697b      	ldr	r3, [r7, #20]
 8010dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dde:	d101      	bne.n	8010de4 <remove_chain+0x70>
 8010de0:	2301      	movs	r3, #1
 8010de2:	e028      	b.n	8010e36 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010de4:	2200      	movs	r2, #0
 8010de6:	68b9      	ldr	r1, [r7, #8]
 8010de8:	69b8      	ldr	r0, [r7, #24]
 8010dea:	f7ff fea9 	bl	8010b40 <put_fat>
 8010dee:	4603      	mov	r3, r0
 8010df0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010df2:	7ffb      	ldrb	r3, [r7, #31]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d001      	beq.n	8010dfc <remove_chain+0x88>
 8010df8:	7ffb      	ldrb	r3, [r7, #31]
 8010dfa:	e01c      	b.n	8010e36 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010dfc:	69bb      	ldr	r3, [r7, #24]
 8010dfe:	699a      	ldr	r2, [r3, #24]
 8010e00:	69bb      	ldr	r3, [r7, #24]
 8010e02:	6a1b      	ldr	r3, [r3, #32]
 8010e04:	3b02      	subs	r3, #2
 8010e06:	429a      	cmp	r2, r3
 8010e08:	d20b      	bcs.n	8010e22 <remove_chain+0xae>
			fs->free_clst++;
 8010e0a:	69bb      	ldr	r3, [r7, #24]
 8010e0c:	699b      	ldr	r3, [r3, #24]
 8010e0e:	1c5a      	adds	r2, r3, #1
 8010e10:	69bb      	ldr	r3, [r7, #24]
 8010e12:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8010e14:	69bb      	ldr	r3, [r7, #24]
 8010e16:	791b      	ldrb	r3, [r3, #4]
 8010e18:	f043 0301 	orr.w	r3, r3, #1
 8010e1c:	b2da      	uxtb	r2, r3
 8010e1e:	69bb      	ldr	r3, [r7, #24]
 8010e20:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010e22:	697b      	ldr	r3, [r7, #20]
 8010e24:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010e26:	69bb      	ldr	r3, [r7, #24]
 8010e28:	6a1b      	ldr	r3, [r3, #32]
 8010e2a:	68ba      	ldr	r2, [r7, #8]
 8010e2c:	429a      	cmp	r2, r3
 8010e2e:	d3c6      	bcc.n	8010dbe <remove_chain+0x4a>
 8010e30:	e000      	b.n	8010e34 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010e32:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010e34:	2300      	movs	r3, #0
}
 8010e36:	4618      	mov	r0, r3
 8010e38:	3720      	adds	r7, #32
 8010e3a:	46bd      	mov	sp, r7
 8010e3c:	bd80      	pop	{r7, pc}

08010e3e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010e3e:	b580      	push	{r7, lr}
 8010e40:	b088      	sub	sp, #32
 8010e42:	af00      	add	r7, sp, #0
 8010e44:	6078      	str	r0, [r7, #4]
 8010e46:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010e4e:	683b      	ldr	r3, [r7, #0]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d10d      	bne.n	8010e70 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010e54:	693b      	ldr	r3, [r7, #16]
 8010e56:	695b      	ldr	r3, [r3, #20]
 8010e58:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010e5a:	69bb      	ldr	r3, [r7, #24]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d004      	beq.n	8010e6a <create_chain+0x2c>
 8010e60:	693b      	ldr	r3, [r7, #16]
 8010e62:	6a1b      	ldr	r3, [r3, #32]
 8010e64:	69ba      	ldr	r2, [r7, #24]
 8010e66:	429a      	cmp	r2, r3
 8010e68:	d31b      	bcc.n	8010ea2 <create_chain+0x64>
 8010e6a:	2301      	movs	r3, #1
 8010e6c:	61bb      	str	r3, [r7, #24]
 8010e6e:	e018      	b.n	8010ea2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010e70:	6839      	ldr	r1, [r7, #0]
 8010e72:	6878      	ldr	r0, [r7, #4]
 8010e74:	f7ff fd91 	bl	801099a <get_fat>
 8010e78:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	2b01      	cmp	r3, #1
 8010e7e:	d801      	bhi.n	8010e84 <create_chain+0x46>
 8010e80:	2301      	movs	r3, #1
 8010e82:	e070      	b.n	8010f66 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e8a:	d101      	bne.n	8010e90 <create_chain+0x52>
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	e06a      	b.n	8010f66 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010e90:	693b      	ldr	r3, [r7, #16]
 8010e92:	6a1b      	ldr	r3, [r3, #32]
 8010e94:	68fa      	ldr	r2, [r7, #12]
 8010e96:	429a      	cmp	r2, r3
 8010e98:	d201      	bcs.n	8010e9e <create_chain+0x60>
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	e063      	b.n	8010f66 <create_chain+0x128>
		scl = clst;
 8010e9e:	683b      	ldr	r3, [r7, #0]
 8010ea0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010ea2:	69bb      	ldr	r3, [r7, #24]
 8010ea4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010ea6:	69fb      	ldr	r3, [r7, #28]
 8010ea8:	3301      	adds	r3, #1
 8010eaa:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8010eac:	693b      	ldr	r3, [r7, #16]
 8010eae:	6a1b      	ldr	r3, [r3, #32]
 8010eb0:	69fa      	ldr	r2, [r7, #28]
 8010eb2:	429a      	cmp	r2, r3
 8010eb4:	d307      	bcc.n	8010ec6 <create_chain+0x88>
				ncl = 2;
 8010eb6:	2302      	movs	r3, #2
 8010eb8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8010eba:	69fa      	ldr	r2, [r7, #28]
 8010ebc:	69bb      	ldr	r3, [r7, #24]
 8010ebe:	429a      	cmp	r2, r3
 8010ec0:	d901      	bls.n	8010ec6 <create_chain+0x88>
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	e04f      	b.n	8010f66 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010ec6:	69f9      	ldr	r1, [r7, #28]
 8010ec8:	6878      	ldr	r0, [r7, #4]
 8010eca:	f7ff fd66 	bl	801099a <get_fat>
 8010ece:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d00e      	beq.n	8010ef4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	2b01      	cmp	r3, #1
 8010eda:	d003      	beq.n	8010ee4 <create_chain+0xa6>
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ee2:	d101      	bne.n	8010ee8 <create_chain+0xaa>
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	e03e      	b.n	8010f66 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010ee8:	69fa      	ldr	r2, [r7, #28]
 8010eea:	69bb      	ldr	r3, [r7, #24]
 8010eec:	429a      	cmp	r2, r3
 8010eee:	d1da      	bne.n	8010ea6 <create_chain+0x68>
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	e038      	b.n	8010f66 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010ef4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8010efa:	69f9      	ldr	r1, [r7, #28]
 8010efc:	6938      	ldr	r0, [r7, #16]
 8010efe:	f7ff fe1f 	bl	8010b40 <put_fat>
 8010f02:	4603      	mov	r3, r0
 8010f04:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010f06:	7dfb      	ldrb	r3, [r7, #23]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d109      	bne.n	8010f20 <create_chain+0xe2>
 8010f0c:	683b      	ldr	r3, [r7, #0]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d006      	beq.n	8010f20 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010f12:	69fa      	ldr	r2, [r7, #28]
 8010f14:	6839      	ldr	r1, [r7, #0]
 8010f16:	6938      	ldr	r0, [r7, #16]
 8010f18:	f7ff fe12 	bl	8010b40 <put_fat>
 8010f1c:	4603      	mov	r3, r0
 8010f1e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010f20:	7dfb      	ldrb	r3, [r7, #23]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d116      	bne.n	8010f54 <create_chain+0x116>
		fs->last_clst = ncl;
 8010f26:	693b      	ldr	r3, [r7, #16]
 8010f28:	69fa      	ldr	r2, [r7, #28]
 8010f2a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010f2c:	693b      	ldr	r3, [r7, #16]
 8010f2e:	699a      	ldr	r2, [r3, #24]
 8010f30:	693b      	ldr	r3, [r7, #16]
 8010f32:	6a1b      	ldr	r3, [r3, #32]
 8010f34:	3b02      	subs	r3, #2
 8010f36:	429a      	cmp	r2, r3
 8010f38:	d804      	bhi.n	8010f44 <create_chain+0x106>
 8010f3a:	693b      	ldr	r3, [r7, #16]
 8010f3c:	699b      	ldr	r3, [r3, #24]
 8010f3e:	1e5a      	subs	r2, r3, #1
 8010f40:	693b      	ldr	r3, [r7, #16]
 8010f42:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8010f44:	693b      	ldr	r3, [r7, #16]
 8010f46:	791b      	ldrb	r3, [r3, #4]
 8010f48:	f043 0301 	orr.w	r3, r3, #1
 8010f4c:	b2da      	uxtb	r2, r3
 8010f4e:	693b      	ldr	r3, [r7, #16]
 8010f50:	711a      	strb	r2, [r3, #4]
 8010f52:	e007      	b.n	8010f64 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010f54:	7dfb      	ldrb	r3, [r7, #23]
 8010f56:	2b01      	cmp	r3, #1
 8010f58:	d102      	bne.n	8010f60 <create_chain+0x122>
 8010f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8010f5e:	e000      	b.n	8010f62 <create_chain+0x124>
 8010f60:	2301      	movs	r3, #1
 8010f62:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010f64:	69fb      	ldr	r3, [r7, #28]
}
 8010f66:	4618      	mov	r0, r3
 8010f68:	3720      	adds	r7, #32
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	bd80      	pop	{r7, pc}

08010f6e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010f6e:	b480      	push	{r7}
 8010f70:	b087      	sub	sp, #28
 8010f72:	af00      	add	r7, sp, #0
 8010f74:	6078      	str	r0, [r7, #4]
 8010f76:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f82:	3304      	adds	r3, #4
 8010f84:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	899b      	ldrh	r3, [r3, #12]
 8010f8a:	461a      	mov	r2, r3
 8010f8c:	683b      	ldr	r3, [r7, #0]
 8010f8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010f92:	68fa      	ldr	r2, [r7, #12]
 8010f94:	8952      	ldrh	r2, [r2, #10]
 8010f96:	fbb3 f3f2 	udiv	r3, r3, r2
 8010f9a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010f9c:	693b      	ldr	r3, [r7, #16]
 8010f9e:	1d1a      	adds	r2, r3, #4
 8010fa0:	613a      	str	r2, [r7, #16]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010fa6:	68bb      	ldr	r3, [r7, #8]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d101      	bne.n	8010fb0 <clmt_clust+0x42>
 8010fac:	2300      	movs	r3, #0
 8010fae:	e010      	b.n	8010fd2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8010fb0:	697a      	ldr	r2, [r7, #20]
 8010fb2:	68bb      	ldr	r3, [r7, #8]
 8010fb4:	429a      	cmp	r2, r3
 8010fb6:	d307      	bcc.n	8010fc8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8010fb8:	697a      	ldr	r2, [r7, #20]
 8010fba:	68bb      	ldr	r3, [r7, #8]
 8010fbc:	1ad3      	subs	r3, r2, r3
 8010fbe:	617b      	str	r3, [r7, #20]
 8010fc0:	693b      	ldr	r3, [r7, #16]
 8010fc2:	3304      	adds	r3, #4
 8010fc4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010fc6:	e7e9      	b.n	8010f9c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8010fc8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010fca:	693b      	ldr	r3, [r7, #16]
 8010fcc:	681a      	ldr	r2, [r3, #0]
 8010fce:	697b      	ldr	r3, [r7, #20]
 8010fd0:	4413      	add	r3, r2
}
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	371c      	adds	r7, #28
 8010fd6:	46bd      	mov	sp, r7
 8010fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fdc:	4770      	bx	lr

08010fde <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010fde:	b580      	push	{r7, lr}
 8010fe0:	b086      	sub	sp, #24
 8010fe2:	af00      	add	r7, sp, #0
 8010fe4:	6078      	str	r0, [r7, #4]
 8010fe6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010fee:	683b      	ldr	r3, [r7, #0]
 8010ff0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010ff4:	d204      	bcs.n	8011000 <dir_sdi+0x22>
 8010ff6:	683b      	ldr	r3, [r7, #0]
 8010ff8:	f003 031f 	and.w	r3, r3, #31
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d001      	beq.n	8011004 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011000:	2302      	movs	r3, #2
 8011002:	e071      	b.n	80110e8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	683a      	ldr	r2, [r7, #0]
 8011008:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	689b      	ldr	r3, [r3, #8]
 801100e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011010:	697b      	ldr	r3, [r7, #20]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d106      	bne.n	8011024 <dir_sdi+0x46>
 8011016:	693b      	ldr	r3, [r7, #16]
 8011018:	781b      	ldrb	r3, [r3, #0]
 801101a:	2b02      	cmp	r3, #2
 801101c:	d902      	bls.n	8011024 <dir_sdi+0x46>
		clst = fs->dirbase;
 801101e:	693b      	ldr	r3, [r7, #16]
 8011020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011022:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011024:	697b      	ldr	r3, [r7, #20]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d10c      	bne.n	8011044 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801102a:	683b      	ldr	r3, [r7, #0]
 801102c:	095b      	lsrs	r3, r3, #5
 801102e:	693a      	ldr	r2, [r7, #16]
 8011030:	8912      	ldrh	r2, [r2, #8]
 8011032:	4293      	cmp	r3, r2
 8011034:	d301      	bcc.n	801103a <dir_sdi+0x5c>
 8011036:	2302      	movs	r3, #2
 8011038:	e056      	b.n	80110e8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801103a:	693b      	ldr	r3, [r7, #16]
 801103c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	61da      	str	r2, [r3, #28]
 8011042:	e02d      	b.n	80110a0 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011044:	693b      	ldr	r3, [r7, #16]
 8011046:	895b      	ldrh	r3, [r3, #10]
 8011048:	461a      	mov	r2, r3
 801104a:	693b      	ldr	r3, [r7, #16]
 801104c:	899b      	ldrh	r3, [r3, #12]
 801104e:	fb02 f303 	mul.w	r3, r2, r3
 8011052:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011054:	e019      	b.n	801108a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	6979      	ldr	r1, [r7, #20]
 801105a:	4618      	mov	r0, r3
 801105c:	f7ff fc9d 	bl	801099a <get_fat>
 8011060:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011062:	697b      	ldr	r3, [r7, #20]
 8011064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011068:	d101      	bne.n	801106e <dir_sdi+0x90>
 801106a:	2301      	movs	r3, #1
 801106c:	e03c      	b.n	80110e8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801106e:	697b      	ldr	r3, [r7, #20]
 8011070:	2b01      	cmp	r3, #1
 8011072:	d904      	bls.n	801107e <dir_sdi+0xa0>
 8011074:	693b      	ldr	r3, [r7, #16]
 8011076:	6a1b      	ldr	r3, [r3, #32]
 8011078:	697a      	ldr	r2, [r7, #20]
 801107a:	429a      	cmp	r2, r3
 801107c:	d301      	bcc.n	8011082 <dir_sdi+0xa4>
 801107e:	2302      	movs	r3, #2
 8011080:	e032      	b.n	80110e8 <dir_sdi+0x10a>
			ofs -= csz;
 8011082:	683a      	ldr	r2, [r7, #0]
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	1ad3      	subs	r3, r2, r3
 8011088:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801108a:	683a      	ldr	r2, [r7, #0]
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	429a      	cmp	r2, r3
 8011090:	d2e1      	bcs.n	8011056 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8011092:	6979      	ldr	r1, [r7, #20]
 8011094:	6938      	ldr	r0, [r7, #16]
 8011096:	f7ff fc61 	bl	801095c <clust2sect>
 801109a:	4602      	mov	r2, r0
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	697a      	ldr	r2, [r7, #20]
 80110a4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	69db      	ldr	r3, [r3, #28]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d101      	bne.n	80110b2 <dir_sdi+0xd4>
 80110ae:	2302      	movs	r3, #2
 80110b0:	e01a      	b.n	80110e8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	69da      	ldr	r2, [r3, #28]
 80110b6:	693b      	ldr	r3, [r7, #16]
 80110b8:	899b      	ldrh	r3, [r3, #12]
 80110ba:	4619      	mov	r1, r3
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	fbb3 f3f1 	udiv	r3, r3, r1
 80110c2:	441a      	add	r2, r3
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80110c8:	693b      	ldr	r3, [r7, #16]
 80110ca:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80110ce:	693b      	ldr	r3, [r7, #16]
 80110d0:	899b      	ldrh	r3, [r3, #12]
 80110d2:	461a      	mov	r2, r3
 80110d4:	683b      	ldr	r3, [r7, #0]
 80110d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80110da:	fb00 f202 	mul.w	r2, r0, r2
 80110de:	1a9b      	subs	r3, r3, r2
 80110e0:	18ca      	adds	r2, r1, r3
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80110e6:	2300      	movs	r3, #0
}
 80110e8:	4618      	mov	r0, r3
 80110ea:	3718      	adds	r7, #24
 80110ec:	46bd      	mov	sp, r7
 80110ee:	bd80      	pop	{r7, pc}

080110f0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b086      	sub	sp, #24
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
 80110f8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	695b      	ldr	r3, [r3, #20]
 8011104:	3320      	adds	r3, #32
 8011106:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	69db      	ldr	r3, [r3, #28]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d003      	beq.n	8011118 <dir_next+0x28>
 8011110:	68bb      	ldr	r3, [r7, #8]
 8011112:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011116:	d301      	bcc.n	801111c <dir_next+0x2c>
 8011118:	2304      	movs	r3, #4
 801111a:	e0bb      	b.n	8011294 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	899b      	ldrh	r3, [r3, #12]
 8011120:	461a      	mov	r2, r3
 8011122:	68bb      	ldr	r3, [r7, #8]
 8011124:	fbb3 f1f2 	udiv	r1, r3, r2
 8011128:	fb01 f202 	mul.w	r2, r1, r2
 801112c:	1a9b      	subs	r3, r3, r2
 801112e:	2b00      	cmp	r3, #0
 8011130:	f040 809d 	bne.w	801126e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	69db      	ldr	r3, [r3, #28]
 8011138:	1c5a      	adds	r2, r3, #1
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	699b      	ldr	r3, [r3, #24]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d10b      	bne.n	801115e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011146:	68bb      	ldr	r3, [r7, #8]
 8011148:	095b      	lsrs	r3, r3, #5
 801114a:	68fa      	ldr	r2, [r7, #12]
 801114c:	8912      	ldrh	r2, [r2, #8]
 801114e:	4293      	cmp	r3, r2
 8011150:	f0c0 808d 	bcc.w	801126e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2200      	movs	r2, #0
 8011158:	61da      	str	r2, [r3, #28]
 801115a:	2304      	movs	r3, #4
 801115c:	e09a      	b.n	8011294 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	899b      	ldrh	r3, [r3, #12]
 8011162:	461a      	mov	r2, r3
 8011164:	68bb      	ldr	r3, [r7, #8]
 8011166:	fbb3 f3f2 	udiv	r3, r3, r2
 801116a:	68fa      	ldr	r2, [r7, #12]
 801116c:	8952      	ldrh	r2, [r2, #10]
 801116e:	3a01      	subs	r2, #1
 8011170:	4013      	ands	r3, r2
 8011172:	2b00      	cmp	r3, #0
 8011174:	d17b      	bne.n	801126e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011176:	687a      	ldr	r2, [r7, #4]
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	699b      	ldr	r3, [r3, #24]
 801117c:	4619      	mov	r1, r3
 801117e:	4610      	mov	r0, r2
 8011180:	f7ff fc0b 	bl	801099a <get_fat>
 8011184:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011186:	697b      	ldr	r3, [r7, #20]
 8011188:	2b01      	cmp	r3, #1
 801118a:	d801      	bhi.n	8011190 <dir_next+0xa0>
 801118c:	2302      	movs	r3, #2
 801118e:	e081      	b.n	8011294 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011190:	697b      	ldr	r3, [r7, #20]
 8011192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011196:	d101      	bne.n	801119c <dir_next+0xac>
 8011198:	2301      	movs	r3, #1
 801119a:	e07b      	b.n	8011294 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	6a1b      	ldr	r3, [r3, #32]
 80111a0:	697a      	ldr	r2, [r7, #20]
 80111a2:	429a      	cmp	r2, r3
 80111a4:	d359      	bcc.n	801125a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80111a6:	683b      	ldr	r3, [r7, #0]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d104      	bne.n	80111b6 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	2200      	movs	r2, #0
 80111b0:	61da      	str	r2, [r3, #28]
 80111b2:	2304      	movs	r3, #4
 80111b4:	e06e      	b.n	8011294 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80111b6:	687a      	ldr	r2, [r7, #4]
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	699b      	ldr	r3, [r3, #24]
 80111bc:	4619      	mov	r1, r3
 80111be:	4610      	mov	r0, r2
 80111c0:	f7ff fe3d 	bl	8010e3e <create_chain>
 80111c4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80111c6:	697b      	ldr	r3, [r7, #20]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d101      	bne.n	80111d0 <dir_next+0xe0>
 80111cc:	2307      	movs	r3, #7
 80111ce:	e061      	b.n	8011294 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80111d0:	697b      	ldr	r3, [r7, #20]
 80111d2:	2b01      	cmp	r3, #1
 80111d4:	d101      	bne.n	80111da <dir_next+0xea>
 80111d6:	2302      	movs	r3, #2
 80111d8:	e05c      	b.n	8011294 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80111da:	697b      	ldr	r3, [r7, #20]
 80111dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111e0:	d101      	bne.n	80111e6 <dir_next+0xf6>
 80111e2:	2301      	movs	r3, #1
 80111e4:	e056      	b.n	8011294 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80111e6:	68f8      	ldr	r0, [r7, #12]
 80111e8:	f7ff fad6 	bl	8010798 <sync_window>
 80111ec:	4603      	mov	r3, r0
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d001      	beq.n	80111f6 <dir_next+0x106>
 80111f2:	2301      	movs	r3, #1
 80111f4:	e04e      	b.n	8011294 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	899b      	ldrh	r3, [r3, #12]
 8011200:	461a      	mov	r2, r3
 8011202:	2100      	movs	r1, #0
 8011204:	f7ff f8ff 	bl	8010406 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011208:	2300      	movs	r3, #0
 801120a:	613b      	str	r3, [r7, #16]
 801120c:	6979      	ldr	r1, [r7, #20]
 801120e:	68f8      	ldr	r0, [r7, #12]
 8011210:	f7ff fba4 	bl	801095c <clust2sect>
 8011214:	4602      	mov	r2, r0
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	639a      	str	r2, [r3, #56]	@ 0x38
 801121a:	e012      	b.n	8011242 <dir_next+0x152>
						fs->wflag = 1;
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	2201      	movs	r2, #1
 8011220:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011222:	68f8      	ldr	r0, [r7, #12]
 8011224:	f7ff fab8 	bl	8010798 <sync_window>
 8011228:	4603      	mov	r3, r0
 801122a:	2b00      	cmp	r3, #0
 801122c:	d001      	beq.n	8011232 <dir_next+0x142>
 801122e:	2301      	movs	r3, #1
 8011230:	e030      	b.n	8011294 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011232:	693b      	ldr	r3, [r7, #16]
 8011234:	3301      	adds	r3, #1
 8011236:	613b      	str	r3, [r7, #16]
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801123c:	1c5a      	adds	r2, r3, #1
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	639a      	str	r2, [r3, #56]	@ 0x38
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	895b      	ldrh	r3, [r3, #10]
 8011246:	461a      	mov	r2, r3
 8011248:	693b      	ldr	r3, [r7, #16]
 801124a:	4293      	cmp	r3, r2
 801124c:	d3e6      	bcc.n	801121c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011252:	693b      	ldr	r3, [r7, #16]
 8011254:	1ad2      	subs	r2, r2, r3
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	697a      	ldr	r2, [r7, #20]
 801125e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011260:	6979      	ldr	r1, [r7, #20]
 8011262:	68f8      	ldr	r0, [r7, #12]
 8011264:	f7ff fb7a 	bl	801095c <clust2sect>
 8011268:	4602      	mov	r2, r0
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	68ba      	ldr	r2, [r7, #8]
 8011272:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	899b      	ldrh	r3, [r3, #12]
 801127e:	461a      	mov	r2, r3
 8011280:	68bb      	ldr	r3, [r7, #8]
 8011282:	fbb3 f0f2 	udiv	r0, r3, r2
 8011286:	fb00 f202 	mul.w	r2, r0, r2
 801128a:	1a9b      	subs	r3, r3, r2
 801128c:	18ca      	adds	r2, r1, r3
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011292:	2300      	movs	r3, #0
}
 8011294:	4618      	mov	r0, r3
 8011296:	3718      	adds	r7, #24
 8011298:	46bd      	mov	sp, r7
 801129a:	bd80      	pop	{r7, pc}

0801129c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b086      	sub	sp, #24
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
 80112a4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80112ac:	2100      	movs	r1, #0
 80112ae:	6878      	ldr	r0, [r7, #4]
 80112b0:	f7ff fe95 	bl	8010fde <dir_sdi>
 80112b4:	4603      	mov	r3, r0
 80112b6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80112b8:	7dfb      	ldrb	r3, [r7, #23]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d12b      	bne.n	8011316 <dir_alloc+0x7a>
		n = 0;
 80112be:	2300      	movs	r3, #0
 80112c0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	69db      	ldr	r3, [r3, #28]
 80112c6:	4619      	mov	r1, r3
 80112c8:	68f8      	ldr	r0, [r7, #12]
 80112ca:	f7ff faa9 	bl	8010820 <move_window>
 80112ce:	4603      	mov	r3, r0
 80112d0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80112d2:	7dfb      	ldrb	r3, [r7, #23]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d11d      	bne.n	8011314 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	6a1b      	ldr	r3, [r3, #32]
 80112dc:	781b      	ldrb	r3, [r3, #0]
 80112de:	2be5      	cmp	r3, #229	@ 0xe5
 80112e0:	d004      	beq.n	80112ec <dir_alloc+0x50>
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	6a1b      	ldr	r3, [r3, #32]
 80112e6:	781b      	ldrb	r3, [r3, #0]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d107      	bne.n	80112fc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80112ec:	693b      	ldr	r3, [r7, #16]
 80112ee:	3301      	adds	r3, #1
 80112f0:	613b      	str	r3, [r7, #16]
 80112f2:	693a      	ldr	r2, [r7, #16]
 80112f4:	683b      	ldr	r3, [r7, #0]
 80112f6:	429a      	cmp	r2, r3
 80112f8:	d102      	bne.n	8011300 <dir_alloc+0x64>
 80112fa:	e00c      	b.n	8011316 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80112fc:	2300      	movs	r3, #0
 80112fe:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011300:	2101      	movs	r1, #1
 8011302:	6878      	ldr	r0, [r7, #4]
 8011304:	f7ff fef4 	bl	80110f0 <dir_next>
 8011308:	4603      	mov	r3, r0
 801130a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801130c:	7dfb      	ldrb	r3, [r7, #23]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d0d7      	beq.n	80112c2 <dir_alloc+0x26>
 8011312:	e000      	b.n	8011316 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011314:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011316:	7dfb      	ldrb	r3, [r7, #23]
 8011318:	2b04      	cmp	r3, #4
 801131a:	d101      	bne.n	8011320 <dir_alloc+0x84>
 801131c:	2307      	movs	r3, #7
 801131e:	75fb      	strb	r3, [r7, #23]
	return res;
 8011320:	7dfb      	ldrb	r3, [r7, #23]
}
 8011322:	4618      	mov	r0, r3
 8011324:	3718      	adds	r7, #24
 8011326:	46bd      	mov	sp, r7
 8011328:	bd80      	pop	{r7, pc}

0801132a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801132a:	b580      	push	{r7, lr}
 801132c:	b084      	sub	sp, #16
 801132e:	af00      	add	r7, sp, #0
 8011330:	6078      	str	r0, [r7, #4]
 8011332:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011334:	683b      	ldr	r3, [r7, #0]
 8011336:	331a      	adds	r3, #26
 8011338:	4618      	mov	r0, r3
 801133a:	f7fe ffc1 	bl	80102c0 <ld_word>
 801133e:	4603      	mov	r3, r0
 8011340:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	781b      	ldrb	r3, [r3, #0]
 8011346:	2b03      	cmp	r3, #3
 8011348:	d109      	bne.n	801135e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801134a:	683b      	ldr	r3, [r7, #0]
 801134c:	3314      	adds	r3, #20
 801134e:	4618      	mov	r0, r3
 8011350:	f7fe ffb6 	bl	80102c0 <ld_word>
 8011354:	4603      	mov	r3, r0
 8011356:	041b      	lsls	r3, r3, #16
 8011358:	68fa      	ldr	r2, [r7, #12]
 801135a:	4313      	orrs	r3, r2
 801135c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801135e:	68fb      	ldr	r3, [r7, #12]
}
 8011360:	4618      	mov	r0, r3
 8011362:	3710      	adds	r7, #16
 8011364:	46bd      	mov	sp, r7
 8011366:	bd80      	pop	{r7, pc}

08011368 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011368:	b580      	push	{r7, lr}
 801136a:	b084      	sub	sp, #16
 801136c:	af00      	add	r7, sp, #0
 801136e:	60f8      	str	r0, [r7, #12]
 8011370:	60b9      	str	r1, [r7, #8]
 8011372:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011374:	68bb      	ldr	r3, [r7, #8]
 8011376:	331a      	adds	r3, #26
 8011378:	687a      	ldr	r2, [r7, #4]
 801137a:	b292      	uxth	r2, r2
 801137c:	4611      	mov	r1, r2
 801137e:	4618      	mov	r0, r3
 8011380:	f7fe ffd9 	bl	8010336 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	781b      	ldrb	r3, [r3, #0]
 8011388:	2b03      	cmp	r3, #3
 801138a:	d109      	bne.n	80113a0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801138c:	68bb      	ldr	r3, [r7, #8]
 801138e:	f103 0214 	add.w	r2, r3, #20
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	0c1b      	lsrs	r3, r3, #16
 8011396:	b29b      	uxth	r3, r3
 8011398:	4619      	mov	r1, r3
 801139a:	4610      	mov	r0, r2
 801139c:	f7fe ffcb 	bl	8010336 <st_word>
	}
}
 80113a0:	bf00      	nop
 80113a2:	3710      	adds	r7, #16
 80113a4:	46bd      	mov	sp, r7
 80113a6:	bd80      	pop	{r7, pc}

080113a8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80113a8:	b590      	push	{r4, r7, lr}
 80113aa:	b087      	sub	sp, #28
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	6078      	str	r0, [r7, #4]
 80113b0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80113b2:	683b      	ldr	r3, [r7, #0]
 80113b4:	331a      	adds	r3, #26
 80113b6:	4618      	mov	r0, r3
 80113b8:	f7fe ff82 	bl	80102c0 <ld_word>
 80113bc:	4603      	mov	r3, r0
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d001      	beq.n	80113c6 <cmp_lfn+0x1e>
 80113c2:	2300      	movs	r3, #0
 80113c4:	e059      	b.n	801147a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80113c6:	683b      	ldr	r3, [r7, #0]
 80113c8:	781b      	ldrb	r3, [r3, #0]
 80113ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80113ce:	1e5a      	subs	r2, r3, #1
 80113d0:	4613      	mov	r3, r2
 80113d2:	005b      	lsls	r3, r3, #1
 80113d4:	4413      	add	r3, r2
 80113d6:	009b      	lsls	r3, r3, #2
 80113d8:	4413      	add	r3, r2
 80113da:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80113dc:	2301      	movs	r3, #1
 80113de:	81fb      	strh	r3, [r7, #14]
 80113e0:	2300      	movs	r3, #0
 80113e2:	613b      	str	r3, [r7, #16]
 80113e4:	e033      	b.n	801144e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80113e6:	4a27      	ldr	r2, [pc, #156]	@ (8011484 <cmp_lfn+0xdc>)
 80113e8:	693b      	ldr	r3, [r7, #16]
 80113ea:	4413      	add	r3, r2
 80113ec:	781b      	ldrb	r3, [r3, #0]
 80113ee:	461a      	mov	r2, r3
 80113f0:	683b      	ldr	r3, [r7, #0]
 80113f2:	4413      	add	r3, r2
 80113f4:	4618      	mov	r0, r3
 80113f6:	f7fe ff63 	bl	80102c0 <ld_word>
 80113fa:	4603      	mov	r3, r0
 80113fc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80113fe:	89fb      	ldrh	r3, [r7, #14]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d01a      	beq.n	801143a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8011404:	697b      	ldr	r3, [r7, #20]
 8011406:	2bfe      	cmp	r3, #254	@ 0xfe
 8011408:	d812      	bhi.n	8011430 <cmp_lfn+0x88>
 801140a:	89bb      	ldrh	r3, [r7, #12]
 801140c:	4618      	mov	r0, r3
 801140e:	f002 fe0f 	bl	8014030 <ff_wtoupper>
 8011412:	4603      	mov	r3, r0
 8011414:	461c      	mov	r4, r3
 8011416:	697b      	ldr	r3, [r7, #20]
 8011418:	1c5a      	adds	r2, r3, #1
 801141a:	617a      	str	r2, [r7, #20]
 801141c:	005b      	lsls	r3, r3, #1
 801141e:	687a      	ldr	r2, [r7, #4]
 8011420:	4413      	add	r3, r2
 8011422:	881b      	ldrh	r3, [r3, #0]
 8011424:	4618      	mov	r0, r3
 8011426:	f002 fe03 	bl	8014030 <ff_wtoupper>
 801142a:	4603      	mov	r3, r0
 801142c:	429c      	cmp	r4, r3
 801142e:	d001      	beq.n	8011434 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8011430:	2300      	movs	r3, #0
 8011432:	e022      	b.n	801147a <cmp_lfn+0xd2>
			}
			wc = uc;
 8011434:	89bb      	ldrh	r3, [r7, #12]
 8011436:	81fb      	strh	r3, [r7, #14]
 8011438:	e006      	b.n	8011448 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801143a:	89bb      	ldrh	r3, [r7, #12]
 801143c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011440:	4293      	cmp	r3, r2
 8011442:	d001      	beq.n	8011448 <cmp_lfn+0xa0>
 8011444:	2300      	movs	r3, #0
 8011446:	e018      	b.n	801147a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011448:	693b      	ldr	r3, [r7, #16]
 801144a:	3301      	adds	r3, #1
 801144c:	613b      	str	r3, [r7, #16]
 801144e:	693b      	ldr	r3, [r7, #16]
 8011450:	2b0c      	cmp	r3, #12
 8011452:	d9c8      	bls.n	80113e6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8011454:	683b      	ldr	r3, [r7, #0]
 8011456:	781b      	ldrb	r3, [r3, #0]
 8011458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801145c:	2b00      	cmp	r3, #0
 801145e:	d00b      	beq.n	8011478 <cmp_lfn+0xd0>
 8011460:	89fb      	ldrh	r3, [r7, #14]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d008      	beq.n	8011478 <cmp_lfn+0xd0>
 8011466:	697b      	ldr	r3, [r7, #20]
 8011468:	005b      	lsls	r3, r3, #1
 801146a:	687a      	ldr	r2, [r7, #4]
 801146c:	4413      	add	r3, r2
 801146e:	881b      	ldrh	r3, [r3, #0]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d001      	beq.n	8011478 <cmp_lfn+0xd0>
 8011474:	2300      	movs	r3, #0
 8011476:	e000      	b.n	801147a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8011478:	2301      	movs	r3, #1
}
 801147a:	4618      	mov	r0, r3
 801147c:	371c      	adds	r7, #28
 801147e:	46bd      	mov	sp, r7
 8011480:	bd90      	pop	{r4, r7, pc}
 8011482:	bf00      	nop
 8011484:	080145b0 	.word	0x080145b0

08011488 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8011488:	b580      	push	{r7, lr}
 801148a:	b086      	sub	sp, #24
 801148c:	af00      	add	r7, sp, #0
 801148e:	6078      	str	r0, [r7, #4]
 8011490:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8011492:	683b      	ldr	r3, [r7, #0]
 8011494:	331a      	adds	r3, #26
 8011496:	4618      	mov	r0, r3
 8011498:	f7fe ff12 	bl	80102c0 <ld_word>
 801149c:	4603      	mov	r3, r0
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d001      	beq.n	80114a6 <pick_lfn+0x1e>
 80114a2:	2300      	movs	r3, #0
 80114a4:	e04d      	b.n	8011542 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80114a6:	683b      	ldr	r3, [r7, #0]
 80114a8:	781b      	ldrb	r3, [r3, #0]
 80114aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80114ae:	1e5a      	subs	r2, r3, #1
 80114b0:	4613      	mov	r3, r2
 80114b2:	005b      	lsls	r3, r3, #1
 80114b4:	4413      	add	r3, r2
 80114b6:	009b      	lsls	r3, r3, #2
 80114b8:	4413      	add	r3, r2
 80114ba:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80114bc:	2301      	movs	r3, #1
 80114be:	81fb      	strh	r3, [r7, #14]
 80114c0:	2300      	movs	r3, #0
 80114c2:	613b      	str	r3, [r7, #16]
 80114c4:	e028      	b.n	8011518 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80114c6:	4a21      	ldr	r2, [pc, #132]	@ (801154c <pick_lfn+0xc4>)
 80114c8:	693b      	ldr	r3, [r7, #16]
 80114ca:	4413      	add	r3, r2
 80114cc:	781b      	ldrb	r3, [r3, #0]
 80114ce:	461a      	mov	r2, r3
 80114d0:	683b      	ldr	r3, [r7, #0]
 80114d2:	4413      	add	r3, r2
 80114d4:	4618      	mov	r0, r3
 80114d6:	f7fe fef3 	bl	80102c0 <ld_word>
 80114da:	4603      	mov	r3, r0
 80114dc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80114de:	89fb      	ldrh	r3, [r7, #14]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d00f      	beq.n	8011504 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80114e4:	697b      	ldr	r3, [r7, #20]
 80114e6:	2bfe      	cmp	r3, #254	@ 0xfe
 80114e8:	d901      	bls.n	80114ee <pick_lfn+0x66>
 80114ea:	2300      	movs	r3, #0
 80114ec:	e029      	b.n	8011542 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80114ee:	89bb      	ldrh	r3, [r7, #12]
 80114f0:	81fb      	strh	r3, [r7, #14]
 80114f2:	697b      	ldr	r3, [r7, #20]
 80114f4:	1c5a      	adds	r2, r3, #1
 80114f6:	617a      	str	r2, [r7, #20]
 80114f8:	005b      	lsls	r3, r3, #1
 80114fa:	687a      	ldr	r2, [r7, #4]
 80114fc:	4413      	add	r3, r2
 80114fe:	89fa      	ldrh	r2, [r7, #14]
 8011500:	801a      	strh	r2, [r3, #0]
 8011502:	e006      	b.n	8011512 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011504:	89bb      	ldrh	r3, [r7, #12]
 8011506:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801150a:	4293      	cmp	r3, r2
 801150c:	d001      	beq.n	8011512 <pick_lfn+0x8a>
 801150e:	2300      	movs	r3, #0
 8011510:	e017      	b.n	8011542 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011512:	693b      	ldr	r3, [r7, #16]
 8011514:	3301      	adds	r3, #1
 8011516:	613b      	str	r3, [r7, #16]
 8011518:	693b      	ldr	r3, [r7, #16]
 801151a:	2b0c      	cmp	r3, #12
 801151c:	d9d3      	bls.n	80114c6 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 801151e:	683b      	ldr	r3, [r7, #0]
 8011520:	781b      	ldrb	r3, [r3, #0]
 8011522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011526:	2b00      	cmp	r3, #0
 8011528:	d00a      	beq.n	8011540 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 801152a:	697b      	ldr	r3, [r7, #20]
 801152c:	2bfe      	cmp	r3, #254	@ 0xfe
 801152e:	d901      	bls.n	8011534 <pick_lfn+0xac>
 8011530:	2300      	movs	r3, #0
 8011532:	e006      	b.n	8011542 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8011534:	697b      	ldr	r3, [r7, #20]
 8011536:	005b      	lsls	r3, r3, #1
 8011538:	687a      	ldr	r2, [r7, #4]
 801153a:	4413      	add	r3, r2
 801153c:	2200      	movs	r2, #0
 801153e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8011540:	2301      	movs	r3, #1
}
 8011542:	4618      	mov	r0, r3
 8011544:	3718      	adds	r7, #24
 8011546:	46bd      	mov	sp, r7
 8011548:	bd80      	pop	{r7, pc}
 801154a:	bf00      	nop
 801154c:	080145b0 	.word	0x080145b0

08011550 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8011550:	b580      	push	{r7, lr}
 8011552:	b088      	sub	sp, #32
 8011554:	af00      	add	r7, sp, #0
 8011556:	60f8      	str	r0, [r7, #12]
 8011558:	60b9      	str	r1, [r7, #8]
 801155a:	4611      	mov	r1, r2
 801155c:	461a      	mov	r2, r3
 801155e:	460b      	mov	r3, r1
 8011560:	71fb      	strb	r3, [r7, #7]
 8011562:	4613      	mov	r3, r2
 8011564:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8011566:	68bb      	ldr	r3, [r7, #8]
 8011568:	330d      	adds	r3, #13
 801156a:	79ba      	ldrb	r2, [r7, #6]
 801156c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801156e:	68bb      	ldr	r3, [r7, #8]
 8011570:	330b      	adds	r3, #11
 8011572:	220f      	movs	r2, #15
 8011574:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8011576:	68bb      	ldr	r3, [r7, #8]
 8011578:	330c      	adds	r3, #12
 801157a:	2200      	movs	r2, #0
 801157c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801157e:	68bb      	ldr	r3, [r7, #8]
 8011580:	331a      	adds	r3, #26
 8011582:	2100      	movs	r1, #0
 8011584:	4618      	mov	r0, r3
 8011586:	f7fe fed6 	bl	8010336 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801158a:	79fb      	ldrb	r3, [r7, #7]
 801158c:	1e5a      	subs	r2, r3, #1
 801158e:	4613      	mov	r3, r2
 8011590:	005b      	lsls	r3, r3, #1
 8011592:	4413      	add	r3, r2
 8011594:	009b      	lsls	r3, r3, #2
 8011596:	4413      	add	r3, r2
 8011598:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801159a:	2300      	movs	r3, #0
 801159c:	82fb      	strh	r3, [r7, #22]
 801159e:	2300      	movs	r3, #0
 80115a0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80115a2:	8afb      	ldrh	r3, [r7, #22]
 80115a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80115a8:	4293      	cmp	r3, r2
 80115aa:	d007      	beq.n	80115bc <put_lfn+0x6c>
 80115ac:	69fb      	ldr	r3, [r7, #28]
 80115ae:	1c5a      	adds	r2, r3, #1
 80115b0:	61fa      	str	r2, [r7, #28]
 80115b2:	005b      	lsls	r3, r3, #1
 80115b4:	68fa      	ldr	r2, [r7, #12]
 80115b6:	4413      	add	r3, r2
 80115b8:	881b      	ldrh	r3, [r3, #0]
 80115ba:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80115bc:	4a17      	ldr	r2, [pc, #92]	@ (801161c <put_lfn+0xcc>)
 80115be:	69bb      	ldr	r3, [r7, #24]
 80115c0:	4413      	add	r3, r2
 80115c2:	781b      	ldrb	r3, [r3, #0]
 80115c4:	461a      	mov	r2, r3
 80115c6:	68bb      	ldr	r3, [r7, #8]
 80115c8:	4413      	add	r3, r2
 80115ca:	8afa      	ldrh	r2, [r7, #22]
 80115cc:	4611      	mov	r1, r2
 80115ce:	4618      	mov	r0, r3
 80115d0:	f7fe feb1 	bl	8010336 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80115d4:	8afb      	ldrh	r3, [r7, #22]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d102      	bne.n	80115e0 <put_lfn+0x90>
 80115da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80115de:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80115e0:	69bb      	ldr	r3, [r7, #24]
 80115e2:	3301      	adds	r3, #1
 80115e4:	61bb      	str	r3, [r7, #24]
 80115e6:	69bb      	ldr	r3, [r7, #24]
 80115e8:	2b0c      	cmp	r3, #12
 80115ea:	d9da      	bls.n	80115a2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80115ec:	8afb      	ldrh	r3, [r7, #22]
 80115ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80115f2:	4293      	cmp	r3, r2
 80115f4:	d006      	beq.n	8011604 <put_lfn+0xb4>
 80115f6:	69fb      	ldr	r3, [r7, #28]
 80115f8:	005b      	lsls	r3, r3, #1
 80115fa:	68fa      	ldr	r2, [r7, #12]
 80115fc:	4413      	add	r3, r2
 80115fe:	881b      	ldrh	r3, [r3, #0]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d103      	bne.n	801160c <put_lfn+0xbc>
 8011604:	79fb      	ldrb	r3, [r7, #7]
 8011606:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801160a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801160c:	68bb      	ldr	r3, [r7, #8]
 801160e:	79fa      	ldrb	r2, [r7, #7]
 8011610:	701a      	strb	r2, [r3, #0]
}
 8011612:	bf00      	nop
 8011614:	3720      	adds	r7, #32
 8011616:	46bd      	mov	sp, r7
 8011618:	bd80      	pop	{r7, pc}
 801161a:	bf00      	nop
 801161c:	080145b0 	.word	0x080145b0

08011620 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8011620:	b580      	push	{r7, lr}
 8011622:	b08c      	sub	sp, #48	@ 0x30
 8011624:	af00      	add	r7, sp, #0
 8011626:	60f8      	str	r0, [r7, #12]
 8011628:	60b9      	str	r1, [r7, #8]
 801162a:	607a      	str	r2, [r7, #4]
 801162c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801162e:	220b      	movs	r2, #11
 8011630:	68b9      	ldr	r1, [r7, #8]
 8011632:	68f8      	ldr	r0, [r7, #12]
 8011634:	f7fe fec6 	bl	80103c4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	2b05      	cmp	r3, #5
 801163c:	d929      	bls.n	8011692 <gen_numname+0x72>
		sr = seq;
 801163e:	683b      	ldr	r3, [r7, #0]
 8011640:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8011642:	e020      	b.n	8011686 <gen_numname+0x66>
			wc = *lfn++;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	1c9a      	adds	r2, r3, #2
 8011648:	607a      	str	r2, [r7, #4]
 801164a:	881b      	ldrh	r3, [r3, #0]
 801164c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 801164e:	2300      	movs	r3, #0
 8011650:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011652:	e015      	b.n	8011680 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8011654:	69fb      	ldr	r3, [r7, #28]
 8011656:	005a      	lsls	r2, r3, #1
 8011658:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801165a:	f003 0301 	and.w	r3, r3, #1
 801165e:	4413      	add	r3, r2
 8011660:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8011662:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011664:	085b      	lsrs	r3, r3, #1
 8011666:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8011668:	69fb      	ldr	r3, [r7, #28]
 801166a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801166e:	2b00      	cmp	r3, #0
 8011670:	d003      	beq.n	801167a <gen_numname+0x5a>
 8011672:	69fa      	ldr	r2, [r7, #28]
 8011674:	4b30      	ldr	r3, [pc, #192]	@ (8011738 <gen_numname+0x118>)
 8011676:	4053      	eors	r3, r2
 8011678:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801167a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801167c:	3301      	adds	r3, #1
 801167e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011682:	2b0f      	cmp	r3, #15
 8011684:	d9e6      	bls.n	8011654 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	881b      	ldrh	r3, [r3, #0]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d1da      	bne.n	8011644 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801168e:	69fb      	ldr	r3, [r7, #28]
 8011690:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8011692:	2307      	movs	r3, #7
 8011694:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8011696:	683b      	ldr	r3, [r7, #0]
 8011698:	b2db      	uxtb	r3, r3
 801169a:	f003 030f 	and.w	r3, r3, #15
 801169e:	b2db      	uxtb	r3, r3
 80116a0:	3330      	adds	r3, #48	@ 0x30
 80116a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80116a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80116aa:	2b39      	cmp	r3, #57	@ 0x39
 80116ac:	d904      	bls.n	80116b8 <gen_numname+0x98>
 80116ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80116b2:	3307      	adds	r3, #7
 80116b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80116b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116ba:	1e5a      	subs	r2, r3, #1
 80116bc:	62ba      	str	r2, [r7, #40]	@ 0x28
 80116be:	3330      	adds	r3, #48	@ 0x30
 80116c0:	443b      	add	r3, r7
 80116c2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80116c6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80116ca:	683b      	ldr	r3, [r7, #0]
 80116cc:	091b      	lsrs	r3, r3, #4
 80116ce:	603b      	str	r3, [r7, #0]
	} while (seq);
 80116d0:	683b      	ldr	r3, [r7, #0]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d1df      	bne.n	8011696 <gen_numname+0x76>
	ns[i] = '~';
 80116d6:	f107 0214 	add.w	r2, r7, #20
 80116da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116dc:	4413      	add	r3, r2
 80116de:	227e      	movs	r2, #126	@ 0x7e
 80116e0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80116e2:	2300      	movs	r3, #0
 80116e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80116e6:	e002      	b.n	80116ee <gen_numname+0xce>
 80116e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116ea:	3301      	adds	r3, #1
 80116ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80116ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80116f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116f2:	429a      	cmp	r2, r3
 80116f4:	d205      	bcs.n	8011702 <gen_numname+0xe2>
 80116f6:	68fa      	ldr	r2, [r7, #12]
 80116f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116fa:	4413      	add	r3, r2
 80116fc:	781b      	ldrb	r3, [r3, #0]
 80116fe:	2b20      	cmp	r3, #32
 8011700:	d1f2      	bne.n	80116e8 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011704:	2b07      	cmp	r3, #7
 8011706:	d807      	bhi.n	8011718 <gen_numname+0xf8>
 8011708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801170a:	1c5a      	adds	r2, r3, #1
 801170c:	62ba      	str	r2, [r7, #40]	@ 0x28
 801170e:	3330      	adds	r3, #48	@ 0x30
 8011710:	443b      	add	r3, r7
 8011712:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8011716:	e000      	b.n	801171a <gen_numname+0xfa>
 8011718:	2120      	movs	r1, #32
 801171a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801171c:	1c5a      	adds	r2, r3, #1
 801171e:	627a      	str	r2, [r7, #36]	@ 0x24
 8011720:	68fa      	ldr	r2, [r7, #12]
 8011722:	4413      	add	r3, r2
 8011724:	460a      	mov	r2, r1
 8011726:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8011728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801172a:	2b07      	cmp	r3, #7
 801172c:	d9e9      	bls.n	8011702 <gen_numname+0xe2>
}
 801172e:	bf00      	nop
 8011730:	bf00      	nop
 8011732:	3730      	adds	r7, #48	@ 0x30
 8011734:	46bd      	mov	sp, r7
 8011736:	bd80      	pop	{r7, pc}
 8011738:	00011021 	.word	0x00011021

0801173c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801173c:	b480      	push	{r7}
 801173e:	b085      	sub	sp, #20
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8011744:	2300      	movs	r3, #0
 8011746:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8011748:	230b      	movs	r3, #11
 801174a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801174c:	7bfb      	ldrb	r3, [r7, #15]
 801174e:	b2da      	uxtb	r2, r3
 8011750:	0852      	lsrs	r2, r2, #1
 8011752:	01db      	lsls	r3, r3, #7
 8011754:	4313      	orrs	r3, r2
 8011756:	b2da      	uxtb	r2, r3
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	1c59      	adds	r1, r3, #1
 801175c:	6079      	str	r1, [r7, #4]
 801175e:	781b      	ldrb	r3, [r3, #0]
 8011760:	4413      	add	r3, r2
 8011762:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8011764:	68bb      	ldr	r3, [r7, #8]
 8011766:	3b01      	subs	r3, #1
 8011768:	60bb      	str	r3, [r7, #8]
 801176a:	68bb      	ldr	r3, [r7, #8]
 801176c:	2b00      	cmp	r3, #0
 801176e:	d1ed      	bne.n	801174c <sum_sfn+0x10>
	return sum;
 8011770:	7bfb      	ldrb	r3, [r7, #15]
}
 8011772:	4618      	mov	r0, r3
 8011774:	3714      	adds	r7, #20
 8011776:	46bd      	mov	sp, r7
 8011778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177c:	4770      	bx	lr

0801177e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801177e:	b580      	push	{r7, lr}
 8011780:	b086      	sub	sp, #24
 8011782:	af00      	add	r7, sp, #0
 8011784:	6078      	str	r0, [r7, #4]
 8011786:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8011788:	2304      	movs	r3, #4
 801178a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8011792:	23ff      	movs	r3, #255	@ 0xff
 8011794:	757b      	strb	r3, [r7, #21]
 8011796:	23ff      	movs	r3, #255	@ 0xff
 8011798:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801179a:	e081      	b.n	80118a0 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	69db      	ldr	r3, [r3, #28]
 80117a0:	4619      	mov	r1, r3
 80117a2:	6938      	ldr	r0, [r7, #16]
 80117a4:	f7ff f83c 	bl	8010820 <move_window>
 80117a8:	4603      	mov	r3, r0
 80117aa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80117ac:	7dfb      	ldrb	r3, [r7, #23]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d17c      	bne.n	80118ac <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	6a1b      	ldr	r3, [r3, #32]
 80117b6:	781b      	ldrb	r3, [r3, #0]
 80117b8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 80117ba:	7dbb      	ldrb	r3, [r7, #22]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d102      	bne.n	80117c6 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80117c0:	2304      	movs	r3, #4
 80117c2:	75fb      	strb	r3, [r7, #23]
 80117c4:	e077      	b.n	80118b6 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	6a1b      	ldr	r3, [r3, #32]
 80117ca:	330b      	adds	r3, #11
 80117cc:	781b      	ldrb	r3, [r3, #0]
 80117ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80117d2:	73fb      	strb	r3, [r7, #15]
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	7bfa      	ldrb	r2, [r7, #15]
 80117d8:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80117da:	7dbb      	ldrb	r3, [r7, #22]
 80117dc:	2be5      	cmp	r3, #229	@ 0xe5
 80117de:	d00e      	beq.n	80117fe <dir_read+0x80>
 80117e0:	7dbb      	ldrb	r3, [r7, #22]
 80117e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80117e4:	d00b      	beq.n	80117fe <dir_read+0x80>
 80117e6:	7bfb      	ldrb	r3, [r7, #15]
 80117e8:	f023 0320 	bic.w	r3, r3, #32
 80117ec:	2b08      	cmp	r3, #8
 80117ee:	bf0c      	ite	eq
 80117f0:	2301      	moveq	r3, #1
 80117f2:	2300      	movne	r3, #0
 80117f4:	b2db      	uxtb	r3, r3
 80117f6:	461a      	mov	r2, r3
 80117f8:	683b      	ldr	r3, [r7, #0]
 80117fa:	4293      	cmp	r3, r2
 80117fc:	d002      	beq.n	8011804 <dir_read+0x86>
				ord = 0xFF;
 80117fe:	23ff      	movs	r3, #255	@ 0xff
 8011800:	757b      	strb	r3, [r7, #21]
 8011802:	e044      	b.n	801188e <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8011804:	7bfb      	ldrb	r3, [r7, #15]
 8011806:	2b0f      	cmp	r3, #15
 8011808:	d12f      	bne.n	801186a <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 801180a:	7dbb      	ldrb	r3, [r7, #22]
 801180c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011810:	2b00      	cmp	r3, #0
 8011812:	d00d      	beq.n	8011830 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	6a1b      	ldr	r3, [r3, #32]
 8011818:	7b5b      	ldrb	r3, [r3, #13]
 801181a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 801181c:	7dbb      	ldrb	r3, [r7, #22]
 801181e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011822:	75bb      	strb	r3, [r7, #22]
 8011824:	7dbb      	ldrb	r3, [r7, #22]
 8011826:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	695a      	ldr	r2, [r3, #20]
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011830:	7dba      	ldrb	r2, [r7, #22]
 8011832:	7d7b      	ldrb	r3, [r7, #21]
 8011834:	429a      	cmp	r2, r3
 8011836:	d115      	bne.n	8011864 <dir_read+0xe6>
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	6a1b      	ldr	r3, [r3, #32]
 801183c:	330d      	adds	r3, #13
 801183e:	781b      	ldrb	r3, [r3, #0]
 8011840:	7d3a      	ldrb	r2, [r7, #20]
 8011842:	429a      	cmp	r2, r3
 8011844:	d10e      	bne.n	8011864 <dir_read+0xe6>
 8011846:	693b      	ldr	r3, [r7, #16]
 8011848:	691a      	ldr	r2, [r3, #16]
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	6a1b      	ldr	r3, [r3, #32]
 801184e:	4619      	mov	r1, r3
 8011850:	4610      	mov	r0, r2
 8011852:	f7ff fe19 	bl	8011488 <pick_lfn>
 8011856:	4603      	mov	r3, r0
 8011858:	2b00      	cmp	r3, #0
 801185a:	d003      	beq.n	8011864 <dir_read+0xe6>
 801185c:	7d7b      	ldrb	r3, [r7, #21]
 801185e:	3b01      	subs	r3, #1
 8011860:	b2db      	uxtb	r3, r3
 8011862:	e000      	b.n	8011866 <dir_read+0xe8>
 8011864:	23ff      	movs	r3, #255	@ 0xff
 8011866:	757b      	strb	r3, [r7, #21]
 8011868:	e011      	b.n	801188e <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801186a:	7d7b      	ldrb	r3, [r7, #21]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d109      	bne.n	8011884 <dir_read+0x106>
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	6a1b      	ldr	r3, [r3, #32]
 8011874:	4618      	mov	r0, r3
 8011876:	f7ff ff61 	bl	801173c <sum_sfn>
 801187a:	4603      	mov	r3, r0
 801187c:	461a      	mov	r2, r3
 801187e:	7d3b      	ldrb	r3, [r7, #20]
 8011880:	4293      	cmp	r3, r2
 8011882:	d015      	beq.n	80118b0 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	f04f 32ff 	mov.w	r2, #4294967295
 801188a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 801188c:	e010      	b.n	80118b0 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801188e:	2100      	movs	r1, #0
 8011890:	6878      	ldr	r0, [r7, #4]
 8011892:	f7ff fc2d 	bl	80110f0 <dir_next>
 8011896:	4603      	mov	r3, r0
 8011898:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801189a:	7dfb      	ldrb	r3, [r7, #23]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d109      	bne.n	80118b4 <dir_read+0x136>
	while (dp->sect) {
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	69db      	ldr	r3, [r3, #28]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	f47f af79 	bne.w	801179c <dir_read+0x1e>
 80118aa:	e004      	b.n	80118b6 <dir_read+0x138>
		if (res != FR_OK) break;
 80118ac:	bf00      	nop
 80118ae:	e002      	b.n	80118b6 <dir_read+0x138>
					break;
 80118b0:	bf00      	nop
 80118b2:	e000      	b.n	80118b6 <dir_read+0x138>
		if (res != FR_OK) break;
 80118b4:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80118b6:	7dfb      	ldrb	r3, [r7, #23]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d002      	beq.n	80118c2 <dir_read+0x144>
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	2200      	movs	r2, #0
 80118c0:	61da      	str	r2, [r3, #28]
	return res;
 80118c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80118c4:	4618      	mov	r0, r3
 80118c6:	3718      	adds	r7, #24
 80118c8:	46bd      	mov	sp, r7
 80118ca:	bd80      	pop	{r7, pc}

080118cc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b086      	sub	sp, #24
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80118da:	2100      	movs	r1, #0
 80118dc:	6878      	ldr	r0, [r7, #4]
 80118de:	f7ff fb7e 	bl	8010fde <dir_sdi>
 80118e2:	4603      	mov	r3, r0
 80118e4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80118e6:	7dfb      	ldrb	r3, [r7, #23]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d001      	beq.n	80118f0 <dir_find+0x24>
 80118ec:	7dfb      	ldrb	r3, [r7, #23]
 80118ee:	e0a9      	b.n	8011a44 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80118f0:	23ff      	movs	r3, #255	@ 0xff
 80118f2:	753b      	strb	r3, [r7, #20]
 80118f4:	7d3b      	ldrb	r3, [r7, #20]
 80118f6:	757b      	strb	r3, [r7, #21]
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	f04f 32ff 	mov.w	r2, #4294967295
 80118fe:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	69db      	ldr	r3, [r3, #28]
 8011904:	4619      	mov	r1, r3
 8011906:	6938      	ldr	r0, [r7, #16]
 8011908:	f7fe ff8a 	bl	8010820 <move_window>
 801190c:	4603      	mov	r3, r0
 801190e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011910:	7dfb      	ldrb	r3, [r7, #23]
 8011912:	2b00      	cmp	r3, #0
 8011914:	f040 8090 	bne.w	8011a38 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	6a1b      	ldr	r3, [r3, #32]
 801191c:	781b      	ldrb	r3, [r3, #0]
 801191e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011920:	7dbb      	ldrb	r3, [r7, #22]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d102      	bne.n	801192c <dir_find+0x60>
 8011926:	2304      	movs	r3, #4
 8011928:	75fb      	strb	r3, [r7, #23]
 801192a:	e08a      	b.n	8011a42 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	6a1b      	ldr	r3, [r3, #32]
 8011930:	330b      	adds	r3, #11
 8011932:	781b      	ldrb	r3, [r3, #0]
 8011934:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011938:	73fb      	strb	r3, [r7, #15]
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	7bfa      	ldrb	r2, [r7, #15]
 801193e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8011940:	7dbb      	ldrb	r3, [r7, #22]
 8011942:	2be5      	cmp	r3, #229	@ 0xe5
 8011944:	d007      	beq.n	8011956 <dir_find+0x8a>
 8011946:	7bfb      	ldrb	r3, [r7, #15]
 8011948:	f003 0308 	and.w	r3, r3, #8
 801194c:	2b00      	cmp	r3, #0
 801194e:	d009      	beq.n	8011964 <dir_find+0x98>
 8011950:	7bfb      	ldrb	r3, [r7, #15]
 8011952:	2b0f      	cmp	r3, #15
 8011954:	d006      	beq.n	8011964 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011956:	23ff      	movs	r3, #255	@ 0xff
 8011958:	757b      	strb	r3, [r7, #21]
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	f04f 32ff 	mov.w	r2, #4294967295
 8011960:	631a      	str	r2, [r3, #48]	@ 0x30
 8011962:	e05e      	b.n	8011a22 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8011964:	7bfb      	ldrb	r3, [r7, #15]
 8011966:	2b0f      	cmp	r3, #15
 8011968:	d136      	bne.n	80119d8 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011974:	2b00      	cmp	r3, #0
 8011976:	d154      	bne.n	8011a22 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8011978:	7dbb      	ldrb	r3, [r7, #22]
 801197a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801197e:	2b00      	cmp	r3, #0
 8011980:	d00d      	beq.n	801199e <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	6a1b      	ldr	r3, [r3, #32]
 8011986:	7b5b      	ldrb	r3, [r3, #13]
 8011988:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801198a:	7dbb      	ldrb	r3, [r7, #22]
 801198c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011990:	75bb      	strb	r3, [r7, #22]
 8011992:	7dbb      	ldrb	r3, [r7, #22]
 8011994:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	695a      	ldr	r2, [r3, #20]
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801199e:	7dba      	ldrb	r2, [r7, #22]
 80119a0:	7d7b      	ldrb	r3, [r7, #21]
 80119a2:	429a      	cmp	r2, r3
 80119a4:	d115      	bne.n	80119d2 <dir_find+0x106>
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	6a1b      	ldr	r3, [r3, #32]
 80119aa:	330d      	adds	r3, #13
 80119ac:	781b      	ldrb	r3, [r3, #0]
 80119ae:	7d3a      	ldrb	r2, [r7, #20]
 80119b0:	429a      	cmp	r2, r3
 80119b2:	d10e      	bne.n	80119d2 <dir_find+0x106>
 80119b4:	693b      	ldr	r3, [r7, #16]
 80119b6:	691a      	ldr	r2, [r3, #16]
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	6a1b      	ldr	r3, [r3, #32]
 80119bc:	4619      	mov	r1, r3
 80119be:	4610      	mov	r0, r2
 80119c0:	f7ff fcf2 	bl	80113a8 <cmp_lfn>
 80119c4:	4603      	mov	r3, r0
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d003      	beq.n	80119d2 <dir_find+0x106>
 80119ca:	7d7b      	ldrb	r3, [r7, #21]
 80119cc:	3b01      	subs	r3, #1
 80119ce:	b2db      	uxtb	r3, r3
 80119d0:	e000      	b.n	80119d4 <dir_find+0x108>
 80119d2:	23ff      	movs	r3, #255	@ 0xff
 80119d4:	757b      	strb	r3, [r7, #21]
 80119d6:	e024      	b.n	8011a22 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80119d8:	7d7b      	ldrb	r3, [r7, #21]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d109      	bne.n	80119f2 <dir_find+0x126>
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	6a1b      	ldr	r3, [r3, #32]
 80119e2:	4618      	mov	r0, r3
 80119e4:	f7ff feaa 	bl	801173c <sum_sfn>
 80119e8:	4603      	mov	r3, r0
 80119ea:	461a      	mov	r2, r3
 80119ec:	7d3b      	ldrb	r3, [r7, #20]
 80119ee:	4293      	cmp	r3, r2
 80119f0:	d024      	beq.n	8011a3c <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80119f8:	f003 0301 	and.w	r3, r3, #1
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d10a      	bne.n	8011a16 <dir_find+0x14a>
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	6a18      	ldr	r0, [r3, #32]
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	3324      	adds	r3, #36	@ 0x24
 8011a08:	220b      	movs	r2, #11
 8011a0a:	4619      	mov	r1, r3
 8011a0c:	f7fe fd16 	bl	801043c <mem_cmp>
 8011a10:	4603      	mov	r3, r0
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d014      	beq.n	8011a40 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011a16:	23ff      	movs	r3, #255	@ 0xff
 8011a18:	757b      	strb	r3, [r7, #21]
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8011a20:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011a22:	2100      	movs	r1, #0
 8011a24:	6878      	ldr	r0, [r7, #4]
 8011a26:	f7ff fb63 	bl	80110f0 <dir_next>
 8011a2a:	4603      	mov	r3, r0
 8011a2c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011a2e:	7dfb      	ldrb	r3, [r7, #23]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	f43f af65 	beq.w	8011900 <dir_find+0x34>
 8011a36:	e004      	b.n	8011a42 <dir_find+0x176>
		if (res != FR_OK) break;
 8011a38:	bf00      	nop
 8011a3a:	e002      	b.n	8011a42 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8011a3c:	bf00      	nop
 8011a3e:	e000      	b.n	8011a42 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8011a40:	bf00      	nop

	return res;
 8011a42:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a44:	4618      	mov	r0, r3
 8011a46:	3718      	adds	r7, #24
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	bd80      	pop	{r7, pc}

08011a4c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b08c      	sub	sp, #48	@ 0x30
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011a60:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d001      	beq.n	8011a6c <dir_register+0x20>
 8011a68:	2306      	movs	r3, #6
 8011a6a:	e0e0      	b.n	8011c2e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011a70:	e002      	b.n	8011a78 <dir_register+0x2c>
 8011a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a74:	3301      	adds	r3, #1
 8011a76:	627b      	str	r3, [r7, #36]	@ 0x24
 8011a78:	69fb      	ldr	r3, [r7, #28]
 8011a7a:	691a      	ldr	r2, [r3, #16]
 8011a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a7e:	005b      	lsls	r3, r3, #1
 8011a80:	4413      	add	r3, r2
 8011a82:	881b      	ldrh	r3, [r3, #0]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d1f4      	bne.n	8011a72 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8011a8e:	f107 030c 	add.w	r3, r7, #12
 8011a92:	220c      	movs	r2, #12
 8011a94:	4618      	mov	r0, r3
 8011a96:	f7fe fc95 	bl	80103c4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8011a9a:	7dfb      	ldrb	r3, [r7, #23]
 8011a9c:	f003 0301 	and.w	r3, r3, #1
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d032      	beq.n	8011b0a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	2240      	movs	r2, #64	@ 0x40
 8011aa8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8011aac:	2301      	movs	r3, #1
 8011aae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011ab0:	e016      	b.n	8011ae0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8011ab8:	69fb      	ldr	r3, [r7, #28]
 8011aba:	691a      	ldr	r2, [r3, #16]
 8011abc:	f107 010c 	add.w	r1, r7, #12
 8011ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ac2:	f7ff fdad 	bl	8011620 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8011ac6:	6878      	ldr	r0, [r7, #4]
 8011ac8:	f7ff ff00 	bl	80118cc <dir_find>
 8011acc:	4603      	mov	r3, r0
 8011ace:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8011ad2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d106      	bne.n	8011ae8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8011ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011adc:	3301      	adds	r3, #1
 8011ade:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ae2:	2b63      	cmp	r3, #99	@ 0x63
 8011ae4:	d9e5      	bls.n	8011ab2 <dir_register+0x66>
 8011ae6:	e000      	b.n	8011aea <dir_register+0x9e>
			if (res != FR_OK) break;
 8011ae8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8011aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011aec:	2b64      	cmp	r3, #100	@ 0x64
 8011aee:	d101      	bne.n	8011af4 <dir_register+0xa8>
 8011af0:	2307      	movs	r3, #7
 8011af2:	e09c      	b.n	8011c2e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8011af4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011af8:	2b04      	cmp	r3, #4
 8011afa:	d002      	beq.n	8011b02 <dir_register+0xb6>
 8011afc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011b00:	e095      	b.n	8011c2e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8011b02:	7dfa      	ldrb	r2, [r7, #23]
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8011b0a:	7dfb      	ldrb	r3, [r7, #23]
 8011b0c:	f003 0302 	and.w	r3, r3, #2
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d007      	beq.n	8011b24 <dir_register+0xd8>
 8011b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b16:	330c      	adds	r3, #12
 8011b18:	4a47      	ldr	r2, [pc, #284]	@ (8011c38 <dir_register+0x1ec>)
 8011b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8011b1e:	089b      	lsrs	r3, r3, #2
 8011b20:	3301      	adds	r3, #1
 8011b22:	e000      	b.n	8011b26 <dir_register+0xda>
 8011b24:	2301      	movs	r3, #1
 8011b26:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8011b28:	6a39      	ldr	r1, [r7, #32]
 8011b2a:	6878      	ldr	r0, [r7, #4]
 8011b2c:	f7ff fbb6 	bl	801129c <dir_alloc>
 8011b30:	4603      	mov	r3, r0
 8011b32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8011b36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d148      	bne.n	8011bd0 <dir_register+0x184>
 8011b3e:	6a3b      	ldr	r3, [r7, #32]
 8011b40:	3b01      	subs	r3, #1
 8011b42:	623b      	str	r3, [r7, #32]
 8011b44:	6a3b      	ldr	r3, [r7, #32]
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d042      	beq.n	8011bd0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	695a      	ldr	r2, [r3, #20]
 8011b4e:	6a3b      	ldr	r3, [r7, #32]
 8011b50:	015b      	lsls	r3, r3, #5
 8011b52:	1ad3      	subs	r3, r2, r3
 8011b54:	4619      	mov	r1, r3
 8011b56:	6878      	ldr	r0, [r7, #4]
 8011b58:	f7ff fa41 	bl	8010fde <dir_sdi>
 8011b5c:	4603      	mov	r3, r0
 8011b5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8011b62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d132      	bne.n	8011bd0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	3324      	adds	r3, #36	@ 0x24
 8011b6e:	4618      	mov	r0, r3
 8011b70:	f7ff fde4 	bl	801173c <sum_sfn>
 8011b74:	4603      	mov	r3, r0
 8011b76:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	69db      	ldr	r3, [r3, #28]
 8011b7c:	4619      	mov	r1, r3
 8011b7e:	69f8      	ldr	r0, [r7, #28]
 8011b80:	f7fe fe4e 	bl	8010820 <move_window>
 8011b84:	4603      	mov	r3, r0
 8011b86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8011b8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d11d      	bne.n	8011bce <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8011b92:	69fb      	ldr	r3, [r7, #28]
 8011b94:	6918      	ldr	r0, [r3, #16]
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	6a19      	ldr	r1, [r3, #32]
 8011b9a:	6a3b      	ldr	r3, [r7, #32]
 8011b9c:	b2da      	uxtb	r2, r3
 8011b9e:	7efb      	ldrb	r3, [r7, #27]
 8011ba0:	f7ff fcd6 	bl	8011550 <put_lfn>
				fs->wflag = 1;
 8011ba4:	69fb      	ldr	r3, [r7, #28]
 8011ba6:	2201      	movs	r2, #1
 8011ba8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8011baa:	2100      	movs	r1, #0
 8011bac:	6878      	ldr	r0, [r7, #4]
 8011bae:	f7ff fa9f 	bl	80110f0 <dir_next>
 8011bb2:	4603      	mov	r3, r0
 8011bb4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8011bb8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d107      	bne.n	8011bd0 <dir_register+0x184>
 8011bc0:	6a3b      	ldr	r3, [r7, #32]
 8011bc2:	3b01      	subs	r3, #1
 8011bc4:	623b      	str	r3, [r7, #32]
 8011bc6:	6a3b      	ldr	r3, [r7, #32]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d1d5      	bne.n	8011b78 <dir_register+0x12c>
 8011bcc:	e000      	b.n	8011bd0 <dir_register+0x184>
				if (res != FR_OK) break;
 8011bce:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8011bd0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d128      	bne.n	8011c2a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	69db      	ldr	r3, [r3, #28]
 8011bdc:	4619      	mov	r1, r3
 8011bde:	69f8      	ldr	r0, [r7, #28]
 8011be0:	f7fe fe1e 	bl	8010820 <move_window>
 8011be4:	4603      	mov	r3, r0
 8011be6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8011bea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d11b      	bne.n	8011c2a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	6a1b      	ldr	r3, [r3, #32]
 8011bf6:	2220      	movs	r2, #32
 8011bf8:	2100      	movs	r1, #0
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	f7fe fc03 	bl	8010406 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	6a18      	ldr	r0, [r3, #32]
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	3324      	adds	r3, #36	@ 0x24
 8011c08:	220b      	movs	r2, #11
 8011c0a:	4619      	mov	r1, r3
 8011c0c:	f7fe fbda 	bl	80103c4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	6a1b      	ldr	r3, [r3, #32]
 8011c1a:	330c      	adds	r3, #12
 8011c1c:	f002 0218 	and.w	r2, r2, #24
 8011c20:	b2d2      	uxtb	r2, r2
 8011c22:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8011c24:	69fb      	ldr	r3, [r7, #28]
 8011c26:	2201      	movs	r2, #1
 8011c28:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8011c2a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011c2e:	4618      	mov	r0, r3
 8011c30:	3730      	adds	r7, #48	@ 0x30
 8011c32:	46bd      	mov	sp, r7
 8011c34:	bd80      	pop	{r7, pc}
 8011c36:	bf00      	nop
 8011c38:	4ec4ec4f 	.word	0x4ec4ec4f

08011c3c <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8011c3c:	b580      	push	{r7, lr}
 8011c3e:	b086      	sub	sp, #24
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	695b      	ldr	r3, [r3, #20]
 8011c4e:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c58:	d007      	beq.n	8011c6a <dir_remove+0x2e>
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c5e:	4619      	mov	r1, r3
 8011c60:	6878      	ldr	r0, [r7, #4]
 8011c62:	f7ff f9bc 	bl	8010fde <dir_sdi>
 8011c66:	4603      	mov	r3, r0
 8011c68:	e000      	b.n	8011c6c <dir_remove+0x30>
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011c6e:	7dfb      	ldrb	r3, [r7, #23]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d128      	bne.n	8011cc6 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	69db      	ldr	r3, [r3, #28]
 8011c78:	4619      	mov	r1, r3
 8011c7a:	6938      	ldr	r0, [r7, #16]
 8011c7c:	f7fe fdd0 	bl	8010820 <move_window>
 8011c80:	4603      	mov	r3, r0
 8011c82:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011c84:	7dfb      	ldrb	r3, [r7, #23]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d115      	bne.n	8011cb6 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	6a1b      	ldr	r3, [r3, #32]
 8011c8e:	22e5      	movs	r2, #229	@ 0xe5
 8011c90:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 8011c92:	693b      	ldr	r3, [r7, #16]
 8011c94:	2201      	movs	r2, #1
 8011c96:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	695b      	ldr	r3, [r3, #20]
 8011c9c:	68fa      	ldr	r2, [r7, #12]
 8011c9e:	429a      	cmp	r2, r3
 8011ca0:	d90b      	bls.n	8011cba <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 8011ca2:	2100      	movs	r1, #0
 8011ca4:	6878      	ldr	r0, [r7, #4]
 8011ca6:	f7ff fa23 	bl	80110f0 <dir_next>
 8011caa:	4603      	mov	r3, r0
 8011cac:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8011cae:	7dfb      	ldrb	r3, [r7, #23]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d0df      	beq.n	8011c74 <dir_remove+0x38>
 8011cb4:	e002      	b.n	8011cbc <dir_remove+0x80>
			if (res != FR_OK) break;
 8011cb6:	bf00      	nop
 8011cb8:	e000      	b.n	8011cbc <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8011cba:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8011cbc:	7dfb      	ldrb	r3, [r7, #23]
 8011cbe:	2b04      	cmp	r3, #4
 8011cc0:	d101      	bne.n	8011cc6 <dir_remove+0x8a>
 8011cc2:	2302      	movs	r3, #2
 8011cc4:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 8011cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8011cc8:	4618      	mov	r0, r3
 8011cca:	3718      	adds	r7, #24
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	bd80      	pop	{r7, pc}

08011cd0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b08a      	sub	sp, #40	@ 0x28
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]
 8011cd8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8011cda:	683b      	ldr	r3, [r7, #0]
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	613b      	str	r3, [r7, #16]
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	691b      	ldr	r3, [r3, #16]
 8011ce6:	60fb      	str	r3, [r7, #12]
 8011ce8:	2300      	movs	r3, #0
 8011cea:	617b      	str	r3, [r7, #20]
 8011cec:	697b      	ldr	r3, [r7, #20]
 8011cee:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8011cf0:	69bb      	ldr	r3, [r7, #24]
 8011cf2:	1c5a      	adds	r2, r3, #1
 8011cf4:	61ba      	str	r2, [r7, #24]
 8011cf6:	693a      	ldr	r2, [r7, #16]
 8011cf8:	4413      	add	r3, r2
 8011cfa:	781b      	ldrb	r3, [r3, #0]
 8011cfc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8011cfe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011d00:	2b1f      	cmp	r3, #31
 8011d02:	d940      	bls.n	8011d86 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8011d04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011d06:	2b2f      	cmp	r3, #47	@ 0x2f
 8011d08:	d006      	beq.n	8011d18 <create_name+0x48>
 8011d0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011d0c:	2b5c      	cmp	r3, #92	@ 0x5c
 8011d0e:	d110      	bne.n	8011d32 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011d10:	e002      	b.n	8011d18 <create_name+0x48>
 8011d12:	69bb      	ldr	r3, [r7, #24]
 8011d14:	3301      	adds	r3, #1
 8011d16:	61bb      	str	r3, [r7, #24]
 8011d18:	693a      	ldr	r2, [r7, #16]
 8011d1a:	69bb      	ldr	r3, [r7, #24]
 8011d1c:	4413      	add	r3, r2
 8011d1e:	781b      	ldrb	r3, [r3, #0]
 8011d20:	2b2f      	cmp	r3, #47	@ 0x2f
 8011d22:	d0f6      	beq.n	8011d12 <create_name+0x42>
 8011d24:	693a      	ldr	r2, [r7, #16]
 8011d26:	69bb      	ldr	r3, [r7, #24]
 8011d28:	4413      	add	r3, r2
 8011d2a:	781b      	ldrb	r3, [r3, #0]
 8011d2c:	2b5c      	cmp	r3, #92	@ 0x5c
 8011d2e:	d0f0      	beq.n	8011d12 <create_name+0x42>
			break;
 8011d30:	e02a      	b.n	8011d88 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8011d32:	697b      	ldr	r3, [r7, #20]
 8011d34:	2bfe      	cmp	r3, #254	@ 0xfe
 8011d36:	d901      	bls.n	8011d3c <create_name+0x6c>
 8011d38:	2306      	movs	r3, #6
 8011d3a:	e1ca      	b.n	80120d2 <create_name+0x402>
#if !_LFN_UNICODE
		w &= 0xFF;
 8011d3c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011d3e:	b2db      	uxtb	r3, r3
 8011d40:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8011d42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011d44:	2101      	movs	r1, #1
 8011d46:	4618      	mov	r0, r3
 8011d48:	f002 f936 	bl	8013fb8 <ff_convert>
 8011d4c:	4603      	mov	r3, r0
 8011d4e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8011d50:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d101      	bne.n	8011d5a <create_name+0x8a>
 8011d56:	2306      	movs	r3, #6
 8011d58:	e1bb      	b.n	80120d2 <create_name+0x402>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8011d5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011d5c:	2b7f      	cmp	r3, #127	@ 0x7f
 8011d5e:	d809      	bhi.n	8011d74 <create_name+0xa4>
 8011d60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011d62:	4619      	mov	r1, r3
 8011d64:	489e      	ldr	r0, [pc, #632]	@ (8011fe0 <create_name+0x310>)
 8011d66:	f7fe fb90 	bl	801048a <chk_chr>
 8011d6a:	4603      	mov	r3, r0
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d001      	beq.n	8011d74 <create_name+0xa4>
 8011d70:	2306      	movs	r3, #6
 8011d72:	e1ae      	b.n	80120d2 <create_name+0x402>
		lfn[di++] = w;					/* Store the Unicode character */
 8011d74:	697b      	ldr	r3, [r7, #20]
 8011d76:	1c5a      	adds	r2, r3, #1
 8011d78:	617a      	str	r2, [r7, #20]
 8011d7a:	005b      	lsls	r3, r3, #1
 8011d7c:	68fa      	ldr	r2, [r7, #12]
 8011d7e:	4413      	add	r3, r2
 8011d80:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011d82:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8011d84:	e7b4      	b.n	8011cf0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8011d86:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8011d88:	693a      	ldr	r2, [r7, #16]
 8011d8a:	69bb      	ldr	r3, [r7, #24]
 8011d8c:	441a      	add	r2, r3
 8011d8e:	683b      	ldr	r3, [r7, #0]
 8011d90:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8011d92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011d94:	2b1f      	cmp	r3, #31
 8011d96:	d801      	bhi.n	8011d9c <create_name+0xcc>
 8011d98:	2304      	movs	r3, #4
 8011d9a:	e000      	b.n	8011d9e <create_name+0xce>
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 8011da2:	697b      	ldr	r3, [r7, #20]
 8011da4:	2b01      	cmp	r3, #1
 8011da6:	d109      	bne.n	8011dbc <create_name+0xec>
 8011da8:	697a      	ldr	r2, [r7, #20]
 8011daa:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011dae:	4413      	add	r3, r2
 8011db0:	005b      	lsls	r3, r3, #1
 8011db2:	68fa      	ldr	r2, [r7, #12]
 8011db4:	4413      	add	r3, r2
 8011db6:	881b      	ldrh	r3, [r3, #0]
 8011db8:	2b2e      	cmp	r3, #46	@ 0x2e
 8011dba:	d015      	beq.n	8011de8 <create_name+0x118>
 8011dbc:	697b      	ldr	r3, [r7, #20]
 8011dbe:	2b02      	cmp	r3, #2
 8011dc0:	d14d      	bne.n	8011e5e <create_name+0x18e>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 8011dc2:	697a      	ldr	r2, [r7, #20]
 8011dc4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011dc8:	4413      	add	r3, r2
 8011dca:	005b      	lsls	r3, r3, #1
 8011dcc:	68fa      	ldr	r2, [r7, #12]
 8011dce:	4413      	add	r3, r2
 8011dd0:	881b      	ldrh	r3, [r3, #0]
 8011dd2:	2b2e      	cmp	r3, #46	@ 0x2e
 8011dd4:	d143      	bne.n	8011e5e <create_name+0x18e>
 8011dd6:	697a      	ldr	r2, [r7, #20]
 8011dd8:	4b82      	ldr	r3, [pc, #520]	@ (8011fe4 <create_name+0x314>)
 8011dda:	4413      	add	r3, r2
 8011ddc:	005b      	lsls	r3, r3, #1
 8011dde:	68fa      	ldr	r2, [r7, #12]
 8011de0:	4413      	add	r3, r2
 8011de2:	881b      	ldrh	r3, [r3, #0]
 8011de4:	2b2e      	cmp	r3, #46	@ 0x2e
 8011de6:	d13a      	bne.n	8011e5e <create_name+0x18e>
		lfn[di] = 0;
 8011de8:	697b      	ldr	r3, [r7, #20]
 8011dea:	005b      	lsls	r3, r3, #1
 8011dec:	68fa      	ldr	r2, [r7, #12]
 8011dee:	4413      	add	r3, r2
 8011df0:	2200      	movs	r2, #0
 8011df2:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8011df4:	2300      	movs	r3, #0
 8011df6:	623b      	str	r3, [r7, #32]
 8011df8:	e00f      	b.n	8011e1a <create_name+0x14a>
			dp->fn[i] = (i < di) ? '.' : ' ';
 8011dfa:	6a3a      	ldr	r2, [r7, #32]
 8011dfc:	697b      	ldr	r3, [r7, #20]
 8011dfe:	429a      	cmp	r2, r3
 8011e00:	d201      	bcs.n	8011e06 <create_name+0x136>
 8011e02:	212e      	movs	r1, #46	@ 0x2e
 8011e04:	e000      	b.n	8011e08 <create_name+0x138>
 8011e06:	2120      	movs	r1, #32
 8011e08:	687a      	ldr	r2, [r7, #4]
 8011e0a:	6a3b      	ldr	r3, [r7, #32]
 8011e0c:	4413      	add	r3, r2
 8011e0e:	3324      	adds	r3, #36	@ 0x24
 8011e10:	460a      	mov	r2, r1
 8011e12:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8011e14:	6a3b      	ldr	r3, [r7, #32]
 8011e16:	3301      	adds	r3, #1
 8011e18:	623b      	str	r3, [r7, #32]
 8011e1a:	6a3b      	ldr	r3, [r7, #32]
 8011e1c:	2b0a      	cmp	r3, #10
 8011e1e:	d9ec      	bls.n	8011dfa <create_name+0x12a>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8011e20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011e24:	f043 0320 	orr.w	r3, r3, #32
 8011e28:	b2d9      	uxtb	r1, r3
 8011e2a:	687a      	ldr	r2, [r7, #4]
 8011e2c:	6a3b      	ldr	r3, [r7, #32]
 8011e2e:	4413      	add	r3, r2
 8011e30:	3324      	adds	r3, #36	@ 0x24
 8011e32:	460a      	mov	r2, r1
 8011e34:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8011e36:	2300      	movs	r3, #0
 8011e38:	e14b      	b.n	80120d2 <create_name+0x402>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 8011e3a:	697a      	ldr	r2, [r7, #20]
 8011e3c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011e40:	4413      	add	r3, r2
 8011e42:	005b      	lsls	r3, r3, #1
 8011e44:	68fa      	ldr	r2, [r7, #12]
 8011e46:	4413      	add	r3, r2
 8011e48:	881b      	ldrh	r3, [r3, #0]
 8011e4a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8011e4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011e4e:	2b20      	cmp	r3, #32
 8011e50:	d002      	beq.n	8011e58 <create_name+0x188>
 8011e52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011e54:	2b2e      	cmp	r3, #46	@ 0x2e
 8011e56:	d106      	bne.n	8011e66 <create_name+0x196>
		di--;
 8011e58:	697b      	ldr	r3, [r7, #20]
 8011e5a:	3b01      	subs	r3, #1
 8011e5c:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8011e5e:	697b      	ldr	r3, [r7, #20]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d1ea      	bne.n	8011e3a <create_name+0x16a>
 8011e64:	e000      	b.n	8011e68 <create_name+0x198>
		if (w != ' ' && w != '.') break;
 8011e66:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8011e68:	697b      	ldr	r3, [r7, #20]
 8011e6a:	005b      	lsls	r3, r3, #1
 8011e6c:	68fa      	ldr	r2, [r7, #12]
 8011e6e:	4413      	add	r3, r2
 8011e70:	2200      	movs	r2, #0
 8011e72:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8011e74:	697b      	ldr	r3, [r7, #20]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d101      	bne.n	8011e7e <create_name+0x1ae>
 8011e7a:	2306      	movs	r3, #6
 8011e7c:	e129      	b.n	80120d2 <create_name+0x402>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	3324      	adds	r3, #36	@ 0x24
 8011e82:	220b      	movs	r2, #11
 8011e84:	2120      	movs	r1, #32
 8011e86:	4618      	mov	r0, r3
 8011e88:	f7fe fabd 	bl	8010406 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	61bb      	str	r3, [r7, #24]
 8011e90:	e002      	b.n	8011e98 <create_name+0x1c8>
 8011e92:	69bb      	ldr	r3, [r7, #24]
 8011e94:	3301      	adds	r3, #1
 8011e96:	61bb      	str	r3, [r7, #24]
 8011e98:	69bb      	ldr	r3, [r7, #24]
 8011e9a:	005b      	lsls	r3, r3, #1
 8011e9c:	68fa      	ldr	r2, [r7, #12]
 8011e9e:	4413      	add	r3, r2
 8011ea0:	881b      	ldrh	r3, [r3, #0]
 8011ea2:	2b20      	cmp	r3, #32
 8011ea4:	d0f5      	beq.n	8011e92 <create_name+0x1c2>
 8011ea6:	69bb      	ldr	r3, [r7, #24]
 8011ea8:	005b      	lsls	r3, r3, #1
 8011eaa:	68fa      	ldr	r2, [r7, #12]
 8011eac:	4413      	add	r3, r2
 8011eae:	881b      	ldrh	r3, [r3, #0]
 8011eb0:	2b2e      	cmp	r3, #46	@ 0x2e
 8011eb2:	d0ee      	beq.n	8011e92 <create_name+0x1c2>
	if (si) cf |= NS_LOSS | NS_LFN;
 8011eb4:	69bb      	ldr	r3, [r7, #24]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d009      	beq.n	8011ece <create_name+0x1fe>
 8011eba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011ebe:	f043 0303 	orr.w	r3, r3, #3
 8011ec2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8011ec6:	e002      	b.n	8011ece <create_name+0x1fe>
 8011ec8:	697b      	ldr	r3, [r7, #20]
 8011eca:	3b01      	subs	r3, #1
 8011ecc:	617b      	str	r3, [r7, #20]
 8011ece:	697b      	ldr	r3, [r7, #20]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d009      	beq.n	8011ee8 <create_name+0x218>
 8011ed4:	697a      	ldr	r2, [r7, #20]
 8011ed6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011eda:	4413      	add	r3, r2
 8011edc:	005b      	lsls	r3, r3, #1
 8011ede:	68fa      	ldr	r2, [r7, #12]
 8011ee0:	4413      	add	r3, r2
 8011ee2:	881b      	ldrh	r3, [r3, #0]
 8011ee4:	2b2e      	cmp	r3, #46	@ 0x2e
 8011ee6:	d1ef      	bne.n	8011ec8 <create_name+0x1f8>

	i = b = 0; ni = 8;
 8011ee8:	2300      	movs	r3, #0
 8011eea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8011eee:	2300      	movs	r3, #0
 8011ef0:	623b      	str	r3, [r7, #32]
 8011ef2:	2308      	movs	r3, #8
 8011ef4:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8011ef6:	69bb      	ldr	r3, [r7, #24]
 8011ef8:	1c5a      	adds	r2, r3, #1
 8011efa:	61ba      	str	r2, [r7, #24]
 8011efc:	005b      	lsls	r3, r3, #1
 8011efe:	68fa      	ldr	r2, [r7, #12]
 8011f00:	4413      	add	r3, r2
 8011f02:	881b      	ldrh	r3, [r3, #0]
 8011f04:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8011f06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	f000 8098 	beq.w	801203e <create_name+0x36e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8011f0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011f10:	2b20      	cmp	r3, #32
 8011f12:	d006      	beq.n	8011f22 <create_name+0x252>
 8011f14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011f16:	2b2e      	cmp	r3, #46	@ 0x2e
 8011f18:	d10a      	bne.n	8011f30 <create_name+0x260>
 8011f1a:	69ba      	ldr	r2, [r7, #24]
 8011f1c:	697b      	ldr	r3, [r7, #20]
 8011f1e:	429a      	cmp	r2, r3
 8011f20:	d006      	beq.n	8011f30 <create_name+0x260>
			cf |= NS_LOSS | NS_LFN; continue;
 8011f22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011f26:	f043 0303 	orr.w	r3, r3, #3
 8011f2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011f2e:	e085      	b.n	801203c <create_name+0x36c>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8011f30:	6a3a      	ldr	r2, [r7, #32]
 8011f32:	69fb      	ldr	r3, [r7, #28]
 8011f34:	429a      	cmp	r2, r3
 8011f36:	d203      	bcs.n	8011f40 <create_name+0x270>
 8011f38:	69ba      	ldr	r2, [r7, #24]
 8011f3a:	697b      	ldr	r3, [r7, #20]
 8011f3c:	429a      	cmp	r2, r3
 8011f3e:	d123      	bne.n	8011f88 <create_name+0x2b8>
			if (ni == 11) {				/* Long extension */
 8011f40:	69fb      	ldr	r3, [r7, #28]
 8011f42:	2b0b      	cmp	r3, #11
 8011f44:	d106      	bne.n	8011f54 <create_name+0x284>
				cf |= NS_LOSS | NS_LFN; break;
 8011f46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011f4a:	f043 0303 	orr.w	r3, r3, #3
 8011f4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011f52:	e077      	b.n	8012044 <create_name+0x374>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8011f54:	69ba      	ldr	r2, [r7, #24]
 8011f56:	697b      	ldr	r3, [r7, #20]
 8011f58:	429a      	cmp	r2, r3
 8011f5a:	d005      	beq.n	8011f68 <create_name+0x298>
 8011f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011f60:	f043 0303 	orr.w	r3, r3, #3
 8011f64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8011f68:	69ba      	ldr	r2, [r7, #24]
 8011f6a:	697b      	ldr	r3, [r7, #20]
 8011f6c:	429a      	cmp	r2, r3
 8011f6e:	d868      	bhi.n	8012042 <create_name+0x372>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8011f70:	697b      	ldr	r3, [r7, #20]
 8011f72:	61bb      	str	r3, [r7, #24]
 8011f74:	2308      	movs	r3, #8
 8011f76:	623b      	str	r3, [r7, #32]
 8011f78:	230b      	movs	r3, #11
 8011f7a:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8011f7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011f80:	009b      	lsls	r3, r3, #2
 8011f82:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8011f86:	e059      	b.n	801203c <create_name+0x36c>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8011f88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011f8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8011f8c:	d914      	bls.n	8011fb8 <create_name+0x2e8>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8011f8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011f90:	2100      	movs	r1, #0
 8011f92:	4618      	mov	r0, r3
 8011f94:	f002 f810 	bl	8013fb8 <ff_convert>
 8011f98:	4603      	mov	r3, r0
 8011f9a:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8011f9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d004      	beq.n	8011fac <create_name+0x2dc>
 8011fa2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011fa4:	3b80      	subs	r3, #128	@ 0x80
 8011fa6:	4a10      	ldr	r2, [pc, #64]	@ (8011fe8 <create_name+0x318>)
 8011fa8:	5cd3      	ldrb	r3, [r2, r3]
 8011faa:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8011fac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011fb0:	f043 0302 	orr.w	r3, r3, #2
 8011fb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8011fb8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d007      	beq.n	8011fce <create_name+0x2fe>
 8011fbe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011fc0:	4619      	mov	r1, r3
 8011fc2:	480a      	ldr	r0, [pc, #40]	@ (8011fec <create_name+0x31c>)
 8011fc4:	f7fe fa61 	bl	801048a <chk_chr>
 8011fc8:	4603      	mov	r3, r0
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d010      	beq.n	8011ff0 <create_name+0x320>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8011fce:	235f      	movs	r3, #95	@ 0x5f
 8011fd0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8011fd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011fd6:	f043 0303 	orr.w	r3, r3, #3
 8011fda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011fde:	e023      	b.n	8012028 <create_name+0x358>
 8011fe0:	080144a8 	.word	0x080144a8
 8011fe4:	7ffffffe 	.word	0x7ffffffe
 8011fe8:	08014530 	.word	0x08014530
 8011fec:	080144b4 	.word	0x080144b4
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8011ff0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011ff2:	2b40      	cmp	r3, #64	@ 0x40
 8011ff4:	d909      	bls.n	801200a <create_name+0x33a>
 8011ff6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011ff8:	2b5a      	cmp	r3, #90	@ 0x5a
 8011ffa:	d806      	bhi.n	801200a <create_name+0x33a>
					b |= 2;
 8011ffc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012000:	f043 0302 	orr.w	r3, r3, #2
 8012004:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012008:	e00e      	b.n	8012028 <create_name+0x358>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801200a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801200c:	2b60      	cmp	r3, #96	@ 0x60
 801200e:	d90b      	bls.n	8012028 <create_name+0x358>
 8012010:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012012:	2b7a      	cmp	r3, #122	@ 0x7a
 8012014:	d808      	bhi.n	8012028 <create_name+0x358>
						b |= 1; w -= 0x20;
 8012016:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801201a:	f043 0301 	orr.w	r3, r3, #1
 801201e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012022:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012024:	3b20      	subs	r3, #32
 8012026:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8012028:	6a3b      	ldr	r3, [r7, #32]
 801202a:	1c5a      	adds	r2, r3, #1
 801202c:	623a      	str	r2, [r7, #32]
 801202e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012030:	b2d1      	uxtb	r1, r2
 8012032:	687a      	ldr	r2, [r7, #4]
 8012034:	4413      	add	r3, r2
 8012036:	460a      	mov	r2, r1
 8012038:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 801203c:	e75b      	b.n	8011ef6 <create_name+0x226>
		if (!w) break;					/* Break on end of the LFN */
 801203e:	bf00      	nop
 8012040:	e000      	b.n	8012044 <create_name+0x374>
			if (si > di) break;			/* No extension */
 8012042:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801204a:	2be5      	cmp	r3, #229	@ 0xe5
 801204c:	d103      	bne.n	8012056 <create_name+0x386>
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	2205      	movs	r2, #5
 8012052:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8012056:	69fb      	ldr	r3, [r7, #28]
 8012058:	2b08      	cmp	r3, #8
 801205a:	d104      	bne.n	8012066 <create_name+0x396>
 801205c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012060:	009b      	lsls	r3, r3, #2
 8012062:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8012066:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801206a:	f003 030c 	and.w	r3, r3, #12
 801206e:	2b0c      	cmp	r3, #12
 8012070:	d005      	beq.n	801207e <create_name+0x3ae>
 8012072:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012076:	f003 0303 	and.w	r3, r3, #3
 801207a:	2b03      	cmp	r3, #3
 801207c:	d105      	bne.n	801208a <create_name+0x3ba>
 801207e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012082:	f043 0302 	orr.w	r3, r3, #2
 8012086:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801208a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801208e:	f003 0302 	and.w	r3, r3, #2
 8012092:	2b00      	cmp	r3, #0
 8012094:	d117      	bne.n	80120c6 <create_name+0x3f6>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8012096:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801209a:	f003 0303 	and.w	r3, r3, #3
 801209e:	2b01      	cmp	r3, #1
 80120a0:	d105      	bne.n	80120ae <create_name+0x3de>
 80120a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80120a6:	f043 0310 	orr.w	r3, r3, #16
 80120aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80120ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80120b2:	f003 030c 	and.w	r3, r3, #12
 80120b6:	2b04      	cmp	r3, #4
 80120b8:	d105      	bne.n	80120c6 <create_name+0x3f6>
 80120ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80120be:	f043 0308 	orr.w	r3, r3, #8
 80120c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80120cc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 80120d0:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80120d2:	4618      	mov	r0, r3
 80120d4:	3728      	adds	r7, #40	@ 0x28
 80120d6:	46bd      	mov	sp, r7
 80120d8:	bd80      	pop	{r7, pc}
 80120da:	bf00      	nop

080120dc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80120dc:	b580      	push	{r7, lr}
 80120de:	b086      	sub	sp, #24
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	6078      	str	r0, [r7, #4]
 80120e4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80120ea:	693b      	ldr	r3, [r7, #16]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 80120f0:	683b      	ldr	r3, [r7, #0]
 80120f2:	781b      	ldrb	r3, [r3, #0]
 80120f4:	2b2f      	cmp	r3, #47	@ 0x2f
 80120f6:	d00b      	beq.n	8012110 <follow_path+0x34>
 80120f8:	683b      	ldr	r3, [r7, #0]
 80120fa:	781b      	ldrb	r3, [r3, #0]
 80120fc:	2b5c      	cmp	r3, #92	@ 0x5c
 80120fe:	d007      	beq.n	8012110 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	69da      	ldr	r2, [r3, #28]
 8012104:	693b      	ldr	r3, [r7, #16]
 8012106:	609a      	str	r2, [r3, #8]
 8012108:	e00d      	b.n	8012126 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801210a:	683b      	ldr	r3, [r7, #0]
 801210c:	3301      	adds	r3, #1
 801210e:	603b      	str	r3, [r7, #0]
 8012110:	683b      	ldr	r3, [r7, #0]
 8012112:	781b      	ldrb	r3, [r3, #0]
 8012114:	2b2f      	cmp	r3, #47	@ 0x2f
 8012116:	d0f8      	beq.n	801210a <follow_path+0x2e>
 8012118:	683b      	ldr	r3, [r7, #0]
 801211a:	781b      	ldrb	r3, [r3, #0]
 801211c:	2b5c      	cmp	r3, #92	@ 0x5c
 801211e:	d0f4      	beq.n	801210a <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8012120:	693b      	ldr	r3, [r7, #16]
 8012122:	2200      	movs	r2, #0
 8012124:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012126:	683b      	ldr	r3, [r7, #0]
 8012128:	781b      	ldrb	r3, [r3, #0]
 801212a:	2b1f      	cmp	r3, #31
 801212c:	d80a      	bhi.n	8012144 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	2280      	movs	r2, #128	@ 0x80
 8012132:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8012136:	2100      	movs	r1, #0
 8012138:	6878      	ldr	r0, [r7, #4]
 801213a:	f7fe ff50 	bl	8010fde <dir_sdi>
 801213e:	4603      	mov	r3, r0
 8012140:	75fb      	strb	r3, [r7, #23]
 8012142:	e05b      	b.n	80121fc <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012144:	463b      	mov	r3, r7
 8012146:	4619      	mov	r1, r3
 8012148:	6878      	ldr	r0, [r7, #4]
 801214a:	f7ff fdc1 	bl	8011cd0 <create_name>
 801214e:	4603      	mov	r3, r0
 8012150:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012152:	7dfb      	ldrb	r3, [r7, #23]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d14c      	bne.n	80121f2 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012158:	6878      	ldr	r0, [r7, #4]
 801215a:	f7ff fbb7 	bl	80118cc <dir_find>
 801215e:	4603      	mov	r3, r0
 8012160:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012168:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801216a:	7dfb      	ldrb	r3, [r7, #23]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d01b      	beq.n	80121a8 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012170:	7dfb      	ldrb	r3, [r7, #23]
 8012172:	2b04      	cmp	r3, #4
 8012174:	d13f      	bne.n	80121f6 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8012176:	7afb      	ldrb	r3, [r7, #11]
 8012178:	f003 0320 	and.w	r3, r3, #32
 801217c:	2b00      	cmp	r3, #0
 801217e:	d00b      	beq.n	8012198 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012180:	7afb      	ldrb	r3, [r7, #11]
 8012182:	f003 0304 	and.w	r3, r3, #4
 8012186:	2b00      	cmp	r3, #0
 8012188:	d031      	beq.n	80121ee <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	2280      	movs	r2, #128	@ 0x80
 801218e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
						res = FR_OK;
 8012192:	2300      	movs	r3, #0
 8012194:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8012196:	e02e      	b.n	80121f6 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012198:	7afb      	ldrb	r3, [r7, #11]
 801219a:	f003 0304 	and.w	r3, r3, #4
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d129      	bne.n	80121f6 <follow_path+0x11a>
 80121a2:	2305      	movs	r3, #5
 80121a4:	75fb      	strb	r3, [r7, #23]
				break;
 80121a6:	e026      	b.n	80121f6 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80121a8:	7afb      	ldrb	r3, [r7, #11]
 80121aa:	f003 0304 	and.w	r3, r3, #4
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d123      	bne.n	80121fa <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80121b2:	693b      	ldr	r3, [r7, #16]
 80121b4:	799b      	ldrb	r3, [r3, #6]
 80121b6:	f003 0310 	and.w	r3, r3, #16
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d102      	bne.n	80121c4 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 80121be:	2305      	movs	r3, #5
 80121c0:	75fb      	strb	r3, [r7, #23]
 80121c2:	e01b      	b.n	80121fc <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	695b      	ldr	r3, [r3, #20]
 80121ce:	68fa      	ldr	r2, [r7, #12]
 80121d0:	8992      	ldrh	r2, [r2, #12]
 80121d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80121d6:	fb00 f202 	mul.w	r2, r0, r2
 80121da:	1a9b      	subs	r3, r3, r2
 80121dc:	440b      	add	r3, r1
 80121de:	4619      	mov	r1, r3
 80121e0:	68f8      	ldr	r0, [r7, #12]
 80121e2:	f7ff f8a2 	bl	801132a <ld_clust>
 80121e6:	4602      	mov	r2, r0
 80121e8:	693b      	ldr	r3, [r7, #16]
 80121ea:	609a      	str	r2, [r3, #8]
 80121ec:	e7aa      	b.n	8012144 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80121ee:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80121f0:	e7a8      	b.n	8012144 <follow_path+0x68>
			if (res != FR_OK) break;
 80121f2:	bf00      	nop
 80121f4:	e002      	b.n	80121fc <follow_path+0x120>
				break;
 80121f6:	bf00      	nop
 80121f8:	e000      	b.n	80121fc <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80121fa:	bf00      	nop
			}
		}
	}

	return res;
 80121fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80121fe:	4618      	mov	r0, r3
 8012200:	3718      	adds	r7, #24
 8012202:	46bd      	mov	sp, r7
 8012204:	bd80      	pop	{r7, pc}

08012206 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012206:	b480      	push	{r7}
 8012208:	b087      	sub	sp, #28
 801220a:	af00      	add	r7, sp, #0
 801220c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801220e:	f04f 33ff 	mov.w	r3, #4294967295
 8012212:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	2b00      	cmp	r3, #0
 801221a:	d031      	beq.n	8012280 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	617b      	str	r3, [r7, #20]
 8012222:	e002      	b.n	801222a <get_ldnumber+0x24>
 8012224:	697b      	ldr	r3, [r7, #20]
 8012226:	3301      	adds	r3, #1
 8012228:	617b      	str	r3, [r7, #20]
 801222a:	697b      	ldr	r3, [r7, #20]
 801222c:	781b      	ldrb	r3, [r3, #0]
 801222e:	2b1f      	cmp	r3, #31
 8012230:	d903      	bls.n	801223a <get_ldnumber+0x34>
 8012232:	697b      	ldr	r3, [r7, #20]
 8012234:	781b      	ldrb	r3, [r3, #0]
 8012236:	2b3a      	cmp	r3, #58	@ 0x3a
 8012238:	d1f4      	bne.n	8012224 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801223a:	697b      	ldr	r3, [r7, #20]
 801223c:	781b      	ldrb	r3, [r3, #0]
 801223e:	2b3a      	cmp	r3, #58	@ 0x3a
 8012240:	d11c      	bne.n	801227c <get_ldnumber+0x76>
			tp = *path;
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	1c5a      	adds	r2, r3, #1
 801224c:	60fa      	str	r2, [r7, #12]
 801224e:	781b      	ldrb	r3, [r3, #0]
 8012250:	3b30      	subs	r3, #48	@ 0x30
 8012252:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012254:	68bb      	ldr	r3, [r7, #8]
 8012256:	2b09      	cmp	r3, #9
 8012258:	d80e      	bhi.n	8012278 <get_ldnumber+0x72>
 801225a:	68fa      	ldr	r2, [r7, #12]
 801225c:	697b      	ldr	r3, [r7, #20]
 801225e:	429a      	cmp	r2, r3
 8012260:	d10a      	bne.n	8012278 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012262:	68bb      	ldr	r3, [r7, #8]
 8012264:	2b00      	cmp	r3, #0
 8012266:	d107      	bne.n	8012278 <get_ldnumber+0x72>
					vol = (int)i;
 8012268:	68bb      	ldr	r3, [r7, #8]
 801226a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801226c:	697b      	ldr	r3, [r7, #20]
 801226e:	3301      	adds	r3, #1
 8012270:	617b      	str	r3, [r7, #20]
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	697a      	ldr	r2, [r7, #20]
 8012276:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012278:	693b      	ldr	r3, [r7, #16]
 801227a:	e002      	b.n	8012282 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801227c:	2300      	movs	r3, #0
 801227e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012280:	693b      	ldr	r3, [r7, #16]
}
 8012282:	4618      	mov	r0, r3
 8012284:	371c      	adds	r7, #28
 8012286:	46bd      	mov	sp, r7
 8012288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801228c:	4770      	bx	lr
	...

08012290 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012290:	b580      	push	{r7, lr}
 8012292:	b082      	sub	sp, #8
 8012294:	af00      	add	r7, sp, #0
 8012296:	6078      	str	r0, [r7, #4]
 8012298:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	2200      	movs	r2, #0
 801229e:	70da      	strb	r2, [r3, #3]
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	f04f 32ff 	mov.w	r2, #4294967295
 80122a6:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80122a8:	6839      	ldr	r1, [r7, #0]
 80122aa:	6878      	ldr	r0, [r7, #4]
 80122ac:	f7fe fab8 	bl	8010820 <move_window>
 80122b0:	4603      	mov	r3, r0
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d001      	beq.n	80122ba <check_fs+0x2a>
 80122b6:	2304      	movs	r3, #4
 80122b8:	e038      	b.n	801232c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	333c      	adds	r3, #60	@ 0x3c
 80122be:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80122c2:	4618      	mov	r0, r3
 80122c4:	f7fd fffc 	bl	80102c0 <ld_word>
 80122c8:	4603      	mov	r3, r0
 80122ca:	461a      	mov	r2, r3
 80122cc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80122d0:	429a      	cmp	r2, r3
 80122d2:	d001      	beq.n	80122d8 <check_fs+0x48>
 80122d4:	2303      	movs	r3, #3
 80122d6:	e029      	b.n	801232c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80122de:	2be9      	cmp	r3, #233	@ 0xe9
 80122e0:	d009      	beq.n	80122f6 <check_fs+0x66>
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80122e8:	2beb      	cmp	r3, #235	@ 0xeb
 80122ea:	d11e      	bne.n	801232a <check_fs+0x9a>
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80122f2:	2b90      	cmp	r3, #144	@ 0x90
 80122f4:	d119      	bne.n	801232a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	333c      	adds	r3, #60	@ 0x3c
 80122fa:	3336      	adds	r3, #54	@ 0x36
 80122fc:	4618      	mov	r0, r3
 80122fe:	f7fd fff7 	bl	80102f0 <ld_dword>
 8012302:	4603      	mov	r3, r0
 8012304:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012308:	4a0a      	ldr	r2, [pc, #40]	@ (8012334 <check_fs+0xa4>)
 801230a:	4293      	cmp	r3, r2
 801230c:	d101      	bne.n	8012312 <check_fs+0x82>
 801230e:	2300      	movs	r3, #0
 8012310:	e00c      	b.n	801232c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	333c      	adds	r3, #60	@ 0x3c
 8012316:	3352      	adds	r3, #82	@ 0x52
 8012318:	4618      	mov	r0, r3
 801231a:	f7fd ffe9 	bl	80102f0 <ld_dword>
 801231e:	4603      	mov	r3, r0
 8012320:	4a05      	ldr	r2, [pc, #20]	@ (8012338 <check_fs+0xa8>)
 8012322:	4293      	cmp	r3, r2
 8012324:	d101      	bne.n	801232a <check_fs+0x9a>
 8012326:	2300      	movs	r3, #0
 8012328:	e000      	b.n	801232c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801232a:	2302      	movs	r3, #2
}
 801232c:	4618      	mov	r0, r3
 801232e:	3708      	adds	r7, #8
 8012330:	46bd      	mov	sp, r7
 8012332:	bd80      	pop	{r7, pc}
 8012334:	00544146 	.word	0x00544146
 8012338:	33544146 	.word	0x33544146

0801233c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801233c:	b580      	push	{r7, lr}
 801233e:	b096      	sub	sp, #88	@ 0x58
 8012340:	af00      	add	r7, sp, #0
 8012342:	60f8      	str	r0, [r7, #12]
 8012344:	60b9      	str	r1, [r7, #8]
 8012346:	4613      	mov	r3, r2
 8012348:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801234a:	68bb      	ldr	r3, [r7, #8]
 801234c:	2200      	movs	r2, #0
 801234e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012350:	68f8      	ldr	r0, [r7, #12]
 8012352:	f7ff ff58 	bl	8012206 <get_ldnumber>
 8012356:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801235a:	2b00      	cmp	r3, #0
 801235c:	da01      	bge.n	8012362 <find_volume+0x26>
 801235e:	230b      	movs	r3, #11
 8012360:	e268      	b.n	8012834 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012362:	4a9f      	ldr	r2, [pc, #636]	@ (80125e0 <find_volume+0x2a4>)
 8012364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801236a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801236c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801236e:	2b00      	cmp	r3, #0
 8012370:	d101      	bne.n	8012376 <find_volume+0x3a>
 8012372:	230c      	movs	r3, #12
 8012374:	e25e      	b.n	8012834 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012376:	68bb      	ldr	r3, [r7, #8]
 8012378:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801237a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801237c:	79fb      	ldrb	r3, [r7, #7]
 801237e:	f023 0301 	bic.w	r3, r3, #1
 8012382:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012386:	781b      	ldrb	r3, [r3, #0]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d01a      	beq.n	80123c2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801238c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801238e:	785b      	ldrb	r3, [r3, #1]
 8012390:	4618      	mov	r0, r3
 8012392:	f7fd fef5 	bl	8010180 <disk_status>
 8012396:	4603      	mov	r3, r0
 8012398:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801239c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80123a0:	f003 0301 	and.w	r3, r3, #1
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d10c      	bne.n	80123c2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80123a8:	79fb      	ldrb	r3, [r7, #7]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d007      	beq.n	80123be <find_volume+0x82>
 80123ae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80123b2:	f003 0304 	and.w	r3, r3, #4
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d001      	beq.n	80123be <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80123ba:	230a      	movs	r3, #10
 80123bc:	e23a      	b.n	8012834 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80123be:	2300      	movs	r3, #0
 80123c0:	e238      	b.n	8012834 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80123c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123c4:	2200      	movs	r2, #0
 80123c6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80123c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80123ca:	b2da      	uxtb	r2, r3
 80123cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123ce:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80123d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123d2:	785b      	ldrb	r3, [r3, #1]
 80123d4:	4618      	mov	r0, r3
 80123d6:	f7fd feed 	bl	80101b4 <disk_initialize>
 80123da:	4603      	mov	r3, r0
 80123dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80123e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80123e4:	f003 0301 	and.w	r3, r3, #1
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d001      	beq.n	80123f0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80123ec:	2303      	movs	r3, #3
 80123ee:	e221      	b.n	8012834 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80123f0:	79fb      	ldrb	r3, [r7, #7]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d007      	beq.n	8012406 <find_volume+0xca>
 80123f6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80123fa:	f003 0304 	and.w	r3, r3, #4
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d001      	beq.n	8012406 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012402:	230a      	movs	r3, #10
 8012404:	e216      	b.n	8012834 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8012406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012408:	7858      	ldrb	r0, [r3, #1]
 801240a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801240c:	330c      	adds	r3, #12
 801240e:	461a      	mov	r2, r3
 8012410:	2102      	movs	r1, #2
 8012412:	f7fd ff37 	bl	8010284 <disk_ioctl>
 8012416:	4603      	mov	r3, r0
 8012418:	2b00      	cmp	r3, #0
 801241a:	d001      	beq.n	8012420 <find_volume+0xe4>
 801241c:	2301      	movs	r3, #1
 801241e:	e209      	b.n	8012834 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012422:	899b      	ldrh	r3, [r3, #12]
 8012424:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012428:	d80d      	bhi.n	8012446 <find_volume+0x10a>
 801242a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801242c:	899b      	ldrh	r3, [r3, #12]
 801242e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012432:	d308      	bcc.n	8012446 <find_volume+0x10a>
 8012434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012436:	899b      	ldrh	r3, [r3, #12]
 8012438:	461a      	mov	r2, r3
 801243a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801243c:	899b      	ldrh	r3, [r3, #12]
 801243e:	3b01      	subs	r3, #1
 8012440:	4013      	ands	r3, r2
 8012442:	2b00      	cmp	r3, #0
 8012444:	d001      	beq.n	801244a <find_volume+0x10e>
 8012446:	2301      	movs	r3, #1
 8012448:	e1f4      	b.n	8012834 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801244a:	2300      	movs	r3, #0
 801244c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801244e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012450:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012452:	f7ff ff1d 	bl	8012290 <check_fs>
 8012456:	4603      	mov	r3, r0
 8012458:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801245c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012460:	2b02      	cmp	r3, #2
 8012462:	d149      	bne.n	80124f8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012464:	2300      	movs	r3, #0
 8012466:	643b      	str	r3, [r7, #64]	@ 0x40
 8012468:	e01e      	b.n	80124a8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801246a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801246c:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8012470:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012472:	011b      	lsls	r3, r3, #4
 8012474:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8012478:	4413      	add	r3, r2
 801247a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801247c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801247e:	3304      	adds	r3, #4
 8012480:	781b      	ldrb	r3, [r3, #0]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d006      	beq.n	8012494 <find_volume+0x158>
 8012486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012488:	3308      	adds	r3, #8
 801248a:	4618      	mov	r0, r3
 801248c:	f7fd ff30 	bl	80102f0 <ld_dword>
 8012490:	4602      	mov	r2, r0
 8012492:	e000      	b.n	8012496 <find_volume+0x15a>
 8012494:	2200      	movs	r2, #0
 8012496:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012498:	009b      	lsls	r3, r3, #2
 801249a:	3358      	adds	r3, #88	@ 0x58
 801249c:	443b      	add	r3, r7
 801249e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80124a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80124a4:	3301      	adds	r3, #1
 80124a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80124a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80124aa:	2b03      	cmp	r3, #3
 80124ac:	d9dd      	bls.n	801246a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80124ae:	2300      	movs	r3, #0
 80124b0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80124b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d002      	beq.n	80124be <find_volume+0x182>
 80124b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80124ba:	3b01      	subs	r3, #1
 80124bc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80124be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80124c0:	009b      	lsls	r3, r3, #2
 80124c2:	3358      	adds	r3, #88	@ 0x58
 80124c4:	443b      	add	r3, r7
 80124c6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80124ca:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80124cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d005      	beq.n	80124de <find_volume+0x1a2>
 80124d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80124d4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80124d6:	f7ff fedb 	bl	8012290 <check_fs>
 80124da:	4603      	mov	r3, r0
 80124dc:	e000      	b.n	80124e0 <find_volume+0x1a4>
 80124de:	2303      	movs	r3, #3
 80124e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80124e4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80124e8:	2b01      	cmp	r3, #1
 80124ea:	d905      	bls.n	80124f8 <find_volume+0x1bc>
 80124ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80124ee:	3301      	adds	r3, #1
 80124f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80124f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80124f4:	2b03      	cmp	r3, #3
 80124f6:	d9e2      	bls.n	80124be <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80124f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80124fc:	2b04      	cmp	r3, #4
 80124fe:	d101      	bne.n	8012504 <find_volume+0x1c8>
 8012500:	2301      	movs	r3, #1
 8012502:	e197      	b.n	8012834 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012504:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012508:	2b01      	cmp	r3, #1
 801250a:	d901      	bls.n	8012510 <find_volume+0x1d4>
 801250c:	230d      	movs	r3, #13
 801250e:	e191      	b.n	8012834 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012512:	333c      	adds	r3, #60	@ 0x3c
 8012514:	330b      	adds	r3, #11
 8012516:	4618      	mov	r0, r3
 8012518:	f7fd fed2 	bl	80102c0 <ld_word>
 801251c:	4603      	mov	r3, r0
 801251e:	461a      	mov	r2, r3
 8012520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012522:	899b      	ldrh	r3, [r3, #12]
 8012524:	429a      	cmp	r2, r3
 8012526:	d001      	beq.n	801252c <find_volume+0x1f0>
 8012528:	230d      	movs	r3, #13
 801252a:	e183      	b.n	8012834 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801252c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801252e:	333c      	adds	r3, #60	@ 0x3c
 8012530:	3316      	adds	r3, #22
 8012532:	4618      	mov	r0, r3
 8012534:	f7fd fec4 	bl	80102c0 <ld_word>
 8012538:	4603      	mov	r3, r0
 801253a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801253c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801253e:	2b00      	cmp	r3, #0
 8012540:	d106      	bne.n	8012550 <find_volume+0x214>
 8012542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012544:	333c      	adds	r3, #60	@ 0x3c
 8012546:	3324      	adds	r3, #36	@ 0x24
 8012548:	4618      	mov	r0, r3
 801254a:	f7fd fed1 	bl	80102f0 <ld_dword>
 801254e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8012550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012552:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012554:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012558:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 801255c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801255e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012562:	789b      	ldrb	r3, [r3, #2]
 8012564:	2b01      	cmp	r3, #1
 8012566:	d005      	beq.n	8012574 <find_volume+0x238>
 8012568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801256a:	789b      	ldrb	r3, [r3, #2]
 801256c:	2b02      	cmp	r3, #2
 801256e:	d001      	beq.n	8012574 <find_volume+0x238>
 8012570:	230d      	movs	r3, #13
 8012572:	e15f      	b.n	8012834 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012576:	789b      	ldrb	r3, [r3, #2]
 8012578:	461a      	mov	r2, r3
 801257a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801257c:	fb02 f303 	mul.w	r3, r2, r3
 8012580:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012584:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8012588:	461a      	mov	r2, r3
 801258a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801258c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801258e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012590:	895b      	ldrh	r3, [r3, #10]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d008      	beq.n	80125a8 <find_volume+0x26c>
 8012596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012598:	895b      	ldrh	r3, [r3, #10]
 801259a:	461a      	mov	r2, r3
 801259c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801259e:	895b      	ldrh	r3, [r3, #10]
 80125a0:	3b01      	subs	r3, #1
 80125a2:	4013      	ands	r3, r2
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d001      	beq.n	80125ac <find_volume+0x270>
 80125a8:	230d      	movs	r3, #13
 80125aa:	e143      	b.n	8012834 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80125ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125ae:	333c      	adds	r3, #60	@ 0x3c
 80125b0:	3311      	adds	r3, #17
 80125b2:	4618      	mov	r0, r3
 80125b4:	f7fd fe84 	bl	80102c0 <ld_word>
 80125b8:	4603      	mov	r3, r0
 80125ba:	461a      	mov	r2, r3
 80125bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125be:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80125c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125c2:	891b      	ldrh	r3, [r3, #8]
 80125c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80125c6:	8992      	ldrh	r2, [r2, #12]
 80125c8:	0952      	lsrs	r2, r2, #5
 80125ca:	b292      	uxth	r2, r2
 80125cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80125d0:	fb01 f202 	mul.w	r2, r1, r2
 80125d4:	1a9b      	subs	r3, r3, r2
 80125d6:	b29b      	uxth	r3, r3
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d003      	beq.n	80125e4 <find_volume+0x2a8>
 80125dc:	230d      	movs	r3, #13
 80125de:	e129      	b.n	8012834 <find_volume+0x4f8>
 80125e0:	24002ae8 	.word	0x24002ae8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80125e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125e6:	333c      	adds	r3, #60	@ 0x3c
 80125e8:	3313      	adds	r3, #19
 80125ea:	4618      	mov	r0, r3
 80125ec:	f7fd fe68 	bl	80102c0 <ld_word>
 80125f0:	4603      	mov	r3, r0
 80125f2:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80125f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d106      	bne.n	8012608 <find_volume+0x2cc>
 80125fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125fc:	333c      	adds	r3, #60	@ 0x3c
 80125fe:	3320      	adds	r3, #32
 8012600:	4618      	mov	r0, r3
 8012602:	f7fd fe75 	bl	80102f0 <ld_dword>
 8012606:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801260a:	333c      	adds	r3, #60	@ 0x3c
 801260c:	330e      	adds	r3, #14
 801260e:	4618      	mov	r0, r3
 8012610:	f7fd fe56 	bl	80102c0 <ld_word>
 8012614:	4603      	mov	r3, r0
 8012616:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012618:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801261a:	2b00      	cmp	r3, #0
 801261c:	d101      	bne.n	8012622 <find_volume+0x2e6>
 801261e:	230d      	movs	r3, #13
 8012620:	e108      	b.n	8012834 <find_volume+0x4f8>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012622:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8012624:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012626:	4413      	add	r3, r2
 8012628:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801262a:	8911      	ldrh	r1, [r2, #8]
 801262c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801262e:	8992      	ldrh	r2, [r2, #12]
 8012630:	0952      	lsrs	r2, r2, #5
 8012632:	b292      	uxth	r2, r2
 8012634:	fbb1 f2f2 	udiv	r2, r1, r2
 8012638:	b292      	uxth	r2, r2
 801263a:	4413      	add	r3, r2
 801263c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801263e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012642:	429a      	cmp	r2, r3
 8012644:	d201      	bcs.n	801264a <find_volume+0x30e>
 8012646:	230d      	movs	r3, #13
 8012648:	e0f4      	b.n	8012834 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801264a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801264c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801264e:	1ad3      	subs	r3, r2, r3
 8012650:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012652:	8952      	ldrh	r2, [r2, #10]
 8012654:	fbb3 f3f2 	udiv	r3, r3, r2
 8012658:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801265a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801265c:	2b00      	cmp	r3, #0
 801265e:	d101      	bne.n	8012664 <find_volume+0x328>
 8012660:	230d      	movs	r3, #13
 8012662:	e0e7      	b.n	8012834 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8012664:	2303      	movs	r3, #3
 8012666:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801266c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8012670:	4293      	cmp	r3, r2
 8012672:	d802      	bhi.n	801267a <find_volume+0x33e>
 8012674:	2302      	movs	r3, #2
 8012676:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801267a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801267c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8012680:	4293      	cmp	r3, r2
 8012682:	d802      	bhi.n	801268a <find_volume+0x34e>
 8012684:	2301      	movs	r3, #1
 8012686:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801268a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801268c:	1c9a      	adds	r2, r3, #2
 801268e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012690:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8012692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012694:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012696:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012698:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801269a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801269c:	441a      	add	r2, r3
 801269e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126a0:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 80126a2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80126a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126a6:	441a      	add	r2, r3
 80126a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126aa:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 80126ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80126b0:	2b03      	cmp	r3, #3
 80126b2:	d11e      	bne.n	80126f2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80126b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126b6:	333c      	adds	r3, #60	@ 0x3c
 80126b8:	332a      	adds	r3, #42	@ 0x2a
 80126ba:	4618      	mov	r0, r3
 80126bc:	f7fd fe00 	bl	80102c0 <ld_word>
 80126c0:	4603      	mov	r3, r0
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d001      	beq.n	80126ca <find_volume+0x38e>
 80126c6:	230d      	movs	r3, #13
 80126c8:	e0b4      	b.n	8012834 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80126ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126cc:	891b      	ldrh	r3, [r3, #8]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d001      	beq.n	80126d6 <find_volume+0x39a>
 80126d2:	230d      	movs	r3, #13
 80126d4:	e0ae      	b.n	8012834 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80126d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126d8:	333c      	adds	r3, #60	@ 0x3c
 80126da:	332c      	adds	r3, #44	@ 0x2c
 80126dc:	4618      	mov	r0, r3
 80126de:	f7fd fe07 	bl	80102f0 <ld_dword>
 80126e2:	4602      	mov	r2, r0
 80126e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126e6:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80126e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126ea:	6a1b      	ldr	r3, [r3, #32]
 80126ec:	009b      	lsls	r3, r3, #2
 80126ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80126f0:	e01f      	b.n	8012732 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80126f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126f4:	891b      	ldrh	r3, [r3, #8]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d101      	bne.n	80126fe <find_volume+0x3c2>
 80126fa:	230d      	movs	r3, #13
 80126fc:	e09a      	b.n	8012834 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80126fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012702:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012704:	441a      	add	r2, r3
 8012706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012708:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801270a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801270e:	2b02      	cmp	r3, #2
 8012710:	d103      	bne.n	801271a <find_volume+0x3de>
 8012712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012714:	6a1b      	ldr	r3, [r3, #32]
 8012716:	005b      	lsls	r3, r3, #1
 8012718:	e00a      	b.n	8012730 <find_volume+0x3f4>
 801271a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801271c:	6a1a      	ldr	r2, [r3, #32]
 801271e:	4613      	mov	r3, r2
 8012720:	005b      	lsls	r3, r3, #1
 8012722:	4413      	add	r3, r2
 8012724:	085a      	lsrs	r2, r3, #1
 8012726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012728:	6a1b      	ldr	r3, [r3, #32]
 801272a:	f003 0301 	and.w	r3, r3, #1
 801272e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012730:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012734:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012738:	899b      	ldrh	r3, [r3, #12]
 801273a:	4619      	mov	r1, r3
 801273c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801273e:	440b      	add	r3, r1
 8012740:	3b01      	subs	r3, #1
 8012742:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012744:	8989      	ldrh	r1, [r1, #12]
 8012746:	fbb3 f3f1 	udiv	r3, r3, r1
 801274a:	429a      	cmp	r2, r3
 801274c:	d201      	bcs.n	8012752 <find_volume+0x416>
 801274e:	230d      	movs	r3, #13
 8012750:	e070      	b.n	8012834 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012754:	f04f 32ff 	mov.w	r2, #4294967295
 8012758:	619a      	str	r2, [r3, #24]
 801275a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801275c:	699a      	ldr	r2, [r3, #24]
 801275e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012760:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8012762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012764:	2280      	movs	r2, #128	@ 0x80
 8012766:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012768:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801276c:	2b03      	cmp	r3, #3
 801276e:	d149      	bne.n	8012804 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012772:	333c      	adds	r3, #60	@ 0x3c
 8012774:	3330      	adds	r3, #48	@ 0x30
 8012776:	4618      	mov	r0, r3
 8012778:	f7fd fda2 	bl	80102c0 <ld_word>
 801277c:	4603      	mov	r3, r0
 801277e:	2b01      	cmp	r3, #1
 8012780:	d140      	bne.n	8012804 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012782:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012784:	3301      	adds	r3, #1
 8012786:	4619      	mov	r1, r3
 8012788:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801278a:	f7fe f849 	bl	8010820 <move_window>
 801278e:	4603      	mov	r3, r0
 8012790:	2b00      	cmp	r3, #0
 8012792:	d137      	bne.n	8012804 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8012794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012796:	2200      	movs	r2, #0
 8012798:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801279a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801279c:	333c      	adds	r3, #60	@ 0x3c
 801279e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80127a2:	4618      	mov	r0, r3
 80127a4:	f7fd fd8c 	bl	80102c0 <ld_word>
 80127a8:	4603      	mov	r3, r0
 80127aa:	461a      	mov	r2, r3
 80127ac:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80127b0:	429a      	cmp	r2, r3
 80127b2:	d127      	bne.n	8012804 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80127b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127b6:	333c      	adds	r3, #60	@ 0x3c
 80127b8:	4618      	mov	r0, r3
 80127ba:	f7fd fd99 	bl	80102f0 <ld_dword>
 80127be:	4603      	mov	r3, r0
 80127c0:	4a1e      	ldr	r2, [pc, #120]	@ (801283c <find_volume+0x500>)
 80127c2:	4293      	cmp	r3, r2
 80127c4:	d11e      	bne.n	8012804 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80127c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127c8:	333c      	adds	r3, #60	@ 0x3c
 80127ca:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80127ce:	4618      	mov	r0, r3
 80127d0:	f7fd fd8e 	bl	80102f0 <ld_dword>
 80127d4:	4603      	mov	r3, r0
 80127d6:	4a1a      	ldr	r2, [pc, #104]	@ (8012840 <find_volume+0x504>)
 80127d8:	4293      	cmp	r3, r2
 80127da:	d113      	bne.n	8012804 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80127dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127de:	333c      	adds	r3, #60	@ 0x3c
 80127e0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80127e4:	4618      	mov	r0, r3
 80127e6:	f7fd fd83 	bl	80102f0 <ld_dword>
 80127ea:	4602      	mov	r2, r0
 80127ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127ee:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80127f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127f2:	333c      	adds	r3, #60	@ 0x3c
 80127f4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80127f8:	4618      	mov	r0, r3
 80127fa:	f7fd fd79 	bl	80102f0 <ld_dword>
 80127fe:	4602      	mov	r2, r0
 8012800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012802:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012806:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801280a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801280c:	4b0d      	ldr	r3, [pc, #52]	@ (8012844 <find_volume+0x508>)
 801280e:	881b      	ldrh	r3, [r3, #0]
 8012810:	3301      	adds	r3, #1
 8012812:	b29a      	uxth	r2, r3
 8012814:	4b0b      	ldr	r3, [pc, #44]	@ (8012844 <find_volume+0x508>)
 8012816:	801a      	strh	r2, [r3, #0]
 8012818:	4b0a      	ldr	r3, [pc, #40]	@ (8012844 <find_volume+0x508>)
 801281a:	881a      	ldrh	r2, [r3, #0]
 801281c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801281e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8012820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012822:	4a09      	ldr	r2, [pc, #36]	@ (8012848 <find_volume+0x50c>)
 8012824:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8012826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012828:	2200      	movs	r2, #0
 801282a:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801282c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801282e:	f7fd ff8f 	bl	8010750 <clear_lock>
#endif
	return FR_OK;
 8012832:	2300      	movs	r3, #0
}
 8012834:	4618      	mov	r0, r3
 8012836:	3758      	adds	r7, #88	@ 0x58
 8012838:	46bd      	mov	sp, r7
 801283a:	bd80      	pop	{r7, pc}
 801283c:	41615252 	.word	0x41615252
 8012840:	61417272 	.word	0x61417272
 8012844:	24002aec 	.word	0x24002aec
 8012848:	24002b10 	.word	0x24002b10

0801284c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801284c:	b580      	push	{r7, lr}
 801284e:	b084      	sub	sp, #16
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
 8012854:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012856:	2309      	movs	r3, #9
 8012858:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d01c      	beq.n	801289a <validate+0x4e>
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	2b00      	cmp	r3, #0
 8012866:	d018      	beq.n	801289a <validate+0x4e>
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	781b      	ldrb	r3, [r3, #0]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d013      	beq.n	801289a <validate+0x4e>
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	889a      	ldrh	r2, [r3, #4]
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	88db      	ldrh	r3, [r3, #6]
 801287c:	429a      	cmp	r2, r3
 801287e:	d10c      	bne.n	801289a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	785b      	ldrb	r3, [r3, #1]
 8012886:	4618      	mov	r0, r3
 8012888:	f7fd fc7a 	bl	8010180 <disk_status>
 801288c:	4603      	mov	r3, r0
 801288e:	f003 0301 	and.w	r3, r3, #1
 8012892:	2b00      	cmp	r3, #0
 8012894:	d101      	bne.n	801289a <validate+0x4e>
			res = FR_OK;
 8012896:	2300      	movs	r3, #0
 8012898:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801289a:	7bfb      	ldrb	r3, [r7, #15]
 801289c:	2b00      	cmp	r3, #0
 801289e:	d102      	bne.n	80128a6 <validate+0x5a>
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	e000      	b.n	80128a8 <validate+0x5c>
 80128a6:	2300      	movs	r3, #0
 80128a8:	683a      	ldr	r2, [r7, #0]
 80128aa:	6013      	str	r3, [r2, #0]
	return res;
 80128ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80128ae:	4618      	mov	r0, r3
 80128b0:	3710      	adds	r7, #16
 80128b2:	46bd      	mov	sp, r7
 80128b4:	bd80      	pop	{r7, pc}
	...

080128b8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80128b8:	b580      	push	{r7, lr}
 80128ba:	b088      	sub	sp, #32
 80128bc:	af00      	add	r7, sp, #0
 80128be:	60f8      	str	r0, [r7, #12]
 80128c0:	60b9      	str	r1, [r7, #8]
 80128c2:	4613      	mov	r3, r2
 80128c4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80128c6:	68bb      	ldr	r3, [r7, #8]
 80128c8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80128ca:	f107 0310 	add.w	r3, r7, #16
 80128ce:	4618      	mov	r0, r3
 80128d0:	f7ff fc99 	bl	8012206 <get_ldnumber>
 80128d4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80128d6:	69fb      	ldr	r3, [r7, #28]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	da01      	bge.n	80128e0 <f_mount+0x28>
 80128dc:	230b      	movs	r3, #11
 80128de:	e02b      	b.n	8012938 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80128e0:	4a17      	ldr	r2, [pc, #92]	@ (8012940 <f_mount+0x88>)
 80128e2:	69fb      	ldr	r3, [r7, #28]
 80128e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80128e8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80128ea:	69bb      	ldr	r3, [r7, #24]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d005      	beq.n	80128fc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80128f0:	69b8      	ldr	r0, [r7, #24]
 80128f2:	f7fd ff2d 	bl	8010750 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80128f6:	69bb      	ldr	r3, [r7, #24]
 80128f8:	2200      	movs	r2, #0
 80128fa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d002      	beq.n	8012908 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	2200      	movs	r2, #0
 8012906:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012908:	68fa      	ldr	r2, [r7, #12]
 801290a:	490d      	ldr	r1, [pc, #52]	@ (8012940 <f_mount+0x88>)
 801290c:	69fb      	ldr	r3, [r7, #28]
 801290e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d002      	beq.n	801291e <f_mount+0x66>
 8012918:	79fb      	ldrb	r3, [r7, #7]
 801291a:	2b01      	cmp	r3, #1
 801291c:	d001      	beq.n	8012922 <f_mount+0x6a>
 801291e:	2300      	movs	r3, #0
 8012920:	e00a      	b.n	8012938 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012922:	f107 010c 	add.w	r1, r7, #12
 8012926:	f107 0308 	add.w	r3, r7, #8
 801292a:	2200      	movs	r2, #0
 801292c:	4618      	mov	r0, r3
 801292e:	f7ff fd05 	bl	801233c <find_volume>
 8012932:	4603      	mov	r3, r0
 8012934:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012936:	7dfb      	ldrb	r3, [r7, #23]
}
 8012938:	4618      	mov	r0, r3
 801293a:	3720      	adds	r7, #32
 801293c:	46bd      	mov	sp, r7
 801293e:	bd80      	pop	{r7, pc}
 8012940:	24002ae8 	.word	0x24002ae8

08012944 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012944:	b580      	push	{r7, lr}
 8012946:	b09a      	sub	sp, #104	@ 0x68
 8012948:	af00      	add	r7, sp, #0
 801294a:	60f8      	str	r0, [r7, #12]
 801294c:	60b9      	str	r1, [r7, #8]
 801294e:	4613      	mov	r3, r2
 8012950:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d101      	bne.n	801295c <f_open+0x18>
 8012958:	2309      	movs	r3, #9
 801295a:	e1b7      	b.n	8012ccc <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801295c:	79fb      	ldrb	r3, [r7, #7]
 801295e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012962:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012964:	79fa      	ldrb	r2, [r7, #7]
 8012966:	f107 0114 	add.w	r1, r7, #20
 801296a:	f107 0308 	add.w	r3, r7, #8
 801296e:	4618      	mov	r0, r3
 8012970:	f7ff fce4 	bl	801233c <find_volume>
 8012974:	4603      	mov	r3, r0
 8012976:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 801297a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801297e:	2b00      	cmp	r3, #0
 8012980:	f040 819b 	bne.w	8012cba <f_open+0x376>
		dj.obj.fs = fs;
 8012984:	697b      	ldr	r3, [r7, #20]
 8012986:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012988:	68ba      	ldr	r2, [r7, #8]
 801298a:	f107 0318 	add.w	r3, r7, #24
 801298e:	4611      	mov	r1, r2
 8012990:	4618      	mov	r0, r3
 8012992:	f7ff fba3 	bl	80120dc <follow_path>
 8012996:	4603      	mov	r3, r0
 8012998:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801299c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d118      	bne.n	80129d6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80129a4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80129a8:	b25b      	sxtb	r3, r3
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	da03      	bge.n	80129b6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80129ae:	2306      	movs	r3, #6
 80129b0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80129b4:	e00f      	b.n	80129d6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80129b6:	79fb      	ldrb	r3, [r7, #7]
 80129b8:	2b01      	cmp	r3, #1
 80129ba:	bf8c      	ite	hi
 80129bc:	2301      	movhi	r3, #1
 80129be:	2300      	movls	r3, #0
 80129c0:	b2db      	uxtb	r3, r3
 80129c2:	461a      	mov	r2, r3
 80129c4:	f107 0318 	add.w	r3, r7, #24
 80129c8:	4611      	mov	r1, r2
 80129ca:	4618      	mov	r0, r3
 80129cc:	f7fd fd78 	bl	80104c0 <chk_lock>
 80129d0:	4603      	mov	r3, r0
 80129d2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80129d6:	79fb      	ldrb	r3, [r7, #7]
 80129d8:	f003 031c 	and.w	r3, r3, #28
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d07f      	beq.n	8012ae0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80129e0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d017      	beq.n	8012a18 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80129e8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80129ec:	2b04      	cmp	r3, #4
 80129ee:	d10e      	bne.n	8012a0e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80129f0:	f7fd fdc2 	bl	8010578 <enq_lock>
 80129f4:	4603      	mov	r3, r0
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d006      	beq.n	8012a08 <f_open+0xc4>
 80129fa:	f107 0318 	add.w	r3, r7, #24
 80129fe:	4618      	mov	r0, r3
 8012a00:	f7ff f824 	bl	8011a4c <dir_register>
 8012a04:	4603      	mov	r3, r0
 8012a06:	e000      	b.n	8012a0a <f_open+0xc6>
 8012a08:	2312      	movs	r3, #18
 8012a0a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012a0e:	79fb      	ldrb	r3, [r7, #7]
 8012a10:	f043 0308 	orr.w	r3, r3, #8
 8012a14:	71fb      	strb	r3, [r7, #7]
 8012a16:	e010      	b.n	8012a3a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012a18:	7fbb      	ldrb	r3, [r7, #30]
 8012a1a:	f003 0311 	and.w	r3, r3, #17
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d003      	beq.n	8012a2a <f_open+0xe6>
					res = FR_DENIED;
 8012a22:	2307      	movs	r3, #7
 8012a24:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8012a28:	e007      	b.n	8012a3a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012a2a:	79fb      	ldrb	r3, [r7, #7]
 8012a2c:	f003 0304 	and.w	r3, r3, #4
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d002      	beq.n	8012a3a <f_open+0xf6>
 8012a34:	2308      	movs	r3, #8
 8012a36:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012a3a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d168      	bne.n	8012b14 <f_open+0x1d0>
 8012a42:	79fb      	ldrb	r3, [r7, #7]
 8012a44:	f003 0308 	and.w	r3, r3, #8
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d063      	beq.n	8012b14 <f_open+0x1d0>
				dw = GET_FATTIME();
 8012a4c:	f7fc fe76 	bl	800f73c <get_fattime>
 8012a50:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a54:	330e      	adds	r3, #14
 8012a56:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8012a58:	4618      	mov	r0, r3
 8012a5a:	f7fd fc87 	bl	801036c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a60:	3316      	adds	r3, #22
 8012a62:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8012a64:	4618      	mov	r0, r3
 8012a66:	f7fd fc81 	bl	801036c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a6c:	330b      	adds	r3, #11
 8012a6e:	2220      	movs	r2, #32
 8012a70:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012a72:	697b      	ldr	r3, [r7, #20]
 8012a74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012a76:	4611      	mov	r1, r2
 8012a78:	4618      	mov	r0, r3
 8012a7a:	f7fe fc56 	bl	801132a <ld_clust>
 8012a7e:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012a80:	697b      	ldr	r3, [r7, #20]
 8012a82:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012a84:	2200      	movs	r2, #0
 8012a86:	4618      	mov	r0, r3
 8012a88:	f7fe fc6e 	bl	8011368 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a8e:	331c      	adds	r3, #28
 8012a90:	2100      	movs	r1, #0
 8012a92:	4618      	mov	r0, r3
 8012a94:	f7fd fc6a 	bl	801036c <st_dword>
					fs->wflag = 1;
 8012a98:	697b      	ldr	r3, [r7, #20]
 8012a9a:	2201      	movs	r2, #1
 8012a9c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012a9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d037      	beq.n	8012b14 <f_open+0x1d0>
						dw = fs->winsect;
 8012aa4:	697b      	ldr	r3, [r7, #20]
 8012aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012aa8:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8012aaa:	f107 0318 	add.w	r3, r7, #24
 8012aae:	2200      	movs	r2, #0
 8012ab0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	f7fe f95e 	bl	8010d74 <remove_chain>
 8012ab8:	4603      	mov	r3, r0
 8012aba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8012abe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d126      	bne.n	8012b14 <f_open+0x1d0>
							res = move_window(fs, dw);
 8012ac6:	697b      	ldr	r3, [r7, #20]
 8012ac8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8012aca:	4618      	mov	r0, r3
 8012acc:	f7fd fea8 	bl	8010820 <move_window>
 8012ad0:	4603      	mov	r3, r0
 8012ad2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012ad6:	697b      	ldr	r3, [r7, #20]
 8012ad8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012ada:	3a01      	subs	r2, #1
 8012adc:	615a      	str	r2, [r3, #20]
 8012ade:	e019      	b.n	8012b14 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012ae0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d115      	bne.n	8012b14 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012ae8:	7fbb      	ldrb	r3, [r7, #30]
 8012aea:	f003 0310 	and.w	r3, r3, #16
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d003      	beq.n	8012afa <f_open+0x1b6>
					res = FR_NO_FILE;
 8012af2:	2304      	movs	r3, #4
 8012af4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8012af8:	e00c      	b.n	8012b14 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012afa:	79fb      	ldrb	r3, [r7, #7]
 8012afc:	f003 0302 	and.w	r3, r3, #2
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d007      	beq.n	8012b14 <f_open+0x1d0>
 8012b04:	7fbb      	ldrb	r3, [r7, #30]
 8012b06:	f003 0301 	and.w	r3, r3, #1
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d002      	beq.n	8012b14 <f_open+0x1d0>
						res = FR_DENIED;
 8012b0e:	2307      	movs	r3, #7
 8012b10:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8012b14:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d126      	bne.n	8012b6a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012b1c:	79fb      	ldrb	r3, [r7, #7]
 8012b1e:	f003 0308 	and.w	r3, r3, #8
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d003      	beq.n	8012b2e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8012b26:	79fb      	ldrb	r3, [r7, #7]
 8012b28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012b2c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012b2e:	697b      	ldr	r3, [r7, #20]
 8012b30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8012b36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012b3c:	79fb      	ldrb	r3, [r7, #7]
 8012b3e:	2b01      	cmp	r3, #1
 8012b40:	bf8c      	ite	hi
 8012b42:	2301      	movhi	r3, #1
 8012b44:	2300      	movls	r3, #0
 8012b46:	b2db      	uxtb	r3, r3
 8012b48:	461a      	mov	r2, r3
 8012b4a:	f107 0318 	add.w	r3, r7, #24
 8012b4e:	4611      	mov	r1, r2
 8012b50:	4618      	mov	r0, r3
 8012b52:	f7fd fd33 	bl	80105bc <inc_lock>
 8012b56:	4602      	mov	r2, r0
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	691b      	ldr	r3, [r3, #16]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d102      	bne.n	8012b6a <f_open+0x226>
 8012b64:	2302      	movs	r3, #2
 8012b66:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012b6a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	f040 80a3 	bne.w	8012cba <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012b74:	697b      	ldr	r3, [r7, #20]
 8012b76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012b78:	4611      	mov	r1, r2
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	f7fe fbd5 	bl	801132a <ld_clust>
 8012b80:	4602      	mov	r2, r0
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b88:	331c      	adds	r3, #28
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	f7fd fbb0 	bl	80102f0 <ld_dword>
 8012b90:	4602      	mov	r2, r0
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	2200      	movs	r2, #0
 8012b9a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012b9c:	697a      	ldr	r2, [r7, #20]
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012ba2:	697b      	ldr	r3, [r7, #20]
 8012ba4:	88da      	ldrh	r2, [r3, #6]
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	79fa      	ldrb	r2, [r7, #7]
 8012bae:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	2200      	movs	r2, #0
 8012bb4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	2200      	movs	r2, #0
 8012bba:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	2200      	movs	r2, #0
 8012bc0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	3330      	adds	r3, #48	@ 0x30
 8012bc6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8012bca:	2100      	movs	r1, #0
 8012bcc:	4618      	mov	r0, r3
 8012bce:	f7fd fc1a 	bl	8010406 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012bd2:	79fb      	ldrb	r3, [r7, #7]
 8012bd4:	f003 0320 	and.w	r3, r3, #32
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d06e      	beq.n	8012cba <f_open+0x376>
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	68db      	ldr	r3, [r3, #12]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d06a      	beq.n	8012cba <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	68da      	ldr	r2, [r3, #12]
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012bec:	697b      	ldr	r3, [r7, #20]
 8012bee:	895b      	ldrh	r3, [r3, #10]
 8012bf0:	461a      	mov	r2, r3
 8012bf2:	697b      	ldr	r3, [r7, #20]
 8012bf4:	899b      	ldrh	r3, [r3, #12]
 8012bf6:	fb02 f303 	mul.w	r3, r2, r3
 8012bfa:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	689b      	ldr	r3, [r3, #8]
 8012c00:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	68db      	ldr	r3, [r3, #12]
 8012c06:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012c08:	e016      	b.n	8012c38 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8012c0e:	4618      	mov	r0, r3
 8012c10:	f7fd fec3 	bl	801099a <get_fat>
 8012c14:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8012c16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012c18:	2b01      	cmp	r3, #1
 8012c1a:	d802      	bhi.n	8012c22 <f_open+0x2de>
 8012c1c:	2302      	movs	r3, #2
 8012c1e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012c22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c28:	d102      	bne.n	8012c30 <f_open+0x2ec>
 8012c2a:	2301      	movs	r3, #1
 8012c2c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012c30:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012c32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c34:	1ad3      	subs	r3, r2, r3
 8012c36:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012c38:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d103      	bne.n	8012c48 <f_open+0x304>
 8012c40:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012c42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c44:	429a      	cmp	r2, r3
 8012c46:	d8e0      	bhi.n	8012c0a <f_open+0x2c6>
				}
				fp->clust = clst;
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8012c4c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012c4e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d131      	bne.n	8012cba <f_open+0x376>
 8012c56:	697b      	ldr	r3, [r7, #20]
 8012c58:	899b      	ldrh	r3, [r3, #12]
 8012c5a:	461a      	mov	r2, r3
 8012c5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012c5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8012c62:	fb01 f202 	mul.w	r2, r1, r2
 8012c66:	1a9b      	subs	r3, r3, r2
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d026      	beq.n	8012cba <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012c6c:	697b      	ldr	r3, [r7, #20]
 8012c6e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8012c70:	4618      	mov	r0, r3
 8012c72:	f7fd fe73 	bl	801095c <clust2sect>
 8012c76:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8012c78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d103      	bne.n	8012c86 <f_open+0x342>
						res = FR_INT_ERR;
 8012c7e:	2302      	movs	r3, #2
 8012c80:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8012c84:	e019      	b.n	8012cba <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012c86:	697b      	ldr	r3, [r7, #20]
 8012c88:	899b      	ldrh	r3, [r3, #12]
 8012c8a:	461a      	mov	r2, r3
 8012c8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012c8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8012c92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012c94:	441a      	add	r2, r3
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012c9a:	697b      	ldr	r3, [r7, #20]
 8012c9c:	7858      	ldrb	r0, [r3, #1]
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	6a1a      	ldr	r2, [r3, #32]
 8012ca8:	2301      	movs	r3, #1
 8012caa:	f7fd faab 	bl	8010204 <disk_read>
 8012cae:	4603      	mov	r3, r0
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d002      	beq.n	8012cba <f_open+0x376>
 8012cb4:	2301      	movs	r3, #1
 8012cb6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012cba:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d002      	beq.n	8012cc8 <f_open+0x384>
 8012cc2:	68fb      	ldr	r3, [r7, #12]
 8012cc4:	2200      	movs	r2, #0
 8012cc6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012cc8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8012ccc:	4618      	mov	r0, r3
 8012cce:	3768      	adds	r7, #104	@ 0x68
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	bd80      	pop	{r7, pc}

08012cd4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8012cd4:	b580      	push	{r7, lr}
 8012cd6:	b08e      	sub	sp, #56	@ 0x38
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	60f8      	str	r0, [r7, #12]
 8012cdc:	60b9      	str	r1, [r7, #8]
 8012cde:	607a      	str	r2, [r7, #4]
 8012ce0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8012ce2:	68bb      	ldr	r3, [r7, #8]
 8012ce4:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8012ce6:	683b      	ldr	r3, [r7, #0]
 8012ce8:	2200      	movs	r2, #0
 8012cea:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	f107 0214 	add.w	r2, r7, #20
 8012cf2:	4611      	mov	r1, r2
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	f7ff fda9 	bl	801284c <validate>
 8012cfa:	4603      	mov	r3, r0
 8012cfc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012d00:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d107      	bne.n	8012d18 <f_read+0x44>
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	7d5b      	ldrb	r3, [r3, #21]
 8012d0c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8012d10:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d002      	beq.n	8012d1e <f_read+0x4a>
 8012d18:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012d1c:	e135      	b.n	8012f8a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	7d1b      	ldrb	r3, [r3, #20]
 8012d22:	f003 0301 	and.w	r3, r3, #1
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d101      	bne.n	8012d2e <f_read+0x5a>
 8012d2a:	2307      	movs	r3, #7
 8012d2c:	e12d      	b.n	8012f8a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	68da      	ldr	r2, [r3, #12]
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	699b      	ldr	r3, [r3, #24]
 8012d36:	1ad3      	subs	r3, r2, r3
 8012d38:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8012d3a:	687a      	ldr	r2, [r7, #4]
 8012d3c:	6a3b      	ldr	r3, [r7, #32]
 8012d3e:	429a      	cmp	r2, r3
 8012d40:	f240 811e 	bls.w	8012f80 <f_read+0x2ac>
 8012d44:	6a3b      	ldr	r3, [r7, #32]
 8012d46:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8012d48:	e11a      	b.n	8012f80 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	699b      	ldr	r3, [r3, #24]
 8012d4e:	697a      	ldr	r2, [r7, #20]
 8012d50:	8992      	ldrh	r2, [r2, #12]
 8012d52:	fbb3 f1f2 	udiv	r1, r3, r2
 8012d56:	fb01 f202 	mul.w	r2, r1, r2
 8012d5a:	1a9b      	subs	r3, r3, r2
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	f040 80d5 	bne.w	8012f0c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	699b      	ldr	r3, [r3, #24]
 8012d66:	697a      	ldr	r2, [r7, #20]
 8012d68:	8992      	ldrh	r2, [r2, #12]
 8012d6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8012d6e:	697a      	ldr	r2, [r7, #20]
 8012d70:	8952      	ldrh	r2, [r2, #10]
 8012d72:	3a01      	subs	r2, #1
 8012d74:	4013      	ands	r3, r2
 8012d76:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8012d78:	69fb      	ldr	r3, [r7, #28]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d12f      	bne.n	8012dde <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	699b      	ldr	r3, [r3, #24]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d103      	bne.n	8012d8e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	689b      	ldr	r3, [r3, #8]
 8012d8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8012d8c:	e013      	b.n	8012db6 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d007      	beq.n	8012da6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	699b      	ldr	r3, [r3, #24]
 8012d9a:	4619      	mov	r1, r3
 8012d9c:	68f8      	ldr	r0, [r7, #12]
 8012d9e:	f7fe f8e6 	bl	8010f6e <clmt_clust>
 8012da2:	6338      	str	r0, [r7, #48]	@ 0x30
 8012da4:	e007      	b.n	8012db6 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8012da6:	68fa      	ldr	r2, [r7, #12]
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	69db      	ldr	r3, [r3, #28]
 8012dac:	4619      	mov	r1, r3
 8012dae:	4610      	mov	r0, r2
 8012db0:	f7fd fdf3 	bl	801099a <get_fat>
 8012db4:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8012db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012db8:	2b01      	cmp	r3, #1
 8012dba:	d804      	bhi.n	8012dc6 <f_read+0xf2>
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	2202      	movs	r2, #2
 8012dc0:	755a      	strb	r2, [r3, #21]
 8012dc2:	2302      	movs	r3, #2
 8012dc4:	e0e1      	b.n	8012f8a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dcc:	d104      	bne.n	8012dd8 <f_read+0x104>
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	2201      	movs	r2, #1
 8012dd2:	755a      	strb	r2, [r3, #21]
 8012dd4:	2301      	movs	r3, #1
 8012dd6:	e0d8      	b.n	8012f8a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012ddc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012dde:	697a      	ldr	r2, [r7, #20]
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	69db      	ldr	r3, [r3, #28]
 8012de4:	4619      	mov	r1, r3
 8012de6:	4610      	mov	r0, r2
 8012de8:	f7fd fdb8 	bl	801095c <clust2sect>
 8012dec:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012dee:	69bb      	ldr	r3, [r7, #24]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d104      	bne.n	8012dfe <f_read+0x12a>
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	2202      	movs	r2, #2
 8012df8:	755a      	strb	r2, [r3, #21]
 8012dfa:	2302      	movs	r3, #2
 8012dfc:	e0c5      	b.n	8012f8a <f_read+0x2b6>
			sect += csect;
 8012dfe:	69ba      	ldr	r2, [r7, #24]
 8012e00:	69fb      	ldr	r3, [r7, #28]
 8012e02:	4413      	add	r3, r2
 8012e04:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8012e06:	697b      	ldr	r3, [r7, #20]
 8012e08:	899b      	ldrh	r3, [r3, #12]
 8012e0a:	461a      	mov	r2, r3
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012e12:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8012e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d041      	beq.n	8012e9e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012e1a:	69fa      	ldr	r2, [r7, #28]
 8012e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e1e:	4413      	add	r3, r2
 8012e20:	697a      	ldr	r2, [r7, #20]
 8012e22:	8952      	ldrh	r2, [r2, #10]
 8012e24:	4293      	cmp	r3, r2
 8012e26:	d905      	bls.n	8012e34 <f_read+0x160>
					cc = fs->csize - csect;
 8012e28:	697b      	ldr	r3, [r7, #20]
 8012e2a:	895b      	ldrh	r3, [r3, #10]
 8012e2c:	461a      	mov	r2, r3
 8012e2e:	69fb      	ldr	r3, [r7, #28]
 8012e30:	1ad3      	subs	r3, r2, r3
 8012e32:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012e34:	697b      	ldr	r3, [r7, #20]
 8012e36:	7858      	ldrb	r0, [r3, #1]
 8012e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e3a:	69ba      	ldr	r2, [r7, #24]
 8012e3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012e3e:	f7fd f9e1 	bl	8010204 <disk_read>
 8012e42:	4603      	mov	r3, r0
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d004      	beq.n	8012e52 <f_read+0x17e>
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	2201      	movs	r2, #1
 8012e4c:	755a      	strb	r2, [r3, #21]
 8012e4e:	2301      	movs	r3, #1
 8012e50:	e09b      	b.n	8012f8a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	7d1b      	ldrb	r3, [r3, #20]
 8012e56:	b25b      	sxtb	r3, r3
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	da18      	bge.n	8012e8e <f_read+0x1ba>
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	6a1a      	ldr	r2, [r3, #32]
 8012e60:	69bb      	ldr	r3, [r7, #24]
 8012e62:	1ad3      	subs	r3, r2, r3
 8012e64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012e66:	429a      	cmp	r2, r3
 8012e68:	d911      	bls.n	8012e8e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	6a1a      	ldr	r2, [r3, #32]
 8012e6e:	69bb      	ldr	r3, [r7, #24]
 8012e70:	1ad3      	subs	r3, r2, r3
 8012e72:	697a      	ldr	r2, [r7, #20]
 8012e74:	8992      	ldrh	r2, [r2, #12]
 8012e76:	fb02 f303 	mul.w	r3, r2, r3
 8012e7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012e7c:	18d0      	adds	r0, r2, r3
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012e84:	697b      	ldr	r3, [r7, #20]
 8012e86:	899b      	ldrh	r3, [r3, #12]
 8012e88:	461a      	mov	r2, r3
 8012e8a:	f7fd fa9b 	bl	80103c4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8012e8e:	697b      	ldr	r3, [r7, #20]
 8012e90:	899b      	ldrh	r3, [r3, #12]
 8012e92:	461a      	mov	r2, r3
 8012e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e96:	fb02 f303 	mul.w	r3, r2, r3
 8012e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8012e9c:	e05c      	b.n	8012f58 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	6a1b      	ldr	r3, [r3, #32]
 8012ea2:	69ba      	ldr	r2, [r7, #24]
 8012ea4:	429a      	cmp	r2, r3
 8012ea6:	d02e      	beq.n	8012f06 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	7d1b      	ldrb	r3, [r3, #20]
 8012eac:	b25b      	sxtb	r3, r3
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	da18      	bge.n	8012ee4 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012eb2:	697b      	ldr	r3, [r7, #20]
 8012eb4:	7858      	ldrb	r0, [r3, #1]
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	6a1a      	ldr	r2, [r3, #32]
 8012ec0:	2301      	movs	r3, #1
 8012ec2:	f7fd f9bf 	bl	8010244 <disk_write>
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d004      	beq.n	8012ed6 <f_read+0x202>
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	2201      	movs	r2, #1
 8012ed0:	755a      	strb	r2, [r3, #21]
 8012ed2:	2301      	movs	r3, #1
 8012ed4:	e059      	b.n	8012f8a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	7d1b      	ldrb	r3, [r3, #20]
 8012eda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012ede:	b2da      	uxtb	r2, r3
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012ee4:	697b      	ldr	r3, [r7, #20]
 8012ee6:	7858      	ldrb	r0, [r3, #1]
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012eee:	2301      	movs	r3, #1
 8012ef0:	69ba      	ldr	r2, [r7, #24]
 8012ef2:	f7fd f987 	bl	8010204 <disk_read>
 8012ef6:	4603      	mov	r3, r0
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d004      	beq.n	8012f06 <f_read+0x232>
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	2201      	movs	r2, #1
 8012f00:	755a      	strb	r2, [r3, #21]
 8012f02:	2301      	movs	r3, #1
 8012f04:	e041      	b.n	8012f8a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	69ba      	ldr	r2, [r7, #24]
 8012f0a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012f0c:	697b      	ldr	r3, [r7, #20]
 8012f0e:	899b      	ldrh	r3, [r3, #12]
 8012f10:	4618      	mov	r0, r3
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	699b      	ldr	r3, [r3, #24]
 8012f16:	697a      	ldr	r2, [r7, #20]
 8012f18:	8992      	ldrh	r2, [r2, #12]
 8012f1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8012f1e:	fb01 f202 	mul.w	r2, r1, r2
 8012f22:	1a9b      	subs	r3, r3, r2
 8012f24:	1ac3      	subs	r3, r0, r3
 8012f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8012f28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	429a      	cmp	r2, r3
 8012f2e:	d901      	bls.n	8012f34 <f_read+0x260>
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	699b      	ldr	r3, [r3, #24]
 8012f3e:	697a      	ldr	r2, [r7, #20]
 8012f40:	8992      	ldrh	r2, [r2, #12]
 8012f42:	fbb3 f0f2 	udiv	r0, r3, r2
 8012f46:	fb00 f202 	mul.w	r2, r0, r2
 8012f4a:	1a9b      	subs	r3, r3, r2
 8012f4c:	440b      	add	r3, r1
 8012f4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012f50:	4619      	mov	r1, r3
 8012f52:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012f54:	f7fd fa36 	bl	80103c4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8012f58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f5c:	4413      	add	r3, r2
 8012f5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	699a      	ldr	r2, [r3, #24]
 8012f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f66:	441a      	add	r2, r3
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	619a      	str	r2, [r3, #24]
 8012f6c:	683b      	ldr	r3, [r7, #0]
 8012f6e:	681a      	ldr	r2, [r3, #0]
 8012f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f72:	441a      	add	r2, r3
 8012f74:	683b      	ldr	r3, [r7, #0]
 8012f76:	601a      	str	r2, [r3, #0]
 8012f78:	687a      	ldr	r2, [r7, #4]
 8012f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f7c:	1ad3      	subs	r3, r2, r3
 8012f7e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	f47f aee1 	bne.w	8012d4a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8012f88:	2300      	movs	r3, #0
}
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	3738      	adds	r7, #56	@ 0x38
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	bd80      	pop	{r7, pc}

08012f92 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8012f92:	b580      	push	{r7, lr}
 8012f94:	b08c      	sub	sp, #48	@ 0x30
 8012f96:	af00      	add	r7, sp, #0
 8012f98:	60f8      	str	r0, [r7, #12]
 8012f9a:	60b9      	str	r1, [r7, #8]
 8012f9c:	607a      	str	r2, [r7, #4]
 8012f9e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8012fa0:	68bb      	ldr	r3, [r7, #8]
 8012fa2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8012fa4:	683b      	ldr	r3, [r7, #0]
 8012fa6:	2200      	movs	r2, #0
 8012fa8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	f107 0210 	add.w	r2, r7, #16
 8012fb0:	4611      	mov	r1, r2
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	f7ff fc4a 	bl	801284c <validate>
 8012fb8:	4603      	mov	r3, r0
 8012fba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012fbe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d107      	bne.n	8012fd6 <f_write+0x44>
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	7d5b      	ldrb	r3, [r3, #21]
 8012fca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8012fce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d002      	beq.n	8012fdc <f_write+0x4a>
 8012fd6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012fda:	e16a      	b.n	80132b2 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	7d1b      	ldrb	r3, [r3, #20]
 8012fe0:	f003 0302 	and.w	r3, r3, #2
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d101      	bne.n	8012fec <f_write+0x5a>
 8012fe8:	2307      	movs	r3, #7
 8012fea:	e162      	b.n	80132b2 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	699a      	ldr	r2, [r3, #24]
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	441a      	add	r2, r3
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	699b      	ldr	r3, [r3, #24]
 8012ff8:	429a      	cmp	r2, r3
 8012ffa:	f080 814c 	bcs.w	8013296 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	699b      	ldr	r3, [r3, #24]
 8013002:	43db      	mvns	r3, r3
 8013004:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013006:	e146      	b.n	8013296 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	699b      	ldr	r3, [r3, #24]
 801300c:	693a      	ldr	r2, [r7, #16]
 801300e:	8992      	ldrh	r2, [r2, #12]
 8013010:	fbb3 f1f2 	udiv	r1, r3, r2
 8013014:	fb01 f202 	mul.w	r2, r1, r2
 8013018:	1a9b      	subs	r3, r3, r2
 801301a:	2b00      	cmp	r3, #0
 801301c:	f040 80f1 	bne.w	8013202 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	699b      	ldr	r3, [r3, #24]
 8013024:	693a      	ldr	r2, [r7, #16]
 8013026:	8992      	ldrh	r2, [r2, #12]
 8013028:	fbb3 f3f2 	udiv	r3, r3, r2
 801302c:	693a      	ldr	r2, [r7, #16]
 801302e:	8952      	ldrh	r2, [r2, #10]
 8013030:	3a01      	subs	r2, #1
 8013032:	4013      	ands	r3, r2
 8013034:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013036:	69bb      	ldr	r3, [r7, #24]
 8013038:	2b00      	cmp	r3, #0
 801303a:	d143      	bne.n	80130c4 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	699b      	ldr	r3, [r3, #24]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d10c      	bne.n	801305e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	689b      	ldr	r3, [r3, #8]
 8013048:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801304a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801304c:	2b00      	cmp	r3, #0
 801304e:	d11a      	bne.n	8013086 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	2100      	movs	r1, #0
 8013054:	4618      	mov	r0, r3
 8013056:	f7fd fef2 	bl	8010e3e <create_chain>
 801305a:	62b8      	str	r0, [r7, #40]	@ 0x28
 801305c:	e013      	b.n	8013086 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013062:	2b00      	cmp	r3, #0
 8013064:	d007      	beq.n	8013076 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	699b      	ldr	r3, [r3, #24]
 801306a:	4619      	mov	r1, r3
 801306c:	68f8      	ldr	r0, [r7, #12]
 801306e:	f7fd ff7e 	bl	8010f6e <clmt_clust>
 8013072:	62b8      	str	r0, [r7, #40]	@ 0x28
 8013074:	e007      	b.n	8013086 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013076:	68fa      	ldr	r2, [r7, #12]
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	69db      	ldr	r3, [r3, #28]
 801307c:	4619      	mov	r1, r3
 801307e:	4610      	mov	r0, r2
 8013080:	f7fd fedd 	bl	8010e3e <create_chain>
 8013084:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013088:	2b00      	cmp	r3, #0
 801308a:	f000 8109 	beq.w	80132a0 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801308e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013090:	2b01      	cmp	r3, #1
 8013092:	d104      	bne.n	801309e <f_write+0x10c>
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	2202      	movs	r2, #2
 8013098:	755a      	strb	r2, [r3, #21]
 801309a:	2302      	movs	r3, #2
 801309c:	e109      	b.n	80132b2 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801309e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130a4:	d104      	bne.n	80130b0 <f_write+0x11e>
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	2201      	movs	r2, #1
 80130aa:	755a      	strb	r2, [r3, #21]
 80130ac:	2301      	movs	r3, #1
 80130ae:	e100      	b.n	80132b2 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80130b4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	689b      	ldr	r3, [r3, #8]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d102      	bne.n	80130c4 <f_write+0x132>
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80130c2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	7d1b      	ldrb	r3, [r3, #20]
 80130c8:	b25b      	sxtb	r3, r3
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	da18      	bge.n	8013100 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80130ce:	693b      	ldr	r3, [r7, #16]
 80130d0:	7858      	ldrb	r0, [r3, #1]
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	6a1a      	ldr	r2, [r3, #32]
 80130dc:	2301      	movs	r3, #1
 80130de:	f7fd f8b1 	bl	8010244 <disk_write>
 80130e2:	4603      	mov	r3, r0
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d004      	beq.n	80130f2 <f_write+0x160>
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	2201      	movs	r2, #1
 80130ec:	755a      	strb	r2, [r3, #21]
 80130ee:	2301      	movs	r3, #1
 80130f0:	e0df      	b.n	80132b2 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	7d1b      	ldrb	r3, [r3, #20]
 80130f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80130fa:	b2da      	uxtb	r2, r3
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013100:	693a      	ldr	r2, [r7, #16]
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	69db      	ldr	r3, [r3, #28]
 8013106:	4619      	mov	r1, r3
 8013108:	4610      	mov	r0, r2
 801310a:	f7fd fc27 	bl	801095c <clust2sect>
 801310e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013110:	697b      	ldr	r3, [r7, #20]
 8013112:	2b00      	cmp	r3, #0
 8013114:	d104      	bne.n	8013120 <f_write+0x18e>
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	2202      	movs	r2, #2
 801311a:	755a      	strb	r2, [r3, #21]
 801311c:	2302      	movs	r3, #2
 801311e:	e0c8      	b.n	80132b2 <f_write+0x320>
			sect += csect;
 8013120:	697a      	ldr	r2, [r7, #20]
 8013122:	69bb      	ldr	r3, [r7, #24]
 8013124:	4413      	add	r3, r2
 8013126:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013128:	693b      	ldr	r3, [r7, #16]
 801312a:	899b      	ldrh	r3, [r3, #12]
 801312c:	461a      	mov	r2, r3
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	fbb3 f3f2 	udiv	r3, r3, r2
 8013134:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013136:	6a3b      	ldr	r3, [r7, #32]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d043      	beq.n	80131c4 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801313c:	69ba      	ldr	r2, [r7, #24]
 801313e:	6a3b      	ldr	r3, [r7, #32]
 8013140:	4413      	add	r3, r2
 8013142:	693a      	ldr	r2, [r7, #16]
 8013144:	8952      	ldrh	r2, [r2, #10]
 8013146:	4293      	cmp	r3, r2
 8013148:	d905      	bls.n	8013156 <f_write+0x1c4>
					cc = fs->csize - csect;
 801314a:	693b      	ldr	r3, [r7, #16]
 801314c:	895b      	ldrh	r3, [r3, #10]
 801314e:	461a      	mov	r2, r3
 8013150:	69bb      	ldr	r3, [r7, #24]
 8013152:	1ad3      	subs	r3, r2, r3
 8013154:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013156:	693b      	ldr	r3, [r7, #16]
 8013158:	7858      	ldrb	r0, [r3, #1]
 801315a:	6a3b      	ldr	r3, [r7, #32]
 801315c:	697a      	ldr	r2, [r7, #20]
 801315e:	69f9      	ldr	r1, [r7, #28]
 8013160:	f7fd f870 	bl	8010244 <disk_write>
 8013164:	4603      	mov	r3, r0
 8013166:	2b00      	cmp	r3, #0
 8013168:	d004      	beq.n	8013174 <f_write+0x1e2>
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	2201      	movs	r2, #1
 801316e:	755a      	strb	r2, [r3, #21]
 8013170:	2301      	movs	r3, #1
 8013172:	e09e      	b.n	80132b2 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	6a1a      	ldr	r2, [r3, #32]
 8013178:	697b      	ldr	r3, [r7, #20]
 801317a:	1ad3      	subs	r3, r2, r3
 801317c:	6a3a      	ldr	r2, [r7, #32]
 801317e:	429a      	cmp	r2, r3
 8013180:	d918      	bls.n	80131b4 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	6a1a      	ldr	r2, [r3, #32]
 801318c:	697b      	ldr	r3, [r7, #20]
 801318e:	1ad3      	subs	r3, r2, r3
 8013190:	693a      	ldr	r2, [r7, #16]
 8013192:	8992      	ldrh	r2, [r2, #12]
 8013194:	fb02 f303 	mul.w	r3, r2, r3
 8013198:	69fa      	ldr	r2, [r7, #28]
 801319a:	18d1      	adds	r1, r2, r3
 801319c:	693b      	ldr	r3, [r7, #16]
 801319e:	899b      	ldrh	r3, [r3, #12]
 80131a0:	461a      	mov	r2, r3
 80131a2:	f7fd f90f 	bl	80103c4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	7d1b      	ldrb	r3, [r3, #20]
 80131aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80131ae:	b2da      	uxtb	r2, r3
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80131b4:	693b      	ldr	r3, [r7, #16]
 80131b6:	899b      	ldrh	r3, [r3, #12]
 80131b8:	461a      	mov	r2, r3
 80131ba:	6a3b      	ldr	r3, [r7, #32]
 80131bc:	fb02 f303 	mul.w	r3, r2, r3
 80131c0:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80131c2:	e04b      	b.n	801325c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	6a1b      	ldr	r3, [r3, #32]
 80131c8:	697a      	ldr	r2, [r7, #20]
 80131ca:	429a      	cmp	r2, r3
 80131cc:	d016      	beq.n	80131fc <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	699a      	ldr	r2, [r3, #24]
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80131d6:	429a      	cmp	r2, r3
 80131d8:	d210      	bcs.n	80131fc <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80131da:	693b      	ldr	r3, [r7, #16]
 80131dc:	7858      	ldrb	r0, [r3, #1]
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80131e4:	2301      	movs	r3, #1
 80131e6:	697a      	ldr	r2, [r7, #20]
 80131e8:	f7fd f80c 	bl	8010204 <disk_read>
 80131ec:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d004      	beq.n	80131fc <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	2201      	movs	r2, #1
 80131f6:	755a      	strb	r2, [r3, #21]
 80131f8:	2301      	movs	r3, #1
 80131fa:	e05a      	b.n	80132b2 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	697a      	ldr	r2, [r7, #20]
 8013200:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013202:	693b      	ldr	r3, [r7, #16]
 8013204:	899b      	ldrh	r3, [r3, #12]
 8013206:	4618      	mov	r0, r3
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	699b      	ldr	r3, [r3, #24]
 801320c:	693a      	ldr	r2, [r7, #16]
 801320e:	8992      	ldrh	r2, [r2, #12]
 8013210:	fbb3 f1f2 	udiv	r1, r3, r2
 8013214:	fb01 f202 	mul.w	r2, r1, r2
 8013218:	1a9b      	subs	r3, r3, r2
 801321a:	1ac3      	subs	r3, r0, r3
 801321c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801321e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	429a      	cmp	r2, r3
 8013224:	d901      	bls.n	801322a <f_write+0x298>
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	699b      	ldr	r3, [r3, #24]
 8013234:	693a      	ldr	r2, [r7, #16]
 8013236:	8992      	ldrh	r2, [r2, #12]
 8013238:	fbb3 f0f2 	udiv	r0, r3, r2
 801323c:	fb00 f202 	mul.w	r2, r0, r2
 8013240:	1a9b      	subs	r3, r3, r2
 8013242:	440b      	add	r3, r1
 8013244:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013246:	69f9      	ldr	r1, [r7, #28]
 8013248:	4618      	mov	r0, r3
 801324a:	f7fd f8bb 	bl	80103c4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	7d1b      	ldrb	r3, [r3, #20]
 8013252:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013256:	b2da      	uxtb	r2, r3
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801325c:	69fa      	ldr	r2, [r7, #28]
 801325e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013260:	4413      	add	r3, r2
 8013262:	61fb      	str	r3, [r7, #28]
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	699a      	ldr	r2, [r3, #24]
 8013268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801326a:	441a      	add	r2, r3
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	619a      	str	r2, [r3, #24]
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	68da      	ldr	r2, [r3, #12]
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	699b      	ldr	r3, [r3, #24]
 8013278:	429a      	cmp	r2, r3
 801327a:	bf38      	it	cc
 801327c:	461a      	movcc	r2, r3
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	60da      	str	r2, [r3, #12]
 8013282:	683b      	ldr	r3, [r7, #0]
 8013284:	681a      	ldr	r2, [r3, #0]
 8013286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013288:	441a      	add	r2, r3
 801328a:	683b      	ldr	r3, [r7, #0]
 801328c:	601a      	str	r2, [r3, #0]
 801328e:	687a      	ldr	r2, [r7, #4]
 8013290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013292:	1ad3      	subs	r3, r2, r3
 8013294:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	2b00      	cmp	r3, #0
 801329a:	f47f aeb5 	bne.w	8013008 <f_write+0x76>
 801329e:	e000      	b.n	80132a2 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80132a0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	7d1b      	ldrb	r3, [r3, #20]
 80132a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80132aa:	b2da      	uxtb	r2, r3
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80132b0:	2300      	movs	r3, #0
}
 80132b2:	4618      	mov	r0, r3
 80132b4:	3730      	adds	r7, #48	@ 0x30
 80132b6:	46bd      	mov	sp, r7
 80132b8:	bd80      	pop	{r7, pc}

080132ba <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80132ba:	b580      	push	{r7, lr}
 80132bc:	b086      	sub	sp, #24
 80132be:	af00      	add	r7, sp, #0
 80132c0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	f107 0208 	add.w	r2, r7, #8
 80132c8:	4611      	mov	r1, r2
 80132ca:	4618      	mov	r0, r3
 80132cc:	f7ff fabe 	bl	801284c <validate>
 80132d0:	4603      	mov	r3, r0
 80132d2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80132d4:	7dfb      	ldrb	r3, [r7, #23]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d168      	bne.n	80133ac <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	7d1b      	ldrb	r3, [r3, #20]
 80132de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d062      	beq.n	80133ac <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	7d1b      	ldrb	r3, [r3, #20]
 80132ea:	b25b      	sxtb	r3, r3
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	da15      	bge.n	801331c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80132f0:	68bb      	ldr	r3, [r7, #8]
 80132f2:	7858      	ldrb	r0, [r3, #1]
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	6a1a      	ldr	r2, [r3, #32]
 80132fe:	2301      	movs	r3, #1
 8013300:	f7fc ffa0 	bl	8010244 <disk_write>
 8013304:	4603      	mov	r3, r0
 8013306:	2b00      	cmp	r3, #0
 8013308:	d001      	beq.n	801330e <f_sync+0x54>
 801330a:	2301      	movs	r3, #1
 801330c:	e04f      	b.n	80133ae <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	7d1b      	ldrb	r3, [r3, #20]
 8013312:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013316:	b2da      	uxtb	r2, r3
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801331c:	f7fc fa0e 	bl	800f73c <get_fattime>
 8013320:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013322:	68ba      	ldr	r2, [r7, #8]
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013328:	4619      	mov	r1, r3
 801332a:	4610      	mov	r0, r2
 801332c:	f7fd fa78 	bl	8010820 <move_window>
 8013330:	4603      	mov	r3, r0
 8013332:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013334:	7dfb      	ldrb	r3, [r7, #23]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d138      	bne.n	80133ac <f_sync+0xf2>
					dir = fp->dir_ptr;
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801333e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	330b      	adds	r3, #11
 8013344:	781a      	ldrb	r2, [r3, #0]
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	330b      	adds	r3, #11
 801334a:	f042 0220 	orr.w	r2, r2, #32
 801334e:	b2d2      	uxtb	r2, r2
 8013350:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	6818      	ldr	r0, [r3, #0]
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	689b      	ldr	r3, [r3, #8]
 801335a:	461a      	mov	r2, r3
 801335c:	68f9      	ldr	r1, [r7, #12]
 801335e:	f7fe f803 	bl	8011368 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	f103 021c 	add.w	r2, r3, #28
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	68db      	ldr	r3, [r3, #12]
 801336c:	4619      	mov	r1, r3
 801336e:	4610      	mov	r0, r2
 8013370:	f7fc fffc 	bl	801036c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	3316      	adds	r3, #22
 8013378:	6939      	ldr	r1, [r7, #16]
 801337a:	4618      	mov	r0, r3
 801337c:	f7fc fff6 	bl	801036c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	3312      	adds	r3, #18
 8013384:	2100      	movs	r1, #0
 8013386:	4618      	mov	r0, r3
 8013388:	f7fc ffd5 	bl	8010336 <st_word>
					fs->wflag = 1;
 801338c:	68bb      	ldr	r3, [r7, #8]
 801338e:	2201      	movs	r2, #1
 8013390:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013392:	68bb      	ldr	r3, [r7, #8]
 8013394:	4618      	mov	r0, r3
 8013396:	f7fd fa71 	bl	801087c <sync_fs>
 801339a:	4603      	mov	r3, r0
 801339c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	7d1b      	ldrb	r3, [r3, #20]
 80133a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80133a6:	b2da      	uxtb	r2, r3
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80133ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80133ae:	4618      	mov	r0, r3
 80133b0:	3718      	adds	r7, #24
 80133b2:	46bd      	mov	sp, r7
 80133b4:	bd80      	pop	{r7, pc}

080133b6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80133b6:	b580      	push	{r7, lr}
 80133b8:	b084      	sub	sp, #16
 80133ba:	af00      	add	r7, sp, #0
 80133bc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80133be:	6878      	ldr	r0, [r7, #4]
 80133c0:	f7ff ff7b 	bl	80132ba <f_sync>
 80133c4:	4603      	mov	r3, r0
 80133c6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80133c8:	7bfb      	ldrb	r3, [r7, #15]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d118      	bne.n	8013400 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	f107 0208 	add.w	r2, r7, #8
 80133d4:	4611      	mov	r1, r2
 80133d6:	4618      	mov	r0, r3
 80133d8:	f7ff fa38 	bl	801284c <validate>
 80133dc:	4603      	mov	r3, r0
 80133de:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80133e0:	7bfb      	ldrb	r3, [r7, #15]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d10c      	bne.n	8013400 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	691b      	ldr	r3, [r3, #16]
 80133ea:	4618      	mov	r0, r3
 80133ec:	f7fd f974 	bl	80106d8 <dec_lock>
 80133f0:	4603      	mov	r3, r0
 80133f2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80133f4:	7bfb      	ldrb	r3, [r7, #15]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d102      	bne.n	8013400 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	2200      	movs	r2, #0
 80133fe:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013400:	7bfb      	ldrb	r3, [r7, #15]
}
 8013402:	4618      	mov	r0, r3
 8013404:	3710      	adds	r7, #16
 8013406:	46bd      	mov	sp, r7
 8013408:	bd80      	pop	{r7, pc}

0801340a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 801340a:	b580      	push	{r7, lr}
 801340c:	b090      	sub	sp, #64	@ 0x40
 801340e:	af00      	add	r7, sp, #0
 8013410:	6078      	str	r0, [r7, #4]
 8013412:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	f107 0208 	add.w	r2, r7, #8
 801341a:	4611      	mov	r1, r2
 801341c:	4618      	mov	r0, r3
 801341e:	f7ff fa15 	bl	801284c <validate>
 8013422:	4603      	mov	r3, r0
 8013424:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013428:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801342c:	2b00      	cmp	r3, #0
 801342e:	d103      	bne.n	8013438 <f_lseek+0x2e>
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	7d5b      	ldrb	r3, [r3, #21]
 8013434:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013438:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801343c:	2b00      	cmp	r3, #0
 801343e:	d002      	beq.n	8013446 <f_lseek+0x3c>
 8013440:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8013444:	e201      	b.n	801384a <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801344a:	2b00      	cmp	r3, #0
 801344c:	f000 80d9 	beq.w	8013602 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8013450:	683b      	ldr	r3, [r7, #0]
 8013452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013456:	d15a      	bne.n	801350e <f_lseek+0x104>
			tbl = fp->cltbl;
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801345c:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801345e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013460:	1d1a      	adds	r2, r3, #4
 8013462:	627a      	str	r2, [r7, #36]	@ 0x24
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	617b      	str	r3, [r7, #20]
 8013468:	2302      	movs	r3, #2
 801346a:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	689b      	ldr	r3, [r3, #8]
 8013470:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8013472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013474:	2b00      	cmp	r3, #0
 8013476:	d03a      	beq.n	80134ee <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8013478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801347a:	613b      	str	r3, [r7, #16]
 801347c:	2300      	movs	r3, #0
 801347e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013482:	3302      	adds	r3, #2
 8013484:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8013486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013488:	60fb      	str	r3, [r7, #12]
 801348a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801348c:	3301      	adds	r3, #1
 801348e:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013494:	4618      	mov	r0, r3
 8013496:	f7fd fa80 	bl	801099a <get_fat>
 801349a:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801349c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801349e:	2b01      	cmp	r3, #1
 80134a0:	d804      	bhi.n	80134ac <f_lseek+0xa2>
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	2202      	movs	r2, #2
 80134a6:	755a      	strb	r2, [r3, #21]
 80134a8:	2302      	movs	r3, #2
 80134aa:	e1ce      	b.n	801384a <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80134ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134b2:	d104      	bne.n	80134be <f_lseek+0xb4>
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	2201      	movs	r2, #1
 80134b8:	755a      	strb	r2, [r3, #21]
 80134ba:	2301      	movs	r3, #1
 80134bc:	e1c5      	b.n	801384a <f_lseek+0x440>
					} while (cl == pcl + 1);
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	3301      	adds	r3, #1
 80134c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80134c4:	429a      	cmp	r2, r3
 80134c6:	d0de      	beq.n	8013486 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80134c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80134ca:	697b      	ldr	r3, [r7, #20]
 80134cc:	429a      	cmp	r2, r3
 80134ce:	d809      	bhi.n	80134e4 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80134d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134d2:	1d1a      	adds	r2, r3, #4
 80134d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80134d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80134d8:	601a      	str	r2, [r3, #0]
 80134da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134dc:	1d1a      	adds	r2, r3, #4
 80134de:	627a      	str	r2, [r7, #36]	@ 0x24
 80134e0:	693a      	ldr	r2, [r7, #16]
 80134e2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80134e4:	68bb      	ldr	r3, [r7, #8]
 80134e6:	6a1b      	ldr	r3, [r3, #32]
 80134e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80134ea:	429a      	cmp	r2, r3
 80134ec:	d3c4      	bcc.n	8013478 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80134f4:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80134f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80134f8:	697b      	ldr	r3, [r7, #20]
 80134fa:	429a      	cmp	r2, r3
 80134fc:	d803      	bhi.n	8013506 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80134fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013500:	2200      	movs	r2, #0
 8013502:	601a      	str	r2, [r3, #0]
 8013504:	e19f      	b.n	8013846 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8013506:	2311      	movs	r3, #17
 8013508:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801350c:	e19b      	b.n	8013846 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	68db      	ldr	r3, [r3, #12]
 8013512:	683a      	ldr	r2, [r7, #0]
 8013514:	429a      	cmp	r2, r3
 8013516:	d902      	bls.n	801351e <f_lseek+0x114>
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	68db      	ldr	r3, [r3, #12]
 801351c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	683a      	ldr	r2, [r7, #0]
 8013522:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8013524:	683b      	ldr	r3, [r7, #0]
 8013526:	2b00      	cmp	r3, #0
 8013528:	f000 818d 	beq.w	8013846 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 801352c:	683b      	ldr	r3, [r7, #0]
 801352e:	3b01      	subs	r3, #1
 8013530:	4619      	mov	r1, r3
 8013532:	6878      	ldr	r0, [r7, #4]
 8013534:	f7fd fd1b 	bl	8010f6e <clmt_clust>
 8013538:	4602      	mov	r2, r0
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 801353e:	68ba      	ldr	r2, [r7, #8]
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	69db      	ldr	r3, [r3, #28]
 8013544:	4619      	mov	r1, r3
 8013546:	4610      	mov	r0, r2
 8013548:	f7fd fa08 	bl	801095c <clust2sect>
 801354c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801354e:	69bb      	ldr	r3, [r7, #24]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d104      	bne.n	801355e <f_lseek+0x154>
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	2202      	movs	r2, #2
 8013558:	755a      	strb	r2, [r3, #21]
 801355a:	2302      	movs	r3, #2
 801355c:	e175      	b.n	801384a <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801355e:	683b      	ldr	r3, [r7, #0]
 8013560:	3b01      	subs	r3, #1
 8013562:	68ba      	ldr	r2, [r7, #8]
 8013564:	8992      	ldrh	r2, [r2, #12]
 8013566:	fbb3 f3f2 	udiv	r3, r3, r2
 801356a:	68ba      	ldr	r2, [r7, #8]
 801356c:	8952      	ldrh	r2, [r2, #10]
 801356e:	3a01      	subs	r2, #1
 8013570:	4013      	ands	r3, r2
 8013572:	69ba      	ldr	r2, [r7, #24]
 8013574:	4413      	add	r3, r2
 8013576:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	699b      	ldr	r3, [r3, #24]
 801357c:	68ba      	ldr	r2, [r7, #8]
 801357e:	8992      	ldrh	r2, [r2, #12]
 8013580:	fbb3 f1f2 	udiv	r1, r3, r2
 8013584:	fb01 f202 	mul.w	r2, r1, r2
 8013588:	1a9b      	subs	r3, r3, r2
 801358a:	2b00      	cmp	r3, #0
 801358c:	f000 815b 	beq.w	8013846 <f_lseek+0x43c>
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	6a1b      	ldr	r3, [r3, #32]
 8013594:	69ba      	ldr	r2, [r7, #24]
 8013596:	429a      	cmp	r2, r3
 8013598:	f000 8155 	beq.w	8013846 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	7d1b      	ldrb	r3, [r3, #20]
 80135a0:	b25b      	sxtb	r3, r3
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	da18      	bge.n	80135d8 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80135a6:	68bb      	ldr	r3, [r7, #8]
 80135a8:	7858      	ldrb	r0, [r3, #1]
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	6a1a      	ldr	r2, [r3, #32]
 80135b4:	2301      	movs	r3, #1
 80135b6:	f7fc fe45 	bl	8010244 <disk_write>
 80135ba:	4603      	mov	r3, r0
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d004      	beq.n	80135ca <f_lseek+0x1c0>
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	2201      	movs	r2, #1
 80135c4:	755a      	strb	r2, [r3, #21]
 80135c6:	2301      	movs	r3, #1
 80135c8:	e13f      	b.n	801384a <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	7d1b      	ldrb	r3, [r3, #20]
 80135ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80135d2:	b2da      	uxtb	r2, r3
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80135d8:	68bb      	ldr	r3, [r7, #8]
 80135da:	7858      	ldrb	r0, [r3, #1]
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80135e2:	2301      	movs	r3, #1
 80135e4:	69ba      	ldr	r2, [r7, #24]
 80135e6:	f7fc fe0d 	bl	8010204 <disk_read>
 80135ea:	4603      	mov	r3, r0
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d004      	beq.n	80135fa <f_lseek+0x1f0>
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	2201      	movs	r2, #1
 80135f4:	755a      	strb	r2, [r3, #21]
 80135f6:	2301      	movs	r3, #1
 80135f8:	e127      	b.n	801384a <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	69ba      	ldr	r2, [r7, #24]
 80135fe:	621a      	str	r2, [r3, #32]
 8013600:	e121      	b.n	8013846 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	68db      	ldr	r3, [r3, #12]
 8013606:	683a      	ldr	r2, [r7, #0]
 8013608:	429a      	cmp	r2, r3
 801360a:	d908      	bls.n	801361e <f_lseek+0x214>
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	7d1b      	ldrb	r3, [r3, #20]
 8013610:	f003 0302 	and.w	r3, r3, #2
 8013614:	2b00      	cmp	r3, #0
 8013616:	d102      	bne.n	801361e <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	68db      	ldr	r3, [r3, #12]
 801361c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	699b      	ldr	r3, [r3, #24]
 8013622:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8013624:	2300      	movs	r3, #0
 8013626:	637b      	str	r3, [r7, #52]	@ 0x34
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801362c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801362e:	683b      	ldr	r3, [r7, #0]
 8013630:	2b00      	cmp	r3, #0
 8013632:	f000 80b5 	beq.w	80137a0 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8013636:	68bb      	ldr	r3, [r7, #8]
 8013638:	895b      	ldrh	r3, [r3, #10]
 801363a:	461a      	mov	r2, r3
 801363c:	68bb      	ldr	r3, [r7, #8]
 801363e:	899b      	ldrh	r3, [r3, #12]
 8013640:	fb02 f303 	mul.w	r3, r2, r3
 8013644:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8013646:	6a3b      	ldr	r3, [r7, #32]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d01b      	beq.n	8013684 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801364c:	683b      	ldr	r3, [r7, #0]
 801364e:	1e5a      	subs	r2, r3, #1
 8013650:	69fb      	ldr	r3, [r7, #28]
 8013652:	fbb2 f2f3 	udiv	r2, r2, r3
 8013656:	6a3b      	ldr	r3, [r7, #32]
 8013658:	1e59      	subs	r1, r3, #1
 801365a:	69fb      	ldr	r3, [r7, #28]
 801365c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8013660:	429a      	cmp	r2, r3
 8013662:	d30f      	bcc.n	8013684 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8013664:	6a3b      	ldr	r3, [r7, #32]
 8013666:	1e5a      	subs	r2, r3, #1
 8013668:	69fb      	ldr	r3, [r7, #28]
 801366a:	425b      	negs	r3, r3
 801366c:	401a      	ands	r2, r3
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	699b      	ldr	r3, [r3, #24]
 8013676:	683a      	ldr	r2, [r7, #0]
 8013678:	1ad3      	subs	r3, r2, r3
 801367a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	69db      	ldr	r3, [r3, #28]
 8013680:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013682:	e022      	b.n	80136ca <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	689b      	ldr	r3, [r3, #8]
 8013688:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801368a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801368c:	2b00      	cmp	r3, #0
 801368e:	d119      	bne.n	80136c4 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	2100      	movs	r1, #0
 8013694:	4618      	mov	r0, r3
 8013696:	f7fd fbd2 	bl	8010e3e <create_chain>
 801369a:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801369c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801369e:	2b01      	cmp	r3, #1
 80136a0:	d104      	bne.n	80136ac <f_lseek+0x2a2>
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	2202      	movs	r2, #2
 80136a6:	755a      	strb	r2, [r3, #21]
 80136a8:	2302      	movs	r3, #2
 80136aa:	e0ce      	b.n	801384a <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80136ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136b2:	d104      	bne.n	80136be <f_lseek+0x2b4>
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	2201      	movs	r2, #1
 80136b8:	755a      	strb	r2, [r3, #21]
 80136ba:	2301      	movs	r3, #1
 80136bc:	e0c5      	b.n	801384a <f_lseek+0x440>
					fp->obj.sclust = clst;
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80136c2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80136c8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80136ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d067      	beq.n	80137a0 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80136d0:	e03a      	b.n	8013748 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80136d2:	683a      	ldr	r2, [r7, #0]
 80136d4:	69fb      	ldr	r3, [r7, #28]
 80136d6:	1ad3      	subs	r3, r2, r3
 80136d8:	603b      	str	r3, [r7, #0]
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	699a      	ldr	r2, [r3, #24]
 80136de:	69fb      	ldr	r3, [r7, #28]
 80136e0:	441a      	add	r2, r3
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	7d1b      	ldrb	r3, [r3, #20]
 80136ea:	f003 0302 	and.w	r3, r3, #2
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d00b      	beq.n	801370a <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80136f6:	4618      	mov	r0, r3
 80136f8:	f7fd fba1 	bl	8010e3e <create_chain>
 80136fc:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80136fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013700:	2b00      	cmp	r3, #0
 8013702:	d108      	bne.n	8013716 <f_lseek+0x30c>
							ofs = 0; break;
 8013704:	2300      	movs	r3, #0
 8013706:	603b      	str	r3, [r7, #0]
 8013708:	e022      	b.n	8013750 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801370e:	4618      	mov	r0, r3
 8013710:	f7fd f943 	bl	801099a <get_fat>
 8013714:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013718:	f1b3 3fff 	cmp.w	r3, #4294967295
 801371c:	d104      	bne.n	8013728 <f_lseek+0x31e>
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	2201      	movs	r2, #1
 8013722:	755a      	strb	r2, [r3, #21]
 8013724:	2301      	movs	r3, #1
 8013726:	e090      	b.n	801384a <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8013728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801372a:	2b01      	cmp	r3, #1
 801372c:	d904      	bls.n	8013738 <f_lseek+0x32e>
 801372e:	68bb      	ldr	r3, [r7, #8]
 8013730:	6a1b      	ldr	r3, [r3, #32]
 8013732:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013734:	429a      	cmp	r2, r3
 8013736:	d304      	bcc.n	8013742 <f_lseek+0x338>
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	2202      	movs	r2, #2
 801373c:	755a      	strb	r2, [r3, #21]
 801373e:	2302      	movs	r3, #2
 8013740:	e083      	b.n	801384a <f_lseek+0x440>
					fp->clust = clst;
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013746:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8013748:	683a      	ldr	r2, [r7, #0]
 801374a:	69fb      	ldr	r3, [r7, #28]
 801374c:	429a      	cmp	r2, r3
 801374e:	d8c0      	bhi.n	80136d2 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	699a      	ldr	r2, [r3, #24]
 8013754:	683b      	ldr	r3, [r7, #0]
 8013756:	441a      	add	r2, r3
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801375c:	68bb      	ldr	r3, [r7, #8]
 801375e:	899b      	ldrh	r3, [r3, #12]
 8013760:	461a      	mov	r2, r3
 8013762:	683b      	ldr	r3, [r7, #0]
 8013764:	fbb3 f1f2 	udiv	r1, r3, r2
 8013768:	fb01 f202 	mul.w	r2, r1, r2
 801376c:	1a9b      	subs	r3, r3, r2
 801376e:	2b00      	cmp	r3, #0
 8013770:	d016      	beq.n	80137a0 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8013772:	68bb      	ldr	r3, [r7, #8]
 8013774:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013776:	4618      	mov	r0, r3
 8013778:	f7fd f8f0 	bl	801095c <clust2sect>
 801377c:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801377e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013780:	2b00      	cmp	r3, #0
 8013782:	d104      	bne.n	801378e <f_lseek+0x384>
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	2202      	movs	r2, #2
 8013788:	755a      	strb	r2, [r3, #21]
 801378a:	2302      	movs	r3, #2
 801378c:	e05d      	b.n	801384a <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 801378e:	68bb      	ldr	r3, [r7, #8]
 8013790:	899b      	ldrh	r3, [r3, #12]
 8013792:	461a      	mov	r2, r3
 8013794:	683b      	ldr	r3, [r7, #0]
 8013796:	fbb3 f3f2 	udiv	r3, r3, r2
 801379a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801379c:	4413      	add	r3, r2
 801379e:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	699a      	ldr	r2, [r3, #24]
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	68db      	ldr	r3, [r3, #12]
 80137a8:	429a      	cmp	r2, r3
 80137aa:	d90a      	bls.n	80137c2 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	699a      	ldr	r2, [r3, #24]
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	7d1b      	ldrb	r3, [r3, #20]
 80137b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80137bc:	b2da      	uxtb	r2, r3
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	699b      	ldr	r3, [r3, #24]
 80137c6:	68ba      	ldr	r2, [r7, #8]
 80137c8:	8992      	ldrh	r2, [r2, #12]
 80137ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80137ce:	fb01 f202 	mul.w	r2, r1, r2
 80137d2:	1a9b      	subs	r3, r3, r2
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d036      	beq.n	8013846 <f_lseek+0x43c>
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	6a1b      	ldr	r3, [r3, #32]
 80137dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80137de:	429a      	cmp	r2, r3
 80137e0:	d031      	beq.n	8013846 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	7d1b      	ldrb	r3, [r3, #20]
 80137e6:	b25b      	sxtb	r3, r3
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	da18      	bge.n	801381e <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80137ec:	68bb      	ldr	r3, [r7, #8]
 80137ee:	7858      	ldrb	r0, [r3, #1]
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	6a1a      	ldr	r2, [r3, #32]
 80137fa:	2301      	movs	r3, #1
 80137fc:	f7fc fd22 	bl	8010244 <disk_write>
 8013800:	4603      	mov	r3, r0
 8013802:	2b00      	cmp	r3, #0
 8013804:	d004      	beq.n	8013810 <f_lseek+0x406>
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	2201      	movs	r2, #1
 801380a:	755a      	strb	r2, [r3, #21]
 801380c:	2301      	movs	r3, #1
 801380e:	e01c      	b.n	801384a <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	7d1b      	ldrb	r3, [r3, #20]
 8013814:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013818:	b2da      	uxtb	r2, r3
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801381e:	68bb      	ldr	r3, [r7, #8]
 8013820:	7858      	ldrb	r0, [r3, #1]
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013828:	2301      	movs	r3, #1
 801382a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801382c:	f7fc fcea 	bl	8010204 <disk_read>
 8013830:	4603      	mov	r3, r0
 8013832:	2b00      	cmp	r3, #0
 8013834:	d004      	beq.n	8013840 <f_lseek+0x436>
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	2201      	movs	r2, #1
 801383a:	755a      	strb	r2, [r3, #21]
 801383c:	2301      	movs	r3, #1
 801383e:	e004      	b.n	801384a <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013844:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8013846:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 801384a:	4618      	mov	r0, r3
 801384c:	3740      	adds	r7, #64	@ 0x40
 801384e:	46bd      	mov	sp, r7
 8013850:	bd80      	pop	{r7, pc}

08013852 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8013852:	b580      	push	{r7, lr}
 8013854:	b0a0      	sub	sp, #128	@ 0x80
 8013856:	af00      	add	r7, sp, #0
 8013858:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801385a:	2300      	movs	r3, #0
 801385c:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801385e:	f107 010c 	add.w	r1, r7, #12
 8013862:	1d3b      	adds	r3, r7, #4
 8013864:	2202      	movs	r2, #2
 8013866:	4618      	mov	r0, r3
 8013868:	f7fe fd68 	bl	801233c <find_volume>
 801386c:	4603      	mov	r3, r0
 801386e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	647b      	str	r3, [r7, #68]	@ 0x44
	if (res == FR_OK) {
 8013876:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801387a:	2b00      	cmp	r3, #0
 801387c:	f040 80a4 	bne.w	80139c8 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8013880:	687a      	ldr	r2, [r7, #4]
 8013882:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8013886:	4611      	mov	r1, r2
 8013888:	4618      	mov	r0, r3
 801388a:	f7fe fc27 	bl	80120dc <follow_path>
 801388e:	4603      	mov	r3, r0
 8013890:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8013894:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013898:	2b00      	cmp	r3, #0
 801389a:	d108      	bne.n	80138ae <f_unlink+0x5c>
 801389c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80138a0:	f003 0320 	and.w	r3, r3, #32
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d002      	beq.n	80138ae <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 80138a8:	2306      	movs	r3, #6
 80138aa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 80138ae:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d108      	bne.n	80138c8 <f_unlink+0x76>
 80138b6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80138ba:	2102      	movs	r1, #2
 80138bc:	4618      	mov	r0, r3
 80138be:	f7fc fdff 	bl	80104c0 <chk_lock>
 80138c2:	4603      	mov	r3, r0
 80138c4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80138c8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d17b      	bne.n	80139c8 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80138d0:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80138d4:	b25b      	sxtb	r3, r3
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	da03      	bge.n	80138e2 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80138da:	2306      	movs	r3, #6
 80138dc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80138e0:	e008      	b.n	80138f4 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80138e2:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80138e6:	f003 0301 	and.w	r3, r3, #1
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d002      	beq.n	80138f4 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80138ee:	2307      	movs	r3, #7
 80138f0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 80138f4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d13d      	bne.n	8013978 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8013900:	4611      	mov	r1, r2
 8013902:	4618      	mov	r0, r3
 8013904:	f7fd fd11 	bl	801132a <ld_clust>
 8013908:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801390a:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801390e:	f003 0310 	and.w	r3, r3, #16
 8013912:	2b00      	cmp	r3, #0
 8013914:	d030      	beq.n	8013978 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	69db      	ldr	r3, [r3, #28]
 801391a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801391c:	429a      	cmp	r2, r3
 801391e:	d103      	bne.n	8013928 <f_unlink+0xd6>
						res = FR_DENIED;
 8013920:	2307      	movs	r3, #7
 8013922:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8013926:	e027      	b.n	8013978 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801392c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801392e:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8013930:	f107 0310 	add.w	r3, r7, #16
 8013934:	2100      	movs	r1, #0
 8013936:	4618      	mov	r0, r3
 8013938:	f7fd fb51 	bl	8010fde <dir_sdi>
 801393c:	4603      	mov	r3, r0
 801393e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 8013942:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013946:	2b00      	cmp	r3, #0
 8013948:	d116      	bne.n	8013978 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 801394a:	f107 0310 	add.w	r3, r7, #16
 801394e:	2100      	movs	r1, #0
 8013950:	4618      	mov	r0, r3
 8013952:	f7fd ff14 	bl	801177e <dir_read>
 8013956:	4603      	mov	r3, r0
 8013958:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801395c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013960:	2b00      	cmp	r3, #0
 8013962:	d102      	bne.n	801396a <f_unlink+0x118>
 8013964:	2307      	movs	r3, #7
 8013966:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801396a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801396e:	2b04      	cmp	r3, #4
 8013970:	d102      	bne.n	8013978 <f_unlink+0x126>
 8013972:	2300      	movs	r3, #0
 8013974:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 8013978:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801397c:	2b00      	cmp	r3, #0
 801397e:	d123      	bne.n	80139c8 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8013980:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8013984:	4618      	mov	r0, r3
 8013986:	f7fe f959 	bl	8011c3c <dir_remove>
 801398a:	4603      	mov	r3, r0
 801398c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8013990:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013994:	2b00      	cmp	r3, #0
 8013996:	d10c      	bne.n	80139b2 <f_unlink+0x160>
 8013998:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801399a:	2b00      	cmp	r3, #0
 801399c:	d009      	beq.n	80139b2 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801399e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80139a2:	2200      	movs	r2, #0
 80139a4:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80139a6:	4618      	mov	r0, r3
 80139a8:	f7fd f9e4 	bl	8010d74 <remove_chain>
 80139ac:	4603      	mov	r3, r0
 80139ae:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80139b2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d106      	bne.n	80139c8 <f_unlink+0x176>
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	4618      	mov	r0, r3
 80139be:	f7fc ff5d 	bl	801087c <sync_fs>
 80139c2:	4603      	mov	r3, r0
 80139c4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80139c8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80139cc:	4618      	mov	r0, r3
 80139ce:	3780      	adds	r7, #128	@ 0x80
 80139d0:	46bd      	mov	sp, r7
 80139d2:	bd80      	pop	{r7, pc}

080139d4 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80139d4:	b580      	push	{r7, lr}
 80139d6:	b084      	sub	sp, #16
 80139d8:	af00      	add	r7, sp, #0
 80139da:	6078      	str	r0, [r7, #4]
 80139dc:	460b      	mov	r3, r1
 80139de:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80139e0:	78fb      	ldrb	r3, [r7, #3]
 80139e2:	2b0a      	cmp	r3, #10
 80139e4:	d103      	bne.n	80139ee <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80139e6:	210d      	movs	r1, #13
 80139e8:	6878      	ldr	r0, [r7, #4]
 80139ea:	f7ff fff3 	bl	80139d4 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	685b      	ldr	r3, [r3, #4]
 80139f2:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	db25      	blt.n	8013a46 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	1c5a      	adds	r2, r3, #1
 80139fe:	60fa      	str	r2, [r7, #12]
 8013a00:	687a      	ldr	r2, [r7, #4]
 8013a02:	4413      	add	r3, r2
 8013a04:	78fa      	ldrb	r2, [r7, #3]
 8013a06:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	2b3c      	cmp	r3, #60	@ 0x3c
 8013a0c:	dd12      	ble.n	8013a34 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	6818      	ldr	r0, [r3, #0]
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	f103 010c 	add.w	r1, r3, #12
 8013a18:	68fa      	ldr	r2, [r7, #12]
 8013a1a:	f107 0308 	add.w	r3, r7, #8
 8013a1e:	f7ff fab8 	bl	8012f92 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8013a22:	68ba      	ldr	r2, [r7, #8]
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	429a      	cmp	r2, r3
 8013a28:	d101      	bne.n	8013a2e <putc_bfd+0x5a>
 8013a2a:	2300      	movs	r3, #0
 8013a2c:	e001      	b.n	8013a32 <putc_bfd+0x5e>
 8013a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8013a32:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	68fa      	ldr	r2, [r7, #12]
 8013a38:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	689b      	ldr	r3, [r3, #8]
 8013a3e:	1c5a      	adds	r2, r3, #1
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	609a      	str	r2, [r3, #8]
 8013a44:	e000      	b.n	8013a48 <putc_bfd+0x74>
	if (i < 0) return;
 8013a46:	bf00      	nop
}
 8013a48:	3710      	adds	r7, #16
 8013a4a:	46bd      	mov	sp, r7
 8013a4c:	bd80      	pop	{r7, pc}

08013a4e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8013a4e:	b580      	push	{r7, lr}
 8013a50:	b084      	sub	sp, #16
 8013a52:	af00      	add	r7, sp, #0
 8013a54:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	685b      	ldr	r3, [r3, #4]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	db16      	blt.n	8013a8c <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	6818      	ldr	r0, [r3, #0]
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	f103 010c 	add.w	r1, r3, #12
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	685b      	ldr	r3, [r3, #4]
 8013a6c:	461a      	mov	r2, r3
 8013a6e:	f107 030c 	add.w	r3, r7, #12
 8013a72:	f7ff fa8e 	bl	8012f92 <f_write>
 8013a76:	4603      	mov	r3, r0
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d107      	bne.n	8013a8c <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	685b      	ldr	r3, [r3, #4]
 8013a80:	68fa      	ldr	r2, [r7, #12]
 8013a82:	4293      	cmp	r3, r2
 8013a84:	d102      	bne.n	8013a8c <putc_flush+0x3e>
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	689b      	ldr	r3, [r3, #8]
 8013a8a:	e001      	b.n	8013a90 <putc_flush+0x42>
	return EOF;
 8013a8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013a90:	4618      	mov	r0, r3
 8013a92:	3710      	adds	r7, #16
 8013a94:	46bd      	mov	sp, r7
 8013a96:	bd80      	pop	{r7, pc}

08013a98 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8013a98:	b480      	push	{r7}
 8013a9a:	b083      	sub	sp, #12
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	6078      	str	r0, [r7, #4]
 8013aa0:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	683a      	ldr	r2, [r7, #0]
 8013aa6:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	2200      	movs	r2, #0
 8013aac:	605a      	str	r2, [r3, #4]
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	685a      	ldr	r2, [r3, #4]
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	609a      	str	r2, [r3, #8]
}
 8013ab6:	bf00      	nop
 8013ab8:	370c      	adds	r7, #12
 8013aba:	46bd      	mov	sp, r7
 8013abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac0:	4770      	bx	lr
	...

08013ac4 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8013ac4:	b40e      	push	{r1, r2, r3}
 8013ac6:	b580      	push	{r7, lr}
 8013ac8:	b0a7      	sub	sp, #156	@ 0x9c
 8013aca:	af00      	add	r7, sp, #0
 8013acc:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8013ace:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013ad2:	6879      	ldr	r1, [r7, #4]
 8013ad4:	4618      	mov	r0, r3
 8013ad6:	f7ff ffdf 	bl	8013a98 <putc_init>

	va_start(arp, fmt);
 8013ada:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8013ade:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 8013ae0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013ae4:	1c5a      	adds	r2, r3, #1
 8013ae6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8013aea:	781b      	ldrb	r3, [r3, #0]
 8013aec:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 8013af0:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	f000 81f2 	beq.w	8013ede <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 8013afa:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8013afe:	2b25      	cmp	r3, #37	@ 0x25
 8013b00:	d008      	beq.n	8013b14 <f_printf+0x50>
			putc_bfd(&pb, c);
 8013b02:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 8013b06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013b0a:	4611      	mov	r1, r2
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	f7ff ff61 	bl	80139d4 <putc_bfd>
			continue;
 8013b12:	e1e3      	b.n	8013edc <f_printf+0x418>
		}
		w = f = 0;
 8013b14:	2300      	movs	r3, #0
 8013b16:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 8013b20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013b24:	1c5a      	adds	r2, r3, #1
 8013b26:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8013b2a:	781b      	ldrb	r3, [r3, #0]
 8013b2c:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8013b30:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8013b34:	2b30      	cmp	r3, #48	@ 0x30
 8013b36:	d10b      	bne.n	8013b50 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8013b38:	2301      	movs	r3, #1
 8013b3a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8013b3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013b42:	1c5a      	adds	r2, r3, #1
 8013b44:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8013b48:	781b      	ldrb	r3, [r3, #0]
 8013b4a:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8013b4e:	e024      	b.n	8013b9a <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8013b50:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8013b54:	2b2d      	cmp	r3, #45	@ 0x2d
 8013b56:	d120      	bne.n	8013b9a <f_printf+0xd6>
				f = 2; c = *fmt++;
 8013b58:	2302      	movs	r3, #2
 8013b5a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8013b5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013b62:	1c5a      	adds	r2, r3, #1
 8013b64:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8013b68:	781b      	ldrb	r3, [r3, #0]
 8013b6a:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8013b6e:	e014      	b.n	8013b9a <f_printf+0xd6>
			w = w * 10 + c - '0';
 8013b70:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8013b74:	4613      	mov	r3, r2
 8013b76:	009b      	lsls	r3, r3, #2
 8013b78:	4413      	add	r3, r2
 8013b7a:	005b      	lsls	r3, r3, #1
 8013b7c:	461a      	mov	r2, r3
 8013b7e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8013b82:	4413      	add	r3, r2
 8013b84:	3b30      	subs	r3, #48	@ 0x30
 8013b86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 8013b8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013b8e:	1c5a      	adds	r2, r3, #1
 8013b90:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8013b94:	781b      	ldrb	r3, [r3, #0]
 8013b96:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 8013b9a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8013b9e:	2b2f      	cmp	r3, #47	@ 0x2f
 8013ba0:	d903      	bls.n	8013baa <f_printf+0xe6>
 8013ba2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8013ba6:	2b39      	cmp	r3, #57	@ 0x39
 8013ba8:	d9e2      	bls.n	8013b70 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8013baa:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8013bae:	2b6c      	cmp	r3, #108	@ 0x6c
 8013bb0:	d003      	beq.n	8013bba <f_printf+0xf6>
 8013bb2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8013bb6:	2b4c      	cmp	r3, #76	@ 0x4c
 8013bb8:	d10d      	bne.n	8013bd6 <f_printf+0x112>
			f |= 4; c = *fmt++;
 8013bba:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8013bbe:	f043 0304 	orr.w	r3, r3, #4
 8013bc2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8013bc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013bca:	1c5a      	adds	r2, r3, #1
 8013bcc:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8013bd0:	781b      	ldrb	r3, [r3, #0]
 8013bd2:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 8013bd6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	f000 8181 	beq.w	8013ee2 <f_printf+0x41e>
		d = c;
 8013be0:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8013be4:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 8013be8:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8013bec:	2b60      	cmp	r3, #96	@ 0x60
 8013bee:	d908      	bls.n	8013c02 <f_printf+0x13e>
 8013bf0:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8013bf4:	2b7a      	cmp	r3, #122	@ 0x7a
 8013bf6:	d804      	bhi.n	8013c02 <f_printf+0x13e>
 8013bf8:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8013bfc:	3b20      	subs	r3, #32
 8013bfe:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 8013c02:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8013c06:	3b42      	subs	r3, #66	@ 0x42
 8013c08:	2b16      	cmp	r3, #22
 8013c0a:	f200 8098 	bhi.w	8013d3e <f_printf+0x27a>
 8013c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8013c14 <f_printf+0x150>)
 8013c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c14:	08013d1f 	.word	0x08013d1f
 8013c18:	08013d07 	.word	0x08013d07
 8013c1c:	08013d2f 	.word	0x08013d2f
 8013c20:	08013d3f 	.word	0x08013d3f
 8013c24:	08013d3f 	.word	0x08013d3f
 8013c28:	08013d3f 	.word	0x08013d3f
 8013c2c:	08013d3f 	.word	0x08013d3f
 8013c30:	08013d3f 	.word	0x08013d3f
 8013c34:	08013d3f 	.word	0x08013d3f
 8013c38:	08013d3f 	.word	0x08013d3f
 8013c3c:	08013d3f 	.word	0x08013d3f
 8013c40:	08013d3f 	.word	0x08013d3f
 8013c44:	08013d3f 	.word	0x08013d3f
 8013c48:	08013d27 	.word	0x08013d27
 8013c4c:	08013d3f 	.word	0x08013d3f
 8013c50:	08013d3f 	.word	0x08013d3f
 8013c54:	08013d3f 	.word	0x08013d3f
 8013c58:	08013c71 	.word	0x08013c71
 8013c5c:	08013d3f 	.word	0x08013d3f
 8013c60:	08013d2f 	.word	0x08013d2f
 8013c64:	08013d3f 	.word	0x08013d3f
 8013c68:	08013d3f 	.word	0x08013d3f
 8013c6c:	08013d37 	.word	0x08013d37
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8013c70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013c72:	1d1a      	adds	r2, r3, #4
 8013c74:	67ba      	str	r2, [r7, #120]	@ 0x78
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8013c80:	e004      	b.n	8013c8c <f_printf+0x1c8>
 8013c82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013c86:	3301      	adds	r3, #1
 8013c88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8013c8c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8013c8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013c92:	4413      	add	r3, r2
 8013c94:	781b      	ldrb	r3, [r3, #0]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d1f3      	bne.n	8013c82 <f_printf+0x1be>
			if (!(f & 2)) {
 8013c9a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8013c9e:	f003 0302 	and.w	r3, r3, #2
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d11a      	bne.n	8013cdc <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8013ca6:	e005      	b.n	8013cb4 <f_printf+0x1f0>
 8013ca8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013cac:	2120      	movs	r1, #32
 8013cae:	4618      	mov	r0, r3
 8013cb0:	f7ff fe90 	bl	80139d4 <putc_bfd>
 8013cb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013cb8:	1c5a      	adds	r2, r3, #1
 8013cba:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8013cbe:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8013cc2:	429a      	cmp	r2, r3
 8013cc4:	d8f0      	bhi.n	8013ca8 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8013cc6:	e009      	b.n	8013cdc <f_printf+0x218>
 8013cc8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013cca:	1c5a      	adds	r2, r3, #1
 8013ccc:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8013cce:	781a      	ldrb	r2, [r3, #0]
 8013cd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013cd4:	4611      	mov	r1, r2
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	f7ff fe7c 	bl	80139d4 <putc_bfd>
 8013cdc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013cde:	781b      	ldrb	r3, [r3, #0]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d1f1      	bne.n	8013cc8 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8013ce4:	e005      	b.n	8013cf2 <f_printf+0x22e>
 8013ce6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013cea:	2120      	movs	r1, #32
 8013cec:	4618      	mov	r0, r3
 8013cee:	f7ff fe71 	bl	80139d4 <putc_bfd>
 8013cf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013cf6:	1c5a      	adds	r2, r3, #1
 8013cf8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8013cfc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8013d00:	429a      	cmp	r2, r3
 8013d02:	d8f0      	bhi.n	8013ce6 <f_printf+0x222>
			continue;
 8013d04:	e0ea      	b.n	8013edc <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8013d06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013d08:	1d1a      	adds	r2, r3, #4
 8013d0a:	67ba      	str	r2, [r7, #120]	@ 0x78
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	b2da      	uxtb	r2, r3
 8013d10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013d14:	4611      	mov	r1, r2
 8013d16:	4618      	mov	r0, r3
 8013d18:	f7ff fe5c 	bl	80139d4 <putc_bfd>
 8013d1c:	e0de      	b.n	8013edc <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 8013d1e:	2302      	movs	r3, #2
 8013d20:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8013d24:	e014      	b.n	8013d50 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8013d26:	2308      	movs	r3, #8
 8013d28:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8013d2c:	e010      	b.n	8013d50 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8013d2e:	230a      	movs	r3, #10
 8013d30:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8013d34:	e00c      	b.n	8013d50 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8013d36:	2310      	movs	r3, #16
 8013d38:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8013d3c:	e008      	b.n	8013d50 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8013d3e:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 8013d42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013d46:	4611      	mov	r1, r2
 8013d48:	4618      	mov	r0, r3
 8013d4a:	f7ff fe43 	bl	80139d4 <putc_bfd>
 8013d4e:	e0c5      	b.n	8013edc <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8013d50:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8013d54:	f003 0304 	and.w	r3, r3, #4
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d004      	beq.n	8013d66 <f_printf+0x2a2>
 8013d5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013d5e:	1d1a      	adds	r2, r3, #4
 8013d60:	67ba      	str	r2, [r7, #120]	@ 0x78
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	e00c      	b.n	8013d80 <f_printf+0x2bc>
 8013d66:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8013d6a:	2b44      	cmp	r3, #68	@ 0x44
 8013d6c:	d104      	bne.n	8013d78 <f_printf+0x2b4>
 8013d6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013d70:	1d1a      	adds	r2, r3, #4
 8013d72:	67ba      	str	r2, [r7, #120]	@ 0x78
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	e003      	b.n	8013d80 <f_printf+0x2bc>
 8013d78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013d7a:	1d1a      	adds	r2, r3, #4
 8013d7c:	67ba      	str	r2, [r7, #120]	@ 0x78
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8013d84:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8013d88:	2b44      	cmp	r3, #68	@ 0x44
 8013d8a:	d10e      	bne.n	8013daa <f_printf+0x2e6>
 8013d8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	da0a      	bge.n	8013daa <f_printf+0x2e6>
			v = 0 - v;
 8013d94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013d98:	425b      	negs	r3, r3
 8013d9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 8013d9e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8013da2:	f043 0308 	orr.w	r3, r3, #8
 8013da6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 8013daa:	2300      	movs	r3, #0
 8013dac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8013db0:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 8013db4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013db8:	fbb3 f1f2 	udiv	r1, r3, r2
 8013dbc:	fb01 f202 	mul.w	r2, r1, r2
 8013dc0:	1a9b      	subs	r3, r3, r2
 8013dc2:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 8013dc6:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8013dca:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8013dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8013dd2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8013dd6:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8013dda:	2b09      	cmp	r3, #9
 8013ddc:	d90b      	bls.n	8013df6 <f_printf+0x332>
 8013dde:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8013de2:	2b78      	cmp	r3, #120	@ 0x78
 8013de4:	d101      	bne.n	8013dea <f_printf+0x326>
 8013de6:	2227      	movs	r2, #39	@ 0x27
 8013de8:	e000      	b.n	8013dec <f_printf+0x328>
 8013dea:	2207      	movs	r2, #7
 8013dec:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8013df0:	4413      	add	r3, r2
 8013df2:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 8013df6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013dfa:	1c5a      	adds	r2, r3, #1
 8013dfc:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8013e00:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8013e04:	3230      	adds	r2, #48	@ 0x30
 8013e06:	b2d2      	uxtb	r2, r2
 8013e08:	3398      	adds	r3, #152	@ 0x98
 8013e0a:	443b      	add	r3, r7
 8013e0c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8013e10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d003      	beq.n	8013e20 <f_printf+0x35c>
 8013e18:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013e1c:	2b1f      	cmp	r3, #31
 8013e1e:	d9c7      	bls.n	8013db0 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8013e20:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8013e24:	f003 0308 	and.w	r3, r3, #8
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d009      	beq.n	8013e40 <f_printf+0x37c>
 8013e2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013e30:	1c5a      	adds	r2, r3, #1
 8013e32:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8013e36:	3398      	adds	r3, #152	@ 0x98
 8013e38:	443b      	add	r3, r7
 8013e3a:	222d      	movs	r2, #45	@ 0x2d
 8013e3c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8013e40:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013e44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8013e48:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8013e4c:	f003 0301 	and.w	r3, r3, #1
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d001      	beq.n	8013e58 <f_printf+0x394>
 8013e54:	2330      	movs	r3, #48	@ 0x30
 8013e56:	e000      	b.n	8013e5a <f_printf+0x396>
 8013e58:	2320      	movs	r3, #32
 8013e5a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8013e5e:	e007      	b.n	8013e70 <f_printf+0x3ac>
 8013e60:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8013e64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013e68:	4611      	mov	r1, r2
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	f7ff fdb2 	bl	80139d4 <putc_bfd>
 8013e70:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8013e74:	f003 0302 	and.w	r3, r3, #2
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d108      	bne.n	8013e8e <f_printf+0x3ca>
 8013e7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013e80:	1c5a      	adds	r2, r3, #1
 8013e82:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8013e86:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8013e8a:	429a      	cmp	r2, r3
 8013e8c:	d8e8      	bhi.n	8013e60 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 8013e8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013e92:	3b01      	subs	r3, #1
 8013e94:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8013e98:	f107 020c 	add.w	r2, r7, #12
 8013e9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013ea0:	4413      	add	r3, r2
 8013ea2:	781a      	ldrb	r2, [r3, #0]
 8013ea4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013ea8:	4611      	mov	r1, r2
 8013eaa:	4618      	mov	r0, r3
 8013eac:	f7ff fd92 	bl	80139d4 <putc_bfd>
		} while (i);
 8013eb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d1ea      	bne.n	8013e8e <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 8013eb8:	e007      	b.n	8013eca <f_printf+0x406>
 8013eba:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8013ebe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013ec2:	4611      	mov	r1, r2
 8013ec4:	4618      	mov	r0, r3
 8013ec6:	f7ff fd85 	bl	80139d4 <putc_bfd>
 8013eca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013ece:	1c5a      	adds	r2, r3, #1
 8013ed0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8013ed4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8013ed8:	429a      	cmp	r2, r3
 8013eda:	d8ee      	bhi.n	8013eba <f_printf+0x3f6>
		c = *fmt++;
 8013edc:	e600      	b.n	8013ae0 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8013ede:	bf00      	nop
 8013ee0:	e000      	b.n	8013ee4 <f_printf+0x420>
		if (!c) break;
 8013ee2:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8013ee4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013ee8:	4618      	mov	r0, r3
 8013eea:	f7ff fdb0 	bl	8013a4e <putc_flush>
 8013eee:	4603      	mov	r3, r0
}
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	379c      	adds	r7, #156	@ 0x9c
 8013ef4:	46bd      	mov	sp, r7
 8013ef6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013efa:	b003      	add	sp, #12
 8013efc:	4770      	bx	lr
 8013efe:	bf00      	nop

08013f00 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013f00:	b480      	push	{r7}
 8013f02:	b087      	sub	sp, #28
 8013f04:	af00      	add	r7, sp, #0
 8013f06:	60f8      	str	r0, [r7, #12]
 8013f08:	60b9      	str	r1, [r7, #8]
 8013f0a:	4613      	mov	r3, r2
 8013f0c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013f0e:	2301      	movs	r3, #1
 8013f10:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013f12:	2300      	movs	r3, #0
 8013f14:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013f16:	4b1f      	ldr	r3, [pc, #124]	@ (8013f94 <FATFS_LinkDriverEx+0x94>)
 8013f18:	7a5b      	ldrb	r3, [r3, #9]
 8013f1a:	b2db      	uxtb	r3, r3
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d131      	bne.n	8013f84 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013f20:	4b1c      	ldr	r3, [pc, #112]	@ (8013f94 <FATFS_LinkDriverEx+0x94>)
 8013f22:	7a5b      	ldrb	r3, [r3, #9]
 8013f24:	b2db      	uxtb	r3, r3
 8013f26:	461a      	mov	r2, r3
 8013f28:	4b1a      	ldr	r3, [pc, #104]	@ (8013f94 <FATFS_LinkDriverEx+0x94>)
 8013f2a:	2100      	movs	r1, #0
 8013f2c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013f2e:	4b19      	ldr	r3, [pc, #100]	@ (8013f94 <FATFS_LinkDriverEx+0x94>)
 8013f30:	7a5b      	ldrb	r3, [r3, #9]
 8013f32:	b2db      	uxtb	r3, r3
 8013f34:	4a17      	ldr	r2, [pc, #92]	@ (8013f94 <FATFS_LinkDriverEx+0x94>)
 8013f36:	009b      	lsls	r3, r3, #2
 8013f38:	4413      	add	r3, r2
 8013f3a:	68fa      	ldr	r2, [r7, #12]
 8013f3c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013f3e:	4b15      	ldr	r3, [pc, #84]	@ (8013f94 <FATFS_LinkDriverEx+0x94>)
 8013f40:	7a5b      	ldrb	r3, [r3, #9]
 8013f42:	b2db      	uxtb	r3, r3
 8013f44:	461a      	mov	r2, r3
 8013f46:	4b13      	ldr	r3, [pc, #76]	@ (8013f94 <FATFS_LinkDriverEx+0x94>)
 8013f48:	4413      	add	r3, r2
 8013f4a:	79fa      	ldrb	r2, [r7, #7]
 8013f4c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013f4e:	4b11      	ldr	r3, [pc, #68]	@ (8013f94 <FATFS_LinkDriverEx+0x94>)
 8013f50:	7a5b      	ldrb	r3, [r3, #9]
 8013f52:	b2db      	uxtb	r3, r3
 8013f54:	1c5a      	adds	r2, r3, #1
 8013f56:	b2d1      	uxtb	r1, r2
 8013f58:	4a0e      	ldr	r2, [pc, #56]	@ (8013f94 <FATFS_LinkDriverEx+0x94>)
 8013f5a:	7251      	strb	r1, [r2, #9]
 8013f5c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013f5e:	7dbb      	ldrb	r3, [r7, #22]
 8013f60:	3330      	adds	r3, #48	@ 0x30
 8013f62:	b2da      	uxtb	r2, r3
 8013f64:	68bb      	ldr	r3, [r7, #8]
 8013f66:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013f68:	68bb      	ldr	r3, [r7, #8]
 8013f6a:	3301      	adds	r3, #1
 8013f6c:	223a      	movs	r2, #58	@ 0x3a
 8013f6e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013f70:	68bb      	ldr	r3, [r7, #8]
 8013f72:	3302      	adds	r3, #2
 8013f74:	222f      	movs	r2, #47	@ 0x2f
 8013f76:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013f78:	68bb      	ldr	r3, [r7, #8]
 8013f7a:	3303      	adds	r3, #3
 8013f7c:	2200      	movs	r2, #0
 8013f7e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013f80:	2300      	movs	r3, #0
 8013f82:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f86:	4618      	mov	r0, r3
 8013f88:	371c      	adds	r7, #28
 8013f8a:	46bd      	mov	sp, r7
 8013f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f90:	4770      	bx	lr
 8013f92:	bf00      	nop
 8013f94:	24002d10 	.word	0x24002d10

08013f98 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013f98:	b580      	push	{r7, lr}
 8013f9a:	b082      	sub	sp, #8
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	6078      	str	r0, [r7, #4]
 8013fa0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	6839      	ldr	r1, [r7, #0]
 8013fa6:	6878      	ldr	r0, [r7, #4]
 8013fa8:	f7ff ffaa 	bl	8013f00 <FATFS_LinkDriverEx>
 8013fac:	4603      	mov	r3, r0
}
 8013fae:	4618      	mov	r0, r3
 8013fb0:	3708      	adds	r7, #8
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	bd80      	pop	{r7, pc}
	...

08013fb8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8013fb8:	b480      	push	{r7}
 8013fba:	b085      	sub	sp, #20
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	4603      	mov	r3, r0
 8013fc0:	6039      	str	r1, [r7, #0]
 8013fc2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8013fc4:	88fb      	ldrh	r3, [r7, #6]
 8013fc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8013fc8:	d802      	bhi.n	8013fd0 <ff_convert+0x18>
		c = chr;
 8013fca:	88fb      	ldrh	r3, [r7, #6]
 8013fcc:	81fb      	strh	r3, [r7, #14]
 8013fce:	e025      	b.n	801401c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8013fd0:	683b      	ldr	r3, [r7, #0]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d00b      	beq.n	8013fee <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8013fd6:	88fb      	ldrh	r3, [r7, #6]
 8013fd8:	2bff      	cmp	r3, #255	@ 0xff
 8013fda:	d805      	bhi.n	8013fe8 <ff_convert+0x30>
 8013fdc:	88fb      	ldrh	r3, [r7, #6]
 8013fde:	3b80      	subs	r3, #128	@ 0x80
 8013fe0:	4a12      	ldr	r2, [pc, #72]	@ (801402c <ff_convert+0x74>)
 8013fe2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013fe6:	e000      	b.n	8013fea <ff_convert+0x32>
 8013fe8:	2300      	movs	r3, #0
 8013fea:	81fb      	strh	r3, [r7, #14]
 8013fec:	e016      	b.n	801401c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8013fee:	2300      	movs	r3, #0
 8013ff0:	81fb      	strh	r3, [r7, #14]
 8013ff2:	e009      	b.n	8014008 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8013ff4:	89fb      	ldrh	r3, [r7, #14]
 8013ff6:	4a0d      	ldr	r2, [pc, #52]	@ (801402c <ff_convert+0x74>)
 8013ff8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013ffc:	88fa      	ldrh	r2, [r7, #6]
 8013ffe:	429a      	cmp	r2, r3
 8014000:	d006      	beq.n	8014010 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8014002:	89fb      	ldrh	r3, [r7, #14]
 8014004:	3301      	adds	r3, #1
 8014006:	81fb      	strh	r3, [r7, #14]
 8014008:	89fb      	ldrh	r3, [r7, #14]
 801400a:	2b7f      	cmp	r3, #127	@ 0x7f
 801400c:	d9f2      	bls.n	8013ff4 <ff_convert+0x3c>
 801400e:	e000      	b.n	8014012 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8014010:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8014012:	89fb      	ldrh	r3, [r7, #14]
 8014014:	3380      	adds	r3, #128	@ 0x80
 8014016:	b29b      	uxth	r3, r3
 8014018:	b2db      	uxtb	r3, r3
 801401a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801401c:	89fb      	ldrh	r3, [r7, #14]
}
 801401e:	4618      	mov	r0, r3
 8014020:	3714      	adds	r7, #20
 8014022:	46bd      	mov	sp, r7
 8014024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014028:	4770      	bx	lr
 801402a:	bf00      	nop
 801402c:	080145c0 	.word	0x080145c0

08014030 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8014030:	b480      	push	{r7}
 8014032:	b087      	sub	sp, #28
 8014034:	af00      	add	r7, sp, #0
 8014036:	4603      	mov	r3, r0
 8014038:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801403a:	88fb      	ldrh	r3, [r7, #6]
 801403c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014040:	d201      	bcs.n	8014046 <ff_wtoupper+0x16>
 8014042:	4b3e      	ldr	r3, [pc, #248]	@ (801413c <ff_wtoupper+0x10c>)
 8014044:	e000      	b.n	8014048 <ff_wtoupper+0x18>
 8014046:	4b3e      	ldr	r3, [pc, #248]	@ (8014140 <ff_wtoupper+0x110>)
 8014048:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801404a:	697b      	ldr	r3, [r7, #20]
 801404c:	1c9a      	adds	r2, r3, #2
 801404e:	617a      	str	r2, [r7, #20]
 8014050:	881b      	ldrh	r3, [r3, #0]
 8014052:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8014054:	8a7b      	ldrh	r3, [r7, #18]
 8014056:	2b00      	cmp	r3, #0
 8014058:	d068      	beq.n	801412c <ff_wtoupper+0xfc>
 801405a:	88fa      	ldrh	r2, [r7, #6]
 801405c:	8a7b      	ldrh	r3, [r7, #18]
 801405e:	429a      	cmp	r2, r3
 8014060:	d364      	bcc.n	801412c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8014062:	697b      	ldr	r3, [r7, #20]
 8014064:	1c9a      	adds	r2, r3, #2
 8014066:	617a      	str	r2, [r7, #20]
 8014068:	881b      	ldrh	r3, [r3, #0]
 801406a:	823b      	strh	r3, [r7, #16]
 801406c:	8a3b      	ldrh	r3, [r7, #16]
 801406e:	0a1b      	lsrs	r3, r3, #8
 8014070:	81fb      	strh	r3, [r7, #14]
 8014072:	8a3b      	ldrh	r3, [r7, #16]
 8014074:	b2db      	uxtb	r3, r3
 8014076:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8014078:	88fa      	ldrh	r2, [r7, #6]
 801407a:	8a79      	ldrh	r1, [r7, #18]
 801407c:	8a3b      	ldrh	r3, [r7, #16]
 801407e:	440b      	add	r3, r1
 8014080:	429a      	cmp	r2, r3
 8014082:	da49      	bge.n	8014118 <ff_wtoupper+0xe8>
			switch (cmd) {
 8014084:	89fb      	ldrh	r3, [r7, #14]
 8014086:	2b08      	cmp	r3, #8
 8014088:	d84f      	bhi.n	801412a <ff_wtoupper+0xfa>
 801408a:	a201      	add	r2, pc, #4	@ (adr r2, 8014090 <ff_wtoupper+0x60>)
 801408c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014090:	080140b5 	.word	0x080140b5
 8014094:	080140c7 	.word	0x080140c7
 8014098:	080140dd 	.word	0x080140dd
 801409c:	080140e5 	.word	0x080140e5
 80140a0:	080140ed 	.word	0x080140ed
 80140a4:	080140f5 	.word	0x080140f5
 80140a8:	080140fd 	.word	0x080140fd
 80140ac:	08014105 	.word	0x08014105
 80140b0:	0801410d 	.word	0x0801410d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80140b4:	88fa      	ldrh	r2, [r7, #6]
 80140b6:	8a7b      	ldrh	r3, [r7, #18]
 80140b8:	1ad3      	subs	r3, r2, r3
 80140ba:	005b      	lsls	r3, r3, #1
 80140bc:	697a      	ldr	r2, [r7, #20]
 80140be:	4413      	add	r3, r2
 80140c0:	881b      	ldrh	r3, [r3, #0]
 80140c2:	80fb      	strh	r3, [r7, #6]
 80140c4:	e027      	b.n	8014116 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80140c6:	88fa      	ldrh	r2, [r7, #6]
 80140c8:	8a7b      	ldrh	r3, [r7, #18]
 80140ca:	1ad3      	subs	r3, r2, r3
 80140cc:	b29b      	uxth	r3, r3
 80140ce:	f003 0301 	and.w	r3, r3, #1
 80140d2:	b29b      	uxth	r3, r3
 80140d4:	88fa      	ldrh	r2, [r7, #6]
 80140d6:	1ad3      	subs	r3, r2, r3
 80140d8:	80fb      	strh	r3, [r7, #6]
 80140da:	e01c      	b.n	8014116 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80140dc:	88fb      	ldrh	r3, [r7, #6]
 80140de:	3b10      	subs	r3, #16
 80140e0:	80fb      	strh	r3, [r7, #6]
 80140e2:	e018      	b.n	8014116 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80140e4:	88fb      	ldrh	r3, [r7, #6]
 80140e6:	3b20      	subs	r3, #32
 80140e8:	80fb      	strh	r3, [r7, #6]
 80140ea:	e014      	b.n	8014116 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80140ec:	88fb      	ldrh	r3, [r7, #6]
 80140ee:	3b30      	subs	r3, #48	@ 0x30
 80140f0:	80fb      	strh	r3, [r7, #6]
 80140f2:	e010      	b.n	8014116 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80140f4:	88fb      	ldrh	r3, [r7, #6]
 80140f6:	3b1a      	subs	r3, #26
 80140f8:	80fb      	strh	r3, [r7, #6]
 80140fa:	e00c      	b.n	8014116 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80140fc:	88fb      	ldrh	r3, [r7, #6]
 80140fe:	3308      	adds	r3, #8
 8014100:	80fb      	strh	r3, [r7, #6]
 8014102:	e008      	b.n	8014116 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8014104:	88fb      	ldrh	r3, [r7, #6]
 8014106:	3b50      	subs	r3, #80	@ 0x50
 8014108:	80fb      	strh	r3, [r7, #6]
 801410a:	e004      	b.n	8014116 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801410c:	88fb      	ldrh	r3, [r7, #6]
 801410e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8014112:	80fb      	strh	r3, [r7, #6]
 8014114:	bf00      	nop
			}
			break;
 8014116:	e008      	b.n	801412a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8014118:	89fb      	ldrh	r3, [r7, #14]
 801411a:	2b00      	cmp	r3, #0
 801411c:	d195      	bne.n	801404a <ff_wtoupper+0x1a>
 801411e:	8a3b      	ldrh	r3, [r7, #16]
 8014120:	005b      	lsls	r3, r3, #1
 8014122:	697a      	ldr	r2, [r7, #20]
 8014124:	4413      	add	r3, r2
 8014126:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8014128:	e78f      	b.n	801404a <ff_wtoupper+0x1a>
			break;
 801412a:	bf00      	nop
	}

	return chr;
 801412c:	88fb      	ldrh	r3, [r7, #6]
}
 801412e:	4618      	mov	r0, r3
 8014130:	371c      	adds	r7, #28
 8014132:	46bd      	mov	sp, r7
 8014134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014138:	4770      	bx	lr
 801413a:	bf00      	nop
 801413c:	080146c0 	.word	0x080146c0
 8014140:	080148b4 	.word	0x080148b4

08014144 <memset>:
 8014144:	4402      	add	r2, r0
 8014146:	4603      	mov	r3, r0
 8014148:	4293      	cmp	r3, r2
 801414a:	d100      	bne.n	801414e <memset+0xa>
 801414c:	4770      	bx	lr
 801414e:	f803 1b01 	strb.w	r1, [r3], #1
 8014152:	e7f9      	b.n	8014148 <memset+0x4>

08014154 <__errno>:
 8014154:	4b01      	ldr	r3, [pc, #4]	@ (801415c <__errno+0x8>)
 8014156:	6818      	ldr	r0, [r3, #0]
 8014158:	4770      	bx	lr
 801415a:	bf00      	nop
 801415c:	240000cc 	.word	0x240000cc

08014160 <__libc_init_array>:
 8014160:	b570      	push	{r4, r5, r6, lr}
 8014162:	4d0d      	ldr	r5, [pc, #52]	@ (8014198 <__libc_init_array+0x38>)
 8014164:	4c0d      	ldr	r4, [pc, #52]	@ (801419c <__libc_init_array+0x3c>)
 8014166:	1b64      	subs	r4, r4, r5
 8014168:	10a4      	asrs	r4, r4, #2
 801416a:	2600      	movs	r6, #0
 801416c:	42a6      	cmp	r6, r4
 801416e:	d109      	bne.n	8014184 <__libc_init_array+0x24>
 8014170:	4d0b      	ldr	r5, [pc, #44]	@ (80141a0 <__libc_init_array+0x40>)
 8014172:	4c0c      	ldr	r4, [pc, #48]	@ (80141a4 <__libc_init_array+0x44>)
 8014174:	f000 f954 	bl	8014420 <_init>
 8014178:	1b64      	subs	r4, r4, r5
 801417a:	10a4      	asrs	r4, r4, #2
 801417c:	2600      	movs	r6, #0
 801417e:	42a6      	cmp	r6, r4
 8014180:	d105      	bne.n	801418e <__libc_init_array+0x2e>
 8014182:	bd70      	pop	{r4, r5, r6, pc}
 8014184:	f855 3b04 	ldr.w	r3, [r5], #4
 8014188:	4798      	blx	r3
 801418a:	3601      	adds	r6, #1
 801418c:	e7ee      	b.n	801416c <__libc_init_array+0xc>
 801418e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014192:	4798      	blx	r3
 8014194:	3601      	adds	r6, #1
 8014196:	e7f2      	b.n	801417e <__libc_init_array+0x1e>
 8014198:	08015208 	.word	0x08015208
 801419c:	08015208 	.word	0x08015208
 80141a0:	08015208 	.word	0x08015208
 80141a4:	0801520c 	.word	0x0801520c

080141a8 <memcpy>:
 80141a8:	440a      	add	r2, r1
 80141aa:	4291      	cmp	r1, r2
 80141ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80141b0:	d100      	bne.n	80141b4 <memcpy+0xc>
 80141b2:	4770      	bx	lr
 80141b4:	b510      	push	{r4, lr}
 80141b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80141ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80141be:	4291      	cmp	r1, r2
 80141c0:	d1f9      	bne.n	80141b6 <memcpy+0xe>
 80141c2:	bd10      	pop	{r4, pc}
 80141c4:	0000      	movs	r0, r0
	...

080141c8 <log>:
 80141c8:	b4f0      	push	{r4, r5, r6, r7}
 80141ca:	ee10 0a90 	vmov	r0, s1
 80141ce:	ee10 3a10 	vmov	r3, s0
 80141d2:	f04f 34ff 	mov.w	r4, #4294967295
 80141d6:	429c      	cmp	r4, r3
 80141d8:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 80141dc:	4c70      	ldr	r4, [pc, #448]	@ (80143a0 <log+0x1d8>)
 80141de:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 80141e2:	418c      	sbcs	r4, r1
 80141e4:	ed2d 8b02 	vpush	{d8}
 80141e8:	ea4f 4210 	mov.w	r2, r0, lsr #16
 80141ec:	d35a      	bcc.n	80142a4 <log+0xdc>
 80141ee:	4a6d      	ldr	r2, [pc, #436]	@ (80143a4 <log+0x1dc>)
 80141f0:	4290      	cmp	r0, r2
 80141f2:	bf08      	it	eq
 80141f4:	2b00      	cmpeq	r3, #0
 80141f6:	f000 80c4 	beq.w	8014382 <log+0x1ba>
 80141fa:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 80141fe:	ee30 0b47 	vsub.f64	d0, d0, d7
 8014202:	4b69      	ldr	r3, [pc, #420]	@ (80143a8 <log+0x1e0>)
 8014204:	ee20 2b00 	vmul.f64	d2, d0, d0
 8014208:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 801420c:	ee20 4b02 	vmul.f64	d4, d0, d2
 8014210:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8014214:	eea6 7b00 	vfma.f64	d7, d6, d0
 8014218:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 801421c:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 8014220:	eea6 7b02 	vfma.f64	d7, d6, d2
 8014224:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 8014228:	eea5 6b00 	vfma.f64	d6, d5, d0
 801422c:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 8014230:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 8014234:	eea5 6b02 	vfma.f64	d6, d5, d2
 8014238:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 801423c:	eea3 5b00 	vfma.f64	d5, d3, d0
 8014240:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 8014244:	eea3 5b02 	vfma.f64	d5, d3, d2
 8014248:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 801424c:	eea3 5b04 	vfma.f64	d5, d3, d4
 8014250:	eea5 6b04 	vfma.f64	d6, d5, d4
 8014254:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8014258:	eea6 7b04 	vfma.f64	d7, d6, d4
 801425c:	eeb0 2b47 	vmov.f64	d2, d7
 8014260:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8014388 <log+0x1c0>
 8014264:	eeb0 6b40 	vmov.f64	d6, d0
 8014268:	eeb0 3b40 	vmov.f64	d3, d0
 801426c:	eea0 6b07 	vfma.f64	d6, d0, d7
 8014270:	eea0 6b47 	vfms.f64	d6, d0, d7
 8014274:	ee30 8b46 	vsub.f64	d8, d0, d6
 8014278:	ee26 1b06 	vmul.f64	d1, d6, d6
 801427c:	eea1 3b05 	vfma.f64	d3, d1, d5
 8014280:	ee30 7b43 	vsub.f64	d7, d0, d3
 8014284:	ee30 0b06 	vadd.f64	d0, d0, d6
 8014288:	eea1 7b05 	vfma.f64	d7, d1, d5
 801428c:	ee25 5b08 	vmul.f64	d5, d5, d8
 8014290:	eea5 7b00 	vfma.f64	d7, d5, d0
 8014294:	eea2 7b04 	vfma.f64	d7, d2, d4
 8014298:	ee33 0b07 	vadd.f64	d0, d3, d7
 801429c:	ecbd 8b02 	vpop	{d8}
 80142a0:	bcf0      	pop	{r4, r5, r6, r7}
 80142a2:	4770      	bx	lr
 80142a4:	f1a2 0410 	sub.w	r4, r2, #16
 80142a8:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 80142ac:	428c      	cmp	r4, r1
 80142ae:	d923      	bls.n	80142f8 <log+0x130>
 80142b0:	18d9      	adds	r1, r3, r3
 80142b2:	eb40 0400 	adc.w	r4, r0, r0
 80142b6:	4321      	orrs	r1, r4
 80142b8:	d105      	bne.n	80142c6 <log+0xfe>
 80142ba:	ecbd 8b02 	vpop	{d8}
 80142be:	2001      	movs	r0, #1
 80142c0:	bcf0      	pop	{r4, r5, r6, r7}
 80142c2:	f000 b885 	b.w	80143d0 <__math_divzero>
 80142c6:	4939      	ldr	r1, [pc, #228]	@ (80143ac <log+0x1e4>)
 80142c8:	4288      	cmp	r0, r1
 80142ca:	bf08      	it	eq
 80142cc:	2b00      	cmpeq	r3, #0
 80142ce:	d0e5      	beq.n	801429c <log+0xd4>
 80142d0:	0413      	lsls	r3, r2, #16
 80142d2:	d403      	bmi.n	80142dc <log+0x114>
 80142d4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80142d8:	4393      	bics	r3, r2
 80142da:	d104      	bne.n	80142e6 <log+0x11e>
 80142dc:	ecbd 8b02 	vpop	{d8}
 80142e0:	bcf0      	pop	{r4, r5, r6, r7}
 80142e2:	f000 b88d 	b.w	8014400 <__math_invalid>
 80142e6:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8014390 <log+0x1c8>
 80142ea:	ee20 7b07 	vmul.f64	d7, d0, d7
 80142ee:	ec53 2b17 	vmov	r2, r3, d7
 80142f2:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 80142f6:	4613      	mov	r3, r2
 80142f8:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 80142fc:	492a      	ldr	r1, [pc, #168]	@ (80143a8 <log+0x1e0>)
 80142fe:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 8014302:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 8014306:	f3c2 3446 	ubfx	r4, r2, #13, #7
 801430a:	0d15      	lsrs	r5, r2, #20
 801430c:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 8014310:	052d      	lsls	r5, r5, #20
 8014312:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 8014316:	1e1e      	subs	r6, r3, #0
 8014318:	1b47      	subs	r7, r0, r5
 801431a:	ec47 6b16 	vmov	d6, r6, r7
 801431e:	1512      	asrs	r2, r2, #20
 8014320:	eea7 5b06 	vfma.f64	d5, d7, d6
 8014324:	ee07 2a90 	vmov	s15, r2
 8014328:	ee25 2b05 	vmul.f64	d2, d5, d5
 801432c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8014330:	ed91 4b00 	vldr	d4, [r1]
 8014334:	ee25 1b02 	vmul.f64	d1, d5, d2
 8014338:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 801433c:	eea4 7b06 	vfma.f64	d7, d4, d6
 8014340:	ee35 4b07 	vadd.f64	d4, d5, d7
 8014344:	ee37 0b44 	vsub.f64	d0, d7, d4
 8014348:	ed91 7b02 	vldr	d7, [r1, #8]
 801434c:	ee30 0b05 	vadd.f64	d0, d0, d5
 8014350:	eea7 0b06 	vfma.f64	d0, d7, d6
 8014354:	ed91 7b04 	vldr	d7, [r1, #16]
 8014358:	ed91 6b08 	vldr	d6, [r1, #32]
 801435c:	eea7 0b02 	vfma.f64	d0, d7, d2
 8014360:	ed91 7b06 	vldr	d7, [r1, #24]
 8014364:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 8014368:	eea6 7b05 	vfma.f64	d7, d6, d5
 801436c:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8014370:	eea3 6b05 	vfma.f64	d6, d3, d5
 8014374:	eea6 7b02 	vfma.f64	d7, d6, d2
 8014378:	eea1 0b07 	vfma.f64	d0, d1, d7
 801437c:	ee30 0b04 	vadd.f64	d0, d0, d4
 8014380:	e78c      	b.n	801429c <log+0xd4>
 8014382:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8014398 <log+0x1d0>
 8014386:	e789      	b.n	801429c <log+0xd4>
 8014388:	00000000 	.word	0x00000000
 801438c:	41a00000 	.word	0x41a00000
 8014390:	00000000 	.word	0x00000000
 8014394:	43300000 	.word	0x43300000
	...
 80143a0:	000308ff 	.word	0x000308ff
 80143a4:	3ff00000 	.word	0x3ff00000
 80143a8:	08014970 	.word	0x08014970
 80143ac:	7ff00000 	.word	0x7ff00000

080143b0 <with_errno>:
 80143b0:	b510      	push	{r4, lr}
 80143b2:	ed2d 8b02 	vpush	{d8}
 80143b6:	eeb0 8b40 	vmov.f64	d8, d0
 80143ba:	4604      	mov	r4, r0
 80143bc:	f7ff feca 	bl	8014154 <__errno>
 80143c0:	eeb0 0b48 	vmov.f64	d0, d8
 80143c4:	ecbd 8b02 	vpop	{d8}
 80143c8:	6004      	str	r4, [r0, #0]
 80143ca:	bd10      	pop	{r4, pc}
 80143cc:	0000      	movs	r0, r0
	...

080143d0 <__math_divzero>:
 80143d0:	b082      	sub	sp, #8
 80143d2:	2800      	cmp	r0, #0
 80143d4:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80143d8:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 80143dc:	fe07 7b06 	vseleq.f64	d7, d7, d6
 80143e0:	ed8d 7b00 	vstr	d7, [sp]
 80143e4:	ed9d 0b00 	vldr	d0, [sp]
 80143e8:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 80143f8 <__math_divzero+0x28>
 80143ec:	2022      	movs	r0, #34	@ 0x22
 80143ee:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80143f2:	b002      	add	sp, #8
 80143f4:	f7ff bfdc 	b.w	80143b0 <with_errno>
	...

08014400 <__math_invalid>:
 8014400:	eeb0 7b40 	vmov.f64	d7, d0
 8014404:	eeb4 7b47 	vcmp.f64	d7, d7
 8014408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801440c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8014410:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8014414:	d602      	bvs.n	801441c <__math_invalid+0x1c>
 8014416:	2021      	movs	r0, #33	@ 0x21
 8014418:	f7ff bfca 	b.w	80143b0 <with_errno>
 801441c:	4770      	bx	lr
	...

08014420 <_init>:
 8014420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014422:	bf00      	nop
 8014424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014426:	bc08      	pop	{r3}
 8014428:	469e      	mov	lr, r3
 801442a:	4770      	bx	lr

0801442c <_fini>:
 801442c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801442e:	bf00      	nop
 8014430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014432:	bc08      	pop	{r3}
 8014434:	469e      	mov	lr, r3
 8014436:	4770      	bx	lr
