
Controladora-de-vuelo-V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000199a0  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d90  08019c50  08019c50  0001ac50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a9e0  0801a9e0  0001b9e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a9e8  0801a9e8  0001b9e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801a9ec  0801a9ec  0001b9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000290  24000000  0801a9f0  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000066b4  24000290  0801ac80  0001c290  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24006944  0801ac80  0001c944  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001c290  2**0
                  CONTENTS, READONLY
 10 .debug_info   00035578  00000000  00000000  0001c2be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007c5e  00000000  00000000  00051836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002938  00000000  00000000  00059498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001fbe  00000000  00000000  0005bdd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d7e8  00000000  00000000  0005dd8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000416c9  00000000  00000000  0009b576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00161690  00000000  00000000  000dcc3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0023e2cf  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bb88  00000000  00000000  0023e314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006a  00000000  00000000  00249e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000290 	.word	0x24000290
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08019c38 	.word	0x08019c38

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000294 	.word	0x24000294
 80002ec:	08019c38 	.word	0x08019c38

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_ldivmod>:
 8000728:	b97b      	cbnz	r3, 800074a <__aeabi_ldivmod+0x22>
 800072a:	b972      	cbnz	r2, 800074a <__aeabi_ldivmod+0x22>
 800072c:	2900      	cmp	r1, #0
 800072e:	bfbe      	ittt	lt
 8000730:	2000      	movlt	r0, #0
 8000732:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000736:	e006      	blt.n	8000746 <__aeabi_ldivmod+0x1e>
 8000738:	bf08      	it	eq
 800073a:	2800      	cmpeq	r0, #0
 800073c:	bf1c      	itt	ne
 800073e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000742:	f04f 30ff 	movne.w	r0, #4294967295
 8000746:	f000 b9ed 	b.w	8000b24 <__aeabi_idiv0>
 800074a:	f1ad 0c08 	sub.w	ip, sp, #8
 800074e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000752:	2900      	cmp	r1, #0
 8000754:	db09      	blt.n	800076a <__aeabi_ldivmod+0x42>
 8000756:	2b00      	cmp	r3, #0
 8000758:	db1a      	blt.n	8000790 <__aeabi_ldivmod+0x68>
 800075a:	f000 f885 	bl	8000868 <__udivmoddi4>
 800075e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000762:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000766:	b004      	add	sp, #16
 8000768:	4770      	bx	lr
 800076a:	4240      	negs	r0, r0
 800076c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000770:	2b00      	cmp	r3, #0
 8000772:	db1b      	blt.n	80007ac <__aeabi_ldivmod+0x84>
 8000774:	f000 f878 	bl	8000868 <__udivmoddi4>
 8000778:	f8dd e004 	ldr.w	lr, [sp, #4]
 800077c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000780:	b004      	add	sp, #16
 8000782:	4240      	negs	r0, r0
 8000784:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000788:	4252      	negs	r2, r2
 800078a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800078e:	4770      	bx	lr
 8000790:	4252      	negs	r2, r2
 8000792:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000796:	f000 f867 	bl	8000868 <__udivmoddi4>
 800079a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800079e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007a2:	b004      	add	sp, #16
 80007a4:	4240      	negs	r0, r0
 80007a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007aa:	4770      	bx	lr
 80007ac:	4252      	negs	r2, r2
 80007ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007b2:	f000 f859 	bl	8000868 <__udivmoddi4>
 80007b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007be:	b004      	add	sp, #16
 80007c0:	4252      	negs	r2, r2
 80007c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007c6:	4770      	bx	lr

080007c8 <__aeabi_uldivmod>:
 80007c8:	b953      	cbnz	r3, 80007e0 <__aeabi_uldivmod+0x18>
 80007ca:	b94a      	cbnz	r2, 80007e0 <__aeabi_uldivmod+0x18>
 80007cc:	2900      	cmp	r1, #0
 80007ce:	bf08      	it	eq
 80007d0:	2800      	cmpeq	r0, #0
 80007d2:	bf1c      	itt	ne
 80007d4:	f04f 31ff 	movne.w	r1, #4294967295
 80007d8:	f04f 30ff 	movne.w	r0, #4294967295
 80007dc:	f000 b9a2 	b.w	8000b24 <__aeabi_idiv0>
 80007e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007e8:	f000 f83e 	bl	8000868 <__udivmoddi4>
 80007ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f4:	b004      	add	sp, #16
 80007f6:	4770      	bx	lr

080007f8 <__aeabi_d2lz>:
 80007f8:	b508      	push	{r3, lr}
 80007fa:	4602      	mov	r2, r0
 80007fc:	460b      	mov	r3, r1
 80007fe:	ec43 2b17 	vmov	d7, r2, r3
 8000802:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800080a:	d403      	bmi.n	8000814 <__aeabi_d2lz+0x1c>
 800080c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000810:	f000 b80a 	b.w	8000828 <__aeabi_d2ulz>
 8000814:	eeb1 7b47 	vneg.f64	d7, d7
 8000818:	ec51 0b17 	vmov	r0, r1, d7
 800081c:	f000 f804 	bl	8000828 <__aeabi_d2ulz>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	bd08      	pop	{r3, pc}

08000828 <__aeabi_d2ulz>:
 8000828:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000858 <__aeabi_d2ulz+0x30>
 800082c:	ec41 0b17 	vmov	d7, r0, r1
 8000830:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000860 <__aeabi_d2ulz+0x38>
 8000834:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000838:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800083c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000840:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000844:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000848:	ee16 1a10 	vmov	r1, s12
 800084c:	ee17 0a90 	vmov	r0, s15
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	f3af 8000 	nop.w
 8000858:	00000000 	.word	0x00000000
 800085c:	3df00000 	.word	0x3df00000
 8000860:	00000000 	.word	0x00000000
 8000864:	41f00000 	.word	0x41f00000

08000868 <__udivmoddi4>:
 8000868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800086c:	9d08      	ldr	r5, [sp, #32]
 800086e:	460c      	mov	r4, r1
 8000870:	2b00      	cmp	r3, #0
 8000872:	d14e      	bne.n	8000912 <__udivmoddi4+0xaa>
 8000874:	4694      	mov	ip, r2
 8000876:	458c      	cmp	ip, r1
 8000878:	4686      	mov	lr, r0
 800087a:	fab2 f282 	clz	r2, r2
 800087e:	d962      	bls.n	8000946 <__udivmoddi4+0xde>
 8000880:	b14a      	cbz	r2, 8000896 <__udivmoddi4+0x2e>
 8000882:	f1c2 0320 	rsb	r3, r2, #32
 8000886:	4091      	lsls	r1, r2
 8000888:	fa20 f303 	lsr.w	r3, r0, r3
 800088c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000890:	4319      	orrs	r1, r3
 8000892:	fa00 fe02 	lsl.w	lr, r0, r2
 8000896:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800089a:	fa1f f68c 	uxth.w	r6, ip
 800089e:	fbb1 f4f7 	udiv	r4, r1, r7
 80008a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a6:	fb07 1114 	mls	r1, r7, r4, r1
 80008aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ae:	fb04 f106 	mul.w	r1, r4, r6
 80008b2:	4299      	cmp	r1, r3
 80008b4:	d90a      	bls.n	80008cc <__udivmoddi4+0x64>
 80008b6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80008be:	f080 8112 	bcs.w	8000ae6 <__udivmoddi4+0x27e>
 80008c2:	4299      	cmp	r1, r3
 80008c4:	f240 810f 	bls.w	8000ae6 <__udivmoddi4+0x27e>
 80008c8:	3c02      	subs	r4, #2
 80008ca:	4463      	add	r3, ip
 80008cc:	1a59      	subs	r1, r3, r1
 80008ce:	fa1f f38e 	uxth.w	r3, lr
 80008d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80008d6:	fb07 1110 	mls	r1, r7, r0, r1
 80008da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008de:	fb00 f606 	mul.w	r6, r0, r6
 80008e2:	429e      	cmp	r6, r3
 80008e4:	d90a      	bls.n	80008fc <__udivmoddi4+0x94>
 80008e6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80008ee:	f080 80fc 	bcs.w	8000aea <__udivmoddi4+0x282>
 80008f2:	429e      	cmp	r6, r3
 80008f4:	f240 80f9 	bls.w	8000aea <__udivmoddi4+0x282>
 80008f8:	4463      	add	r3, ip
 80008fa:	3802      	subs	r0, #2
 80008fc:	1b9b      	subs	r3, r3, r6
 80008fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000902:	2100      	movs	r1, #0
 8000904:	b11d      	cbz	r5, 800090e <__udivmoddi4+0xa6>
 8000906:	40d3      	lsrs	r3, r2
 8000908:	2200      	movs	r2, #0
 800090a:	e9c5 3200 	strd	r3, r2, [r5]
 800090e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000912:	428b      	cmp	r3, r1
 8000914:	d905      	bls.n	8000922 <__udivmoddi4+0xba>
 8000916:	b10d      	cbz	r5, 800091c <__udivmoddi4+0xb4>
 8000918:	e9c5 0100 	strd	r0, r1, [r5]
 800091c:	2100      	movs	r1, #0
 800091e:	4608      	mov	r0, r1
 8000920:	e7f5      	b.n	800090e <__udivmoddi4+0xa6>
 8000922:	fab3 f183 	clz	r1, r3
 8000926:	2900      	cmp	r1, #0
 8000928:	d146      	bne.n	80009b8 <__udivmoddi4+0x150>
 800092a:	42a3      	cmp	r3, r4
 800092c:	d302      	bcc.n	8000934 <__udivmoddi4+0xcc>
 800092e:	4290      	cmp	r0, r2
 8000930:	f0c0 80f0 	bcc.w	8000b14 <__udivmoddi4+0x2ac>
 8000934:	1a86      	subs	r6, r0, r2
 8000936:	eb64 0303 	sbc.w	r3, r4, r3
 800093a:	2001      	movs	r0, #1
 800093c:	2d00      	cmp	r5, #0
 800093e:	d0e6      	beq.n	800090e <__udivmoddi4+0xa6>
 8000940:	e9c5 6300 	strd	r6, r3, [r5]
 8000944:	e7e3      	b.n	800090e <__udivmoddi4+0xa6>
 8000946:	2a00      	cmp	r2, #0
 8000948:	f040 8090 	bne.w	8000a6c <__udivmoddi4+0x204>
 800094c:	eba1 040c 	sub.w	r4, r1, ip
 8000950:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000954:	fa1f f78c 	uxth.w	r7, ip
 8000958:	2101      	movs	r1, #1
 800095a:	fbb4 f6f8 	udiv	r6, r4, r8
 800095e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000962:	fb08 4416 	mls	r4, r8, r6, r4
 8000966:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800096a:	fb07 f006 	mul.w	r0, r7, r6
 800096e:	4298      	cmp	r0, r3
 8000970:	d908      	bls.n	8000984 <__udivmoddi4+0x11c>
 8000972:	eb1c 0303 	adds.w	r3, ip, r3
 8000976:	f106 34ff 	add.w	r4, r6, #4294967295
 800097a:	d202      	bcs.n	8000982 <__udivmoddi4+0x11a>
 800097c:	4298      	cmp	r0, r3
 800097e:	f200 80cd 	bhi.w	8000b1c <__udivmoddi4+0x2b4>
 8000982:	4626      	mov	r6, r4
 8000984:	1a1c      	subs	r4, r3, r0
 8000986:	fa1f f38e 	uxth.w	r3, lr
 800098a:	fbb4 f0f8 	udiv	r0, r4, r8
 800098e:	fb08 4410 	mls	r4, r8, r0, r4
 8000992:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000996:	fb00 f707 	mul.w	r7, r0, r7
 800099a:	429f      	cmp	r7, r3
 800099c:	d908      	bls.n	80009b0 <__udivmoddi4+0x148>
 800099e:	eb1c 0303 	adds.w	r3, ip, r3
 80009a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0x146>
 80009a8:	429f      	cmp	r7, r3
 80009aa:	f200 80b0 	bhi.w	8000b0e <__udivmoddi4+0x2a6>
 80009ae:	4620      	mov	r0, r4
 80009b0:	1bdb      	subs	r3, r3, r7
 80009b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009b6:	e7a5      	b.n	8000904 <__udivmoddi4+0x9c>
 80009b8:	f1c1 0620 	rsb	r6, r1, #32
 80009bc:	408b      	lsls	r3, r1
 80009be:	fa22 f706 	lsr.w	r7, r2, r6
 80009c2:	431f      	orrs	r7, r3
 80009c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80009c8:	fa04 f301 	lsl.w	r3, r4, r1
 80009cc:	ea43 030c 	orr.w	r3, r3, ip
 80009d0:	40f4      	lsrs	r4, r6
 80009d2:	fa00 f801 	lsl.w	r8, r0, r1
 80009d6:	0c38      	lsrs	r0, r7, #16
 80009d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009dc:	fbb4 fef0 	udiv	lr, r4, r0
 80009e0:	fa1f fc87 	uxth.w	ip, r7
 80009e4:	fb00 441e 	mls	r4, r0, lr, r4
 80009e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009ec:	fb0e f90c 	mul.w	r9, lr, ip
 80009f0:	45a1      	cmp	r9, r4
 80009f2:	fa02 f201 	lsl.w	r2, r2, r1
 80009f6:	d90a      	bls.n	8000a0e <__udivmoddi4+0x1a6>
 80009f8:	193c      	adds	r4, r7, r4
 80009fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009fe:	f080 8084 	bcs.w	8000b0a <__udivmoddi4+0x2a2>
 8000a02:	45a1      	cmp	r9, r4
 8000a04:	f240 8081 	bls.w	8000b0a <__udivmoddi4+0x2a2>
 8000a08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a0c:	443c      	add	r4, r7
 8000a0e:	eba4 0409 	sub.w	r4, r4, r9
 8000a12:	fa1f f983 	uxth.w	r9, r3
 8000a16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000a1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a26:	45a4      	cmp	ip, r4
 8000a28:	d907      	bls.n	8000a3a <__udivmoddi4+0x1d2>
 8000a2a:	193c      	adds	r4, r7, r4
 8000a2c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a30:	d267      	bcs.n	8000b02 <__udivmoddi4+0x29a>
 8000a32:	45a4      	cmp	ip, r4
 8000a34:	d965      	bls.n	8000b02 <__udivmoddi4+0x29a>
 8000a36:	3b02      	subs	r3, #2
 8000a38:	443c      	add	r4, r7
 8000a3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000a42:	eba4 040c 	sub.w	r4, r4, ip
 8000a46:	429c      	cmp	r4, r3
 8000a48:	46ce      	mov	lr, r9
 8000a4a:	469c      	mov	ip, r3
 8000a4c:	d351      	bcc.n	8000af2 <__udivmoddi4+0x28a>
 8000a4e:	d04e      	beq.n	8000aee <__udivmoddi4+0x286>
 8000a50:	b155      	cbz	r5, 8000a68 <__udivmoddi4+0x200>
 8000a52:	ebb8 030e 	subs.w	r3, r8, lr
 8000a56:	eb64 040c 	sbc.w	r4, r4, ip
 8000a5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000a5e:	40cb      	lsrs	r3, r1
 8000a60:	431e      	orrs	r6, r3
 8000a62:	40cc      	lsrs	r4, r1
 8000a64:	e9c5 6400 	strd	r6, r4, [r5]
 8000a68:	2100      	movs	r1, #0
 8000a6a:	e750      	b.n	800090e <__udivmoddi4+0xa6>
 8000a6c:	f1c2 0320 	rsb	r3, r2, #32
 8000a70:	fa20 f103 	lsr.w	r1, r0, r3
 8000a74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a78:	fa24 f303 	lsr.w	r3, r4, r3
 8000a7c:	4094      	lsls	r4, r2
 8000a7e:	430c      	orrs	r4, r1
 8000a80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a88:	fa1f f78c 	uxth.w	r7, ip
 8000a8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a90:	fb08 3110 	mls	r1, r8, r0, r3
 8000a94:	0c23      	lsrs	r3, r4, #16
 8000a96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a9a:	fb00 f107 	mul.w	r1, r0, r7
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	d908      	bls.n	8000ab4 <__udivmoddi4+0x24c>
 8000aa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000aaa:	d22c      	bcs.n	8000b06 <__udivmoddi4+0x29e>
 8000aac:	4299      	cmp	r1, r3
 8000aae:	d92a      	bls.n	8000b06 <__udivmoddi4+0x29e>
 8000ab0:	3802      	subs	r0, #2
 8000ab2:	4463      	add	r3, ip
 8000ab4:	1a5b      	subs	r3, r3, r1
 8000ab6:	b2a4      	uxth	r4, r4
 8000ab8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000abc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ac0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac4:	fb01 f307 	mul.w	r3, r1, r7
 8000ac8:	42a3      	cmp	r3, r4
 8000aca:	d908      	bls.n	8000ade <__udivmoddi4+0x276>
 8000acc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ad0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ad4:	d213      	bcs.n	8000afe <__udivmoddi4+0x296>
 8000ad6:	42a3      	cmp	r3, r4
 8000ad8:	d911      	bls.n	8000afe <__udivmoddi4+0x296>
 8000ada:	3902      	subs	r1, #2
 8000adc:	4464      	add	r4, ip
 8000ade:	1ae4      	subs	r4, r4, r3
 8000ae0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ae4:	e739      	b.n	800095a <__udivmoddi4+0xf2>
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	e6f0      	b.n	80008cc <__udivmoddi4+0x64>
 8000aea:	4608      	mov	r0, r1
 8000aec:	e706      	b.n	80008fc <__udivmoddi4+0x94>
 8000aee:	45c8      	cmp	r8, r9
 8000af0:	d2ae      	bcs.n	8000a50 <__udivmoddi4+0x1e8>
 8000af2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000af6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000afa:	3801      	subs	r0, #1
 8000afc:	e7a8      	b.n	8000a50 <__udivmoddi4+0x1e8>
 8000afe:	4631      	mov	r1, r6
 8000b00:	e7ed      	b.n	8000ade <__udivmoddi4+0x276>
 8000b02:	4603      	mov	r3, r0
 8000b04:	e799      	b.n	8000a3a <__udivmoddi4+0x1d2>
 8000b06:	4630      	mov	r0, r6
 8000b08:	e7d4      	b.n	8000ab4 <__udivmoddi4+0x24c>
 8000b0a:	46d6      	mov	lr, sl
 8000b0c:	e77f      	b.n	8000a0e <__udivmoddi4+0x1a6>
 8000b0e:	4463      	add	r3, ip
 8000b10:	3802      	subs	r0, #2
 8000b12:	e74d      	b.n	80009b0 <__udivmoddi4+0x148>
 8000b14:	4606      	mov	r6, r0
 8000b16:	4623      	mov	r3, r4
 8000b18:	4608      	mov	r0, r1
 8000b1a:	e70f      	b.n	800093c <__udivmoddi4+0xd4>
 8000b1c:	3e02      	subs	r6, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	e730      	b.n	8000984 <__udivmoddi4+0x11c>
 8000b22:	bf00      	nop

08000b24 <__aeabi_idiv0>:
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <LPF_cmd_filter_init>:
float COF_cmds[4];
Servo_reverse_s Reverse ;


void LPF_cmd_filter_init(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
	//
	COF_cmds[0] = CutOffFreq_cmd_ail;
 8000b2e:	4b40      	ldr	r3, [pc, #256]	@ (8000c30 <LPF_cmd_filter_init+0x108>)
 8000b30:	4a40      	ldr	r2, [pc, #256]	@ (8000c34 <LPF_cmd_filter_init+0x10c>)
 8000b32:	601a      	str	r2, [r3, #0]
	COF_cmds[1] = CutOffFreq_cmd_ele;
 8000b34:	4b3e      	ldr	r3, [pc, #248]	@ (8000c30 <LPF_cmd_filter_init+0x108>)
 8000b36:	4a3f      	ldr	r2, [pc, #252]	@ (8000c34 <LPF_cmd_filter_init+0x10c>)
 8000b38:	605a      	str	r2, [r3, #4]
	COF_cmds[2] = CutOffFreq_cmd_rud;
 8000b3a:	4b3d      	ldr	r3, [pc, #244]	@ (8000c30 <LPF_cmd_filter_init+0x108>)
 8000b3c:	4a3d      	ldr	r2, [pc, #244]	@ (8000c34 <LPF_cmd_filter_init+0x10c>)
 8000b3e:	609a      	str	r2, [r3, #8]
	COF_cmds[3] = CutOffFreq_cmd_thr;
 8000b40:	4b3b      	ldr	r3, [pc, #236]	@ (8000c30 <LPF_cmd_filter_init+0x108>)
 8000b42:	4a3c      	ldr	r2, [pc, #240]	@ (8000c34 <LPF_cmd_filter_init+0x10c>)
 8000b44:	60da      	str	r2, [r3, #12]
	for(int idx = 0; idx < 4; idx++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	e066      	b.n	8000c1a <LPF_cmd_filter_init+0xf2>
	{
		//
		commands_fltrs[idx].inicio 		= 1;
 8000b4c:	4a3a      	ldr	r2, [pc, #232]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	212c      	movs	r1, #44	@ 0x2c
 8000b52:	fb01 f303 	mul.w	r3, r1, r3
 8000b56:	4413      	add	r3, r2
 8000b58:	3328      	adds	r3, #40	@ 0x28
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx].f_cutoff 	= COF_cmds[idx];
 8000b5e:	4a34      	ldr	r2, [pc, #208]	@ (8000c30 <LPF_cmd_filter_init+0x108>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	4413      	add	r3, r2
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4933      	ldr	r1, [pc, #204]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	202c      	movs	r0, #44	@ 0x2c
 8000b6e:	fb00 f303 	mul.w	r3, r0, r3
 8000b72:	440b      	add	r3, r1
 8000b74:	3318      	adds	r3, #24
 8000b76:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx].t_sample 	= SAMPLE_ATT ;
 8000b78:	4a2f      	ldr	r2, [pc, #188]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	212c      	movs	r1, #44	@ 0x2c
 8000b7e:	fb01 f303 	mul.w	r3, r1, r3
 8000b82:	4413      	add	r3, r2
 8000b84:	331c      	adds	r3, #28
 8000b86:	4a2d      	ldr	r2, [pc, #180]	@ (8000c3c <LPF_cmd_filter_init+0x114>)
 8000b88:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx].Y_0 		= 0.0f ;
 8000b8a:	4a2b      	ldr	r2, [pc, #172]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	212c      	movs	r1, #44	@ 0x2c
 8000b90:	fb01 f303 	mul.w	r3, r1, r3
 8000b94:	4413      	add	r3, r2
 8000b96:	3308      	adds	r3, #8
 8000b98:	f04f 0200 	mov.w	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx].U_n 		= 0.0f ;
 8000b9e:	4a26      	ldr	r2, [pc, #152]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	212c      	movs	r1, #44	@ 0x2c
 8000ba4:	fb01 f303 	mul.w	r3, r1, r3
 8000ba8:	4413      	add	r3, r2
 8000baa:	330c      	adds	r3, #12
 8000bac:	f04f 0200 	mov.w	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx].Y_n 		= 0.0f ;
 8000bb2:	4a21      	ldr	r2, [pc, #132]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	212c      	movs	r1, #44	@ 0x2c
 8000bb8:	fb01 f303 	mul.w	r3, r1, r3
 8000bbc:	4413      	add	r3, r2
 8000bbe:	f04f 0200 	mov.w	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx].Y_nm1 		= 0.0f ;
 8000bc4:	4a1c      	ldr	r2, [pc, #112]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	212c      	movs	r1, #44	@ 0x2c
 8000bca:	fb01 f303 	mul.w	r3, r1, r3
 8000bce:	4413      	add	r3, r2
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	f04f 0200 	mov.w	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx].U_nm1 		= 0.0f ;
 8000bd8:	4a17      	ldr	r2, [pc, #92]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	212c      	movs	r1, #44	@ 0x2c
 8000bde:	fb01 f303 	mul.w	r3, r1, r3
 8000be2:	4413      	add	r3, r2
 8000be4:	3310      	adds	r3, #16
 8000be6:	f04f 0200 	mov.w	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx].t_n 		= 0.0f ;
 8000bec:	4a12      	ldr	r2, [pc, #72]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	212c      	movs	r1, #44	@ 0x2c
 8000bf2:	fb01 f303 	mul.w	r3, r1, r3
 8000bf6:	4413      	add	r3, r2
 8000bf8:	3320      	adds	r3, #32
 8000bfa:	f04f 0200 	mov.w	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx].t_nm1 		= 0.0f ;
 8000c00:	4a0d      	ldr	r2, [pc, #52]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	212c      	movs	r1, #44	@ 0x2c
 8000c06:	fb01 f303 	mul.w	r3, r1, r3
 8000c0a:	4413      	add	r3, r2
 8000c0c:	3324      	adds	r3, #36	@ 0x24
 8000c0e:	f04f 0200 	mov.w	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
	for(int idx = 0; idx < 4; idx++)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3301      	adds	r3, #1
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	dd95      	ble.n	8000b4c <LPF_cmd_filter_init+0x24>
	}
}
 8000c20:	bf00      	nop
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	240003a0 	.word	0x240003a0
 8000c34:	42480000 	.word	0x42480000
 8000c38:	240002f0 	.word	0x240002f0
 8000c3c:	3ba3d70a 	.word	0x3ba3d70a

08000c40 <command_filtering>:

void command_filtering(void)
{
 8000c40:	b5b0      	push	{r4, r5, r7, lr}
 8000c42:	b08e      	sub	sp, #56	@ 0x38
 8000c44:	af00      	add	r7, sp, #0
	//
	commands_noise[0] = Command_out.roll   ;
 8000c46:	4b2b      	ldr	r3, [pc, #172]	@ (8000cf4 <command_filtering+0xb4>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a2b      	ldr	r2, [pc, #172]	@ (8000cf8 <command_filtering+0xb8>)
 8000c4c:	6013      	str	r3, [r2, #0]
	commands_noise[1] = Command_out.pitch  ;
 8000c4e:	4b29      	ldr	r3, [pc, #164]	@ (8000cf4 <command_filtering+0xb4>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	4a29      	ldr	r2, [pc, #164]	@ (8000cf8 <command_filtering+0xb8>)
 8000c54:	6053      	str	r3, [r2, #4]
	commands_noise[2] = Command_out.yaw    ;
 8000c56:	4b27      	ldr	r3, [pc, #156]	@ (8000cf4 <command_filtering+0xb4>)
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	4a27      	ldr	r2, [pc, #156]	@ (8000cf8 <command_filtering+0xb8>)
 8000c5c:	6093      	str	r3, [r2, #8]
	commands_noise[3] = Command_out.thrust ;
 8000c5e:	4b25      	ldr	r3, [pc, #148]	@ (8000cf4 <command_filtering+0xb4>)
 8000c60:	68db      	ldr	r3, [r3, #12]
 8000c62:	4a25      	ldr	r2, [pc, #148]	@ (8000cf8 <command_filtering+0xb8>)
 8000c64:	60d3      	str	r3, [r2, #12]

	for(int idx = 0; idx < 4; idx++)
 8000c66:	2300      	movs	r3, #0
 8000c68:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c6a:	e02a      	b.n	8000cc2 <command_filtering+0x82>
	{
		//
		commands_fltrs[idx].U_n 	= commands_noise[idx];
 8000c6c:	4a22      	ldr	r2, [pc, #136]	@ (8000cf8 <command_filtering+0xb8>)
 8000c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	4413      	add	r3, r2
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	4921      	ldr	r1, [pc, #132]	@ (8000cfc <command_filtering+0xbc>)
 8000c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c7a:	202c      	movs	r0, #44	@ 0x2c
 8000c7c:	fb00 f303 	mul.w	r3, r0, r3
 8000c80:	440b      	add	r3, r1
 8000c82:	330c      	adds	r3, #12
 8000c84:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx] 		= filtering_lpf(&commands_fltrs[idx]);
 8000c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c88:	222c      	movs	r2, #44	@ 0x2c
 8000c8a:	fb02 f303 	mul.w	r3, r2, r3
 8000c8e:	4a1b      	ldr	r2, [pc, #108]	@ (8000cfc <command_filtering+0xbc>)
 8000c90:	441a      	add	r2, r3
 8000c92:	491a      	ldr	r1, [pc, #104]	@ (8000cfc <command_filtering+0xbc>)
 8000c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c96:	202c      	movs	r0, #44	@ 0x2c
 8000c98:	fb00 f303 	mul.w	r3, r0, r3
 8000c9c:	18cc      	adds	r4, r1, r3
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	4611      	mov	r1, r2
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f001 f98e 	bl	8001fc4 <filtering_lpf>
 8000ca8:	4625      	mov	r5, r4
 8000caa:	463c      	mov	r4, r7
 8000cac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cb4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000cb8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	for(int idx = 0; idx < 4; idx++)
 8000cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8000cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cc4:	2b03      	cmp	r3, #3
 8000cc6:	ddd1      	ble.n	8000c6c <command_filtering+0x2c>

	}
	//
	Commands.roll 		= 	commands_fltrs[0].Y_n ;
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <command_filtering+0xbc>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0c      	ldr	r2, [pc, #48]	@ (8000d00 <command_filtering+0xc0>)
 8000cce:	6013      	str	r3, [r2, #0]
	Commands.pitch 		= 	commands_fltrs[1].Y_n ;
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cfc <command_filtering+0xbc>)
 8000cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8000d00 <command_filtering+0xc0>)
 8000cd6:	6053      	str	r3, [r2, #4]
	Commands.yaw 		= 	commands_fltrs[2].Y_n ;
 8000cd8:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <command_filtering+0xbc>)
 8000cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cdc:	4a08      	ldr	r2, [pc, #32]	@ (8000d00 <command_filtering+0xc0>)
 8000cde:	6093      	str	r3, [r2, #8]
	Commands.thrust 	= 	commands_fltrs[3].Y_n ;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <command_filtering+0xbc>)
 8000ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000ce6:	4a06      	ldr	r2, [pc, #24]	@ (8000d00 <command_filtering+0xc0>)
 8000ce8:	60d3      	str	r3, [r2, #12]


}
 8000cea:	bf00      	nop
 8000cec:	3738      	adds	r7, #56	@ 0x38
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bdb0      	pop	{r4, r5, r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	240002b0 	.word	0x240002b0
 8000cf8:	240002e0 	.word	0x240002e0
 8000cfc:	240002f0 	.word	0x240002f0
 8000d00:	240002d0 	.word	0x240002d0

08000d04 <control_allocator>:

void control_allocator(Cmd_s control_cmd, Cmd_s trims )
{
 8000d04:	b5b0      	push	{r4, r5, r7, lr}
 8000d06:	b096      	sub	sp, #88	@ 0x58
 8000d08:	af02      	add	r7, sp, #8
 8000d0a:	eeb0 4a40 	vmov.f32	s8, s0
 8000d0e:	eef0 4a60 	vmov.f32	s9, s1
 8000d12:	eeb0 5a41 	vmov.f32	s10, s2
 8000d16:	eef0 5a61 	vmov.f32	s11, s3
 8000d1a:	eeb0 6a42 	vmov.f32	s12, s4
 8000d1e:	eef0 6a62 	vmov.f32	s13, s5
 8000d22:	eeb0 7a43 	vmov.f32	s14, s6
 8000d26:	eef0 7a63 	vmov.f32	s15, s7
 8000d2a:	ed87 4a0a 	vstr	s8, [r7, #40]	@ 0x28
 8000d2e:	edc7 4a0b 	vstr	s9, [r7, #44]	@ 0x2c
 8000d32:	ed87 5a0c 	vstr	s10, [r7, #48]	@ 0x30
 8000d36:	edc7 5a0d 	vstr	s11, [r7, #52]	@ 0x34
 8000d3a:	ed87 6a06 	vstr	s12, [r7, #24]
 8000d3e:	edc7 6a07 	vstr	s13, [r7, #28]
 8000d42:	ed87 7a08 	vstr	s14, [r7, #32]
 8000d46:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	//
	Servo_mgmt_s servo_outs;

	Frame = CONFIGURATION;
 8000d4a:	4b7f      	ldr	r3, [pc, #508]	@ (8000f48 <control_allocator+0x244>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]


	switch(Frame){
 8000d50:	4b7d      	ldr	r3, [pc, #500]	@ (8000f48 <control_allocator+0x244>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b03      	cmp	r3, #3
 8000d56:	f200 80c7 	bhi.w	8000ee8 <control_allocator+0x1e4>
 8000d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8000d60 <control_allocator+0x5c>)
 8000d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d60:	08000d71 	.word	0x08000d71
 8000d64:	08000dcf 	.word	0x08000dcf
 8000d68:	08000e2d 	.word	0x08000e2d
 8000d6c:	08000e8b 	.word	0x08000e8b
		case FIX_WING:
			servo_outs = FIX_WING_MIXER(control_cmd, trims)     ;
 8000d70:	463b      	mov	r3, r7
 8000d72:	ed97 4a06 	vldr	s8, [r7, #24]
 8000d76:	edd7 4a07 	vldr	s9, [r7, #28]
 8000d7a:	ed97 5a08 	vldr	s10, [r7, #32]
 8000d7e:	edd7 5a09 	vldr	s11, [r7, #36]	@ 0x24
 8000d82:	ed97 6a0a 	vldr	s12, [r7, #40]	@ 0x28
 8000d86:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8000d8a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000d8e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000d92:	eeb0 2a44 	vmov.f32	s4, s8
 8000d96:	eef0 2a64 	vmov.f32	s5, s9
 8000d9a:	eeb0 3a45 	vmov.f32	s6, s10
 8000d9e:	eef0 3a65 	vmov.f32	s7, s11
 8000da2:	eeb0 0a46 	vmov.f32	s0, s12
 8000da6:	eef0 0a66 	vmov.f32	s1, s13
 8000daa:	eeb0 1a47 	vmov.f32	s2, s14
 8000dae:	eef0 1a67 	vmov.f32	s3, s15
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 fc48 	bl	8001648 <FIX_WING_MIXER>
 8000db8:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000dbc:	463d      	mov	r5, r7
 8000dbe:	6828      	ldr	r0, [r5, #0]
 8000dc0:	6869      	ldr	r1, [r5, #4]
 8000dc2:	68aa      	ldr	r2, [r5, #8]
 8000dc4:	68eb      	ldr	r3, [r5, #12]
 8000dc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dc8:	6928      	ldr	r0, [r5, #16]
 8000dca:	6020      	str	r0, [r4, #0]
			break;
 8000dcc:	e09d      	b.n	8000f0a <control_allocator+0x206>
		case FLYING_WING:
			servo_outs = FLYING_WING_MIXER(control_cmd, trims)  ;
 8000dce:	463b      	mov	r3, r7
 8000dd0:	ed97 4a06 	vldr	s8, [r7, #24]
 8000dd4:	edd7 4a07 	vldr	s9, [r7, #28]
 8000dd8:	ed97 5a08 	vldr	s10, [r7, #32]
 8000ddc:	edd7 5a09 	vldr	s11, [r7, #36]	@ 0x24
 8000de0:	ed97 6a0a 	vldr	s12, [r7, #40]	@ 0x28
 8000de4:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8000de8:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000dec:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000df0:	eeb0 2a44 	vmov.f32	s4, s8
 8000df4:	eef0 2a64 	vmov.f32	s5, s9
 8000df8:	eeb0 3a45 	vmov.f32	s6, s10
 8000dfc:	eef0 3a65 	vmov.f32	s7, s11
 8000e00:	eeb0 0a46 	vmov.f32	s0, s12
 8000e04:	eef0 0a66 	vmov.f32	s1, s13
 8000e08:	eeb0 1a47 	vmov.f32	s2, s14
 8000e0c:	eef0 1a67 	vmov.f32	s3, s15
 8000e10:	4618      	mov	r0, r3
 8000e12:	f000 fd05 	bl	8001820 <FLYING_WING_MIXER>
 8000e16:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000e1a:	463d      	mov	r5, r7
 8000e1c:	6828      	ldr	r0, [r5, #0]
 8000e1e:	6869      	ldr	r1, [r5, #4]
 8000e20:	68aa      	ldr	r2, [r5, #8]
 8000e22:	68eb      	ldr	r3, [r5, #12]
 8000e24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e26:	6928      	ldr	r0, [r5, #16]
 8000e28:	6020      	str	r0, [r4, #0]
			break;
 8000e2a:	e06e      	b.n	8000f0a <control_allocator+0x206>
		case TANDEM_WING:
			servo_outs = TANDEM_WING_MIXER(control_cmd, trims)  ;
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	ed97 4a06 	vldr	s8, [r7, #24]
 8000e32:	edd7 4a07 	vldr	s9, [r7, #28]
 8000e36:	ed97 5a08 	vldr	s10, [r7, #32]
 8000e3a:	edd7 5a09 	vldr	s11, [r7, #36]	@ 0x24
 8000e3e:	ed97 6a0a 	vldr	s12, [r7, #40]	@ 0x28
 8000e42:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8000e46:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000e4a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000e4e:	eeb0 2a44 	vmov.f32	s4, s8
 8000e52:	eef0 2a64 	vmov.f32	s5, s9
 8000e56:	eeb0 3a45 	vmov.f32	s6, s10
 8000e5a:	eef0 3a65 	vmov.f32	s7, s11
 8000e5e:	eeb0 0a46 	vmov.f32	s0, s12
 8000e62:	eef0 0a66 	vmov.f32	s1, s13
 8000e66:	eeb0 1a47 	vmov.f32	s2, s14
 8000e6a:	eef0 1a67 	vmov.f32	s3, s15
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 fdc2 	bl	80019f8 <TANDEM_WING_MIXER>
 8000e74:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000e78:	463d      	mov	r5, r7
 8000e7a:	6828      	ldr	r0, [r5, #0]
 8000e7c:	6869      	ldr	r1, [r5, #4]
 8000e7e:	68aa      	ldr	r2, [r5, #8]
 8000e80:	68eb      	ldr	r3, [r5, #12]
 8000e82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e84:	6928      	ldr	r0, [r5, #16]
 8000e86:	6020      	str	r0, [r4, #0]
			break;
 8000e88:	e03f      	b.n	8000f0a <control_allocator+0x206>
		case CUSTOM_FRAME:
			servo_outs = CUSTOM_FRAME_MIXER(control_cmd, trims) ;
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	ed97 4a06 	vldr	s8, [r7, #24]
 8000e90:	edd7 4a07 	vldr	s9, [r7, #28]
 8000e94:	ed97 5a08 	vldr	s10, [r7, #32]
 8000e98:	edd7 5a09 	vldr	s11, [r7, #36]	@ 0x24
 8000e9c:	ed97 6a0a 	vldr	s12, [r7, #40]	@ 0x28
 8000ea0:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8000ea4:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000ea8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000eac:	eeb0 2a44 	vmov.f32	s4, s8
 8000eb0:	eef0 2a64 	vmov.f32	s5, s9
 8000eb4:	eeb0 3a45 	vmov.f32	s6, s10
 8000eb8:	eef0 3a65 	vmov.f32	s7, s11
 8000ebc:	eeb0 0a46 	vmov.f32	s0, s12
 8000ec0:	eef0 0a66 	vmov.f32	s1, s13
 8000ec4:	eeb0 1a47 	vmov.f32	s2, s14
 8000ec8:	eef0 1a67 	vmov.f32	s3, s15
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f000 fe7f 	bl	8001bd0 <CUSTOM_FRAME_MIXER>
 8000ed2:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000ed6:	463d      	mov	r5, r7
 8000ed8:	6828      	ldr	r0, [r5, #0]
 8000eda:	6869      	ldr	r1, [r5, #4]
 8000edc:	68aa      	ldr	r2, [r5, #8]
 8000ede:	68eb      	ldr	r3, [r5, #12]
 8000ee0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee2:	6928      	ldr	r0, [r5, #16]
 8000ee4:	6020      	str	r0, [r4, #0]
			break;
 8000ee6:	e010      	b.n	8000f0a <control_allocator+0x206>
		default:

			for(int i = 0; i < 10; i++)
 8000ee8:	2300      	movs	r3, #0
 8000eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000eec:	e00a      	b.n	8000f04 <control_allocator+0x200>
			{
				//
				servo_outs.S[i] = 1500 ;
 8000eee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	3350      	adds	r3, #80	@ 0x50
 8000ef4:	443b      	add	r3, r7
 8000ef6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000efa:	f823 2c18 	strh.w	r2, [r3, #-24]
			for(int i = 0; i < 10; i++)
 8000efe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f00:	3301      	adds	r3, #1
 8000f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000f04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f06:	2b09      	cmp	r3, #9
 8000f08:	ddf1      	ble.n	8000eee <control_allocator+0x1ea>
			}

		}

	PWM_Output = reverse_servos(servo_outs );
 8000f0a:	4d10      	ldr	r5, [pc, #64]	@ (8000f4c <control_allocator+0x248>)
 8000f0c:	463c      	mov	r4, r7
 8000f0e:	466a      	mov	r2, sp
 8000f10:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000f14:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f18:	e882 0003 	stmia.w	r2, {r0, r1}
 8000f1c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f22:	4620      	mov	r0, r4
 8000f24:	f000 f832 	bl	8000f8c <reverse_servos>
 8000f28:	462a      	mov	r2, r5
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	6819      	ldr	r1, [r3, #0]
 8000f2e:	685d      	ldr	r5, [r3, #4]
 8000f30:	689c      	ldr	r4, [r3, #8]
 8000f32:	68d8      	ldr	r0, [r3, #12]
 8000f34:	6011      	str	r1, [r2, #0]
 8000f36:	6055      	str	r5, [r2, #4]
 8000f38:	6094      	str	r4, [r2, #8]
 8000f3a:	60d0      	str	r0, [r2, #12]
 8000f3c:	6919      	ldr	r1, [r3, #16]
 8000f3e:	6111      	str	r1, [r2, #16]
}
 8000f40:	bf00      	nop
 8000f42:	3750      	adds	r7, #80	@ 0x50
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bdb0      	pop	{r4, r5, r7, pc}
 8000f48:	240002ac 	.word	0x240002ac
 8000f4c:	24000068 	.word	0x24000068

08000f50 <reverse_servo_value>:

uint16_t reverse_servo_value(uint16_t input)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	80fb      	strh	r3, [r7, #6]
    // Asegurarnos que el valor esté dentro del rango válido
    if (input < 1000) input = 1000;
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f60:	d202      	bcs.n	8000f68 <reverse_servo_value+0x18>
 8000f62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f66:	80fb      	strh	r3, [r7, #6]
    if (input > 2000) input = 2000;
 8000f68:	88fb      	ldrh	r3, [r7, #6]
 8000f6a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000f6e:	d902      	bls.n	8000f76 <reverse_servo_value+0x26>
 8000f70:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000f74:	80fb      	strh	r3, [r7, #6]

    // Calcular el valor invertido
    return 3000 - input;
 8000f76:	88fb      	ldrh	r3, [r7, #6]
 8000f78:	f5c3 633b 	rsb	r3, r3, #2992	@ 0xbb0
 8000f7c:	3308      	adds	r3, #8
 8000f7e:	b29b      	uxth	r3, r3
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <reverse_servos>:


Servo_mgmt_s reverse_servos(Servo_mgmt_s inputs )
{
 8000f8c:	b084      	sub	sp, #16
 8000f8e:	b5b0      	push	{r4, r5, r7, lr}
 8000f90:	b088      	sub	sp, #32
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
 8000f96:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8000f9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//
	Servo_mgmt_s uotputs;

	for(int i = 0; i < 10; i++)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
 8000fa2:	e024      	b.n	8000fee <reverse_servos+0x62>
	{
		//
		if (Reverse.S[i])
 8000fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8001018 <reverse_servos+0x8c>)
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	4413      	add	r3, r2
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d010      	beq.n	8000fd2 <reverse_servos+0x46>
		{
			//
			uotputs.S[i] = reverse_servo_value(inputs.S[i]);
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	3330      	adds	r3, #48	@ 0x30
 8000fb6:	443b      	add	r3, r7
 8000fb8:	889b      	ldrh	r3, [r3, #4]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff ffc8 	bl	8000f50 <reverse_servo_value>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	3320      	adds	r3, #32
 8000fca:	443b      	add	r3, r7
 8000fcc:	f823 2c18 	strh.w	r2, [r3, #-24]
 8000fd0:	e00a      	b.n	8000fe8 <reverse_servos+0x5c>
		}
		else
		{
			//
			uotputs.S[i] = inputs.S[i];
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	3330      	adds	r3, #48	@ 0x30
 8000fd8:	443b      	add	r3, r7
 8000fda:	889a      	ldrh	r2, [r3, #4]
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	3320      	adds	r3, #32
 8000fe2:	443b      	add	r3, r7
 8000fe4:	f823 2c18 	strh.w	r2, [r3, #-24]
	for(int i = 0; i < 10; i++)
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	3301      	adds	r3, #1
 8000fec:	61fb      	str	r3, [r7, #28]
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	2b09      	cmp	r3, #9
 8000ff2:	ddd7      	ble.n	8000fa4 <reverse_servos+0x18>
		}
	}

	return uotputs;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	461d      	mov	r5, r3
 8000ff8:	f107 0408 	add.w	r4, r7, #8
 8000ffc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ffe:	6028      	str	r0, [r5, #0]
 8001000:	6069      	str	r1, [r5, #4]
 8001002:	60aa      	str	r2, [r5, #8]
 8001004:	60eb      	str	r3, [r5, #12]
 8001006:	6820      	ldr	r0, [r4, #0]
 8001008:	6128      	str	r0, [r5, #16]
}
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	3720      	adds	r7, #32
 800100e:	46bd      	mov	sp, r7
 8001010:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001014:	b004      	add	sp, #16
 8001016:	4770      	bx	lr
 8001018:	240003b0 	.word	0x240003b0
 800101c:	00000000 	.word	0x00000000

08001020 <get_commands_rc>:
    }
    return signal_out;
}

Cmd_s get_commands_rc(void)
{
 8001020:	b490      	push	{r4, r7}
 8001022:	b08c      	sub	sp, #48	@ 0x30
 8001024:	af00      	add	r7, sp, #0
	//
	Cmd_s out_norms;

	out_norms.roll 		= ((float)Radio_input.Canal_1 - 1500.0 ) / 500.0 ;
 8001026:	4b3e      	ldr	r3, [pc, #248]	@ (8001120 <get_commands_rc+0x100>)
 8001028:	885b      	ldrh	r3, [r3, #2]
 800102a:	ee07 3a90 	vmov	s15, r3
 800102e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001032:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001036:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 8001108 <get_commands_rc+0xe8>
 800103a:	ee37 6b46 	vsub.f64	d6, d7, d6
 800103e:	ed9f 5b34 	vldr	d5, [pc, #208]	@ 8001110 <get_commands_rc+0xf0>
 8001042:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001046:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800104a:	edc7 7a04 	vstr	s15, [r7, #16]

	out_norms.pitch 	= ((float)Radio_input.Canal_2 - 1500.0 ) / 500.0 ;
 800104e:	4b34      	ldr	r3, [pc, #208]	@ (8001120 <get_commands_rc+0x100>)
 8001050:	889b      	ldrh	r3, [r3, #4]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800105a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800105e:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8001108 <get_commands_rc+0xe8>
 8001062:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001066:	ed9f 5b2a 	vldr	d5, [pc, #168]	@ 8001110 <get_commands_rc+0xf0>
 800106a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800106e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001072:	edc7 7a05 	vstr	s15, [r7, #20]

	out_norms.yaw 		= ((float)Radio_input.Canal_3 - 1500.0 ) / 500.0 ;
 8001076:	4b2a      	ldr	r3, [pc, #168]	@ (8001120 <get_commands_rc+0x100>)
 8001078:	88db      	ldrh	r3, [r3, #6]
 800107a:	ee07 3a90 	vmov	s15, r3
 800107e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001082:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001086:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 8001108 <get_commands_rc+0xe8>
 800108a:	ee37 6b46 	vsub.f64	d6, d7, d6
 800108e:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 8001110 <get_commands_rc+0xf0>
 8001092:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001096:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800109a:	edc7 7a06 	vstr	s15, [r7, #24]

	out_norms.thrust 	= ((float)Radio_input.Canal_4 - 1000.0 ) / 1000.0 ;
 800109e:	4b20      	ldr	r3, [pc, #128]	@ (8001120 <get_commands_rc+0x100>)
 80010a0:	891b      	ldrh	r3, [r3, #8]
 80010a2:	ee07 3a90 	vmov	s15, r3
 80010a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010ae:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 8001118 <get_commands_rc+0xf8>
 80010b2:	ee37 6b46 	vsub.f64	d6, d7, d6
 80010b6:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8001118 <get_commands_rc+0xf8>
 80010ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010c2:	edc7 7a07 	vstr	s15, [r7, #28]

	return out_norms;
 80010c6:	f107 0420 	add.w	r4, r7, #32
 80010ca:	f107 0310 	add.w	r3, r7, #16
 80010ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80010d4:	6a38      	ldr	r0, [r7, #32]
 80010d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80010d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80010da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010dc:	ee06 0a10 	vmov	s12, r0
 80010e0:	ee06 1a90 	vmov	s13, r1
 80010e4:	ee07 2a10 	vmov	s14, r2
 80010e8:	ee07 3a90 	vmov	s15, r3
}
 80010ec:	eeb0 0a46 	vmov.f32	s0, s12
 80010f0:	eef0 0a66 	vmov.f32	s1, s13
 80010f4:	eeb0 1a47 	vmov.f32	s2, s14
 80010f8:	eef0 1a67 	vmov.f32	s3, s15
 80010fc:	3730      	adds	r7, #48	@ 0x30
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc90      	pop	{r4, r7}
 8001102:	4770      	bx	lr
 8001104:	f3af 8000 	nop.w
 8001108:	00000000 	.word	0x00000000
 800110c:	40977000 	.word	0x40977000
 8001110:	00000000 	.word	0x00000000
 8001114:	407f4000 	.word	0x407f4000
 8001118:	00000000 	.word	0x00000000
 800111c:	408f4000 	.word	0x408f4000
 8001120:	2400007c 	.word	0x2400007c

08001124 <get_actual_trims>:

void get_actual_trims(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
	//
	Trims.roll 		=  (float)Radio_input.Canal_10 - 1500.0 ;
 8001128:	4b17      	ldr	r3, [pc, #92]	@ (8001188 <get_actual_trims+0x64>)
 800112a:	8a9b      	ldrh	r3, [r3, #20]
 800112c:	ee07 3a90 	vmov	s15, r3
 8001130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001134:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800118c <get_actual_trims+0x68>
 8001138:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800113c:	4b14      	ldr	r3, [pc, #80]	@ (8001190 <get_actual_trims+0x6c>)
 800113e:	edc3 7a00 	vstr	s15, [r3]
	Trims.pitch 	=  (float)Radio_input.Canal_11 - 1500.0 ;
 8001142:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <get_actual_trims+0x64>)
 8001144:	8adb      	ldrh	r3, [r3, #22]
 8001146:	ee07 3a90 	vmov	s15, r3
 800114a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800114e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800118c <get_actual_trims+0x68>
 8001152:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001156:	4b0e      	ldr	r3, [pc, #56]	@ (8001190 <get_actual_trims+0x6c>)
 8001158:	edc3 7a01 	vstr	s15, [r3, #4]
	Trims.yaw 		=  (float)Radio_input.Canal_12 - 1500.0 ;
 800115c:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <get_actual_trims+0x64>)
 800115e:	8b1b      	ldrh	r3, [r3, #24]
 8001160:	ee07 3a90 	vmov	s15, r3
 8001164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001168:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800118c <get_actual_trims+0x68>
 800116c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001170:	4b07      	ldr	r3, [pc, #28]	@ (8001190 <get_actual_trims+0x6c>)
 8001172:	edc3 7a02 	vstr	s15, [r3, #8]
	Trims.thrust 	=  0.0f ;
 8001176:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <get_actual_trims+0x6c>)
 8001178:	f04f 0200 	mov.w	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
}
 800117e:	bf00      	nop
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	2400007c 	.word	0x2400007c
 800118c:	44bb8000 	.word	0x44bb8000
 8001190:	240002c0 	.word	0x240002c0

08001194 <init_Reverse_Servos>:


void init_Reverse_Servos(Servo_reverse_s *servos)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 10; i++)
 800119c:	2300      	movs	r3, #0
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	e007      	b.n	80011b2 <init_Reverse_Servos+0x1e>
    {
    	//
        servos->S[i] = false;
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4413      	add	r3, r2
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 10; i++)
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	3301      	adds	r3, #1
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2b09      	cmp	r3, #9
 80011b6:	ddf4      	ble.n	80011a2 <init_Reverse_Servos+0xe>
    }
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	3714      	adds	r7, #20
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <FlightTaskAttitude>:
Cmd_s rates_Gains;



void FlightTaskAttitude(void)
{
 80011c8:	b598      	push	{r3, r4, r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	//
	attitude_parameters_refresh();
 80011cc:	f000 f8e0 	bl	8001390 <attitude_parameters_refresh>

	refresh_actual_rates();
 80011d0:	f000 f9e2 	bl	8001598 <refresh_actual_rates>

	get_flight_mode();
 80011d4:	f000 f8d0 	bl	8001378 <get_flight_mode>

	Command_in = get_commands_rc();
 80011d8:	f7ff ff22 	bl	8001020 <get_commands_rc>
 80011dc:	eeb0 6a40 	vmov.f32	s12, s0
 80011e0:	eef0 6a60 	vmov.f32	s13, s1
 80011e4:	eeb0 7a41 	vmov.f32	s14, s2
 80011e8:	eef0 7a61 	vmov.f32	s15, s3
 80011ec:	4b44      	ldr	r3, [pc, #272]	@ (8001300 <FlightTaskAttitude+0x138>)
 80011ee:	ed83 6a00 	vstr	s12, [r3]
 80011f2:	edc3 6a01 	vstr	s13, [r3, #4]
 80011f6:	ed83 7a02 	vstr	s14, [r3, #8]
 80011fa:	edc3 7a03 	vstr	s15, [r3, #12]


	switch(mode)
 80011fe:	4b41      	ldr	r3, [pc, #260]	@ (8001304 <FlightTaskAttitude+0x13c>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b03      	cmp	r3, #3
 8001204:	dc47      	bgt.n	8001296 <FlightTaskAttitude+0xce>
 8001206:	2b02      	cmp	r3, #2
 8001208:	da4c      	bge.n	80012a4 <FlightTaskAttitude+0xdc>
 800120a:	2b00      	cmp	r3, #0
 800120c:	d03c      	beq.n	8001288 <FlightTaskAttitude+0xc0>
 800120e:	2b01      	cmp	r3, #1
 8001210:	d141      	bne.n	8001296 <FlightTaskAttitude+0xce>
	case ATTITUDE_HOLD_MODE:
//		AttitudeHold();
		break;
	case RATE_MODE:
		//
		Command_out = rates_control_law(Command_in , actual_rates, rates_Gains);
 8001212:	4b3d      	ldr	r3, [pc, #244]	@ (8001308 <FlightTaskAttitude+0x140>)
 8001214:	edd3 3a00 	vldr	s7, [r3]
 8001218:	ed93 4a01 	vldr	s8, [r3, #4]
 800121c:	edd3 4a02 	vldr	s9, [r3, #8]
 8001220:	ed93 5a03 	vldr	s10, [r3, #12]
 8001224:	4b39      	ldr	r3, [pc, #228]	@ (800130c <FlightTaskAttitude+0x144>)
 8001226:	edd3 2a00 	vldr	s5, [r3]
 800122a:	ed93 3a01 	vldr	s6, [r3, #4]
 800122e:	edd3 5a02 	vldr	s11, [r3, #8]
 8001232:	4b33      	ldr	r3, [pc, #204]	@ (8001300 <FlightTaskAttitude+0x138>)
 8001234:	ed93 6a00 	vldr	s12, [r3]
 8001238:	edd3 6a01 	vldr	s13, [r3, #4]
 800123c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001240:	edd3 7a03 	vldr	s15, [r3, #12]
 8001244:	eeb0 2a62 	vmov.f32	s4, s5
 8001248:	eef0 2a43 	vmov.f32	s5, s6
 800124c:	eeb0 3a65 	vmov.f32	s6, s11
 8001250:	eeb0 0a46 	vmov.f32	s0, s12
 8001254:	eef0 0a66 	vmov.f32	s1, s13
 8001258:	eeb0 1a47 	vmov.f32	s2, s14
 800125c:	eef0 1a67 	vmov.f32	s3, s15
 8001260:	f000 f8aa 	bl	80013b8 <rates_control_law>
 8001264:	eeb0 6a40 	vmov.f32	s12, s0
 8001268:	eef0 6a60 	vmov.f32	s13, s1
 800126c:	eeb0 7a41 	vmov.f32	s14, s2
 8001270:	eef0 7a61 	vmov.f32	s15, s3
 8001274:	4b26      	ldr	r3, [pc, #152]	@ (8001310 <FlightTaskAttitude+0x148>)
 8001276:	ed83 6a00 	vstr	s12, [r3]
 800127a:	edc3 6a01 	vstr	s13, [r3, #4]
 800127e:	ed83 7a02 	vstr	s14, [r3, #8]
 8001282:	edc3 7a03 	vstr	s15, [r3, #12]
		break;
 8001286:	e00e      	b.n	80012a6 <FlightTaskAttitude+0xde>
	case MANUAL_MODE:
		//
		Command_out = Command_in;
 8001288:	4a21      	ldr	r2, [pc, #132]	@ (8001310 <FlightTaskAttitude+0x148>)
 800128a:	4b1d      	ldr	r3, [pc, #116]	@ (8001300 <FlightTaskAttitude+0x138>)
 800128c:	4614      	mov	r4, r2
 800128e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001290:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		break;
 8001294:	e007      	b.n	80012a6 <FlightTaskAttitude+0xde>
	default:
		//
		Command_out = Command_in;
 8001296:	4a1e      	ldr	r2, [pc, #120]	@ (8001310 <FlightTaskAttitude+0x148>)
 8001298:	4b19      	ldr	r3, [pc, #100]	@ (8001300 <FlightTaskAttitude+0x138>)
 800129a:	4614      	mov	r4, r2
 800129c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800129e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		break;
 80012a2:	e000      	b.n	80012a6 <FlightTaskAttitude+0xde>
		break;
 80012a4:	bf00      	nop
	}

	command_filtering();
 80012a6:	f7ff fccb 	bl	8000c40 <command_filtering>

	get_actual_trims();
 80012aa:	f7ff ff3b 	bl	8001124 <get_actual_trims>

	init_Reverse_Servos(&Reverse);
 80012ae:	4819      	ldr	r0, [pc, #100]	@ (8001314 <FlightTaskAttitude+0x14c>)
 80012b0:	f7ff ff70 	bl	8001194 <init_Reverse_Servos>

	control_allocator(Commands , Trims );
 80012b4:	4b18      	ldr	r3, [pc, #96]	@ (8001318 <FlightTaskAttitude+0x150>)
 80012b6:	ed93 4a00 	vldr	s8, [r3]
 80012ba:	edd3 4a01 	vldr	s9, [r3, #4]
 80012be:	ed93 5a02 	vldr	s10, [r3, #8]
 80012c2:	edd3 5a03 	vldr	s11, [r3, #12]
 80012c6:	4b15      	ldr	r3, [pc, #84]	@ (800131c <FlightTaskAttitude+0x154>)
 80012c8:	ed93 6a00 	vldr	s12, [r3]
 80012cc:	edd3 6a01 	vldr	s13, [r3, #4]
 80012d0:	ed93 7a02 	vldr	s14, [r3, #8]
 80012d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80012d8:	eeb0 2a44 	vmov.f32	s4, s8
 80012dc:	eef0 2a64 	vmov.f32	s5, s9
 80012e0:	eeb0 3a45 	vmov.f32	s6, s10
 80012e4:	eef0 3a65 	vmov.f32	s7, s11
 80012e8:	eeb0 0a46 	vmov.f32	s0, s12
 80012ec:	eef0 0a66 	vmov.f32	s1, s13
 80012f0:	eeb0 1a47 	vmov.f32	s2, s14
 80012f4:	eef0 1a67 	vmov.f32	s3, s15
 80012f8:	f7ff fd04 	bl	8000d04 <control_allocator>

}
 80012fc:	bf00      	nop
 80012fe:	bd98      	pop	{r3, r4, r7, pc}
 8001300:	240003bc 	.word	0x240003bc
 8001304:	240003dc 	.word	0x240003dc
 8001308:	240003cc 	.word	0x240003cc
 800130c:	2400047c 	.word	0x2400047c
 8001310:	240002b0 	.word	0x240002b0
 8001314:	240003b0 	.word	0x240003b0
 8001318:	240002c0 	.word	0x240002c0
 800131c:	240002d0 	.word	0x240002d0

08001320 <rc_three_steps_CurrentMode>:
#include "Flight_Management_Control/modes_management.h"

FlightMode_t mode ;

uint8_t rc_three_steps_CurrentMode(void)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
	//
	uint16_t pwm_value = Radio_input.Canal_5;
 8001326:	4b12      	ldr	r3, [pc, #72]	@ (8001370 <rc_three_steps_CurrentMode+0x50>)
 8001328:	895b      	ldrh	r3, [r3, #10]
 800132a:	80fb      	strh	r3, [r7, #6]

	if (pwm_value < (PWM_MID - PWM_DEADZONE))
 800132c:	88fb      	ldrh	r3, [r7, #6]
 800132e:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8001332:	4293      	cmp	r3, r2
 8001334:	d801      	bhi.n	800133a <rc_three_steps_CurrentMode+0x1a>
	{
	        return MANUAL_MODE;
 8001336:	2300      	movs	r3, #0
 8001338:	e014      	b.n	8001364 <rc_three_steps_CurrentMode+0x44>
	 }
	else if (pwm_value < (PWM_MID + PWM_DEADZONE) && pwm_value > (PWM_MAX - PWM_DEADZONE))
 800133a:	88fb      	ldrh	r3, [r7, #6]
 800133c:	f240 62d5 	movw	r2, #1749	@ 0x6d5
 8001340:	4293      	cmp	r3, r2
 8001342:	d806      	bhi.n	8001352 <rc_three_steps_CurrentMode+0x32>
 8001344:	88fb      	ldrh	r3, [r7, #6]
 8001346:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 800134a:	4293      	cmp	r3, r2
 800134c:	d901      	bls.n	8001352 <rc_three_steps_CurrentMode+0x32>
	 {
	        return RATE_MODE;
 800134e:	2301      	movs	r3, #1
 8001350:	e008      	b.n	8001364 <rc_three_steps_CurrentMode+0x44>
	  }
	else if (pwm_value >= (PWM_MAX - PWM_DEADZONE))
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	f240 62d5 	movw	r2, #1749	@ 0x6d5
 8001358:	4293      	cmp	r3, r2
 800135a:	d901      	bls.n	8001360 <rc_three_steps_CurrentMode+0x40>
	 {
	        return ATTITUDE_HOLD_MODE;
 800135c:	2302      	movs	r3, #2
 800135e:	e001      	b.n	8001364 <rc_three_steps_CurrentMode+0x44>
	  }
	else {
	        // Zona muerta → mantener último modo (evita oscilaciones)
	        static FlightMode_t last_mode = MANUAL_MODE;
	        return last_mode;
 8001360:	4b04      	ldr	r3, [pc, #16]	@ (8001374 <rc_three_steps_CurrentMode+0x54>)
 8001362:	781b      	ldrb	r3, [r3, #0]
	    }

}
 8001364:	4618      	mov	r0, r3
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	2400007c 	.word	0x2400007c
 8001374:	240003dd 	.word	0x240003dd

08001378 <get_flight_mode>:

void get_flight_mode(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
	//
	mode = (FlightMode_t)rc_three_steps_CurrentMode();
 800137c:	f7ff ffd0 	bl	8001320 <rc_three_steps_CurrentMode>
 8001380:	4603      	mov	r3, r0
 8001382:	461a      	mov	r2, r3
 8001384:	4b01      	ldr	r3, [pc, #4]	@ (800138c <get_flight_mode+0x14>)
 8001386:	701a      	strb	r2, [r3, #0]
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}
 800138c:	240003dc 	.word	0x240003dc

08001390 <attitude_parameters_refresh>:
#include "Flight_Management_Control/parameters_manager.h"
#include "Flight_Management_Control/flight_management.h"


void attitude_parameters_refresh(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
	//
	rates_Gains.roll  = K_P * 100;
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <attitude_parameters_refresh+0x20>)
 8001396:	4a07      	ldr	r2, [pc, #28]	@ (80013b4 <attitude_parameters_refresh+0x24>)
 8001398:	601a      	str	r2, [r3, #0]
	rates_Gains.pitch = K_Q * 100;
 800139a:	4b05      	ldr	r3, [pc, #20]	@ (80013b0 <attitude_parameters_refresh+0x20>)
 800139c:	4a05      	ldr	r2, [pc, #20]	@ (80013b4 <attitude_parameters_refresh+0x24>)
 800139e:	605a      	str	r2, [r3, #4]
	rates_Gains.yaw   = K_R * 100;
 80013a0:	4b03      	ldr	r3, [pc, #12]	@ (80013b0 <attitude_parameters_refresh+0x20>)
 80013a2:	4a04      	ldr	r2, [pc, #16]	@ (80013b4 <attitude_parameters_refresh+0x24>)
 80013a4:	609a      	str	r2, [r3, #8]

}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	240003cc 	.word	0x240003cc
 80013b4:	3dcccccd 	.word	0x3dcccccd

080013b8 <rates_control_law>:
 *      Author: rtrujillo
 */
#include "Flight_Management_Control/rates_mode.h"

Cmd_s rates_control_law(Cmd_s inputs_norms, Gyro_s actual_gyro, Cmd_s K)
{
 80013b8:	b490      	push	{r4, r7}
 80013ba:	b098      	sub	sp, #96	@ 0x60
 80013bc:	af00      	add	r7, sp, #0
 80013be:	eef0 5a43 	vmov.f32	s11, s6
 80013c2:	eeb0 6a63 	vmov.f32	s12, s7
 80013c6:	eef0 6a44 	vmov.f32	s13, s8
 80013ca:	eeb0 7a64 	vmov.f32	s14, s9
 80013ce:	eef0 7a45 	vmov.f32	s15, s10
 80013d2:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
 80013d6:	edc7 0a0d 	vstr	s1, [r7, #52]	@ 0x34
 80013da:	ed87 1a0e 	vstr	s2, [r7, #56]	@ 0x38
 80013de:	edc7 1a0f 	vstr	s3, [r7, #60]	@ 0x3c
 80013e2:	ed87 2a09 	vstr	s4, [r7, #36]	@ 0x24
 80013e6:	edc7 2a0a 	vstr	s5, [r7, #40]	@ 0x28
 80013ea:	edc7 5a0b 	vstr	s11, [r7, #44]	@ 0x2c
 80013ee:	ed87 6a05 	vstr	s12, [r7, #20]
 80013f2:	edc7 6a06 	vstr	s13, [r7, #24]
 80013f6:	ed87 7a07 	vstr	s14, [r7, #28]
 80013fa:	edc7 7a08 	vstr	s15, [r7, #32]
	//
	Cmd_s out_puts;

	out_puts.roll   = inputs_norms.roll  -  actual_gyro.roll * K.roll ;
 80013fe:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001402:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001406:	edd7 7a05 	vldr	s15, [r7, #20]
 800140a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800140e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001412:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	out_puts.pitch  = inputs_norms.pitch -  actual_gyro.pitch* K.pitch ;
 8001416:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800141a:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800141e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001422:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001426:	ee77 7a67 	vsub.f32	s15, s14, s15
 800142a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	out_puts.yaw    = inputs_norms.yaw   -  actual_gyro.yaw  * K.yaw ;
 800142e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001432:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8001436:	edd7 7a07 	vldr	s15, [r7, #28]
 800143a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800143e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001442:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	out_puts.thrust = inputs_norms.thrust ;
 8001446:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001448:	64fb      	str	r3, [r7, #76]	@ 0x4c

	return out_puts ;
 800144a:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 800144e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001452:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001454:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001458:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800145a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800145c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800145e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001460:	ee06 0a10 	vmov	s12, r0
 8001464:	ee06 1a90 	vmov	s13, r1
 8001468:	ee07 2a10 	vmov	s14, r2
 800146c:	ee07 3a90 	vmov	s15, r3
}
 8001470:	eeb0 0a46 	vmov.f32	s0, s12
 8001474:	eef0 0a66 	vmov.f32	s1, s13
 8001478:	eeb0 1a47 	vmov.f32	s2, s14
 800147c:	eef0 1a67 	vmov.f32	s3, s15
 8001480:	3760      	adds	r7, #96	@ 0x60
 8001482:	46bd      	mov	sp, r7
 8001484:	bc90      	pop	{r4, r7}
 8001486:	4770      	bx	lr

08001488 <LPF_gyro_filter_init>:


Gyro_s actual_rates;

void LPF_gyro_filter_init(void)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
	// Inicializaciones
	LPF_gyros[0] = LPF_gyro_x ;
 800148e:	4b3e      	ldr	r3, [pc, #248]	@ (8001588 <LPF_gyro_filter_init+0x100>)
 8001490:	4a3e      	ldr	r2, [pc, #248]	@ (800158c <LPF_gyro_filter_init+0x104>)
 8001492:	601a      	str	r2, [r3, #0]
	LPF_gyros[1] = LPF_gyro_y ;
 8001494:	4b3c      	ldr	r3, [pc, #240]	@ (8001588 <LPF_gyro_filter_init+0x100>)
 8001496:	4a3d      	ldr	r2, [pc, #244]	@ (800158c <LPF_gyro_filter_init+0x104>)
 8001498:	605a      	str	r2, [r3, #4]
	LPF_gyros[2] = LPF_gyro_z ;
 800149a:	4b3b      	ldr	r3, [pc, #236]	@ (8001588 <LPF_gyro_filter_init+0x100>)
 800149c:	4a3b      	ldr	r2, [pc, #236]	@ (800158c <LPF_gyro_filter_init+0x104>)
 800149e:	609a      	str	r2, [r3, #8]
	for(int idx = 0;idx < 3; idx++)
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	e066      	b.n	8001574 <LPF_gyro_filter_init+0xec>
	{
		//
		gyros_fltrs[idx].inicio 	= 1;
 80014a6:	4a3a      	ldr	r2, [pc, #232]	@ (8001590 <LPF_gyro_filter_init+0x108>)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	212c      	movs	r1, #44	@ 0x2c
 80014ac:	fb01 f303 	mul.w	r3, r1, r3
 80014b0:	4413      	add	r3, r2
 80014b2:	3328      	adds	r3, #40	@ 0x28
 80014b4:	2201      	movs	r2, #1
 80014b6:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].f_cutoff 	= LPF_gyros[idx] ;
 80014b8:	4a33      	ldr	r2, [pc, #204]	@ (8001588 <LPF_gyro_filter_init+0x100>)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	4933      	ldr	r1, [pc, #204]	@ (8001590 <LPF_gyro_filter_init+0x108>)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	202c      	movs	r0, #44	@ 0x2c
 80014c8:	fb00 f303 	mul.w	r3, r0, r3
 80014cc:	440b      	add	r3, r1
 80014ce:	3318      	adds	r3, #24
 80014d0:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].t_sample 	= SAMPLE_ATT ;
 80014d2:	4a2f      	ldr	r2, [pc, #188]	@ (8001590 <LPF_gyro_filter_init+0x108>)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	212c      	movs	r1, #44	@ 0x2c
 80014d8:	fb01 f303 	mul.w	r3, r1, r3
 80014dc:	4413      	add	r3, r2
 80014de:	331c      	adds	r3, #28
 80014e0:	4a2c      	ldr	r2, [pc, #176]	@ (8001594 <LPF_gyro_filter_init+0x10c>)
 80014e2:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].Y_0 		= 0.0f ;
 80014e4:	4a2a      	ldr	r2, [pc, #168]	@ (8001590 <LPF_gyro_filter_init+0x108>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	212c      	movs	r1, #44	@ 0x2c
 80014ea:	fb01 f303 	mul.w	r3, r1, r3
 80014ee:	4413      	add	r3, r2
 80014f0:	3308      	adds	r3, #8
 80014f2:	f04f 0200 	mov.w	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].U_n 		= 0.0f;
 80014f8:	4a25      	ldr	r2, [pc, #148]	@ (8001590 <LPF_gyro_filter_init+0x108>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	212c      	movs	r1, #44	@ 0x2c
 80014fe:	fb01 f303 	mul.w	r3, r1, r3
 8001502:	4413      	add	r3, r2
 8001504:	330c      	adds	r3, #12
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].Y_n 		= 0.0f;
 800150c:	4a20      	ldr	r2, [pc, #128]	@ (8001590 <LPF_gyro_filter_init+0x108>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	212c      	movs	r1, #44	@ 0x2c
 8001512:	fb01 f303 	mul.w	r3, r1, r3
 8001516:	4413      	add	r3, r2
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].Y_nm1 		= 0.0f;
 800151e:	4a1c      	ldr	r2, [pc, #112]	@ (8001590 <LPF_gyro_filter_init+0x108>)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	212c      	movs	r1, #44	@ 0x2c
 8001524:	fb01 f303 	mul.w	r3, r1, r3
 8001528:	4413      	add	r3, r2
 800152a:	3304      	adds	r3, #4
 800152c:	f04f 0200 	mov.w	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].U_nm1 		= 0.0f;
 8001532:	4a17      	ldr	r2, [pc, #92]	@ (8001590 <LPF_gyro_filter_init+0x108>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	212c      	movs	r1, #44	@ 0x2c
 8001538:	fb01 f303 	mul.w	r3, r1, r3
 800153c:	4413      	add	r3, r2
 800153e:	3310      	adds	r3, #16
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].t_n 		= 0.0f;
 8001546:	4a12      	ldr	r2, [pc, #72]	@ (8001590 <LPF_gyro_filter_init+0x108>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	212c      	movs	r1, #44	@ 0x2c
 800154c:	fb01 f303 	mul.w	r3, r1, r3
 8001550:	4413      	add	r3, r2
 8001552:	3320      	adds	r3, #32
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].t_nm1 		= 0.0f;
 800155a:	4a0d      	ldr	r2, [pc, #52]	@ (8001590 <LPF_gyro_filter_init+0x108>)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	212c      	movs	r1, #44	@ 0x2c
 8001560:	fb01 f303 	mul.w	r3, r1, r3
 8001564:	4413      	add	r3, r2
 8001566:	3324      	adds	r3, #36	@ 0x24
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
	for(int idx = 0;idx < 3; idx++)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3301      	adds	r3, #1
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b02      	cmp	r3, #2
 8001578:	dd95      	ble.n	80014a6 <LPF_gyro_filter_init+0x1e>

	}

}
 800157a:	bf00      	nop
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	24000464 	.word	0x24000464
 800158c:	42480000 	.word	0x42480000
 8001590:	240003e0 	.word	0x240003e0
 8001594:	3ba3d70a 	.word	0x3ba3d70a

08001598 <refresh_actual_rates>:

void refresh_actual_rates(void)
{
 8001598:	b5b0      	push	{r4, r5, r7, lr}
 800159a:	b08e      	sub	sp, #56	@ 0x38
 800159c:	af00      	add	r7, sp, #0
	//
	imu_gyr[0] 		= IMU.GYR.x ;
 800159e:	4b26      	ldr	r3, [pc, #152]	@ (8001638 <refresh_actual_rates+0xa0>)
 80015a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015a2:	4a26      	ldr	r2, [pc, #152]	@ (800163c <refresh_actual_rates+0xa4>)
 80015a4:	6013      	str	r3, [r2, #0]
	imu_gyr[1] 		= IMU.GYR.y ;
 80015a6:	4b24      	ldr	r3, [pc, #144]	@ (8001638 <refresh_actual_rates+0xa0>)
 80015a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015aa:	4a24      	ldr	r2, [pc, #144]	@ (800163c <refresh_actual_rates+0xa4>)
 80015ac:	6053      	str	r3, [r2, #4]
	imu_gyr[2] 		= IMU.GYR.z ;
 80015ae:	4b22      	ldr	r3, [pc, #136]	@ (8001638 <refresh_actual_rates+0xa0>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	4a22      	ldr	r2, [pc, #136]	@ (800163c <refresh_actual_rates+0xa4>)
 80015b4:	6093      	str	r3, [r2, #8]

	//
	for(int idx = 0; idx < 3; idx++)
 80015b6:	2300      	movs	r3, #0
 80015b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80015ba:	e02a      	b.n	8001612 <refresh_actual_rates+0x7a>
	{
		//
		gyros_fltrs[idx].U_n = imu_gyr[idx];
 80015bc:	4a1f      	ldr	r2, [pc, #124]	@ (800163c <refresh_actual_rates+0xa4>)
 80015be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	491e      	ldr	r1, [pc, #120]	@ (8001640 <refresh_actual_rates+0xa8>)
 80015c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015ca:	202c      	movs	r0, #44	@ 0x2c
 80015cc:	fb00 f303 	mul.w	r3, r0, r3
 80015d0:	440b      	add	r3, r1
 80015d2:	330c      	adds	r3, #12
 80015d4:	601a      	str	r2, [r3, #0]

		gyros_fltrs[idx] = filtering_lpf(&gyros_fltrs[idx]);
 80015d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015d8:	222c      	movs	r2, #44	@ 0x2c
 80015da:	fb02 f303 	mul.w	r3, r2, r3
 80015de:	4a18      	ldr	r2, [pc, #96]	@ (8001640 <refresh_actual_rates+0xa8>)
 80015e0:	441a      	add	r2, r3
 80015e2:	4917      	ldr	r1, [pc, #92]	@ (8001640 <refresh_actual_rates+0xa8>)
 80015e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015e6:	202c      	movs	r0, #44	@ 0x2c
 80015e8:	fb00 f303 	mul.w	r3, r0, r3
 80015ec:	18cc      	adds	r4, r1, r3
 80015ee:	463b      	mov	r3, r7
 80015f0:	4611      	mov	r1, r2
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 fce6 	bl	8001fc4 <filtering_lpf>
 80015f8:	4625      	mov	r5, r4
 80015fa:	463c      	mov	r4, r7
 80015fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001600:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001602:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001604:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001608:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	for(int idx = 0; idx < 3; idx++)
 800160c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800160e:	3301      	adds	r3, #1
 8001610:	637b      	str	r3, [r7, #52]	@ 0x34
 8001612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001614:	2b02      	cmp	r3, #2
 8001616:	ddd1      	ble.n	80015bc <refresh_actual_rates+0x24>
	}

	actual_rates.roll  = gyros_fltrs[0].Y_n ;
 8001618:	4b09      	ldr	r3, [pc, #36]	@ (8001640 <refresh_actual_rates+0xa8>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a09      	ldr	r2, [pc, #36]	@ (8001644 <refresh_actual_rates+0xac>)
 800161e:	6013      	str	r3, [r2, #0]
	actual_rates.pitch = gyros_fltrs[1].Y_n ;
 8001620:	4b07      	ldr	r3, [pc, #28]	@ (8001640 <refresh_actual_rates+0xa8>)
 8001622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001624:	4a07      	ldr	r2, [pc, #28]	@ (8001644 <refresh_actual_rates+0xac>)
 8001626:	6053      	str	r3, [r2, #4]
	actual_rates.yaw   = gyros_fltrs[2].Y_n ;
 8001628:	4b05      	ldr	r3, [pc, #20]	@ (8001640 <refresh_actual_rates+0xa8>)
 800162a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800162c:	4a05      	ldr	r2, [pc, #20]	@ (8001644 <refresh_actual_rates+0xac>)
 800162e:	6093      	str	r3, [r2, #8]
}
 8001630:	bf00      	nop
 8001632:	3738      	adds	r7, #56	@ 0x38
 8001634:	46bd      	mov	sp, r7
 8001636:	bdb0      	pop	{r4, r5, r7, pc}
 8001638:	24001650 	.word	0x24001650
 800163c:	24000470 	.word	0x24000470
 8001640:	240003e0 	.word	0x240003e0
 8001644:	2400047c 	.word	0x2400047c

08001648 <FIX_WING_MIXER>:
#include "Flight_Management_Control/servo_mixers.h"



Servo_mgmt_s FIX_WING_MIXER(Cmd_s control_cmd, Cmd_s trims)
{
 8001648:	b4b0      	push	{r4, r5, r7}
 800164a:	b091      	sub	sp, #68	@ 0x44
 800164c:	af00      	add	r7, sp, #0
 800164e:	6278      	str	r0, [r7, #36]	@ 0x24
 8001650:	eeb0 4a40 	vmov.f32	s8, s0
 8001654:	eef0 4a60 	vmov.f32	s9, s1
 8001658:	eeb0 5a41 	vmov.f32	s10, s2
 800165c:	eef0 5a61 	vmov.f32	s11, s3
 8001660:	eeb0 6a42 	vmov.f32	s12, s4
 8001664:	eef0 6a62 	vmov.f32	s13, s5
 8001668:	eeb0 7a43 	vmov.f32	s14, s6
 800166c:	eef0 7a63 	vmov.f32	s15, s7
 8001670:	ed87 4a05 	vstr	s8, [r7, #20]
 8001674:	edc7 4a06 	vstr	s9, [r7, #24]
 8001678:	ed87 5a07 	vstr	s10, [r7, #28]
 800167c:	edc7 5a08 	vstr	s11, [r7, #32]
 8001680:	ed87 6a01 	vstr	s12, [r7, #4]
 8001684:	edc7 6a02 	vstr	s13, [r7, #8]
 8001688:	ed87 7a03 	vstr	s14, [r7, #12]
 800168c:	edc7 7a04 	vstr	s15, [r7, #16]
	//
	Servo_mgmt_s mixer_output;

	mixer_output.S[0]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 8001690:	edd7 7a05 	vldr	s15, [r7, #20]
 8001694:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8001814 <FIX_WING_MIXER+0x1cc>
 8001698:	ee67 7a87 	vmul.f32	s15, s15, s14
 800169c:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8001818 <FIX_WING_MIXER+0x1d0>
 80016a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80016a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80016a8:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 8001818 <FIX_WING_MIXER+0x1d0>
 80016ac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80016b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016b8:	ee17 3a90 	vmov	r3, s15
 80016bc:	b29b      	uxth	r3, r3
 80016be:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	mixer_output.S[1]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 80016c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80016c4:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8001814 <FIX_WING_MIXER+0x1cc>
 80016c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016cc:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001818 <FIX_WING_MIXER+0x1d0>
 80016d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80016d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80016d8:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001818 <FIX_WING_MIXER+0x1d0>
 80016dc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80016e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016e8:	ee17 3a90 	vmov	r3, s15
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	mixer_output.S[2]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 80016f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80016f4:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001814 <FIX_WING_MIXER+0x1cc>
 80016f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016fc:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001818 <FIX_WING_MIXER+0x1d0>
 8001700:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001704:	edd7 7a02 	vldr	s15, [r7, #8]
 8001708:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8001818 <FIX_WING_MIXER+0x1d0>
 800170c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001714:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001718:	ee17 3a90 	vmov	r3, s15
 800171c:	b29b      	uxth	r3, r3
 800171e:	863b      	strh	r3, [r7, #48]	@ 0x30
	mixer_output.S[3]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 8001720:	edd7 7a06 	vldr	s15, [r7, #24]
 8001724:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001814 <FIX_WING_MIXER+0x1cc>
 8001728:	ee67 7a87 	vmul.f32	s15, s15, s14
 800172c:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001818 <FIX_WING_MIXER+0x1d0>
 8001730:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001734:	edd7 7a02 	vldr	s15, [r7, #8]
 8001738:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8001818 <FIX_WING_MIXER+0x1d0>
 800173c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001740:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001744:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001748:	ee17 3a90 	vmov	r3, s15
 800174c:	b29b      	uxth	r3, r3
 800174e:	867b      	strh	r3, [r7, #50]	@ 0x32
	mixer_output.S[4]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 8001750:	edd7 7a07 	vldr	s15, [r7, #28]
 8001754:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001814 <FIX_WING_MIXER+0x1cc>
 8001758:	ee67 7a87 	vmul.f32	s15, s15, s14
 800175c:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001818 <FIX_WING_MIXER+0x1d0>
 8001760:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001764:	edd7 7a03 	vldr	s15, [r7, #12]
 8001768:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8001818 <FIX_WING_MIXER+0x1d0>
 800176c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001778:	ee17 3a90 	vmov	r3, s15
 800177c:	b29b      	uxth	r3, r3
 800177e:	86bb      	strh	r3, [r7, #52]	@ 0x34
	mixer_output.S[5]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 8001780:	edd7 7a07 	vldr	s15, [r7, #28]
 8001784:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001814 <FIX_WING_MIXER+0x1cc>
 8001788:	ee67 7a87 	vmul.f32	s15, s15, s14
 800178c:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001818 <FIX_WING_MIXER+0x1d0>
 8001790:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001794:	edd7 7a03 	vldr	s15, [r7, #12]
 8001798:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8001818 <FIX_WING_MIXER+0x1d0>
 800179c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80017a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017a8:	ee17 3a90 	vmov	r3, s15
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
	mixer_output.S[6]  = (uint16_t)(1000.0f + 500.f * control_cmd.thrust+ (1500 - trims.thrust)) ;
 80017b0:	edd7 7a08 	vldr	s15, [r7, #32]
 80017b4:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001814 <FIX_WING_MIXER+0x1cc>
 80017b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017bc:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800181c <FIX_WING_MIXER+0x1d4>
 80017c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80017c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80017c8:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001818 <FIX_WING_MIXER+0x1d0>
 80017cc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80017d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017d8:	ee17 3a90 	vmov	r3, s15
 80017dc:	b29b      	uxth	r3, r3
 80017de:	873b      	strh	r3, [r7, #56]	@ 0x38
	mixer_output.S[7]  = (uint16_t)(1500.0f );
 80017e0:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80017e4:	877b      	strh	r3, [r7, #58]	@ 0x3a
	mixer_output.S[8]  = (uint16_t)(1500.0f );
 80017e6:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80017ea:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	mixer_output.S[9]  = (uint16_t)(1500.0f );
 80017ec:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80017f0:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	return mixer_output;
 80017f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f4:	461d      	mov	r5, r3
 80017f6:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 80017fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017fc:	6028      	str	r0, [r5, #0]
 80017fe:	6069      	str	r1, [r5, #4]
 8001800:	60aa      	str	r2, [r5, #8]
 8001802:	60eb      	str	r3, [r5, #12]
 8001804:	6820      	ldr	r0, [r4, #0]
 8001806:	6128      	str	r0, [r5, #16]
}
 8001808:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800180a:	3744      	adds	r7, #68	@ 0x44
 800180c:	46bd      	mov	sp, r7
 800180e:	bcb0      	pop	{r4, r5, r7}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	43fa0000 	.word	0x43fa0000
 8001818:	44bb8000 	.word	0x44bb8000
 800181c:	447a0000 	.word	0x447a0000

08001820 <FLYING_WING_MIXER>:

Servo_mgmt_s FLYING_WING_MIXER(Cmd_s control_cmd, Cmd_s trims)
{
 8001820:	b4b0      	push	{r4, r5, r7}
 8001822:	b091      	sub	sp, #68	@ 0x44
 8001824:	af00      	add	r7, sp, #0
 8001826:	6278      	str	r0, [r7, #36]	@ 0x24
 8001828:	eeb0 4a40 	vmov.f32	s8, s0
 800182c:	eef0 4a60 	vmov.f32	s9, s1
 8001830:	eeb0 5a41 	vmov.f32	s10, s2
 8001834:	eef0 5a61 	vmov.f32	s11, s3
 8001838:	eeb0 6a42 	vmov.f32	s12, s4
 800183c:	eef0 6a62 	vmov.f32	s13, s5
 8001840:	eeb0 7a43 	vmov.f32	s14, s6
 8001844:	eef0 7a63 	vmov.f32	s15, s7
 8001848:	ed87 4a05 	vstr	s8, [r7, #20]
 800184c:	edc7 4a06 	vstr	s9, [r7, #24]
 8001850:	ed87 5a07 	vstr	s10, [r7, #28]
 8001854:	edc7 5a08 	vstr	s11, [r7, #32]
 8001858:	ed87 6a01 	vstr	s12, [r7, #4]
 800185c:	edc7 6a02 	vstr	s13, [r7, #8]
 8001860:	ed87 7a03 	vstr	s14, [r7, #12]
 8001864:	edc7 7a04 	vstr	s15, [r7, #16]
	//
	Servo_mgmt_s mixer_output;

	mixer_output.S[0]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 8001868:	edd7 7a05 	vldr	s15, [r7, #20]
 800186c:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 80019ec <FLYING_WING_MIXER+0x1cc>
 8001870:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001874:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 80019f0 <FLYING_WING_MIXER+0x1d0>
 8001878:	ee37 7a87 	vadd.f32	s14, s15, s14
 800187c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001880:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 80019f0 <FLYING_WING_MIXER+0x1d0>
 8001884:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001888:	ee77 7a27 	vadd.f32	s15, s14, s15
 800188c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001890:	ee17 3a90 	vmov	r3, s15
 8001894:	b29b      	uxth	r3, r3
 8001896:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	mixer_output.S[1]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 8001898:	edd7 7a05 	vldr	s15, [r7, #20]
 800189c:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 80019ec <FLYING_WING_MIXER+0x1cc>
 80018a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018a4:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80019f0 <FLYING_WING_MIXER+0x1d0>
 80018a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80018ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80018b0:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80019f0 <FLYING_WING_MIXER+0x1d0>
 80018b4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80018b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018c0:	ee17 3a90 	vmov	r3, s15
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	mixer_output.S[2]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 80018c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80018cc:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80019ec <FLYING_WING_MIXER+0x1cc>
 80018d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018d4:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80019f0 <FLYING_WING_MIXER+0x1d0>
 80018d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80018dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80018e0:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80019f0 <FLYING_WING_MIXER+0x1d0>
 80018e4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80018e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018f0:	ee17 3a90 	vmov	r3, s15
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	863b      	strh	r3, [r7, #48]	@ 0x30
	mixer_output.S[3]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 80018f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80018fc:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80019ec <FLYING_WING_MIXER+0x1cc>
 8001900:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001904:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80019f0 <FLYING_WING_MIXER+0x1d0>
 8001908:	ee37 7a87 	vadd.f32	s14, s15, s14
 800190c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001910:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80019f0 <FLYING_WING_MIXER+0x1d0>
 8001914:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001918:	ee77 7a27 	vadd.f32	s15, s14, s15
 800191c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001920:	ee17 3a90 	vmov	r3, s15
 8001924:	b29b      	uxth	r3, r3
 8001926:	867b      	strh	r3, [r7, #50]	@ 0x32
	mixer_output.S[4]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 8001928:	edd7 7a07 	vldr	s15, [r7, #28]
 800192c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80019ec <FLYING_WING_MIXER+0x1cc>
 8001930:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001934:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80019f0 <FLYING_WING_MIXER+0x1d0>
 8001938:	ee37 7a87 	vadd.f32	s14, s15, s14
 800193c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001940:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 80019f0 <FLYING_WING_MIXER+0x1d0>
 8001944:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001948:	ee77 7a27 	vadd.f32	s15, s14, s15
 800194c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001950:	ee17 3a90 	vmov	r3, s15
 8001954:	b29b      	uxth	r3, r3
 8001956:	86bb      	strh	r3, [r7, #52]	@ 0x34
	mixer_output.S[5]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 8001958:	edd7 7a07 	vldr	s15, [r7, #28]
 800195c:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80019ec <FLYING_WING_MIXER+0x1cc>
 8001960:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001964:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80019f0 <FLYING_WING_MIXER+0x1d0>
 8001968:	ee37 7a87 	vadd.f32	s14, s15, s14
 800196c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001970:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80019f0 <FLYING_WING_MIXER+0x1d0>
 8001974:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001978:	ee77 7a27 	vadd.f32	s15, s14, s15
 800197c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001980:	ee17 3a90 	vmov	r3, s15
 8001984:	b29b      	uxth	r3, r3
 8001986:	86fb      	strh	r3, [r7, #54]	@ 0x36
	mixer_output.S[6]  = (uint16_t)(1000.0f + 500.f * control_cmd.thrust+ (1500 - trims.thrust)) ;
 8001988:	edd7 7a08 	vldr	s15, [r7, #32]
 800198c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80019ec <FLYING_WING_MIXER+0x1cc>
 8001990:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001994:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80019f4 <FLYING_WING_MIXER+0x1d4>
 8001998:	ee37 7a87 	vadd.f32	s14, s15, s14
 800199c:	edd7 7a04 	vldr	s15, [r7, #16]
 80019a0:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80019f0 <FLYING_WING_MIXER+0x1d0>
 80019a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019b0:	ee17 3a90 	vmov	r3, s15
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	873b      	strh	r3, [r7, #56]	@ 0x38
	mixer_output.S[7]  = (uint16_t)(1500.0f );
 80019b8:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80019bc:	877b      	strh	r3, [r7, #58]	@ 0x3a
	mixer_output.S[8]  = (uint16_t)(1500.0f );
 80019be:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80019c2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	mixer_output.S[9]  = (uint16_t)(1500.0f );
 80019c4:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80019c8:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	return mixer_output;
 80019ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019cc:	461d      	mov	r5, r3
 80019ce:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 80019d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019d4:	6028      	str	r0, [r5, #0]
 80019d6:	6069      	str	r1, [r5, #4]
 80019d8:	60aa      	str	r2, [r5, #8]
 80019da:	60eb      	str	r3, [r5, #12]
 80019dc:	6820      	ldr	r0, [r4, #0]
 80019de:	6128      	str	r0, [r5, #16]
}
 80019e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80019e2:	3744      	adds	r7, #68	@ 0x44
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bcb0      	pop	{r4, r5, r7}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	43fa0000 	.word	0x43fa0000
 80019f0:	44bb8000 	.word	0x44bb8000
 80019f4:	447a0000 	.word	0x447a0000

080019f8 <TANDEM_WING_MIXER>:

Servo_mgmt_s TANDEM_WING_MIXER(Cmd_s control_cmd, Cmd_s trims)
{
 80019f8:	b4b0      	push	{r4, r5, r7}
 80019fa:	b091      	sub	sp, #68	@ 0x44
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6278      	str	r0, [r7, #36]	@ 0x24
 8001a00:	eeb0 4a40 	vmov.f32	s8, s0
 8001a04:	eef0 4a60 	vmov.f32	s9, s1
 8001a08:	eeb0 5a41 	vmov.f32	s10, s2
 8001a0c:	eef0 5a61 	vmov.f32	s11, s3
 8001a10:	eeb0 6a42 	vmov.f32	s12, s4
 8001a14:	eef0 6a62 	vmov.f32	s13, s5
 8001a18:	eeb0 7a43 	vmov.f32	s14, s6
 8001a1c:	eef0 7a63 	vmov.f32	s15, s7
 8001a20:	ed87 4a05 	vstr	s8, [r7, #20]
 8001a24:	edc7 4a06 	vstr	s9, [r7, #24]
 8001a28:	ed87 5a07 	vstr	s10, [r7, #28]
 8001a2c:	edc7 5a08 	vstr	s11, [r7, #32]
 8001a30:	ed87 6a01 	vstr	s12, [r7, #4]
 8001a34:	edc7 6a02 	vstr	s13, [r7, #8]
 8001a38:	ed87 7a03 	vstr	s14, [r7, #12]
 8001a3c:	edc7 7a04 	vstr	s15, [r7, #16]
	//
	Servo_mgmt_s mixer_output;

	mixer_output.S[0]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 8001a40:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a44:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8001bc4 <TANDEM_WING_MIXER+0x1cc>
 8001a48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a4c:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8001bc8 <TANDEM_WING_MIXER+0x1d0>
 8001a50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001a54:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a58:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 8001bc8 <TANDEM_WING_MIXER+0x1d0>
 8001a5c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a68:	ee17 3a90 	vmov	r3, s15
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	mixer_output.S[1]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 8001a70:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a74:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8001bc4 <TANDEM_WING_MIXER+0x1cc>
 8001a78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a7c:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001bc8 <TANDEM_WING_MIXER+0x1d0>
 8001a80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001a84:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a88:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001bc8 <TANDEM_WING_MIXER+0x1d0>
 8001a8c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a98:	ee17 3a90 	vmov	r3, s15
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	mixer_output.S[2]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 8001aa0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001aa4:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001bc4 <TANDEM_WING_MIXER+0x1cc>
 8001aa8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aac:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001bc8 <TANDEM_WING_MIXER+0x1d0>
 8001ab0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001ab4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ab8:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8001bc8 <TANDEM_WING_MIXER+0x1d0>
 8001abc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ac0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ac8:	ee17 3a90 	vmov	r3, s15
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	863b      	strh	r3, [r7, #48]	@ 0x30
	mixer_output.S[3]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 8001ad0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ad4:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001bc4 <TANDEM_WING_MIXER+0x1cc>
 8001ad8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001adc:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001bc8 <TANDEM_WING_MIXER+0x1d0>
 8001ae0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001ae4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ae8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8001bc8 <TANDEM_WING_MIXER+0x1d0>
 8001aec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001af8:	ee17 3a90 	vmov	r3, s15
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	867b      	strh	r3, [r7, #50]	@ 0x32
	mixer_output.S[4]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 8001b00:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b04:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001bc4 <TANDEM_WING_MIXER+0x1cc>
 8001b08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b0c:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001bc8 <TANDEM_WING_MIXER+0x1d0>
 8001b10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001b14:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b18:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8001bc8 <TANDEM_WING_MIXER+0x1d0>
 8001b1c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b28:	ee17 3a90 	vmov	r3, s15
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	86bb      	strh	r3, [r7, #52]	@ 0x34
	mixer_output.S[5]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 8001b30:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b34:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001bc4 <TANDEM_WING_MIXER+0x1cc>
 8001b38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b3c:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001bc8 <TANDEM_WING_MIXER+0x1d0>
 8001b40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001b44:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b48:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8001bc8 <TANDEM_WING_MIXER+0x1d0>
 8001b4c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b58:	ee17 3a90 	vmov	r3, s15
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	86fb      	strh	r3, [r7, #54]	@ 0x36
	mixer_output.S[6]  = (uint16_t)(1000.0f + 500.f * control_cmd.thrust+ (1500 - trims.thrust)) ;
 8001b60:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b64:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001bc4 <TANDEM_WING_MIXER+0x1cc>
 8001b68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b6c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001bcc <TANDEM_WING_MIXER+0x1d4>
 8001b70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001b74:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b78:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001bc8 <TANDEM_WING_MIXER+0x1d0>
 8001b7c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b88:	ee17 3a90 	vmov	r3, s15
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	873b      	strh	r3, [r7, #56]	@ 0x38
	mixer_output.S[7]  = (uint16_t)(1500.0f );
 8001b90:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001b94:	877b      	strh	r3, [r7, #58]	@ 0x3a
	mixer_output.S[8]  = (uint16_t)(1500.0f );
 8001b96:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001b9a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	mixer_output.S[9]  = (uint16_t)(1500.0f );
 8001b9c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001ba0:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	return mixer_output;
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba4:	461d      	mov	r5, r3
 8001ba6:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8001baa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bac:	6028      	str	r0, [r5, #0]
 8001bae:	6069      	str	r1, [r5, #4]
 8001bb0:	60aa      	str	r2, [r5, #8]
 8001bb2:	60eb      	str	r3, [r5, #12]
 8001bb4:	6820      	ldr	r0, [r4, #0]
 8001bb6:	6128      	str	r0, [r5, #16]
}
 8001bb8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001bba:	3744      	adds	r7, #68	@ 0x44
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bcb0      	pop	{r4, r5, r7}
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	43fa0000 	.word	0x43fa0000
 8001bc8:	44bb8000 	.word	0x44bb8000
 8001bcc:	447a0000 	.word	0x447a0000

08001bd0 <CUSTOM_FRAME_MIXER>:

Servo_mgmt_s CUSTOM_FRAME_MIXER(Cmd_s control_cmd, Cmd_s trims)
{
 8001bd0:	b4b0      	push	{r4, r5, r7}
 8001bd2:	b091      	sub	sp, #68	@ 0x44
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6278      	str	r0, [r7, #36]	@ 0x24
 8001bd8:	eeb0 4a40 	vmov.f32	s8, s0
 8001bdc:	eef0 4a60 	vmov.f32	s9, s1
 8001be0:	eeb0 5a41 	vmov.f32	s10, s2
 8001be4:	eef0 5a61 	vmov.f32	s11, s3
 8001be8:	eeb0 6a42 	vmov.f32	s12, s4
 8001bec:	eef0 6a62 	vmov.f32	s13, s5
 8001bf0:	eeb0 7a43 	vmov.f32	s14, s6
 8001bf4:	eef0 7a63 	vmov.f32	s15, s7
 8001bf8:	ed87 4a05 	vstr	s8, [r7, #20]
 8001bfc:	edc7 4a06 	vstr	s9, [r7, #24]
 8001c00:	ed87 5a07 	vstr	s10, [r7, #28]
 8001c04:	edc7 5a08 	vstr	s11, [r7, #32]
 8001c08:	ed87 6a01 	vstr	s12, [r7, #4]
 8001c0c:	edc7 6a02 	vstr	s13, [r7, #8]
 8001c10:	ed87 7a03 	vstr	s14, [r7, #12]
 8001c14:	edc7 7a04 	vstr	s15, [r7, #16]
	//
	Servo_mgmt_s mixer_output;

	mixer_output.S[0]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 8001c18:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c1c:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8001d9c <CUSTOM_FRAME_MIXER+0x1cc>
 8001c20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c24:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8001da0 <CUSTOM_FRAME_MIXER+0x1d0>
 8001c28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001c2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c30:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 8001da0 <CUSTOM_FRAME_MIXER+0x1d0>
 8001c34:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c40:	ee17 3a90 	vmov	r3, s15
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	mixer_output.S[1]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 8001c48:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c4c:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8001d9c <CUSTOM_FRAME_MIXER+0x1cc>
 8001c50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c54:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001da0 <CUSTOM_FRAME_MIXER+0x1d0>
 8001c58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001c5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c60:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001da0 <CUSTOM_FRAME_MIXER+0x1d0>
 8001c64:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c70:	ee17 3a90 	vmov	r3, s15
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	mixer_output.S[2]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 8001c78:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c7c:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001d9c <CUSTOM_FRAME_MIXER+0x1cc>
 8001c80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c84:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001da0 <CUSTOM_FRAME_MIXER+0x1d0>
 8001c88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001c8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c90:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8001da0 <CUSTOM_FRAME_MIXER+0x1d0>
 8001c94:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ca0:	ee17 3a90 	vmov	r3, s15
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	863b      	strh	r3, [r7, #48]	@ 0x30
	mixer_output.S[3]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 8001ca8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cac:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001d9c <CUSTOM_FRAME_MIXER+0x1cc>
 8001cb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cb4:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001da0 <CUSTOM_FRAME_MIXER+0x1d0>
 8001cb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001cbc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cc0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8001da0 <CUSTOM_FRAME_MIXER+0x1d0>
 8001cc4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001cc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ccc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cd0:	ee17 3a90 	vmov	r3, s15
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	867b      	strh	r3, [r7, #50]	@ 0x32
	mixer_output.S[4]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 8001cd8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cdc:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001d9c <CUSTOM_FRAME_MIXER+0x1cc>
 8001ce0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ce4:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001da0 <CUSTOM_FRAME_MIXER+0x1d0>
 8001ce8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001cec:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cf0:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8001da0 <CUSTOM_FRAME_MIXER+0x1d0>
 8001cf4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d00:	ee17 3a90 	vmov	r3, s15
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	86bb      	strh	r3, [r7, #52]	@ 0x34
	mixer_output.S[5]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 8001d08:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d0c:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001d9c <CUSTOM_FRAME_MIXER+0x1cc>
 8001d10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d14:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001da0 <CUSTOM_FRAME_MIXER+0x1d0>
 8001d18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001d1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d20:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8001da0 <CUSTOM_FRAME_MIXER+0x1d0>
 8001d24:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001d28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d30:	ee17 3a90 	vmov	r3, s15
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	86fb      	strh	r3, [r7, #54]	@ 0x36
	mixer_output.S[6]  = (uint16_t)(1000.0f + 500.f * control_cmd.thrust+ (1500 - trims.thrust)) ;
 8001d38:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d3c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001d9c <CUSTOM_FRAME_MIXER+0x1cc>
 8001d40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d44:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001da4 <CUSTOM_FRAME_MIXER+0x1d4>
 8001d48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001d4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d50:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001da0 <CUSTOM_FRAME_MIXER+0x1d0>
 8001d54:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001d58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d60:	ee17 3a90 	vmov	r3, s15
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	873b      	strh	r3, [r7, #56]	@ 0x38
	mixer_output.S[7]  = (uint16_t)(1500.0f );
 8001d68:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001d6c:	877b      	strh	r3, [r7, #58]	@ 0x3a
	mixer_output.S[8]  = (uint16_t)(1500.0f );
 8001d6e:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001d72:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	mixer_output.S[9]  = (uint16_t)(1500.0f );
 8001d74:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001d78:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	return mixer_output;
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7c:	461d      	mov	r5, r3
 8001d7e:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8001d82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d84:	6028      	str	r0, [r5, #0]
 8001d86:	6069      	str	r1, [r5, #4]
 8001d88:	60aa      	str	r2, [r5, #8]
 8001d8a:	60eb      	str	r3, [r5, #12]
 8001d8c:	6820      	ldr	r0, [r4, #0]
 8001d8e:	6128      	str	r0, [r5, #16]
}
 8001d90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d92:	3744      	adds	r7, #68	@ 0x44
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bcb0      	pop	{r4, r5, r7}
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	43fa0000 	.word	0x43fa0000
 8001da0:	44bb8000 	.word	0x44bb8000
 8001da4:	447a0000 	.word	0x447a0000

08001da8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dae:	4b15      	ldr	r3, [pc, #84]	@ (8001e04 <MX_DMA_Init+0x5c>)
 8001db0:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001db4:	4a13      	ldr	r2, [pc, #76]	@ (8001e04 <MX_DMA_Init+0x5c>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8001dbe:	4b11      	ldr	r3, [pc, #68]	@ (8001e04 <MX_DMA_Init+0x5c>)
 8001dc0:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	607b      	str	r3, [r7, #4]
 8001dca:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2105      	movs	r1, #5
 8001dd0:	200b      	movs	r0, #11
 8001dd2:	f004 fe01 	bl	80069d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001dd6:	200b      	movs	r0, #11
 8001dd8:	f004 fe18 	bl	8006a0c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2105      	movs	r1, #5
 8001de0:	200c      	movs	r0, #12
 8001de2:	f004 fdf9 	bl	80069d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001de6:	200c      	movs	r0, #12
 8001de8:	f004 fe10 	bl	8006a0c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001dec:	2200      	movs	r2, #0
 8001dee:	2105      	movs	r1, #5
 8001df0:	200d      	movs	r0, #13
 8001df2:	f004 fdf1 	bl	80069d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001df6:	200d      	movs	r0, #13
 8001df8:	f004 fe08 	bl	8006a0c <HAL_NVIC_EnableIRQ>

}
 8001dfc:	bf00      	nop
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	58024400 	.word	0x58024400

08001e08 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001e0c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ec8 <MX_FDCAN1_Init+0xc0>)
 8001e0e:	4a2f      	ldr	r2, [pc, #188]	@ (8001ecc <MX_FDCAN1_Init+0xc4>)
 8001e10:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001e12:	4b2d      	ldr	r3, [pc, #180]	@ (8001ec8 <MX_FDCAN1_Init+0xc0>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001e18:	4b2b      	ldr	r3, [pc, #172]	@ (8001ec8 <MX_FDCAN1_Init+0xc0>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001e1e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ec8 <MX_FDCAN1_Init+0xc0>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001e24:	4b28      	ldr	r3, [pc, #160]	@ (8001ec8 <MX_FDCAN1_Init+0xc0>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001e2a:	4b27      	ldr	r3, [pc, #156]	@ (8001ec8 <MX_FDCAN1_Init+0xc0>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001e30:	4b25      	ldr	r3, [pc, #148]	@ (8001ec8 <MX_FDCAN1_Init+0xc0>)
 8001e32:	2210      	movs	r2, #16
 8001e34:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001e36:	4b24      	ldr	r3, [pc, #144]	@ (8001ec8 <MX_FDCAN1_Init+0xc0>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001e3c:	4b22      	ldr	r3, [pc, #136]	@ (8001ec8 <MX_FDCAN1_Init+0xc0>)
 8001e3e:	2202      	movs	r2, #2
 8001e40:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001e42:	4b21      	ldr	r3, [pc, #132]	@ (8001ec8 <MX_FDCAN1_Init+0xc0>)
 8001e44:	2202      	movs	r2, #2
 8001e46:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001e48:	4b1f      	ldr	r3, [pc, #124]	@ (8001ec8 <MX_FDCAN1_Init+0xc0>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec8 <MX_FDCAN1_Init+0xc0>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001e54:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec8 <MX_FDCAN1_Init+0xc0>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec8 <MX_FDCAN1_Init+0xc0>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001e60:	4b19      	ldr	r3, [pc, #100]	@ (8001ec8 <MX_FDCAN1_Init+0xc0>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001e66:	4b18      	ldr	r3, [pc, #96]	@ (8001ec8 <MX_FDCAN1_Init+0xc0>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001e6c:	4b16      	ldr	r3, [pc, #88]	@ (8001ec8 <MX_FDCAN1_Init+0xc0>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8001e72:	4b15      	ldr	r3, [pc, #84]	@ (8001ec8 <MX_FDCAN1_Init+0xc0>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001e78:	4b13      	ldr	r3, [pc, #76]	@ (8001ec8 <MX_FDCAN1_Init+0xc0>)
 8001e7a:	2204      	movs	r2, #4
 8001e7c:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001e7e:	4b12      	ldr	r3, [pc, #72]	@ (8001ec8 <MX_FDCAN1_Init+0xc0>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001e84:	4b10      	ldr	r3, [pc, #64]	@ (8001ec8 <MX_FDCAN1_Init+0xc0>)
 8001e86:	2204      	movs	r2, #4
 8001e88:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec8 <MX_FDCAN1_Init+0xc0>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001e90:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec8 <MX_FDCAN1_Init+0xc0>)
 8001e92:	2204      	movs	r2, #4
 8001e94:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001e96:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec8 <MX_FDCAN1_Init+0xc0>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec8 <MX_FDCAN1_Init+0xc0>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8001ea2:	4b09      	ldr	r3, [pc, #36]	@ (8001ec8 <MX_FDCAN1_Init+0xc0>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001ea8:	4b07      	ldr	r3, [pc, #28]	@ (8001ec8 <MX_FDCAN1_Init+0xc0>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001eae:	4b06      	ldr	r3, [pc, #24]	@ (8001ec8 <MX_FDCAN1_Init+0xc0>)
 8001eb0:	2204      	movs	r2, #4
 8001eb2:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001eb4:	4804      	ldr	r0, [pc, #16]	@ (8001ec8 <MX_FDCAN1_Init+0xc0>)
 8001eb6:	f007 fd19 	bl	80098ec <HAL_FDCAN_Init>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001ec0:	f001 f936 	bl	8003130 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001ec4:	bf00      	nop
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	24000488 	.word	0x24000488
 8001ecc:	4000a000 	.word	0x4000a000

08001ed0 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b0ba      	sub	sp, #232	@ 0xe8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ee8:	f107 0310 	add.w	r3, r7, #16
 8001eec:	22c0      	movs	r2, #192	@ 0xc0
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f015 fe88 	bl	8017c06 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a2f      	ldr	r2, [pc, #188]	@ (8001fb8 <HAL_FDCAN_MspInit+0xe8>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d157      	bne.n	8001fb0 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001f00:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001f04:	f04f 0300 	mov.w	r3, #0
 8001f08:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001f0c:	2304      	movs	r3, #4
 8001f0e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 8001f10:	2308      	movs	r3, #8
 8001f12:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001f14:	2302      	movs	r3, #2
 8001f16:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001f20:	23c0      	movs	r3, #192	@ 0xc0
 8001f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001f24:	2300      	movs	r3, #0
 8001f26:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8001f2c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001f30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f34:	f107 0310 	add.w	r3, r7, #16
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f009 fb73 	bl	800b624 <HAL_RCCEx_PeriphCLKConfig>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8001f44:	f001 f8f4 	bl	8003130 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001f48:	4b1c      	ldr	r3, [pc, #112]	@ (8001fbc <HAL_FDCAN_MspInit+0xec>)
 8001f4a:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001f4e:	4a1b      	ldr	r2, [pc, #108]	@ (8001fbc <HAL_FDCAN_MspInit+0xec>)
 8001f50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f54:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8001f58:	4b18      	ldr	r3, [pc, #96]	@ (8001fbc <HAL_FDCAN_MspInit+0xec>)
 8001f5a:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f66:	4b15      	ldr	r3, [pc, #84]	@ (8001fbc <HAL_FDCAN_MspInit+0xec>)
 8001f68:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f6c:	4a13      	ldr	r2, [pc, #76]	@ (8001fbc <HAL_FDCAN_MspInit+0xec>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001f76:	4b11      	ldr	r3, [pc, #68]	@ (8001fbc <HAL_FDCAN_MspInit+0xec>)
 8001f78:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f84:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001f88:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001f9e:	2309      	movs	r3, #9
 8001fa0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4805      	ldr	r0, [pc, #20]	@ (8001fc0 <HAL_FDCAN_MspInit+0xf0>)
 8001fac:	f008 f802 	bl	8009fb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	37e8      	adds	r7, #232	@ 0xe8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	4000a000 	.word	0x4000a000
 8001fbc:	58024400 	.word	0x58024400
 8001fc0:	58020000 	.word	0x58020000

08001fc4 <filtering_lpf>:
/* Includes ------------------------------------------------------------------*/
#include "filter.h"
#include <math.h>

LPF_s filtering_lpf(LPF_s *filtro)
{
 8001fc4:	b4b0      	push	{r4, r5, r7}
 8001fc6:	b097      	sub	sp, #92	@ 0x5c
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
     *   f_cutoff -> frecuencia de corte
     *   u -> Señal de entrada
     *   y -> Señal de salida
     *   */

    LPF_s resultado = *filtro;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	f107 040c 	add.w	r4, r7, #12
 8001fd4:	461d      	mov	r5, r3
 8001fd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fde:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fe2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    static float y_n;

    // Validación básica de parámetros
    if(filtro->f_cutoff <= 0.0f || filtro->t_sample <= 0.0f) {
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	edd3 7a06 	vldr	s15, [r3, #24]
 8001fec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff4:	d907      	bls.n	8002006 <filtering_lpf+0x42>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ffc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002004:	d80c      	bhi.n	8002020 <filtering_lpf+0x5c>
        return resultado;  // O manejar error adecuadamente
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	461d      	mov	r5, r3
 800200a:	f107 040c 	add.w	r4, r7, #12
 800200e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002010:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002012:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002014:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002016:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800201a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800201e:	e0c6      	b.n	80021ae <filtering_lpf+0x1ea>
    }

    const float w_0 = filtro->f_cutoff * 6.283185307179586f; // 2*PI
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	edd3 7a06 	vldr	s15, [r3, #24]
 8002026:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 80021b8 <filtering_lpf+0x1f4>
 800202a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800202e:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    if(filtro->inicio) {
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002036:	2b00      	cmp	r3, #0
 8002038:	d016      	beq.n	8002068 <filtering_lpf+0xa4>
        y_n = resultado.Y_n = resultado.Y_nm1 = filtro->Y_0;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4a5d      	ldr	r2, [pc, #372]	@ (80021bc <filtering_lpf+0x1f8>)
 8002048:	6013      	str	r3, [r2, #0]
        resultado.inicio = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	637b      	str	r3, [r7, #52]	@ 0x34
        return resultado;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	461d      	mov	r5, r3
 8002052:	f107 040c 	add.w	r4, r7, #12
 8002056:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002058:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800205a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800205c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800205e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002062:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002066:	e0a2      	b.n	80021ae <filtering_lpf+0x1ea>
    }

    const float u_n = filtro->U_n;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	653b      	str	r3, [r7, #80]	@ 0x50
    const float h = filtro->t_sample;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	64fb      	str	r3, [r7, #76]	@ 0x4c
    const float h2 = h * 0.5f;
 8002074:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002078:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800207c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002080:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    // Runge-Kutta 4to orden
    const float k1 = w_0 * (u_n - y_n);
 8002084:	4b4d      	ldr	r3, [pc, #308]	@ (80021bc <filtering_lpf+0x1f8>)
 8002086:	edd3 7a00 	vldr	s15, [r3]
 800208a:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800208e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002092:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800209a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    const float k2 = w_0 * (u_n - (y_n + k1 * h2));
 800209e:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80020a2:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80020a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020aa:	4b44      	ldr	r3, [pc, #272]	@ (80021bc <filtering_lpf+0x1f8>)
 80020ac:	edd3 7a00 	vldr	s15, [r3]
 80020b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020b4:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80020b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020bc:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80020c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c4:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    const float k3 = w_0 * (u_n - (y_n + k2 * h2));
 80020c8:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80020cc:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80020d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020d4:	4b39      	ldr	r3, [pc, #228]	@ (80021bc <filtering_lpf+0x1f8>)
 80020d6:	edd3 7a00 	vldr	s15, [r3]
 80020da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020de:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80020e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020e6:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80020ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ee:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    const float k4 = w_0 * (u_n - (y_n + k3 * h));
 80020f2:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80020f6:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80020fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020fe:	4b2f      	ldr	r3, [pc, #188]	@ (80021bc <filtering_lpf+0x1f8>)
 8002100:	edd3 7a00 	vldr	s15, [r3]
 8002104:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002108:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800210c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002110:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002118:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    y_n += h * (0.166666667f * k1 + 0.333333333f * (k2 + k3) + 0.166666667f * k4);
 800211c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002120:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80021c0 <filtering_lpf+0x1fc>
 8002124:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002128:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 800212c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002130:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002134:	eddf 6a23 	vldr	s13, [pc, #140]	@ 80021c4 <filtering_lpf+0x200>
 8002138:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800213c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002140:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002144:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80021c0 <filtering_lpf+0x1fc>
 8002148:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800214c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002150:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002154:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002158:	4b18      	ldr	r3, [pc, #96]	@ (80021bc <filtering_lpf+0x1f8>)
 800215a:	edd3 7a00 	vldr	s15, [r3]
 800215e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002162:	4b16      	ldr	r3, [pc, #88]	@ (80021bc <filtering_lpf+0x1f8>)
 8002164:	edc3 7a00 	vstr	s15, [r3]

    // Manejo robusto de NaN (protección contra condiciones inválidas)
    y_n = isnan(y_n) ? resultado.Y_nm1 : y_n;
 8002168:	4b14      	ldr	r3, [pc, #80]	@ (80021bc <filtering_lpf+0x1f8>)
 800216a:	edd3 7a00 	vldr	s15, [r3]
 800216e:	eef4 7a67 	vcmp.f32	s15, s15
 8002172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002176:	d701      	bvc.n	800217c <filtering_lpf+0x1b8>
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	e001      	b.n	8002180 <filtering_lpf+0x1bc>
 800217c:	4b0f      	ldr	r3, [pc, #60]	@ (80021bc <filtering_lpf+0x1f8>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a0e      	ldr	r2, [pc, #56]	@ (80021bc <filtering_lpf+0x1f8>)
 8002182:	6013      	str	r3, [r2, #0]

    // Actualizar estructura de resultado
    resultado.Y_n = resultado.Y_nm1 = y_n;
 8002184:	4b0d      	ldr	r3, [pc, #52]	@ (80021bc <filtering_lpf+0x1f8>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	60fb      	str	r3, [r7, #12]
    resultado.U_nm1 = u_n;
 800218e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002190:	61fb      	str	r3, [r7, #28]
    resultado.t_nm1 = resultado.t_n;
 8002192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002194:	633b      	str	r3, [r7, #48]	@ 0x30

    return resultado;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	461d      	mov	r5, r3
 800219a:	f107 040c 	add.w	r4, r7, #12
 800219e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021a6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80021aa:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	375c      	adds	r7, #92	@ 0x5c
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bcb0      	pop	{r4, r5, r7}
 80021b6:	4770      	bx	lr
 80021b8:	40c90fdb 	.word	0x40c90fdb
 80021bc:	24000528 	.word	0x24000528
 80021c0:	3e2aaaab 	.word	0x3e2aaaab
 80021c4:	3eaaaaab 	.word	0x3eaaaaab

080021c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4a07      	ldr	r2, [pc, #28]	@ (80021f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80021d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	4a06      	ldr	r2, [pc, #24]	@ (80021f8 <vApplicationGetIdleTaskMemory+0x30>)
 80021de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2280      	movs	r2, #128	@ 0x80
 80021e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80021e6:	bf00      	nop
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	24000538 	.word	0x24000538
 80021f8:	2400058c 	.word	0x2400058c

080021fc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80021fc:	b5b0      	push	{r4, r5, r7, lr}
 80021fe:	b096      	sub	sp, #88	@ 0x58
 8002200:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task_1ms */
  osThreadDef(Task_1ms, fTask_1ms, osPriorityNormal, 0, 128);
 8002202:	4b1d      	ldr	r3, [pc, #116]	@ (8002278 <MX_FREERTOS_Init+0x7c>)
 8002204:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8002208:	461d      	mov	r5, r3
 800220a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800220c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800220e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002212:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_1msHandle = osThreadCreate(osThread(Task_1ms), NULL);
 8002216:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800221a:	2100      	movs	r1, #0
 800221c:	4618      	mov	r0, r3
 800221e:	f012 fb7f 	bl	8014920 <osThreadCreate>
 8002222:	4603      	mov	r3, r0
 8002224:	4a15      	ldr	r2, [pc, #84]	@ (800227c <MX_FREERTOS_Init+0x80>)
 8002226:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_10ms */
  osThreadDef(Task_10ms, fTask_10ms, osPriorityNormal, 0, 128);
 8002228:	4b15      	ldr	r3, [pc, #84]	@ (8002280 <MX_FREERTOS_Init+0x84>)
 800222a:	f107 0420 	add.w	r4, r7, #32
 800222e:	461d      	mov	r5, r3
 8002230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002234:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002238:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_10msHandle = osThreadCreate(osThread(Task_10ms), NULL);
 800223c:	f107 0320 	add.w	r3, r7, #32
 8002240:	2100      	movs	r1, #0
 8002242:	4618      	mov	r0, r3
 8002244:	f012 fb6c 	bl	8014920 <osThreadCreate>
 8002248:	4603      	mov	r3, r0
 800224a:	4a0e      	ldr	r2, [pc, #56]	@ (8002284 <MX_FREERTOS_Init+0x88>)
 800224c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_100ms */
  osThreadDef(Task_100ms, fTask_100ms, osPriorityNormal, 0, 128);
 800224e:	4b0e      	ldr	r3, [pc, #56]	@ (8002288 <MX_FREERTOS_Init+0x8c>)
 8002250:	1d3c      	adds	r4, r7, #4
 8002252:	461d      	mov	r5, r3
 8002254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002258:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800225c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_100msHandle = osThreadCreate(osThread(Task_100ms), NULL);
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	2100      	movs	r1, #0
 8002264:	4618      	mov	r0, r3
 8002266:	f012 fb5b 	bl	8014920 <osThreadCreate>
 800226a:	4603      	mov	r3, r0
 800226c:	4a07      	ldr	r2, [pc, #28]	@ (800228c <MX_FREERTOS_Init+0x90>)
 800226e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002270:	bf00      	nop
 8002272:	3758      	adds	r7, #88	@ 0x58
 8002274:	46bd      	mov	sp, r7
 8002276:	bdb0      	pop	{r4, r5, r7, pc}
 8002278:	08019c5c 	.word	0x08019c5c
 800227c:	2400052c 	.word	0x2400052c
 8002280:	08019c84 	.word	0x08019c84
 8002284:	24000530 	.word	0x24000530
 8002288:	08019cac 	.word	0x08019cac
 800228c:	24000534 	.word	0x24000534

08002290 <fTask_1ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTask_1ms */
void fTask_1ms(void const * argument)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTask_1ms */
  /* Infinite loop */
	LPF_gyro_filter_init();
 8002298:	f7ff f8f6 	bl	8001488 <LPF_gyro_filter_init>
	LPF_cmd_filter_init();
 800229c:	f7fe fc44 	bl	8000b28 <LPF_cmd_filter_init>

  for(;;)
  {
	TimeOn_Counter++;
 80022a0:	4b07      	ldr	r3, [pc, #28]	@ (80022c0 <fTask_1ms+0x30>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	3301      	adds	r3, #1
 80022a6:	4a06      	ldr	r2, [pc, #24]	@ (80022c0 <fTask_1ms+0x30>)
 80022a8:	6013      	str	r3, [r2, #0]
	LED_Tasks();
 80022aa:	f003 fc2d 	bl	8005b08 <LED_Tasks>
	SBUS_IntegrityVerification();
 80022ae:	f004 f8ed 	bl	800648c <SBUS_IntegrityVerification>
	NMEA_process_task();
 80022b2:	f000 fdb1 	bl	8002e18 <NMEA_process_task>
    osDelay(1);
 80022b6:	2001      	movs	r0, #1
 80022b8:	f012 fb7e 	bl	80149b8 <osDelay>
	TimeOn_Counter++;
 80022bc:	bf00      	nop
 80022be:	e7ef      	b.n	80022a0 <fTask_1ms+0x10>
 80022c0:	24000ec4 	.word	0x24000ec4

080022c4 <fTask_10ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTask_10ms */
void fTask_10ms(void const * argument)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTask_10ms */
  /* Infinite loop */
  for(;;)
  {
	BNO_Tasks();
 80022cc:	f003 fb58 	bl	8005980 <BNO_Tasks>
	BMP280_calculate();
 80022d0:	f002 fda8 	bl	8004e24 <BMP280_calculate>

	FlightTaskAttitude();
 80022d4:	f7fe ff78 	bl	80011c8 <FlightTaskAttitude>

	PWM_Assign();
 80022d8:	f003 fcc8 	bl	8005c6c <PWM_Assign>
	SD_blackbox_write();
 80022dc:	f004 f9b8 	bl	8006650 <SD_blackbox_write>
    osDelay(10);
 80022e0:	200a      	movs	r0, #10
 80022e2:	f012 fb69 	bl	80149b8 <osDelay>
  {
 80022e6:	bf00      	nop
 80022e8:	e7f0      	b.n	80022cc <fTask_10ms+0x8>

080022ea <fTask_100ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTask_100ms */
void fTask_100ms(void const * argument)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b082      	sub	sp, #8
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTask_100ms */
  /* Infinite loop */
  for(;;)
  {
	LR03_StateMachine();
 80022f2:	f003 fca3 	bl	8005c3c <LR03_StateMachine>
    osDelay(100);
 80022f6:	2064      	movs	r0, #100	@ 0x64
 80022f8:	f012 fb5e 	bl	80149b8 <osDelay>
	LR03_StateMachine();
 80022fc:	bf00      	nop
 80022fe:	e7f8      	b.n	80022f2 <fTask_100ms+0x8>

08002300 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08a      	sub	sp, #40	@ 0x28
 8002304:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002306:	f107 0314 	add.w	r3, r7, #20
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	605a      	str	r2, [r3, #4]
 8002310:	609a      	str	r2, [r3, #8]
 8002312:	60da      	str	r2, [r3, #12]
 8002314:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002316:	4b4e      	ldr	r3, [pc, #312]	@ (8002450 <MX_GPIO_Init+0x150>)
 8002318:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800231c:	4a4c      	ldr	r2, [pc, #304]	@ (8002450 <MX_GPIO_Init+0x150>)
 800231e:	f043 0304 	orr.w	r3, r3, #4
 8002322:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002326:	4b4a      	ldr	r3, [pc, #296]	@ (8002450 <MX_GPIO_Init+0x150>)
 8002328:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002334:	4b46      	ldr	r3, [pc, #280]	@ (8002450 <MX_GPIO_Init+0x150>)
 8002336:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800233a:	4a45      	ldr	r2, [pc, #276]	@ (8002450 <MX_GPIO_Init+0x150>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002344:	4b42      	ldr	r3, [pc, #264]	@ (8002450 <MX_GPIO_Init+0x150>)
 8002346:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002352:	4b3f      	ldr	r3, [pc, #252]	@ (8002450 <MX_GPIO_Init+0x150>)
 8002354:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002358:	4a3d      	ldr	r2, [pc, #244]	@ (8002450 <MX_GPIO_Init+0x150>)
 800235a:	f043 0302 	orr.w	r3, r3, #2
 800235e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002362:	4b3b      	ldr	r3, [pc, #236]	@ (8002450 <MX_GPIO_Init+0x150>)
 8002364:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002370:	4b37      	ldr	r3, [pc, #220]	@ (8002450 <MX_GPIO_Init+0x150>)
 8002372:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002376:	4a36      	ldr	r2, [pc, #216]	@ (8002450 <MX_GPIO_Init+0x150>)
 8002378:	f043 0308 	orr.w	r3, r3, #8
 800237c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002380:	4b33      	ldr	r3, [pc, #204]	@ (8002450 <MX_GPIO_Init+0x150>)
 8002382:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	607b      	str	r3, [r7, #4]
 800238c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 800238e:	2200      	movs	r2, #0
 8002390:	f242 010f 	movw	r1, #8207	@ 0x200f
 8002394:	482f      	ldr	r0, [pc, #188]	@ (8002454 <MX_GPIO_Init+0x154>)
 8002396:	f007 ffbd 	bl	800a314 <HAL_GPIO_WritePin>
                          |LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 800239a:	2200      	movs	r2, #0
 800239c:	2110      	movs	r1, #16
 800239e:	482e      	ldr	r0, [pc, #184]	@ (8002458 <MX_GPIO_Init+0x158>)
 80023a0:	f007 ffb8 	bl	800a314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU_BOOT_Pin|BME_NSS_Pin, GPIO_PIN_RESET);
 80023a4:	2200      	movs	r2, #0
 80023a6:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 80023aa:	482c      	ldr	r0, [pc, #176]	@ (800245c <MX_GPIO_Init+0x15c>)
 80023ac:	f007 ffb2 	bl	800a314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, GPIO_PIN_RESET);
 80023b0:	2200      	movs	r2, #0
 80023b2:	2104      	movs	r1, #4
 80023b4:	482a      	ldr	r0, [pc, #168]	@ (8002460 <MX_GPIO_Init+0x160>)
 80023b6:	f007 ffad 	bl	800a314 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 80023ba:	f242 030f 	movw	r3, #8207	@ 0x200f
 80023be:	617b      	str	r3, [r7, #20]
                          |LED_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023c0:	2301      	movs	r3, #1
 80023c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c8:	2300      	movs	r3, #0
 80023ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023cc:	f107 0314 	add.w	r3, r7, #20
 80023d0:	4619      	mov	r1, r3
 80023d2:	4820      	ldr	r0, [pc, #128]	@ (8002454 <MX_GPIO_Init+0x154>)
 80023d4:	f007 fdee 	bl	8009fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 80023d8:	2310      	movs	r3, #16
 80023da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023dc:	2301      	movs	r3, #1
 80023de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e4:	2300      	movs	r3, #0
 80023e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 80023e8:	f107 0314 	add.w	r3, r7, #20
 80023ec:	4619      	mov	r1, r3
 80023ee:	481a      	ldr	r0, [pc, #104]	@ (8002458 <MX_GPIO_Init+0x158>)
 80023f0:	f007 fde0 	bl	8009fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IMU_BOOT_Pin|BME_NSS_Pin;
 80023f4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80023f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023fa:	2301      	movs	r3, #1
 80023fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002402:	2300      	movs	r3, #0
 8002404:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002406:	f107 0314 	add.w	r3, r7, #20
 800240a:	4619      	mov	r1, r3
 800240c:	4813      	ldr	r0, [pc, #76]	@ (800245c <MX_GPIO_Init+0x15c>)
 800240e:	f007 fdd1 	bl	8009fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8002412:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002416:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002418:	2300      	movs	r3, #0
 800241a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241c:	2300      	movs	r3, #0
 800241e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8002420:	f107 0314 	add.w	r3, r7, #20
 8002424:	4619      	mov	r1, r3
 8002426:	480b      	ldr	r0, [pc, #44]	@ (8002454 <MX_GPIO_Init+0x154>)
 8002428:	f007 fdc4 	bl	8009fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin;
 800242c:	2304      	movs	r3, #4
 800242e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002430:	2301      	movs	r3, #1
 8002432:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002438:	2300      	movs	r3, #0
 800243a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_RST_GPIO_Port, &GPIO_InitStruct);
 800243c:	f107 0314 	add.w	r3, r7, #20
 8002440:	4619      	mov	r1, r3
 8002442:	4807      	ldr	r0, [pc, #28]	@ (8002460 <MX_GPIO_Init+0x160>)
 8002444:	f007 fdb6 	bl	8009fb4 <HAL_GPIO_Init>

}
 8002448:	bf00      	nop
 800244a:	3728      	adds	r7, #40	@ 0x28
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	58024400 	.word	0x58024400
 8002454:	58020800 	.word	0x58020800
 8002458:	58020000 	.word	0x58020000
 800245c:	58020400 	.word	0x58020400
 8002460:	58020c00 	.word	0x58020c00

08002464 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002468:	4b1b      	ldr	r3, [pc, #108]	@ (80024d8 <MX_I2C3_Init+0x74>)
 800246a:	4a1c      	ldr	r2, [pc, #112]	@ (80024dc <MX_I2C3_Init+0x78>)
 800246c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B0CCFF;
 800246e:	4b1a      	ldr	r3, [pc, #104]	@ (80024d8 <MX_I2C3_Init+0x74>)
 8002470:	4a1b      	ldr	r2, [pc, #108]	@ (80024e0 <MX_I2C3_Init+0x7c>)
 8002472:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002474:	4b18      	ldr	r3, [pc, #96]	@ (80024d8 <MX_I2C3_Init+0x74>)
 8002476:	2200      	movs	r2, #0
 8002478:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800247a:	4b17      	ldr	r3, [pc, #92]	@ (80024d8 <MX_I2C3_Init+0x74>)
 800247c:	2201      	movs	r2, #1
 800247e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002480:	4b15      	ldr	r3, [pc, #84]	@ (80024d8 <MX_I2C3_Init+0x74>)
 8002482:	2200      	movs	r2, #0
 8002484:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002486:	4b14      	ldr	r3, [pc, #80]	@ (80024d8 <MX_I2C3_Init+0x74>)
 8002488:	2200      	movs	r2, #0
 800248a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800248c:	4b12      	ldr	r3, [pc, #72]	@ (80024d8 <MX_I2C3_Init+0x74>)
 800248e:	2200      	movs	r2, #0
 8002490:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002492:	4b11      	ldr	r3, [pc, #68]	@ (80024d8 <MX_I2C3_Init+0x74>)
 8002494:	2200      	movs	r2, #0
 8002496:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002498:	4b0f      	ldr	r3, [pc, #60]	@ (80024d8 <MX_I2C3_Init+0x74>)
 800249a:	2200      	movs	r2, #0
 800249c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800249e:	480e      	ldr	r0, [pc, #56]	@ (80024d8 <MX_I2C3_Init+0x74>)
 80024a0:	f007 ff52 	bl	800a348 <HAL_I2C_Init>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80024aa:	f000 fe41 	bl	8003130 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024ae:	2100      	movs	r1, #0
 80024b0:	4809      	ldr	r0, [pc, #36]	@ (80024d8 <MX_I2C3_Init+0x74>)
 80024b2:	f007 ffe5 	bl	800a480 <HAL_I2CEx_ConfigAnalogFilter>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80024bc:	f000 fe38 	bl	8003130 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80024c0:	2100      	movs	r1, #0
 80024c2:	4805      	ldr	r0, [pc, #20]	@ (80024d8 <MX_I2C3_Init+0x74>)
 80024c4:	f008 f827 	bl	800a516 <HAL_I2CEx_ConfigDigitalFilter>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80024ce:	f000 fe2f 	bl	8003130 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	2400078c 	.word	0x2400078c
 80024dc:	40005c00 	.word	0x40005c00
 80024e0:	20b0ccff 	.word	0x20b0ccff

080024e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b0bc      	sub	sp, #240	@ 0xf0
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ec:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024fc:	f107 0318 	add.w	r3, r7, #24
 8002500:	22c0      	movs	r2, #192	@ 0xc0
 8002502:	2100      	movs	r1, #0
 8002504:	4618      	mov	r0, r3
 8002506:	f015 fb7e 	bl	8017c06 <memset>
  if(i2cHandle->Instance==I2C3)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a39      	ldr	r2, [pc, #228]	@ (80025f4 <HAL_I2C_MspInit+0x110>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d16b      	bne.n	80025ec <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002514:	f04f 0208 	mov.w	r2, #8
 8002518:	f04f 0300 	mov.w	r3, #0
 800251c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002520:	2300      	movs	r3, #0
 8002522:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002526:	f107 0318 	add.w	r3, r7, #24
 800252a:	4618      	mov	r0, r3
 800252c:	f009 f87a 	bl	800b624 <HAL_RCCEx_PeriphCLKConfig>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002536:	f000 fdfb 	bl	8003130 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800253a:	4b2f      	ldr	r3, [pc, #188]	@ (80025f8 <HAL_I2C_MspInit+0x114>)
 800253c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002540:	4a2d      	ldr	r2, [pc, #180]	@ (80025f8 <HAL_I2C_MspInit+0x114>)
 8002542:	f043 0304 	orr.w	r3, r3, #4
 8002546:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800254a:	4b2b      	ldr	r3, [pc, #172]	@ (80025f8 <HAL_I2C_MspInit+0x114>)
 800254c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002558:	4b27      	ldr	r3, [pc, #156]	@ (80025f8 <HAL_I2C_MspInit+0x114>)
 800255a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800255e:	4a26      	ldr	r2, [pc, #152]	@ (80025f8 <HAL_I2C_MspInit+0x114>)
 8002560:	f043 0301 	orr.w	r3, r3, #1
 8002564:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002568:	4b23      	ldr	r3, [pc, #140]	@ (80025f8 <HAL_I2C_MspInit+0x114>)
 800256a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002576:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800257a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800257e:	2312      	movs	r3, #18
 8002580:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002584:	2300      	movs	r3, #0
 8002586:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258a:	2300      	movs	r3, #0
 800258c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002590:	2304      	movs	r3, #4
 8002592:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002596:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800259a:	4619      	mov	r1, r3
 800259c:	4817      	ldr	r0, [pc, #92]	@ (80025fc <HAL_I2C_MspInit+0x118>)
 800259e:	f007 fd09 	bl	8009fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80025a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025aa:	2312      	movs	r3, #18
 80025ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b6:	2300      	movs	r3, #0
 80025b8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80025bc:	2304      	movs	r3, #4
 80025be:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80025c6:	4619      	mov	r1, r3
 80025c8:	480d      	ldr	r0, [pc, #52]	@ (8002600 <HAL_I2C_MspInit+0x11c>)
 80025ca:	f007 fcf3 	bl	8009fb4 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80025ce:	4b0a      	ldr	r3, [pc, #40]	@ (80025f8 <HAL_I2C_MspInit+0x114>)
 80025d0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80025d4:	4a08      	ldr	r2, [pc, #32]	@ (80025f8 <HAL_I2C_MspInit+0x114>)
 80025d6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80025da:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80025de:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <HAL_I2C_MspInit+0x114>)
 80025e0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80025e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80025ec:	bf00      	nop
 80025ee:	37f0      	adds	r7, #240	@ 0xf0
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40005c00 	.word	0x40005c00
 80025f8:	58024400 	.word	0x58024400
 80025fc:	58020800 	.word	0x58020800
 8002600:	58020000 	.word	0x58020000

08002604 <default_CB>:
static float speed_fall_barrier;	/**< Barrier of decreasing speed*/
/**
 * default_CB() is a default function for all the CB pointers which do nothing.\n
 * The unregistering CB pointer is setting to pointer of this function.  
 */
static void default_CB(void){}
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
 8002608:	bf00      	nop
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
	...

08002614 <NMEA_parser>:
 * NMEA_parser is function which parses single correct NMEA message.\n
 * Inside this function all known types of NMEA message are recognized and nmea_data structure fields are set.\n
 * There is also implemented mechanism of recognizing specified events and calling corresponding to them callbacks.
 * @param[in]	message	pointer to buffer storing NMEA message.
 */
static void 	NMEA_parser(char *message){
 8002614:	b5b0      	push	{r4, r5, r7, lr}
 8002616:	b0b2      	sub	sp, #200	@ 0xc8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]

	NMEA_data previous_data = nmea_data;
 800261c:	4ba9      	ldr	r3, [pc, #676]	@ (80028c4 <NMEA_parser+0x2b0>)
 800261e:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8002622:	461d      	mov	r5, r3
 8002624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800262a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800262c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800262e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002630:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002634:	e884 0003 	stmia.w	r4, {r0, r1}

	int num = 0;
 8002638:	2300      	movs	r3, #0
 800263a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	char *fields[32]={NULL};
 800263e:	f107 030c 	add.w	r3, r7, #12
 8002642:	2280      	movs	r2, #128	@ 0x80
 8002644:	2100      	movs	r1, #0
 8002646:	4618      	mov	r0, r3
 8002648:	f015 fadd 	bl	8017c06 <memset>
	fields[num++]=message;
 800264c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	33c8      	adds	r3, #200	@ 0xc8
 800265a:	443b      	add	r3, r7
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	f843 2cbc 	str.w	r2, [r3, #-188]
	while ((message = strchr(message, ','))) {
 8002662:	e00f      	b.n	8002684 <NMEA_parser+0x70>
		*message++ = 0;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	607a      	str	r2, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	701a      	strb	r2, [r3, #0]
		fields[num++]=message;
 800266e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002672:	1c5a      	adds	r2, r3, #1
 8002674:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	33c8      	adds	r3, #200	@ 0xc8
 800267c:	443b      	add	r3, r7
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	f843 2cbc 	str.w	r2, [r3, #-188]
	while ((message = strchr(message, ','))) {
 8002684:	212c      	movs	r1, #44	@ 0x2c
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f015 fac5 	bl	8017c16 <strchr>
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1e7      	bne.n	8002664 <NMEA_parser+0x50>
	}

	if(strcmp(fields[0],"$GPGLL")==0){
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	498c      	ldr	r1, [pc, #560]	@ (80028c8 <NMEA_parser+0x2b4>)
 8002698:	4618      	mov	r0, r3
 800269a:	f7fd fe29 	bl	80002f0 <strcmp>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d11e      	bne.n	80026e2 <NMEA_parser+0xce>

		nmea_data.latitude = atof(fields[1]);
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f014 fb5e 	bl	8016d68 <atof>
 80026ac:	eeb0 7b40 	vmov.f64	d7, d0
 80026b0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80026b4:	4b83      	ldr	r3, [pc, #524]	@ (80028c4 <NMEA_parser+0x2b0>)
 80026b6:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[2];
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	781a      	ldrb	r2, [r3, #0]
 80026be:	4b81      	ldr	r3, [pc, #516]	@ (80028c4 <NMEA_parser+0x2b0>)
 80026c0:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[3]);
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f014 fb4f 	bl	8016d68 <atof>
 80026ca:	eeb0 7b40 	vmov.f64	d7, d0
 80026ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80026d2:	4b7c      	ldr	r3, [pc, #496]	@ (80028c4 <NMEA_parser+0x2b0>)
 80026d4:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[4];
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	781a      	ldrb	r2, [r3, #0]
 80026dc:	4b79      	ldr	r3, [pc, #484]	@ (80028c4 <NMEA_parser+0x2b0>)
 80026de:	751a      	strb	r2, [r3, #20]
 80026e0:	e10d      	b.n	80028fe <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPRMC")==0){
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	4979      	ldr	r1, [pc, #484]	@ (80028cc <NMEA_parser+0x2b8>)
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fd fe02 	bl	80002f0 <strcmp>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d130      	bne.n	8002754 <NMEA_parser+0x140>

		nmea_data.UTC_time = atof(fields[1]);
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f014 fb37 	bl	8016d68 <atof>
 80026fa:	eeb0 7b40 	vmov.f64	d7, d0
 80026fe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002702:	4b70      	ldr	r3, [pc, #448]	@ (80028c4 <NMEA_parser+0x2b0>)
 8002704:	edc3 7a00 	vstr	s15, [r3]
		nmea_data.UT_date = atoi(fields[9]);
 8002708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800270a:	4618      	mov	r0, r3
 800270c:	f014 fb2f 	bl	8016d6e <atoi>
 8002710:	4603      	mov	r3, r0
 8002712:	4a6c      	ldr	r2, [pc, #432]	@ (80028c4 <NMEA_parser+0x2b0>)
 8002714:	6053      	str	r3, [r2, #4]

		nmea_data.latitude = atof(fields[3]);
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	4618      	mov	r0, r3
 800271a:	f014 fb25 	bl	8016d68 <atof>
 800271e:	eeb0 7b40 	vmov.f64	d7, d0
 8002722:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002726:	4b67      	ldr	r3, [pc, #412]	@ (80028c4 <NMEA_parser+0x2b0>)
 8002728:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[4];
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	781a      	ldrb	r2, [r3, #0]
 8002730:	4b64      	ldr	r3, [pc, #400]	@ (80028c4 <NMEA_parser+0x2b0>)
 8002732:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[5]);
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	4618      	mov	r0, r3
 8002738:	f014 fb16 	bl	8016d68 <atof>
 800273c:	eeb0 7b40 	vmov.f64	d7, d0
 8002740:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002744:	4b5f      	ldr	r3, [pc, #380]	@ (80028c4 <NMEA_parser+0x2b0>)
 8002746:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[6];
 800274a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274c:	781a      	ldrb	r2, [r3, #0]
 800274e:	4b5d      	ldr	r3, [pc, #372]	@ (80028c4 <NMEA_parser+0x2b0>)
 8002750:	751a      	strb	r2, [r3, #20]
 8002752:	e0d4      	b.n	80028fe <NMEA_parser+0x2ea>


	}else if(strcmp(fields[0],"$GPVTG")==0){
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	495e      	ldr	r1, [pc, #376]	@ (80028d0 <NMEA_parser+0x2bc>)
 8002758:	4618      	mov	r0, r3
 800275a:	f7fd fdc9 	bl	80002f0 <strcmp>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d116      	bne.n	8002792 <NMEA_parser+0x17e>

		nmea_data.speed_knots =  atoi(fields[5]);
 8002764:	6a3b      	ldr	r3, [r7, #32]
 8002766:	4618      	mov	r0, r3
 8002768:	f014 fb01 	bl	8016d6e <atoi>
 800276c:	ee07 0a90 	vmov	s15, r0
 8002770:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002774:	4b53      	ldr	r3, [pc, #332]	@ (80028c4 <NMEA_parser+0x2b0>)
 8002776:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		nmea_data.speed_kmph =  atoi(fields[7]);
 800277a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800277c:	4618      	mov	r0, r3
 800277e:	f014 faf6 	bl	8016d6e <atoi>
 8002782:	ee07 0a90 	vmov	s15, r0
 8002786:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800278a:	4b4e      	ldr	r3, [pc, #312]	@ (80028c4 <NMEA_parser+0x2b0>)
 800278c:	edc3 7a08 	vstr	s15, [r3, #32]
 8002790:	e0b5      	b.n	80028fe <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPGGA")==0){
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	494f      	ldr	r1, [pc, #316]	@ (80028d4 <NMEA_parser+0x2c0>)
 8002796:	4618      	mov	r0, r3
 8002798:	f7fd fdaa 	bl	80002f0 <strcmp>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d15c      	bne.n	800285c <NMEA_parser+0x248>

		nmea_data.UTC_time = atof(fields[1]);
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f014 fadf 	bl	8016d68 <atof>
 80027aa:	eeb0 7b40 	vmov.f64	d7, d0
 80027ae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80027b2:	4b44      	ldr	r3, [pc, #272]	@ (80028c4 <NMEA_parser+0x2b0>)
 80027b4:	edc3 7a00 	vstr	s15, [r3]

		nmea_data.latitude = atof(fields[2]);
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f014 fad4 	bl	8016d68 <atof>
 80027c0:	eeb0 7b40 	vmov.f64	d7, d0
 80027c4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80027c8:	4b3e      	ldr	r3, [pc, #248]	@ (80028c4 <NMEA_parser+0x2b0>)
 80027ca:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[3];
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	781a      	ldrb	r2, [r3, #0]
 80027d2:	4b3c      	ldr	r3, [pc, #240]	@ (80028c4 <NMEA_parser+0x2b0>)
 80027d4:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[4]);
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	4618      	mov	r0, r3
 80027da:	f014 fac5 	bl	8016d68 <atof>
 80027de:	eeb0 7b40 	vmov.f64	d7, d0
 80027e2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80027e6:	4b37      	ldr	r3, [pc, #220]	@ (80028c4 <NMEA_parser+0x2b0>)
 80027e8:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[5];
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	781a      	ldrb	r2, [r3, #0]
 80027f0:	4b34      	ldr	r3, [pc, #208]	@ (80028c4 <NMEA_parser+0x2b0>)
 80027f2:	751a      	strb	r2, [r3, #20]

		nmea_data.fix = atoi(fields[6]);
 80027f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f6:	4618      	mov	r0, r3
 80027f8:	f014 fab9 	bl	8016d6e <atoi>
 80027fc:	4603      	mov	r3, r0
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	4b30      	ldr	r3, [pc, #192]	@ (80028c4 <NMEA_parser+0x2b0>)
 8002802:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		nmea_data.sat_in_use = atoi(fields[7]);
 8002806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002808:	4618      	mov	r0, r3
 800280a:	f014 fab0 	bl	8016d6e <atoi>
 800280e:	4603      	mov	r3, r0
 8002810:	b2da      	uxtb	r2, r3
 8002812:	4b2c      	ldr	r3, [pc, #176]	@ (80028c4 <NMEA_parser+0x2b0>)
 8002814:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		nmea_data.HDOP = atof(fields[8]);
 8002818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800281a:	4618      	mov	r0, r3
 800281c:	f014 faa4 	bl	8016d68 <atof>
 8002820:	eeb0 7b40 	vmov.f64	d7, d0
 8002824:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002828:	4b26      	ldr	r3, [pc, #152]	@ (80028c4 <NMEA_parser+0x2b0>)
 800282a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

		nmea_data.altitude = atof(fields[9]);
 800282e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002830:	4618      	mov	r0, r3
 8002832:	f014 fa99 	bl	8016d68 <atof>
 8002836:	eeb0 7b40 	vmov.f64	d7, d0
 800283a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800283e:	4b21      	ldr	r3, [pc, #132]	@ (80028c4 <NMEA_parser+0x2b0>)
 8002840:	edc3 7a06 	vstr	s15, [r3, #24]
		nmea_data.geoidal_separation = atof(fields[11]);
 8002844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002846:	4618      	mov	r0, r3
 8002848:	f014 fa8e 	bl	8016d68 <atof>
 800284c:	eeb0 7b40 	vmov.f64	d7, d0
 8002850:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002854:	4b1b      	ldr	r3, [pc, #108]	@ (80028c4 <NMEA_parser+0x2b0>)
 8002856:	edc3 7a07 	vstr	s15, [r3, #28]
 800285a:	e050      	b.n	80028fe <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPGSA")==0){
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	491e      	ldr	r1, [pc, #120]	@ (80028d8 <NMEA_parser+0x2c4>)
 8002860:	4618      	mov	r0, r3
 8002862:	f7fd fd45 	bl	80002f0 <strcmp>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d137      	bne.n	80028dc <NMEA_parser+0x2c8>

		nmea_data.fix_mode = atoi(fields[2]);
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	4618      	mov	r0, r3
 8002870:	f014 fa7d 	bl	8016d6e <atoi>
 8002874:	4603      	mov	r3, r0
 8002876:	b2da      	uxtb	r2, r3
 8002878:	4b12      	ldr	r3, [pc, #72]	@ (80028c4 <NMEA_parser+0x2b0>)
 800287a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

		nmea_data.PDOP = atof(fields[15]);
 800287e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002880:	4618      	mov	r0, r3
 8002882:	f014 fa71 	bl	8016d68 <atof>
 8002886:	eeb0 7b40 	vmov.f64	d7, d0
 800288a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800288e:	4b0d      	ldr	r3, [pc, #52]	@ (80028c4 <NMEA_parser+0x2b0>)
 8002890:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		nmea_data.HDOP = atof(fields[16]);
 8002894:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002896:	4618      	mov	r0, r3
 8002898:	f014 fa66 	bl	8016d68 <atof>
 800289c:	eeb0 7b40 	vmov.f64	d7, d0
 80028a0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80028a4:	4b07      	ldr	r3, [pc, #28]	@ (80028c4 <NMEA_parser+0x2b0>)
 80028a6:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		nmea_data.VDOP = atof(fields[17]);
 80028aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028ac:	4618      	mov	r0, r3
 80028ae:	f014 fa5b 	bl	8016d68 <atof>
 80028b2:	eeb0 7b40 	vmov.f64	d7, d0
 80028b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80028ba:	4b02      	ldr	r3, [pc, #8]	@ (80028c4 <NMEA_parser+0x2b0>)
 80028bc:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
 80028c0:	e01d      	b.n	80028fe <NMEA_parser+0x2ea>
 80028c2:	bf00      	nop
 80028c4:	24000e88 	.word	0x24000e88
 80028c8:	08019cc8 	.word	0x08019cc8
 80028cc:	08019cd0 	.word	0x08019cd0
 80028d0:	08019cd8 	.word	0x08019cd8
 80028d4:	08019ce0 	.word	0x08019ce0
 80028d8:	08019ce8 	.word	0x08019ce8

	}else if(strcmp(fields[0],"$GPGSV")==0){
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4931      	ldr	r1, [pc, #196]	@ (80029a4 <NMEA_parser+0x390>)
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7fd fd05 	bl	80002f0 <strcmp>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d108      	bne.n	80028fe <NMEA_parser+0x2ea>
		nmea_data.sat_in_view = atoi(fields[3]);
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f014 fa3d 	bl	8016d6e <atoi>
 80028f4:	4603      	mov	r3, r0
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	4b2b      	ldr	r3, [pc, #172]	@ (80029a8 <NMEA_parser+0x394>)
 80028fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	}

	if (abs(nmea_data.speed_kmph - previous_data.speed_kmph) > speed_change_tolerance){
 80028fe:	4b2a      	ldr	r3, [pc, #168]	@ (80029a8 <NMEA_parser+0x394>)
 8002900:	ed93 7a08 	vldr	s14, [r3, #32]
 8002904:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8002908:	ee77 7a67 	vsub.f32	s15, s14, s15
 800290c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002910:	ee17 3a90 	vmov	r3, s15
 8002914:	2b00      	cmp	r3, #0
 8002916:	bfb8      	it	lt
 8002918:	425b      	neglt	r3, r3
 800291a:	ee07 3a90 	vmov	s15, r3
 800291e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002922:	4b22      	ldr	r3, [pc, #136]	@ (80029ac <NMEA_parser+0x398>)
 8002924:	edd3 7a00 	vldr	s15, [r3]
 8002928:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800292c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002930:	dd02      	ble.n	8002938 <NMEA_parser+0x324>
		speed_change_CB_fun_ptr();
 8002932:	4b1f      	ldr	r3, [pc, #124]	@ (80029b0 <NMEA_parser+0x39c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4798      	blx	r3
	}

	if (nmea_data.speed_kmph > speed_raise_barrier && previous_data.speed_kmph <= speed_raise_barrier){
 8002938:	4b1b      	ldr	r3, [pc, #108]	@ (80029a8 <NMEA_parser+0x394>)
 800293a:	ed93 7a08 	vldr	s14, [r3, #32]
 800293e:	4b1d      	ldr	r3, [pc, #116]	@ (80029b4 <NMEA_parser+0x3a0>)
 8002940:	edd3 7a00 	vldr	s15, [r3]
 8002944:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800294c:	dd0c      	ble.n	8002968 <NMEA_parser+0x354>
 800294e:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8002952:	4b18      	ldr	r3, [pc, #96]	@ (80029b4 <NMEA_parser+0x3a0>)
 8002954:	edd3 7a00 	vldr	s15, [r3]
 8002958:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800295c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002960:	d802      	bhi.n	8002968 <NMEA_parser+0x354>
		speed_raise_barrier_CB_fun_ptr();
 8002962:	4b15      	ldr	r3, [pc, #84]	@ (80029b8 <NMEA_parser+0x3a4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4798      	blx	r3
	}

	if (nmea_data.speed_kmph < speed_raise_barrier && previous_data.speed_kmph >= speed_raise_barrier){
 8002968:	4b0f      	ldr	r3, [pc, #60]	@ (80029a8 <NMEA_parser+0x394>)
 800296a:	ed93 7a08 	vldr	s14, [r3, #32]
 800296e:	4b11      	ldr	r3, [pc, #68]	@ (80029b4 <NMEA_parser+0x3a0>)
 8002970:	edd3 7a00 	vldr	s15, [r3]
 8002974:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297c:	d400      	bmi.n	8002980 <NMEA_parser+0x36c>
		speed_fall_barrier_CB_fun_ptr();
	}
}
 800297e:	e00d      	b.n	800299c <NMEA_parser+0x388>
	if (nmea_data.speed_kmph < speed_raise_barrier && previous_data.speed_kmph >= speed_raise_barrier){
 8002980:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8002984:	4b0b      	ldr	r3, [pc, #44]	@ (80029b4 <NMEA_parser+0x3a0>)
 8002986:	edd3 7a00 	vldr	s15, [r3]
 800298a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800298e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002992:	da00      	bge.n	8002996 <NMEA_parser+0x382>
}
 8002994:	e002      	b.n	800299c <NMEA_parser+0x388>
		speed_fall_barrier_CB_fun_ptr();
 8002996:	4b09      	ldr	r3, [pc, #36]	@ (80029bc <NMEA_parser+0x3a8>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4798      	blx	r3
}
 800299c:	bf00      	nop
 800299e:	37c8      	adds	r7, #200	@ 0xc8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bdb0      	pop	{r4, r5, r7, pc}
 80029a4:	08019cf0 	.word	0x08019cf0
 80029a8:	24000e88 	.word	0x24000e88
 80029ac:	24000e70 	.word	0x24000e70
 80029b0:	24000e6c 	.word	0x24000e6c
 80029b4:	24000e78 	.word	0x24000e78
 80029b8:	24000e74 	.word	0x24000e74
 80029bc:	24000e7c 	.word	0x24000e7c

080029c0 <hx2int>:
 * hx2int is function which converts hex number written using characters to corresponding integer.
 * @param[in]	n2		is older position ix hex code
 * @param[in]	n1		is younger position ix hex code
 * @param[out]	uint8_t	is integer corresponding to input hex
 */
static uint8_t hx2int(uint8_t n2, uint8_t n1){
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	460a      	mov	r2, r1
 80029ca:	71fb      	strb	r3, [r7, #7]
 80029cc:	4613      	mov	r3, r2
 80029ce:	71bb      	strb	r3, [r7, #6]
	if (n2 <= '9') n2-='0';
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	2b39      	cmp	r3, #57	@ 0x39
 80029d4:	d803      	bhi.n	80029de <hx2int+0x1e>
 80029d6:	79fb      	ldrb	r3, [r7, #7]
 80029d8:	3b30      	subs	r3, #48	@ 0x30
 80029da:	71fb      	strb	r3, [r7, #7]
 80029dc:	e002      	b.n	80029e4 <hx2int+0x24>
	else n2=n2-'A'+10;
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	3b37      	subs	r3, #55	@ 0x37
 80029e2:	71fb      	strb	r3, [r7, #7]

	if (n1 <= '9') n1-='0';
 80029e4:	79bb      	ldrb	r3, [r7, #6]
 80029e6:	2b39      	cmp	r3, #57	@ 0x39
 80029e8:	d803      	bhi.n	80029f2 <hx2int+0x32>
 80029ea:	79bb      	ldrb	r3, [r7, #6]
 80029ec:	3b30      	subs	r3, #48	@ 0x30
 80029ee:	71bb      	strb	r3, [r7, #6]
 80029f0:	e002      	b.n	80029f8 <hx2int+0x38>
	else n1=n1-'A'+10;
 80029f2:	79bb      	ldrb	r3, [r7, #6]
 80029f4:	3b37      	subs	r3, #55	@ 0x37
 80029f6:	71bb      	strb	r3, [r7, #6]

	return n2*16+n1;
 80029f8:	79fb      	ldrb	r3, [r7, #7]
 80029fa:	011b      	lsls	r3, r3, #4
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	79bb      	ldrb	r3, [r7, #6]
 8002a00:	4413      	add	r3, r2
 8002a02:	b2db      	uxtb	r3, r3

}
 8002a04:	4618      	mov	r0, r3
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <NMEA_checksum_clc>:
 * NMEA_checksum_clc is function which calculates checksum of the message and compares it to checksum value given in NMEA message.\n
 * To convert given checksum it uses hx2int function.
 * @param[in]	message	pointer to buffer storing NMEA message.
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_checksum_clc(uint8_t * message){
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
	uint8_t index = 1;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
	uint8_t checksum_clc =0;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	73bb      	strb	r3, [r7, #14]

	while (message[index]!='*' && index<NMEA_WORKING_BUFFER_SIZE-2){
 8002a20:	e009      	b.n	8002a36 <NMEA_checksum_clc+0x26>
		checksum_clc^=message[index++];
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	73fa      	strb	r2, [r7, #15]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	781a      	ldrb	r2, [r3, #0]
 8002a30:	7bbb      	ldrb	r3, [r7, #14]
 8002a32:	4053      	eors	r3, r2
 8002a34:	73bb      	strb	r3, [r7, #14]
	while (message[index]!='*' && index<NMEA_WORKING_BUFFER_SIZE-2){
 8002a36:	7bfb      	ldrb	r3, [r7, #15]
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a40:	d002      	beq.n	8002a48 <NMEA_checksum_clc+0x38>
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
 8002a44:	2b7d      	cmp	r3, #125	@ 0x7d
 8002a46:	d9ec      	bls.n	8002a22 <NMEA_checksum_clc+0x12>
	}

	uint8_t checksum = hx2int(message[index+1],message[index+2]);
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	4413      	add	r3, r2
 8002a50:	7818      	ldrb	r0, [r3, #0]
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
 8002a54:	3302      	adds	r3, #2
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	4413      	add	r3, r2
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	f7ff ffaf 	bl	80029c0 <hx2int>
 8002a62:	4603      	mov	r3, r0
 8002a64:	737b      	strb	r3, [r7, #13]
	if (checksum!=checksum_clc){
 8002a66:	7b7a      	ldrb	r2, [r7, #13]
 8002a68:	7bbb      	ldrb	r3, [r7, #14]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d001      	beq.n	8002a72 <NMEA_checksum_clc+0x62>
		return NMEA_CHECKSUM_ERROR;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e000      	b.n	8002a74 <NMEA_checksum_clc+0x64>
	}
	return NMEA_OK;
 8002a72:	2300      	movs	r3, #0


}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <NMEA_read_line>:

/**
 * NMEA_read_line is function which reads one NMEA message line from NMEA_UART_buffer circular buffer to NMEA_working_buffer.
 */
static void NMEA_read_line(void){
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
	int index = 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	607b      	str	r3, [r7, #4]
	while (index < NMEA_WORKING_BUFFER_SIZE) NMEA_working_buffer[index++]=0;	// Clean up working buffer.
 8002a86:	e005      	b.n	8002a94 <NMEA_read_line+0x18>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	1c5a      	adds	r2, r3, #1
 8002a8c:	607a      	str	r2, [r7, #4]
 8002a8e:	4a2b      	ldr	r2, [pc, #172]	@ (8002b3c <NMEA_read_line+0xc0>)
 8002a90:	2100      	movs	r1, #0
 8002a92:	54d1      	strb	r1, [r2, r3]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b7f      	cmp	r3, #127	@ 0x7f
 8002a98:	ddf6      	ble.n	8002a88 <NMEA_read_line+0xc>

	index = 0;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	607b      	str	r3, [r7, #4]
	while(NMEA_UART_buffer[UART_buffer_tail]!= '\n' && index < NMEA_WORKING_BUFFER_SIZE-2){
 8002a9e:	e01c      	b.n	8002ada <NMEA_read_line+0x5e>
		NMEA_working_buffer[index]=NMEA_UART_buffer[UART_buffer_tail];
 8002aa0:	4b27      	ldr	r3, [pc, #156]	@ (8002b40 <NMEA_read_line+0xc4>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a27      	ldr	r2, [pc, #156]	@ (8002b44 <NMEA_read_line+0xc8>)
 8002aa6:	5cd1      	ldrb	r1, [r2, r3]
 8002aa8:	4a24      	ldr	r2, [pc, #144]	@ (8002b3c <NMEA_read_line+0xc0>)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4413      	add	r3, r2
 8002aae:	460a      	mov	r2, r1
 8002ab0:	701a      	strb	r2, [r3, #0]
		NMEA_UART_buffer[UART_buffer_tail] = 0;
 8002ab2:	4b23      	ldr	r3, [pc, #140]	@ (8002b40 <NMEA_read_line+0xc4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a23      	ldr	r2, [pc, #140]	@ (8002b44 <NMEA_read_line+0xc8>)
 8002ab8:	2100      	movs	r1, #0
 8002aba:	54d1      	strb	r1, [r2, r3]
		UART_buffer_tail = (UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8002abc:	4b20      	ldr	r3, [pc, #128]	@ (8002b40 <NMEA_read_line+0xc4>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	425a      	negs	r2, r3
 8002ac4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ac8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002acc:	bf58      	it	pl
 8002ace:	4253      	negpl	r3, r2
 8002ad0:	4a1b      	ldr	r2, [pc, #108]	@ (8002b40 <NMEA_read_line+0xc4>)
 8002ad2:	6013      	str	r3, [r2, #0]
		++index;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	607b      	str	r3, [r7, #4]
	while(NMEA_UART_buffer[UART_buffer_tail]!= '\n' && index < NMEA_WORKING_BUFFER_SIZE-2){
 8002ada:	4b19      	ldr	r3, [pc, #100]	@ (8002b40 <NMEA_read_line+0xc4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a19      	ldr	r2, [pc, #100]	@ (8002b44 <NMEA_read_line+0xc8>)
 8002ae0:	5cd3      	ldrb	r3, [r2, r3]
 8002ae2:	2b0a      	cmp	r3, #10
 8002ae4:	d002      	beq.n	8002aec <NMEA_read_line+0x70>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b7d      	cmp	r3, #125	@ 0x7d
 8002aea:	ddd9      	ble.n	8002aa0 <NMEA_read_line+0x24>
	}
	NMEA_working_buffer[index]=NMEA_UART_buffer[UART_buffer_tail];
 8002aec:	4b14      	ldr	r3, [pc, #80]	@ (8002b40 <NMEA_read_line+0xc4>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a14      	ldr	r2, [pc, #80]	@ (8002b44 <NMEA_read_line+0xc8>)
 8002af2:	5cd1      	ldrb	r1, [r2, r3]
 8002af4:	4a11      	ldr	r2, [pc, #68]	@ (8002b3c <NMEA_read_line+0xc0>)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4413      	add	r3, r2
 8002afa:	460a      	mov	r2, r1
 8002afc:	701a      	strb	r2, [r3, #0]
	NMEA_UART_buffer[UART_buffer_tail] = 0;
 8002afe:	4b10      	ldr	r3, [pc, #64]	@ (8002b40 <NMEA_read_line+0xc4>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a10      	ldr	r2, [pc, #64]	@ (8002b44 <NMEA_read_line+0xc8>)
 8002b04:	2100      	movs	r1, #0
 8002b06:	54d1      	strb	r1, [r2, r3]
	UART_buffer_tail = (UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8002b08:	4b0d      	ldr	r3, [pc, #52]	@ (8002b40 <NMEA_read_line+0xc4>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	425a      	negs	r2, r3
 8002b10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b14:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002b18:	bf58      	it	pl
 8002b1a:	4253      	negpl	r3, r2
 8002b1c:	4a08      	ldr	r2, [pc, #32]	@ (8002b40 <NMEA_read_line+0xc4>)
 8002b1e:	6013      	str	r3, [r2, #0]
	++index;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3301      	adds	r3, #1
 8002b24:	607b      	str	r3, [r7, #4]
	--UART_buffer_lines;
 8002b26:	4b08      	ldr	r3, [pc, #32]	@ (8002b48 <NMEA_read_line+0xcc>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	4a06      	ldr	r2, [pc, #24]	@ (8002b48 <NMEA_read_line+0xcc>)
 8002b2e:	6013      	str	r3, [r2, #0]

}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	24000de0 	.word	0x24000de0
 8002b40:	24000e64 	.word	0x24000e64
 8002b44:	240009e0 	.word	0x240009e0
 8002b48:	24000e68 	.word	0x24000e68

08002b4c <NMEA_init>:

void NMEA_init(UART_HandleTypeDef *huart, DMA_HandleTypeDef *DMA){
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
	HAL_Delay(10);
 8002b56:	200a      	movs	r0, #10
 8002b58:	f003 fe62 	bl	8006820 <HAL_Delay>
	NMEA_huart=huart;
 8002b5c:	4a12      	ldr	r2, [pc, #72]	@ (8002ba8 <NMEA_init+0x5c>)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6013      	str	r3, [r2, #0]
	NMEA_DMA=DMA;
 8002b62:	4a12      	ldr	r2, [pc, #72]	@ (8002bac <NMEA_init+0x60>)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	6013      	str	r3, [r2, #0]
	__HAL_UART_ENABLE_IT(NMEA_huart,UART_IT_IDLE);
 8002b68:	4b0f      	ldr	r3, [pc, #60]	@ (8002ba8 <NMEA_init+0x5c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba8 <NMEA_init+0x5c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0210 	orr.w	r2, r2, #16
 8002b7a:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(NMEA_huart, NMEA_UART_DMA_buffer, NMEA_UART_DMA_BUFFER_SIZE);
 8002b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba8 <NMEA_init+0x5c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b84:	490a      	ldr	r1, [pc, #40]	@ (8002bb0 <NMEA_init+0x64>)
 8002b86:	4618      	mov	r0, r3
 8002b88:	f00c ff58 	bl	800fa3c <HAL_UART_Receive_DMA>


	speed_change_CB_fun_ptr = &default_CB;
 8002b8c:	4b09      	ldr	r3, [pc, #36]	@ (8002bb4 <NMEA_init+0x68>)
 8002b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002bb8 <NMEA_init+0x6c>)
 8002b90:	601a      	str	r2, [r3, #0]
	speed_raise_barrier_CB_fun_ptr = &default_CB;
 8002b92:	4b0a      	ldr	r3, [pc, #40]	@ (8002bbc <NMEA_init+0x70>)
 8002b94:	4a08      	ldr	r2, [pc, #32]	@ (8002bb8 <NMEA_init+0x6c>)
 8002b96:	601a      	str	r2, [r3, #0]
	speed_fall_barrier_CB_fun_ptr = &default_CB;
 8002b98:	4b09      	ldr	r3, [pc, #36]	@ (8002bc0 <NMEA_init+0x74>)
 8002b9a:	4a07      	ldr	r2, [pc, #28]	@ (8002bb8 <NMEA_init+0x6c>)
 8002b9c:	601a      	str	r2, [r3, #0]
}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	24000e80 	.word	0x24000e80
 8002bac:	24000e84 	.word	0x24000e84
 8002bb0:	240007e0 	.word	0x240007e0
 8002bb4:	24000e6c 	.word	0x24000e6c
 8002bb8:	08002605 	.word	0x08002605
 8002bbc:	24000e74 	.word	0x24000e74
 8002bc0:	24000e7c 	.word	0x24000e7c

08002bc4 <NMEA_UART_DMA_get_char>:
 * If buffer overflowes, the oldest NMEA message will be deleted to make space for incoming messages.\n
 * If new line character is detected ('\ n'), the line counter (UART_buffer_lines) increases.
 * @param[in]	DMA_char	character from DMA buffer
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_UART_DMA_get_char(uint8_t DMA_char){
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	71fb      	strb	r3, [r7, #7]
	int position = (UART_buffer_head + 1)%NMEA_UART_BUFFER_SIZE;
 8002bce:	4b2d      	ldr	r3, [pc, #180]	@ (8002c84 <NMEA_UART_DMA_get_char+0xc0>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	425a      	negs	r2, r3
 8002bd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bda:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002bde:	bf58      	it	pl
 8002be0:	4253      	negpl	r3, r2
 8002be2:	60bb      	str	r3, [r7, #8]
	NMEA_status stat=NMEA_OK;
 8002be4:	2300      	movs	r3, #0
 8002be6:	73fb      	strb	r3, [r7, #15]

	if (position == UART_buffer_tail){		//buffer overflowed! make space for new message
 8002be8:	4b27      	ldr	r3, [pc, #156]	@ (8002c88 <NMEA_UART_DMA_get_char+0xc4>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d130      	bne.n	8002c54 <NMEA_UART_DMA_get_char+0x90>
		while (NMEA_UART_buffer[UART_buffer_tail]!='\n' && NMEA_UART_buffer[UART_buffer_tail]!=0){
 8002bf2:	e010      	b.n	8002c16 <NMEA_UART_DMA_get_char+0x52>
			NMEA_UART_buffer[UART_buffer_tail]=0;
 8002bf4:	4b24      	ldr	r3, [pc, #144]	@ (8002c88 <NMEA_UART_DMA_get_char+0xc4>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a24      	ldr	r2, [pc, #144]	@ (8002c8c <NMEA_UART_DMA_get_char+0xc8>)
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	54d1      	strb	r1, [r2, r3]
			UART_buffer_tail=(UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8002bfe:	4b22      	ldr	r3, [pc, #136]	@ (8002c88 <NMEA_UART_DMA_get_char+0xc4>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	3301      	adds	r3, #1
 8002c04:	425a      	negs	r2, r3
 8002c06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c0a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002c0e:	bf58      	it	pl
 8002c10:	4253      	negpl	r3, r2
 8002c12:	4a1d      	ldr	r2, [pc, #116]	@ (8002c88 <NMEA_UART_DMA_get_char+0xc4>)
 8002c14:	6013      	str	r3, [r2, #0]
		while (NMEA_UART_buffer[UART_buffer_tail]!='\n' && NMEA_UART_buffer[UART_buffer_tail]!=0){
 8002c16:	4b1c      	ldr	r3, [pc, #112]	@ (8002c88 <NMEA_UART_DMA_get_char+0xc4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a1c      	ldr	r2, [pc, #112]	@ (8002c8c <NMEA_UART_DMA_get_char+0xc8>)
 8002c1c:	5cd3      	ldrb	r3, [r2, r3]
 8002c1e:	2b0a      	cmp	r3, #10
 8002c20:	d005      	beq.n	8002c2e <NMEA_UART_DMA_get_char+0x6a>
 8002c22:	4b19      	ldr	r3, [pc, #100]	@ (8002c88 <NMEA_UART_DMA_get_char+0xc4>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a19      	ldr	r2, [pc, #100]	@ (8002c8c <NMEA_UART_DMA_get_char+0xc8>)
 8002c28:	5cd3      	ldrb	r3, [r2, r3]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1e2      	bne.n	8002bf4 <NMEA_UART_DMA_get_char+0x30>
		}
		NMEA_UART_buffer[UART_buffer_tail]=0;
 8002c2e:	4b16      	ldr	r3, [pc, #88]	@ (8002c88 <NMEA_UART_DMA_get_char+0xc4>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a16      	ldr	r2, [pc, #88]	@ (8002c8c <NMEA_UART_DMA_get_char+0xc8>)
 8002c34:	2100      	movs	r1, #0
 8002c36:	54d1      	strb	r1, [r2, r3]
		UART_buffer_tail=(UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8002c38:	4b13      	ldr	r3, [pc, #76]	@ (8002c88 <NMEA_UART_DMA_get_char+0xc4>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	425a      	negs	r2, r3
 8002c40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c44:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002c48:	bf58      	it	pl
 8002c4a:	4253      	negpl	r3, r2
 8002c4c:	4a0e      	ldr	r2, [pc, #56]	@ (8002c88 <NMEA_UART_DMA_get_char+0xc4>)
 8002c4e:	6013      	str	r3, [r2, #0]
		stat=NMEA_BUFFER_OVERFLOWED;
 8002c50:	2301      	movs	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
	}

	NMEA_UART_buffer[UART_buffer_head]=DMA_char;
 8002c54:	4b0b      	ldr	r3, [pc, #44]	@ (8002c84 <NMEA_UART_DMA_get_char+0xc0>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	490c      	ldr	r1, [pc, #48]	@ (8002c8c <NMEA_UART_DMA_get_char+0xc8>)
 8002c5a:	79fa      	ldrb	r2, [r7, #7]
 8002c5c:	54ca      	strb	r2, [r1, r3]

	UART_buffer_head=position;
 8002c5e:	4a09      	ldr	r2, [pc, #36]	@ (8002c84 <NMEA_UART_DMA_get_char+0xc0>)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	6013      	str	r3, [r2, #0]

	if(DMA_char=='\n'){
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	2b0a      	cmp	r3, #10
 8002c68:	d104      	bne.n	8002c74 <NMEA_UART_DMA_get_char+0xb0>
		++UART_buffer_lines;	//increment lines counter
 8002c6a:	4b09      	ldr	r3, [pc, #36]	@ (8002c90 <NMEA_UART_DMA_get_char+0xcc>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	4a07      	ldr	r2, [pc, #28]	@ (8002c90 <NMEA_UART_DMA_get_char+0xcc>)
 8002c72:	6013      	str	r3, [r2, #0]
	}

	return stat;
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3714      	adds	r7, #20
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	24000e60 	.word	0x24000e60
 8002c88:	24000e64 	.word	0x24000e64
 8002c8c:	240009e0 	.word	0x240009e0
 8002c90:	24000e68 	.word	0x24000e68

08002c94 <NMEA_UART_DMA_copy_buffer>:
/**
 * NMEA_UART_DMA_copy_buffer is a function which copies messages from DMA buffer to UART circular buffer.\n
 * To do so, it uses NMEA_UART_DMA_get_char function for every character in NMEA_UART_DMA_buffer from 0 to (NMEA_UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(NMEA_DMA)).
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_UART_DMA_copy_buffer(void){
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0


	NMEA_status stat=NMEA_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	73fb      	strb	r3, [r7, #15]

	int data_length = NMEA_UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(NMEA_DMA);
 8002c9e:	4b4b      	ldr	r3, [pc, #300]	@ (8002dcc <NMEA_UART_DMA_copy_buffer+0x138>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a4a      	ldr	r2, [pc, #296]	@ (8002dd0 <NMEA_UART_DMA_copy_buffer+0x13c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d059      	beq.n	8002d5e <NMEA_UART_DMA_copy_buffer+0xca>
 8002caa:	4b48      	ldr	r3, [pc, #288]	@ (8002dcc <NMEA_UART_DMA_copy_buffer+0x138>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a48      	ldr	r2, [pc, #288]	@ (8002dd4 <NMEA_UART_DMA_copy_buffer+0x140>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d053      	beq.n	8002d5e <NMEA_UART_DMA_copy_buffer+0xca>
 8002cb6:	4b45      	ldr	r3, [pc, #276]	@ (8002dcc <NMEA_UART_DMA_copy_buffer+0x138>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a46      	ldr	r2, [pc, #280]	@ (8002dd8 <NMEA_UART_DMA_copy_buffer+0x144>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d04d      	beq.n	8002d5e <NMEA_UART_DMA_copy_buffer+0xca>
 8002cc2:	4b42      	ldr	r3, [pc, #264]	@ (8002dcc <NMEA_UART_DMA_copy_buffer+0x138>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a44      	ldr	r2, [pc, #272]	@ (8002ddc <NMEA_UART_DMA_copy_buffer+0x148>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d047      	beq.n	8002d5e <NMEA_UART_DMA_copy_buffer+0xca>
 8002cce:	4b3f      	ldr	r3, [pc, #252]	@ (8002dcc <NMEA_UART_DMA_copy_buffer+0x138>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a42      	ldr	r2, [pc, #264]	@ (8002de0 <NMEA_UART_DMA_copy_buffer+0x14c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d041      	beq.n	8002d5e <NMEA_UART_DMA_copy_buffer+0xca>
 8002cda:	4b3c      	ldr	r3, [pc, #240]	@ (8002dcc <NMEA_UART_DMA_copy_buffer+0x138>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a40      	ldr	r2, [pc, #256]	@ (8002de4 <NMEA_UART_DMA_copy_buffer+0x150>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d03b      	beq.n	8002d5e <NMEA_UART_DMA_copy_buffer+0xca>
 8002ce6:	4b39      	ldr	r3, [pc, #228]	@ (8002dcc <NMEA_UART_DMA_copy_buffer+0x138>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a3e      	ldr	r2, [pc, #248]	@ (8002de8 <NMEA_UART_DMA_copy_buffer+0x154>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d035      	beq.n	8002d5e <NMEA_UART_DMA_copy_buffer+0xca>
 8002cf2:	4b36      	ldr	r3, [pc, #216]	@ (8002dcc <NMEA_UART_DMA_copy_buffer+0x138>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a3c      	ldr	r2, [pc, #240]	@ (8002dec <NMEA_UART_DMA_copy_buffer+0x158>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d02f      	beq.n	8002d5e <NMEA_UART_DMA_copy_buffer+0xca>
 8002cfe:	4b33      	ldr	r3, [pc, #204]	@ (8002dcc <NMEA_UART_DMA_copy_buffer+0x138>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a3a      	ldr	r2, [pc, #232]	@ (8002df0 <NMEA_UART_DMA_copy_buffer+0x15c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d029      	beq.n	8002d5e <NMEA_UART_DMA_copy_buffer+0xca>
 8002d0a:	4b30      	ldr	r3, [pc, #192]	@ (8002dcc <NMEA_UART_DMA_copy_buffer+0x138>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a38      	ldr	r2, [pc, #224]	@ (8002df4 <NMEA_UART_DMA_copy_buffer+0x160>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d023      	beq.n	8002d5e <NMEA_UART_DMA_copy_buffer+0xca>
 8002d16:	4b2d      	ldr	r3, [pc, #180]	@ (8002dcc <NMEA_UART_DMA_copy_buffer+0x138>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a36      	ldr	r2, [pc, #216]	@ (8002df8 <NMEA_UART_DMA_copy_buffer+0x164>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d01d      	beq.n	8002d5e <NMEA_UART_DMA_copy_buffer+0xca>
 8002d22:	4b2a      	ldr	r3, [pc, #168]	@ (8002dcc <NMEA_UART_DMA_copy_buffer+0x138>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a34      	ldr	r2, [pc, #208]	@ (8002dfc <NMEA_UART_DMA_copy_buffer+0x168>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d017      	beq.n	8002d5e <NMEA_UART_DMA_copy_buffer+0xca>
 8002d2e:	4b27      	ldr	r3, [pc, #156]	@ (8002dcc <NMEA_UART_DMA_copy_buffer+0x138>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a32      	ldr	r2, [pc, #200]	@ (8002e00 <NMEA_UART_DMA_copy_buffer+0x16c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d011      	beq.n	8002d5e <NMEA_UART_DMA_copy_buffer+0xca>
 8002d3a:	4b24      	ldr	r3, [pc, #144]	@ (8002dcc <NMEA_UART_DMA_copy_buffer+0x138>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a30      	ldr	r2, [pc, #192]	@ (8002e04 <NMEA_UART_DMA_copy_buffer+0x170>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d00b      	beq.n	8002d5e <NMEA_UART_DMA_copy_buffer+0xca>
 8002d46:	4b21      	ldr	r3, [pc, #132]	@ (8002dcc <NMEA_UART_DMA_copy_buffer+0x138>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a2e      	ldr	r2, [pc, #184]	@ (8002e08 <NMEA_UART_DMA_copy_buffer+0x174>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d005      	beq.n	8002d5e <NMEA_UART_DMA_copy_buffer+0xca>
 8002d52:	4b1e      	ldr	r3, [pc, #120]	@ (8002dcc <NMEA_UART_DMA_copy_buffer+0x138>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a2c      	ldr	r2, [pc, #176]	@ (8002e0c <NMEA_UART_DMA_copy_buffer+0x178>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d106      	bne.n	8002d6c <NMEA_UART_DMA_copy_buffer+0xd8>
 8002d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8002dcc <NMEA_UART_DMA_copy_buffer+0x138>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8002d6a:	e005      	b.n	8002d78 <NMEA_UART_DMA_copy_buffer+0xe4>
 8002d6c:	4b17      	ldr	r3, [pc, #92]	@ (8002dcc <NMEA_UART_DMA_copy_buffer+0x138>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8002d78:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < data_length; i++){
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60bb      	str	r3, [r7, #8]
 8002d7e:	e013      	b.n	8002da8 <NMEA_UART_DMA_copy_buffer+0x114>
		if (NMEA_UART_DMA_get_char(NMEA_UART_DMA_buffer[i])==NMEA_BUFFER_OVERFLOWED){
 8002d80:	4a23      	ldr	r2, [pc, #140]	@ (8002e10 <NMEA_UART_DMA_copy_buffer+0x17c>)
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	4413      	add	r3, r2
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff ff1b 	bl	8002bc4 <NMEA_UART_DMA_get_char>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <NMEA_UART_DMA_copy_buffer+0x104>
			stat=NMEA_BUFFER_OVERFLOWED;
 8002d94:	2301      	movs	r3, #1
 8002d96:	73fb      	strb	r3, [r7, #15]
		}
		NMEA_UART_DMA_buffer[i]=0;
 8002d98:	4a1d      	ldr	r2, [pc, #116]	@ (8002e10 <NMEA_UART_DMA_copy_buffer+0x17c>)
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	2200      	movs	r2, #0
 8002da0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < data_length; i++){
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	3301      	adds	r3, #1
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	dbe7      	blt.n	8002d80 <NMEA_UART_DMA_copy_buffer+0xec>
	}

	HAL_UART_Receive_DMA(NMEA_huart, NMEA_UART_DMA_buffer, NMEA_UART_DMA_BUFFER_SIZE);
 8002db0:	4b18      	ldr	r3, [pc, #96]	@ (8002e14 <NMEA_UART_DMA_copy_buffer+0x180>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002db8:	4915      	ldr	r1, [pc, #84]	@ (8002e10 <NMEA_UART_DMA_copy_buffer+0x17c>)
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f00c fe3e 	bl	800fa3c <HAL_UART_Receive_DMA>
	return stat;
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	24000e84 	.word	0x24000e84
 8002dd0:	40020010 	.word	0x40020010
 8002dd4:	40020028 	.word	0x40020028
 8002dd8:	40020040 	.word	0x40020040
 8002ddc:	40020058 	.word	0x40020058
 8002de0:	40020070 	.word	0x40020070
 8002de4:	40020088 	.word	0x40020088
 8002de8:	400200a0 	.word	0x400200a0
 8002dec:	400200b8 	.word	0x400200b8
 8002df0:	40020410 	.word	0x40020410
 8002df4:	40020428 	.word	0x40020428
 8002df8:	40020440 	.word	0x40020440
 8002dfc:	40020458 	.word	0x40020458
 8002e00:	40020470 	.word	0x40020470
 8002e04:	40020488 	.word	0x40020488
 8002e08:	400204a0 	.word	0x400204a0
 8002e0c:	400204b8 	.word	0x400204b8
 8002e10:	240007e0 	.word	0x240007e0
 8002e14:	24000e80 	.word	0x24000e80

08002e18 <NMEA_process_task>:

NMEA_status NMEA_process_task(void){
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
	NMEA_status stat = NMEA_OK;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	71fb      	strb	r3, [r7, #7]
	while(UART_buffer_lines>0) {
 8002e22:	e00d      	b.n	8002e40 <NMEA_process_task+0x28>
		NMEA_read_line();
 8002e24:	f7ff fe2a 	bl	8002a7c <NMEA_read_line>
		if (NMEA_checksum_clc(NMEA_working_buffer) == NMEA_OK){
 8002e28:	480a      	ldr	r0, [pc, #40]	@ (8002e54 <NMEA_process_task+0x3c>)
 8002e2a:	f7ff fdf1 	bl	8002a10 <NMEA_checksum_clc>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d103      	bne.n	8002e3c <NMEA_process_task+0x24>
			NMEA_parser((char *)NMEA_working_buffer);
 8002e34:	4807      	ldr	r0, [pc, #28]	@ (8002e54 <NMEA_process_task+0x3c>)
 8002e36:	f7ff fbed 	bl	8002614 <NMEA_parser>
 8002e3a:	e001      	b.n	8002e40 <NMEA_process_task+0x28>
		}else stat = NMEA_CHECKSUM_ERROR;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	71fb      	strb	r3, [r7, #7]
	while(UART_buffer_lines>0) {
 8002e40:	4b05      	ldr	r3, [pc, #20]	@ (8002e58 <NMEA_process_task+0x40>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	dced      	bgt.n	8002e24 <NMEA_process_task+0xc>
	}
	return stat;
 8002e48:	79fb      	ldrb	r3, [r7, #7]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	24000de0 	.word	0x24000de0
 8002e58:	24000e68 	.word	0x24000e68

08002e5c <user_UART_IDLE_IT_handler>:

NMEA_status user_UART_IDLE_IT_handler(void){
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
	NMEA_status stat = NMEA_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	71fb      	strb	r3, [r7, #7]
	if (__HAL_UART_GET_FLAG(NMEA_huart, UART_FLAG_IDLE) == SET) {
 8002e66:	4b0d      	ldr	r3, [pc, #52]	@ (8002e9c <user_UART_IDLE_IT_handler+0x40>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	f003 0310 	and.w	r3, r3, #16
 8002e72:	2b10      	cmp	r3, #16
 8002e74:	d10d      	bne.n	8002e92 <user_UART_IDLE_IT_handler+0x36>
		__HAL_UART_CLEAR_FLAG(NMEA_huart,UART_FLAG_IDLE);
 8002e76:	4b09      	ldr	r3, [pc, #36]	@ (8002e9c <user_UART_IDLE_IT_handler+0x40>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2210      	movs	r2, #16
 8002e7e:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(NMEA_huart);
 8002e80:	4b06      	ldr	r3, [pc, #24]	@ (8002e9c <user_UART_IDLE_IT_handler+0x40>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f00c fe25 	bl	800fad4 <HAL_UART_DMAStop>
		stat = NMEA_UART_DMA_copy_buffer();
 8002e8a:	f7ff ff03 	bl	8002c94 <NMEA_UART_DMA_copy_buffer>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	71fb      	strb	r3, [r7, #7]
	}
	return stat;
 8002e92:	79fb      	ldrb	r3, [r7, #7]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	24000e80 	.word	0x24000e80

08002ea0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8002ea4:	f000 f906 	bl	80030b4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ea8:	f003 fc5e 	bl	8006768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002eac:	f000 f842 	bl	8002f34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002eb0:	f7ff fa26 	bl	8002300 <MX_GPIO_Init>
  MX_DMA_Init();
 8002eb4:	f7fe ff78 	bl	8001da8 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8002eb8:	f7fe ffa6 	bl	8001e08 <MX_FDCAN1_Init>
  MX_I2C3_Init();
 8002ebc:	f7ff fad2 	bl	8002464 <MX_I2C3_Init>
  MX_SPI1_Init();
 8002ec0:	f000 f93c 	bl	800313c <MX_SPI1_Init>
  MX_SPI2_Init();
 8002ec4:	f000 f990 	bl	80031e8 <MX_SPI2_Init>
  MX_TIM2_Init();
 8002ec8:	f000 fcc8 	bl	800385c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002ecc:	f000 fd42 	bl	8003954 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002ed0:	f000 fda6 	bl	8003a20 <MX_TIM4_Init>
  MX_UART4_Init();
 8002ed4:	f000 ff5e 	bl	8003d94 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8002ed8:	f000 ffa8 	bl	8003e2c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002edc:	f001 f842 	bl	8003f64 <MX_USART6_UART_Init>
  MX_TIM13_Init();
 8002ee0:	f000 fe1a 	bl	8003b18 <MX_TIM13_Init>
  MX_USART3_UART_Init();
 8002ee4:	f000 fff2 	bl	8003ecc <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8002ee8:	f00f ffe4 	bl	8012eb4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  BMP280_init();
 8002eec:	f001 ff74 	bl	8004dd8 <BMP280_init>
  //SD_init();
  SBUS_init();
 8002ef0:	f002 ff20 	bl	8005d34 <SBUS_init>
  HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	4909      	ldr	r1, [pc, #36]	@ (8002f1c <main+0x7c>)
 8002ef8:	4809      	ldr	r0, [pc, #36]	@ (8002f20 <main+0x80>)
 8002efa:	f00c fd9f 	bl	800fa3c <HAL_UART_Receive_DMA>
  HAL_UART_Receive_IT(&huart6, &LR03_RxByte,1);
 8002efe:	2201      	movs	r2, #1
 8002f00:	4908      	ldr	r1, [pc, #32]	@ (8002f24 <main+0x84>)
 8002f02:	4809      	ldr	r0, [pc, #36]	@ (8002f28 <main+0x88>)
 8002f04:	f00c fd4e 	bl	800f9a4 <HAL_UART_Receive_IT>
  NMEA_init(&huart4, &hdma_uart4_rx);
 8002f08:	4908      	ldr	r1, [pc, #32]	@ (8002f2c <main+0x8c>)
 8002f0a:	4809      	ldr	r0, [pc, #36]	@ (8002f30 <main+0x90>)
 8002f0c:	f7ff fe1e 	bl	8002b4c <NMEA_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002f10:	f7ff f974 	bl	80021fc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002f14:	f011 fcfd 	bl	8014912 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002f18:	bf00      	nop
 8002f1a:	e7fd      	b.n	8002f18 <main+0x78>
 8002f1c:	24001647 	.word	0x24001647
 8002f20:	24001280 	.word	0x24001280
 8002f24:	24000ec0 	.word	0x24000ec0
 8002f28:	24001314 	.word	0x24001314
 8002f2c:	240013a8 	.word	0x240013a8
 8002f30:	24001158 	.word	0x24001158

08002f34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b09c      	sub	sp, #112	@ 0x70
 8002f38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f3e:	224c      	movs	r2, #76	@ 0x4c
 8002f40:	2100      	movs	r1, #0
 8002f42:	4618      	mov	r0, r3
 8002f44:	f014 fe5f 	bl	8017c06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f48:	1d3b      	adds	r3, r7, #4
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f014 fe59 	bl	8017c06 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8002f54:	4b30      	ldr	r3, [pc, #192]	@ (8003018 <SystemClock_Config+0xe4>)
 8002f56:	f04f 32ff 	mov.w	r2, #4294967295
 8002f5a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002f5e:	2002      	movs	r0, #2
 8002f60:	f007 fb26 	bl	800a5b0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002f64:	2300      	movs	r3, #0
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	4b2c      	ldr	r3, [pc, #176]	@ (800301c <SystemClock_Config+0xe8>)
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	4a2b      	ldr	r2, [pc, #172]	@ (800301c <SystemClock_Config+0xe8>)
 8002f6e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f72:	6193      	str	r3, [r2, #24]
 8002f74:	4b29      	ldr	r3, [pc, #164]	@ (800301c <SystemClock_Config+0xe8>)
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002f7c:	603b      	str	r3, [r7, #0]
 8002f7e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002f80:	bf00      	nop
 8002f82:	4b26      	ldr	r3, [pc, #152]	@ (800301c <SystemClock_Config+0xe8>)
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f8e:	d1f8      	bne.n	8002f82 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f90:	2302      	movs	r3, #2
 8002f92:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002f94:	2301      	movs	r3, #1
 8002f96:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8002f98:	2340      	movs	r3, #64	@ 0x40
 8002f9a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002fa4:	2304      	movs	r3, #4
 8002fa6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8002fa8:	2323      	movs	r3, #35	@ 0x23
 8002faa:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002fac:	2302      	movs	r3, #2
 8002fae:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002fb8:	230c      	movs	r3, #12
 8002fba:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f007 fb2b 	bl	800a624 <HAL_RCC_OscConfig>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002fd4:	f000 f8ac 	bl	8003130 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fd8:	233f      	movs	r3, #63	@ 0x3f
 8002fda:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002fe8:	2340      	movs	r3, #64	@ 0x40
 8002fea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002fec:	2340      	movs	r3, #64	@ 0x40
 8002fee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002ff0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ff4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002ff6:	2340      	movs	r3, #64	@ 0x40
 8002ff8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002ffa:	1d3b      	adds	r3, r7, #4
 8002ffc:	2106      	movs	r1, #6
 8002ffe:	4618      	mov	r0, r3
 8003000:	f007 ff42 	bl	800ae88 <HAL_RCC_ClockConfig>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <SystemClock_Config+0xda>
  {
    Error_Handler();
 800300a:	f000 f891 	bl	8003130 <Error_Handler>
  }
}
 800300e:	bf00      	nop
 8003010:	3770      	adds	r7, #112	@ 0x70
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	58024400 	.word	0x58024400
 800301c:	58024800 	.word	0x58024800

08003020 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1){
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a18      	ldr	r2, [pc, #96]	@ (8003090 <HAL_UART_RxCpltCallback+0x70>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d10a      	bne.n	8003048 <HAL_UART_RxCpltCallback+0x28>
		SBUS_Receive(SBUS_RxBuffer);
 8003032:	4b18      	ldr	r3, [pc, #96]	@ (8003094 <HAL_UART_RxCpltCallback+0x74>)
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f002 fe8a 	bl	8005d50 <SBUS_Receive>
		HAL_UART_Receive_DMA(&huart1, &SBUS_RxBuffer, 1);
 800303c:	2201      	movs	r2, #1
 800303e:	4915      	ldr	r1, [pc, #84]	@ (8003094 <HAL_UART_RxCpltCallback+0x74>)
 8003040:	4815      	ldr	r0, [pc, #84]	@ (8003098 <HAL_UART_RxCpltCallback+0x78>)
 8003042:	f00c fcfb 	bl	800fa3c <HAL_UART_Receive_DMA>
    }
    else if(huart -> Instance == USART6){
    	LR03_Receive(LR03_RxByte);
    	HAL_UART_Receive_IT(&huart6, &LR03_RxByte,1);
    }
}
 8003046:	e01e      	b.n	8003086 <HAL_UART_RxCpltCallback+0x66>
    else if (huart -> Instance == USART3){
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a13      	ldr	r2, [pc, #76]	@ (800309c <HAL_UART_RxCpltCallback+0x7c>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d10a      	bne.n	8003068 <HAL_UART_RxCpltCallback+0x48>
        BNO_Receive(BNO_BufferByte);
 8003052:	4b13      	ldr	r3, [pc, #76]	@ (80030a0 <HAL_UART_RxCpltCallback+0x80>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f002 fbf2 	bl	8005840 <BNO_Receive>
        HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 800305c:	2201      	movs	r2, #1
 800305e:	4910      	ldr	r1, [pc, #64]	@ (80030a0 <HAL_UART_RxCpltCallback+0x80>)
 8003060:	4810      	ldr	r0, [pc, #64]	@ (80030a4 <HAL_UART_RxCpltCallback+0x84>)
 8003062:	f00c fceb 	bl	800fa3c <HAL_UART_Receive_DMA>
}
 8003066:	e00e      	b.n	8003086 <HAL_UART_RxCpltCallback+0x66>
    else if(huart -> Instance == USART6){
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a0e      	ldr	r2, [pc, #56]	@ (80030a8 <HAL_UART_RxCpltCallback+0x88>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d109      	bne.n	8003086 <HAL_UART_RxCpltCallback+0x66>
    	LR03_Receive(LR03_RxByte);
 8003072:	4b0e      	ldr	r3, [pc, #56]	@ (80030ac <HAL_UART_RxCpltCallback+0x8c>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f002 fdc4 	bl	8005c04 <LR03_Receive>
    	HAL_UART_Receive_IT(&huart6, &LR03_RxByte,1);
 800307c:	2201      	movs	r2, #1
 800307e:	490b      	ldr	r1, [pc, #44]	@ (80030ac <HAL_UART_RxCpltCallback+0x8c>)
 8003080:	480b      	ldr	r0, [pc, #44]	@ (80030b0 <HAL_UART_RxCpltCallback+0x90>)
 8003082:	f00c fc8f 	bl	800f9a4 <HAL_UART_Receive_IT>
}
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40011000 	.word	0x40011000
 8003094:	240017d1 	.word	0x240017d1
 8003098:	240011ec 	.word	0x240011ec
 800309c:	40004800 	.word	0x40004800
 80030a0:	24001647 	.word	0x24001647
 80030a4:	24001280 	.word	0x24001280
 80030a8:	40011400 	.word	0x40011400
 80030ac:	24000ec0 	.word	0x24000ec0
 80030b0:	24001314 	.word	0x24001314

080030b4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80030ba:	463b      	mov	r3, r7
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	605a      	str	r2, [r3, #4]
 80030c2:	609a      	str	r2, [r3, #8]
 80030c4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80030c6:	f003 fcaf 	bl	8006a28 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80030ca:	2301      	movs	r3, #1
 80030cc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80030ce:	2300      	movs	r3, #0
 80030d0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80030d2:	2300      	movs	r3, #0
 80030d4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80030d6:	231f      	movs	r3, #31
 80030d8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80030da:	2387      	movs	r3, #135	@ 0x87
 80030dc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80030de:	2300      	movs	r3, #0
 80030e0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80030e2:	2300      	movs	r3, #0
 80030e4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80030e6:	2301      	movs	r3, #1
 80030e8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80030ea:	2301      	movs	r3, #1
 80030ec:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80030ee:	2300      	movs	r3, #0
 80030f0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80030f2:	2300      	movs	r3, #0
 80030f4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80030f6:	463b      	mov	r3, r7
 80030f8:	4618      	mov	r0, r3
 80030fa:	f003 fccd 	bl	8006a98 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80030fe:	2004      	movs	r0, #4
 8003100:	f003 fcaa 	bl	8006a58 <HAL_MPU_Enable>

}
 8003104:	bf00      	nop
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a04      	ldr	r2, [pc, #16]	@ (800312c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d101      	bne.n	8003122 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800311e:	f003 fb5f 	bl	80067e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003122:	bf00      	nop
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40014800 	.word	0x40014800

08003130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003134:	b672      	cpsid	i
}
 8003136:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003138:	bf00      	nop
 800313a:	e7fd      	b.n	8003138 <Error_Handler+0x8>

0800313c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003140:	4b27      	ldr	r3, [pc, #156]	@ (80031e0 <MX_SPI1_Init+0xa4>)
 8003142:	4a28      	ldr	r2, [pc, #160]	@ (80031e4 <MX_SPI1_Init+0xa8>)
 8003144:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003146:	4b26      	ldr	r3, [pc, #152]	@ (80031e0 <MX_SPI1_Init+0xa4>)
 8003148:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800314c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800314e:	4b24      	ldr	r3, [pc, #144]	@ (80031e0 <MX_SPI1_Init+0xa4>)
 8003150:	2200      	movs	r2, #0
 8003152:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003154:	4b22      	ldr	r3, [pc, #136]	@ (80031e0 <MX_SPI1_Init+0xa4>)
 8003156:	2207      	movs	r2, #7
 8003158:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800315a:	4b21      	ldr	r3, [pc, #132]	@ (80031e0 <MX_SPI1_Init+0xa4>)
 800315c:	2200      	movs	r2, #0
 800315e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003160:	4b1f      	ldr	r3, [pc, #124]	@ (80031e0 <MX_SPI1_Init+0xa4>)
 8003162:	2200      	movs	r2, #0
 8003164:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003166:	4b1e      	ldr	r3, [pc, #120]	@ (80031e0 <MX_SPI1_Init+0xa4>)
 8003168:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800316c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800316e:	4b1c      	ldr	r3, [pc, #112]	@ (80031e0 <MX_SPI1_Init+0xa4>)
 8003170:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8003174:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003176:	4b1a      	ldr	r3, [pc, #104]	@ (80031e0 <MX_SPI1_Init+0xa4>)
 8003178:	2200      	movs	r2, #0
 800317a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800317c:	4b18      	ldr	r3, [pc, #96]	@ (80031e0 <MX_SPI1_Init+0xa4>)
 800317e:	2200      	movs	r2, #0
 8003180:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003182:	4b17      	ldr	r3, [pc, #92]	@ (80031e0 <MX_SPI1_Init+0xa4>)
 8003184:	2200      	movs	r2, #0
 8003186:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8003188:	4b15      	ldr	r3, [pc, #84]	@ (80031e0 <MX_SPI1_Init+0xa4>)
 800318a:	2200      	movs	r2, #0
 800318c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800318e:	4b14      	ldr	r3, [pc, #80]	@ (80031e0 <MX_SPI1_Init+0xa4>)
 8003190:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003194:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003196:	4b12      	ldr	r3, [pc, #72]	@ (80031e0 <MX_SPI1_Init+0xa4>)
 8003198:	2200      	movs	r2, #0
 800319a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800319c:	4b10      	ldr	r3, [pc, #64]	@ (80031e0 <MX_SPI1_Init+0xa4>)
 800319e:	2200      	movs	r2, #0
 80031a0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80031a2:	4b0f      	ldr	r3, [pc, #60]	@ (80031e0 <MX_SPI1_Init+0xa4>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80031a8:	4b0d      	ldr	r3, [pc, #52]	@ (80031e0 <MX_SPI1_Init+0xa4>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80031ae:	4b0c      	ldr	r3, [pc, #48]	@ (80031e0 <MX_SPI1_Init+0xa4>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80031b4:	4b0a      	ldr	r3, [pc, #40]	@ (80031e0 <MX_SPI1_Init+0xa4>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80031ba:	4b09      	ldr	r3, [pc, #36]	@ (80031e0 <MX_SPI1_Init+0xa4>)
 80031bc:	2200      	movs	r2, #0
 80031be:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80031c0:	4b07      	ldr	r3, [pc, #28]	@ (80031e0 <MX_SPI1_Init+0xa4>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80031c6:	4b06      	ldr	r3, [pc, #24]	@ (80031e0 <MX_SPI1_Init+0xa4>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80031cc:	4804      	ldr	r0, [pc, #16]	@ (80031e0 <MX_SPI1_Init+0xa4>)
 80031ce:	f00a f809 	bl	800d1e4 <HAL_SPI_Init>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80031d8:	f7ff ffaa 	bl	8003130 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80031dc:	bf00      	nop
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	24000ec8 	.word	0x24000ec8
 80031e4:	40013000 	.word	0x40013000

080031e8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80031ec:	4b27      	ldr	r3, [pc, #156]	@ (800328c <MX_SPI2_Init+0xa4>)
 80031ee:	4a28      	ldr	r2, [pc, #160]	@ (8003290 <MX_SPI2_Init+0xa8>)
 80031f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80031f2:	4b26      	ldr	r3, [pc, #152]	@ (800328c <MX_SPI2_Init+0xa4>)
 80031f4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80031f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80031fa:	4b24      	ldr	r3, [pc, #144]	@ (800328c <MX_SPI2_Init+0xa4>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003200:	4b22      	ldr	r3, [pc, #136]	@ (800328c <MX_SPI2_Init+0xa4>)
 8003202:	2207      	movs	r2, #7
 8003204:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003206:	4b21      	ldr	r3, [pc, #132]	@ (800328c <MX_SPI2_Init+0xa4>)
 8003208:	2200      	movs	r2, #0
 800320a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800320c:	4b1f      	ldr	r3, [pc, #124]	@ (800328c <MX_SPI2_Init+0xa4>)
 800320e:	2200      	movs	r2, #0
 8003210:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003212:	4b1e      	ldr	r3, [pc, #120]	@ (800328c <MX_SPI2_Init+0xa4>)
 8003214:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003218:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800321a:	4b1c      	ldr	r3, [pc, #112]	@ (800328c <MX_SPI2_Init+0xa4>)
 800321c:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8003220:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003222:	4b1a      	ldr	r3, [pc, #104]	@ (800328c <MX_SPI2_Init+0xa4>)
 8003224:	2200      	movs	r2, #0
 8003226:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003228:	4b18      	ldr	r3, [pc, #96]	@ (800328c <MX_SPI2_Init+0xa4>)
 800322a:	2200      	movs	r2, #0
 800322c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800322e:	4b17      	ldr	r3, [pc, #92]	@ (800328c <MX_SPI2_Init+0xa4>)
 8003230:	2200      	movs	r2, #0
 8003232:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8003234:	4b15      	ldr	r3, [pc, #84]	@ (800328c <MX_SPI2_Init+0xa4>)
 8003236:	2200      	movs	r2, #0
 8003238:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800323a:	4b14      	ldr	r3, [pc, #80]	@ (800328c <MX_SPI2_Init+0xa4>)
 800323c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003240:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003242:	4b12      	ldr	r3, [pc, #72]	@ (800328c <MX_SPI2_Init+0xa4>)
 8003244:	2200      	movs	r2, #0
 8003246:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003248:	4b10      	ldr	r3, [pc, #64]	@ (800328c <MX_SPI2_Init+0xa4>)
 800324a:	2200      	movs	r2, #0
 800324c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800324e:	4b0f      	ldr	r3, [pc, #60]	@ (800328c <MX_SPI2_Init+0xa4>)
 8003250:	2200      	movs	r2, #0
 8003252:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003254:	4b0d      	ldr	r3, [pc, #52]	@ (800328c <MX_SPI2_Init+0xa4>)
 8003256:	2200      	movs	r2, #0
 8003258:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800325a:	4b0c      	ldr	r3, [pc, #48]	@ (800328c <MX_SPI2_Init+0xa4>)
 800325c:	2200      	movs	r2, #0
 800325e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003260:	4b0a      	ldr	r3, [pc, #40]	@ (800328c <MX_SPI2_Init+0xa4>)
 8003262:	2200      	movs	r2, #0
 8003264:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003266:	4b09      	ldr	r3, [pc, #36]	@ (800328c <MX_SPI2_Init+0xa4>)
 8003268:	2200      	movs	r2, #0
 800326a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800326c:	4b07      	ldr	r3, [pc, #28]	@ (800328c <MX_SPI2_Init+0xa4>)
 800326e:	2200      	movs	r2, #0
 8003270:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003272:	4b06      	ldr	r3, [pc, #24]	@ (800328c <MX_SPI2_Init+0xa4>)
 8003274:	2200      	movs	r2, #0
 8003276:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003278:	4804      	ldr	r0, [pc, #16]	@ (800328c <MX_SPI2_Init+0xa4>)
 800327a:	f009 ffb3 	bl	800d1e4 <HAL_SPI_Init>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8003284:	f7ff ff54 	bl	8003130 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003288:	bf00      	nop
 800328a:	bd80      	pop	{r7, pc}
 800328c:	24000f50 	.word	0x24000f50
 8003290:	40003800 	.word	0x40003800

08003294 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b0bc      	sub	sp, #240	@ 0xf0
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800329c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	605a      	str	r2, [r3, #4]
 80032a6:	609a      	str	r2, [r3, #8]
 80032a8:	60da      	str	r2, [r3, #12]
 80032aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032ac:	f107 0318 	add.w	r3, r7, #24
 80032b0:	22c0      	movs	r2, #192	@ 0xc0
 80032b2:	2100      	movs	r1, #0
 80032b4:	4618      	mov	r0, r3
 80032b6:	f014 fca6 	bl	8017c06 <memset>
  if(spiHandle->Instance==SPI1)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a4c      	ldr	r2, [pc, #304]	@ (80033f0 <HAL_SPI_MspInit+0x15c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d145      	bne.n	8003350 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80032c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80032d0:	2300      	movs	r3, #0
 80032d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032d4:	f107 0318 	add.w	r3, r7, #24
 80032d8:	4618      	mov	r0, r3
 80032da:	f008 f9a3 	bl	800b624 <HAL_RCCEx_PeriphCLKConfig>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80032e4:	f7ff ff24 	bl	8003130 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032e8:	4b42      	ldr	r3, [pc, #264]	@ (80033f4 <HAL_SPI_MspInit+0x160>)
 80032ea:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80032ee:	4a41      	ldr	r2, [pc, #260]	@ (80033f4 <HAL_SPI_MspInit+0x160>)
 80032f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80032f4:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80032f8:	4b3e      	ldr	r3, [pc, #248]	@ (80033f4 <HAL_SPI_MspInit+0x160>)
 80032fa:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80032fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003302:	617b      	str	r3, [r7, #20]
 8003304:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003306:	4b3b      	ldr	r3, [pc, #236]	@ (80033f4 <HAL_SPI_MspInit+0x160>)
 8003308:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800330c:	4a39      	ldr	r2, [pc, #228]	@ (80033f4 <HAL_SPI_MspInit+0x160>)
 800330e:	f043 0301 	orr.w	r3, r3, #1
 8003312:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003316:	4b37      	ldr	r3, [pc, #220]	@ (80033f4 <HAL_SPI_MspInit+0x160>)
 8003318:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8003324:	23e0      	movs	r3, #224	@ 0xe0
 8003326:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332a:	2302      	movs	r3, #2
 800332c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003330:	2300      	movs	r3, #0
 8003332:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003336:	2300      	movs	r3, #0
 8003338:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800333c:	2305      	movs	r3, #5
 800333e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003342:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003346:	4619      	mov	r1, r3
 8003348:	482b      	ldr	r0, [pc, #172]	@ (80033f8 <HAL_SPI_MspInit+0x164>)
 800334a:	f006 fe33 	bl	8009fb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800334e:	e04a      	b.n	80033e6 <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a29      	ldr	r2, [pc, #164]	@ (80033fc <HAL_SPI_MspInit+0x168>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d145      	bne.n	80033e6 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800335a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800335e:	f04f 0300 	mov.w	r3, #0
 8003362:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003366:	2300      	movs	r3, #0
 8003368:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800336a:	f107 0318 	add.w	r3, r7, #24
 800336e:	4618      	mov	r0, r3
 8003370:	f008 f958 	bl	800b624 <HAL_RCCEx_PeriphCLKConfig>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <HAL_SPI_MspInit+0xea>
      Error_Handler();
 800337a:	f7ff fed9 	bl	8003130 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800337e:	4b1d      	ldr	r3, [pc, #116]	@ (80033f4 <HAL_SPI_MspInit+0x160>)
 8003380:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003384:	4a1b      	ldr	r2, [pc, #108]	@ (80033f4 <HAL_SPI_MspInit+0x160>)
 8003386:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800338a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800338e:	4b19      	ldr	r3, [pc, #100]	@ (80033f4 <HAL_SPI_MspInit+0x160>)
 8003390:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003394:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800339c:	4b15      	ldr	r3, [pc, #84]	@ (80033f4 <HAL_SPI_MspInit+0x160>)
 800339e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80033a2:	4a14      	ldr	r2, [pc, #80]	@ (80033f4 <HAL_SPI_MspInit+0x160>)
 80033a4:	f043 0302 	orr.w	r3, r3, #2
 80033a8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80033ac:	4b11      	ldr	r3, [pc, #68]	@ (80033f4 <HAL_SPI_MspInit+0x160>)
 80033ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	60bb      	str	r3, [r7, #8]
 80033b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 80033ba:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80033be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c2:	2302      	movs	r3, #2
 80033c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c8:	2300      	movs	r3, #0
 80033ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ce:	2300      	movs	r3, #0
 80033d0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80033d4:	2305      	movs	r3, #5
 80033d6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033da:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80033de:	4619      	mov	r1, r3
 80033e0:	4807      	ldr	r0, [pc, #28]	@ (8003400 <HAL_SPI_MspInit+0x16c>)
 80033e2:	f006 fde7 	bl	8009fb4 <HAL_GPIO_Init>
}
 80033e6:	bf00      	nop
 80033e8:	37f0      	adds	r7, #240	@ 0xf0
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40013000 	.word	0x40013000
 80033f4:	58024400 	.word	0x58024400
 80033f8:	58020000 	.word	0x58020000
 80033fc:	40003800 	.word	0x40003800
 8003400:	58020400 	.word	0x58020400

08003404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800340a:	4b0c      	ldr	r3, [pc, #48]	@ (800343c <HAL_MspInit+0x38>)
 800340c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003410:	4a0a      	ldr	r2, [pc, #40]	@ (800343c <HAL_MspInit+0x38>)
 8003412:	f043 0302 	orr.w	r3, r3, #2
 8003416:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800341a:	4b08      	ldr	r3, [pc, #32]	@ (800343c <HAL_MspInit+0x38>)
 800341c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	607b      	str	r3, [r7, #4]
 8003426:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003428:	2200      	movs	r2, #0
 800342a:	210f      	movs	r1, #15
 800342c:	f06f 0001 	mvn.w	r0, #1
 8003430:	f003 fad2 	bl	80069d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003434:	bf00      	nop
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	58024400 	.word	0x58024400

08003440 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08e      	sub	sp, #56	@ 0x38
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b0f      	cmp	r3, #15
 800344c:	d844      	bhi.n	80034d8 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 800344e:	2200      	movs	r2, #0
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	2076      	movs	r0, #118	@ 0x76
 8003454:	f003 fac0 	bl	80069d8 <HAL_NVIC_SetPriority>

     /* Enable the TIM17 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8003458:	2076      	movs	r0, #118	@ 0x76
 800345a:	f003 fad7 	bl	8006a0c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800345e:	4a24      	ldr	r2, [pc, #144]	@ (80034f0 <HAL_InitTick+0xb0>)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8003464:	4b23      	ldr	r3, [pc, #140]	@ (80034f4 <HAL_InitTick+0xb4>)
 8003466:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800346a:	4a22      	ldr	r2, [pc, #136]	@ (80034f4 <HAL_InitTick+0xb4>)
 800346c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003470:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8003474:	4b1f      	ldr	r3, [pc, #124]	@ (80034f4 <HAL_InitTick+0xb4>)
 8003476:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800347a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800347e:	60bb      	str	r3, [r7, #8]
 8003480:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003482:	f107 020c 	add.w	r2, r7, #12
 8003486:	f107 0310 	add.w	r3, r7, #16
 800348a:	4611      	mov	r1, r2
 800348c:	4618      	mov	r0, r3
 800348e:	f008 f887 	bl	800b5a0 <HAL_RCC_GetClockConfig>
  /* Compute TIM17 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003492:	f008 f86f 	bl	800b574 <HAL_RCC_GetPCLK2Freq>
 8003496:	4603      	mov	r3, r0
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800349c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800349e:	4a16      	ldr	r2, [pc, #88]	@ (80034f8 <HAL_InitTick+0xb8>)
 80034a0:	fba2 2303 	umull	r2, r3, r2, r3
 80034a4:	0c9b      	lsrs	r3, r3, #18
 80034a6:	3b01      	subs	r3, #1
 80034a8:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80034aa:	4b14      	ldr	r3, [pc, #80]	@ (80034fc <HAL_InitTick+0xbc>)
 80034ac:	4a14      	ldr	r2, [pc, #80]	@ (8003500 <HAL_InitTick+0xc0>)
 80034ae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80034b0:	4b12      	ldr	r3, [pc, #72]	@ (80034fc <HAL_InitTick+0xbc>)
 80034b2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80034b6:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80034b8:	4a10      	ldr	r2, [pc, #64]	@ (80034fc <HAL_InitTick+0xbc>)
 80034ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034bc:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80034be:	4b0f      	ldr	r3, [pc, #60]	@ (80034fc <HAL_InitTick+0xbc>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034c4:	4b0d      	ldr	r3, [pc, #52]	@ (80034fc <HAL_InitTick+0xbc>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 80034ca:	480c      	ldr	r0, [pc, #48]	@ (80034fc <HAL_InitTick+0xbc>)
 80034cc:	f00b f831 	bl	800e532 <HAL_TIM_Base_Init>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d107      	bne.n	80034e6 <HAL_InitTick+0xa6>
 80034d6:	e001      	b.n	80034dc <HAL_InitTick+0x9c>
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e005      	b.n	80034e8 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 80034dc:	4807      	ldr	r0, [pc, #28]	@ (80034fc <HAL_InitTick+0xbc>)
 80034de:	f00b f87f 	bl	800e5e0 <HAL_TIM_Base_Start_IT>
 80034e2:	4603      	mov	r3, r0
 80034e4:	e000      	b.n	80034e8 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3738      	adds	r7, #56	@ 0x38
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	240000a4 	.word	0x240000a4
 80034f4:	58024400 	.word	0x58024400
 80034f8:	431bde83 	.word	0x431bde83
 80034fc:	24000fd8 	.word	0x24000fd8
 8003500:	40014800 	.word	0x40014800

08003504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003508:	bf00      	nop
 800350a:	e7fd      	b.n	8003508 <NMI_Handler+0x4>

0800350c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003510:	bf00      	nop
 8003512:	e7fd      	b.n	8003510 <HardFault_Handler+0x4>

08003514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003518:	bf00      	nop
 800351a:	e7fd      	b.n	8003518 <MemManage_Handler+0x4>

0800351c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003520:	bf00      	nop
 8003522:	e7fd      	b.n	8003520 <BusFault_Handler+0x4>

08003524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003528:	bf00      	nop
 800352a:	e7fd      	b.n	8003528 <UsageFault_Handler+0x4>

0800352c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003530:	bf00      	nop
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
	...

0800353c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003540:	4802      	ldr	r0, [pc, #8]	@ (800354c <DMA1_Stream0_IRQHandler+0x10>)
 8003542:	f004 fe45 	bl	80081d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003546:	bf00      	nop
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	24001420 	.word	0x24001420

08003550 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003554:	4802      	ldr	r0, [pc, #8]	@ (8003560 <DMA1_Stream1_IRQHandler+0x10>)
 8003556:	f004 fe3b 	bl	80081d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800355a:	bf00      	nop
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	24001498 	.word	0x24001498

08003564 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003568:	4802      	ldr	r0, [pc, #8]	@ (8003574 <DMA1_Stream2_IRQHandler+0x10>)
 800356a:	f004 fe31 	bl	80081d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800356e:	bf00      	nop
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	240013a8 	.word	0x240013a8

08003578 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800357c:	4802      	ldr	r0, [pc, #8]	@ (8003588 <USART1_IRQHandler+0x10>)
 800357e:	f00c fc7b 	bl	800fe78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003582:	bf00      	nop
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	240011ec 	.word	0x240011ec

0800358c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003590:	4802      	ldr	r0, [pc, #8]	@ (800359c <USART3_IRQHandler+0x10>)
 8003592:	f00c fc71 	bl	800fe78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003596:	bf00      	nop
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	24001280 	.word	0x24001280

080035a0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	user_UART_IDLE_IT_handler();
 80035a4:	f7ff fc5a 	bl	8002e5c <user_UART_IDLE_IT_handler>
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80035a8:	4802      	ldr	r0, [pc, #8]	@ (80035b4 <UART4_IRQHandler+0x14>)
 80035aa:	f00c fc65 	bl	800fe78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80035ae:	bf00      	nop
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	24001158 	.word	0x24001158

080035b8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80035bc:	4802      	ldr	r0, [pc, #8]	@ (80035c8 <USART6_IRQHandler+0x10>)
 80035be:	f00c fc5b 	bl	800fe78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80035c2:	bf00      	nop
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	24001314 	.word	0x24001314

080035cc <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80035d0:	4802      	ldr	r0, [pc, #8]	@ (80035dc <TIM17_IRQHandler+0x10>)
 80035d2:	f00b f9e3 	bl	800e99c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80035d6:	bf00      	nop
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	24000fd8 	.word	0x24000fd8

080035e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  return 1;
 80035e4:	2301      	movs	r3, #1
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <_kill>:

int _kill(int pid, int sig)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80035fa:	f014 fb71 	bl	8017ce0 <__errno>
 80035fe:	4603      	mov	r3, r0
 8003600:	2216      	movs	r2, #22
 8003602:	601a      	str	r2, [r3, #0]
  return -1;
 8003604:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003608:	4618      	mov	r0, r3
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <_exit>:

void _exit (int status)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003618:	f04f 31ff 	mov.w	r1, #4294967295
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f7ff ffe7 	bl	80035f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003622:	bf00      	nop
 8003624:	e7fd      	b.n	8003622 <_exit+0x12>

08003626 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b086      	sub	sp, #24
 800362a:	af00      	add	r7, sp, #0
 800362c:	60f8      	str	r0, [r7, #12]
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003632:	2300      	movs	r3, #0
 8003634:	617b      	str	r3, [r7, #20]
 8003636:	e00a      	b.n	800364e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003638:	f3af 8000 	nop.w
 800363c:	4601      	mov	r1, r0
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	1c5a      	adds	r2, r3, #1
 8003642:	60ba      	str	r2, [r7, #8]
 8003644:	b2ca      	uxtb	r2, r1
 8003646:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	3301      	adds	r3, #1
 800364c:	617b      	str	r3, [r7, #20]
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	429a      	cmp	r2, r3
 8003654:	dbf0      	blt.n	8003638 <_read+0x12>
  }

  return len;
 8003656:	687b      	ldr	r3, [r7, #4]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800366c:	2300      	movs	r3, #0
 800366e:	617b      	str	r3, [r7, #20]
 8003670:	e009      	b.n	8003686 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	60ba      	str	r2, [r7, #8]
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	3301      	adds	r3, #1
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	429a      	cmp	r2, r3
 800368c:	dbf1      	blt.n	8003672 <_write+0x12>
  }
  return len;
 800368e:	687b      	ldr	r3, [r7, #4]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <_close>:

int _close(int file)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80036a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80036c0:	605a      	str	r2, [r3, #4]
  return 0;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <_isatty>:

int _isatty(int file)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80036d8:	2301      	movs	r3, #1
}
 80036da:	4618      	mov	r0, r3
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b085      	sub	sp, #20
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003708:	4a14      	ldr	r2, [pc, #80]	@ (800375c <_sbrk+0x5c>)
 800370a:	4b15      	ldr	r3, [pc, #84]	@ (8003760 <_sbrk+0x60>)
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003714:	4b13      	ldr	r3, [pc, #76]	@ (8003764 <_sbrk+0x64>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d102      	bne.n	8003722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800371c:	4b11      	ldr	r3, [pc, #68]	@ (8003764 <_sbrk+0x64>)
 800371e:	4a12      	ldr	r2, [pc, #72]	@ (8003768 <_sbrk+0x68>)
 8003720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003722:	4b10      	ldr	r3, [pc, #64]	@ (8003764 <_sbrk+0x64>)
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4413      	add	r3, r2
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	429a      	cmp	r2, r3
 800372e:	d207      	bcs.n	8003740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003730:	f014 fad6 	bl	8017ce0 <__errno>
 8003734:	4603      	mov	r3, r0
 8003736:	220c      	movs	r2, #12
 8003738:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800373a:	f04f 33ff 	mov.w	r3, #4294967295
 800373e:	e009      	b.n	8003754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003740:	4b08      	ldr	r3, [pc, #32]	@ (8003764 <_sbrk+0x64>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003746:	4b07      	ldr	r3, [pc, #28]	@ (8003764 <_sbrk+0x64>)
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4413      	add	r3, r2
 800374e:	4a05      	ldr	r2, [pc, #20]	@ (8003764 <_sbrk+0x64>)
 8003750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003752:	68fb      	ldr	r3, [r7, #12]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3718      	adds	r7, #24
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	24100000 	.word	0x24100000
 8003760:	00000400 	.word	0x00000400
 8003764:	24001024 	.word	0x24001024
 8003768:	24006948 	.word	0x24006948

0800376c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003770:	4b32      	ldr	r3, [pc, #200]	@ (800383c <SystemInit+0xd0>)
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003776:	4a31      	ldr	r2, [pc, #196]	@ (800383c <SystemInit+0xd0>)
 8003778:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800377c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003780:	4b2f      	ldr	r3, [pc, #188]	@ (8003840 <SystemInit+0xd4>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 030f 	and.w	r3, r3, #15
 8003788:	2b02      	cmp	r3, #2
 800378a:	d807      	bhi.n	800379c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800378c:	4b2c      	ldr	r3, [pc, #176]	@ (8003840 <SystemInit+0xd4>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f023 030f 	bic.w	r3, r3, #15
 8003794:	4a2a      	ldr	r2, [pc, #168]	@ (8003840 <SystemInit+0xd4>)
 8003796:	f043 0303 	orr.w	r3, r3, #3
 800379a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800379c:	4b29      	ldr	r3, [pc, #164]	@ (8003844 <SystemInit+0xd8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a28      	ldr	r2, [pc, #160]	@ (8003844 <SystemInit+0xd8>)
 80037a2:	f043 0301 	orr.w	r3, r3, #1
 80037a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80037a8:	4b26      	ldr	r3, [pc, #152]	@ (8003844 <SystemInit+0xd8>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80037ae:	4b25      	ldr	r3, [pc, #148]	@ (8003844 <SystemInit+0xd8>)
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	4924      	ldr	r1, [pc, #144]	@ (8003844 <SystemInit+0xd8>)
 80037b4:	4b24      	ldr	r3, [pc, #144]	@ (8003848 <SystemInit+0xdc>)
 80037b6:	4013      	ands	r3, r2
 80037b8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80037ba:	4b21      	ldr	r3, [pc, #132]	@ (8003840 <SystemInit+0xd4>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 030c 	and.w	r3, r3, #12
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d007      	beq.n	80037d6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80037c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003840 <SystemInit+0xd4>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f023 030f 	bic.w	r3, r3, #15
 80037ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003840 <SystemInit+0xd4>)
 80037d0:	f043 0303 	orr.w	r3, r3, #3
 80037d4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80037d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003844 <SystemInit+0xd8>)
 80037d8:	2200      	movs	r2, #0
 80037da:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80037dc:	4b19      	ldr	r3, [pc, #100]	@ (8003844 <SystemInit+0xd8>)
 80037de:	2200      	movs	r2, #0
 80037e0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80037e2:	4b18      	ldr	r3, [pc, #96]	@ (8003844 <SystemInit+0xd8>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80037e8:	4b16      	ldr	r3, [pc, #88]	@ (8003844 <SystemInit+0xd8>)
 80037ea:	4a18      	ldr	r2, [pc, #96]	@ (800384c <SystemInit+0xe0>)
 80037ec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80037ee:	4b15      	ldr	r3, [pc, #84]	@ (8003844 <SystemInit+0xd8>)
 80037f0:	4a17      	ldr	r2, [pc, #92]	@ (8003850 <SystemInit+0xe4>)
 80037f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80037f4:	4b13      	ldr	r3, [pc, #76]	@ (8003844 <SystemInit+0xd8>)
 80037f6:	4a17      	ldr	r2, [pc, #92]	@ (8003854 <SystemInit+0xe8>)
 80037f8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80037fa:	4b12      	ldr	r3, [pc, #72]	@ (8003844 <SystemInit+0xd8>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003800:	4b10      	ldr	r3, [pc, #64]	@ (8003844 <SystemInit+0xd8>)
 8003802:	4a14      	ldr	r2, [pc, #80]	@ (8003854 <SystemInit+0xe8>)
 8003804:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003806:	4b0f      	ldr	r3, [pc, #60]	@ (8003844 <SystemInit+0xd8>)
 8003808:	2200      	movs	r2, #0
 800380a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800380c:	4b0d      	ldr	r3, [pc, #52]	@ (8003844 <SystemInit+0xd8>)
 800380e:	4a11      	ldr	r2, [pc, #68]	@ (8003854 <SystemInit+0xe8>)
 8003810:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003812:	4b0c      	ldr	r3, [pc, #48]	@ (8003844 <SystemInit+0xd8>)
 8003814:	2200      	movs	r2, #0
 8003816:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003818:	4b0a      	ldr	r3, [pc, #40]	@ (8003844 <SystemInit+0xd8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a09      	ldr	r2, [pc, #36]	@ (8003844 <SystemInit+0xd8>)
 800381e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003822:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003824:	4b07      	ldr	r3, [pc, #28]	@ (8003844 <SystemInit+0xd8>)
 8003826:	2200      	movs	r2, #0
 8003828:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800382a:	4b0b      	ldr	r3, [pc, #44]	@ (8003858 <SystemInit+0xec>)
 800382c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003830:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003832:	bf00      	nop
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	e000ed00 	.word	0xe000ed00
 8003840:	52002000 	.word	0x52002000
 8003844:	58024400 	.word	0x58024400
 8003848:	eaf6ed7f 	.word	0xeaf6ed7f
 800384c:	02020200 	.word	0x02020200
 8003850:	01ff0000 	.word	0x01ff0000
 8003854:	01010280 	.word	0x01010280
 8003858:	52004000 	.word	0x52004000

0800385c <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b08a      	sub	sp, #40	@ 0x28
 8003860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003862:	f107 031c 	add.w	r3, r7, #28
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	605a      	str	r2, [r3, #4]
 800386c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800386e:	463b      	mov	r3, r7
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	605a      	str	r2, [r3, #4]
 8003876:	609a      	str	r2, [r3, #8]
 8003878:	60da      	str	r2, [r3, #12]
 800387a:	611a      	str	r2, [r3, #16]
 800387c:	615a      	str	r2, [r3, #20]
 800387e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003880:	4b33      	ldr	r3, [pc, #204]	@ (8003950 <MX_TIM2_Init+0xf4>)
 8003882:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003886:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280-1;
 8003888:	4b31      	ldr	r3, [pc, #196]	@ (8003950 <MX_TIM2_Init+0xf4>)
 800388a:	f240 1217 	movw	r2, #279	@ 0x117
 800388e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003890:	4b2f      	ldr	r3, [pc, #188]	@ (8003950 <MX_TIM2_Init+0xf4>)
 8003892:	2200      	movs	r2, #0
 8003894:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 8003896:	4b2e      	ldr	r3, [pc, #184]	@ (8003950 <MX_TIM2_Init+0xf4>)
 8003898:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800389c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800389e:	4b2c      	ldr	r3, [pc, #176]	@ (8003950 <MX_TIM2_Init+0xf4>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038a4:	4b2a      	ldr	r3, [pc, #168]	@ (8003950 <MX_TIM2_Init+0xf4>)
 80038a6:	2280      	movs	r2, #128	@ 0x80
 80038a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80038aa:	4829      	ldr	r0, [pc, #164]	@ (8003950 <MX_TIM2_Init+0xf4>)
 80038ac:	f00a ff10 	bl	800e6d0 <HAL_TIM_PWM_Init>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 80038b6:	f7ff fc3b 	bl	8003130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038ba:	2300      	movs	r3, #0
 80038bc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038be:	2300      	movs	r3, #0
 80038c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80038c2:	f107 031c 	add.w	r3, r7, #28
 80038c6:	4619      	mov	r1, r3
 80038c8:	4821      	ldr	r0, [pc, #132]	@ (8003950 <MX_TIM2_Init+0xf4>)
 80038ca:	f00b fe4d 	bl	800f568 <HAL_TIMEx_MasterConfigSynchronization>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80038d4:	f7ff fc2c 	bl	8003130 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038d8:	2360      	movs	r3, #96	@ 0x60
 80038da:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80038dc:	2300      	movs	r3, #0
 80038de:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038e0:	2300      	movs	r3, #0
 80038e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038e4:	2300      	movs	r3, #0
 80038e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038e8:	463b      	mov	r3, r7
 80038ea:	2200      	movs	r2, #0
 80038ec:	4619      	mov	r1, r3
 80038ee:	4818      	ldr	r0, [pc, #96]	@ (8003950 <MX_TIM2_Init+0xf4>)
 80038f0:	f00b f95c 	bl	800ebac <HAL_TIM_PWM_ConfigChannel>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80038fa:	f7ff fc19 	bl	8003130 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80038fe:	463b      	mov	r3, r7
 8003900:	2204      	movs	r2, #4
 8003902:	4619      	mov	r1, r3
 8003904:	4812      	ldr	r0, [pc, #72]	@ (8003950 <MX_TIM2_Init+0xf4>)
 8003906:	f00b f951 	bl	800ebac <HAL_TIM_PWM_ConfigChannel>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8003910:	f7ff fc0e 	bl	8003130 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003914:	463b      	mov	r3, r7
 8003916:	2208      	movs	r2, #8
 8003918:	4619      	mov	r1, r3
 800391a:	480d      	ldr	r0, [pc, #52]	@ (8003950 <MX_TIM2_Init+0xf4>)
 800391c:	f00b f946 	bl	800ebac <HAL_TIM_PWM_ConfigChannel>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8003926:	f7ff fc03 	bl	8003130 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800392a:	463b      	mov	r3, r7
 800392c:	220c      	movs	r2, #12
 800392e:	4619      	mov	r1, r3
 8003930:	4807      	ldr	r0, [pc, #28]	@ (8003950 <MX_TIM2_Init+0xf4>)
 8003932:	f00b f93b 	bl	800ebac <HAL_TIM_PWM_ConfigChannel>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 800393c:	f7ff fbf8 	bl	8003130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003940:	4803      	ldr	r0, [pc, #12]	@ (8003950 <MX_TIM2_Init+0xf4>)
 8003942:	f000 f97d 	bl	8003c40 <HAL_TIM_MspPostInit>

}
 8003946:	bf00      	nop
 8003948:	3728      	adds	r7, #40	@ 0x28
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	24001028 	.word	0x24001028

08003954 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b08a      	sub	sp, #40	@ 0x28
 8003958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800395a:	f107 031c 	add.w	r3, r7, #28
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	605a      	str	r2, [r3, #4]
 8003964:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003966:	463b      	mov	r3, r7
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	605a      	str	r2, [r3, #4]
 800396e:	609a      	str	r2, [r3, #8]
 8003970:	60da      	str	r2, [r3, #12]
 8003972:	611a      	str	r2, [r3, #16]
 8003974:	615a      	str	r2, [r3, #20]
 8003976:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003978:	4b27      	ldr	r3, [pc, #156]	@ (8003a18 <MX_TIM3_Init+0xc4>)
 800397a:	4a28      	ldr	r2, [pc, #160]	@ (8003a1c <MX_TIM3_Init+0xc8>)
 800397c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280-1;
 800397e:	4b26      	ldr	r3, [pc, #152]	@ (8003a18 <MX_TIM3_Init+0xc4>)
 8003980:	f240 1217 	movw	r2, #279	@ 0x117
 8003984:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003986:	4b24      	ldr	r3, [pc, #144]	@ (8003a18 <MX_TIM3_Init+0xc4>)
 8003988:	2200      	movs	r2, #0
 800398a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7000;
 800398c:	4b22      	ldr	r3, [pc, #136]	@ (8003a18 <MX_TIM3_Init+0xc4>)
 800398e:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8003992:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003994:	4b20      	ldr	r3, [pc, #128]	@ (8003a18 <MX_TIM3_Init+0xc4>)
 8003996:	2200      	movs	r2, #0
 8003998:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800399a:	4b1f      	ldr	r3, [pc, #124]	@ (8003a18 <MX_TIM3_Init+0xc4>)
 800399c:	2280      	movs	r2, #128	@ 0x80
 800399e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80039a0:	481d      	ldr	r0, [pc, #116]	@ (8003a18 <MX_TIM3_Init+0xc4>)
 80039a2:	f00a fe95 	bl	800e6d0 <HAL_TIM_PWM_Init>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 80039ac:	f7ff fbc0 	bl	8003130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039b0:	2300      	movs	r3, #0
 80039b2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039b4:	2300      	movs	r3, #0
 80039b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80039b8:	f107 031c 	add.w	r3, r7, #28
 80039bc:	4619      	mov	r1, r3
 80039be:	4816      	ldr	r0, [pc, #88]	@ (8003a18 <MX_TIM3_Init+0xc4>)
 80039c0:	f00b fdd2 	bl	800f568 <HAL_TIMEx_MasterConfigSynchronization>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80039ca:	f7ff fbb1 	bl	8003130 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039ce:	2360      	movs	r3, #96	@ 0x60
 80039d0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80039d2:	2300      	movs	r3, #0
 80039d4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039d6:	2300      	movs	r3, #0
 80039d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039da:	2300      	movs	r3, #0
 80039dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80039de:	463b      	mov	r3, r7
 80039e0:	2200      	movs	r2, #0
 80039e2:	4619      	mov	r1, r3
 80039e4:	480c      	ldr	r0, [pc, #48]	@ (8003a18 <MX_TIM3_Init+0xc4>)
 80039e6:	f00b f8e1 	bl	800ebac <HAL_TIM_PWM_ConfigChannel>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80039f0:	f7ff fb9e 	bl	8003130 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80039f4:	463b      	mov	r3, r7
 80039f6:	2204      	movs	r2, #4
 80039f8:	4619      	mov	r1, r3
 80039fa:	4807      	ldr	r0, [pc, #28]	@ (8003a18 <MX_TIM3_Init+0xc4>)
 80039fc:	f00b f8d6 	bl	800ebac <HAL_TIM_PWM_ConfigChannel>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8003a06:	f7ff fb93 	bl	8003130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003a0a:	4803      	ldr	r0, [pc, #12]	@ (8003a18 <MX_TIM3_Init+0xc4>)
 8003a0c:	f000 f918 	bl	8003c40 <HAL_TIM_MspPostInit>

}
 8003a10:	bf00      	nop
 8003a12:	3728      	adds	r7, #40	@ 0x28
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	24001074 	.word	0x24001074
 8003a1c:	40000400 	.word	0x40000400

08003a20 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b08a      	sub	sp, #40	@ 0x28
 8003a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a26:	f107 031c 	add.w	r3, r7, #28
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	605a      	str	r2, [r3, #4]
 8003a30:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a32:	463b      	mov	r3, r7
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	605a      	str	r2, [r3, #4]
 8003a3a:	609a      	str	r2, [r3, #8]
 8003a3c:	60da      	str	r2, [r3, #12]
 8003a3e:	611a      	str	r2, [r3, #16]
 8003a40:	615a      	str	r2, [r3, #20]
 8003a42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003a44:	4b32      	ldr	r3, [pc, #200]	@ (8003b10 <MX_TIM4_Init+0xf0>)
 8003a46:	4a33      	ldr	r2, [pc, #204]	@ (8003b14 <MX_TIM4_Init+0xf4>)
 8003a48:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 280-1;
 8003a4a:	4b31      	ldr	r3, [pc, #196]	@ (8003b10 <MX_TIM4_Init+0xf0>)
 8003a4c:	f240 1217 	movw	r2, #279	@ 0x117
 8003a50:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a52:	4b2f      	ldr	r3, [pc, #188]	@ (8003b10 <MX_TIM4_Init+0xf0>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7000;
 8003a58:	4b2d      	ldr	r3, [pc, #180]	@ (8003b10 <MX_TIM4_Init+0xf0>)
 8003a5a:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8003a5e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a60:	4b2b      	ldr	r3, [pc, #172]	@ (8003b10 <MX_TIM4_Init+0xf0>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003a66:	4b2a      	ldr	r3, [pc, #168]	@ (8003b10 <MX_TIM4_Init+0xf0>)
 8003a68:	2280      	movs	r2, #128	@ 0x80
 8003a6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003a6c:	4828      	ldr	r0, [pc, #160]	@ (8003b10 <MX_TIM4_Init+0xf0>)
 8003a6e:	f00a fe2f 	bl	800e6d0 <HAL_TIM_PWM_Init>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8003a78:	f7ff fb5a 	bl	8003130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a80:	2300      	movs	r3, #0
 8003a82:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003a84:	f107 031c 	add.w	r3, r7, #28
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4821      	ldr	r0, [pc, #132]	@ (8003b10 <MX_TIM4_Init+0xf0>)
 8003a8c:	f00b fd6c 	bl	800f568 <HAL_TIMEx_MasterConfigSynchronization>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8003a96:	f7ff fb4b 	bl	8003130 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a9a:	2360      	movs	r3, #96	@ 0x60
 8003a9c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003aaa:	463b      	mov	r3, r7
 8003aac:	2200      	movs	r2, #0
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4817      	ldr	r0, [pc, #92]	@ (8003b10 <MX_TIM4_Init+0xf0>)
 8003ab2:	f00b f87b 	bl	800ebac <HAL_TIM_PWM_ConfigChannel>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8003abc:	f7ff fb38 	bl	8003130 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ac0:	463b      	mov	r3, r7
 8003ac2:	2204      	movs	r2, #4
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4812      	ldr	r0, [pc, #72]	@ (8003b10 <MX_TIM4_Init+0xf0>)
 8003ac8:	f00b f870 	bl	800ebac <HAL_TIM_PWM_ConfigChannel>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8003ad2:	f7ff fb2d 	bl	8003130 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003ad6:	463b      	mov	r3, r7
 8003ad8:	2208      	movs	r2, #8
 8003ada:	4619      	mov	r1, r3
 8003adc:	480c      	ldr	r0, [pc, #48]	@ (8003b10 <MX_TIM4_Init+0xf0>)
 8003ade:	f00b f865 	bl	800ebac <HAL_TIM_PWM_ConfigChannel>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8003ae8:	f7ff fb22 	bl	8003130 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003aec:	463b      	mov	r3, r7
 8003aee:	220c      	movs	r2, #12
 8003af0:	4619      	mov	r1, r3
 8003af2:	4807      	ldr	r0, [pc, #28]	@ (8003b10 <MX_TIM4_Init+0xf0>)
 8003af4:	f00b f85a 	bl	800ebac <HAL_TIM_PWM_ConfigChannel>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8003afe:	f7ff fb17 	bl	8003130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003b02:	4803      	ldr	r0, [pc, #12]	@ (8003b10 <MX_TIM4_Init+0xf0>)
 8003b04:	f000 f89c 	bl	8003c40 <HAL_TIM_MspPostInit>

}
 8003b08:	bf00      	nop
 8003b0a:	3728      	adds	r7, #40	@ 0x28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	240010c0 	.word	0x240010c0
 8003b14:	40000800 	.word	0x40000800

08003b18 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8003b58 <MX_TIM13_Init+0x40>)
 8003b1e:	4a0f      	ldr	r2, [pc, #60]	@ (8003b5c <MX_TIM13_Init+0x44>)
 8003b20:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 280-1;
 8003b22:	4b0d      	ldr	r3, [pc, #52]	@ (8003b58 <MX_TIM13_Init+0x40>)
 8003b24:	f240 1217 	movw	r2, #279	@ 0x117
 8003b28:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b58 <MX_TIM13_Init+0x40>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8003b30:	4b09      	ldr	r3, [pc, #36]	@ (8003b58 <MX_TIM13_Init+0x40>)
 8003b32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b36:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b38:	4b07      	ldr	r3, [pc, #28]	@ (8003b58 <MX_TIM13_Init+0x40>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b3e:	4b06      	ldr	r3, [pc, #24]	@ (8003b58 <MX_TIM13_Init+0x40>)
 8003b40:	2280      	movs	r2, #128	@ 0x80
 8003b42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003b44:	4804      	ldr	r0, [pc, #16]	@ (8003b58 <MX_TIM13_Init+0x40>)
 8003b46:	f00a fcf4 	bl	800e532 <HAL_TIM_Base_Init>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8003b50:	f7ff faee 	bl	8003130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8003b54:	bf00      	nop
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	2400110c 	.word	0x2400110c
 8003b5c:	40001c00 	.word	0x40001c00

08003b60 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b087      	sub	sp, #28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b70:	d10f      	bne.n	8003b92 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b72:	4b1f      	ldr	r3, [pc, #124]	@ (8003bf0 <HAL_TIM_PWM_MspInit+0x90>)
 8003b74:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003b78:	4a1d      	ldr	r2, [pc, #116]	@ (8003bf0 <HAL_TIM_PWM_MspInit+0x90>)
 8003b7a:	f043 0301 	orr.w	r3, r3, #1
 8003b7e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003b82:	4b1b      	ldr	r3, [pc, #108]	@ (8003bf0 <HAL_TIM_PWM_MspInit+0x90>)
 8003b84:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	617b      	str	r3, [r7, #20]
 8003b8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003b90:	e028      	b.n	8003be4 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM3)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a17      	ldr	r2, [pc, #92]	@ (8003bf4 <HAL_TIM_PWM_MspInit+0x94>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d10f      	bne.n	8003bbc <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b9c:	4b14      	ldr	r3, [pc, #80]	@ (8003bf0 <HAL_TIM_PWM_MspInit+0x90>)
 8003b9e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003ba2:	4a13      	ldr	r2, [pc, #76]	@ (8003bf0 <HAL_TIM_PWM_MspInit+0x90>)
 8003ba4:	f043 0302 	orr.w	r3, r3, #2
 8003ba8:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003bac:	4b10      	ldr	r3, [pc, #64]	@ (8003bf0 <HAL_TIM_PWM_MspInit+0x90>)
 8003bae:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	613b      	str	r3, [r7, #16]
 8003bb8:	693b      	ldr	r3, [r7, #16]
}
 8003bba:	e013      	b.n	8003be4 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM4)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8003bf8 <HAL_TIM_PWM_MspInit+0x98>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d10e      	bne.n	8003be4 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8003bf0 <HAL_TIM_PWM_MspInit+0x90>)
 8003bc8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003bcc:	4a08      	ldr	r2, [pc, #32]	@ (8003bf0 <HAL_TIM_PWM_MspInit+0x90>)
 8003bce:	f043 0304 	orr.w	r3, r3, #4
 8003bd2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003bd6:	4b06      	ldr	r3, [pc, #24]	@ (8003bf0 <HAL_TIM_PWM_MspInit+0x90>)
 8003bd8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	60fb      	str	r3, [r7, #12]
 8003be2:	68fb      	ldr	r3, [r7, #12]
}
 8003be4:	bf00      	nop
 8003be6:	371c      	adds	r7, #28
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	58024400 	.word	0x58024400
 8003bf4:	40000400 	.word	0x40000400
 8003bf8:	40000800 	.word	0x40000800

08003bfc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a0b      	ldr	r2, [pc, #44]	@ (8003c38 <HAL_TIM_Base_MspInit+0x3c>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d10e      	bne.n	8003c2c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c3c <HAL_TIM_Base_MspInit+0x40>)
 8003c10:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003c14:	4a09      	ldr	r2, [pc, #36]	@ (8003c3c <HAL_TIM_Base_MspInit+0x40>)
 8003c16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c1a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003c1e:	4b07      	ldr	r3, [pc, #28]	@ (8003c3c <HAL_TIM_Base_MspInit+0x40>)
 8003c20:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003c24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8003c2c:	bf00      	nop
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	40001c00 	.word	0x40001c00
 8003c3c:	58024400 	.word	0x58024400

08003c40 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b08c      	sub	sp, #48	@ 0x30
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c48:	f107 031c 	add.w	r3, r7, #28
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	605a      	str	r2, [r3, #4]
 8003c52:	609a      	str	r2, [r3, #8]
 8003c54:	60da      	str	r2, [r3, #12]
 8003c56:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c60:	d13f      	bne.n	8003ce2 <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c62:	4b47      	ldr	r3, [pc, #284]	@ (8003d80 <HAL_TIM_MspPostInit+0x140>)
 8003c64:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003c68:	4a45      	ldr	r2, [pc, #276]	@ (8003d80 <HAL_TIM_MspPostInit+0x140>)
 8003c6a:	f043 0301 	orr.w	r3, r3, #1
 8003c6e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003c72:	4b43      	ldr	r3, [pc, #268]	@ (8003d80 <HAL_TIM_MspPostInit+0x140>)
 8003c74:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	61bb      	str	r3, [r7, #24]
 8003c7e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c80:	4b3f      	ldr	r3, [pc, #252]	@ (8003d80 <HAL_TIM_MspPostInit+0x140>)
 8003c82:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003c86:	4a3e      	ldr	r2, [pc, #248]	@ (8003d80 <HAL_TIM_MspPostInit+0x140>)
 8003c88:	f043 0302 	orr.w	r3, r3, #2
 8003c8c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003c90:	4b3b      	ldr	r3, [pc, #236]	@ (8003d80 <HAL_TIM_MspPostInit+0x140>)
 8003c92:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8003c9e:	f248 030c 	movw	r3, #32780	@ 0x800c
 8003ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cac:	2300      	movs	r3, #0
 8003cae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cb4:	f107 031c 	add.w	r3, r7, #28
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4832      	ldr	r0, [pc, #200]	@ (8003d84 <HAL_TIM_MspPostInit+0x144>)
 8003cbc:	f006 f97a 	bl	8009fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003cc0:	2308      	movs	r3, #8
 8003cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cd4:	f107 031c 	add.w	r3, r7, #28
 8003cd8:	4619      	mov	r1, r3
 8003cda:	482b      	ldr	r0, [pc, #172]	@ (8003d88 <HAL_TIM_MspPostInit+0x148>)
 8003cdc:	f006 f96a 	bl	8009fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003ce0:	e049      	b.n	8003d76 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM3)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a29      	ldr	r2, [pc, #164]	@ (8003d8c <HAL_TIM_MspPostInit+0x14c>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d11f      	bne.n	8003d2c <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cec:	4b24      	ldr	r3, [pc, #144]	@ (8003d80 <HAL_TIM_MspPostInit+0x140>)
 8003cee:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003cf2:	4a23      	ldr	r2, [pc, #140]	@ (8003d80 <HAL_TIM_MspPostInit+0x140>)
 8003cf4:	f043 0302 	orr.w	r3, r3, #2
 8003cf8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003cfc:	4b20      	ldr	r3, [pc, #128]	@ (8003d80 <HAL_TIM_MspPostInit+0x140>)
 8003cfe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	613b      	str	r3, [r7, #16]
 8003d08:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003d0a:	2330      	movs	r3, #48	@ 0x30
 8003d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d0e:	2302      	movs	r3, #2
 8003d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d16:	2300      	movs	r3, #0
 8003d18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d1e:	f107 031c 	add.w	r3, r7, #28
 8003d22:	4619      	mov	r1, r3
 8003d24:	4818      	ldr	r0, [pc, #96]	@ (8003d88 <HAL_TIM_MspPostInit+0x148>)
 8003d26:	f006 f945 	bl	8009fb4 <HAL_GPIO_Init>
}
 8003d2a:	e024      	b.n	8003d76 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a17      	ldr	r2, [pc, #92]	@ (8003d90 <HAL_TIM_MspPostInit+0x150>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d11f      	bne.n	8003d76 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d36:	4b12      	ldr	r3, [pc, #72]	@ (8003d80 <HAL_TIM_MspPostInit+0x140>)
 8003d38:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003d3c:	4a10      	ldr	r2, [pc, #64]	@ (8003d80 <HAL_TIM_MspPostInit+0x140>)
 8003d3e:	f043 0302 	orr.w	r3, r3, #2
 8003d42:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003d46:	4b0e      	ldr	r3, [pc, #56]	@ (8003d80 <HAL_TIM_MspPostInit+0x140>)
 8003d48:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	60fb      	str	r3, [r7, #12]
 8003d52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003d54:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d62:	2300      	movs	r3, #0
 8003d64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003d66:	2302      	movs	r3, #2
 8003d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d6a:	f107 031c 	add.w	r3, r7, #28
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4805      	ldr	r0, [pc, #20]	@ (8003d88 <HAL_TIM_MspPostInit+0x148>)
 8003d72:	f006 f91f 	bl	8009fb4 <HAL_GPIO_Init>
}
 8003d76:	bf00      	nop
 8003d78:	3730      	adds	r7, #48	@ 0x30
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	58024400 	.word	0x58024400
 8003d84:	58020000 	.word	0x58020000
 8003d88:	58020400 	.word	0x58020400
 8003d8c:	40000400 	.word	0x40000400
 8003d90:	40000800 	.word	0x40000800

08003d94 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003d98:	4b22      	ldr	r3, [pc, #136]	@ (8003e24 <MX_UART4_Init+0x90>)
 8003d9a:	4a23      	ldr	r2, [pc, #140]	@ (8003e28 <MX_UART4_Init+0x94>)
 8003d9c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003d9e:	4b21      	ldr	r3, [pc, #132]	@ (8003e24 <MX_UART4_Init+0x90>)
 8003da0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003da4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003da6:	4b1f      	ldr	r3, [pc, #124]	@ (8003e24 <MX_UART4_Init+0x90>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003dac:	4b1d      	ldr	r3, [pc, #116]	@ (8003e24 <MX_UART4_Init+0x90>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003db2:	4b1c      	ldr	r3, [pc, #112]	@ (8003e24 <MX_UART4_Init+0x90>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003db8:	4b1a      	ldr	r3, [pc, #104]	@ (8003e24 <MX_UART4_Init+0x90>)
 8003dba:	220c      	movs	r2, #12
 8003dbc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dbe:	4b19      	ldr	r3, [pc, #100]	@ (8003e24 <MX_UART4_Init+0x90>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003dc4:	4b17      	ldr	r3, [pc, #92]	@ (8003e24 <MX_UART4_Init+0x90>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003dca:	4b16      	ldr	r3, [pc, #88]	@ (8003e24 <MX_UART4_Init+0x90>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003dd0:	4b14      	ldr	r3, [pc, #80]	@ (8003e24 <MX_UART4_Init+0x90>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003dd6:	4b13      	ldr	r3, [pc, #76]	@ (8003e24 <MX_UART4_Init+0x90>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003ddc:	4811      	ldr	r0, [pc, #68]	@ (8003e24 <MX_UART4_Init+0x90>)
 8003dde:	f00b fc6f 	bl	800f6c0 <HAL_UART_Init>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8003de8:	f7ff f9a2 	bl	8003130 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003dec:	2100      	movs	r1, #0
 8003dee:	480d      	ldr	r0, [pc, #52]	@ (8003e24 <MX_UART4_Init+0x90>)
 8003df0:	f00e ff95 	bl	8012d1e <HAL_UARTEx_SetTxFifoThreshold>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8003dfa:	f7ff f999 	bl	8003130 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003dfe:	2100      	movs	r1, #0
 8003e00:	4808      	ldr	r0, [pc, #32]	@ (8003e24 <MX_UART4_Init+0x90>)
 8003e02:	f00e ffca 	bl	8012d9a <HAL_UARTEx_SetRxFifoThreshold>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8003e0c:	f7ff f990 	bl	8003130 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003e10:	4804      	ldr	r0, [pc, #16]	@ (8003e24 <MX_UART4_Init+0x90>)
 8003e12:	f00e ff4b 	bl	8012cac <HAL_UARTEx_DisableFifoMode>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8003e1c:	f7ff f988 	bl	8003130 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003e20:	bf00      	nop
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	24001158 	.word	0x24001158
 8003e28:	40004c00 	.word	0x40004c00

08003e2c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003e30:	4b23      	ldr	r3, [pc, #140]	@ (8003ec0 <MX_USART1_UART_Init+0x94>)
 8003e32:	4a24      	ldr	r2, [pc, #144]	@ (8003ec4 <MX_USART1_UART_Init+0x98>)
 8003e34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8003e36:	4b22      	ldr	r3, [pc, #136]	@ (8003ec0 <MX_USART1_UART_Init+0x94>)
 8003e38:	4a23      	ldr	r2, [pc, #140]	@ (8003ec8 <MX_USART1_UART_Init+0x9c>)
 8003e3a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8003e3c:	4b20      	ldr	r3, [pc, #128]	@ (8003ec0 <MX_USART1_UART_Init+0x94>)
 8003e3e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003e42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003e44:	4b1e      	ldr	r3, [pc, #120]	@ (8003ec0 <MX_USART1_UART_Init+0x94>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8003e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ec0 <MX_USART1_UART_Init+0x94>)
 8003e4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e50:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e52:	4b1b      	ldr	r3, [pc, #108]	@ (8003ec0 <MX_USART1_UART_Init+0x94>)
 8003e54:	220c      	movs	r2, #12
 8003e56:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e58:	4b19      	ldr	r3, [pc, #100]	@ (8003ec0 <MX_USART1_UART_Init+0x94>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e5e:	4b18      	ldr	r3, [pc, #96]	@ (8003ec0 <MX_USART1_UART_Init+0x94>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e64:	4b16      	ldr	r3, [pc, #88]	@ (8003ec0 <MX_USART1_UART_Init+0x94>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003e6a:	4b15      	ldr	r3, [pc, #84]	@ (8003ec0 <MX_USART1_UART_Init+0x94>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e70:	4b13      	ldr	r3, [pc, #76]	@ (8003ec0 <MX_USART1_UART_Init+0x94>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e76:	4812      	ldr	r0, [pc, #72]	@ (8003ec0 <MX_USART1_UART_Init+0x94>)
 8003e78:	f00b fc22 	bl	800f6c0 <HAL_UART_Init>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8003e82:	f7ff f955 	bl	8003130 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e86:	2100      	movs	r1, #0
 8003e88:	480d      	ldr	r0, [pc, #52]	@ (8003ec0 <MX_USART1_UART_Init+0x94>)
 8003e8a:	f00e ff48 	bl	8012d1e <HAL_UARTEx_SetTxFifoThreshold>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8003e94:	f7ff f94c 	bl	8003130 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e98:	2100      	movs	r1, #0
 8003e9a:	4809      	ldr	r0, [pc, #36]	@ (8003ec0 <MX_USART1_UART_Init+0x94>)
 8003e9c:	f00e ff7d 	bl	8012d9a <HAL_UARTEx_SetRxFifoThreshold>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8003ea6:	f7ff f943 	bl	8003130 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003eaa:	4805      	ldr	r0, [pc, #20]	@ (8003ec0 <MX_USART1_UART_Init+0x94>)
 8003eac:	f00e fefe 	bl	8012cac <HAL_UARTEx_DisableFifoMode>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8003eb6:	f7ff f93b 	bl	8003130 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003eba:	bf00      	nop
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	240011ec 	.word	0x240011ec
 8003ec4:	40011000 	.word	0x40011000
 8003ec8:	000186a0 	.word	0x000186a0

08003ecc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003ed0:	4b22      	ldr	r3, [pc, #136]	@ (8003f5c <MX_USART3_UART_Init+0x90>)
 8003ed2:	4a23      	ldr	r2, [pc, #140]	@ (8003f60 <MX_USART3_UART_Init+0x94>)
 8003ed4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003ed6:	4b21      	ldr	r3, [pc, #132]	@ (8003f5c <MX_USART3_UART_Init+0x90>)
 8003ed8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003edc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003ede:	4b1f      	ldr	r3, [pc, #124]	@ (8003f5c <MX_USART3_UART_Init+0x90>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003ee4:	4b1d      	ldr	r3, [pc, #116]	@ (8003f5c <MX_USART3_UART_Init+0x90>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003eea:	4b1c      	ldr	r3, [pc, #112]	@ (8003f5c <MX_USART3_UART_Init+0x90>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8003f5c <MX_USART3_UART_Init+0x90>)
 8003ef2:	220c      	movs	r2, #12
 8003ef4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ef6:	4b19      	ldr	r3, [pc, #100]	@ (8003f5c <MX_USART3_UART_Init+0x90>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003efc:	4b17      	ldr	r3, [pc, #92]	@ (8003f5c <MX_USART3_UART_Init+0x90>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f02:	4b16      	ldr	r3, [pc, #88]	@ (8003f5c <MX_USART3_UART_Init+0x90>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003f08:	4b14      	ldr	r3, [pc, #80]	@ (8003f5c <MX_USART3_UART_Init+0x90>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f0e:	4b13      	ldr	r3, [pc, #76]	@ (8003f5c <MX_USART3_UART_Init+0x90>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003f14:	4811      	ldr	r0, [pc, #68]	@ (8003f5c <MX_USART3_UART_Init+0x90>)
 8003f16:	f00b fbd3 	bl	800f6c0 <HAL_UART_Init>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003f20:	f7ff f906 	bl	8003130 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f24:	2100      	movs	r1, #0
 8003f26:	480d      	ldr	r0, [pc, #52]	@ (8003f5c <MX_USART3_UART_Init+0x90>)
 8003f28:	f00e fef9 	bl	8012d1e <HAL_UARTEx_SetTxFifoThreshold>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8003f32:	f7ff f8fd 	bl	8003130 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f36:	2100      	movs	r1, #0
 8003f38:	4808      	ldr	r0, [pc, #32]	@ (8003f5c <MX_USART3_UART_Init+0x90>)
 8003f3a:	f00e ff2e 	bl	8012d9a <HAL_UARTEx_SetRxFifoThreshold>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003f44:	f7ff f8f4 	bl	8003130 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003f48:	4804      	ldr	r0, [pc, #16]	@ (8003f5c <MX_USART3_UART_Init+0x90>)
 8003f4a:	f00e feaf 	bl	8012cac <HAL_UARTEx_DisableFifoMode>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003f54:	f7ff f8ec 	bl	8003130 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003f58:	bf00      	nop
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	24001280 	.word	0x24001280
 8003f60:	40004800 	.word	0x40004800

08003f64 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003f68:	4b22      	ldr	r3, [pc, #136]	@ (8003ff4 <MX_USART6_UART_Init+0x90>)
 8003f6a:	4a23      	ldr	r2, [pc, #140]	@ (8003ff8 <MX_USART6_UART_Init+0x94>)
 8003f6c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003f6e:	4b21      	ldr	r3, [pc, #132]	@ (8003ff4 <MX_USART6_UART_Init+0x90>)
 8003f70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003f74:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003f76:	4b1f      	ldr	r3, [pc, #124]	@ (8003ff4 <MX_USART6_UART_Init+0x90>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003f7c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ff4 <MX_USART6_UART_Init+0x90>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003f82:	4b1c      	ldr	r3, [pc, #112]	@ (8003ff4 <MX_USART6_UART_Init+0x90>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003f88:	4b1a      	ldr	r3, [pc, #104]	@ (8003ff4 <MX_USART6_UART_Init+0x90>)
 8003f8a:	220c      	movs	r2, #12
 8003f8c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f8e:	4b19      	ldr	r3, [pc, #100]	@ (8003ff4 <MX_USART6_UART_Init+0x90>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f94:	4b17      	ldr	r3, [pc, #92]	@ (8003ff4 <MX_USART6_UART_Init+0x90>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f9a:	4b16      	ldr	r3, [pc, #88]	@ (8003ff4 <MX_USART6_UART_Init+0x90>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003fa0:	4b14      	ldr	r3, [pc, #80]	@ (8003ff4 <MX_USART6_UART_Init+0x90>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003fa6:	4b13      	ldr	r3, [pc, #76]	@ (8003ff4 <MX_USART6_UART_Init+0x90>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003fac:	4811      	ldr	r0, [pc, #68]	@ (8003ff4 <MX_USART6_UART_Init+0x90>)
 8003fae:	f00b fb87 	bl	800f6c0 <HAL_UART_Init>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8003fb8:	f7ff f8ba 	bl	8003130 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	480d      	ldr	r0, [pc, #52]	@ (8003ff4 <MX_USART6_UART_Init+0x90>)
 8003fc0:	f00e fead 	bl	8012d1e <HAL_UARTEx_SetTxFifoThreshold>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8003fca:	f7ff f8b1 	bl	8003130 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003fce:	2100      	movs	r1, #0
 8003fd0:	4808      	ldr	r0, [pc, #32]	@ (8003ff4 <MX_USART6_UART_Init+0x90>)
 8003fd2:	f00e fee2 	bl	8012d9a <HAL_UARTEx_SetRxFifoThreshold>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8003fdc:	f7ff f8a8 	bl	8003130 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8003fe0:	4804      	ldr	r0, [pc, #16]	@ (8003ff4 <MX_USART6_UART_Init+0x90>)
 8003fe2:	f00e fe63 	bl	8012cac <HAL_UARTEx_DisableFifoMode>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8003fec:	f7ff f8a0 	bl	8003130 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003ff0:	bf00      	nop
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	24001314 	.word	0x24001314
 8003ff8:	40011400 	.word	0x40011400

08003ffc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b0c0      	sub	sp, #256	@ 0x100
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004004:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	605a      	str	r2, [r3, #4]
 800400e:	609a      	str	r2, [r3, #8]
 8004010:	60da      	str	r2, [r3, #12]
 8004012:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004014:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004018:	22c0      	movs	r2, #192	@ 0xc0
 800401a:	2100      	movs	r1, #0
 800401c:	4618      	mov	r0, r3
 800401e:	f013 fdf2 	bl	8017c06 <memset>
  if(uartHandle->Instance==UART4)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a82      	ldr	r2, [pc, #520]	@ (8004230 <HAL_UART_MspInit+0x234>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d17c      	bne.n	8004126 <HAL_UART_MspInit+0x12a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800402c:	f04f 0202 	mov.w	r2, #2
 8004030:	f04f 0300 	mov.w	r3, #0
 8004034:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004038:	2300      	movs	r3, #0
 800403a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800403e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004042:	4618      	mov	r0, r3
 8004044:	f007 faee 	bl	800b624 <HAL_RCCEx_PeriphCLKConfig>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800404e:	f7ff f86f 	bl	8003130 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004052:	4b78      	ldr	r3, [pc, #480]	@ (8004234 <HAL_UART_MspInit+0x238>)
 8004054:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004058:	4a76      	ldr	r2, [pc, #472]	@ (8004234 <HAL_UART_MspInit+0x238>)
 800405a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800405e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004062:	4b74      	ldr	r3, [pc, #464]	@ (8004234 <HAL_UART_MspInit+0x238>)
 8004064:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004068:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800406c:	627b      	str	r3, [r7, #36]	@ 0x24
 800406e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004070:	4b70      	ldr	r3, [pc, #448]	@ (8004234 <HAL_UART_MspInit+0x238>)
 8004072:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004076:	4a6f      	ldr	r2, [pc, #444]	@ (8004234 <HAL_UART_MspInit+0x238>)
 8004078:	f043 0301 	orr.w	r3, r3, #1
 800407c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004080:	4b6c      	ldr	r3, [pc, #432]	@ (8004234 <HAL_UART_MspInit+0x238>)
 8004082:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	623b      	str	r3, [r7, #32]
 800408c:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800408e:	2303      	movs	r3, #3
 8004090:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004094:	2302      	movs	r3, #2
 8004096:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409a:	2300      	movs	r3, #0
 800409c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040a0:	2300      	movs	r3, #0
 80040a2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80040a6:	2308      	movs	r3, #8
 80040a8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040ac:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80040b0:	4619      	mov	r1, r3
 80040b2:	4861      	ldr	r0, [pc, #388]	@ (8004238 <HAL_UART_MspInit+0x23c>)
 80040b4:	f005 ff7e 	bl	8009fb4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80040b8:	4b60      	ldr	r3, [pc, #384]	@ (800423c <HAL_UART_MspInit+0x240>)
 80040ba:	4a61      	ldr	r2, [pc, #388]	@ (8004240 <HAL_UART_MspInit+0x244>)
 80040bc:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80040be:	4b5f      	ldr	r3, [pc, #380]	@ (800423c <HAL_UART_MspInit+0x240>)
 80040c0:	223f      	movs	r2, #63	@ 0x3f
 80040c2:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040c4:	4b5d      	ldr	r3, [pc, #372]	@ (800423c <HAL_UART_MspInit+0x240>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040ca:	4b5c      	ldr	r3, [pc, #368]	@ (800423c <HAL_UART_MspInit+0x240>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80040d0:	4b5a      	ldr	r3, [pc, #360]	@ (800423c <HAL_UART_MspInit+0x240>)
 80040d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80040d6:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040d8:	4b58      	ldr	r3, [pc, #352]	@ (800423c <HAL_UART_MspInit+0x240>)
 80040da:	2200      	movs	r2, #0
 80040dc:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040de:	4b57      	ldr	r3, [pc, #348]	@ (800423c <HAL_UART_MspInit+0x240>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80040e4:	4b55      	ldr	r3, [pc, #340]	@ (800423c <HAL_UART_MspInit+0x240>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80040ea:	4b54      	ldr	r3, [pc, #336]	@ (800423c <HAL_UART_MspInit+0x240>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80040f0:	4b52      	ldr	r3, [pc, #328]	@ (800423c <HAL_UART_MspInit+0x240>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80040f6:	4851      	ldr	r0, [pc, #324]	@ (800423c <HAL_UART_MspInit+0x240>)
 80040f8:	f002 fd0e 	bl	8006b18 <HAL_DMA_Init>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8004102:	f7ff f815 	bl	8003130 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a4c      	ldr	r2, [pc, #304]	@ (800423c <HAL_UART_MspInit+0x240>)
 800410a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800410e:	4a4b      	ldr	r2, [pc, #300]	@ (800423c <HAL_UART_MspInit+0x240>)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8004114:	2200      	movs	r2, #0
 8004116:	2105      	movs	r1, #5
 8004118:	2034      	movs	r0, #52	@ 0x34
 800411a:	f002 fc5d 	bl	80069d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800411e:	2034      	movs	r0, #52	@ 0x34
 8004120:	f002 fc74 	bl	8006a0c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004124:	e16a      	b.n	80043fc <HAL_UART_MspInit+0x400>
  else if(uartHandle->Instance==USART1)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a46      	ldr	r2, [pc, #280]	@ (8004244 <HAL_UART_MspInit+0x248>)
 800412c:	4293      	cmp	r3, r2
 800412e:	f040 808f 	bne.w	8004250 <HAL_UART_MspInit+0x254>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004132:	f04f 0201 	mov.w	r2, #1
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800413e:	2300      	movs	r3, #0
 8004140:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004144:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004148:	4618      	mov	r0, r3
 800414a:	f007 fa6b 	bl	800b624 <HAL_RCCEx_PeriphCLKConfig>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 8004154:	f7fe ffec 	bl	8003130 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004158:	4b36      	ldr	r3, [pc, #216]	@ (8004234 <HAL_UART_MspInit+0x238>)
 800415a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800415e:	4a35      	ldr	r2, [pc, #212]	@ (8004234 <HAL_UART_MspInit+0x238>)
 8004160:	f043 0310 	orr.w	r3, r3, #16
 8004164:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8004168:	4b32      	ldr	r3, [pc, #200]	@ (8004234 <HAL_UART_MspInit+0x238>)
 800416a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800416e:	f003 0310 	and.w	r3, r3, #16
 8004172:	61fb      	str	r3, [r7, #28]
 8004174:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004176:	4b2f      	ldr	r3, [pc, #188]	@ (8004234 <HAL_UART_MspInit+0x238>)
 8004178:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800417c:	4a2d      	ldr	r2, [pc, #180]	@ (8004234 <HAL_UART_MspInit+0x238>)
 800417e:	f043 0301 	orr.w	r3, r3, #1
 8004182:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004186:	4b2b      	ldr	r3, [pc, #172]	@ (8004234 <HAL_UART_MspInit+0x238>)
 8004188:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	61bb      	str	r3, [r7, #24]
 8004192:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|SBUS_RX_Pin;
 8004194:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004198:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800419c:	2302      	movs	r3, #2
 800419e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a2:	2300      	movs	r3, #0
 80041a4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041a8:	2300      	movs	r3, #0
 80041aa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80041ae:	2307      	movs	r3, #7
 80041b0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041b4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80041b8:	4619      	mov	r1, r3
 80041ba:	481f      	ldr	r0, [pc, #124]	@ (8004238 <HAL_UART_MspInit+0x23c>)
 80041bc:	f005 fefa 	bl	8009fb4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 80041c0:	4b21      	ldr	r3, [pc, #132]	@ (8004248 <HAL_UART_MspInit+0x24c>)
 80041c2:	4a22      	ldr	r2, [pc, #136]	@ (800424c <HAL_UART_MspInit+0x250>)
 80041c4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80041c6:	4b20      	ldr	r3, [pc, #128]	@ (8004248 <HAL_UART_MspInit+0x24c>)
 80041c8:	2229      	movs	r2, #41	@ 0x29
 80041ca:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041cc:	4b1e      	ldr	r3, [pc, #120]	@ (8004248 <HAL_UART_MspInit+0x24c>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041d2:	4b1d      	ldr	r3, [pc, #116]	@ (8004248 <HAL_UART_MspInit+0x24c>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80041d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004248 <HAL_UART_MspInit+0x24c>)
 80041da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041de:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041e0:	4b19      	ldr	r3, [pc, #100]	@ (8004248 <HAL_UART_MspInit+0x24c>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041e6:	4b18      	ldr	r3, [pc, #96]	@ (8004248 <HAL_UART_MspInit+0x24c>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80041ec:	4b16      	ldr	r3, [pc, #88]	@ (8004248 <HAL_UART_MspInit+0x24c>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80041f2:	4b15      	ldr	r3, [pc, #84]	@ (8004248 <HAL_UART_MspInit+0x24c>)
 80041f4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80041f8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041fa:	4b13      	ldr	r3, [pc, #76]	@ (8004248 <HAL_UART_MspInit+0x24c>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004200:	4811      	ldr	r0, [pc, #68]	@ (8004248 <HAL_UART_MspInit+0x24c>)
 8004202:	f002 fc89 	bl	8006b18 <HAL_DMA_Init>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <HAL_UART_MspInit+0x214>
      Error_Handler();
 800420c:	f7fe ff90 	bl	8003130 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a0d      	ldr	r2, [pc, #52]	@ (8004248 <HAL_UART_MspInit+0x24c>)
 8004214:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004218:	4a0b      	ldr	r2, [pc, #44]	@ (8004248 <HAL_UART_MspInit+0x24c>)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800421e:	2200      	movs	r2, #0
 8004220:	2105      	movs	r1, #5
 8004222:	2025      	movs	r0, #37	@ 0x25
 8004224:	f002 fbd8 	bl	80069d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004228:	2025      	movs	r0, #37	@ 0x25
 800422a:	f002 fbef 	bl	8006a0c <HAL_NVIC_EnableIRQ>
}
 800422e:	e0e5      	b.n	80043fc <HAL_UART_MspInit+0x400>
 8004230:	40004c00 	.word	0x40004c00
 8004234:	58024400 	.word	0x58024400
 8004238:	58020000 	.word	0x58020000
 800423c:	240013a8 	.word	0x240013a8
 8004240:	40020040 	.word	0x40020040
 8004244:	40011000 	.word	0x40011000
 8004248:	24001420 	.word	0x24001420
 800424c:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART3)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a6c      	ldr	r2, [pc, #432]	@ (8004408 <HAL_UART_MspInit+0x40c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d17d      	bne.n	8004356 <HAL_UART_MspInit+0x35a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800425a:	f04f 0202 	mov.w	r2, #2
 800425e:	f04f 0300 	mov.w	r3, #0
 8004262:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004266:	2300      	movs	r3, #0
 8004268:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800426c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004270:	4618      	mov	r0, r3
 8004272:	f007 f9d7 	bl	800b624 <HAL_RCCEx_PeriphCLKConfig>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <HAL_UART_MspInit+0x284>
      Error_Handler();
 800427c:	f7fe ff58 	bl	8003130 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004280:	4b62      	ldr	r3, [pc, #392]	@ (800440c <HAL_UART_MspInit+0x410>)
 8004282:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004286:	4a61      	ldr	r2, [pc, #388]	@ (800440c <HAL_UART_MspInit+0x410>)
 8004288:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800428c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004290:	4b5e      	ldr	r3, [pc, #376]	@ (800440c <HAL_UART_MspInit+0x410>)
 8004292:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004296:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800429e:	4b5b      	ldr	r3, [pc, #364]	@ (800440c <HAL_UART_MspInit+0x410>)
 80042a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80042a4:	4a59      	ldr	r2, [pc, #356]	@ (800440c <HAL_UART_MspInit+0x410>)
 80042a6:	f043 0304 	orr.w	r3, r3, #4
 80042aa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80042ae:	4b57      	ldr	r3, [pc, #348]	@ (800440c <HAL_UART_MspInit+0x410>)
 80042b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80042b4:	f003 0304 	and.w	r3, r3, #4
 80042b8:	613b      	str	r3, [r7, #16]
 80042ba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80042bc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80042c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c4:	2302      	movs	r3, #2
 80042c6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ca:	2300      	movs	r3, #0
 80042cc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042d0:	2300      	movs	r3, #0
 80042d2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80042d6:	2307      	movs	r3, #7
 80042d8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042dc:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80042e0:	4619      	mov	r1, r3
 80042e2:	484b      	ldr	r0, [pc, #300]	@ (8004410 <HAL_UART_MspInit+0x414>)
 80042e4:	f005 fe66 	bl	8009fb4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80042e8:	4b4a      	ldr	r3, [pc, #296]	@ (8004414 <HAL_UART_MspInit+0x418>)
 80042ea:	4a4b      	ldr	r2, [pc, #300]	@ (8004418 <HAL_UART_MspInit+0x41c>)
 80042ec:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80042ee:	4b49      	ldr	r3, [pc, #292]	@ (8004414 <HAL_UART_MspInit+0x418>)
 80042f0:	222d      	movs	r2, #45	@ 0x2d
 80042f2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042f4:	4b47      	ldr	r3, [pc, #284]	@ (8004414 <HAL_UART_MspInit+0x418>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042fa:	4b46      	ldr	r3, [pc, #280]	@ (8004414 <HAL_UART_MspInit+0x418>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004300:	4b44      	ldr	r3, [pc, #272]	@ (8004414 <HAL_UART_MspInit+0x418>)
 8004302:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004306:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004308:	4b42      	ldr	r3, [pc, #264]	@ (8004414 <HAL_UART_MspInit+0x418>)
 800430a:	2200      	movs	r2, #0
 800430c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800430e:	4b41      	ldr	r3, [pc, #260]	@ (8004414 <HAL_UART_MspInit+0x418>)
 8004310:	2200      	movs	r2, #0
 8004312:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004314:	4b3f      	ldr	r3, [pc, #252]	@ (8004414 <HAL_UART_MspInit+0x418>)
 8004316:	2200      	movs	r2, #0
 8004318:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800431a:	4b3e      	ldr	r3, [pc, #248]	@ (8004414 <HAL_UART_MspInit+0x418>)
 800431c:	2200      	movs	r2, #0
 800431e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004320:	4b3c      	ldr	r3, [pc, #240]	@ (8004414 <HAL_UART_MspInit+0x418>)
 8004322:	2200      	movs	r2, #0
 8004324:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004326:	483b      	ldr	r0, [pc, #236]	@ (8004414 <HAL_UART_MspInit+0x418>)
 8004328:	f002 fbf6 	bl	8006b18 <HAL_DMA_Init>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <HAL_UART_MspInit+0x33a>
      Error_Handler();
 8004332:	f7fe fefd 	bl	8003130 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a36      	ldr	r2, [pc, #216]	@ (8004414 <HAL_UART_MspInit+0x418>)
 800433a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800433e:	4a35      	ldr	r2, [pc, #212]	@ (8004414 <HAL_UART_MspInit+0x418>)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004344:	2200      	movs	r2, #0
 8004346:	2105      	movs	r1, #5
 8004348:	2027      	movs	r0, #39	@ 0x27
 800434a:	f002 fb45 	bl	80069d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800434e:	2027      	movs	r0, #39	@ 0x27
 8004350:	f002 fb5c 	bl	8006a0c <HAL_NVIC_EnableIRQ>
}
 8004354:	e052      	b.n	80043fc <HAL_UART_MspInit+0x400>
  else if(uartHandle->Instance==USART6)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a30      	ldr	r2, [pc, #192]	@ (800441c <HAL_UART_MspInit+0x420>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d14d      	bne.n	80043fc <HAL_UART_MspInit+0x400>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004360:	f04f 0201 	mov.w	r2, #1
 8004364:	f04f 0300 	mov.w	r3, #0
 8004368:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800436c:	2300      	movs	r3, #0
 800436e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004372:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004376:	4618      	mov	r0, r3
 8004378:	f007 f954 	bl	800b624 <HAL_RCCEx_PeriphCLKConfig>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <HAL_UART_MspInit+0x38a>
      Error_Handler();
 8004382:	f7fe fed5 	bl	8003130 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004386:	4b21      	ldr	r3, [pc, #132]	@ (800440c <HAL_UART_MspInit+0x410>)
 8004388:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800438c:	4a1f      	ldr	r2, [pc, #124]	@ (800440c <HAL_UART_MspInit+0x410>)
 800438e:	f043 0320 	orr.w	r3, r3, #32
 8004392:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8004396:	4b1d      	ldr	r3, [pc, #116]	@ (800440c <HAL_UART_MspInit+0x410>)
 8004398:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800439c:	f003 0320 	and.w	r3, r3, #32
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043a4:	4b19      	ldr	r3, [pc, #100]	@ (800440c <HAL_UART_MspInit+0x410>)
 80043a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80043aa:	4a18      	ldr	r2, [pc, #96]	@ (800440c <HAL_UART_MspInit+0x410>)
 80043ac:	f043 0304 	orr.w	r3, r3, #4
 80043b0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80043b4:	4b15      	ldr	r3, [pc, #84]	@ (800440c <HAL_UART_MspInit+0x410>)
 80043b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80043ba:	f003 0304 	and.w	r3, r3, #4
 80043be:	60bb      	str	r3, [r7, #8]
 80043c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80043c2:	23c0      	movs	r3, #192	@ 0xc0
 80043c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043c8:	2302      	movs	r3, #2
 80043ca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ce:	2300      	movs	r3, #0
 80043d0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043d4:	2300      	movs	r3, #0
 80043d6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80043da:	2307      	movs	r3, #7
 80043dc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043e0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80043e4:	4619      	mov	r1, r3
 80043e6:	480a      	ldr	r0, [pc, #40]	@ (8004410 <HAL_UART_MspInit+0x414>)
 80043e8:	f005 fde4 	bl	8009fb4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80043ec:	2200      	movs	r2, #0
 80043ee:	2105      	movs	r1, #5
 80043f0:	2047      	movs	r0, #71	@ 0x47
 80043f2:	f002 faf1 	bl	80069d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80043f6:	2047      	movs	r0, #71	@ 0x47
 80043f8:	f002 fb08 	bl	8006a0c <HAL_NVIC_EnableIRQ>
}
 80043fc:	bf00      	nop
 80043fe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40004800 	.word	0x40004800
 800440c:	58024400 	.word	0x58024400
 8004410:	58020800 	.word	0x58020800
 8004414:	24001498 	.word	0x24001498
 8004418:	40020028 	.word	0x40020028
 800441c:	40011400 	.word	0x40011400

08004420 <Reset_UART>:
  /* USER CODE END USART6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void Reset_UART(UART_HandleTypeDef *huart) {
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]

      // Clear any pending error flags
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF | UART_CLEAR_OREF);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	220f      	movs	r2, #15
 800442e:	621a      	str	r2, [r3, #32]

    // Abort ongoing UART transfer
    if (HAL_UART_Abort_IT(huart) != HAL_OK) {
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f00b fbe5 	bl	800fc00 <HAL_UART_Abort_IT>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <Reset_UART+0x20>
        // Abort Error
        Error_Handler();
 800443c:	f7fe fe78 	bl	8003130 <Error_Handler>
    }
     if(huart == &huart3){
    	 MX_USART3_UART_Init();
     }
*/
}
 8004440:	bf00      	nop
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	4603      	mov	r3, r0
 8004450:	460a      	mov	r2, r1
 8004452:	71fb      	strb	r3, [r7, #7]
 8004454:	4613      	mov	r3, r2
 8004456:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 8004458:	2200      	movs	r2, #0
 800445a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800445e:	480f      	ldr	r0, [pc, #60]	@ (800449c <BMP280_write+0x54>)
 8004460:	f005 ff58 	bl	800a314 <HAL_GPIO_WritePin>
	Address &= 0x7F;
 8004464:	79fb      	ldrb	r3, [r7, #7]
 8004466:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800446a:	b2db      	uxtb	r3, r3
 800446c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 800446e:	1df9      	adds	r1, r7, #7
 8004470:	2364      	movs	r3, #100	@ 0x64
 8004472:	2201      	movs	r2, #1
 8004474:	480a      	ldr	r0, [pc, #40]	@ (80044a0 <BMP280_write+0x58>)
 8004476:	f008 ffd9 	bl	800d42c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 800447a:	1db9      	adds	r1, r7, #6
 800447c:	2364      	movs	r3, #100	@ 0x64
 800447e:	2201      	movs	r2, #1
 8004480:	4807      	ldr	r0, [pc, #28]	@ (80044a0 <BMP280_write+0x58>)
 8004482:	f008 ffd3 	bl	800d42c <HAL_SPI_Transmit>

	BMP280_unselect();
 8004486:	2201      	movs	r2, #1
 8004488:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800448c:	4803      	ldr	r0, [pc, #12]	@ (800449c <BMP280_write+0x54>)
 800448e:	f005 ff41 	bl	800a314 <HAL_GPIO_WritePin>
}
 8004492:	bf00      	nop
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	58020400 	.word	0x58020400
 80044a0:	24000f50 	.word	0x24000f50

080044a4 <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	4603      	mov	r3, r0
 80044ac:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 80044ae:	79fb      	ldrb	r3, [r7, #7]
 80044b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 80044b8:	2200      	movs	r2, #0
 80044ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80044be:	480e      	ldr	r0, [pc, #56]	@ (80044f8 <BMP280_read+0x54>)
 80044c0:	f005 ff28 	bl	800a314 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 80044c4:	f107 010f 	add.w	r1, r7, #15
 80044c8:	2364      	movs	r3, #100	@ 0x64
 80044ca:	2201      	movs	r2, #1
 80044cc:	480b      	ldr	r0, [pc, #44]	@ (80044fc <BMP280_read+0x58>)
 80044ce:	f008 ffad 	bl	800d42c <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 80044d2:	f107 010f 	add.w	r1, r7, #15
 80044d6:	2364      	movs	r3, #100	@ 0x64
 80044d8:	2201      	movs	r2, #1
 80044da:	4808      	ldr	r0, [pc, #32]	@ (80044fc <BMP280_read+0x58>)
 80044dc:	f009 f994 	bl	800d808 <HAL_SPI_Receive>
	BMP280_unselect();
 80044e0:	2201      	movs	r2, #1
 80044e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80044e6:	4804      	ldr	r0, [pc, #16]	@ (80044f8 <BMP280_read+0x54>)
 80044e8:	f005 ff14 	bl	800a314 <HAL_GPIO_WritePin>

	return Buffer;
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	58020400 	.word	0x58020400
 80044fc:	24000f50 	.word	0x24000f50

08004500 <BMP280_config>:

void BMP280_config(void){
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 8004504:	2157      	movs	r1, #87	@ 0x57
 8004506:	20f4      	movs	r0, #244	@ 0xf4
 8004508:	f7ff ff9e 	bl	8004448 <BMP280_write>
	BMP280_write(config, 0x10);
 800450c:	2110      	movs	r1, #16
 800450e:	20f5      	movs	r0, #245	@ 0xf5
 8004510:	f7ff ff9a 	bl	8004448 <BMP280_write>
}
 8004514:	bf00      	nop
 8004516:	bd80      	pop	{r7, pc}

08004518 <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 8004518:	b580      	push	{r7, lr}
 800451a:	b088      	sub	sp, #32
 800451c:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 800451e:	2388      	movs	r3, #136	@ 0x88
 8004520:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 8004522:	2300      	movs	r3, #0
 8004524:	607b      	str	r3, [r7, #4]
 8004526:	f107 0308 	add.w	r3, r7, #8
 800452a:	2200      	movs	r2, #0
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	605a      	str	r2, [r3, #4]
 8004530:	609a      	str	r2, [r3, #8]
 8004532:	60da      	str	r2, [r3, #12]
 8004534:	611a      	str	r2, [r3, #16]
	BMP280_select();
 8004536:	2200      	movs	r2, #0
 8004538:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800453c:	4843      	ldr	r0, [pc, #268]	@ (800464c <BMP280_calibrationData+0x134>)
 800453e:	f005 fee9 	bl	800a314 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8004542:	f107 011f 	add.w	r1, r7, #31
 8004546:	2364      	movs	r3, #100	@ 0x64
 8004548:	2201      	movs	r2, #1
 800454a:	4841      	ldr	r0, [pc, #260]	@ (8004650 <BMP280_calibrationData+0x138>)
 800454c:	f008 ff6e 	bl	800d42c <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 8004550:	1d39      	adds	r1, r7, #4
 8004552:	2364      	movs	r3, #100	@ 0x64
 8004554:	2218      	movs	r2, #24
 8004556:	483e      	ldr	r0, [pc, #248]	@ (8004650 <BMP280_calibrationData+0x138>)
 8004558:	f009 f956 	bl	800d808 <HAL_SPI_Receive>
	BMP280_unselect();
 800455c:	2201      	movs	r2, #1
 800455e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004562:	483a      	ldr	r0, [pc, #232]	@ (800464c <BMP280_calibrationData+0x134>)
 8004564:	f005 fed6 	bl	800a314 <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 8004568:	797b      	ldrb	r3, [r7, #5]
 800456a:	021b      	lsls	r3, r3, #8
 800456c:	b21a      	sxth	r2, r3
 800456e:	793b      	ldrb	r3, [r7, #4]
 8004570:	b21b      	sxth	r3, r3
 8004572:	4313      	orrs	r3, r2
 8004574:	b21b      	sxth	r3, r3
 8004576:	b29a      	uxth	r2, r3
 8004578:	4b36      	ldr	r3, [pc, #216]	@ (8004654 <BMP280_calibrationData+0x13c>)
 800457a:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 800457c:	79fb      	ldrb	r3, [r7, #7]
 800457e:	021b      	lsls	r3, r3, #8
 8004580:	b21a      	sxth	r2, r3
 8004582:	79bb      	ldrb	r3, [r7, #6]
 8004584:	b21b      	sxth	r3, r3
 8004586:	4313      	orrs	r3, r2
 8004588:	b21a      	sxth	r2, r3
 800458a:	4b33      	ldr	r3, [pc, #204]	@ (8004658 <BMP280_calibrationData+0x140>)
 800458c:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 800458e:	7a7b      	ldrb	r3, [r7, #9]
 8004590:	021b      	lsls	r3, r3, #8
 8004592:	b21a      	sxth	r2, r3
 8004594:	7a3b      	ldrb	r3, [r7, #8]
 8004596:	b21b      	sxth	r3, r3
 8004598:	4313      	orrs	r3, r2
 800459a:	b21a      	sxth	r2, r3
 800459c:	4b2f      	ldr	r3, [pc, #188]	@ (800465c <BMP280_calibrationData+0x144>)
 800459e:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 80045a0:	7afb      	ldrb	r3, [r7, #11]
 80045a2:	021b      	lsls	r3, r3, #8
 80045a4:	b21a      	sxth	r2, r3
 80045a6:	7abb      	ldrb	r3, [r7, #10]
 80045a8:	b21b      	sxth	r3, r3
 80045aa:	4313      	orrs	r3, r2
 80045ac:	b21b      	sxth	r3, r3
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	4b2b      	ldr	r3, [pc, #172]	@ (8004660 <BMP280_calibrationData+0x148>)
 80045b2:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 80045b4:	7b7b      	ldrb	r3, [r7, #13]
 80045b6:	021b      	lsls	r3, r3, #8
 80045b8:	b21a      	sxth	r2, r3
 80045ba:	7b3b      	ldrb	r3, [r7, #12]
 80045bc:	b21b      	sxth	r3, r3
 80045be:	4313      	orrs	r3, r2
 80045c0:	b21a      	sxth	r2, r3
 80045c2:	4b28      	ldr	r3, [pc, #160]	@ (8004664 <BMP280_calibrationData+0x14c>)
 80045c4:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 80045c6:	7bfb      	ldrb	r3, [r7, #15]
 80045c8:	021b      	lsls	r3, r3, #8
 80045ca:	b21a      	sxth	r2, r3
 80045cc:	7bbb      	ldrb	r3, [r7, #14]
 80045ce:	b21b      	sxth	r3, r3
 80045d0:	4313      	orrs	r3, r2
 80045d2:	b21a      	sxth	r2, r3
 80045d4:	4b24      	ldr	r3, [pc, #144]	@ (8004668 <BMP280_calibrationData+0x150>)
 80045d6:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 80045d8:	7c7b      	ldrb	r3, [r7, #17]
 80045da:	021b      	lsls	r3, r3, #8
 80045dc:	b21a      	sxth	r2, r3
 80045de:	7c3b      	ldrb	r3, [r7, #16]
 80045e0:	b21b      	sxth	r3, r3
 80045e2:	4313      	orrs	r3, r2
 80045e4:	b21a      	sxth	r2, r3
 80045e6:	4b21      	ldr	r3, [pc, #132]	@ (800466c <BMP280_calibrationData+0x154>)
 80045e8:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 80045ea:	7cfb      	ldrb	r3, [r7, #19]
 80045ec:	021b      	lsls	r3, r3, #8
 80045ee:	b21a      	sxth	r2, r3
 80045f0:	7cbb      	ldrb	r3, [r7, #18]
 80045f2:	b21b      	sxth	r3, r3
 80045f4:	4313      	orrs	r3, r2
 80045f6:	b21a      	sxth	r2, r3
 80045f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004670 <BMP280_calibrationData+0x158>)
 80045fa:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 80045fc:	7d7b      	ldrb	r3, [r7, #21]
 80045fe:	021b      	lsls	r3, r3, #8
 8004600:	b21a      	sxth	r2, r3
 8004602:	7d3b      	ldrb	r3, [r7, #20]
 8004604:	b21b      	sxth	r3, r3
 8004606:	4313      	orrs	r3, r2
 8004608:	b21a      	sxth	r2, r3
 800460a:	4b1a      	ldr	r3, [pc, #104]	@ (8004674 <BMP280_calibrationData+0x15c>)
 800460c:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 800460e:	7dfb      	ldrb	r3, [r7, #23]
 8004610:	021b      	lsls	r3, r3, #8
 8004612:	b21a      	sxth	r2, r3
 8004614:	7dbb      	ldrb	r3, [r7, #22]
 8004616:	b21b      	sxth	r3, r3
 8004618:	4313      	orrs	r3, r2
 800461a:	b21a      	sxth	r2, r3
 800461c:	4b16      	ldr	r3, [pc, #88]	@ (8004678 <BMP280_calibrationData+0x160>)
 800461e:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 8004620:	7e7b      	ldrb	r3, [r7, #25]
 8004622:	021b      	lsls	r3, r3, #8
 8004624:	b21a      	sxth	r2, r3
 8004626:	7e3b      	ldrb	r3, [r7, #24]
 8004628:	b21b      	sxth	r3, r3
 800462a:	4313      	orrs	r3, r2
 800462c:	b21a      	sxth	r2, r3
 800462e:	4b13      	ldr	r3, [pc, #76]	@ (800467c <BMP280_calibrationData+0x164>)
 8004630:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 8004632:	7efb      	ldrb	r3, [r7, #27]
 8004634:	021b      	lsls	r3, r3, #8
 8004636:	b21a      	sxth	r2, r3
 8004638:	7ebb      	ldrb	r3, [r7, #26]
 800463a:	b21b      	sxth	r3, r3
 800463c:	4313      	orrs	r3, r2
 800463e:	b21a      	sxth	r2, r3
 8004640:	4b0f      	ldr	r3, [pc, #60]	@ (8004680 <BMP280_calibrationData+0x168>)
 8004642:	801a      	strh	r2, [r3, #0]
}
 8004644:	bf00      	nop
 8004646:	3720      	adds	r7, #32
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	58020400 	.word	0x58020400
 8004650:	24000f50 	.word	0x24000f50
 8004654:	24001524 	.word	0x24001524
 8004658:	24001528 	.word	0x24001528
 800465c:	2400152a 	.word	0x2400152a
 8004660:	24001526 	.word	0x24001526
 8004664:	2400152c 	.word	0x2400152c
 8004668:	2400152e 	.word	0x2400152e
 800466c:	24001530 	.word	0x24001530
 8004670:	24001532 	.word	0x24001532
 8004674:	24001534 	.word	0x24001534
 8004678:	24001536 	.word	0x24001536
 800467c:	24001538 	.word	0x24001538
 8004680:	2400153a 	.word	0x2400153a

08004684 <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 800468a:	23f7      	movs	r3, #247	@ 0xf7
 800468c:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 800468e:	2300      	movs	r3, #0
 8004690:	603b      	str	r3, [r7, #0]
 8004692:	2300      	movs	r3, #0
 8004694:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 8004696:	2200      	movs	r2, #0
 8004698:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800469c:	4817      	ldr	r0, [pc, #92]	@ (80046fc <BMP280_readRawValues+0x78>)
 800469e:	f005 fe39 	bl	800a314 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80046a2:	1df9      	adds	r1, r7, #7
 80046a4:	2364      	movs	r3, #100	@ 0x64
 80046a6:	2201      	movs	r2, #1
 80046a8:	4815      	ldr	r0, [pc, #84]	@ (8004700 <BMP280_readRawValues+0x7c>)
 80046aa:	f008 febf 	bl	800d42c <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 80046ae:	4639      	mov	r1, r7
 80046b0:	2364      	movs	r3, #100	@ 0x64
 80046b2:	2206      	movs	r2, #6
 80046b4:	4812      	ldr	r0, [pc, #72]	@ (8004700 <BMP280_readRawValues+0x7c>)
 80046b6:	f009 f8a7 	bl	800d808 <HAL_SPI_Receive>
	BMP280_unselect();
 80046ba:	2201      	movs	r2, #1
 80046bc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80046c0:	480e      	ldr	r0, [pc, #56]	@ (80046fc <BMP280_readRawValues+0x78>)
 80046c2:	f005 fe27 	bl	800a314 <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 80046c6:	783b      	ldrb	r3, [r7, #0]
 80046c8:	031a      	lsls	r2, r3, #12
 80046ca:	787b      	ldrb	r3, [r7, #1]
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	4313      	orrs	r3, r2
 80046d0:	78ba      	ldrb	r2, [r7, #2]
 80046d2:	0912      	lsrs	r2, r2, #4
 80046d4:	b2d2      	uxtb	r2, r2
 80046d6:	4313      	orrs	r3, r2
 80046d8:	4a0a      	ldr	r2, [pc, #40]	@ (8004704 <BMP280_readRawValues+0x80>)
 80046da:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 80046dc:	78fb      	ldrb	r3, [r7, #3]
 80046de:	031a      	lsls	r2, r3, #12
 80046e0:	793b      	ldrb	r3, [r7, #4]
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	4313      	orrs	r3, r2
 80046e6:	797a      	ldrb	r2, [r7, #5]
 80046e8:	0912      	lsrs	r2, r2, #4
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	4313      	orrs	r3, r2
 80046ee:	4a06      	ldr	r2, [pc, #24]	@ (8004708 <BMP280_readRawValues+0x84>)
 80046f0:	6013      	str	r3, [r2, #0]
}
 80046f2:	bf00      	nop
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	58020400 	.word	0x58020400
 8004700:	24000f50 	.word	0x24000f50
 8004704:	24001540 	.word	0x24001540
 8004708:	2400153c 	.word	0x2400153c

0800470c <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 800470c:	b480      	push	{r7}
 800470e:	b087      	sub	sp, #28
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8004714:	4b1a      	ldr	r3, [pc, #104]	@ (8004780 <BMP280_measureT+0x74>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	10da      	asrs	r2, r3, #3
 800471a:	4b1a      	ldr	r3, [pc, #104]	@ (8004784 <BMP280_measureT+0x78>)
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	4a19      	ldr	r2, [pc, #100]	@ (8004788 <BMP280_measureT+0x7c>)
 8004724:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004728:	fb02 f303 	mul.w	r3, r2, r3
 800472c:	12db      	asrs	r3, r3, #11
 800472e:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	111b      	asrs	r3, r3, #4
 8004734:	4a13      	ldr	r2, [pc, #76]	@ (8004784 <BMP280_measureT+0x78>)
 8004736:	8812      	ldrh	r2, [r2, #0]
 8004738:	1a9b      	subs	r3, r3, r2
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	1112      	asrs	r2, r2, #4
 800473e:	4911      	ldr	r1, [pc, #68]	@ (8004784 <BMP280_measureT+0x78>)
 8004740:	8809      	ldrh	r1, [r1, #0]
 8004742:	1a52      	subs	r2, r2, r1
 8004744:	fb02 f303 	mul.w	r3, r2, r3
 8004748:	131b      	asrs	r3, r3, #12
 800474a:	4a10      	ldr	r2, [pc, #64]	@ (800478c <BMP280_measureT+0x80>)
 800474c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004750:	fb02 f303 	mul.w	r3, r2, r3
 8004754:	139b      	asrs	r3, r3, #14
 8004756:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	4413      	add	r3, r2
 800475e:	4a0c      	ldr	r2, [pc, #48]	@ (8004790 <BMP280_measureT+0x84>)
 8004760:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8004762:	4b0b      	ldr	r3, [pc, #44]	@ (8004790 <BMP280_measureT+0x84>)
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	4613      	mov	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	3380      	adds	r3, #128	@ 0x80
 800476e:	121b      	asrs	r3, r3, #8
 8004770:	60fb      	str	r3, [r7, #12]
	return T;
 8004772:	68fb      	ldr	r3, [r7, #12]
}
 8004774:	4618      	mov	r0, r3
 8004776:	371c      	adds	r7, #28
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	2400153c 	.word	0x2400153c
 8004784:	24001524 	.word	0x24001524
 8004788:	24001528 	.word	0x24001528
 800478c:	2400152a 	.word	0x2400152a
 8004790:	24001544 	.word	0x24001544

08004794 <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 8004794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004798:	b0ca      	sub	sp, #296	@ 0x128
 800479a:	af00      	add	r7, sp, #0
 800479c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80047a0:	4baf      	ldr	r3, [pc, #700]	@ (8004a60 <BMP280_measureP+0x2cc>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	17da      	asrs	r2, r3, #31
 80047a6:	461c      	mov	r4, r3
 80047a8:	4615      	mov	r5, r2
 80047aa:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 80047ae:	f145 3bff 	adc.w	fp, r5, #4294967295
 80047b2:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80047b6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80047ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80047be:	fb03 f102 	mul.w	r1, r3, r2
 80047c2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80047c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80047ca:	fb02 f303 	mul.w	r3, r2, r3
 80047ce:	18ca      	adds	r2, r1, r3
 80047d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80047d4:	fba3 8903 	umull	r8, r9, r3, r3
 80047d8:	eb02 0309 	add.w	r3, r2, r9
 80047dc:	4699      	mov	r9, r3
 80047de:	4ba1      	ldr	r3, [pc, #644]	@ (8004a64 <BMP280_measureP+0x2d0>)
 80047e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047e4:	b21b      	sxth	r3, r3
 80047e6:	17da      	asrs	r2, r3, #31
 80047e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80047f0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80047f4:	4603      	mov	r3, r0
 80047f6:	fb03 f209 	mul.w	r2, r3, r9
 80047fa:	460b      	mov	r3, r1
 80047fc:	fb08 f303 	mul.w	r3, r8, r3
 8004800:	4413      	add	r3, r2
 8004802:	4602      	mov	r2, r0
 8004804:	fba8 1202 	umull	r1, r2, r8, r2
 8004808:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800480c:	460a      	mov	r2, r1
 800480e:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8004812:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004816:	4413      	add	r3, r2
 8004818:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800481c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8004820:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8004824:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8004828:	4b8f      	ldr	r3, [pc, #572]	@ (8004a68 <BMP280_measureP+0x2d4>)
 800482a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800482e:	b21b      	sxth	r3, r3
 8004830:	17da      	asrs	r2, r3, #31
 8004832:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004836:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800483a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800483e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8004842:	462a      	mov	r2, r5
 8004844:	fb02 f203 	mul.w	r2, r2, r3
 8004848:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800484c:	4621      	mov	r1, r4
 800484e:	fb01 f303 	mul.w	r3, r1, r3
 8004852:	441a      	add	r2, r3
 8004854:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004858:	4621      	mov	r1, r4
 800485a:	fba3 1301 	umull	r1, r3, r3, r1
 800485e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004862:	460b      	mov	r3, r1
 8004864:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800486c:	18d3      	adds	r3, r2, r3
 800486e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004872:	f04f 0000 	mov.w	r0, #0
 8004876:	f04f 0100 	mov.w	r1, #0
 800487a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800487e:	462b      	mov	r3, r5
 8004880:	0459      	lsls	r1, r3, #17
 8004882:	4623      	mov	r3, r4
 8004884:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8004888:	4623      	mov	r3, r4
 800488a:	0458      	lsls	r0, r3, #17
 800488c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8004890:	1814      	adds	r4, r2, r0
 8004892:	643c      	str	r4, [r7, #64]	@ 0x40
 8004894:	414b      	adcs	r3, r1
 8004896:	647b      	str	r3, [r7, #68]	@ 0x44
 8004898:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800489c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 80048a0:	4b72      	ldr	r3, [pc, #456]	@ (8004a6c <BMP280_measureP+0x2d8>)
 80048a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048a6:	b21b      	sxth	r3, r3
 80048a8:	17da      	asrs	r2, r3, #31
 80048aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80048ae:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80048b2:	f04f 0000 	mov.w	r0, #0
 80048b6:	f04f 0100 	mov.w	r1, #0
 80048ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80048be:	00d9      	lsls	r1, r3, #3
 80048c0:	2000      	movs	r0, #0
 80048c2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80048c6:	1814      	adds	r4, r2, r0
 80048c8:	63bc      	str	r4, [r7, #56]	@ 0x38
 80048ca:	414b      	adcs	r3, r1
 80048cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048ce:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80048d2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80048d6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80048da:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80048de:	fb03 f102 	mul.w	r1, r3, r2
 80048e2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80048e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80048ea:	fb02 f303 	mul.w	r3, r2, r3
 80048ee:	18ca      	adds	r2, r1, r3
 80048f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80048f4:	fba3 1303 	umull	r1, r3, r3, r3
 80048f8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80048fc:	460b      	mov	r3, r1
 80048fe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004906:	18d3      	adds	r3, r2, r3
 8004908:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800490c:	4b58      	ldr	r3, [pc, #352]	@ (8004a70 <BMP280_measureP+0x2dc>)
 800490e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004912:	b21b      	sxth	r3, r3
 8004914:	17da      	asrs	r2, r3, #31
 8004916:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800491a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800491e:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8004922:	462b      	mov	r3, r5
 8004924:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004928:	4642      	mov	r2, r8
 800492a:	fb02 f203 	mul.w	r2, r2, r3
 800492e:	464b      	mov	r3, r9
 8004930:	4621      	mov	r1, r4
 8004932:	fb01 f303 	mul.w	r3, r1, r3
 8004936:	4413      	add	r3, r2
 8004938:	4622      	mov	r2, r4
 800493a:	4641      	mov	r1, r8
 800493c:	fba2 1201 	umull	r1, r2, r2, r1
 8004940:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8004944:	460a      	mov	r2, r1
 8004946:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800494a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800494e:	4413      	add	r3, r2
 8004950:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004954:	f04f 0000 	mov.w	r0, #0
 8004958:	f04f 0100 	mov.w	r1, #0
 800495c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8004960:	4623      	mov	r3, r4
 8004962:	0a18      	lsrs	r0, r3, #8
 8004964:	462b      	mov	r3, r5
 8004966:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800496a:	462b      	mov	r3, r5
 800496c:	1219      	asrs	r1, r3, #8
 800496e:	4b41      	ldr	r3, [pc, #260]	@ (8004a74 <BMP280_measureP+0x2e0>)
 8004970:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004974:	b21b      	sxth	r3, r3
 8004976:	17da      	asrs	r2, r3, #31
 8004978:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800497c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004980:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004984:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8004988:	464a      	mov	r2, r9
 800498a:	fb02 f203 	mul.w	r2, r2, r3
 800498e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004992:	4644      	mov	r4, r8
 8004994:	fb04 f303 	mul.w	r3, r4, r3
 8004998:	441a      	add	r2, r3
 800499a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800499e:	4644      	mov	r4, r8
 80049a0:	fba3 4304 	umull	r4, r3, r3, r4
 80049a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80049a8:	4623      	mov	r3, r4
 80049aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80049ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80049b2:	18d3      	adds	r3, r2, r3
 80049b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80049b8:	f04f 0200 	mov.w	r2, #0
 80049bc:	f04f 0300 	mov.w	r3, #0
 80049c0:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80049c4:	464c      	mov	r4, r9
 80049c6:	0323      	lsls	r3, r4, #12
 80049c8:	4644      	mov	r4, r8
 80049ca:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80049ce:	4644      	mov	r4, r8
 80049d0:	0322      	lsls	r2, r4, #12
 80049d2:	1884      	adds	r4, r0, r2
 80049d4:	633c      	str	r4, [r7, #48]	@ 0x30
 80049d6:	eb41 0303 	adc.w	r3, r1, r3
 80049da:	637b      	str	r3, [r7, #52]	@ 0x34
 80049dc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80049e0:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80049e4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80049e8:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80049ec:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80049f0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80049f4:	4b20      	ldr	r3, [pc, #128]	@ (8004a78 <BMP280_measureP+0x2e4>)
 80049f6:	881b      	ldrh	r3, [r3, #0]
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	2200      	movs	r2, #0
 80049fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a00:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004a04:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004a08:	462b      	mov	r3, r5
 8004a0a:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004a0e:	4642      	mov	r2, r8
 8004a10:	fb02 f203 	mul.w	r2, r2, r3
 8004a14:	464b      	mov	r3, r9
 8004a16:	4621      	mov	r1, r4
 8004a18:	fb01 f303 	mul.w	r3, r1, r3
 8004a1c:	4413      	add	r3, r2
 8004a1e:	4622      	mov	r2, r4
 8004a20:	4641      	mov	r1, r8
 8004a22:	fba2 1201 	umull	r1, r2, r2, r1
 8004a26:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8004a2a:	460a      	mov	r2, r1
 8004a2c:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8004a30:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004a34:	4413      	add	r3, r2
 8004a36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004a3a:	f04f 0200 	mov.w	r2, #0
 8004a3e:	f04f 0300 	mov.w	r3, #0
 8004a42:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8004a46:	4629      	mov	r1, r5
 8004a48:	104a      	asrs	r2, r1, #1
 8004a4a:	4629      	mov	r1, r5
 8004a4c:	17cb      	asrs	r3, r1, #31
 8004a4e:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8004a52:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8004a56:	4313      	orrs	r3, r2
 8004a58:	d110      	bne.n	8004a7c <BMP280_measureP+0x2e8>
	{
	return 0;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	e154      	b.n	8004d08 <BMP280_measureP+0x574>
 8004a5e:	bf00      	nop
 8004a60:	24001544 	.word	0x24001544
 8004a64:	24001534 	.word	0x24001534
 8004a68:	24001532 	.word	0x24001532
 8004a6c:	24001530 	.word	0x24001530
 8004a70:	2400152e 	.word	0x2400152e
 8004a74:	2400152c 	.word	0x2400152c
 8004a78:	24001526 	.word	0x24001526
	}
	p = 1048576-adc_P;
 8004a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a80:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8004a84:	17da      	asrs	r2, r3, #31
 8004a86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a8a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8004a8e:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8004a92:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004a96:	105b      	asrs	r3, r3, #1
 8004a98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004a9c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004aa0:	07db      	lsls	r3, r3, #31
 8004aa2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004aa6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8004aaa:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8004aae:	4621      	mov	r1, r4
 8004ab0:	1a89      	subs	r1, r1, r2
 8004ab2:	67b9      	str	r1, [r7, #120]	@ 0x78
 8004ab4:	4629      	mov	r1, r5
 8004ab6:	eb61 0303 	sbc.w	r3, r1, r3
 8004aba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004abc:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004ac0:	4622      	mov	r2, r4
 8004ac2:	462b      	mov	r3, r5
 8004ac4:	1891      	adds	r1, r2, r2
 8004ac6:	6239      	str	r1, [r7, #32]
 8004ac8:	415b      	adcs	r3, r3
 8004aca:	627b      	str	r3, [r7, #36]	@ 0x24
 8004acc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ad0:	4621      	mov	r1, r4
 8004ad2:	1851      	adds	r1, r2, r1
 8004ad4:	61b9      	str	r1, [r7, #24]
 8004ad6:	4629      	mov	r1, r5
 8004ad8:	414b      	adcs	r3, r1
 8004ada:	61fb      	str	r3, [r7, #28]
 8004adc:	f04f 0200 	mov.w	r2, #0
 8004ae0:	f04f 0300 	mov.w	r3, #0
 8004ae4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8004ae8:	4649      	mov	r1, r9
 8004aea:	018b      	lsls	r3, r1, #6
 8004aec:	4641      	mov	r1, r8
 8004aee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004af2:	4641      	mov	r1, r8
 8004af4:	018a      	lsls	r2, r1, #6
 8004af6:	4641      	mov	r1, r8
 8004af8:	1889      	adds	r1, r1, r2
 8004afa:	6139      	str	r1, [r7, #16]
 8004afc:	4649      	mov	r1, r9
 8004afe:	eb43 0101 	adc.w	r1, r3, r1
 8004b02:	6179      	str	r1, [r7, #20]
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8004b10:	4649      	mov	r1, r9
 8004b12:	008b      	lsls	r3, r1, #2
 8004b14:	4641      	mov	r1, r8
 8004b16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b1a:	4641      	mov	r1, r8
 8004b1c:	008a      	lsls	r2, r1, #2
 8004b1e:	4610      	mov	r0, r2
 8004b20:	4619      	mov	r1, r3
 8004b22:	4603      	mov	r3, r0
 8004b24:	4622      	mov	r2, r4
 8004b26:	189b      	adds	r3, r3, r2
 8004b28:	60bb      	str	r3, [r7, #8]
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	462a      	mov	r2, r5
 8004b2e:	eb42 0303 	adc.w	r3, r2, r3
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	f04f 0200 	mov.w	r2, #0
 8004b38:	f04f 0300 	mov.w	r3, #0
 8004b3c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8004b40:	4649      	mov	r1, r9
 8004b42:	008b      	lsls	r3, r1, #2
 8004b44:	4641      	mov	r1, r8
 8004b46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b4a:	4641      	mov	r1, r8
 8004b4c:	008a      	lsls	r2, r1, #2
 8004b4e:	4610      	mov	r0, r2
 8004b50:	4619      	mov	r1, r3
 8004b52:	4603      	mov	r3, r0
 8004b54:	4622      	mov	r2, r4
 8004b56:	189b      	adds	r3, r3, r2
 8004b58:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b5a:	462b      	mov	r3, r5
 8004b5c:	460a      	mov	r2, r1
 8004b5e:	eb42 0303 	adc.w	r3, r2, r3
 8004b62:	677b      	str	r3, [r7, #116]	@ 0x74
 8004b64:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8004b68:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004b6c:	f7fb fddc 	bl	8000728 <__aeabi_ldivmod>
 8004b70:	4602      	mov	r2, r0
 8004b72:	460b      	mov	r3, r1
 8004b74:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8004b78:	4b66      	ldr	r3, [pc, #408]	@ (8004d14 <BMP280_measureP+0x580>)
 8004b7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b7e:	b21b      	sxth	r3, r3
 8004b80:	17da      	asrs	r2, r3, #31
 8004b82:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b84:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b86:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8004b8a:	f04f 0000 	mov.w	r0, #0
 8004b8e:	f04f 0100 	mov.w	r1, #0
 8004b92:	0b50      	lsrs	r0, r2, #13
 8004b94:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8004b98:	1359      	asrs	r1, r3, #13
 8004b9a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8004b9e:	462b      	mov	r3, r5
 8004ba0:	fb00 f203 	mul.w	r2, r0, r3
 8004ba4:	4623      	mov	r3, r4
 8004ba6:	fb03 f301 	mul.w	r3, r3, r1
 8004baa:	4413      	add	r3, r2
 8004bac:	4622      	mov	r2, r4
 8004bae:	fba2 1200 	umull	r1, r2, r2, r0
 8004bb2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004bb6:	460a      	mov	r2, r1
 8004bb8:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8004bbc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004bc6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8004bca:	f04f 0000 	mov.w	r0, #0
 8004bce:	f04f 0100 	mov.w	r1, #0
 8004bd2:	0b50      	lsrs	r0, r2, #13
 8004bd4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8004bd8:	1359      	asrs	r1, r3, #13
 8004bda:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8004bde:	462b      	mov	r3, r5
 8004be0:	fb00 f203 	mul.w	r2, r0, r3
 8004be4:	4623      	mov	r3, r4
 8004be6:	fb03 f301 	mul.w	r3, r3, r1
 8004bea:	4413      	add	r3, r2
 8004bec:	4622      	mov	r2, r4
 8004bee:	fba2 1200 	umull	r1, r2, r2, r0
 8004bf2:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004bf6:	460a      	mov	r2, r1
 8004bf8:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8004bfc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8004c00:	4413      	add	r3, r2
 8004c02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004c06:	f04f 0200 	mov.w	r2, #0
 8004c0a:	f04f 0300 	mov.w	r3, #0
 8004c0e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8004c12:	4621      	mov	r1, r4
 8004c14:	0e4a      	lsrs	r2, r1, #25
 8004c16:	4629      	mov	r1, r5
 8004c18:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8004c1c:	4629      	mov	r1, r5
 8004c1e:	164b      	asrs	r3, r1, #25
 8004c20:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8004c24:	4b3c      	ldr	r3, [pc, #240]	@ (8004d18 <BMP280_measureP+0x584>)
 8004c26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c2a:	b21b      	sxth	r3, r3
 8004c2c:	17da      	asrs	r2, r3, #31
 8004c2e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c30:	667a      	str	r2, [r7, #100]	@ 0x64
 8004c32:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004c36:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004c3a:	462a      	mov	r2, r5
 8004c3c:	fb02 f203 	mul.w	r2, r2, r3
 8004c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c44:	4621      	mov	r1, r4
 8004c46:	fb01 f303 	mul.w	r3, r1, r3
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8004c50:	4621      	mov	r1, r4
 8004c52:	fba2 1201 	umull	r1, r2, r2, r1
 8004c56:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8004c5a:	460a      	mov	r2, r1
 8004c5c:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8004c60:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8004c64:	4413      	add	r3, r2
 8004c66:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	f04f 0300 	mov.w	r3, #0
 8004c72:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8004c76:	4621      	mov	r1, r4
 8004c78:	0cca      	lsrs	r2, r1, #19
 8004c7a:	4629      	mov	r1, r5
 8004c7c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8004c80:	4629      	mov	r1, r5
 8004c82:	14cb      	asrs	r3, r1, #19
 8004c84:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8004c88:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8004c8c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8004c90:	1884      	adds	r4, r0, r2
 8004c92:	65bc      	str	r4, [r7, #88]	@ 0x58
 8004c94:	eb41 0303 	adc.w	r3, r1, r3
 8004c98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c9a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8004c9e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8004ca2:	4621      	mov	r1, r4
 8004ca4:	1889      	adds	r1, r1, r2
 8004ca6:	6539      	str	r1, [r7, #80]	@ 0x50
 8004ca8:	4629      	mov	r1, r5
 8004caa:	eb43 0101 	adc.w	r1, r3, r1
 8004cae:	6579      	str	r1, [r7, #84]	@ 0x54
 8004cb0:	f04f 0000 	mov.w	r0, #0
 8004cb4:	f04f 0100 	mov.w	r1, #0
 8004cb8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8004cbc:	4623      	mov	r3, r4
 8004cbe:	0a18      	lsrs	r0, r3, #8
 8004cc0:	462b      	mov	r3, r5
 8004cc2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8004cc6:	462b      	mov	r3, r5
 8004cc8:	1219      	asrs	r1, r3, #8
 8004cca:	4b14      	ldr	r3, [pc, #80]	@ (8004d1c <BMP280_measureP+0x588>)
 8004ccc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cd0:	b21b      	sxth	r3, r3
 8004cd2:	17da      	asrs	r2, r3, #31
 8004cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cd6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004cd8:	f04f 0200 	mov.w	r2, #0
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8004ce4:	464c      	mov	r4, r9
 8004ce6:	0123      	lsls	r3, r4, #4
 8004ce8:	4644      	mov	r4, r8
 8004cea:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8004cee:	4644      	mov	r4, r8
 8004cf0:	0122      	lsls	r2, r4, #4
 8004cf2:	1884      	adds	r4, r0, r2
 8004cf4:	603c      	str	r4, [r7, #0]
 8004cf6:	eb41 0303 	adc.w	r3, r1, r3
 8004cfa:	607b      	str	r3, [r7, #4]
 8004cfc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004d00:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8004d04:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d14:	2400153a 	.word	0x2400153a
 8004d18:	24001538 	.word	0x24001538
 8004d1c:	24001536 	.word	0x24001536

08004d20 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b088      	sub	sp, #32
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <BMP280_measureH+0x14>
 8004d30:	2300      	movs	r3, #0
 8004d32:	e03d      	b.n	8004db0 <BMP280_measureH+0x90>
	var1 = -log(((double)Pres)/101325);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	ee07 3a90 	vmov	s15, r3
 8004d3a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004d3e:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8004db8 <BMP280_measureH+0x98>
 8004d42:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004d46:	eeb0 0b46 	vmov.f64	d0, d6
 8004d4a:	f014 fe49 	bl	80199e0 <log>
 8004d4e:	eeb0 7b40 	vmov.f64	d7, d0
 8004d52:	eeb1 7b47 	vneg.f64	d7, d7
 8004d56:	ed87 7b06 	vstr	d7, [r7, #24]

	if(var1 == 0) return 0;
 8004d5a:	ed97 7b06 	vldr	d7, [r7, #24]
 8004d5e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d66:	d101      	bne.n	8004d6c <BMP280_measureH+0x4c>
 8004d68:	2300      	movs	r3, #0
 8004d6a:	e021      	b.n	8004db0 <BMP280_measureH+0x90>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	ee07 3a90 	vmov	s15, r3
 8004d72:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004d76:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8004dc0 <BMP280_measureH+0xa0>
 8004d7a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004d7e:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8004dc8 <BMP280_measureH+0xa8>
 8004d82:	ee37 6b06 	vadd.f64	d6, d7, d6
 8004d86:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8004dd0 <BMP280_measureH+0xb0>
 8004d8a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004d8e:	ed87 7b04 	vstr	d7, [r7, #16]
	h = var1/var2;
 8004d92:	ed97 5b06 	vldr	d5, [r7, #24]
 8004d96:	ed97 6b04 	vldr	d6, [r7, #16]
 8004d9a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004d9e:	ed87 7b02 	vstr	d7, [r7, #8]
	return (uint16_t)h;
 8004da2:	ed97 7b02 	vldr	d7, [r7, #8]
 8004da6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004daa:	ee17 3a90 	vmov	r3, s15
 8004dae:	b29b      	uxth	r3, r3
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3720      	adds	r7, #32
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	00000000 	.word	0x00000000
 8004dbc:	40f8bcd0 	.word	0x40f8bcd0
 8004dc0:	00000000 	.word	0x00000000
 8004dc4:	40590000 	.word	0x40590000
 8004dc8:	66666666 	.word	0x66666666
 8004dcc:	40711266 	.word	0x40711266
 8004dd0:	ca402a92 	.word	0xca402a92
 8004dd4:	3fa17e3e 	.word	0x3fa17e3e

08004dd8 <BMP280_init>:

void BMP280_init(void){
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
	BMP280_unselect();
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004de2:	480d      	ldr	r0, [pc, #52]	@ (8004e18 <BMP280_init+0x40>)
 8004de4:	f005 fa96 	bl	800a314 <HAL_GPIO_WritePin>
	BMP280_config();
 8004de8:	f7ff fb8a 	bl	8004500 <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 8004dec:	2089      	movs	r0, #137	@ 0x89
 8004dee:	f7ff fb59 	bl	80044a4 <BMP280_read>
 8004df2:	4603      	mov	r3, r0
 8004df4:	461a      	mov	r2, r3
 8004df6:	4b09      	ldr	r3, [pc, #36]	@ (8004e1c <BMP280_init+0x44>)
 8004df8:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 8004dfa:	f7ff fb8d 	bl	8004518 <BMP280_calibrationData>
	BMP280_readRawValues();
 8004dfe:	f7ff fc41 	bl	8004684 <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 8004e02:	4b07      	ldr	r3, [pc, #28]	@ (8004e20 <BMP280_init+0x48>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7ff fc80 	bl	800470c <BMP280_measureT>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	4a03      	ldr	r2, [pc, #12]	@ (8004e1c <BMP280_init+0x44>)
 8004e10:	6093      	str	r3, [r2, #8]
}
 8004e12:	bf00      	nop
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	58020400 	.word	0x58020400
 8004e1c:	24001510 	.word	0x24001510
 8004e20:	2400153c 	.word	0x2400153c

08004e24 <BMP280_calculate>:

void BMP280_calculate(void){
 8004e24:	b580      	push	{r7, lr}
 8004e26:	af00      	add	r7, sp, #0
	//BMP280.ID = 0;
	BMP280.ID = BMP280_read(0x89);
 8004e28:	2089      	movs	r0, #137	@ 0x89
 8004e2a:	f7ff fb3b 	bl	80044a4 <BMP280_read>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	461a      	mov	r2, r3
 8004e32:	4b16      	ldr	r3, [pc, #88]	@ (8004e8c <BMP280_calculate+0x68>)
 8004e34:	701a      	strb	r2, [r3, #0]
	BMP280_readRawValues();
 8004e36:	f7ff fc25 	bl	8004684 <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 8004e3a:	4b15      	ldr	r3, [pc, #84]	@ (8004e90 <BMP280_calculate+0x6c>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7ff fc64 	bl	800470c <BMP280_measureT>
 8004e44:	4603      	mov	r3, r0
 8004e46:	4a11      	ldr	r2, [pc, #68]	@ (8004e8c <BMP280_calculate+0x68>)
 8004e48:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 8004e4a:	4b12      	ldr	r3, [pc, #72]	@ (8004e94 <BMP280_calculate+0x70>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7ff fca0 	bl	8004794 <BMP280_measureP>
 8004e54:	4603      	mov	r3, r0
 8004e56:	0a1b      	lsrs	r3, r3, #8
 8004e58:	4a0c      	ldr	r2, [pc, #48]	@ (8004e8c <BMP280_calculate+0x68>)
 8004e5a:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 8004e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e8c <BMP280_calculate+0x68>)
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	4a0a      	ldr	r2, [pc, #40]	@ (8004e8c <BMP280_calculate+0x68>)
 8004e62:	6892      	ldr	r2, [r2, #8]
 8004e64:	4611      	mov	r1, r2
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7ff ff5a 	bl	8004d20 <BMP280_measureH>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	461a      	mov	r2, r3
 8004e70:	4b06      	ldr	r3, [pc, #24]	@ (8004e8c <BMP280_calculate+0x68>)
 8004e72:	821a      	strh	r2, [r3, #16]

	if(BMP280.Barometric_Altitude > BMP280.Max_Altitude) BMP280.Max_Altitude = BMP280.Barometric_Altitude;
 8004e74:	4b05      	ldr	r3, [pc, #20]	@ (8004e8c <BMP280_calculate+0x68>)
 8004e76:	8a1a      	ldrh	r2, [r3, #16]
 8004e78:	4b04      	ldr	r3, [pc, #16]	@ (8004e8c <BMP280_calculate+0x68>)
 8004e7a:	8a5b      	ldrh	r3, [r3, #18]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d903      	bls.n	8004e88 <BMP280_calculate+0x64>
 8004e80:	4b02      	ldr	r3, [pc, #8]	@ (8004e8c <BMP280_calculate+0x68>)
 8004e82:	8a1a      	ldrh	r2, [r3, #16]
 8004e84:	4b01      	ldr	r3, [pc, #4]	@ (8004e8c <BMP280_calculate+0x68>)
 8004e86:	825a      	strh	r2, [r3, #18]
}
 8004e88:	bf00      	nop
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	24001510 	.word	0x24001510
 8004e90:	2400153c 	.word	0x2400153c
 8004e94:	24001540 	.word	0x24001540

08004e98 <bno055_delay>:

BNO_CurrentState_e BNO_CurrentState = Init;

IMU_t IMU;

void bno055_delay(uint8_t time) {
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	71fb      	strb	r3, [r7, #7]
	BNO_DelayCounter += time;
 8004ea2:	4b06      	ldr	r3, [pc, #24]	@ (8004ebc <bno055_delay+0x24>)
 8004ea4:	781a      	ldrb	r2, [r3, #0]
 8004ea6:	79fb      	ldrb	r3, [r7, #7]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	4b03      	ldr	r3, [pc, #12]	@ (8004ebc <bno055_delay+0x24>)
 8004eae:	701a      	strb	r2, [r3, #0]
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	2400164b 	.word	0x2400164b

08004ec0 <BNO_Read>:

HAL_StatusTypeDef BNO_Read(uint8_t Address,uint8_t Size){
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	460a      	mov	r2, r1
 8004eca:	71fb      	strb	r3, [r7, #7]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	71bb      	strb	r3, [r7, #6]
	uint8_t ReadCommand[4] = {0xAA, 0x01, Address, Size};
 8004ed0:	23aa      	movs	r3, #170	@ 0xaa
 8004ed2:	723b      	strb	r3, [r7, #8]
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	727b      	strb	r3, [r7, #9]
 8004ed8:	79fb      	ldrb	r3, [r7, #7]
 8004eda:	72bb      	strb	r3, [r7, #10]
 8004edc:	79bb      	ldrb	r3, [r7, #6]
 8004ede:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef uartError;

	BNO_RxBuffer[0] = Address;
 8004ee0:	4a08      	ldr	r2, [pc, #32]	@ (8004f04 <BNO_Read+0x44>)
 8004ee2:	79fb      	ldrb	r3, [r7, #7]
 8004ee4:	7013      	strb	r3, [r2, #0]

	uartError = HAL_UART_Transmit(&huart3, ReadCommand, 4,100);
 8004ee6:	f107 0108 	add.w	r1, r7, #8
 8004eea:	2364      	movs	r3, #100	@ 0x64
 8004eec:	2204      	movs	r2, #4
 8004eee:	4806      	ldr	r0, [pc, #24]	@ (8004f08 <BNO_Read+0x48>)
 8004ef0:	f00a fc36 	bl	800f760 <HAL_UART_Transmit>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	73fb      	strb	r3, [r7, #15]
	return uartError;
 8004ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	24001548 	.word	0x24001548
 8004f08:	24001280 	.word	0x24001280

08004f0c <BNO_Write>:

HAL_StatusTypeDef BNO_Write(uint8_t Address,uint8_t Data){
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	4603      	mov	r3, r0
 8004f14:	460a      	mov	r2, r1
 8004f16:	71fb      	strb	r3, [r7, #7]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	71bb      	strb	r3, [r7, #6]
	uint8_t WriteCommand[5];
	HAL_StatusTypeDef uartError;

	WriteCommand[0] = 0xAA;
 8004f1c:	23aa      	movs	r3, #170	@ 0xaa
 8004f1e:	723b      	strb	r3, [r7, #8]
	WriteCommand[1] = 0x00;
 8004f20:	2300      	movs	r3, #0
 8004f22:	727b      	strb	r3, [r7, #9]
	WriteCommand[2] = Address;
 8004f24:	79fb      	ldrb	r3, [r7, #7]
 8004f26:	72bb      	strb	r3, [r7, #10]
	WriteCommand[3] = 1;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	72fb      	strb	r3, [r7, #11]
	WriteCommand[4] = Data;
 8004f2c:	79bb      	ldrb	r3, [r7, #6]
 8004f2e:	733b      	strb	r3, [r7, #12]

	uartError = HAL_UART_Transmit(&huart3, WriteCommand,5,100);
 8004f30:	f107 0108 	add.w	r1, r7, #8
 8004f34:	2364      	movs	r3, #100	@ 0x64
 8004f36:	2205      	movs	r2, #5
 8004f38:	4804      	ldr	r0, [pc, #16]	@ (8004f4c <BNO_Write+0x40>)
 8004f3a:	f00a fc11 	bl	800f760 <HAL_UART_Transmit>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	73fb      	strb	r3, [r7, #15]
	return uartError;
 8004f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	24001280 	.word	0x24001280

08004f50 <BNO_Write_MB>:

HAL_StatusTypeDef BNO_Write_MB(uint8_t Address,uint8_t Size, uint8_t *pData){
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b0c4      	sub	sp, #272	@ 0x110
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004f5a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004f5e:	601a      	str	r2, [r3, #0]
 8004f60:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004f64:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8004f68:	4602      	mov	r2, r0
 8004f6a:	701a      	strb	r2, [r3, #0]
 8004f6c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004f70:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8004f74:	460a      	mov	r2, r1
 8004f76:	701a      	strb	r2, [r3, #0]
    uint8_t WriteCommand[255];
    HAL_StatusTypeDef uartError;

    WriteCommand[0] = 0xAA;
 8004f78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004f7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f80:	22aa      	movs	r2, #170	@ 0xaa
 8004f82:	701a      	strb	r2, [r3, #0]
    WriteCommand[1] = 0x00;
 8004f84:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004f88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	705a      	strb	r2, [r3, #1]
    WriteCommand[2] = Address;
 8004f90:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004f94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f98:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004f9c:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 8004fa0:	7812      	ldrb	r2, [r2, #0]
 8004fa2:	709a      	strb	r2, [r3, #2]
    WriteCommand[3] = Size;
 8004fa4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004fa8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fac:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004fb0:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8004fb4:	7812      	ldrb	r2, [r2, #0]
 8004fb6:	70da      	strb	r2, [r3, #3]

    for (uint8_t n = 0; n < Size; ++n) {
 8004fb8:	2300      	movs	r3, #0
 8004fba:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8004fbe:	e015      	b.n	8004fec <BNO_Write_MB+0x9c>
        WriteCommand[n + 4] = pData[n];
 8004fc0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004fc4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004fc8:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8004fcc:	6812      	ldr	r2, [r2, #0]
 8004fce:	441a      	add	r2, r3
 8004fd0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004fd4:	3304      	adds	r3, #4
 8004fd6:	7811      	ldrb	r1, [r2, #0]
 8004fd8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004fdc:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8004fe0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t n = 0; n < Size; ++n) {
 8004fe2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8004fec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004ff0:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8004ff4:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d3e0      	bcc.n	8004fc0 <BNO_Write_MB+0x70>
    }

    uartError = HAL_UART_Transmit(&huart3, WriteCommand, (Size + 4),100);
 8004ffe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005002:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	b29b      	uxth	r3, r3
 800500a:	3304      	adds	r3, #4
 800500c:	b29a      	uxth	r2, r3
 800500e:	f107 010c 	add.w	r1, r7, #12
 8005012:	2364      	movs	r3, #100	@ 0x64
 8005014:	4806      	ldr	r0, [pc, #24]	@ (8005030 <BNO_Write_MB+0xe0>)
 8005016:	f00a fba3 	bl	800f760 <HAL_UART_Transmit>
 800501a:	4603      	mov	r3, r0
 800501c:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    return uartError;
 8005020:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
}
 8005024:	4618      	mov	r0, r3
 8005026:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	24001280 	.word	0x24001280

08005034 <BNO_Page0Adress>:

void BNO_Page0Adress(void){
 8005034:	b480      	push	{r7}
 8005036:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 8005038:	4ba6      	ldr	r3, [pc, #664]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	2b55      	cmp	r3, #85	@ 0x55
 800503e:	f300 8247 	bgt.w	80054d0 <BNO_Page0Adress+0x49c>
 8005042:	2b35      	cmp	r3, #53	@ 0x35
 8005044:	da0a      	bge.n	800505c <BNO_Page0Adress+0x28>
 8005046:	2b08      	cmp	r3, #8
 8005048:	f000 814a 	beq.w	80052e0 <BNO_Page0Adress+0x2ac>
 800504c:	2b08      	cmp	r3, #8
 800504e:	f300 823f 	bgt.w	80054d0 <BNO_Page0Adress+0x49c>
 8005052:	2b00      	cmp	r3, #0
 8005054:	d04c      	beq.n	80050f0 <BNO_Page0Adress+0xbc>
 8005056:	2b07      	cmp	r3, #7
 8005058:	d064      	beq.n	8005124 <BNO_Page0Adress+0xf0>
			IMU.Roll = ((float)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;

			BNO_ErrorHandler = ReadSucces;
			break;
		default:
			break;
 800505a:	e239      	b.n	80054d0 <BNO_Page0Adress+0x49c>
	switch (BNO_RxBuffer[0]) {
 800505c:	3b35      	subs	r3, #53	@ 0x35
 800505e:	2b20      	cmp	r3, #32
 8005060:	f200 8236 	bhi.w	80054d0 <BNO_Page0Adress+0x49c>
 8005064:	a201      	add	r2, pc, #4	@ (adr r2, 800506c <BNO_Page0Adress+0x38>)
 8005066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506a:	bf00      	nop
 800506c:	0800516d 	.word	0x0800516d
 8005070:	080054d1 	.word	0x080054d1
 8005074:	080054d1 	.word	0x080054d1
 8005078:	080054d1 	.word	0x080054d1
 800507c:	08005149 	.word	0x08005149
 8005080:	080054d1 	.word	0x080054d1
 8005084:	08005137 	.word	0x08005137
 8005088:	080054d1 	.word	0x080054d1
 800508c:	0800515b 	.word	0x0800515b
 8005090:	080054d1 	.word	0x080054d1
 8005094:	080054d1 	.word	0x080054d1
 8005098:	080054d1 	.word	0x080054d1
 800509c:	080054d1 	.word	0x080054d1
 80050a0:	080054d1 	.word	0x080054d1
 80050a4:	080054d1 	.word	0x080054d1
 80050a8:	080054d1 	.word	0x080054d1
 80050ac:	080054d1 	.word	0x080054d1
 80050b0:	080054d1 	.word	0x080054d1
 80050b4:	080054d1 	.word	0x080054d1
 80050b8:	080054d1 	.word	0x080054d1
 80050bc:	080054d1 	.word	0x080054d1
 80050c0:	080054d1 	.word	0x080054d1
 80050c4:	080054d1 	.word	0x080054d1
 80050c8:	080054d1 	.word	0x080054d1
 80050cc:	080054d1 	.word	0x080054d1
 80050d0:	080054d1 	.word	0x080054d1
 80050d4:	080054d1 	.word	0x080054d1
 80050d8:	080054d1 	.word	0x080054d1
 80050dc:	080054d1 	.word	0x080054d1
 80050e0:	080054d1 	.word	0x080054d1
 80050e4:	080054d1 	.word	0x080054d1
 80050e8:	080054d1 	.word	0x080054d1
 80050ec:	080051c5 	.word	0x080051c5
			if(BNO_RxBuffer[1] != 160) return;
 80050f0:	4b78      	ldr	r3, [pc, #480]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 80050f2:	785b      	ldrb	r3, [r3, #1]
 80050f4:	2ba0      	cmp	r3, #160	@ 0xa0
 80050f6:	f040 81ed 	bne.w	80054d4 <BNO_Page0Adress+0x4a0>
			IMU.ID = BNO_RxBuffer[1];
 80050fa:	4b76      	ldr	r3, [pc, #472]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 80050fc:	785a      	ldrb	r2, [r3, #1]
 80050fe:	4b76      	ldr	r3, [pc, #472]	@ (80052d8 <BNO_Page0Adress+0x2a4>)
 8005100:	701a      	strb	r2, [r3, #0]
			IMU.ACC.ID = BNO_RxBuffer[2];
 8005102:	4b74      	ldr	r3, [pc, #464]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 8005104:	789a      	ldrb	r2, [r3, #2]
 8005106:	4b74      	ldr	r3, [pc, #464]	@ (80052d8 <BNO_Page0Adress+0x2a4>)
 8005108:	711a      	strb	r2, [r3, #4]
			IMU.MAG.ID = BNO_RxBuffer[3];
 800510a:	4b72      	ldr	r3, [pc, #456]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 800510c:	78da      	ldrb	r2, [r3, #3]
 800510e:	4b72      	ldr	r3, [pc, #456]	@ (80052d8 <BNO_Page0Adress+0x2a4>)
 8005110:	751a      	strb	r2, [r3, #20]
			IMU.GYR.ID = BNO_RxBuffer[4];
 8005112:	4b70      	ldr	r3, [pc, #448]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 8005114:	791a      	ldrb	r2, [r3, #4]
 8005116:	4b70      	ldr	r3, [pc, #448]	@ (80052d8 <BNO_Page0Adress+0x2a4>)
 8005118:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			BNO_ErrorHandler = ReadSucces;
 800511c:	4b6f      	ldr	r3, [pc, #444]	@ (80052dc <BNO_Page0Adress+0x2a8>)
 800511e:	220b      	movs	r2, #11
 8005120:	701a      	strb	r2, [r3, #0]
			break;
 8005122:	e1d8      	b.n	80054d6 <BNO_Page0Adress+0x4a2>
			IMU.Page = BNO_RxBuffer[1];
 8005124:	4b6b      	ldr	r3, [pc, #428]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 8005126:	785a      	ldrb	r2, [r3, #1]
 8005128:	4b6b      	ldr	r3, [pc, #428]	@ (80052d8 <BNO_Page0Adress+0x2a4>)
 800512a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			BNO_ErrorHandler = ReadSucces;
 800512e:	4b6b      	ldr	r3, [pc, #428]	@ (80052dc <BNO_Page0Adress+0x2a8>)
 8005130:	220b      	movs	r2, #11
 8005132:	701a      	strb	r2, [r3, #0]
			break;
 8005134:	e1cf      	b.n	80054d6 <BNO_Page0Adress+0x4a2>
			IMU.Unit_Select = BNO_RxBuffer[1];
 8005136:	4b67      	ldr	r3, [pc, #412]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 8005138:	785a      	ldrb	r2, [r3, #1]
 800513a:	4b67      	ldr	r3, [pc, #412]	@ (80052d8 <BNO_Page0Adress+0x2a4>)
 800513c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			BNO_ErrorHandler = ReadSucces;
 8005140:	4b66      	ldr	r3, [pc, #408]	@ (80052dc <BNO_Page0Adress+0x2a8>)
 8005142:	220b      	movs	r2, #11
 8005144:	701a      	strb	r2, [r3, #0]
			break;
 8005146:	e1c6      	b.n	80054d6 <BNO_Page0Adress+0x4a2>
			IMU.System_Status = BNO_RxBuffer[1];
 8005148:	4b62      	ldr	r3, [pc, #392]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 800514a:	785a      	ldrb	r2, [r3, #1]
 800514c:	4b62      	ldr	r3, [pc, #392]	@ (80052d8 <BNO_Page0Adress+0x2a4>)
 800514e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			BNO_ErrorHandler = ReadSucces;
 8005152:	4b62      	ldr	r3, [pc, #392]	@ (80052dc <BNO_Page0Adress+0x2a8>)
 8005154:	220b      	movs	r2, #11
 8005156:	701a      	strb	r2, [r3, #0]
			break;
 8005158:	e1bd      	b.n	80054d6 <BNO_Page0Adress+0x4a2>
			IMU.Op_Mode = BNO_RxBuffer[1];
 800515a:	4b5e      	ldr	r3, [pc, #376]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 800515c:	785a      	ldrb	r2, [r3, #1]
 800515e:	4b5e      	ldr	r3, [pc, #376]	@ (80052d8 <BNO_Page0Adress+0x2a4>)
 8005160:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
			BNO_ErrorHandler = ReadSucces;
 8005164:	4b5d      	ldr	r3, [pc, #372]	@ (80052dc <BNO_Page0Adress+0x2a8>)
 8005166:	220b      	movs	r2, #11
 8005168:	701a      	strb	r2, [r3, #0]
			break;
 800516a:	e1b4      	b.n	80054d6 <BNO_Page0Adress+0x4a2>
			IMU.CalSatus.Full = BNO_RxBuffer[1];
 800516c:	4b59      	ldr	r3, [pc, #356]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 800516e:	785a      	ldrb	r2, [r3, #1]
 8005170:	4b59      	ldr	r3, [pc, #356]	@ (80052d8 <BNO_Page0Adress+0x2a4>)
 8005172:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			IMU.CalSatus.Sys = (BNO_RxBuffer[1] >> 6) & 0x03;
 8005176:	4b57      	ldr	r3, [pc, #348]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 8005178:	785b      	ldrb	r3, [r3, #1]
 800517a:	099b      	lsrs	r3, r3, #6
 800517c:	b2da      	uxtb	r2, r3
 800517e:	4b56      	ldr	r3, [pc, #344]	@ (80052d8 <BNO_Page0Adress+0x2a4>)
 8005180:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			IMU.CalSatus.Gyr = (BNO_RxBuffer[1] >> 4) & 0x03;
 8005184:	4b53      	ldr	r3, [pc, #332]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 8005186:	785b      	ldrb	r3, [r3, #1]
 8005188:	091b      	lsrs	r3, r3, #4
 800518a:	b2db      	uxtb	r3, r3
 800518c:	f003 0303 	and.w	r3, r3, #3
 8005190:	b2da      	uxtb	r2, r3
 8005192:	4b51      	ldr	r3, [pc, #324]	@ (80052d8 <BNO_Page0Adress+0x2a4>)
 8005194:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
			IMU.CalSatus.Acc = (BNO_RxBuffer[1] >> 2) & 0x03;
 8005198:	4b4e      	ldr	r3, [pc, #312]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 800519a:	785b      	ldrb	r3, [r3, #1]
 800519c:	089b      	lsrs	r3, r3, #2
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	f003 0303 	and.w	r3, r3, #3
 80051a4:	b2da      	uxtb	r2, r3
 80051a6:	4b4c      	ldr	r3, [pc, #304]	@ (80052d8 <BNO_Page0Adress+0x2a4>)
 80051a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
			IMU.CalSatus.Mag = BNO_RxBuffer[1] & 0x03;
 80051ac:	4b49      	ldr	r3, [pc, #292]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 80051ae:	785b      	ldrb	r3, [r3, #1]
 80051b0:	f003 0303 	and.w	r3, r3, #3
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	4b48      	ldr	r3, [pc, #288]	@ (80052d8 <BNO_Page0Adress+0x2a4>)
 80051b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			BNO_ErrorHandler = ReadSucces;
 80051bc:	4b47      	ldr	r3, [pc, #284]	@ (80052dc <BNO_Page0Adress+0x2a8>)
 80051be:	220b      	movs	r2, #11
 80051c0:	701a      	strb	r2, [r3, #0]
			break;
 80051c2:	e188      	b.n	80054d6 <BNO_Page0Adress+0x4a2>
			IMU.Calibration_Data.offset.accel.x = (int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1]);
 80051c4:	4b43      	ldr	r3, [pc, #268]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 80051c6:	789b      	ldrb	r3, [r3, #2]
 80051c8:	021b      	lsls	r3, r3, #8
 80051ca:	b21a      	sxth	r2, r3
 80051cc:	4b41      	ldr	r3, [pc, #260]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 80051ce:	785b      	ldrb	r3, [r3, #1]
 80051d0:	b21b      	sxth	r3, r3
 80051d2:	4313      	orrs	r3, r2
 80051d4:	b21a      	sxth	r2, r3
 80051d6:	4b40      	ldr	r3, [pc, #256]	@ (80052d8 <BNO_Page0Adress+0x2a4>)
 80051d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
			IMU.Calibration_Data.offset.accel.y = (int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3]);
 80051dc:	4b3d      	ldr	r3, [pc, #244]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 80051de:	791b      	ldrb	r3, [r3, #4]
 80051e0:	021b      	lsls	r3, r3, #8
 80051e2:	b21a      	sxth	r2, r3
 80051e4:	4b3b      	ldr	r3, [pc, #236]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 80051e6:	78db      	ldrb	r3, [r3, #3]
 80051e8:	b21b      	sxth	r3, r3
 80051ea:	4313      	orrs	r3, r2
 80051ec:	b21a      	sxth	r2, r3
 80051ee:	4b3a      	ldr	r3, [pc, #232]	@ (80052d8 <BNO_Page0Adress+0x2a4>)
 80051f0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
			IMU.Calibration_Data.offset.accel.z = (int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5]);
 80051f4:	4b37      	ldr	r3, [pc, #220]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 80051f6:	799b      	ldrb	r3, [r3, #6]
 80051f8:	021b      	lsls	r3, r3, #8
 80051fa:	b21a      	sxth	r2, r3
 80051fc:	4b35      	ldr	r3, [pc, #212]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 80051fe:	795b      	ldrb	r3, [r3, #5]
 8005200:	b21b      	sxth	r3, r3
 8005202:	4313      	orrs	r3, r2
 8005204:	b21a      	sxth	r2, r3
 8005206:	4b34      	ldr	r3, [pc, #208]	@ (80052d8 <BNO_Page0Adress+0x2a4>)
 8005208:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
			IMU.Calibration_Data.offset.mag.x = (int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7]);
 800520c:	4b31      	ldr	r3, [pc, #196]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 800520e:	7a1b      	ldrb	r3, [r3, #8]
 8005210:	021b      	lsls	r3, r3, #8
 8005212:	b21a      	sxth	r2, r3
 8005214:	4b2f      	ldr	r3, [pc, #188]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 8005216:	79db      	ldrb	r3, [r3, #7]
 8005218:	b21b      	sxth	r3, r3
 800521a:	4313      	orrs	r3, r2
 800521c:	b21a      	sxth	r2, r3
 800521e:	4b2e      	ldr	r3, [pc, #184]	@ (80052d8 <BNO_Page0Adress+0x2a4>)
 8005220:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
			IMU.Calibration_Data.offset.mag.y = (int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9]);
 8005224:	4b2b      	ldr	r3, [pc, #172]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 8005226:	7a9b      	ldrb	r3, [r3, #10]
 8005228:	021b      	lsls	r3, r3, #8
 800522a:	b21a      	sxth	r2, r3
 800522c:	4b29      	ldr	r3, [pc, #164]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 800522e:	7a5b      	ldrb	r3, [r3, #9]
 8005230:	b21b      	sxth	r3, r3
 8005232:	4313      	orrs	r3, r2
 8005234:	b21a      	sxth	r2, r3
 8005236:	4b28      	ldr	r3, [pc, #160]	@ (80052d8 <BNO_Page0Adress+0x2a4>)
 8005238:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
			IMU.Calibration_Data.offset.mag.z = (int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11]);
 800523c:	4b25      	ldr	r3, [pc, #148]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 800523e:	7b1b      	ldrb	r3, [r3, #12]
 8005240:	021b      	lsls	r3, r3, #8
 8005242:	b21a      	sxth	r2, r3
 8005244:	4b23      	ldr	r3, [pc, #140]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 8005246:	7adb      	ldrb	r3, [r3, #11]
 8005248:	b21b      	sxth	r3, r3
 800524a:	4313      	orrs	r3, r2
 800524c:	b21a      	sxth	r2, r3
 800524e:	4b22      	ldr	r3, [pc, #136]	@ (80052d8 <BNO_Page0Adress+0x2a4>)
 8005250:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
			IMU.Calibration_Data.offset.gyro.x = (int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13]);
 8005254:	4b1f      	ldr	r3, [pc, #124]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 8005256:	7b9b      	ldrb	r3, [r3, #14]
 8005258:	021b      	lsls	r3, r3, #8
 800525a:	b21a      	sxth	r2, r3
 800525c:	4b1d      	ldr	r3, [pc, #116]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 800525e:	7b5b      	ldrb	r3, [r3, #13]
 8005260:	b21b      	sxth	r3, r3
 8005262:	4313      	orrs	r3, r2
 8005264:	b21a      	sxth	r2, r3
 8005266:	4b1c      	ldr	r3, [pc, #112]	@ (80052d8 <BNO_Page0Adress+0x2a4>)
 8005268:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
			IMU.Calibration_Data.offset.gyro.y = (int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15]);
 800526c:	4b19      	ldr	r3, [pc, #100]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 800526e:	7c1b      	ldrb	r3, [r3, #16]
 8005270:	021b      	lsls	r3, r3, #8
 8005272:	b21a      	sxth	r2, r3
 8005274:	4b17      	ldr	r3, [pc, #92]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 8005276:	7bdb      	ldrb	r3, [r3, #15]
 8005278:	b21b      	sxth	r3, r3
 800527a:	4313      	orrs	r3, r2
 800527c:	b21a      	sxth	r2, r3
 800527e:	4b16      	ldr	r3, [pc, #88]	@ (80052d8 <BNO_Page0Adress+0x2a4>)
 8005280:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
			IMU.Calibration_Data.offset.gyro.z = (int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17]);
 8005284:	4b13      	ldr	r3, [pc, #76]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 8005286:	7c9b      	ldrb	r3, [r3, #18]
 8005288:	021b      	lsls	r3, r3, #8
 800528a:	b21a      	sxth	r2, r3
 800528c:	4b11      	ldr	r3, [pc, #68]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 800528e:	7c5b      	ldrb	r3, [r3, #17]
 8005290:	b21b      	sxth	r3, r3
 8005292:	4313      	orrs	r3, r2
 8005294:	b21a      	sxth	r2, r3
 8005296:	4b10      	ldr	r3, [pc, #64]	@ (80052d8 <BNO_Page0Adress+0x2a4>)
 8005298:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
			IMU.Calibration_Data.radius.accel = (uint16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19]);
 800529c:	4b0d      	ldr	r3, [pc, #52]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 800529e:	7d1b      	ldrb	r3, [r3, #20]
 80052a0:	021b      	lsls	r3, r3, #8
 80052a2:	b21a      	sxth	r2, r3
 80052a4:	4b0b      	ldr	r3, [pc, #44]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 80052a6:	7cdb      	ldrb	r3, [r3, #19]
 80052a8:	b21b      	sxth	r3, r3
 80052aa:	4313      	orrs	r3, r2
 80052ac:	b21b      	sxth	r3, r3
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	4b09      	ldr	r3, [pc, #36]	@ (80052d8 <BNO_Page0Adress+0x2a4>)
 80052b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
			IMU.Calibration_Data.radius.mag   = (uint16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21]);
 80052b6:	4b07      	ldr	r3, [pc, #28]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 80052b8:	7d9b      	ldrb	r3, [r3, #22]
 80052ba:	021b      	lsls	r3, r3, #8
 80052bc:	b21a      	sxth	r2, r3
 80052be:	4b05      	ldr	r3, [pc, #20]	@ (80052d4 <BNO_Page0Adress+0x2a0>)
 80052c0:	7d5b      	ldrb	r3, [r3, #21]
 80052c2:	b21b      	sxth	r3, r3
 80052c4:	4313      	orrs	r3, r2
 80052c6:	b21b      	sxth	r3, r3
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	4b03      	ldr	r3, [pc, #12]	@ (80052d8 <BNO_Page0Adress+0x2a4>)
 80052cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
			break;
 80052d0:	e101      	b.n	80054d6 <BNO_Page0Adress+0x4a2>
 80052d2:	bf00      	nop
 80052d4:	24001548 	.word	0x24001548
 80052d8:	24001650 	.word	0x24001650
 80052dc:	24001649 	.word	0x24001649
			IMU.ACC.x = ((float)((int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1])))/100;
 80052e0:	4b7f      	ldr	r3, [pc, #508]	@ (80054e0 <BNO_Page0Adress+0x4ac>)
 80052e2:	789b      	ldrb	r3, [r3, #2]
 80052e4:	021b      	lsls	r3, r3, #8
 80052e6:	b21a      	sxth	r2, r3
 80052e8:	4b7d      	ldr	r3, [pc, #500]	@ (80054e0 <BNO_Page0Adress+0x4ac>)
 80052ea:	785b      	ldrb	r3, [r3, #1]
 80052ec:	b21b      	sxth	r3, r3
 80052ee:	4313      	orrs	r3, r2
 80052f0:	b21b      	sxth	r3, r3
 80052f2:	ee07 3a90 	vmov	s15, r3
 80052f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052fa:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 80054e4 <BNO_Page0Adress+0x4b0>
 80052fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005302:	4b79      	ldr	r3, [pc, #484]	@ (80054e8 <BNO_Page0Adress+0x4b4>)
 8005304:	edc3 7a02 	vstr	s15, [r3, #8]
			IMU.ACC.y = ((float)((int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3])))/100;
 8005308:	4b75      	ldr	r3, [pc, #468]	@ (80054e0 <BNO_Page0Adress+0x4ac>)
 800530a:	791b      	ldrb	r3, [r3, #4]
 800530c:	021b      	lsls	r3, r3, #8
 800530e:	b21a      	sxth	r2, r3
 8005310:	4b73      	ldr	r3, [pc, #460]	@ (80054e0 <BNO_Page0Adress+0x4ac>)
 8005312:	78db      	ldrb	r3, [r3, #3]
 8005314:	b21b      	sxth	r3, r3
 8005316:	4313      	orrs	r3, r2
 8005318:	b21b      	sxth	r3, r3
 800531a:	ee07 3a90 	vmov	s15, r3
 800531e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005322:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80054e4 <BNO_Page0Adress+0x4b0>
 8005326:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800532a:	4b6f      	ldr	r3, [pc, #444]	@ (80054e8 <BNO_Page0Adress+0x4b4>)
 800532c:	edc3 7a03 	vstr	s15, [r3, #12]
			IMU.ACC.z = ((float)((int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5])))/100;
 8005330:	4b6b      	ldr	r3, [pc, #428]	@ (80054e0 <BNO_Page0Adress+0x4ac>)
 8005332:	799b      	ldrb	r3, [r3, #6]
 8005334:	021b      	lsls	r3, r3, #8
 8005336:	b21a      	sxth	r2, r3
 8005338:	4b69      	ldr	r3, [pc, #420]	@ (80054e0 <BNO_Page0Adress+0x4ac>)
 800533a:	795b      	ldrb	r3, [r3, #5]
 800533c:	b21b      	sxth	r3, r3
 800533e:	4313      	orrs	r3, r2
 8005340:	b21b      	sxth	r3, r3
 8005342:	ee07 3a90 	vmov	s15, r3
 8005346:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800534a:	eddf 6a66 	vldr	s13, [pc, #408]	@ 80054e4 <BNO_Page0Adress+0x4b0>
 800534e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005352:	4b65      	ldr	r3, [pc, #404]	@ (80054e8 <BNO_Page0Adress+0x4b4>)
 8005354:	edc3 7a04 	vstr	s15, [r3, #16]
			IMU.MAG.x = ((float)((int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7])))/16;
 8005358:	4b61      	ldr	r3, [pc, #388]	@ (80054e0 <BNO_Page0Adress+0x4ac>)
 800535a:	7a1b      	ldrb	r3, [r3, #8]
 800535c:	021b      	lsls	r3, r3, #8
 800535e:	b21a      	sxth	r2, r3
 8005360:	4b5f      	ldr	r3, [pc, #380]	@ (80054e0 <BNO_Page0Adress+0x4ac>)
 8005362:	79db      	ldrb	r3, [r3, #7]
 8005364:	b21b      	sxth	r3, r3
 8005366:	4313      	orrs	r3, r2
 8005368:	b21b      	sxth	r3, r3
 800536a:	ee07 3a90 	vmov	s15, r3
 800536e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005372:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8005376:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800537a:	4b5b      	ldr	r3, [pc, #364]	@ (80054e8 <BNO_Page0Adress+0x4b4>)
 800537c:	edc3 7a06 	vstr	s15, [r3, #24]
			IMU.MAG.y = ((float)((int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9])))/16;
 8005380:	4b57      	ldr	r3, [pc, #348]	@ (80054e0 <BNO_Page0Adress+0x4ac>)
 8005382:	7a9b      	ldrb	r3, [r3, #10]
 8005384:	021b      	lsls	r3, r3, #8
 8005386:	b21a      	sxth	r2, r3
 8005388:	4b55      	ldr	r3, [pc, #340]	@ (80054e0 <BNO_Page0Adress+0x4ac>)
 800538a:	7a5b      	ldrb	r3, [r3, #9]
 800538c:	b21b      	sxth	r3, r3
 800538e:	4313      	orrs	r3, r2
 8005390:	b21b      	sxth	r3, r3
 8005392:	ee07 3a90 	vmov	s15, r3
 8005396:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800539a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800539e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053a2:	4b51      	ldr	r3, [pc, #324]	@ (80054e8 <BNO_Page0Adress+0x4b4>)
 80053a4:	edc3 7a07 	vstr	s15, [r3, #28]
			IMU.MAG.z = ((float)((int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11])))/16;
 80053a8:	4b4d      	ldr	r3, [pc, #308]	@ (80054e0 <BNO_Page0Adress+0x4ac>)
 80053aa:	7b1b      	ldrb	r3, [r3, #12]
 80053ac:	021b      	lsls	r3, r3, #8
 80053ae:	b21a      	sxth	r2, r3
 80053b0:	4b4b      	ldr	r3, [pc, #300]	@ (80054e0 <BNO_Page0Adress+0x4ac>)
 80053b2:	7adb      	ldrb	r3, [r3, #11]
 80053b4:	b21b      	sxth	r3, r3
 80053b6:	4313      	orrs	r3, r2
 80053b8:	b21b      	sxth	r3, r3
 80053ba:	ee07 3a90 	vmov	s15, r3
 80053be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053c2:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80053c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053ca:	4b47      	ldr	r3, [pc, #284]	@ (80054e8 <BNO_Page0Adress+0x4b4>)
 80053cc:	edc3 7a08 	vstr	s15, [r3, #32]
			IMU.GYR.x = ((float)((int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13])))/16;
 80053d0:	4b43      	ldr	r3, [pc, #268]	@ (80054e0 <BNO_Page0Adress+0x4ac>)
 80053d2:	7b9b      	ldrb	r3, [r3, #14]
 80053d4:	021b      	lsls	r3, r3, #8
 80053d6:	b21a      	sxth	r2, r3
 80053d8:	4b41      	ldr	r3, [pc, #260]	@ (80054e0 <BNO_Page0Adress+0x4ac>)
 80053da:	7b5b      	ldrb	r3, [r3, #13]
 80053dc:	b21b      	sxth	r3, r3
 80053de:	4313      	orrs	r3, r2
 80053e0:	b21b      	sxth	r3, r3
 80053e2:	ee07 3a90 	vmov	s15, r3
 80053e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053ea:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80053ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053f2:	4b3d      	ldr	r3, [pc, #244]	@ (80054e8 <BNO_Page0Adress+0x4b4>)
 80053f4:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
			IMU.GYR.y = -((float)((int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15])))/16;
 80053f8:	4b39      	ldr	r3, [pc, #228]	@ (80054e0 <BNO_Page0Adress+0x4ac>)
 80053fa:	7c1b      	ldrb	r3, [r3, #16]
 80053fc:	021b      	lsls	r3, r3, #8
 80053fe:	b21a      	sxth	r2, r3
 8005400:	4b37      	ldr	r3, [pc, #220]	@ (80054e0 <BNO_Page0Adress+0x4ac>)
 8005402:	7bdb      	ldrb	r3, [r3, #15]
 8005404:	b21b      	sxth	r3, r3
 8005406:	4313      	orrs	r3, r2
 8005408:	b21b      	sxth	r3, r3
 800540a:	ee07 3a90 	vmov	s15, r3
 800540e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005412:	eeb1 7a67 	vneg.f32	s14, s15
 8005416:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800541a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800541e:	4b32      	ldr	r3, [pc, #200]	@ (80054e8 <BNO_Page0Adress+0x4b4>)
 8005420:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
			IMU.GYR.z = -((float)((int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17])))/16;
 8005424:	4b2e      	ldr	r3, [pc, #184]	@ (80054e0 <BNO_Page0Adress+0x4ac>)
 8005426:	7c9b      	ldrb	r3, [r3, #18]
 8005428:	021b      	lsls	r3, r3, #8
 800542a:	b21a      	sxth	r2, r3
 800542c:	4b2c      	ldr	r3, [pc, #176]	@ (80054e0 <BNO_Page0Adress+0x4ac>)
 800542e:	7c5b      	ldrb	r3, [r3, #17]
 8005430:	b21b      	sxth	r3, r3
 8005432:	4313      	orrs	r3, r2
 8005434:	b21b      	sxth	r3, r3
 8005436:	ee07 3a90 	vmov	s15, r3
 800543a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800543e:	eeb1 7a67 	vneg.f32	s14, s15
 8005442:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8005446:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800544a:	4b27      	ldr	r3, [pc, #156]	@ (80054e8 <BNO_Page0Adress+0x4b4>)
 800544c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
			IMU.Heading = ((float)((int16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19])))/16;
 8005450:	4b23      	ldr	r3, [pc, #140]	@ (80054e0 <BNO_Page0Adress+0x4ac>)
 8005452:	7d1b      	ldrb	r3, [r3, #20]
 8005454:	021b      	lsls	r3, r3, #8
 8005456:	b21a      	sxth	r2, r3
 8005458:	4b21      	ldr	r3, [pc, #132]	@ (80054e0 <BNO_Page0Adress+0x4ac>)
 800545a:	7cdb      	ldrb	r3, [r3, #19]
 800545c:	b21b      	sxth	r3, r3
 800545e:	4313      	orrs	r3, r2
 8005460:	b21b      	sxth	r3, r3
 8005462:	ee07 3a90 	vmov	s15, r3
 8005466:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800546a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800546e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005472:	4b1d      	ldr	r3, [pc, #116]	@ (80054e8 <BNO_Page0Adress+0x4b4>)
 8005474:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
			IMU.Pitch = ((float)((int16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21])))/16;
 8005478:	4b19      	ldr	r3, [pc, #100]	@ (80054e0 <BNO_Page0Adress+0x4ac>)
 800547a:	7d9b      	ldrb	r3, [r3, #22]
 800547c:	021b      	lsls	r3, r3, #8
 800547e:	b21a      	sxth	r2, r3
 8005480:	4b17      	ldr	r3, [pc, #92]	@ (80054e0 <BNO_Page0Adress+0x4ac>)
 8005482:	7d5b      	ldrb	r3, [r3, #21]
 8005484:	b21b      	sxth	r3, r3
 8005486:	4313      	orrs	r3, r2
 8005488:	b21b      	sxth	r3, r3
 800548a:	ee07 3a90 	vmov	s15, r3
 800548e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005492:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8005496:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800549a:	4b13      	ldr	r3, [pc, #76]	@ (80054e8 <BNO_Page0Adress+0x4b4>)
 800549c:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
			IMU.Roll = ((float)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;
 80054a0:	4b0f      	ldr	r3, [pc, #60]	@ (80054e0 <BNO_Page0Adress+0x4ac>)
 80054a2:	7e1b      	ldrb	r3, [r3, #24]
 80054a4:	021b      	lsls	r3, r3, #8
 80054a6:	b21a      	sxth	r2, r3
 80054a8:	4b0d      	ldr	r3, [pc, #52]	@ (80054e0 <BNO_Page0Adress+0x4ac>)
 80054aa:	7ddb      	ldrb	r3, [r3, #23]
 80054ac:	b21b      	sxth	r3, r3
 80054ae:	4313      	orrs	r3, r2
 80054b0:	b21b      	sxth	r3, r3
 80054b2:	ee07 3a90 	vmov	s15, r3
 80054b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054ba:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80054be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054c2:	4b09      	ldr	r3, [pc, #36]	@ (80054e8 <BNO_Page0Adress+0x4b4>)
 80054c4:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			BNO_ErrorHandler = ReadSucces;
 80054c8:	4b08      	ldr	r3, [pc, #32]	@ (80054ec <BNO_Page0Adress+0x4b8>)
 80054ca:	220b      	movs	r2, #11
 80054cc:	701a      	strb	r2, [r3, #0]
			break;
 80054ce:	e002      	b.n	80054d6 <BNO_Page0Adress+0x4a2>
			break;
 80054d0:	bf00      	nop
 80054d2:	e000      	b.n	80054d6 <BNO_Page0Adress+0x4a2>
			if(BNO_RxBuffer[1] != 160) return;
 80054d4:	bf00      	nop
	}
}
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	24001548 	.word	0x24001548
 80054e4:	42c80000 	.word	0x42c80000
 80054e8:	24001650 	.word	0x24001650
 80054ec:	24001649 	.word	0x24001649

080054f0 <BNO_Page1Adress>:

void BNO_Page1Adress(void){
 80054f0:	b480      	push	{r7}
 80054f2:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 80054f4:	4b09      	ldr	r3, [pc, #36]	@ (800551c <BNO_Page1Adress+0x2c>)
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	2b07      	cmp	r3, #7
 80054fa:	d108      	bne.n	800550e <BNO_Page1Adress+0x1e>
		case BNO055_PAGE_ID:
			IMU.Page = BNO_RxBuffer[1];
 80054fc:	4b07      	ldr	r3, [pc, #28]	@ (800551c <BNO_Page1Adress+0x2c>)
 80054fe:	785a      	ldrb	r2, [r3, #1]
 8005500:	4b07      	ldr	r3, [pc, #28]	@ (8005520 <BNO_Page1Adress+0x30>)
 8005502:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			BNO_ErrorHandler = ReadSucces;
 8005506:	4b07      	ldr	r3, [pc, #28]	@ (8005524 <BNO_Page1Adress+0x34>)
 8005508:	220b      	movs	r2, #11
 800550a:	701a      	strb	r2, [r3, #0]
			break;
 800550c:	e000      	b.n	8005510 <BNO_Page1Adress+0x20>

		default:
			break;
 800550e:	bf00      	nop
	}
}
 8005510:	bf00      	nop
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	24001548 	.word	0x24001548
 8005520:	24001650 	.word	0x24001650
 8005524:	24001649 	.word	0x24001649

08005528 <BNO_EmptyingBuffer>:

void BNO_EmptyingBuffer(void){
 8005528:	b580      	push	{r7, lr}
 800552a:	af00      	add	r7, sp, #0
	switch (IMU.Page) {
 800552c:	4b0a      	ldr	r3, [pc, #40]	@ (8005558 <BNO_EmptyingBuffer+0x30>)
 800552e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005532:	2b00      	cmp	r3, #0
 8005534:	d002      	beq.n	800553c <BNO_EmptyingBuffer+0x14>
 8005536:	2b01      	cmp	r3, #1
 8005538:	d003      	beq.n	8005542 <BNO_EmptyingBuffer+0x1a>
			break;
		case 1:
			BNO_Page1Adress();
			break;
		default:
			break;
 800553a:	e005      	b.n	8005548 <BNO_EmptyingBuffer+0x20>
			BNO_Page0Adress();
 800553c:	f7ff fd7a 	bl	8005034 <BNO_Page0Adress>
			break;
 8005540:	e002      	b.n	8005548 <BNO_EmptyingBuffer+0x20>
			BNO_Page1Adress();
 8005542:	f7ff ffd5 	bl	80054f0 <BNO_Page1Adress>
			break;
 8005546:	bf00      	nop
	}
	memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 8005548:	22ff      	movs	r2, #255	@ 0xff
 800554a:	2100      	movs	r1, #0
 800554c:	4803      	ldr	r0, [pc, #12]	@ (800555c <BNO_EmptyingBuffer+0x34>)
 800554e:	f012 fb5a 	bl	8017c06 <memset>
}
 8005552:	bf00      	nop
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	24001650 	.word	0x24001650
 800555c:	24001548 	.word	0x24001548

08005560 <BNO_SWReset>:
		default:
			break;
	}
}

void BNO_SWReset(void){
 8005560:	b580      	push	{r7, lr}
 8005562:	af00      	add	r7, sp, #0
	BNO_Write(BNO055_SYS_TRIGGER,0x20);
 8005564:	2120      	movs	r1, #32
 8005566:	203f      	movs	r0, #63	@ 0x3f
 8005568:	f7ff fcd0 	bl	8004f0c <BNO_Write>
	bno055_delay(70);
 800556c:	2046      	movs	r0, #70	@ 0x46
 800556e:	f7ff fc93 	bl	8004e98 <bno055_delay>
	IMU.ID = 0x00;
 8005572:	4b04      	ldr	r3, [pc, #16]	@ (8005584 <BNO_SWReset+0x24>)
 8005574:	2200      	movs	r2, #0
 8005576:	701a      	strb	r2, [r3, #0]
	BNO_CurrentState = Configuration;
 8005578:	4b03      	ldr	r3, [pc, #12]	@ (8005588 <BNO_SWReset+0x28>)
 800557a:	2201      	movs	r2, #1
 800557c:	701a      	strb	r2, [r3, #0]
}
 800557e:	bf00      	nop
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	24001650 	.word	0x24001650
 8005588:	2400164c 	.word	0x2400164c

0800558c <bno055_setOperationMode>:

void bno055_setOperationMode(bno055_opmode_t mode) {
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	4603      	mov	r3, r0
 8005594:	71fb      	strb	r3, [r7, #7]
  BNO_Write(BNO055_OPR_MODE, mode);
 8005596:	79fb      	ldrb	r3, [r7, #7]
 8005598:	4619      	mov	r1, r3
 800559a:	203d      	movs	r0, #61	@ 0x3d
 800559c:	f7ff fcb6 	bl	8004f0c <BNO_Write>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 80055a0:	79fb      	ldrb	r3, [r7, #7]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d103      	bne.n	80055ae <bno055_setOperationMode+0x22>
    bno055_delay(5);
 80055a6:	2005      	movs	r0, #5
 80055a8:	f7ff fc76 	bl	8004e98 <bno055_delay>
  } else {
    bno055_delay(3);
  }
}
 80055ac:	e002      	b.n	80055b4 <bno055_setOperationMode+0x28>
    bno055_delay(3);
 80055ae:	2003      	movs	r0, #3
 80055b0:	f7ff fc72 	bl	8004e98 <bno055_delay>
}
 80055b4:	bf00      	nop
 80055b6:	3708      	adds	r7, #8
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 80055bc:	b580      	push	{r7, lr}
 80055be:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 80055c0:	2000      	movs	r0, #0
 80055c2:	f7ff ffe3 	bl	800558c <bno055_setOperationMode>
}
 80055c6:	bf00      	nop
 80055c8:	bd80      	pop	{r7, pc}

080055ca <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 80055ca:	b580      	push	{r7, lr}
 80055cc:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 80055ce:	200c      	movs	r0, #12
 80055d0:	f7ff ffdc 	bl	800558c <bno055_setOperationMode>
}
 80055d4:	bf00      	nop
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <BNO_GetCalibrationData>:

void BNO_GetCalibrationData(void){
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_OFFSET_X_LSB, 22);
 80055dc:	2116      	movs	r1, #22
 80055de:	2055      	movs	r0, #85	@ 0x55
 80055e0:	f7ff fc6e 	bl	8004ec0 <BNO_Read>
}
 80055e4:	bf00      	nop
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <BNO_SetCalibrationData>:

void BNO_SetCalibrationData(void){
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b086      	sub	sp, #24
 80055ec:	af00      	add	r7, sp, #0
	uint8_t buffer[22];

	  memcpy(&IMU.Calibration_Data.offset.accel, buffer, 6);
 80055ee:	463b      	mov	r3, r7
 80055f0:	2206      	movs	r2, #6
 80055f2:	4619      	mov	r1, r3
 80055f4:	4814      	ldr	r0, [pc, #80]	@ (8005648 <BNO_SetCalibrationData+0x60>)
 80055f6:	f012 fba0 	bl	8017d3a <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.mag, buffer + 6, 6);
 80055fa:	463b      	mov	r3, r7
 80055fc:	3306      	adds	r3, #6
 80055fe:	2206      	movs	r2, #6
 8005600:	4619      	mov	r1, r3
 8005602:	4812      	ldr	r0, [pc, #72]	@ (800564c <BNO_SetCalibrationData+0x64>)
 8005604:	f012 fb99 	bl	8017d3a <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.gyro, buffer + 12, 6);
 8005608:	463b      	mov	r3, r7
 800560a:	330c      	adds	r3, #12
 800560c:	2206      	movs	r2, #6
 800560e:	4619      	mov	r1, r3
 8005610:	480f      	ldr	r0, [pc, #60]	@ (8005650 <BNO_SetCalibrationData+0x68>)
 8005612:	f012 fb92 	bl	8017d3a <memcpy>
	  memcpy(&IMU.Calibration_Data.radius.accel, buffer + 18, 2);
 8005616:	463b      	mov	r3, r7
 8005618:	3312      	adds	r3, #18
 800561a:	881b      	ldrh	r3, [r3, #0]
 800561c:	b29a      	uxth	r2, r3
 800561e:	4b0d      	ldr	r3, [pc, #52]	@ (8005654 <BNO_SetCalibrationData+0x6c>)
 8005620:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
	  memcpy(&IMU.Calibration_Data.radius.mag, buffer + 20, 2);
 8005624:	463b      	mov	r3, r7
 8005626:	3314      	adds	r3, #20
 8005628:	881b      	ldrh	r3, [r3, #0]
 800562a:	b29a      	uxth	r2, r3
 800562c:	4b09      	ldr	r3, [pc, #36]	@ (8005654 <BNO_SetCalibrationData+0x6c>)
 800562e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

	BNO_Write_MB(BNO055_ACC_OFFSET_X_LSB, 22, buffer);
 8005632:	463b      	mov	r3, r7
 8005634:	461a      	mov	r2, r3
 8005636:	2116      	movs	r1, #22
 8005638:	2055      	movs	r0, #85	@ 0x55
 800563a:	f7ff fc89 	bl	8004f50 <BNO_Write_MB>
}
 800563e:	bf00      	nop
 8005640:	3718      	adds	r7, #24
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	240016a6 	.word	0x240016a6
 800564c:	240016a0 	.word	0x240016a0
 8005650:	2400169a 	.word	0x2400169a
 8005654:	24001650 	.word	0x24001650

08005658 <BNO_Init>:

void BNO_Init(void){
 8005658:	b580      	push	{r7, lr}
 800565a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, SET);
 800565c:	2201      	movs	r2, #1
 800565e:	2104      	movs	r1, #4
 8005660:	4808      	ldr	r0, [pc, #32]	@ (8005684 <BNO_Init+0x2c>)
 8005662:	f004 fe57 	bl	800a314 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IMU_BOOT_GPIO_Port, IMU_BOOT_Pin, SET);
 8005666:	2201      	movs	r2, #1
 8005668:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800566c:	4806      	ldr	r0, [pc, #24]	@ (8005688 <BNO_Init+0x30>)
 800566e:	f004 fe51 	bl	800a314 <HAL_GPIO_WritePin>

	bno055_delay(100);
 8005672:	2064      	movs	r0, #100	@ 0x64
 8005674:	f7ff fc10 	bl	8004e98 <bno055_delay>

	BNO_CurrentState = Reset;
 8005678:	4b04      	ldr	r3, [pc, #16]	@ (800568c <BNO_Init+0x34>)
 800567a:	2204      	movs	r2, #4
 800567c:	701a      	strb	r2, [r3, #0]
}
 800567e:	bf00      	nop
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	58020c00 	.word	0x58020c00
 8005688:	58020400 	.word	0x58020400
 800568c:	2400164c 	.word	0x2400164c

08005690 <BNO_Config>:

void BNO_Config(void){
 8005690:	b580      	push	{r7, lr}
 8005692:	af00      	add	r7, sp, #0
	static uint8_t ConfigFlag = 0;

	switch (ConfigFlag) {
 8005694:	4b20      	ldr	r3, [pc, #128]	@ (8005718 <BNO_Config+0x88>)
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	2b03      	cmp	r3, #3
 800569a:	d839      	bhi.n	8005710 <BNO_Config+0x80>
 800569c:	a201      	add	r2, pc, #4	@ (adr r2, 80056a4 <BNO_Config+0x14>)
 800569e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a2:	bf00      	nop
 80056a4:	080056b5 	.word	0x080056b5
 80056a8:	080056c5 	.word	0x080056c5
 80056ac:	080056d1 	.word	0x080056d1
 80056b0:	080056f3 	.word	0x080056f3
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 80056b4:	2100      	movs	r1, #0
 80056b6:	203f      	movs	r0, #63	@ 0x3f
 80056b8:	f7ff fc28 	bl	8004f0c <BNO_Write>
			ConfigFlag = 1;
 80056bc:	4b16      	ldr	r3, [pc, #88]	@ (8005718 <BNO_Config+0x88>)
 80056be:	2201      	movs	r2, #1
 80056c0:	701a      	strb	r2, [r3, #0]
			break;
 80056c2:	e026      	b.n	8005712 <BNO_Config+0x82>
		case 1:
			bno055_setOperationModeConfig();
 80056c4:	f7ff ff7a 	bl	80055bc <bno055_setOperationModeConfig>
			ConfigFlag = 2;
 80056c8:	4b13      	ldr	r3, [pc, #76]	@ (8005718 <BNO_Config+0x88>)
 80056ca:	2202      	movs	r2, #2
 80056cc:	701a      	strb	r2, [r3, #0]
			break;
 80056ce:	e020      	b.n	8005712 <BNO_Config+0x82>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 80056d0:	2101      	movs	r1, #1
 80056d2:	203d      	movs	r0, #61	@ 0x3d
 80056d4:	f7ff fbf4 	bl	8004ec0 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 80056d8:	4b10      	ldr	r3, [pc, #64]	@ (800571c <BNO_Config+0x8c>)
 80056da:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d103      	bne.n	80056ea <BNO_Config+0x5a>
				ConfigFlag = 3;
 80056e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005718 <BNO_Config+0x88>)
 80056e4:	2203      	movs	r2, #3
 80056e6:	701a      	strb	r2, [r3, #0]
			}
			else ConfigFlag = 1;
			break;
 80056e8:	e013      	b.n	8005712 <BNO_Config+0x82>
			else ConfigFlag = 1;
 80056ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005718 <BNO_Config+0x88>)
 80056ec:	2201      	movs	r2, #1
 80056ee:	701a      	strb	r2, [r3, #0]
			break;
 80056f0:	e00f      	b.n	8005712 <BNO_Config+0x82>
		case 3:
			BNO_Read(BNO055_CHIP_ID, 4);
 80056f2:	2104      	movs	r1, #4
 80056f4:	2000      	movs	r0, #0
 80056f6:	f7ff fbe3 	bl	8004ec0 <BNO_Read>

			if(IMU.ID == BNO055_ID){
 80056fa:	4b08      	ldr	r3, [pc, #32]	@ (800571c <BNO_Config+0x8c>)
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	2ba0      	cmp	r3, #160	@ 0xa0
 8005700:	d102      	bne.n	8005708 <BNO_Config+0x78>
				BNO_CurrentState = Calibration;
 8005702:	4b07      	ldr	r3, [pc, #28]	@ (8005720 <BNO_Config+0x90>)
 8005704:	2202      	movs	r2, #2
 8005706:	701a      	strb	r2, [r3, #0]
			}
			ConfigFlag = 0;
 8005708:	4b03      	ldr	r3, [pc, #12]	@ (8005718 <BNO_Config+0x88>)
 800570a:	2200      	movs	r2, #0
 800570c:	701a      	strb	r2, [r3, #0]
			break;
 800570e:	e000      	b.n	8005712 <BNO_Config+0x82>
		default:
			break;
 8005710:	bf00      	nop
	}

}
 8005712:	bf00      	nop
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	240016b0 	.word	0x240016b0
 800571c:	24001650 	.word	0x24001650
 8005720:	2400164c 	.word	0x2400164c

08005724 <BNO_CalibrationStatus>:

void BNO_CalibrationStatus(void){
 8005724:	b580      	push	{r7, lr}
 8005726:	af00      	add	r7, sp, #0
	static uint8_t CalibrationFlag = 0;
	static uint8_t Calibrated = 1;

	switch (CalibrationFlag) {
 8005728:	4b3d      	ldr	r3, [pc, #244]	@ (8005820 <BNO_CalibrationStatus+0xfc>)
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	2b07      	cmp	r3, #7
 800572e:	d870      	bhi.n	8005812 <BNO_CalibrationStatus+0xee>
 8005730:	a201      	add	r2, pc, #4	@ (adr r2, 8005738 <BNO_CalibrationStatus+0x14>)
 8005732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005736:	bf00      	nop
 8005738:	08005759 	.word	0x08005759
 800573c:	08005769 	.word	0x08005769
 8005740:	08005775 	.word	0x08005775
 8005744:	080057ad 	.word	0x080057ad
 8005748:	080057c7 	.word	0x080057c7
 800574c:	080057d3 	.word	0x080057d3
 8005750:	080057f5 	.word	0x080057f5
 8005754:	08005807 	.word	0x08005807
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 8005758:	2100      	movs	r1, #0
 800575a:	203f      	movs	r0, #63	@ 0x3f
 800575c:	f7ff fbd6 	bl	8004f0c <BNO_Write>
			CalibrationFlag = 1;
 8005760:	4b2f      	ldr	r3, [pc, #188]	@ (8005820 <BNO_CalibrationStatus+0xfc>)
 8005762:	2201      	movs	r2, #1
 8005764:	701a      	strb	r2, [r3, #0]
			break;
 8005766:	e059      	b.n	800581c <BNO_CalibrationStatus+0xf8>
		case 1:
			bno055_setOperationModeNDOF();
 8005768:	f7ff ff2f 	bl	80055ca <bno055_setOperationModeNDOF>
			CalibrationFlag = 2;
 800576c:	4b2c      	ldr	r3, [pc, #176]	@ (8005820 <BNO_CalibrationStatus+0xfc>)
 800576e:	2202      	movs	r2, #2
 8005770:	701a      	strb	r2, [r3, #0]
			break;
 8005772:	e053      	b.n	800581c <BNO_CalibrationStatus+0xf8>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 8005774:	2101      	movs	r1, #1
 8005776:	203d      	movs	r0, #61	@ 0x3d
 8005778:	f7ff fba2 	bl	8004ec0 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_NDOF){
 800577c:	4b29      	ldr	r3, [pc, #164]	@ (8005824 <BNO_CalibrationStatus+0x100>)
 800577e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005782:	2b0c      	cmp	r3, #12
 8005784:	d10e      	bne.n	80057a4 <BNO_CalibrationStatus+0x80>
				if(Calibrated){
 8005786:	4b28      	ldr	r3, [pc, #160]	@ (8005828 <BNO_CalibrationStatus+0x104>)
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d006      	beq.n	800579c <BNO_CalibrationStatus+0x78>
					CalibrationFlag = 0;
 800578e:	4b24      	ldr	r3, [pc, #144]	@ (8005820 <BNO_CalibrationStatus+0xfc>)
 8005790:	2200      	movs	r2, #0
 8005792:	701a      	strb	r2, [r3, #0]
					BNO_CurrentState = Operation;
 8005794:	4b25      	ldr	r3, [pc, #148]	@ (800582c <BNO_CalibrationStatus+0x108>)
 8005796:	2203      	movs	r2, #3
 8005798:	701a      	strb	r2, [r3, #0]
				}
				else CalibrationFlag = 3;
			}
			else CalibrationFlag = 1;
			break;
 800579a:	e03f      	b.n	800581c <BNO_CalibrationStatus+0xf8>
				else CalibrationFlag = 3;
 800579c:	4b20      	ldr	r3, [pc, #128]	@ (8005820 <BNO_CalibrationStatus+0xfc>)
 800579e:	2203      	movs	r2, #3
 80057a0:	701a      	strb	r2, [r3, #0]
			break;
 80057a2:	e03b      	b.n	800581c <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 1;
 80057a4:	4b1e      	ldr	r3, [pc, #120]	@ (8005820 <BNO_CalibrationStatus+0xfc>)
 80057a6:	2201      	movs	r2, #1
 80057a8:	701a      	strb	r2, [r3, #0]
			break;
 80057aa:	e037      	b.n	800581c <BNO_CalibrationStatus+0xf8>
		case 3:
			BNO_Read(BNO055_CALIB_STAT, 1);
 80057ac:	2101      	movs	r1, #1
 80057ae:	2035      	movs	r0, #53	@ 0x35
 80057b0:	f7ff fb86 	bl	8004ec0 <BNO_Read>
			if(IMU.CalSatus.Full == 0xFF){
 80057b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005824 <BNO_CalibrationStatus+0x100>)
 80057b6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80057ba:	2bff      	cmp	r3, #255	@ 0xff
 80057bc:	d12d      	bne.n	800581a <BNO_CalibrationStatus+0xf6>
				CalibrationFlag = 4;
 80057be:	4b18      	ldr	r3, [pc, #96]	@ (8005820 <BNO_CalibrationStatus+0xfc>)
 80057c0:	2204      	movs	r2, #4
 80057c2:	701a      	strb	r2, [r3, #0]
			}
			break;
 80057c4:	e029      	b.n	800581a <BNO_CalibrationStatus+0xf6>
		case 4:
			bno055_setOperationModeConfig();
 80057c6:	f7ff fef9 	bl	80055bc <bno055_setOperationModeConfig>
			CalibrationFlag = 5;
 80057ca:	4b15      	ldr	r3, [pc, #84]	@ (8005820 <BNO_CalibrationStatus+0xfc>)
 80057cc:	2205      	movs	r2, #5
 80057ce:	701a      	strb	r2, [r3, #0]
			break;
 80057d0:	e024      	b.n	800581c <BNO_CalibrationStatus+0xf8>
		case 5:
			BNO_Read(BNO055_OPR_MODE, 1);
 80057d2:	2101      	movs	r1, #1
 80057d4:	203d      	movs	r0, #61	@ 0x3d
 80057d6:	f7ff fb73 	bl	8004ec0 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 80057da:	4b12      	ldr	r3, [pc, #72]	@ (8005824 <BNO_CalibrationStatus+0x100>)
 80057dc:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d103      	bne.n	80057ec <BNO_CalibrationStatus+0xc8>
				CalibrationFlag = 6;
 80057e4:	4b0e      	ldr	r3, [pc, #56]	@ (8005820 <BNO_CalibrationStatus+0xfc>)
 80057e6:	2206      	movs	r2, #6
 80057e8:	701a      	strb	r2, [r3, #0]

			}
			else CalibrationFlag = 4;
			break;
 80057ea:	e017      	b.n	800581c <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 4;
 80057ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005820 <BNO_CalibrationStatus+0xfc>)
 80057ee:	2204      	movs	r2, #4
 80057f0:	701a      	strb	r2, [r3, #0]
			break;
 80057f2:	e013      	b.n	800581c <BNO_CalibrationStatus+0xf8>
		case 6:
			BNO_GetCalibrationData();
 80057f4:	f7ff fef0 	bl	80055d8 <BNO_GetCalibrationData>
			Calibrated = 1;
 80057f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005828 <BNO_CalibrationStatus+0x104>)
 80057fa:	2201      	movs	r2, #1
 80057fc:	701a      	strb	r2, [r3, #0]
			CalibrationFlag = 1;
 80057fe:	4b08      	ldr	r3, [pc, #32]	@ (8005820 <BNO_CalibrationStatus+0xfc>)
 8005800:	2201      	movs	r2, #1
 8005802:	701a      	strb	r2, [r3, #0]
			break;
 8005804:	e00a      	b.n	800581c <BNO_CalibrationStatus+0xf8>
		case 7:
			BNO_SetCalibrationData();
 8005806:	f7ff feef 	bl	80055e8 <BNO_SetCalibrationData>
			CalibrationFlag = 1;
 800580a:	4b05      	ldr	r3, [pc, #20]	@ (8005820 <BNO_CalibrationStatus+0xfc>)
 800580c:	2201      	movs	r2, #1
 800580e:	701a      	strb	r2, [r3, #0]
			break;
 8005810:	e004      	b.n	800581c <BNO_CalibrationStatus+0xf8>
		default:
			CalibrationFlag = 0;
 8005812:	4b03      	ldr	r3, [pc, #12]	@ (8005820 <BNO_CalibrationStatus+0xfc>)
 8005814:	2200      	movs	r2, #0
 8005816:	701a      	strb	r2, [r3, #0]
			break;
 8005818:	e000      	b.n	800581c <BNO_CalibrationStatus+0xf8>
			break;
 800581a:	bf00      	nop
    	BNO_CurrentState = Operation;
    }
    else bno055_setOperationModeNDOF();
    */

}
 800581c:	bf00      	nop
 800581e:	bd80      	pop	{r7, pc}
 8005820:	240016b1 	.word	0x240016b1
 8005824:	24001650 	.word	0x24001650
 8005828:	24000008 	.word	0x24000008
 800582c:	2400164c 	.word	0x2400164c

08005830 <BNO_GetData>:

void BNO_GetData(void){
 8005830:	b580      	push	{r7, lr}
 8005832:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_DATA_X_LSB,24);
 8005834:	2118      	movs	r1, #24
 8005836:	2008      	movs	r0, #8
 8005838:	f7ff fb42 	bl	8004ec0 <BNO_Read>
}
 800583c:	bf00      	nop
 800583e:	bd80      	pop	{r7, pc}

08005840 <BNO_Receive>:

void BNO_Receive(uint8_t Buffer){
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	4603      	mov	r3, r0
 8005848:	71fb      	strb	r3, [r7, #7]
	static uint8_t MsgSize = 0;
	static uint8_t Counter = 0;

	BNO_ComsCounter = 0;
 800584a:	4b2c      	ldr	r3, [pc, #176]	@ (80058fc <BNO_Receive+0xbc>)
 800584c:	2200      	movs	r2, #0
 800584e:	701a      	strb	r2, [r3, #0]

	switch (BNO_Rx_Status) {
 8005850:	4b2b      	ldr	r3, [pc, #172]	@ (8005900 <BNO_Receive+0xc0>)
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	2bff      	cmp	r3, #255	@ 0xff
 8005856:	d027      	beq.n	80058a8 <BNO_Receive+0x68>
 8005858:	2bff      	cmp	r3, #255	@ 0xff
 800585a:	dc46      	bgt.n	80058ea <BNO_Receive+0xaa>
 800585c:	2bee      	cmp	r3, #238	@ 0xee
 800585e:	d017      	beq.n	8005890 <BNO_Receive+0x50>
 8005860:	2bee      	cmp	r3, #238	@ 0xee
 8005862:	dc42      	bgt.n	80058ea <BNO_Receive+0xaa>
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <BNO_Receive+0x2e>
 8005868:	2bbb      	cmp	r3, #187	@ 0xbb
 800586a:	d00a      	beq.n	8005882 <BNO_Receive+0x42>
				BNO_EmptyingBuffer();
			}

			break;
		default:
			break;
 800586c:	e03d      	b.n	80058ea <BNO_Receive+0xaa>
			if(Buffer == Read_Response || Buffer == Header) BNO_Rx_Status = Buffer;
 800586e:	79fb      	ldrb	r3, [r7, #7]
 8005870:	2bbb      	cmp	r3, #187	@ 0xbb
 8005872:	d002      	beq.n	800587a <BNO_Receive+0x3a>
 8005874:	79fb      	ldrb	r3, [r7, #7]
 8005876:	2bee      	cmp	r3, #238	@ 0xee
 8005878:	d139      	bne.n	80058ee <BNO_Receive+0xae>
 800587a:	4a21      	ldr	r2, [pc, #132]	@ (8005900 <BNO_Receive+0xc0>)
 800587c:	79fb      	ldrb	r3, [r7, #7]
 800587e:	7013      	strb	r3, [r2, #0]
			break;
 8005880:	e035      	b.n	80058ee <BNO_Receive+0xae>
			MsgSize = Buffer;
 8005882:	4a20      	ldr	r2, [pc, #128]	@ (8005904 <BNO_Receive+0xc4>)
 8005884:	79fb      	ldrb	r3, [r7, #7]
 8005886:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = Emptying_Buffer;
 8005888:	4b1d      	ldr	r3, [pc, #116]	@ (8005900 <BNO_Receive+0xc0>)
 800588a:	22ff      	movs	r2, #255	@ 0xff
 800588c:	701a      	strb	r2, [r3, #0]
			break;
 800588e:	e031      	b.n	80058f4 <BNO_Receive+0xb4>
			BNO_ErrorHandler = Buffer;
 8005890:	4a1d      	ldr	r2, [pc, #116]	@ (8005908 <BNO_Receive+0xc8>)
 8005892:	79fb      	ldrb	r3, [r7, #7]
 8005894:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = AwaitingMsg;
 8005896:	4b1a      	ldr	r3, [pc, #104]	@ (8005900 <BNO_Receive+0xc0>)
 8005898:	2200      	movs	r2, #0
 800589a:	701a      	strb	r2, [r3, #0]
			memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 800589c:	22ff      	movs	r2, #255	@ 0xff
 800589e:	2100      	movs	r1, #0
 80058a0:	481a      	ldr	r0, [pc, #104]	@ (800590c <BNO_Receive+0xcc>)
 80058a2:	f012 f9b0 	bl	8017c06 <memset>
			break;
 80058a6:	e025      	b.n	80058f4 <BNO_Receive+0xb4>
			BNO_RxBuffer[Counter + 1] = Buffer;
 80058a8:	4b19      	ldr	r3, [pc, #100]	@ (8005910 <BNO_Receive+0xd0>)
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	3301      	adds	r3, #1
 80058ae:	4917      	ldr	r1, [pc, #92]	@ (800590c <BNO_Receive+0xcc>)
 80058b0:	79fa      	ldrb	r2, [r7, #7]
 80058b2:	54ca      	strb	r2, [r1, r3]
			Counter++;
 80058b4:	4b16      	ldr	r3, [pc, #88]	@ (8005910 <BNO_Receive+0xd0>)
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	3301      	adds	r3, #1
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	4b14      	ldr	r3, [pc, #80]	@ (8005910 <BNO_Receive+0xd0>)
 80058be:	701a      	strb	r2, [r3, #0]
			if(Counter == MsgSize){
 80058c0:	4b13      	ldr	r3, [pc, #76]	@ (8005910 <BNO_Receive+0xd0>)
 80058c2:	781a      	ldrb	r2, [r3, #0]
 80058c4:	4b0f      	ldr	r3, [pc, #60]	@ (8005904 <BNO_Receive+0xc4>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d112      	bne.n	80058f2 <BNO_Receive+0xb2>
				Counter = 0;
 80058cc:	4b10      	ldr	r3, [pc, #64]	@ (8005910 <BNO_Receive+0xd0>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	701a      	strb	r2, [r3, #0]
				MsgSize = 0;
 80058d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005904 <BNO_Receive+0xc4>)
 80058d4:	2200      	movs	r2, #0
 80058d6:	701a      	strb	r2, [r3, #0]
				BNO_Rx_Status = AwaitingMsg;
 80058d8:	4b09      	ldr	r3, [pc, #36]	@ (8005900 <BNO_Receive+0xc0>)
 80058da:	2200      	movs	r2, #0
 80058dc:	701a      	strb	r2, [r3, #0]
				BNO_ErrorHandler = ReadSucces;
 80058de:	4b0a      	ldr	r3, [pc, #40]	@ (8005908 <BNO_Receive+0xc8>)
 80058e0:	220b      	movs	r2, #11
 80058e2:	701a      	strb	r2, [r3, #0]
				BNO_EmptyingBuffer();
 80058e4:	f7ff fe20 	bl	8005528 <BNO_EmptyingBuffer>
			break;
 80058e8:	e003      	b.n	80058f2 <BNO_Receive+0xb2>
			break;
 80058ea:	bf00      	nop
 80058ec:	e002      	b.n	80058f4 <BNO_Receive+0xb4>
			break;
 80058ee:	bf00      	nop
 80058f0:	e000      	b.n	80058f4 <BNO_Receive+0xb4>
			break;
 80058f2:	bf00      	nop
	}
}
 80058f4:	bf00      	nop
 80058f6:	3708      	adds	r7, #8
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	2400164a 	.word	0x2400164a
 8005900:	24001648 	.word	0x24001648
 8005904:	240016b2 	.word	0x240016b2
 8005908:	24001649 	.word	0x24001649
 800590c:	24001548 	.word	0x24001548
 8005910:	240016b3 	.word	0x240016b3

08005914 <BNO_FaultManager>:

void BNO_FaultManager(void){
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
	if(BNO_ComsCounter > 3){
 800591a:	4b13      	ldr	r3, [pc, #76]	@ (8005968 <BNO_FaultManager+0x54>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	2b03      	cmp	r3, #3
 8005920:	d90f      	bls.n	8005942 <BNO_FaultManager+0x2e>
		Reset_UART(&huart3);
 8005922:	4812      	ldr	r0, [pc, #72]	@ (800596c <BNO_FaultManager+0x58>)
 8005924:	f7fe fd7c 	bl	8004420 <Reset_UART>
		BNO_Rx_Status = AwaitingMsg;
 8005928:	4b11      	ldr	r3, [pc, #68]	@ (8005970 <BNO_FaultManager+0x5c>)
 800592a:	2200      	movs	r2, #0
 800592c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 800592e:	2201      	movs	r2, #1
 8005930:	4910      	ldr	r1, [pc, #64]	@ (8005974 <BNO_FaultManager+0x60>)
 8005932:	480e      	ldr	r0, [pc, #56]	@ (800596c <BNO_FaultManager+0x58>)
 8005934:	f00a f882 	bl	800fa3c <HAL_UART_Receive_DMA>
		memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 8005938:	22ff      	movs	r2, #255	@ 0xff
 800593a:	2100      	movs	r1, #0
 800593c:	480e      	ldr	r0, [pc, #56]	@ (8005978 <BNO_FaultManager+0x64>)
 800593e:	f012 f962 	bl	8017c06 <memset>
	}
	if(BNO_ErrorHandler == WRONG_START_BYTE){
 8005942:	4b0e      	ldr	r3, [pc, #56]	@ (800597c <BNO_FaultManager+0x68>)
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	2b06      	cmp	r3, #6
 8005948:	d10a      	bne.n	8005960 <BNO_FaultManager+0x4c>
		uint8_t Buffer = 0x00;
 800594a:	2300      	movs	r3, #0
 800594c:	71fb      	strb	r3, [r7, #7]

		HAL_UART_Transmit_IT(&huart3, &Buffer, 1);
 800594e:	1dfb      	adds	r3, r7, #7
 8005950:	2201      	movs	r2, #1
 8005952:	4619      	mov	r1, r3
 8005954:	4805      	ldr	r0, [pc, #20]	@ (800596c <BNO_FaultManager+0x58>)
 8005956:	f009 ff91 	bl	800f87c <HAL_UART_Transmit_IT>
		BNO_ErrorHandler = 0;
 800595a:	4b08      	ldr	r3, [pc, #32]	@ (800597c <BNO_FaultManager+0x68>)
 800595c:	2200      	movs	r2, #0
 800595e:	701a      	strb	r2, [r3, #0]
	}
}
 8005960:	bf00      	nop
 8005962:	3708      	adds	r7, #8
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	2400164a 	.word	0x2400164a
 800596c:	24001280 	.word	0x24001280
 8005970:	24001648 	.word	0x24001648
 8005974:	24001647 	.word	0x24001647
 8005978:	24001548 	.word	0x24001548
 800597c:	24001649 	.word	0x24001649

08005980 <BNO_Tasks>:

void BNO_Tasks(void){
 8005980:	b580      	push	{r7, lr}
 8005982:	af00      	add	r7, sp, #0
	if(BNO_DelayCounter == 0){
 8005984:	4b1b      	ldr	r3, [pc, #108]	@ (80059f4 <BNO_Tasks+0x74>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d128      	bne.n	80059de <BNO_Tasks+0x5e>
		switch (BNO_CurrentState) {
 800598c:	4b1a      	ldr	r3, [pc, #104]	@ (80059f8 <BNO_Tasks+0x78>)
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	2b04      	cmp	r3, #4
 8005992:	d81c      	bhi.n	80059ce <BNO_Tasks+0x4e>
 8005994:	a201      	add	r2, pc, #4	@ (adr r2, 800599c <BNO_Tasks+0x1c>)
 8005996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599a:	bf00      	nop
 800599c:	080059b1 	.word	0x080059b1
 80059a0:	080059bd 	.word	0x080059bd
 80059a4:	080059c3 	.word	0x080059c3
 80059a8:	080059c9 	.word	0x080059c9
 80059ac:	080059b7 	.word	0x080059b7
			case Init:
				BNO_Init();
 80059b0:	f7ff fe52 	bl	8005658 <BNO_Init>
				break;
 80059b4:	e00c      	b.n	80059d0 <BNO_Tasks+0x50>
			case Reset:
				BNO_SWReset();
 80059b6:	f7ff fdd3 	bl	8005560 <BNO_SWReset>
			break;
 80059ba:	e009      	b.n	80059d0 <BNO_Tasks+0x50>
			case Configuration:
				BNO_Config();
 80059bc:	f7ff fe68 	bl	8005690 <BNO_Config>
				break;
 80059c0:	e006      	b.n	80059d0 <BNO_Tasks+0x50>
			case Calibration:
				BNO_CalibrationStatus();
 80059c2:	f7ff feaf 	bl	8005724 <BNO_CalibrationStatus>
				break;
 80059c6:	e003      	b.n	80059d0 <BNO_Tasks+0x50>
			case Operation:
				BNO_GetData();
 80059c8:	f7ff ff32 	bl	8005830 <BNO_GetData>
				break;
 80059cc:	e000      	b.n	80059d0 <BNO_Tasks+0x50>

			default:
				break;
 80059ce:	bf00      	nop
		}
		++BNO_ComsCounter;
 80059d0:	4b0a      	ldr	r3, [pc, #40]	@ (80059fc <BNO_Tasks+0x7c>)
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	3301      	adds	r3, #1
 80059d6:	b2da      	uxtb	r2, r3
 80059d8:	4b08      	ldr	r3, [pc, #32]	@ (80059fc <BNO_Tasks+0x7c>)
 80059da:	701a      	strb	r2, [r3, #0]
 80059dc:	e005      	b.n	80059ea <BNO_Tasks+0x6a>
	}
	else{
		--BNO_DelayCounter;
 80059de:	4b05      	ldr	r3, [pc, #20]	@ (80059f4 <BNO_Tasks+0x74>)
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	3b01      	subs	r3, #1
 80059e4:	b2da      	uxtb	r2, r3
 80059e6:	4b03      	ldr	r3, [pc, #12]	@ (80059f4 <BNO_Tasks+0x74>)
 80059e8:	701a      	strb	r2, [r3, #0]
	}
	BNO_FaultManager();
 80059ea:	f7ff ff93 	bl	8005914 <BNO_FaultManager>
}
 80059ee:	bf00      	nop
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	2400164b 	.word	0x2400164b
 80059f8:	2400164c 	.word	0x2400164c
 80059fc:	2400164a 	.word	0x2400164a

08005a00 <LED_blink>:

		.G_LED.LED_GPIO_GPIOx = LED_5_GPIO_Port,
		.G_LED.LED_GPIO_Pin   = LED_5_Pin
};

LED_config_t LED_blink(LED_config_t LED){
 8005a00:	b084      	sub	sp, #16
 8005a02:	b590      	push	{r4, r7, lr}
 8005a04:	b083      	sub	sp, #12
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	f107 001c 	add.w	r0, r7, #28
 8005a0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}

		switch (LED.Blink_status) {
 8005a12:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d002      	beq.n	8005a20 <LED_blink+0x20>
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d010      	beq.n	8005a40 <LED_blink+0x40>
 8005a1e:	e01f      	b.n	8005a60 <LED_blink+0x60>
			case 0x00:
				if(LED.count >= LED.Time_Off){
 8005a20:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005a22:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d31f      	bcc.n	8005a68 <LED_blink+0x68>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	8c39      	ldrh	r1, [r7, #32]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f004 fc70 	bl	800a314 <HAL_GPIO_WritePin>
					LED.Blink_status = 1;
 8005a34:	2301      	movs	r3, #1
 8005a36:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 8005a3e:	e013      	b.n	8005a68 <LED_blink+0x68>
			case 0x01:
				if(LED.count >= LED.Time_On){
 8005a40:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005a42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d311      	bcc.n	8005a6c <LED_blink+0x6c>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	8c39      	ldrh	r1, [r7, #32]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f004 fc60 	bl	800a314 <HAL_GPIO_WritePin>
					LED.Blink_status = 0;
 8005a54:	2300      	movs	r3, #0
 8005a56:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 8005a5e:	e005      	b.n	8005a6c <LED_blink+0x6c>
			default:
				LED.Blink_status = 0;
 8005a60:	2300      	movs	r3, #0
 8005a62:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
				break;
 8005a66:	e002      	b.n	8005a6e <LED_blink+0x6e>
				break;
 8005a68:	bf00      	nop
 8005a6a:	e000      	b.n	8005a6e <LED_blink+0x6e>
				break;
 8005a6c:	bf00      	nop
		}

	LED.count++;
 8005a6e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005a70:	3301      	adds	r3, #1
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	853b      	strh	r3, [r7, #40]	@ 0x28
	return LED;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	461c      	mov	r4, r3
 8005a7a:	f107 031c 	add.w	r3, r7, #28
 8005a7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005a8e:	b004      	add	sp, #16
 8005a90:	4770      	bx	lr

08005a92 <LED_Rutine>:

LED_config_t LED_Rutine(LED_config_t LED){
 8005a92:	b084      	sub	sp, #16
 8005a94:	b590      	push	{r4, r7, lr}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af02      	add	r7, sp, #8
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	f107 001c 	add.w	r0, r7, #28
 8005aa0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(LED.LED_status == 1){
 8005aa4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d117      	bne.n	8005adc <LED_Rutine+0x4a>
		switch (LED.Sequence) {
 8005aac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d002      	beq.n	8005aba <LED_Rutine+0x28>
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d007      	beq.n	8005ac8 <LED_Rutine+0x36>
				break;
			case Blink:
				LED = LED_blink(LED);
				break;
			default:
				break;
 8005ab8:	e018      	b.n	8005aec <LED_Rutine+0x5a>
				HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	8c39      	ldrh	r1, [r7, #32]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f004 fc27 	bl	800a314 <HAL_GPIO_WritePin>
				break;
 8005ac6:	e011      	b.n	8005aec <LED_Rutine+0x5a>
				LED = LED_blink(LED);
 8005ac8:	f107 001c 	add.w	r0, r7, #28
 8005acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ace:	9300      	str	r3, [sp, #0]
 8005ad0:	f107 031c 	add.w	r3, r7, #28
 8005ad4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ad6:	f7ff ff93 	bl	8005a00 <LED_blink>
				break;
 8005ada:	e007      	b.n	8005aec <LED_Rutine+0x5a>
		}
	}
	else{
		HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	8c39      	ldrh	r1, [r7, #32]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f004 fc16 	bl	800a314 <HAL_GPIO_WritePin>
		LED.count = 0;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	853b      	strh	r3, [r7, #40]	@ 0x28
	}
	return LED;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	461c      	mov	r4, r3
 8005af0:	f107 031c 	add.w	r3, r7, #28
 8005af4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005af6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005b04:	b004      	add	sp, #16
 8005b06:	4770      	bx	lr

08005b08 <LED_Tasks>:

void LED_Tasks (void){
 8005b08:	b590      	push	{r4, r7, lr}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af02      	add	r7, sp, #8
	LED_Info.R_LED = LED_Rutine(LED_Info.R_LED);
 8005b0e:	4c24      	ldr	r4, [pc, #144]	@ (8005ba0 <LED_Tasks+0x98>)
 8005b10:	4638      	mov	r0, r7
 8005b12:	4b23      	ldr	r3, [pc, #140]	@ (8005ba0 <LED_Tasks+0x98>)
 8005b14:	68da      	ldr	r2, [r3, #12]
 8005b16:	9200      	str	r2, [sp, #0]
 8005b18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b1a:	f7ff ffba 	bl	8005a92 <LED_Rutine>
 8005b1e:	463b      	mov	r3, r7
 8005b20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED1 = LED_Rutine(LED_Info.B_LED1);
 8005b26:	4c1e      	ldr	r4, [pc, #120]	@ (8005ba0 <LED_Tasks+0x98>)
 8005b28:	4638      	mov	r0, r7
 8005b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8005ba0 <LED_Tasks+0x98>)
 8005b2c:	69da      	ldr	r2, [r3, #28]
 8005b2e:	9200      	str	r2, [sp, #0]
 8005b30:	3310      	adds	r3, #16
 8005b32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b34:	f7ff ffad 	bl	8005a92 <LED_Rutine>
 8005b38:	3410      	adds	r4, #16
 8005b3a:	463b      	mov	r3, r7
 8005b3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED2 = LED_Rutine(LED_Info.B_LED2);
 8005b42:	4c17      	ldr	r4, [pc, #92]	@ (8005ba0 <LED_Tasks+0x98>)
 8005b44:	4638      	mov	r0, r7
 8005b46:	4b16      	ldr	r3, [pc, #88]	@ (8005ba0 <LED_Tasks+0x98>)
 8005b48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b4a:	9200      	str	r2, [sp, #0]
 8005b4c:	3320      	adds	r3, #32
 8005b4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b50:	f7ff ff9f 	bl	8005a92 <LED_Rutine>
 8005b54:	3420      	adds	r4, #32
 8005b56:	463b      	mov	r3, r7
 8005b58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED3 = LED_Rutine(LED_Info.B_LED3);
 8005b5e:	4c10      	ldr	r4, [pc, #64]	@ (8005ba0 <LED_Tasks+0x98>)
 8005b60:	4638      	mov	r0, r7
 8005b62:	4b0f      	ldr	r3, [pc, #60]	@ (8005ba0 <LED_Tasks+0x98>)
 8005b64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b66:	9200      	str	r2, [sp, #0]
 8005b68:	3330      	adds	r3, #48	@ 0x30
 8005b6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b6c:	f7ff ff91 	bl	8005a92 <LED_Rutine>
 8005b70:	3430      	adds	r4, #48	@ 0x30
 8005b72:	463b      	mov	r3, r7
 8005b74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.G_LED = LED_Rutine(LED_Info.G_LED);
 8005b7a:	4c09      	ldr	r4, [pc, #36]	@ (8005ba0 <LED_Tasks+0x98>)
 8005b7c:	4638      	mov	r0, r7
 8005b7e:	4b08      	ldr	r3, [pc, #32]	@ (8005ba0 <LED_Tasks+0x98>)
 8005b80:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b82:	9200      	str	r2, [sp, #0]
 8005b84:	3340      	adds	r3, #64	@ 0x40
 8005b86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b88:	f7ff ff83 	bl	8005a92 <LED_Rutine>
 8005b8c:	3440      	adds	r4, #64	@ 0x40
 8005b8e:	463b      	mov	r3, r7
 8005b90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8005b96:	bf00      	nop
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd90      	pop	{r4, r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	2400000c 	.word	0x2400000c

08005ba4 <LR03_AT>:

uint8_t LR03_RxBuffer[256] = {0};

uint8_t Test_1;

void LR03_AT(void){
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	af00      	add	r7, sp, #0

	HAL_UART_Transmit_IT(&huart6, (uint8_t*)"+++\r\n", 5);
 8005ba8:	2205      	movs	r2, #5
 8005baa:	4903      	ldr	r1, [pc, #12]	@ (8005bb8 <LR03_AT+0x14>)
 8005bac:	4803      	ldr	r0, [pc, #12]	@ (8005bbc <LR03_AT+0x18>)
 8005bae:	f009 fe65 	bl	800f87c <HAL_UART_Transmit_IT>
}
 8005bb2:	bf00      	nop
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	08019cf8 	.word	0x08019cf8
 8005bbc:	24001314 	.word	0x24001314

08005bc0 <LR03_Level>:

void LR03_Level(uint8_t Level){
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	71fb      	strb	r3, [r7, #7]
	static uint8_t Level_Command[] = {"AT+LEVEL7\r\n"};
	if(Level > 7) Level = 7;
 8005bca:	79fb      	ldrb	r3, [r7, #7]
 8005bcc:	2b07      	cmp	r3, #7
 8005bce:	d901      	bls.n	8005bd4 <LR03_Level+0x14>
 8005bd0:	2307      	movs	r3, #7
 8005bd2:	71fb      	strb	r3, [r7, #7]
	if(Level < 1) Level = 1;
 8005bd4:	79fb      	ldrb	r3, [r7, #7]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <LR03_Level+0x1e>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	71fb      	strb	r3, [r7, #7]
	Level_Command[8] = Level + 48;
 8005bde:	79fb      	ldrb	r3, [r7, #7]
 8005be0:	3330      	adds	r3, #48	@ 0x30
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	4b05      	ldr	r3, [pc, #20]	@ (8005bfc <LR03_Level+0x3c>)
 8005be6:	721a      	strb	r2, [r3, #8]
	HAL_UART_Transmit_IT(&huart6, Level_Command, 11);
 8005be8:	220b      	movs	r2, #11
 8005bea:	4904      	ldr	r1, [pc, #16]	@ (8005bfc <LR03_Level+0x3c>)
 8005bec:	4804      	ldr	r0, [pc, #16]	@ (8005c00 <LR03_Level+0x40>)
 8005bee:	f009 fe45 	bl	800f87c <HAL_UART_Transmit_IT>
}
 8005bf2:	bf00      	nop
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	2400005c 	.word	0x2400005c
 8005c00:	24001314 	.word	0x24001314

08005c04 <LR03_Receive>:

void LR03_Receive(uint8_t Data){
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	71fb      	strb	r3, [r7, #7]
	static uint8_t DataPointer = 0;
	LR03_RxBuffer[DataPointer] = Data;
 8005c0e:	4b09      	ldr	r3, [pc, #36]	@ (8005c34 <LR03_Receive+0x30>)
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	4619      	mov	r1, r3
 8005c14:	4a08      	ldr	r2, [pc, #32]	@ (8005c38 <LR03_Receive+0x34>)
 8005c16:	79fb      	ldrb	r3, [r7, #7]
 8005c18:	5453      	strb	r3, [r2, r1]
	DataPointer++;
 8005c1a:	4b06      	ldr	r3, [pc, #24]	@ (8005c34 <LR03_Receive+0x30>)
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	4b04      	ldr	r3, [pc, #16]	@ (8005c34 <LR03_Receive+0x30>)
 8005c24:	701a      	strb	r2, [r3, #0]
}
 8005c26:	bf00      	nop
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	240017b5 	.word	0x240017b5
 8005c38:	240016b4 	.word	0x240016b4

08005c3c <LR03_StateMachine>:

void LR03_StateMachine(void){
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	af00      	add	r7, sp, #0

	switch (Test_1) {
 8005c40:	4b09      	ldr	r3, [pc, #36]	@ (8005c68 <LR03_StateMachine+0x2c>)
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d002      	beq.n	8005c4e <LR03_StateMachine+0x12>
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d003      	beq.n	8005c54 <LR03_StateMachine+0x18>
			break;
		case 2:
			LR03_Level(7);
			break;
		default:
			break;
 8005c4c:	e006      	b.n	8005c5c <LR03_StateMachine+0x20>
			LR03_AT();
 8005c4e:	f7ff ffa9 	bl	8005ba4 <LR03_AT>
			break;
 8005c52:	e003      	b.n	8005c5c <LR03_StateMachine+0x20>
			LR03_Level(7);
 8005c54:	2007      	movs	r0, #7
 8005c56:	f7ff ffb3 	bl	8005bc0 <LR03_Level>
			break;
 8005c5a:	bf00      	nop
	}
	Test_1 = 0;
 8005c5c:	4b02      	ldr	r3, [pc, #8]	@ (8005c68 <LR03_StateMachine+0x2c>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	701a      	strb	r2, [r3, #0]
}
 8005c62:	bf00      	nop
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	240017b4 	.word	0x240017b4

08005c6c <PWM_Assign>:
Servo_mgmt_s PWM_Output = {
	    .S = {1500, 1500, 1500, 1500, 1500,
	          1500, 1500, 1500, 1500, 1500}
	};

void PWM_Assign(void) {
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	af00      	add	r7, sp, #0
    // Timer 2 (Canales 1, 2, 10, 9)
    TIM2->CCR1 = PWM_Output.S[0];  // Canal_1 (S[0])
 8005c70:	4b2a      	ldr	r3, [pc, #168]	@ (8005d1c <PWM_Assign+0xb0>)
 8005c72:	881a      	ldrh	r2, [r3, #0]
 8005c74:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005c78:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2->CCR2 = PWM_Output.S[1];  // Canal_2 (S[1])
 8005c7a:	4b28      	ldr	r3, [pc, #160]	@ (8005d1c <PWM_Assign+0xb0>)
 8005c7c:	885a      	ldrh	r2, [r3, #2]
 8005c7e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005c82:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM2->CCR3 = PWM_Output.S[9];  // Canal_10 (S[9])
 8005c84:	4b25      	ldr	r3, [pc, #148]	@ (8005d1c <PWM_Assign+0xb0>)
 8005c86:	8a5a      	ldrh	r2, [r3, #18]
 8005c88:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005c8c:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2->CCR4 = PWM_Output.S[8];  // Canal_9 (S[8])
 8005c8e:	4b23      	ldr	r3, [pc, #140]	@ (8005d1c <PWM_Assign+0xb0>)
 8005c90:	8a1a      	ldrh	r2, [r3, #16]
 8005c92:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005c96:	641a      	str	r2, [r3, #64]	@ 0x40

    // Timer 3 (Canales 3, 4)
    TIM3->CCR1 = PWM_Output.S[2];  // Canal_3 (S[2])
 8005c98:	4b20      	ldr	r3, [pc, #128]	@ (8005d1c <PWM_Assign+0xb0>)
 8005c9a:	889a      	ldrh	r2, [r3, #4]
 8005c9c:	4b20      	ldr	r3, [pc, #128]	@ (8005d20 <PWM_Assign+0xb4>)
 8005c9e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3->CCR2 = PWM_Output.S[3];  // Canal_4 (S[3])
 8005ca0:	4b1e      	ldr	r3, [pc, #120]	@ (8005d1c <PWM_Assign+0xb0>)
 8005ca2:	88da      	ldrh	r2, [r3, #6]
 8005ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8005d20 <PWM_Assign+0xb4>)
 8005ca6:	639a      	str	r2, [r3, #56]	@ 0x38

    // Timer 4 (Canales 5-8)
    TIM4->CCR1 = PWM_Output.S[4];  // Canal_5 (S[4])
 8005ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8005d1c <PWM_Assign+0xb0>)
 8005caa:	891a      	ldrh	r2, [r3, #8]
 8005cac:	4b1d      	ldr	r3, [pc, #116]	@ (8005d24 <PWM_Assign+0xb8>)
 8005cae:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM4->CCR2 = PWM_Output.S[5];  // Canal_6 (S[5])
 8005cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8005d1c <PWM_Assign+0xb0>)
 8005cb2:	895a      	ldrh	r2, [r3, #10]
 8005cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8005d24 <PWM_Assign+0xb8>)
 8005cb6:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM4->CCR3 = PWM_Output.S[6];  // Canal_7 (S[6])
 8005cb8:	4b18      	ldr	r3, [pc, #96]	@ (8005d1c <PWM_Assign+0xb0>)
 8005cba:	899a      	ldrh	r2, [r3, #12]
 8005cbc:	4b19      	ldr	r3, [pc, #100]	@ (8005d24 <PWM_Assign+0xb8>)
 8005cbe:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM4->CCR4 = PWM_Output.S[7];  // Canal_8 (S[7])
 8005cc0:	4b16      	ldr	r3, [pc, #88]	@ (8005d1c <PWM_Assign+0xb0>)
 8005cc2:	89da      	ldrh	r2, [r3, #14]
 8005cc4:	4b17      	ldr	r3, [pc, #92]	@ (8005d24 <PWM_Assign+0xb8>)
 8005cc6:	641a      	str	r2, [r3, #64]	@ 0x40

    // Iniciar PWM (igual que antes)
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8005cc8:	2100      	movs	r1, #0
 8005cca:	4817      	ldr	r0, [pc, #92]	@ (8005d28 <PWM_Assign+0xbc>)
 8005ccc:	f008 fd58 	bl	800e780 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8005cd0:	2104      	movs	r1, #4
 8005cd2:	4815      	ldr	r0, [pc, #84]	@ (8005d28 <PWM_Assign+0xbc>)
 8005cd4:	f008 fd54 	bl	800e780 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8005cd8:	2108      	movs	r1, #8
 8005cda:	4813      	ldr	r0, [pc, #76]	@ (8005d28 <PWM_Assign+0xbc>)
 8005cdc:	f008 fd50 	bl	800e780 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8005ce0:	210c      	movs	r1, #12
 8005ce2:	4811      	ldr	r0, [pc, #68]	@ (8005d28 <PWM_Assign+0xbc>)
 8005ce4:	f008 fd4c 	bl	800e780 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8005ce8:	2100      	movs	r1, #0
 8005cea:	4810      	ldr	r0, [pc, #64]	@ (8005d2c <PWM_Assign+0xc0>)
 8005cec:	f008 fd48 	bl	800e780 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8005cf0:	2104      	movs	r1, #4
 8005cf2:	480e      	ldr	r0, [pc, #56]	@ (8005d2c <PWM_Assign+0xc0>)
 8005cf4:	f008 fd44 	bl	800e780 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	480d      	ldr	r0, [pc, #52]	@ (8005d30 <PWM_Assign+0xc4>)
 8005cfc:	f008 fd40 	bl	800e780 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8005d00:	2104      	movs	r1, #4
 8005d02:	480b      	ldr	r0, [pc, #44]	@ (8005d30 <PWM_Assign+0xc4>)
 8005d04:	f008 fd3c 	bl	800e780 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8005d08:	2108      	movs	r1, #8
 8005d0a:	4809      	ldr	r0, [pc, #36]	@ (8005d30 <PWM_Assign+0xc4>)
 8005d0c:	f008 fd38 	bl	800e780 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8005d10:	210c      	movs	r1, #12
 8005d12:	4807      	ldr	r0, [pc, #28]	@ (8005d30 <PWM_Assign+0xc4>)
 8005d14:	f008 fd34 	bl	800e780 <HAL_TIM_PWM_Start>
}
 8005d18:	bf00      	nop
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	24000068 	.word	0x24000068
 8005d20:	40000400 	.word	0x40000400
 8005d24:	40000800 	.word	0x40000800
 8005d28:	24001028 	.word	0x24001028
 8005d2c:	24001074 	.word	0x24001074
 8005d30:	240010c0 	.word	0x240010c0

08005d34 <SBUS_init>:

extern UART_HandleTypeDef huart1;
#define SBUS_UART_handler &huart1


void SBUS_init(void){
 8005d34:	b580      	push	{r7, lr}
 8005d36:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(SBUS_UART_handler, &SBUS_RxBuffer, 1);
 8005d38:	2201      	movs	r2, #1
 8005d3a:	4903      	ldr	r1, [pc, #12]	@ (8005d48 <SBUS_init+0x14>)
 8005d3c:	4803      	ldr	r0, [pc, #12]	@ (8005d4c <SBUS_init+0x18>)
 8005d3e:	f009 fe7d 	bl	800fa3c <HAL_UART_Receive_DMA>

}
 8005d42:	bf00      	nop
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	240017d1 	.word	0x240017d1
 8005d4c:	240011ec 	.word	0x240011ec

08005d50 <SBUS_Receive>:

void SBUS_Receive(uint8_t SBUS_RxBuffer){
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	4603      	mov	r3, r0
 8005d58:	71fb      	strb	r3, [r7, #7]
	static uint8_t Actual_status = 0;
	static uint8_t RxCount;

	switch (Actual_status) {
 8005d5a:	4b20      	ldr	r3, [pc, #128]	@ (8005ddc <SBUS_Receive+0x8c>)
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <SBUS_Receive+0x18>
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d017      	beq.n	8005d96 <SBUS_Receive+0x46>
 8005d66:	e02f      	b.n	8005dc8 <SBUS_Receive+0x78>
		case 0:
			if(SBUS_RxBuffer == 0x0F){
 8005d68:	79fb      	ldrb	r3, [r7, #7]
 8005d6a:	2b0f      	cmp	r3, #15
 8005d6c:	d10f      	bne.n	8005d8e <SBUS_Receive+0x3e>
				SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 8005d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8005de0 <SBUS_Receive+0x90>)
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	4619      	mov	r1, r3
 8005d74:	4a1b      	ldr	r2, [pc, #108]	@ (8005de4 <SBUS_Receive+0x94>)
 8005d76:	79fb      	ldrb	r3, [r7, #7]
 8005d78:	5453      	strb	r3, [r2, r1]
				Actual_status = 1;
 8005d7a:	4b18      	ldr	r3, [pc, #96]	@ (8005ddc <SBUS_Receive+0x8c>)
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	701a      	strb	r2, [r3, #0]
				RxCount++;
 8005d80:	4b17      	ldr	r3, [pc, #92]	@ (8005de0 <SBUS_Receive+0x90>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	3301      	adds	r3, #1
 8005d86:	b2da      	uxtb	r2, r3
 8005d88:	4b15      	ldr	r3, [pc, #84]	@ (8005de0 <SBUS_Receive+0x90>)
 8005d8a:	701a      	strb	r2, [r3, #0]
			}
			else{
				RxCount = 0;
			}
			break;
 8005d8c:	e021      	b.n	8005dd2 <SBUS_Receive+0x82>
				RxCount = 0;
 8005d8e:	4b14      	ldr	r3, [pc, #80]	@ (8005de0 <SBUS_Receive+0x90>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	701a      	strb	r2, [r3, #0]
			break;
 8005d94:	e01d      	b.n	8005dd2 <SBUS_Receive+0x82>
		case 1:
			SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 8005d96:	4b12      	ldr	r3, [pc, #72]	@ (8005de0 <SBUS_Receive+0x90>)
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	4a11      	ldr	r2, [pc, #68]	@ (8005de4 <SBUS_Receive+0x94>)
 8005d9e:	79fb      	ldrb	r3, [r7, #7]
 8005da0:	5453      	strb	r3, [r2, r1]
			RxCount++;
 8005da2:	4b0f      	ldr	r3, [pc, #60]	@ (8005de0 <SBUS_Receive+0x90>)
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	3301      	adds	r3, #1
 8005da8:	b2da      	uxtb	r2, r3
 8005daa:	4b0d      	ldr	r3, [pc, #52]	@ (8005de0 <SBUS_Receive+0x90>)
 8005dac:	701a      	strb	r2, [r3, #0]
			if(RxCount == 24){
 8005dae:	4b0c      	ldr	r3, [pc, #48]	@ (8005de0 <SBUS_Receive+0x90>)
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	2b18      	cmp	r3, #24
 8005db4:	d10c      	bne.n	8005dd0 <SBUS_Receive+0x80>
				RxCount = 0;
 8005db6:	4b0a      	ldr	r3, [pc, #40]	@ (8005de0 <SBUS_Receive+0x90>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	701a      	strb	r2, [r3, #0]
				Actual_status = 0;
 8005dbc:	4b07      	ldr	r3, [pc, #28]	@ (8005ddc <SBUS_Receive+0x8c>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	701a      	strb	r2, [r3, #0]
				SBUS_getData();
 8005dc2:	f000 f811 	bl	8005de8 <SBUS_getData>
			}
			break;
 8005dc6:	e003      	b.n	8005dd0 <SBUS_Receive+0x80>
		default:
			Actual_status = 0;
 8005dc8:	4b04      	ldr	r3, [pc, #16]	@ (8005ddc <SBUS_Receive+0x8c>)
 8005dca:	2200      	movs	r2, #0
 8005dcc:	701a      	strb	r2, [r3, #0]
			break;
 8005dce:	e000      	b.n	8005dd2 <SBUS_Receive+0x82>
			break;
 8005dd0:	bf00      	nop
	}
}
 8005dd2:	bf00      	nop
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	240017d2 	.word	0x240017d2
 8005de0:	240017d3 	.word	0x240017d3
 8005de4:	240017b8 	.word	0x240017b8

08005de8 <SBUS_getData>:


void SBUS_getData(void){
 8005de8:	b480      	push	{r7}
 8005dea:	af00      	add	r7, sp, #0
	//Se hace el corrimiento de bits para dar la estructura de los 16 canales, donde cada canal esta compuesto por 11 bits
	//pero cada paquete es de 1 byte. Para cada canal se utilizan los 8 bits (O los que correspondan) de el byte 1
	//(O el que corresponda) como los bits menos significativos del canal 1, y los tres bits faltantes se toman los 3 bits
	// menos significativos (O los que correspondan) del byte 2 y se colocan como los 3 bits más significativos del canal 1.
	Radio_input.Canal_1 = ((SBUS_UART_Rx[1] | SBUS_UART_Rx[2] << 8) & 0x07FF);
 8005dec:	4b95      	ldr	r3, [pc, #596]	@ (8006044 <SBUS_getData+0x25c>)
 8005dee:	785b      	ldrb	r3, [r3, #1]
 8005df0:	b21a      	sxth	r2, r3
 8005df2:	4b94      	ldr	r3, [pc, #592]	@ (8006044 <SBUS_getData+0x25c>)
 8005df4:	789b      	ldrb	r3, [r3, #2]
 8005df6:	021b      	lsls	r3, r3, #8
 8005df8:	b21b      	sxth	r3, r3
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	b21b      	sxth	r3, r3
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	4b90      	ldr	r3, [pc, #576]	@ (8006048 <SBUS_getData+0x260>)
 8005e08:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_2 = ((SBUS_UART_Rx[2] >> 3 | SBUS_UART_Rx[3] << 5) & 0x07FF);
 8005e0a:	4b8e      	ldr	r3, [pc, #568]	@ (8006044 <SBUS_getData+0x25c>)
 8005e0c:	789b      	ldrb	r3, [r3, #2]
 8005e0e:	08db      	lsrs	r3, r3, #3
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	b21a      	sxth	r2, r3
 8005e14:	4b8b      	ldr	r3, [pc, #556]	@ (8006044 <SBUS_getData+0x25c>)
 8005e16:	78db      	ldrb	r3, [r3, #3]
 8005e18:	015b      	lsls	r3, r3, #5
 8005e1a:	b21b      	sxth	r3, r3
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	b21b      	sxth	r3, r3
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	4b87      	ldr	r3, [pc, #540]	@ (8006048 <SBUS_getData+0x260>)
 8005e2a:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_3 = ((SBUS_UART_Rx[3] >> 6 | SBUS_UART_Rx[4] << 2 | SBUS_UART_Rx[5] << 10) & 0x07FF);
 8005e2c:	4b85      	ldr	r3, [pc, #532]	@ (8006044 <SBUS_getData+0x25c>)
 8005e2e:	78db      	ldrb	r3, [r3, #3]
 8005e30:	099b      	lsrs	r3, r3, #6
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	b21a      	sxth	r2, r3
 8005e36:	4b83      	ldr	r3, [pc, #524]	@ (8006044 <SBUS_getData+0x25c>)
 8005e38:	791b      	ldrb	r3, [r3, #4]
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	b21b      	sxth	r3, r3
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	b21a      	sxth	r2, r3
 8005e42:	4b80      	ldr	r3, [pc, #512]	@ (8006044 <SBUS_getData+0x25c>)
 8005e44:	795b      	ldrb	r3, [r3, #5]
 8005e46:	029b      	lsls	r3, r3, #10
 8005e48:	b21b      	sxth	r3, r3
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	b21b      	sxth	r3, r3
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	4b7c      	ldr	r3, [pc, #496]	@ (8006048 <SBUS_getData+0x260>)
 8005e58:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_4 = ((SBUS_UART_Rx[5] >> 1 | SBUS_UART_Rx[6] << 7) & 0x07FF);
 8005e5a:	4b7a      	ldr	r3, [pc, #488]	@ (8006044 <SBUS_getData+0x25c>)
 8005e5c:	795b      	ldrb	r3, [r3, #5]
 8005e5e:	085b      	lsrs	r3, r3, #1
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	b21a      	sxth	r2, r3
 8005e64:	4b77      	ldr	r3, [pc, #476]	@ (8006044 <SBUS_getData+0x25c>)
 8005e66:	799b      	ldrb	r3, [r3, #6]
 8005e68:	01db      	lsls	r3, r3, #7
 8005e6a:	b21b      	sxth	r3, r3
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	b21b      	sxth	r3, r3
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	4b73      	ldr	r3, [pc, #460]	@ (8006048 <SBUS_getData+0x260>)
 8005e7a:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_5 = ((SBUS_UART_Rx[6] >> 4 | SBUS_UART_Rx[7] << 4) & 0x07FF);
 8005e7c:	4b71      	ldr	r3, [pc, #452]	@ (8006044 <SBUS_getData+0x25c>)
 8005e7e:	799b      	ldrb	r3, [r3, #6]
 8005e80:	091b      	lsrs	r3, r3, #4
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	b21a      	sxth	r2, r3
 8005e86:	4b6f      	ldr	r3, [pc, #444]	@ (8006044 <SBUS_getData+0x25c>)
 8005e88:	79db      	ldrb	r3, [r3, #7]
 8005e8a:	011b      	lsls	r3, r3, #4
 8005e8c:	b21b      	sxth	r3, r3
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	b21b      	sxth	r3, r3
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	4b6b      	ldr	r3, [pc, #428]	@ (8006048 <SBUS_getData+0x260>)
 8005e9c:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_6 = ((SBUS_UART_Rx[7] >> 7 | SBUS_UART_Rx[8] << 1 | SBUS_UART_Rx[9] << 9) & 0x07FF);
 8005e9e:	4b69      	ldr	r3, [pc, #420]	@ (8006044 <SBUS_getData+0x25c>)
 8005ea0:	79db      	ldrb	r3, [r3, #7]
 8005ea2:	09db      	lsrs	r3, r3, #7
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	b21a      	sxth	r2, r3
 8005ea8:	4b66      	ldr	r3, [pc, #408]	@ (8006044 <SBUS_getData+0x25c>)
 8005eaa:	7a1b      	ldrb	r3, [r3, #8]
 8005eac:	005b      	lsls	r3, r3, #1
 8005eae:	b21b      	sxth	r3, r3
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	b21a      	sxth	r2, r3
 8005eb4:	4b63      	ldr	r3, [pc, #396]	@ (8006044 <SBUS_getData+0x25c>)
 8005eb6:	7a5b      	ldrb	r3, [r3, #9]
 8005eb8:	025b      	lsls	r3, r3, #9
 8005eba:	b21b      	sxth	r3, r3
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	b21b      	sxth	r3, r3
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	4b5f      	ldr	r3, [pc, #380]	@ (8006048 <SBUS_getData+0x260>)
 8005eca:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_7 = ((SBUS_UART_Rx[9] >> 2 | SBUS_UART_Rx[10] << 6) & 0x07FF);
 8005ecc:	4b5d      	ldr	r3, [pc, #372]	@ (8006044 <SBUS_getData+0x25c>)
 8005ece:	7a5b      	ldrb	r3, [r3, #9]
 8005ed0:	089b      	lsrs	r3, r3, #2
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	b21a      	sxth	r2, r3
 8005ed6:	4b5b      	ldr	r3, [pc, #364]	@ (8006044 <SBUS_getData+0x25c>)
 8005ed8:	7a9b      	ldrb	r3, [r3, #10]
 8005eda:	019b      	lsls	r3, r3, #6
 8005edc:	b21b      	sxth	r3, r3
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	b21b      	sxth	r3, r3
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	4b57      	ldr	r3, [pc, #348]	@ (8006048 <SBUS_getData+0x260>)
 8005eec:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_8 = ((SBUS_UART_Rx[10] >> 5 | SBUS_UART_Rx[11] << 3) & 0x07FF);
 8005eee:	4b55      	ldr	r3, [pc, #340]	@ (8006044 <SBUS_getData+0x25c>)
 8005ef0:	7a9b      	ldrb	r3, [r3, #10]
 8005ef2:	095b      	lsrs	r3, r3, #5
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	b21a      	sxth	r2, r3
 8005ef8:	4b52      	ldr	r3, [pc, #328]	@ (8006044 <SBUS_getData+0x25c>)
 8005efa:	7adb      	ldrb	r3, [r3, #11]
 8005efc:	00db      	lsls	r3, r3, #3
 8005efe:	b21b      	sxth	r3, r3
 8005f00:	4313      	orrs	r3, r2
 8005f02:	b21b      	sxth	r3, r3
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	4b4e      	ldr	r3, [pc, #312]	@ (8006048 <SBUS_getData+0x260>)
 8005f0e:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_9 = ((SBUS_UART_Rx[12] | SBUS_UART_Rx[13] << 8) & 0x07FF);
 8005f10:	4b4c      	ldr	r3, [pc, #304]	@ (8006044 <SBUS_getData+0x25c>)
 8005f12:	7b1b      	ldrb	r3, [r3, #12]
 8005f14:	b21a      	sxth	r2, r3
 8005f16:	4b4b      	ldr	r3, [pc, #300]	@ (8006044 <SBUS_getData+0x25c>)
 8005f18:	7b5b      	ldrb	r3, [r3, #13]
 8005f1a:	021b      	lsls	r3, r3, #8
 8005f1c:	b21b      	sxth	r3, r3
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	b21b      	sxth	r3, r3
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	4b47      	ldr	r3, [pc, #284]	@ (8006048 <SBUS_getData+0x260>)
 8005f2c:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_10 = ((SBUS_UART_Rx[13] >> 3 | SBUS_UART_Rx[14] << 5) & 0x07FF);
 8005f2e:	4b45      	ldr	r3, [pc, #276]	@ (8006044 <SBUS_getData+0x25c>)
 8005f30:	7b5b      	ldrb	r3, [r3, #13]
 8005f32:	08db      	lsrs	r3, r3, #3
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	b21a      	sxth	r2, r3
 8005f38:	4b42      	ldr	r3, [pc, #264]	@ (8006044 <SBUS_getData+0x25c>)
 8005f3a:	7b9b      	ldrb	r3, [r3, #14]
 8005f3c:	015b      	lsls	r3, r3, #5
 8005f3e:	b21b      	sxth	r3, r3
 8005f40:	4313      	orrs	r3, r2
 8005f42:	b21b      	sxth	r3, r3
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	4b3e      	ldr	r3, [pc, #248]	@ (8006048 <SBUS_getData+0x260>)
 8005f4e:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_11 = ((SBUS_UART_Rx[14] >> 6 | SBUS_UART_Rx[15] << 2 | SBUS_UART_Rx[16] << 10) & 0x07FF);
 8005f50:	4b3c      	ldr	r3, [pc, #240]	@ (8006044 <SBUS_getData+0x25c>)
 8005f52:	7b9b      	ldrb	r3, [r3, #14]
 8005f54:	099b      	lsrs	r3, r3, #6
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	b21a      	sxth	r2, r3
 8005f5a:	4b3a      	ldr	r3, [pc, #232]	@ (8006044 <SBUS_getData+0x25c>)
 8005f5c:	7bdb      	ldrb	r3, [r3, #15]
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	b21b      	sxth	r3, r3
 8005f62:	4313      	orrs	r3, r2
 8005f64:	b21a      	sxth	r2, r3
 8005f66:	4b37      	ldr	r3, [pc, #220]	@ (8006044 <SBUS_getData+0x25c>)
 8005f68:	7c1b      	ldrb	r3, [r3, #16]
 8005f6a:	029b      	lsls	r3, r3, #10
 8005f6c:	b21b      	sxth	r3, r3
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	b21b      	sxth	r3, r3
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	4b33      	ldr	r3, [pc, #204]	@ (8006048 <SBUS_getData+0x260>)
 8005f7c:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_12 = ((SBUS_UART_Rx[16] >> 1 | SBUS_UART_Rx[17] << 7) & 0x07FF);
 8005f7e:	4b31      	ldr	r3, [pc, #196]	@ (8006044 <SBUS_getData+0x25c>)
 8005f80:	7c1b      	ldrb	r3, [r3, #16]
 8005f82:	085b      	lsrs	r3, r3, #1
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	b21a      	sxth	r2, r3
 8005f88:	4b2e      	ldr	r3, [pc, #184]	@ (8006044 <SBUS_getData+0x25c>)
 8005f8a:	7c5b      	ldrb	r3, [r3, #17]
 8005f8c:	01db      	lsls	r3, r3, #7
 8005f8e:	b21b      	sxth	r3, r3
 8005f90:	4313      	orrs	r3, r2
 8005f92:	b21b      	sxth	r3, r3
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	4b2a      	ldr	r3, [pc, #168]	@ (8006048 <SBUS_getData+0x260>)
 8005f9e:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_13 = ((SBUS_UART_Rx[17] >> 4 | SBUS_UART_Rx[18] << 4) & 0x07FF);
 8005fa0:	4b28      	ldr	r3, [pc, #160]	@ (8006044 <SBUS_getData+0x25c>)
 8005fa2:	7c5b      	ldrb	r3, [r3, #17]
 8005fa4:	091b      	lsrs	r3, r3, #4
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	b21a      	sxth	r2, r3
 8005faa:	4b26      	ldr	r3, [pc, #152]	@ (8006044 <SBUS_getData+0x25c>)
 8005fac:	7c9b      	ldrb	r3, [r3, #18]
 8005fae:	011b      	lsls	r3, r3, #4
 8005fb0:	b21b      	sxth	r3, r3
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	b21b      	sxth	r3, r3
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	4b22      	ldr	r3, [pc, #136]	@ (8006048 <SBUS_getData+0x260>)
 8005fc0:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_14 = ((SBUS_UART_Rx[18] >> 7 | SBUS_UART_Rx[19] << 1 | SBUS_UART_Rx[20] << 9) & 0x07FF);
 8005fc2:	4b20      	ldr	r3, [pc, #128]	@ (8006044 <SBUS_getData+0x25c>)
 8005fc4:	7c9b      	ldrb	r3, [r3, #18]
 8005fc6:	09db      	lsrs	r3, r3, #7
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	b21a      	sxth	r2, r3
 8005fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8006044 <SBUS_getData+0x25c>)
 8005fce:	7cdb      	ldrb	r3, [r3, #19]
 8005fd0:	005b      	lsls	r3, r3, #1
 8005fd2:	b21b      	sxth	r3, r3
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	b21a      	sxth	r2, r3
 8005fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8006044 <SBUS_getData+0x25c>)
 8005fda:	7d1b      	ldrb	r3, [r3, #20]
 8005fdc:	025b      	lsls	r3, r3, #9
 8005fde:	b21b      	sxth	r3, r3
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	b21b      	sxth	r3, r3
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	4b16      	ldr	r3, [pc, #88]	@ (8006048 <SBUS_getData+0x260>)
 8005fee:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_15 = ((SBUS_UART_Rx[20] >> 2 | SBUS_UART_Rx[21] << 6) & 0x07FF);
 8005ff0:	4b14      	ldr	r3, [pc, #80]	@ (8006044 <SBUS_getData+0x25c>)
 8005ff2:	7d1b      	ldrb	r3, [r3, #20]
 8005ff4:	089b      	lsrs	r3, r3, #2
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	b21a      	sxth	r2, r3
 8005ffa:	4b12      	ldr	r3, [pc, #72]	@ (8006044 <SBUS_getData+0x25c>)
 8005ffc:	7d5b      	ldrb	r3, [r3, #21]
 8005ffe:	019b      	lsls	r3, r3, #6
 8006000:	b21b      	sxth	r3, r3
 8006002:	4313      	orrs	r3, r2
 8006004:	b21b      	sxth	r3, r3
 8006006:	b29b      	uxth	r3, r3
 8006008:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800600c:	b29a      	uxth	r2, r3
 800600e:	4b0e      	ldr	r3, [pc, #56]	@ (8006048 <SBUS_getData+0x260>)
 8006010:	83da      	strh	r2, [r3, #30]
	Radio_input.Canal_16 = ((SBUS_UART_Rx[21] >> 5 | SBUS_UART_Rx[22] << 3) & 0x07FF);
 8006012:	4b0c      	ldr	r3, [pc, #48]	@ (8006044 <SBUS_getData+0x25c>)
 8006014:	7d5b      	ldrb	r3, [r3, #21]
 8006016:	095b      	lsrs	r3, r3, #5
 8006018:	b2db      	uxtb	r3, r3
 800601a:	b21a      	sxth	r2, r3
 800601c:	4b09      	ldr	r3, [pc, #36]	@ (8006044 <SBUS_getData+0x25c>)
 800601e:	7d9b      	ldrb	r3, [r3, #22]
 8006020:	00db      	lsls	r3, r3, #3
 8006022:	b21b      	sxth	r3, r3
 8006024:	4313      	orrs	r3, r2
 8006026:	b21b      	sxth	r3, r3
 8006028:	b29b      	uxth	r3, r3
 800602a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800602e:	b29a      	uxth	r2, r3
 8006030:	4b05      	ldr	r3, [pc, #20]	@ (8006048 <SBUS_getData+0x260>)
 8006032:	841a      	strh	r2, [r3, #32]

	Radio_input.Canal_1 = (uint16_t)((((float)Radio_input.Canal_1 - 352) /1344 ) * 1000) + 1000;
 8006034:	4b04      	ldr	r3, [pc, #16]	@ (8006048 <SBUS_getData+0x260>)
 8006036:	885b      	ldrh	r3, [r3, #2]
 8006038:	ee07 3a90 	vmov	s15, r3
 800603c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006040:	e00a      	b.n	8006058 <SBUS_getData+0x270>
 8006042:	bf00      	nop
 8006044:	240017b8 	.word	0x240017b8
 8006048:	2400007c 	.word	0x2400007c
 800604c:	43b00000 	.word	0x43b00000
 8006050:	44a80000 	.word	0x44a80000
 8006054:	447a0000 	.word	0x447a0000
 8006058:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 800604c <SBUS_getData+0x264>
 800605c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006060:	ed5f 6a05 	vldr	s13, [pc, #-20]	@ 8006050 <SBUS_getData+0x268>
 8006064:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006068:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 8006054 <SBUS_getData+0x26c>
 800606c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006070:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006074:	ee17 3a90 	vmov	r3, s15
 8006078:	b29b      	uxth	r3, r3
 800607a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800607e:	b29a      	uxth	r2, r3
 8006080:	4bd1      	ldr	r3, [pc, #836]	@ (80063c8 <SBUS_getData+0x5e0>)
 8006082:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_2 = (uint16_t)((((float)Radio_input.Canal_2 - 352) /1344 ) * 1000) + 1000;
 8006084:	4bd0      	ldr	r3, [pc, #832]	@ (80063c8 <SBUS_getData+0x5e0>)
 8006086:	889b      	ldrh	r3, [r3, #4]
 8006088:	ee07 3a90 	vmov	s15, r3
 800608c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006090:	ed9f 7ace 	vldr	s14, [pc, #824]	@ 80063cc <SBUS_getData+0x5e4>
 8006094:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006098:	eddf 6acd 	vldr	s13, [pc, #820]	@ 80063d0 <SBUS_getData+0x5e8>
 800609c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80060a0:	ed9f 7acc 	vldr	s14, [pc, #816]	@ 80063d4 <SBUS_getData+0x5ec>
 80060a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060ac:	ee17 3a90 	vmov	r3, s15
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	4bc3      	ldr	r3, [pc, #780]	@ (80063c8 <SBUS_getData+0x5e0>)
 80060ba:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_3 = (uint16_t)((((float)Radio_input.Canal_3 - 352) /1344 ) * 1000) + 1000;
 80060bc:	4bc2      	ldr	r3, [pc, #776]	@ (80063c8 <SBUS_getData+0x5e0>)
 80060be:	88db      	ldrh	r3, [r3, #6]
 80060c0:	ee07 3a90 	vmov	s15, r3
 80060c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060c8:	ed9f 7ac0 	vldr	s14, [pc, #768]	@ 80063cc <SBUS_getData+0x5e4>
 80060cc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80060d0:	eddf 6abf 	vldr	s13, [pc, #764]	@ 80063d0 <SBUS_getData+0x5e8>
 80060d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80060d8:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 80063d4 <SBUS_getData+0x5ec>
 80060dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060e4:	ee17 3a90 	vmov	r3, s15
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	4bb5      	ldr	r3, [pc, #724]	@ (80063c8 <SBUS_getData+0x5e0>)
 80060f2:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_4 = (uint16_t)((((float)Radio_input.Canal_4 - 352) /1344 ) * 1000) + 1000;
 80060f4:	4bb4      	ldr	r3, [pc, #720]	@ (80063c8 <SBUS_getData+0x5e0>)
 80060f6:	891b      	ldrh	r3, [r3, #8]
 80060f8:	ee07 3a90 	vmov	s15, r3
 80060fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006100:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 80063cc <SBUS_getData+0x5e4>
 8006104:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006108:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 80063d0 <SBUS_getData+0x5e8>
 800610c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006110:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 80063d4 <SBUS_getData+0x5ec>
 8006114:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006118:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800611c:	ee17 3a90 	vmov	r3, s15
 8006120:	b29b      	uxth	r3, r3
 8006122:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8006126:	b29a      	uxth	r2, r3
 8006128:	4ba7      	ldr	r3, [pc, #668]	@ (80063c8 <SBUS_getData+0x5e0>)
 800612a:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_5 = (uint16_t)((((float)Radio_input.Canal_5 - 352) /1344 ) * 1000) + 1000;
 800612c:	4ba6      	ldr	r3, [pc, #664]	@ (80063c8 <SBUS_getData+0x5e0>)
 800612e:	895b      	ldrh	r3, [r3, #10]
 8006130:	ee07 3a90 	vmov	s15, r3
 8006134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006138:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 80063cc <SBUS_getData+0x5e4>
 800613c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006140:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 80063d0 <SBUS_getData+0x5e8>
 8006144:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006148:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 80063d4 <SBUS_getData+0x5ec>
 800614c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006154:	ee17 3a90 	vmov	r3, s15
 8006158:	b29b      	uxth	r3, r3
 800615a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800615e:	b29a      	uxth	r2, r3
 8006160:	4b99      	ldr	r3, [pc, #612]	@ (80063c8 <SBUS_getData+0x5e0>)
 8006162:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_6 = (uint16_t)((((float)Radio_input.Canal_6 - 352) /1344 ) * 1000) + 1000;
 8006164:	4b98      	ldr	r3, [pc, #608]	@ (80063c8 <SBUS_getData+0x5e0>)
 8006166:	899b      	ldrh	r3, [r3, #12]
 8006168:	ee07 3a90 	vmov	s15, r3
 800616c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006170:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 80063cc <SBUS_getData+0x5e4>
 8006174:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006178:	eddf 6a95 	vldr	s13, [pc, #596]	@ 80063d0 <SBUS_getData+0x5e8>
 800617c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006180:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 80063d4 <SBUS_getData+0x5ec>
 8006184:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006188:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800618c:	ee17 3a90 	vmov	r3, s15
 8006190:	b29b      	uxth	r3, r3
 8006192:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8006196:	b29a      	uxth	r2, r3
 8006198:	4b8b      	ldr	r3, [pc, #556]	@ (80063c8 <SBUS_getData+0x5e0>)
 800619a:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_7 = (uint16_t)((((float)Radio_input.Canal_7 - 352) /1344 ) * 1000) + 1000;
 800619c:	4b8a      	ldr	r3, [pc, #552]	@ (80063c8 <SBUS_getData+0x5e0>)
 800619e:	89db      	ldrh	r3, [r3, #14]
 80061a0:	ee07 3a90 	vmov	s15, r3
 80061a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061a8:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 80063cc <SBUS_getData+0x5e4>
 80061ac:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80061b0:	eddf 6a87 	vldr	s13, [pc, #540]	@ 80063d0 <SBUS_getData+0x5e8>
 80061b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061b8:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 80063d4 <SBUS_getData+0x5ec>
 80061bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061c4:	ee17 3a90 	vmov	r3, s15
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	4b7d      	ldr	r3, [pc, #500]	@ (80063c8 <SBUS_getData+0x5e0>)
 80061d2:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_8 = (uint16_t)((((float)Radio_input.Canal_8 - 352) /1344 ) * 1000) + 1000;
 80061d4:	4b7c      	ldr	r3, [pc, #496]	@ (80063c8 <SBUS_getData+0x5e0>)
 80061d6:	8a1b      	ldrh	r3, [r3, #16]
 80061d8:	ee07 3a90 	vmov	s15, r3
 80061dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061e0:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 80063cc <SBUS_getData+0x5e4>
 80061e4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80061e8:	eddf 6a79 	vldr	s13, [pc, #484]	@ 80063d0 <SBUS_getData+0x5e8>
 80061ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061f0:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 80063d4 <SBUS_getData+0x5ec>
 80061f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061fc:	ee17 3a90 	vmov	r3, s15
 8006200:	b29b      	uxth	r3, r3
 8006202:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8006206:	b29a      	uxth	r2, r3
 8006208:	4b6f      	ldr	r3, [pc, #444]	@ (80063c8 <SBUS_getData+0x5e0>)
 800620a:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_9 = (uint16_t)((((float)Radio_input.Canal_9 - 352) /1344 ) * 1000) + 1000;
 800620c:	4b6e      	ldr	r3, [pc, #440]	@ (80063c8 <SBUS_getData+0x5e0>)
 800620e:	8a5b      	ldrh	r3, [r3, #18]
 8006210:	ee07 3a90 	vmov	s15, r3
 8006214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006218:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 80063cc <SBUS_getData+0x5e4>
 800621c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006220:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 80063d0 <SBUS_getData+0x5e8>
 8006224:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006228:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 80063d4 <SBUS_getData+0x5ec>
 800622c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006230:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006234:	ee17 3a90 	vmov	r3, s15
 8006238:	b29b      	uxth	r3, r3
 800623a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800623e:	b29a      	uxth	r2, r3
 8006240:	4b61      	ldr	r3, [pc, #388]	@ (80063c8 <SBUS_getData+0x5e0>)
 8006242:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_10 = (uint16_t)((((float)Radio_input.Canal_10 - 352) /1344 ) * 1000) + 1000;
 8006244:	4b60      	ldr	r3, [pc, #384]	@ (80063c8 <SBUS_getData+0x5e0>)
 8006246:	8a9b      	ldrh	r3, [r3, #20]
 8006248:	ee07 3a90 	vmov	s15, r3
 800624c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006250:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 80063cc <SBUS_getData+0x5e4>
 8006254:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006258:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 80063d0 <SBUS_getData+0x5e8>
 800625c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006260:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 80063d4 <SBUS_getData+0x5ec>
 8006264:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006268:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800626c:	ee17 3a90 	vmov	r3, s15
 8006270:	b29b      	uxth	r3, r3
 8006272:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8006276:	b29a      	uxth	r2, r3
 8006278:	4b53      	ldr	r3, [pc, #332]	@ (80063c8 <SBUS_getData+0x5e0>)
 800627a:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_11 = (uint16_t)((((float)Radio_input.Canal_11 - 352) /1344 ) * 1000) + 1000;
 800627c:	4b52      	ldr	r3, [pc, #328]	@ (80063c8 <SBUS_getData+0x5e0>)
 800627e:	8adb      	ldrh	r3, [r3, #22]
 8006280:	ee07 3a90 	vmov	s15, r3
 8006284:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006288:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 80063cc <SBUS_getData+0x5e4>
 800628c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006290:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80063d0 <SBUS_getData+0x5e8>
 8006294:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006298:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 80063d4 <SBUS_getData+0x5ec>
 800629c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062a4:	ee17 3a90 	vmov	r3, s15
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	4b45      	ldr	r3, [pc, #276]	@ (80063c8 <SBUS_getData+0x5e0>)
 80062b2:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_12 = (uint16_t)((((float)Radio_input.Canal_12 - 352) /1344 ) * 1000) + 1000;
 80062b4:	4b44      	ldr	r3, [pc, #272]	@ (80063c8 <SBUS_getData+0x5e0>)
 80062b6:	8b1b      	ldrh	r3, [r3, #24]
 80062b8:	ee07 3a90 	vmov	s15, r3
 80062bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062c0:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80063cc <SBUS_getData+0x5e4>
 80062c4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80062c8:	eddf 6a41 	vldr	s13, [pc, #260]	@ 80063d0 <SBUS_getData+0x5e8>
 80062cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062d0:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 80063d4 <SBUS_getData+0x5ec>
 80062d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062dc:	ee17 3a90 	vmov	r3, s15
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	4b37      	ldr	r3, [pc, #220]	@ (80063c8 <SBUS_getData+0x5e0>)
 80062ea:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_13 = (uint16_t)((((float)Radio_input.Canal_13 - 352) /1344 ) * 1000) + 1000;
 80062ec:	4b36      	ldr	r3, [pc, #216]	@ (80063c8 <SBUS_getData+0x5e0>)
 80062ee:	8b5b      	ldrh	r3, [r3, #26]
 80062f0:	ee07 3a90 	vmov	s15, r3
 80062f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062f8:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80063cc <SBUS_getData+0x5e4>
 80062fc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006300:	eddf 6a33 	vldr	s13, [pc, #204]	@ 80063d0 <SBUS_getData+0x5e8>
 8006304:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006308:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80063d4 <SBUS_getData+0x5ec>
 800630c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006310:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006314:	ee17 3a90 	vmov	r3, s15
 8006318:	b29b      	uxth	r3, r3
 800631a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800631e:	b29a      	uxth	r2, r3
 8006320:	4b29      	ldr	r3, [pc, #164]	@ (80063c8 <SBUS_getData+0x5e0>)
 8006322:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_14 = (uint16_t)((((float)Radio_input.Canal_14 - 352) /1344 ) * 1000) + 1000;
 8006324:	4b28      	ldr	r3, [pc, #160]	@ (80063c8 <SBUS_getData+0x5e0>)
 8006326:	8b9b      	ldrh	r3, [r3, #28]
 8006328:	ee07 3a90 	vmov	s15, r3
 800632c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006330:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80063cc <SBUS_getData+0x5e4>
 8006334:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006338:	eddf 6a25 	vldr	s13, [pc, #148]	@ 80063d0 <SBUS_getData+0x5e8>
 800633c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006340:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80063d4 <SBUS_getData+0x5ec>
 8006344:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006348:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800634c:	ee17 3a90 	vmov	r3, s15
 8006350:	b29b      	uxth	r3, r3
 8006352:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8006356:	b29a      	uxth	r2, r3
 8006358:	4b1b      	ldr	r3, [pc, #108]	@ (80063c8 <SBUS_getData+0x5e0>)
 800635a:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_15 = (uint16_t)((((float)Radio_input.Canal_15 - 352) /1344 ) * 1000) + 1000;
 800635c:	4b1a      	ldr	r3, [pc, #104]	@ (80063c8 <SBUS_getData+0x5e0>)
 800635e:	8bdb      	ldrh	r3, [r3, #30]
 8006360:	ee07 3a90 	vmov	s15, r3
 8006364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006368:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80063cc <SBUS_getData+0x5e4>
 800636c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006370:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80063d0 <SBUS_getData+0x5e8>
 8006374:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006378:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80063d4 <SBUS_getData+0x5ec>
 800637c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006380:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006384:	ee17 3a90 	vmov	r3, s15
 8006388:	b29b      	uxth	r3, r3
 800638a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800638e:	b29a      	uxth	r2, r3
 8006390:	4b0d      	ldr	r3, [pc, #52]	@ (80063c8 <SBUS_getData+0x5e0>)
 8006392:	83da      	strh	r2, [r3, #30]
	Radio_input.Canal_16 = (uint16_t)((((float)Radio_input.Canal_16 - 352) /1344 ) * 1000) + 1000;
 8006394:	4b0c      	ldr	r3, [pc, #48]	@ (80063c8 <SBUS_getData+0x5e0>)
 8006396:	8c1b      	ldrh	r3, [r3, #32]
 8006398:	ee07 3a90 	vmov	s15, r3
 800639c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063a0:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80063cc <SBUS_getData+0x5e4>
 80063a4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80063a8:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80063d0 <SBUS_getData+0x5e8>
 80063ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80063b0:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80063d4 <SBUS_getData+0x5ec>
 80063b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80063b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063bc:	ee17 3a90 	vmov	r3, s15
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80063c6:	e007      	b.n	80063d8 <SBUS_getData+0x5f0>
 80063c8:	2400007c 	.word	0x2400007c
 80063cc:	43b00000 	.word	0x43b00000
 80063d0:	44a80000 	.word	0x44a80000
 80063d4:	447a0000 	.word	0x447a0000
 80063d8:	b29a      	uxth	r2, r3
 80063da:	4b2a      	ldr	r3, [pc, #168]	@ (8006484 <SBUS_getData+0x69c>)
 80063dc:	841a      	strh	r2, [r3, #32]

	//En el caso del byte 24, el primer bit menos significativo corresponde al canal 17, el segundo al canal 18, el tercero a el fail safe y
	//el cuarto a la perdida de paquetes. Los 4 restantes no se utilizan.

	Radio_input.Banderas = SBUS_UART_Rx[23];
 80063de:	4b2a      	ldr	r3, [pc, #168]	@ (8006488 <SBUS_getData+0x6a0>)
 80063e0:	7dda      	ldrb	r2, [r3, #23]
 80063e2:	4b28      	ldr	r3, [pc, #160]	@ (8006484 <SBUS_getData+0x69c>)
 80063e4:	701a      	strb	r2, [r3, #0]
	if(SBUS_UART_Rx[23]>=8){
 80063e6:	4b28      	ldr	r3, [pc, #160]	@ (8006488 <SBUS_getData+0x6a0>)
 80063e8:	7ddb      	ldrb	r3, [r3, #23]
 80063ea:	2b07      	cmp	r3, #7
 80063ec:	d90a      	bls.n	8006404 <SBUS_getData+0x61c>
		SBUS_UART_Rx[23]-=8;
 80063ee:	4b26      	ldr	r3, [pc, #152]	@ (8006488 <SBUS_getData+0x6a0>)
 80063f0:	7ddb      	ldrb	r3, [r3, #23]
 80063f2:	3b08      	subs	r3, #8
 80063f4:	b2da      	uxtb	r2, r3
 80063f6:	4b24      	ldr	r3, [pc, #144]	@ (8006488 <SBUS_getData+0x6a0>)
 80063f8:	75da      	strb	r2, [r3, #23]
		Radio_input.fail_safe = FailSafe;
 80063fa:	4b22      	ldr	r3, [pc, #136]	@ (8006484 <SBUS_getData+0x69c>)
 80063fc:	2235      	movs	r2, #53	@ 0x35
 80063fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8006402:	e003      	b.n	800640c <SBUS_getData+0x624>
	}else Radio_input.fail_safe= Ok;
 8006404:	4b1f      	ldr	r3, [pc, #124]	@ (8006484 <SBUS_getData+0x69c>)
 8006406:	22aa      	movs	r2, #170	@ 0xaa
 8006408:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

	if(SBUS_UART_Rx[23]>=4){
 800640c:	4b1e      	ldr	r3, [pc, #120]	@ (8006488 <SBUS_getData+0x6a0>)
 800640e:	7ddb      	ldrb	r3, [r3, #23]
 8006410:	2b03      	cmp	r3, #3
 8006412:	d90a      	bls.n	800642a <SBUS_getData+0x642>
		SBUS_UART_Rx[23]-=4;
 8006414:	4b1c      	ldr	r3, [pc, #112]	@ (8006488 <SBUS_getData+0x6a0>)
 8006416:	7ddb      	ldrb	r3, [r3, #23]
 8006418:	3b04      	subs	r3, #4
 800641a:	b2da      	uxtb	r2, r3
 800641c:	4b1a      	ldr	r3, [pc, #104]	@ (8006488 <SBUS_getData+0x6a0>)
 800641e:	75da      	strb	r2, [r3, #23]
		Radio_input.pkg_lost = Pkg_Lost;
 8006420:	4b18      	ldr	r3, [pc, #96]	@ (8006484 <SBUS_getData+0x69c>)
 8006422:	2210      	movs	r2, #16
 8006424:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006428:	e003      	b.n	8006432 <SBUS_getData+0x64a>
	}else Radio_input.pkg_lost=Ok;
 800642a:	4b16      	ldr	r3, [pc, #88]	@ (8006484 <SBUS_getData+0x69c>)
 800642c:	22aa      	movs	r2, #170	@ 0xaa
 800642e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if(SBUS_UART_Rx[23]>=2){
 8006432:	4b15      	ldr	r3, [pc, #84]	@ (8006488 <SBUS_getData+0x6a0>)
 8006434:	7ddb      	ldrb	r3, [r3, #23]
 8006436:	2b01      	cmp	r3, #1
 8006438:	d90a      	bls.n	8006450 <SBUS_getData+0x668>
		SBUS_UART_Rx[23]-=2;
 800643a:	4b13      	ldr	r3, [pc, #76]	@ (8006488 <SBUS_getData+0x6a0>)
 800643c:	7ddb      	ldrb	r3, [r3, #23]
 800643e:	3b02      	subs	r3, #2
 8006440:	b2da      	uxtb	r2, r3
 8006442:	4b11      	ldr	r3, [pc, #68]	@ (8006488 <SBUS_getData+0x6a0>)
 8006444:	75da      	strb	r2, [r3, #23]
		Radio_input.Interruptor_2=ON;
 8006446:	4b0f      	ldr	r3, [pc, #60]	@ (8006484 <SBUS_getData+0x69c>)
 8006448:	2201      	movs	r2, #1
 800644a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 800644e:	e003      	b.n	8006458 <SBUS_getData+0x670>
	}else Radio_input.Interruptor_2=OFF;
 8006450:	4b0c      	ldr	r3, [pc, #48]	@ (8006484 <SBUS_getData+0x69c>)
 8006452:	2200      	movs	r2, #0
 8006454:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	if(SBUS_UART_Rx[23]){
 8006458:	4b0b      	ldr	r3, [pc, #44]	@ (8006488 <SBUS_getData+0x6a0>)
 800645a:	7ddb      	ldrb	r3, [r3, #23]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d004      	beq.n	800646a <SBUS_getData+0x682>
		Radio_input.Interruptor_1=ON;
 8006460:	4b08      	ldr	r3, [pc, #32]	@ (8006484 <SBUS_getData+0x69c>)
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8006468:	e003      	b.n	8006472 <SBUS_getData+0x68a>
	}else Radio_input.Interruptor_1=OFF;
 800646a:	4b06      	ldr	r3, [pc, #24]	@ (8006484 <SBUS_getData+0x69c>)
 800646c:	2200      	movs	r2, #0
 800646e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22


	Radio_input.Uart_Counter = 0;
 8006472:	4b04      	ldr	r3, [pc, #16]	@ (8006484 <SBUS_getData+0x69c>)
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

}
 800647a:	bf00      	nop
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	2400007c 	.word	0x2400007c
 8006488:	240017b8 	.word	0x240017b8

0800648c <SBUS_IntegrityVerification>:

void SBUS_IntegrityVerification(void){
 800648c:	b480      	push	{r7}
 800648e:	af00      	add	r7, sp, #0

	if(Radio_input.Uart_Counter != 255){
 8006490:	4b0f      	ldr	r3, [pc, #60]	@ (80064d0 <SBUS_IntegrityVerification+0x44>)
 8006492:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8006496:	2bff      	cmp	r3, #255	@ 0xff
 8006498:	d00c      	beq.n	80064b4 <SBUS_IntegrityVerification+0x28>
		Radio_input.Uart_Counter++;
 800649a:	4b0d      	ldr	r3, [pc, #52]	@ (80064d0 <SBUS_IntegrityVerification+0x44>)
 800649c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80064a0:	3301      	adds	r3, #1
 80064a2:	b2da      	uxtb	r2, r3
 80064a4:	4b0a      	ldr	r3, [pc, #40]	@ (80064d0 <SBUS_IntegrityVerification+0x44>)
 80064a6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		Radio_input.uart_error = Ok;
 80064aa:	4b09      	ldr	r3, [pc, #36]	@ (80064d0 <SBUS_IntegrityVerification+0x44>)
 80064ac:	22aa      	movs	r2, #170	@ 0xaa
 80064ae:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	}
	else{
		Radio_input.uart_error = Uart_Error;
		Radio_input.fail_safe = FailSafe;
	}
}
 80064b2:	e007      	b.n	80064c4 <SBUS_IntegrityVerification+0x38>
		Radio_input.uart_error = Uart_Error;
 80064b4:	4b06      	ldr	r3, [pc, #24]	@ (80064d0 <SBUS_IntegrityVerification+0x44>)
 80064b6:	2220      	movs	r2, #32
 80064b8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		Radio_input.fail_safe = FailSafe;
 80064bc:	4b04      	ldr	r3, [pc, #16]	@ (80064d0 <SBUS_IntegrityVerification+0x44>)
 80064be:	2235      	movs	r2, #53	@ 0x35
 80064c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 80064c4:	bf00      	nop
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	2400007c 	.word	0x2400007c

080064d4 <SD_blackbox_refresh>:
void SD_blackbox_init(void){

	f_open(&BlackBox, BlackBoxFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
}

void SD_blackbox_refresh(void){
 80064d4:	b480      	push	{r7}
 80064d6:	af00      	add	r7, sp, #0

	blackbox_data.Time = TimeOn_Counter;
 80064d8:	4b58      	ldr	r3, [pc, #352]	@ (800663c <SD_blackbox_refresh+0x168>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a58      	ldr	r2, [pc, #352]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 80064de:	6353      	str	r3, [r2, #52]	@ 0x34

	blackbox_data.Ax = IMU.ACC.x;
 80064e0:	4b58      	ldr	r3, [pc, #352]	@ (8006644 <SD_blackbox_refresh+0x170>)
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	4a56      	ldr	r2, [pc, #344]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 80064e6:	6013      	str	r3, [r2, #0]
	blackbox_data.Ay = IMU.ACC.y;
 80064e8:	4b56      	ldr	r3, [pc, #344]	@ (8006644 <SD_blackbox_refresh+0x170>)
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	4a54      	ldr	r2, [pc, #336]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 80064ee:	6053      	str	r3, [r2, #4]
	blackbox_data.Az = IMU.ACC.z;
 80064f0:	4b54      	ldr	r3, [pc, #336]	@ (8006644 <SD_blackbox_refresh+0x170>)
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	4a52      	ldr	r2, [pc, #328]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 80064f6:	6093      	str	r3, [r2, #8]

	blackbox_data.Gx = IMU.GYR.x;
 80064f8:	4b52      	ldr	r3, [pc, #328]	@ (8006644 <SD_blackbox_refresh+0x170>)
 80064fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064fc:	4a50      	ldr	r2, [pc, #320]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 80064fe:	60d3      	str	r3, [r2, #12]
	blackbox_data.Gy = IMU.GYR.y;
 8006500:	4b50      	ldr	r3, [pc, #320]	@ (8006644 <SD_blackbox_refresh+0x170>)
 8006502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006504:	4a4e      	ldr	r2, [pc, #312]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 8006506:	6113      	str	r3, [r2, #16]
	blackbox_data.Gz = IMU.GYR.z;
 8006508:	4b4e      	ldr	r3, [pc, #312]	@ (8006644 <SD_blackbox_refresh+0x170>)
 800650a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800650c:	4a4c      	ldr	r2, [pc, #304]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 800650e:	6153      	str	r3, [r2, #20]

	blackbox_data.Gfx = 0;
 8006510:	4b4b      	ldr	r3, [pc, #300]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 8006512:	f04f 0200 	mov.w	r2, #0
 8006516:	619a      	str	r2, [r3, #24]
	blackbox_data.Gfy = 0;
 8006518:	4b49      	ldr	r3, [pc, #292]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 800651a:	f04f 0200 	mov.w	r2, #0
 800651e:	61da      	str	r2, [r3, #28]
	blackbox_data.Gfz = 0;
 8006520:	4b47      	ldr	r3, [pc, #284]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 8006522:	f04f 0200 	mov.w	r2, #0
 8006526:	621a      	str	r2, [r3, #32]

	blackbox_data.Roll    = IMU.Roll;
 8006528:	4b46      	ldr	r3, [pc, #280]	@ (8006644 <SD_blackbox_refresh+0x170>)
 800652a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800652c:	4a44      	ldr	r2, [pc, #272]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 800652e:	6253      	str	r3, [r2, #36]	@ 0x24
	blackbox_data.Pitch   = IMU.Pitch;
 8006530:	4b44      	ldr	r3, [pc, #272]	@ (8006644 <SD_blackbox_refresh+0x170>)
 8006532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006534:	4a42      	ldr	r2, [pc, #264]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 8006536:	6293      	str	r3, [r2, #40]	@ 0x28
	blackbox_data.Heading = IMU.Heading;
 8006538:	4b42      	ldr	r3, [pc, #264]	@ (8006644 <SD_blackbox_refresh+0x170>)
 800653a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800653c:	4a40      	ldr	r2, [pc, #256]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 800653e:	62d3      	str	r3, [r2, #44]	@ 0x2c

	blackbox_data.Alt = BMP280.Barometric_Altitude;
 8006540:	4b41      	ldr	r3, [pc, #260]	@ (8006648 <SD_blackbox_refresh+0x174>)
 8006542:	8a1a      	ldrh	r2, [r3, #16]
 8006544:	4b3e      	ldr	r3, [pc, #248]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 8006546:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	blackbox_data.Latitude = 0;
 800654a:	4b3d      	ldr	r3, [pc, #244]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 800654c:	2200      	movs	r2, #0
 800654e:	639a      	str	r2, [r3, #56]	@ 0x38
	blackbox_data.Longitude= 0;
 8006550:	4b3b      	ldr	r3, [pc, #236]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 8006552:	2200      	movs	r2, #0
 8006554:	63da      	str	r2, [r3, #60]	@ 0x3c

	blackbox_data.ARSP = 0;
 8006556:	4b3a      	ldr	r3, [pc, #232]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 8006558:	2200      	movs	r2, #0
 800655a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

	blackbox_data.Pressure = BMP280.Pressure;
 800655e:	4b3a      	ldr	r3, [pc, #232]	@ (8006648 <SD_blackbox_refresh+0x174>)
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	4a37      	ldr	r2, [pc, #220]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 8006564:	6413      	str	r3, [r2, #64]	@ 0x40

	blackbox_data.SBUS_Flags = Radio_input.Banderas;
 8006566:	4b39      	ldr	r3, [pc, #228]	@ (800664c <SD_blackbox_refresh+0x178>)
 8006568:	781a      	ldrb	r2, [r3, #0]
 800656a:	4b35      	ldr	r3, [pc, #212]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 800656c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
	blackbox_data.Flight_Mode = 0;
 8006570:	4b33      	ldr	r3, [pc, #204]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 8006572:	2200      	movs	r2, #0
 8006574:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

	blackbox_data.Canal_1 = Radio_input.Canal_1;
 8006578:	4b34      	ldr	r3, [pc, #208]	@ (800664c <SD_blackbox_refresh+0x178>)
 800657a:	885a      	ldrh	r2, [r3, #2]
 800657c:	4b30      	ldr	r3, [pc, #192]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 800657e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	blackbox_data.Canal_2 = Radio_input.Canal_2;
 8006582:	4b32      	ldr	r3, [pc, #200]	@ (800664c <SD_blackbox_refresh+0x178>)
 8006584:	889a      	ldrh	r2, [r3, #4]
 8006586:	4b2e      	ldr	r3, [pc, #184]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 8006588:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
	blackbox_data.Canal_3 = Radio_input.Canal_3;
 800658c:	4b2f      	ldr	r3, [pc, #188]	@ (800664c <SD_blackbox_refresh+0x178>)
 800658e:	88da      	ldrh	r2, [r3, #6]
 8006590:	4b2b      	ldr	r3, [pc, #172]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 8006592:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
	blackbox_data.Canal_4 = Radio_input.Canal_4;
 8006596:	4b2d      	ldr	r3, [pc, #180]	@ (800664c <SD_blackbox_refresh+0x178>)
 8006598:	891a      	ldrh	r2, [r3, #8]
 800659a:	4b29      	ldr	r3, [pc, #164]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 800659c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
	blackbox_data.Canal_5 = Radio_input.Canal_5;
 80065a0:	4b2a      	ldr	r3, [pc, #168]	@ (800664c <SD_blackbox_refresh+0x178>)
 80065a2:	895a      	ldrh	r2, [r3, #10]
 80065a4:	4b26      	ldr	r3, [pc, #152]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 80065a6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
	blackbox_data.Canal_6 = Radio_input.Canal_6;
 80065aa:	4b28      	ldr	r3, [pc, #160]	@ (800664c <SD_blackbox_refresh+0x178>)
 80065ac:	899a      	ldrh	r2, [r3, #12]
 80065ae:	4b24      	ldr	r3, [pc, #144]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 80065b0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
	blackbox_data.Canal_7 = Radio_input.Canal_7;
 80065b4:	4b25      	ldr	r3, [pc, #148]	@ (800664c <SD_blackbox_refresh+0x178>)
 80065b6:	89da      	ldrh	r2, [r3, #14]
 80065b8:	4b21      	ldr	r3, [pc, #132]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 80065ba:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
	blackbox_data.Canal_8 = Radio_input.Canal_8;
 80065be:	4b23      	ldr	r3, [pc, #140]	@ (800664c <SD_blackbox_refresh+0x178>)
 80065c0:	8a1a      	ldrh	r2, [r3, #16]
 80065c2:	4b1f      	ldr	r3, [pc, #124]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 80065c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
	blackbox_data.Canal_9 = Radio_input.Canal_9;
 80065c8:	4b20      	ldr	r3, [pc, #128]	@ (800664c <SD_blackbox_refresh+0x178>)
 80065ca:	8a5a      	ldrh	r2, [r3, #18]
 80065cc:	4b1c      	ldr	r3, [pc, #112]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 80065ce:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
	blackbox_data.Canal_10 = Radio_input.Canal_10;
 80065d2:	4b1e      	ldr	r3, [pc, #120]	@ (800664c <SD_blackbox_refresh+0x178>)
 80065d4:	8a9a      	ldrh	r2, [r3, #20]
 80065d6:	4b1a      	ldr	r3, [pc, #104]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 80065d8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
	blackbox_data.Canal_11 = Radio_input.Canal_11;
 80065dc:	4b1b      	ldr	r3, [pc, #108]	@ (800664c <SD_blackbox_refresh+0x178>)
 80065de:	8ada      	ldrh	r2, [r3, #22]
 80065e0:	4b17      	ldr	r3, [pc, #92]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 80065e2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
	blackbox_data.Canal_12 = Radio_input.Canal_12;
 80065e6:	4b19      	ldr	r3, [pc, #100]	@ (800664c <SD_blackbox_refresh+0x178>)
 80065e8:	8b1a      	ldrh	r2, [r3, #24]
 80065ea:	4b15      	ldr	r3, [pc, #84]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 80065ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
	blackbox_data.Canal_13 = Radio_input.Canal_13;
 80065f0:	4b16      	ldr	r3, [pc, #88]	@ (800664c <SD_blackbox_refresh+0x178>)
 80065f2:	8b5a      	ldrh	r2, [r3, #26]
 80065f4:	4b12      	ldr	r3, [pc, #72]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 80065f6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
	blackbox_data.Canal_14 = Radio_input.Canal_14;
 80065fa:	4b14      	ldr	r3, [pc, #80]	@ (800664c <SD_blackbox_refresh+0x178>)
 80065fc:	8b9a      	ldrh	r2, [r3, #28]
 80065fe:	4b10      	ldr	r3, [pc, #64]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 8006600:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	blackbox_data.Canal_15 = Radio_input.Canal_15;
 8006604:	4b11      	ldr	r3, [pc, #68]	@ (800664c <SD_blackbox_refresh+0x178>)
 8006606:	8bda      	ldrh	r2, [r3, #30]
 8006608:	4b0d      	ldr	r3, [pc, #52]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 800660a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
	blackbox_data.Canal_16 = Radio_input.Canal_16;
 800660e:	4b0f      	ldr	r3, [pc, #60]	@ (800664c <SD_blackbox_refresh+0x178>)
 8006610:	8c1a      	ldrh	r2, [r3, #32]
 8006612:	4b0b      	ldr	r3, [pc, #44]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 8006614:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

	blackbox_data.Interruptor_1 = Radio_input.Interruptor_1;
 8006618:	4b0c      	ldr	r3, [pc, #48]	@ (800664c <SD_blackbox_refresh+0x178>)
 800661a:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800661e:	4b08      	ldr	r3, [pc, #32]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 8006620:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
	blackbox_data.Interruptor_2 = Radio_input.Interruptor_2;
 8006624:	4b09      	ldr	r3, [pc, #36]	@ (800664c <SD_blackbox_refresh+0x178>)
 8006626:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 800662a:	4b05      	ldr	r3, [pc, #20]	@ (8006640 <SD_blackbox_refresh+0x16c>)
 800662c:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
//	blackbox_data.OUT6  = PWM_Output.Canal_6;
//	blackbox_data.OUT7  = PWM_Output.Canal_7;
//	blackbox_data.OUT8  = PWM_Output.Canal_8;
//	blackbox_data.OUT9  = PWM_Output.Canal_9;
//	blackbox_data.OUT10 = PWM_Output.Canal_10;
}
 8006630:	bf00      	nop
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	24000ec4 	.word	0x24000ec4
 8006640:	240029fc 	.word	0x240029fc
 8006644:	24001650 	.word	0x24001650
 8006648:	24001510 	.word	0x24001510
 800664c:	2400007c 	.word	0x2400007c

08006650 <SD_blackbox_write>:
	BlackBoxFile[4] = ActualFile[4];

	f_open(&BlackBox, BlackBoxFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
}

void SD_blackbox_write(void){
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
	static uint8_t NewFileCount = 0;
	static uint32_t DataCount = 0;
	static uint16_t WriteCount = 0;

	SD_blackbox_refresh();
 8006656:	f7ff ff3d 	bl	80064d4 <SD_blackbox_refresh>

	blackbox_data.Nmsg = DataCount;
 800665a:	4b26      	ldr	r3, [pc, #152]	@ (80066f4 <SD_blackbox_write+0xa4>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a26      	ldr	r2, [pc, #152]	@ (80066f8 <SD_blackbox_write+0xa8>)
 8006660:	6313      	str	r3, [r2, #48]	@ 0x30
	memcpy(&BlackBoxBuffer[WriteCount],&blackbox_data,sizeof(blackbox_data));
 8006662:	4b26      	ldr	r3, [pc, #152]	@ (80066fc <SD_blackbox_write+0xac>)
 8006664:	881b      	ldrh	r3, [r3, #0]
 8006666:	461a      	mov	r2, r3
 8006668:	4613      	mov	r3, r2
 800666a:	021b      	lsls	r3, r3, #8
 800666c:	1a9b      	subs	r3, r3, r2
 800666e:	4a24      	ldr	r2, [pc, #144]	@ (8006700 <SD_blackbox_write+0xb0>)
 8006670:	4413      	add	r3, r2
 8006672:	2280      	movs	r2, #128	@ 0x80
 8006674:	4920      	ldr	r1, [pc, #128]	@ (80066f8 <SD_blackbox_write+0xa8>)
 8006676:	4618      	mov	r0, r3
 8006678:	f011 fb5f 	bl	8017d3a <memcpy>

	if(WriteCount == 15){
 800667c:	4b1f      	ldr	r3, [pc, #124]	@ (80066fc <SD_blackbox_write+0xac>)
 800667e:	881b      	ldrh	r3, [r3, #0]
 8006680:	2b0f      	cmp	r3, #15
 8006682:	d129      	bne.n	80066d8 <SD_blackbox_write+0x88>
		for (uint8_t n = 0; n < 16; ++n) {
 8006684:	2300      	movs	r3, #0
 8006686:	71fb      	strb	r3, [r7, #7]
 8006688:	e00d      	b.n	80066a6 <SD_blackbox_write+0x56>
			f_write(&BlackBox, &BlackBoxBuffer[n], sizeof(blackbox_data), &bw);
 800668a:	79fa      	ldrb	r2, [r7, #7]
 800668c:	4613      	mov	r3, r2
 800668e:	021b      	lsls	r3, r3, #8
 8006690:	1a9b      	subs	r3, r3, r2
 8006692:	4a1b      	ldr	r2, [pc, #108]	@ (8006700 <SD_blackbox_write+0xb0>)
 8006694:	1899      	adds	r1, r3, r2
 8006696:	4b1b      	ldr	r3, [pc, #108]	@ (8006704 <SD_blackbox_write+0xb4>)
 8006698:	2280      	movs	r2, #128	@ 0x80
 800669a:	481b      	ldr	r0, [pc, #108]	@ (8006708 <SD_blackbox_write+0xb8>)
 800669c:	f00d fe67 	bl	801436e <f_write>
		for (uint8_t n = 0; n < 16; ++n) {
 80066a0:	79fb      	ldrb	r3, [r7, #7]
 80066a2:	3301      	adds	r3, #1
 80066a4:	71fb      	strb	r3, [r7, #7]
 80066a6:	79fb      	ldrb	r3, [r7, #7]
 80066a8:	2b0f      	cmp	r3, #15
 80066aa:	d9ee      	bls.n	800668a <SD_blackbox_write+0x3a>
		}
		fresult = f_sync(&BlackBox);
 80066ac:	4816      	ldr	r0, [pc, #88]	@ (8006708 <SD_blackbox_write+0xb8>)
 80066ae:	f00e f802 	bl	80146b6 <f_sync>
 80066b2:	4603      	mov	r3, r0
 80066b4:	461a      	mov	r2, r3
 80066b6:	4b15      	ldr	r3, [pc, #84]	@ (800670c <SD_blackbox_write+0xbc>)
 80066b8:	701a      	strb	r2, [r3, #0]
		WriteCount = 0;
 80066ba:	4b10      	ldr	r3, [pc, #64]	@ (80066fc <SD_blackbox_write+0xac>)
 80066bc:	2200      	movs	r2, #0
 80066be:	801a      	strh	r2, [r3, #0]
		++NewFileCount;
 80066c0:	4b13      	ldr	r3, [pc, #76]	@ (8006710 <SD_blackbox_write+0xc0>)
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	3301      	adds	r3, #1
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	4b11      	ldr	r3, [pc, #68]	@ (8006710 <SD_blackbox_write+0xc0>)
 80066ca:	701a      	strb	r2, [r3, #0]
		++DataCount;
 80066cc:	4b09      	ldr	r3, [pc, #36]	@ (80066f4 <SD_blackbox_write+0xa4>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	3301      	adds	r3, #1
 80066d2:	4a08      	ldr	r2, [pc, #32]	@ (80066f4 <SD_blackbox_write+0xa4>)
 80066d4:	6013      	str	r3, [r2, #0]
		return;
 80066d6:	e00a      	b.n	80066ee <SD_blackbox_write+0x9e>
	}
	++WriteCount;
 80066d8:	4b08      	ldr	r3, [pc, #32]	@ (80066fc <SD_blackbox_write+0xac>)
 80066da:	881b      	ldrh	r3, [r3, #0]
 80066dc:	3301      	adds	r3, #1
 80066de:	b29a      	uxth	r2, r3
 80066e0:	4b06      	ldr	r3, [pc, #24]	@ (80066fc <SD_blackbox_write+0xac>)
 80066e2:	801a      	strh	r2, [r3, #0]
	++DataCount;
 80066e4:	4b03      	ldr	r3, [pc, #12]	@ (80066f4 <SD_blackbox_write+0xa4>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	3301      	adds	r3, #1
 80066ea:	4a02      	ldr	r2, [pc, #8]	@ (80066f4 <SD_blackbox_write+0xa4>)
 80066ec:	6013      	str	r3, [r2, #0]
}
 80066ee:	3708      	adds	r7, #8
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	24002a7c 	.word	0x24002a7c
 80066f8:	240029fc 	.word	0x240029fc
 80066fc:	24002a80 	.word	0x24002a80
 8006700:	24001a0c 	.word	0x24001a0c
 8006704:	24001a08 	.word	0x24001a08
 8006708:	240017d4 	.word	0x240017d4
 800670c:	24001a04 	.word	0x24001a04
 8006710:	24002a82 	.word	0x24002a82

08006714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006714:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800674c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006718:	f7fd f828 	bl	800376c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800671c:	480c      	ldr	r0, [pc, #48]	@ (8006750 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800671e:	490d      	ldr	r1, [pc, #52]	@ (8006754 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006720:	4a0d      	ldr	r2, [pc, #52]	@ (8006758 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006724:	e002      	b.n	800672c <LoopCopyDataInit>

08006726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800672a:	3304      	adds	r3, #4

0800672c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 800672c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800672e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006730:	d3f9      	bcc.n	8006726 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006732:	4a0a      	ldr	r2, [pc, #40]	@ (800675c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006734:	4c0a      	ldr	r4, [pc, #40]	@ (8006760 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006738:	e001      	b.n	800673e <LoopFillZerobss>

0800673a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800673a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800673c:	3204      	adds	r2, #4

0800673e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800673e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006740:	d3fb      	bcc.n	800673a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8006742:	f011 fad3 	bl	8017cec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006746:	f7fc fbab 	bl	8002ea0 <main>
  bx  lr
 800674a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800674c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8006750:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8006754:	24000290 	.word	0x24000290
  ldr r2, =_sidata
 8006758:	0801a9f0 	.word	0x0801a9f0
  ldr r2, =_sbss
 800675c:	24000290 	.word	0x24000290
  ldr r4, =_ebss
 8006760:	24006944 	.word	0x24006944

08006764 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006764:	e7fe      	b.n	8006764 <ADC_IRQHandler>
	...

08006768 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800676e:	2003      	movs	r0, #3
 8006770:	f000 f927 	bl	80069c2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006774:	f004 fd3e 	bl	800b1f4 <HAL_RCC_GetSysClockFreq>
 8006778:	4602      	mov	r2, r0
 800677a:	4b15      	ldr	r3, [pc, #84]	@ (80067d0 <HAL_Init+0x68>)
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	0a1b      	lsrs	r3, r3, #8
 8006780:	f003 030f 	and.w	r3, r3, #15
 8006784:	4913      	ldr	r1, [pc, #76]	@ (80067d4 <HAL_Init+0x6c>)
 8006786:	5ccb      	ldrb	r3, [r1, r3]
 8006788:	f003 031f 	and.w	r3, r3, #31
 800678c:	fa22 f303 	lsr.w	r3, r2, r3
 8006790:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006792:	4b0f      	ldr	r3, [pc, #60]	@ (80067d0 <HAL_Init+0x68>)
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	f003 030f 	and.w	r3, r3, #15
 800679a:	4a0e      	ldr	r2, [pc, #56]	@ (80067d4 <HAL_Init+0x6c>)
 800679c:	5cd3      	ldrb	r3, [r2, r3]
 800679e:	f003 031f 	and.w	r3, r3, #31
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	fa22 f303 	lsr.w	r3, r2, r3
 80067a8:	4a0b      	ldr	r2, [pc, #44]	@ (80067d8 <HAL_Init+0x70>)
 80067aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80067ac:	4a0b      	ldr	r2, [pc, #44]	@ (80067dc <HAL_Init+0x74>)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80067b2:	200f      	movs	r0, #15
 80067b4:	f7fc fe44 	bl	8003440 <HAL_InitTick>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d001      	beq.n	80067c2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e002      	b.n	80067c8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80067c2:	f7fc fe1f 	bl	8003404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3708      	adds	r7, #8
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	58024400 	.word	0x58024400
 80067d4:	08019d54 	.word	0x08019d54
 80067d8:	24000004 	.word	0x24000004
 80067dc:	24000000 	.word	0x24000000

080067e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80067e0:	b480      	push	{r7}
 80067e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80067e4:	4b06      	ldr	r3, [pc, #24]	@ (8006800 <HAL_IncTick+0x20>)
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	461a      	mov	r2, r3
 80067ea:	4b06      	ldr	r3, [pc, #24]	@ (8006804 <HAL_IncTick+0x24>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4413      	add	r3, r2
 80067f0:	4a04      	ldr	r2, [pc, #16]	@ (8006804 <HAL_IncTick+0x24>)
 80067f2:	6013      	str	r3, [r2, #0]
}
 80067f4:	bf00      	nop
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	240000a8 	.word	0x240000a8
 8006804:	24002a84 	.word	0x24002a84

08006808 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006808:	b480      	push	{r7}
 800680a:	af00      	add	r7, sp, #0
  return uwTick;
 800680c:	4b03      	ldr	r3, [pc, #12]	@ (800681c <HAL_GetTick+0x14>)
 800680e:	681b      	ldr	r3, [r3, #0]
}
 8006810:	4618      	mov	r0, r3
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	24002a84 	.word	0x24002a84

08006820 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006828:	f7ff ffee 	bl	8006808 <HAL_GetTick>
 800682c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006838:	d005      	beq.n	8006846 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800683a:	4b0a      	ldr	r3, [pc, #40]	@ (8006864 <HAL_Delay+0x44>)
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	461a      	mov	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	4413      	add	r3, r2
 8006844:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006846:	bf00      	nop
 8006848:	f7ff ffde 	bl	8006808 <HAL_GetTick>
 800684c:	4602      	mov	r2, r0
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	429a      	cmp	r2, r3
 8006856:	d8f7      	bhi.n	8006848 <HAL_Delay+0x28>
  {
  }
}
 8006858:	bf00      	nop
 800685a:	bf00      	nop
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	240000a8 	.word	0x240000a8

08006868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f003 0307 	and.w	r3, r3, #7
 8006876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006878:	4b0b      	ldr	r3, [pc, #44]	@ (80068a8 <__NVIC_SetPriorityGrouping+0x40>)
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006884:	4013      	ands	r3, r2
 8006886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006890:	4b06      	ldr	r3, [pc, #24]	@ (80068ac <__NVIC_SetPriorityGrouping+0x44>)
 8006892:	4313      	orrs	r3, r2
 8006894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006896:	4a04      	ldr	r2, [pc, #16]	@ (80068a8 <__NVIC_SetPriorityGrouping+0x40>)
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	60d3      	str	r3, [r2, #12]
}
 800689c:	bf00      	nop
 800689e:	3714      	adds	r7, #20
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr
 80068a8:	e000ed00 	.word	0xe000ed00
 80068ac:	05fa0000 	.word	0x05fa0000

080068b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80068b0:	b480      	push	{r7}
 80068b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80068b4:	4b04      	ldr	r3, [pc, #16]	@ (80068c8 <__NVIC_GetPriorityGrouping+0x18>)
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	0a1b      	lsrs	r3, r3, #8
 80068ba:	f003 0307 	and.w	r3, r3, #7
}
 80068be:	4618      	mov	r0, r3
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr
 80068c8:	e000ed00 	.word	0xe000ed00

080068cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	4603      	mov	r3, r0
 80068d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80068d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	db0b      	blt.n	80068f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80068de:	88fb      	ldrh	r3, [r7, #6]
 80068e0:	f003 021f 	and.w	r2, r3, #31
 80068e4:	4907      	ldr	r1, [pc, #28]	@ (8006904 <__NVIC_EnableIRQ+0x38>)
 80068e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068ea:	095b      	lsrs	r3, r3, #5
 80068ec:	2001      	movs	r0, #1
 80068ee:	fa00 f202 	lsl.w	r2, r0, r2
 80068f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80068f6:	bf00      	nop
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	e000e100 	.word	0xe000e100

08006908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	4603      	mov	r3, r0
 8006910:	6039      	str	r1, [r7, #0]
 8006912:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006914:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006918:	2b00      	cmp	r3, #0
 800691a:	db0a      	blt.n	8006932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	b2da      	uxtb	r2, r3
 8006920:	490c      	ldr	r1, [pc, #48]	@ (8006954 <__NVIC_SetPriority+0x4c>)
 8006922:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006926:	0112      	lsls	r2, r2, #4
 8006928:	b2d2      	uxtb	r2, r2
 800692a:	440b      	add	r3, r1
 800692c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006930:	e00a      	b.n	8006948 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	b2da      	uxtb	r2, r3
 8006936:	4908      	ldr	r1, [pc, #32]	@ (8006958 <__NVIC_SetPriority+0x50>)
 8006938:	88fb      	ldrh	r3, [r7, #6]
 800693a:	f003 030f 	and.w	r3, r3, #15
 800693e:	3b04      	subs	r3, #4
 8006940:	0112      	lsls	r2, r2, #4
 8006942:	b2d2      	uxtb	r2, r2
 8006944:	440b      	add	r3, r1
 8006946:	761a      	strb	r2, [r3, #24]
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr
 8006954:	e000e100 	.word	0xe000e100
 8006958:	e000ed00 	.word	0xe000ed00

0800695c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800695c:	b480      	push	{r7}
 800695e:	b089      	sub	sp, #36	@ 0x24
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f003 0307 	and.w	r3, r3, #7
 800696e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	f1c3 0307 	rsb	r3, r3, #7
 8006976:	2b04      	cmp	r3, #4
 8006978:	bf28      	it	cs
 800697a:	2304      	movcs	r3, #4
 800697c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	3304      	adds	r3, #4
 8006982:	2b06      	cmp	r3, #6
 8006984:	d902      	bls.n	800698c <NVIC_EncodePriority+0x30>
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	3b03      	subs	r3, #3
 800698a:	e000      	b.n	800698e <NVIC_EncodePriority+0x32>
 800698c:	2300      	movs	r3, #0
 800698e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006990:	f04f 32ff 	mov.w	r2, #4294967295
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	fa02 f303 	lsl.w	r3, r2, r3
 800699a:	43da      	mvns	r2, r3
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	401a      	ands	r2, r3
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80069a4:	f04f 31ff 	mov.w	r1, #4294967295
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	fa01 f303 	lsl.w	r3, r1, r3
 80069ae:	43d9      	mvns	r1, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069b4:	4313      	orrs	r3, r2
         );
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3724      	adds	r7, #36	@ 0x24
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b082      	sub	sp, #8
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f7ff ff4c 	bl	8006868 <__NVIC_SetPriorityGrouping>
}
 80069d0:	bf00      	nop
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b086      	sub	sp, #24
 80069dc:	af00      	add	r7, sp, #0
 80069de:	4603      	mov	r3, r0
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]
 80069e4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80069e6:	f7ff ff63 	bl	80068b0 <__NVIC_GetPriorityGrouping>
 80069ea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	68b9      	ldr	r1, [r7, #8]
 80069f0:	6978      	ldr	r0, [r7, #20]
 80069f2:	f7ff ffb3 	bl	800695c <NVIC_EncodePriority>
 80069f6:	4602      	mov	r2, r0
 80069f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80069fc:	4611      	mov	r1, r2
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7ff ff82 	bl	8006908 <__NVIC_SetPriority>
}
 8006a04:	bf00      	nop
 8006a06:	3718      	adds	r7, #24
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	4603      	mov	r3, r0
 8006a14:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006a16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7ff ff56 	bl	80068cc <__NVIC_EnableIRQ>
}
 8006a20:	bf00      	nop
 8006a22:	3708      	adds	r7, #8
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8006a2c:	f3bf 8f5f 	dmb	sy
}
 8006a30:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006a32:	4b07      	ldr	r3, [pc, #28]	@ (8006a50 <HAL_MPU_Disable+0x28>)
 8006a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a36:	4a06      	ldr	r2, [pc, #24]	@ (8006a50 <HAL_MPU_Disable+0x28>)
 8006a38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a3c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006a3e:	4b05      	ldr	r3, [pc, #20]	@ (8006a54 <HAL_MPU_Disable+0x2c>)
 8006a40:	2200      	movs	r2, #0
 8006a42:	605a      	str	r2, [r3, #4]
}
 8006a44:	bf00      	nop
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	e000ed00 	.word	0xe000ed00
 8006a54:	e000ed90 	.word	0xe000ed90

08006a58 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006a60:	4a0b      	ldr	r2, [pc, #44]	@ (8006a90 <HAL_MPU_Enable+0x38>)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f043 0301 	orr.w	r3, r3, #1
 8006a68:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8006a94 <HAL_MPU_Enable+0x3c>)
 8006a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a6e:	4a09      	ldr	r2, [pc, #36]	@ (8006a94 <HAL_MPU_Enable+0x3c>)
 8006a70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a74:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006a76:	f3bf 8f4f 	dsb	sy
}
 8006a7a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006a7c:	f3bf 8f6f 	isb	sy
}
 8006a80:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006a82:	bf00      	nop
 8006a84:	370c      	adds	r7, #12
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	e000ed90 	.word	0xe000ed90
 8006a94:	e000ed00 	.word	0xe000ed00

08006a98 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	785a      	ldrb	r2, [r3, #1]
 8006aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8006b14 <HAL_MPU_ConfigRegion+0x7c>)
 8006aa6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8006aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8006b14 <HAL_MPU_ConfigRegion+0x7c>)
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	4a19      	ldr	r2, [pc, #100]	@ (8006b14 <HAL_MPU_ConfigRegion+0x7c>)
 8006aae:	f023 0301 	bic.w	r3, r3, #1
 8006ab2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8006ab4:	4a17      	ldr	r2, [pc, #92]	@ (8006b14 <HAL_MPU_ConfigRegion+0x7c>)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	7b1b      	ldrb	r3, [r3, #12]
 8006ac0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	7adb      	ldrb	r3, [r3, #11]
 8006ac6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006ac8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	7a9b      	ldrb	r3, [r3, #10]
 8006ace:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006ad0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	7b5b      	ldrb	r3, [r3, #13]
 8006ad6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006ad8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	7b9b      	ldrb	r3, [r3, #14]
 8006ade:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006ae0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	7bdb      	ldrb	r3, [r3, #15]
 8006ae6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006ae8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	7a5b      	ldrb	r3, [r3, #9]
 8006aee:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006af0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	7a1b      	ldrb	r3, [r3, #8]
 8006af6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006af8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	7812      	ldrb	r2, [r2, #0]
 8006afe:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006b00:	4a04      	ldr	r2, [pc, #16]	@ (8006b14 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006b02:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006b04:	6113      	str	r3, [r2, #16]
}
 8006b06:	bf00      	nop
 8006b08:	370c      	adds	r7, #12
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	e000ed90 	.word	0xe000ed90

08006b18 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b086      	sub	sp, #24
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006b20:	f7ff fe72 	bl	8006808 <HAL_GetTick>
 8006b24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d101      	bne.n	8006b30 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e37d      	b.n	800722c <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a66      	ldr	r2, [pc, #408]	@ (8006cd0 <HAL_DMA_Init+0x1b8>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d04a      	beq.n	8006bd0 <HAL_DMA_Init+0xb8>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a65      	ldr	r2, [pc, #404]	@ (8006cd4 <HAL_DMA_Init+0x1bc>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d045      	beq.n	8006bd0 <HAL_DMA_Init+0xb8>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a63      	ldr	r2, [pc, #396]	@ (8006cd8 <HAL_DMA_Init+0x1c0>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d040      	beq.n	8006bd0 <HAL_DMA_Init+0xb8>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a62      	ldr	r2, [pc, #392]	@ (8006cdc <HAL_DMA_Init+0x1c4>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d03b      	beq.n	8006bd0 <HAL_DMA_Init+0xb8>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a60      	ldr	r2, [pc, #384]	@ (8006ce0 <HAL_DMA_Init+0x1c8>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d036      	beq.n	8006bd0 <HAL_DMA_Init+0xb8>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a5f      	ldr	r2, [pc, #380]	@ (8006ce4 <HAL_DMA_Init+0x1cc>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d031      	beq.n	8006bd0 <HAL_DMA_Init+0xb8>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a5d      	ldr	r2, [pc, #372]	@ (8006ce8 <HAL_DMA_Init+0x1d0>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d02c      	beq.n	8006bd0 <HAL_DMA_Init+0xb8>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a5c      	ldr	r2, [pc, #368]	@ (8006cec <HAL_DMA_Init+0x1d4>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d027      	beq.n	8006bd0 <HAL_DMA_Init+0xb8>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a5a      	ldr	r2, [pc, #360]	@ (8006cf0 <HAL_DMA_Init+0x1d8>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d022      	beq.n	8006bd0 <HAL_DMA_Init+0xb8>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a59      	ldr	r2, [pc, #356]	@ (8006cf4 <HAL_DMA_Init+0x1dc>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d01d      	beq.n	8006bd0 <HAL_DMA_Init+0xb8>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a57      	ldr	r2, [pc, #348]	@ (8006cf8 <HAL_DMA_Init+0x1e0>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d018      	beq.n	8006bd0 <HAL_DMA_Init+0xb8>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a56      	ldr	r2, [pc, #344]	@ (8006cfc <HAL_DMA_Init+0x1e4>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d013      	beq.n	8006bd0 <HAL_DMA_Init+0xb8>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a54      	ldr	r2, [pc, #336]	@ (8006d00 <HAL_DMA_Init+0x1e8>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d00e      	beq.n	8006bd0 <HAL_DMA_Init+0xb8>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a53      	ldr	r2, [pc, #332]	@ (8006d04 <HAL_DMA_Init+0x1ec>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d009      	beq.n	8006bd0 <HAL_DMA_Init+0xb8>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a51      	ldr	r2, [pc, #324]	@ (8006d08 <HAL_DMA_Init+0x1f0>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d004      	beq.n	8006bd0 <HAL_DMA_Init+0xb8>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a50      	ldr	r2, [pc, #320]	@ (8006d0c <HAL_DMA_Init+0x1f4>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d101      	bne.n	8006bd4 <HAL_DMA_Init+0xbc>
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e000      	b.n	8006bd6 <HAL_DMA_Init+0xbe>
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f000 813c 	beq.w	8006e54 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2202      	movs	r2, #2
 8006be0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a37      	ldr	r2, [pc, #220]	@ (8006cd0 <HAL_DMA_Init+0x1b8>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d04a      	beq.n	8006c8c <HAL_DMA_Init+0x174>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a36      	ldr	r2, [pc, #216]	@ (8006cd4 <HAL_DMA_Init+0x1bc>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d045      	beq.n	8006c8c <HAL_DMA_Init+0x174>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a34      	ldr	r2, [pc, #208]	@ (8006cd8 <HAL_DMA_Init+0x1c0>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d040      	beq.n	8006c8c <HAL_DMA_Init+0x174>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a33      	ldr	r2, [pc, #204]	@ (8006cdc <HAL_DMA_Init+0x1c4>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d03b      	beq.n	8006c8c <HAL_DMA_Init+0x174>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a31      	ldr	r2, [pc, #196]	@ (8006ce0 <HAL_DMA_Init+0x1c8>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d036      	beq.n	8006c8c <HAL_DMA_Init+0x174>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a30      	ldr	r2, [pc, #192]	@ (8006ce4 <HAL_DMA_Init+0x1cc>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d031      	beq.n	8006c8c <HAL_DMA_Init+0x174>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a2e      	ldr	r2, [pc, #184]	@ (8006ce8 <HAL_DMA_Init+0x1d0>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d02c      	beq.n	8006c8c <HAL_DMA_Init+0x174>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a2d      	ldr	r2, [pc, #180]	@ (8006cec <HAL_DMA_Init+0x1d4>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d027      	beq.n	8006c8c <HAL_DMA_Init+0x174>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a2b      	ldr	r2, [pc, #172]	@ (8006cf0 <HAL_DMA_Init+0x1d8>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d022      	beq.n	8006c8c <HAL_DMA_Init+0x174>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a2a      	ldr	r2, [pc, #168]	@ (8006cf4 <HAL_DMA_Init+0x1dc>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d01d      	beq.n	8006c8c <HAL_DMA_Init+0x174>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a28      	ldr	r2, [pc, #160]	@ (8006cf8 <HAL_DMA_Init+0x1e0>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d018      	beq.n	8006c8c <HAL_DMA_Init+0x174>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a27      	ldr	r2, [pc, #156]	@ (8006cfc <HAL_DMA_Init+0x1e4>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d013      	beq.n	8006c8c <HAL_DMA_Init+0x174>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a25      	ldr	r2, [pc, #148]	@ (8006d00 <HAL_DMA_Init+0x1e8>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d00e      	beq.n	8006c8c <HAL_DMA_Init+0x174>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a24      	ldr	r2, [pc, #144]	@ (8006d04 <HAL_DMA_Init+0x1ec>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d009      	beq.n	8006c8c <HAL_DMA_Init+0x174>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a22      	ldr	r2, [pc, #136]	@ (8006d08 <HAL_DMA_Init+0x1f0>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d004      	beq.n	8006c8c <HAL_DMA_Init+0x174>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a21      	ldr	r2, [pc, #132]	@ (8006d0c <HAL_DMA_Init+0x1f4>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d108      	bne.n	8006c9e <HAL_DMA_Init+0x186>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f022 0201 	bic.w	r2, r2, #1
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	e007      	b.n	8006cae <HAL_DMA_Init+0x196>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f022 0201 	bic.w	r2, r2, #1
 8006cac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006cae:	e02f      	b.n	8006d10 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006cb0:	f7ff fdaa 	bl	8006808 <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	2b05      	cmp	r3, #5
 8006cbc:	d928      	bls.n	8006d10 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2220      	movs	r2, #32
 8006cc2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2203      	movs	r2, #3
 8006cc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e2ad      	b.n	800722c <HAL_DMA_Init+0x714>
 8006cd0:	40020010 	.word	0x40020010
 8006cd4:	40020028 	.word	0x40020028
 8006cd8:	40020040 	.word	0x40020040
 8006cdc:	40020058 	.word	0x40020058
 8006ce0:	40020070 	.word	0x40020070
 8006ce4:	40020088 	.word	0x40020088
 8006ce8:	400200a0 	.word	0x400200a0
 8006cec:	400200b8 	.word	0x400200b8
 8006cf0:	40020410 	.word	0x40020410
 8006cf4:	40020428 	.word	0x40020428
 8006cf8:	40020440 	.word	0x40020440
 8006cfc:	40020458 	.word	0x40020458
 8006d00:	40020470 	.word	0x40020470
 8006d04:	40020488 	.word	0x40020488
 8006d08:	400204a0 	.word	0x400204a0
 8006d0c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1c8      	bne.n	8006cb0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006d26:	697a      	ldr	r2, [r7, #20]
 8006d28:	4b73      	ldr	r3, [pc, #460]	@ (8006ef8 <HAL_DMA_Init+0x3e0>)
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006d36:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d42:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d4e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a1b      	ldr	r3, [r3, #32]
 8006d54:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d60:	2b04      	cmp	r3, #4
 8006d62:	d107      	bne.n	8006d74 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	2b28      	cmp	r3, #40	@ 0x28
 8006d7a:	d903      	bls.n	8006d84 <HAL_DMA_Init+0x26c>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d82:	d91f      	bls.n	8006dc4 <HAL_DMA_Init+0x2ac>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d8a:	d903      	bls.n	8006d94 <HAL_DMA_Init+0x27c>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	2b42      	cmp	r3, #66	@ 0x42
 8006d92:	d917      	bls.n	8006dc4 <HAL_DMA_Init+0x2ac>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	2b46      	cmp	r3, #70	@ 0x46
 8006d9a:	d903      	bls.n	8006da4 <HAL_DMA_Init+0x28c>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	2b48      	cmp	r3, #72	@ 0x48
 8006da2:	d90f      	bls.n	8006dc4 <HAL_DMA_Init+0x2ac>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	2b4e      	cmp	r3, #78	@ 0x4e
 8006daa:	d903      	bls.n	8006db4 <HAL_DMA_Init+0x29c>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	2b52      	cmp	r3, #82	@ 0x52
 8006db2:	d907      	bls.n	8006dc4 <HAL_DMA_Init+0x2ac>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	2b73      	cmp	r3, #115	@ 0x73
 8006dba:	d905      	bls.n	8006dc8 <HAL_DMA_Init+0x2b0>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	2b77      	cmp	r3, #119	@ 0x77
 8006dc2:	d801      	bhi.n	8006dc8 <HAL_DMA_Init+0x2b0>
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e000      	b.n	8006dca <HAL_DMA_Init+0x2b2>
 8006dc8:	2300      	movs	r3, #0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d003      	beq.n	8006dd6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006dd4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	695b      	ldr	r3, [r3, #20]
 8006de4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f023 0307 	bic.w	r3, r3, #7
 8006dec:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df2:	697a      	ldr	r2, [r7, #20]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dfc:	2b04      	cmp	r3, #4
 8006dfe:	d117      	bne.n	8006e30 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e04:	697a      	ldr	r2, [r7, #20]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00e      	beq.n	8006e30 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f002 fbe0 	bl	80095d8 <DMA_CheckFifoParam>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d008      	beq.n	8006e30 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2240      	movs	r2, #64	@ 0x40
 8006e22:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e1fd      	b.n	800722c <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f002 fb1b 	bl	8009474 <DMA_CalcBaseAndBitshift>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e46:	f003 031f 	and.w	r3, r3, #31
 8006e4a:	223f      	movs	r2, #63	@ 0x3f
 8006e4c:	409a      	lsls	r2, r3
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	609a      	str	r2, [r3, #8]
 8006e52:	e0fd      	b.n	8007050 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a28      	ldr	r2, [pc, #160]	@ (8006efc <HAL_DMA_Init+0x3e4>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d04a      	beq.n	8006ef4 <HAL_DMA_Init+0x3dc>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a27      	ldr	r2, [pc, #156]	@ (8006f00 <HAL_DMA_Init+0x3e8>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d045      	beq.n	8006ef4 <HAL_DMA_Init+0x3dc>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a25      	ldr	r2, [pc, #148]	@ (8006f04 <HAL_DMA_Init+0x3ec>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d040      	beq.n	8006ef4 <HAL_DMA_Init+0x3dc>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a24      	ldr	r2, [pc, #144]	@ (8006f08 <HAL_DMA_Init+0x3f0>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d03b      	beq.n	8006ef4 <HAL_DMA_Init+0x3dc>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a22      	ldr	r2, [pc, #136]	@ (8006f0c <HAL_DMA_Init+0x3f4>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d036      	beq.n	8006ef4 <HAL_DMA_Init+0x3dc>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a21      	ldr	r2, [pc, #132]	@ (8006f10 <HAL_DMA_Init+0x3f8>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d031      	beq.n	8006ef4 <HAL_DMA_Init+0x3dc>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a1f      	ldr	r2, [pc, #124]	@ (8006f14 <HAL_DMA_Init+0x3fc>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d02c      	beq.n	8006ef4 <HAL_DMA_Init+0x3dc>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a1e      	ldr	r2, [pc, #120]	@ (8006f18 <HAL_DMA_Init+0x400>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d027      	beq.n	8006ef4 <HAL_DMA_Init+0x3dc>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a1c      	ldr	r2, [pc, #112]	@ (8006f1c <HAL_DMA_Init+0x404>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d022      	beq.n	8006ef4 <HAL_DMA_Init+0x3dc>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a1b      	ldr	r2, [pc, #108]	@ (8006f20 <HAL_DMA_Init+0x408>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d01d      	beq.n	8006ef4 <HAL_DMA_Init+0x3dc>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a19      	ldr	r2, [pc, #100]	@ (8006f24 <HAL_DMA_Init+0x40c>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d018      	beq.n	8006ef4 <HAL_DMA_Init+0x3dc>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a18      	ldr	r2, [pc, #96]	@ (8006f28 <HAL_DMA_Init+0x410>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d013      	beq.n	8006ef4 <HAL_DMA_Init+0x3dc>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a16      	ldr	r2, [pc, #88]	@ (8006f2c <HAL_DMA_Init+0x414>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d00e      	beq.n	8006ef4 <HAL_DMA_Init+0x3dc>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a15      	ldr	r2, [pc, #84]	@ (8006f30 <HAL_DMA_Init+0x418>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d009      	beq.n	8006ef4 <HAL_DMA_Init+0x3dc>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a13      	ldr	r2, [pc, #76]	@ (8006f34 <HAL_DMA_Init+0x41c>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d004      	beq.n	8006ef4 <HAL_DMA_Init+0x3dc>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a12      	ldr	r2, [pc, #72]	@ (8006f38 <HAL_DMA_Init+0x420>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d123      	bne.n	8006f3c <HAL_DMA_Init+0x424>
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e022      	b.n	8006f3e <HAL_DMA_Init+0x426>
 8006ef8:	fe10803f 	.word	0xfe10803f
 8006efc:	48022c08 	.word	0x48022c08
 8006f00:	48022c1c 	.word	0x48022c1c
 8006f04:	48022c30 	.word	0x48022c30
 8006f08:	48022c44 	.word	0x48022c44
 8006f0c:	48022c58 	.word	0x48022c58
 8006f10:	48022c6c 	.word	0x48022c6c
 8006f14:	48022c80 	.word	0x48022c80
 8006f18:	48022c94 	.word	0x48022c94
 8006f1c:	58025408 	.word	0x58025408
 8006f20:	5802541c 	.word	0x5802541c
 8006f24:	58025430 	.word	0x58025430
 8006f28:	58025444 	.word	0x58025444
 8006f2c:	58025458 	.word	0x58025458
 8006f30:	5802546c 	.word	0x5802546c
 8006f34:	58025480 	.word	0x58025480
 8006f38:	58025494 	.word	0x58025494
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d07d      	beq.n	800703e <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a7f      	ldr	r2, [pc, #508]	@ (8007144 <HAL_DMA_Init+0x62c>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d021      	beq.n	8006f90 <HAL_DMA_Init+0x478>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a7d      	ldr	r2, [pc, #500]	@ (8007148 <HAL_DMA_Init+0x630>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d01c      	beq.n	8006f90 <HAL_DMA_Init+0x478>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a7c      	ldr	r2, [pc, #496]	@ (800714c <HAL_DMA_Init+0x634>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d017      	beq.n	8006f90 <HAL_DMA_Init+0x478>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a7a      	ldr	r2, [pc, #488]	@ (8007150 <HAL_DMA_Init+0x638>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d012      	beq.n	8006f90 <HAL_DMA_Init+0x478>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a79      	ldr	r2, [pc, #484]	@ (8007154 <HAL_DMA_Init+0x63c>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d00d      	beq.n	8006f90 <HAL_DMA_Init+0x478>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a77      	ldr	r2, [pc, #476]	@ (8007158 <HAL_DMA_Init+0x640>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d008      	beq.n	8006f90 <HAL_DMA_Init+0x478>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a76      	ldr	r2, [pc, #472]	@ (800715c <HAL_DMA_Init+0x644>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d003      	beq.n	8006f90 <HAL_DMA_Init+0x478>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a74      	ldr	r2, [pc, #464]	@ (8007160 <HAL_DMA_Init+0x648>)
 8006f8e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2202      	movs	r2, #2
 8006f94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006fa8:	697a      	ldr	r2, [r7, #20]
 8006faa:	4b6e      	ldr	r3, [pc, #440]	@ (8007164 <HAL_DMA_Init+0x64c>)
 8006fac:	4013      	ands	r3, r2
 8006fae:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	2b40      	cmp	r3, #64	@ 0x40
 8006fb6:	d008      	beq.n	8006fca <HAL_DMA_Init+0x4b2>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	2b80      	cmp	r3, #128	@ 0x80
 8006fbe:	d102      	bne.n	8006fc6 <HAL_DMA_Init+0x4ae>
 8006fc0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006fc4:	e002      	b.n	8006fcc <HAL_DMA_Init+0x4b4>
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	e000      	b.n	8006fcc <HAL_DMA_Init+0x4b4>
 8006fca:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	68d2      	ldr	r2, [r2, #12]
 8006fd0:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006fd2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006fda:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	695b      	ldr	r3, [r3, #20]
 8006fe0:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006fe2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	699b      	ldr	r3, [r3, #24]
 8006fe8:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006fea:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	69db      	ldr	r3, [r3, #28]
 8006ff0:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006ff2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a1b      	ldr	r3, [r3, #32]
 8006ff8:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006ffa:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	4b55      	ldr	r3, [pc, #340]	@ (8007168 <HAL_DMA_Init+0x650>)
 8007012:	4413      	add	r3, r2
 8007014:	4a55      	ldr	r2, [pc, #340]	@ (800716c <HAL_DMA_Init+0x654>)
 8007016:	fba2 2303 	umull	r2, r3, r2, r3
 800701a:	091b      	lsrs	r3, r3, #4
 800701c:	009a      	lsls	r2, r3, #2
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f002 fa26 	bl	8009474 <DMA_CalcBaseAndBitshift>
 8007028:	4603      	mov	r3, r0
 800702a:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007030:	f003 031f 	and.w	r3, r3, #31
 8007034:	2201      	movs	r2, #1
 8007036:	409a      	lsls	r2, r3
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	605a      	str	r2, [r3, #4]
 800703c:	e008      	b.n	8007050 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2240      	movs	r2, #64	@ 0x40
 8007042:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2203      	movs	r2, #3
 8007048:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e0ed      	b.n	800722c <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a46      	ldr	r2, [pc, #280]	@ (8007170 <HAL_DMA_Init+0x658>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d072      	beq.n	8007140 <HAL_DMA_Init+0x628>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a45      	ldr	r2, [pc, #276]	@ (8007174 <HAL_DMA_Init+0x65c>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d06d      	beq.n	8007140 <HAL_DMA_Init+0x628>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a43      	ldr	r2, [pc, #268]	@ (8007178 <HAL_DMA_Init+0x660>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d068      	beq.n	8007140 <HAL_DMA_Init+0x628>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a42      	ldr	r2, [pc, #264]	@ (800717c <HAL_DMA_Init+0x664>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d063      	beq.n	8007140 <HAL_DMA_Init+0x628>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a40      	ldr	r2, [pc, #256]	@ (8007180 <HAL_DMA_Init+0x668>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d05e      	beq.n	8007140 <HAL_DMA_Init+0x628>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a3f      	ldr	r2, [pc, #252]	@ (8007184 <HAL_DMA_Init+0x66c>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d059      	beq.n	8007140 <HAL_DMA_Init+0x628>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a3d      	ldr	r2, [pc, #244]	@ (8007188 <HAL_DMA_Init+0x670>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d054      	beq.n	8007140 <HAL_DMA_Init+0x628>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a3c      	ldr	r2, [pc, #240]	@ (800718c <HAL_DMA_Init+0x674>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d04f      	beq.n	8007140 <HAL_DMA_Init+0x628>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a3a      	ldr	r2, [pc, #232]	@ (8007190 <HAL_DMA_Init+0x678>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d04a      	beq.n	8007140 <HAL_DMA_Init+0x628>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a39      	ldr	r2, [pc, #228]	@ (8007194 <HAL_DMA_Init+0x67c>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d045      	beq.n	8007140 <HAL_DMA_Init+0x628>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a37      	ldr	r2, [pc, #220]	@ (8007198 <HAL_DMA_Init+0x680>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d040      	beq.n	8007140 <HAL_DMA_Init+0x628>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a36      	ldr	r2, [pc, #216]	@ (800719c <HAL_DMA_Init+0x684>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d03b      	beq.n	8007140 <HAL_DMA_Init+0x628>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a34      	ldr	r2, [pc, #208]	@ (80071a0 <HAL_DMA_Init+0x688>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d036      	beq.n	8007140 <HAL_DMA_Init+0x628>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a33      	ldr	r2, [pc, #204]	@ (80071a4 <HAL_DMA_Init+0x68c>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d031      	beq.n	8007140 <HAL_DMA_Init+0x628>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a31      	ldr	r2, [pc, #196]	@ (80071a8 <HAL_DMA_Init+0x690>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d02c      	beq.n	8007140 <HAL_DMA_Init+0x628>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a30      	ldr	r2, [pc, #192]	@ (80071ac <HAL_DMA_Init+0x694>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d027      	beq.n	8007140 <HAL_DMA_Init+0x628>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a13      	ldr	r2, [pc, #76]	@ (8007144 <HAL_DMA_Init+0x62c>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d022      	beq.n	8007140 <HAL_DMA_Init+0x628>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a12      	ldr	r2, [pc, #72]	@ (8007148 <HAL_DMA_Init+0x630>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d01d      	beq.n	8007140 <HAL_DMA_Init+0x628>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a10      	ldr	r2, [pc, #64]	@ (800714c <HAL_DMA_Init+0x634>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d018      	beq.n	8007140 <HAL_DMA_Init+0x628>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a0f      	ldr	r2, [pc, #60]	@ (8007150 <HAL_DMA_Init+0x638>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d013      	beq.n	8007140 <HAL_DMA_Init+0x628>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a0d      	ldr	r2, [pc, #52]	@ (8007154 <HAL_DMA_Init+0x63c>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d00e      	beq.n	8007140 <HAL_DMA_Init+0x628>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a0c      	ldr	r2, [pc, #48]	@ (8007158 <HAL_DMA_Init+0x640>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d009      	beq.n	8007140 <HAL_DMA_Init+0x628>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a0a      	ldr	r2, [pc, #40]	@ (800715c <HAL_DMA_Init+0x644>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d004      	beq.n	8007140 <HAL_DMA_Init+0x628>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a09      	ldr	r2, [pc, #36]	@ (8007160 <HAL_DMA_Init+0x648>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d137      	bne.n	80071b0 <HAL_DMA_Init+0x698>
 8007140:	2301      	movs	r3, #1
 8007142:	e036      	b.n	80071b2 <HAL_DMA_Init+0x69a>
 8007144:	58025408 	.word	0x58025408
 8007148:	5802541c 	.word	0x5802541c
 800714c:	58025430 	.word	0x58025430
 8007150:	58025444 	.word	0x58025444
 8007154:	58025458 	.word	0x58025458
 8007158:	5802546c 	.word	0x5802546c
 800715c:	58025480 	.word	0x58025480
 8007160:	58025494 	.word	0x58025494
 8007164:	fffe000f 	.word	0xfffe000f
 8007168:	a7fdabf8 	.word	0xa7fdabf8
 800716c:	cccccccd 	.word	0xcccccccd
 8007170:	40020010 	.word	0x40020010
 8007174:	40020028 	.word	0x40020028
 8007178:	40020040 	.word	0x40020040
 800717c:	40020058 	.word	0x40020058
 8007180:	40020070 	.word	0x40020070
 8007184:	40020088 	.word	0x40020088
 8007188:	400200a0 	.word	0x400200a0
 800718c:	400200b8 	.word	0x400200b8
 8007190:	40020410 	.word	0x40020410
 8007194:	40020428 	.word	0x40020428
 8007198:	40020440 	.word	0x40020440
 800719c:	40020458 	.word	0x40020458
 80071a0:	40020470 	.word	0x40020470
 80071a4:	40020488 	.word	0x40020488
 80071a8:	400204a0 	.word	0x400204a0
 80071ac:	400204b8 	.word	0x400204b8
 80071b0:	2300      	movs	r3, #0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d032      	beq.n	800721c <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f002 fa8a 	bl	80096d0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	2b80      	cmp	r3, #128	@ 0x80
 80071c2:	d102      	bne.n	80071ca <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	685a      	ldr	r2, [r3, #4]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071d2:	b2d2      	uxtb	r2, r2
 80071d4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80071de:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d010      	beq.n	800720a <HAL_DMA_Init+0x6f2>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	2b08      	cmp	r3, #8
 80071ee:	d80c      	bhi.n	800720a <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f002 fb07 	bl	8009804 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071fa:	2200      	movs	r2, #0
 80071fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007206:	605a      	str	r2, [r3, #4]
 8007208:	e008      	b.n	800721c <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2201      	movs	r2, #1
 8007226:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3718      	adds	r7, #24
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b086      	sub	sp, #24
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
 8007240:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007242:	2300      	movs	r3, #0
 8007244:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d101      	bne.n	8007250 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	e226      	b.n	800769e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007256:	2b01      	cmp	r3, #1
 8007258:	d101      	bne.n	800725e <HAL_DMA_Start_IT+0x2a>
 800725a:	2302      	movs	r3, #2
 800725c:	e21f      	b.n	800769e <HAL_DMA_Start_IT+0x46a>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2201      	movs	r2, #1
 8007262:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b01      	cmp	r3, #1
 8007270:	f040 820a 	bne.w	8007688 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2202      	movs	r2, #2
 8007278:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2200      	movs	r2, #0
 8007280:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a68      	ldr	r2, [pc, #416]	@ (8007428 <HAL_DMA_Start_IT+0x1f4>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d04a      	beq.n	8007322 <HAL_DMA_Start_IT+0xee>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a66      	ldr	r2, [pc, #408]	@ (800742c <HAL_DMA_Start_IT+0x1f8>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d045      	beq.n	8007322 <HAL_DMA_Start_IT+0xee>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a65      	ldr	r2, [pc, #404]	@ (8007430 <HAL_DMA_Start_IT+0x1fc>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d040      	beq.n	8007322 <HAL_DMA_Start_IT+0xee>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a63      	ldr	r2, [pc, #396]	@ (8007434 <HAL_DMA_Start_IT+0x200>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d03b      	beq.n	8007322 <HAL_DMA_Start_IT+0xee>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a62      	ldr	r2, [pc, #392]	@ (8007438 <HAL_DMA_Start_IT+0x204>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d036      	beq.n	8007322 <HAL_DMA_Start_IT+0xee>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a60      	ldr	r2, [pc, #384]	@ (800743c <HAL_DMA_Start_IT+0x208>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d031      	beq.n	8007322 <HAL_DMA_Start_IT+0xee>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a5f      	ldr	r2, [pc, #380]	@ (8007440 <HAL_DMA_Start_IT+0x20c>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d02c      	beq.n	8007322 <HAL_DMA_Start_IT+0xee>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a5d      	ldr	r2, [pc, #372]	@ (8007444 <HAL_DMA_Start_IT+0x210>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d027      	beq.n	8007322 <HAL_DMA_Start_IT+0xee>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a5c      	ldr	r2, [pc, #368]	@ (8007448 <HAL_DMA_Start_IT+0x214>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d022      	beq.n	8007322 <HAL_DMA_Start_IT+0xee>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a5a      	ldr	r2, [pc, #360]	@ (800744c <HAL_DMA_Start_IT+0x218>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d01d      	beq.n	8007322 <HAL_DMA_Start_IT+0xee>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a59      	ldr	r2, [pc, #356]	@ (8007450 <HAL_DMA_Start_IT+0x21c>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d018      	beq.n	8007322 <HAL_DMA_Start_IT+0xee>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a57      	ldr	r2, [pc, #348]	@ (8007454 <HAL_DMA_Start_IT+0x220>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d013      	beq.n	8007322 <HAL_DMA_Start_IT+0xee>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a56      	ldr	r2, [pc, #344]	@ (8007458 <HAL_DMA_Start_IT+0x224>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d00e      	beq.n	8007322 <HAL_DMA_Start_IT+0xee>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a54      	ldr	r2, [pc, #336]	@ (800745c <HAL_DMA_Start_IT+0x228>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d009      	beq.n	8007322 <HAL_DMA_Start_IT+0xee>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a53      	ldr	r2, [pc, #332]	@ (8007460 <HAL_DMA_Start_IT+0x22c>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d004      	beq.n	8007322 <HAL_DMA_Start_IT+0xee>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a51      	ldr	r2, [pc, #324]	@ (8007464 <HAL_DMA_Start_IT+0x230>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d108      	bne.n	8007334 <HAL_DMA_Start_IT+0x100>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f022 0201 	bic.w	r2, r2, #1
 8007330:	601a      	str	r2, [r3, #0]
 8007332:	e007      	b.n	8007344 <HAL_DMA_Start_IT+0x110>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f022 0201 	bic.w	r2, r2, #1
 8007342:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	68b9      	ldr	r1, [r7, #8]
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f001 feae 	bl	80090ac <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a34      	ldr	r2, [pc, #208]	@ (8007428 <HAL_DMA_Start_IT+0x1f4>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d04a      	beq.n	80073f0 <HAL_DMA_Start_IT+0x1bc>
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a33      	ldr	r2, [pc, #204]	@ (800742c <HAL_DMA_Start_IT+0x1f8>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d045      	beq.n	80073f0 <HAL_DMA_Start_IT+0x1bc>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a31      	ldr	r2, [pc, #196]	@ (8007430 <HAL_DMA_Start_IT+0x1fc>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d040      	beq.n	80073f0 <HAL_DMA_Start_IT+0x1bc>
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a30      	ldr	r2, [pc, #192]	@ (8007434 <HAL_DMA_Start_IT+0x200>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d03b      	beq.n	80073f0 <HAL_DMA_Start_IT+0x1bc>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a2e      	ldr	r2, [pc, #184]	@ (8007438 <HAL_DMA_Start_IT+0x204>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d036      	beq.n	80073f0 <HAL_DMA_Start_IT+0x1bc>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a2d      	ldr	r2, [pc, #180]	@ (800743c <HAL_DMA_Start_IT+0x208>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d031      	beq.n	80073f0 <HAL_DMA_Start_IT+0x1bc>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a2b      	ldr	r2, [pc, #172]	@ (8007440 <HAL_DMA_Start_IT+0x20c>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d02c      	beq.n	80073f0 <HAL_DMA_Start_IT+0x1bc>
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a2a      	ldr	r2, [pc, #168]	@ (8007444 <HAL_DMA_Start_IT+0x210>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d027      	beq.n	80073f0 <HAL_DMA_Start_IT+0x1bc>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a28      	ldr	r2, [pc, #160]	@ (8007448 <HAL_DMA_Start_IT+0x214>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d022      	beq.n	80073f0 <HAL_DMA_Start_IT+0x1bc>
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a27      	ldr	r2, [pc, #156]	@ (800744c <HAL_DMA_Start_IT+0x218>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d01d      	beq.n	80073f0 <HAL_DMA_Start_IT+0x1bc>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a25      	ldr	r2, [pc, #148]	@ (8007450 <HAL_DMA_Start_IT+0x21c>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d018      	beq.n	80073f0 <HAL_DMA_Start_IT+0x1bc>
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a24      	ldr	r2, [pc, #144]	@ (8007454 <HAL_DMA_Start_IT+0x220>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d013      	beq.n	80073f0 <HAL_DMA_Start_IT+0x1bc>
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a22      	ldr	r2, [pc, #136]	@ (8007458 <HAL_DMA_Start_IT+0x224>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d00e      	beq.n	80073f0 <HAL_DMA_Start_IT+0x1bc>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a21      	ldr	r2, [pc, #132]	@ (800745c <HAL_DMA_Start_IT+0x228>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d009      	beq.n	80073f0 <HAL_DMA_Start_IT+0x1bc>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a1f      	ldr	r2, [pc, #124]	@ (8007460 <HAL_DMA_Start_IT+0x22c>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d004      	beq.n	80073f0 <HAL_DMA_Start_IT+0x1bc>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a1e      	ldr	r2, [pc, #120]	@ (8007464 <HAL_DMA_Start_IT+0x230>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d101      	bne.n	80073f4 <HAL_DMA_Start_IT+0x1c0>
 80073f0:	2301      	movs	r3, #1
 80073f2:	e000      	b.n	80073f6 <HAL_DMA_Start_IT+0x1c2>
 80073f4:	2300      	movs	r3, #0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d036      	beq.n	8007468 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f023 021e 	bic.w	r2, r3, #30
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f042 0216 	orr.w	r2, r2, #22
 800740c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007412:	2b00      	cmp	r3, #0
 8007414:	d03e      	beq.n	8007494 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f042 0208 	orr.w	r2, r2, #8
 8007424:	601a      	str	r2, [r3, #0]
 8007426:	e035      	b.n	8007494 <HAL_DMA_Start_IT+0x260>
 8007428:	40020010 	.word	0x40020010
 800742c:	40020028 	.word	0x40020028
 8007430:	40020040 	.word	0x40020040
 8007434:	40020058 	.word	0x40020058
 8007438:	40020070 	.word	0x40020070
 800743c:	40020088 	.word	0x40020088
 8007440:	400200a0 	.word	0x400200a0
 8007444:	400200b8 	.word	0x400200b8
 8007448:	40020410 	.word	0x40020410
 800744c:	40020428 	.word	0x40020428
 8007450:	40020440 	.word	0x40020440
 8007454:	40020458 	.word	0x40020458
 8007458:	40020470 	.word	0x40020470
 800745c:	40020488 	.word	0x40020488
 8007460:	400204a0 	.word	0x400204a0
 8007464:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f023 020e 	bic.w	r2, r3, #14
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f042 020a 	orr.w	r2, r2, #10
 800747a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007480:	2b00      	cmp	r3, #0
 8007482:	d007      	beq.n	8007494 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f042 0204 	orr.w	r2, r2, #4
 8007492:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a83      	ldr	r2, [pc, #524]	@ (80076a8 <HAL_DMA_Start_IT+0x474>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d072      	beq.n	8007584 <HAL_DMA_Start_IT+0x350>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a82      	ldr	r2, [pc, #520]	@ (80076ac <HAL_DMA_Start_IT+0x478>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d06d      	beq.n	8007584 <HAL_DMA_Start_IT+0x350>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a80      	ldr	r2, [pc, #512]	@ (80076b0 <HAL_DMA_Start_IT+0x47c>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d068      	beq.n	8007584 <HAL_DMA_Start_IT+0x350>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a7f      	ldr	r2, [pc, #508]	@ (80076b4 <HAL_DMA_Start_IT+0x480>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d063      	beq.n	8007584 <HAL_DMA_Start_IT+0x350>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a7d      	ldr	r2, [pc, #500]	@ (80076b8 <HAL_DMA_Start_IT+0x484>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d05e      	beq.n	8007584 <HAL_DMA_Start_IT+0x350>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a7c      	ldr	r2, [pc, #496]	@ (80076bc <HAL_DMA_Start_IT+0x488>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d059      	beq.n	8007584 <HAL_DMA_Start_IT+0x350>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a7a      	ldr	r2, [pc, #488]	@ (80076c0 <HAL_DMA_Start_IT+0x48c>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d054      	beq.n	8007584 <HAL_DMA_Start_IT+0x350>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a79      	ldr	r2, [pc, #484]	@ (80076c4 <HAL_DMA_Start_IT+0x490>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d04f      	beq.n	8007584 <HAL_DMA_Start_IT+0x350>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a77      	ldr	r2, [pc, #476]	@ (80076c8 <HAL_DMA_Start_IT+0x494>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d04a      	beq.n	8007584 <HAL_DMA_Start_IT+0x350>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a76      	ldr	r2, [pc, #472]	@ (80076cc <HAL_DMA_Start_IT+0x498>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d045      	beq.n	8007584 <HAL_DMA_Start_IT+0x350>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a74      	ldr	r2, [pc, #464]	@ (80076d0 <HAL_DMA_Start_IT+0x49c>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d040      	beq.n	8007584 <HAL_DMA_Start_IT+0x350>
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a73      	ldr	r2, [pc, #460]	@ (80076d4 <HAL_DMA_Start_IT+0x4a0>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d03b      	beq.n	8007584 <HAL_DMA_Start_IT+0x350>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a71      	ldr	r2, [pc, #452]	@ (80076d8 <HAL_DMA_Start_IT+0x4a4>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d036      	beq.n	8007584 <HAL_DMA_Start_IT+0x350>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a70      	ldr	r2, [pc, #448]	@ (80076dc <HAL_DMA_Start_IT+0x4a8>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d031      	beq.n	8007584 <HAL_DMA_Start_IT+0x350>
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a6e      	ldr	r2, [pc, #440]	@ (80076e0 <HAL_DMA_Start_IT+0x4ac>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d02c      	beq.n	8007584 <HAL_DMA_Start_IT+0x350>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a6d      	ldr	r2, [pc, #436]	@ (80076e4 <HAL_DMA_Start_IT+0x4b0>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d027      	beq.n	8007584 <HAL_DMA_Start_IT+0x350>
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a6b      	ldr	r2, [pc, #428]	@ (80076e8 <HAL_DMA_Start_IT+0x4b4>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d022      	beq.n	8007584 <HAL_DMA_Start_IT+0x350>
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a6a      	ldr	r2, [pc, #424]	@ (80076ec <HAL_DMA_Start_IT+0x4b8>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d01d      	beq.n	8007584 <HAL_DMA_Start_IT+0x350>
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a68      	ldr	r2, [pc, #416]	@ (80076f0 <HAL_DMA_Start_IT+0x4bc>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d018      	beq.n	8007584 <HAL_DMA_Start_IT+0x350>
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a67      	ldr	r2, [pc, #412]	@ (80076f4 <HAL_DMA_Start_IT+0x4c0>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d013      	beq.n	8007584 <HAL_DMA_Start_IT+0x350>
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a65      	ldr	r2, [pc, #404]	@ (80076f8 <HAL_DMA_Start_IT+0x4c4>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d00e      	beq.n	8007584 <HAL_DMA_Start_IT+0x350>
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a64      	ldr	r2, [pc, #400]	@ (80076fc <HAL_DMA_Start_IT+0x4c8>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d009      	beq.n	8007584 <HAL_DMA_Start_IT+0x350>
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a62      	ldr	r2, [pc, #392]	@ (8007700 <HAL_DMA_Start_IT+0x4cc>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d004      	beq.n	8007584 <HAL_DMA_Start_IT+0x350>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a61      	ldr	r2, [pc, #388]	@ (8007704 <HAL_DMA_Start_IT+0x4d0>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d101      	bne.n	8007588 <HAL_DMA_Start_IT+0x354>
 8007584:	2301      	movs	r3, #1
 8007586:	e000      	b.n	800758a <HAL_DMA_Start_IT+0x356>
 8007588:	2300      	movs	r3, #0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d01a      	beq.n	80075c4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007598:	2b00      	cmp	r3, #0
 800759a:	d007      	beq.n	80075ac <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80075aa:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d007      	beq.n	80075c4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80075c2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a37      	ldr	r2, [pc, #220]	@ (80076a8 <HAL_DMA_Start_IT+0x474>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d04a      	beq.n	8007664 <HAL_DMA_Start_IT+0x430>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a36      	ldr	r2, [pc, #216]	@ (80076ac <HAL_DMA_Start_IT+0x478>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d045      	beq.n	8007664 <HAL_DMA_Start_IT+0x430>
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a34      	ldr	r2, [pc, #208]	@ (80076b0 <HAL_DMA_Start_IT+0x47c>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d040      	beq.n	8007664 <HAL_DMA_Start_IT+0x430>
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a33      	ldr	r2, [pc, #204]	@ (80076b4 <HAL_DMA_Start_IT+0x480>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d03b      	beq.n	8007664 <HAL_DMA_Start_IT+0x430>
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a31      	ldr	r2, [pc, #196]	@ (80076b8 <HAL_DMA_Start_IT+0x484>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d036      	beq.n	8007664 <HAL_DMA_Start_IT+0x430>
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a30      	ldr	r2, [pc, #192]	@ (80076bc <HAL_DMA_Start_IT+0x488>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d031      	beq.n	8007664 <HAL_DMA_Start_IT+0x430>
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a2e      	ldr	r2, [pc, #184]	@ (80076c0 <HAL_DMA_Start_IT+0x48c>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d02c      	beq.n	8007664 <HAL_DMA_Start_IT+0x430>
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a2d      	ldr	r2, [pc, #180]	@ (80076c4 <HAL_DMA_Start_IT+0x490>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d027      	beq.n	8007664 <HAL_DMA_Start_IT+0x430>
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a2b      	ldr	r2, [pc, #172]	@ (80076c8 <HAL_DMA_Start_IT+0x494>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d022      	beq.n	8007664 <HAL_DMA_Start_IT+0x430>
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a2a      	ldr	r2, [pc, #168]	@ (80076cc <HAL_DMA_Start_IT+0x498>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d01d      	beq.n	8007664 <HAL_DMA_Start_IT+0x430>
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a28      	ldr	r2, [pc, #160]	@ (80076d0 <HAL_DMA_Start_IT+0x49c>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d018      	beq.n	8007664 <HAL_DMA_Start_IT+0x430>
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a27      	ldr	r2, [pc, #156]	@ (80076d4 <HAL_DMA_Start_IT+0x4a0>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d013      	beq.n	8007664 <HAL_DMA_Start_IT+0x430>
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a25      	ldr	r2, [pc, #148]	@ (80076d8 <HAL_DMA_Start_IT+0x4a4>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d00e      	beq.n	8007664 <HAL_DMA_Start_IT+0x430>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a24      	ldr	r2, [pc, #144]	@ (80076dc <HAL_DMA_Start_IT+0x4a8>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d009      	beq.n	8007664 <HAL_DMA_Start_IT+0x430>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a22      	ldr	r2, [pc, #136]	@ (80076e0 <HAL_DMA_Start_IT+0x4ac>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d004      	beq.n	8007664 <HAL_DMA_Start_IT+0x430>
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a21      	ldr	r2, [pc, #132]	@ (80076e4 <HAL_DMA_Start_IT+0x4b0>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d108      	bne.n	8007676 <HAL_DMA_Start_IT+0x442>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f042 0201 	orr.w	r2, r2, #1
 8007672:	601a      	str	r2, [r3, #0]
 8007674:	e012      	b.n	800769c <HAL_DMA_Start_IT+0x468>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f042 0201 	orr.w	r2, r2, #1
 8007684:	601a      	str	r2, [r3, #0]
 8007686:	e009      	b.n	800769c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800768e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800769c:	7dfb      	ldrb	r3, [r7, #23]
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3718      	adds	r7, #24
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	40020010 	.word	0x40020010
 80076ac:	40020028 	.word	0x40020028
 80076b0:	40020040 	.word	0x40020040
 80076b4:	40020058 	.word	0x40020058
 80076b8:	40020070 	.word	0x40020070
 80076bc:	40020088 	.word	0x40020088
 80076c0:	400200a0 	.word	0x400200a0
 80076c4:	400200b8 	.word	0x400200b8
 80076c8:	40020410 	.word	0x40020410
 80076cc:	40020428 	.word	0x40020428
 80076d0:	40020440 	.word	0x40020440
 80076d4:	40020458 	.word	0x40020458
 80076d8:	40020470 	.word	0x40020470
 80076dc:	40020488 	.word	0x40020488
 80076e0:	400204a0 	.word	0x400204a0
 80076e4:	400204b8 	.word	0x400204b8
 80076e8:	58025408 	.word	0x58025408
 80076ec:	5802541c 	.word	0x5802541c
 80076f0:	58025430 	.word	0x58025430
 80076f4:	58025444 	.word	0x58025444
 80076f8:	58025458 	.word	0x58025458
 80076fc:	5802546c 	.word	0x5802546c
 8007700:	58025480 	.word	0x58025480
 8007704:	58025494 	.word	0x58025494

08007708 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b086      	sub	sp, #24
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007710:	f7ff f87a 	bl	8006808 <HAL_GetTick>
 8007714:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d101      	bne.n	8007720 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	e2dc      	b.n	8007cda <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007726:	b2db      	uxtb	r3, r3
 8007728:	2b02      	cmp	r3, #2
 800772a:	d008      	beq.n	800773e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2280      	movs	r2, #128	@ 0x80
 8007730:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e2cd      	b.n	8007cda <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a76      	ldr	r2, [pc, #472]	@ (800791c <HAL_DMA_Abort+0x214>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d04a      	beq.n	80077de <HAL_DMA_Abort+0xd6>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a74      	ldr	r2, [pc, #464]	@ (8007920 <HAL_DMA_Abort+0x218>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d045      	beq.n	80077de <HAL_DMA_Abort+0xd6>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a73      	ldr	r2, [pc, #460]	@ (8007924 <HAL_DMA_Abort+0x21c>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d040      	beq.n	80077de <HAL_DMA_Abort+0xd6>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a71      	ldr	r2, [pc, #452]	@ (8007928 <HAL_DMA_Abort+0x220>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d03b      	beq.n	80077de <HAL_DMA_Abort+0xd6>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a70      	ldr	r2, [pc, #448]	@ (800792c <HAL_DMA_Abort+0x224>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d036      	beq.n	80077de <HAL_DMA_Abort+0xd6>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a6e      	ldr	r2, [pc, #440]	@ (8007930 <HAL_DMA_Abort+0x228>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d031      	beq.n	80077de <HAL_DMA_Abort+0xd6>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a6d      	ldr	r2, [pc, #436]	@ (8007934 <HAL_DMA_Abort+0x22c>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d02c      	beq.n	80077de <HAL_DMA_Abort+0xd6>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a6b      	ldr	r2, [pc, #428]	@ (8007938 <HAL_DMA_Abort+0x230>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d027      	beq.n	80077de <HAL_DMA_Abort+0xd6>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a6a      	ldr	r2, [pc, #424]	@ (800793c <HAL_DMA_Abort+0x234>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d022      	beq.n	80077de <HAL_DMA_Abort+0xd6>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a68      	ldr	r2, [pc, #416]	@ (8007940 <HAL_DMA_Abort+0x238>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d01d      	beq.n	80077de <HAL_DMA_Abort+0xd6>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a67      	ldr	r2, [pc, #412]	@ (8007944 <HAL_DMA_Abort+0x23c>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d018      	beq.n	80077de <HAL_DMA_Abort+0xd6>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a65      	ldr	r2, [pc, #404]	@ (8007948 <HAL_DMA_Abort+0x240>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d013      	beq.n	80077de <HAL_DMA_Abort+0xd6>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a64      	ldr	r2, [pc, #400]	@ (800794c <HAL_DMA_Abort+0x244>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d00e      	beq.n	80077de <HAL_DMA_Abort+0xd6>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a62      	ldr	r2, [pc, #392]	@ (8007950 <HAL_DMA_Abort+0x248>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d009      	beq.n	80077de <HAL_DMA_Abort+0xd6>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a61      	ldr	r2, [pc, #388]	@ (8007954 <HAL_DMA_Abort+0x24c>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d004      	beq.n	80077de <HAL_DMA_Abort+0xd6>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a5f      	ldr	r2, [pc, #380]	@ (8007958 <HAL_DMA_Abort+0x250>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d101      	bne.n	80077e2 <HAL_DMA_Abort+0xda>
 80077de:	2301      	movs	r3, #1
 80077e0:	e000      	b.n	80077e4 <HAL_DMA_Abort+0xdc>
 80077e2:	2300      	movs	r3, #0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d013      	beq.n	8007810 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f022 021e 	bic.w	r2, r2, #30
 80077f6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	695a      	ldr	r2, [r3, #20]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007806:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	617b      	str	r3, [r7, #20]
 800780e:	e00a      	b.n	8007826 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f022 020e 	bic.w	r2, r2, #14
 800781e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a3c      	ldr	r2, [pc, #240]	@ (800791c <HAL_DMA_Abort+0x214>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d072      	beq.n	8007916 <HAL_DMA_Abort+0x20e>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a3a      	ldr	r2, [pc, #232]	@ (8007920 <HAL_DMA_Abort+0x218>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d06d      	beq.n	8007916 <HAL_DMA_Abort+0x20e>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a39      	ldr	r2, [pc, #228]	@ (8007924 <HAL_DMA_Abort+0x21c>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d068      	beq.n	8007916 <HAL_DMA_Abort+0x20e>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a37      	ldr	r2, [pc, #220]	@ (8007928 <HAL_DMA_Abort+0x220>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d063      	beq.n	8007916 <HAL_DMA_Abort+0x20e>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a36      	ldr	r2, [pc, #216]	@ (800792c <HAL_DMA_Abort+0x224>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d05e      	beq.n	8007916 <HAL_DMA_Abort+0x20e>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a34      	ldr	r2, [pc, #208]	@ (8007930 <HAL_DMA_Abort+0x228>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d059      	beq.n	8007916 <HAL_DMA_Abort+0x20e>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a33      	ldr	r2, [pc, #204]	@ (8007934 <HAL_DMA_Abort+0x22c>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d054      	beq.n	8007916 <HAL_DMA_Abort+0x20e>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a31      	ldr	r2, [pc, #196]	@ (8007938 <HAL_DMA_Abort+0x230>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d04f      	beq.n	8007916 <HAL_DMA_Abort+0x20e>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a30      	ldr	r2, [pc, #192]	@ (800793c <HAL_DMA_Abort+0x234>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d04a      	beq.n	8007916 <HAL_DMA_Abort+0x20e>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a2e      	ldr	r2, [pc, #184]	@ (8007940 <HAL_DMA_Abort+0x238>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d045      	beq.n	8007916 <HAL_DMA_Abort+0x20e>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a2d      	ldr	r2, [pc, #180]	@ (8007944 <HAL_DMA_Abort+0x23c>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d040      	beq.n	8007916 <HAL_DMA_Abort+0x20e>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a2b      	ldr	r2, [pc, #172]	@ (8007948 <HAL_DMA_Abort+0x240>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d03b      	beq.n	8007916 <HAL_DMA_Abort+0x20e>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a2a      	ldr	r2, [pc, #168]	@ (800794c <HAL_DMA_Abort+0x244>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d036      	beq.n	8007916 <HAL_DMA_Abort+0x20e>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a28      	ldr	r2, [pc, #160]	@ (8007950 <HAL_DMA_Abort+0x248>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d031      	beq.n	8007916 <HAL_DMA_Abort+0x20e>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a27      	ldr	r2, [pc, #156]	@ (8007954 <HAL_DMA_Abort+0x24c>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d02c      	beq.n	8007916 <HAL_DMA_Abort+0x20e>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a25      	ldr	r2, [pc, #148]	@ (8007958 <HAL_DMA_Abort+0x250>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d027      	beq.n	8007916 <HAL_DMA_Abort+0x20e>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a24      	ldr	r2, [pc, #144]	@ (800795c <HAL_DMA_Abort+0x254>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d022      	beq.n	8007916 <HAL_DMA_Abort+0x20e>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a22      	ldr	r2, [pc, #136]	@ (8007960 <HAL_DMA_Abort+0x258>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d01d      	beq.n	8007916 <HAL_DMA_Abort+0x20e>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a21      	ldr	r2, [pc, #132]	@ (8007964 <HAL_DMA_Abort+0x25c>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d018      	beq.n	8007916 <HAL_DMA_Abort+0x20e>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a1f      	ldr	r2, [pc, #124]	@ (8007968 <HAL_DMA_Abort+0x260>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d013      	beq.n	8007916 <HAL_DMA_Abort+0x20e>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a1e      	ldr	r2, [pc, #120]	@ (800796c <HAL_DMA_Abort+0x264>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d00e      	beq.n	8007916 <HAL_DMA_Abort+0x20e>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a1c      	ldr	r2, [pc, #112]	@ (8007970 <HAL_DMA_Abort+0x268>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d009      	beq.n	8007916 <HAL_DMA_Abort+0x20e>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a1b      	ldr	r2, [pc, #108]	@ (8007974 <HAL_DMA_Abort+0x26c>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d004      	beq.n	8007916 <HAL_DMA_Abort+0x20e>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a19      	ldr	r2, [pc, #100]	@ (8007978 <HAL_DMA_Abort+0x270>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d132      	bne.n	800797c <HAL_DMA_Abort+0x274>
 8007916:	2301      	movs	r3, #1
 8007918:	e031      	b.n	800797e <HAL_DMA_Abort+0x276>
 800791a:	bf00      	nop
 800791c:	40020010 	.word	0x40020010
 8007920:	40020028 	.word	0x40020028
 8007924:	40020040 	.word	0x40020040
 8007928:	40020058 	.word	0x40020058
 800792c:	40020070 	.word	0x40020070
 8007930:	40020088 	.word	0x40020088
 8007934:	400200a0 	.word	0x400200a0
 8007938:	400200b8 	.word	0x400200b8
 800793c:	40020410 	.word	0x40020410
 8007940:	40020428 	.word	0x40020428
 8007944:	40020440 	.word	0x40020440
 8007948:	40020458 	.word	0x40020458
 800794c:	40020470 	.word	0x40020470
 8007950:	40020488 	.word	0x40020488
 8007954:	400204a0 	.word	0x400204a0
 8007958:	400204b8 	.word	0x400204b8
 800795c:	58025408 	.word	0x58025408
 8007960:	5802541c 	.word	0x5802541c
 8007964:	58025430 	.word	0x58025430
 8007968:	58025444 	.word	0x58025444
 800796c:	58025458 	.word	0x58025458
 8007970:	5802546c 	.word	0x5802546c
 8007974:	58025480 	.word	0x58025480
 8007978:	58025494 	.word	0x58025494
 800797c:	2300      	movs	r3, #0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d007      	beq.n	8007992 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800798c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007990:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a6d      	ldr	r2, [pc, #436]	@ (8007b4c <HAL_DMA_Abort+0x444>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d04a      	beq.n	8007a32 <HAL_DMA_Abort+0x32a>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a6b      	ldr	r2, [pc, #428]	@ (8007b50 <HAL_DMA_Abort+0x448>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d045      	beq.n	8007a32 <HAL_DMA_Abort+0x32a>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a6a      	ldr	r2, [pc, #424]	@ (8007b54 <HAL_DMA_Abort+0x44c>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d040      	beq.n	8007a32 <HAL_DMA_Abort+0x32a>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a68      	ldr	r2, [pc, #416]	@ (8007b58 <HAL_DMA_Abort+0x450>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d03b      	beq.n	8007a32 <HAL_DMA_Abort+0x32a>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a67      	ldr	r2, [pc, #412]	@ (8007b5c <HAL_DMA_Abort+0x454>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d036      	beq.n	8007a32 <HAL_DMA_Abort+0x32a>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a65      	ldr	r2, [pc, #404]	@ (8007b60 <HAL_DMA_Abort+0x458>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d031      	beq.n	8007a32 <HAL_DMA_Abort+0x32a>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a64      	ldr	r2, [pc, #400]	@ (8007b64 <HAL_DMA_Abort+0x45c>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d02c      	beq.n	8007a32 <HAL_DMA_Abort+0x32a>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a62      	ldr	r2, [pc, #392]	@ (8007b68 <HAL_DMA_Abort+0x460>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d027      	beq.n	8007a32 <HAL_DMA_Abort+0x32a>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a61      	ldr	r2, [pc, #388]	@ (8007b6c <HAL_DMA_Abort+0x464>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d022      	beq.n	8007a32 <HAL_DMA_Abort+0x32a>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a5f      	ldr	r2, [pc, #380]	@ (8007b70 <HAL_DMA_Abort+0x468>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d01d      	beq.n	8007a32 <HAL_DMA_Abort+0x32a>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a5e      	ldr	r2, [pc, #376]	@ (8007b74 <HAL_DMA_Abort+0x46c>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d018      	beq.n	8007a32 <HAL_DMA_Abort+0x32a>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a5c      	ldr	r2, [pc, #368]	@ (8007b78 <HAL_DMA_Abort+0x470>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d013      	beq.n	8007a32 <HAL_DMA_Abort+0x32a>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a5b      	ldr	r2, [pc, #364]	@ (8007b7c <HAL_DMA_Abort+0x474>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d00e      	beq.n	8007a32 <HAL_DMA_Abort+0x32a>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a59      	ldr	r2, [pc, #356]	@ (8007b80 <HAL_DMA_Abort+0x478>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d009      	beq.n	8007a32 <HAL_DMA_Abort+0x32a>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a58      	ldr	r2, [pc, #352]	@ (8007b84 <HAL_DMA_Abort+0x47c>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d004      	beq.n	8007a32 <HAL_DMA_Abort+0x32a>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a56      	ldr	r2, [pc, #344]	@ (8007b88 <HAL_DMA_Abort+0x480>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d108      	bne.n	8007a44 <HAL_DMA_Abort+0x33c>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f022 0201 	bic.w	r2, r2, #1
 8007a40:	601a      	str	r2, [r3, #0]
 8007a42:	e007      	b.n	8007a54 <HAL_DMA_Abort+0x34c>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f022 0201 	bic.w	r2, r2, #1
 8007a52:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007a54:	e013      	b.n	8007a7e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007a56:	f7fe fed7 	bl	8006808 <HAL_GetTick>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	1ad3      	subs	r3, r2, r3
 8007a60:	2b05      	cmp	r3, #5
 8007a62:	d90c      	bls.n	8007a7e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2220      	movs	r2, #32
 8007a68:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2203      	movs	r2, #3
 8007a6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e12d      	b.n	8007cda <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 0301 	and.w	r3, r3, #1
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1e5      	bne.n	8007a56 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a2f      	ldr	r2, [pc, #188]	@ (8007b4c <HAL_DMA_Abort+0x444>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d04a      	beq.n	8007b2a <HAL_DMA_Abort+0x422>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a2d      	ldr	r2, [pc, #180]	@ (8007b50 <HAL_DMA_Abort+0x448>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d045      	beq.n	8007b2a <HAL_DMA_Abort+0x422>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a2c      	ldr	r2, [pc, #176]	@ (8007b54 <HAL_DMA_Abort+0x44c>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d040      	beq.n	8007b2a <HAL_DMA_Abort+0x422>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a2a      	ldr	r2, [pc, #168]	@ (8007b58 <HAL_DMA_Abort+0x450>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d03b      	beq.n	8007b2a <HAL_DMA_Abort+0x422>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a29      	ldr	r2, [pc, #164]	@ (8007b5c <HAL_DMA_Abort+0x454>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d036      	beq.n	8007b2a <HAL_DMA_Abort+0x422>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a27      	ldr	r2, [pc, #156]	@ (8007b60 <HAL_DMA_Abort+0x458>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d031      	beq.n	8007b2a <HAL_DMA_Abort+0x422>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a26      	ldr	r2, [pc, #152]	@ (8007b64 <HAL_DMA_Abort+0x45c>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d02c      	beq.n	8007b2a <HAL_DMA_Abort+0x422>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a24      	ldr	r2, [pc, #144]	@ (8007b68 <HAL_DMA_Abort+0x460>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d027      	beq.n	8007b2a <HAL_DMA_Abort+0x422>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a23      	ldr	r2, [pc, #140]	@ (8007b6c <HAL_DMA_Abort+0x464>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d022      	beq.n	8007b2a <HAL_DMA_Abort+0x422>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a21      	ldr	r2, [pc, #132]	@ (8007b70 <HAL_DMA_Abort+0x468>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d01d      	beq.n	8007b2a <HAL_DMA_Abort+0x422>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a20      	ldr	r2, [pc, #128]	@ (8007b74 <HAL_DMA_Abort+0x46c>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d018      	beq.n	8007b2a <HAL_DMA_Abort+0x422>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a1e      	ldr	r2, [pc, #120]	@ (8007b78 <HAL_DMA_Abort+0x470>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d013      	beq.n	8007b2a <HAL_DMA_Abort+0x422>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a1d      	ldr	r2, [pc, #116]	@ (8007b7c <HAL_DMA_Abort+0x474>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d00e      	beq.n	8007b2a <HAL_DMA_Abort+0x422>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a1b      	ldr	r2, [pc, #108]	@ (8007b80 <HAL_DMA_Abort+0x478>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d009      	beq.n	8007b2a <HAL_DMA_Abort+0x422>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a1a      	ldr	r2, [pc, #104]	@ (8007b84 <HAL_DMA_Abort+0x47c>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d004      	beq.n	8007b2a <HAL_DMA_Abort+0x422>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a18      	ldr	r2, [pc, #96]	@ (8007b88 <HAL_DMA_Abort+0x480>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d101      	bne.n	8007b2e <HAL_DMA_Abort+0x426>
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e000      	b.n	8007b30 <HAL_DMA_Abort+0x428>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d02b      	beq.n	8007b8c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b38:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b3e:	f003 031f 	and.w	r3, r3, #31
 8007b42:	223f      	movs	r2, #63	@ 0x3f
 8007b44:	409a      	lsls	r2, r3
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	609a      	str	r2, [r3, #8]
 8007b4a:	e02a      	b.n	8007ba2 <HAL_DMA_Abort+0x49a>
 8007b4c:	40020010 	.word	0x40020010
 8007b50:	40020028 	.word	0x40020028
 8007b54:	40020040 	.word	0x40020040
 8007b58:	40020058 	.word	0x40020058
 8007b5c:	40020070 	.word	0x40020070
 8007b60:	40020088 	.word	0x40020088
 8007b64:	400200a0 	.word	0x400200a0
 8007b68:	400200b8 	.word	0x400200b8
 8007b6c:	40020410 	.word	0x40020410
 8007b70:	40020428 	.word	0x40020428
 8007b74:	40020440 	.word	0x40020440
 8007b78:	40020458 	.word	0x40020458
 8007b7c:	40020470 	.word	0x40020470
 8007b80:	40020488 	.word	0x40020488
 8007b84:	400204a0 	.word	0x400204a0
 8007b88:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b90:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b96:	f003 031f 	and.w	r3, r3, #31
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	409a      	lsls	r2, r3
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a4f      	ldr	r2, [pc, #316]	@ (8007ce4 <HAL_DMA_Abort+0x5dc>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d072      	beq.n	8007c92 <HAL_DMA_Abort+0x58a>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a4d      	ldr	r2, [pc, #308]	@ (8007ce8 <HAL_DMA_Abort+0x5e0>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d06d      	beq.n	8007c92 <HAL_DMA_Abort+0x58a>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a4c      	ldr	r2, [pc, #304]	@ (8007cec <HAL_DMA_Abort+0x5e4>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d068      	beq.n	8007c92 <HAL_DMA_Abort+0x58a>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a4a      	ldr	r2, [pc, #296]	@ (8007cf0 <HAL_DMA_Abort+0x5e8>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d063      	beq.n	8007c92 <HAL_DMA_Abort+0x58a>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a49      	ldr	r2, [pc, #292]	@ (8007cf4 <HAL_DMA_Abort+0x5ec>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d05e      	beq.n	8007c92 <HAL_DMA_Abort+0x58a>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a47      	ldr	r2, [pc, #284]	@ (8007cf8 <HAL_DMA_Abort+0x5f0>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d059      	beq.n	8007c92 <HAL_DMA_Abort+0x58a>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a46      	ldr	r2, [pc, #280]	@ (8007cfc <HAL_DMA_Abort+0x5f4>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d054      	beq.n	8007c92 <HAL_DMA_Abort+0x58a>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a44      	ldr	r2, [pc, #272]	@ (8007d00 <HAL_DMA_Abort+0x5f8>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d04f      	beq.n	8007c92 <HAL_DMA_Abort+0x58a>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a43      	ldr	r2, [pc, #268]	@ (8007d04 <HAL_DMA_Abort+0x5fc>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d04a      	beq.n	8007c92 <HAL_DMA_Abort+0x58a>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a41      	ldr	r2, [pc, #260]	@ (8007d08 <HAL_DMA_Abort+0x600>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d045      	beq.n	8007c92 <HAL_DMA_Abort+0x58a>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a40      	ldr	r2, [pc, #256]	@ (8007d0c <HAL_DMA_Abort+0x604>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d040      	beq.n	8007c92 <HAL_DMA_Abort+0x58a>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a3e      	ldr	r2, [pc, #248]	@ (8007d10 <HAL_DMA_Abort+0x608>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d03b      	beq.n	8007c92 <HAL_DMA_Abort+0x58a>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a3d      	ldr	r2, [pc, #244]	@ (8007d14 <HAL_DMA_Abort+0x60c>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d036      	beq.n	8007c92 <HAL_DMA_Abort+0x58a>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a3b      	ldr	r2, [pc, #236]	@ (8007d18 <HAL_DMA_Abort+0x610>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d031      	beq.n	8007c92 <HAL_DMA_Abort+0x58a>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a3a      	ldr	r2, [pc, #232]	@ (8007d1c <HAL_DMA_Abort+0x614>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d02c      	beq.n	8007c92 <HAL_DMA_Abort+0x58a>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a38      	ldr	r2, [pc, #224]	@ (8007d20 <HAL_DMA_Abort+0x618>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d027      	beq.n	8007c92 <HAL_DMA_Abort+0x58a>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a37      	ldr	r2, [pc, #220]	@ (8007d24 <HAL_DMA_Abort+0x61c>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d022      	beq.n	8007c92 <HAL_DMA_Abort+0x58a>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a35      	ldr	r2, [pc, #212]	@ (8007d28 <HAL_DMA_Abort+0x620>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d01d      	beq.n	8007c92 <HAL_DMA_Abort+0x58a>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a34      	ldr	r2, [pc, #208]	@ (8007d2c <HAL_DMA_Abort+0x624>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d018      	beq.n	8007c92 <HAL_DMA_Abort+0x58a>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a32      	ldr	r2, [pc, #200]	@ (8007d30 <HAL_DMA_Abort+0x628>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d013      	beq.n	8007c92 <HAL_DMA_Abort+0x58a>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a31      	ldr	r2, [pc, #196]	@ (8007d34 <HAL_DMA_Abort+0x62c>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d00e      	beq.n	8007c92 <HAL_DMA_Abort+0x58a>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a2f      	ldr	r2, [pc, #188]	@ (8007d38 <HAL_DMA_Abort+0x630>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d009      	beq.n	8007c92 <HAL_DMA_Abort+0x58a>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a2e      	ldr	r2, [pc, #184]	@ (8007d3c <HAL_DMA_Abort+0x634>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d004      	beq.n	8007c92 <HAL_DMA_Abort+0x58a>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a2c      	ldr	r2, [pc, #176]	@ (8007d40 <HAL_DMA_Abort+0x638>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d101      	bne.n	8007c96 <HAL_DMA_Abort+0x58e>
 8007c92:	2301      	movs	r3, #1
 8007c94:	e000      	b.n	8007c98 <HAL_DMA_Abort+0x590>
 8007c96:	2300      	movs	r3, #0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d015      	beq.n	8007cc8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007ca4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00c      	beq.n	8007cc8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007cbc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007cc6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3718      	adds	r7, #24
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	40020010 	.word	0x40020010
 8007ce8:	40020028 	.word	0x40020028
 8007cec:	40020040 	.word	0x40020040
 8007cf0:	40020058 	.word	0x40020058
 8007cf4:	40020070 	.word	0x40020070
 8007cf8:	40020088 	.word	0x40020088
 8007cfc:	400200a0 	.word	0x400200a0
 8007d00:	400200b8 	.word	0x400200b8
 8007d04:	40020410 	.word	0x40020410
 8007d08:	40020428 	.word	0x40020428
 8007d0c:	40020440 	.word	0x40020440
 8007d10:	40020458 	.word	0x40020458
 8007d14:	40020470 	.word	0x40020470
 8007d18:	40020488 	.word	0x40020488
 8007d1c:	400204a0 	.word	0x400204a0
 8007d20:	400204b8 	.word	0x400204b8
 8007d24:	58025408 	.word	0x58025408
 8007d28:	5802541c 	.word	0x5802541c
 8007d2c:	58025430 	.word	0x58025430
 8007d30:	58025444 	.word	0x58025444
 8007d34:	58025458 	.word	0x58025458
 8007d38:	5802546c 	.word	0x5802546c
 8007d3c:	58025480 	.word	0x58025480
 8007d40:	58025494 	.word	0x58025494

08007d44 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d101      	bne.n	8007d56 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e237      	b.n	80081c6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	d004      	beq.n	8007d6c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2280      	movs	r2, #128	@ 0x80
 8007d66:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e22c      	b.n	80081c6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a5c      	ldr	r2, [pc, #368]	@ (8007ee4 <HAL_DMA_Abort_IT+0x1a0>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d04a      	beq.n	8007e0c <HAL_DMA_Abort_IT+0xc8>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a5b      	ldr	r2, [pc, #364]	@ (8007ee8 <HAL_DMA_Abort_IT+0x1a4>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d045      	beq.n	8007e0c <HAL_DMA_Abort_IT+0xc8>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a59      	ldr	r2, [pc, #356]	@ (8007eec <HAL_DMA_Abort_IT+0x1a8>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d040      	beq.n	8007e0c <HAL_DMA_Abort_IT+0xc8>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a58      	ldr	r2, [pc, #352]	@ (8007ef0 <HAL_DMA_Abort_IT+0x1ac>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d03b      	beq.n	8007e0c <HAL_DMA_Abort_IT+0xc8>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a56      	ldr	r2, [pc, #344]	@ (8007ef4 <HAL_DMA_Abort_IT+0x1b0>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d036      	beq.n	8007e0c <HAL_DMA_Abort_IT+0xc8>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a55      	ldr	r2, [pc, #340]	@ (8007ef8 <HAL_DMA_Abort_IT+0x1b4>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d031      	beq.n	8007e0c <HAL_DMA_Abort_IT+0xc8>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a53      	ldr	r2, [pc, #332]	@ (8007efc <HAL_DMA_Abort_IT+0x1b8>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d02c      	beq.n	8007e0c <HAL_DMA_Abort_IT+0xc8>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a52      	ldr	r2, [pc, #328]	@ (8007f00 <HAL_DMA_Abort_IT+0x1bc>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d027      	beq.n	8007e0c <HAL_DMA_Abort_IT+0xc8>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a50      	ldr	r2, [pc, #320]	@ (8007f04 <HAL_DMA_Abort_IT+0x1c0>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d022      	beq.n	8007e0c <HAL_DMA_Abort_IT+0xc8>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a4f      	ldr	r2, [pc, #316]	@ (8007f08 <HAL_DMA_Abort_IT+0x1c4>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d01d      	beq.n	8007e0c <HAL_DMA_Abort_IT+0xc8>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a4d      	ldr	r2, [pc, #308]	@ (8007f0c <HAL_DMA_Abort_IT+0x1c8>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d018      	beq.n	8007e0c <HAL_DMA_Abort_IT+0xc8>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a4c      	ldr	r2, [pc, #304]	@ (8007f10 <HAL_DMA_Abort_IT+0x1cc>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d013      	beq.n	8007e0c <HAL_DMA_Abort_IT+0xc8>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a4a      	ldr	r2, [pc, #296]	@ (8007f14 <HAL_DMA_Abort_IT+0x1d0>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d00e      	beq.n	8007e0c <HAL_DMA_Abort_IT+0xc8>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a49      	ldr	r2, [pc, #292]	@ (8007f18 <HAL_DMA_Abort_IT+0x1d4>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d009      	beq.n	8007e0c <HAL_DMA_Abort_IT+0xc8>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a47      	ldr	r2, [pc, #284]	@ (8007f1c <HAL_DMA_Abort_IT+0x1d8>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d004      	beq.n	8007e0c <HAL_DMA_Abort_IT+0xc8>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a46      	ldr	r2, [pc, #280]	@ (8007f20 <HAL_DMA_Abort_IT+0x1dc>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d101      	bne.n	8007e10 <HAL_DMA_Abort_IT+0xcc>
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e000      	b.n	8007e12 <HAL_DMA_Abort_IT+0xce>
 8007e10:	2300      	movs	r3, #0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f000 8086 	beq.w	8007f24 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2204      	movs	r2, #4
 8007e1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a2f      	ldr	r2, [pc, #188]	@ (8007ee4 <HAL_DMA_Abort_IT+0x1a0>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d04a      	beq.n	8007ec0 <HAL_DMA_Abort_IT+0x17c>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a2e      	ldr	r2, [pc, #184]	@ (8007ee8 <HAL_DMA_Abort_IT+0x1a4>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d045      	beq.n	8007ec0 <HAL_DMA_Abort_IT+0x17c>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a2c      	ldr	r2, [pc, #176]	@ (8007eec <HAL_DMA_Abort_IT+0x1a8>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d040      	beq.n	8007ec0 <HAL_DMA_Abort_IT+0x17c>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a2b      	ldr	r2, [pc, #172]	@ (8007ef0 <HAL_DMA_Abort_IT+0x1ac>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d03b      	beq.n	8007ec0 <HAL_DMA_Abort_IT+0x17c>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a29      	ldr	r2, [pc, #164]	@ (8007ef4 <HAL_DMA_Abort_IT+0x1b0>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d036      	beq.n	8007ec0 <HAL_DMA_Abort_IT+0x17c>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a28      	ldr	r2, [pc, #160]	@ (8007ef8 <HAL_DMA_Abort_IT+0x1b4>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d031      	beq.n	8007ec0 <HAL_DMA_Abort_IT+0x17c>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a26      	ldr	r2, [pc, #152]	@ (8007efc <HAL_DMA_Abort_IT+0x1b8>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d02c      	beq.n	8007ec0 <HAL_DMA_Abort_IT+0x17c>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a25      	ldr	r2, [pc, #148]	@ (8007f00 <HAL_DMA_Abort_IT+0x1bc>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d027      	beq.n	8007ec0 <HAL_DMA_Abort_IT+0x17c>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a23      	ldr	r2, [pc, #140]	@ (8007f04 <HAL_DMA_Abort_IT+0x1c0>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d022      	beq.n	8007ec0 <HAL_DMA_Abort_IT+0x17c>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a22      	ldr	r2, [pc, #136]	@ (8007f08 <HAL_DMA_Abort_IT+0x1c4>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d01d      	beq.n	8007ec0 <HAL_DMA_Abort_IT+0x17c>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a20      	ldr	r2, [pc, #128]	@ (8007f0c <HAL_DMA_Abort_IT+0x1c8>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d018      	beq.n	8007ec0 <HAL_DMA_Abort_IT+0x17c>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a1f      	ldr	r2, [pc, #124]	@ (8007f10 <HAL_DMA_Abort_IT+0x1cc>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d013      	beq.n	8007ec0 <HAL_DMA_Abort_IT+0x17c>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8007f14 <HAL_DMA_Abort_IT+0x1d0>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d00e      	beq.n	8007ec0 <HAL_DMA_Abort_IT+0x17c>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a1c      	ldr	r2, [pc, #112]	@ (8007f18 <HAL_DMA_Abort_IT+0x1d4>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d009      	beq.n	8007ec0 <HAL_DMA_Abort_IT+0x17c>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a1a      	ldr	r2, [pc, #104]	@ (8007f1c <HAL_DMA_Abort_IT+0x1d8>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d004      	beq.n	8007ec0 <HAL_DMA_Abort_IT+0x17c>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a19      	ldr	r2, [pc, #100]	@ (8007f20 <HAL_DMA_Abort_IT+0x1dc>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d108      	bne.n	8007ed2 <HAL_DMA_Abort_IT+0x18e>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f022 0201 	bic.w	r2, r2, #1
 8007ece:	601a      	str	r2, [r3, #0]
 8007ed0:	e178      	b.n	80081c4 <HAL_DMA_Abort_IT+0x480>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f022 0201 	bic.w	r2, r2, #1
 8007ee0:	601a      	str	r2, [r3, #0]
 8007ee2:	e16f      	b.n	80081c4 <HAL_DMA_Abort_IT+0x480>
 8007ee4:	40020010 	.word	0x40020010
 8007ee8:	40020028 	.word	0x40020028
 8007eec:	40020040 	.word	0x40020040
 8007ef0:	40020058 	.word	0x40020058
 8007ef4:	40020070 	.word	0x40020070
 8007ef8:	40020088 	.word	0x40020088
 8007efc:	400200a0 	.word	0x400200a0
 8007f00:	400200b8 	.word	0x400200b8
 8007f04:	40020410 	.word	0x40020410
 8007f08:	40020428 	.word	0x40020428
 8007f0c:	40020440 	.word	0x40020440
 8007f10:	40020458 	.word	0x40020458
 8007f14:	40020470 	.word	0x40020470
 8007f18:	40020488 	.word	0x40020488
 8007f1c:	400204a0 	.word	0x400204a0
 8007f20:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f022 020e 	bic.w	r2, r2, #14
 8007f32:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a6c      	ldr	r2, [pc, #432]	@ (80080ec <HAL_DMA_Abort_IT+0x3a8>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d04a      	beq.n	8007fd4 <HAL_DMA_Abort_IT+0x290>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a6b      	ldr	r2, [pc, #428]	@ (80080f0 <HAL_DMA_Abort_IT+0x3ac>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d045      	beq.n	8007fd4 <HAL_DMA_Abort_IT+0x290>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a69      	ldr	r2, [pc, #420]	@ (80080f4 <HAL_DMA_Abort_IT+0x3b0>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d040      	beq.n	8007fd4 <HAL_DMA_Abort_IT+0x290>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a68      	ldr	r2, [pc, #416]	@ (80080f8 <HAL_DMA_Abort_IT+0x3b4>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d03b      	beq.n	8007fd4 <HAL_DMA_Abort_IT+0x290>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a66      	ldr	r2, [pc, #408]	@ (80080fc <HAL_DMA_Abort_IT+0x3b8>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d036      	beq.n	8007fd4 <HAL_DMA_Abort_IT+0x290>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a65      	ldr	r2, [pc, #404]	@ (8008100 <HAL_DMA_Abort_IT+0x3bc>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d031      	beq.n	8007fd4 <HAL_DMA_Abort_IT+0x290>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a63      	ldr	r2, [pc, #396]	@ (8008104 <HAL_DMA_Abort_IT+0x3c0>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d02c      	beq.n	8007fd4 <HAL_DMA_Abort_IT+0x290>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a62      	ldr	r2, [pc, #392]	@ (8008108 <HAL_DMA_Abort_IT+0x3c4>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d027      	beq.n	8007fd4 <HAL_DMA_Abort_IT+0x290>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a60      	ldr	r2, [pc, #384]	@ (800810c <HAL_DMA_Abort_IT+0x3c8>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d022      	beq.n	8007fd4 <HAL_DMA_Abort_IT+0x290>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a5f      	ldr	r2, [pc, #380]	@ (8008110 <HAL_DMA_Abort_IT+0x3cc>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d01d      	beq.n	8007fd4 <HAL_DMA_Abort_IT+0x290>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a5d      	ldr	r2, [pc, #372]	@ (8008114 <HAL_DMA_Abort_IT+0x3d0>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d018      	beq.n	8007fd4 <HAL_DMA_Abort_IT+0x290>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a5c      	ldr	r2, [pc, #368]	@ (8008118 <HAL_DMA_Abort_IT+0x3d4>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d013      	beq.n	8007fd4 <HAL_DMA_Abort_IT+0x290>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a5a      	ldr	r2, [pc, #360]	@ (800811c <HAL_DMA_Abort_IT+0x3d8>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d00e      	beq.n	8007fd4 <HAL_DMA_Abort_IT+0x290>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a59      	ldr	r2, [pc, #356]	@ (8008120 <HAL_DMA_Abort_IT+0x3dc>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d009      	beq.n	8007fd4 <HAL_DMA_Abort_IT+0x290>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a57      	ldr	r2, [pc, #348]	@ (8008124 <HAL_DMA_Abort_IT+0x3e0>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d004      	beq.n	8007fd4 <HAL_DMA_Abort_IT+0x290>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a56      	ldr	r2, [pc, #344]	@ (8008128 <HAL_DMA_Abort_IT+0x3e4>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d108      	bne.n	8007fe6 <HAL_DMA_Abort_IT+0x2a2>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f022 0201 	bic.w	r2, r2, #1
 8007fe2:	601a      	str	r2, [r3, #0]
 8007fe4:	e007      	b.n	8007ff6 <HAL_DMA_Abort_IT+0x2b2>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f022 0201 	bic.w	r2, r2, #1
 8007ff4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a3c      	ldr	r2, [pc, #240]	@ (80080ec <HAL_DMA_Abort_IT+0x3a8>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d072      	beq.n	80080e6 <HAL_DMA_Abort_IT+0x3a2>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a3a      	ldr	r2, [pc, #232]	@ (80080f0 <HAL_DMA_Abort_IT+0x3ac>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d06d      	beq.n	80080e6 <HAL_DMA_Abort_IT+0x3a2>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a39      	ldr	r2, [pc, #228]	@ (80080f4 <HAL_DMA_Abort_IT+0x3b0>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d068      	beq.n	80080e6 <HAL_DMA_Abort_IT+0x3a2>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a37      	ldr	r2, [pc, #220]	@ (80080f8 <HAL_DMA_Abort_IT+0x3b4>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d063      	beq.n	80080e6 <HAL_DMA_Abort_IT+0x3a2>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a36      	ldr	r2, [pc, #216]	@ (80080fc <HAL_DMA_Abort_IT+0x3b8>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d05e      	beq.n	80080e6 <HAL_DMA_Abort_IT+0x3a2>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a34      	ldr	r2, [pc, #208]	@ (8008100 <HAL_DMA_Abort_IT+0x3bc>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d059      	beq.n	80080e6 <HAL_DMA_Abort_IT+0x3a2>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a33      	ldr	r2, [pc, #204]	@ (8008104 <HAL_DMA_Abort_IT+0x3c0>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d054      	beq.n	80080e6 <HAL_DMA_Abort_IT+0x3a2>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a31      	ldr	r2, [pc, #196]	@ (8008108 <HAL_DMA_Abort_IT+0x3c4>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d04f      	beq.n	80080e6 <HAL_DMA_Abort_IT+0x3a2>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a30      	ldr	r2, [pc, #192]	@ (800810c <HAL_DMA_Abort_IT+0x3c8>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d04a      	beq.n	80080e6 <HAL_DMA_Abort_IT+0x3a2>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a2e      	ldr	r2, [pc, #184]	@ (8008110 <HAL_DMA_Abort_IT+0x3cc>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d045      	beq.n	80080e6 <HAL_DMA_Abort_IT+0x3a2>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a2d      	ldr	r2, [pc, #180]	@ (8008114 <HAL_DMA_Abort_IT+0x3d0>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d040      	beq.n	80080e6 <HAL_DMA_Abort_IT+0x3a2>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a2b      	ldr	r2, [pc, #172]	@ (8008118 <HAL_DMA_Abort_IT+0x3d4>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d03b      	beq.n	80080e6 <HAL_DMA_Abort_IT+0x3a2>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a2a      	ldr	r2, [pc, #168]	@ (800811c <HAL_DMA_Abort_IT+0x3d8>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d036      	beq.n	80080e6 <HAL_DMA_Abort_IT+0x3a2>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a28      	ldr	r2, [pc, #160]	@ (8008120 <HAL_DMA_Abort_IT+0x3dc>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d031      	beq.n	80080e6 <HAL_DMA_Abort_IT+0x3a2>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a27      	ldr	r2, [pc, #156]	@ (8008124 <HAL_DMA_Abort_IT+0x3e0>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d02c      	beq.n	80080e6 <HAL_DMA_Abort_IT+0x3a2>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a25      	ldr	r2, [pc, #148]	@ (8008128 <HAL_DMA_Abort_IT+0x3e4>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d027      	beq.n	80080e6 <HAL_DMA_Abort_IT+0x3a2>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a24      	ldr	r2, [pc, #144]	@ (800812c <HAL_DMA_Abort_IT+0x3e8>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d022      	beq.n	80080e6 <HAL_DMA_Abort_IT+0x3a2>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a22      	ldr	r2, [pc, #136]	@ (8008130 <HAL_DMA_Abort_IT+0x3ec>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d01d      	beq.n	80080e6 <HAL_DMA_Abort_IT+0x3a2>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a21      	ldr	r2, [pc, #132]	@ (8008134 <HAL_DMA_Abort_IT+0x3f0>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d018      	beq.n	80080e6 <HAL_DMA_Abort_IT+0x3a2>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a1f      	ldr	r2, [pc, #124]	@ (8008138 <HAL_DMA_Abort_IT+0x3f4>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d013      	beq.n	80080e6 <HAL_DMA_Abort_IT+0x3a2>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a1e      	ldr	r2, [pc, #120]	@ (800813c <HAL_DMA_Abort_IT+0x3f8>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d00e      	beq.n	80080e6 <HAL_DMA_Abort_IT+0x3a2>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a1c      	ldr	r2, [pc, #112]	@ (8008140 <HAL_DMA_Abort_IT+0x3fc>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d009      	beq.n	80080e6 <HAL_DMA_Abort_IT+0x3a2>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a1b      	ldr	r2, [pc, #108]	@ (8008144 <HAL_DMA_Abort_IT+0x400>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d004      	beq.n	80080e6 <HAL_DMA_Abort_IT+0x3a2>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a19      	ldr	r2, [pc, #100]	@ (8008148 <HAL_DMA_Abort_IT+0x404>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d132      	bne.n	800814c <HAL_DMA_Abort_IT+0x408>
 80080e6:	2301      	movs	r3, #1
 80080e8:	e031      	b.n	800814e <HAL_DMA_Abort_IT+0x40a>
 80080ea:	bf00      	nop
 80080ec:	40020010 	.word	0x40020010
 80080f0:	40020028 	.word	0x40020028
 80080f4:	40020040 	.word	0x40020040
 80080f8:	40020058 	.word	0x40020058
 80080fc:	40020070 	.word	0x40020070
 8008100:	40020088 	.word	0x40020088
 8008104:	400200a0 	.word	0x400200a0
 8008108:	400200b8 	.word	0x400200b8
 800810c:	40020410 	.word	0x40020410
 8008110:	40020428 	.word	0x40020428
 8008114:	40020440 	.word	0x40020440
 8008118:	40020458 	.word	0x40020458
 800811c:	40020470 	.word	0x40020470
 8008120:	40020488 	.word	0x40020488
 8008124:	400204a0 	.word	0x400204a0
 8008128:	400204b8 	.word	0x400204b8
 800812c:	58025408 	.word	0x58025408
 8008130:	5802541c 	.word	0x5802541c
 8008134:	58025430 	.word	0x58025430
 8008138:	58025444 	.word	0x58025444
 800813c:	58025458 	.word	0x58025458
 8008140:	5802546c 	.word	0x5802546c
 8008144:	58025480 	.word	0x58025480
 8008148:	58025494 	.word	0x58025494
 800814c:	2300      	movs	r3, #0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d028      	beq.n	80081a4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800815c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008160:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008166:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800816c:	f003 031f 	and.w	r3, r3, #31
 8008170:	2201      	movs	r2, #1
 8008172:	409a      	lsls	r2, r3
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008180:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00c      	beq.n	80081a4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008194:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008198:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80081a2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d003      	beq.n	80081c4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop

080081d0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b08a      	sub	sp, #40	@ 0x28
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80081d8:	2300      	movs	r3, #0
 80081da:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80081dc:	4b67      	ldr	r3, [pc, #412]	@ (800837c <HAL_DMA_IRQHandler+0x1ac>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a67      	ldr	r2, [pc, #412]	@ (8008380 <HAL_DMA_IRQHandler+0x1b0>)
 80081e2:	fba2 2303 	umull	r2, r3, r2, r3
 80081e6:	0a9b      	lsrs	r3, r3, #10
 80081e8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081ee:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081f4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80081f6:	6a3b      	ldr	r3, [r7, #32]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a5f      	ldr	r2, [pc, #380]	@ (8008384 <HAL_DMA_IRQHandler+0x1b4>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d04a      	beq.n	80082a2 <HAL_DMA_IRQHandler+0xd2>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a5d      	ldr	r2, [pc, #372]	@ (8008388 <HAL_DMA_IRQHandler+0x1b8>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d045      	beq.n	80082a2 <HAL_DMA_IRQHandler+0xd2>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a5c      	ldr	r2, [pc, #368]	@ (800838c <HAL_DMA_IRQHandler+0x1bc>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d040      	beq.n	80082a2 <HAL_DMA_IRQHandler+0xd2>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a5a      	ldr	r2, [pc, #360]	@ (8008390 <HAL_DMA_IRQHandler+0x1c0>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d03b      	beq.n	80082a2 <HAL_DMA_IRQHandler+0xd2>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a59      	ldr	r2, [pc, #356]	@ (8008394 <HAL_DMA_IRQHandler+0x1c4>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d036      	beq.n	80082a2 <HAL_DMA_IRQHandler+0xd2>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a57      	ldr	r2, [pc, #348]	@ (8008398 <HAL_DMA_IRQHandler+0x1c8>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d031      	beq.n	80082a2 <HAL_DMA_IRQHandler+0xd2>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a56      	ldr	r2, [pc, #344]	@ (800839c <HAL_DMA_IRQHandler+0x1cc>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d02c      	beq.n	80082a2 <HAL_DMA_IRQHandler+0xd2>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a54      	ldr	r2, [pc, #336]	@ (80083a0 <HAL_DMA_IRQHandler+0x1d0>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d027      	beq.n	80082a2 <HAL_DMA_IRQHandler+0xd2>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a53      	ldr	r2, [pc, #332]	@ (80083a4 <HAL_DMA_IRQHandler+0x1d4>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d022      	beq.n	80082a2 <HAL_DMA_IRQHandler+0xd2>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a51      	ldr	r2, [pc, #324]	@ (80083a8 <HAL_DMA_IRQHandler+0x1d8>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d01d      	beq.n	80082a2 <HAL_DMA_IRQHandler+0xd2>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a50      	ldr	r2, [pc, #320]	@ (80083ac <HAL_DMA_IRQHandler+0x1dc>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d018      	beq.n	80082a2 <HAL_DMA_IRQHandler+0xd2>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a4e      	ldr	r2, [pc, #312]	@ (80083b0 <HAL_DMA_IRQHandler+0x1e0>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d013      	beq.n	80082a2 <HAL_DMA_IRQHandler+0xd2>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a4d      	ldr	r2, [pc, #308]	@ (80083b4 <HAL_DMA_IRQHandler+0x1e4>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d00e      	beq.n	80082a2 <HAL_DMA_IRQHandler+0xd2>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a4b      	ldr	r2, [pc, #300]	@ (80083b8 <HAL_DMA_IRQHandler+0x1e8>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d009      	beq.n	80082a2 <HAL_DMA_IRQHandler+0xd2>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a4a      	ldr	r2, [pc, #296]	@ (80083bc <HAL_DMA_IRQHandler+0x1ec>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d004      	beq.n	80082a2 <HAL_DMA_IRQHandler+0xd2>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a48      	ldr	r2, [pc, #288]	@ (80083c0 <HAL_DMA_IRQHandler+0x1f0>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d101      	bne.n	80082a6 <HAL_DMA_IRQHandler+0xd6>
 80082a2:	2301      	movs	r3, #1
 80082a4:	e000      	b.n	80082a8 <HAL_DMA_IRQHandler+0xd8>
 80082a6:	2300      	movs	r3, #0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f000 842b 	beq.w	8008b04 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082b2:	f003 031f 	and.w	r3, r3, #31
 80082b6:	2208      	movs	r2, #8
 80082b8:	409a      	lsls	r2, r3
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	4013      	ands	r3, r2
 80082be:	2b00      	cmp	r3, #0
 80082c0:	f000 80a2 	beq.w	8008408 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a2e      	ldr	r2, [pc, #184]	@ (8008384 <HAL_DMA_IRQHandler+0x1b4>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d04a      	beq.n	8008364 <HAL_DMA_IRQHandler+0x194>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a2d      	ldr	r2, [pc, #180]	@ (8008388 <HAL_DMA_IRQHandler+0x1b8>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d045      	beq.n	8008364 <HAL_DMA_IRQHandler+0x194>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a2b      	ldr	r2, [pc, #172]	@ (800838c <HAL_DMA_IRQHandler+0x1bc>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d040      	beq.n	8008364 <HAL_DMA_IRQHandler+0x194>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a2a      	ldr	r2, [pc, #168]	@ (8008390 <HAL_DMA_IRQHandler+0x1c0>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d03b      	beq.n	8008364 <HAL_DMA_IRQHandler+0x194>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a28      	ldr	r2, [pc, #160]	@ (8008394 <HAL_DMA_IRQHandler+0x1c4>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d036      	beq.n	8008364 <HAL_DMA_IRQHandler+0x194>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a27      	ldr	r2, [pc, #156]	@ (8008398 <HAL_DMA_IRQHandler+0x1c8>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d031      	beq.n	8008364 <HAL_DMA_IRQHandler+0x194>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a25      	ldr	r2, [pc, #148]	@ (800839c <HAL_DMA_IRQHandler+0x1cc>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d02c      	beq.n	8008364 <HAL_DMA_IRQHandler+0x194>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a24      	ldr	r2, [pc, #144]	@ (80083a0 <HAL_DMA_IRQHandler+0x1d0>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d027      	beq.n	8008364 <HAL_DMA_IRQHandler+0x194>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a22      	ldr	r2, [pc, #136]	@ (80083a4 <HAL_DMA_IRQHandler+0x1d4>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d022      	beq.n	8008364 <HAL_DMA_IRQHandler+0x194>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a21      	ldr	r2, [pc, #132]	@ (80083a8 <HAL_DMA_IRQHandler+0x1d8>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d01d      	beq.n	8008364 <HAL_DMA_IRQHandler+0x194>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a1f      	ldr	r2, [pc, #124]	@ (80083ac <HAL_DMA_IRQHandler+0x1dc>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d018      	beq.n	8008364 <HAL_DMA_IRQHandler+0x194>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a1e      	ldr	r2, [pc, #120]	@ (80083b0 <HAL_DMA_IRQHandler+0x1e0>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d013      	beq.n	8008364 <HAL_DMA_IRQHandler+0x194>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a1c      	ldr	r2, [pc, #112]	@ (80083b4 <HAL_DMA_IRQHandler+0x1e4>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d00e      	beq.n	8008364 <HAL_DMA_IRQHandler+0x194>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a1b      	ldr	r2, [pc, #108]	@ (80083b8 <HAL_DMA_IRQHandler+0x1e8>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d009      	beq.n	8008364 <HAL_DMA_IRQHandler+0x194>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a19      	ldr	r2, [pc, #100]	@ (80083bc <HAL_DMA_IRQHandler+0x1ec>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d004      	beq.n	8008364 <HAL_DMA_IRQHandler+0x194>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a18      	ldr	r2, [pc, #96]	@ (80083c0 <HAL_DMA_IRQHandler+0x1f0>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d12f      	bne.n	80083c4 <HAL_DMA_IRQHandler+0x1f4>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f003 0304 	and.w	r3, r3, #4
 800836e:	2b00      	cmp	r3, #0
 8008370:	bf14      	ite	ne
 8008372:	2301      	movne	r3, #1
 8008374:	2300      	moveq	r3, #0
 8008376:	b2db      	uxtb	r3, r3
 8008378:	e02e      	b.n	80083d8 <HAL_DMA_IRQHandler+0x208>
 800837a:	bf00      	nop
 800837c:	24000000 	.word	0x24000000
 8008380:	1b4e81b5 	.word	0x1b4e81b5
 8008384:	40020010 	.word	0x40020010
 8008388:	40020028 	.word	0x40020028
 800838c:	40020040 	.word	0x40020040
 8008390:	40020058 	.word	0x40020058
 8008394:	40020070 	.word	0x40020070
 8008398:	40020088 	.word	0x40020088
 800839c:	400200a0 	.word	0x400200a0
 80083a0:	400200b8 	.word	0x400200b8
 80083a4:	40020410 	.word	0x40020410
 80083a8:	40020428 	.word	0x40020428
 80083ac:	40020440 	.word	0x40020440
 80083b0:	40020458 	.word	0x40020458
 80083b4:	40020470 	.word	0x40020470
 80083b8:	40020488 	.word	0x40020488
 80083bc:	400204a0 	.word	0x400204a0
 80083c0:	400204b8 	.word	0x400204b8
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f003 0308 	and.w	r3, r3, #8
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	bf14      	ite	ne
 80083d2:	2301      	movne	r3, #1
 80083d4:	2300      	moveq	r3, #0
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d015      	beq.n	8008408 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f022 0204 	bic.w	r2, r2, #4
 80083ea:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083f0:	f003 031f 	and.w	r3, r3, #31
 80083f4:	2208      	movs	r2, #8
 80083f6:	409a      	lsls	r2, r3
 80083f8:	6a3b      	ldr	r3, [r7, #32]
 80083fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008400:	f043 0201 	orr.w	r2, r3, #1
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800840c:	f003 031f 	and.w	r3, r3, #31
 8008410:	69ba      	ldr	r2, [r7, #24]
 8008412:	fa22 f303 	lsr.w	r3, r2, r3
 8008416:	f003 0301 	and.w	r3, r3, #1
 800841a:	2b00      	cmp	r3, #0
 800841c:	d06e      	beq.n	80084fc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a69      	ldr	r2, [pc, #420]	@ (80085c8 <HAL_DMA_IRQHandler+0x3f8>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d04a      	beq.n	80084be <HAL_DMA_IRQHandler+0x2ee>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a67      	ldr	r2, [pc, #412]	@ (80085cc <HAL_DMA_IRQHandler+0x3fc>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d045      	beq.n	80084be <HAL_DMA_IRQHandler+0x2ee>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a66      	ldr	r2, [pc, #408]	@ (80085d0 <HAL_DMA_IRQHandler+0x400>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d040      	beq.n	80084be <HAL_DMA_IRQHandler+0x2ee>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a64      	ldr	r2, [pc, #400]	@ (80085d4 <HAL_DMA_IRQHandler+0x404>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d03b      	beq.n	80084be <HAL_DMA_IRQHandler+0x2ee>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a63      	ldr	r2, [pc, #396]	@ (80085d8 <HAL_DMA_IRQHandler+0x408>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d036      	beq.n	80084be <HAL_DMA_IRQHandler+0x2ee>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a61      	ldr	r2, [pc, #388]	@ (80085dc <HAL_DMA_IRQHandler+0x40c>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d031      	beq.n	80084be <HAL_DMA_IRQHandler+0x2ee>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a60      	ldr	r2, [pc, #384]	@ (80085e0 <HAL_DMA_IRQHandler+0x410>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d02c      	beq.n	80084be <HAL_DMA_IRQHandler+0x2ee>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a5e      	ldr	r2, [pc, #376]	@ (80085e4 <HAL_DMA_IRQHandler+0x414>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d027      	beq.n	80084be <HAL_DMA_IRQHandler+0x2ee>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a5d      	ldr	r2, [pc, #372]	@ (80085e8 <HAL_DMA_IRQHandler+0x418>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d022      	beq.n	80084be <HAL_DMA_IRQHandler+0x2ee>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a5b      	ldr	r2, [pc, #364]	@ (80085ec <HAL_DMA_IRQHandler+0x41c>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d01d      	beq.n	80084be <HAL_DMA_IRQHandler+0x2ee>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a5a      	ldr	r2, [pc, #360]	@ (80085f0 <HAL_DMA_IRQHandler+0x420>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d018      	beq.n	80084be <HAL_DMA_IRQHandler+0x2ee>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a58      	ldr	r2, [pc, #352]	@ (80085f4 <HAL_DMA_IRQHandler+0x424>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d013      	beq.n	80084be <HAL_DMA_IRQHandler+0x2ee>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a57      	ldr	r2, [pc, #348]	@ (80085f8 <HAL_DMA_IRQHandler+0x428>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d00e      	beq.n	80084be <HAL_DMA_IRQHandler+0x2ee>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a55      	ldr	r2, [pc, #340]	@ (80085fc <HAL_DMA_IRQHandler+0x42c>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d009      	beq.n	80084be <HAL_DMA_IRQHandler+0x2ee>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a54      	ldr	r2, [pc, #336]	@ (8008600 <HAL_DMA_IRQHandler+0x430>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d004      	beq.n	80084be <HAL_DMA_IRQHandler+0x2ee>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a52      	ldr	r2, [pc, #328]	@ (8008604 <HAL_DMA_IRQHandler+0x434>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d10a      	bne.n	80084d4 <HAL_DMA_IRQHandler+0x304>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	695b      	ldr	r3, [r3, #20]
 80084c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	bf14      	ite	ne
 80084cc:	2301      	movne	r3, #1
 80084ce:	2300      	moveq	r3, #0
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	e003      	b.n	80084dc <HAL_DMA_IRQHandler+0x30c>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2300      	movs	r3, #0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00d      	beq.n	80084fc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084e4:	f003 031f 	and.w	r3, r3, #31
 80084e8:	2201      	movs	r2, #1
 80084ea:	409a      	lsls	r2, r3
 80084ec:	6a3b      	ldr	r3, [r7, #32]
 80084ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084f4:	f043 0202 	orr.w	r2, r3, #2
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008500:	f003 031f 	and.w	r3, r3, #31
 8008504:	2204      	movs	r2, #4
 8008506:	409a      	lsls	r2, r3
 8008508:	69bb      	ldr	r3, [r7, #24]
 800850a:	4013      	ands	r3, r2
 800850c:	2b00      	cmp	r3, #0
 800850e:	f000 808f 	beq.w	8008630 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a2c      	ldr	r2, [pc, #176]	@ (80085c8 <HAL_DMA_IRQHandler+0x3f8>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d04a      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x3e2>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a2a      	ldr	r2, [pc, #168]	@ (80085cc <HAL_DMA_IRQHandler+0x3fc>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d045      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x3e2>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a29      	ldr	r2, [pc, #164]	@ (80085d0 <HAL_DMA_IRQHandler+0x400>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d040      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x3e2>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a27      	ldr	r2, [pc, #156]	@ (80085d4 <HAL_DMA_IRQHandler+0x404>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d03b      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x3e2>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a26      	ldr	r2, [pc, #152]	@ (80085d8 <HAL_DMA_IRQHandler+0x408>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d036      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x3e2>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a24      	ldr	r2, [pc, #144]	@ (80085dc <HAL_DMA_IRQHandler+0x40c>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d031      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x3e2>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a23      	ldr	r2, [pc, #140]	@ (80085e0 <HAL_DMA_IRQHandler+0x410>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d02c      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x3e2>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a21      	ldr	r2, [pc, #132]	@ (80085e4 <HAL_DMA_IRQHandler+0x414>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d027      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x3e2>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a20      	ldr	r2, [pc, #128]	@ (80085e8 <HAL_DMA_IRQHandler+0x418>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d022      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x3e2>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a1e      	ldr	r2, [pc, #120]	@ (80085ec <HAL_DMA_IRQHandler+0x41c>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d01d      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x3e2>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a1d      	ldr	r2, [pc, #116]	@ (80085f0 <HAL_DMA_IRQHandler+0x420>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d018      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x3e2>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a1b      	ldr	r2, [pc, #108]	@ (80085f4 <HAL_DMA_IRQHandler+0x424>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d013      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x3e2>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a1a      	ldr	r2, [pc, #104]	@ (80085f8 <HAL_DMA_IRQHandler+0x428>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d00e      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x3e2>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a18      	ldr	r2, [pc, #96]	@ (80085fc <HAL_DMA_IRQHandler+0x42c>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d009      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x3e2>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a17      	ldr	r2, [pc, #92]	@ (8008600 <HAL_DMA_IRQHandler+0x430>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d004      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x3e2>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a15      	ldr	r2, [pc, #84]	@ (8008604 <HAL_DMA_IRQHandler+0x434>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d12a      	bne.n	8008608 <HAL_DMA_IRQHandler+0x438>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f003 0302 	and.w	r3, r3, #2
 80085bc:	2b00      	cmp	r3, #0
 80085be:	bf14      	ite	ne
 80085c0:	2301      	movne	r3, #1
 80085c2:	2300      	moveq	r3, #0
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	e023      	b.n	8008610 <HAL_DMA_IRQHandler+0x440>
 80085c8:	40020010 	.word	0x40020010
 80085cc:	40020028 	.word	0x40020028
 80085d0:	40020040 	.word	0x40020040
 80085d4:	40020058 	.word	0x40020058
 80085d8:	40020070 	.word	0x40020070
 80085dc:	40020088 	.word	0x40020088
 80085e0:	400200a0 	.word	0x400200a0
 80085e4:	400200b8 	.word	0x400200b8
 80085e8:	40020410 	.word	0x40020410
 80085ec:	40020428 	.word	0x40020428
 80085f0:	40020440 	.word	0x40020440
 80085f4:	40020458 	.word	0x40020458
 80085f8:	40020470 	.word	0x40020470
 80085fc:	40020488 	.word	0x40020488
 8008600:	400204a0 	.word	0x400204a0
 8008604:	400204b8 	.word	0x400204b8
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2300      	movs	r3, #0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00d      	beq.n	8008630 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008618:	f003 031f 	and.w	r3, r3, #31
 800861c:	2204      	movs	r2, #4
 800861e:	409a      	lsls	r2, r3
 8008620:	6a3b      	ldr	r3, [r7, #32]
 8008622:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008628:	f043 0204 	orr.w	r2, r3, #4
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008634:	f003 031f 	and.w	r3, r3, #31
 8008638:	2210      	movs	r2, #16
 800863a:	409a      	lsls	r2, r3
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	4013      	ands	r3, r2
 8008640:	2b00      	cmp	r3, #0
 8008642:	f000 80a6 	beq.w	8008792 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a85      	ldr	r2, [pc, #532]	@ (8008860 <HAL_DMA_IRQHandler+0x690>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d04a      	beq.n	80086e6 <HAL_DMA_IRQHandler+0x516>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a83      	ldr	r2, [pc, #524]	@ (8008864 <HAL_DMA_IRQHandler+0x694>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d045      	beq.n	80086e6 <HAL_DMA_IRQHandler+0x516>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a82      	ldr	r2, [pc, #520]	@ (8008868 <HAL_DMA_IRQHandler+0x698>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d040      	beq.n	80086e6 <HAL_DMA_IRQHandler+0x516>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a80      	ldr	r2, [pc, #512]	@ (800886c <HAL_DMA_IRQHandler+0x69c>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d03b      	beq.n	80086e6 <HAL_DMA_IRQHandler+0x516>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a7f      	ldr	r2, [pc, #508]	@ (8008870 <HAL_DMA_IRQHandler+0x6a0>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d036      	beq.n	80086e6 <HAL_DMA_IRQHandler+0x516>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a7d      	ldr	r2, [pc, #500]	@ (8008874 <HAL_DMA_IRQHandler+0x6a4>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d031      	beq.n	80086e6 <HAL_DMA_IRQHandler+0x516>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a7c      	ldr	r2, [pc, #496]	@ (8008878 <HAL_DMA_IRQHandler+0x6a8>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d02c      	beq.n	80086e6 <HAL_DMA_IRQHandler+0x516>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a7a      	ldr	r2, [pc, #488]	@ (800887c <HAL_DMA_IRQHandler+0x6ac>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d027      	beq.n	80086e6 <HAL_DMA_IRQHandler+0x516>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a79      	ldr	r2, [pc, #484]	@ (8008880 <HAL_DMA_IRQHandler+0x6b0>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d022      	beq.n	80086e6 <HAL_DMA_IRQHandler+0x516>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a77      	ldr	r2, [pc, #476]	@ (8008884 <HAL_DMA_IRQHandler+0x6b4>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d01d      	beq.n	80086e6 <HAL_DMA_IRQHandler+0x516>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a76      	ldr	r2, [pc, #472]	@ (8008888 <HAL_DMA_IRQHandler+0x6b8>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d018      	beq.n	80086e6 <HAL_DMA_IRQHandler+0x516>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a74      	ldr	r2, [pc, #464]	@ (800888c <HAL_DMA_IRQHandler+0x6bc>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d013      	beq.n	80086e6 <HAL_DMA_IRQHandler+0x516>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a73      	ldr	r2, [pc, #460]	@ (8008890 <HAL_DMA_IRQHandler+0x6c0>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d00e      	beq.n	80086e6 <HAL_DMA_IRQHandler+0x516>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a71      	ldr	r2, [pc, #452]	@ (8008894 <HAL_DMA_IRQHandler+0x6c4>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d009      	beq.n	80086e6 <HAL_DMA_IRQHandler+0x516>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a70      	ldr	r2, [pc, #448]	@ (8008898 <HAL_DMA_IRQHandler+0x6c8>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d004      	beq.n	80086e6 <HAL_DMA_IRQHandler+0x516>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a6e      	ldr	r2, [pc, #440]	@ (800889c <HAL_DMA_IRQHandler+0x6cc>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d10a      	bne.n	80086fc <HAL_DMA_IRQHandler+0x52c>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f003 0308 	and.w	r3, r3, #8
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	bf14      	ite	ne
 80086f4:	2301      	movne	r3, #1
 80086f6:	2300      	moveq	r3, #0
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	e009      	b.n	8008710 <HAL_DMA_IRQHandler+0x540>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f003 0304 	and.w	r3, r3, #4
 8008706:	2b00      	cmp	r3, #0
 8008708:	bf14      	ite	ne
 800870a:	2301      	movne	r3, #1
 800870c:	2300      	moveq	r3, #0
 800870e:	b2db      	uxtb	r3, r3
 8008710:	2b00      	cmp	r3, #0
 8008712:	d03e      	beq.n	8008792 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008718:	f003 031f 	and.w	r3, r3, #31
 800871c:	2210      	movs	r2, #16
 800871e:	409a      	lsls	r2, r3
 8008720:	6a3b      	ldr	r3, [r7, #32]
 8008722:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800872e:	2b00      	cmp	r3, #0
 8008730:	d018      	beq.n	8008764 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800873c:	2b00      	cmp	r3, #0
 800873e:	d108      	bne.n	8008752 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008744:	2b00      	cmp	r3, #0
 8008746:	d024      	beq.n	8008792 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	4798      	blx	r3
 8008750:	e01f      	b.n	8008792 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008756:	2b00      	cmp	r3, #0
 8008758:	d01b      	beq.n	8008792 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	4798      	blx	r3
 8008762:	e016      	b.n	8008792 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800876e:	2b00      	cmp	r3, #0
 8008770:	d107      	bne.n	8008782 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f022 0208 	bic.w	r2, r2, #8
 8008780:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008786:	2b00      	cmp	r3, #0
 8008788:	d003      	beq.n	8008792 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008796:	f003 031f 	and.w	r3, r3, #31
 800879a:	2220      	movs	r2, #32
 800879c:	409a      	lsls	r2, r3
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	4013      	ands	r3, r2
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	f000 8110 	beq.w	80089c8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a2c      	ldr	r2, [pc, #176]	@ (8008860 <HAL_DMA_IRQHandler+0x690>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d04a      	beq.n	8008848 <HAL_DMA_IRQHandler+0x678>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a2b      	ldr	r2, [pc, #172]	@ (8008864 <HAL_DMA_IRQHandler+0x694>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d045      	beq.n	8008848 <HAL_DMA_IRQHandler+0x678>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a29      	ldr	r2, [pc, #164]	@ (8008868 <HAL_DMA_IRQHandler+0x698>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d040      	beq.n	8008848 <HAL_DMA_IRQHandler+0x678>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a28      	ldr	r2, [pc, #160]	@ (800886c <HAL_DMA_IRQHandler+0x69c>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d03b      	beq.n	8008848 <HAL_DMA_IRQHandler+0x678>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a26      	ldr	r2, [pc, #152]	@ (8008870 <HAL_DMA_IRQHandler+0x6a0>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d036      	beq.n	8008848 <HAL_DMA_IRQHandler+0x678>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a25      	ldr	r2, [pc, #148]	@ (8008874 <HAL_DMA_IRQHandler+0x6a4>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d031      	beq.n	8008848 <HAL_DMA_IRQHandler+0x678>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a23      	ldr	r2, [pc, #140]	@ (8008878 <HAL_DMA_IRQHandler+0x6a8>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d02c      	beq.n	8008848 <HAL_DMA_IRQHandler+0x678>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a22      	ldr	r2, [pc, #136]	@ (800887c <HAL_DMA_IRQHandler+0x6ac>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d027      	beq.n	8008848 <HAL_DMA_IRQHandler+0x678>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a20      	ldr	r2, [pc, #128]	@ (8008880 <HAL_DMA_IRQHandler+0x6b0>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d022      	beq.n	8008848 <HAL_DMA_IRQHandler+0x678>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a1f      	ldr	r2, [pc, #124]	@ (8008884 <HAL_DMA_IRQHandler+0x6b4>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d01d      	beq.n	8008848 <HAL_DMA_IRQHandler+0x678>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a1d      	ldr	r2, [pc, #116]	@ (8008888 <HAL_DMA_IRQHandler+0x6b8>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d018      	beq.n	8008848 <HAL_DMA_IRQHandler+0x678>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a1c      	ldr	r2, [pc, #112]	@ (800888c <HAL_DMA_IRQHandler+0x6bc>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d013      	beq.n	8008848 <HAL_DMA_IRQHandler+0x678>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a1a      	ldr	r2, [pc, #104]	@ (8008890 <HAL_DMA_IRQHandler+0x6c0>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d00e      	beq.n	8008848 <HAL_DMA_IRQHandler+0x678>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a19      	ldr	r2, [pc, #100]	@ (8008894 <HAL_DMA_IRQHandler+0x6c4>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d009      	beq.n	8008848 <HAL_DMA_IRQHandler+0x678>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a17      	ldr	r2, [pc, #92]	@ (8008898 <HAL_DMA_IRQHandler+0x6c8>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d004      	beq.n	8008848 <HAL_DMA_IRQHandler+0x678>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a16      	ldr	r2, [pc, #88]	@ (800889c <HAL_DMA_IRQHandler+0x6cc>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d12b      	bne.n	80088a0 <HAL_DMA_IRQHandler+0x6d0>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f003 0310 	and.w	r3, r3, #16
 8008852:	2b00      	cmp	r3, #0
 8008854:	bf14      	ite	ne
 8008856:	2301      	movne	r3, #1
 8008858:	2300      	moveq	r3, #0
 800885a:	b2db      	uxtb	r3, r3
 800885c:	e02a      	b.n	80088b4 <HAL_DMA_IRQHandler+0x6e4>
 800885e:	bf00      	nop
 8008860:	40020010 	.word	0x40020010
 8008864:	40020028 	.word	0x40020028
 8008868:	40020040 	.word	0x40020040
 800886c:	40020058 	.word	0x40020058
 8008870:	40020070 	.word	0x40020070
 8008874:	40020088 	.word	0x40020088
 8008878:	400200a0 	.word	0x400200a0
 800887c:	400200b8 	.word	0x400200b8
 8008880:	40020410 	.word	0x40020410
 8008884:	40020428 	.word	0x40020428
 8008888:	40020440 	.word	0x40020440
 800888c:	40020458 	.word	0x40020458
 8008890:	40020470 	.word	0x40020470
 8008894:	40020488 	.word	0x40020488
 8008898:	400204a0 	.word	0x400204a0
 800889c:	400204b8 	.word	0x400204b8
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f003 0302 	and.w	r3, r3, #2
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	bf14      	ite	ne
 80088ae:	2301      	movne	r3, #1
 80088b0:	2300      	moveq	r3, #0
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	f000 8087 	beq.w	80089c8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088be:	f003 031f 	and.w	r3, r3, #31
 80088c2:	2220      	movs	r2, #32
 80088c4:	409a      	lsls	r2, r3
 80088c6:	6a3b      	ldr	r3, [r7, #32]
 80088c8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	2b04      	cmp	r3, #4
 80088d4:	d139      	bne.n	800894a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f022 0216 	bic.w	r2, r2, #22
 80088e4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	695a      	ldr	r2, [r3, #20]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80088f4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d103      	bne.n	8008906 <HAL_DMA_IRQHandler+0x736>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008902:	2b00      	cmp	r3, #0
 8008904:	d007      	beq.n	8008916 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f022 0208 	bic.w	r2, r2, #8
 8008914:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800891a:	f003 031f 	and.w	r3, r3, #31
 800891e:	223f      	movs	r2, #63	@ 0x3f
 8008920:	409a      	lsls	r2, r3
 8008922:	6a3b      	ldr	r3, [r7, #32]
 8008924:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800893a:	2b00      	cmp	r3, #0
 800893c:	f000 8382 	beq.w	8009044 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	4798      	blx	r3
          }
          return;
 8008948:	e37c      	b.n	8009044 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008954:	2b00      	cmp	r3, #0
 8008956:	d018      	beq.n	800898a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008962:	2b00      	cmp	r3, #0
 8008964:	d108      	bne.n	8008978 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800896a:	2b00      	cmp	r3, #0
 800896c:	d02c      	beq.n	80089c8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	4798      	blx	r3
 8008976:	e027      	b.n	80089c8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800897c:	2b00      	cmp	r3, #0
 800897e:	d023      	beq.n	80089c8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	4798      	blx	r3
 8008988:	e01e      	b.n	80089c8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008994:	2b00      	cmp	r3, #0
 8008996:	d10f      	bne.n	80089b8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f022 0210 	bic.w	r2, r2, #16
 80089a6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2201      	movs	r2, #1
 80089ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d003      	beq.n	80089c8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f000 833e 	beq.w	800904e <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089d6:	f003 0301 	and.w	r3, r3, #1
 80089da:	2b00      	cmp	r3, #0
 80089dc:	f000 8088 	beq.w	8008af0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2204      	movs	r2, #4
 80089e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a89      	ldr	r2, [pc, #548]	@ (8008c14 <HAL_DMA_IRQHandler+0xa44>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d04a      	beq.n	8008a88 <HAL_DMA_IRQHandler+0x8b8>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a88      	ldr	r2, [pc, #544]	@ (8008c18 <HAL_DMA_IRQHandler+0xa48>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d045      	beq.n	8008a88 <HAL_DMA_IRQHandler+0x8b8>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a86      	ldr	r2, [pc, #536]	@ (8008c1c <HAL_DMA_IRQHandler+0xa4c>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d040      	beq.n	8008a88 <HAL_DMA_IRQHandler+0x8b8>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a85      	ldr	r2, [pc, #532]	@ (8008c20 <HAL_DMA_IRQHandler+0xa50>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d03b      	beq.n	8008a88 <HAL_DMA_IRQHandler+0x8b8>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a83      	ldr	r2, [pc, #524]	@ (8008c24 <HAL_DMA_IRQHandler+0xa54>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d036      	beq.n	8008a88 <HAL_DMA_IRQHandler+0x8b8>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a82      	ldr	r2, [pc, #520]	@ (8008c28 <HAL_DMA_IRQHandler+0xa58>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d031      	beq.n	8008a88 <HAL_DMA_IRQHandler+0x8b8>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a80      	ldr	r2, [pc, #512]	@ (8008c2c <HAL_DMA_IRQHandler+0xa5c>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d02c      	beq.n	8008a88 <HAL_DMA_IRQHandler+0x8b8>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a7f      	ldr	r2, [pc, #508]	@ (8008c30 <HAL_DMA_IRQHandler+0xa60>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d027      	beq.n	8008a88 <HAL_DMA_IRQHandler+0x8b8>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a7d      	ldr	r2, [pc, #500]	@ (8008c34 <HAL_DMA_IRQHandler+0xa64>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d022      	beq.n	8008a88 <HAL_DMA_IRQHandler+0x8b8>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a7c      	ldr	r2, [pc, #496]	@ (8008c38 <HAL_DMA_IRQHandler+0xa68>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d01d      	beq.n	8008a88 <HAL_DMA_IRQHandler+0x8b8>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a7a      	ldr	r2, [pc, #488]	@ (8008c3c <HAL_DMA_IRQHandler+0xa6c>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d018      	beq.n	8008a88 <HAL_DMA_IRQHandler+0x8b8>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a79      	ldr	r2, [pc, #484]	@ (8008c40 <HAL_DMA_IRQHandler+0xa70>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d013      	beq.n	8008a88 <HAL_DMA_IRQHandler+0x8b8>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a77      	ldr	r2, [pc, #476]	@ (8008c44 <HAL_DMA_IRQHandler+0xa74>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d00e      	beq.n	8008a88 <HAL_DMA_IRQHandler+0x8b8>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a76      	ldr	r2, [pc, #472]	@ (8008c48 <HAL_DMA_IRQHandler+0xa78>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d009      	beq.n	8008a88 <HAL_DMA_IRQHandler+0x8b8>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a74      	ldr	r2, [pc, #464]	@ (8008c4c <HAL_DMA_IRQHandler+0xa7c>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d004      	beq.n	8008a88 <HAL_DMA_IRQHandler+0x8b8>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a73      	ldr	r2, [pc, #460]	@ (8008c50 <HAL_DMA_IRQHandler+0xa80>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d108      	bne.n	8008a9a <HAL_DMA_IRQHandler+0x8ca>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f022 0201 	bic.w	r2, r2, #1
 8008a96:	601a      	str	r2, [r3, #0]
 8008a98:	e007      	b.n	8008aaa <HAL_DMA_IRQHandler+0x8da>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f022 0201 	bic.w	r2, r2, #1
 8008aa8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	3301      	adds	r3, #1
 8008aae:	60fb      	str	r3, [r7, #12]
 8008ab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d307      	bcc.n	8008ac6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 0301 	and.w	r3, r3, #1
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d1f2      	bne.n	8008aaa <HAL_DMA_IRQHandler+0x8da>
 8008ac4:	e000      	b.n	8008ac8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008ac6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f003 0301 	and.w	r3, r3, #1
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d004      	beq.n	8008ae0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2203      	movs	r2, #3
 8008ada:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8008ade:	e003      	b.n	8008ae8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	f000 82aa 	beq.w	800904e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	4798      	blx	r3
 8008b02:	e2a4      	b.n	800904e <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a52      	ldr	r2, [pc, #328]	@ (8008c54 <HAL_DMA_IRQHandler+0xa84>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d04a      	beq.n	8008ba4 <HAL_DMA_IRQHandler+0x9d4>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a51      	ldr	r2, [pc, #324]	@ (8008c58 <HAL_DMA_IRQHandler+0xa88>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d045      	beq.n	8008ba4 <HAL_DMA_IRQHandler+0x9d4>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a4f      	ldr	r2, [pc, #316]	@ (8008c5c <HAL_DMA_IRQHandler+0xa8c>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d040      	beq.n	8008ba4 <HAL_DMA_IRQHandler+0x9d4>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a4e      	ldr	r2, [pc, #312]	@ (8008c60 <HAL_DMA_IRQHandler+0xa90>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d03b      	beq.n	8008ba4 <HAL_DMA_IRQHandler+0x9d4>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a4c      	ldr	r2, [pc, #304]	@ (8008c64 <HAL_DMA_IRQHandler+0xa94>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d036      	beq.n	8008ba4 <HAL_DMA_IRQHandler+0x9d4>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a4b      	ldr	r2, [pc, #300]	@ (8008c68 <HAL_DMA_IRQHandler+0xa98>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d031      	beq.n	8008ba4 <HAL_DMA_IRQHandler+0x9d4>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a49      	ldr	r2, [pc, #292]	@ (8008c6c <HAL_DMA_IRQHandler+0xa9c>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d02c      	beq.n	8008ba4 <HAL_DMA_IRQHandler+0x9d4>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a48      	ldr	r2, [pc, #288]	@ (8008c70 <HAL_DMA_IRQHandler+0xaa0>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d027      	beq.n	8008ba4 <HAL_DMA_IRQHandler+0x9d4>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a46      	ldr	r2, [pc, #280]	@ (8008c74 <HAL_DMA_IRQHandler+0xaa4>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d022      	beq.n	8008ba4 <HAL_DMA_IRQHandler+0x9d4>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a45      	ldr	r2, [pc, #276]	@ (8008c78 <HAL_DMA_IRQHandler+0xaa8>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d01d      	beq.n	8008ba4 <HAL_DMA_IRQHandler+0x9d4>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a43      	ldr	r2, [pc, #268]	@ (8008c7c <HAL_DMA_IRQHandler+0xaac>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d018      	beq.n	8008ba4 <HAL_DMA_IRQHandler+0x9d4>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a42      	ldr	r2, [pc, #264]	@ (8008c80 <HAL_DMA_IRQHandler+0xab0>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d013      	beq.n	8008ba4 <HAL_DMA_IRQHandler+0x9d4>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a40      	ldr	r2, [pc, #256]	@ (8008c84 <HAL_DMA_IRQHandler+0xab4>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d00e      	beq.n	8008ba4 <HAL_DMA_IRQHandler+0x9d4>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a3f      	ldr	r2, [pc, #252]	@ (8008c88 <HAL_DMA_IRQHandler+0xab8>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d009      	beq.n	8008ba4 <HAL_DMA_IRQHandler+0x9d4>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a3d      	ldr	r2, [pc, #244]	@ (8008c8c <HAL_DMA_IRQHandler+0xabc>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d004      	beq.n	8008ba4 <HAL_DMA_IRQHandler+0x9d4>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a3c      	ldr	r2, [pc, #240]	@ (8008c90 <HAL_DMA_IRQHandler+0xac0>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d101      	bne.n	8008ba8 <HAL_DMA_IRQHandler+0x9d8>
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e000      	b.n	8008baa <HAL_DMA_IRQHandler+0x9da>
 8008ba8:	2300      	movs	r3, #0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	f000 824f 	beq.w	800904e <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bbc:	f003 031f 	and.w	r3, r3, #31
 8008bc0:	2204      	movs	r2, #4
 8008bc2:	409a      	lsls	r2, r3
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	f000 80dd 	beq.w	8008d88 <HAL_DMA_IRQHandler+0xbb8>
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	f003 0304 	and.w	r3, r3, #4
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	f000 80d7 	beq.w	8008d88 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bde:	f003 031f 	and.w	r3, r3, #31
 8008be2:	2204      	movs	r2, #4
 8008be4:	409a      	lsls	r2, r3
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d059      	beq.n	8008ca8 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d14a      	bne.n	8008c94 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	f000 8220 	beq.w	8009048 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008c10:	e21a      	b.n	8009048 <HAL_DMA_IRQHandler+0xe78>
 8008c12:	bf00      	nop
 8008c14:	40020010 	.word	0x40020010
 8008c18:	40020028 	.word	0x40020028
 8008c1c:	40020040 	.word	0x40020040
 8008c20:	40020058 	.word	0x40020058
 8008c24:	40020070 	.word	0x40020070
 8008c28:	40020088 	.word	0x40020088
 8008c2c:	400200a0 	.word	0x400200a0
 8008c30:	400200b8 	.word	0x400200b8
 8008c34:	40020410 	.word	0x40020410
 8008c38:	40020428 	.word	0x40020428
 8008c3c:	40020440 	.word	0x40020440
 8008c40:	40020458 	.word	0x40020458
 8008c44:	40020470 	.word	0x40020470
 8008c48:	40020488 	.word	0x40020488
 8008c4c:	400204a0 	.word	0x400204a0
 8008c50:	400204b8 	.word	0x400204b8
 8008c54:	48022c08 	.word	0x48022c08
 8008c58:	48022c1c 	.word	0x48022c1c
 8008c5c:	48022c30 	.word	0x48022c30
 8008c60:	48022c44 	.word	0x48022c44
 8008c64:	48022c58 	.word	0x48022c58
 8008c68:	48022c6c 	.word	0x48022c6c
 8008c6c:	48022c80 	.word	0x48022c80
 8008c70:	48022c94 	.word	0x48022c94
 8008c74:	58025408 	.word	0x58025408
 8008c78:	5802541c 	.word	0x5802541c
 8008c7c:	58025430 	.word	0x58025430
 8008c80:	58025444 	.word	0x58025444
 8008c84:	58025458 	.word	0x58025458
 8008c88:	5802546c 	.word	0x5802546c
 8008c8c:	58025480 	.word	0x58025480
 8008c90:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	f000 81d5 	beq.w	8009048 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008ca6:	e1cf      	b.n	8009048 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	f003 0320 	and.w	r3, r3, #32
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d160      	bne.n	8008d74 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a7f      	ldr	r2, [pc, #508]	@ (8008eb4 <HAL_DMA_IRQHandler+0xce4>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d04a      	beq.n	8008d52 <HAL_DMA_IRQHandler+0xb82>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a7d      	ldr	r2, [pc, #500]	@ (8008eb8 <HAL_DMA_IRQHandler+0xce8>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d045      	beq.n	8008d52 <HAL_DMA_IRQHandler+0xb82>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a7c      	ldr	r2, [pc, #496]	@ (8008ebc <HAL_DMA_IRQHandler+0xcec>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d040      	beq.n	8008d52 <HAL_DMA_IRQHandler+0xb82>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a7a      	ldr	r2, [pc, #488]	@ (8008ec0 <HAL_DMA_IRQHandler+0xcf0>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d03b      	beq.n	8008d52 <HAL_DMA_IRQHandler+0xb82>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a79      	ldr	r2, [pc, #484]	@ (8008ec4 <HAL_DMA_IRQHandler+0xcf4>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d036      	beq.n	8008d52 <HAL_DMA_IRQHandler+0xb82>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a77      	ldr	r2, [pc, #476]	@ (8008ec8 <HAL_DMA_IRQHandler+0xcf8>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d031      	beq.n	8008d52 <HAL_DMA_IRQHandler+0xb82>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a76      	ldr	r2, [pc, #472]	@ (8008ecc <HAL_DMA_IRQHandler+0xcfc>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d02c      	beq.n	8008d52 <HAL_DMA_IRQHandler+0xb82>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a74      	ldr	r2, [pc, #464]	@ (8008ed0 <HAL_DMA_IRQHandler+0xd00>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d027      	beq.n	8008d52 <HAL_DMA_IRQHandler+0xb82>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a73      	ldr	r2, [pc, #460]	@ (8008ed4 <HAL_DMA_IRQHandler+0xd04>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d022      	beq.n	8008d52 <HAL_DMA_IRQHandler+0xb82>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a71      	ldr	r2, [pc, #452]	@ (8008ed8 <HAL_DMA_IRQHandler+0xd08>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d01d      	beq.n	8008d52 <HAL_DMA_IRQHandler+0xb82>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a70      	ldr	r2, [pc, #448]	@ (8008edc <HAL_DMA_IRQHandler+0xd0c>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d018      	beq.n	8008d52 <HAL_DMA_IRQHandler+0xb82>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a6e      	ldr	r2, [pc, #440]	@ (8008ee0 <HAL_DMA_IRQHandler+0xd10>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d013      	beq.n	8008d52 <HAL_DMA_IRQHandler+0xb82>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a6d      	ldr	r2, [pc, #436]	@ (8008ee4 <HAL_DMA_IRQHandler+0xd14>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d00e      	beq.n	8008d52 <HAL_DMA_IRQHandler+0xb82>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a6b      	ldr	r2, [pc, #428]	@ (8008ee8 <HAL_DMA_IRQHandler+0xd18>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d009      	beq.n	8008d52 <HAL_DMA_IRQHandler+0xb82>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a6a      	ldr	r2, [pc, #424]	@ (8008eec <HAL_DMA_IRQHandler+0xd1c>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d004      	beq.n	8008d52 <HAL_DMA_IRQHandler+0xb82>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a68      	ldr	r2, [pc, #416]	@ (8008ef0 <HAL_DMA_IRQHandler+0xd20>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d108      	bne.n	8008d64 <HAL_DMA_IRQHandler+0xb94>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f022 0208 	bic.w	r2, r2, #8
 8008d60:	601a      	str	r2, [r3, #0]
 8008d62:	e007      	b.n	8008d74 <HAL_DMA_IRQHandler+0xba4>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f022 0204 	bic.w	r2, r2, #4
 8008d72:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	f000 8165 	beq.w	8009048 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008d86:	e15f      	b.n	8009048 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d8c:	f003 031f 	and.w	r3, r3, #31
 8008d90:	2202      	movs	r2, #2
 8008d92:	409a      	lsls	r2, r3
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	4013      	ands	r3, r2
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	f000 80c5 	beq.w	8008f28 <HAL_DMA_IRQHandler+0xd58>
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	f003 0302 	and.w	r3, r3, #2
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f000 80bf 	beq.w	8008f28 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008dae:	f003 031f 	and.w	r3, r3, #31
 8008db2:	2202      	movs	r2, #2
 8008db4:	409a      	lsls	r2, r3
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d018      	beq.n	8008df6 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d109      	bne.n	8008de2 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	f000 813a 	beq.w	800904c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008de0:	e134      	b.n	800904c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	f000 8130 	beq.w	800904c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008df4:	e12a      	b.n	800904c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	f003 0320 	and.w	r3, r3, #32
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f040 8089 	bne.w	8008f14 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a2b      	ldr	r2, [pc, #172]	@ (8008eb4 <HAL_DMA_IRQHandler+0xce4>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d04a      	beq.n	8008ea2 <HAL_DMA_IRQHandler+0xcd2>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a29      	ldr	r2, [pc, #164]	@ (8008eb8 <HAL_DMA_IRQHandler+0xce8>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d045      	beq.n	8008ea2 <HAL_DMA_IRQHandler+0xcd2>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a28      	ldr	r2, [pc, #160]	@ (8008ebc <HAL_DMA_IRQHandler+0xcec>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d040      	beq.n	8008ea2 <HAL_DMA_IRQHandler+0xcd2>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a26      	ldr	r2, [pc, #152]	@ (8008ec0 <HAL_DMA_IRQHandler+0xcf0>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d03b      	beq.n	8008ea2 <HAL_DMA_IRQHandler+0xcd2>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a25      	ldr	r2, [pc, #148]	@ (8008ec4 <HAL_DMA_IRQHandler+0xcf4>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d036      	beq.n	8008ea2 <HAL_DMA_IRQHandler+0xcd2>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a23      	ldr	r2, [pc, #140]	@ (8008ec8 <HAL_DMA_IRQHandler+0xcf8>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d031      	beq.n	8008ea2 <HAL_DMA_IRQHandler+0xcd2>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a22      	ldr	r2, [pc, #136]	@ (8008ecc <HAL_DMA_IRQHandler+0xcfc>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d02c      	beq.n	8008ea2 <HAL_DMA_IRQHandler+0xcd2>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a20      	ldr	r2, [pc, #128]	@ (8008ed0 <HAL_DMA_IRQHandler+0xd00>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d027      	beq.n	8008ea2 <HAL_DMA_IRQHandler+0xcd2>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a1f      	ldr	r2, [pc, #124]	@ (8008ed4 <HAL_DMA_IRQHandler+0xd04>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d022      	beq.n	8008ea2 <HAL_DMA_IRQHandler+0xcd2>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a1d      	ldr	r2, [pc, #116]	@ (8008ed8 <HAL_DMA_IRQHandler+0xd08>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d01d      	beq.n	8008ea2 <HAL_DMA_IRQHandler+0xcd2>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a1c      	ldr	r2, [pc, #112]	@ (8008edc <HAL_DMA_IRQHandler+0xd0c>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d018      	beq.n	8008ea2 <HAL_DMA_IRQHandler+0xcd2>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a1a      	ldr	r2, [pc, #104]	@ (8008ee0 <HAL_DMA_IRQHandler+0xd10>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d013      	beq.n	8008ea2 <HAL_DMA_IRQHandler+0xcd2>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a19      	ldr	r2, [pc, #100]	@ (8008ee4 <HAL_DMA_IRQHandler+0xd14>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d00e      	beq.n	8008ea2 <HAL_DMA_IRQHandler+0xcd2>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a17      	ldr	r2, [pc, #92]	@ (8008ee8 <HAL_DMA_IRQHandler+0xd18>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d009      	beq.n	8008ea2 <HAL_DMA_IRQHandler+0xcd2>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a16      	ldr	r2, [pc, #88]	@ (8008eec <HAL_DMA_IRQHandler+0xd1c>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d004      	beq.n	8008ea2 <HAL_DMA_IRQHandler+0xcd2>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a14      	ldr	r2, [pc, #80]	@ (8008ef0 <HAL_DMA_IRQHandler+0xd20>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d128      	bne.n	8008ef4 <HAL_DMA_IRQHandler+0xd24>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f022 0214 	bic.w	r2, r2, #20
 8008eb0:	601a      	str	r2, [r3, #0]
 8008eb2:	e027      	b.n	8008f04 <HAL_DMA_IRQHandler+0xd34>
 8008eb4:	40020010 	.word	0x40020010
 8008eb8:	40020028 	.word	0x40020028
 8008ebc:	40020040 	.word	0x40020040
 8008ec0:	40020058 	.word	0x40020058
 8008ec4:	40020070 	.word	0x40020070
 8008ec8:	40020088 	.word	0x40020088
 8008ecc:	400200a0 	.word	0x400200a0
 8008ed0:	400200b8 	.word	0x400200b8
 8008ed4:	40020410 	.word	0x40020410
 8008ed8:	40020428 	.word	0x40020428
 8008edc:	40020440 	.word	0x40020440
 8008ee0:	40020458 	.word	0x40020458
 8008ee4:	40020470 	.word	0x40020470
 8008ee8:	40020488 	.word	0x40020488
 8008eec:	400204a0 	.word	0x400204a0
 8008ef0:	400204b8 	.word	0x400204b8
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f022 020a 	bic.w	r2, r2, #10
 8008f02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2201      	movs	r2, #1
 8008f08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f000 8097 	beq.w	800904c <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008f26:	e091      	b.n	800904c <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f2c:	f003 031f 	and.w	r3, r3, #31
 8008f30:	2208      	movs	r2, #8
 8008f32:	409a      	lsls	r2, r3
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	4013      	ands	r3, r2
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f000 8088 	beq.w	800904e <HAL_DMA_IRQHandler+0xe7e>
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	f003 0308 	and.w	r3, r3, #8
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	f000 8082 	beq.w	800904e <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a41      	ldr	r2, [pc, #260]	@ (8009054 <HAL_DMA_IRQHandler+0xe84>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d04a      	beq.n	8008fea <HAL_DMA_IRQHandler+0xe1a>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a3f      	ldr	r2, [pc, #252]	@ (8009058 <HAL_DMA_IRQHandler+0xe88>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d045      	beq.n	8008fea <HAL_DMA_IRQHandler+0xe1a>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a3e      	ldr	r2, [pc, #248]	@ (800905c <HAL_DMA_IRQHandler+0xe8c>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d040      	beq.n	8008fea <HAL_DMA_IRQHandler+0xe1a>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a3c      	ldr	r2, [pc, #240]	@ (8009060 <HAL_DMA_IRQHandler+0xe90>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d03b      	beq.n	8008fea <HAL_DMA_IRQHandler+0xe1a>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a3b      	ldr	r2, [pc, #236]	@ (8009064 <HAL_DMA_IRQHandler+0xe94>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d036      	beq.n	8008fea <HAL_DMA_IRQHandler+0xe1a>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a39      	ldr	r2, [pc, #228]	@ (8009068 <HAL_DMA_IRQHandler+0xe98>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d031      	beq.n	8008fea <HAL_DMA_IRQHandler+0xe1a>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a38      	ldr	r2, [pc, #224]	@ (800906c <HAL_DMA_IRQHandler+0xe9c>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d02c      	beq.n	8008fea <HAL_DMA_IRQHandler+0xe1a>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a36      	ldr	r2, [pc, #216]	@ (8009070 <HAL_DMA_IRQHandler+0xea0>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d027      	beq.n	8008fea <HAL_DMA_IRQHandler+0xe1a>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a35      	ldr	r2, [pc, #212]	@ (8009074 <HAL_DMA_IRQHandler+0xea4>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d022      	beq.n	8008fea <HAL_DMA_IRQHandler+0xe1a>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a33      	ldr	r2, [pc, #204]	@ (8009078 <HAL_DMA_IRQHandler+0xea8>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d01d      	beq.n	8008fea <HAL_DMA_IRQHandler+0xe1a>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a32      	ldr	r2, [pc, #200]	@ (800907c <HAL_DMA_IRQHandler+0xeac>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d018      	beq.n	8008fea <HAL_DMA_IRQHandler+0xe1a>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a30      	ldr	r2, [pc, #192]	@ (8009080 <HAL_DMA_IRQHandler+0xeb0>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d013      	beq.n	8008fea <HAL_DMA_IRQHandler+0xe1a>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a2f      	ldr	r2, [pc, #188]	@ (8009084 <HAL_DMA_IRQHandler+0xeb4>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d00e      	beq.n	8008fea <HAL_DMA_IRQHandler+0xe1a>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a2d      	ldr	r2, [pc, #180]	@ (8009088 <HAL_DMA_IRQHandler+0xeb8>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d009      	beq.n	8008fea <HAL_DMA_IRQHandler+0xe1a>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a2c      	ldr	r2, [pc, #176]	@ (800908c <HAL_DMA_IRQHandler+0xebc>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d004      	beq.n	8008fea <HAL_DMA_IRQHandler+0xe1a>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a2a      	ldr	r2, [pc, #168]	@ (8009090 <HAL_DMA_IRQHandler+0xec0>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d108      	bne.n	8008ffc <HAL_DMA_IRQHandler+0xe2c>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f022 021c 	bic.w	r2, r2, #28
 8008ff8:	601a      	str	r2, [r3, #0]
 8008ffa:	e007      	b.n	800900c <HAL_DMA_IRQHandler+0xe3c>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f022 020e 	bic.w	r2, r2, #14
 800900a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009010:	f003 031f 	and.w	r3, r3, #31
 8009014:	2201      	movs	r2, #1
 8009016:	409a      	lsls	r2, r3
 8009018:	69fb      	ldr	r3, [r7, #28]
 800901a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2201      	movs	r2, #1
 8009020:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2201      	movs	r2, #1
 8009026:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009036:	2b00      	cmp	r3, #0
 8009038:	d009      	beq.n	800904e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	4798      	blx	r3
 8009042:	e004      	b.n	800904e <HAL_DMA_IRQHandler+0xe7e>
          return;
 8009044:	bf00      	nop
 8009046:	e002      	b.n	800904e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009048:	bf00      	nop
 800904a:	e000      	b.n	800904e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800904c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800904e:	3728      	adds	r7, #40	@ 0x28
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}
 8009054:	40020010 	.word	0x40020010
 8009058:	40020028 	.word	0x40020028
 800905c:	40020040 	.word	0x40020040
 8009060:	40020058 	.word	0x40020058
 8009064:	40020070 	.word	0x40020070
 8009068:	40020088 	.word	0x40020088
 800906c:	400200a0 	.word	0x400200a0
 8009070:	400200b8 	.word	0x400200b8
 8009074:	40020410 	.word	0x40020410
 8009078:	40020428 	.word	0x40020428
 800907c:	40020440 	.word	0x40020440
 8009080:	40020458 	.word	0x40020458
 8009084:	40020470 	.word	0x40020470
 8009088:	40020488 	.word	0x40020488
 800908c:	400204a0 	.word	0x400204a0
 8009090:	400204b8 	.word	0x400204b8

08009094 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b087      	sub	sp, #28
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	607a      	str	r2, [r7, #4]
 80090b8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090be:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090c4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a7f      	ldr	r2, [pc, #508]	@ (80092c8 <DMA_SetConfig+0x21c>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d072      	beq.n	80091b6 <DMA_SetConfig+0x10a>
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a7d      	ldr	r2, [pc, #500]	@ (80092cc <DMA_SetConfig+0x220>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d06d      	beq.n	80091b6 <DMA_SetConfig+0x10a>
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a7c      	ldr	r2, [pc, #496]	@ (80092d0 <DMA_SetConfig+0x224>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d068      	beq.n	80091b6 <DMA_SetConfig+0x10a>
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a7a      	ldr	r2, [pc, #488]	@ (80092d4 <DMA_SetConfig+0x228>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d063      	beq.n	80091b6 <DMA_SetConfig+0x10a>
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a79      	ldr	r2, [pc, #484]	@ (80092d8 <DMA_SetConfig+0x22c>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d05e      	beq.n	80091b6 <DMA_SetConfig+0x10a>
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a77      	ldr	r2, [pc, #476]	@ (80092dc <DMA_SetConfig+0x230>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d059      	beq.n	80091b6 <DMA_SetConfig+0x10a>
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a76      	ldr	r2, [pc, #472]	@ (80092e0 <DMA_SetConfig+0x234>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d054      	beq.n	80091b6 <DMA_SetConfig+0x10a>
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a74      	ldr	r2, [pc, #464]	@ (80092e4 <DMA_SetConfig+0x238>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d04f      	beq.n	80091b6 <DMA_SetConfig+0x10a>
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a73      	ldr	r2, [pc, #460]	@ (80092e8 <DMA_SetConfig+0x23c>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d04a      	beq.n	80091b6 <DMA_SetConfig+0x10a>
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a71      	ldr	r2, [pc, #452]	@ (80092ec <DMA_SetConfig+0x240>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d045      	beq.n	80091b6 <DMA_SetConfig+0x10a>
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a70      	ldr	r2, [pc, #448]	@ (80092f0 <DMA_SetConfig+0x244>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d040      	beq.n	80091b6 <DMA_SetConfig+0x10a>
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a6e      	ldr	r2, [pc, #440]	@ (80092f4 <DMA_SetConfig+0x248>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d03b      	beq.n	80091b6 <DMA_SetConfig+0x10a>
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a6d      	ldr	r2, [pc, #436]	@ (80092f8 <DMA_SetConfig+0x24c>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d036      	beq.n	80091b6 <DMA_SetConfig+0x10a>
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a6b      	ldr	r2, [pc, #428]	@ (80092fc <DMA_SetConfig+0x250>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d031      	beq.n	80091b6 <DMA_SetConfig+0x10a>
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a6a      	ldr	r2, [pc, #424]	@ (8009300 <DMA_SetConfig+0x254>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d02c      	beq.n	80091b6 <DMA_SetConfig+0x10a>
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a68      	ldr	r2, [pc, #416]	@ (8009304 <DMA_SetConfig+0x258>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d027      	beq.n	80091b6 <DMA_SetConfig+0x10a>
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a67      	ldr	r2, [pc, #412]	@ (8009308 <DMA_SetConfig+0x25c>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d022      	beq.n	80091b6 <DMA_SetConfig+0x10a>
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a65      	ldr	r2, [pc, #404]	@ (800930c <DMA_SetConfig+0x260>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d01d      	beq.n	80091b6 <DMA_SetConfig+0x10a>
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a64      	ldr	r2, [pc, #400]	@ (8009310 <DMA_SetConfig+0x264>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d018      	beq.n	80091b6 <DMA_SetConfig+0x10a>
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a62      	ldr	r2, [pc, #392]	@ (8009314 <DMA_SetConfig+0x268>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d013      	beq.n	80091b6 <DMA_SetConfig+0x10a>
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4a61      	ldr	r2, [pc, #388]	@ (8009318 <DMA_SetConfig+0x26c>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d00e      	beq.n	80091b6 <DMA_SetConfig+0x10a>
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a5f      	ldr	r2, [pc, #380]	@ (800931c <DMA_SetConfig+0x270>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d009      	beq.n	80091b6 <DMA_SetConfig+0x10a>
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a5e      	ldr	r2, [pc, #376]	@ (8009320 <DMA_SetConfig+0x274>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d004      	beq.n	80091b6 <DMA_SetConfig+0x10a>
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a5c      	ldr	r2, [pc, #368]	@ (8009324 <DMA_SetConfig+0x278>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d101      	bne.n	80091ba <DMA_SetConfig+0x10e>
 80091b6:	2301      	movs	r3, #1
 80091b8:	e000      	b.n	80091bc <DMA_SetConfig+0x110>
 80091ba:	2300      	movs	r3, #0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00d      	beq.n	80091dc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091c4:	68fa      	ldr	r2, [r7, #12]
 80091c6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80091c8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d004      	beq.n	80091dc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091d6:	68fa      	ldr	r2, [r7, #12]
 80091d8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80091da:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a39      	ldr	r2, [pc, #228]	@ (80092c8 <DMA_SetConfig+0x21c>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d04a      	beq.n	800927c <DMA_SetConfig+0x1d0>
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a38      	ldr	r2, [pc, #224]	@ (80092cc <DMA_SetConfig+0x220>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d045      	beq.n	800927c <DMA_SetConfig+0x1d0>
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a36      	ldr	r2, [pc, #216]	@ (80092d0 <DMA_SetConfig+0x224>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d040      	beq.n	800927c <DMA_SetConfig+0x1d0>
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a35      	ldr	r2, [pc, #212]	@ (80092d4 <DMA_SetConfig+0x228>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d03b      	beq.n	800927c <DMA_SetConfig+0x1d0>
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a33      	ldr	r2, [pc, #204]	@ (80092d8 <DMA_SetConfig+0x22c>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d036      	beq.n	800927c <DMA_SetConfig+0x1d0>
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a32      	ldr	r2, [pc, #200]	@ (80092dc <DMA_SetConfig+0x230>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d031      	beq.n	800927c <DMA_SetConfig+0x1d0>
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a30      	ldr	r2, [pc, #192]	@ (80092e0 <DMA_SetConfig+0x234>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d02c      	beq.n	800927c <DMA_SetConfig+0x1d0>
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a2f      	ldr	r2, [pc, #188]	@ (80092e4 <DMA_SetConfig+0x238>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d027      	beq.n	800927c <DMA_SetConfig+0x1d0>
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a2d      	ldr	r2, [pc, #180]	@ (80092e8 <DMA_SetConfig+0x23c>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d022      	beq.n	800927c <DMA_SetConfig+0x1d0>
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a2c      	ldr	r2, [pc, #176]	@ (80092ec <DMA_SetConfig+0x240>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d01d      	beq.n	800927c <DMA_SetConfig+0x1d0>
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a2a      	ldr	r2, [pc, #168]	@ (80092f0 <DMA_SetConfig+0x244>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d018      	beq.n	800927c <DMA_SetConfig+0x1d0>
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a29      	ldr	r2, [pc, #164]	@ (80092f4 <DMA_SetConfig+0x248>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d013      	beq.n	800927c <DMA_SetConfig+0x1d0>
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a27      	ldr	r2, [pc, #156]	@ (80092f8 <DMA_SetConfig+0x24c>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d00e      	beq.n	800927c <DMA_SetConfig+0x1d0>
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a26      	ldr	r2, [pc, #152]	@ (80092fc <DMA_SetConfig+0x250>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d009      	beq.n	800927c <DMA_SetConfig+0x1d0>
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a24      	ldr	r2, [pc, #144]	@ (8009300 <DMA_SetConfig+0x254>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d004      	beq.n	800927c <DMA_SetConfig+0x1d0>
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a23      	ldr	r2, [pc, #140]	@ (8009304 <DMA_SetConfig+0x258>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d101      	bne.n	8009280 <DMA_SetConfig+0x1d4>
 800927c:	2301      	movs	r3, #1
 800927e:	e000      	b.n	8009282 <DMA_SetConfig+0x1d6>
 8009280:	2300      	movs	r3, #0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d059      	beq.n	800933a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800928a:	f003 031f 	and.w	r3, r3, #31
 800928e:	223f      	movs	r2, #63	@ 0x3f
 8009290:	409a      	lsls	r2, r3
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80092a4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	683a      	ldr	r2, [r7, #0]
 80092ac:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	2b40      	cmp	r3, #64	@ 0x40
 80092b4:	d138      	bne.n	8009328 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	68ba      	ldr	r2, [r7, #8]
 80092c4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80092c6:	e0ae      	b.n	8009426 <DMA_SetConfig+0x37a>
 80092c8:	40020010 	.word	0x40020010
 80092cc:	40020028 	.word	0x40020028
 80092d0:	40020040 	.word	0x40020040
 80092d4:	40020058 	.word	0x40020058
 80092d8:	40020070 	.word	0x40020070
 80092dc:	40020088 	.word	0x40020088
 80092e0:	400200a0 	.word	0x400200a0
 80092e4:	400200b8 	.word	0x400200b8
 80092e8:	40020410 	.word	0x40020410
 80092ec:	40020428 	.word	0x40020428
 80092f0:	40020440 	.word	0x40020440
 80092f4:	40020458 	.word	0x40020458
 80092f8:	40020470 	.word	0x40020470
 80092fc:	40020488 	.word	0x40020488
 8009300:	400204a0 	.word	0x400204a0
 8009304:	400204b8 	.word	0x400204b8
 8009308:	58025408 	.word	0x58025408
 800930c:	5802541c 	.word	0x5802541c
 8009310:	58025430 	.word	0x58025430
 8009314:	58025444 	.word	0x58025444
 8009318:	58025458 	.word	0x58025458
 800931c:	5802546c 	.word	0x5802546c
 8009320:	58025480 	.word	0x58025480
 8009324:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	68ba      	ldr	r2, [r7, #8]
 800932e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	60da      	str	r2, [r3, #12]
}
 8009338:	e075      	b.n	8009426 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a3d      	ldr	r2, [pc, #244]	@ (8009434 <DMA_SetConfig+0x388>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d04a      	beq.n	80093da <DMA_SetConfig+0x32e>
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a3b      	ldr	r2, [pc, #236]	@ (8009438 <DMA_SetConfig+0x38c>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d045      	beq.n	80093da <DMA_SetConfig+0x32e>
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a3a      	ldr	r2, [pc, #232]	@ (800943c <DMA_SetConfig+0x390>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d040      	beq.n	80093da <DMA_SetConfig+0x32e>
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a38      	ldr	r2, [pc, #224]	@ (8009440 <DMA_SetConfig+0x394>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d03b      	beq.n	80093da <DMA_SetConfig+0x32e>
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a37      	ldr	r2, [pc, #220]	@ (8009444 <DMA_SetConfig+0x398>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d036      	beq.n	80093da <DMA_SetConfig+0x32e>
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a35      	ldr	r2, [pc, #212]	@ (8009448 <DMA_SetConfig+0x39c>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d031      	beq.n	80093da <DMA_SetConfig+0x32e>
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a34      	ldr	r2, [pc, #208]	@ (800944c <DMA_SetConfig+0x3a0>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d02c      	beq.n	80093da <DMA_SetConfig+0x32e>
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a32      	ldr	r2, [pc, #200]	@ (8009450 <DMA_SetConfig+0x3a4>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d027      	beq.n	80093da <DMA_SetConfig+0x32e>
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4a31      	ldr	r2, [pc, #196]	@ (8009454 <DMA_SetConfig+0x3a8>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d022      	beq.n	80093da <DMA_SetConfig+0x32e>
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a2f      	ldr	r2, [pc, #188]	@ (8009458 <DMA_SetConfig+0x3ac>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d01d      	beq.n	80093da <DMA_SetConfig+0x32e>
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a2e      	ldr	r2, [pc, #184]	@ (800945c <DMA_SetConfig+0x3b0>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d018      	beq.n	80093da <DMA_SetConfig+0x32e>
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a2c      	ldr	r2, [pc, #176]	@ (8009460 <DMA_SetConfig+0x3b4>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d013      	beq.n	80093da <DMA_SetConfig+0x32e>
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a2b      	ldr	r2, [pc, #172]	@ (8009464 <DMA_SetConfig+0x3b8>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d00e      	beq.n	80093da <DMA_SetConfig+0x32e>
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a29      	ldr	r2, [pc, #164]	@ (8009468 <DMA_SetConfig+0x3bc>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d009      	beq.n	80093da <DMA_SetConfig+0x32e>
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a28      	ldr	r2, [pc, #160]	@ (800946c <DMA_SetConfig+0x3c0>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d004      	beq.n	80093da <DMA_SetConfig+0x32e>
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a26      	ldr	r2, [pc, #152]	@ (8009470 <DMA_SetConfig+0x3c4>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d101      	bne.n	80093de <DMA_SetConfig+0x332>
 80093da:	2301      	movs	r3, #1
 80093dc:	e000      	b.n	80093e0 <DMA_SetConfig+0x334>
 80093de:	2300      	movs	r3, #0
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d020      	beq.n	8009426 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80093e8:	f003 031f 	and.w	r3, r3, #31
 80093ec:	2201      	movs	r2, #1
 80093ee:	409a      	lsls	r2, r3
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	683a      	ldr	r2, [r7, #0]
 80093fa:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	2b40      	cmp	r3, #64	@ 0x40
 8009402:	d108      	bne.n	8009416 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	68ba      	ldr	r2, [r7, #8]
 8009412:	60da      	str	r2, [r3, #12]
}
 8009414:	e007      	b.n	8009426 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	68ba      	ldr	r2, [r7, #8]
 800941c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	60da      	str	r2, [r3, #12]
}
 8009426:	bf00      	nop
 8009428:	371c      	adds	r7, #28
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr
 8009432:	bf00      	nop
 8009434:	48022c08 	.word	0x48022c08
 8009438:	48022c1c 	.word	0x48022c1c
 800943c:	48022c30 	.word	0x48022c30
 8009440:	48022c44 	.word	0x48022c44
 8009444:	48022c58 	.word	0x48022c58
 8009448:	48022c6c 	.word	0x48022c6c
 800944c:	48022c80 	.word	0x48022c80
 8009450:	48022c94 	.word	0x48022c94
 8009454:	58025408 	.word	0x58025408
 8009458:	5802541c 	.word	0x5802541c
 800945c:	58025430 	.word	0x58025430
 8009460:	58025444 	.word	0x58025444
 8009464:	58025458 	.word	0x58025458
 8009468:	5802546c 	.word	0x5802546c
 800946c:	58025480 	.word	0x58025480
 8009470:	58025494 	.word	0x58025494

08009474 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009474:	b480      	push	{r7}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a42      	ldr	r2, [pc, #264]	@ (800958c <DMA_CalcBaseAndBitshift+0x118>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d04a      	beq.n	800951c <DMA_CalcBaseAndBitshift+0xa8>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a41      	ldr	r2, [pc, #260]	@ (8009590 <DMA_CalcBaseAndBitshift+0x11c>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d045      	beq.n	800951c <DMA_CalcBaseAndBitshift+0xa8>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a3f      	ldr	r2, [pc, #252]	@ (8009594 <DMA_CalcBaseAndBitshift+0x120>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d040      	beq.n	800951c <DMA_CalcBaseAndBitshift+0xa8>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a3e      	ldr	r2, [pc, #248]	@ (8009598 <DMA_CalcBaseAndBitshift+0x124>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d03b      	beq.n	800951c <DMA_CalcBaseAndBitshift+0xa8>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a3c      	ldr	r2, [pc, #240]	@ (800959c <DMA_CalcBaseAndBitshift+0x128>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d036      	beq.n	800951c <DMA_CalcBaseAndBitshift+0xa8>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a3b      	ldr	r2, [pc, #236]	@ (80095a0 <DMA_CalcBaseAndBitshift+0x12c>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d031      	beq.n	800951c <DMA_CalcBaseAndBitshift+0xa8>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a39      	ldr	r2, [pc, #228]	@ (80095a4 <DMA_CalcBaseAndBitshift+0x130>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d02c      	beq.n	800951c <DMA_CalcBaseAndBitshift+0xa8>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a38      	ldr	r2, [pc, #224]	@ (80095a8 <DMA_CalcBaseAndBitshift+0x134>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d027      	beq.n	800951c <DMA_CalcBaseAndBitshift+0xa8>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a36      	ldr	r2, [pc, #216]	@ (80095ac <DMA_CalcBaseAndBitshift+0x138>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d022      	beq.n	800951c <DMA_CalcBaseAndBitshift+0xa8>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a35      	ldr	r2, [pc, #212]	@ (80095b0 <DMA_CalcBaseAndBitshift+0x13c>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d01d      	beq.n	800951c <DMA_CalcBaseAndBitshift+0xa8>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a33      	ldr	r2, [pc, #204]	@ (80095b4 <DMA_CalcBaseAndBitshift+0x140>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d018      	beq.n	800951c <DMA_CalcBaseAndBitshift+0xa8>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a32      	ldr	r2, [pc, #200]	@ (80095b8 <DMA_CalcBaseAndBitshift+0x144>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d013      	beq.n	800951c <DMA_CalcBaseAndBitshift+0xa8>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a30      	ldr	r2, [pc, #192]	@ (80095bc <DMA_CalcBaseAndBitshift+0x148>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d00e      	beq.n	800951c <DMA_CalcBaseAndBitshift+0xa8>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a2f      	ldr	r2, [pc, #188]	@ (80095c0 <DMA_CalcBaseAndBitshift+0x14c>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d009      	beq.n	800951c <DMA_CalcBaseAndBitshift+0xa8>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a2d      	ldr	r2, [pc, #180]	@ (80095c4 <DMA_CalcBaseAndBitshift+0x150>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d004      	beq.n	800951c <DMA_CalcBaseAndBitshift+0xa8>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a2c      	ldr	r2, [pc, #176]	@ (80095c8 <DMA_CalcBaseAndBitshift+0x154>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d101      	bne.n	8009520 <DMA_CalcBaseAndBitshift+0xac>
 800951c:	2301      	movs	r3, #1
 800951e:	e000      	b.n	8009522 <DMA_CalcBaseAndBitshift+0xae>
 8009520:	2300      	movs	r3, #0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d024      	beq.n	8009570 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	b2db      	uxtb	r3, r3
 800952c:	3b10      	subs	r3, #16
 800952e:	4a27      	ldr	r2, [pc, #156]	@ (80095cc <DMA_CalcBaseAndBitshift+0x158>)
 8009530:	fba2 2303 	umull	r2, r3, r2, r3
 8009534:	091b      	lsrs	r3, r3, #4
 8009536:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f003 0307 	and.w	r3, r3, #7
 800953e:	4a24      	ldr	r2, [pc, #144]	@ (80095d0 <DMA_CalcBaseAndBitshift+0x15c>)
 8009540:	5cd3      	ldrb	r3, [r2, r3]
 8009542:	461a      	mov	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2b03      	cmp	r3, #3
 800954c:	d908      	bls.n	8009560 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	461a      	mov	r2, r3
 8009554:	4b1f      	ldr	r3, [pc, #124]	@ (80095d4 <DMA_CalcBaseAndBitshift+0x160>)
 8009556:	4013      	ands	r3, r2
 8009558:	1d1a      	adds	r2, r3, #4
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	659a      	str	r2, [r3, #88]	@ 0x58
 800955e:	e00d      	b.n	800957c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	461a      	mov	r2, r3
 8009566:	4b1b      	ldr	r3, [pc, #108]	@ (80095d4 <DMA_CalcBaseAndBitshift+0x160>)
 8009568:	4013      	ands	r3, r2
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	6593      	str	r3, [r2, #88]	@ 0x58
 800956e:	e005      	b.n	800957c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8009580:	4618      	mov	r0, r3
 8009582:	3714      	adds	r7, #20
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr
 800958c:	40020010 	.word	0x40020010
 8009590:	40020028 	.word	0x40020028
 8009594:	40020040 	.word	0x40020040
 8009598:	40020058 	.word	0x40020058
 800959c:	40020070 	.word	0x40020070
 80095a0:	40020088 	.word	0x40020088
 80095a4:	400200a0 	.word	0x400200a0
 80095a8:	400200b8 	.word	0x400200b8
 80095ac:	40020410 	.word	0x40020410
 80095b0:	40020428 	.word	0x40020428
 80095b4:	40020440 	.word	0x40020440
 80095b8:	40020458 	.word	0x40020458
 80095bc:	40020470 	.word	0x40020470
 80095c0:	40020488 	.word	0x40020488
 80095c4:	400204a0 	.word	0x400204a0
 80095c8:	400204b8 	.word	0x400204b8
 80095cc:	aaaaaaab 	.word	0xaaaaaaab
 80095d0:	08019d64 	.word	0x08019d64
 80095d4:	fffffc00 	.word	0xfffffc00

080095d8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80095d8:	b480      	push	{r7}
 80095da:	b085      	sub	sp, #20
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095e0:	2300      	movs	r3, #0
 80095e2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	699b      	ldr	r3, [r3, #24]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d120      	bne.n	800962e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095f0:	2b03      	cmp	r3, #3
 80095f2:	d858      	bhi.n	80096a6 <DMA_CheckFifoParam+0xce>
 80095f4:	a201      	add	r2, pc, #4	@ (adr r2, 80095fc <DMA_CheckFifoParam+0x24>)
 80095f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095fa:	bf00      	nop
 80095fc:	0800960d 	.word	0x0800960d
 8009600:	0800961f 	.word	0x0800961f
 8009604:	0800960d 	.word	0x0800960d
 8009608:	080096a7 	.word	0x080096a7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009610:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009614:	2b00      	cmp	r3, #0
 8009616:	d048      	beq.n	80096aa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009618:	2301      	movs	r3, #1
 800961a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800961c:	e045      	b.n	80096aa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009622:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009626:	d142      	bne.n	80096ae <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009628:	2301      	movs	r3, #1
 800962a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800962c:	e03f      	b.n	80096ae <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	699b      	ldr	r3, [r3, #24]
 8009632:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009636:	d123      	bne.n	8009680 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800963c:	2b03      	cmp	r3, #3
 800963e:	d838      	bhi.n	80096b2 <DMA_CheckFifoParam+0xda>
 8009640:	a201      	add	r2, pc, #4	@ (adr r2, 8009648 <DMA_CheckFifoParam+0x70>)
 8009642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009646:	bf00      	nop
 8009648:	08009659 	.word	0x08009659
 800964c:	0800965f 	.word	0x0800965f
 8009650:	08009659 	.word	0x08009659
 8009654:	08009671 	.word	0x08009671
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009658:	2301      	movs	r3, #1
 800965a:	73fb      	strb	r3, [r7, #15]
        break;
 800965c:	e030      	b.n	80096c0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009662:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009666:	2b00      	cmp	r3, #0
 8009668:	d025      	beq.n	80096b6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800966e:	e022      	b.n	80096b6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009674:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009678:	d11f      	bne.n	80096ba <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800967e:	e01c      	b.n	80096ba <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009684:	2b02      	cmp	r3, #2
 8009686:	d902      	bls.n	800968e <DMA_CheckFifoParam+0xb6>
 8009688:	2b03      	cmp	r3, #3
 800968a:	d003      	beq.n	8009694 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800968c:	e018      	b.n	80096c0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	73fb      	strb	r3, [r7, #15]
        break;
 8009692:	e015      	b.n	80096c0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009698:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800969c:	2b00      	cmp	r3, #0
 800969e:	d00e      	beq.n	80096be <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80096a0:	2301      	movs	r3, #1
 80096a2:	73fb      	strb	r3, [r7, #15]
    break;
 80096a4:	e00b      	b.n	80096be <DMA_CheckFifoParam+0xe6>
        break;
 80096a6:	bf00      	nop
 80096a8:	e00a      	b.n	80096c0 <DMA_CheckFifoParam+0xe8>
        break;
 80096aa:	bf00      	nop
 80096ac:	e008      	b.n	80096c0 <DMA_CheckFifoParam+0xe8>
        break;
 80096ae:	bf00      	nop
 80096b0:	e006      	b.n	80096c0 <DMA_CheckFifoParam+0xe8>
        break;
 80096b2:	bf00      	nop
 80096b4:	e004      	b.n	80096c0 <DMA_CheckFifoParam+0xe8>
        break;
 80096b6:	bf00      	nop
 80096b8:	e002      	b.n	80096c0 <DMA_CheckFifoParam+0xe8>
        break;
 80096ba:	bf00      	nop
 80096bc:	e000      	b.n	80096c0 <DMA_CheckFifoParam+0xe8>
    break;
 80096be:	bf00      	nop
    }
  }

  return status;
 80096c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3714      	adds	r7, #20
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop

080096d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b085      	sub	sp, #20
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a38      	ldr	r2, [pc, #224]	@ (80097c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d022      	beq.n	800972e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a36      	ldr	r2, [pc, #216]	@ (80097c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d01d      	beq.n	800972e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a35      	ldr	r2, [pc, #212]	@ (80097cc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d018      	beq.n	800972e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a33      	ldr	r2, [pc, #204]	@ (80097d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d013      	beq.n	800972e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a32      	ldr	r2, [pc, #200]	@ (80097d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d00e      	beq.n	800972e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a30      	ldr	r2, [pc, #192]	@ (80097d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d009      	beq.n	800972e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a2f      	ldr	r2, [pc, #188]	@ (80097dc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d004      	beq.n	800972e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a2d      	ldr	r2, [pc, #180]	@ (80097e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d101      	bne.n	8009732 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800972e:	2301      	movs	r3, #1
 8009730:	e000      	b.n	8009734 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009732:	2300      	movs	r3, #0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d01a      	beq.n	800976e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	b2db      	uxtb	r3, r3
 800973e:	3b08      	subs	r3, #8
 8009740:	4a28      	ldr	r2, [pc, #160]	@ (80097e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009742:	fba2 2303 	umull	r2, r3, r2, r3
 8009746:	091b      	lsrs	r3, r3, #4
 8009748:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800974a:	68fa      	ldr	r2, [r7, #12]
 800974c:	4b26      	ldr	r3, [pc, #152]	@ (80097e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800974e:	4413      	add	r3, r2
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	461a      	mov	r2, r3
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	4a24      	ldr	r2, [pc, #144]	@ (80097ec <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800975c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f003 031f 	and.w	r3, r3, #31
 8009764:	2201      	movs	r2, #1
 8009766:	409a      	lsls	r2, r3
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800976c:	e024      	b.n	80097b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	b2db      	uxtb	r3, r3
 8009774:	3b10      	subs	r3, #16
 8009776:	4a1e      	ldr	r2, [pc, #120]	@ (80097f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009778:	fba2 2303 	umull	r2, r3, r2, r3
 800977c:	091b      	lsrs	r3, r3, #4
 800977e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	4a1c      	ldr	r2, [pc, #112]	@ (80097f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d806      	bhi.n	8009796 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	4a1b      	ldr	r2, [pc, #108]	@ (80097f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d902      	bls.n	8009796 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	3308      	adds	r3, #8
 8009794:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009796:	68fa      	ldr	r2, [r7, #12]
 8009798:	4b18      	ldr	r3, [pc, #96]	@ (80097fc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800979a:	4413      	add	r3, r2
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	461a      	mov	r2, r3
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	4a16      	ldr	r2, [pc, #88]	@ (8009800 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80097a8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f003 031f 	and.w	r3, r3, #31
 80097b0:	2201      	movs	r2, #1
 80097b2:	409a      	lsls	r2, r3
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80097b8:	bf00      	nop
 80097ba:	3714      	adds	r7, #20
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr
 80097c4:	58025408 	.word	0x58025408
 80097c8:	5802541c 	.word	0x5802541c
 80097cc:	58025430 	.word	0x58025430
 80097d0:	58025444 	.word	0x58025444
 80097d4:	58025458 	.word	0x58025458
 80097d8:	5802546c 	.word	0x5802546c
 80097dc:	58025480 	.word	0x58025480
 80097e0:	58025494 	.word	0x58025494
 80097e4:	cccccccd 	.word	0xcccccccd
 80097e8:	16009600 	.word	0x16009600
 80097ec:	58025880 	.word	0x58025880
 80097f0:	aaaaaaab 	.word	0xaaaaaaab
 80097f4:	400204b8 	.word	0x400204b8
 80097f8:	4002040f 	.word	0x4002040f
 80097fc:	10008200 	.word	0x10008200
 8009800:	40020880 	.word	0x40020880

08009804 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009804:	b480      	push	{r7}
 8009806:	b085      	sub	sp, #20
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	b2db      	uxtb	r3, r3
 8009812:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d04a      	beq.n	80098b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2b08      	cmp	r3, #8
 800981e:	d847      	bhi.n	80098b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4a25      	ldr	r2, [pc, #148]	@ (80098bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d022      	beq.n	8009870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a24      	ldr	r2, [pc, #144]	@ (80098c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d01d      	beq.n	8009870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a22      	ldr	r2, [pc, #136]	@ (80098c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d018      	beq.n	8009870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a21      	ldr	r2, [pc, #132]	@ (80098c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d013      	beq.n	8009870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a1f      	ldr	r2, [pc, #124]	@ (80098cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d00e      	beq.n	8009870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a1e      	ldr	r2, [pc, #120]	@ (80098d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d009      	beq.n	8009870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a1c      	ldr	r2, [pc, #112]	@ (80098d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d004      	beq.n	8009870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a1b      	ldr	r2, [pc, #108]	@ (80098d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d101      	bne.n	8009874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009870:	2301      	movs	r3, #1
 8009872:	e000      	b.n	8009876 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009874:	2300      	movs	r3, #0
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00a      	beq.n	8009890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800987a:	68fa      	ldr	r2, [r7, #12]
 800987c:	4b17      	ldr	r3, [pc, #92]	@ (80098dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800987e:	4413      	add	r3, r2
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	461a      	mov	r2, r3
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4a15      	ldr	r2, [pc, #84]	@ (80098e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800988c:	671a      	str	r2, [r3, #112]	@ 0x70
 800988e:	e009      	b.n	80098a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009890:	68fa      	ldr	r2, [r7, #12]
 8009892:	4b14      	ldr	r3, [pc, #80]	@ (80098e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009894:	4413      	add	r3, r2
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	461a      	mov	r2, r3
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	4a11      	ldr	r2, [pc, #68]	@ (80098e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80098a2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	3b01      	subs	r3, #1
 80098a8:	2201      	movs	r2, #1
 80098aa:	409a      	lsls	r2, r3
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80098b0:	bf00      	nop
 80098b2:	3714      	adds	r7, #20
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr
 80098bc:	58025408 	.word	0x58025408
 80098c0:	5802541c 	.word	0x5802541c
 80098c4:	58025430 	.word	0x58025430
 80098c8:	58025444 	.word	0x58025444
 80098cc:	58025458 	.word	0x58025458
 80098d0:	5802546c 	.word	0x5802546c
 80098d4:	58025480 	.word	0x58025480
 80098d8:	58025494 	.word	0x58025494
 80098dc:	1600963f 	.word	0x1600963f
 80098e0:	58025940 	.word	0x58025940
 80098e4:	1000823f 	.word	0x1000823f
 80098e8:	40020940 	.word	0x40020940

080098ec <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b098      	sub	sp, #96	@ 0x60
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80098f4:	4a84      	ldr	r2, [pc, #528]	@ (8009b08 <HAL_FDCAN_Init+0x21c>)
 80098f6:	f107 030c 	add.w	r3, r7, #12
 80098fa:	4611      	mov	r1, r2
 80098fc:	224c      	movs	r2, #76	@ 0x4c
 80098fe:	4618      	mov	r0, r3
 8009900:	f00e fa1b 	bl	8017d3a <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d101      	bne.n	800990e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	e1c6      	b.n	8009c9c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a7e      	ldr	r2, [pc, #504]	@ (8009b0c <HAL_FDCAN_Init+0x220>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d106      	bne.n	8009926 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8009920:	461a      	mov	r2, r3
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800992c:	b2db      	uxtb	r3, r3
 800992e:	2b00      	cmp	r3, #0
 8009930:	d106      	bne.n	8009940 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2200      	movs	r2, #0
 8009936:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f7f8 fac8 	bl	8001ed0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	699a      	ldr	r2, [r3, #24]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f022 0210 	bic.w	r2, r2, #16
 800994e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009950:	f7fc ff5a 	bl	8006808 <HAL_GetTick>
 8009954:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8009956:	e014      	b.n	8009982 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8009958:	f7fc ff56 	bl	8006808 <HAL_GetTick>
 800995c:	4602      	mov	r2, r0
 800995e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009960:	1ad3      	subs	r3, r2, r3
 8009962:	2b0a      	cmp	r3, #10
 8009964:	d90d      	bls.n	8009982 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800996c:	f043 0201 	orr.w	r2, r3, #1
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2203      	movs	r2, #3
 800997a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	e18c      	b.n	8009c9c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	699b      	ldr	r3, [r3, #24]
 8009988:	f003 0308 	and.w	r3, r3, #8
 800998c:	2b08      	cmp	r3, #8
 800998e:	d0e3      	beq.n	8009958 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	699a      	ldr	r2, [r3, #24]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f042 0201 	orr.w	r2, r2, #1
 800999e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80099a0:	f7fc ff32 	bl	8006808 <HAL_GetTick>
 80099a4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80099a6:	e014      	b.n	80099d2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80099a8:	f7fc ff2e 	bl	8006808 <HAL_GetTick>
 80099ac:	4602      	mov	r2, r0
 80099ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80099b0:	1ad3      	subs	r3, r2, r3
 80099b2:	2b0a      	cmp	r3, #10
 80099b4:	d90d      	bls.n	80099d2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80099bc:	f043 0201 	orr.w	r2, r3, #1
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2203      	movs	r2, #3
 80099ca:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80099ce:	2301      	movs	r3, #1
 80099d0:	e164      	b.n	8009c9c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	699b      	ldr	r3, [r3, #24]
 80099d8:	f003 0301 	and.w	r3, r3, #1
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d0e3      	beq.n	80099a8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	699a      	ldr	r2, [r3, #24]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f042 0202 	orr.w	r2, r2, #2
 80099ee:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	7c1b      	ldrb	r3, [r3, #16]
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d108      	bne.n	8009a0a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	699a      	ldr	r2, [r3, #24]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a06:	619a      	str	r2, [r3, #24]
 8009a08:	e007      	b.n	8009a1a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	699a      	ldr	r2, [r3, #24]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009a18:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	7c5b      	ldrb	r3, [r3, #17]
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	d108      	bne.n	8009a34 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	699a      	ldr	r2, [r3, #24]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009a30:	619a      	str	r2, [r3, #24]
 8009a32:	e007      	b.n	8009a44 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	699a      	ldr	r2, [r3, #24]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009a42:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	7c9b      	ldrb	r3, [r3, #18]
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d108      	bne.n	8009a5e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	699a      	ldr	r2, [r3, #24]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009a5a:	619a      	str	r2, [r3, #24]
 8009a5c:	e007      	b.n	8009a6e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	699a      	ldr	r2, [r3, #24]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009a6c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	699b      	ldr	r3, [r3, #24]
 8009a74:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	689a      	ldr	r2, [r3, #8]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	430a      	orrs	r2, r1
 8009a82:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	699a      	ldr	r2, [r3, #24]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8009a92:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	691a      	ldr	r2, [r3, #16]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f022 0210 	bic.w	r2, r2, #16
 8009aa2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	68db      	ldr	r3, [r3, #12]
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d108      	bne.n	8009abe <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	699a      	ldr	r2, [r3, #24]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f042 0204 	orr.w	r2, r2, #4
 8009aba:	619a      	str	r2, [r3, #24]
 8009abc:	e030      	b.n	8009b20 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	68db      	ldr	r3, [r3, #12]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d02c      	beq.n	8009b20 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	2b02      	cmp	r3, #2
 8009acc:	d020      	beq.n	8009b10 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	699a      	ldr	r2, [r3, #24]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009adc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	691a      	ldr	r2, [r3, #16]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f042 0210 	orr.w	r2, r2, #16
 8009aec:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	68db      	ldr	r3, [r3, #12]
 8009af2:	2b03      	cmp	r3, #3
 8009af4:	d114      	bne.n	8009b20 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	699a      	ldr	r2, [r3, #24]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f042 0220 	orr.w	r2, r2, #32
 8009b04:	619a      	str	r2, [r3, #24]
 8009b06:	e00b      	b.n	8009b20 <HAL_FDCAN_Init+0x234>
 8009b08:	08019d00 	.word	0x08019d00
 8009b0c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	699a      	ldr	r2, [r3, #24]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f042 0220 	orr.w	r2, r2, #32
 8009b1e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	699b      	ldr	r3, [r3, #24]
 8009b24:	3b01      	subs	r3, #1
 8009b26:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	69db      	ldr	r3, [r3, #28]
 8009b2c:	3b01      	subs	r3, #1
 8009b2e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009b30:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6a1b      	ldr	r3, [r3, #32]
 8009b36:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8009b38:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	695b      	ldr	r3, [r3, #20]
 8009b40:	3b01      	subs	r3, #1
 8009b42:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8009b48:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009b4a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b54:	d115      	bne.n	8009b82 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b5a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b60:	3b01      	subs	r3, #1
 8009b62:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8009b64:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b6a:	3b01      	subs	r3, #1
 8009b6c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8009b6e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b76:	3b01      	subs	r3, #1
 8009b78:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8009b7e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8009b80:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d00a      	beq.n	8009ba0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	430a      	orrs	r2, r1
 8009b9c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ba8:	4413      	add	r3, r2
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d011      	beq.n	8009bd2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8009bb6:	f023 0107 	bic.w	r1, r3, #7
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	3360      	adds	r3, #96	@ 0x60
 8009bc2:	443b      	add	r3, r7
 8009bc4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	430a      	orrs	r2, r1
 8009bce:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d011      	beq.n	8009bfe <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009be2:	f023 0107 	bic.w	r1, r3, #7
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	3360      	adds	r3, #96	@ 0x60
 8009bee:	443b      	add	r3, r7
 8009bf0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	430a      	orrs	r2, r1
 8009bfa:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d012      	beq.n	8009c2c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009c0e:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	3360      	adds	r3, #96	@ 0x60
 8009c1a:	443b      	add	r3, r7
 8009c1c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8009c20:	011a      	lsls	r2, r3, #4
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	430a      	orrs	r2, r1
 8009c28:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d012      	beq.n	8009c5a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009c3c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	3360      	adds	r3, #96	@ 0x60
 8009c48:	443b      	add	r3, r7
 8009c4a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8009c4e:	021a      	lsls	r2, r3, #8
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	430a      	orrs	r2, r1
 8009c56:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4a11      	ldr	r2, [pc, #68]	@ (8009ca4 <HAL_FDCAN_Init+0x3b8>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d107      	bne.n	8009c74 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	689a      	ldr	r2, [r3, #8]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	f022 0203 	bic.w	r2, r2, #3
 8009c72:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2201      	movs	r2, #1
 8009c88:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f000 f80b 	bl	8009ca8 <FDCAN_CalcultateRamBlockAddresses>
 8009c92:	4603      	mov	r3, r0
 8009c94:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8009c98:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3760      	adds	r7, #96	@ 0x60
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	4000a000 	.word	0x4000a000

08009ca8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b085      	sub	sp, #20
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cb4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8009cbe:	4ba7      	ldr	r3, [pc, #668]	@ (8009f5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009cc0:	4013      	ands	r3, r2
 8009cc2:	68ba      	ldr	r2, [r7, #8]
 8009cc4:	0091      	lsls	r1, r2, #2
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	6812      	ldr	r2, [r2, #0]
 8009cca:	430b      	orrs	r3, r1
 8009ccc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cd8:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ce0:	041a      	lsls	r2, r3, #16
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	430a      	orrs	r2, r1
 8009ce8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cf0:	68ba      	ldr	r2, [r7, #8]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8009cfe:	4b97      	ldr	r3, [pc, #604]	@ (8009f5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009d00:	4013      	ands	r3, r2
 8009d02:	68ba      	ldr	r2, [r7, #8]
 8009d04:	0091      	lsls	r1, r2, #2
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	6812      	ldr	r2, [r2, #0]
 8009d0a:	430b      	orrs	r3, r1
 8009d0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d18:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d20:	041a      	lsls	r2, r3, #16
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	430a      	orrs	r2, r1
 8009d28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d30:	005b      	lsls	r3, r3, #1
 8009d32:	68ba      	ldr	r2, [r7, #8]
 8009d34:	4413      	add	r3, r2
 8009d36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8009d40:	4b86      	ldr	r3, [pc, #536]	@ (8009f5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009d42:	4013      	ands	r3, r2
 8009d44:	68ba      	ldr	r2, [r7, #8]
 8009d46:	0091      	lsls	r1, r2, #2
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	6812      	ldr	r2, [r2, #0]
 8009d4c:	430b      	orrs	r3, r1
 8009d4e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009d5a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d62:	041a      	lsls	r2, r3, #16
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	430a      	orrs	r2, r1
 8009d6a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8009d76:	fb02 f303 	mul.w	r3, r2, r3
 8009d7a:	68ba      	ldr	r2, [r7, #8]
 8009d7c:	4413      	add	r3, r2
 8009d7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8009d88:	4b74      	ldr	r3, [pc, #464]	@ (8009f5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009d8a:	4013      	ands	r3, r2
 8009d8c:	68ba      	ldr	r2, [r7, #8]
 8009d8e:	0091      	lsls	r1, r2, #2
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	6812      	ldr	r2, [r2, #0]
 8009d94:	430b      	orrs	r3, r1
 8009d96:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009da2:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009daa:	041a      	lsls	r2, r3, #16
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	430a      	orrs	r2, r1
 8009db2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009dbe:	fb02 f303 	mul.w	r3, r2, r3
 8009dc2:	68ba      	ldr	r2, [r7, #8]
 8009dc4:	4413      	add	r3, r2
 8009dc6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8009dd0:	4b62      	ldr	r3, [pc, #392]	@ (8009f5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009dd2:	4013      	ands	r3, r2
 8009dd4:	68ba      	ldr	r2, [r7, #8]
 8009dd6:	0091      	lsls	r1, r2, #2
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	6812      	ldr	r2, [r2, #0]
 8009ddc:	430b      	orrs	r3, r1
 8009dde:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009dea:	fb02 f303 	mul.w	r3, r2, r3
 8009dee:	68ba      	ldr	r2, [r7, #8]
 8009df0:	4413      	add	r3, r2
 8009df2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8009dfc:	4b57      	ldr	r3, [pc, #348]	@ (8009f5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009dfe:	4013      	ands	r3, r2
 8009e00:	68ba      	ldr	r2, [r7, #8]
 8009e02:	0091      	lsls	r1, r2, #2
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	6812      	ldr	r2, [r2, #0]
 8009e08:	430b      	orrs	r3, r1
 8009e0a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e16:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e1e:	041a      	lsls	r2, r3, #16
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	430a      	orrs	r2, r1
 8009e26:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e2e:	005b      	lsls	r3, r3, #1
 8009e30:	68ba      	ldr	r2, [r7, #8]
 8009e32:	4413      	add	r3, r2
 8009e34:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8009e3e:	4b47      	ldr	r3, [pc, #284]	@ (8009f5c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009e40:	4013      	ands	r3, r2
 8009e42:	68ba      	ldr	r2, [r7, #8]
 8009e44:	0091      	lsls	r1, r2, #2
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	6812      	ldr	r2, [r2, #0]
 8009e4a:	430b      	orrs	r3, r1
 8009e4c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009e58:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e60:	041a      	lsls	r2, r3, #16
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	430a      	orrs	r2, r1
 8009e68:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009e74:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e7c:	061a      	lsls	r2, r3, #24
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	430a      	orrs	r2, r1
 8009e84:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e8c:	4b34      	ldr	r3, [pc, #208]	@ (8009f60 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8009e8e:	4413      	add	r3, r2
 8009e90:	009a      	lsls	r2, r3, #2
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	441a      	add	r2, r3
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009eae:	00db      	lsls	r3, r3, #3
 8009eb0:	441a      	add	r2, r3
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ebe:	6879      	ldr	r1, [r7, #4]
 8009ec0:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8009ec2:	fb01 f303 	mul.w	r3, r1, r3
 8009ec6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8009ec8:	441a      	add	r2, r3
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ed6:	6879      	ldr	r1, [r7, #4]
 8009ed8:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8009eda:	fb01 f303 	mul.w	r3, r1, r3
 8009ede:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8009ee0:	441a      	add	r2, r3
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009eee:	6879      	ldr	r1, [r7, #4]
 8009ef0:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8009ef2:	fb01 f303 	mul.w	r3, r1, r3
 8009ef6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8009ef8:	441a      	add	r2, r3
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f0a:	00db      	lsls	r3, r3, #3
 8009f0c:	441a      	add	r2, r3
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f1e:	6879      	ldr	r1, [r7, #4]
 8009f20:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8009f22:	fb01 f303 	mul.w	r3, r1, r3
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	441a      	add	r2, r3
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f3a:	6879      	ldr	r1, [r7, #4]
 8009f3c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8009f3e:	fb01 f303 	mul.w	r3, r1, r3
 8009f42:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8009f44:	441a      	add	r2, r3
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f52:	4a04      	ldr	r2, [pc, #16]	@ (8009f64 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d915      	bls.n	8009f84 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8009f58:	e006      	b.n	8009f68 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8009f5a:	bf00      	nop
 8009f5c:	ffff0003 	.word	0xffff0003
 8009f60:	10002b00 	.word	0x10002b00
 8009f64:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009f6e:	f043 0220 	orr.w	r2, r3, #32
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2203      	movs	r2, #3
 8009f7c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8009f80:	2301      	movs	r3, #1
 8009f82:	e010      	b.n	8009fa6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f88:	60fb      	str	r3, [r7, #12]
 8009f8a:	e005      	b.n	8009f98 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	3304      	adds	r3, #4
 8009f96:	60fb      	str	r3, [r7, #12]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f9e:	68fa      	ldr	r2, [r7, #12]
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d3f3      	bcc.n	8009f8c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009fa4:	2300      	movs	r3, #0
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3714      	adds	r7, #20
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop

08009fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b089      	sub	sp, #36	@ 0x24
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009fc2:	4b89      	ldr	r3, [pc, #548]	@ (800a1e8 <HAL_GPIO_Init+0x234>)
 8009fc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009fc6:	e194      	b.n	800a2f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	2101      	movs	r1, #1
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8009fd4:	4013      	ands	r3, r2
 8009fd6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	f000 8186 	beq.w	800a2ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	f003 0303 	and.w	r3, r3, #3
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	d005      	beq.n	8009ff8 <HAL_GPIO_Init+0x44>
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	f003 0303 	and.w	r3, r3, #3
 8009ff4:	2b02      	cmp	r3, #2
 8009ff6:	d130      	bne.n	800a05a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009ffe:	69fb      	ldr	r3, [r7, #28]
 800a000:	005b      	lsls	r3, r3, #1
 800a002:	2203      	movs	r2, #3
 800a004:	fa02 f303 	lsl.w	r3, r2, r3
 800a008:	43db      	mvns	r3, r3
 800a00a:	69ba      	ldr	r2, [r7, #24]
 800a00c:	4013      	ands	r3, r2
 800a00e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	68da      	ldr	r2, [r3, #12]
 800a014:	69fb      	ldr	r3, [r7, #28]
 800a016:	005b      	lsls	r3, r3, #1
 800a018:	fa02 f303 	lsl.w	r3, r2, r3
 800a01c:	69ba      	ldr	r2, [r7, #24]
 800a01e:	4313      	orrs	r3, r2
 800a020:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	69ba      	ldr	r2, [r7, #24]
 800a026:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a02e:	2201      	movs	r2, #1
 800a030:	69fb      	ldr	r3, [r7, #28]
 800a032:	fa02 f303 	lsl.w	r3, r2, r3
 800a036:	43db      	mvns	r3, r3
 800a038:	69ba      	ldr	r2, [r7, #24]
 800a03a:	4013      	ands	r3, r2
 800a03c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	091b      	lsrs	r3, r3, #4
 800a044:	f003 0201 	and.w	r2, r3, #1
 800a048:	69fb      	ldr	r3, [r7, #28]
 800a04a:	fa02 f303 	lsl.w	r3, r2, r3
 800a04e:	69ba      	ldr	r2, [r7, #24]
 800a050:	4313      	orrs	r3, r2
 800a052:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	69ba      	ldr	r2, [r7, #24]
 800a058:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	f003 0303 	and.w	r3, r3, #3
 800a062:	2b03      	cmp	r3, #3
 800a064:	d017      	beq.n	800a096 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	005b      	lsls	r3, r3, #1
 800a070:	2203      	movs	r2, #3
 800a072:	fa02 f303 	lsl.w	r3, r2, r3
 800a076:	43db      	mvns	r3, r3
 800a078:	69ba      	ldr	r2, [r7, #24]
 800a07a:	4013      	ands	r3, r2
 800a07c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	689a      	ldr	r2, [r3, #8]
 800a082:	69fb      	ldr	r3, [r7, #28]
 800a084:	005b      	lsls	r3, r3, #1
 800a086:	fa02 f303 	lsl.w	r3, r2, r3
 800a08a:	69ba      	ldr	r2, [r7, #24]
 800a08c:	4313      	orrs	r3, r2
 800a08e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	69ba      	ldr	r2, [r7, #24]
 800a094:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	f003 0303 	and.w	r3, r3, #3
 800a09e:	2b02      	cmp	r3, #2
 800a0a0:	d123      	bne.n	800a0ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a0a2:	69fb      	ldr	r3, [r7, #28]
 800a0a4:	08da      	lsrs	r2, r3, #3
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	3208      	adds	r2, #8
 800a0aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a0b0:	69fb      	ldr	r3, [r7, #28]
 800a0b2:	f003 0307 	and.w	r3, r3, #7
 800a0b6:	009b      	lsls	r3, r3, #2
 800a0b8:	220f      	movs	r2, #15
 800a0ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a0be:	43db      	mvns	r3, r3
 800a0c0:	69ba      	ldr	r2, [r7, #24]
 800a0c2:	4013      	ands	r3, r2
 800a0c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	691a      	ldr	r2, [r3, #16]
 800a0ca:	69fb      	ldr	r3, [r7, #28]
 800a0cc:	f003 0307 	and.w	r3, r3, #7
 800a0d0:	009b      	lsls	r3, r3, #2
 800a0d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a0d6:	69ba      	ldr	r2, [r7, #24]
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a0dc:	69fb      	ldr	r3, [r7, #28]
 800a0de:	08da      	lsrs	r2, r3, #3
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	3208      	adds	r2, #8
 800a0e4:	69b9      	ldr	r1, [r7, #24]
 800a0e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a0f0:	69fb      	ldr	r3, [r7, #28]
 800a0f2:	005b      	lsls	r3, r3, #1
 800a0f4:	2203      	movs	r2, #3
 800a0f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a0fa:	43db      	mvns	r3, r3
 800a0fc:	69ba      	ldr	r2, [r7, #24]
 800a0fe:	4013      	ands	r3, r2
 800a100:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	f003 0203 	and.w	r2, r3, #3
 800a10a:	69fb      	ldr	r3, [r7, #28]
 800a10c:	005b      	lsls	r3, r3, #1
 800a10e:	fa02 f303 	lsl.w	r3, r2, r3
 800a112:	69ba      	ldr	r2, [r7, #24]
 800a114:	4313      	orrs	r3, r2
 800a116:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	69ba      	ldr	r2, [r7, #24]
 800a11c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a126:	2b00      	cmp	r3, #0
 800a128:	f000 80e0 	beq.w	800a2ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a12c:	4b2f      	ldr	r3, [pc, #188]	@ (800a1ec <HAL_GPIO_Init+0x238>)
 800a12e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800a132:	4a2e      	ldr	r2, [pc, #184]	@ (800a1ec <HAL_GPIO_Init+0x238>)
 800a134:	f043 0302 	orr.w	r3, r3, #2
 800a138:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800a13c:	4b2b      	ldr	r3, [pc, #172]	@ (800a1ec <HAL_GPIO_Init+0x238>)
 800a13e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800a142:	f003 0302 	and.w	r3, r3, #2
 800a146:	60fb      	str	r3, [r7, #12]
 800a148:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a14a:	4a29      	ldr	r2, [pc, #164]	@ (800a1f0 <HAL_GPIO_Init+0x23c>)
 800a14c:	69fb      	ldr	r3, [r7, #28]
 800a14e:	089b      	lsrs	r3, r3, #2
 800a150:	3302      	adds	r3, #2
 800a152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a156:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a158:	69fb      	ldr	r3, [r7, #28]
 800a15a:	f003 0303 	and.w	r3, r3, #3
 800a15e:	009b      	lsls	r3, r3, #2
 800a160:	220f      	movs	r2, #15
 800a162:	fa02 f303 	lsl.w	r3, r2, r3
 800a166:	43db      	mvns	r3, r3
 800a168:	69ba      	ldr	r2, [r7, #24]
 800a16a:	4013      	ands	r3, r2
 800a16c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	4a20      	ldr	r2, [pc, #128]	@ (800a1f4 <HAL_GPIO_Init+0x240>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d052      	beq.n	800a21c <HAL_GPIO_Init+0x268>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	4a1f      	ldr	r2, [pc, #124]	@ (800a1f8 <HAL_GPIO_Init+0x244>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d031      	beq.n	800a1e2 <HAL_GPIO_Init+0x22e>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	4a1e      	ldr	r2, [pc, #120]	@ (800a1fc <HAL_GPIO_Init+0x248>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d02b      	beq.n	800a1de <HAL_GPIO_Init+0x22a>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	4a1d      	ldr	r2, [pc, #116]	@ (800a200 <HAL_GPIO_Init+0x24c>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d025      	beq.n	800a1da <HAL_GPIO_Init+0x226>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	4a1c      	ldr	r2, [pc, #112]	@ (800a204 <HAL_GPIO_Init+0x250>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d01f      	beq.n	800a1d6 <HAL_GPIO_Init+0x222>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	4a1b      	ldr	r2, [pc, #108]	@ (800a208 <HAL_GPIO_Init+0x254>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d019      	beq.n	800a1d2 <HAL_GPIO_Init+0x21e>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	4a1a      	ldr	r2, [pc, #104]	@ (800a20c <HAL_GPIO_Init+0x258>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d013      	beq.n	800a1ce <HAL_GPIO_Init+0x21a>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	4a19      	ldr	r2, [pc, #100]	@ (800a210 <HAL_GPIO_Init+0x25c>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d00d      	beq.n	800a1ca <HAL_GPIO_Init+0x216>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4a18      	ldr	r2, [pc, #96]	@ (800a214 <HAL_GPIO_Init+0x260>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d007      	beq.n	800a1c6 <HAL_GPIO_Init+0x212>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	4a17      	ldr	r2, [pc, #92]	@ (800a218 <HAL_GPIO_Init+0x264>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d101      	bne.n	800a1c2 <HAL_GPIO_Init+0x20e>
 800a1be:	2309      	movs	r3, #9
 800a1c0:	e02d      	b.n	800a21e <HAL_GPIO_Init+0x26a>
 800a1c2:	230a      	movs	r3, #10
 800a1c4:	e02b      	b.n	800a21e <HAL_GPIO_Init+0x26a>
 800a1c6:	2308      	movs	r3, #8
 800a1c8:	e029      	b.n	800a21e <HAL_GPIO_Init+0x26a>
 800a1ca:	2307      	movs	r3, #7
 800a1cc:	e027      	b.n	800a21e <HAL_GPIO_Init+0x26a>
 800a1ce:	2306      	movs	r3, #6
 800a1d0:	e025      	b.n	800a21e <HAL_GPIO_Init+0x26a>
 800a1d2:	2305      	movs	r3, #5
 800a1d4:	e023      	b.n	800a21e <HAL_GPIO_Init+0x26a>
 800a1d6:	2304      	movs	r3, #4
 800a1d8:	e021      	b.n	800a21e <HAL_GPIO_Init+0x26a>
 800a1da:	2303      	movs	r3, #3
 800a1dc:	e01f      	b.n	800a21e <HAL_GPIO_Init+0x26a>
 800a1de:	2302      	movs	r3, #2
 800a1e0:	e01d      	b.n	800a21e <HAL_GPIO_Init+0x26a>
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	e01b      	b.n	800a21e <HAL_GPIO_Init+0x26a>
 800a1e6:	bf00      	nop
 800a1e8:	58000080 	.word	0x58000080
 800a1ec:	58024400 	.word	0x58024400
 800a1f0:	58000400 	.word	0x58000400
 800a1f4:	58020000 	.word	0x58020000
 800a1f8:	58020400 	.word	0x58020400
 800a1fc:	58020800 	.word	0x58020800
 800a200:	58020c00 	.word	0x58020c00
 800a204:	58021000 	.word	0x58021000
 800a208:	58021400 	.word	0x58021400
 800a20c:	58021800 	.word	0x58021800
 800a210:	58021c00 	.word	0x58021c00
 800a214:	58022000 	.word	0x58022000
 800a218:	58022400 	.word	0x58022400
 800a21c:	2300      	movs	r3, #0
 800a21e:	69fa      	ldr	r2, [r7, #28]
 800a220:	f002 0203 	and.w	r2, r2, #3
 800a224:	0092      	lsls	r2, r2, #2
 800a226:	4093      	lsls	r3, r2
 800a228:	69ba      	ldr	r2, [r7, #24]
 800a22a:	4313      	orrs	r3, r2
 800a22c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a22e:	4938      	ldr	r1, [pc, #224]	@ (800a310 <HAL_GPIO_Init+0x35c>)
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	089b      	lsrs	r3, r3, #2
 800a234:	3302      	adds	r3, #2
 800a236:	69ba      	ldr	r2, [r7, #24]
 800a238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a23c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	43db      	mvns	r3, r3
 800a248:	69ba      	ldr	r2, [r7, #24]
 800a24a:	4013      	ands	r3, r2
 800a24c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a256:	2b00      	cmp	r3, #0
 800a258:	d003      	beq.n	800a262 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800a25a:	69ba      	ldr	r2, [r7, #24]
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	4313      	orrs	r3, r2
 800a260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a262:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a266:	69bb      	ldr	r3, [r7, #24]
 800a268:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a26a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	43db      	mvns	r3, r3
 800a276:	69ba      	ldr	r2, [r7, #24]
 800a278:	4013      	ands	r3, r2
 800a27a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a284:	2b00      	cmp	r3, #0
 800a286:	d003      	beq.n	800a290 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800a288:	69ba      	ldr	r2, [r7, #24]
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	4313      	orrs	r3, r2
 800a28e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a290:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a294:	69bb      	ldr	r3, [r7, #24]
 800a296:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	43db      	mvns	r3, r3
 800a2a2:	69ba      	ldr	r2, [r7, #24]
 800a2a4:	4013      	ands	r3, r2
 800a2a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d003      	beq.n	800a2bc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800a2b4:	69ba      	ldr	r2, [r7, #24]
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	69ba      	ldr	r2, [r7, #24]
 800a2c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	43db      	mvns	r3, r3
 800a2cc:	69ba      	ldr	r2, [r7, #24]
 800a2ce:	4013      	ands	r3, r2
 800a2d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d003      	beq.n	800a2e6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800a2de:	69ba      	ldr	r2, [r7, #24]
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	69ba      	ldr	r2, [r7, #24]
 800a2ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a2ec:	69fb      	ldr	r3, [r7, #28]
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	fa22 f303 	lsr.w	r3, r2, r3
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	f47f ae63 	bne.w	8009fc8 <HAL_GPIO_Init+0x14>
  }
}
 800a302:	bf00      	nop
 800a304:	bf00      	nop
 800a306:	3724      	adds	r7, #36	@ 0x24
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr
 800a310:	58000400 	.word	0x58000400

0800a314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a314:	b480      	push	{r7}
 800a316:	b083      	sub	sp, #12
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	460b      	mov	r3, r1
 800a31e:	807b      	strh	r3, [r7, #2]
 800a320:	4613      	mov	r3, r2
 800a322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a324:	787b      	ldrb	r3, [r7, #1]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d003      	beq.n	800a332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a32a:	887a      	ldrh	r2, [r7, #2]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a330:	e003      	b.n	800a33a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a332:	887b      	ldrh	r3, [r7, #2]
 800a334:	041a      	lsls	r2, r3, #16
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	619a      	str	r2, [r3, #24]
}
 800a33a:	bf00      	nop
 800a33c:	370c      	adds	r7, #12
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr
	...

0800a348 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b082      	sub	sp, #8
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d101      	bne.n	800a35a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a356:	2301      	movs	r3, #1
 800a358:	e08b      	b.n	800a472 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a360:	b2db      	uxtb	r3, r3
 800a362:	2b00      	cmp	r3, #0
 800a364:	d106      	bne.n	800a374 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2200      	movs	r2, #0
 800a36a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f7f8 f8b8 	bl	80024e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2224      	movs	r2, #36	@ 0x24
 800a378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f022 0201 	bic.w	r2, r2, #1
 800a38a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	685a      	ldr	r2, [r3, #4]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a398:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	689a      	ldr	r2, [r3, #8]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a3a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	68db      	ldr	r3, [r3, #12]
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d107      	bne.n	800a3c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	689a      	ldr	r2, [r3, #8]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a3be:	609a      	str	r2, [r3, #8]
 800a3c0:	e006      	b.n	800a3d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	689a      	ldr	r2, [r3, #8]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800a3ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	68db      	ldr	r3, [r3, #12]
 800a3d4:	2b02      	cmp	r3, #2
 800a3d6:	d108      	bne.n	800a3ea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	685a      	ldr	r2, [r3, #4]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a3e6:	605a      	str	r2, [r3, #4]
 800a3e8:	e007      	b.n	800a3fa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	685a      	ldr	r2, [r3, #4]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a3f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	6859      	ldr	r1, [r3, #4]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	4b1d      	ldr	r3, [pc, #116]	@ (800a47c <HAL_I2C_Init+0x134>)
 800a406:	430b      	orrs	r3, r1
 800a408:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	68da      	ldr	r2, [r3, #12]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a418:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	691a      	ldr	r2, [r3, #16]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	695b      	ldr	r3, [r3, #20]
 800a422:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	699b      	ldr	r3, [r3, #24]
 800a42a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	430a      	orrs	r2, r1
 800a432:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	69d9      	ldr	r1, [r3, #28]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6a1a      	ldr	r2, [r3, #32]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	430a      	orrs	r2, r1
 800a442:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f042 0201 	orr.w	r2, r2, #1
 800a452:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2200      	movs	r2, #0
 800a458:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2220      	movs	r2, #32
 800a45e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2200      	movs	r2, #0
 800a466:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2200      	movs	r2, #0
 800a46c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800a470:	2300      	movs	r3, #0
}
 800a472:	4618      	mov	r0, r3
 800a474:	3708      	adds	r7, #8
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop
 800a47c:	02008000 	.word	0x02008000

0800a480 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a480:	b480      	push	{r7}
 800a482:	b083      	sub	sp, #12
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a490:	b2db      	uxtb	r3, r3
 800a492:	2b20      	cmp	r3, #32
 800a494:	d138      	bne.n	800a508 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d101      	bne.n	800a4a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a4a0:	2302      	movs	r3, #2
 800a4a2:	e032      	b.n	800a50a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2224      	movs	r2, #36	@ 0x24
 800a4b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f022 0201 	bic.w	r2, r2, #1
 800a4c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a4d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	6819      	ldr	r1, [r3, #0]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	683a      	ldr	r2, [r7, #0]
 800a4e0:	430a      	orrs	r2, r1
 800a4e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f042 0201 	orr.w	r2, r2, #1
 800a4f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2220      	movs	r2, #32
 800a4f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2200      	movs	r2, #0
 800a500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a504:	2300      	movs	r3, #0
 800a506:	e000      	b.n	800a50a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a508:	2302      	movs	r3, #2
  }
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	370c      	adds	r7, #12
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr

0800a516 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a516:	b480      	push	{r7}
 800a518:	b085      	sub	sp, #20
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
 800a51e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a526:	b2db      	uxtb	r3, r3
 800a528:	2b20      	cmp	r3, #32
 800a52a:	d139      	bne.n	800a5a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a532:	2b01      	cmp	r3, #1
 800a534:	d101      	bne.n	800a53a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a536:	2302      	movs	r3, #2
 800a538:	e033      	b.n	800a5a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2201      	movs	r2, #1
 800a53e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2224      	movs	r2, #36	@ 0x24
 800a546:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f022 0201 	bic.w	r2, r2, #1
 800a558:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a568:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	021b      	lsls	r3, r3, #8
 800a56e:	68fa      	ldr	r2, [r7, #12]
 800a570:	4313      	orrs	r3, r2
 800a572:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	68fa      	ldr	r2, [r7, #12]
 800a57a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	681a      	ldr	r2, [r3, #0]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f042 0201 	orr.w	r2, r2, #1
 800a58a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2220      	movs	r2, #32
 800a590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2200      	movs	r2, #0
 800a598:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a59c:	2300      	movs	r3, #0
 800a59e:	e000      	b.n	800a5a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a5a0:	2302      	movs	r3, #2
  }
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3714      	adds	r7, #20
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr
	...

0800a5b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b084      	sub	sp, #16
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a5b8:	4b19      	ldr	r3, [pc, #100]	@ (800a620 <HAL_PWREx_ConfigSupply+0x70>)
 800a5ba:	68db      	ldr	r3, [r3, #12]
 800a5bc:	f003 0304 	and.w	r3, r3, #4
 800a5c0:	2b04      	cmp	r3, #4
 800a5c2:	d00a      	beq.n	800a5da <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a5c4:	4b16      	ldr	r3, [pc, #88]	@ (800a620 <HAL_PWREx_ConfigSupply+0x70>)
 800a5c6:	68db      	ldr	r3, [r3, #12]
 800a5c8:	f003 0307 	and.w	r3, r3, #7
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d001      	beq.n	800a5d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	e01f      	b.n	800a616 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	e01d      	b.n	800a616 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a5da:	4b11      	ldr	r3, [pc, #68]	@ (800a620 <HAL_PWREx_ConfigSupply+0x70>)
 800a5dc:	68db      	ldr	r3, [r3, #12]
 800a5de:	f023 0207 	bic.w	r2, r3, #7
 800a5e2:	490f      	ldr	r1, [pc, #60]	@ (800a620 <HAL_PWREx_ConfigSupply+0x70>)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a5ea:	f7fc f90d 	bl	8006808 <HAL_GetTick>
 800a5ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a5f0:	e009      	b.n	800a606 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a5f2:	f7fc f909 	bl	8006808 <HAL_GetTick>
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	1ad3      	subs	r3, r2, r3
 800a5fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a600:	d901      	bls.n	800a606 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a602:	2301      	movs	r3, #1
 800a604:	e007      	b.n	800a616 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a606:	4b06      	ldr	r3, [pc, #24]	@ (800a620 <HAL_PWREx_ConfigSupply+0x70>)
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a60e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a612:	d1ee      	bne.n	800a5f2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a614:	2300      	movs	r3, #0
}
 800a616:	4618      	mov	r0, r3
 800a618:	3710      	adds	r7, #16
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop
 800a620:	58024800 	.word	0x58024800

0800a624 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b08c      	sub	sp, #48	@ 0x30
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d102      	bne.n	800a638 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a632:	2301      	movs	r3, #1
 800a634:	f000 bc1f 	b.w	800ae76 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f003 0301 	and.w	r3, r3, #1
 800a640:	2b00      	cmp	r3, #0
 800a642:	f000 80b3 	beq.w	800a7ac <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a646:	4b95      	ldr	r3, [pc, #596]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a648:	691b      	ldr	r3, [r3, #16]
 800a64a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a64e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a650:	4b92      	ldr	r3, [pc, #584]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a654:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a658:	2b10      	cmp	r3, #16
 800a65a:	d007      	beq.n	800a66c <HAL_RCC_OscConfig+0x48>
 800a65c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a65e:	2b18      	cmp	r3, #24
 800a660:	d112      	bne.n	800a688 <HAL_RCC_OscConfig+0x64>
 800a662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a664:	f003 0303 	and.w	r3, r3, #3
 800a668:	2b02      	cmp	r3, #2
 800a66a:	d10d      	bne.n	800a688 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a66c:	4b8b      	ldr	r3, [pc, #556]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a674:	2b00      	cmp	r3, #0
 800a676:	f000 8098 	beq.w	800a7aa <HAL_RCC_OscConfig+0x186>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	f040 8093 	bne.w	800a7aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a684:	2301      	movs	r3, #1
 800a686:	e3f6      	b.n	800ae76 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a690:	d106      	bne.n	800a6a0 <HAL_RCC_OscConfig+0x7c>
 800a692:	4b82      	ldr	r3, [pc, #520]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4a81      	ldr	r2, [pc, #516]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a69c:	6013      	str	r3, [r2, #0]
 800a69e:	e058      	b.n	800a752 <HAL_RCC_OscConfig+0x12e>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d112      	bne.n	800a6ce <HAL_RCC_OscConfig+0xaa>
 800a6a8:	4b7c      	ldr	r3, [pc, #496]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4a7b      	ldr	r2, [pc, #492]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a6ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a6b2:	6013      	str	r3, [r2, #0]
 800a6b4:	4b79      	ldr	r3, [pc, #484]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a78      	ldr	r2, [pc, #480]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a6ba:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a6be:	6013      	str	r3, [r2, #0]
 800a6c0:	4b76      	ldr	r3, [pc, #472]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4a75      	ldr	r2, [pc, #468]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a6c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a6ca:	6013      	str	r3, [r2, #0]
 800a6cc:	e041      	b.n	800a752 <HAL_RCC_OscConfig+0x12e>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a6d6:	d112      	bne.n	800a6fe <HAL_RCC_OscConfig+0xda>
 800a6d8:	4b70      	ldr	r3, [pc, #448]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a6f      	ldr	r2, [pc, #444]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a6de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a6e2:	6013      	str	r3, [r2, #0]
 800a6e4:	4b6d      	ldr	r3, [pc, #436]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a6c      	ldr	r2, [pc, #432]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a6ea:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a6ee:	6013      	str	r3, [r2, #0]
 800a6f0:	4b6a      	ldr	r3, [pc, #424]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4a69      	ldr	r2, [pc, #420]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a6f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a6fa:	6013      	str	r3, [r2, #0]
 800a6fc:	e029      	b.n	800a752 <HAL_RCC_OscConfig+0x12e>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800a706:	d112      	bne.n	800a72e <HAL_RCC_OscConfig+0x10a>
 800a708:	4b64      	ldr	r3, [pc, #400]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4a63      	ldr	r2, [pc, #396]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a70e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a712:	6013      	str	r3, [r2, #0]
 800a714:	4b61      	ldr	r3, [pc, #388]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a60      	ldr	r2, [pc, #384]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a71a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a71e:	6013      	str	r3, [r2, #0]
 800a720:	4b5e      	ldr	r3, [pc, #376]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a5d      	ldr	r2, [pc, #372]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a726:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a72a:	6013      	str	r3, [r2, #0]
 800a72c:	e011      	b.n	800a752 <HAL_RCC_OscConfig+0x12e>
 800a72e:	4b5b      	ldr	r3, [pc, #364]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4a5a      	ldr	r2, [pc, #360]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a734:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a738:	6013      	str	r3, [r2, #0]
 800a73a:	4b58      	ldr	r3, [pc, #352]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a57      	ldr	r2, [pc, #348]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a740:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a744:	6013      	str	r3, [r2, #0]
 800a746:	4b55      	ldr	r3, [pc, #340]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4a54      	ldr	r2, [pc, #336]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a74c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a750:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d013      	beq.n	800a782 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a75a:	f7fc f855 	bl	8006808 <HAL_GetTick>
 800a75e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a760:	e008      	b.n	800a774 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a762:	f7fc f851 	bl	8006808 <HAL_GetTick>
 800a766:	4602      	mov	r2, r0
 800a768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a76a:	1ad3      	subs	r3, r2, r3
 800a76c:	2b64      	cmp	r3, #100	@ 0x64
 800a76e:	d901      	bls.n	800a774 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800a770:	2303      	movs	r3, #3
 800a772:	e380      	b.n	800ae76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a774:	4b49      	ldr	r3, [pc, #292]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d0f0      	beq.n	800a762 <HAL_RCC_OscConfig+0x13e>
 800a780:	e014      	b.n	800a7ac <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a782:	f7fc f841 	bl	8006808 <HAL_GetTick>
 800a786:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a788:	e008      	b.n	800a79c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a78a:	f7fc f83d 	bl	8006808 <HAL_GetTick>
 800a78e:	4602      	mov	r2, r0
 800a790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a792:	1ad3      	subs	r3, r2, r3
 800a794:	2b64      	cmp	r3, #100	@ 0x64
 800a796:	d901      	bls.n	800a79c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800a798:	2303      	movs	r3, #3
 800a79a:	e36c      	b.n	800ae76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a79c:	4b3f      	ldr	r3, [pc, #252]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d1f0      	bne.n	800a78a <HAL_RCC_OscConfig+0x166>
 800a7a8:	e000      	b.n	800a7ac <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a7aa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f003 0302 	and.w	r3, r3, #2
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	f000 808c 	beq.w	800a8d2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a7ba:	4b38      	ldr	r3, [pc, #224]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a7bc:	691b      	ldr	r3, [r3, #16]
 800a7be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a7c2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a7c4:	4b35      	ldr	r3, [pc, #212]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a7c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7c8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a7ca:	6a3b      	ldr	r3, [r7, #32]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d007      	beq.n	800a7e0 <HAL_RCC_OscConfig+0x1bc>
 800a7d0:	6a3b      	ldr	r3, [r7, #32]
 800a7d2:	2b18      	cmp	r3, #24
 800a7d4:	d137      	bne.n	800a846 <HAL_RCC_OscConfig+0x222>
 800a7d6:	69fb      	ldr	r3, [r7, #28]
 800a7d8:	f003 0303 	and.w	r3, r3, #3
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d132      	bne.n	800a846 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a7e0:	4b2e      	ldr	r3, [pc, #184]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f003 0304 	and.w	r3, r3, #4
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d005      	beq.n	800a7f8 <HAL_RCC_OscConfig+0x1d4>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	68db      	ldr	r3, [r3, #12]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d101      	bne.n	800a7f8 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	e33e      	b.n	800ae76 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a7f8:	4b28      	ldr	r3, [pc, #160]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f023 0219 	bic.w	r2, r3, #25
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	68db      	ldr	r3, [r3, #12]
 800a804:	4925      	ldr	r1, [pc, #148]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a806:	4313      	orrs	r3, r2
 800a808:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a80a:	f7fb fffd 	bl	8006808 <HAL_GetTick>
 800a80e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a810:	e008      	b.n	800a824 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a812:	f7fb fff9 	bl	8006808 <HAL_GetTick>
 800a816:	4602      	mov	r2, r0
 800a818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a81a:	1ad3      	subs	r3, r2, r3
 800a81c:	2b02      	cmp	r3, #2
 800a81e:	d901      	bls.n	800a824 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800a820:	2303      	movs	r3, #3
 800a822:	e328      	b.n	800ae76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a824:	4b1d      	ldr	r3, [pc, #116]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f003 0304 	and.w	r3, r3, #4
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d0f0      	beq.n	800a812 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a830:	4b1a      	ldr	r3, [pc, #104]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	691b      	ldr	r3, [r3, #16]
 800a83c:	061b      	lsls	r3, r3, #24
 800a83e:	4917      	ldr	r1, [pc, #92]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a840:	4313      	orrs	r3, r2
 800a842:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a844:	e045      	b.n	800a8d2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	68db      	ldr	r3, [r3, #12]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d028      	beq.n	800a8a0 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a84e:	4b13      	ldr	r3, [pc, #76]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f023 0219 	bic.w	r2, r3, #25
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	4910      	ldr	r1, [pc, #64]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a85c:	4313      	orrs	r3, r2
 800a85e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a860:	f7fb ffd2 	bl	8006808 <HAL_GetTick>
 800a864:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a866:	e008      	b.n	800a87a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a868:	f7fb ffce 	bl	8006808 <HAL_GetTick>
 800a86c:	4602      	mov	r2, r0
 800a86e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a870:	1ad3      	subs	r3, r2, r3
 800a872:	2b02      	cmp	r3, #2
 800a874:	d901      	bls.n	800a87a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800a876:	2303      	movs	r3, #3
 800a878:	e2fd      	b.n	800ae76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a87a:	4b08      	ldr	r3, [pc, #32]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f003 0304 	and.w	r3, r3, #4
 800a882:	2b00      	cmp	r3, #0
 800a884:	d0f0      	beq.n	800a868 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a886:	4b05      	ldr	r3, [pc, #20]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	691b      	ldr	r3, [r3, #16]
 800a892:	061b      	lsls	r3, r3, #24
 800a894:	4901      	ldr	r1, [pc, #4]	@ (800a89c <HAL_RCC_OscConfig+0x278>)
 800a896:	4313      	orrs	r3, r2
 800a898:	604b      	str	r3, [r1, #4]
 800a89a:	e01a      	b.n	800a8d2 <HAL_RCC_OscConfig+0x2ae>
 800a89c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a8a0:	4b97      	ldr	r3, [pc, #604]	@ (800ab00 <HAL_RCC_OscConfig+0x4dc>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4a96      	ldr	r2, [pc, #600]	@ (800ab00 <HAL_RCC_OscConfig+0x4dc>)
 800a8a6:	f023 0301 	bic.w	r3, r3, #1
 800a8aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8ac:	f7fb ffac 	bl	8006808 <HAL_GetTick>
 800a8b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a8b2:	e008      	b.n	800a8c6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a8b4:	f7fb ffa8 	bl	8006808 <HAL_GetTick>
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8bc:	1ad3      	subs	r3, r2, r3
 800a8be:	2b02      	cmp	r3, #2
 800a8c0:	d901      	bls.n	800a8c6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800a8c2:	2303      	movs	r3, #3
 800a8c4:	e2d7      	b.n	800ae76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a8c6:	4b8e      	ldr	r3, [pc, #568]	@ (800ab00 <HAL_RCC_OscConfig+0x4dc>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f003 0304 	and.w	r3, r3, #4
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d1f0      	bne.n	800a8b4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f003 0310 	and.w	r3, r3, #16
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d06a      	beq.n	800a9b4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a8de:	4b88      	ldr	r3, [pc, #544]	@ (800ab00 <HAL_RCC_OscConfig+0x4dc>)
 800a8e0:	691b      	ldr	r3, [r3, #16]
 800a8e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a8e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a8e8:	4b85      	ldr	r3, [pc, #532]	@ (800ab00 <HAL_RCC_OscConfig+0x4dc>)
 800a8ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8ec:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a8ee:	69bb      	ldr	r3, [r7, #24]
 800a8f0:	2b08      	cmp	r3, #8
 800a8f2:	d007      	beq.n	800a904 <HAL_RCC_OscConfig+0x2e0>
 800a8f4:	69bb      	ldr	r3, [r7, #24]
 800a8f6:	2b18      	cmp	r3, #24
 800a8f8:	d11b      	bne.n	800a932 <HAL_RCC_OscConfig+0x30e>
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	f003 0303 	and.w	r3, r3, #3
 800a900:	2b01      	cmp	r3, #1
 800a902:	d116      	bne.n	800a932 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a904:	4b7e      	ldr	r3, [pc, #504]	@ (800ab00 <HAL_RCC_OscConfig+0x4dc>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d005      	beq.n	800a91c <HAL_RCC_OscConfig+0x2f8>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	69db      	ldr	r3, [r3, #28]
 800a914:	2b80      	cmp	r3, #128	@ 0x80
 800a916:	d001      	beq.n	800a91c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800a918:	2301      	movs	r3, #1
 800a91a:	e2ac      	b.n	800ae76 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a91c:	4b78      	ldr	r3, [pc, #480]	@ (800ab00 <HAL_RCC_OscConfig+0x4dc>)
 800a91e:	68db      	ldr	r3, [r3, #12]
 800a920:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6a1b      	ldr	r3, [r3, #32]
 800a928:	061b      	lsls	r3, r3, #24
 800a92a:	4975      	ldr	r1, [pc, #468]	@ (800ab00 <HAL_RCC_OscConfig+0x4dc>)
 800a92c:	4313      	orrs	r3, r2
 800a92e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a930:	e040      	b.n	800a9b4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	69db      	ldr	r3, [r3, #28]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d023      	beq.n	800a982 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a93a:	4b71      	ldr	r3, [pc, #452]	@ (800ab00 <HAL_RCC_OscConfig+0x4dc>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a70      	ldr	r2, [pc, #448]	@ (800ab00 <HAL_RCC_OscConfig+0x4dc>)
 800a940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a944:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a946:	f7fb ff5f 	bl	8006808 <HAL_GetTick>
 800a94a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a94c:	e008      	b.n	800a960 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a94e:	f7fb ff5b 	bl	8006808 <HAL_GetTick>
 800a952:	4602      	mov	r2, r0
 800a954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a956:	1ad3      	subs	r3, r2, r3
 800a958:	2b02      	cmp	r3, #2
 800a95a:	d901      	bls.n	800a960 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800a95c:	2303      	movs	r3, #3
 800a95e:	e28a      	b.n	800ae76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a960:	4b67      	ldr	r3, [pc, #412]	@ (800ab00 <HAL_RCC_OscConfig+0x4dc>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d0f0      	beq.n	800a94e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a96c:	4b64      	ldr	r3, [pc, #400]	@ (800ab00 <HAL_RCC_OscConfig+0x4dc>)
 800a96e:	68db      	ldr	r3, [r3, #12]
 800a970:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6a1b      	ldr	r3, [r3, #32]
 800a978:	061b      	lsls	r3, r3, #24
 800a97a:	4961      	ldr	r1, [pc, #388]	@ (800ab00 <HAL_RCC_OscConfig+0x4dc>)
 800a97c:	4313      	orrs	r3, r2
 800a97e:	60cb      	str	r3, [r1, #12]
 800a980:	e018      	b.n	800a9b4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a982:	4b5f      	ldr	r3, [pc, #380]	@ (800ab00 <HAL_RCC_OscConfig+0x4dc>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4a5e      	ldr	r2, [pc, #376]	@ (800ab00 <HAL_RCC_OscConfig+0x4dc>)
 800a988:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a98c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a98e:	f7fb ff3b 	bl	8006808 <HAL_GetTick>
 800a992:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a994:	e008      	b.n	800a9a8 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a996:	f7fb ff37 	bl	8006808 <HAL_GetTick>
 800a99a:	4602      	mov	r2, r0
 800a99c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a99e:	1ad3      	subs	r3, r2, r3
 800a9a0:	2b02      	cmp	r3, #2
 800a9a2:	d901      	bls.n	800a9a8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800a9a4:	2303      	movs	r3, #3
 800a9a6:	e266      	b.n	800ae76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a9a8:	4b55      	ldr	r3, [pc, #340]	@ (800ab00 <HAL_RCC_OscConfig+0x4dc>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d1f0      	bne.n	800a996 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f003 0308 	and.w	r3, r3, #8
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d036      	beq.n	800aa2e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	695b      	ldr	r3, [r3, #20]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d019      	beq.n	800a9fc <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a9c8:	4b4d      	ldr	r3, [pc, #308]	@ (800ab00 <HAL_RCC_OscConfig+0x4dc>)
 800a9ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a9cc:	4a4c      	ldr	r2, [pc, #304]	@ (800ab00 <HAL_RCC_OscConfig+0x4dc>)
 800a9ce:	f043 0301 	orr.w	r3, r3, #1
 800a9d2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9d4:	f7fb ff18 	bl	8006808 <HAL_GetTick>
 800a9d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a9da:	e008      	b.n	800a9ee <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a9dc:	f7fb ff14 	bl	8006808 <HAL_GetTick>
 800a9e0:	4602      	mov	r2, r0
 800a9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e4:	1ad3      	subs	r3, r2, r3
 800a9e6:	2b02      	cmp	r3, #2
 800a9e8:	d901      	bls.n	800a9ee <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800a9ea:	2303      	movs	r3, #3
 800a9ec:	e243      	b.n	800ae76 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a9ee:	4b44      	ldr	r3, [pc, #272]	@ (800ab00 <HAL_RCC_OscConfig+0x4dc>)
 800a9f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a9f2:	f003 0302 	and.w	r3, r3, #2
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d0f0      	beq.n	800a9dc <HAL_RCC_OscConfig+0x3b8>
 800a9fa:	e018      	b.n	800aa2e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a9fc:	4b40      	ldr	r3, [pc, #256]	@ (800ab00 <HAL_RCC_OscConfig+0x4dc>)
 800a9fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa00:	4a3f      	ldr	r2, [pc, #252]	@ (800ab00 <HAL_RCC_OscConfig+0x4dc>)
 800aa02:	f023 0301 	bic.w	r3, r3, #1
 800aa06:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa08:	f7fb fefe 	bl	8006808 <HAL_GetTick>
 800aa0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aa0e:	e008      	b.n	800aa22 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa10:	f7fb fefa 	bl	8006808 <HAL_GetTick>
 800aa14:	4602      	mov	r2, r0
 800aa16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa18:	1ad3      	subs	r3, r2, r3
 800aa1a:	2b02      	cmp	r3, #2
 800aa1c:	d901      	bls.n	800aa22 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800aa1e:	2303      	movs	r3, #3
 800aa20:	e229      	b.n	800ae76 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aa22:	4b37      	ldr	r3, [pc, #220]	@ (800ab00 <HAL_RCC_OscConfig+0x4dc>)
 800aa24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa26:	f003 0302 	and.w	r3, r3, #2
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d1f0      	bne.n	800aa10 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f003 0320 	and.w	r3, r3, #32
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d036      	beq.n	800aaa8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	699b      	ldr	r3, [r3, #24]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d019      	beq.n	800aa76 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800aa42:	4b2f      	ldr	r3, [pc, #188]	@ (800ab00 <HAL_RCC_OscConfig+0x4dc>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a2e      	ldr	r2, [pc, #184]	@ (800ab00 <HAL_RCC_OscConfig+0x4dc>)
 800aa48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800aa4c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800aa4e:	f7fb fedb 	bl	8006808 <HAL_GetTick>
 800aa52:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aa54:	e008      	b.n	800aa68 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aa56:	f7fb fed7 	bl	8006808 <HAL_GetTick>
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa5e:	1ad3      	subs	r3, r2, r3
 800aa60:	2b02      	cmp	r3, #2
 800aa62:	d901      	bls.n	800aa68 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800aa64:	2303      	movs	r3, #3
 800aa66:	e206      	b.n	800ae76 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aa68:	4b25      	ldr	r3, [pc, #148]	@ (800ab00 <HAL_RCC_OscConfig+0x4dc>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d0f0      	beq.n	800aa56 <HAL_RCC_OscConfig+0x432>
 800aa74:	e018      	b.n	800aaa8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800aa76:	4b22      	ldr	r3, [pc, #136]	@ (800ab00 <HAL_RCC_OscConfig+0x4dc>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a21      	ldr	r2, [pc, #132]	@ (800ab00 <HAL_RCC_OscConfig+0x4dc>)
 800aa7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aa80:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800aa82:	f7fb fec1 	bl	8006808 <HAL_GetTick>
 800aa86:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800aa88:	e008      	b.n	800aa9c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aa8a:	f7fb febd 	bl	8006808 <HAL_GetTick>
 800aa8e:	4602      	mov	r2, r0
 800aa90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa92:	1ad3      	subs	r3, r2, r3
 800aa94:	2b02      	cmp	r3, #2
 800aa96:	d901      	bls.n	800aa9c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800aa98:	2303      	movs	r3, #3
 800aa9a:	e1ec      	b.n	800ae76 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800aa9c:	4b18      	ldr	r3, [pc, #96]	@ (800ab00 <HAL_RCC_OscConfig+0x4dc>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d1f0      	bne.n	800aa8a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f003 0304 	and.w	r3, r3, #4
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	f000 80af 	beq.w	800ac14 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800aab6:	4b13      	ldr	r3, [pc, #76]	@ (800ab04 <HAL_RCC_OscConfig+0x4e0>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4a12      	ldr	r2, [pc, #72]	@ (800ab04 <HAL_RCC_OscConfig+0x4e0>)
 800aabc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aac0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aac2:	f7fb fea1 	bl	8006808 <HAL_GetTick>
 800aac6:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aac8:	e008      	b.n	800aadc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aaca:	f7fb fe9d 	bl	8006808 <HAL_GetTick>
 800aace:	4602      	mov	r2, r0
 800aad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad2:	1ad3      	subs	r3, r2, r3
 800aad4:	2b64      	cmp	r3, #100	@ 0x64
 800aad6:	d901      	bls.n	800aadc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800aad8:	2303      	movs	r3, #3
 800aada:	e1cc      	b.n	800ae76 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aadc:	4b09      	ldr	r3, [pc, #36]	@ (800ab04 <HAL_RCC_OscConfig+0x4e0>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d0f0      	beq.n	800aaca <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	689b      	ldr	r3, [r3, #8]
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d10b      	bne.n	800ab08 <HAL_RCC_OscConfig+0x4e4>
 800aaf0:	4b03      	ldr	r3, [pc, #12]	@ (800ab00 <HAL_RCC_OscConfig+0x4dc>)
 800aaf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aaf4:	4a02      	ldr	r2, [pc, #8]	@ (800ab00 <HAL_RCC_OscConfig+0x4dc>)
 800aaf6:	f043 0301 	orr.w	r3, r3, #1
 800aafa:	6713      	str	r3, [r2, #112]	@ 0x70
 800aafc:	e05b      	b.n	800abb6 <HAL_RCC_OscConfig+0x592>
 800aafe:	bf00      	nop
 800ab00:	58024400 	.word	0x58024400
 800ab04:	58024800 	.word	0x58024800
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	689b      	ldr	r3, [r3, #8]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d112      	bne.n	800ab36 <HAL_RCC_OscConfig+0x512>
 800ab10:	4b9d      	ldr	r3, [pc, #628]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ab12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab14:	4a9c      	ldr	r2, [pc, #624]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ab16:	f023 0301 	bic.w	r3, r3, #1
 800ab1a:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab1c:	4b9a      	ldr	r3, [pc, #616]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ab1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab20:	4a99      	ldr	r2, [pc, #612]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ab22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab26:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab28:	4b97      	ldr	r3, [pc, #604]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ab2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab2c:	4a96      	ldr	r2, [pc, #600]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ab2e:	f023 0304 	bic.w	r3, r3, #4
 800ab32:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab34:	e03f      	b.n	800abb6 <HAL_RCC_OscConfig+0x592>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	2b05      	cmp	r3, #5
 800ab3c:	d112      	bne.n	800ab64 <HAL_RCC_OscConfig+0x540>
 800ab3e:	4b92      	ldr	r3, [pc, #584]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ab40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab42:	4a91      	ldr	r2, [pc, #580]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ab44:	f043 0304 	orr.w	r3, r3, #4
 800ab48:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab4a:	4b8f      	ldr	r3, [pc, #572]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ab4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab4e:	4a8e      	ldr	r2, [pc, #568]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ab50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab54:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab56:	4b8c      	ldr	r3, [pc, #560]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ab58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab5a:	4a8b      	ldr	r2, [pc, #556]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ab5c:	f043 0301 	orr.w	r3, r3, #1
 800ab60:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab62:	e028      	b.n	800abb6 <HAL_RCC_OscConfig+0x592>
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	689b      	ldr	r3, [r3, #8]
 800ab68:	2b85      	cmp	r3, #133	@ 0x85
 800ab6a:	d112      	bne.n	800ab92 <HAL_RCC_OscConfig+0x56e>
 800ab6c:	4b86      	ldr	r3, [pc, #536]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ab6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab70:	4a85      	ldr	r2, [pc, #532]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ab72:	f043 0304 	orr.w	r3, r3, #4
 800ab76:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab78:	4b83      	ldr	r3, [pc, #524]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ab7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab7c:	4a82      	ldr	r2, [pc, #520]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ab7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab82:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab84:	4b80      	ldr	r3, [pc, #512]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ab86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab88:	4a7f      	ldr	r2, [pc, #508]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ab8a:	f043 0301 	orr.w	r3, r3, #1
 800ab8e:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab90:	e011      	b.n	800abb6 <HAL_RCC_OscConfig+0x592>
 800ab92:	4b7d      	ldr	r3, [pc, #500]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ab94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab96:	4a7c      	ldr	r2, [pc, #496]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ab98:	f023 0301 	bic.w	r3, r3, #1
 800ab9c:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab9e:	4b7a      	ldr	r3, [pc, #488]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800aba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aba2:	4a79      	ldr	r2, [pc, #484]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800aba4:	f023 0304 	bic.w	r3, r3, #4
 800aba8:	6713      	str	r3, [r2, #112]	@ 0x70
 800abaa:	4b77      	ldr	r3, [pc, #476]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800abac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abae:	4a76      	ldr	r2, [pc, #472]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800abb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800abb4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	689b      	ldr	r3, [r3, #8]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d015      	beq.n	800abea <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abbe:	f7fb fe23 	bl	8006808 <HAL_GetTick>
 800abc2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800abc4:	e00a      	b.n	800abdc <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abc6:	f7fb fe1f 	bl	8006808 <HAL_GetTick>
 800abca:	4602      	mov	r2, r0
 800abcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abce:	1ad3      	subs	r3, r2, r3
 800abd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d901      	bls.n	800abdc <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800abd8:	2303      	movs	r3, #3
 800abda:	e14c      	b.n	800ae76 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800abdc:	4b6a      	ldr	r3, [pc, #424]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800abde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abe0:	f003 0302 	and.w	r3, r3, #2
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d0ee      	beq.n	800abc6 <HAL_RCC_OscConfig+0x5a2>
 800abe8:	e014      	b.n	800ac14 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abea:	f7fb fe0d 	bl	8006808 <HAL_GetTick>
 800abee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800abf0:	e00a      	b.n	800ac08 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abf2:	f7fb fe09 	bl	8006808 <HAL_GetTick>
 800abf6:	4602      	mov	r2, r0
 800abf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abfa:	1ad3      	subs	r3, r2, r3
 800abfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac00:	4293      	cmp	r3, r2
 800ac02:	d901      	bls.n	800ac08 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800ac04:	2303      	movs	r3, #3
 800ac06:	e136      	b.n	800ae76 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ac08:	4b5f      	ldr	r3, [pc, #380]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ac0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac0c:	f003 0302 	and.w	r3, r3, #2
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d1ee      	bne.n	800abf2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f000 812b 	beq.w	800ae74 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ac1e:	4b5a      	ldr	r3, [pc, #360]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ac20:	691b      	ldr	r3, [r3, #16]
 800ac22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ac26:	2b18      	cmp	r3, #24
 800ac28:	f000 80bb 	beq.w	800ada2 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac30:	2b02      	cmp	r3, #2
 800ac32:	f040 8095 	bne.w	800ad60 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac36:	4b54      	ldr	r3, [pc, #336]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4a53      	ldr	r2, [pc, #332]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ac3c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ac40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac42:	f7fb fde1 	bl	8006808 <HAL_GetTick>
 800ac46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ac48:	e008      	b.n	800ac5c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac4a:	f7fb fddd 	bl	8006808 <HAL_GetTick>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac52:	1ad3      	subs	r3, r2, r3
 800ac54:	2b02      	cmp	r3, #2
 800ac56:	d901      	bls.n	800ac5c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800ac58:	2303      	movs	r3, #3
 800ac5a:	e10c      	b.n	800ae76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ac5c:	4b4a      	ldr	r3, [pc, #296]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d1f0      	bne.n	800ac4a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ac68:	4b47      	ldr	r3, [pc, #284]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ac6a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ac6c:	4b47      	ldr	r3, [pc, #284]	@ (800ad8c <HAL_RCC_OscConfig+0x768>)
 800ac6e:	4013      	ands	r3, r2
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ac78:	0112      	lsls	r2, r2, #4
 800ac7a:	430a      	orrs	r2, r1
 800ac7c:	4942      	ldr	r1, [pc, #264]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	628b      	str	r3, [r1, #40]	@ 0x28
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac86:	3b01      	subs	r3, #1
 800ac88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac90:	3b01      	subs	r3, #1
 800ac92:	025b      	lsls	r3, r3, #9
 800ac94:	b29b      	uxth	r3, r3
 800ac96:	431a      	orrs	r2, r3
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac9c:	3b01      	subs	r3, #1
 800ac9e:	041b      	lsls	r3, r3, #16
 800aca0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800aca4:	431a      	orrs	r2, r3
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acaa:	3b01      	subs	r3, #1
 800acac:	061b      	lsls	r3, r3, #24
 800acae:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800acb2:	4935      	ldr	r1, [pc, #212]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800acb4:	4313      	orrs	r3, r2
 800acb6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800acb8:	4b33      	ldr	r3, [pc, #204]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800acba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acbc:	4a32      	ldr	r2, [pc, #200]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800acbe:	f023 0301 	bic.w	r3, r3, #1
 800acc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800acc4:	4b30      	ldr	r3, [pc, #192]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800acc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800acc8:	4b31      	ldr	r3, [pc, #196]	@ (800ad90 <HAL_RCC_OscConfig+0x76c>)
 800acca:	4013      	ands	r3, r2
 800accc:	687a      	ldr	r2, [r7, #4]
 800acce:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800acd0:	00d2      	lsls	r2, r2, #3
 800acd2:	492d      	ldr	r1, [pc, #180]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800acd4:	4313      	orrs	r3, r2
 800acd6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800acd8:	4b2b      	ldr	r3, [pc, #172]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800acda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acdc:	f023 020c 	bic.w	r2, r3, #12
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ace4:	4928      	ldr	r1, [pc, #160]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ace6:	4313      	orrs	r3, r2
 800ace8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800acea:	4b27      	ldr	r3, [pc, #156]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800acec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acee:	f023 0202 	bic.w	r2, r3, #2
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acf6:	4924      	ldr	r1, [pc, #144]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800acf8:	4313      	orrs	r3, r2
 800acfa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800acfc:	4b22      	ldr	r3, [pc, #136]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800acfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad00:	4a21      	ldr	r2, [pc, #132]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ad02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ad06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad08:	4b1f      	ldr	r3, [pc, #124]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ad0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad0c:	4a1e      	ldr	r2, [pc, #120]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ad0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ad12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ad14:	4b1c      	ldr	r3, [pc, #112]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ad16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad18:	4a1b      	ldr	r2, [pc, #108]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ad1a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ad1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800ad20:	4b19      	ldr	r3, [pc, #100]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ad22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad24:	4a18      	ldr	r2, [pc, #96]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ad26:	f043 0301 	orr.w	r3, r3, #1
 800ad2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ad2c:	4b16      	ldr	r3, [pc, #88]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4a15      	ldr	r2, [pc, #84]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ad32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ad36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad38:	f7fb fd66 	bl	8006808 <HAL_GetTick>
 800ad3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ad3e:	e008      	b.n	800ad52 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad40:	f7fb fd62 	bl	8006808 <HAL_GetTick>
 800ad44:	4602      	mov	r2, r0
 800ad46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad48:	1ad3      	subs	r3, r2, r3
 800ad4a:	2b02      	cmp	r3, #2
 800ad4c:	d901      	bls.n	800ad52 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800ad4e:	2303      	movs	r3, #3
 800ad50:	e091      	b.n	800ae76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ad52:	4b0d      	ldr	r3, [pc, #52]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d0f0      	beq.n	800ad40 <HAL_RCC_OscConfig+0x71c>
 800ad5e:	e089      	b.n	800ae74 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad60:	4b09      	ldr	r3, [pc, #36]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4a08      	ldr	r2, [pc, #32]	@ (800ad88 <HAL_RCC_OscConfig+0x764>)
 800ad66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ad6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad6c:	f7fb fd4c 	bl	8006808 <HAL_GetTick>
 800ad70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ad72:	e00f      	b.n	800ad94 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad74:	f7fb fd48 	bl	8006808 <HAL_GetTick>
 800ad78:	4602      	mov	r2, r0
 800ad7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad7c:	1ad3      	subs	r3, r2, r3
 800ad7e:	2b02      	cmp	r3, #2
 800ad80:	d908      	bls.n	800ad94 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800ad82:	2303      	movs	r3, #3
 800ad84:	e077      	b.n	800ae76 <HAL_RCC_OscConfig+0x852>
 800ad86:	bf00      	nop
 800ad88:	58024400 	.word	0x58024400
 800ad8c:	fffffc0c 	.word	0xfffffc0c
 800ad90:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ad94:	4b3a      	ldr	r3, [pc, #232]	@ (800ae80 <HAL_RCC_OscConfig+0x85c>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d1e9      	bne.n	800ad74 <HAL_RCC_OscConfig+0x750>
 800ada0:	e068      	b.n	800ae74 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ada2:	4b37      	ldr	r3, [pc, #220]	@ (800ae80 <HAL_RCC_OscConfig+0x85c>)
 800ada4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ada6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ada8:	4b35      	ldr	r3, [pc, #212]	@ (800ae80 <HAL_RCC_OscConfig+0x85c>)
 800adaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adac:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adb2:	2b01      	cmp	r3, #1
 800adb4:	d031      	beq.n	800ae1a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	f003 0203 	and.w	r2, r3, #3
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d12a      	bne.n	800ae1a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	091b      	lsrs	r3, r3, #4
 800adc8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800add0:	429a      	cmp	r2, r3
 800add2:	d122      	bne.n	800ae1a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adde:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d11a      	bne.n	800ae1a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	0a5b      	lsrs	r3, r3, #9
 800ade8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adf0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d111      	bne.n	800ae1a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	0c1b      	lsrs	r3, r3, #16
 800adfa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae02:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d108      	bne.n	800ae1a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	0e1b      	lsrs	r3, r3, #24
 800ae0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae14:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d001      	beq.n	800ae1e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	e02b      	b.n	800ae76 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ae1e:	4b18      	ldr	r3, [pc, #96]	@ (800ae80 <HAL_RCC_OscConfig+0x85c>)
 800ae20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae22:	08db      	lsrs	r3, r3, #3
 800ae24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae28:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae2e:	693a      	ldr	r2, [r7, #16]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d01f      	beq.n	800ae74 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800ae34:	4b12      	ldr	r3, [pc, #72]	@ (800ae80 <HAL_RCC_OscConfig+0x85c>)
 800ae36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae38:	4a11      	ldr	r2, [pc, #68]	@ (800ae80 <HAL_RCC_OscConfig+0x85c>)
 800ae3a:	f023 0301 	bic.w	r3, r3, #1
 800ae3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ae40:	f7fb fce2 	bl	8006808 <HAL_GetTick>
 800ae44:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ae46:	bf00      	nop
 800ae48:	f7fb fcde 	bl	8006808 <HAL_GetTick>
 800ae4c:	4602      	mov	r2, r0
 800ae4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d0f9      	beq.n	800ae48 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ae54:	4b0a      	ldr	r3, [pc, #40]	@ (800ae80 <HAL_RCC_OscConfig+0x85c>)
 800ae56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae58:	4b0a      	ldr	r3, [pc, #40]	@ (800ae84 <HAL_RCC_OscConfig+0x860>)
 800ae5a:	4013      	ands	r3, r2
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ae60:	00d2      	lsls	r2, r2, #3
 800ae62:	4907      	ldr	r1, [pc, #28]	@ (800ae80 <HAL_RCC_OscConfig+0x85c>)
 800ae64:	4313      	orrs	r3, r2
 800ae66:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800ae68:	4b05      	ldr	r3, [pc, #20]	@ (800ae80 <HAL_RCC_OscConfig+0x85c>)
 800ae6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae6c:	4a04      	ldr	r2, [pc, #16]	@ (800ae80 <HAL_RCC_OscConfig+0x85c>)
 800ae6e:	f043 0301 	orr.w	r3, r3, #1
 800ae72:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800ae74:	2300      	movs	r3, #0
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3730      	adds	r7, #48	@ 0x30
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	bf00      	nop
 800ae80:	58024400 	.word	0x58024400
 800ae84:	ffff0007 	.word	0xffff0007

0800ae88 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b086      	sub	sp, #24
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d101      	bne.n	800ae9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	e19c      	b.n	800b1d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ae9c:	4b8a      	ldr	r3, [pc, #552]	@ (800b0c8 <HAL_RCC_ClockConfig+0x240>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f003 030f 	and.w	r3, r3, #15
 800aea4:	683a      	ldr	r2, [r7, #0]
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d910      	bls.n	800aecc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aeaa:	4b87      	ldr	r3, [pc, #540]	@ (800b0c8 <HAL_RCC_ClockConfig+0x240>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f023 020f 	bic.w	r2, r3, #15
 800aeb2:	4985      	ldr	r1, [pc, #532]	@ (800b0c8 <HAL_RCC_ClockConfig+0x240>)
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aeba:	4b83      	ldr	r3, [pc, #524]	@ (800b0c8 <HAL_RCC_ClockConfig+0x240>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f003 030f 	and.w	r3, r3, #15
 800aec2:	683a      	ldr	r2, [r7, #0]
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d001      	beq.n	800aecc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800aec8:	2301      	movs	r3, #1
 800aeca:	e184      	b.n	800b1d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f003 0304 	and.w	r3, r3, #4
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d010      	beq.n	800aefa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	691a      	ldr	r2, [r3, #16]
 800aedc:	4b7b      	ldr	r3, [pc, #492]	@ (800b0cc <HAL_RCC_ClockConfig+0x244>)
 800aede:	699b      	ldr	r3, [r3, #24]
 800aee0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d908      	bls.n	800aefa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aee8:	4b78      	ldr	r3, [pc, #480]	@ (800b0cc <HAL_RCC_ClockConfig+0x244>)
 800aeea:	699b      	ldr	r3, [r3, #24]
 800aeec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	691b      	ldr	r3, [r3, #16]
 800aef4:	4975      	ldr	r1, [pc, #468]	@ (800b0cc <HAL_RCC_ClockConfig+0x244>)
 800aef6:	4313      	orrs	r3, r2
 800aef8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f003 0308 	and.w	r3, r3, #8
 800af02:	2b00      	cmp	r3, #0
 800af04:	d010      	beq.n	800af28 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	695a      	ldr	r2, [r3, #20]
 800af0a:	4b70      	ldr	r3, [pc, #448]	@ (800b0cc <HAL_RCC_ClockConfig+0x244>)
 800af0c:	69db      	ldr	r3, [r3, #28]
 800af0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800af12:	429a      	cmp	r2, r3
 800af14:	d908      	bls.n	800af28 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800af16:	4b6d      	ldr	r3, [pc, #436]	@ (800b0cc <HAL_RCC_ClockConfig+0x244>)
 800af18:	69db      	ldr	r3, [r3, #28]
 800af1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	695b      	ldr	r3, [r3, #20]
 800af22:	496a      	ldr	r1, [pc, #424]	@ (800b0cc <HAL_RCC_ClockConfig+0x244>)
 800af24:	4313      	orrs	r3, r2
 800af26:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f003 0310 	and.w	r3, r3, #16
 800af30:	2b00      	cmp	r3, #0
 800af32:	d010      	beq.n	800af56 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	699a      	ldr	r2, [r3, #24]
 800af38:	4b64      	ldr	r3, [pc, #400]	@ (800b0cc <HAL_RCC_ClockConfig+0x244>)
 800af3a:	69db      	ldr	r3, [r3, #28]
 800af3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800af40:	429a      	cmp	r2, r3
 800af42:	d908      	bls.n	800af56 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800af44:	4b61      	ldr	r3, [pc, #388]	@ (800b0cc <HAL_RCC_ClockConfig+0x244>)
 800af46:	69db      	ldr	r3, [r3, #28]
 800af48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	699b      	ldr	r3, [r3, #24]
 800af50:	495e      	ldr	r1, [pc, #376]	@ (800b0cc <HAL_RCC_ClockConfig+0x244>)
 800af52:	4313      	orrs	r3, r2
 800af54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f003 0320 	and.w	r3, r3, #32
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d010      	beq.n	800af84 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	69da      	ldr	r2, [r3, #28]
 800af66:	4b59      	ldr	r3, [pc, #356]	@ (800b0cc <HAL_RCC_ClockConfig+0x244>)
 800af68:	6a1b      	ldr	r3, [r3, #32]
 800af6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800af6e:	429a      	cmp	r2, r3
 800af70:	d908      	bls.n	800af84 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800af72:	4b56      	ldr	r3, [pc, #344]	@ (800b0cc <HAL_RCC_ClockConfig+0x244>)
 800af74:	6a1b      	ldr	r3, [r3, #32]
 800af76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	69db      	ldr	r3, [r3, #28]
 800af7e:	4953      	ldr	r1, [pc, #332]	@ (800b0cc <HAL_RCC_ClockConfig+0x244>)
 800af80:	4313      	orrs	r3, r2
 800af82:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f003 0302 	and.w	r3, r3, #2
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d010      	beq.n	800afb2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	68da      	ldr	r2, [r3, #12]
 800af94:	4b4d      	ldr	r3, [pc, #308]	@ (800b0cc <HAL_RCC_ClockConfig+0x244>)
 800af96:	699b      	ldr	r3, [r3, #24]
 800af98:	f003 030f 	and.w	r3, r3, #15
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d908      	bls.n	800afb2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800afa0:	4b4a      	ldr	r3, [pc, #296]	@ (800b0cc <HAL_RCC_ClockConfig+0x244>)
 800afa2:	699b      	ldr	r3, [r3, #24]
 800afa4:	f023 020f 	bic.w	r2, r3, #15
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	68db      	ldr	r3, [r3, #12]
 800afac:	4947      	ldr	r1, [pc, #284]	@ (800b0cc <HAL_RCC_ClockConfig+0x244>)
 800afae:	4313      	orrs	r3, r2
 800afb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f003 0301 	and.w	r3, r3, #1
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d055      	beq.n	800b06a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800afbe:	4b43      	ldr	r3, [pc, #268]	@ (800b0cc <HAL_RCC_ClockConfig+0x244>)
 800afc0:	699b      	ldr	r3, [r3, #24]
 800afc2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	689b      	ldr	r3, [r3, #8]
 800afca:	4940      	ldr	r1, [pc, #256]	@ (800b0cc <HAL_RCC_ClockConfig+0x244>)
 800afcc:	4313      	orrs	r3, r2
 800afce:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	2b02      	cmp	r3, #2
 800afd6:	d107      	bne.n	800afe8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800afd8:	4b3c      	ldr	r3, [pc, #240]	@ (800b0cc <HAL_RCC_ClockConfig+0x244>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d121      	bne.n	800b028 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800afe4:	2301      	movs	r3, #1
 800afe6:	e0f6      	b.n	800b1d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	2b03      	cmp	r3, #3
 800afee:	d107      	bne.n	800b000 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aff0:	4b36      	ldr	r3, [pc, #216]	@ (800b0cc <HAL_RCC_ClockConfig+0x244>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d115      	bne.n	800b028 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800affc:	2301      	movs	r3, #1
 800affe:	e0ea      	b.n	800b1d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	2b01      	cmp	r3, #1
 800b006:	d107      	bne.n	800b018 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b008:	4b30      	ldr	r3, [pc, #192]	@ (800b0cc <HAL_RCC_ClockConfig+0x244>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b010:	2b00      	cmp	r3, #0
 800b012:	d109      	bne.n	800b028 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b014:	2301      	movs	r3, #1
 800b016:	e0de      	b.n	800b1d6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b018:	4b2c      	ldr	r3, [pc, #176]	@ (800b0cc <HAL_RCC_ClockConfig+0x244>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f003 0304 	and.w	r3, r3, #4
 800b020:	2b00      	cmp	r3, #0
 800b022:	d101      	bne.n	800b028 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b024:	2301      	movs	r3, #1
 800b026:	e0d6      	b.n	800b1d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b028:	4b28      	ldr	r3, [pc, #160]	@ (800b0cc <HAL_RCC_ClockConfig+0x244>)
 800b02a:	691b      	ldr	r3, [r3, #16]
 800b02c:	f023 0207 	bic.w	r2, r3, #7
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	4925      	ldr	r1, [pc, #148]	@ (800b0cc <HAL_RCC_ClockConfig+0x244>)
 800b036:	4313      	orrs	r3, r2
 800b038:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b03a:	f7fb fbe5 	bl	8006808 <HAL_GetTick>
 800b03e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b040:	e00a      	b.n	800b058 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b042:	f7fb fbe1 	bl	8006808 <HAL_GetTick>
 800b046:	4602      	mov	r2, r0
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	1ad3      	subs	r3, r2, r3
 800b04c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b050:	4293      	cmp	r3, r2
 800b052:	d901      	bls.n	800b058 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b054:	2303      	movs	r3, #3
 800b056:	e0be      	b.n	800b1d6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b058:	4b1c      	ldr	r3, [pc, #112]	@ (800b0cc <HAL_RCC_ClockConfig+0x244>)
 800b05a:	691b      	ldr	r3, [r3, #16]
 800b05c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	00db      	lsls	r3, r3, #3
 800b066:	429a      	cmp	r2, r3
 800b068:	d1eb      	bne.n	800b042 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f003 0302 	and.w	r3, r3, #2
 800b072:	2b00      	cmp	r3, #0
 800b074:	d010      	beq.n	800b098 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	68da      	ldr	r2, [r3, #12]
 800b07a:	4b14      	ldr	r3, [pc, #80]	@ (800b0cc <HAL_RCC_ClockConfig+0x244>)
 800b07c:	699b      	ldr	r3, [r3, #24]
 800b07e:	f003 030f 	and.w	r3, r3, #15
 800b082:	429a      	cmp	r2, r3
 800b084:	d208      	bcs.n	800b098 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b086:	4b11      	ldr	r3, [pc, #68]	@ (800b0cc <HAL_RCC_ClockConfig+0x244>)
 800b088:	699b      	ldr	r3, [r3, #24]
 800b08a:	f023 020f 	bic.w	r2, r3, #15
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	68db      	ldr	r3, [r3, #12]
 800b092:	490e      	ldr	r1, [pc, #56]	@ (800b0cc <HAL_RCC_ClockConfig+0x244>)
 800b094:	4313      	orrs	r3, r2
 800b096:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b098:	4b0b      	ldr	r3, [pc, #44]	@ (800b0c8 <HAL_RCC_ClockConfig+0x240>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f003 030f 	and.w	r3, r3, #15
 800b0a0:	683a      	ldr	r2, [r7, #0]
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d214      	bcs.n	800b0d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b0a6:	4b08      	ldr	r3, [pc, #32]	@ (800b0c8 <HAL_RCC_ClockConfig+0x240>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f023 020f 	bic.w	r2, r3, #15
 800b0ae:	4906      	ldr	r1, [pc, #24]	@ (800b0c8 <HAL_RCC_ClockConfig+0x240>)
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	4313      	orrs	r3, r2
 800b0b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b0b6:	4b04      	ldr	r3, [pc, #16]	@ (800b0c8 <HAL_RCC_ClockConfig+0x240>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f003 030f 	and.w	r3, r3, #15
 800b0be:	683a      	ldr	r2, [r7, #0]
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d005      	beq.n	800b0d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	e086      	b.n	800b1d6 <HAL_RCC_ClockConfig+0x34e>
 800b0c8:	52002000 	.word	0x52002000
 800b0cc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f003 0304 	and.w	r3, r3, #4
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d010      	beq.n	800b0fe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	691a      	ldr	r2, [r3, #16]
 800b0e0:	4b3f      	ldr	r3, [pc, #252]	@ (800b1e0 <HAL_RCC_ClockConfig+0x358>)
 800b0e2:	699b      	ldr	r3, [r3, #24]
 800b0e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b0e8:	429a      	cmp	r2, r3
 800b0ea:	d208      	bcs.n	800b0fe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b0ec:	4b3c      	ldr	r3, [pc, #240]	@ (800b1e0 <HAL_RCC_ClockConfig+0x358>)
 800b0ee:	699b      	ldr	r3, [r3, #24]
 800b0f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	691b      	ldr	r3, [r3, #16]
 800b0f8:	4939      	ldr	r1, [pc, #228]	@ (800b1e0 <HAL_RCC_ClockConfig+0x358>)
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f003 0308 	and.w	r3, r3, #8
 800b106:	2b00      	cmp	r3, #0
 800b108:	d010      	beq.n	800b12c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	695a      	ldr	r2, [r3, #20]
 800b10e:	4b34      	ldr	r3, [pc, #208]	@ (800b1e0 <HAL_RCC_ClockConfig+0x358>)
 800b110:	69db      	ldr	r3, [r3, #28]
 800b112:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b116:	429a      	cmp	r2, r3
 800b118:	d208      	bcs.n	800b12c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b11a:	4b31      	ldr	r3, [pc, #196]	@ (800b1e0 <HAL_RCC_ClockConfig+0x358>)
 800b11c:	69db      	ldr	r3, [r3, #28]
 800b11e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	695b      	ldr	r3, [r3, #20]
 800b126:	492e      	ldr	r1, [pc, #184]	@ (800b1e0 <HAL_RCC_ClockConfig+0x358>)
 800b128:	4313      	orrs	r3, r2
 800b12a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f003 0310 	and.w	r3, r3, #16
 800b134:	2b00      	cmp	r3, #0
 800b136:	d010      	beq.n	800b15a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	699a      	ldr	r2, [r3, #24]
 800b13c:	4b28      	ldr	r3, [pc, #160]	@ (800b1e0 <HAL_RCC_ClockConfig+0x358>)
 800b13e:	69db      	ldr	r3, [r3, #28]
 800b140:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b144:	429a      	cmp	r2, r3
 800b146:	d208      	bcs.n	800b15a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b148:	4b25      	ldr	r3, [pc, #148]	@ (800b1e0 <HAL_RCC_ClockConfig+0x358>)
 800b14a:	69db      	ldr	r3, [r3, #28]
 800b14c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	699b      	ldr	r3, [r3, #24]
 800b154:	4922      	ldr	r1, [pc, #136]	@ (800b1e0 <HAL_RCC_ClockConfig+0x358>)
 800b156:	4313      	orrs	r3, r2
 800b158:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f003 0320 	and.w	r3, r3, #32
 800b162:	2b00      	cmp	r3, #0
 800b164:	d010      	beq.n	800b188 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	69da      	ldr	r2, [r3, #28]
 800b16a:	4b1d      	ldr	r3, [pc, #116]	@ (800b1e0 <HAL_RCC_ClockConfig+0x358>)
 800b16c:	6a1b      	ldr	r3, [r3, #32]
 800b16e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b172:	429a      	cmp	r2, r3
 800b174:	d208      	bcs.n	800b188 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b176:	4b1a      	ldr	r3, [pc, #104]	@ (800b1e0 <HAL_RCC_ClockConfig+0x358>)
 800b178:	6a1b      	ldr	r3, [r3, #32]
 800b17a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	69db      	ldr	r3, [r3, #28]
 800b182:	4917      	ldr	r1, [pc, #92]	@ (800b1e0 <HAL_RCC_ClockConfig+0x358>)
 800b184:	4313      	orrs	r3, r2
 800b186:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800b188:	f000 f834 	bl	800b1f4 <HAL_RCC_GetSysClockFreq>
 800b18c:	4602      	mov	r2, r0
 800b18e:	4b14      	ldr	r3, [pc, #80]	@ (800b1e0 <HAL_RCC_ClockConfig+0x358>)
 800b190:	699b      	ldr	r3, [r3, #24]
 800b192:	0a1b      	lsrs	r3, r3, #8
 800b194:	f003 030f 	and.w	r3, r3, #15
 800b198:	4912      	ldr	r1, [pc, #72]	@ (800b1e4 <HAL_RCC_ClockConfig+0x35c>)
 800b19a:	5ccb      	ldrb	r3, [r1, r3]
 800b19c:	f003 031f 	and.w	r3, r3, #31
 800b1a0:	fa22 f303 	lsr.w	r3, r2, r3
 800b1a4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b1a6:	4b0e      	ldr	r3, [pc, #56]	@ (800b1e0 <HAL_RCC_ClockConfig+0x358>)
 800b1a8:	699b      	ldr	r3, [r3, #24]
 800b1aa:	f003 030f 	and.w	r3, r3, #15
 800b1ae:	4a0d      	ldr	r2, [pc, #52]	@ (800b1e4 <HAL_RCC_ClockConfig+0x35c>)
 800b1b0:	5cd3      	ldrb	r3, [r2, r3]
 800b1b2:	f003 031f 	and.w	r3, r3, #31
 800b1b6:	693a      	ldr	r2, [r7, #16]
 800b1b8:	fa22 f303 	lsr.w	r3, r2, r3
 800b1bc:	4a0a      	ldr	r2, [pc, #40]	@ (800b1e8 <HAL_RCC_ClockConfig+0x360>)
 800b1be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b1c0:	4a0a      	ldr	r2, [pc, #40]	@ (800b1ec <HAL_RCC_ClockConfig+0x364>)
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b1c6:	4b0a      	ldr	r3, [pc, #40]	@ (800b1f0 <HAL_RCC_ClockConfig+0x368>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f7f8 f938 	bl	8003440 <HAL_InitTick>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b1d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3718      	adds	r7, #24
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
 800b1de:	bf00      	nop
 800b1e0:	58024400 	.word	0x58024400
 800b1e4:	08019d54 	.word	0x08019d54
 800b1e8:	24000004 	.word	0x24000004
 800b1ec:	24000000 	.word	0x24000000
 800b1f0:	240000a4 	.word	0x240000a4

0800b1f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b089      	sub	sp, #36	@ 0x24
 800b1f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b1fa:	4bb3      	ldr	r3, [pc, #716]	@ (800b4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1fc:	691b      	ldr	r3, [r3, #16]
 800b1fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b202:	2b18      	cmp	r3, #24
 800b204:	f200 8155 	bhi.w	800b4b2 <HAL_RCC_GetSysClockFreq+0x2be>
 800b208:	a201      	add	r2, pc, #4	@ (adr r2, 800b210 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b20a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b20e:	bf00      	nop
 800b210:	0800b275 	.word	0x0800b275
 800b214:	0800b4b3 	.word	0x0800b4b3
 800b218:	0800b4b3 	.word	0x0800b4b3
 800b21c:	0800b4b3 	.word	0x0800b4b3
 800b220:	0800b4b3 	.word	0x0800b4b3
 800b224:	0800b4b3 	.word	0x0800b4b3
 800b228:	0800b4b3 	.word	0x0800b4b3
 800b22c:	0800b4b3 	.word	0x0800b4b3
 800b230:	0800b29b 	.word	0x0800b29b
 800b234:	0800b4b3 	.word	0x0800b4b3
 800b238:	0800b4b3 	.word	0x0800b4b3
 800b23c:	0800b4b3 	.word	0x0800b4b3
 800b240:	0800b4b3 	.word	0x0800b4b3
 800b244:	0800b4b3 	.word	0x0800b4b3
 800b248:	0800b4b3 	.word	0x0800b4b3
 800b24c:	0800b4b3 	.word	0x0800b4b3
 800b250:	0800b2a1 	.word	0x0800b2a1
 800b254:	0800b4b3 	.word	0x0800b4b3
 800b258:	0800b4b3 	.word	0x0800b4b3
 800b25c:	0800b4b3 	.word	0x0800b4b3
 800b260:	0800b4b3 	.word	0x0800b4b3
 800b264:	0800b4b3 	.word	0x0800b4b3
 800b268:	0800b4b3 	.word	0x0800b4b3
 800b26c:	0800b4b3 	.word	0x0800b4b3
 800b270:	0800b2a7 	.word	0x0800b2a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b274:	4b94      	ldr	r3, [pc, #592]	@ (800b4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f003 0320 	and.w	r3, r3, #32
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d009      	beq.n	800b294 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b280:	4b91      	ldr	r3, [pc, #580]	@ (800b4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	08db      	lsrs	r3, r3, #3
 800b286:	f003 0303 	and.w	r3, r3, #3
 800b28a:	4a90      	ldr	r2, [pc, #576]	@ (800b4cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b28c:	fa22 f303 	lsr.w	r3, r2, r3
 800b290:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b292:	e111      	b.n	800b4b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b294:	4b8d      	ldr	r3, [pc, #564]	@ (800b4cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b296:	61bb      	str	r3, [r7, #24]
      break;
 800b298:	e10e      	b.n	800b4b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b29a:	4b8d      	ldr	r3, [pc, #564]	@ (800b4d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b29c:	61bb      	str	r3, [r7, #24]
      break;
 800b29e:	e10b      	b.n	800b4b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b2a0:	4b8c      	ldr	r3, [pc, #560]	@ (800b4d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b2a2:	61bb      	str	r3, [r7, #24]
      break;
 800b2a4:	e108      	b.n	800b4b8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b2a6:	4b88      	ldr	r3, [pc, #544]	@ (800b4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2aa:	f003 0303 	and.w	r3, r3, #3
 800b2ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b2b0:	4b85      	ldr	r3, [pc, #532]	@ (800b4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2b4:	091b      	lsrs	r3, r3, #4
 800b2b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b2ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b2bc:	4b82      	ldr	r3, [pc, #520]	@ (800b4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2c0:	f003 0301 	and.w	r3, r3, #1
 800b2c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b2c6:	4b80      	ldr	r3, [pc, #512]	@ (800b4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2ca:	08db      	lsrs	r3, r3, #3
 800b2cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b2d0:	68fa      	ldr	r2, [r7, #12]
 800b2d2:	fb02 f303 	mul.w	r3, r2, r3
 800b2d6:	ee07 3a90 	vmov	s15, r3
 800b2da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	f000 80e1 	beq.w	800b4ac <HAL_RCC_GetSysClockFreq+0x2b8>
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	2b02      	cmp	r3, #2
 800b2ee:	f000 8083 	beq.w	800b3f8 <HAL_RCC_GetSysClockFreq+0x204>
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	2b02      	cmp	r3, #2
 800b2f6:	f200 80a1 	bhi.w	800b43c <HAL_RCC_GetSysClockFreq+0x248>
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d003      	beq.n	800b308 <HAL_RCC_GetSysClockFreq+0x114>
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	2b01      	cmp	r3, #1
 800b304:	d056      	beq.n	800b3b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b306:	e099      	b.n	800b43c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b308:	4b6f      	ldr	r3, [pc, #444]	@ (800b4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f003 0320 	and.w	r3, r3, #32
 800b310:	2b00      	cmp	r3, #0
 800b312:	d02d      	beq.n	800b370 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b314:	4b6c      	ldr	r3, [pc, #432]	@ (800b4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	08db      	lsrs	r3, r3, #3
 800b31a:	f003 0303 	and.w	r3, r3, #3
 800b31e:	4a6b      	ldr	r2, [pc, #428]	@ (800b4cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b320:	fa22 f303 	lsr.w	r3, r2, r3
 800b324:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	ee07 3a90 	vmov	s15, r3
 800b32c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	ee07 3a90 	vmov	s15, r3
 800b336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b33a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b33e:	4b62      	ldr	r3, [pc, #392]	@ (800b4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b346:	ee07 3a90 	vmov	s15, r3
 800b34a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b34e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b352:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800b4d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b35a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b35e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b36a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b36e:	e087      	b.n	800b480 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	ee07 3a90 	vmov	s15, r3
 800b376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b37a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800b4dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800b37e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b382:	4b51      	ldr	r3, [pc, #324]	@ (800b4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b38a:	ee07 3a90 	vmov	s15, r3
 800b38e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b392:	ed97 6a02 	vldr	s12, [r7, #8]
 800b396:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800b4d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b39a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b39e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b3b2:	e065      	b.n	800b480 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	ee07 3a90 	vmov	s15, r3
 800b3ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3be:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800b4e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b3c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3c6:	4b40      	ldr	r3, [pc, #256]	@ (800b4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3ce:	ee07 3a90 	vmov	s15, r3
 800b3d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3d6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b3da:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b4d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b3de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b3f6:	e043      	b.n	800b480 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	ee07 3a90 	vmov	s15, r3
 800b3fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b402:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800b4e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b40a:	4b2f      	ldr	r3, [pc, #188]	@ (800b4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b40c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b40e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b412:	ee07 3a90 	vmov	s15, r3
 800b416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b41a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b41e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800b4d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b42a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b42e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b432:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b436:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b43a:	e021      	b.n	800b480 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	ee07 3a90 	vmov	s15, r3
 800b442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b446:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800b4e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b44a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b44e:	4b1e      	ldr	r3, [pc, #120]	@ (800b4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b456:	ee07 3a90 	vmov	s15, r3
 800b45a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b45e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b462:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800b4d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b46a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b46e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b47a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b47e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b480:	4b11      	ldr	r3, [pc, #68]	@ (800b4c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b484:	0a5b      	lsrs	r3, r3, #9
 800b486:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b48a:	3301      	adds	r3, #1
 800b48c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	ee07 3a90 	vmov	s15, r3
 800b494:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b498:	edd7 6a07 	vldr	s13, [r7, #28]
 800b49c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4a4:	ee17 3a90 	vmov	r3, s15
 800b4a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b4aa:	e005      	b.n	800b4b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	61bb      	str	r3, [r7, #24]
      break;
 800b4b0:	e002      	b.n	800b4b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b4b2:	4b07      	ldr	r3, [pc, #28]	@ (800b4d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b4b4:	61bb      	str	r3, [r7, #24]
      break;
 800b4b6:	bf00      	nop
  }

  return sysclockfreq;
 800b4b8:	69bb      	ldr	r3, [r7, #24]
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3724      	adds	r7, #36	@ 0x24
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c4:	4770      	bx	lr
 800b4c6:	bf00      	nop
 800b4c8:	58024400 	.word	0x58024400
 800b4cc:	03d09000 	.word	0x03d09000
 800b4d0:	003d0900 	.word	0x003d0900
 800b4d4:	016e3600 	.word	0x016e3600
 800b4d8:	46000000 	.word	0x46000000
 800b4dc:	4c742400 	.word	0x4c742400
 800b4e0:	4a742400 	.word	0x4a742400
 800b4e4:	4bb71b00 	.word	0x4bb71b00

0800b4e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b082      	sub	sp, #8
 800b4ec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800b4ee:	f7ff fe81 	bl	800b1f4 <HAL_RCC_GetSysClockFreq>
 800b4f2:	4602      	mov	r2, r0
 800b4f4:	4b10      	ldr	r3, [pc, #64]	@ (800b538 <HAL_RCC_GetHCLKFreq+0x50>)
 800b4f6:	699b      	ldr	r3, [r3, #24]
 800b4f8:	0a1b      	lsrs	r3, r3, #8
 800b4fa:	f003 030f 	and.w	r3, r3, #15
 800b4fe:	490f      	ldr	r1, [pc, #60]	@ (800b53c <HAL_RCC_GetHCLKFreq+0x54>)
 800b500:	5ccb      	ldrb	r3, [r1, r3]
 800b502:	f003 031f 	and.w	r3, r3, #31
 800b506:	fa22 f303 	lsr.w	r3, r2, r3
 800b50a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b50c:	4b0a      	ldr	r3, [pc, #40]	@ (800b538 <HAL_RCC_GetHCLKFreq+0x50>)
 800b50e:	699b      	ldr	r3, [r3, #24]
 800b510:	f003 030f 	and.w	r3, r3, #15
 800b514:	4a09      	ldr	r2, [pc, #36]	@ (800b53c <HAL_RCC_GetHCLKFreq+0x54>)
 800b516:	5cd3      	ldrb	r3, [r2, r3]
 800b518:	f003 031f 	and.w	r3, r3, #31
 800b51c:	687a      	ldr	r2, [r7, #4]
 800b51e:	fa22 f303 	lsr.w	r3, r2, r3
 800b522:	4a07      	ldr	r2, [pc, #28]	@ (800b540 <HAL_RCC_GetHCLKFreq+0x58>)
 800b524:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b526:	4a07      	ldr	r2, [pc, #28]	@ (800b544 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b52c:	4b04      	ldr	r3, [pc, #16]	@ (800b540 <HAL_RCC_GetHCLKFreq+0x58>)
 800b52e:	681b      	ldr	r3, [r3, #0]
}
 800b530:	4618      	mov	r0, r3
 800b532:	3708      	adds	r7, #8
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	58024400 	.word	0x58024400
 800b53c:	08019d54 	.word	0x08019d54
 800b540:	24000004 	.word	0x24000004
 800b544:	24000000 	.word	0x24000000

0800b548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800b54c:	f7ff ffcc 	bl	800b4e8 <HAL_RCC_GetHCLKFreq>
 800b550:	4602      	mov	r2, r0
 800b552:	4b06      	ldr	r3, [pc, #24]	@ (800b56c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b554:	69db      	ldr	r3, [r3, #28]
 800b556:	091b      	lsrs	r3, r3, #4
 800b558:	f003 0307 	and.w	r3, r3, #7
 800b55c:	4904      	ldr	r1, [pc, #16]	@ (800b570 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b55e:	5ccb      	ldrb	r3, [r1, r3]
 800b560:	f003 031f 	and.w	r3, r3, #31
 800b564:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b568:	4618      	mov	r0, r3
 800b56a:	bd80      	pop	{r7, pc}
 800b56c:	58024400 	.word	0x58024400
 800b570:	08019d54 	.word	0x08019d54

0800b574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800b578:	f7ff ffb6 	bl	800b4e8 <HAL_RCC_GetHCLKFreq>
 800b57c:	4602      	mov	r2, r0
 800b57e:	4b06      	ldr	r3, [pc, #24]	@ (800b598 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b580:	69db      	ldr	r3, [r3, #28]
 800b582:	0a1b      	lsrs	r3, r3, #8
 800b584:	f003 0307 	and.w	r3, r3, #7
 800b588:	4904      	ldr	r1, [pc, #16]	@ (800b59c <HAL_RCC_GetPCLK2Freq+0x28>)
 800b58a:	5ccb      	ldrb	r3, [r1, r3]
 800b58c:	f003 031f 	and.w	r3, r3, #31
 800b590:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b594:	4618      	mov	r0, r3
 800b596:	bd80      	pop	{r7, pc}
 800b598:	58024400 	.word	0x58024400
 800b59c:	08019d54 	.word	0x08019d54

0800b5a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b083      	sub	sp, #12
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	223f      	movs	r2, #63	@ 0x3f
 800b5ae:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b5b0:	4b1a      	ldr	r3, [pc, #104]	@ (800b61c <HAL_RCC_GetClockConfig+0x7c>)
 800b5b2:	691b      	ldr	r3, [r3, #16]
 800b5b4:	f003 0207 	and.w	r2, r3, #7
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 800b5bc:	4b17      	ldr	r3, [pc, #92]	@ (800b61c <HAL_RCC_GetClockConfig+0x7c>)
 800b5be:	699b      	ldr	r3, [r3, #24]
 800b5c0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 800b5c8:	4b14      	ldr	r3, [pc, #80]	@ (800b61c <HAL_RCC_GetClockConfig+0x7c>)
 800b5ca:	699b      	ldr	r3, [r3, #24]
 800b5cc:	f003 020f 	and.w	r2, r3, #15
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 800b5d4:	4b11      	ldr	r3, [pc, #68]	@ (800b61c <HAL_RCC_GetClockConfig+0x7c>)
 800b5d6:	699b      	ldr	r3, [r3, #24]
 800b5d8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 800b5e0:	4b0e      	ldr	r3, [pc, #56]	@ (800b61c <HAL_RCC_GetClockConfig+0x7c>)
 800b5e2:	69db      	ldr	r3, [r3, #28]
 800b5e4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 800b5ec:	4b0b      	ldr	r3, [pc, #44]	@ (800b61c <HAL_RCC_GetClockConfig+0x7c>)
 800b5ee:	69db      	ldr	r3, [r3, #28]
 800b5f0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 800b5f8:	4b08      	ldr	r3, [pc, #32]	@ (800b61c <HAL_RCC_GetClockConfig+0x7c>)
 800b5fa:	6a1b      	ldr	r3, [r3, #32]
 800b5fc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b604:	4b06      	ldr	r3, [pc, #24]	@ (800b620 <HAL_RCC_GetClockConfig+0x80>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f003 020f 	and.w	r2, r3, #15
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	601a      	str	r2, [r3, #0]
}
 800b610:	bf00      	nop
 800b612:	370c      	adds	r7, #12
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr
 800b61c:	58024400 	.word	0x58024400
 800b620:	52002000 	.word	0x52002000

0800b624 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b628:	b0c8      	sub	sp, #288	@ 0x120
 800b62a:	af00      	add	r7, sp, #0
 800b62c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b630:	2300      	movs	r3, #0
 800b632:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b636:	2300      	movs	r3, #0
 800b638:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b63c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b644:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800b648:	2500      	movs	r5, #0
 800b64a:	ea54 0305 	orrs.w	r3, r4, r5
 800b64e:	d049      	beq.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b650:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b654:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b656:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b65a:	d02f      	beq.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b65c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b660:	d828      	bhi.n	800b6b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b662:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b666:	d01a      	beq.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b668:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b66c:	d822      	bhi.n	800b6b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d003      	beq.n	800b67a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b672:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b676:	d007      	beq.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b678:	e01c      	b.n	800b6b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b67a:	4ba7      	ldr	r3, [pc, #668]	@ (800b918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b67c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b67e:	4aa6      	ldr	r2, [pc, #664]	@ (800b918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b680:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b684:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b686:	e01a      	b.n	800b6be <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b688:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b68c:	3308      	adds	r3, #8
 800b68e:	2102      	movs	r1, #2
 800b690:	4618      	mov	r0, r3
 800b692:	f001 fc43 	bl	800cf1c <RCCEx_PLL2_Config>
 800b696:	4603      	mov	r3, r0
 800b698:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b69c:	e00f      	b.n	800b6be <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b69e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6a2:	3328      	adds	r3, #40	@ 0x28
 800b6a4:	2102      	movs	r1, #2
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f001 fcea 	bl	800d080 <RCCEx_PLL3_Config>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b6b2:	e004      	b.n	800b6be <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b6ba:	e000      	b.n	800b6be <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b6bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6be:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d10a      	bne.n	800b6dc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b6c6:	4b94      	ldr	r3, [pc, #592]	@ (800b918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b6c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6ca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b6ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6d4:	4a90      	ldr	r2, [pc, #576]	@ (800b918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b6d6:	430b      	orrs	r3, r1
 800b6d8:	6513      	str	r3, [r2, #80]	@ 0x50
 800b6da:	e003      	b.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b6e0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b6e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ec:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800b6f0:	f04f 0900 	mov.w	r9, #0
 800b6f4:	ea58 0309 	orrs.w	r3, r8, r9
 800b6f8:	d047      	beq.n	800b78a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b6fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b700:	2b04      	cmp	r3, #4
 800b702:	d82a      	bhi.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b704:	a201      	add	r2, pc, #4	@ (adr r2, 800b70c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b70a:	bf00      	nop
 800b70c:	0800b721 	.word	0x0800b721
 800b710:	0800b72f 	.word	0x0800b72f
 800b714:	0800b745 	.word	0x0800b745
 800b718:	0800b763 	.word	0x0800b763
 800b71c:	0800b763 	.word	0x0800b763
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b720:	4b7d      	ldr	r3, [pc, #500]	@ (800b918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b724:	4a7c      	ldr	r2, [pc, #496]	@ (800b918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b726:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b72a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b72c:	e01a      	b.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b72e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b732:	3308      	adds	r3, #8
 800b734:	2100      	movs	r1, #0
 800b736:	4618      	mov	r0, r3
 800b738:	f001 fbf0 	bl	800cf1c <RCCEx_PLL2_Config>
 800b73c:	4603      	mov	r3, r0
 800b73e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b742:	e00f      	b.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b744:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b748:	3328      	adds	r3, #40	@ 0x28
 800b74a:	2100      	movs	r1, #0
 800b74c:	4618      	mov	r0, r3
 800b74e:	f001 fc97 	bl	800d080 <RCCEx_PLL3_Config>
 800b752:	4603      	mov	r3, r0
 800b754:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b758:	e004      	b.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b75a:	2301      	movs	r3, #1
 800b75c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b760:	e000      	b.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b762:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b764:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d10a      	bne.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b76c:	4b6a      	ldr	r3, [pc, #424]	@ (800b918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b76e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b770:	f023 0107 	bic.w	r1, r3, #7
 800b774:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b77a:	4a67      	ldr	r2, [pc, #412]	@ (800b918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b77c:	430b      	orrs	r3, r1
 800b77e:	6513      	str	r3, [r2, #80]	@ 0x50
 800b780:	e003      	b.n	800b78a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b782:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b786:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800b78a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b792:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800b796:	f04f 0b00 	mov.w	fp, #0
 800b79a:	ea5a 030b 	orrs.w	r3, sl, fp
 800b79e:	d054      	beq.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800b7a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7a6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800b7aa:	d036      	beq.n	800b81a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800b7ac:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800b7b0:	d82f      	bhi.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b7b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b7b6:	d032      	beq.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b7b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b7bc:	d829      	bhi.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b7be:	2bc0      	cmp	r3, #192	@ 0xc0
 800b7c0:	d02f      	beq.n	800b822 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800b7c2:	2bc0      	cmp	r3, #192	@ 0xc0
 800b7c4:	d825      	bhi.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b7c6:	2b80      	cmp	r3, #128	@ 0x80
 800b7c8:	d018      	beq.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800b7ca:	2b80      	cmp	r3, #128	@ 0x80
 800b7cc:	d821      	bhi.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d002      	beq.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800b7d2:	2b40      	cmp	r3, #64	@ 0x40
 800b7d4:	d007      	beq.n	800b7e6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800b7d6:	e01c      	b.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7d8:	4b4f      	ldr	r3, [pc, #316]	@ (800b918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7dc:	4a4e      	ldr	r2, [pc, #312]	@ (800b918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b7e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b7e4:	e01e      	b.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b7e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7ea:	3308      	adds	r3, #8
 800b7ec:	2100      	movs	r1, #0
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f001 fb94 	bl	800cf1c <RCCEx_PLL2_Config>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b7fa:	e013      	b.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b7fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b800:	3328      	adds	r3, #40	@ 0x28
 800b802:	2100      	movs	r1, #0
 800b804:	4618      	mov	r0, r3
 800b806:	f001 fc3b 	bl	800d080 <RCCEx_PLL3_Config>
 800b80a:	4603      	mov	r3, r0
 800b80c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b810:	e008      	b.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b812:	2301      	movs	r3, #1
 800b814:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b818:	e004      	b.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b81a:	bf00      	nop
 800b81c:	e002      	b.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b81e:	bf00      	nop
 800b820:	e000      	b.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b822:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b824:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d10a      	bne.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800b82c:	4b3a      	ldr	r3, [pc, #232]	@ (800b918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b82e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b830:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800b834:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b83a:	4a37      	ldr	r2, [pc, #220]	@ (800b918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b83c:	430b      	orrs	r3, r1
 800b83e:	6513      	str	r3, [r2, #80]	@ 0x50
 800b840:	e003      	b.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b842:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b846:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800b84a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b852:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800b856:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b85a:	2300      	movs	r3, #0
 800b85c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b860:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800b864:	460b      	mov	r3, r1
 800b866:	4313      	orrs	r3, r2
 800b868:	d05c      	beq.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800b86a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b86e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b870:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800b874:	d03b      	beq.n	800b8ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b876:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800b87a:	d834      	bhi.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b87c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b880:	d037      	beq.n	800b8f2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800b882:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b886:	d82e      	bhi.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b888:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b88c:	d033      	beq.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b88e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b892:	d828      	bhi.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b894:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b898:	d01a      	beq.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800b89a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b89e:	d822      	bhi.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d003      	beq.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0x288>
 800b8a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b8a8:	d007      	beq.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0x296>
 800b8aa:	e01c      	b.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8ac:	4b1a      	ldr	r3, [pc, #104]	@ (800b918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b8ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8b0:	4a19      	ldr	r2, [pc, #100]	@ (800b918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b8b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b8b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b8b8:	e01e      	b.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b8ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8be:	3308      	adds	r3, #8
 800b8c0:	2100      	movs	r1, #0
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f001 fb2a 	bl	800cf1c <RCCEx_PLL2_Config>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b8ce:	e013      	b.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b8d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8d4:	3328      	adds	r3, #40	@ 0x28
 800b8d6:	2100      	movs	r1, #0
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f001 fbd1 	bl	800d080 <RCCEx_PLL3_Config>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b8e4:	e008      	b.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b8ec:	e004      	b.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b8ee:	bf00      	nop
 800b8f0:	e002      	b.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b8f2:	bf00      	nop
 800b8f4:	e000      	b.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b8f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d10d      	bne.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800b900:	4b05      	ldr	r3, [pc, #20]	@ (800b918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b902:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b904:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800b908:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b90c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b90e:	4a02      	ldr	r2, [pc, #8]	@ (800b918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b910:	430b      	orrs	r3, r1
 800b912:	6513      	str	r3, [r2, #80]	@ 0x50
 800b914:	e006      	b.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800b916:	bf00      	nop
 800b918:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b91c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b920:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b924:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b92c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b930:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b934:	2300      	movs	r3, #0
 800b936:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b93a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800b93e:	460b      	mov	r3, r1
 800b940:	4313      	orrs	r3, r2
 800b942:	d03a      	beq.n	800b9ba <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b944:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b94a:	2b30      	cmp	r3, #48	@ 0x30
 800b94c:	d01f      	beq.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800b94e:	2b30      	cmp	r3, #48	@ 0x30
 800b950:	d819      	bhi.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b952:	2b20      	cmp	r3, #32
 800b954:	d00c      	beq.n	800b970 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800b956:	2b20      	cmp	r3, #32
 800b958:	d815      	bhi.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d019      	beq.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800b95e:	2b10      	cmp	r3, #16
 800b960:	d111      	bne.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b962:	4bae      	ldr	r3, [pc, #696]	@ (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b966:	4aad      	ldr	r2, [pc, #692]	@ (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b968:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b96c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b96e:	e011      	b.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b970:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b974:	3308      	adds	r3, #8
 800b976:	2102      	movs	r1, #2
 800b978:	4618      	mov	r0, r3
 800b97a:	f001 facf 	bl	800cf1c <RCCEx_PLL2_Config>
 800b97e:	4603      	mov	r3, r0
 800b980:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b984:	e006      	b.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b986:	2301      	movs	r3, #1
 800b988:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b98c:	e002      	b.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800b98e:	bf00      	nop
 800b990:	e000      	b.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800b992:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b994:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d10a      	bne.n	800b9b2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b99c:	4b9f      	ldr	r3, [pc, #636]	@ (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b99e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9a0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800b9a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9aa:	4a9c      	ldr	r2, [pc, #624]	@ (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9ac:	430b      	orrs	r3, r1
 800b9ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b9b0:	e003      	b.n	800b9ba <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b9b6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b9ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800b9c6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b9d0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800b9d4:	460b      	mov	r3, r1
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	d051      	beq.n	800ba7e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b9da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b9e4:	d035      	beq.n	800ba52 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800b9e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b9ea:	d82e      	bhi.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b9ec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b9f0:	d031      	beq.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800b9f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b9f6:	d828      	bhi.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b9f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b9fc:	d01a      	beq.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800b9fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba02:	d822      	bhi.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0x426>
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d003      	beq.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800ba08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba0c:	d007      	beq.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800ba0e:	e01c      	b.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba10:	4b82      	ldr	r3, [pc, #520]	@ (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba14:	4a81      	ldr	r2, [pc, #516]	@ (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ba1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ba1c:	e01c      	b.n	800ba58 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba22:	3308      	adds	r3, #8
 800ba24:	2100      	movs	r1, #0
 800ba26:	4618      	mov	r0, r3
 800ba28:	f001 fa78 	bl	800cf1c <RCCEx_PLL2_Config>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ba32:	e011      	b.n	800ba58 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ba34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba38:	3328      	adds	r3, #40	@ 0x28
 800ba3a:	2100      	movs	r1, #0
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f001 fb1f 	bl	800d080 <RCCEx_PLL3_Config>
 800ba42:	4603      	mov	r3, r0
 800ba44:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ba48:	e006      	b.n	800ba58 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ba50:	e002      	b.n	800ba58 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800ba52:	bf00      	nop
 800ba54:	e000      	b.n	800ba58 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800ba56:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d10a      	bne.n	800ba76 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ba60:	4b6e      	ldr	r3, [pc, #440]	@ (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba64:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800ba68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba6e:	4a6b      	ldr	r2, [pc, #428]	@ (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba70:	430b      	orrs	r3, r1
 800ba72:	6513      	str	r3, [r2, #80]	@ 0x50
 800ba74:	e003      	b.n	800ba7e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba76:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ba7a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ba7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba86:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800ba8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ba8e:	2300      	movs	r3, #0
 800ba90:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800ba94:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800ba98:	460b      	mov	r3, r1
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	d053      	beq.n	800bb46 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ba9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800baa2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800baa4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800baa8:	d033      	beq.n	800bb12 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800baaa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800baae:	d82c      	bhi.n	800bb0a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bab0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bab4:	d02f      	beq.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800bab6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800baba:	d826      	bhi.n	800bb0a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800babc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bac0:	d02b      	beq.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bac2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bac6:	d820      	bhi.n	800bb0a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bac8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bacc:	d012      	beq.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800bace:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bad2:	d81a      	bhi.n	800bb0a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d022      	beq.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800bad8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800badc:	d115      	bne.n	800bb0a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bade:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bae2:	3308      	adds	r3, #8
 800bae4:	2101      	movs	r1, #1
 800bae6:	4618      	mov	r0, r3
 800bae8:	f001 fa18 	bl	800cf1c <RCCEx_PLL2_Config>
 800baec:	4603      	mov	r3, r0
 800baee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800baf2:	e015      	b.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800baf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800baf8:	3328      	adds	r3, #40	@ 0x28
 800bafa:	2101      	movs	r1, #1
 800bafc:	4618      	mov	r0, r3
 800bafe:	f001 fabf 	bl	800d080 <RCCEx_PLL3_Config>
 800bb02:	4603      	mov	r3, r0
 800bb04:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bb08:	e00a      	b.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bb10:	e006      	b.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bb12:	bf00      	nop
 800bb14:	e004      	b.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bb16:	bf00      	nop
 800bb18:	e002      	b.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bb1a:	bf00      	nop
 800bb1c:	e000      	b.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bb1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb20:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d10a      	bne.n	800bb3e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bb28:	4b3c      	ldr	r3, [pc, #240]	@ (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb2c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800bb30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bb36:	4a39      	ldr	r2, [pc, #228]	@ (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb38:	430b      	orrs	r3, r1
 800bb3a:	6513      	str	r3, [r2, #80]	@ 0x50
 800bb3c:	e003      	b.n	800bb46 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb3e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bb42:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bb46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800bb52:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bb56:	2300      	movs	r3, #0
 800bb58:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bb5c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800bb60:	460b      	mov	r3, r1
 800bb62:	4313      	orrs	r3, r2
 800bb64:	d060      	beq.n	800bc28 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800bb66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bb6e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800bb72:	d039      	beq.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800bb74:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800bb78:	d832      	bhi.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bb7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bb7e:	d035      	beq.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800bb80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bb84:	d82c      	bhi.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bb86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb8a:	d031      	beq.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800bb8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb90:	d826      	bhi.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bb92:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bb96:	d02d      	beq.n	800bbf4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800bb98:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bb9c:	d820      	bhi.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bb9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bba2:	d012      	beq.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800bba4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bba8:	d81a      	bhi.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d024      	beq.n	800bbf8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800bbae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bbb2:	d115      	bne.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bbb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbb8:	3308      	adds	r3, #8
 800bbba:	2101      	movs	r1, #1
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f001 f9ad 	bl	800cf1c <RCCEx_PLL2_Config>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bbc8:	e017      	b.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bbca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbce:	3328      	adds	r3, #40	@ 0x28
 800bbd0:	2101      	movs	r1, #1
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f001 fa54 	bl	800d080 <RCCEx_PLL3_Config>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bbde:	e00c      	b.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bbe6:	e008      	b.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bbe8:	bf00      	nop
 800bbea:	e006      	b.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bbec:	bf00      	nop
 800bbee:	e004      	b.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bbf0:	bf00      	nop
 800bbf2:	e002      	b.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bbf4:	bf00      	nop
 800bbf6:	e000      	b.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bbf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbfa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d10e      	bne.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bc02:	4b06      	ldr	r3, [pc, #24]	@ (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc06:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800bc0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bc12:	4a02      	ldr	r2, [pc, #8]	@ (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc14:	430b      	orrs	r3, r1
 800bc16:	6593      	str	r3, [r2, #88]	@ 0x58
 800bc18:	e006      	b.n	800bc28 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800bc1a:	bf00      	nop
 800bc1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc20:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bc24:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bc28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc30:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800bc34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bc38:	2300      	movs	r3, #0
 800bc3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800bc3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800bc42:	460b      	mov	r3, r1
 800bc44:	4313      	orrs	r3, r2
 800bc46:	d037      	beq.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bc48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bc4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc52:	d00e      	beq.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800bc54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc58:	d816      	bhi.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d018      	beq.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800bc5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bc62:	d111      	bne.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc64:	4bc4      	ldr	r3, [pc, #784]	@ (800bf78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc68:	4ac3      	ldr	r2, [pc, #780]	@ (800bf78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bc70:	e00f      	b.n	800bc92 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc76:	3308      	adds	r3, #8
 800bc78:	2101      	movs	r1, #1
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f001 f94e 	bl	800cf1c <RCCEx_PLL2_Config>
 800bc80:	4603      	mov	r3, r0
 800bc82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bc86:	e004      	b.n	800bc92 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc88:	2301      	movs	r3, #1
 800bc8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bc8e:	e000      	b.n	800bc92 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800bc90:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc92:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d10a      	bne.n	800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bc9a:	4bb7      	ldr	r3, [pc, #732]	@ (800bf78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc9e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800bca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bca6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bca8:	4ab3      	ldr	r2, [pc, #716]	@ (800bf78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcaa:	430b      	orrs	r3, r1
 800bcac:	6513      	str	r3, [r2, #80]	@ 0x50
 800bcae:	e003      	b.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcb0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bcb4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bcb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800bcc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bcc8:	2300      	movs	r3, #0
 800bcca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bcce:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800bcd2:	460b      	mov	r3, r1
 800bcd4:	4313      	orrs	r3, r2
 800bcd6:	d039      	beq.n	800bd4c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bcd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bcde:	2b03      	cmp	r3, #3
 800bce0:	d81c      	bhi.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800bce2:	a201      	add	r2, pc, #4	@ (adr r2, 800bce8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800bce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bce8:	0800bd25 	.word	0x0800bd25
 800bcec:	0800bcf9 	.word	0x0800bcf9
 800bcf0:	0800bd07 	.word	0x0800bd07
 800bcf4:	0800bd25 	.word	0x0800bd25
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcf8:	4b9f      	ldr	r3, [pc, #636]	@ (800bf78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcfc:	4a9e      	ldr	r2, [pc, #632]	@ (800bf78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bd02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bd04:	e00f      	b.n	800bd26 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bd06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd0a:	3308      	adds	r3, #8
 800bd0c:	2102      	movs	r1, #2
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f001 f904 	bl	800cf1c <RCCEx_PLL2_Config>
 800bd14:	4603      	mov	r3, r0
 800bd16:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bd1a:	e004      	b.n	800bd26 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bd22:	e000      	b.n	800bd26 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800bd24:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd26:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d10a      	bne.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bd2e:	4b92      	ldr	r3, [pc, #584]	@ (800bf78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd32:	f023 0103 	bic.w	r1, r3, #3
 800bd36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bd3c:	4a8e      	ldr	r2, [pc, #568]	@ (800bf78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd3e:	430b      	orrs	r3, r1
 800bd40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bd42:	e003      	b.n	800bd4c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd44:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bd48:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bd4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd54:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800bd58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bd62:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800bd66:	460b      	mov	r3, r1
 800bd68:	4313      	orrs	r3, r2
 800bd6a:	f000 8099 	beq.w	800bea0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bd6e:	4b83      	ldr	r3, [pc, #524]	@ (800bf7c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	4a82      	ldr	r2, [pc, #520]	@ (800bf7c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bd74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bd78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bd7a:	f7fa fd45 	bl	8006808 <HAL_GetTick>
 800bd7e:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bd82:	e00b      	b.n	800bd9c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bd84:	f7fa fd40 	bl	8006808 <HAL_GetTick>
 800bd88:	4602      	mov	r2, r0
 800bd8a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800bd8e:	1ad3      	subs	r3, r2, r3
 800bd90:	2b64      	cmp	r3, #100	@ 0x64
 800bd92:	d903      	bls.n	800bd9c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800bd94:	2303      	movs	r3, #3
 800bd96:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bd9a:	e005      	b.n	800bda8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bd9c:	4b77      	ldr	r3, [pc, #476]	@ (800bf7c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d0ed      	beq.n	800bd84 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800bda8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d173      	bne.n	800be98 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bdb0:	4b71      	ldr	r3, [pc, #452]	@ (800bf78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdb2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800bdb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdb8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bdbc:	4053      	eors	r3, r2
 800bdbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d015      	beq.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bdc6:	4b6c      	ldr	r3, [pc, #432]	@ (800bf78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bdca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bdce:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bdd2:	4b69      	ldr	r3, [pc, #420]	@ (800bf78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bdd6:	4a68      	ldr	r2, [pc, #416]	@ (800bf78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bddc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bdde:	4b66      	ldr	r3, [pc, #408]	@ (800bf78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bde0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bde2:	4a65      	ldr	r2, [pc, #404]	@ (800bf78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bde4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bde8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bdea:	4a63      	ldr	r2, [pc, #396]	@ (800bf78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bdf0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bdf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdf6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bdfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bdfe:	d118      	bne.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be00:	f7fa fd02 	bl	8006808 <HAL_GetTick>
 800be04:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800be08:	e00d      	b.n	800be26 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800be0a:	f7fa fcfd 	bl	8006808 <HAL_GetTick>
 800be0e:	4602      	mov	r2, r0
 800be10:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800be14:	1ad2      	subs	r2, r2, r3
 800be16:	f241 3388 	movw	r3, #5000	@ 0x1388
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d903      	bls.n	800be26 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800be1e:	2303      	movs	r3, #3
 800be20:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800be24:	e005      	b.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800be26:	4b54      	ldr	r3, [pc, #336]	@ (800bf78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be2a:	f003 0302 	and.w	r3, r3, #2
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d0eb      	beq.n	800be0a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800be32:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800be36:	2b00      	cmp	r3, #0
 800be38:	d129      	bne.n	800be8e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800be3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800be42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800be46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800be4a:	d10e      	bne.n	800be6a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800be4c:	4b4a      	ldr	r3, [pc, #296]	@ (800bf78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be4e:	691b      	ldr	r3, [r3, #16]
 800be50:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800be54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800be5c:	091a      	lsrs	r2, r3, #4
 800be5e:	4b48      	ldr	r3, [pc, #288]	@ (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800be60:	4013      	ands	r3, r2
 800be62:	4a45      	ldr	r2, [pc, #276]	@ (800bf78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be64:	430b      	orrs	r3, r1
 800be66:	6113      	str	r3, [r2, #16]
 800be68:	e005      	b.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800be6a:	4b43      	ldr	r3, [pc, #268]	@ (800bf78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be6c:	691b      	ldr	r3, [r3, #16]
 800be6e:	4a42      	ldr	r2, [pc, #264]	@ (800bf78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be70:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800be74:	6113      	str	r3, [r2, #16]
 800be76:	4b40      	ldr	r3, [pc, #256]	@ (800bf78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be78:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800be7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800be82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800be86:	4a3c      	ldr	r2, [pc, #240]	@ (800bf78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be88:	430b      	orrs	r3, r1
 800be8a:	6713      	str	r3, [r2, #112]	@ 0x70
 800be8c:	e008      	b.n	800bea0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800be8e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800be92:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800be96:	e003      	b.n	800bea0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be98:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800be9c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea8:	f002 0301 	and.w	r3, r2, #1
 800beac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800beb0:	2300      	movs	r3, #0
 800beb2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800beb6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800beba:	460b      	mov	r3, r1
 800bebc:	4313      	orrs	r3, r2
 800bebe:	f000 8090 	beq.w	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800bec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800beca:	2b28      	cmp	r3, #40	@ 0x28
 800becc:	d870      	bhi.n	800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800bece:	a201      	add	r2, pc, #4	@ (adr r2, 800bed4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800bed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bed4:	0800bfb9 	.word	0x0800bfb9
 800bed8:	0800bfb1 	.word	0x0800bfb1
 800bedc:	0800bfb1 	.word	0x0800bfb1
 800bee0:	0800bfb1 	.word	0x0800bfb1
 800bee4:	0800bfb1 	.word	0x0800bfb1
 800bee8:	0800bfb1 	.word	0x0800bfb1
 800beec:	0800bfb1 	.word	0x0800bfb1
 800bef0:	0800bfb1 	.word	0x0800bfb1
 800bef4:	0800bf85 	.word	0x0800bf85
 800bef8:	0800bfb1 	.word	0x0800bfb1
 800befc:	0800bfb1 	.word	0x0800bfb1
 800bf00:	0800bfb1 	.word	0x0800bfb1
 800bf04:	0800bfb1 	.word	0x0800bfb1
 800bf08:	0800bfb1 	.word	0x0800bfb1
 800bf0c:	0800bfb1 	.word	0x0800bfb1
 800bf10:	0800bfb1 	.word	0x0800bfb1
 800bf14:	0800bf9b 	.word	0x0800bf9b
 800bf18:	0800bfb1 	.word	0x0800bfb1
 800bf1c:	0800bfb1 	.word	0x0800bfb1
 800bf20:	0800bfb1 	.word	0x0800bfb1
 800bf24:	0800bfb1 	.word	0x0800bfb1
 800bf28:	0800bfb1 	.word	0x0800bfb1
 800bf2c:	0800bfb1 	.word	0x0800bfb1
 800bf30:	0800bfb1 	.word	0x0800bfb1
 800bf34:	0800bfb9 	.word	0x0800bfb9
 800bf38:	0800bfb1 	.word	0x0800bfb1
 800bf3c:	0800bfb1 	.word	0x0800bfb1
 800bf40:	0800bfb1 	.word	0x0800bfb1
 800bf44:	0800bfb1 	.word	0x0800bfb1
 800bf48:	0800bfb1 	.word	0x0800bfb1
 800bf4c:	0800bfb1 	.word	0x0800bfb1
 800bf50:	0800bfb1 	.word	0x0800bfb1
 800bf54:	0800bfb9 	.word	0x0800bfb9
 800bf58:	0800bfb1 	.word	0x0800bfb1
 800bf5c:	0800bfb1 	.word	0x0800bfb1
 800bf60:	0800bfb1 	.word	0x0800bfb1
 800bf64:	0800bfb1 	.word	0x0800bfb1
 800bf68:	0800bfb1 	.word	0x0800bfb1
 800bf6c:	0800bfb1 	.word	0x0800bfb1
 800bf70:	0800bfb1 	.word	0x0800bfb1
 800bf74:	0800bfb9 	.word	0x0800bfb9
 800bf78:	58024400 	.word	0x58024400
 800bf7c:	58024800 	.word	0x58024800
 800bf80:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf88:	3308      	adds	r3, #8
 800bf8a:	2101      	movs	r1, #1
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f000 ffc5 	bl	800cf1c <RCCEx_PLL2_Config>
 800bf92:	4603      	mov	r3, r0
 800bf94:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bf98:	e00f      	b.n	800bfba <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf9e:	3328      	adds	r3, #40	@ 0x28
 800bfa0:	2101      	movs	r1, #1
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f001 f86c 	bl	800d080 <RCCEx_PLL3_Config>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bfae:	e004      	b.n	800bfba <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bfb6:	e000      	b.n	800bfba <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800bfb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bfba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d10b      	bne.n	800bfda <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bfc2:	4bc0      	ldr	r3, [pc, #768]	@ (800c2c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bfc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfc6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800bfca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bfce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bfd2:	4abc      	ldr	r2, [pc, #752]	@ (800c2c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bfd4:	430b      	orrs	r3, r1
 800bfd6:	6553      	str	r3, [r2, #84]	@ 0x54
 800bfd8:	e003      	b.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfda:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bfde:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bfe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfea:	f002 0302 	and.w	r3, r2, #2
 800bfee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bff2:	2300      	movs	r3, #0
 800bff4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800bff8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800bffc:	460b      	mov	r3, r1
 800bffe:	4313      	orrs	r3, r2
 800c000:	d043      	beq.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c002:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c006:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c00a:	2b05      	cmp	r3, #5
 800c00c:	d824      	bhi.n	800c058 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800c00e:	a201      	add	r2, pc, #4	@ (adr r2, 800c014 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800c010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c014:	0800c061 	.word	0x0800c061
 800c018:	0800c02d 	.word	0x0800c02d
 800c01c:	0800c043 	.word	0x0800c043
 800c020:	0800c061 	.word	0x0800c061
 800c024:	0800c061 	.word	0x0800c061
 800c028:	0800c061 	.word	0x0800c061
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c02c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c030:	3308      	adds	r3, #8
 800c032:	2101      	movs	r1, #1
 800c034:	4618      	mov	r0, r3
 800c036:	f000 ff71 	bl	800cf1c <RCCEx_PLL2_Config>
 800c03a:	4603      	mov	r3, r0
 800c03c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c040:	e00f      	b.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c042:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c046:	3328      	adds	r3, #40	@ 0x28
 800c048:	2101      	movs	r1, #1
 800c04a:	4618      	mov	r0, r3
 800c04c:	f001 f818 	bl	800d080 <RCCEx_PLL3_Config>
 800c050:	4603      	mov	r3, r0
 800c052:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c056:	e004      	b.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c058:	2301      	movs	r3, #1
 800c05a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c05e:	e000      	b.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800c060:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c062:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c066:	2b00      	cmp	r3, #0
 800c068:	d10b      	bne.n	800c082 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c06a:	4b96      	ldr	r3, [pc, #600]	@ (800c2c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c06c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c06e:	f023 0107 	bic.w	r1, r3, #7
 800c072:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c076:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c07a:	4a92      	ldr	r2, [pc, #584]	@ (800c2c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c07c:	430b      	orrs	r3, r1
 800c07e:	6553      	str	r3, [r2, #84]	@ 0x54
 800c080:	e003      	b.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c082:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c086:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c08a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c092:	f002 0304 	and.w	r3, r2, #4
 800c096:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c09a:	2300      	movs	r3, #0
 800c09c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c0a0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800c0a4:	460b      	mov	r3, r1
 800c0a6:	4313      	orrs	r3, r2
 800c0a8:	d043      	beq.n	800c132 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c0aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c0b2:	2b05      	cmp	r3, #5
 800c0b4:	d824      	bhi.n	800c100 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800c0b6:	a201      	add	r2, pc, #4	@ (adr r2, 800c0bc <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800c0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0bc:	0800c109 	.word	0x0800c109
 800c0c0:	0800c0d5 	.word	0x0800c0d5
 800c0c4:	0800c0eb 	.word	0x0800c0eb
 800c0c8:	0800c109 	.word	0x0800c109
 800c0cc:	0800c109 	.word	0x0800c109
 800c0d0:	0800c109 	.word	0x0800c109
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c0d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0d8:	3308      	adds	r3, #8
 800c0da:	2101      	movs	r1, #1
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f000 ff1d 	bl	800cf1c <RCCEx_PLL2_Config>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c0e8:	e00f      	b.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c0ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0ee:	3328      	adds	r3, #40	@ 0x28
 800c0f0:	2101      	movs	r1, #1
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f000 ffc4 	bl	800d080 <RCCEx_PLL3_Config>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c0fe:	e004      	b.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c100:	2301      	movs	r3, #1
 800c102:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c106:	e000      	b.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800c108:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c10a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d10b      	bne.n	800c12a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c112:	4b6c      	ldr	r3, [pc, #432]	@ (800c2c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c116:	f023 0107 	bic.w	r1, r3, #7
 800c11a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c11e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c122:	4a68      	ldr	r2, [pc, #416]	@ (800c2c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c124:	430b      	orrs	r3, r1
 800c126:	6593      	str	r3, [r2, #88]	@ 0x58
 800c128:	e003      	b.n	800c132 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c12a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c12e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c132:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13a:	f002 0320 	and.w	r3, r2, #32
 800c13e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c142:	2300      	movs	r3, #0
 800c144:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c148:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c14c:	460b      	mov	r3, r1
 800c14e:	4313      	orrs	r3, r2
 800c150:	d055      	beq.n	800c1fe <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c152:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c156:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c15a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c15e:	d033      	beq.n	800c1c8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c160:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c164:	d82c      	bhi.n	800c1c0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c16a:	d02f      	beq.n	800c1cc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c16c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c170:	d826      	bhi.n	800c1c0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c172:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c176:	d02b      	beq.n	800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c178:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c17c:	d820      	bhi.n	800c1c0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c17e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c182:	d012      	beq.n	800c1aa <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800c184:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c188:	d81a      	bhi.n	800c1c0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d022      	beq.n	800c1d4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800c18e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c192:	d115      	bne.n	800c1c0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c194:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c198:	3308      	adds	r3, #8
 800c19a:	2100      	movs	r1, #0
 800c19c:	4618      	mov	r0, r3
 800c19e:	f000 febd 	bl	800cf1c <RCCEx_PLL2_Config>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c1a8:	e015      	b.n	800c1d6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c1aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1ae:	3328      	adds	r3, #40	@ 0x28
 800c1b0:	2102      	movs	r1, #2
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f000 ff64 	bl	800d080 <RCCEx_PLL3_Config>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c1be:	e00a      	b.n	800c1d6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c1c6:	e006      	b.n	800c1d6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c1c8:	bf00      	nop
 800c1ca:	e004      	b.n	800c1d6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c1cc:	bf00      	nop
 800c1ce:	e002      	b.n	800c1d6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c1d0:	bf00      	nop
 800c1d2:	e000      	b.n	800c1d6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c1d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1d6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d10b      	bne.n	800c1f6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c1de:	4b39      	ldr	r3, [pc, #228]	@ (800c2c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c1e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1e2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c1e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c1ee:	4a35      	ldr	r2, [pc, #212]	@ (800c2c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c1f0:	430b      	orrs	r3, r1
 800c1f2:	6553      	str	r3, [r2, #84]	@ 0x54
 800c1f4:	e003      	b.n	800c1fe <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c1fa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c1fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c206:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800c20a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c20e:	2300      	movs	r3, #0
 800c210:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c214:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800c218:	460b      	mov	r3, r1
 800c21a:	4313      	orrs	r3, r2
 800c21c:	d058      	beq.n	800c2d0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c21e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c222:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c226:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c22a:	d033      	beq.n	800c294 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c22c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c230:	d82c      	bhi.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c232:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c236:	d02f      	beq.n	800c298 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c238:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c23c:	d826      	bhi.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c23e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c242:	d02b      	beq.n	800c29c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c244:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c248:	d820      	bhi.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c24a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c24e:	d012      	beq.n	800c276 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800c250:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c254:	d81a      	bhi.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c256:	2b00      	cmp	r3, #0
 800c258:	d022      	beq.n	800c2a0 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800c25a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c25e:	d115      	bne.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c260:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c264:	3308      	adds	r3, #8
 800c266:	2100      	movs	r1, #0
 800c268:	4618      	mov	r0, r3
 800c26a:	f000 fe57 	bl	800cf1c <RCCEx_PLL2_Config>
 800c26e:	4603      	mov	r3, r0
 800c270:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c274:	e015      	b.n	800c2a2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c276:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c27a:	3328      	adds	r3, #40	@ 0x28
 800c27c:	2102      	movs	r1, #2
 800c27e:	4618      	mov	r0, r3
 800c280:	f000 fefe 	bl	800d080 <RCCEx_PLL3_Config>
 800c284:	4603      	mov	r3, r0
 800c286:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c28a:	e00a      	b.n	800c2a2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c28c:	2301      	movs	r3, #1
 800c28e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c292:	e006      	b.n	800c2a2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c294:	bf00      	nop
 800c296:	e004      	b.n	800c2a2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c298:	bf00      	nop
 800c29a:	e002      	b.n	800c2a2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c29c:	bf00      	nop
 800c29e:	e000      	b.n	800c2a2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c2a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c2a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d10e      	bne.n	800c2c8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c2aa:	4b06      	ldr	r3, [pc, #24]	@ (800c2c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c2ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c2ae:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800c2b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c2ba:	4a02      	ldr	r2, [pc, #8]	@ (800c2c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c2bc:	430b      	orrs	r3, r1
 800c2be:	6593      	str	r3, [r2, #88]	@ 0x58
 800c2c0:	e006      	b.n	800c2d0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800c2c2:	bf00      	nop
 800c2c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c2cc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c2d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800c2dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c2e6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800c2ea:	460b      	mov	r3, r1
 800c2ec:	4313      	orrs	r3, r2
 800c2ee:	d055      	beq.n	800c39c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c2f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c2f8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c2fc:	d033      	beq.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c2fe:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c302:	d82c      	bhi.n	800c35e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c304:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c308:	d02f      	beq.n	800c36a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c30a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c30e:	d826      	bhi.n	800c35e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c310:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c314:	d02b      	beq.n	800c36e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c316:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c31a:	d820      	bhi.n	800c35e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c31c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c320:	d012      	beq.n	800c348 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800c322:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c326:	d81a      	bhi.n	800c35e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d022      	beq.n	800c372 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800c32c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c330:	d115      	bne.n	800c35e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c332:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c336:	3308      	adds	r3, #8
 800c338:	2100      	movs	r1, #0
 800c33a:	4618      	mov	r0, r3
 800c33c:	f000 fdee 	bl	800cf1c <RCCEx_PLL2_Config>
 800c340:	4603      	mov	r3, r0
 800c342:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c346:	e015      	b.n	800c374 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c348:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c34c:	3328      	adds	r3, #40	@ 0x28
 800c34e:	2102      	movs	r1, #2
 800c350:	4618      	mov	r0, r3
 800c352:	f000 fe95 	bl	800d080 <RCCEx_PLL3_Config>
 800c356:	4603      	mov	r3, r0
 800c358:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c35c:	e00a      	b.n	800c374 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c35e:	2301      	movs	r3, #1
 800c360:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c364:	e006      	b.n	800c374 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c366:	bf00      	nop
 800c368:	e004      	b.n	800c374 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c36a:	bf00      	nop
 800c36c:	e002      	b.n	800c374 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c36e:	bf00      	nop
 800c370:	e000      	b.n	800c374 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c372:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c374:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d10b      	bne.n	800c394 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c37c:	4ba1      	ldr	r3, [pc, #644]	@ (800c604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c37e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c380:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800c384:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c388:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c38c:	4a9d      	ldr	r2, [pc, #628]	@ (800c604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c38e:	430b      	orrs	r3, r1
 800c390:	6593      	str	r3, [r2, #88]	@ 0x58
 800c392:	e003      	b.n	800c39c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c394:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c398:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c39c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a4:	f002 0308 	and.w	r3, r2, #8
 800c3a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c3b2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800c3b6:	460b      	mov	r3, r1
 800c3b8:	4313      	orrs	r3, r2
 800c3ba:	d01e      	beq.n	800c3fa <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c3bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c3c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c3c8:	d10c      	bne.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c3ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3ce:	3328      	adds	r3, #40	@ 0x28
 800c3d0:	2102      	movs	r1, #2
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f000 fe54 	bl	800d080 <RCCEx_PLL3_Config>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d002      	beq.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800c3de:	2301      	movs	r3, #1
 800c3e0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c3e4:	4b87      	ldr	r3, [pc, #540]	@ (800c604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c3e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3e8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c3ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c3f4:	4a83      	ldr	r2, [pc, #524]	@ (800c604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c3f6:	430b      	orrs	r3, r1
 800c3f8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c3fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c402:	f002 0310 	and.w	r3, r2, #16
 800c406:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c40a:	2300      	movs	r3, #0
 800c40c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c410:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800c414:	460b      	mov	r3, r1
 800c416:	4313      	orrs	r3, r2
 800c418:	d01e      	beq.n	800c458 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c41a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c41e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c422:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c426:	d10c      	bne.n	800c442 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c428:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c42c:	3328      	adds	r3, #40	@ 0x28
 800c42e:	2102      	movs	r1, #2
 800c430:	4618      	mov	r0, r3
 800c432:	f000 fe25 	bl	800d080 <RCCEx_PLL3_Config>
 800c436:	4603      	mov	r3, r0
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d002      	beq.n	800c442 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800c43c:	2301      	movs	r3, #1
 800c43e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c442:	4b70      	ldr	r3, [pc, #448]	@ (800c604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c446:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c44a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c44e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c452:	4a6c      	ldr	r2, [pc, #432]	@ (800c604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c454:	430b      	orrs	r3, r1
 800c456:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c458:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c460:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800c464:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c468:	2300      	movs	r3, #0
 800c46a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c46e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800c472:	460b      	mov	r3, r1
 800c474:	4313      	orrs	r3, r2
 800c476:	d03e      	beq.n	800c4f6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c478:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c47c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c480:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c484:	d022      	beq.n	800c4cc <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800c486:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c48a:	d81b      	bhi.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d003      	beq.n	800c498 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800c490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c494:	d00b      	beq.n	800c4ae <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800c496:	e015      	b.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c498:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c49c:	3308      	adds	r3, #8
 800c49e:	2100      	movs	r1, #0
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f000 fd3b 	bl	800cf1c <RCCEx_PLL2_Config>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c4ac:	e00f      	b.n	800c4ce <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c4ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4b2:	3328      	adds	r3, #40	@ 0x28
 800c4b4:	2102      	movs	r1, #2
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f000 fde2 	bl	800d080 <RCCEx_PLL3_Config>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c4c2:	e004      	b.n	800c4ce <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c4ca:	e000      	b.n	800c4ce <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800c4cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c4ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d10b      	bne.n	800c4ee <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c4d6:	4b4b      	ldr	r3, [pc, #300]	@ (800c604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c4d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4da:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800c4de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c4e6:	4a47      	ldr	r2, [pc, #284]	@ (800c604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c4e8:	430b      	orrs	r3, r1
 800c4ea:	6593      	str	r3, [r2, #88]	@ 0x58
 800c4ec:	e003      	b.n	800c4f6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c4f2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c4f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4fe:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800c502:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c504:	2300      	movs	r3, #0
 800c506:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c508:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800c50c:	460b      	mov	r3, r1
 800c50e:	4313      	orrs	r3, r2
 800c510:	d03b      	beq.n	800c58a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c512:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c51a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c51e:	d01f      	beq.n	800c560 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800c520:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c524:	d818      	bhi.n	800c558 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c526:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c52a:	d003      	beq.n	800c534 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800c52c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c530:	d007      	beq.n	800c542 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800c532:	e011      	b.n	800c558 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c534:	4b33      	ldr	r3, [pc, #204]	@ (800c604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c538:	4a32      	ldr	r2, [pc, #200]	@ (800c604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c53a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c53e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c540:	e00f      	b.n	800c562 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c542:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c546:	3328      	adds	r3, #40	@ 0x28
 800c548:	2101      	movs	r1, #1
 800c54a:	4618      	mov	r0, r3
 800c54c:	f000 fd98 	bl	800d080 <RCCEx_PLL3_Config>
 800c550:	4603      	mov	r3, r0
 800c552:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800c556:	e004      	b.n	800c562 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c558:	2301      	movs	r3, #1
 800c55a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c55e:	e000      	b.n	800c562 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800c560:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c562:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c566:	2b00      	cmp	r3, #0
 800c568:	d10b      	bne.n	800c582 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c56a:	4b26      	ldr	r3, [pc, #152]	@ (800c604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c56c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c56e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c572:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c57a:	4a22      	ldr	r2, [pc, #136]	@ (800c604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c57c:	430b      	orrs	r3, r1
 800c57e:	6553      	str	r3, [r2, #84]	@ 0x54
 800c580:	e003      	b.n	800c58a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c582:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c586:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c58a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c592:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800c596:	673b      	str	r3, [r7, #112]	@ 0x70
 800c598:	2300      	movs	r3, #0
 800c59a:	677b      	str	r3, [r7, #116]	@ 0x74
 800c59c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800c5a0:	460b      	mov	r3, r1
 800c5a2:	4313      	orrs	r3, r2
 800c5a4:	d034      	beq.n	800c610 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c5a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d003      	beq.n	800c5b8 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800c5b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c5b4:	d007      	beq.n	800c5c6 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800c5b6:	e011      	b.n	800c5dc <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5b8:	4b12      	ldr	r3, [pc, #72]	@ (800c604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c5ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5bc:	4a11      	ldr	r2, [pc, #68]	@ (800c604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c5be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c5c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c5c4:	e00e      	b.n	800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c5c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5ca:	3308      	adds	r3, #8
 800c5cc:	2102      	movs	r1, #2
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f000 fca4 	bl	800cf1c <RCCEx_PLL2_Config>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c5da:	e003      	b.n	800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800c5dc:	2301      	movs	r3, #1
 800c5de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c5e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c5e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d10d      	bne.n	800c608 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c5ec:	4b05      	ldr	r3, [pc, #20]	@ (800c604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c5ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c5f0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c5f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5fa:	4a02      	ldr	r2, [pc, #8]	@ (800c604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c5fc:	430b      	orrs	r3, r1
 800c5fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c600:	e006      	b.n	800c610 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800c602:	bf00      	nop
 800c604:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c608:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c60c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c610:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c618:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800c61c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c61e:	2300      	movs	r3, #0
 800c620:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c622:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800c626:	460b      	mov	r3, r1
 800c628:	4313      	orrs	r3, r2
 800c62a:	d00c      	beq.n	800c646 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c62c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c630:	3328      	adds	r3, #40	@ 0x28
 800c632:	2102      	movs	r1, #2
 800c634:	4618      	mov	r0, r3
 800c636:	f000 fd23 	bl	800d080 <RCCEx_PLL3_Config>
 800c63a:	4603      	mov	r3, r0
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d002      	beq.n	800c646 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800c640:	2301      	movs	r3, #1
 800c642:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c646:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c64e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800c652:	663b      	str	r3, [r7, #96]	@ 0x60
 800c654:	2300      	movs	r3, #0
 800c656:	667b      	str	r3, [r7, #100]	@ 0x64
 800c658:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800c65c:	460b      	mov	r3, r1
 800c65e:	4313      	orrs	r3, r2
 800c660:	d038      	beq.n	800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c662:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c66a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c66e:	d018      	beq.n	800c6a2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800c670:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c674:	d811      	bhi.n	800c69a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c676:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c67a:	d014      	beq.n	800c6a6 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800c67c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c680:	d80b      	bhi.n	800c69a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c682:	2b00      	cmp	r3, #0
 800c684:	d011      	beq.n	800c6aa <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800c686:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c68a:	d106      	bne.n	800c69a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c68c:	4bc3      	ldr	r3, [pc, #780]	@ (800c99c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c68e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c690:	4ac2      	ldr	r2, [pc, #776]	@ (800c99c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c692:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c696:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c698:	e008      	b.n	800c6ac <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c69a:	2301      	movs	r3, #1
 800c69c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c6a0:	e004      	b.n	800c6ac <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c6a2:	bf00      	nop
 800c6a4:	e002      	b.n	800c6ac <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c6a6:	bf00      	nop
 800c6a8:	e000      	b.n	800c6ac <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c6aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c6ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d10b      	bne.n	800c6cc <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c6b4:	4bb9      	ldr	r3, [pc, #740]	@ (800c99c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c6b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6b8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c6bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c6c4:	4ab5      	ldr	r2, [pc, #724]	@ (800c99c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c6c6:	430b      	orrs	r3, r1
 800c6c8:	6553      	str	r3, [r2, #84]	@ 0x54
 800c6ca:	e003      	b.n	800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c6d0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c6d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6dc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800c6e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c6e6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800c6ea:	460b      	mov	r3, r1
 800c6ec:	4313      	orrs	r3, r2
 800c6ee:	d009      	beq.n	800c704 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c6f0:	4baa      	ldr	r3, [pc, #680]	@ (800c99c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c6f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6f4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c6f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c6fe:	4aa7      	ldr	r2, [pc, #668]	@ (800c99c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c700:	430b      	orrs	r3, r1
 800c702:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c704:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800c710:	653b      	str	r3, [r7, #80]	@ 0x50
 800c712:	2300      	movs	r3, #0
 800c714:	657b      	str	r3, [r7, #84]	@ 0x54
 800c716:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800c71a:	460b      	mov	r3, r1
 800c71c:	4313      	orrs	r3, r2
 800c71e:	d009      	beq.n	800c734 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c720:	4b9e      	ldr	r3, [pc, #632]	@ (800c99c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c724:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800c728:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c72c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c72e:	4a9b      	ldr	r2, [pc, #620]	@ (800c99c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c730:	430b      	orrs	r3, r1
 800c732:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800c734:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c73c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800c740:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c742:	2300      	movs	r3, #0
 800c744:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c746:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800c74a:	460b      	mov	r3, r1
 800c74c:	4313      	orrs	r3, r2
 800c74e:	d009      	beq.n	800c764 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800c750:	4b92      	ldr	r3, [pc, #584]	@ (800c99c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c754:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800c758:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c75c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c75e:	4a8f      	ldr	r2, [pc, #572]	@ (800c99c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c760:	430b      	orrs	r3, r1
 800c762:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c764:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800c770:	643b      	str	r3, [r7, #64]	@ 0x40
 800c772:	2300      	movs	r3, #0
 800c774:	647b      	str	r3, [r7, #68]	@ 0x44
 800c776:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800c77a:	460b      	mov	r3, r1
 800c77c:	4313      	orrs	r3, r2
 800c77e:	d00e      	beq.n	800c79e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c780:	4b86      	ldr	r3, [pc, #536]	@ (800c99c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c782:	691b      	ldr	r3, [r3, #16]
 800c784:	4a85      	ldr	r2, [pc, #532]	@ (800c99c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c786:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c78a:	6113      	str	r3, [r2, #16]
 800c78c:	4b83      	ldr	r3, [pc, #524]	@ (800c99c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c78e:	6919      	ldr	r1, [r3, #16]
 800c790:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c794:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800c798:	4a80      	ldr	r2, [pc, #512]	@ (800c99c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c79a:	430b      	orrs	r3, r1
 800c79c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c79e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800c7aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c7b0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800c7b4:	460b      	mov	r3, r1
 800c7b6:	4313      	orrs	r3, r2
 800c7b8:	d009      	beq.n	800c7ce <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c7ba:	4b78      	ldr	r3, [pc, #480]	@ (800c99c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c7bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c7be:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c7c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c7c8:	4a74      	ldr	r2, [pc, #464]	@ (800c99c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c7ca:	430b      	orrs	r3, r1
 800c7cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c7ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800c7da:	633b      	str	r3, [r7, #48]	@ 0x30
 800c7dc:	2300      	movs	r3, #0
 800c7de:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7e0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800c7e4:	460b      	mov	r3, r1
 800c7e6:	4313      	orrs	r3, r2
 800c7e8:	d00a      	beq.n	800c800 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c7ea:	4b6c      	ldr	r3, [pc, #432]	@ (800c99c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c7ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c7ee:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800c7f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c7fa:	4a68      	ldr	r2, [pc, #416]	@ (800c99c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c7fc:	430b      	orrs	r3, r1
 800c7fe:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c800:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c808:	2100      	movs	r1, #0
 800c80a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c80c:	f003 0301 	and.w	r3, r3, #1
 800c810:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c812:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800c816:	460b      	mov	r3, r1
 800c818:	4313      	orrs	r3, r2
 800c81a:	d011      	beq.n	800c840 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c81c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c820:	3308      	adds	r3, #8
 800c822:	2100      	movs	r1, #0
 800c824:	4618      	mov	r0, r3
 800c826:	f000 fb79 	bl	800cf1c <RCCEx_PLL2_Config>
 800c82a:	4603      	mov	r3, r0
 800c82c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c830:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c834:	2b00      	cmp	r3, #0
 800c836:	d003      	beq.n	800c840 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c838:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c83c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c840:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c848:	2100      	movs	r1, #0
 800c84a:	6239      	str	r1, [r7, #32]
 800c84c:	f003 0302 	and.w	r3, r3, #2
 800c850:	627b      	str	r3, [r7, #36]	@ 0x24
 800c852:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c856:	460b      	mov	r3, r1
 800c858:	4313      	orrs	r3, r2
 800c85a:	d011      	beq.n	800c880 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c85c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c860:	3308      	adds	r3, #8
 800c862:	2101      	movs	r1, #1
 800c864:	4618      	mov	r0, r3
 800c866:	f000 fb59 	bl	800cf1c <RCCEx_PLL2_Config>
 800c86a:	4603      	mov	r3, r0
 800c86c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c870:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c874:	2b00      	cmp	r3, #0
 800c876:	d003      	beq.n	800c880 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c878:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c87c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c880:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c888:	2100      	movs	r1, #0
 800c88a:	61b9      	str	r1, [r7, #24]
 800c88c:	f003 0304 	and.w	r3, r3, #4
 800c890:	61fb      	str	r3, [r7, #28]
 800c892:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c896:	460b      	mov	r3, r1
 800c898:	4313      	orrs	r3, r2
 800c89a:	d011      	beq.n	800c8c0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c89c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8a0:	3308      	adds	r3, #8
 800c8a2:	2102      	movs	r1, #2
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f000 fb39 	bl	800cf1c <RCCEx_PLL2_Config>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c8b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d003      	beq.n	800c8c0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c8bc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c8c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c8:	2100      	movs	r1, #0
 800c8ca:	6139      	str	r1, [r7, #16]
 800c8cc:	f003 0308 	and.w	r3, r3, #8
 800c8d0:	617b      	str	r3, [r7, #20]
 800c8d2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c8d6:	460b      	mov	r3, r1
 800c8d8:	4313      	orrs	r3, r2
 800c8da:	d011      	beq.n	800c900 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c8dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8e0:	3328      	adds	r3, #40	@ 0x28
 800c8e2:	2100      	movs	r1, #0
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f000 fbcb 	bl	800d080 <RCCEx_PLL3_Config>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800c8f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d003      	beq.n	800c900 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c8fc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c900:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c908:	2100      	movs	r1, #0
 800c90a:	60b9      	str	r1, [r7, #8]
 800c90c:	f003 0310 	and.w	r3, r3, #16
 800c910:	60fb      	str	r3, [r7, #12]
 800c912:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c916:	460b      	mov	r3, r1
 800c918:	4313      	orrs	r3, r2
 800c91a:	d011      	beq.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c91c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c920:	3328      	adds	r3, #40	@ 0x28
 800c922:	2101      	movs	r1, #1
 800c924:	4618      	mov	r0, r3
 800c926:	f000 fbab 	bl	800d080 <RCCEx_PLL3_Config>
 800c92a:	4603      	mov	r3, r0
 800c92c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c930:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c934:	2b00      	cmp	r3, #0
 800c936:	d003      	beq.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c938:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c93c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c940:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c948:	2100      	movs	r1, #0
 800c94a:	6039      	str	r1, [r7, #0]
 800c94c:	f003 0320 	and.w	r3, r3, #32
 800c950:	607b      	str	r3, [r7, #4]
 800c952:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c956:	460b      	mov	r3, r1
 800c958:	4313      	orrs	r3, r2
 800c95a:	d011      	beq.n	800c980 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c95c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c960:	3328      	adds	r3, #40	@ 0x28
 800c962:	2102      	movs	r1, #2
 800c964:	4618      	mov	r0, r3
 800c966:	f000 fb8b 	bl	800d080 <RCCEx_PLL3_Config>
 800c96a:	4603      	mov	r3, r0
 800c96c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c970:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c974:	2b00      	cmp	r3, #0
 800c976:	d003      	beq.n	800c980 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c978:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c97c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800c980:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800c984:	2b00      	cmp	r3, #0
 800c986:	d101      	bne.n	800c98c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800c988:	2300      	movs	r3, #0
 800c98a:	e000      	b.n	800c98e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800c98c:	2301      	movs	r3, #1
}
 800c98e:	4618      	mov	r0, r3
 800c990:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800c994:	46bd      	mov	sp, r7
 800c996:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c99a:	bf00      	nop
 800c99c:	58024400 	.word	0x58024400

0800c9a0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800c9a4:	f7fe fda0 	bl	800b4e8 <HAL_RCC_GetHCLKFreq>
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	4b06      	ldr	r3, [pc, #24]	@ (800c9c4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c9ac:	6a1b      	ldr	r3, [r3, #32]
 800c9ae:	091b      	lsrs	r3, r3, #4
 800c9b0:	f003 0307 	and.w	r3, r3, #7
 800c9b4:	4904      	ldr	r1, [pc, #16]	@ (800c9c8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c9b6:	5ccb      	ldrb	r3, [r1, r3]
 800c9b8:	f003 031f 	and.w	r3, r3, #31
 800c9bc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	bd80      	pop	{r7, pc}
 800c9c4:	58024400 	.word	0x58024400
 800c9c8:	08019d54 	.word	0x08019d54

0800c9cc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b089      	sub	sp, #36	@ 0x24
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c9d4:	4ba1      	ldr	r3, [pc, #644]	@ (800cc5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9d8:	f003 0303 	and.w	r3, r3, #3
 800c9dc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c9de:	4b9f      	ldr	r3, [pc, #636]	@ (800cc5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9e2:	0b1b      	lsrs	r3, r3, #12
 800c9e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c9e8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c9ea:	4b9c      	ldr	r3, [pc, #624]	@ (800cc5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9ee:	091b      	lsrs	r3, r3, #4
 800c9f0:	f003 0301 	and.w	r3, r3, #1
 800c9f4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c9f6:	4b99      	ldr	r3, [pc, #612]	@ (800cc5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9fa:	08db      	lsrs	r3, r3, #3
 800c9fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ca00:	693a      	ldr	r2, [r7, #16]
 800ca02:	fb02 f303 	mul.w	r3, r2, r3
 800ca06:	ee07 3a90 	vmov	s15, r3
 800ca0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	f000 8111 	beq.w	800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ca1a:	69bb      	ldr	r3, [r7, #24]
 800ca1c:	2b02      	cmp	r3, #2
 800ca1e:	f000 8083 	beq.w	800cb28 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ca22:	69bb      	ldr	r3, [r7, #24]
 800ca24:	2b02      	cmp	r3, #2
 800ca26:	f200 80a1 	bhi.w	800cb6c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ca2a:	69bb      	ldr	r3, [r7, #24]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d003      	beq.n	800ca38 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ca30:	69bb      	ldr	r3, [r7, #24]
 800ca32:	2b01      	cmp	r3, #1
 800ca34:	d056      	beq.n	800cae4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ca36:	e099      	b.n	800cb6c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca38:	4b88      	ldr	r3, [pc, #544]	@ (800cc5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f003 0320 	and.w	r3, r3, #32
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d02d      	beq.n	800caa0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca44:	4b85      	ldr	r3, [pc, #532]	@ (800cc5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	08db      	lsrs	r3, r3, #3
 800ca4a:	f003 0303 	and.w	r3, r3, #3
 800ca4e:	4a84      	ldr	r2, [pc, #528]	@ (800cc60 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ca50:	fa22 f303 	lsr.w	r3, r2, r3
 800ca54:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	ee07 3a90 	vmov	s15, r3
 800ca5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	ee07 3a90 	vmov	s15, r3
 800ca66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca6e:	4b7b      	ldr	r3, [pc, #492]	@ (800cc5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca76:	ee07 3a90 	vmov	s15, r3
 800ca7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca82:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800cc64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ca92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca9a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ca9e:	e087      	b.n	800cbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800caa0:	697b      	ldr	r3, [r7, #20]
 800caa2:	ee07 3a90 	vmov	s15, r3
 800caa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caaa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800cc68 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800caae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cab2:	4b6a      	ldr	r3, [pc, #424]	@ (800cc5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caba:	ee07 3a90 	vmov	s15, r3
 800cabe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cac2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cac6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800cc64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800caca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cad2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cada:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cade:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cae2:	e065      	b.n	800cbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	ee07 3a90 	vmov	s15, r3
 800caea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800cc6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800caf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800caf6:	4b59      	ldr	r3, [pc, #356]	@ (800cc5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800caf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cafa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cafe:	ee07 3a90 	vmov	s15, r3
 800cb02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb06:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb0a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800cc64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb26:	e043      	b.n	800cbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	ee07 3a90 	vmov	s15, r3
 800cb2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb32:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800cc70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cb36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb3a:	4b48      	ldr	r3, [pc, #288]	@ (800cc5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb42:	ee07 3a90 	vmov	s15, r3
 800cb46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb4e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800cc64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb6a:	e021      	b.n	800cbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	ee07 3a90 	vmov	s15, r3
 800cb72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb76:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800cc6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cb7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb7e:	4b37      	ldr	r3, [pc, #220]	@ (800cc5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb86:	ee07 3a90 	vmov	s15, r3
 800cb8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb92:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800cc64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cbae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cbb0:	4b2a      	ldr	r3, [pc, #168]	@ (800cc5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbb4:	0a5b      	lsrs	r3, r3, #9
 800cbb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cbba:	ee07 3a90 	vmov	s15, r3
 800cbbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cbc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbca:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbd6:	ee17 2a90 	vmov	r2, s15
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cbde:	4b1f      	ldr	r3, [pc, #124]	@ (800cc5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbe2:	0c1b      	lsrs	r3, r3, #16
 800cbe4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cbe8:	ee07 3a90 	vmov	s15, r3
 800cbec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbf0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cbf4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbf8:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc04:	ee17 2a90 	vmov	r2, s15
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cc0c:	4b13      	ldr	r3, [pc, #76]	@ (800cc5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc10:	0e1b      	lsrs	r3, r3, #24
 800cc12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc16:	ee07 3a90 	vmov	s15, r3
 800cc1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cc22:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc26:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc32:	ee17 2a90 	vmov	r2, s15
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cc3a:	e008      	b.n	800cc4e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2200      	movs	r2, #0
 800cc40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2200      	movs	r2, #0
 800cc46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	609a      	str	r2, [r3, #8]
}
 800cc4e:	bf00      	nop
 800cc50:	3724      	adds	r7, #36	@ 0x24
 800cc52:	46bd      	mov	sp, r7
 800cc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc58:	4770      	bx	lr
 800cc5a:	bf00      	nop
 800cc5c:	58024400 	.word	0x58024400
 800cc60:	03d09000 	.word	0x03d09000
 800cc64:	46000000 	.word	0x46000000
 800cc68:	4c742400 	.word	0x4c742400
 800cc6c:	4a742400 	.word	0x4a742400
 800cc70:	4bb71b00 	.word	0x4bb71b00

0800cc74 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cc74:	b480      	push	{r7}
 800cc76:	b089      	sub	sp, #36	@ 0x24
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cc7c:	4ba1      	ldr	r3, [pc, #644]	@ (800cf04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc80:	f003 0303 	and.w	r3, r3, #3
 800cc84:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cc86:	4b9f      	ldr	r3, [pc, #636]	@ (800cf04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc8a:	0d1b      	lsrs	r3, r3, #20
 800cc8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cc90:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cc92:	4b9c      	ldr	r3, [pc, #624]	@ (800cf04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc96:	0a1b      	lsrs	r3, r3, #8
 800cc98:	f003 0301 	and.w	r3, r3, #1
 800cc9c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cc9e:	4b99      	ldr	r3, [pc, #612]	@ (800cf04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cca2:	08db      	lsrs	r3, r3, #3
 800cca4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cca8:	693a      	ldr	r2, [r7, #16]
 800ccaa:	fb02 f303 	mul.w	r3, r2, r3
 800ccae:	ee07 3a90 	vmov	s15, r3
 800ccb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccb6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	f000 8111 	beq.w	800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ccc2:	69bb      	ldr	r3, [r7, #24]
 800ccc4:	2b02      	cmp	r3, #2
 800ccc6:	f000 8083 	beq.w	800cdd0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ccca:	69bb      	ldr	r3, [r7, #24]
 800cccc:	2b02      	cmp	r3, #2
 800ccce:	f200 80a1 	bhi.w	800ce14 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ccd2:	69bb      	ldr	r3, [r7, #24]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d003      	beq.n	800cce0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ccd8:	69bb      	ldr	r3, [r7, #24]
 800ccda:	2b01      	cmp	r3, #1
 800ccdc:	d056      	beq.n	800cd8c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ccde:	e099      	b.n	800ce14 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cce0:	4b88      	ldr	r3, [pc, #544]	@ (800cf04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	f003 0320 	and.w	r3, r3, #32
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d02d      	beq.n	800cd48 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ccec:	4b85      	ldr	r3, [pc, #532]	@ (800cf04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	08db      	lsrs	r3, r3, #3
 800ccf2:	f003 0303 	and.w	r3, r3, #3
 800ccf6:	4a84      	ldr	r2, [pc, #528]	@ (800cf08 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ccf8:	fa22 f303 	lsr.w	r3, r2, r3
 800ccfc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	ee07 3a90 	vmov	s15, r3
 800cd04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	ee07 3a90 	vmov	s15, r3
 800cd0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd16:	4b7b      	ldr	r3, [pc, #492]	@ (800cf04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd1e:	ee07 3a90 	vmov	s15, r3
 800cd22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd26:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd2a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800cf0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cd3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd42:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cd46:	e087      	b.n	800ce58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	ee07 3a90 	vmov	s15, r3
 800cd4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd52:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800cf10 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cd56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd5a:	4b6a      	ldr	r3, [pc, #424]	@ (800cf04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd62:	ee07 3a90 	vmov	s15, r3
 800cd66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd6e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800cf0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cd7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd8a:	e065      	b.n	800ce58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	ee07 3a90 	vmov	s15, r3
 800cd92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd96:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800cf14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cd9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd9e:	4b59      	ldr	r3, [pc, #356]	@ (800cf04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cda0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cda2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cda6:	ee07 3a90 	vmov	s15, r3
 800cdaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdae:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdb2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800cf0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cdb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cdc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cdce:	e043      	b.n	800ce58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cdd0:	697b      	ldr	r3, [r7, #20]
 800cdd2:	ee07 3a90 	vmov	s15, r3
 800cdd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdda:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800cf18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cdde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cde2:	4b48      	ldr	r3, [pc, #288]	@ (800cf04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cde4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cde6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdea:	ee07 3a90 	vmov	s15, r3
 800cdee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdf6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800cf0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cdfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ce06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce12:	e021      	b.n	800ce58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	ee07 3a90 	vmov	s15, r3
 800ce1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce1e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800cf14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ce22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce26:	4b37      	ldr	r3, [pc, #220]	@ (800cf04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce2e:	ee07 3a90 	vmov	s15, r3
 800ce32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce36:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce3a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800cf0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ce3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ce4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce56:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ce58:	4b2a      	ldr	r3, [pc, #168]	@ (800cf04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce5c:	0a5b      	lsrs	r3, r3, #9
 800ce5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce62:	ee07 3a90 	vmov	s15, r3
 800ce66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ce6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce72:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce7e:	ee17 2a90 	vmov	r2, s15
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ce86:	4b1f      	ldr	r3, [pc, #124]	@ (800cf04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce8a:	0c1b      	lsrs	r3, r3, #16
 800ce8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce90:	ee07 3a90 	vmov	s15, r3
 800ce94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce98:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ce9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cea0:	edd7 6a07 	vldr	s13, [r7, #28]
 800cea4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cea8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ceac:	ee17 2a90 	vmov	r2, s15
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ceb4:	4b13      	ldr	r3, [pc, #76]	@ (800cf04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ceb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ceb8:	0e1b      	lsrs	r3, r3, #24
 800ceba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cebe:	ee07 3a90 	vmov	s15, r3
 800cec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cec6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ceca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cece:	edd7 6a07 	vldr	s13, [r7, #28]
 800ced2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ced6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ceda:	ee17 2a90 	vmov	r2, s15
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cee2:	e008      	b.n	800cef6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2200      	movs	r2, #0
 800cee8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2200      	movs	r2, #0
 800ceee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2200      	movs	r2, #0
 800cef4:	609a      	str	r2, [r3, #8]
}
 800cef6:	bf00      	nop
 800cef8:	3724      	adds	r7, #36	@ 0x24
 800cefa:	46bd      	mov	sp, r7
 800cefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf00:	4770      	bx	lr
 800cf02:	bf00      	nop
 800cf04:	58024400 	.word	0x58024400
 800cf08:	03d09000 	.word	0x03d09000
 800cf0c:	46000000 	.word	0x46000000
 800cf10:	4c742400 	.word	0x4c742400
 800cf14:	4a742400 	.word	0x4a742400
 800cf18:	4bb71b00 	.word	0x4bb71b00

0800cf1c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b084      	sub	sp, #16
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cf26:	2300      	movs	r3, #0
 800cf28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cf2a:	4b53      	ldr	r3, [pc, #332]	@ (800d078 <RCCEx_PLL2_Config+0x15c>)
 800cf2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf2e:	f003 0303 	and.w	r3, r3, #3
 800cf32:	2b03      	cmp	r3, #3
 800cf34:	d101      	bne.n	800cf3a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cf36:	2301      	movs	r3, #1
 800cf38:	e099      	b.n	800d06e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cf3a:	4b4f      	ldr	r3, [pc, #316]	@ (800d078 <RCCEx_PLL2_Config+0x15c>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	4a4e      	ldr	r2, [pc, #312]	@ (800d078 <RCCEx_PLL2_Config+0x15c>)
 800cf40:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cf44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf46:	f7f9 fc5f 	bl	8006808 <HAL_GetTick>
 800cf4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cf4c:	e008      	b.n	800cf60 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cf4e:	f7f9 fc5b 	bl	8006808 <HAL_GetTick>
 800cf52:	4602      	mov	r2, r0
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	1ad3      	subs	r3, r2, r3
 800cf58:	2b02      	cmp	r3, #2
 800cf5a:	d901      	bls.n	800cf60 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cf5c:	2303      	movs	r3, #3
 800cf5e:	e086      	b.n	800d06e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cf60:	4b45      	ldr	r3, [pc, #276]	@ (800d078 <RCCEx_PLL2_Config+0x15c>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d1f0      	bne.n	800cf4e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cf6c:	4b42      	ldr	r3, [pc, #264]	@ (800d078 <RCCEx_PLL2_Config+0x15c>)
 800cf6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf70:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	031b      	lsls	r3, r3, #12
 800cf7a:	493f      	ldr	r1, [pc, #252]	@ (800d078 <RCCEx_PLL2_Config+0x15c>)
 800cf7c:	4313      	orrs	r3, r2
 800cf7e:	628b      	str	r3, [r1, #40]	@ 0x28
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	685b      	ldr	r3, [r3, #4]
 800cf84:	3b01      	subs	r3, #1
 800cf86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	689b      	ldr	r3, [r3, #8]
 800cf8e:	3b01      	subs	r3, #1
 800cf90:	025b      	lsls	r3, r3, #9
 800cf92:	b29b      	uxth	r3, r3
 800cf94:	431a      	orrs	r2, r3
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	68db      	ldr	r3, [r3, #12]
 800cf9a:	3b01      	subs	r3, #1
 800cf9c:	041b      	lsls	r3, r3, #16
 800cf9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800cfa2:	431a      	orrs	r2, r3
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	691b      	ldr	r3, [r3, #16]
 800cfa8:	3b01      	subs	r3, #1
 800cfaa:	061b      	lsls	r3, r3, #24
 800cfac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800cfb0:	4931      	ldr	r1, [pc, #196]	@ (800d078 <RCCEx_PLL2_Config+0x15c>)
 800cfb2:	4313      	orrs	r3, r2
 800cfb4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cfb6:	4b30      	ldr	r3, [pc, #192]	@ (800d078 <RCCEx_PLL2_Config+0x15c>)
 800cfb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	695b      	ldr	r3, [r3, #20]
 800cfc2:	492d      	ldr	r1, [pc, #180]	@ (800d078 <RCCEx_PLL2_Config+0x15c>)
 800cfc4:	4313      	orrs	r3, r2
 800cfc6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cfc8:	4b2b      	ldr	r3, [pc, #172]	@ (800d078 <RCCEx_PLL2_Config+0x15c>)
 800cfca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfcc:	f023 0220 	bic.w	r2, r3, #32
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	699b      	ldr	r3, [r3, #24]
 800cfd4:	4928      	ldr	r1, [pc, #160]	@ (800d078 <RCCEx_PLL2_Config+0x15c>)
 800cfd6:	4313      	orrs	r3, r2
 800cfd8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cfda:	4b27      	ldr	r3, [pc, #156]	@ (800d078 <RCCEx_PLL2_Config+0x15c>)
 800cfdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfde:	4a26      	ldr	r2, [pc, #152]	@ (800d078 <RCCEx_PLL2_Config+0x15c>)
 800cfe0:	f023 0310 	bic.w	r3, r3, #16
 800cfe4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cfe6:	4b24      	ldr	r3, [pc, #144]	@ (800d078 <RCCEx_PLL2_Config+0x15c>)
 800cfe8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cfea:	4b24      	ldr	r3, [pc, #144]	@ (800d07c <RCCEx_PLL2_Config+0x160>)
 800cfec:	4013      	ands	r3, r2
 800cfee:	687a      	ldr	r2, [r7, #4]
 800cff0:	69d2      	ldr	r2, [r2, #28]
 800cff2:	00d2      	lsls	r2, r2, #3
 800cff4:	4920      	ldr	r1, [pc, #128]	@ (800d078 <RCCEx_PLL2_Config+0x15c>)
 800cff6:	4313      	orrs	r3, r2
 800cff8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cffa:	4b1f      	ldr	r3, [pc, #124]	@ (800d078 <RCCEx_PLL2_Config+0x15c>)
 800cffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cffe:	4a1e      	ldr	r2, [pc, #120]	@ (800d078 <RCCEx_PLL2_Config+0x15c>)
 800d000:	f043 0310 	orr.w	r3, r3, #16
 800d004:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d106      	bne.n	800d01a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d00c:	4b1a      	ldr	r3, [pc, #104]	@ (800d078 <RCCEx_PLL2_Config+0x15c>)
 800d00e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d010:	4a19      	ldr	r2, [pc, #100]	@ (800d078 <RCCEx_PLL2_Config+0x15c>)
 800d012:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d016:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d018:	e00f      	b.n	800d03a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	2b01      	cmp	r3, #1
 800d01e:	d106      	bne.n	800d02e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d020:	4b15      	ldr	r3, [pc, #84]	@ (800d078 <RCCEx_PLL2_Config+0x15c>)
 800d022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d024:	4a14      	ldr	r2, [pc, #80]	@ (800d078 <RCCEx_PLL2_Config+0x15c>)
 800d026:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d02a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d02c:	e005      	b.n	800d03a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d02e:	4b12      	ldr	r3, [pc, #72]	@ (800d078 <RCCEx_PLL2_Config+0x15c>)
 800d030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d032:	4a11      	ldr	r2, [pc, #68]	@ (800d078 <RCCEx_PLL2_Config+0x15c>)
 800d034:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d038:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d03a:	4b0f      	ldr	r3, [pc, #60]	@ (800d078 <RCCEx_PLL2_Config+0x15c>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	4a0e      	ldr	r2, [pc, #56]	@ (800d078 <RCCEx_PLL2_Config+0x15c>)
 800d040:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d044:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d046:	f7f9 fbdf 	bl	8006808 <HAL_GetTick>
 800d04a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d04c:	e008      	b.n	800d060 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d04e:	f7f9 fbdb 	bl	8006808 <HAL_GetTick>
 800d052:	4602      	mov	r2, r0
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	1ad3      	subs	r3, r2, r3
 800d058:	2b02      	cmp	r3, #2
 800d05a:	d901      	bls.n	800d060 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d05c:	2303      	movs	r3, #3
 800d05e:	e006      	b.n	800d06e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d060:	4b05      	ldr	r3, [pc, #20]	@ (800d078 <RCCEx_PLL2_Config+0x15c>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d0f0      	beq.n	800d04e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d06c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3710      	adds	r7, #16
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
 800d076:	bf00      	nop
 800d078:	58024400 	.word	0x58024400
 800d07c:	ffff0007 	.word	0xffff0007

0800d080 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b084      	sub	sp, #16
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d08a:	2300      	movs	r3, #0
 800d08c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d08e:	4b53      	ldr	r3, [pc, #332]	@ (800d1dc <RCCEx_PLL3_Config+0x15c>)
 800d090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d092:	f003 0303 	and.w	r3, r3, #3
 800d096:	2b03      	cmp	r3, #3
 800d098:	d101      	bne.n	800d09e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d09a:	2301      	movs	r3, #1
 800d09c:	e099      	b.n	800d1d2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d09e:	4b4f      	ldr	r3, [pc, #316]	@ (800d1dc <RCCEx_PLL3_Config+0x15c>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	4a4e      	ldr	r2, [pc, #312]	@ (800d1dc <RCCEx_PLL3_Config+0x15c>)
 800d0a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d0a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d0aa:	f7f9 fbad 	bl	8006808 <HAL_GetTick>
 800d0ae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d0b0:	e008      	b.n	800d0c4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d0b2:	f7f9 fba9 	bl	8006808 <HAL_GetTick>
 800d0b6:	4602      	mov	r2, r0
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	1ad3      	subs	r3, r2, r3
 800d0bc:	2b02      	cmp	r3, #2
 800d0be:	d901      	bls.n	800d0c4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d0c0:	2303      	movs	r3, #3
 800d0c2:	e086      	b.n	800d1d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d0c4:	4b45      	ldr	r3, [pc, #276]	@ (800d1dc <RCCEx_PLL3_Config+0x15c>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d1f0      	bne.n	800d0b2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d0d0:	4b42      	ldr	r3, [pc, #264]	@ (800d1dc <RCCEx_PLL3_Config+0x15c>)
 800d0d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0d4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	051b      	lsls	r3, r3, #20
 800d0de:	493f      	ldr	r1, [pc, #252]	@ (800d1dc <RCCEx_PLL3_Config+0x15c>)
 800d0e0:	4313      	orrs	r3, r2
 800d0e2:	628b      	str	r3, [r1, #40]	@ 0x28
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	685b      	ldr	r3, [r3, #4]
 800d0e8:	3b01      	subs	r3, #1
 800d0ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	689b      	ldr	r3, [r3, #8]
 800d0f2:	3b01      	subs	r3, #1
 800d0f4:	025b      	lsls	r3, r3, #9
 800d0f6:	b29b      	uxth	r3, r3
 800d0f8:	431a      	orrs	r2, r3
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	68db      	ldr	r3, [r3, #12]
 800d0fe:	3b01      	subs	r3, #1
 800d100:	041b      	lsls	r3, r3, #16
 800d102:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d106:	431a      	orrs	r2, r3
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	691b      	ldr	r3, [r3, #16]
 800d10c:	3b01      	subs	r3, #1
 800d10e:	061b      	lsls	r3, r3, #24
 800d110:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d114:	4931      	ldr	r1, [pc, #196]	@ (800d1dc <RCCEx_PLL3_Config+0x15c>)
 800d116:	4313      	orrs	r3, r2
 800d118:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d11a:	4b30      	ldr	r3, [pc, #192]	@ (800d1dc <RCCEx_PLL3_Config+0x15c>)
 800d11c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d11e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	695b      	ldr	r3, [r3, #20]
 800d126:	492d      	ldr	r1, [pc, #180]	@ (800d1dc <RCCEx_PLL3_Config+0x15c>)
 800d128:	4313      	orrs	r3, r2
 800d12a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d12c:	4b2b      	ldr	r3, [pc, #172]	@ (800d1dc <RCCEx_PLL3_Config+0x15c>)
 800d12e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d130:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	699b      	ldr	r3, [r3, #24]
 800d138:	4928      	ldr	r1, [pc, #160]	@ (800d1dc <RCCEx_PLL3_Config+0x15c>)
 800d13a:	4313      	orrs	r3, r2
 800d13c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d13e:	4b27      	ldr	r3, [pc, #156]	@ (800d1dc <RCCEx_PLL3_Config+0x15c>)
 800d140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d142:	4a26      	ldr	r2, [pc, #152]	@ (800d1dc <RCCEx_PLL3_Config+0x15c>)
 800d144:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d148:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d14a:	4b24      	ldr	r3, [pc, #144]	@ (800d1dc <RCCEx_PLL3_Config+0x15c>)
 800d14c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d14e:	4b24      	ldr	r3, [pc, #144]	@ (800d1e0 <RCCEx_PLL3_Config+0x160>)
 800d150:	4013      	ands	r3, r2
 800d152:	687a      	ldr	r2, [r7, #4]
 800d154:	69d2      	ldr	r2, [r2, #28]
 800d156:	00d2      	lsls	r2, r2, #3
 800d158:	4920      	ldr	r1, [pc, #128]	@ (800d1dc <RCCEx_PLL3_Config+0x15c>)
 800d15a:	4313      	orrs	r3, r2
 800d15c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d15e:	4b1f      	ldr	r3, [pc, #124]	@ (800d1dc <RCCEx_PLL3_Config+0x15c>)
 800d160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d162:	4a1e      	ldr	r2, [pc, #120]	@ (800d1dc <RCCEx_PLL3_Config+0x15c>)
 800d164:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d168:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d106      	bne.n	800d17e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d170:	4b1a      	ldr	r3, [pc, #104]	@ (800d1dc <RCCEx_PLL3_Config+0x15c>)
 800d172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d174:	4a19      	ldr	r2, [pc, #100]	@ (800d1dc <RCCEx_PLL3_Config+0x15c>)
 800d176:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800d17a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d17c:	e00f      	b.n	800d19e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	2b01      	cmp	r3, #1
 800d182:	d106      	bne.n	800d192 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d184:	4b15      	ldr	r3, [pc, #84]	@ (800d1dc <RCCEx_PLL3_Config+0x15c>)
 800d186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d188:	4a14      	ldr	r2, [pc, #80]	@ (800d1dc <RCCEx_PLL3_Config+0x15c>)
 800d18a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d18e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d190:	e005      	b.n	800d19e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d192:	4b12      	ldr	r3, [pc, #72]	@ (800d1dc <RCCEx_PLL3_Config+0x15c>)
 800d194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d196:	4a11      	ldr	r2, [pc, #68]	@ (800d1dc <RCCEx_PLL3_Config+0x15c>)
 800d198:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d19c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d19e:	4b0f      	ldr	r3, [pc, #60]	@ (800d1dc <RCCEx_PLL3_Config+0x15c>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	4a0e      	ldr	r2, [pc, #56]	@ (800d1dc <RCCEx_PLL3_Config+0x15c>)
 800d1a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d1a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d1aa:	f7f9 fb2d 	bl	8006808 <HAL_GetTick>
 800d1ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d1b0:	e008      	b.n	800d1c4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d1b2:	f7f9 fb29 	bl	8006808 <HAL_GetTick>
 800d1b6:	4602      	mov	r2, r0
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	1ad3      	subs	r3, r2, r3
 800d1bc:	2b02      	cmp	r3, #2
 800d1be:	d901      	bls.n	800d1c4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d1c0:	2303      	movs	r3, #3
 800d1c2:	e006      	b.n	800d1d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d1c4:	4b05      	ldr	r3, [pc, #20]	@ (800d1dc <RCCEx_PLL3_Config+0x15c>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d0f0      	beq.n	800d1b2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d1d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3710      	adds	r7, #16
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}
 800d1da:	bf00      	nop
 800d1dc:	58024400 	.word	0x58024400
 800d1e0:	ffff0007 	.word	0xffff0007

0800d1e4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b084      	sub	sp, #16
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d101      	bne.n	800d1f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	e10f      	b.n	800d416 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4a87      	ldr	r2, [pc, #540]	@ (800d420 <HAL_SPI_Init+0x23c>)
 800d202:	4293      	cmp	r3, r2
 800d204:	d00f      	beq.n	800d226 <HAL_SPI_Init+0x42>
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	4a86      	ldr	r2, [pc, #536]	@ (800d424 <HAL_SPI_Init+0x240>)
 800d20c:	4293      	cmp	r3, r2
 800d20e:	d00a      	beq.n	800d226 <HAL_SPI_Init+0x42>
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	4a84      	ldr	r2, [pc, #528]	@ (800d428 <HAL_SPI_Init+0x244>)
 800d216:	4293      	cmp	r3, r2
 800d218:	d005      	beq.n	800d226 <HAL_SPI_Init+0x42>
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	68db      	ldr	r3, [r3, #12]
 800d21e:	2b0f      	cmp	r3, #15
 800d220:	d901      	bls.n	800d226 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800d222:	2301      	movs	r3, #1
 800d224:	e0f7      	b.n	800d416 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f001 f968 	bl	800e4fc <SPI_GetPacketSize>
 800d22c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	4a7b      	ldr	r2, [pc, #492]	@ (800d420 <HAL_SPI_Init+0x23c>)
 800d234:	4293      	cmp	r3, r2
 800d236:	d00c      	beq.n	800d252 <HAL_SPI_Init+0x6e>
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	4a79      	ldr	r2, [pc, #484]	@ (800d424 <HAL_SPI_Init+0x240>)
 800d23e:	4293      	cmp	r3, r2
 800d240:	d007      	beq.n	800d252 <HAL_SPI_Init+0x6e>
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	4a78      	ldr	r2, [pc, #480]	@ (800d428 <HAL_SPI_Init+0x244>)
 800d248:	4293      	cmp	r3, r2
 800d24a:	d002      	beq.n	800d252 <HAL_SPI_Init+0x6e>
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	2b08      	cmp	r3, #8
 800d250:	d811      	bhi.n	800d276 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d256:	4a72      	ldr	r2, [pc, #456]	@ (800d420 <HAL_SPI_Init+0x23c>)
 800d258:	4293      	cmp	r3, r2
 800d25a:	d009      	beq.n	800d270 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	4a70      	ldr	r2, [pc, #448]	@ (800d424 <HAL_SPI_Init+0x240>)
 800d262:	4293      	cmp	r3, r2
 800d264:	d004      	beq.n	800d270 <HAL_SPI_Init+0x8c>
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	4a6f      	ldr	r2, [pc, #444]	@ (800d428 <HAL_SPI_Init+0x244>)
 800d26c:	4293      	cmp	r3, r2
 800d26e:	d104      	bne.n	800d27a <HAL_SPI_Init+0x96>
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	2b10      	cmp	r3, #16
 800d274:	d901      	bls.n	800d27a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800d276:	2301      	movs	r3, #1
 800d278:	e0cd      	b.n	800d416 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d280:	b2db      	uxtb	r3, r3
 800d282:	2b00      	cmp	r3, #0
 800d284:	d106      	bne.n	800d294 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	2200      	movs	r2, #0
 800d28a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f7f6 f800 	bl	8003294 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2202      	movs	r2, #2
 800d298:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	681a      	ldr	r2, [r3, #0]
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	f022 0201 	bic.w	r2, r2, #1
 800d2aa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	689b      	ldr	r3, [r3, #8]
 800d2b2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800d2b6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	699b      	ldr	r3, [r3, #24]
 800d2bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d2c0:	d119      	bne.n	800d2f6 <HAL_SPI_Init+0x112>
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	685b      	ldr	r3, [r3, #4]
 800d2c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d2ca:	d103      	bne.n	800d2d4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d008      	beq.n	800d2e6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d10c      	bne.n	800d2f6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d2e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d2e4:	d107      	bne.n	800d2f6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	681a      	ldr	r2, [r3, #0]
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d2f4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	685b      	ldr	r3, [r3, #4]
 800d2fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d00f      	beq.n	800d322 <HAL_SPI_Init+0x13e>
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	68db      	ldr	r3, [r3, #12]
 800d306:	2b06      	cmp	r3, #6
 800d308:	d90b      	bls.n	800d322 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	430a      	orrs	r2, r1
 800d31e:	601a      	str	r2, [r3, #0]
 800d320:	e007      	b.n	800d332 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	681a      	ldr	r2, [r3, #0]
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d330:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	69da      	ldr	r2, [r3, #28]
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d33a:	431a      	orrs	r2, r3
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	431a      	orrs	r2, r3
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d344:	ea42 0103 	orr.w	r1, r2, r3
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	68da      	ldr	r2, [r3, #12]
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	430a      	orrs	r2, r1
 800d352:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d35c:	431a      	orrs	r2, r3
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d362:	431a      	orrs	r2, r3
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	699b      	ldr	r3, [r3, #24]
 800d368:	431a      	orrs	r2, r3
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	691b      	ldr	r3, [r3, #16]
 800d36e:	431a      	orrs	r2, r3
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	695b      	ldr	r3, [r3, #20]
 800d374:	431a      	orrs	r2, r3
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	6a1b      	ldr	r3, [r3, #32]
 800d37a:	431a      	orrs	r2, r3
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	685b      	ldr	r3, [r3, #4]
 800d380:	431a      	orrs	r2, r3
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d386:	431a      	orrs	r2, r3
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	689b      	ldr	r3, [r3, #8]
 800d38c:	431a      	orrs	r2, r3
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d392:	ea42 0103 	orr.w	r1, r2, r3
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	430a      	orrs	r2, r1
 800d3a0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	685b      	ldr	r3, [r3, #4]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d113      	bne.n	800d3d2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	689b      	ldr	r3, [r3, #8]
 800d3b0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d3bc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	689b      	ldr	r3, [r3, #8]
 800d3c4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d3d0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	f022 0201 	bic.w	r2, r2, #1
 800d3e0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	685b      	ldr	r3, [r3, #4]
 800d3e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d00a      	beq.n	800d404 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	68db      	ldr	r3, [r3, #12]
 800d3f4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	430a      	orrs	r2, r1
 800d402:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2200      	movs	r2, #0
 800d408:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2201      	movs	r2, #1
 800d410:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800d414:	2300      	movs	r3, #0
}
 800d416:	4618      	mov	r0, r3
 800d418:	3710      	adds	r7, #16
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
 800d41e:	bf00      	nop
 800d420:	40013000 	.word	0x40013000
 800d424:	40003800 	.word	0x40003800
 800d428:	40003c00 	.word	0x40003c00

0800d42c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b088      	sub	sp, #32
 800d430:	af02      	add	r7, sp, #8
 800d432:	60f8      	str	r0, [r7, #12]
 800d434:	60b9      	str	r1, [r7, #8]
 800d436:	603b      	str	r3, [r7, #0]
 800d438:	4613      	mov	r3, r2
 800d43a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	3320      	adds	r3, #32
 800d442:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d444:	f7f9 f9e0 	bl	8006808 <HAL_GetTick>
 800d448:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d450:	b2db      	uxtb	r3, r3
 800d452:	2b01      	cmp	r3, #1
 800d454:	d001      	beq.n	800d45a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800d456:	2302      	movs	r3, #2
 800d458:	e1d1      	b.n	800d7fe <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d002      	beq.n	800d466 <HAL_SPI_Transmit+0x3a>
 800d460:	88fb      	ldrh	r3, [r7, #6]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d101      	bne.n	800d46a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800d466:	2301      	movs	r3, #1
 800d468:	e1c9      	b.n	800d7fe <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800d470:	2b01      	cmp	r3, #1
 800d472:	d101      	bne.n	800d478 <HAL_SPI_Transmit+0x4c>
 800d474:	2302      	movs	r3, #2
 800d476:	e1c2      	b.n	800d7fe <HAL_SPI_Transmit+0x3d2>
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	2201      	movs	r2, #1
 800d47c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	2203      	movs	r2, #3
 800d484:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	2200      	movs	r2, #0
 800d48c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	68ba      	ldr	r2, [r7, #8]
 800d494:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	88fa      	ldrh	r2, [r7, #6]
 800d49a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	88fa      	ldrh	r2, [r7, #6]
 800d4a2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	2200      	movs	r2, #0
 800d4c0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	689b      	ldr	r3, [r3, #8]
 800d4cc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800d4d0:	d108      	bne.n	800d4e4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	681a      	ldr	r2, [r3, #0]
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d4e0:	601a      	str	r2, [r3, #0]
 800d4e2:	e009      	b.n	800d4f8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	68db      	ldr	r3, [r3, #12]
 800d4ea:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800d4f6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	685a      	ldr	r2, [r3, #4]
 800d4fe:	4b96      	ldr	r3, [pc, #600]	@ (800d758 <HAL_SPI_Transmit+0x32c>)
 800d500:	4013      	ands	r3, r2
 800d502:	88f9      	ldrh	r1, [r7, #6]
 800d504:	68fa      	ldr	r2, [r7, #12]
 800d506:	6812      	ldr	r2, [r2, #0]
 800d508:	430b      	orrs	r3, r1
 800d50a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	681a      	ldr	r2, [r3, #0]
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	f042 0201 	orr.w	r2, r2, #1
 800d51a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	685b      	ldr	r3, [r3, #4]
 800d520:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d524:	d107      	bne.n	800d536 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	681a      	ldr	r2, [r3, #0]
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d534:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	68db      	ldr	r3, [r3, #12]
 800d53a:	2b0f      	cmp	r3, #15
 800d53c:	d947      	bls.n	800d5ce <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d53e:	e03f      	b.n	800d5c0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	695b      	ldr	r3, [r3, #20]
 800d546:	f003 0302 	and.w	r3, r3, #2
 800d54a:	2b02      	cmp	r3, #2
 800d54c:	d114      	bne.n	800d578 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	6812      	ldr	r2, [r2, #0]
 800d558:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d55e:	1d1a      	adds	r2, r3, #4
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d56a:	b29b      	uxth	r3, r3
 800d56c:	3b01      	subs	r3, #1
 800d56e:	b29a      	uxth	r2, r3
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d576:	e023      	b.n	800d5c0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d578:	f7f9 f946 	bl	8006808 <HAL_GetTick>
 800d57c:	4602      	mov	r2, r0
 800d57e:	693b      	ldr	r3, [r7, #16]
 800d580:	1ad3      	subs	r3, r2, r3
 800d582:	683a      	ldr	r2, [r7, #0]
 800d584:	429a      	cmp	r2, r3
 800d586:	d803      	bhi.n	800d590 <HAL_SPI_Transmit+0x164>
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d58e:	d102      	bne.n	800d596 <HAL_SPI_Transmit+0x16a>
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d114      	bne.n	800d5c0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d596:	68f8      	ldr	r0, [r7, #12]
 800d598:	f000 fee2 	bl	800e360 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d5a2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	2201      	movs	r2, #1
 800d5b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d5bc:	2303      	movs	r3, #3
 800d5be:	e11e      	b.n	800d7fe <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d5c6:	b29b      	uxth	r3, r3
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d1b9      	bne.n	800d540 <HAL_SPI_Transmit+0x114>
 800d5cc:	e0f1      	b.n	800d7b2 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	68db      	ldr	r3, [r3, #12]
 800d5d2:	2b07      	cmp	r3, #7
 800d5d4:	f240 80e6 	bls.w	800d7a4 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d5d8:	e05d      	b.n	800d696 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	695b      	ldr	r3, [r3, #20]
 800d5e0:	f003 0302 	and.w	r3, r3, #2
 800d5e4:	2b02      	cmp	r3, #2
 800d5e6:	d132      	bne.n	800d64e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d5ee:	b29b      	uxth	r3, r3
 800d5f0:	2b01      	cmp	r3, #1
 800d5f2:	d918      	bls.n	800d626 <HAL_SPI_Transmit+0x1fa>
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d014      	beq.n	800d626 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	6812      	ldr	r2, [r2, #0]
 800d606:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d60c:	1d1a      	adds	r2, r3, #4
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d618:	b29b      	uxth	r3, r3
 800d61a:	3b02      	subs	r3, #2
 800d61c:	b29a      	uxth	r2, r3
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d624:	e037      	b.n	800d696 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d62a:	881a      	ldrh	r2, [r3, #0]
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d634:	1c9a      	adds	r2, r3, #2
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d640:	b29b      	uxth	r3, r3
 800d642:	3b01      	subs	r3, #1
 800d644:	b29a      	uxth	r2, r3
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d64c:	e023      	b.n	800d696 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d64e:	f7f9 f8db 	bl	8006808 <HAL_GetTick>
 800d652:	4602      	mov	r2, r0
 800d654:	693b      	ldr	r3, [r7, #16]
 800d656:	1ad3      	subs	r3, r2, r3
 800d658:	683a      	ldr	r2, [r7, #0]
 800d65a:	429a      	cmp	r2, r3
 800d65c:	d803      	bhi.n	800d666 <HAL_SPI_Transmit+0x23a>
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d664:	d102      	bne.n	800d66c <HAL_SPI_Transmit+0x240>
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d114      	bne.n	800d696 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d66c:	68f8      	ldr	r0, [r7, #12]
 800d66e:	f000 fe77 	bl	800e360 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d678:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	2201      	movs	r2, #1
 800d686:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	2200      	movs	r2, #0
 800d68e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d692:	2303      	movs	r3, #3
 800d694:	e0b3      	b.n	800d7fe <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d69c:	b29b      	uxth	r3, r3
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d19b      	bne.n	800d5da <HAL_SPI_Transmit+0x1ae>
 800d6a2:	e086      	b.n	800d7b2 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	695b      	ldr	r3, [r3, #20]
 800d6aa:	f003 0302 	and.w	r3, r3, #2
 800d6ae:	2b02      	cmp	r3, #2
 800d6b0:	d154      	bne.n	800d75c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d6b8:	b29b      	uxth	r3, r3
 800d6ba:	2b03      	cmp	r3, #3
 800d6bc:	d918      	bls.n	800d6f0 <HAL_SPI_Transmit+0x2c4>
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6c2:	2b40      	cmp	r3, #64	@ 0x40
 800d6c4:	d914      	bls.n	800d6f0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	6812      	ldr	r2, [r2, #0]
 800d6d0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d6d6:	1d1a      	adds	r2, r3, #4
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d6e2:	b29b      	uxth	r3, r3
 800d6e4:	3b04      	subs	r3, #4
 800d6e6:	b29a      	uxth	r2, r3
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d6ee:	e059      	b.n	800d7a4 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d6f6:	b29b      	uxth	r3, r3
 800d6f8:	2b01      	cmp	r3, #1
 800d6fa:	d917      	bls.n	800d72c <HAL_SPI_Transmit+0x300>
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d700:	2b00      	cmp	r3, #0
 800d702:	d013      	beq.n	800d72c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d708:	881a      	ldrh	r2, [r3, #0]
 800d70a:	697b      	ldr	r3, [r7, #20]
 800d70c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d712:	1c9a      	adds	r2, r3, #2
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d71e:	b29b      	uxth	r3, r3
 800d720:	3b02      	subs	r3, #2
 800d722:	b29a      	uxth	r2, r3
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d72a:	e03b      	b.n	800d7a4 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	3320      	adds	r3, #32
 800d736:	7812      	ldrb	r2, [r2, #0]
 800d738:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d73e:	1c5a      	adds	r2, r3, #1
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d74a:	b29b      	uxth	r3, r3
 800d74c:	3b01      	subs	r3, #1
 800d74e:	b29a      	uxth	r2, r3
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d756:	e025      	b.n	800d7a4 <HAL_SPI_Transmit+0x378>
 800d758:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d75c:	f7f9 f854 	bl	8006808 <HAL_GetTick>
 800d760:	4602      	mov	r2, r0
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	1ad3      	subs	r3, r2, r3
 800d766:	683a      	ldr	r2, [r7, #0]
 800d768:	429a      	cmp	r2, r3
 800d76a:	d803      	bhi.n	800d774 <HAL_SPI_Transmit+0x348>
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d772:	d102      	bne.n	800d77a <HAL_SPI_Transmit+0x34e>
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d114      	bne.n	800d7a4 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d77a:	68f8      	ldr	r0, [r7, #12]
 800d77c:	f000 fdf0 	bl	800e360 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d786:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	2201      	movs	r2, #1
 800d794:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	2200      	movs	r2, #0
 800d79c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d7a0:	2303      	movs	r3, #3
 800d7a2:	e02c      	b.n	800d7fe <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d7aa:	b29b      	uxth	r3, r3
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	f47f af79 	bne.w	800d6a4 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	9300      	str	r3, [sp, #0]
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	2108      	movs	r1, #8
 800d7bc:	68f8      	ldr	r0, [r7, #12]
 800d7be:	f000 fe6f 	bl	800e4a0 <SPI_WaitOnFlagUntilTimeout>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d007      	beq.n	800d7d8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d7ce:	f043 0220 	orr.w	r2, r3, #32
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d7d8:	68f8      	ldr	r0, [r7, #12]
 800d7da:	f000 fdc1 	bl	800e360 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	2201      	movs	r2, #1
 800d7e2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d001      	beq.n	800d7fc <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	e000      	b.n	800d7fe <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800d7fc:	2300      	movs	r3, #0
  }
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3718      	adds	r7, #24
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}
 800d806:	bf00      	nop

0800d808 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b088      	sub	sp, #32
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	60f8      	str	r0, [r7, #12]
 800d810:	60b9      	str	r1, [r7, #8]
 800d812:	603b      	str	r3, [r7, #0]
 800d814:	4613      	mov	r3, r2
 800d816:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d81c:	095b      	lsrs	r3, r3, #5
 800d81e:	b29b      	uxth	r3, r3
 800d820:	3301      	adds	r3, #1
 800d822:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	3330      	adds	r3, #48	@ 0x30
 800d82a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d82c:	f7f8 ffec 	bl	8006808 <HAL_GetTick>
 800d830:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d838:	b2db      	uxtb	r3, r3
 800d83a:	2b01      	cmp	r3, #1
 800d83c:	d001      	beq.n	800d842 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800d83e:	2302      	movs	r3, #2
 800d840:	e250      	b.n	800dce4 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d002      	beq.n	800d84e <HAL_SPI_Receive+0x46>
 800d848:	88fb      	ldrh	r3, [r7, #6]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d101      	bne.n	800d852 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800d84e:	2301      	movs	r3, #1
 800d850:	e248      	b.n	800dce4 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800d858:	2b01      	cmp	r3, #1
 800d85a:	d101      	bne.n	800d860 <HAL_SPI_Receive+0x58>
 800d85c:	2302      	movs	r3, #2
 800d85e:	e241      	b.n	800dce4 <HAL_SPI_Receive+0x4dc>
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	2201      	movs	r2, #1
 800d864:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	2204      	movs	r2, #4
 800d86c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	2200      	movs	r2, #0
 800d874:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	68ba      	ldr	r2, [r7, #8]
 800d87c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	88fa      	ldrh	r2, [r7, #6]
 800d882:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	88fa      	ldrh	r2, [r7, #6]
 800d88a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	2200      	movs	r2, #0
 800d892:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	2200      	movs	r2, #0
 800d898:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	689b      	ldr	r3, [r3, #8]
 800d8b4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800d8b8:	d108      	bne.n	800d8cc <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	681a      	ldr	r2, [r3, #0]
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d8c8:	601a      	str	r2, [r3, #0]
 800d8ca:	e009      	b.n	800d8e0 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	68db      	ldr	r3, [r3, #12]
 800d8d2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800d8de:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	685a      	ldr	r2, [r3, #4]
 800d8e6:	4b95      	ldr	r3, [pc, #596]	@ (800db3c <HAL_SPI_Receive+0x334>)
 800d8e8:	4013      	ands	r3, r2
 800d8ea:	88f9      	ldrh	r1, [r7, #6]
 800d8ec:	68fa      	ldr	r2, [r7, #12]
 800d8ee:	6812      	ldr	r2, [r2, #0]
 800d8f0:	430b      	orrs	r3, r1
 800d8f2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	681a      	ldr	r2, [r3, #0]
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	f042 0201 	orr.w	r2, r2, #1
 800d902:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	685b      	ldr	r3, [r3, #4]
 800d908:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d90c:	d107      	bne.n	800d91e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	681a      	ldr	r2, [r3, #0]
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d91c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	68db      	ldr	r3, [r3, #12]
 800d922:	2b0f      	cmp	r3, #15
 800d924:	d96c      	bls.n	800da00 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800d926:	e064      	b.n	800d9f2 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	695b      	ldr	r3, [r3, #20]
 800d92e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	695b      	ldr	r3, [r3, #20]
 800d936:	f003 0301 	and.w	r3, r3, #1
 800d93a:	2b01      	cmp	r3, #1
 800d93c:	d114      	bne.n	800d968 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	681a      	ldr	r2, [r3, #0]
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d946:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d948:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d94e:	1d1a      	adds	r2, r3, #4
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d95a:	b29b      	uxth	r3, r3
 800d95c:	3b01      	subs	r3, #1
 800d95e:	b29a      	uxth	r2, r3
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d966:	e044      	b.n	800d9f2 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d96e:	b29b      	uxth	r3, r3
 800d970:	8bfa      	ldrh	r2, [r7, #30]
 800d972:	429a      	cmp	r2, r3
 800d974:	d919      	bls.n	800d9aa <HAL_SPI_Receive+0x1a2>
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d014      	beq.n	800d9aa <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	681a      	ldr	r2, [r3, #0]
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d988:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d98a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d990:	1d1a      	adds	r2, r3, #4
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d99c:	b29b      	uxth	r3, r3
 800d99e:	3b01      	subs	r3, #1
 800d9a0:	b29a      	uxth	r2, r3
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d9a8:	e023      	b.n	800d9f2 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d9aa:	f7f8 ff2d 	bl	8006808 <HAL_GetTick>
 800d9ae:	4602      	mov	r2, r0
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	1ad3      	subs	r3, r2, r3
 800d9b4:	683a      	ldr	r2, [r7, #0]
 800d9b6:	429a      	cmp	r2, r3
 800d9b8:	d803      	bhi.n	800d9c2 <HAL_SPI_Receive+0x1ba>
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9c0:	d102      	bne.n	800d9c8 <HAL_SPI_Receive+0x1c0>
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d114      	bne.n	800d9f2 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d9c8:	68f8      	ldr	r0, [r7, #12]
 800d9ca:	f000 fcc9 	bl	800e360 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d9d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	2201      	movs	r2, #1
 800d9e2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d9ee:	2303      	movs	r3, #3
 800d9f0:	e178      	b.n	800dce4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d9f8:	b29b      	uxth	r3, r3
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d194      	bne.n	800d928 <HAL_SPI_Receive+0x120>
 800d9fe:	e15e      	b.n	800dcbe <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	68db      	ldr	r3, [r3, #12]
 800da04:	2b07      	cmp	r3, #7
 800da06:	f240 8153 	bls.w	800dcb0 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800da0a:	e08f      	b.n	800db2c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	695b      	ldr	r3, [r3, #20]
 800da12:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	695b      	ldr	r3, [r3, #20]
 800da1a:	f003 0301 	and.w	r3, r3, #1
 800da1e:	2b01      	cmp	r3, #1
 800da20:	d114      	bne.n	800da4c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800da26:	69ba      	ldr	r2, [r7, #24]
 800da28:	8812      	ldrh	r2, [r2, #0]
 800da2a:	b292      	uxth	r2, r2
 800da2c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800da32:	1c9a      	adds	r2, r3, #2
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800da3e:	b29b      	uxth	r3, r3
 800da40:	3b01      	subs	r3, #1
 800da42:	b29a      	uxth	r2, r3
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800da4a:	e06f      	b.n	800db2c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800da52:	b29b      	uxth	r3, r3
 800da54:	8bfa      	ldrh	r2, [r7, #30]
 800da56:	429a      	cmp	r2, r3
 800da58:	d924      	bls.n	800daa4 <HAL_SPI_Receive+0x29c>
 800da5a:	693b      	ldr	r3, [r7, #16]
 800da5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800da60:	2b00      	cmp	r3, #0
 800da62:	d01f      	beq.n	800daa4 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800da68:	69ba      	ldr	r2, [r7, #24]
 800da6a:	8812      	ldrh	r2, [r2, #0]
 800da6c:	b292      	uxth	r2, r2
 800da6e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800da74:	1c9a      	adds	r2, r3, #2
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800da7e:	69ba      	ldr	r2, [r7, #24]
 800da80:	8812      	ldrh	r2, [r2, #0]
 800da82:	b292      	uxth	r2, r2
 800da84:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800da8a:	1c9a      	adds	r2, r3, #2
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800da96:	b29b      	uxth	r3, r3
 800da98:	3b02      	subs	r3, #2
 800da9a:	b29a      	uxth	r2, r3
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800daa2:	e043      	b.n	800db2c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800daaa:	b29b      	uxth	r3, r3
 800daac:	2b01      	cmp	r3, #1
 800daae:	d119      	bne.n	800dae4 <HAL_SPI_Receive+0x2dc>
 800dab0:	693b      	ldr	r3, [r7, #16]
 800dab2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d014      	beq.n	800dae4 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dabe:	69ba      	ldr	r2, [r7, #24]
 800dac0:	8812      	ldrh	r2, [r2, #0]
 800dac2:	b292      	uxth	r2, r2
 800dac4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800daca:	1c9a      	adds	r2, r3, #2
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dad6:	b29b      	uxth	r3, r3
 800dad8:	3b01      	subs	r3, #1
 800dada:	b29a      	uxth	r2, r3
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800dae2:	e023      	b.n	800db2c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dae4:	f7f8 fe90 	bl	8006808 <HAL_GetTick>
 800dae8:	4602      	mov	r2, r0
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	1ad3      	subs	r3, r2, r3
 800daee:	683a      	ldr	r2, [r7, #0]
 800daf0:	429a      	cmp	r2, r3
 800daf2:	d803      	bhi.n	800dafc <HAL_SPI_Receive+0x2f4>
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dafa:	d102      	bne.n	800db02 <HAL_SPI_Receive+0x2fa>
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d114      	bne.n	800db2c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800db02:	68f8      	ldr	r0, [r7, #12]
 800db04:	f000 fc2c 	bl	800e360 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800db0e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	2201      	movs	r2, #1
 800db1c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	2200      	movs	r2, #0
 800db24:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800db28:	2303      	movs	r3, #3
 800db2a:	e0db      	b.n	800dce4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800db32:	b29b      	uxth	r3, r3
 800db34:	2b00      	cmp	r3, #0
 800db36:	f47f af69 	bne.w	800da0c <HAL_SPI_Receive+0x204>
 800db3a:	e0c0      	b.n	800dcbe <HAL_SPI_Receive+0x4b6>
 800db3c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	695b      	ldr	r3, [r3, #20]
 800db46:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	695b      	ldr	r3, [r3, #20]
 800db4e:	f003 0301 	and.w	r3, r3, #1
 800db52:	2b01      	cmp	r3, #1
 800db54:	d117      	bne.n	800db86 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800db62:	7812      	ldrb	r2, [r2, #0]
 800db64:	b2d2      	uxtb	r2, r2
 800db66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800db6c:	1c5a      	adds	r2, r3, #1
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800db78:	b29b      	uxth	r3, r3
 800db7a:	3b01      	subs	r3, #1
 800db7c:	b29a      	uxth	r2, r3
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800db84:	e094      	b.n	800dcb0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800db8c:	b29b      	uxth	r3, r3
 800db8e:	8bfa      	ldrh	r2, [r7, #30]
 800db90:	429a      	cmp	r2, r3
 800db92:	d946      	bls.n	800dc22 <HAL_SPI_Receive+0x41a>
 800db94:	693b      	ldr	r3, [r7, #16]
 800db96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d041      	beq.n	800dc22 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dbaa:	7812      	ldrb	r2, [r2, #0]
 800dbac:	b2d2      	uxtb	r2, r2
 800dbae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dbb4:	1c5a      	adds	r2, r3, #1
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dbc6:	7812      	ldrb	r2, [r2, #0]
 800dbc8:	b2d2      	uxtb	r2, r2
 800dbca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dbd0:	1c5a      	adds	r2, r3, #1
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dbe2:	7812      	ldrb	r2, [r2, #0]
 800dbe4:	b2d2      	uxtb	r2, r2
 800dbe6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dbec:	1c5a      	adds	r2, r3, #1
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dbfe:	7812      	ldrb	r2, [r2, #0]
 800dc00:	b2d2      	uxtb	r2, r2
 800dc02:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dc08:	1c5a      	adds	r2, r3, #1
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dc14:	b29b      	uxth	r3, r3
 800dc16:	3b04      	subs	r3, #4
 800dc18:	b29a      	uxth	r2, r3
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800dc20:	e046      	b.n	800dcb0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dc28:	b29b      	uxth	r3, r3
 800dc2a:	2b03      	cmp	r3, #3
 800dc2c:	d81c      	bhi.n	800dc68 <HAL_SPI_Receive+0x460>
 800dc2e:	693b      	ldr	r3, [r7, #16]
 800dc30:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d017      	beq.n	800dc68 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dc44:	7812      	ldrb	r2, [r2, #0]
 800dc46:	b2d2      	uxtb	r2, r2
 800dc48:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dc4e:	1c5a      	adds	r2, r3, #1
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dc5a:	b29b      	uxth	r3, r3
 800dc5c:	3b01      	subs	r3, #1
 800dc5e:	b29a      	uxth	r2, r3
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800dc66:	e023      	b.n	800dcb0 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dc68:	f7f8 fdce 	bl	8006808 <HAL_GetTick>
 800dc6c:	4602      	mov	r2, r0
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	1ad3      	subs	r3, r2, r3
 800dc72:	683a      	ldr	r2, [r7, #0]
 800dc74:	429a      	cmp	r2, r3
 800dc76:	d803      	bhi.n	800dc80 <HAL_SPI_Receive+0x478>
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc7e:	d102      	bne.n	800dc86 <HAL_SPI_Receive+0x47e>
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d114      	bne.n	800dcb0 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dc86:	68f8      	ldr	r0, [r7, #12]
 800dc88:	f000 fb6a 	bl	800e360 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dc92:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	2201      	movs	r2, #1
 800dca0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	2200      	movs	r2, #0
 800dca8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800dcac:	2303      	movs	r3, #3
 800dcae:	e019      	b.n	800dce4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dcb6:	b29b      	uxth	r3, r3
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	f47f af41 	bne.w	800db40 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800dcbe:	68f8      	ldr	r0, [r7, #12]
 800dcc0:	f000 fb4e 	bl	800e360 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	2201      	movs	r2, #1
 800dcc8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	2200      	movs	r2, #0
 800dcd0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d001      	beq.n	800dce2 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800dcde:	2301      	movs	r3, #1
 800dce0:	e000      	b.n	800dce4 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800dce2:	2300      	movs	r3, #0
  }
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	3720      	adds	r7, #32
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b08e      	sub	sp, #56	@ 0x38
 800dcf0:	af02      	add	r7, sp, #8
 800dcf2:	60f8      	str	r0, [r7, #12]
 800dcf4:	60b9      	str	r1, [r7, #8]
 800dcf6:	607a      	str	r2, [r7, #4]
 800dcf8:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	3320      	adds	r3, #32
 800dd00:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	3330      	adds	r3, #48	@ 0x30
 800dd08:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd0e:	095b      	lsrs	r3, r3, #5
 800dd10:	b29b      	uxth	r3, r3
 800dd12:	3301      	adds	r3, #1
 800dd14:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dd16:	f7f8 fd77 	bl	8006808 <HAL_GetTick>
 800dd1a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800dd1c:	887b      	ldrh	r3, [r7, #2]
 800dd1e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800dd20:	887b      	ldrh	r3, [r7, #2]
 800dd22:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800dd2a:	b2db      	uxtb	r3, r3
 800dd2c:	2b01      	cmp	r3, #1
 800dd2e:	d001      	beq.n	800dd34 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800dd30:	2302      	movs	r3, #2
 800dd32:	e310      	b.n	800e356 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d005      	beq.n	800dd46 <HAL_SPI_TransmitReceive+0x5a>
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d002      	beq.n	800dd46 <HAL_SPI_TransmitReceive+0x5a>
 800dd40:	887b      	ldrh	r3, [r7, #2]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d101      	bne.n	800dd4a <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800dd46:	2301      	movs	r3, #1
 800dd48:	e305      	b.n	800e356 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800dd50:	2b01      	cmp	r3, #1
 800dd52:	d101      	bne.n	800dd58 <HAL_SPI_TransmitReceive+0x6c>
 800dd54:	2302      	movs	r3, #2
 800dd56:	e2fe      	b.n	800e356 <HAL_SPI_TransmitReceive+0x66a>
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	2201      	movs	r2, #1
 800dd5c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	2205      	movs	r2, #5
 800dd64:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	687a      	ldr	r2, [r7, #4]
 800dd74:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	887a      	ldrh	r2, [r7, #2]
 800dd7a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	887a      	ldrh	r2, [r7, #2]
 800dd82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	68ba      	ldr	r2, [r7, #8]
 800dd8a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	887a      	ldrh	r2, [r7, #2]
 800dd90:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	887a      	ldrh	r2, [r7, #2]
 800dd98:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	2200      	movs	r2, #0
 800dda6:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	68da      	ldr	r2, [r3, #12]
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800ddb6:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	4a70      	ldr	r2, [pc, #448]	@ (800df80 <HAL_SPI_TransmitReceive+0x294>)
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	d009      	beq.n	800ddd6 <HAL_SPI_TransmitReceive+0xea>
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	4a6f      	ldr	r2, [pc, #444]	@ (800df84 <HAL_SPI_TransmitReceive+0x298>)
 800ddc8:	4293      	cmp	r3, r2
 800ddca:	d004      	beq.n	800ddd6 <HAL_SPI_TransmitReceive+0xea>
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	4a6d      	ldr	r2, [pc, #436]	@ (800df88 <HAL_SPI_TransmitReceive+0x29c>)
 800ddd2:	4293      	cmp	r3, r2
 800ddd4:	d102      	bne.n	800dddc <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800ddd6:	2310      	movs	r3, #16
 800ddd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ddda:	e001      	b.n	800dde0 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800dddc:	2308      	movs	r3, #8
 800ddde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	685a      	ldr	r2, [r3, #4]
 800dde6:	4b69      	ldr	r3, [pc, #420]	@ (800df8c <HAL_SPI_TransmitReceive+0x2a0>)
 800dde8:	4013      	ands	r3, r2
 800ddea:	8879      	ldrh	r1, [r7, #2]
 800ddec:	68fa      	ldr	r2, [r7, #12]
 800ddee:	6812      	ldr	r2, [r2, #0]
 800ddf0:	430b      	orrs	r3, r1
 800ddf2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	681a      	ldr	r2, [r3, #0]
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	f042 0201 	orr.w	r2, r2, #1
 800de02:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	685b      	ldr	r3, [r3, #4]
 800de08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800de0c:	d107      	bne.n	800de1e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	681a      	ldr	r2, [r3, #0]
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800de1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	68db      	ldr	r3, [r3, #12]
 800de22:	2b0f      	cmp	r3, #15
 800de24:	f240 80a2 	bls.w	800df6c <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800de28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de2a:	089b      	lsrs	r3, r3, #2
 800de2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800de2e:	e094      	b.n	800df5a <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	695b      	ldr	r3, [r3, #20]
 800de36:	f003 0302 	and.w	r3, r3, #2
 800de3a:	2b02      	cmp	r3, #2
 800de3c:	d120      	bne.n	800de80 <HAL_SPI_TransmitReceive+0x194>
 800de3e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800de40:	2b00      	cmp	r3, #0
 800de42:	d01d      	beq.n	800de80 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800de44:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800de46:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800de48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de4a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d217      	bcs.n	800de80 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	6812      	ldr	r2, [r2, #0]
 800de5a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800de60:	1d1a      	adds	r2, r3, #4
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800de6c:	b29b      	uxth	r3, r3
 800de6e:	3b01      	subs	r3, #1
 800de70:	b29a      	uxth	r2, r3
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800de7e:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	695b      	ldr	r3, [r3, #20]
 800de86:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800de88:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d065      	beq.n	800df5a <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	695b      	ldr	r3, [r3, #20]
 800de94:	f003 0301 	and.w	r3, r3, #1
 800de98:	2b01      	cmp	r3, #1
 800de9a:	d118      	bne.n	800dece <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	681a      	ldr	r2, [r3, #0]
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dea4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800dea6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800deac:	1d1a      	adds	r2, r3, #4
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800deb8:	b29b      	uxth	r3, r3
 800deba:	3b01      	subs	r3, #1
 800debc:	b29a      	uxth	r2, r3
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800deca:	853b      	strh	r3, [r7, #40]	@ 0x28
 800decc:	e045      	b.n	800df5a <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800dece:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ded0:	8bfb      	ldrh	r3, [r7, #30]
 800ded2:	429a      	cmp	r2, r3
 800ded4:	d21d      	bcs.n	800df12 <HAL_SPI_TransmitReceive+0x226>
 800ded6:	697b      	ldr	r3, [r7, #20]
 800ded8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d018      	beq.n	800df12 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	681a      	ldr	r2, [r3, #0]
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dee8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800deea:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800def0:	1d1a      	adds	r2, r3, #4
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800defc:	b29b      	uxth	r3, r3
 800defe:	3b01      	subs	r3, #1
 800df00:	b29a      	uxth	r2, r3
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800df0e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800df10:	e023      	b.n	800df5a <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800df12:	f7f8 fc79 	bl	8006808 <HAL_GetTick>
 800df16:	4602      	mov	r2, r0
 800df18:	69bb      	ldr	r3, [r7, #24]
 800df1a:	1ad3      	subs	r3, r2, r3
 800df1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800df1e:	429a      	cmp	r2, r3
 800df20:	d803      	bhi.n	800df2a <HAL_SPI_TransmitReceive+0x23e>
 800df22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df28:	d102      	bne.n	800df30 <HAL_SPI_TransmitReceive+0x244>
 800df2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d114      	bne.n	800df5a <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800df30:	68f8      	ldr	r0, [r7, #12]
 800df32:	f000 fa15 	bl	800e360 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800df3c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	2201      	movs	r2, #1
 800df4a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	2200      	movs	r2, #0
 800df52:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800df56:	2303      	movs	r3, #3
 800df58:	e1fd      	b.n	800e356 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800df5a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	f47f af67 	bne.w	800de30 <HAL_SPI_TransmitReceive+0x144>
 800df62:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800df64:	2b00      	cmp	r3, #0
 800df66:	f47f af63 	bne.w	800de30 <HAL_SPI_TransmitReceive+0x144>
 800df6a:	e1ce      	b.n	800e30a <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	68db      	ldr	r3, [r3, #12]
 800df70:	2b07      	cmp	r3, #7
 800df72:	f240 81c2 	bls.w	800e2fa <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800df76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df78:	085b      	lsrs	r3, r3, #1
 800df7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800df7c:	e0c9      	b.n	800e112 <HAL_SPI_TransmitReceive+0x426>
 800df7e:	bf00      	nop
 800df80:	40013000 	.word	0x40013000
 800df84:	40003800 	.word	0x40003800
 800df88:	40003c00 	.word	0x40003c00
 800df8c:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	695b      	ldr	r3, [r3, #20]
 800df96:	f003 0302 	and.w	r3, r3, #2
 800df9a:	2b02      	cmp	r3, #2
 800df9c:	d11f      	bne.n	800dfde <HAL_SPI_TransmitReceive+0x2f2>
 800df9e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d01c      	beq.n	800dfde <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800dfa4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800dfa6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800dfa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfaa:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d216      	bcs.n	800dfde <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dfb4:	881a      	ldrh	r2, [r3, #0]
 800dfb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfb8:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dfbe:	1c9a      	adds	r2, r3, #2
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800dfca:	b29b      	uxth	r3, r3
 800dfcc:	3b01      	subs	r3, #1
 800dfce:	b29a      	uxth	r2, r3
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800dfdc:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	695b      	ldr	r3, [r3, #20]
 800dfe4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800dfe6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	f000 8092 	beq.w	800e112 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	695b      	ldr	r3, [r3, #20]
 800dff4:	f003 0301 	and.w	r3, r3, #1
 800dff8:	2b01      	cmp	r3, #1
 800dffa:	d118      	bne.n	800e02e <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e000:	6a3a      	ldr	r2, [r7, #32]
 800e002:	8812      	ldrh	r2, [r2, #0]
 800e004:	b292      	uxth	r2, r2
 800e006:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e00c:	1c9a      	adds	r2, r3, #2
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e018:	b29b      	uxth	r3, r3
 800e01a:	3b01      	subs	r3, #1
 800e01c:	b29a      	uxth	r2, r3
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e02a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e02c:	e071      	b.n	800e112 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e02e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e030:	8bfb      	ldrh	r3, [r7, #30]
 800e032:	429a      	cmp	r2, r3
 800e034:	d228      	bcs.n	800e088 <HAL_SPI_TransmitReceive+0x39c>
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d023      	beq.n	800e088 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e044:	6a3a      	ldr	r2, [r7, #32]
 800e046:	8812      	ldrh	r2, [r2, #0]
 800e048:	b292      	uxth	r2, r2
 800e04a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e050:	1c9a      	adds	r2, r3, #2
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e05a:	6a3a      	ldr	r2, [r7, #32]
 800e05c:	8812      	ldrh	r2, [r2, #0]
 800e05e:	b292      	uxth	r2, r2
 800e060:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e066:	1c9a      	adds	r2, r3, #2
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e072:	b29b      	uxth	r3, r3
 800e074:	3b02      	subs	r3, #2
 800e076:	b29a      	uxth	r2, r3
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e084:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e086:	e044      	b.n	800e112 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e088:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e08a:	2b01      	cmp	r3, #1
 800e08c:	d11d      	bne.n	800e0ca <HAL_SPI_TransmitReceive+0x3de>
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e094:	2b00      	cmp	r3, #0
 800e096:	d018      	beq.n	800e0ca <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e09c:	6a3a      	ldr	r2, [r7, #32]
 800e09e:	8812      	ldrh	r2, [r2, #0]
 800e0a0:	b292      	uxth	r2, r2
 800e0a2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e0a8:	1c9a      	adds	r2, r3, #2
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e0b4:	b29b      	uxth	r3, r3
 800e0b6:	3b01      	subs	r3, #1
 800e0b8:	b29a      	uxth	r2, r3
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e0c6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e0c8:	e023      	b.n	800e112 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e0ca:	f7f8 fb9d 	bl	8006808 <HAL_GetTick>
 800e0ce:	4602      	mov	r2, r0
 800e0d0:	69bb      	ldr	r3, [r7, #24]
 800e0d2:	1ad3      	subs	r3, r2, r3
 800e0d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	d803      	bhi.n	800e0e2 <HAL_SPI_TransmitReceive+0x3f6>
 800e0da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0e0:	d102      	bne.n	800e0e8 <HAL_SPI_TransmitReceive+0x3fc>
 800e0e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d114      	bne.n	800e112 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800e0e8:	68f8      	ldr	r0, [r7, #12]
 800e0ea:	f000 f939 	bl	800e360 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e0f4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	2201      	movs	r2, #1
 800e102:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	2200      	movs	r2, #0
 800e10a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800e10e:	2303      	movs	r3, #3
 800e110:	e121      	b.n	800e356 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e112:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e114:	2b00      	cmp	r3, #0
 800e116:	f47f af3b 	bne.w	800df90 <HAL_SPI_TransmitReceive+0x2a4>
 800e11a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	f47f af37 	bne.w	800df90 <HAL_SPI_TransmitReceive+0x2a4>
 800e122:	e0f2      	b.n	800e30a <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	695b      	ldr	r3, [r3, #20]
 800e12a:	f003 0302 	and.w	r3, r3, #2
 800e12e:	2b02      	cmp	r3, #2
 800e130:	d121      	bne.n	800e176 <HAL_SPI_TransmitReceive+0x48a>
 800e132:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e134:	2b00      	cmp	r3, #0
 800e136:	d01e      	beq.n	800e176 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800e138:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e13a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800e13c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e13e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e140:	429a      	cmp	r2, r3
 800e142:	d218      	bcs.n	800e176 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	3320      	adds	r3, #32
 800e14e:	7812      	ldrb	r2, [r2, #0]
 800e150:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e156:	1c5a      	adds	r2, r3, #1
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e162:	b29b      	uxth	r3, r3
 800e164:	3b01      	subs	r3, #1
 800e166:	b29a      	uxth	r2, r3
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e174:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	695b      	ldr	r3, [r3, #20]
 800e17c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800e17e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e180:	2b00      	cmp	r3, #0
 800e182:	f000 80ba 	beq.w	800e2fa <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	695b      	ldr	r3, [r3, #20]
 800e18c:	f003 0301 	and.w	r3, r3, #1
 800e190:	2b01      	cmp	r3, #1
 800e192:	d11b      	bne.n	800e1cc <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e1a0:	7812      	ldrb	r2, [r2, #0]
 800e1a2:	b2d2      	uxtb	r2, r2
 800e1a4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e1aa:	1c5a      	adds	r2, r3, #1
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e1b6:	b29b      	uxth	r3, r3
 800e1b8:	3b01      	subs	r3, #1
 800e1ba:	b29a      	uxth	r2, r3
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e1c8:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e1ca:	e096      	b.n	800e2fa <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e1cc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e1ce:	8bfb      	ldrh	r3, [r7, #30]
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	d24a      	bcs.n	800e26a <HAL_SPI_TransmitReceive+0x57e>
 800e1d4:	697b      	ldr	r3, [r7, #20]
 800e1d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d045      	beq.n	800e26a <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e1ea:	7812      	ldrb	r2, [r2, #0]
 800e1ec:	b2d2      	uxtb	r2, r2
 800e1ee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e1f4:	1c5a      	adds	r2, r3, #1
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e206:	7812      	ldrb	r2, [r2, #0]
 800e208:	b2d2      	uxtb	r2, r2
 800e20a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e210:	1c5a      	adds	r2, r3, #1
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e222:	7812      	ldrb	r2, [r2, #0]
 800e224:	b2d2      	uxtb	r2, r2
 800e226:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e22c:	1c5a      	adds	r2, r3, #1
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e23e:	7812      	ldrb	r2, [r2, #0]
 800e240:	b2d2      	uxtb	r2, r2
 800e242:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e248:	1c5a      	adds	r2, r3, #1
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e254:	b29b      	uxth	r3, r3
 800e256:	3b04      	subs	r3, #4
 800e258:	b29a      	uxth	r2, r3
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e266:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e268:	e047      	b.n	800e2fa <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e26a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e26c:	2b03      	cmp	r3, #3
 800e26e:	d820      	bhi.n	800e2b2 <HAL_SPI_TransmitReceive+0x5c6>
 800e270:	697b      	ldr	r3, [r7, #20]
 800e272:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800e276:	2b00      	cmp	r3, #0
 800e278:	d01b      	beq.n	800e2b2 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e286:	7812      	ldrb	r2, [r2, #0]
 800e288:	b2d2      	uxtb	r2, r2
 800e28a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e290:	1c5a      	adds	r2, r3, #1
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e29c:	b29b      	uxth	r3, r3
 800e29e:	3b01      	subs	r3, #1
 800e2a0:	b29a      	uxth	r2, r3
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e2ae:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e2b0:	e023      	b.n	800e2fa <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e2b2:	f7f8 faa9 	bl	8006808 <HAL_GetTick>
 800e2b6:	4602      	mov	r2, r0
 800e2b8:	69bb      	ldr	r3, [r7, #24]
 800e2ba:	1ad3      	subs	r3, r2, r3
 800e2bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e2be:	429a      	cmp	r2, r3
 800e2c0:	d803      	bhi.n	800e2ca <HAL_SPI_TransmitReceive+0x5de>
 800e2c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2c8:	d102      	bne.n	800e2d0 <HAL_SPI_TransmitReceive+0x5e4>
 800e2ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d114      	bne.n	800e2fa <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800e2d0:	68f8      	ldr	r0, [r7, #12]
 800e2d2:	f000 f845 	bl	800e360 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e2dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	2201      	movs	r2, #1
 800e2ea:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800e2f6:	2303      	movs	r3, #3
 800e2f8:	e02d      	b.n	800e356 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e2fa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	f47f af11 	bne.w	800e124 <HAL_SPI_TransmitReceive+0x438>
 800e302:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e304:	2b00      	cmp	r3, #0
 800e306:	f47f af0d 	bne.w	800e124 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800e30a:	69bb      	ldr	r3, [r7, #24]
 800e30c:	9300      	str	r3, [sp, #0]
 800e30e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e310:	2200      	movs	r2, #0
 800e312:	2108      	movs	r1, #8
 800e314:	68f8      	ldr	r0, [r7, #12]
 800e316:	f000 f8c3 	bl	800e4a0 <SPI_WaitOnFlagUntilTimeout>
 800e31a:	4603      	mov	r3, r0
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d007      	beq.n	800e330 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e326:	f043 0220 	orr.w	r2, r3, #32
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e330:	68f8      	ldr	r0, [r7, #12]
 800e332:	f000 f815 	bl	800e360 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	2201      	movs	r2, #1
 800e33a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	2200      	movs	r2, #0
 800e342:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d001      	beq.n	800e354 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800e350:	2301      	movs	r3, #1
 800e352:	e000      	b.n	800e356 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800e354:	2300      	movs	r3, #0
  }
}
 800e356:	4618      	mov	r0, r3
 800e358:	3730      	adds	r7, #48	@ 0x30
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}
 800e35e:	bf00      	nop

0800e360 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e360:	b480      	push	{r7}
 800e362:	b085      	sub	sp, #20
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	695b      	ldr	r3, [r3, #20]
 800e36e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	699a      	ldr	r2, [r3, #24]
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	f042 0208 	orr.w	r2, r2, #8
 800e37e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	699a      	ldr	r2, [r3, #24]
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	f042 0210 	orr.w	r2, r2, #16
 800e38e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	681a      	ldr	r2, [r3, #0]
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	f022 0201 	bic.w	r2, r2, #1
 800e39e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	6919      	ldr	r1, [r3, #16]
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681a      	ldr	r2, [r3, #0]
 800e3aa:	4b3c      	ldr	r3, [pc, #240]	@ (800e49c <SPI_CloseTransfer+0x13c>)
 800e3ac:	400b      	ands	r3, r1
 800e3ae:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	689a      	ldr	r2, [r3, #8]
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800e3be:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e3c6:	b2db      	uxtb	r3, r3
 800e3c8:	2b04      	cmp	r3, #4
 800e3ca:	d014      	beq.n	800e3f6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	f003 0320 	and.w	r3, r3, #32
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d00f      	beq.n	800e3f6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e3dc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	699a      	ldr	r2, [r3, #24]
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	f042 0220 	orr.w	r2, r2, #32
 800e3f4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e3fc:	b2db      	uxtb	r3, r3
 800e3fe:	2b03      	cmp	r3, #3
 800e400:	d014      	beq.n	800e42c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d00f      	beq.n	800e42c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e412:	f043 0204 	orr.w	r2, r3, #4
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	699a      	ldr	r2, [r3, #24]
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e42a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e432:	2b00      	cmp	r3, #0
 800e434:	d00f      	beq.n	800e456 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e43c:	f043 0201 	orr.w	r2, r3, #1
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	699a      	ldr	r2, [r3, #24]
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e454:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d00f      	beq.n	800e480 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e466:	f043 0208 	orr.w	r2, r3, #8
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	699a      	ldr	r2, [r3, #24]
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e47e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2200      	movs	r2, #0
 800e484:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2200      	movs	r2, #0
 800e48c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800e490:	bf00      	nop
 800e492:	3714      	adds	r7, #20
 800e494:	46bd      	mov	sp, r7
 800e496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49a:	4770      	bx	lr
 800e49c:	fffffc90 	.word	0xfffffc90

0800e4a0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b084      	sub	sp, #16
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	60f8      	str	r0, [r7, #12]
 800e4a8:	60b9      	str	r1, [r7, #8]
 800e4aa:	603b      	str	r3, [r7, #0]
 800e4ac:	4613      	mov	r3, r2
 800e4ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e4b0:	e010      	b.n	800e4d4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e4b2:	f7f8 f9a9 	bl	8006808 <HAL_GetTick>
 800e4b6:	4602      	mov	r2, r0
 800e4b8:	69bb      	ldr	r3, [r7, #24]
 800e4ba:	1ad3      	subs	r3, r2, r3
 800e4bc:	683a      	ldr	r2, [r7, #0]
 800e4be:	429a      	cmp	r2, r3
 800e4c0:	d803      	bhi.n	800e4ca <SPI_WaitOnFlagUntilTimeout+0x2a>
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4c8:	d102      	bne.n	800e4d0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800e4ca:	683b      	ldr	r3, [r7, #0]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d101      	bne.n	800e4d4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800e4d0:	2303      	movs	r3, #3
 800e4d2:	e00f      	b.n	800e4f4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	695a      	ldr	r2, [r3, #20]
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	4013      	ands	r3, r2
 800e4de:	68ba      	ldr	r2, [r7, #8]
 800e4e0:	429a      	cmp	r2, r3
 800e4e2:	bf0c      	ite	eq
 800e4e4:	2301      	moveq	r3, #1
 800e4e6:	2300      	movne	r3, #0
 800e4e8:	b2db      	uxtb	r3, r3
 800e4ea:	461a      	mov	r2, r3
 800e4ec:	79fb      	ldrb	r3, [r7, #7]
 800e4ee:	429a      	cmp	r2, r3
 800e4f0:	d0df      	beq.n	800e4b2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800e4f2:	2300      	movs	r3, #0
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	3710      	adds	r7, #16
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}

0800e4fc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b085      	sub	sp, #20
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e508:	095b      	lsrs	r3, r3, #5
 800e50a:	3301      	adds	r3, #1
 800e50c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	68db      	ldr	r3, [r3, #12]
 800e512:	3301      	adds	r3, #1
 800e514:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e516:	68bb      	ldr	r3, [r7, #8]
 800e518:	3307      	adds	r3, #7
 800e51a:	08db      	lsrs	r3, r3, #3
 800e51c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	68fa      	ldr	r2, [r7, #12]
 800e522:	fb02 f303 	mul.w	r3, r2, r3
}
 800e526:	4618      	mov	r0, r3
 800e528:	3714      	adds	r7, #20
 800e52a:	46bd      	mov	sp, r7
 800e52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e530:	4770      	bx	lr

0800e532 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e532:	b580      	push	{r7, lr}
 800e534:	b082      	sub	sp, #8
 800e536:	af00      	add	r7, sp, #0
 800e538:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d101      	bne.n	800e544 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e540:	2301      	movs	r3, #1
 800e542:	e049      	b.n	800e5d8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e54a:	b2db      	uxtb	r3, r3
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d106      	bne.n	800e55e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2200      	movs	r2, #0
 800e554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f7f5 fb4f 	bl	8003bfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	2202      	movs	r2, #2
 800e562:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681a      	ldr	r2, [r3, #0]
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	3304      	adds	r3, #4
 800e56e:	4619      	mov	r1, r3
 800e570:	4610      	mov	r0, r2
 800e572:	f000 fc57 	bl	800ee24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	2201      	movs	r2, #1
 800e57a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2201      	movs	r2, #1
 800e582:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2201      	movs	r2, #1
 800e58a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	2201      	movs	r2, #1
 800e592:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2201      	movs	r2, #1
 800e59a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	2201      	movs	r2, #1
 800e5a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	2201      	movs	r2, #1
 800e5aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2201      	movs	r2, #1
 800e5b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	2201      	movs	r2, #1
 800e5ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	2201      	movs	r2, #1
 800e5c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	2201      	movs	r2, #1
 800e5ca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2201      	movs	r2, #1
 800e5d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e5d6:	2300      	movs	r3, #0
}
 800e5d8:	4618      	mov	r0, r3
 800e5da:	3708      	adds	r7, #8
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bd80      	pop	{r7, pc}

0800e5e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e5e0:	b480      	push	{r7}
 800e5e2:	b085      	sub	sp, #20
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e5ee:	b2db      	uxtb	r3, r3
 800e5f0:	2b01      	cmp	r3, #1
 800e5f2:	d001      	beq.n	800e5f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	e054      	b.n	800e6a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2202      	movs	r2, #2
 800e5fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	68da      	ldr	r2, [r3, #12]
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	f042 0201 	orr.w	r2, r2, #1
 800e60e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	4a26      	ldr	r2, [pc, #152]	@ (800e6b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800e616:	4293      	cmp	r3, r2
 800e618:	d022      	beq.n	800e660 <HAL_TIM_Base_Start_IT+0x80>
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e622:	d01d      	beq.n	800e660 <HAL_TIM_Base_Start_IT+0x80>
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	4a22      	ldr	r2, [pc, #136]	@ (800e6b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800e62a:	4293      	cmp	r3, r2
 800e62c:	d018      	beq.n	800e660 <HAL_TIM_Base_Start_IT+0x80>
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	4a21      	ldr	r2, [pc, #132]	@ (800e6b8 <HAL_TIM_Base_Start_IT+0xd8>)
 800e634:	4293      	cmp	r3, r2
 800e636:	d013      	beq.n	800e660 <HAL_TIM_Base_Start_IT+0x80>
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	4a1f      	ldr	r2, [pc, #124]	@ (800e6bc <HAL_TIM_Base_Start_IT+0xdc>)
 800e63e:	4293      	cmp	r3, r2
 800e640:	d00e      	beq.n	800e660 <HAL_TIM_Base_Start_IT+0x80>
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	4a1e      	ldr	r2, [pc, #120]	@ (800e6c0 <HAL_TIM_Base_Start_IT+0xe0>)
 800e648:	4293      	cmp	r3, r2
 800e64a:	d009      	beq.n	800e660 <HAL_TIM_Base_Start_IT+0x80>
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	4a1c      	ldr	r2, [pc, #112]	@ (800e6c4 <HAL_TIM_Base_Start_IT+0xe4>)
 800e652:	4293      	cmp	r3, r2
 800e654:	d004      	beq.n	800e660 <HAL_TIM_Base_Start_IT+0x80>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	4a1b      	ldr	r2, [pc, #108]	@ (800e6c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800e65c:	4293      	cmp	r3, r2
 800e65e:	d115      	bne.n	800e68c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	689a      	ldr	r2, [r3, #8]
 800e666:	4b19      	ldr	r3, [pc, #100]	@ (800e6cc <HAL_TIM_Base_Start_IT+0xec>)
 800e668:	4013      	ands	r3, r2
 800e66a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	2b06      	cmp	r3, #6
 800e670:	d015      	beq.n	800e69e <HAL_TIM_Base_Start_IT+0xbe>
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e678:	d011      	beq.n	800e69e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	681a      	ldr	r2, [r3, #0]
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	f042 0201 	orr.w	r2, r2, #1
 800e688:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e68a:	e008      	b.n	800e69e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	681a      	ldr	r2, [r3, #0]
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	f042 0201 	orr.w	r2, r2, #1
 800e69a:	601a      	str	r2, [r3, #0]
 800e69c:	e000      	b.n	800e6a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e69e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e6a0:	2300      	movs	r3, #0
}
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	3714      	adds	r7, #20
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ac:	4770      	bx	lr
 800e6ae:	bf00      	nop
 800e6b0:	40010000 	.word	0x40010000
 800e6b4:	40000400 	.word	0x40000400
 800e6b8:	40000800 	.word	0x40000800
 800e6bc:	40000c00 	.word	0x40000c00
 800e6c0:	40010400 	.word	0x40010400
 800e6c4:	40001800 	.word	0x40001800
 800e6c8:	40014000 	.word	0x40014000
 800e6cc:	00010007 	.word	0x00010007

0800e6d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b082      	sub	sp, #8
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d101      	bne.n	800e6e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e6de:	2301      	movs	r3, #1
 800e6e0:	e049      	b.n	800e776 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e6e8:	b2db      	uxtb	r3, r3
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d106      	bne.n	800e6fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	f7f5 fa32 	bl	8003b60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2202      	movs	r2, #2
 800e700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681a      	ldr	r2, [r3, #0]
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	3304      	adds	r3, #4
 800e70c:	4619      	mov	r1, r3
 800e70e:	4610      	mov	r0, r2
 800e710:	f000 fb88 	bl	800ee24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2201      	movs	r2, #1
 800e718:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	2201      	movs	r2, #1
 800e720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2201      	movs	r2, #1
 800e728:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2201      	movs	r2, #1
 800e730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2201      	movs	r2, #1
 800e738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	2201      	movs	r2, #1
 800e740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2201      	movs	r2, #1
 800e748:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2201      	movs	r2, #1
 800e750:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2201      	movs	r2, #1
 800e758:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2201      	movs	r2, #1
 800e760:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2201      	movs	r2, #1
 800e768:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2201      	movs	r2, #1
 800e770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e774:	2300      	movs	r3, #0
}
 800e776:	4618      	mov	r0, r3
 800e778:	3708      	adds	r7, #8
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bd80      	pop	{r7, pc}
	...

0800e780 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b084      	sub	sp, #16
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
 800e788:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d109      	bne.n	800e7a4 <HAL_TIM_PWM_Start+0x24>
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e796:	b2db      	uxtb	r3, r3
 800e798:	2b01      	cmp	r3, #1
 800e79a:	bf14      	ite	ne
 800e79c:	2301      	movne	r3, #1
 800e79e:	2300      	moveq	r3, #0
 800e7a0:	b2db      	uxtb	r3, r3
 800e7a2:	e03c      	b.n	800e81e <HAL_TIM_PWM_Start+0x9e>
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	2b04      	cmp	r3, #4
 800e7a8:	d109      	bne.n	800e7be <HAL_TIM_PWM_Start+0x3e>
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e7b0:	b2db      	uxtb	r3, r3
 800e7b2:	2b01      	cmp	r3, #1
 800e7b4:	bf14      	ite	ne
 800e7b6:	2301      	movne	r3, #1
 800e7b8:	2300      	moveq	r3, #0
 800e7ba:	b2db      	uxtb	r3, r3
 800e7bc:	e02f      	b.n	800e81e <HAL_TIM_PWM_Start+0x9e>
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	2b08      	cmp	r3, #8
 800e7c2:	d109      	bne.n	800e7d8 <HAL_TIM_PWM_Start+0x58>
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e7ca:	b2db      	uxtb	r3, r3
 800e7cc:	2b01      	cmp	r3, #1
 800e7ce:	bf14      	ite	ne
 800e7d0:	2301      	movne	r3, #1
 800e7d2:	2300      	moveq	r3, #0
 800e7d4:	b2db      	uxtb	r3, r3
 800e7d6:	e022      	b.n	800e81e <HAL_TIM_PWM_Start+0x9e>
 800e7d8:	683b      	ldr	r3, [r7, #0]
 800e7da:	2b0c      	cmp	r3, #12
 800e7dc:	d109      	bne.n	800e7f2 <HAL_TIM_PWM_Start+0x72>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e7e4:	b2db      	uxtb	r3, r3
 800e7e6:	2b01      	cmp	r3, #1
 800e7e8:	bf14      	ite	ne
 800e7ea:	2301      	movne	r3, #1
 800e7ec:	2300      	moveq	r3, #0
 800e7ee:	b2db      	uxtb	r3, r3
 800e7f0:	e015      	b.n	800e81e <HAL_TIM_PWM_Start+0x9e>
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	2b10      	cmp	r3, #16
 800e7f6:	d109      	bne.n	800e80c <HAL_TIM_PWM_Start+0x8c>
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e7fe:	b2db      	uxtb	r3, r3
 800e800:	2b01      	cmp	r3, #1
 800e802:	bf14      	ite	ne
 800e804:	2301      	movne	r3, #1
 800e806:	2300      	moveq	r3, #0
 800e808:	b2db      	uxtb	r3, r3
 800e80a:	e008      	b.n	800e81e <HAL_TIM_PWM_Start+0x9e>
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e812:	b2db      	uxtb	r3, r3
 800e814:	2b01      	cmp	r3, #1
 800e816:	bf14      	ite	ne
 800e818:	2301      	movne	r3, #1
 800e81a:	2300      	moveq	r3, #0
 800e81c:	b2db      	uxtb	r3, r3
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d001      	beq.n	800e826 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e822:	2301      	movs	r3, #1
 800e824:	e0a1      	b.n	800e96a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e826:	683b      	ldr	r3, [r7, #0]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d104      	bne.n	800e836 <HAL_TIM_PWM_Start+0xb6>
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2202      	movs	r2, #2
 800e830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e834:	e023      	b.n	800e87e <HAL_TIM_PWM_Start+0xfe>
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	2b04      	cmp	r3, #4
 800e83a:	d104      	bne.n	800e846 <HAL_TIM_PWM_Start+0xc6>
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2202      	movs	r2, #2
 800e840:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e844:	e01b      	b.n	800e87e <HAL_TIM_PWM_Start+0xfe>
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	2b08      	cmp	r3, #8
 800e84a:	d104      	bne.n	800e856 <HAL_TIM_PWM_Start+0xd6>
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2202      	movs	r2, #2
 800e850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e854:	e013      	b.n	800e87e <HAL_TIM_PWM_Start+0xfe>
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	2b0c      	cmp	r3, #12
 800e85a:	d104      	bne.n	800e866 <HAL_TIM_PWM_Start+0xe6>
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2202      	movs	r2, #2
 800e860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e864:	e00b      	b.n	800e87e <HAL_TIM_PWM_Start+0xfe>
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	2b10      	cmp	r3, #16
 800e86a:	d104      	bne.n	800e876 <HAL_TIM_PWM_Start+0xf6>
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2202      	movs	r2, #2
 800e870:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e874:	e003      	b.n	800e87e <HAL_TIM_PWM_Start+0xfe>
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2202      	movs	r2, #2
 800e87a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	2201      	movs	r2, #1
 800e884:	6839      	ldr	r1, [r7, #0]
 800e886:	4618      	mov	r0, r3
 800e888:	f000 fe48 	bl	800f51c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	4a38      	ldr	r2, [pc, #224]	@ (800e974 <HAL_TIM_PWM_Start+0x1f4>)
 800e892:	4293      	cmp	r3, r2
 800e894:	d013      	beq.n	800e8be <HAL_TIM_PWM_Start+0x13e>
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	4a37      	ldr	r2, [pc, #220]	@ (800e978 <HAL_TIM_PWM_Start+0x1f8>)
 800e89c:	4293      	cmp	r3, r2
 800e89e:	d00e      	beq.n	800e8be <HAL_TIM_PWM_Start+0x13e>
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	4a35      	ldr	r2, [pc, #212]	@ (800e97c <HAL_TIM_PWM_Start+0x1fc>)
 800e8a6:	4293      	cmp	r3, r2
 800e8a8:	d009      	beq.n	800e8be <HAL_TIM_PWM_Start+0x13e>
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	4a34      	ldr	r2, [pc, #208]	@ (800e980 <HAL_TIM_PWM_Start+0x200>)
 800e8b0:	4293      	cmp	r3, r2
 800e8b2:	d004      	beq.n	800e8be <HAL_TIM_PWM_Start+0x13e>
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	4a32      	ldr	r2, [pc, #200]	@ (800e984 <HAL_TIM_PWM_Start+0x204>)
 800e8ba:	4293      	cmp	r3, r2
 800e8bc:	d101      	bne.n	800e8c2 <HAL_TIM_PWM_Start+0x142>
 800e8be:	2301      	movs	r3, #1
 800e8c0:	e000      	b.n	800e8c4 <HAL_TIM_PWM_Start+0x144>
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d007      	beq.n	800e8d8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e8d6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	4a25      	ldr	r2, [pc, #148]	@ (800e974 <HAL_TIM_PWM_Start+0x1f4>)
 800e8de:	4293      	cmp	r3, r2
 800e8e0:	d022      	beq.n	800e928 <HAL_TIM_PWM_Start+0x1a8>
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e8ea:	d01d      	beq.n	800e928 <HAL_TIM_PWM_Start+0x1a8>
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	4a25      	ldr	r2, [pc, #148]	@ (800e988 <HAL_TIM_PWM_Start+0x208>)
 800e8f2:	4293      	cmp	r3, r2
 800e8f4:	d018      	beq.n	800e928 <HAL_TIM_PWM_Start+0x1a8>
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	4a24      	ldr	r2, [pc, #144]	@ (800e98c <HAL_TIM_PWM_Start+0x20c>)
 800e8fc:	4293      	cmp	r3, r2
 800e8fe:	d013      	beq.n	800e928 <HAL_TIM_PWM_Start+0x1a8>
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	4a22      	ldr	r2, [pc, #136]	@ (800e990 <HAL_TIM_PWM_Start+0x210>)
 800e906:	4293      	cmp	r3, r2
 800e908:	d00e      	beq.n	800e928 <HAL_TIM_PWM_Start+0x1a8>
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	4a1a      	ldr	r2, [pc, #104]	@ (800e978 <HAL_TIM_PWM_Start+0x1f8>)
 800e910:	4293      	cmp	r3, r2
 800e912:	d009      	beq.n	800e928 <HAL_TIM_PWM_Start+0x1a8>
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	4a1e      	ldr	r2, [pc, #120]	@ (800e994 <HAL_TIM_PWM_Start+0x214>)
 800e91a:	4293      	cmp	r3, r2
 800e91c:	d004      	beq.n	800e928 <HAL_TIM_PWM_Start+0x1a8>
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	4a16      	ldr	r2, [pc, #88]	@ (800e97c <HAL_TIM_PWM_Start+0x1fc>)
 800e924:	4293      	cmp	r3, r2
 800e926:	d115      	bne.n	800e954 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	689a      	ldr	r2, [r3, #8]
 800e92e:	4b1a      	ldr	r3, [pc, #104]	@ (800e998 <HAL_TIM_PWM_Start+0x218>)
 800e930:	4013      	ands	r3, r2
 800e932:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	2b06      	cmp	r3, #6
 800e938:	d015      	beq.n	800e966 <HAL_TIM_PWM_Start+0x1e6>
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e940:	d011      	beq.n	800e966 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	681a      	ldr	r2, [r3, #0]
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	f042 0201 	orr.w	r2, r2, #1
 800e950:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e952:	e008      	b.n	800e966 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	681a      	ldr	r2, [r3, #0]
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	f042 0201 	orr.w	r2, r2, #1
 800e962:	601a      	str	r2, [r3, #0]
 800e964:	e000      	b.n	800e968 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e966:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e968:	2300      	movs	r3, #0
}
 800e96a:	4618      	mov	r0, r3
 800e96c:	3710      	adds	r7, #16
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd80      	pop	{r7, pc}
 800e972:	bf00      	nop
 800e974:	40010000 	.word	0x40010000
 800e978:	40010400 	.word	0x40010400
 800e97c:	40014000 	.word	0x40014000
 800e980:	40014400 	.word	0x40014400
 800e984:	40014800 	.word	0x40014800
 800e988:	40000400 	.word	0x40000400
 800e98c:	40000800 	.word	0x40000800
 800e990:	40000c00 	.word	0x40000c00
 800e994:	40001800 	.word	0x40001800
 800e998:	00010007 	.word	0x00010007

0800e99c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b084      	sub	sp, #16
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	68db      	ldr	r3, [r3, #12]
 800e9aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	691b      	ldr	r3, [r3, #16]
 800e9b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	f003 0302 	and.w	r3, r3, #2
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d020      	beq.n	800ea00 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	f003 0302 	and.w	r3, r3, #2
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d01b      	beq.n	800ea00 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	f06f 0202 	mvn.w	r2, #2
 800e9d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	2201      	movs	r2, #1
 800e9d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	699b      	ldr	r3, [r3, #24]
 800e9de:	f003 0303 	and.w	r3, r3, #3
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d003      	beq.n	800e9ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e9e6:	6878      	ldr	r0, [r7, #4]
 800e9e8:	f000 f9fe 	bl	800ede8 <HAL_TIM_IC_CaptureCallback>
 800e9ec:	e005      	b.n	800e9fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	f000 f9f0 	bl	800edd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	f000 fa01 	bl	800edfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ea00:	68bb      	ldr	r3, [r7, #8]
 800ea02:	f003 0304 	and.w	r3, r3, #4
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d020      	beq.n	800ea4c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	f003 0304 	and.w	r3, r3, #4
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d01b      	beq.n	800ea4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	f06f 0204 	mvn.w	r2, #4
 800ea1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2202      	movs	r2, #2
 800ea22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	699b      	ldr	r3, [r3, #24]
 800ea2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d003      	beq.n	800ea3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f000 f9d8 	bl	800ede8 <HAL_TIM_IC_CaptureCallback>
 800ea38:	e005      	b.n	800ea46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea3a:	6878      	ldr	r0, [r7, #4]
 800ea3c:	f000 f9ca 	bl	800edd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea40:	6878      	ldr	r0, [r7, #4]
 800ea42:	f000 f9db 	bl	800edfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	2200      	movs	r2, #0
 800ea4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ea4c:	68bb      	ldr	r3, [r7, #8]
 800ea4e:	f003 0308 	and.w	r3, r3, #8
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d020      	beq.n	800ea98 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	f003 0308 	and.w	r3, r3, #8
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d01b      	beq.n	800ea98 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	f06f 0208 	mvn.w	r2, #8
 800ea68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2204      	movs	r2, #4
 800ea6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	69db      	ldr	r3, [r3, #28]
 800ea76:	f003 0303 	and.w	r3, r3, #3
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d003      	beq.n	800ea86 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ea7e:	6878      	ldr	r0, [r7, #4]
 800ea80:	f000 f9b2 	bl	800ede8 <HAL_TIM_IC_CaptureCallback>
 800ea84:	e005      	b.n	800ea92 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea86:	6878      	ldr	r0, [r7, #4]
 800ea88:	f000 f9a4 	bl	800edd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea8c:	6878      	ldr	r0, [r7, #4]
 800ea8e:	f000 f9b5 	bl	800edfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2200      	movs	r2, #0
 800ea96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	f003 0310 	and.w	r3, r3, #16
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d020      	beq.n	800eae4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	f003 0310 	and.w	r3, r3, #16
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d01b      	beq.n	800eae4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	f06f 0210 	mvn.w	r2, #16
 800eab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	2208      	movs	r2, #8
 800eaba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	69db      	ldr	r3, [r3, #28]
 800eac2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d003      	beq.n	800ead2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f000 f98c 	bl	800ede8 <HAL_TIM_IC_CaptureCallback>
 800ead0:	e005      	b.n	800eade <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ead2:	6878      	ldr	r0, [r7, #4]
 800ead4:	f000 f97e 	bl	800edd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ead8:	6878      	ldr	r0, [r7, #4]
 800eada:	f000 f98f 	bl	800edfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	2200      	movs	r2, #0
 800eae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800eae4:	68bb      	ldr	r3, [r7, #8]
 800eae6:	f003 0301 	and.w	r3, r3, #1
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d00c      	beq.n	800eb08 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	f003 0301 	and.w	r3, r3, #1
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d007      	beq.n	800eb08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	f06f 0201 	mvn.w	r2, #1
 800eb00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f7f4 fb02 	bl	800310c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800eb08:	68bb      	ldr	r3, [r7, #8]
 800eb0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d104      	bne.n	800eb1c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d00c      	beq.n	800eb36 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d007      	beq.n	800eb36 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800eb2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	f000 fdb1 	bl	800f698 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d00c      	beq.n	800eb5a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d007      	beq.n	800eb5a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800eb52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800eb54:	6878      	ldr	r0, [r7, #4]
 800eb56:	f000 fda9 	bl	800f6ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d00c      	beq.n	800eb7e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d007      	beq.n	800eb7e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800eb76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800eb78:	6878      	ldr	r0, [r7, #4]
 800eb7a:	f000 f949 	bl	800ee10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	f003 0320 	and.w	r3, r3, #32
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d00c      	beq.n	800eba2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	f003 0320 	and.w	r3, r3, #32
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d007      	beq.n	800eba2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	f06f 0220 	mvn.w	r2, #32
 800eb9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f000 fd71 	bl	800f684 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800eba2:	bf00      	nop
 800eba4:	3710      	adds	r7, #16
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}
	...

0800ebac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b086      	sub	sp, #24
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	60f8      	str	r0, [r7, #12]
 800ebb4:	60b9      	str	r1, [r7, #8]
 800ebb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ebb8:	2300      	movs	r3, #0
 800ebba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ebc2:	2b01      	cmp	r3, #1
 800ebc4:	d101      	bne.n	800ebca <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ebc6:	2302      	movs	r3, #2
 800ebc8:	e0ff      	b.n	800edca <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	2201      	movs	r2, #1
 800ebce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	2b14      	cmp	r3, #20
 800ebd6:	f200 80f0 	bhi.w	800edba <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ebda:	a201      	add	r2, pc, #4	@ (adr r2, 800ebe0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ebdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebe0:	0800ec35 	.word	0x0800ec35
 800ebe4:	0800edbb 	.word	0x0800edbb
 800ebe8:	0800edbb 	.word	0x0800edbb
 800ebec:	0800edbb 	.word	0x0800edbb
 800ebf0:	0800ec75 	.word	0x0800ec75
 800ebf4:	0800edbb 	.word	0x0800edbb
 800ebf8:	0800edbb 	.word	0x0800edbb
 800ebfc:	0800edbb 	.word	0x0800edbb
 800ec00:	0800ecb7 	.word	0x0800ecb7
 800ec04:	0800edbb 	.word	0x0800edbb
 800ec08:	0800edbb 	.word	0x0800edbb
 800ec0c:	0800edbb 	.word	0x0800edbb
 800ec10:	0800ecf7 	.word	0x0800ecf7
 800ec14:	0800edbb 	.word	0x0800edbb
 800ec18:	0800edbb 	.word	0x0800edbb
 800ec1c:	0800edbb 	.word	0x0800edbb
 800ec20:	0800ed39 	.word	0x0800ed39
 800ec24:	0800edbb 	.word	0x0800edbb
 800ec28:	0800edbb 	.word	0x0800edbb
 800ec2c:	0800edbb 	.word	0x0800edbb
 800ec30:	0800ed79 	.word	0x0800ed79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	68b9      	ldr	r1, [r7, #8]
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f000 f998 	bl	800ef70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	699a      	ldr	r2, [r3, #24]
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	f042 0208 	orr.w	r2, r2, #8
 800ec4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	699a      	ldr	r2, [r3, #24]
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	f022 0204 	bic.w	r2, r2, #4
 800ec5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	6999      	ldr	r1, [r3, #24]
 800ec66:	68bb      	ldr	r3, [r7, #8]
 800ec68:	691a      	ldr	r2, [r3, #16]
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	430a      	orrs	r2, r1
 800ec70:	619a      	str	r2, [r3, #24]
      break;
 800ec72:	e0a5      	b.n	800edc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	68b9      	ldr	r1, [r7, #8]
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f000 fa08 	bl	800f090 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	699a      	ldr	r2, [r3, #24]
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ec8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	699a      	ldr	r2, [r3, #24]
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ec9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	6999      	ldr	r1, [r3, #24]
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	691b      	ldr	r3, [r3, #16]
 800ecaa:	021a      	lsls	r2, r3, #8
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	430a      	orrs	r2, r1
 800ecb2:	619a      	str	r2, [r3, #24]
      break;
 800ecb4:	e084      	b.n	800edc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	68b9      	ldr	r1, [r7, #8]
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f000 fa71 	bl	800f1a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	69da      	ldr	r2, [r3, #28]
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	f042 0208 	orr.w	r2, r2, #8
 800ecd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	69da      	ldr	r2, [r3, #28]
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	f022 0204 	bic.w	r2, r2, #4
 800ece0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	69d9      	ldr	r1, [r3, #28]
 800ece8:	68bb      	ldr	r3, [r7, #8]
 800ecea:	691a      	ldr	r2, [r3, #16]
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	430a      	orrs	r2, r1
 800ecf2:	61da      	str	r2, [r3, #28]
      break;
 800ecf4:	e064      	b.n	800edc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	68b9      	ldr	r1, [r7, #8]
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	f000 fad9 	bl	800f2b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	69da      	ldr	r2, [r3, #28]
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ed10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	69da      	ldr	r2, [r3, #28]
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ed20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	69d9      	ldr	r1, [r3, #28]
 800ed28:	68bb      	ldr	r3, [r7, #8]
 800ed2a:	691b      	ldr	r3, [r3, #16]
 800ed2c:	021a      	lsls	r2, r3, #8
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	430a      	orrs	r2, r1
 800ed34:	61da      	str	r2, [r3, #28]
      break;
 800ed36:	e043      	b.n	800edc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	68b9      	ldr	r1, [r7, #8]
 800ed3e:	4618      	mov	r0, r3
 800ed40:	f000 fb22 	bl	800f388 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	f042 0208 	orr.w	r2, r2, #8
 800ed52:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	f022 0204 	bic.w	r2, r2, #4
 800ed62:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	691a      	ldr	r2, [r3, #16]
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	430a      	orrs	r2, r1
 800ed74:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ed76:	e023      	b.n	800edc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	68b9      	ldr	r1, [r7, #8]
 800ed7e:	4618      	mov	r0, r3
 800ed80:	f000 fb66 	bl	800f450 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ed92:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800eda2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800edaa:	68bb      	ldr	r3, [r7, #8]
 800edac:	691b      	ldr	r3, [r3, #16]
 800edae:	021a      	lsls	r2, r3, #8
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	430a      	orrs	r2, r1
 800edb6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800edb8:	e002      	b.n	800edc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800edba:	2301      	movs	r3, #1
 800edbc:	75fb      	strb	r3, [r7, #23]
      break;
 800edbe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	2200      	movs	r2, #0
 800edc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800edc8:	7dfb      	ldrb	r3, [r7, #23]
}
 800edca:	4618      	mov	r0, r3
 800edcc:	3718      	adds	r7, #24
 800edce:	46bd      	mov	sp, r7
 800edd0:	bd80      	pop	{r7, pc}
 800edd2:	bf00      	nop

0800edd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800edd4:	b480      	push	{r7}
 800edd6:	b083      	sub	sp, #12
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800eddc:	bf00      	nop
 800edde:	370c      	adds	r7, #12
 800ede0:	46bd      	mov	sp, r7
 800ede2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede6:	4770      	bx	lr

0800ede8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ede8:	b480      	push	{r7}
 800edea:	b083      	sub	sp, #12
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800edf0:	bf00      	nop
 800edf2:	370c      	adds	r7, #12
 800edf4:	46bd      	mov	sp, r7
 800edf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfa:	4770      	bx	lr

0800edfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800edfc:	b480      	push	{r7}
 800edfe:	b083      	sub	sp, #12
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ee04:	bf00      	nop
 800ee06:	370c      	adds	r7, #12
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0e:	4770      	bx	lr

0800ee10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ee10:	b480      	push	{r7}
 800ee12:	b083      	sub	sp, #12
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ee18:	bf00      	nop
 800ee1a:	370c      	adds	r7, #12
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee22:	4770      	bx	lr

0800ee24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ee24:	b480      	push	{r7}
 800ee26:	b085      	sub	sp, #20
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
 800ee2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	4a46      	ldr	r2, [pc, #280]	@ (800ef50 <TIM_Base_SetConfig+0x12c>)
 800ee38:	4293      	cmp	r3, r2
 800ee3a:	d013      	beq.n	800ee64 <TIM_Base_SetConfig+0x40>
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ee42:	d00f      	beq.n	800ee64 <TIM_Base_SetConfig+0x40>
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	4a43      	ldr	r2, [pc, #268]	@ (800ef54 <TIM_Base_SetConfig+0x130>)
 800ee48:	4293      	cmp	r3, r2
 800ee4a:	d00b      	beq.n	800ee64 <TIM_Base_SetConfig+0x40>
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	4a42      	ldr	r2, [pc, #264]	@ (800ef58 <TIM_Base_SetConfig+0x134>)
 800ee50:	4293      	cmp	r3, r2
 800ee52:	d007      	beq.n	800ee64 <TIM_Base_SetConfig+0x40>
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	4a41      	ldr	r2, [pc, #260]	@ (800ef5c <TIM_Base_SetConfig+0x138>)
 800ee58:	4293      	cmp	r3, r2
 800ee5a:	d003      	beq.n	800ee64 <TIM_Base_SetConfig+0x40>
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	4a40      	ldr	r2, [pc, #256]	@ (800ef60 <TIM_Base_SetConfig+0x13c>)
 800ee60:	4293      	cmp	r3, r2
 800ee62:	d108      	bne.n	800ee76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ee6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	685b      	ldr	r3, [r3, #4]
 800ee70:	68fa      	ldr	r2, [r7, #12]
 800ee72:	4313      	orrs	r3, r2
 800ee74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	4a35      	ldr	r2, [pc, #212]	@ (800ef50 <TIM_Base_SetConfig+0x12c>)
 800ee7a:	4293      	cmp	r3, r2
 800ee7c:	d01f      	beq.n	800eebe <TIM_Base_SetConfig+0x9a>
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ee84:	d01b      	beq.n	800eebe <TIM_Base_SetConfig+0x9a>
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	4a32      	ldr	r2, [pc, #200]	@ (800ef54 <TIM_Base_SetConfig+0x130>)
 800ee8a:	4293      	cmp	r3, r2
 800ee8c:	d017      	beq.n	800eebe <TIM_Base_SetConfig+0x9a>
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	4a31      	ldr	r2, [pc, #196]	@ (800ef58 <TIM_Base_SetConfig+0x134>)
 800ee92:	4293      	cmp	r3, r2
 800ee94:	d013      	beq.n	800eebe <TIM_Base_SetConfig+0x9a>
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	4a30      	ldr	r2, [pc, #192]	@ (800ef5c <TIM_Base_SetConfig+0x138>)
 800ee9a:	4293      	cmp	r3, r2
 800ee9c:	d00f      	beq.n	800eebe <TIM_Base_SetConfig+0x9a>
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	4a2f      	ldr	r2, [pc, #188]	@ (800ef60 <TIM_Base_SetConfig+0x13c>)
 800eea2:	4293      	cmp	r3, r2
 800eea4:	d00b      	beq.n	800eebe <TIM_Base_SetConfig+0x9a>
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	4a2e      	ldr	r2, [pc, #184]	@ (800ef64 <TIM_Base_SetConfig+0x140>)
 800eeaa:	4293      	cmp	r3, r2
 800eeac:	d007      	beq.n	800eebe <TIM_Base_SetConfig+0x9a>
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	4a2d      	ldr	r2, [pc, #180]	@ (800ef68 <TIM_Base_SetConfig+0x144>)
 800eeb2:	4293      	cmp	r3, r2
 800eeb4:	d003      	beq.n	800eebe <TIM_Base_SetConfig+0x9a>
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	4a2c      	ldr	r2, [pc, #176]	@ (800ef6c <TIM_Base_SetConfig+0x148>)
 800eeba:	4293      	cmp	r3, r2
 800eebc:	d108      	bne.n	800eed0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800eec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	68db      	ldr	r3, [r3, #12]
 800eeca:	68fa      	ldr	r2, [r7, #12]
 800eecc:	4313      	orrs	r3, r2
 800eece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	695b      	ldr	r3, [r3, #20]
 800eeda:	4313      	orrs	r3, r2
 800eedc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	68fa      	ldr	r2, [r7, #12]
 800eee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	689a      	ldr	r2, [r3, #8]
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	681a      	ldr	r2, [r3, #0]
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	4a16      	ldr	r2, [pc, #88]	@ (800ef50 <TIM_Base_SetConfig+0x12c>)
 800eef8:	4293      	cmp	r3, r2
 800eefa:	d00f      	beq.n	800ef1c <TIM_Base_SetConfig+0xf8>
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	4a18      	ldr	r2, [pc, #96]	@ (800ef60 <TIM_Base_SetConfig+0x13c>)
 800ef00:	4293      	cmp	r3, r2
 800ef02:	d00b      	beq.n	800ef1c <TIM_Base_SetConfig+0xf8>
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	4a17      	ldr	r2, [pc, #92]	@ (800ef64 <TIM_Base_SetConfig+0x140>)
 800ef08:	4293      	cmp	r3, r2
 800ef0a:	d007      	beq.n	800ef1c <TIM_Base_SetConfig+0xf8>
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	4a16      	ldr	r2, [pc, #88]	@ (800ef68 <TIM_Base_SetConfig+0x144>)
 800ef10:	4293      	cmp	r3, r2
 800ef12:	d003      	beq.n	800ef1c <TIM_Base_SetConfig+0xf8>
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	4a15      	ldr	r2, [pc, #84]	@ (800ef6c <TIM_Base_SetConfig+0x148>)
 800ef18:	4293      	cmp	r3, r2
 800ef1a:	d103      	bne.n	800ef24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	691a      	ldr	r2, [r3, #16]
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2201      	movs	r2, #1
 800ef28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	691b      	ldr	r3, [r3, #16]
 800ef2e:	f003 0301 	and.w	r3, r3, #1
 800ef32:	2b01      	cmp	r3, #1
 800ef34:	d105      	bne.n	800ef42 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	691b      	ldr	r3, [r3, #16]
 800ef3a:	f023 0201 	bic.w	r2, r3, #1
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	611a      	str	r2, [r3, #16]
  }
}
 800ef42:	bf00      	nop
 800ef44:	3714      	adds	r7, #20
 800ef46:	46bd      	mov	sp, r7
 800ef48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4c:	4770      	bx	lr
 800ef4e:	bf00      	nop
 800ef50:	40010000 	.word	0x40010000
 800ef54:	40000400 	.word	0x40000400
 800ef58:	40000800 	.word	0x40000800
 800ef5c:	40000c00 	.word	0x40000c00
 800ef60:	40010400 	.word	0x40010400
 800ef64:	40014000 	.word	0x40014000
 800ef68:	40014400 	.word	0x40014400
 800ef6c:	40014800 	.word	0x40014800

0800ef70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ef70:	b480      	push	{r7}
 800ef72:	b087      	sub	sp, #28
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
 800ef78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	6a1b      	ldr	r3, [r3, #32]
 800ef7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	6a1b      	ldr	r3, [r3, #32]
 800ef84:	f023 0201 	bic.w	r2, r3, #1
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	685b      	ldr	r3, [r3, #4]
 800ef90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	699b      	ldr	r3, [r3, #24]
 800ef96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ef98:	68fa      	ldr	r2, [r7, #12]
 800ef9a:	4b37      	ldr	r3, [pc, #220]	@ (800f078 <TIM_OC1_SetConfig+0x108>)
 800ef9c:	4013      	ands	r3, r2
 800ef9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	f023 0303 	bic.w	r3, r3, #3
 800efa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	68fa      	ldr	r2, [r7, #12]
 800efae:	4313      	orrs	r3, r2
 800efb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800efb2:	697b      	ldr	r3, [r7, #20]
 800efb4:	f023 0302 	bic.w	r3, r3, #2
 800efb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	689b      	ldr	r3, [r3, #8]
 800efbe:	697a      	ldr	r2, [r7, #20]
 800efc0:	4313      	orrs	r3, r2
 800efc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	4a2d      	ldr	r2, [pc, #180]	@ (800f07c <TIM_OC1_SetConfig+0x10c>)
 800efc8:	4293      	cmp	r3, r2
 800efca:	d00f      	beq.n	800efec <TIM_OC1_SetConfig+0x7c>
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	4a2c      	ldr	r2, [pc, #176]	@ (800f080 <TIM_OC1_SetConfig+0x110>)
 800efd0:	4293      	cmp	r3, r2
 800efd2:	d00b      	beq.n	800efec <TIM_OC1_SetConfig+0x7c>
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	4a2b      	ldr	r2, [pc, #172]	@ (800f084 <TIM_OC1_SetConfig+0x114>)
 800efd8:	4293      	cmp	r3, r2
 800efda:	d007      	beq.n	800efec <TIM_OC1_SetConfig+0x7c>
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	4a2a      	ldr	r2, [pc, #168]	@ (800f088 <TIM_OC1_SetConfig+0x118>)
 800efe0:	4293      	cmp	r3, r2
 800efe2:	d003      	beq.n	800efec <TIM_OC1_SetConfig+0x7c>
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	4a29      	ldr	r2, [pc, #164]	@ (800f08c <TIM_OC1_SetConfig+0x11c>)
 800efe8:	4293      	cmp	r3, r2
 800efea:	d10c      	bne.n	800f006 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800efec:	697b      	ldr	r3, [r7, #20]
 800efee:	f023 0308 	bic.w	r3, r3, #8
 800eff2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	68db      	ldr	r3, [r3, #12]
 800eff8:	697a      	ldr	r2, [r7, #20]
 800effa:	4313      	orrs	r3, r2
 800effc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800effe:	697b      	ldr	r3, [r7, #20]
 800f000:	f023 0304 	bic.w	r3, r3, #4
 800f004:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	4a1c      	ldr	r2, [pc, #112]	@ (800f07c <TIM_OC1_SetConfig+0x10c>)
 800f00a:	4293      	cmp	r3, r2
 800f00c:	d00f      	beq.n	800f02e <TIM_OC1_SetConfig+0xbe>
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	4a1b      	ldr	r2, [pc, #108]	@ (800f080 <TIM_OC1_SetConfig+0x110>)
 800f012:	4293      	cmp	r3, r2
 800f014:	d00b      	beq.n	800f02e <TIM_OC1_SetConfig+0xbe>
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	4a1a      	ldr	r2, [pc, #104]	@ (800f084 <TIM_OC1_SetConfig+0x114>)
 800f01a:	4293      	cmp	r3, r2
 800f01c:	d007      	beq.n	800f02e <TIM_OC1_SetConfig+0xbe>
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	4a19      	ldr	r2, [pc, #100]	@ (800f088 <TIM_OC1_SetConfig+0x118>)
 800f022:	4293      	cmp	r3, r2
 800f024:	d003      	beq.n	800f02e <TIM_OC1_SetConfig+0xbe>
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	4a18      	ldr	r2, [pc, #96]	@ (800f08c <TIM_OC1_SetConfig+0x11c>)
 800f02a:	4293      	cmp	r3, r2
 800f02c:	d111      	bne.n	800f052 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f02e:	693b      	ldr	r3, [r7, #16]
 800f030:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f036:	693b      	ldr	r3, [r7, #16]
 800f038:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f03c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	695b      	ldr	r3, [r3, #20]
 800f042:	693a      	ldr	r2, [r7, #16]
 800f044:	4313      	orrs	r3, r2
 800f046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	699b      	ldr	r3, [r3, #24]
 800f04c:	693a      	ldr	r2, [r7, #16]
 800f04e:	4313      	orrs	r3, r2
 800f050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	693a      	ldr	r2, [r7, #16]
 800f056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	68fa      	ldr	r2, [r7, #12]
 800f05c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	685a      	ldr	r2, [r3, #4]
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	697a      	ldr	r2, [r7, #20]
 800f06a:	621a      	str	r2, [r3, #32]
}
 800f06c:	bf00      	nop
 800f06e:	371c      	adds	r7, #28
 800f070:	46bd      	mov	sp, r7
 800f072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f076:	4770      	bx	lr
 800f078:	fffeff8f 	.word	0xfffeff8f
 800f07c:	40010000 	.word	0x40010000
 800f080:	40010400 	.word	0x40010400
 800f084:	40014000 	.word	0x40014000
 800f088:	40014400 	.word	0x40014400
 800f08c:	40014800 	.word	0x40014800

0800f090 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f090:	b480      	push	{r7}
 800f092:	b087      	sub	sp, #28
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
 800f098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	6a1b      	ldr	r3, [r3, #32]
 800f09e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	6a1b      	ldr	r3, [r3, #32]
 800f0a4:	f023 0210 	bic.w	r2, r3, #16
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	685b      	ldr	r3, [r3, #4]
 800f0b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	699b      	ldr	r3, [r3, #24]
 800f0b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f0b8:	68fa      	ldr	r2, [r7, #12]
 800f0ba:	4b34      	ldr	r3, [pc, #208]	@ (800f18c <TIM_OC2_SetConfig+0xfc>)
 800f0bc:	4013      	ands	r3, r2
 800f0be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f0c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	021b      	lsls	r3, r3, #8
 800f0ce:	68fa      	ldr	r2, [r7, #12]
 800f0d0:	4313      	orrs	r3, r2
 800f0d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f0d4:	697b      	ldr	r3, [r7, #20]
 800f0d6:	f023 0320 	bic.w	r3, r3, #32
 800f0da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	689b      	ldr	r3, [r3, #8]
 800f0e0:	011b      	lsls	r3, r3, #4
 800f0e2:	697a      	ldr	r2, [r7, #20]
 800f0e4:	4313      	orrs	r3, r2
 800f0e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	4a29      	ldr	r2, [pc, #164]	@ (800f190 <TIM_OC2_SetConfig+0x100>)
 800f0ec:	4293      	cmp	r3, r2
 800f0ee:	d003      	beq.n	800f0f8 <TIM_OC2_SetConfig+0x68>
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	4a28      	ldr	r2, [pc, #160]	@ (800f194 <TIM_OC2_SetConfig+0x104>)
 800f0f4:	4293      	cmp	r3, r2
 800f0f6:	d10d      	bne.n	800f114 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f0f8:	697b      	ldr	r3, [r7, #20]
 800f0fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f0fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	68db      	ldr	r3, [r3, #12]
 800f104:	011b      	lsls	r3, r3, #4
 800f106:	697a      	ldr	r2, [r7, #20]
 800f108:	4313      	orrs	r3, r2
 800f10a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f10c:	697b      	ldr	r3, [r7, #20]
 800f10e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f112:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	4a1e      	ldr	r2, [pc, #120]	@ (800f190 <TIM_OC2_SetConfig+0x100>)
 800f118:	4293      	cmp	r3, r2
 800f11a:	d00f      	beq.n	800f13c <TIM_OC2_SetConfig+0xac>
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	4a1d      	ldr	r2, [pc, #116]	@ (800f194 <TIM_OC2_SetConfig+0x104>)
 800f120:	4293      	cmp	r3, r2
 800f122:	d00b      	beq.n	800f13c <TIM_OC2_SetConfig+0xac>
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	4a1c      	ldr	r2, [pc, #112]	@ (800f198 <TIM_OC2_SetConfig+0x108>)
 800f128:	4293      	cmp	r3, r2
 800f12a:	d007      	beq.n	800f13c <TIM_OC2_SetConfig+0xac>
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	4a1b      	ldr	r2, [pc, #108]	@ (800f19c <TIM_OC2_SetConfig+0x10c>)
 800f130:	4293      	cmp	r3, r2
 800f132:	d003      	beq.n	800f13c <TIM_OC2_SetConfig+0xac>
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	4a1a      	ldr	r2, [pc, #104]	@ (800f1a0 <TIM_OC2_SetConfig+0x110>)
 800f138:	4293      	cmp	r3, r2
 800f13a:	d113      	bne.n	800f164 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f13c:	693b      	ldr	r3, [r7, #16]
 800f13e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f142:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f144:	693b      	ldr	r3, [r7, #16]
 800f146:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f14a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	695b      	ldr	r3, [r3, #20]
 800f150:	009b      	lsls	r3, r3, #2
 800f152:	693a      	ldr	r2, [r7, #16]
 800f154:	4313      	orrs	r3, r2
 800f156:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f158:	683b      	ldr	r3, [r7, #0]
 800f15a:	699b      	ldr	r3, [r3, #24]
 800f15c:	009b      	lsls	r3, r3, #2
 800f15e:	693a      	ldr	r2, [r7, #16]
 800f160:	4313      	orrs	r3, r2
 800f162:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	693a      	ldr	r2, [r7, #16]
 800f168:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	68fa      	ldr	r2, [r7, #12]
 800f16e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	685a      	ldr	r2, [r3, #4]
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	697a      	ldr	r2, [r7, #20]
 800f17c:	621a      	str	r2, [r3, #32]
}
 800f17e:	bf00      	nop
 800f180:	371c      	adds	r7, #28
 800f182:	46bd      	mov	sp, r7
 800f184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f188:	4770      	bx	lr
 800f18a:	bf00      	nop
 800f18c:	feff8fff 	.word	0xfeff8fff
 800f190:	40010000 	.word	0x40010000
 800f194:	40010400 	.word	0x40010400
 800f198:	40014000 	.word	0x40014000
 800f19c:	40014400 	.word	0x40014400
 800f1a0:	40014800 	.word	0x40014800

0800f1a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f1a4:	b480      	push	{r7}
 800f1a6:	b087      	sub	sp, #28
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
 800f1ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6a1b      	ldr	r3, [r3, #32]
 800f1b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	6a1b      	ldr	r3, [r3, #32]
 800f1b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	685b      	ldr	r3, [r3, #4]
 800f1c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	69db      	ldr	r3, [r3, #28]
 800f1ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f1cc:	68fa      	ldr	r2, [r7, #12]
 800f1ce:	4b33      	ldr	r3, [pc, #204]	@ (800f29c <TIM_OC3_SetConfig+0xf8>)
 800f1d0:	4013      	ands	r3, r2
 800f1d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	f023 0303 	bic.w	r3, r3, #3
 800f1da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	68fa      	ldr	r2, [r7, #12]
 800f1e2:	4313      	orrs	r3, r2
 800f1e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f1e6:	697b      	ldr	r3, [r7, #20]
 800f1e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f1ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	689b      	ldr	r3, [r3, #8]
 800f1f2:	021b      	lsls	r3, r3, #8
 800f1f4:	697a      	ldr	r2, [r7, #20]
 800f1f6:	4313      	orrs	r3, r2
 800f1f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	4a28      	ldr	r2, [pc, #160]	@ (800f2a0 <TIM_OC3_SetConfig+0xfc>)
 800f1fe:	4293      	cmp	r3, r2
 800f200:	d003      	beq.n	800f20a <TIM_OC3_SetConfig+0x66>
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	4a27      	ldr	r2, [pc, #156]	@ (800f2a4 <TIM_OC3_SetConfig+0x100>)
 800f206:	4293      	cmp	r3, r2
 800f208:	d10d      	bne.n	800f226 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f20a:	697b      	ldr	r3, [r7, #20]
 800f20c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f210:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	68db      	ldr	r3, [r3, #12]
 800f216:	021b      	lsls	r3, r3, #8
 800f218:	697a      	ldr	r2, [r7, #20]
 800f21a:	4313      	orrs	r3, r2
 800f21c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f21e:	697b      	ldr	r3, [r7, #20]
 800f220:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	4a1d      	ldr	r2, [pc, #116]	@ (800f2a0 <TIM_OC3_SetConfig+0xfc>)
 800f22a:	4293      	cmp	r3, r2
 800f22c:	d00f      	beq.n	800f24e <TIM_OC3_SetConfig+0xaa>
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	4a1c      	ldr	r2, [pc, #112]	@ (800f2a4 <TIM_OC3_SetConfig+0x100>)
 800f232:	4293      	cmp	r3, r2
 800f234:	d00b      	beq.n	800f24e <TIM_OC3_SetConfig+0xaa>
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	4a1b      	ldr	r2, [pc, #108]	@ (800f2a8 <TIM_OC3_SetConfig+0x104>)
 800f23a:	4293      	cmp	r3, r2
 800f23c:	d007      	beq.n	800f24e <TIM_OC3_SetConfig+0xaa>
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	4a1a      	ldr	r2, [pc, #104]	@ (800f2ac <TIM_OC3_SetConfig+0x108>)
 800f242:	4293      	cmp	r3, r2
 800f244:	d003      	beq.n	800f24e <TIM_OC3_SetConfig+0xaa>
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	4a19      	ldr	r2, [pc, #100]	@ (800f2b0 <TIM_OC3_SetConfig+0x10c>)
 800f24a:	4293      	cmp	r3, r2
 800f24c:	d113      	bne.n	800f276 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f24e:	693b      	ldr	r3, [r7, #16]
 800f250:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f254:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f256:	693b      	ldr	r3, [r7, #16]
 800f258:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f25c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	695b      	ldr	r3, [r3, #20]
 800f262:	011b      	lsls	r3, r3, #4
 800f264:	693a      	ldr	r2, [r7, #16]
 800f266:	4313      	orrs	r3, r2
 800f268:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f26a:	683b      	ldr	r3, [r7, #0]
 800f26c:	699b      	ldr	r3, [r3, #24]
 800f26e:	011b      	lsls	r3, r3, #4
 800f270:	693a      	ldr	r2, [r7, #16]
 800f272:	4313      	orrs	r3, r2
 800f274:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	693a      	ldr	r2, [r7, #16]
 800f27a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	68fa      	ldr	r2, [r7, #12]
 800f280:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f282:	683b      	ldr	r3, [r7, #0]
 800f284:	685a      	ldr	r2, [r3, #4]
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	697a      	ldr	r2, [r7, #20]
 800f28e:	621a      	str	r2, [r3, #32]
}
 800f290:	bf00      	nop
 800f292:	371c      	adds	r7, #28
 800f294:	46bd      	mov	sp, r7
 800f296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29a:	4770      	bx	lr
 800f29c:	fffeff8f 	.word	0xfffeff8f
 800f2a0:	40010000 	.word	0x40010000
 800f2a4:	40010400 	.word	0x40010400
 800f2a8:	40014000 	.word	0x40014000
 800f2ac:	40014400 	.word	0x40014400
 800f2b0:	40014800 	.word	0x40014800

0800f2b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f2b4:	b480      	push	{r7}
 800f2b6:	b087      	sub	sp, #28
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
 800f2bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6a1b      	ldr	r3, [r3, #32]
 800f2c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	6a1b      	ldr	r3, [r3, #32]
 800f2c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	685b      	ldr	r3, [r3, #4]
 800f2d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	69db      	ldr	r3, [r3, #28]
 800f2da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f2dc:	68fa      	ldr	r2, [r7, #12]
 800f2de:	4b24      	ldr	r3, [pc, #144]	@ (800f370 <TIM_OC4_SetConfig+0xbc>)
 800f2e0:	4013      	ands	r3, r2
 800f2e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f2ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	021b      	lsls	r3, r3, #8
 800f2f2:	68fa      	ldr	r2, [r7, #12]
 800f2f4:	4313      	orrs	r3, r2
 800f2f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f2f8:	693b      	ldr	r3, [r7, #16]
 800f2fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f2fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	689b      	ldr	r3, [r3, #8]
 800f304:	031b      	lsls	r3, r3, #12
 800f306:	693a      	ldr	r2, [r7, #16]
 800f308:	4313      	orrs	r3, r2
 800f30a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	4a19      	ldr	r2, [pc, #100]	@ (800f374 <TIM_OC4_SetConfig+0xc0>)
 800f310:	4293      	cmp	r3, r2
 800f312:	d00f      	beq.n	800f334 <TIM_OC4_SetConfig+0x80>
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	4a18      	ldr	r2, [pc, #96]	@ (800f378 <TIM_OC4_SetConfig+0xc4>)
 800f318:	4293      	cmp	r3, r2
 800f31a:	d00b      	beq.n	800f334 <TIM_OC4_SetConfig+0x80>
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	4a17      	ldr	r2, [pc, #92]	@ (800f37c <TIM_OC4_SetConfig+0xc8>)
 800f320:	4293      	cmp	r3, r2
 800f322:	d007      	beq.n	800f334 <TIM_OC4_SetConfig+0x80>
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	4a16      	ldr	r2, [pc, #88]	@ (800f380 <TIM_OC4_SetConfig+0xcc>)
 800f328:	4293      	cmp	r3, r2
 800f32a:	d003      	beq.n	800f334 <TIM_OC4_SetConfig+0x80>
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	4a15      	ldr	r2, [pc, #84]	@ (800f384 <TIM_OC4_SetConfig+0xd0>)
 800f330:	4293      	cmp	r3, r2
 800f332:	d109      	bne.n	800f348 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f334:	697b      	ldr	r3, [r7, #20]
 800f336:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f33a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	695b      	ldr	r3, [r3, #20]
 800f340:	019b      	lsls	r3, r3, #6
 800f342:	697a      	ldr	r2, [r7, #20]
 800f344:	4313      	orrs	r3, r2
 800f346:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	697a      	ldr	r2, [r7, #20]
 800f34c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	68fa      	ldr	r2, [r7, #12]
 800f352:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	685a      	ldr	r2, [r3, #4]
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	693a      	ldr	r2, [r7, #16]
 800f360:	621a      	str	r2, [r3, #32]
}
 800f362:	bf00      	nop
 800f364:	371c      	adds	r7, #28
 800f366:	46bd      	mov	sp, r7
 800f368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36c:	4770      	bx	lr
 800f36e:	bf00      	nop
 800f370:	feff8fff 	.word	0xfeff8fff
 800f374:	40010000 	.word	0x40010000
 800f378:	40010400 	.word	0x40010400
 800f37c:	40014000 	.word	0x40014000
 800f380:	40014400 	.word	0x40014400
 800f384:	40014800 	.word	0x40014800

0800f388 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f388:	b480      	push	{r7}
 800f38a:	b087      	sub	sp, #28
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
 800f390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	6a1b      	ldr	r3, [r3, #32]
 800f396:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	6a1b      	ldr	r3, [r3, #32]
 800f39c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	685b      	ldr	r3, [r3, #4]
 800f3a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f3ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f3b0:	68fa      	ldr	r2, [r7, #12]
 800f3b2:	4b21      	ldr	r3, [pc, #132]	@ (800f438 <TIM_OC5_SetConfig+0xb0>)
 800f3b4:	4013      	ands	r3, r2
 800f3b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	68fa      	ldr	r2, [r7, #12]
 800f3be:	4313      	orrs	r3, r2
 800f3c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f3c2:	693b      	ldr	r3, [r7, #16]
 800f3c4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f3c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	689b      	ldr	r3, [r3, #8]
 800f3ce:	041b      	lsls	r3, r3, #16
 800f3d0:	693a      	ldr	r2, [r7, #16]
 800f3d2:	4313      	orrs	r3, r2
 800f3d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	4a18      	ldr	r2, [pc, #96]	@ (800f43c <TIM_OC5_SetConfig+0xb4>)
 800f3da:	4293      	cmp	r3, r2
 800f3dc:	d00f      	beq.n	800f3fe <TIM_OC5_SetConfig+0x76>
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	4a17      	ldr	r2, [pc, #92]	@ (800f440 <TIM_OC5_SetConfig+0xb8>)
 800f3e2:	4293      	cmp	r3, r2
 800f3e4:	d00b      	beq.n	800f3fe <TIM_OC5_SetConfig+0x76>
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	4a16      	ldr	r2, [pc, #88]	@ (800f444 <TIM_OC5_SetConfig+0xbc>)
 800f3ea:	4293      	cmp	r3, r2
 800f3ec:	d007      	beq.n	800f3fe <TIM_OC5_SetConfig+0x76>
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	4a15      	ldr	r2, [pc, #84]	@ (800f448 <TIM_OC5_SetConfig+0xc0>)
 800f3f2:	4293      	cmp	r3, r2
 800f3f4:	d003      	beq.n	800f3fe <TIM_OC5_SetConfig+0x76>
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	4a14      	ldr	r2, [pc, #80]	@ (800f44c <TIM_OC5_SetConfig+0xc4>)
 800f3fa:	4293      	cmp	r3, r2
 800f3fc:	d109      	bne.n	800f412 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f3fe:	697b      	ldr	r3, [r7, #20]
 800f400:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f404:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f406:	683b      	ldr	r3, [r7, #0]
 800f408:	695b      	ldr	r3, [r3, #20]
 800f40a:	021b      	lsls	r3, r3, #8
 800f40c:	697a      	ldr	r2, [r7, #20]
 800f40e:	4313      	orrs	r3, r2
 800f410:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	697a      	ldr	r2, [r7, #20]
 800f416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	68fa      	ldr	r2, [r7, #12]
 800f41c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	685a      	ldr	r2, [r3, #4]
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	693a      	ldr	r2, [r7, #16]
 800f42a:	621a      	str	r2, [r3, #32]
}
 800f42c:	bf00      	nop
 800f42e:	371c      	adds	r7, #28
 800f430:	46bd      	mov	sp, r7
 800f432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f436:	4770      	bx	lr
 800f438:	fffeff8f 	.word	0xfffeff8f
 800f43c:	40010000 	.word	0x40010000
 800f440:	40010400 	.word	0x40010400
 800f444:	40014000 	.word	0x40014000
 800f448:	40014400 	.word	0x40014400
 800f44c:	40014800 	.word	0x40014800

0800f450 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f450:	b480      	push	{r7}
 800f452:	b087      	sub	sp, #28
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
 800f458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	6a1b      	ldr	r3, [r3, #32]
 800f45e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	6a1b      	ldr	r3, [r3, #32]
 800f464:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	685b      	ldr	r3, [r3, #4]
 800f470:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f478:	68fa      	ldr	r2, [r7, #12]
 800f47a:	4b22      	ldr	r3, [pc, #136]	@ (800f504 <TIM_OC6_SetConfig+0xb4>)
 800f47c:	4013      	ands	r3, r2
 800f47e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f480:	683b      	ldr	r3, [r7, #0]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	021b      	lsls	r3, r3, #8
 800f486:	68fa      	ldr	r2, [r7, #12]
 800f488:	4313      	orrs	r3, r2
 800f48a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f48c:	693b      	ldr	r3, [r7, #16]
 800f48e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f492:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	689b      	ldr	r3, [r3, #8]
 800f498:	051b      	lsls	r3, r3, #20
 800f49a:	693a      	ldr	r2, [r7, #16]
 800f49c:	4313      	orrs	r3, r2
 800f49e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	4a19      	ldr	r2, [pc, #100]	@ (800f508 <TIM_OC6_SetConfig+0xb8>)
 800f4a4:	4293      	cmp	r3, r2
 800f4a6:	d00f      	beq.n	800f4c8 <TIM_OC6_SetConfig+0x78>
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	4a18      	ldr	r2, [pc, #96]	@ (800f50c <TIM_OC6_SetConfig+0xbc>)
 800f4ac:	4293      	cmp	r3, r2
 800f4ae:	d00b      	beq.n	800f4c8 <TIM_OC6_SetConfig+0x78>
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	4a17      	ldr	r2, [pc, #92]	@ (800f510 <TIM_OC6_SetConfig+0xc0>)
 800f4b4:	4293      	cmp	r3, r2
 800f4b6:	d007      	beq.n	800f4c8 <TIM_OC6_SetConfig+0x78>
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	4a16      	ldr	r2, [pc, #88]	@ (800f514 <TIM_OC6_SetConfig+0xc4>)
 800f4bc:	4293      	cmp	r3, r2
 800f4be:	d003      	beq.n	800f4c8 <TIM_OC6_SetConfig+0x78>
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	4a15      	ldr	r2, [pc, #84]	@ (800f518 <TIM_OC6_SetConfig+0xc8>)
 800f4c4:	4293      	cmp	r3, r2
 800f4c6:	d109      	bne.n	800f4dc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f4c8:	697b      	ldr	r3, [r7, #20]
 800f4ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f4ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	695b      	ldr	r3, [r3, #20]
 800f4d4:	029b      	lsls	r3, r3, #10
 800f4d6:	697a      	ldr	r2, [r7, #20]
 800f4d8:	4313      	orrs	r3, r2
 800f4da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	697a      	ldr	r2, [r7, #20]
 800f4e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	68fa      	ldr	r2, [r7, #12]
 800f4e6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	685a      	ldr	r2, [r3, #4]
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	693a      	ldr	r2, [r7, #16]
 800f4f4:	621a      	str	r2, [r3, #32]
}
 800f4f6:	bf00      	nop
 800f4f8:	371c      	adds	r7, #28
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f500:	4770      	bx	lr
 800f502:	bf00      	nop
 800f504:	feff8fff 	.word	0xfeff8fff
 800f508:	40010000 	.word	0x40010000
 800f50c:	40010400 	.word	0x40010400
 800f510:	40014000 	.word	0x40014000
 800f514:	40014400 	.word	0x40014400
 800f518:	40014800 	.word	0x40014800

0800f51c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f51c:	b480      	push	{r7}
 800f51e:	b087      	sub	sp, #28
 800f520:	af00      	add	r7, sp, #0
 800f522:	60f8      	str	r0, [r7, #12]
 800f524:	60b9      	str	r1, [r7, #8]
 800f526:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	f003 031f 	and.w	r3, r3, #31
 800f52e:	2201      	movs	r2, #1
 800f530:	fa02 f303 	lsl.w	r3, r2, r3
 800f534:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	6a1a      	ldr	r2, [r3, #32]
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	43db      	mvns	r3, r3
 800f53e:	401a      	ands	r2, r3
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	6a1a      	ldr	r2, [r3, #32]
 800f548:	68bb      	ldr	r3, [r7, #8]
 800f54a:	f003 031f 	and.w	r3, r3, #31
 800f54e:	6879      	ldr	r1, [r7, #4]
 800f550:	fa01 f303 	lsl.w	r3, r1, r3
 800f554:	431a      	orrs	r2, r3
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	621a      	str	r2, [r3, #32]
}
 800f55a:	bf00      	nop
 800f55c:	371c      	adds	r7, #28
 800f55e:	46bd      	mov	sp, r7
 800f560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f564:	4770      	bx	lr
	...

0800f568 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f568:	b480      	push	{r7}
 800f56a:	b085      	sub	sp, #20
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
 800f570:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f578:	2b01      	cmp	r3, #1
 800f57a:	d101      	bne.n	800f580 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f57c:	2302      	movs	r3, #2
 800f57e:	e06d      	b.n	800f65c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2201      	movs	r2, #1
 800f584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2202      	movs	r2, #2
 800f58c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	685b      	ldr	r3, [r3, #4]
 800f596:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	689b      	ldr	r3, [r3, #8]
 800f59e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	4a30      	ldr	r2, [pc, #192]	@ (800f668 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f5a6:	4293      	cmp	r3, r2
 800f5a8:	d004      	beq.n	800f5b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	4a2f      	ldr	r2, [pc, #188]	@ (800f66c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f5b0:	4293      	cmp	r3, r2
 800f5b2:	d108      	bne.n	800f5c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f5ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	685b      	ldr	r3, [r3, #4]
 800f5c0:	68fa      	ldr	r2, [r7, #12]
 800f5c2:	4313      	orrs	r3, r2
 800f5c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f5cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f5ce:	683b      	ldr	r3, [r7, #0]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	68fa      	ldr	r2, [r7, #12]
 800f5d4:	4313      	orrs	r3, r2
 800f5d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	68fa      	ldr	r2, [r7, #12]
 800f5de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	4a20      	ldr	r2, [pc, #128]	@ (800f668 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f5e6:	4293      	cmp	r3, r2
 800f5e8:	d022      	beq.n	800f630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f5f2:	d01d      	beq.n	800f630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	4a1d      	ldr	r2, [pc, #116]	@ (800f670 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f5fa:	4293      	cmp	r3, r2
 800f5fc:	d018      	beq.n	800f630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	4a1c      	ldr	r2, [pc, #112]	@ (800f674 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f604:	4293      	cmp	r3, r2
 800f606:	d013      	beq.n	800f630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	4a1a      	ldr	r2, [pc, #104]	@ (800f678 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f60e:	4293      	cmp	r3, r2
 800f610:	d00e      	beq.n	800f630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	4a15      	ldr	r2, [pc, #84]	@ (800f66c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f618:	4293      	cmp	r3, r2
 800f61a:	d009      	beq.n	800f630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	4a16      	ldr	r2, [pc, #88]	@ (800f67c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f622:	4293      	cmp	r3, r2
 800f624:	d004      	beq.n	800f630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	4a15      	ldr	r2, [pc, #84]	@ (800f680 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f62c:	4293      	cmp	r3, r2
 800f62e:	d10c      	bne.n	800f64a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f636:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	689b      	ldr	r3, [r3, #8]
 800f63c:	68ba      	ldr	r2, [r7, #8]
 800f63e:	4313      	orrs	r3, r2
 800f640:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	68ba      	ldr	r2, [r7, #8]
 800f648:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	2201      	movs	r2, #1
 800f64e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	2200      	movs	r2, #0
 800f656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f65a:	2300      	movs	r3, #0
}
 800f65c:	4618      	mov	r0, r3
 800f65e:	3714      	adds	r7, #20
 800f660:	46bd      	mov	sp, r7
 800f662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f666:	4770      	bx	lr
 800f668:	40010000 	.word	0x40010000
 800f66c:	40010400 	.word	0x40010400
 800f670:	40000400 	.word	0x40000400
 800f674:	40000800 	.word	0x40000800
 800f678:	40000c00 	.word	0x40000c00
 800f67c:	40001800 	.word	0x40001800
 800f680:	40014000 	.word	0x40014000

0800f684 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f684:	b480      	push	{r7}
 800f686:	b083      	sub	sp, #12
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f68c:	bf00      	nop
 800f68e:	370c      	adds	r7, #12
 800f690:	46bd      	mov	sp, r7
 800f692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f696:	4770      	bx	lr

0800f698 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f698:	b480      	push	{r7}
 800f69a:	b083      	sub	sp, #12
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f6a0:	bf00      	nop
 800f6a2:	370c      	adds	r7, #12
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6aa:	4770      	bx	lr

0800f6ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	b083      	sub	sp, #12
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f6b4:	bf00      	nop
 800f6b6:	370c      	adds	r7, #12
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6be:	4770      	bx	lr

0800f6c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b082      	sub	sp, #8
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d101      	bne.n	800f6d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	e042      	b.n	800f758 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d106      	bne.n	800f6ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	2200      	movs	r2, #0
 800f6e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f6e4:	6878      	ldr	r0, [r7, #4]
 800f6e6:	f7f4 fc89 	bl	8003ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	2224      	movs	r2, #36	@ 0x24
 800f6ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	681a      	ldr	r2, [r3, #0]
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	f022 0201 	bic.w	r2, r2, #1
 800f700:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f706:	2b00      	cmp	r3, #0
 800f708:	d002      	beq.n	800f710 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f70a:	6878      	ldr	r0, [r7, #4]
 800f70c:	f001 fe0e 	bl	801132c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f710:	6878      	ldr	r0, [r7, #4]
 800f712:	f000 ff9f 	bl	8010654 <UART_SetConfig>
 800f716:	4603      	mov	r3, r0
 800f718:	2b01      	cmp	r3, #1
 800f71a:	d101      	bne.n	800f720 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f71c:	2301      	movs	r3, #1
 800f71e:	e01b      	b.n	800f758 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	685a      	ldr	r2, [r3, #4]
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f72e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	689a      	ldr	r2, [r3, #8]
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f73e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	681a      	ldr	r2, [r3, #0]
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	f042 0201 	orr.w	r2, r2, #1
 800f74e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f750:	6878      	ldr	r0, [r7, #4]
 800f752:	f001 fe8d 	bl	8011470 <UART_CheckIdleState>
 800f756:	4603      	mov	r3, r0
}
 800f758:	4618      	mov	r0, r3
 800f75a:	3708      	adds	r7, #8
 800f75c:	46bd      	mov	sp, r7
 800f75e:	bd80      	pop	{r7, pc}

0800f760 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b08a      	sub	sp, #40	@ 0x28
 800f764:	af02      	add	r7, sp, #8
 800f766:	60f8      	str	r0, [r7, #12]
 800f768:	60b9      	str	r1, [r7, #8]
 800f76a:	603b      	str	r3, [r7, #0]
 800f76c:	4613      	mov	r3, r2
 800f76e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f776:	2b20      	cmp	r3, #32
 800f778:	d17b      	bne.n	800f872 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800f77a:	68bb      	ldr	r3, [r7, #8]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d002      	beq.n	800f786 <HAL_UART_Transmit+0x26>
 800f780:	88fb      	ldrh	r3, [r7, #6]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d101      	bne.n	800f78a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f786:	2301      	movs	r3, #1
 800f788:	e074      	b.n	800f874 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	2200      	movs	r2, #0
 800f78e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	2221      	movs	r2, #33	@ 0x21
 800f796:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f79a:	f7f7 f835 	bl	8006808 <HAL_GetTick>
 800f79e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	88fa      	ldrh	r2, [r7, #6]
 800f7a4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	88fa      	ldrh	r2, [r7, #6]
 800f7ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	689b      	ldr	r3, [r3, #8]
 800f7b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f7b8:	d108      	bne.n	800f7cc <HAL_UART_Transmit+0x6c>
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	691b      	ldr	r3, [r3, #16]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d104      	bne.n	800f7cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f7c6:	68bb      	ldr	r3, [r7, #8]
 800f7c8:	61bb      	str	r3, [r7, #24]
 800f7ca:	e003      	b.n	800f7d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800f7cc:	68bb      	ldr	r3, [r7, #8]
 800f7ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f7d4:	e030      	b.n	800f838 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	9300      	str	r3, [sp, #0]
 800f7da:	697b      	ldr	r3, [r7, #20]
 800f7dc:	2200      	movs	r2, #0
 800f7de:	2180      	movs	r1, #128	@ 0x80
 800f7e0:	68f8      	ldr	r0, [r7, #12]
 800f7e2:	f001 feef 	bl	80115c4 <UART_WaitOnFlagUntilTimeout>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d005      	beq.n	800f7f8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	2220      	movs	r2, #32
 800f7f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800f7f4:	2303      	movs	r3, #3
 800f7f6:	e03d      	b.n	800f874 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800f7f8:	69fb      	ldr	r3, [r7, #28]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d10b      	bne.n	800f816 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f7fe:	69bb      	ldr	r3, [r7, #24]
 800f800:	881b      	ldrh	r3, [r3, #0]
 800f802:	461a      	mov	r2, r3
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f80c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f80e:	69bb      	ldr	r3, [r7, #24]
 800f810:	3302      	adds	r3, #2
 800f812:	61bb      	str	r3, [r7, #24]
 800f814:	e007      	b.n	800f826 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f816:	69fb      	ldr	r3, [r7, #28]
 800f818:	781a      	ldrb	r2, [r3, #0]
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f820:	69fb      	ldr	r3, [r7, #28]
 800f822:	3301      	adds	r3, #1
 800f824:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f82c:	b29b      	uxth	r3, r3
 800f82e:	3b01      	subs	r3, #1
 800f830:	b29a      	uxth	r2, r3
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f83e:	b29b      	uxth	r3, r3
 800f840:	2b00      	cmp	r3, #0
 800f842:	d1c8      	bne.n	800f7d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f844:	683b      	ldr	r3, [r7, #0]
 800f846:	9300      	str	r3, [sp, #0]
 800f848:	697b      	ldr	r3, [r7, #20]
 800f84a:	2200      	movs	r2, #0
 800f84c:	2140      	movs	r1, #64	@ 0x40
 800f84e:	68f8      	ldr	r0, [r7, #12]
 800f850:	f001 feb8 	bl	80115c4 <UART_WaitOnFlagUntilTimeout>
 800f854:	4603      	mov	r3, r0
 800f856:	2b00      	cmp	r3, #0
 800f858:	d005      	beq.n	800f866 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	2220      	movs	r2, #32
 800f85e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800f862:	2303      	movs	r3, #3
 800f864:	e006      	b.n	800f874 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	2220      	movs	r2, #32
 800f86a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800f86e:	2300      	movs	r3, #0
 800f870:	e000      	b.n	800f874 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800f872:	2302      	movs	r3, #2
  }
}
 800f874:	4618      	mov	r0, r3
 800f876:	3720      	adds	r7, #32
 800f878:	46bd      	mov	sp, r7
 800f87a:	bd80      	pop	{r7, pc}

0800f87c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800f87c:	b480      	push	{r7}
 800f87e:	b091      	sub	sp, #68	@ 0x44
 800f880:	af00      	add	r7, sp, #0
 800f882:	60f8      	str	r0, [r7, #12]
 800f884:	60b9      	str	r1, [r7, #8]
 800f886:	4613      	mov	r3, r2
 800f888:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f890:	2b20      	cmp	r3, #32
 800f892:	d178      	bne.n	800f986 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800f894:	68bb      	ldr	r3, [r7, #8]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d002      	beq.n	800f8a0 <HAL_UART_Transmit_IT+0x24>
 800f89a:	88fb      	ldrh	r3, [r7, #6]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d101      	bne.n	800f8a4 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800f8a0:	2301      	movs	r3, #1
 800f8a2:	e071      	b.n	800f988 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	68ba      	ldr	r2, [r7, #8]
 800f8a8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	88fa      	ldrh	r2, [r7, #6]
 800f8ae:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	88fa      	ldrh	r2, [r7, #6]
 800f8b6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	2200      	movs	r2, #0
 800f8be:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	2221      	movs	r2, #33	@ 0x21
 800f8cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f8d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f8d8:	d12a      	bne.n	800f930 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	689b      	ldr	r3, [r3, #8]
 800f8de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f8e2:	d107      	bne.n	800f8f4 <HAL_UART_Transmit_IT+0x78>
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	691b      	ldr	r3, [r3, #16]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d103      	bne.n	800f8f4 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	4a29      	ldr	r2, [pc, #164]	@ (800f994 <HAL_UART_Transmit_IT+0x118>)
 800f8f0:	679a      	str	r2, [r3, #120]	@ 0x78
 800f8f2:	e002      	b.n	800f8fa <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	4a28      	ldr	r2, [pc, #160]	@ (800f998 <HAL_UART_Transmit_IT+0x11c>)
 800f8f8:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	3308      	adds	r3, #8
 800f900:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f904:	e853 3f00 	ldrex	r3, [r3]
 800f908:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f90a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f90c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800f910:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	3308      	adds	r3, #8
 800f918:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f91a:	637a      	str	r2, [r7, #52]	@ 0x34
 800f91c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f91e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f920:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f922:	e841 2300 	strex	r3, r2, [r1]
 800f926:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800f928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d1e5      	bne.n	800f8fa <HAL_UART_Transmit_IT+0x7e>
 800f92e:	e028      	b.n	800f982 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	689b      	ldr	r3, [r3, #8]
 800f934:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f938:	d107      	bne.n	800f94a <HAL_UART_Transmit_IT+0xce>
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	691b      	ldr	r3, [r3, #16]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d103      	bne.n	800f94a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	4a15      	ldr	r2, [pc, #84]	@ (800f99c <HAL_UART_Transmit_IT+0x120>)
 800f946:	679a      	str	r2, [r3, #120]	@ 0x78
 800f948:	e002      	b.n	800f950 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	4a14      	ldr	r2, [pc, #80]	@ (800f9a0 <HAL_UART_Transmit_IT+0x124>)
 800f94e:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f956:	697b      	ldr	r3, [r7, #20]
 800f958:	e853 3f00 	ldrex	r3, [r3]
 800f95c:	613b      	str	r3, [r7, #16]
   return(result);
 800f95e:	693b      	ldr	r3, [r7, #16]
 800f960:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f964:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	461a      	mov	r2, r3
 800f96c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f96e:	623b      	str	r3, [r7, #32]
 800f970:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f972:	69f9      	ldr	r1, [r7, #28]
 800f974:	6a3a      	ldr	r2, [r7, #32]
 800f976:	e841 2300 	strex	r3, r2, [r1]
 800f97a:	61bb      	str	r3, [r7, #24]
   return(result);
 800f97c:	69bb      	ldr	r3, [r7, #24]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d1e6      	bne.n	800f950 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800f982:	2300      	movs	r3, #0
 800f984:	e000      	b.n	800f988 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800f986:	2302      	movs	r3, #2
  }
}
 800f988:	4618      	mov	r0, r3
 800f98a:	3744      	adds	r7, #68	@ 0x44
 800f98c:	46bd      	mov	sp, r7
 800f98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f992:	4770      	bx	lr
 800f994:	080120f9 	.word	0x080120f9
 800f998:	08012019 	.word	0x08012019
 800f99c:	08011f57 	.word	0x08011f57
 800f9a0:	08011e9f 	.word	0x08011e9f

0800f9a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b08a      	sub	sp, #40	@ 0x28
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	60f8      	str	r0, [r7, #12]
 800f9ac:	60b9      	str	r1, [r7, #8]
 800f9ae:	4613      	mov	r3, r2
 800f9b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f9b8:	2b20      	cmp	r3, #32
 800f9ba:	d137      	bne.n	800fa2c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800f9bc:	68bb      	ldr	r3, [r7, #8]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d002      	beq.n	800f9c8 <HAL_UART_Receive_IT+0x24>
 800f9c2:	88fb      	ldrh	r3, [r7, #6]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d101      	bne.n	800f9cc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800f9c8:	2301      	movs	r3, #1
 800f9ca:	e030      	b.n	800fa2e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	4a18      	ldr	r2, [pc, #96]	@ (800fa38 <HAL_UART_Receive_IT+0x94>)
 800f9d8:	4293      	cmp	r3, r2
 800f9da:	d01f      	beq.n	800fa1c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	685b      	ldr	r3, [r3, #4]
 800f9e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d018      	beq.n	800fa1c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9f0:	697b      	ldr	r3, [r7, #20]
 800f9f2:	e853 3f00 	ldrex	r3, [r3]
 800f9f6:	613b      	str	r3, [r7, #16]
   return(result);
 800f9f8:	693b      	ldr	r3, [r7, #16]
 800f9fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f9fe:	627b      	str	r3, [r7, #36]	@ 0x24
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	461a      	mov	r2, r3
 800fa06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa08:	623b      	str	r3, [r7, #32]
 800fa0a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa0c:	69f9      	ldr	r1, [r7, #28]
 800fa0e:	6a3a      	ldr	r2, [r7, #32]
 800fa10:	e841 2300 	strex	r3, r2, [r1]
 800fa14:	61bb      	str	r3, [r7, #24]
   return(result);
 800fa16:	69bb      	ldr	r3, [r7, #24]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d1e6      	bne.n	800f9ea <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800fa1c:	88fb      	ldrh	r3, [r7, #6]
 800fa1e:	461a      	mov	r2, r3
 800fa20:	68b9      	ldr	r1, [r7, #8]
 800fa22:	68f8      	ldr	r0, [r7, #12]
 800fa24:	f001 fe3c 	bl	80116a0 <UART_Start_Receive_IT>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	e000      	b.n	800fa2e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800fa2c:	2302      	movs	r3, #2
  }
}
 800fa2e:	4618      	mov	r0, r3
 800fa30:	3728      	adds	r7, #40	@ 0x28
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}
 800fa36:	bf00      	nop
 800fa38:	58000c00 	.word	0x58000c00

0800fa3c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b08a      	sub	sp, #40	@ 0x28
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	60f8      	str	r0, [r7, #12]
 800fa44:	60b9      	str	r1, [r7, #8]
 800fa46:	4613      	mov	r3, r2
 800fa48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fa50:	2b20      	cmp	r3, #32
 800fa52:	d137      	bne.n	800fac4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800fa54:	68bb      	ldr	r3, [r7, #8]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d002      	beq.n	800fa60 <HAL_UART_Receive_DMA+0x24>
 800fa5a:	88fb      	ldrh	r3, [r7, #6]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d101      	bne.n	800fa64 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800fa60:	2301      	movs	r3, #1
 800fa62:	e030      	b.n	800fac6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	2200      	movs	r2, #0
 800fa68:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	4a18      	ldr	r2, [pc, #96]	@ (800fad0 <HAL_UART_Receive_DMA+0x94>)
 800fa70:	4293      	cmp	r3, r2
 800fa72:	d01f      	beq.n	800fab4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	685b      	ldr	r3, [r3, #4]
 800fa7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d018      	beq.n	800fab4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa88:	697b      	ldr	r3, [r7, #20]
 800fa8a:	e853 3f00 	ldrex	r3, [r3]
 800fa8e:	613b      	str	r3, [r7, #16]
   return(result);
 800fa90:	693b      	ldr	r3, [r7, #16]
 800fa92:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800fa96:	627b      	str	r3, [r7, #36]	@ 0x24
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	461a      	mov	r2, r3
 800fa9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faa0:	623b      	str	r3, [r7, #32]
 800faa2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faa4:	69f9      	ldr	r1, [r7, #28]
 800faa6:	6a3a      	ldr	r2, [r7, #32]
 800faa8:	e841 2300 	strex	r3, r2, [r1]
 800faac:	61bb      	str	r3, [r7, #24]
   return(result);
 800faae:	69bb      	ldr	r3, [r7, #24]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d1e6      	bne.n	800fa82 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800fab4:	88fb      	ldrh	r3, [r7, #6]
 800fab6:	461a      	mov	r2, r3
 800fab8:	68b9      	ldr	r1, [r7, #8]
 800faba:	68f8      	ldr	r0, [r7, #12]
 800fabc:	f001 ff12 	bl	80118e4 <UART_Start_Receive_DMA>
 800fac0:	4603      	mov	r3, r0
 800fac2:	e000      	b.n	800fac6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800fac4:	2302      	movs	r3, #2
  }
}
 800fac6:	4618      	mov	r0, r3
 800fac8:	3728      	adds	r7, #40	@ 0x28
 800faca:	46bd      	mov	sp, r7
 800facc:	bd80      	pop	{r7, pc}
 800face:	bf00      	nop
 800fad0:	58000c00 	.word	0x58000c00

0800fad4 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b090      	sub	sp, #64	@ 0x40
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800faea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	689b      	ldr	r3, [r3, #8]
 800faf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800faf6:	2b80      	cmp	r3, #128	@ 0x80
 800faf8:	d139      	bne.n	800fb6e <HAL_UART_DMAStop+0x9a>
 800fafa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fafc:	2b21      	cmp	r3, #33	@ 0x21
 800fafe:	d136      	bne.n	800fb6e <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	3308      	adds	r3, #8
 800fb06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb08:	6a3b      	ldr	r3, [r7, #32]
 800fb0a:	e853 3f00 	ldrex	r3, [r3]
 800fb0e:	61fb      	str	r3, [r7, #28]
   return(result);
 800fb10:	69fb      	ldr	r3, [r7, #28]
 800fb12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fb16:	637b      	str	r3, [r7, #52]	@ 0x34
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	3308      	adds	r3, #8
 800fb1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fb20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fb22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fb26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fb28:	e841 2300 	strex	r3, r2, [r1]
 800fb2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fb2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d1e5      	bne.n	800fb00 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d015      	beq.n	800fb68 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fb40:	4618      	mov	r0, r3
 800fb42:	f7f7 fde1 	bl	8007708 <HAL_DMA_Abort>
 800fb46:	4603      	mov	r3, r0
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d00d      	beq.n	800fb68 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fb50:	4618      	mov	r0, r3
 800fb52:	f7f9 fa9f 	bl	8009094 <HAL_DMA_GetError>
 800fb56:	4603      	mov	r3, r0
 800fb58:	2b20      	cmp	r3, #32
 800fb5a:	d105      	bne.n	800fb68 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	2210      	movs	r2, #16
 800fb60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800fb64:	2303      	movs	r3, #3
 800fb66:	e047      	b.n	800fbf8 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800fb68:	6878      	ldr	r0, [r7, #4]
 800fb6a:	f001 ff61 	bl	8011a30 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	689b      	ldr	r3, [r3, #8]
 800fb74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fb78:	2b40      	cmp	r3, #64	@ 0x40
 800fb7a:	d13c      	bne.n	800fbf6 <HAL_UART_DMAStop+0x122>
 800fb7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb7e:	2b22      	cmp	r3, #34	@ 0x22
 800fb80:	d139      	bne.n	800fbf6 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	3308      	adds	r3, #8
 800fb88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	e853 3f00 	ldrex	r3, [r3]
 800fb90:	60bb      	str	r3, [r7, #8]
   return(result);
 800fb92:	68bb      	ldr	r3, [r7, #8]
 800fb94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fb98:	633b      	str	r3, [r7, #48]	@ 0x30
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	3308      	adds	r3, #8
 800fba0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fba2:	61ba      	str	r2, [r7, #24]
 800fba4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fba6:	6979      	ldr	r1, [r7, #20]
 800fba8:	69ba      	ldr	r2, [r7, #24]
 800fbaa:	e841 2300 	strex	r3, r2, [r1]
 800fbae:	613b      	str	r3, [r7, #16]
   return(result);
 800fbb0:	693b      	ldr	r3, [r7, #16]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d1e5      	bne.n	800fb82 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d017      	beq.n	800fbf0 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	f7f7 fd9e 	bl	8007708 <HAL_DMA_Abort>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d00e      	beq.n	800fbf0 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f7f9 fa5b 	bl	8009094 <HAL_DMA_GetError>
 800fbde:	4603      	mov	r3, r0
 800fbe0:	2b20      	cmp	r3, #32
 800fbe2:	d105      	bne.n	800fbf0 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	2210      	movs	r2, #16
 800fbe8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800fbec:	2303      	movs	r3, #3
 800fbee:	e003      	b.n	800fbf8 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800fbf0:	6878      	ldr	r0, [r7, #4]
 800fbf2:	f001 ff5f 	bl	8011ab4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800fbf6:	2300      	movs	r3, #0
}
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	3740      	adds	r7, #64	@ 0x40
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bd80      	pop	{r7, pc}

0800fc00 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b0a2      	sub	sp, #136	@ 0x88
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 800fc08:	2301      	movs	r3, #1
 800fc0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fc16:	e853 3f00 	ldrex	r3, [r3]
 800fc1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800fc1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fc1e:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800fc22:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	461a      	mov	r2, r3
 800fc2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800fc30:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800fc32:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc34:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800fc36:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fc38:	e841 2300 	strex	r3, r2, [r1]
 800fc3c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800fc3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d1e4      	bne.n	800fc0e <HAL_UART_Abort_IT+0xe>
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	3308      	adds	r3, #8
 800fc4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fc4e:	e853 3f00 	ldrex	r3, [r3]
 800fc52:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fc54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fc56:	4b85      	ldr	r3, [pc, #532]	@ (800fe6c <HAL_UART_Abort_IT+0x26c>)
 800fc58:	4013      	ands	r3, r2
 800fc5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	3308      	adds	r3, #8
 800fc62:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800fc64:	65ba      	str	r2, [r7, #88]	@ 0x58
 800fc66:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fc6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fc6c:	e841 2300 	strex	r3, r2, [r1]
 800fc70:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fc72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d1e5      	bne.n	800fc44 <HAL_UART_Abort_IT+0x44>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fc7c:	2b01      	cmp	r3, #1
 800fc7e:	d118      	bne.n	800fcb2 <HAL_UART_Abort_IT+0xb2>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc88:	e853 3f00 	ldrex	r3, [r3]
 800fc8c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fc8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc90:	f023 0310 	bic.w	r3, r3, #16
 800fc94:	67bb      	str	r3, [r7, #120]	@ 0x78
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	461a      	mov	r2, r3
 800fc9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fc9e:	647b      	str	r3, [r7, #68]	@ 0x44
 800fca0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fca2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fca4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fca6:	e841 2300 	strex	r3, r2, [r1]
 800fcaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fcac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d1e6      	bne.n	800fc80 <HAL_UART_Abort_IT+0x80>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d00f      	beq.n	800fcda <HAL_UART_Abort_IT+0xda>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	689b      	ldr	r3, [r3, #8]
 800fcc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fcc4:	2b80      	cmp	r3, #128	@ 0x80
 800fcc6:	d104      	bne.n	800fcd2 <HAL_UART_Abort_IT+0xd2>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fccc:	4a68      	ldr	r2, [pc, #416]	@ (800fe70 <HAL_UART_Abort_IT+0x270>)
 800fcce:	651a      	str	r2, [r3, #80]	@ 0x50
 800fcd0:	e003      	b.n	800fcda <HAL_UART_Abort_IT+0xda>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d011      	beq.n	800fd08 <HAL_UART_Abort_IT+0x108>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	689b      	ldr	r3, [r3, #8]
 800fcea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fcee:	2b40      	cmp	r3, #64	@ 0x40
 800fcf0:	d105      	bne.n	800fcfe <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fcf8:	4a5e      	ldr	r2, [pc, #376]	@ (800fe74 <HAL_UART_Abort_IT+0x274>)
 800fcfa:	651a      	str	r2, [r3, #80]	@ 0x50
 800fcfc:	e004      	b.n	800fd08 <HAL_UART_Abort_IT+0x108>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd04:	2200      	movs	r2, #0
 800fd06:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	689b      	ldr	r3, [r3, #8]
 800fd0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fd12:	2b80      	cmp	r3, #128	@ 0x80
 800fd14:	d12d      	bne.n	800fd72 <HAL_UART_Abort_IT+0x172>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	3308      	adds	r3, #8
 800fd1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd20:	e853 3f00 	ldrex	r3, [r3]
 800fd24:	623b      	str	r3, [r7, #32]
   return(result);
 800fd26:	6a3b      	ldr	r3, [r7, #32]
 800fd28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fd2c:	677b      	str	r3, [r7, #116]	@ 0x74
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	3308      	adds	r3, #8
 800fd34:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800fd36:	633a      	str	r2, [r7, #48]	@ 0x30
 800fd38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fd3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd3e:	e841 2300 	strex	r3, r2, [r1]
 800fd42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fd44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d1e5      	bne.n	800fd16 <HAL_UART_Abort_IT+0x116>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d00f      	beq.n	800fd72 <HAL_UART_Abort_IT+0x172>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fd56:	4618      	mov	r0, r3
 800fd58:	f7f7 fff4 	bl	8007d44 <HAL_DMA_Abort_IT>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d004      	beq.n	800fd6c <HAL_UART_Abort_IT+0x16c>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fd66:	2200      	movs	r2, #0
 800fd68:	651a      	str	r2, [r3, #80]	@ 0x50
 800fd6a:	e002      	b.n	800fd72 <HAL_UART_Abort_IT+0x172>
      }
      else
      {
        abortcplt = 0U;
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	689b      	ldr	r3, [r3, #8]
 800fd78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd7c:	2b40      	cmp	r3, #64	@ 0x40
 800fd7e:	d133      	bne.n	800fde8 <HAL_UART_Abort_IT+0x1e8>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	3308      	adds	r3, #8
 800fd86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd88:	693b      	ldr	r3, [r7, #16]
 800fd8a:	e853 3f00 	ldrex	r3, [r3]
 800fd8e:	60fb      	str	r3, [r7, #12]
   return(result);
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fd96:	673b      	str	r3, [r7, #112]	@ 0x70
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	3308      	adds	r3, #8
 800fd9e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800fda0:	61fa      	str	r2, [r7, #28]
 800fda2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fda4:	69b9      	ldr	r1, [r7, #24]
 800fda6:	69fa      	ldr	r2, [r7, #28]
 800fda8:	e841 2300 	strex	r3, r2, [r1]
 800fdac:	617b      	str	r3, [r7, #20]
   return(result);
 800fdae:	697b      	ldr	r3, [r7, #20]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d1e5      	bne.n	800fd80 <HAL_UART_Abort_IT+0x180>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d014      	beq.n	800fde8 <HAL_UART_Abort_IT+0x1e8>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	f7f7 ffbd 	bl	8007d44 <HAL_DMA_Abort_IT>
 800fdca:	4603      	mov	r3, r0
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d008      	beq.n	800fde2 <HAL_UART_Abort_IT+0x1e2>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	651a      	str	r2, [r3, #80]	@ 0x50
        abortcplt = 1U;
 800fdda:	2301      	movs	r3, #1
 800fddc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800fde0:	e002      	b.n	800fde8 <HAL_UART_Abort_IT+0x1e8>
      }
      else
      {
        abortcplt = 0U;
 800fde2:	2300      	movs	r3, #0
 800fde4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 800fde8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fdec:	2b01      	cmp	r3, #1
 800fdee:	d138      	bne.n	800fe62 <HAL_UART_Abort_IT+0x262>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->RxXferCount = 0U;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	2200      	movs	r2, #0
 800fe04:	675a      	str	r2, [r3, #116]	@ 0x74
    huart->TxISR = NULL;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	2200      	movs	r2, #0
 800fe10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	220f      	movs	r2, #15
 800fe1a:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fe20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fe24:	d107      	bne.n	800fe36 <HAL_UART_Abort_IT+0x236>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	699a      	ldr	r2, [r3, #24]
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	f042 0210 	orr.w	r2, r2, #16
 800fe34:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	699a      	ldr	r2, [r3, #24]
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	f042 0208 	orr.w	r2, r2, #8
 800fe44:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	2220      	movs	r2, #32
 800fe4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    huart->RxState = HAL_UART_STATE_READY;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	2220      	movs	r2, #32
 800fe52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	2200      	movs	r2, #0
 800fe5a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f000 fbe3 	bl	8010628 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800fe62:	2300      	movs	r3, #0
}
 800fe64:	4618      	mov	r0, r3
 800fe66:	3788      	adds	r7, #136	@ 0x88
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	bd80      	pop	{r7, pc}
 800fe6c:	ef7ffffe 	.word	0xef7ffffe
 800fe70:	08011d93 	.word	0x08011d93
 800fe74:	08011e1f 	.word	0x08011e1f

0800fe78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b0ba      	sub	sp, #232	@ 0xe8
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	69db      	ldr	r3, [r3, #28]
 800fe86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	689b      	ldr	r3, [r3, #8]
 800fe9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800fe9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800fea2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800fea6:	4013      	ands	r3, r2
 800fea8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800feac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d11b      	bne.n	800feec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800feb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800feb8:	f003 0320 	and.w	r3, r3, #32
 800febc:	2b00      	cmp	r3, #0
 800febe:	d015      	beq.n	800feec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fec4:	f003 0320 	and.w	r3, r3, #32
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d105      	bne.n	800fed8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fecc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fed0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d009      	beq.n	800feec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fedc:	2b00      	cmp	r3, #0
 800fede:	f000 8377 	beq.w	80105d0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fee6:	6878      	ldr	r0, [r7, #4]
 800fee8:	4798      	blx	r3
      }
      return;
 800feea:	e371      	b.n	80105d0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800feec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	f000 8123 	beq.w	801013c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800fef6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800fefa:	4b8d      	ldr	r3, [pc, #564]	@ (8010130 <HAL_UART_IRQHandler+0x2b8>)
 800fefc:	4013      	ands	r3, r2
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d106      	bne.n	800ff10 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ff02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ff06:	4b8b      	ldr	r3, [pc, #556]	@ (8010134 <HAL_UART_IRQHandler+0x2bc>)
 800ff08:	4013      	ands	r3, r2
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	f000 8116 	beq.w	801013c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ff10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff14:	f003 0301 	and.w	r3, r3, #1
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d011      	beq.n	800ff40 <HAL_UART_IRQHandler+0xc8>
 800ff1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ff20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d00b      	beq.n	800ff40 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	2201      	movs	r2, #1
 800ff2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ff36:	f043 0201 	orr.w	r2, r3, #1
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ff40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff44:	f003 0302 	and.w	r3, r3, #2
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d011      	beq.n	800ff70 <HAL_UART_IRQHandler+0xf8>
 800ff4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ff50:	f003 0301 	and.w	r3, r3, #1
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d00b      	beq.n	800ff70 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	2202      	movs	r2, #2
 800ff5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ff66:	f043 0204 	orr.w	r2, r3, #4
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ff70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff74:	f003 0304 	and.w	r3, r3, #4
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d011      	beq.n	800ffa0 <HAL_UART_IRQHandler+0x128>
 800ff7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ff80:	f003 0301 	and.w	r3, r3, #1
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d00b      	beq.n	800ffa0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	2204      	movs	r2, #4
 800ff8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ff96:	f043 0202 	orr.w	r2, r3, #2
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ffa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ffa4:	f003 0308 	and.w	r3, r3, #8
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d017      	beq.n	800ffdc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ffac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ffb0:	f003 0320 	and.w	r3, r3, #32
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d105      	bne.n	800ffc4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ffb8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ffbc:	4b5c      	ldr	r3, [pc, #368]	@ (8010130 <HAL_UART_IRQHandler+0x2b8>)
 800ffbe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d00b      	beq.n	800ffdc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	2208      	movs	r2, #8
 800ffca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ffd2:	f043 0208 	orr.w	r2, r3, #8
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ffdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ffe0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d012      	beq.n	801000e <HAL_UART_IRQHandler+0x196>
 800ffe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ffec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d00c      	beq.n	801000e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fffc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010004:	f043 0220 	orr.w	r2, r3, #32
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010014:	2b00      	cmp	r3, #0
 8010016:	f000 82dd 	beq.w	80105d4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801001a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801001e:	f003 0320 	and.w	r3, r3, #32
 8010022:	2b00      	cmp	r3, #0
 8010024:	d013      	beq.n	801004e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801002a:	f003 0320 	and.w	r3, r3, #32
 801002e:	2b00      	cmp	r3, #0
 8010030:	d105      	bne.n	801003e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801003a:	2b00      	cmp	r3, #0
 801003c:	d007      	beq.n	801004e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010042:	2b00      	cmp	r3, #0
 8010044:	d003      	beq.n	801004e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801004a:	6878      	ldr	r0, [r7, #4]
 801004c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010054:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	689b      	ldr	r3, [r3, #8]
 801005e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010062:	2b40      	cmp	r3, #64	@ 0x40
 8010064:	d005      	beq.n	8010072 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010066:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801006a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801006e:	2b00      	cmp	r3, #0
 8010070:	d054      	beq.n	801011c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010072:	6878      	ldr	r0, [r7, #4]
 8010074:	f001 fd1e 	bl	8011ab4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	689b      	ldr	r3, [r3, #8]
 801007e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010082:	2b40      	cmp	r3, #64	@ 0x40
 8010084:	d146      	bne.n	8010114 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	3308      	adds	r3, #8
 801008c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010090:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010094:	e853 3f00 	ldrex	r3, [r3]
 8010098:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 801009c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80100a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80100a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	3308      	adds	r3, #8
 80100ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80100b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80100b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80100be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80100c2:	e841 2300 	strex	r3, r2, [r1]
 80100c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80100ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d1d9      	bne.n	8010086 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d017      	beq.n	801010c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80100e2:	4a15      	ldr	r2, [pc, #84]	@ (8010138 <HAL_UART_IRQHandler+0x2c0>)
 80100e4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80100ec:	4618      	mov	r0, r3
 80100ee:	f7f7 fe29 	bl	8007d44 <HAL_DMA_Abort_IT>
 80100f2:	4603      	mov	r3, r0
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d019      	beq.n	801012c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80100fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010100:	687a      	ldr	r2, [r7, #4]
 8010102:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8010106:	4610      	mov	r0, r2
 8010108:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801010a:	e00f      	b.n	801012c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801010c:	6878      	ldr	r0, [r7, #4]
 801010e:	f000 fa81 	bl	8010614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010112:	e00b      	b.n	801012c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010114:	6878      	ldr	r0, [r7, #4]
 8010116:	f000 fa7d 	bl	8010614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801011a:	e007      	b.n	801012c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801011c:	6878      	ldr	r0, [r7, #4]
 801011e:	f000 fa79 	bl	8010614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	2200      	movs	r2, #0
 8010126:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 801012a:	e253      	b.n	80105d4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801012c:	bf00      	nop
    return;
 801012e:	e251      	b.n	80105d4 <HAL_UART_IRQHandler+0x75c>
 8010130:	10000001 	.word	0x10000001
 8010134:	04000120 	.word	0x04000120
 8010138:	08011d67 	.word	0x08011d67

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010140:	2b01      	cmp	r3, #1
 8010142:	f040 81e7 	bne.w	8010514 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801014a:	f003 0310 	and.w	r3, r3, #16
 801014e:	2b00      	cmp	r3, #0
 8010150:	f000 81e0 	beq.w	8010514 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010158:	f003 0310 	and.w	r3, r3, #16
 801015c:	2b00      	cmp	r3, #0
 801015e:	f000 81d9 	beq.w	8010514 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	2210      	movs	r2, #16
 8010168:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	689b      	ldr	r3, [r3, #8]
 8010170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010174:	2b40      	cmp	r3, #64	@ 0x40
 8010176:	f040 8151 	bne.w	801041c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	4a96      	ldr	r2, [pc, #600]	@ (80103dc <HAL_UART_IRQHandler+0x564>)
 8010184:	4293      	cmp	r3, r2
 8010186:	d068      	beq.n	801025a <HAL_UART_IRQHandler+0x3e2>
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	4a93      	ldr	r2, [pc, #588]	@ (80103e0 <HAL_UART_IRQHandler+0x568>)
 8010192:	4293      	cmp	r3, r2
 8010194:	d061      	beq.n	801025a <HAL_UART_IRQHandler+0x3e2>
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	4a91      	ldr	r2, [pc, #580]	@ (80103e4 <HAL_UART_IRQHandler+0x56c>)
 80101a0:	4293      	cmp	r3, r2
 80101a2:	d05a      	beq.n	801025a <HAL_UART_IRQHandler+0x3e2>
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	4a8e      	ldr	r2, [pc, #568]	@ (80103e8 <HAL_UART_IRQHandler+0x570>)
 80101ae:	4293      	cmp	r3, r2
 80101b0:	d053      	beq.n	801025a <HAL_UART_IRQHandler+0x3e2>
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	4a8c      	ldr	r2, [pc, #560]	@ (80103ec <HAL_UART_IRQHandler+0x574>)
 80101bc:	4293      	cmp	r3, r2
 80101be:	d04c      	beq.n	801025a <HAL_UART_IRQHandler+0x3e2>
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	4a89      	ldr	r2, [pc, #548]	@ (80103f0 <HAL_UART_IRQHandler+0x578>)
 80101ca:	4293      	cmp	r3, r2
 80101cc:	d045      	beq.n	801025a <HAL_UART_IRQHandler+0x3e2>
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	4a87      	ldr	r2, [pc, #540]	@ (80103f4 <HAL_UART_IRQHandler+0x57c>)
 80101d8:	4293      	cmp	r3, r2
 80101da:	d03e      	beq.n	801025a <HAL_UART_IRQHandler+0x3e2>
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	4a84      	ldr	r2, [pc, #528]	@ (80103f8 <HAL_UART_IRQHandler+0x580>)
 80101e6:	4293      	cmp	r3, r2
 80101e8:	d037      	beq.n	801025a <HAL_UART_IRQHandler+0x3e2>
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	4a82      	ldr	r2, [pc, #520]	@ (80103fc <HAL_UART_IRQHandler+0x584>)
 80101f4:	4293      	cmp	r3, r2
 80101f6:	d030      	beq.n	801025a <HAL_UART_IRQHandler+0x3e2>
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	4a7f      	ldr	r2, [pc, #508]	@ (8010400 <HAL_UART_IRQHandler+0x588>)
 8010202:	4293      	cmp	r3, r2
 8010204:	d029      	beq.n	801025a <HAL_UART_IRQHandler+0x3e2>
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	4a7d      	ldr	r2, [pc, #500]	@ (8010404 <HAL_UART_IRQHandler+0x58c>)
 8010210:	4293      	cmp	r3, r2
 8010212:	d022      	beq.n	801025a <HAL_UART_IRQHandler+0x3e2>
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	4a7a      	ldr	r2, [pc, #488]	@ (8010408 <HAL_UART_IRQHandler+0x590>)
 801021e:	4293      	cmp	r3, r2
 8010220:	d01b      	beq.n	801025a <HAL_UART_IRQHandler+0x3e2>
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	4a78      	ldr	r2, [pc, #480]	@ (801040c <HAL_UART_IRQHandler+0x594>)
 801022c:	4293      	cmp	r3, r2
 801022e:	d014      	beq.n	801025a <HAL_UART_IRQHandler+0x3e2>
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	4a75      	ldr	r2, [pc, #468]	@ (8010410 <HAL_UART_IRQHandler+0x598>)
 801023a:	4293      	cmp	r3, r2
 801023c:	d00d      	beq.n	801025a <HAL_UART_IRQHandler+0x3e2>
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	4a73      	ldr	r2, [pc, #460]	@ (8010414 <HAL_UART_IRQHandler+0x59c>)
 8010248:	4293      	cmp	r3, r2
 801024a:	d006      	beq.n	801025a <HAL_UART_IRQHandler+0x3e2>
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	4a70      	ldr	r2, [pc, #448]	@ (8010418 <HAL_UART_IRQHandler+0x5a0>)
 8010256:	4293      	cmp	r3, r2
 8010258:	d106      	bne.n	8010268 <HAL_UART_IRQHandler+0x3f0>
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	685b      	ldr	r3, [r3, #4]
 8010264:	b29b      	uxth	r3, r3
 8010266:	e005      	b.n	8010274 <HAL_UART_IRQHandler+0x3fc>
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	685b      	ldr	r3, [r3, #4]
 8010272:	b29b      	uxth	r3, r3
 8010274:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010278:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 801027c:	2b00      	cmp	r3, #0
 801027e:	f000 81ab 	beq.w	80105d8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010288:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801028c:	429a      	cmp	r2, r3
 801028e:	f080 81a3 	bcs.w	80105d8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010298:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80102a2:	69db      	ldr	r3, [r3, #28]
 80102a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80102a8:	f000 8087 	beq.w	80103ba <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80102b8:	e853 3f00 	ldrex	r3, [r3]
 80102bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80102c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80102c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80102c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	461a      	mov	r2, r3
 80102d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80102d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80102da:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102de:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80102e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80102e6:	e841 2300 	strex	r3, r2, [r1]
 80102ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80102ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d1da      	bne.n	80102ac <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	3308      	adds	r3, #8
 80102fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010300:	e853 3f00 	ldrex	r3, [r3]
 8010304:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8010306:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010308:	f023 0301 	bic.w	r3, r3, #1
 801030c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	3308      	adds	r3, #8
 8010316:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801031a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801031e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010320:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010322:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010326:	e841 2300 	strex	r3, r2, [r1]
 801032a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801032c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801032e:	2b00      	cmp	r3, #0
 8010330:	d1e1      	bne.n	80102f6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	3308      	adds	r3, #8
 8010338:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801033a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801033c:	e853 3f00 	ldrex	r3, [r3]
 8010340:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8010342:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010344:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010348:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	3308      	adds	r3, #8
 8010352:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8010356:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010358:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801035a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801035c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801035e:	e841 2300 	strex	r3, r2, [r1]
 8010362:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8010364:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010366:	2b00      	cmp	r3, #0
 8010368:	d1e3      	bne.n	8010332 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	2220      	movs	r2, #32
 801036e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	2200      	movs	r2, #0
 8010376:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801037e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010380:	e853 3f00 	ldrex	r3, [r3]
 8010384:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010386:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010388:	f023 0310 	bic.w	r3, r3, #16
 801038c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	461a      	mov	r2, r3
 8010396:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801039a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801039c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801039e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80103a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80103a2:	e841 2300 	strex	r3, r2, [r1]
 80103a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80103a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d1e4      	bne.n	8010378 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103b4:	4618      	mov	r0, r3
 80103b6:	f7f7 f9a7 	bl	8007708 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	2202      	movs	r2, #2
 80103be:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80103cc:	b29b      	uxth	r3, r3
 80103ce:	1ad3      	subs	r3, r2, r3
 80103d0:	b29b      	uxth	r3, r3
 80103d2:	4619      	mov	r1, r3
 80103d4:	6878      	ldr	r0, [r7, #4]
 80103d6:	f000 f931 	bl	801063c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80103da:	e0fd      	b.n	80105d8 <HAL_UART_IRQHandler+0x760>
 80103dc:	40020010 	.word	0x40020010
 80103e0:	40020028 	.word	0x40020028
 80103e4:	40020040 	.word	0x40020040
 80103e8:	40020058 	.word	0x40020058
 80103ec:	40020070 	.word	0x40020070
 80103f0:	40020088 	.word	0x40020088
 80103f4:	400200a0 	.word	0x400200a0
 80103f8:	400200b8 	.word	0x400200b8
 80103fc:	40020410 	.word	0x40020410
 8010400:	40020428 	.word	0x40020428
 8010404:	40020440 	.word	0x40020440
 8010408:	40020458 	.word	0x40020458
 801040c:	40020470 	.word	0x40020470
 8010410:	40020488 	.word	0x40020488
 8010414:	400204a0 	.word	0x400204a0
 8010418:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010428:	b29b      	uxth	r3, r3
 801042a:	1ad3      	subs	r3, r2, r3
 801042c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010436:	b29b      	uxth	r3, r3
 8010438:	2b00      	cmp	r3, #0
 801043a:	f000 80cf 	beq.w	80105dc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 801043e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010442:	2b00      	cmp	r3, #0
 8010444:	f000 80ca 	beq.w	80105dc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801044e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010450:	e853 3f00 	ldrex	r3, [r3]
 8010454:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010458:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801045c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	461a      	mov	r2, r3
 8010466:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801046a:	647b      	str	r3, [r7, #68]	@ 0x44
 801046c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801046e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010470:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010472:	e841 2300 	strex	r3, r2, [r1]
 8010476:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010478:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801047a:	2b00      	cmp	r3, #0
 801047c:	d1e4      	bne.n	8010448 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	3308      	adds	r3, #8
 8010484:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010488:	e853 3f00 	ldrex	r3, [r3]
 801048c:	623b      	str	r3, [r7, #32]
   return(result);
 801048e:	6a3a      	ldr	r2, [r7, #32]
 8010490:	4b55      	ldr	r3, [pc, #340]	@ (80105e8 <HAL_UART_IRQHandler+0x770>)
 8010492:	4013      	ands	r3, r2
 8010494:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	3308      	adds	r3, #8
 801049e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80104a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80104a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80104a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80104aa:	e841 2300 	strex	r3, r2, [r1]
 80104ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80104b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d1e3      	bne.n	801047e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	2220      	movs	r2, #32
 80104ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	2200      	movs	r2, #0
 80104c2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	2200      	movs	r2, #0
 80104c8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104d0:	693b      	ldr	r3, [r7, #16]
 80104d2:	e853 3f00 	ldrex	r3, [r3]
 80104d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	f023 0310 	bic.w	r3, r3, #16
 80104de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	461a      	mov	r2, r3
 80104e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80104ec:	61fb      	str	r3, [r7, #28]
 80104ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104f0:	69b9      	ldr	r1, [r7, #24]
 80104f2:	69fa      	ldr	r2, [r7, #28]
 80104f4:	e841 2300 	strex	r3, r2, [r1]
 80104f8:	617b      	str	r3, [r7, #20]
   return(result);
 80104fa:	697b      	ldr	r3, [r7, #20]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d1e4      	bne.n	80104ca <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	2202      	movs	r2, #2
 8010504:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010506:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801050a:	4619      	mov	r1, r3
 801050c:	6878      	ldr	r0, [r7, #4]
 801050e:	f000 f895 	bl	801063c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010512:	e063      	b.n	80105dc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010518:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801051c:	2b00      	cmp	r3, #0
 801051e:	d00e      	beq.n	801053e <HAL_UART_IRQHandler+0x6c6>
 8010520:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010524:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010528:	2b00      	cmp	r3, #0
 801052a:	d008      	beq.n	801053e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8010534:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010536:	6878      	ldr	r0, [r7, #4]
 8010538:	f002 fb9a 	bl	8012c70 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801053c:	e051      	b.n	80105e2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801053e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010546:	2b00      	cmp	r3, #0
 8010548:	d014      	beq.n	8010574 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801054a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801054e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010552:	2b00      	cmp	r3, #0
 8010554:	d105      	bne.n	8010562 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801055a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801055e:	2b00      	cmp	r3, #0
 8010560:	d008      	beq.n	8010574 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010566:	2b00      	cmp	r3, #0
 8010568:	d03a      	beq.n	80105e0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801056e:	6878      	ldr	r0, [r7, #4]
 8010570:	4798      	blx	r3
    }
    return;
 8010572:	e035      	b.n	80105e0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801057c:	2b00      	cmp	r3, #0
 801057e:	d009      	beq.n	8010594 <HAL_UART_IRQHandler+0x71c>
 8010580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010588:	2b00      	cmp	r3, #0
 801058a:	d003      	beq.n	8010594 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 801058c:	6878      	ldr	r0, [r7, #4]
 801058e:	f001 fe28 	bl	80121e2 <UART_EndTransmit_IT>
    return;
 8010592:	e026      	b.n	80105e2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010598:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801059c:	2b00      	cmp	r3, #0
 801059e:	d009      	beq.n	80105b4 <HAL_UART_IRQHandler+0x73c>
 80105a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80105a4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d003      	beq.n	80105b4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80105ac:	6878      	ldr	r0, [r7, #4]
 80105ae:	f002 fb73 	bl	8012c98 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80105b2:	e016      	b.n	80105e2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80105b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80105b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d010      	beq.n	80105e2 <HAL_UART_IRQHandler+0x76a>
 80105c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	da0c      	bge.n	80105e2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80105c8:	6878      	ldr	r0, [r7, #4]
 80105ca:	f002 fb5b 	bl	8012c84 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80105ce:	e008      	b.n	80105e2 <HAL_UART_IRQHandler+0x76a>
      return;
 80105d0:	bf00      	nop
 80105d2:	e006      	b.n	80105e2 <HAL_UART_IRQHandler+0x76a>
    return;
 80105d4:	bf00      	nop
 80105d6:	e004      	b.n	80105e2 <HAL_UART_IRQHandler+0x76a>
      return;
 80105d8:	bf00      	nop
 80105da:	e002      	b.n	80105e2 <HAL_UART_IRQHandler+0x76a>
      return;
 80105dc:	bf00      	nop
 80105de:	e000      	b.n	80105e2 <HAL_UART_IRQHandler+0x76a>
    return;
 80105e0:	bf00      	nop
  }
}
 80105e2:	37e8      	adds	r7, #232	@ 0xe8
 80105e4:	46bd      	mov	sp, r7
 80105e6:	bd80      	pop	{r7, pc}
 80105e8:	effffffe 	.word	0xeffffffe

080105ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80105ec:	b480      	push	{r7}
 80105ee:	b083      	sub	sp, #12
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80105f4:	bf00      	nop
 80105f6:	370c      	adds	r7, #12
 80105f8:	46bd      	mov	sp, r7
 80105fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fe:	4770      	bx	lr

08010600 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010600:	b480      	push	{r7}
 8010602:	b083      	sub	sp, #12
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8010608:	bf00      	nop
 801060a:	370c      	adds	r7, #12
 801060c:	46bd      	mov	sp, r7
 801060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010612:	4770      	bx	lr

08010614 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010614:	b480      	push	{r7}
 8010616:	b083      	sub	sp, #12
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801061c:	bf00      	nop
 801061e:	370c      	adds	r7, #12
 8010620:	46bd      	mov	sp, r7
 8010622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010626:	4770      	bx	lr

08010628 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8010628:	b480      	push	{r7}
 801062a:	b083      	sub	sp, #12
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8010630:	bf00      	nop
 8010632:	370c      	adds	r7, #12
 8010634:	46bd      	mov	sp, r7
 8010636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801063a:	4770      	bx	lr

0801063c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801063c:	b480      	push	{r7}
 801063e:	b083      	sub	sp, #12
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
 8010644:	460b      	mov	r3, r1
 8010646:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010648:	bf00      	nop
 801064a:	370c      	adds	r7, #12
 801064c:	46bd      	mov	sp, r7
 801064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010652:	4770      	bx	lr

08010654 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010658:	b092      	sub	sp, #72	@ 0x48
 801065a:	af00      	add	r7, sp, #0
 801065c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801065e:	2300      	movs	r3, #0
 8010660:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010664:	697b      	ldr	r3, [r7, #20]
 8010666:	689a      	ldr	r2, [r3, #8]
 8010668:	697b      	ldr	r3, [r7, #20]
 801066a:	691b      	ldr	r3, [r3, #16]
 801066c:	431a      	orrs	r2, r3
 801066e:	697b      	ldr	r3, [r7, #20]
 8010670:	695b      	ldr	r3, [r3, #20]
 8010672:	431a      	orrs	r2, r3
 8010674:	697b      	ldr	r3, [r7, #20]
 8010676:	69db      	ldr	r3, [r3, #28]
 8010678:	4313      	orrs	r3, r2
 801067a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801067c:	697b      	ldr	r3, [r7, #20]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	681a      	ldr	r2, [r3, #0]
 8010682:	4bbe      	ldr	r3, [pc, #760]	@ (801097c <UART_SetConfig+0x328>)
 8010684:	4013      	ands	r3, r2
 8010686:	697a      	ldr	r2, [r7, #20]
 8010688:	6812      	ldr	r2, [r2, #0]
 801068a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801068c:	430b      	orrs	r3, r1
 801068e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010690:	697b      	ldr	r3, [r7, #20]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	685b      	ldr	r3, [r3, #4]
 8010696:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801069a:	697b      	ldr	r3, [r7, #20]
 801069c:	68da      	ldr	r2, [r3, #12]
 801069e:	697b      	ldr	r3, [r7, #20]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	430a      	orrs	r2, r1
 80106a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80106a6:	697b      	ldr	r3, [r7, #20]
 80106a8:	699b      	ldr	r3, [r3, #24]
 80106aa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80106ac:	697b      	ldr	r3, [r7, #20]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	4ab3      	ldr	r2, [pc, #716]	@ (8010980 <UART_SetConfig+0x32c>)
 80106b2:	4293      	cmp	r3, r2
 80106b4:	d004      	beq.n	80106c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	6a1b      	ldr	r3, [r3, #32]
 80106ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80106bc:	4313      	orrs	r3, r2
 80106be:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80106c0:	697b      	ldr	r3, [r7, #20]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	689a      	ldr	r2, [r3, #8]
 80106c6:	4baf      	ldr	r3, [pc, #700]	@ (8010984 <UART_SetConfig+0x330>)
 80106c8:	4013      	ands	r3, r2
 80106ca:	697a      	ldr	r2, [r7, #20]
 80106cc:	6812      	ldr	r2, [r2, #0]
 80106ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80106d0:	430b      	orrs	r3, r1
 80106d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80106d4:	697b      	ldr	r3, [r7, #20]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106da:	f023 010f 	bic.w	r1, r3, #15
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80106e2:	697b      	ldr	r3, [r7, #20]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	430a      	orrs	r2, r1
 80106e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80106ea:	697b      	ldr	r3, [r7, #20]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	4aa6      	ldr	r2, [pc, #664]	@ (8010988 <UART_SetConfig+0x334>)
 80106f0:	4293      	cmp	r3, r2
 80106f2:	d177      	bne.n	80107e4 <UART_SetConfig+0x190>
 80106f4:	4ba5      	ldr	r3, [pc, #660]	@ (801098c <UART_SetConfig+0x338>)
 80106f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80106f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80106fc:	2b28      	cmp	r3, #40	@ 0x28
 80106fe:	d86d      	bhi.n	80107dc <UART_SetConfig+0x188>
 8010700:	a201      	add	r2, pc, #4	@ (adr r2, 8010708 <UART_SetConfig+0xb4>)
 8010702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010706:	bf00      	nop
 8010708:	080107ad 	.word	0x080107ad
 801070c:	080107dd 	.word	0x080107dd
 8010710:	080107dd 	.word	0x080107dd
 8010714:	080107dd 	.word	0x080107dd
 8010718:	080107dd 	.word	0x080107dd
 801071c:	080107dd 	.word	0x080107dd
 8010720:	080107dd 	.word	0x080107dd
 8010724:	080107dd 	.word	0x080107dd
 8010728:	080107b5 	.word	0x080107b5
 801072c:	080107dd 	.word	0x080107dd
 8010730:	080107dd 	.word	0x080107dd
 8010734:	080107dd 	.word	0x080107dd
 8010738:	080107dd 	.word	0x080107dd
 801073c:	080107dd 	.word	0x080107dd
 8010740:	080107dd 	.word	0x080107dd
 8010744:	080107dd 	.word	0x080107dd
 8010748:	080107bd 	.word	0x080107bd
 801074c:	080107dd 	.word	0x080107dd
 8010750:	080107dd 	.word	0x080107dd
 8010754:	080107dd 	.word	0x080107dd
 8010758:	080107dd 	.word	0x080107dd
 801075c:	080107dd 	.word	0x080107dd
 8010760:	080107dd 	.word	0x080107dd
 8010764:	080107dd 	.word	0x080107dd
 8010768:	080107c5 	.word	0x080107c5
 801076c:	080107dd 	.word	0x080107dd
 8010770:	080107dd 	.word	0x080107dd
 8010774:	080107dd 	.word	0x080107dd
 8010778:	080107dd 	.word	0x080107dd
 801077c:	080107dd 	.word	0x080107dd
 8010780:	080107dd 	.word	0x080107dd
 8010784:	080107dd 	.word	0x080107dd
 8010788:	080107cd 	.word	0x080107cd
 801078c:	080107dd 	.word	0x080107dd
 8010790:	080107dd 	.word	0x080107dd
 8010794:	080107dd 	.word	0x080107dd
 8010798:	080107dd 	.word	0x080107dd
 801079c:	080107dd 	.word	0x080107dd
 80107a0:	080107dd 	.word	0x080107dd
 80107a4:	080107dd 	.word	0x080107dd
 80107a8:	080107d5 	.word	0x080107d5
 80107ac:	2301      	movs	r3, #1
 80107ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107b2:	e326      	b.n	8010e02 <UART_SetConfig+0x7ae>
 80107b4:	2304      	movs	r3, #4
 80107b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107ba:	e322      	b.n	8010e02 <UART_SetConfig+0x7ae>
 80107bc:	2308      	movs	r3, #8
 80107be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107c2:	e31e      	b.n	8010e02 <UART_SetConfig+0x7ae>
 80107c4:	2310      	movs	r3, #16
 80107c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107ca:	e31a      	b.n	8010e02 <UART_SetConfig+0x7ae>
 80107cc:	2320      	movs	r3, #32
 80107ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107d2:	e316      	b.n	8010e02 <UART_SetConfig+0x7ae>
 80107d4:	2340      	movs	r3, #64	@ 0x40
 80107d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107da:	e312      	b.n	8010e02 <UART_SetConfig+0x7ae>
 80107dc:	2380      	movs	r3, #128	@ 0x80
 80107de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107e2:	e30e      	b.n	8010e02 <UART_SetConfig+0x7ae>
 80107e4:	697b      	ldr	r3, [r7, #20]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	4a69      	ldr	r2, [pc, #420]	@ (8010990 <UART_SetConfig+0x33c>)
 80107ea:	4293      	cmp	r3, r2
 80107ec:	d130      	bne.n	8010850 <UART_SetConfig+0x1fc>
 80107ee:	4b67      	ldr	r3, [pc, #412]	@ (801098c <UART_SetConfig+0x338>)
 80107f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80107f2:	f003 0307 	and.w	r3, r3, #7
 80107f6:	2b05      	cmp	r3, #5
 80107f8:	d826      	bhi.n	8010848 <UART_SetConfig+0x1f4>
 80107fa:	a201      	add	r2, pc, #4	@ (adr r2, 8010800 <UART_SetConfig+0x1ac>)
 80107fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010800:	08010819 	.word	0x08010819
 8010804:	08010821 	.word	0x08010821
 8010808:	08010829 	.word	0x08010829
 801080c:	08010831 	.word	0x08010831
 8010810:	08010839 	.word	0x08010839
 8010814:	08010841 	.word	0x08010841
 8010818:	2300      	movs	r3, #0
 801081a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801081e:	e2f0      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010820:	2304      	movs	r3, #4
 8010822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010826:	e2ec      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010828:	2308      	movs	r3, #8
 801082a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801082e:	e2e8      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010830:	2310      	movs	r3, #16
 8010832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010836:	e2e4      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010838:	2320      	movs	r3, #32
 801083a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801083e:	e2e0      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010840:	2340      	movs	r3, #64	@ 0x40
 8010842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010846:	e2dc      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010848:	2380      	movs	r3, #128	@ 0x80
 801084a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801084e:	e2d8      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010850:	697b      	ldr	r3, [r7, #20]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	4a4f      	ldr	r2, [pc, #316]	@ (8010994 <UART_SetConfig+0x340>)
 8010856:	4293      	cmp	r3, r2
 8010858:	d130      	bne.n	80108bc <UART_SetConfig+0x268>
 801085a:	4b4c      	ldr	r3, [pc, #304]	@ (801098c <UART_SetConfig+0x338>)
 801085c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801085e:	f003 0307 	and.w	r3, r3, #7
 8010862:	2b05      	cmp	r3, #5
 8010864:	d826      	bhi.n	80108b4 <UART_SetConfig+0x260>
 8010866:	a201      	add	r2, pc, #4	@ (adr r2, 801086c <UART_SetConfig+0x218>)
 8010868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801086c:	08010885 	.word	0x08010885
 8010870:	0801088d 	.word	0x0801088d
 8010874:	08010895 	.word	0x08010895
 8010878:	0801089d 	.word	0x0801089d
 801087c:	080108a5 	.word	0x080108a5
 8010880:	080108ad 	.word	0x080108ad
 8010884:	2300      	movs	r3, #0
 8010886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801088a:	e2ba      	b.n	8010e02 <UART_SetConfig+0x7ae>
 801088c:	2304      	movs	r3, #4
 801088e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010892:	e2b6      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010894:	2308      	movs	r3, #8
 8010896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801089a:	e2b2      	b.n	8010e02 <UART_SetConfig+0x7ae>
 801089c:	2310      	movs	r3, #16
 801089e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108a2:	e2ae      	b.n	8010e02 <UART_SetConfig+0x7ae>
 80108a4:	2320      	movs	r3, #32
 80108a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108aa:	e2aa      	b.n	8010e02 <UART_SetConfig+0x7ae>
 80108ac:	2340      	movs	r3, #64	@ 0x40
 80108ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108b2:	e2a6      	b.n	8010e02 <UART_SetConfig+0x7ae>
 80108b4:	2380      	movs	r3, #128	@ 0x80
 80108b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108ba:	e2a2      	b.n	8010e02 <UART_SetConfig+0x7ae>
 80108bc:	697b      	ldr	r3, [r7, #20]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	4a35      	ldr	r2, [pc, #212]	@ (8010998 <UART_SetConfig+0x344>)
 80108c2:	4293      	cmp	r3, r2
 80108c4:	d130      	bne.n	8010928 <UART_SetConfig+0x2d4>
 80108c6:	4b31      	ldr	r3, [pc, #196]	@ (801098c <UART_SetConfig+0x338>)
 80108c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80108ca:	f003 0307 	and.w	r3, r3, #7
 80108ce:	2b05      	cmp	r3, #5
 80108d0:	d826      	bhi.n	8010920 <UART_SetConfig+0x2cc>
 80108d2:	a201      	add	r2, pc, #4	@ (adr r2, 80108d8 <UART_SetConfig+0x284>)
 80108d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108d8:	080108f1 	.word	0x080108f1
 80108dc:	080108f9 	.word	0x080108f9
 80108e0:	08010901 	.word	0x08010901
 80108e4:	08010909 	.word	0x08010909
 80108e8:	08010911 	.word	0x08010911
 80108ec:	08010919 	.word	0x08010919
 80108f0:	2300      	movs	r3, #0
 80108f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108f6:	e284      	b.n	8010e02 <UART_SetConfig+0x7ae>
 80108f8:	2304      	movs	r3, #4
 80108fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108fe:	e280      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010900:	2308      	movs	r3, #8
 8010902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010906:	e27c      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010908:	2310      	movs	r3, #16
 801090a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801090e:	e278      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010910:	2320      	movs	r3, #32
 8010912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010916:	e274      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010918:	2340      	movs	r3, #64	@ 0x40
 801091a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801091e:	e270      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010920:	2380      	movs	r3, #128	@ 0x80
 8010922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010926:	e26c      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010928:	697b      	ldr	r3, [r7, #20]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	4a1b      	ldr	r2, [pc, #108]	@ (801099c <UART_SetConfig+0x348>)
 801092e:	4293      	cmp	r3, r2
 8010930:	d142      	bne.n	80109b8 <UART_SetConfig+0x364>
 8010932:	4b16      	ldr	r3, [pc, #88]	@ (801098c <UART_SetConfig+0x338>)
 8010934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010936:	f003 0307 	and.w	r3, r3, #7
 801093a:	2b05      	cmp	r3, #5
 801093c:	d838      	bhi.n	80109b0 <UART_SetConfig+0x35c>
 801093e:	a201      	add	r2, pc, #4	@ (adr r2, 8010944 <UART_SetConfig+0x2f0>)
 8010940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010944:	0801095d 	.word	0x0801095d
 8010948:	08010965 	.word	0x08010965
 801094c:	0801096d 	.word	0x0801096d
 8010950:	08010975 	.word	0x08010975
 8010954:	080109a1 	.word	0x080109a1
 8010958:	080109a9 	.word	0x080109a9
 801095c:	2300      	movs	r3, #0
 801095e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010962:	e24e      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010964:	2304      	movs	r3, #4
 8010966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801096a:	e24a      	b.n	8010e02 <UART_SetConfig+0x7ae>
 801096c:	2308      	movs	r3, #8
 801096e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010972:	e246      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010974:	2310      	movs	r3, #16
 8010976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801097a:	e242      	b.n	8010e02 <UART_SetConfig+0x7ae>
 801097c:	cfff69f3 	.word	0xcfff69f3
 8010980:	58000c00 	.word	0x58000c00
 8010984:	11fff4ff 	.word	0x11fff4ff
 8010988:	40011000 	.word	0x40011000
 801098c:	58024400 	.word	0x58024400
 8010990:	40004400 	.word	0x40004400
 8010994:	40004800 	.word	0x40004800
 8010998:	40004c00 	.word	0x40004c00
 801099c:	40005000 	.word	0x40005000
 80109a0:	2320      	movs	r3, #32
 80109a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109a6:	e22c      	b.n	8010e02 <UART_SetConfig+0x7ae>
 80109a8:	2340      	movs	r3, #64	@ 0x40
 80109aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109ae:	e228      	b.n	8010e02 <UART_SetConfig+0x7ae>
 80109b0:	2380      	movs	r3, #128	@ 0x80
 80109b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109b6:	e224      	b.n	8010e02 <UART_SetConfig+0x7ae>
 80109b8:	697b      	ldr	r3, [r7, #20]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	4ab1      	ldr	r2, [pc, #708]	@ (8010c84 <UART_SetConfig+0x630>)
 80109be:	4293      	cmp	r3, r2
 80109c0:	d176      	bne.n	8010ab0 <UART_SetConfig+0x45c>
 80109c2:	4bb1      	ldr	r3, [pc, #708]	@ (8010c88 <UART_SetConfig+0x634>)
 80109c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80109c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80109ca:	2b28      	cmp	r3, #40	@ 0x28
 80109cc:	d86c      	bhi.n	8010aa8 <UART_SetConfig+0x454>
 80109ce:	a201      	add	r2, pc, #4	@ (adr r2, 80109d4 <UART_SetConfig+0x380>)
 80109d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109d4:	08010a79 	.word	0x08010a79
 80109d8:	08010aa9 	.word	0x08010aa9
 80109dc:	08010aa9 	.word	0x08010aa9
 80109e0:	08010aa9 	.word	0x08010aa9
 80109e4:	08010aa9 	.word	0x08010aa9
 80109e8:	08010aa9 	.word	0x08010aa9
 80109ec:	08010aa9 	.word	0x08010aa9
 80109f0:	08010aa9 	.word	0x08010aa9
 80109f4:	08010a81 	.word	0x08010a81
 80109f8:	08010aa9 	.word	0x08010aa9
 80109fc:	08010aa9 	.word	0x08010aa9
 8010a00:	08010aa9 	.word	0x08010aa9
 8010a04:	08010aa9 	.word	0x08010aa9
 8010a08:	08010aa9 	.word	0x08010aa9
 8010a0c:	08010aa9 	.word	0x08010aa9
 8010a10:	08010aa9 	.word	0x08010aa9
 8010a14:	08010a89 	.word	0x08010a89
 8010a18:	08010aa9 	.word	0x08010aa9
 8010a1c:	08010aa9 	.word	0x08010aa9
 8010a20:	08010aa9 	.word	0x08010aa9
 8010a24:	08010aa9 	.word	0x08010aa9
 8010a28:	08010aa9 	.word	0x08010aa9
 8010a2c:	08010aa9 	.word	0x08010aa9
 8010a30:	08010aa9 	.word	0x08010aa9
 8010a34:	08010a91 	.word	0x08010a91
 8010a38:	08010aa9 	.word	0x08010aa9
 8010a3c:	08010aa9 	.word	0x08010aa9
 8010a40:	08010aa9 	.word	0x08010aa9
 8010a44:	08010aa9 	.word	0x08010aa9
 8010a48:	08010aa9 	.word	0x08010aa9
 8010a4c:	08010aa9 	.word	0x08010aa9
 8010a50:	08010aa9 	.word	0x08010aa9
 8010a54:	08010a99 	.word	0x08010a99
 8010a58:	08010aa9 	.word	0x08010aa9
 8010a5c:	08010aa9 	.word	0x08010aa9
 8010a60:	08010aa9 	.word	0x08010aa9
 8010a64:	08010aa9 	.word	0x08010aa9
 8010a68:	08010aa9 	.word	0x08010aa9
 8010a6c:	08010aa9 	.word	0x08010aa9
 8010a70:	08010aa9 	.word	0x08010aa9
 8010a74:	08010aa1 	.word	0x08010aa1
 8010a78:	2301      	movs	r3, #1
 8010a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a7e:	e1c0      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010a80:	2304      	movs	r3, #4
 8010a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a86:	e1bc      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010a88:	2308      	movs	r3, #8
 8010a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a8e:	e1b8      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010a90:	2310      	movs	r3, #16
 8010a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a96:	e1b4      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010a98:	2320      	movs	r3, #32
 8010a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a9e:	e1b0      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010aa0:	2340      	movs	r3, #64	@ 0x40
 8010aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010aa6:	e1ac      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010aa8:	2380      	movs	r3, #128	@ 0x80
 8010aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010aae:	e1a8      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010ab0:	697b      	ldr	r3, [r7, #20]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	4a75      	ldr	r2, [pc, #468]	@ (8010c8c <UART_SetConfig+0x638>)
 8010ab6:	4293      	cmp	r3, r2
 8010ab8:	d130      	bne.n	8010b1c <UART_SetConfig+0x4c8>
 8010aba:	4b73      	ldr	r3, [pc, #460]	@ (8010c88 <UART_SetConfig+0x634>)
 8010abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010abe:	f003 0307 	and.w	r3, r3, #7
 8010ac2:	2b05      	cmp	r3, #5
 8010ac4:	d826      	bhi.n	8010b14 <UART_SetConfig+0x4c0>
 8010ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8010acc <UART_SetConfig+0x478>)
 8010ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010acc:	08010ae5 	.word	0x08010ae5
 8010ad0:	08010aed 	.word	0x08010aed
 8010ad4:	08010af5 	.word	0x08010af5
 8010ad8:	08010afd 	.word	0x08010afd
 8010adc:	08010b05 	.word	0x08010b05
 8010ae0:	08010b0d 	.word	0x08010b0d
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010aea:	e18a      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010aec:	2304      	movs	r3, #4
 8010aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010af2:	e186      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010af4:	2308      	movs	r3, #8
 8010af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010afa:	e182      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010afc:	2310      	movs	r3, #16
 8010afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b02:	e17e      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010b04:	2320      	movs	r3, #32
 8010b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b0a:	e17a      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010b0c:	2340      	movs	r3, #64	@ 0x40
 8010b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b12:	e176      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010b14:	2380      	movs	r3, #128	@ 0x80
 8010b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b1a:	e172      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010b1c:	697b      	ldr	r3, [r7, #20]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	4a5b      	ldr	r2, [pc, #364]	@ (8010c90 <UART_SetConfig+0x63c>)
 8010b22:	4293      	cmp	r3, r2
 8010b24:	d130      	bne.n	8010b88 <UART_SetConfig+0x534>
 8010b26:	4b58      	ldr	r3, [pc, #352]	@ (8010c88 <UART_SetConfig+0x634>)
 8010b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b2a:	f003 0307 	and.w	r3, r3, #7
 8010b2e:	2b05      	cmp	r3, #5
 8010b30:	d826      	bhi.n	8010b80 <UART_SetConfig+0x52c>
 8010b32:	a201      	add	r2, pc, #4	@ (adr r2, 8010b38 <UART_SetConfig+0x4e4>)
 8010b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b38:	08010b51 	.word	0x08010b51
 8010b3c:	08010b59 	.word	0x08010b59
 8010b40:	08010b61 	.word	0x08010b61
 8010b44:	08010b69 	.word	0x08010b69
 8010b48:	08010b71 	.word	0x08010b71
 8010b4c:	08010b79 	.word	0x08010b79
 8010b50:	2300      	movs	r3, #0
 8010b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b56:	e154      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010b58:	2304      	movs	r3, #4
 8010b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b5e:	e150      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010b60:	2308      	movs	r3, #8
 8010b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b66:	e14c      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010b68:	2310      	movs	r3, #16
 8010b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b6e:	e148      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010b70:	2320      	movs	r3, #32
 8010b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b76:	e144      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010b78:	2340      	movs	r3, #64	@ 0x40
 8010b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b7e:	e140      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010b80:	2380      	movs	r3, #128	@ 0x80
 8010b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b86:	e13c      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010b88:	697b      	ldr	r3, [r7, #20]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	4a41      	ldr	r2, [pc, #260]	@ (8010c94 <UART_SetConfig+0x640>)
 8010b8e:	4293      	cmp	r3, r2
 8010b90:	f040 8082 	bne.w	8010c98 <UART_SetConfig+0x644>
 8010b94:	4b3c      	ldr	r3, [pc, #240]	@ (8010c88 <UART_SetConfig+0x634>)
 8010b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010b9c:	2b28      	cmp	r3, #40	@ 0x28
 8010b9e:	d86d      	bhi.n	8010c7c <UART_SetConfig+0x628>
 8010ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8010ba8 <UART_SetConfig+0x554>)
 8010ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ba6:	bf00      	nop
 8010ba8:	08010c4d 	.word	0x08010c4d
 8010bac:	08010c7d 	.word	0x08010c7d
 8010bb0:	08010c7d 	.word	0x08010c7d
 8010bb4:	08010c7d 	.word	0x08010c7d
 8010bb8:	08010c7d 	.word	0x08010c7d
 8010bbc:	08010c7d 	.word	0x08010c7d
 8010bc0:	08010c7d 	.word	0x08010c7d
 8010bc4:	08010c7d 	.word	0x08010c7d
 8010bc8:	08010c55 	.word	0x08010c55
 8010bcc:	08010c7d 	.word	0x08010c7d
 8010bd0:	08010c7d 	.word	0x08010c7d
 8010bd4:	08010c7d 	.word	0x08010c7d
 8010bd8:	08010c7d 	.word	0x08010c7d
 8010bdc:	08010c7d 	.word	0x08010c7d
 8010be0:	08010c7d 	.word	0x08010c7d
 8010be4:	08010c7d 	.word	0x08010c7d
 8010be8:	08010c5d 	.word	0x08010c5d
 8010bec:	08010c7d 	.word	0x08010c7d
 8010bf0:	08010c7d 	.word	0x08010c7d
 8010bf4:	08010c7d 	.word	0x08010c7d
 8010bf8:	08010c7d 	.word	0x08010c7d
 8010bfc:	08010c7d 	.word	0x08010c7d
 8010c00:	08010c7d 	.word	0x08010c7d
 8010c04:	08010c7d 	.word	0x08010c7d
 8010c08:	08010c65 	.word	0x08010c65
 8010c0c:	08010c7d 	.word	0x08010c7d
 8010c10:	08010c7d 	.word	0x08010c7d
 8010c14:	08010c7d 	.word	0x08010c7d
 8010c18:	08010c7d 	.word	0x08010c7d
 8010c1c:	08010c7d 	.word	0x08010c7d
 8010c20:	08010c7d 	.word	0x08010c7d
 8010c24:	08010c7d 	.word	0x08010c7d
 8010c28:	08010c6d 	.word	0x08010c6d
 8010c2c:	08010c7d 	.word	0x08010c7d
 8010c30:	08010c7d 	.word	0x08010c7d
 8010c34:	08010c7d 	.word	0x08010c7d
 8010c38:	08010c7d 	.word	0x08010c7d
 8010c3c:	08010c7d 	.word	0x08010c7d
 8010c40:	08010c7d 	.word	0x08010c7d
 8010c44:	08010c7d 	.word	0x08010c7d
 8010c48:	08010c75 	.word	0x08010c75
 8010c4c:	2301      	movs	r3, #1
 8010c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c52:	e0d6      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010c54:	2304      	movs	r3, #4
 8010c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c5a:	e0d2      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010c5c:	2308      	movs	r3, #8
 8010c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c62:	e0ce      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010c64:	2310      	movs	r3, #16
 8010c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c6a:	e0ca      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010c6c:	2320      	movs	r3, #32
 8010c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c72:	e0c6      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010c74:	2340      	movs	r3, #64	@ 0x40
 8010c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c7a:	e0c2      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010c7c:	2380      	movs	r3, #128	@ 0x80
 8010c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c82:	e0be      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010c84:	40011400 	.word	0x40011400
 8010c88:	58024400 	.word	0x58024400
 8010c8c:	40007800 	.word	0x40007800
 8010c90:	40007c00 	.word	0x40007c00
 8010c94:	40011800 	.word	0x40011800
 8010c98:	697b      	ldr	r3, [r7, #20]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	4aad      	ldr	r2, [pc, #692]	@ (8010f54 <UART_SetConfig+0x900>)
 8010c9e:	4293      	cmp	r3, r2
 8010ca0:	d176      	bne.n	8010d90 <UART_SetConfig+0x73c>
 8010ca2:	4bad      	ldr	r3, [pc, #692]	@ (8010f58 <UART_SetConfig+0x904>)
 8010ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010ca6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010caa:	2b28      	cmp	r3, #40	@ 0x28
 8010cac:	d86c      	bhi.n	8010d88 <UART_SetConfig+0x734>
 8010cae:	a201      	add	r2, pc, #4	@ (adr r2, 8010cb4 <UART_SetConfig+0x660>)
 8010cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cb4:	08010d59 	.word	0x08010d59
 8010cb8:	08010d89 	.word	0x08010d89
 8010cbc:	08010d89 	.word	0x08010d89
 8010cc0:	08010d89 	.word	0x08010d89
 8010cc4:	08010d89 	.word	0x08010d89
 8010cc8:	08010d89 	.word	0x08010d89
 8010ccc:	08010d89 	.word	0x08010d89
 8010cd0:	08010d89 	.word	0x08010d89
 8010cd4:	08010d61 	.word	0x08010d61
 8010cd8:	08010d89 	.word	0x08010d89
 8010cdc:	08010d89 	.word	0x08010d89
 8010ce0:	08010d89 	.word	0x08010d89
 8010ce4:	08010d89 	.word	0x08010d89
 8010ce8:	08010d89 	.word	0x08010d89
 8010cec:	08010d89 	.word	0x08010d89
 8010cf0:	08010d89 	.word	0x08010d89
 8010cf4:	08010d69 	.word	0x08010d69
 8010cf8:	08010d89 	.word	0x08010d89
 8010cfc:	08010d89 	.word	0x08010d89
 8010d00:	08010d89 	.word	0x08010d89
 8010d04:	08010d89 	.word	0x08010d89
 8010d08:	08010d89 	.word	0x08010d89
 8010d0c:	08010d89 	.word	0x08010d89
 8010d10:	08010d89 	.word	0x08010d89
 8010d14:	08010d71 	.word	0x08010d71
 8010d18:	08010d89 	.word	0x08010d89
 8010d1c:	08010d89 	.word	0x08010d89
 8010d20:	08010d89 	.word	0x08010d89
 8010d24:	08010d89 	.word	0x08010d89
 8010d28:	08010d89 	.word	0x08010d89
 8010d2c:	08010d89 	.word	0x08010d89
 8010d30:	08010d89 	.word	0x08010d89
 8010d34:	08010d79 	.word	0x08010d79
 8010d38:	08010d89 	.word	0x08010d89
 8010d3c:	08010d89 	.word	0x08010d89
 8010d40:	08010d89 	.word	0x08010d89
 8010d44:	08010d89 	.word	0x08010d89
 8010d48:	08010d89 	.word	0x08010d89
 8010d4c:	08010d89 	.word	0x08010d89
 8010d50:	08010d89 	.word	0x08010d89
 8010d54:	08010d81 	.word	0x08010d81
 8010d58:	2301      	movs	r3, #1
 8010d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d5e:	e050      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010d60:	2304      	movs	r3, #4
 8010d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d66:	e04c      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010d68:	2308      	movs	r3, #8
 8010d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d6e:	e048      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010d70:	2310      	movs	r3, #16
 8010d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d76:	e044      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010d78:	2320      	movs	r3, #32
 8010d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d7e:	e040      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010d80:	2340      	movs	r3, #64	@ 0x40
 8010d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d86:	e03c      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010d88:	2380      	movs	r3, #128	@ 0x80
 8010d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d8e:	e038      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010d90:	697b      	ldr	r3, [r7, #20]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	4a71      	ldr	r2, [pc, #452]	@ (8010f5c <UART_SetConfig+0x908>)
 8010d96:	4293      	cmp	r3, r2
 8010d98:	d130      	bne.n	8010dfc <UART_SetConfig+0x7a8>
 8010d9a:	4b6f      	ldr	r3, [pc, #444]	@ (8010f58 <UART_SetConfig+0x904>)
 8010d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010d9e:	f003 0307 	and.w	r3, r3, #7
 8010da2:	2b05      	cmp	r3, #5
 8010da4:	d826      	bhi.n	8010df4 <UART_SetConfig+0x7a0>
 8010da6:	a201      	add	r2, pc, #4	@ (adr r2, 8010dac <UART_SetConfig+0x758>)
 8010da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dac:	08010dc5 	.word	0x08010dc5
 8010db0:	08010dcd 	.word	0x08010dcd
 8010db4:	08010dd5 	.word	0x08010dd5
 8010db8:	08010ddd 	.word	0x08010ddd
 8010dbc:	08010de5 	.word	0x08010de5
 8010dc0:	08010ded 	.word	0x08010ded
 8010dc4:	2302      	movs	r3, #2
 8010dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dca:	e01a      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010dcc:	2304      	movs	r3, #4
 8010dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dd2:	e016      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010dd4:	2308      	movs	r3, #8
 8010dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dda:	e012      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010ddc:	2310      	movs	r3, #16
 8010dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010de2:	e00e      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010de4:	2320      	movs	r3, #32
 8010de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dea:	e00a      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010dec:	2340      	movs	r3, #64	@ 0x40
 8010dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010df2:	e006      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010df4:	2380      	movs	r3, #128	@ 0x80
 8010df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dfa:	e002      	b.n	8010e02 <UART_SetConfig+0x7ae>
 8010dfc:	2380      	movs	r3, #128	@ 0x80
 8010dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010e02:	697b      	ldr	r3, [r7, #20]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	4a55      	ldr	r2, [pc, #340]	@ (8010f5c <UART_SetConfig+0x908>)
 8010e08:	4293      	cmp	r3, r2
 8010e0a:	f040 80f8 	bne.w	8010ffe <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010e0e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010e12:	2b20      	cmp	r3, #32
 8010e14:	dc46      	bgt.n	8010ea4 <UART_SetConfig+0x850>
 8010e16:	2b02      	cmp	r3, #2
 8010e18:	db75      	blt.n	8010f06 <UART_SetConfig+0x8b2>
 8010e1a:	3b02      	subs	r3, #2
 8010e1c:	2b1e      	cmp	r3, #30
 8010e1e:	d872      	bhi.n	8010f06 <UART_SetConfig+0x8b2>
 8010e20:	a201      	add	r2, pc, #4	@ (adr r2, 8010e28 <UART_SetConfig+0x7d4>)
 8010e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e26:	bf00      	nop
 8010e28:	08010eab 	.word	0x08010eab
 8010e2c:	08010f07 	.word	0x08010f07
 8010e30:	08010eb3 	.word	0x08010eb3
 8010e34:	08010f07 	.word	0x08010f07
 8010e38:	08010f07 	.word	0x08010f07
 8010e3c:	08010f07 	.word	0x08010f07
 8010e40:	08010ec3 	.word	0x08010ec3
 8010e44:	08010f07 	.word	0x08010f07
 8010e48:	08010f07 	.word	0x08010f07
 8010e4c:	08010f07 	.word	0x08010f07
 8010e50:	08010f07 	.word	0x08010f07
 8010e54:	08010f07 	.word	0x08010f07
 8010e58:	08010f07 	.word	0x08010f07
 8010e5c:	08010f07 	.word	0x08010f07
 8010e60:	08010ed3 	.word	0x08010ed3
 8010e64:	08010f07 	.word	0x08010f07
 8010e68:	08010f07 	.word	0x08010f07
 8010e6c:	08010f07 	.word	0x08010f07
 8010e70:	08010f07 	.word	0x08010f07
 8010e74:	08010f07 	.word	0x08010f07
 8010e78:	08010f07 	.word	0x08010f07
 8010e7c:	08010f07 	.word	0x08010f07
 8010e80:	08010f07 	.word	0x08010f07
 8010e84:	08010f07 	.word	0x08010f07
 8010e88:	08010f07 	.word	0x08010f07
 8010e8c:	08010f07 	.word	0x08010f07
 8010e90:	08010f07 	.word	0x08010f07
 8010e94:	08010f07 	.word	0x08010f07
 8010e98:	08010f07 	.word	0x08010f07
 8010e9c:	08010f07 	.word	0x08010f07
 8010ea0:	08010ef9 	.word	0x08010ef9
 8010ea4:	2b40      	cmp	r3, #64	@ 0x40
 8010ea6:	d02a      	beq.n	8010efe <UART_SetConfig+0x8aa>
 8010ea8:	e02d      	b.n	8010f06 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010eaa:	f7fb fd79 	bl	800c9a0 <HAL_RCCEx_GetD3PCLK1Freq>
 8010eae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010eb0:	e02f      	b.n	8010f12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010eb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	f7fb fd88 	bl	800c9cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010ec0:	e027      	b.n	8010f12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010ec2:	f107 0318 	add.w	r3, r7, #24
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f7fb fed4 	bl	800cc74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010ecc:	69fb      	ldr	r3, [r7, #28]
 8010ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010ed0:	e01f      	b.n	8010f12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010ed2:	4b21      	ldr	r3, [pc, #132]	@ (8010f58 <UART_SetConfig+0x904>)
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	f003 0320 	and.w	r3, r3, #32
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d009      	beq.n	8010ef2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010ede:	4b1e      	ldr	r3, [pc, #120]	@ (8010f58 <UART_SetConfig+0x904>)
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	08db      	lsrs	r3, r3, #3
 8010ee4:	f003 0303 	and.w	r3, r3, #3
 8010ee8:	4a1d      	ldr	r2, [pc, #116]	@ (8010f60 <UART_SetConfig+0x90c>)
 8010eea:	fa22 f303 	lsr.w	r3, r2, r3
 8010eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010ef0:	e00f      	b.n	8010f12 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8010f60 <UART_SetConfig+0x90c>)
 8010ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010ef6:	e00c      	b.n	8010f12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8010f64 <UART_SetConfig+0x910>)
 8010efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010efc:	e009      	b.n	8010f12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010efe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010f04:	e005      	b.n	8010f12 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010f06:	2300      	movs	r3, #0
 8010f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010f0a:	2301      	movs	r3, #1
 8010f0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010f10:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010f12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	f000 81ee 	beq.w	80112f6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010f1a:	697b      	ldr	r3, [r7, #20]
 8010f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f1e:	4a12      	ldr	r2, [pc, #72]	@ (8010f68 <UART_SetConfig+0x914>)
 8010f20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f24:	461a      	mov	r2, r3
 8010f26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f28:	fbb3 f3f2 	udiv	r3, r3, r2
 8010f2c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010f2e:	697b      	ldr	r3, [r7, #20]
 8010f30:	685a      	ldr	r2, [r3, #4]
 8010f32:	4613      	mov	r3, r2
 8010f34:	005b      	lsls	r3, r3, #1
 8010f36:	4413      	add	r3, r2
 8010f38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010f3a:	429a      	cmp	r2, r3
 8010f3c:	d305      	bcc.n	8010f4a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010f3e:	697b      	ldr	r3, [r7, #20]
 8010f40:	685b      	ldr	r3, [r3, #4]
 8010f42:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010f44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010f46:	429a      	cmp	r2, r3
 8010f48:	d910      	bls.n	8010f6c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8010f4a:	2301      	movs	r3, #1
 8010f4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010f50:	e1d1      	b.n	80112f6 <UART_SetConfig+0xca2>
 8010f52:	bf00      	nop
 8010f54:	40011c00 	.word	0x40011c00
 8010f58:	58024400 	.word	0x58024400
 8010f5c:	58000c00 	.word	0x58000c00
 8010f60:	03d09000 	.word	0x03d09000
 8010f64:	003d0900 	.word	0x003d0900
 8010f68:	08019d6c 	.word	0x08019d6c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010f6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f6e:	2200      	movs	r2, #0
 8010f70:	60bb      	str	r3, [r7, #8]
 8010f72:	60fa      	str	r2, [r7, #12]
 8010f74:	697b      	ldr	r3, [r7, #20]
 8010f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f78:	4ac0      	ldr	r2, [pc, #768]	@ (801127c <UART_SetConfig+0xc28>)
 8010f7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f7e:	b29b      	uxth	r3, r3
 8010f80:	2200      	movs	r2, #0
 8010f82:	603b      	str	r3, [r7, #0]
 8010f84:	607a      	str	r2, [r7, #4]
 8010f86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010f8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010f8e:	f7ef fc1b 	bl	80007c8 <__aeabi_uldivmod>
 8010f92:	4602      	mov	r2, r0
 8010f94:	460b      	mov	r3, r1
 8010f96:	4610      	mov	r0, r2
 8010f98:	4619      	mov	r1, r3
 8010f9a:	f04f 0200 	mov.w	r2, #0
 8010f9e:	f04f 0300 	mov.w	r3, #0
 8010fa2:	020b      	lsls	r3, r1, #8
 8010fa4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010fa8:	0202      	lsls	r2, r0, #8
 8010faa:	6979      	ldr	r1, [r7, #20]
 8010fac:	6849      	ldr	r1, [r1, #4]
 8010fae:	0849      	lsrs	r1, r1, #1
 8010fb0:	2000      	movs	r0, #0
 8010fb2:	460c      	mov	r4, r1
 8010fb4:	4605      	mov	r5, r0
 8010fb6:	eb12 0804 	adds.w	r8, r2, r4
 8010fba:	eb43 0905 	adc.w	r9, r3, r5
 8010fbe:	697b      	ldr	r3, [r7, #20]
 8010fc0:	685b      	ldr	r3, [r3, #4]
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	469a      	mov	sl, r3
 8010fc6:	4693      	mov	fp, r2
 8010fc8:	4652      	mov	r2, sl
 8010fca:	465b      	mov	r3, fp
 8010fcc:	4640      	mov	r0, r8
 8010fce:	4649      	mov	r1, r9
 8010fd0:	f7ef fbfa 	bl	80007c8 <__aeabi_uldivmod>
 8010fd4:	4602      	mov	r2, r0
 8010fd6:	460b      	mov	r3, r1
 8010fd8:	4613      	mov	r3, r2
 8010fda:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010fe2:	d308      	bcc.n	8010ff6 <UART_SetConfig+0x9a2>
 8010fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fe6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010fea:	d204      	bcs.n	8010ff6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8010fec:	697b      	ldr	r3, [r7, #20]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010ff2:	60da      	str	r2, [r3, #12]
 8010ff4:	e17f      	b.n	80112f6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8010ff6:	2301      	movs	r3, #1
 8010ff8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010ffc:	e17b      	b.n	80112f6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010ffe:	697b      	ldr	r3, [r7, #20]
 8011000:	69db      	ldr	r3, [r3, #28]
 8011002:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011006:	f040 80bd 	bne.w	8011184 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 801100a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801100e:	2b20      	cmp	r3, #32
 8011010:	dc48      	bgt.n	80110a4 <UART_SetConfig+0xa50>
 8011012:	2b00      	cmp	r3, #0
 8011014:	db7b      	blt.n	801110e <UART_SetConfig+0xaba>
 8011016:	2b20      	cmp	r3, #32
 8011018:	d879      	bhi.n	801110e <UART_SetConfig+0xaba>
 801101a:	a201      	add	r2, pc, #4	@ (adr r2, 8011020 <UART_SetConfig+0x9cc>)
 801101c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011020:	080110ab 	.word	0x080110ab
 8011024:	080110b3 	.word	0x080110b3
 8011028:	0801110f 	.word	0x0801110f
 801102c:	0801110f 	.word	0x0801110f
 8011030:	080110bb 	.word	0x080110bb
 8011034:	0801110f 	.word	0x0801110f
 8011038:	0801110f 	.word	0x0801110f
 801103c:	0801110f 	.word	0x0801110f
 8011040:	080110cb 	.word	0x080110cb
 8011044:	0801110f 	.word	0x0801110f
 8011048:	0801110f 	.word	0x0801110f
 801104c:	0801110f 	.word	0x0801110f
 8011050:	0801110f 	.word	0x0801110f
 8011054:	0801110f 	.word	0x0801110f
 8011058:	0801110f 	.word	0x0801110f
 801105c:	0801110f 	.word	0x0801110f
 8011060:	080110db 	.word	0x080110db
 8011064:	0801110f 	.word	0x0801110f
 8011068:	0801110f 	.word	0x0801110f
 801106c:	0801110f 	.word	0x0801110f
 8011070:	0801110f 	.word	0x0801110f
 8011074:	0801110f 	.word	0x0801110f
 8011078:	0801110f 	.word	0x0801110f
 801107c:	0801110f 	.word	0x0801110f
 8011080:	0801110f 	.word	0x0801110f
 8011084:	0801110f 	.word	0x0801110f
 8011088:	0801110f 	.word	0x0801110f
 801108c:	0801110f 	.word	0x0801110f
 8011090:	0801110f 	.word	0x0801110f
 8011094:	0801110f 	.word	0x0801110f
 8011098:	0801110f 	.word	0x0801110f
 801109c:	0801110f 	.word	0x0801110f
 80110a0:	08011101 	.word	0x08011101
 80110a4:	2b40      	cmp	r3, #64	@ 0x40
 80110a6:	d02e      	beq.n	8011106 <UART_SetConfig+0xab2>
 80110a8:	e031      	b.n	801110e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80110aa:	f7fa fa4d 	bl	800b548 <HAL_RCC_GetPCLK1Freq>
 80110ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80110b0:	e033      	b.n	801111a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80110b2:	f7fa fa5f 	bl	800b574 <HAL_RCC_GetPCLK2Freq>
 80110b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80110b8:	e02f      	b.n	801111a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80110ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80110be:	4618      	mov	r0, r3
 80110c0:	f7fb fc84 	bl	800c9cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80110c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80110c8:	e027      	b.n	801111a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80110ca:	f107 0318 	add.w	r3, r7, #24
 80110ce:	4618      	mov	r0, r3
 80110d0:	f7fb fdd0 	bl	800cc74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80110d4:	69fb      	ldr	r3, [r7, #28]
 80110d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80110d8:	e01f      	b.n	801111a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80110da:	4b69      	ldr	r3, [pc, #420]	@ (8011280 <UART_SetConfig+0xc2c>)
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	f003 0320 	and.w	r3, r3, #32
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d009      	beq.n	80110fa <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80110e6:	4b66      	ldr	r3, [pc, #408]	@ (8011280 <UART_SetConfig+0xc2c>)
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	08db      	lsrs	r3, r3, #3
 80110ec:	f003 0303 	and.w	r3, r3, #3
 80110f0:	4a64      	ldr	r2, [pc, #400]	@ (8011284 <UART_SetConfig+0xc30>)
 80110f2:	fa22 f303 	lsr.w	r3, r2, r3
 80110f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80110f8:	e00f      	b.n	801111a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80110fa:	4b62      	ldr	r3, [pc, #392]	@ (8011284 <UART_SetConfig+0xc30>)
 80110fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80110fe:	e00c      	b.n	801111a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011100:	4b61      	ldr	r3, [pc, #388]	@ (8011288 <UART_SetConfig+0xc34>)
 8011102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011104:	e009      	b.n	801111a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011106:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801110a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801110c:	e005      	b.n	801111a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 801110e:	2300      	movs	r3, #0
 8011110:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8011112:	2301      	movs	r3, #1
 8011114:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8011118:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801111a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801111c:	2b00      	cmp	r3, #0
 801111e:	f000 80ea 	beq.w	80112f6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011122:	697b      	ldr	r3, [r7, #20]
 8011124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011126:	4a55      	ldr	r2, [pc, #340]	@ (801127c <UART_SetConfig+0xc28>)
 8011128:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801112c:	461a      	mov	r2, r3
 801112e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011130:	fbb3 f3f2 	udiv	r3, r3, r2
 8011134:	005a      	lsls	r2, r3, #1
 8011136:	697b      	ldr	r3, [r7, #20]
 8011138:	685b      	ldr	r3, [r3, #4]
 801113a:	085b      	lsrs	r3, r3, #1
 801113c:	441a      	add	r2, r3
 801113e:	697b      	ldr	r3, [r7, #20]
 8011140:	685b      	ldr	r3, [r3, #4]
 8011142:	fbb2 f3f3 	udiv	r3, r2, r3
 8011146:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801114a:	2b0f      	cmp	r3, #15
 801114c:	d916      	bls.n	801117c <UART_SetConfig+0xb28>
 801114e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011154:	d212      	bcs.n	801117c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011158:	b29b      	uxth	r3, r3
 801115a:	f023 030f 	bic.w	r3, r3, #15
 801115e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011162:	085b      	lsrs	r3, r3, #1
 8011164:	b29b      	uxth	r3, r3
 8011166:	f003 0307 	and.w	r3, r3, #7
 801116a:	b29a      	uxth	r2, r3
 801116c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801116e:	4313      	orrs	r3, r2
 8011170:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8011172:	697b      	ldr	r3, [r7, #20]
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8011178:	60da      	str	r2, [r3, #12]
 801117a:	e0bc      	b.n	80112f6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 801117c:	2301      	movs	r3, #1
 801117e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8011182:	e0b8      	b.n	80112f6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011184:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8011188:	2b20      	cmp	r3, #32
 801118a:	dc4b      	bgt.n	8011224 <UART_SetConfig+0xbd0>
 801118c:	2b00      	cmp	r3, #0
 801118e:	f2c0 8087 	blt.w	80112a0 <UART_SetConfig+0xc4c>
 8011192:	2b20      	cmp	r3, #32
 8011194:	f200 8084 	bhi.w	80112a0 <UART_SetConfig+0xc4c>
 8011198:	a201      	add	r2, pc, #4	@ (adr r2, 80111a0 <UART_SetConfig+0xb4c>)
 801119a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801119e:	bf00      	nop
 80111a0:	0801122b 	.word	0x0801122b
 80111a4:	08011233 	.word	0x08011233
 80111a8:	080112a1 	.word	0x080112a1
 80111ac:	080112a1 	.word	0x080112a1
 80111b0:	0801123b 	.word	0x0801123b
 80111b4:	080112a1 	.word	0x080112a1
 80111b8:	080112a1 	.word	0x080112a1
 80111bc:	080112a1 	.word	0x080112a1
 80111c0:	0801124b 	.word	0x0801124b
 80111c4:	080112a1 	.word	0x080112a1
 80111c8:	080112a1 	.word	0x080112a1
 80111cc:	080112a1 	.word	0x080112a1
 80111d0:	080112a1 	.word	0x080112a1
 80111d4:	080112a1 	.word	0x080112a1
 80111d8:	080112a1 	.word	0x080112a1
 80111dc:	080112a1 	.word	0x080112a1
 80111e0:	0801125b 	.word	0x0801125b
 80111e4:	080112a1 	.word	0x080112a1
 80111e8:	080112a1 	.word	0x080112a1
 80111ec:	080112a1 	.word	0x080112a1
 80111f0:	080112a1 	.word	0x080112a1
 80111f4:	080112a1 	.word	0x080112a1
 80111f8:	080112a1 	.word	0x080112a1
 80111fc:	080112a1 	.word	0x080112a1
 8011200:	080112a1 	.word	0x080112a1
 8011204:	080112a1 	.word	0x080112a1
 8011208:	080112a1 	.word	0x080112a1
 801120c:	080112a1 	.word	0x080112a1
 8011210:	080112a1 	.word	0x080112a1
 8011214:	080112a1 	.word	0x080112a1
 8011218:	080112a1 	.word	0x080112a1
 801121c:	080112a1 	.word	0x080112a1
 8011220:	08011293 	.word	0x08011293
 8011224:	2b40      	cmp	r3, #64	@ 0x40
 8011226:	d037      	beq.n	8011298 <UART_SetConfig+0xc44>
 8011228:	e03a      	b.n	80112a0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801122a:	f7fa f98d 	bl	800b548 <HAL_RCC_GetPCLK1Freq>
 801122e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011230:	e03c      	b.n	80112ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011232:	f7fa f99f 	bl	800b574 <HAL_RCC_GetPCLK2Freq>
 8011236:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011238:	e038      	b.n	80112ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801123a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801123e:	4618      	mov	r0, r3
 8011240:	f7fb fbc4 	bl	800c9cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011248:	e030      	b.n	80112ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801124a:	f107 0318 	add.w	r3, r7, #24
 801124e:	4618      	mov	r0, r3
 8011250:	f7fb fd10 	bl	800cc74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011254:	69fb      	ldr	r3, [r7, #28]
 8011256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011258:	e028      	b.n	80112ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801125a:	4b09      	ldr	r3, [pc, #36]	@ (8011280 <UART_SetConfig+0xc2c>)
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	f003 0320 	and.w	r3, r3, #32
 8011262:	2b00      	cmp	r3, #0
 8011264:	d012      	beq.n	801128c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011266:	4b06      	ldr	r3, [pc, #24]	@ (8011280 <UART_SetConfig+0xc2c>)
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	08db      	lsrs	r3, r3, #3
 801126c:	f003 0303 	and.w	r3, r3, #3
 8011270:	4a04      	ldr	r2, [pc, #16]	@ (8011284 <UART_SetConfig+0xc30>)
 8011272:	fa22 f303 	lsr.w	r3, r2, r3
 8011276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011278:	e018      	b.n	80112ac <UART_SetConfig+0xc58>
 801127a:	bf00      	nop
 801127c:	08019d6c 	.word	0x08019d6c
 8011280:	58024400 	.word	0x58024400
 8011284:	03d09000 	.word	0x03d09000
 8011288:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 801128c:	4b24      	ldr	r3, [pc, #144]	@ (8011320 <UART_SetConfig+0xccc>)
 801128e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011290:	e00c      	b.n	80112ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011292:	4b24      	ldr	r3, [pc, #144]	@ (8011324 <UART_SetConfig+0xcd0>)
 8011294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011296:	e009      	b.n	80112ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011298:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801129c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801129e:	e005      	b.n	80112ac <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80112a0:	2300      	movs	r3, #0
 80112a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80112a4:	2301      	movs	r3, #1
 80112a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80112aa:	bf00      	nop
    }

    if (pclk != 0U)
 80112ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d021      	beq.n	80112f6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80112b2:	697b      	ldr	r3, [r7, #20]
 80112b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112b6:	4a1c      	ldr	r2, [pc, #112]	@ (8011328 <UART_SetConfig+0xcd4>)
 80112b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80112bc:	461a      	mov	r2, r3
 80112be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80112c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80112c4:	697b      	ldr	r3, [r7, #20]
 80112c6:	685b      	ldr	r3, [r3, #4]
 80112c8:	085b      	lsrs	r3, r3, #1
 80112ca:	441a      	add	r2, r3
 80112cc:	697b      	ldr	r3, [r7, #20]
 80112ce:	685b      	ldr	r3, [r3, #4]
 80112d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80112d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80112d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112d8:	2b0f      	cmp	r3, #15
 80112da:	d909      	bls.n	80112f0 <UART_SetConfig+0xc9c>
 80112dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80112e2:	d205      	bcs.n	80112f0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80112e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112e6:	b29a      	uxth	r2, r3
 80112e8:	697b      	ldr	r3, [r7, #20]
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	60da      	str	r2, [r3, #12]
 80112ee:	e002      	b.n	80112f6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80112f0:	2301      	movs	r3, #1
 80112f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80112f6:	697b      	ldr	r3, [r7, #20]
 80112f8:	2201      	movs	r2, #1
 80112fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80112fe:	697b      	ldr	r3, [r7, #20]
 8011300:	2201      	movs	r2, #1
 8011302:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011306:	697b      	ldr	r3, [r7, #20]
 8011308:	2200      	movs	r2, #0
 801130a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801130c:	697b      	ldr	r3, [r7, #20]
 801130e:	2200      	movs	r2, #0
 8011310:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8011312:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8011316:	4618      	mov	r0, r3
 8011318:	3748      	adds	r7, #72	@ 0x48
 801131a:	46bd      	mov	sp, r7
 801131c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011320:	03d09000 	.word	0x03d09000
 8011324:	003d0900 	.word	0x003d0900
 8011328:	08019d6c 	.word	0x08019d6c

0801132c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801132c:	b480      	push	{r7}
 801132e:	b083      	sub	sp, #12
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011338:	f003 0308 	and.w	r3, r3, #8
 801133c:	2b00      	cmp	r3, #0
 801133e:	d00a      	beq.n	8011356 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	685b      	ldr	r3, [r3, #4]
 8011346:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	430a      	orrs	r2, r1
 8011354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801135a:	f003 0301 	and.w	r3, r3, #1
 801135e:	2b00      	cmp	r3, #0
 8011360:	d00a      	beq.n	8011378 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	685b      	ldr	r3, [r3, #4]
 8011368:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	430a      	orrs	r2, r1
 8011376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801137c:	f003 0302 	and.w	r3, r3, #2
 8011380:	2b00      	cmp	r3, #0
 8011382:	d00a      	beq.n	801139a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	685b      	ldr	r3, [r3, #4]
 801138a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	430a      	orrs	r2, r1
 8011398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801139e:	f003 0304 	and.w	r3, r3, #4
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d00a      	beq.n	80113bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	685b      	ldr	r3, [r3, #4]
 80113ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	430a      	orrs	r2, r1
 80113ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113c0:	f003 0310 	and.w	r3, r3, #16
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d00a      	beq.n	80113de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	689b      	ldr	r3, [r3, #8]
 80113ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	430a      	orrs	r2, r1
 80113dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113e2:	f003 0320 	and.w	r3, r3, #32
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d00a      	beq.n	8011400 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	689b      	ldr	r3, [r3, #8]
 80113f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	430a      	orrs	r2, r1
 80113fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011408:	2b00      	cmp	r3, #0
 801140a:	d01a      	beq.n	8011442 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	685b      	ldr	r3, [r3, #4]
 8011412:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	430a      	orrs	r2, r1
 8011420:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011426:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801142a:	d10a      	bne.n	8011442 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	685b      	ldr	r3, [r3, #4]
 8011432:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	430a      	orrs	r2, r1
 8011440:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801144a:	2b00      	cmp	r3, #0
 801144c:	d00a      	beq.n	8011464 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	685b      	ldr	r3, [r3, #4]
 8011454:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	430a      	orrs	r2, r1
 8011462:	605a      	str	r2, [r3, #4]
  }
}
 8011464:	bf00      	nop
 8011466:	370c      	adds	r7, #12
 8011468:	46bd      	mov	sp, r7
 801146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146e:	4770      	bx	lr

08011470 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b098      	sub	sp, #96	@ 0x60
 8011474:	af02      	add	r7, sp, #8
 8011476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	2200      	movs	r2, #0
 801147c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011480:	f7f5 f9c2 	bl	8006808 <HAL_GetTick>
 8011484:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	f003 0308 	and.w	r3, r3, #8
 8011490:	2b08      	cmp	r3, #8
 8011492:	d12f      	bne.n	80114f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011494:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011498:	9300      	str	r3, [sp, #0]
 801149a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801149c:	2200      	movs	r2, #0
 801149e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80114a2:	6878      	ldr	r0, [r7, #4]
 80114a4:	f000 f88e 	bl	80115c4 <UART_WaitOnFlagUntilTimeout>
 80114a8:	4603      	mov	r3, r0
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d022      	beq.n	80114f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114b6:	e853 3f00 	ldrex	r3, [r3]
 80114ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80114bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80114be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80114c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	461a      	mov	r2, r3
 80114ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80114cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80114ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80114d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80114d4:	e841 2300 	strex	r3, r2, [r1]
 80114d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80114da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d1e6      	bne.n	80114ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	2220      	movs	r2, #32
 80114e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	2200      	movs	r2, #0
 80114ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80114f0:	2303      	movs	r3, #3
 80114f2:	e063      	b.n	80115bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	f003 0304 	and.w	r3, r3, #4
 80114fe:	2b04      	cmp	r3, #4
 8011500:	d149      	bne.n	8011596 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011502:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011506:	9300      	str	r3, [sp, #0]
 8011508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801150a:	2200      	movs	r2, #0
 801150c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8011510:	6878      	ldr	r0, [r7, #4]
 8011512:	f000 f857 	bl	80115c4 <UART_WaitOnFlagUntilTimeout>
 8011516:	4603      	mov	r3, r0
 8011518:	2b00      	cmp	r3, #0
 801151a:	d03c      	beq.n	8011596 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011524:	e853 3f00 	ldrex	r3, [r3]
 8011528:	623b      	str	r3, [r7, #32]
   return(result);
 801152a:	6a3b      	ldr	r3, [r7, #32]
 801152c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011530:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	461a      	mov	r2, r3
 8011538:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801153a:	633b      	str	r3, [r7, #48]	@ 0x30
 801153c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801153e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011540:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011542:	e841 2300 	strex	r3, r2, [r1]
 8011546:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801154a:	2b00      	cmp	r3, #0
 801154c:	d1e6      	bne.n	801151c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	3308      	adds	r3, #8
 8011554:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011556:	693b      	ldr	r3, [r7, #16]
 8011558:	e853 3f00 	ldrex	r3, [r3]
 801155c:	60fb      	str	r3, [r7, #12]
   return(result);
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	f023 0301 	bic.w	r3, r3, #1
 8011564:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	3308      	adds	r3, #8
 801156c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801156e:	61fa      	str	r2, [r7, #28]
 8011570:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011572:	69b9      	ldr	r1, [r7, #24]
 8011574:	69fa      	ldr	r2, [r7, #28]
 8011576:	e841 2300 	strex	r3, r2, [r1]
 801157a:	617b      	str	r3, [r7, #20]
   return(result);
 801157c:	697b      	ldr	r3, [r7, #20]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d1e5      	bne.n	801154e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	2220      	movs	r2, #32
 8011586:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	2200      	movs	r2, #0
 801158e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011592:	2303      	movs	r3, #3
 8011594:	e012      	b.n	80115bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	2220      	movs	r2, #32
 801159a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	2220      	movs	r2, #32
 80115a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	2200      	movs	r2, #0
 80115aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	2200      	movs	r2, #0
 80115b0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	2200      	movs	r2, #0
 80115b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80115ba:	2300      	movs	r3, #0
}
 80115bc:	4618      	mov	r0, r3
 80115be:	3758      	adds	r7, #88	@ 0x58
 80115c0:	46bd      	mov	sp, r7
 80115c2:	bd80      	pop	{r7, pc}

080115c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80115c4:	b580      	push	{r7, lr}
 80115c6:	b084      	sub	sp, #16
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	60f8      	str	r0, [r7, #12]
 80115cc:	60b9      	str	r1, [r7, #8]
 80115ce:	603b      	str	r3, [r7, #0]
 80115d0:	4613      	mov	r3, r2
 80115d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80115d4:	e04f      	b.n	8011676 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80115d6:	69bb      	ldr	r3, [r7, #24]
 80115d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115dc:	d04b      	beq.n	8011676 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80115de:	f7f5 f913 	bl	8006808 <HAL_GetTick>
 80115e2:	4602      	mov	r2, r0
 80115e4:	683b      	ldr	r3, [r7, #0]
 80115e6:	1ad3      	subs	r3, r2, r3
 80115e8:	69ba      	ldr	r2, [r7, #24]
 80115ea:	429a      	cmp	r2, r3
 80115ec:	d302      	bcc.n	80115f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80115ee:	69bb      	ldr	r3, [r7, #24]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d101      	bne.n	80115f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80115f4:	2303      	movs	r3, #3
 80115f6:	e04e      	b.n	8011696 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	f003 0304 	and.w	r3, r3, #4
 8011602:	2b00      	cmp	r3, #0
 8011604:	d037      	beq.n	8011676 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011606:	68bb      	ldr	r3, [r7, #8]
 8011608:	2b80      	cmp	r3, #128	@ 0x80
 801160a:	d034      	beq.n	8011676 <UART_WaitOnFlagUntilTimeout+0xb2>
 801160c:	68bb      	ldr	r3, [r7, #8]
 801160e:	2b40      	cmp	r3, #64	@ 0x40
 8011610:	d031      	beq.n	8011676 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	69db      	ldr	r3, [r3, #28]
 8011618:	f003 0308 	and.w	r3, r3, #8
 801161c:	2b08      	cmp	r3, #8
 801161e:	d110      	bne.n	8011642 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	2208      	movs	r2, #8
 8011626:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011628:	68f8      	ldr	r0, [r7, #12]
 801162a:	f000 fa43 	bl	8011ab4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	2208      	movs	r2, #8
 8011632:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	2200      	movs	r2, #0
 801163a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801163e:	2301      	movs	r3, #1
 8011640:	e029      	b.n	8011696 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	69db      	ldr	r3, [r3, #28]
 8011648:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801164c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011650:	d111      	bne.n	8011676 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801165a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801165c:	68f8      	ldr	r0, [r7, #12]
 801165e:	f000 fa29 	bl	8011ab4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	2220      	movs	r2, #32
 8011666:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	2200      	movs	r2, #0
 801166e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8011672:	2303      	movs	r3, #3
 8011674:	e00f      	b.n	8011696 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	69da      	ldr	r2, [r3, #28]
 801167c:	68bb      	ldr	r3, [r7, #8]
 801167e:	4013      	ands	r3, r2
 8011680:	68ba      	ldr	r2, [r7, #8]
 8011682:	429a      	cmp	r2, r3
 8011684:	bf0c      	ite	eq
 8011686:	2301      	moveq	r3, #1
 8011688:	2300      	movne	r3, #0
 801168a:	b2db      	uxtb	r3, r3
 801168c:	461a      	mov	r2, r3
 801168e:	79fb      	ldrb	r3, [r7, #7]
 8011690:	429a      	cmp	r2, r3
 8011692:	d0a0      	beq.n	80115d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011694:	2300      	movs	r3, #0
}
 8011696:	4618      	mov	r0, r3
 8011698:	3710      	adds	r7, #16
 801169a:	46bd      	mov	sp, r7
 801169c:	bd80      	pop	{r7, pc}
	...

080116a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80116a0:	b480      	push	{r7}
 80116a2:	b0a3      	sub	sp, #140	@ 0x8c
 80116a4:	af00      	add	r7, sp, #0
 80116a6:	60f8      	str	r0, [r7, #12]
 80116a8:	60b9      	str	r1, [r7, #8]
 80116aa:	4613      	mov	r3, r2
 80116ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	68ba      	ldr	r2, [r7, #8]
 80116b2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	88fa      	ldrh	r2, [r7, #6]
 80116b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	88fa      	ldrh	r2, [r7, #6]
 80116c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	2200      	movs	r2, #0
 80116c8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	689b      	ldr	r3, [r3, #8]
 80116ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80116d2:	d10e      	bne.n	80116f2 <UART_Start_Receive_IT+0x52>
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	691b      	ldr	r3, [r3, #16]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d105      	bne.n	80116e8 <UART_Start_Receive_IT+0x48>
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80116e2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80116e6:	e02d      	b.n	8011744 <UART_Start_Receive_IT+0xa4>
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	22ff      	movs	r2, #255	@ 0xff
 80116ec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80116f0:	e028      	b.n	8011744 <UART_Start_Receive_IT+0xa4>
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	689b      	ldr	r3, [r3, #8]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d10d      	bne.n	8011716 <UART_Start_Receive_IT+0x76>
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	691b      	ldr	r3, [r3, #16]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d104      	bne.n	801170c <UART_Start_Receive_IT+0x6c>
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	22ff      	movs	r2, #255	@ 0xff
 8011706:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801170a:	e01b      	b.n	8011744 <UART_Start_Receive_IT+0xa4>
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	227f      	movs	r2, #127	@ 0x7f
 8011710:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8011714:	e016      	b.n	8011744 <UART_Start_Receive_IT+0xa4>
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	689b      	ldr	r3, [r3, #8]
 801171a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801171e:	d10d      	bne.n	801173c <UART_Start_Receive_IT+0x9c>
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	691b      	ldr	r3, [r3, #16]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d104      	bne.n	8011732 <UART_Start_Receive_IT+0x92>
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	227f      	movs	r2, #127	@ 0x7f
 801172c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8011730:	e008      	b.n	8011744 <UART_Start_Receive_IT+0xa4>
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	223f      	movs	r2, #63	@ 0x3f
 8011736:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801173a:	e003      	b.n	8011744 <UART_Start_Receive_IT+0xa4>
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	2200      	movs	r2, #0
 8011740:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	2200      	movs	r2, #0
 8011748:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	2222      	movs	r2, #34	@ 0x22
 8011750:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	3308      	adds	r3, #8
 801175a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801175c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801175e:	e853 3f00 	ldrex	r3, [r3]
 8011762:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8011764:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011766:	f043 0301 	orr.w	r3, r3, #1
 801176a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	3308      	adds	r3, #8
 8011774:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8011778:	673a      	str	r2, [r7, #112]	@ 0x70
 801177a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801177c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 801177e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011780:	e841 2300 	strex	r3, r2, [r1]
 8011784:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8011786:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011788:	2b00      	cmp	r3, #0
 801178a:	d1e3      	bne.n	8011754 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011790:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011794:	d14f      	bne.n	8011836 <UART_Start_Receive_IT+0x196>
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801179c:	88fa      	ldrh	r2, [r7, #6]
 801179e:	429a      	cmp	r2, r3
 80117a0:	d349      	bcc.n	8011836 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	689b      	ldr	r3, [r3, #8]
 80117a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80117aa:	d107      	bne.n	80117bc <UART_Start_Receive_IT+0x11c>
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	691b      	ldr	r3, [r3, #16]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d103      	bne.n	80117bc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	4a47      	ldr	r2, [pc, #284]	@ (80118d4 <UART_Start_Receive_IT+0x234>)
 80117b8:	675a      	str	r2, [r3, #116]	@ 0x74
 80117ba:	e002      	b.n	80117c2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	4a46      	ldr	r2, [pc, #280]	@ (80118d8 <UART_Start_Receive_IT+0x238>)
 80117c0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	691b      	ldr	r3, [r3, #16]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d01a      	beq.n	8011800 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80117d2:	e853 3f00 	ldrex	r3, [r3]
 80117d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80117d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80117da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80117de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	461a      	mov	r2, r3
 80117e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80117ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80117ee:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117f0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80117f2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80117f4:	e841 2300 	strex	r3, r2, [r1]
 80117f8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80117fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d1e4      	bne.n	80117ca <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	3308      	adds	r3, #8
 8011806:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011808:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801180a:	e853 3f00 	ldrex	r3, [r3]
 801180e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011812:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011816:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	3308      	adds	r3, #8
 801181e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8011820:	64ba      	str	r2, [r7, #72]	@ 0x48
 8011822:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011824:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011826:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011828:	e841 2300 	strex	r3, r2, [r1]
 801182c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801182e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011830:	2b00      	cmp	r3, #0
 8011832:	d1e5      	bne.n	8011800 <UART_Start_Receive_IT+0x160>
 8011834:	e046      	b.n	80118c4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	689b      	ldr	r3, [r3, #8]
 801183a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801183e:	d107      	bne.n	8011850 <UART_Start_Receive_IT+0x1b0>
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	691b      	ldr	r3, [r3, #16]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d103      	bne.n	8011850 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	4a24      	ldr	r2, [pc, #144]	@ (80118dc <UART_Start_Receive_IT+0x23c>)
 801184c:	675a      	str	r2, [r3, #116]	@ 0x74
 801184e:	e002      	b.n	8011856 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	4a23      	ldr	r2, [pc, #140]	@ (80118e0 <UART_Start_Receive_IT+0x240>)
 8011854:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	691b      	ldr	r3, [r3, #16]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d019      	beq.n	8011892 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011866:	e853 3f00 	ldrex	r3, [r3]
 801186a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801186c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801186e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8011872:	677b      	str	r3, [r7, #116]	@ 0x74
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	461a      	mov	r2, r3
 801187a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801187c:	637b      	str	r3, [r7, #52]	@ 0x34
 801187e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011880:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011882:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011884:	e841 2300 	strex	r3, r2, [r1]
 8011888:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801188a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801188c:	2b00      	cmp	r3, #0
 801188e:	d1e6      	bne.n	801185e <UART_Start_Receive_IT+0x1be>
 8011890:	e018      	b.n	80118c4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011898:	697b      	ldr	r3, [r7, #20]
 801189a:	e853 3f00 	ldrex	r3, [r3]
 801189e:	613b      	str	r3, [r7, #16]
   return(result);
 80118a0:	693b      	ldr	r3, [r7, #16]
 80118a2:	f043 0320 	orr.w	r3, r3, #32
 80118a6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	461a      	mov	r2, r3
 80118ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80118b0:	623b      	str	r3, [r7, #32]
 80118b2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118b4:	69f9      	ldr	r1, [r7, #28]
 80118b6:	6a3a      	ldr	r2, [r7, #32]
 80118b8:	e841 2300 	strex	r3, r2, [r1]
 80118bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80118be:	69bb      	ldr	r3, [r7, #24]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d1e6      	bne.n	8011892 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80118c4:	2300      	movs	r3, #0
}
 80118c6:	4618      	mov	r0, r3
 80118c8:	378c      	adds	r7, #140	@ 0x8c
 80118ca:	46bd      	mov	sp, r7
 80118cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d0:	4770      	bx	lr
 80118d2:	bf00      	nop
 80118d4:	08012909 	.word	0x08012909
 80118d8:	080125a9 	.word	0x080125a9
 80118dc:	080123f1 	.word	0x080123f1
 80118e0:	08012239 	.word	0x08012239

080118e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80118e4:	b580      	push	{r7, lr}
 80118e6:	b096      	sub	sp, #88	@ 0x58
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	60f8      	str	r0, [r7, #12]
 80118ec:	60b9      	str	r1, [r7, #8]
 80118ee:	4613      	mov	r3, r2
 80118f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	68ba      	ldr	r2, [r7, #8]
 80118f6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	88fa      	ldrh	r2, [r7, #6]
 80118fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	2200      	movs	r2, #0
 8011904:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	2222      	movs	r2, #34	@ 0x22
 801190c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011916:	2b00      	cmp	r3, #0
 8011918:	d02d      	beq.n	8011976 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011920:	4a40      	ldr	r2, [pc, #256]	@ (8011a24 <UART_Start_Receive_DMA+0x140>)
 8011922:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801192a:	4a3f      	ldr	r2, [pc, #252]	@ (8011a28 <UART_Start_Receive_DMA+0x144>)
 801192c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011934:	4a3d      	ldr	r2, [pc, #244]	@ (8011a2c <UART_Start_Receive_DMA+0x148>)
 8011936:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801193e:	2200      	movs	r2, #0
 8011940:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	3324      	adds	r3, #36	@ 0x24
 801194e:	4619      	mov	r1, r3
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011954:	461a      	mov	r2, r3
 8011956:	88fb      	ldrh	r3, [r7, #6]
 8011958:	f7f5 fc6c 	bl	8007234 <HAL_DMA_Start_IT>
 801195c:	4603      	mov	r3, r0
 801195e:	2b00      	cmp	r3, #0
 8011960:	d009      	beq.n	8011976 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	2210      	movs	r2, #16
 8011966:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	2220      	movs	r2, #32
 801196e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8011972:	2301      	movs	r3, #1
 8011974:	e051      	b.n	8011a1a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	691b      	ldr	r3, [r3, #16]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d018      	beq.n	80119b0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011984:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011986:	e853 3f00 	ldrex	r3, [r3]
 801198a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801198c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801198e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011992:	657b      	str	r3, [r7, #84]	@ 0x54
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	461a      	mov	r2, r3
 801199a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801199c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801199e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119a0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80119a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80119a4:	e841 2300 	strex	r3, r2, [r1]
 80119a8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80119aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d1e6      	bne.n	801197e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	3308      	adds	r3, #8
 80119b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119ba:	e853 3f00 	ldrex	r3, [r3]
 80119be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80119c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119c2:	f043 0301 	orr.w	r3, r3, #1
 80119c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	3308      	adds	r3, #8
 80119ce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80119d0:	637a      	str	r2, [r7, #52]	@ 0x34
 80119d2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80119d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80119d8:	e841 2300 	strex	r3, r2, [r1]
 80119dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80119de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d1e5      	bne.n	80119b0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	3308      	adds	r3, #8
 80119ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119ec:	697b      	ldr	r3, [r7, #20]
 80119ee:	e853 3f00 	ldrex	r3, [r3]
 80119f2:	613b      	str	r3, [r7, #16]
   return(result);
 80119f4:	693b      	ldr	r3, [r7, #16]
 80119f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80119fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	3308      	adds	r3, #8
 8011a02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011a04:	623a      	str	r2, [r7, #32]
 8011a06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a08:	69f9      	ldr	r1, [r7, #28]
 8011a0a:	6a3a      	ldr	r2, [r7, #32]
 8011a0c:	e841 2300 	strex	r3, r2, [r1]
 8011a10:	61bb      	str	r3, [r7, #24]
   return(result);
 8011a12:	69bb      	ldr	r3, [r7, #24]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d1e5      	bne.n	80119e4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8011a18:	2300      	movs	r3, #0
}
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	3758      	adds	r7, #88	@ 0x58
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	bd80      	pop	{r7, pc}
 8011a22:	bf00      	nop
 8011a24:	08011b81 	.word	0x08011b81
 8011a28:	08011ca9 	.word	0x08011ca9
 8011a2c:	08011ce7 	.word	0x08011ce7

08011a30 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011a30:	b480      	push	{r7}
 8011a32:	b08f      	sub	sp, #60	@ 0x3c
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a3e:	6a3b      	ldr	r3, [r7, #32]
 8011a40:	e853 3f00 	ldrex	r3, [r3]
 8011a44:	61fb      	str	r3, [r7, #28]
   return(result);
 8011a46:	69fb      	ldr	r3, [r7, #28]
 8011a48:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8011a4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	461a      	mov	r2, r3
 8011a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011a58:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011a5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011a5e:	e841 2300 	strex	r3, r2, [r1]
 8011a62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d1e6      	bne.n	8011a38 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	3308      	adds	r3, #8
 8011a70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	e853 3f00 	ldrex	r3, [r3]
 8011a78:	60bb      	str	r3, [r7, #8]
   return(result);
 8011a7a:	68bb      	ldr	r3, [r7, #8]
 8011a7c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8011a80:	633b      	str	r3, [r7, #48]	@ 0x30
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	3308      	adds	r3, #8
 8011a88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011a8a:	61ba      	str	r2, [r7, #24]
 8011a8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a8e:	6979      	ldr	r1, [r7, #20]
 8011a90:	69ba      	ldr	r2, [r7, #24]
 8011a92:	e841 2300 	strex	r3, r2, [r1]
 8011a96:	613b      	str	r3, [r7, #16]
   return(result);
 8011a98:	693b      	ldr	r3, [r7, #16]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d1e5      	bne.n	8011a6a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	2220      	movs	r2, #32
 8011aa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8011aa6:	bf00      	nop
 8011aa8:	373c      	adds	r7, #60	@ 0x3c
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab0:	4770      	bx	lr
	...

08011ab4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011ab4:	b480      	push	{r7}
 8011ab6:	b095      	sub	sp, #84	@ 0x54
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ac4:	e853 3f00 	ldrex	r3, [r3]
 8011ac8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011acc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011ad0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	461a      	mov	r2, r3
 8011ad8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ada:	643b      	str	r3, [r7, #64]	@ 0x40
 8011adc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ade:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011ae0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011ae2:	e841 2300 	strex	r3, r2, [r1]
 8011ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d1e6      	bne.n	8011abc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	3308      	adds	r3, #8
 8011af4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011af6:	6a3b      	ldr	r3, [r7, #32]
 8011af8:	e853 3f00 	ldrex	r3, [r3]
 8011afc:	61fb      	str	r3, [r7, #28]
   return(result);
 8011afe:	69fa      	ldr	r2, [r7, #28]
 8011b00:	4b1e      	ldr	r3, [pc, #120]	@ (8011b7c <UART_EndRxTransfer+0xc8>)
 8011b02:	4013      	ands	r3, r2
 8011b04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	3308      	adds	r3, #8
 8011b0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011b0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011b10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011b14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011b16:	e841 2300 	strex	r3, r2, [r1]
 8011b1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d1e5      	bne.n	8011aee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011b26:	2b01      	cmp	r3, #1
 8011b28:	d118      	bne.n	8011b5c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	e853 3f00 	ldrex	r3, [r3]
 8011b36:	60bb      	str	r3, [r7, #8]
   return(result);
 8011b38:	68bb      	ldr	r3, [r7, #8]
 8011b3a:	f023 0310 	bic.w	r3, r3, #16
 8011b3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	461a      	mov	r2, r3
 8011b46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b48:	61bb      	str	r3, [r7, #24]
 8011b4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b4c:	6979      	ldr	r1, [r7, #20]
 8011b4e:	69ba      	ldr	r2, [r7, #24]
 8011b50:	e841 2300 	strex	r3, r2, [r1]
 8011b54:	613b      	str	r3, [r7, #16]
   return(result);
 8011b56:	693b      	ldr	r3, [r7, #16]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d1e6      	bne.n	8011b2a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	2220      	movs	r2, #32
 8011b60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	2200      	movs	r2, #0
 8011b68:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	2200      	movs	r2, #0
 8011b6e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8011b70:	bf00      	nop
 8011b72:	3754      	adds	r7, #84	@ 0x54
 8011b74:	46bd      	mov	sp, r7
 8011b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b7a:	4770      	bx	lr
 8011b7c:	effffffe 	.word	0xeffffffe

08011b80 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b09c      	sub	sp, #112	@ 0x70
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b8c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	69db      	ldr	r3, [r3, #28]
 8011b92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011b96:	d071      	beq.n	8011c7c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8011b98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011ba0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ba6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ba8:	e853 3f00 	ldrex	r3, [r3]
 8011bac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011bae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011bb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011bb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011bb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	461a      	mov	r2, r3
 8011bbc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011bbe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011bc0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bc2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011bc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011bc6:	e841 2300 	strex	r3, r2, [r1]
 8011bca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011bcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d1e6      	bne.n	8011ba0 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011bd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	3308      	adds	r3, #8
 8011bd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bdc:	e853 3f00 	ldrex	r3, [r3]
 8011be0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011be4:	f023 0301 	bic.w	r3, r3, #1
 8011be8:	667b      	str	r3, [r7, #100]	@ 0x64
 8011bea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	3308      	adds	r3, #8
 8011bf0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011bf2:	647a      	str	r2, [r7, #68]	@ 0x44
 8011bf4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bf6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011bf8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011bfa:	e841 2300 	strex	r3, r2, [r1]
 8011bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011c00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d1e5      	bne.n	8011bd2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011c06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	3308      	adds	r3, #8
 8011c0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c10:	e853 3f00 	ldrex	r3, [r3]
 8011c14:	623b      	str	r3, [r7, #32]
   return(result);
 8011c16:	6a3b      	ldr	r3, [r7, #32]
 8011c18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011c1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8011c1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	3308      	adds	r3, #8
 8011c24:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011c26:	633a      	str	r2, [r7, #48]	@ 0x30
 8011c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011c2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011c2e:	e841 2300 	strex	r3, r2, [r1]
 8011c32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d1e5      	bne.n	8011c06 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011c3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011c3c:	2220      	movs	r2, #32
 8011c3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011c42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011c44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011c46:	2b01      	cmp	r3, #1
 8011c48:	d118      	bne.n	8011c7c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011c4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c50:	693b      	ldr	r3, [r7, #16]
 8011c52:	e853 3f00 	ldrex	r3, [r3]
 8011c56:	60fb      	str	r3, [r7, #12]
   return(result);
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	f023 0310 	bic.w	r3, r3, #16
 8011c5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011c60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	461a      	mov	r2, r3
 8011c66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011c68:	61fb      	str	r3, [r7, #28]
 8011c6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c6c:	69b9      	ldr	r1, [r7, #24]
 8011c6e:	69fa      	ldr	r2, [r7, #28]
 8011c70:	e841 2300 	strex	r3, r2, [r1]
 8011c74:	617b      	str	r3, [r7, #20]
   return(result);
 8011c76:	697b      	ldr	r3, [r7, #20]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d1e6      	bne.n	8011c4a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011c7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011c7e:	2200      	movs	r2, #0
 8011c80:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011c82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011c84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011c86:	2b01      	cmp	r3, #1
 8011c88:	d107      	bne.n	8011c9a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011c8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011c8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011c90:	4619      	mov	r1, r3
 8011c92:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011c94:	f7fe fcd2 	bl	801063c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011c98:	e002      	b.n	8011ca0 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8011c9a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011c9c:	f7f1 f9c0 	bl	8003020 <HAL_UART_RxCpltCallback>
}
 8011ca0:	bf00      	nop
 8011ca2:	3770      	adds	r7, #112	@ 0x70
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	bd80      	pop	{r7, pc}

08011ca8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011ca8:	b580      	push	{r7, lr}
 8011caa:	b084      	sub	sp, #16
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011cb4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	2201      	movs	r2, #1
 8011cba:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011cc0:	2b01      	cmp	r3, #1
 8011cc2:	d109      	bne.n	8011cd8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011cca:	085b      	lsrs	r3, r3, #1
 8011ccc:	b29b      	uxth	r3, r3
 8011cce:	4619      	mov	r1, r3
 8011cd0:	68f8      	ldr	r0, [r7, #12]
 8011cd2:	f7fe fcb3 	bl	801063c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011cd6:	e002      	b.n	8011cde <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8011cd8:	68f8      	ldr	r0, [r7, #12]
 8011cda:	f7fe fc91 	bl	8010600 <HAL_UART_RxHalfCpltCallback>
}
 8011cde:	bf00      	nop
 8011ce0:	3710      	adds	r7, #16
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	bd80      	pop	{r7, pc}

08011ce6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011ce6:	b580      	push	{r7, lr}
 8011ce8:	b086      	sub	sp, #24
 8011cea:	af00      	add	r7, sp, #0
 8011cec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011cf2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011cf4:	697b      	ldr	r3, [r7, #20]
 8011cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011cfa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011cfc:	697b      	ldr	r3, [r7, #20]
 8011cfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011d02:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011d04:	697b      	ldr	r3, [r7, #20]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	689b      	ldr	r3, [r3, #8]
 8011d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011d0e:	2b80      	cmp	r3, #128	@ 0x80
 8011d10:	d109      	bne.n	8011d26 <UART_DMAError+0x40>
 8011d12:	693b      	ldr	r3, [r7, #16]
 8011d14:	2b21      	cmp	r3, #33	@ 0x21
 8011d16:	d106      	bne.n	8011d26 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011d18:	697b      	ldr	r3, [r7, #20]
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8011d20:	6978      	ldr	r0, [r7, #20]
 8011d22:	f7ff fe85 	bl	8011a30 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011d26:	697b      	ldr	r3, [r7, #20]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	689b      	ldr	r3, [r3, #8]
 8011d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011d30:	2b40      	cmp	r3, #64	@ 0x40
 8011d32:	d109      	bne.n	8011d48 <UART_DMAError+0x62>
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	2b22      	cmp	r3, #34	@ 0x22
 8011d38:	d106      	bne.n	8011d48 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011d3a:	697b      	ldr	r3, [r7, #20]
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8011d42:	6978      	ldr	r0, [r7, #20]
 8011d44:	f7ff feb6 	bl	8011ab4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011d48:	697b      	ldr	r3, [r7, #20]
 8011d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011d4e:	f043 0210 	orr.w	r2, r3, #16
 8011d52:	697b      	ldr	r3, [r7, #20]
 8011d54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011d58:	6978      	ldr	r0, [r7, #20]
 8011d5a:	f7fe fc5b 	bl	8010614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011d5e:	bf00      	nop
 8011d60:	3718      	adds	r7, #24
 8011d62:	46bd      	mov	sp, r7
 8011d64:	bd80      	pop	{r7, pc}

08011d66 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011d66:	b580      	push	{r7, lr}
 8011d68:	b084      	sub	sp, #16
 8011d6a:	af00      	add	r7, sp, #0
 8011d6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	2200      	movs	r2, #0
 8011d78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	2200      	movs	r2, #0
 8011d80:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011d84:	68f8      	ldr	r0, [r7, #12]
 8011d86:	f7fe fc45 	bl	8010614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011d8a:	bf00      	nop
 8011d8c:	3710      	adds	r7, #16
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	bd80      	pop	{r7, pc}

08011d92 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8011d92:	b580      	push	{r7, lr}
 8011d94:	b084      	sub	sp, #16
 8011d96:	af00      	add	r7, sp, #0
 8011d98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d9e:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011da4:	2200      	movs	r2, #0
 8011da6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d005      	beq.n	8011dbe <UART_DMATxAbortCallback+0x2c>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011db8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d12b      	bne.n	8011e16 <UART_DMATxAbortCallback+0x84>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	2200      	movs	r2, #0
 8011dca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	2200      	movs	r2, #0
 8011dd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	220f      	movs	r2, #15
 8011ddc:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011de2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011de6:	d107      	bne.n	8011df8 <UART_DMATxAbortCallback+0x66>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	699a      	ldr	r2, [r3, #24]
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	f042 0210 	orr.w	r2, r2, #16
 8011df6:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	2220      	movs	r2, #32
 8011dfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	2220      	movs	r2, #32
 8011e04:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	2200      	movs	r2, #0
 8011e0c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8011e0e:	68f8      	ldr	r0, [r7, #12]
 8011e10:	f7fe fc0a 	bl	8010628 <HAL_UART_AbortCpltCallback>
 8011e14:	e000      	b.n	8011e18 <UART_DMATxAbortCallback+0x86>
      return;
 8011e16:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011e18:	3710      	adds	r7, #16
 8011e1a:	46bd      	mov	sp, r7
 8011e1c:	bd80      	pop	{r7, pc}

08011e1e <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8011e1e:	b580      	push	{r7, lr}
 8011e20:	b084      	sub	sp, #16
 8011e22:	af00      	add	r7, sp, #0
 8011e24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e2a:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011e32:	2200      	movs	r2, #0
 8011e34:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d004      	beq.n	8011e48 <UART_DMARxAbortCallback+0x2a>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011e42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d126      	bne.n	8011e96 <UART_DMARxAbortCallback+0x78>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	2200      	movs	r2, #0
 8011e4c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	2200      	movs	r2, #0
 8011e54:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	220f      	movs	r2, #15
 8011e66:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	699a      	ldr	r2, [r3, #24]
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	f042 0208 	orr.w	r2, r2, #8
 8011e76:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	2220      	movs	r2, #32
 8011e7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	2220      	movs	r2, #32
 8011e84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	2200      	movs	r2, #0
 8011e8c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8011e8e:	68f8      	ldr	r0, [r7, #12]
 8011e90:	f7fe fbca 	bl	8010628 <HAL_UART_AbortCpltCallback>
 8011e94:	e000      	b.n	8011e98 <UART_DMARxAbortCallback+0x7a>
      return;
 8011e96:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011e98:	3710      	adds	r7, #16
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	bd80      	pop	{r7, pc}

08011e9e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8011e9e:	b480      	push	{r7}
 8011ea0:	b08f      	sub	sp, #60	@ 0x3c
 8011ea2:	af00      	add	r7, sp, #0
 8011ea4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011eac:	2b21      	cmp	r3, #33	@ 0x21
 8011eae:	d14c      	bne.n	8011f4a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011eb6:	b29b      	uxth	r3, r3
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d132      	bne.n	8011f22 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ec2:	6a3b      	ldr	r3, [r7, #32]
 8011ec4:	e853 3f00 	ldrex	r3, [r3]
 8011ec8:	61fb      	str	r3, [r7, #28]
   return(result);
 8011eca:	69fb      	ldr	r3, [r7, #28]
 8011ecc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011ed0:	637b      	str	r3, [r7, #52]	@ 0x34
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	461a      	mov	r2, r3
 8011ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011edc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ede:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011ee0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011ee2:	e841 2300 	strex	r3, r2, [r1]
 8011ee6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d1e6      	bne.n	8011ebc <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	e853 3f00 	ldrex	r3, [r3]
 8011efa:	60bb      	str	r3, [r7, #8]
   return(result);
 8011efc:	68bb      	ldr	r3, [r7, #8]
 8011efe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011f02:	633b      	str	r3, [r7, #48]	@ 0x30
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	461a      	mov	r2, r3
 8011f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f0c:	61bb      	str	r3, [r7, #24]
 8011f0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f10:	6979      	ldr	r1, [r7, #20]
 8011f12:	69ba      	ldr	r2, [r7, #24]
 8011f14:	e841 2300 	strex	r3, r2, [r1]
 8011f18:	613b      	str	r3, [r7, #16]
   return(result);
 8011f1a:	693b      	ldr	r3, [r7, #16]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d1e6      	bne.n	8011eee <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8011f20:	e013      	b.n	8011f4a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011f26:	781a      	ldrb	r2, [r3, #0]
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011f32:	1c5a      	adds	r2, r3, #1
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011f3e:	b29b      	uxth	r3, r3
 8011f40:	3b01      	subs	r3, #1
 8011f42:	b29a      	uxth	r2, r3
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8011f4a:	bf00      	nop
 8011f4c:	373c      	adds	r7, #60	@ 0x3c
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f54:	4770      	bx	lr

08011f56 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011f56:	b480      	push	{r7}
 8011f58:	b091      	sub	sp, #68	@ 0x44
 8011f5a:	af00      	add	r7, sp, #0
 8011f5c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011f64:	2b21      	cmp	r3, #33	@ 0x21
 8011f66:	d151      	bne.n	801200c <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011f6e:	b29b      	uxth	r3, r3
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d132      	bne.n	8011fda <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f7c:	e853 3f00 	ldrex	r3, [r3]
 8011f80:	623b      	str	r3, [r7, #32]
   return(result);
 8011f82:	6a3b      	ldr	r3, [r7, #32]
 8011f84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011f88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	461a      	mov	r2, r3
 8011f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f92:	633b      	str	r3, [r7, #48]	@ 0x30
 8011f94:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011f98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011f9a:	e841 2300 	strex	r3, r2, [r1]
 8011f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d1e6      	bne.n	8011f74 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fac:	693b      	ldr	r3, [r7, #16]
 8011fae:	e853 3f00 	ldrex	r3, [r3]
 8011fb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011fba:	637b      	str	r3, [r7, #52]	@ 0x34
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	461a      	mov	r2, r3
 8011fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011fc4:	61fb      	str	r3, [r7, #28]
 8011fc6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fc8:	69b9      	ldr	r1, [r7, #24]
 8011fca:	69fa      	ldr	r2, [r7, #28]
 8011fcc:	e841 2300 	strex	r3, r2, [r1]
 8011fd0:	617b      	str	r3, [r7, #20]
   return(result);
 8011fd2:	697b      	ldr	r3, [r7, #20]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d1e6      	bne.n	8011fa6 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8011fd8:	e018      	b.n	801200c <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8011fe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011fe2:	881b      	ldrh	r3, [r3, #0]
 8011fe4:	461a      	mov	r2, r3
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011fee:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011ff4:	1c9a      	adds	r2, r3, #2
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8012000:	b29b      	uxth	r3, r3
 8012002:	3b01      	subs	r3, #1
 8012004:	b29a      	uxth	r2, r3
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 801200c:	bf00      	nop
 801200e:	3744      	adds	r7, #68	@ 0x44
 8012010:	46bd      	mov	sp, r7
 8012012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012016:	4770      	bx	lr

08012018 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012018:	b480      	push	{r7}
 801201a:	b091      	sub	sp, #68	@ 0x44
 801201c:	af00      	add	r7, sp, #0
 801201e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012026:	2b21      	cmp	r3, #33	@ 0x21
 8012028:	d160      	bne.n	80120ec <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8012030:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8012032:	e057      	b.n	80120e4 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801203a:	b29b      	uxth	r3, r3
 801203c:	2b00      	cmp	r3, #0
 801203e:	d133      	bne.n	80120a8 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	3308      	adds	r3, #8
 8012046:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801204a:	e853 3f00 	ldrex	r3, [r3]
 801204e:	623b      	str	r3, [r7, #32]
   return(result);
 8012050:	6a3b      	ldr	r3, [r7, #32]
 8012052:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8012056:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	3308      	adds	r3, #8
 801205e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012060:	633a      	str	r2, [r7, #48]	@ 0x30
 8012062:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012064:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012066:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012068:	e841 2300 	strex	r3, r2, [r1]
 801206c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801206e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012070:	2b00      	cmp	r3, #0
 8012072:	d1e5      	bne.n	8012040 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801207a:	693b      	ldr	r3, [r7, #16]
 801207c:	e853 3f00 	ldrex	r3, [r3]
 8012080:	60fb      	str	r3, [r7, #12]
   return(result);
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012088:	637b      	str	r3, [r7, #52]	@ 0x34
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	461a      	mov	r2, r3
 8012090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012092:	61fb      	str	r3, [r7, #28]
 8012094:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012096:	69b9      	ldr	r1, [r7, #24]
 8012098:	69fa      	ldr	r2, [r7, #28]
 801209a:	e841 2300 	strex	r3, r2, [r1]
 801209e:	617b      	str	r3, [r7, #20]
   return(result);
 80120a0:	697b      	ldr	r3, [r7, #20]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d1e6      	bne.n	8012074 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80120a6:	e021      	b.n	80120ec <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	69db      	ldr	r3, [r3, #28]
 80120ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d013      	beq.n	80120de <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80120ba:	781a      	ldrb	r2, [r3, #0]
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80120c6:	1c5a      	adds	r2, r3, #1
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80120d2:	b29b      	uxth	r3, r3
 80120d4:	3b01      	subs	r3, #1
 80120d6:	b29a      	uxth	r2, r3
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80120de:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80120e0:	3b01      	subs	r3, #1
 80120e2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80120e4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d1a4      	bne.n	8012034 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80120ea:	e7ff      	b.n	80120ec <UART_TxISR_8BIT_FIFOEN+0xd4>
 80120ec:	bf00      	nop
 80120ee:	3744      	adds	r7, #68	@ 0x44
 80120f0:	46bd      	mov	sp, r7
 80120f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f6:	4770      	bx	lr

080120f8 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80120f8:	b480      	push	{r7}
 80120fa:	b091      	sub	sp, #68	@ 0x44
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012106:	2b21      	cmp	r3, #33	@ 0x21
 8012108:	d165      	bne.n	80121d6 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8012110:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8012112:	e05c      	b.n	80121ce <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801211a:	b29b      	uxth	r3, r3
 801211c:	2b00      	cmp	r3, #0
 801211e:	d133      	bne.n	8012188 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	3308      	adds	r3, #8
 8012126:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012128:	6a3b      	ldr	r3, [r7, #32]
 801212a:	e853 3f00 	ldrex	r3, [r3]
 801212e:	61fb      	str	r3, [r7, #28]
   return(result);
 8012130:	69fb      	ldr	r3, [r7, #28]
 8012132:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8012136:	637b      	str	r3, [r7, #52]	@ 0x34
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	3308      	adds	r3, #8
 801213e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012140:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8012142:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012144:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012146:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012148:	e841 2300 	strex	r3, r2, [r1]
 801214c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801214e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012150:	2b00      	cmp	r3, #0
 8012152:	d1e5      	bne.n	8012120 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	e853 3f00 	ldrex	r3, [r3]
 8012160:	60bb      	str	r3, [r7, #8]
   return(result);
 8012162:	68bb      	ldr	r3, [r7, #8]
 8012164:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012168:	633b      	str	r3, [r7, #48]	@ 0x30
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	461a      	mov	r2, r3
 8012170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012172:	61bb      	str	r3, [r7, #24]
 8012174:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012176:	6979      	ldr	r1, [r7, #20]
 8012178:	69ba      	ldr	r2, [r7, #24]
 801217a:	e841 2300 	strex	r3, r2, [r1]
 801217e:	613b      	str	r3, [r7, #16]
   return(result);
 8012180:	693b      	ldr	r3, [r7, #16]
 8012182:	2b00      	cmp	r3, #0
 8012184:	d1e6      	bne.n	8012154 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8012186:	e026      	b.n	80121d6 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	69db      	ldr	r3, [r3, #28]
 801218e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012192:	2b00      	cmp	r3, #0
 8012194:	d018      	beq.n	80121c8 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801219a:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801219c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801219e:	881b      	ldrh	r3, [r3, #0]
 80121a0:	461a      	mov	r2, r3
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80121aa:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80121b0:	1c9a      	adds	r2, r3, #2
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80121bc:	b29b      	uxth	r3, r3
 80121be:	3b01      	subs	r3, #1
 80121c0:	b29a      	uxth	r2, r3
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80121c8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80121ca:	3b01      	subs	r3, #1
 80121cc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80121ce:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d19f      	bne.n	8012114 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80121d4:	e7ff      	b.n	80121d6 <UART_TxISR_16BIT_FIFOEN+0xde>
 80121d6:	bf00      	nop
 80121d8:	3744      	adds	r7, #68	@ 0x44
 80121da:	46bd      	mov	sp, r7
 80121dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e0:	4770      	bx	lr

080121e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80121e2:	b580      	push	{r7, lr}
 80121e4:	b088      	sub	sp, #32
 80121e6:	af00      	add	r7, sp, #0
 80121e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	e853 3f00 	ldrex	r3, [r3]
 80121f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80121f8:	68bb      	ldr	r3, [r7, #8]
 80121fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80121fe:	61fb      	str	r3, [r7, #28]
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	461a      	mov	r2, r3
 8012206:	69fb      	ldr	r3, [r7, #28]
 8012208:	61bb      	str	r3, [r7, #24]
 801220a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801220c:	6979      	ldr	r1, [r7, #20]
 801220e:	69ba      	ldr	r2, [r7, #24]
 8012210:	e841 2300 	strex	r3, r2, [r1]
 8012214:	613b      	str	r3, [r7, #16]
   return(result);
 8012216:	693b      	ldr	r3, [r7, #16]
 8012218:	2b00      	cmp	r3, #0
 801221a:	d1e6      	bne.n	80121ea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	2220      	movs	r2, #32
 8012220:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	2200      	movs	r2, #0
 8012228:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801222a:	6878      	ldr	r0, [r7, #4]
 801222c:	f7fe f9de 	bl	80105ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012230:	bf00      	nop
 8012232:	3720      	adds	r7, #32
 8012234:	46bd      	mov	sp, r7
 8012236:	bd80      	pop	{r7, pc}

08012238 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8012238:	b580      	push	{r7, lr}
 801223a:	b09c      	sub	sp, #112	@ 0x70
 801223c:	af00      	add	r7, sp, #0
 801223e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012246:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012250:	2b22      	cmp	r3, #34	@ 0x22
 8012252:	f040 80be 	bne.w	80123d2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801225c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012260:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8012264:	b2d9      	uxtb	r1, r3
 8012266:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801226a:	b2da      	uxtb	r2, r3
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012270:	400a      	ands	r2, r1
 8012272:	b2d2      	uxtb	r2, r2
 8012274:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801227a:	1c5a      	adds	r2, r3, #1
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012286:	b29b      	uxth	r3, r3
 8012288:	3b01      	subs	r3, #1
 801228a:	b29a      	uxth	r2, r3
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012298:	b29b      	uxth	r3, r3
 801229a:	2b00      	cmp	r3, #0
 801229c:	f040 80a1 	bne.w	80123e2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80122a8:	e853 3f00 	ldrex	r3, [r3]
 80122ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80122ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80122b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80122b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	461a      	mov	r2, r3
 80122bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80122be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80122c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80122c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80122c6:	e841 2300 	strex	r3, r2, [r1]
 80122ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80122cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d1e6      	bne.n	80122a0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	3308      	adds	r3, #8
 80122d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122dc:	e853 3f00 	ldrex	r3, [r3]
 80122e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80122e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80122e4:	f023 0301 	bic.w	r3, r3, #1
 80122e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	3308      	adds	r3, #8
 80122f0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80122f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80122f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80122f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80122fa:	e841 2300 	strex	r3, r2, [r1]
 80122fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012300:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012302:	2b00      	cmp	r3, #0
 8012304:	d1e5      	bne.n	80122d2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	2220      	movs	r2, #32
 801230a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	2200      	movs	r2, #0
 8012312:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	2200      	movs	r2, #0
 8012318:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	4a33      	ldr	r2, [pc, #204]	@ (80123ec <UART_RxISR_8BIT+0x1b4>)
 8012320:	4293      	cmp	r3, r2
 8012322:	d01f      	beq.n	8012364 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	685b      	ldr	r3, [r3, #4]
 801232a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801232e:	2b00      	cmp	r3, #0
 8012330:	d018      	beq.n	8012364 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801233a:	e853 3f00 	ldrex	r3, [r3]
 801233e:	623b      	str	r3, [r7, #32]
   return(result);
 8012340:	6a3b      	ldr	r3, [r7, #32]
 8012342:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8012346:	663b      	str	r3, [r7, #96]	@ 0x60
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	461a      	mov	r2, r3
 801234e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012350:	633b      	str	r3, [r7, #48]	@ 0x30
 8012352:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012354:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012356:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012358:	e841 2300 	strex	r3, r2, [r1]
 801235c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801235e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012360:	2b00      	cmp	r3, #0
 8012362:	d1e6      	bne.n	8012332 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012368:	2b01      	cmp	r3, #1
 801236a:	d12e      	bne.n	80123ca <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	2200      	movs	r2, #0
 8012370:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012378:	693b      	ldr	r3, [r7, #16]
 801237a:	e853 3f00 	ldrex	r3, [r3]
 801237e:	60fb      	str	r3, [r7, #12]
   return(result);
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	f023 0310 	bic.w	r3, r3, #16
 8012386:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	461a      	mov	r2, r3
 801238e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012390:	61fb      	str	r3, [r7, #28]
 8012392:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012394:	69b9      	ldr	r1, [r7, #24]
 8012396:	69fa      	ldr	r2, [r7, #28]
 8012398:	e841 2300 	strex	r3, r2, [r1]
 801239c:	617b      	str	r3, [r7, #20]
   return(result);
 801239e:	697b      	ldr	r3, [r7, #20]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d1e6      	bne.n	8012372 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	69db      	ldr	r3, [r3, #28]
 80123aa:	f003 0310 	and.w	r3, r3, #16
 80123ae:	2b10      	cmp	r3, #16
 80123b0:	d103      	bne.n	80123ba <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	2210      	movs	r2, #16
 80123b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80123c0:	4619      	mov	r1, r3
 80123c2:	6878      	ldr	r0, [r7, #4]
 80123c4:	f7fe f93a 	bl	801063c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80123c8:	e00b      	b.n	80123e2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80123ca:	6878      	ldr	r0, [r7, #4]
 80123cc:	f7f0 fe28 	bl	8003020 <HAL_UART_RxCpltCallback>
}
 80123d0:	e007      	b.n	80123e2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	699a      	ldr	r2, [r3, #24]
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	f042 0208 	orr.w	r2, r2, #8
 80123e0:	619a      	str	r2, [r3, #24]
}
 80123e2:	bf00      	nop
 80123e4:	3770      	adds	r7, #112	@ 0x70
 80123e6:	46bd      	mov	sp, r7
 80123e8:	bd80      	pop	{r7, pc}
 80123ea:	bf00      	nop
 80123ec:	58000c00 	.word	0x58000c00

080123f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80123f0:	b580      	push	{r7, lr}
 80123f2:	b09c      	sub	sp, #112	@ 0x70
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80123fe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012408:	2b22      	cmp	r3, #34	@ 0x22
 801240a:	f040 80be 	bne.w	801258a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012414:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801241c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801241e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8012422:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8012426:	4013      	ands	r3, r2
 8012428:	b29a      	uxth	r2, r3
 801242a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801242c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012432:	1c9a      	adds	r2, r3, #2
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801243e:	b29b      	uxth	r3, r3
 8012440:	3b01      	subs	r3, #1
 8012442:	b29a      	uxth	r2, r3
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012450:	b29b      	uxth	r3, r3
 8012452:	2b00      	cmp	r3, #0
 8012454:	f040 80a1 	bne.w	801259a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801245e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012460:	e853 3f00 	ldrex	r3, [r3]
 8012464:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8012466:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012468:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801246c:	667b      	str	r3, [r7, #100]	@ 0x64
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	461a      	mov	r2, r3
 8012474:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012476:	657b      	str	r3, [r7, #84]	@ 0x54
 8012478:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801247a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801247c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801247e:	e841 2300 	strex	r3, r2, [r1]
 8012482:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8012484:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012486:	2b00      	cmp	r3, #0
 8012488:	d1e6      	bne.n	8012458 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	3308      	adds	r3, #8
 8012490:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012494:	e853 3f00 	ldrex	r3, [r3]
 8012498:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801249a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801249c:	f023 0301 	bic.w	r3, r3, #1
 80124a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	3308      	adds	r3, #8
 80124a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80124aa:	643a      	str	r2, [r7, #64]	@ 0x40
 80124ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80124b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80124b2:	e841 2300 	strex	r3, r2, [r1]
 80124b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80124b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d1e5      	bne.n	801248a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	2220      	movs	r2, #32
 80124c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	2200      	movs	r2, #0
 80124ca:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	2200      	movs	r2, #0
 80124d0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	4a33      	ldr	r2, [pc, #204]	@ (80125a4 <UART_RxISR_16BIT+0x1b4>)
 80124d8:	4293      	cmp	r3, r2
 80124da:	d01f      	beq.n	801251c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	685b      	ldr	r3, [r3, #4]
 80124e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d018      	beq.n	801251c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124f0:	6a3b      	ldr	r3, [r7, #32]
 80124f2:	e853 3f00 	ldrex	r3, [r3]
 80124f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80124f8:	69fb      	ldr	r3, [r7, #28]
 80124fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80124fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	461a      	mov	r2, r3
 8012506:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012508:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801250a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801250c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801250e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012510:	e841 2300 	strex	r3, r2, [r1]
 8012514:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8012516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012518:	2b00      	cmp	r3, #0
 801251a:	d1e6      	bne.n	80124ea <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012520:	2b01      	cmp	r3, #1
 8012522:	d12e      	bne.n	8012582 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	2200      	movs	r2, #0
 8012528:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	e853 3f00 	ldrex	r3, [r3]
 8012536:	60bb      	str	r3, [r7, #8]
   return(result);
 8012538:	68bb      	ldr	r3, [r7, #8]
 801253a:	f023 0310 	bic.w	r3, r3, #16
 801253e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	461a      	mov	r2, r3
 8012546:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012548:	61bb      	str	r3, [r7, #24]
 801254a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801254c:	6979      	ldr	r1, [r7, #20]
 801254e:	69ba      	ldr	r2, [r7, #24]
 8012550:	e841 2300 	strex	r3, r2, [r1]
 8012554:	613b      	str	r3, [r7, #16]
   return(result);
 8012556:	693b      	ldr	r3, [r7, #16]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d1e6      	bne.n	801252a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	69db      	ldr	r3, [r3, #28]
 8012562:	f003 0310 	and.w	r3, r3, #16
 8012566:	2b10      	cmp	r3, #16
 8012568:	d103      	bne.n	8012572 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	2210      	movs	r2, #16
 8012570:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012578:	4619      	mov	r1, r3
 801257a:	6878      	ldr	r0, [r7, #4]
 801257c:	f7fe f85e 	bl	801063c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012580:	e00b      	b.n	801259a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8012582:	6878      	ldr	r0, [r7, #4]
 8012584:	f7f0 fd4c 	bl	8003020 <HAL_UART_RxCpltCallback>
}
 8012588:	e007      	b.n	801259a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	699a      	ldr	r2, [r3, #24]
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	f042 0208 	orr.w	r2, r2, #8
 8012598:	619a      	str	r2, [r3, #24]
}
 801259a:	bf00      	nop
 801259c:	3770      	adds	r7, #112	@ 0x70
 801259e:	46bd      	mov	sp, r7
 80125a0:	bd80      	pop	{r7, pc}
 80125a2:	bf00      	nop
 80125a4:	58000c00 	.word	0x58000c00

080125a8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80125a8:	b580      	push	{r7, lr}
 80125aa:	b0ac      	sub	sp, #176	@ 0xb0
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80125b6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	69db      	ldr	r3, [r3, #28]
 80125c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	689b      	ldr	r3, [r3, #8]
 80125d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80125de:	2b22      	cmp	r3, #34	@ 0x22
 80125e0:	f040 8180 	bne.w	80128e4 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80125ea:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80125ee:	e123      	b.n	8012838 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80125f6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80125fa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80125fe:	b2d9      	uxtb	r1, r3
 8012600:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8012604:	b2da      	uxtb	r2, r3
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801260a:	400a      	ands	r2, r1
 801260c:	b2d2      	uxtb	r2, r2
 801260e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012614:	1c5a      	adds	r2, r3, #1
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012620:	b29b      	uxth	r3, r3
 8012622:	3b01      	subs	r3, #1
 8012624:	b29a      	uxth	r2, r3
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	69db      	ldr	r3, [r3, #28]
 8012632:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012636:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801263a:	f003 0307 	and.w	r3, r3, #7
 801263e:	2b00      	cmp	r3, #0
 8012640:	d053      	beq.n	80126ea <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012642:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012646:	f003 0301 	and.w	r3, r3, #1
 801264a:	2b00      	cmp	r3, #0
 801264c:	d011      	beq.n	8012672 <UART_RxISR_8BIT_FIFOEN+0xca>
 801264e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012656:	2b00      	cmp	r3, #0
 8012658:	d00b      	beq.n	8012672 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	2201      	movs	r2, #1
 8012660:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012668:	f043 0201 	orr.w	r2, r3, #1
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012672:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012676:	f003 0302 	and.w	r3, r3, #2
 801267a:	2b00      	cmp	r3, #0
 801267c:	d011      	beq.n	80126a2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 801267e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012682:	f003 0301 	and.w	r3, r3, #1
 8012686:	2b00      	cmp	r3, #0
 8012688:	d00b      	beq.n	80126a2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	2202      	movs	r2, #2
 8012690:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012698:	f043 0204 	orr.w	r2, r3, #4
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80126a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80126a6:	f003 0304 	and.w	r3, r3, #4
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d011      	beq.n	80126d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80126ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80126b2:	f003 0301 	and.w	r3, r3, #1
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d00b      	beq.n	80126d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	2204      	movs	r2, #4
 80126c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80126c8:	f043 0202 	orr.w	r2, r3, #2
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d006      	beq.n	80126ea <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80126dc:	6878      	ldr	r0, [r7, #4]
 80126de:	f7fd ff99 	bl	8010614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	2200      	movs	r2, #0
 80126e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80126f0:	b29b      	uxth	r3, r3
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	f040 80a0 	bne.w	8012838 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012700:	e853 3f00 	ldrex	r3, [r3]
 8012704:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8012706:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012708:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801270c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	461a      	mov	r2, r3
 8012716:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801271a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801271c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801271e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8012720:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8012722:	e841 2300 	strex	r3, r2, [r1]
 8012726:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8012728:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801272a:	2b00      	cmp	r3, #0
 801272c:	d1e4      	bne.n	80126f8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	3308      	adds	r3, #8
 8012734:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012736:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012738:	e853 3f00 	ldrex	r3, [r3]
 801273c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 801273e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012740:	4b6e      	ldr	r3, [pc, #440]	@ (80128fc <UART_RxISR_8BIT_FIFOEN+0x354>)
 8012742:	4013      	ands	r3, r2
 8012744:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	3308      	adds	r3, #8
 801274e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8012752:	66ba      	str	r2, [r7, #104]	@ 0x68
 8012754:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012756:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8012758:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801275a:	e841 2300 	strex	r3, r2, [r1]
 801275e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8012760:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012762:	2b00      	cmp	r3, #0
 8012764:	d1e3      	bne.n	801272e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	2220      	movs	r2, #32
 801276a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	2200      	movs	r2, #0
 8012772:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	2200      	movs	r2, #0
 8012778:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	4a60      	ldr	r2, [pc, #384]	@ (8012900 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8012780:	4293      	cmp	r3, r2
 8012782:	d021      	beq.n	80127c8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	685b      	ldr	r3, [r3, #4]
 801278a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801278e:	2b00      	cmp	r3, #0
 8012790:	d01a      	beq.n	80127c8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012798:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801279a:	e853 3f00 	ldrex	r3, [r3]
 801279e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80127a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80127a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80127a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	461a      	mov	r2, r3
 80127b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80127b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80127b6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127b8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80127ba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80127bc:	e841 2300 	strex	r3, r2, [r1]
 80127c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80127c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d1e4      	bne.n	8012792 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80127cc:	2b01      	cmp	r3, #1
 80127ce:	d130      	bne.n	8012832 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	2200      	movs	r2, #0
 80127d4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127de:	e853 3f00 	ldrex	r3, [r3]
 80127e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80127e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127e6:	f023 0310 	bic.w	r3, r3, #16
 80127ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	461a      	mov	r2, r3
 80127f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80127f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80127fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80127fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012800:	e841 2300 	strex	r3, r2, [r1]
 8012804:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8012806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012808:	2b00      	cmp	r3, #0
 801280a:	d1e4      	bne.n	80127d6 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	69db      	ldr	r3, [r3, #28]
 8012812:	f003 0310 	and.w	r3, r3, #16
 8012816:	2b10      	cmp	r3, #16
 8012818:	d103      	bne.n	8012822 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	2210      	movs	r2, #16
 8012820:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012828:	4619      	mov	r1, r3
 801282a:	6878      	ldr	r0, [r7, #4]
 801282c:	f7fd ff06 	bl	801063c <HAL_UARTEx_RxEventCallback>
 8012830:	e002      	b.n	8012838 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012832:	6878      	ldr	r0, [r7, #4]
 8012834:	f7f0 fbf4 	bl	8003020 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012838:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 801283c:	2b00      	cmp	r3, #0
 801283e:	d006      	beq.n	801284e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8012840:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012844:	f003 0320 	and.w	r3, r3, #32
 8012848:	2b00      	cmp	r3, #0
 801284a:	f47f aed1 	bne.w	80125f0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012854:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012858:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801285c:	2b00      	cmp	r3, #0
 801285e:	d049      	beq.n	80128f4 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8012866:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 801286a:	429a      	cmp	r2, r3
 801286c:	d242      	bcs.n	80128f4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	3308      	adds	r3, #8
 8012874:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012876:	6a3b      	ldr	r3, [r7, #32]
 8012878:	e853 3f00 	ldrex	r3, [r3]
 801287c:	61fb      	str	r3, [r7, #28]
   return(result);
 801287e:	69fb      	ldr	r3, [r7, #28]
 8012880:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8012884:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	3308      	adds	r3, #8
 801288e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8012892:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8012894:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012896:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012898:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801289a:	e841 2300 	strex	r3, r2, [r1]
 801289e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80128a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d1e3      	bne.n	801286e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	4a16      	ldr	r2, [pc, #88]	@ (8012904 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80128aa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	e853 3f00 	ldrex	r3, [r3]
 80128b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80128ba:	68bb      	ldr	r3, [r7, #8]
 80128bc:	f043 0320 	orr.w	r3, r3, #32
 80128c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	461a      	mov	r2, r3
 80128ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80128ce:	61bb      	str	r3, [r7, #24]
 80128d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128d2:	6979      	ldr	r1, [r7, #20]
 80128d4:	69ba      	ldr	r2, [r7, #24]
 80128d6:	e841 2300 	strex	r3, r2, [r1]
 80128da:	613b      	str	r3, [r7, #16]
   return(result);
 80128dc:	693b      	ldr	r3, [r7, #16]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d1e4      	bne.n	80128ac <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80128e2:	e007      	b.n	80128f4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	699a      	ldr	r2, [r3, #24]
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	f042 0208 	orr.w	r2, r2, #8
 80128f2:	619a      	str	r2, [r3, #24]
}
 80128f4:	bf00      	nop
 80128f6:	37b0      	adds	r7, #176	@ 0xb0
 80128f8:	46bd      	mov	sp, r7
 80128fa:	bd80      	pop	{r7, pc}
 80128fc:	effffffe 	.word	0xeffffffe
 8012900:	58000c00 	.word	0x58000c00
 8012904:	08012239 	.word	0x08012239

08012908 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012908:	b580      	push	{r7, lr}
 801290a:	b0ae      	sub	sp, #184	@ 0xb8
 801290c:	af00      	add	r7, sp, #0
 801290e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012916:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	69db      	ldr	r3, [r3, #28]
 8012920:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	689b      	ldr	r3, [r3, #8]
 8012934:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801293e:	2b22      	cmp	r3, #34	@ 0x22
 8012940:	f040 8184 	bne.w	8012c4c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801294a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801294e:	e127      	b.n	8012ba0 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012956:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801295e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8012962:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8012966:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801296a:	4013      	ands	r3, r2
 801296c:	b29a      	uxth	r2, r3
 801296e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012972:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012978:	1c9a      	adds	r2, r3, #2
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012984:	b29b      	uxth	r3, r3
 8012986:	3b01      	subs	r3, #1
 8012988:	b29a      	uxth	r2, r3
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	69db      	ldr	r3, [r3, #28]
 8012996:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801299a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801299e:	f003 0307 	and.w	r3, r3, #7
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d053      	beq.n	8012a4e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80129a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80129aa:	f003 0301 	and.w	r3, r3, #1
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d011      	beq.n	80129d6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80129b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80129b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d00b      	beq.n	80129d6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	2201      	movs	r2, #1
 80129c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80129cc:	f043 0201 	orr.w	r2, r3, #1
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80129d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80129da:	f003 0302 	and.w	r3, r3, #2
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d011      	beq.n	8012a06 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80129e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80129e6:	f003 0301 	and.w	r3, r3, #1
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d00b      	beq.n	8012a06 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	2202      	movs	r2, #2
 80129f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80129fc:	f043 0204 	orr.w	r2, r3, #4
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012a06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012a0a:	f003 0304 	and.w	r3, r3, #4
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d011      	beq.n	8012a36 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8012a12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012a16:	f003 0301 	and.w	r3, r3, #1
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d00b      	beq.n	8012a36 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	2204      	movs	r2, #4
 8012a24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012a2c:	f043 0202 	orr.w	r2, r3, #2
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d006      	beq.n	8012a4e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012a40:	6878      	ldr	r0, [r7, #4]
 8012a42:	f7fd fde7 	bl	8010614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	2200      	movs	r2, #0
 8012a4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012a54:	b29b      	uxth	r3, r3
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	f040 80a2 	bne.w	8012ba0 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012a64:	e853 3f00 	ldrex	r3, [r3]
 8012a68:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8012a6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012a6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012a70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	461a      	mov	r2, r3
 8012a7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012a7e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012a82:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a84:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8012a86:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8012a8a:	e841 2300 	strex	r3, r2, [r1]
 8012a8e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8012a90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d1e2      	bne.n	8012a5c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	3308      	adds	r3, #8
 8012a9c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012aa0:	e853 3f00 	ldrex	r3, [r3]
 8012aa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8012aa6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012aa8:	4b6e      	ldr	r3, [pc, #440]	@ (8012c64 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8012aaa:	4013      	ands	r3, r2
 8012aac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	3308      	adds	r3, #8
 8012ab6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8012aba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8012abc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012abe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8012ac0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012ac2:	e841 2300 	strex	r3, r2, [r1]
 8012ac6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8012ac8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d1e3      	bne.n	8012a96 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	2220      	movs	r2, #32
 8012ad2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	2200      	movs	r2, #0
 8012ada:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	2200      	movs	r2, #0
 8012ae0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	4a60      	ldr	r2, [pc, #384]	@ (8012c68 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8012ae8:	4293      	cmp	r3, r2
 8012aea:	d021      	beq.n	8012b30 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	685b      	ldr	r3, [r3, #4]
 8012af2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d01a      	beq.n	8012b30 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012b02:	e853 3f00 	ldrex	r3, [r3]
 8012b06:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8012b08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012b0a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8012b0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	461a      	mov	r2, r3
 8012b18:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012b1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012b1e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b20:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012b22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012b24:	e841 2300 	strex	r3, r2, [r1]
 8012b28:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8012b2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d1e4      	bne.n	8012afa <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012b34:	2b01      	cmp	r3, #1
 8012b36:	d130      	bne.n	8012b9a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b46:	e853 3f00 	ldrex	r3, [r3]
 8012b4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8012b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012b4e:	f023 0310 	bic.w	r3, r3, #16
 8012b52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	461a      	mov	r2, r3
 8012b5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012b60:	647b      	str	r3, [r7, #68]	@ 0x44
 8012b62:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012b66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012b68:	e841 2300 	strex	r3, r2, [r1]
 8012b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d1e4      	bne.n	8012b3e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	69db      	ldr	r3, [r3, #28]
 8012b7a:	f003 0310 	and.w	r3, r3, #16
 8012b7e:	2b10      	cmp	r3, #16
 8012b80:	d103      	bne.n	8012b8a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	2210      	movs	r2, #16
 8012b88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012b90:	4619      	mov	r1, r3
 8012b92:	6878      	ldr	r0, [r7, #4]
 8012b94:	f7fd fd52 	bl	801063c <HAL_UARTEx_RxEventCallback>
 8012b98:	e002      	b.n	8012ba0 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012b9a:	6878      	ldr	r0, [r7, #4]
 8012b9c:	f7f0 fa40 	bl	8003020 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012ba0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d006      	beq.n	8012bb6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8012ba8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012bac:	f003 0320 	and.w	r3, r3, #32
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	f47f aecd 	bne.w	8012950 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012bbc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012bc0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d049      	beq.n	8012c5c <UART_RxISR_16BIT_FIFOEN+0x354>
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8012bce:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8012bd2:	429a      	cmp	r2, r3
 8012bd4:	d242      	bcs.n	8012c5c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	3308      	adds	r3, #8
 8012bdc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012be0:	e853 3f00 	ldrex	r3, [r3]
 8012be4:	623b      	str	r3, [r7, #32]
   return(result);
 8012be6:	6a3b      	ldr	r3, [r7, #32]
 8012be8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8012bec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	3308      	adds	r3, #8
 8012bf6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012bfa:	633a      	str	r2, [r7, #48]	@ 0x30
 8012bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012bfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012c00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012c02:	e841 2300 	strex	r3, r2, [r1]
 8012c06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d1e3      	bne.n	8012bd6 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	4a16      	ldr	r2, [pc, #88]	@ (8012c6c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012c12:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c1a:	693b      	ldr	r3, [r7, #16]
 8012c1c:	e853 3f00 	ldrex	r3, [r3]
 8012c20:	60fb      	str	r3, [r7, #12]
   return(result);
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	f043 0320 	orr.w	r3, r3, #32
 8012c28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	461a      	mov	r2, r3
 8012c32:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012c36:	61fb      	str	r3, [r7, #28]
 8012c38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c3a:	69b9      	ldr	r1, [r7, #24]
 8012c3c:	69fa      	ldr	r2, [r7, #28]
 8012c3e:	e841 2300 	strex	r3, r2, [r1]
 8012c42:	617b      	str	r3, [r7, #20]
   return(result);
 8012c44:	697b      	ldr	r3, [r7, #20]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d1e4      	bne.n	8012c14 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012c4a:	e007      	b.n	8012c5c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	699a      	ldr	r2, [r3, #24]
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	f042 0208 	orr.w	r2, r2, #8
 8012c5a:	619a      	str	r2, [r3, #24]
}
 8012c5c:	bf00      	nop
 8012c5e:	37b8      	adds	r7, #184	@ 0xb8
 8012c60:	46bd      	mov	sp, r7
 8012c62:	bd80      	pop	{r7, pc}
 8012c64:	effffffe 	.word	0xeffffffe
 8012c68:	58000c00 	.word	0x58000c00
 8012c6c:	080123f1 	.word	0x080123f1

08012c70 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012c70:	b480      	push	{r7}
 8012c72:	b083      	sub	sp, #12
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012c78:	bf00      	nop
 8012c7a:	370c      	adds	r7, #12
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c82:	4770      	bx	lr

08012c84 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012c84:	b480      	push	{r7}
 8012c86:	b083      	sub	sp, #12
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012c8c:	bf00      	nop
 8012c8e:	370c      	adds	r7, #12
 8012c90:	46bd      	mov	sp, r7
 8012c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c96:	4770      	bx	lr

08012c98 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012c98:	b480      	push	{r7}
 8012c9a:	b083      	sub	sp, #12
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012ca0:	bf00      	nop
 8012ca2:	370c      	adds	r7, #12
 8012ca4:	46bd      	mov	sp, r7
 8012ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012caa:	4770      	bx	lr

08012cac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012cac:	b480      	push	{r7}
 8012cae:	b085      	sub	sp, #20
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012cba:	2b01      	cmp	r3, #1
 8012cbc:	d101      	bne.n	8012cc2 <HAL_UARTEx_DisableFifoMode+0x16>
 8012cbe:	2302      	movs	r3, #2
 8012cc0:	e027      	b.n	8012d12 <HAL_UARTEx_DisableFifoMode+0x66>
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	2201      	movs	r2, #1
 8012cc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	2224      	movs	r2, #36	@ 0x24
 8012cce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	681a      	ldr	r2, [r3, #0]
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	f022 0201 	bic.w	r2, r2, #1
 8012ce8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8012cf0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	2200      	movs	r2, #0
 8012cf6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	68fa      	ldr	r2, [r7, #12]
 8012cfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	2220      	movs	r2, #32
 8012d04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	2200      	movs	r2, #0
 8012d0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012d10:	2300      	movs	r3, #0
}
 8012d12:	4618      	mov	r0, r3
 8012d14:	3714      	adds	r7, #20
 8012d16:	46bd      	mov	sp, r7
 8012d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d1c:	4770      	bx	lr

08012d1e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012d1e:	b580      	push	{r7, lr}
 8012d20:	b084      	sub	sp, #16
 8012d22:	af00      	add	r7, sp, #0
 8012d24:	6078      	str	r0, [r7, #4]
 8012d26:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012d2e:	2b01      	cmp	r3, #1
 8012d30:	d101      	bne.n	8012d36 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012d32:	2302      	movs	r3, #2
 8012d34:	e02d      	b.n	8012d92 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	2201      	movs	r2, #1
 8012d3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	2224      	movs	r2, #36	@ 0x24
 8012d42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	681a      	ldr	r2, [r3, #0]
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	f022 0201 	bic.w	r2, r2, #1
 8012d5c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	689b      	ldr	r3, [r3, #8]
 8012d64:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	683a      	ldr	r2, [r7, #0]
 8012d6e:	430a      	orrs	r2, r1
 8012d70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012d72:	6878      	ldr	r0, [r7, #4]
 8012d74:	f000 f850 	bl	8012e18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	68fa      	ldr	r2, [r7, #12]
 8012d7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	2220      	movs	r2, #32
 8012d84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	2200      	movs	r2, #0
 8012d8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012d90:	2300      	movs	r3, #0
}
 8012d92:	4618      	mov	r0, r3
 8012d94:	3710      	adds	r7, #16
 8012d96:	46bd      	mov	sp, r7
 8012d98:	bd80      	pop	{r7, pc}

08012d9a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012d9a:	b580      	push	{r7, lr}
 8012d9c:	b084      	sub	sp, #16
 8012d9e:	af00      	add	r7, sp, #0
 8012da0:	6078      	str	r0, [r7, #4]
 8012da2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012daa:	2b01      	cmp	r3, #1
 8012dac:	d101      	bne.n	8012db2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012dae:	2302      	movs	r3, #2
 8012db0:	e02d      	b.n	8012e0e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	2201      	movs	r2, #1
 8012db6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	2224      	movs	r2, #36	@ 0x24
 8012dbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	681a      	ldr	r2, [r3, #0]
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	f022 0201 	bic.w	r2, r2, #1
 8012dd8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	689b      	ldr	r3, [r3, #8]
 8012de0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	683a      	ldr	r2, [r7, #0]
 8012dea:	430a      	orrs	r2, r1
 8012dec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012dee:	6878      	ldr	r0, [r7, #4]
 8012df0:	f000 f812 	bl	8012e18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	68fa      	ldr	r2, [r7, #12]
 8012dfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	2220      	movs	r2, #32
 8012e00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	2200      	movs	r2, #0
 8012e08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012e0c:	2300      	movs	r3, #0
}
 8012e0e:	4618      	mov	r0, r3
 8012e10:	3710      	adds	r7, #16
 8012e12:	46bd      	mov	sp, r7
 8012e14:	bd80      	pop	{r7, pc}
	...

08012e18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012e18:	b480      	push	{r7}
 8012e1a:	b085      	sub	sp, #20
 8012e1c:	af00      	add	r7, sp, #0
 8012e1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d108      	bne.n	8012e3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	2201      	movs	r2, #1
 8012e2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	2201      	movs	r2, #1
 8012e34:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012e38:	e031      	b.n	8012e9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012e3a:	2310      	movs	r3, #16
 8012e3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012e3e:	2310      	movs	r3, #16
 8012e40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	689b      	ldr	r3, [r3, #8]
 8012e48:	0e5b      	lsrs	r3, r3, #25
 8012e4a:	b2db      	uxtb	r3, r3
 8012e4c:	f003 0307 	and.w	r3, r3, #7
 8012e50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	689b      	ldr	r3, [r3, #8]
 8012e58:	0f5b      	lsrs	r3, r3, #29
 8012e5a:	b2db      	uxtb	r3, r3
 8012e5c:	f003 0307 	and.w	r3, r3, #7
 8012e60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012e62:	7bbb      	ldrb	r3, [r7, #14]
 8012e64:	7b3a      	ldrb	r2, [r7, #12]
 8012e66:	4911      	ldr	r1, [pc, #68]	@ (8012eac <UARTEx_SetNbDataToProcess+0x94>)
 8012e68:	5c8a      	ldrb	r2, [r1, r2]
 8012e6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012e6e:	7b3a      	ldrb	r2, [r7, #12]
 8012e70:	490f      	ldr	r1, [pc, #60]	@ (8012eb0 <UARTEx_SetNbDataToProcess+0x98>)
 8012e72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012e74:	fb93 f3f2 	sdiv	r3, r3, r2
 8012e78:	b29a      	uxth	r2, r3
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012e80:	7bfb      	ldrb	r3, [r7, #15]
 8012e82:	7b7a      	ldrb	r2, [r7, #13]
 8012e84:	4909      	ldr	r1, [pc, #36]	@ (8012eac <UARTEx_SetNbDataToProcess+0x94>)
 8012e86:	5c8a      	ldrb	r2, [r1, r2]
 8012e88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012e8c:	7b7a      	ldrb	r2, [r7, #13]
 8012e8e:	4908      	ldr	r1, [pc, #32]	@ (8012eb0 <UARTEx_SetNbDataToProcess+0x98>)
 8012e90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012e92:	fb93 f3f2 	sdiv	r3, r3, r2
 8012e96:	b29a      	uxth	r2, r3
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8012e9e:	bf00      	nop
 8012ea0:	3714      	adds	r7, #20
 8012ea2:	46bd      	mov	sp, r7
 8012ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea8:	4770      	bx	lr
 8012eaa:	bf00      	nop
 8012eac:	08019d84 	.word	0x08019d84
 8012eb0:	08019d8c 	.word	0x08019d8c

08012eb4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8012eb8:	4904      	ldr	r1, [pc, #16]	@ (8012ecc <MX_FATFS_Init+0x18>)
 8012eba:	4805      	ldr	r0, [pc, #20]	@ (8012ed0 <MX_FATFS_Init+0x1c>)
 8012ebc:	f001 fcd0 	bl	8014860 <FATFS_LinkDriver>
 8012ec0:	4603      	mov	r3, r0
 8012ec2:	461a      	mov	r2, r3
 8012ec4:	4b03      	ldr	r3, [pc, #12]	@ (8012ed4 <MX_FATFS_Init+0x20>)
 8012ec6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8012ec8:	bf00      	nop
 8012eca:	bd80      	pop	{r7, pc}
 8012ecc:	24002a8c 	.word	0x24002a8c
 8012ed0:	240000ac 	.word	0x240000ac
 8012ed4:	24002a88 	.word	0x24002a88

08012ed8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8012ed8:	b480      	push	{r7}
 8012eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8012edc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8012ede:	4618      	mov	r0, r3
 8012ee0:	46bd      	mov	sp, r7
 8012ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ee6:	4770      	bx	lr

08012ee8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b082      	sub	sp, #8
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	4603      	mov	r3, r0
 8012ef0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8012ef2:	79fb      	ldrb	r3, [r7, #7]
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f000 f9fd 	bl	80132f4 <SD_disk_initialize>
 8012efa:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8012efc:	4618      	mov	r0, r3
 8012efe:	3708      	adds	r7, #8
 8012f00:	46bd      	mov	sp, r7
 8012f02:	bd80      	pop	{r7, pc}

08012f04 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	b082      	sub	sp, #8
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8012f0e:	79fb      	ldrb	r3, [r7, #7]
 8012f10:	4618      	mov	r0, r3
 8012f12:	f000 fad5 	bl	80134c0 <SD_disk_status>
 8012f16:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8012f18:	4618      	mov	r0, r3
 8012f1a:	3708      	adds	r7, #8
 8012f1c:	46bd      	mov	sp, r7
 8012f1e:	bd80      	pop	{r7, pc}

08012f20 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8012f20:	b580      	push	{r7, lr}
 8012f22:	b084      	sub	sp, #16
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	60b9      	str	r1, [r7, #8]
 8012f28:	607a      	str	r2, [r7, #4]
 8012f2a:	603b      	str	r3, [r7, #0]
 8012f2c:	4603      	mov	r3, r0
 8012f2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8012f30:	7bf8      	ldrb	r0, [r7, #15]
 8012f32:	683b      	ldr	r3, [r7, #0]
 8012f34:	687a      	ldr	r2, [r7, #4]
 8012f36:	68b9      	ldr	r1, [r7, #8]
 8012f38:	f000 fad8 	bl	80134ec <SD_disk_read>
 8012f3c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8012f3e:	4618      	mov	r0, r3
 8012f40:	3710      	adds	r7, #16
 8012f42:	46bd      	mov	sp, r7
 8012f44:	bd80      	pop	{r7, pc}

08012f46 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8012f46:	b580      	push	{r7, lr}
 8012f48:	b084      	sub	sp, #16
 8012f4a:	af00      	add	r7, sp, #0
 8012f4c:	60b9      	str	r1, [r7, #8]
 8012f4e:	607a      	str	r2, [r7, #4]
 8012f50:	603b      	str	r3, [r7, #0]
 8012f52:	4603      	mov	r3, r0
 8012f54:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8012f56:	7bf8      	ldrb	r0, [r7, #15]
 8012f58:	683b      	ldr	r3, [r7, #0]
 8012f5a:	687a      	ldr	r2, [r7, #4]
 8012f5c:	68b9      	ldr	r1, [r7, #8]
 8012f5e:	f000 fb2f 	bl	80135c0 <SD_disk_write>
 8012f62:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8012f64:	4618      	mov	r0, r3
 8012f66:	3710      	adds	r7, #16
 8012f68:	46bd      	mov	sp, r7
 8012f6a:	bd80      	pop	{r7, pc}

08012f6c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8012f6c:	b580      	push	{r7, lr}
 8012f6e:	b082      	sub	sp, #8
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	4603      	mov	r3, r0
 8012f74:	603a      	str	r2, [r7, #0]
 8012f76:	71fb      	strb	r3, [r7, #7]
 8012f78:	460b      	mov	r3, r1
 8012f7a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8012f7c:	79b9      	ldrb	r1, [r7, #6]
 8012f7e:	79fb      	ldrb	r3, [r7, #7]
 8012f80:	683a      	ldr	r2, [r7, #0]
 8012f82:	4618      	mov	r0, r3
 8012f84:	f000 fba0 	bl	80136c8 <SD_disk_ioctl>
 8012f88:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	3708      	adds	r7, #8
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	bd80      	pop	{r7, pc}
	...

08012f94 <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 8012f94:	b580      	push	{r7, lr}
 8012f96:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8012f98:	2200      	movs	r2, #0
 8012f9a:	2110      	movs	r1, #16
 8012f9c:	4802      	ldr	r0, [pc, #8]	@ (8012fa8 <SELECT+0x14>)
 8012f9e:	f7f7 f9b9 	bl	800a314 <HAL_GPIO_WritePin>
}
 8012fa2:	bf00      	nop
 8012fa4:	bd80      	pop	{r7, pc}
 8012fa6:	bf00      	nop
 8012fa8:	58020000 	.word	0x58020000

08012fac <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8012fac:	b580      	push	{r7, lr}
 8012fae:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8012fb0:	2201      	movs	r2, #1
 8012fb2:	2110      	movs	r1, #16
 8012fb4:	4802      	ldr	r0, [pc, #8]	@ (8012fc0 <DESELECT+0x14>)
 8012fb6:	f7f7 f9ad 	bl	800a314 <HAL_GPIO_WritePin>
}
 8012fba:	bf00      	nop
 8012fbc:	bd80      	pop	{r7, pc}
 8012fbe:	bf00      	nop
 8012fc0:	58020000 	.word	0x58020000

08012fc4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b082      	sub	sp, #8
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	4603      	mov	r3, r0
 8012fcc:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8012fce:	bf00      	nop
 8012fd0:	4b08      	ldr	r3, [pc, #32]	@ (8012ff4 <SPI_TxByte+0x30>)
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	695b      	ldr	r3, [r3, #20]
 8012fd6:	f003 0302 	and.w	r3, r3, #2
 8012fda:	2b02      	cmp	r3, #2
 8012fdc:	d1f8      	bne.n	8012fd0 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8012fde:	1df9      	adds	r1, r7, #7
 8012fe0:	2364      	movs	r3, #100	@ 0x64
 8012fe2:	2201      	movs	r2, #1
 8012fe4:	4803      	ldr	r0, [pc, #12]	@ (8012ff4 <SPI_TxByte+0x30>)
 8012fe6:	f7fa fa21 	bl	800d42c <HAL_SPI_Transmit>
}
 8012fea:	bf00      	nop
 8012fec:	3708      	adds	r7, #8
 8012fee:	46bd      	mov	sp, r7
 8012ff0:	bd80      	pop	{r7, pc}
 8012ff2:	bf00      	nop
 8012ff4:	24000ec8 	.word	0x24000ec8

08012ff8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b082      	sub	sp, #8
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	6078      	str	r0, [r7, #4]
 8013000:	460b      	mov	r3, r1
 8013002:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8013004:	bf00      	nop
 8013006:	4b08      	ldr	r3, [pc, #32]	@ (8013028 <SPI_TxBuffer+0x30>)
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	695b      	ldr	r3, [r3, #20]
 801300c:	f003 0302 	and.w	r3, r3, #2
 8013010:	2b02      	cmp	r3, #2
 8013012:	d1f8      	bne.n	8013006 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8013014:	887a      	ldrh	r2, [r7, #2]
 8013016:	2364      	movs	r3, #100	@ 0x64
 8013018:	6879      	ldr	r1, [r7, #4]
 801301a:	4803      	ldr	r0, [pc, #12]	@ (8013028 <SPI_TxBuffer+0x30>)
 801301c:	f7fa fa06 	bl	800d42c <HAL_SPI_Transmit>
}
 8013020:	bf00      	nop
 8013022:	3708      	adds	r7, #8
 8013024:	46bd      	mov	sp, r7
 8013026:	bd80      	pop	{r7, pc}
 8013028:	24000ec8 	.word	0x24000ec8

0801302c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 801302c:	b580      	push	{r7, lr}
 801302e:	b084      	sub	sp, #16
 8013030:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8013032:	23ff      	movs	r3, #255	@ 0xff
 8013034:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8013036:	bf00      	nop
 8013038:	4b09      	ldr	r3, [pc, #36]	@ (8013060 <SPI_RxByte+0x34>)
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	695b      	ldr	r3, [r3, #20]
 801303e:	f003 0302 	and.w	r3, r3, #2
 8013042:	2b02      	cmp	r3, #2
 8013044:	d1f8      	bne.n	8013038 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8013046:	1dba      	adds	r2, r7, #6
 8013048:	1df9      	adds	r1, r7, #7
 801304a:	2364      	movs	r3, #100	@ 0x64
 801304c:	9300      	str	r3, [sp, #0]
 801304e:	2301      	movs	r3, #1
 8013050:	4803      	ldr	r0, [pc, #12]	@ (8013060 <SPI_RxByte+0x34>)
 8013052:	f7fa fe4b 	bl	800dcec <HAL_SPI_TransmitReceive>
  return data;
 8013056:	79bb      	ldrb	r3, [r7, #6]
}
 8013058:	4618      	mov	r0, r3
 801305a:	3708      	adds	r7, #8
 801305c:	46bd      	mov	sp, r7
 801305e:	bd80      	pop	{r7, pc}
 8013060:	24000ec8 	.word	0x24000ec8

08013064 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8013064:	b580      	push	{r7, lr}
 8013066:	b082      	sub	sp, #8
 8013068:	af00      	add	r7, sp, #0
 801306a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 801306c:	f7ff ffde 	bl	801302c <SPI_RxByte>
 8013070:	4603      	mov	r3, r0
 8013072:	461a      	mov	r2, r3
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	701a      	strb	r2, [r3, #0]
}
 8013078:	bf00      	nop
 801307a:	3708      	adds	r7, #8
 801307c:	46bd      	mov	sp, r7
 801307e:	bd80      	pop	{r7, pc}

08013080 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8013080:	b580      	push	{r7, lr}
 8013082:	b082      	sub	sp, #8
 8013084:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 8013086:	4b0a      	ldr	r3, [pc, #40]	@ (80130b0 <SD_ReadyWait+0x30>)
 8013088:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 801308c:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 801308e:	f7ff ffcd 	bl	801302c <SPI_RxByte>
 8013092:	4603      	mov	r3, r0
 8013094:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8013096:	79fb      	ldrb	r3, [r7, #7]
 8013098:	2bff      	cmp	r3, #255	@ 0xff
 801309a:	d003      	beq.n	80130a4 <SD_ReadyWait+0x24>
 801309c:	4b04      	ldr	r3, [pc, #16]	@ (80130b0 <SD_ReadyWait+0x30>)
 801309e:	881b      	ldrh	r3, [r3, #0]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d1f4      	bne.n	801308e <SD_ReadyWait+0xe>
  return res;
 80130a4:	79fb      	ldrb	r3, [r7, #7]
}
 80130a6:	4618      	mov	r0, r3
 80130a8:	3708      	adds	r7, #8
 80130aa:	46bd      	mov	sp, r7
 80130ac:	bd80      	pop	{r7, pc}
 80130ae:	bf00      	nop
 80130b0:	24002a92 	.word	0x24002a92

080130b4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b084      	sub	sp, #16
 80130b8:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 80130ba:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80130be:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 80130c0:	f7ff ff74 	bl	8012fac <DESELECT>
  for(int i = 0; i < 10; i++)
 80130c4:	2300      	movs	r3, #0
 80130c6:	60bb      	str	r3, [r7, #8]
 80130c8:	e005      	b.n	80130d6 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80130ca:	20ff      	movs	r0, #255	@ 0xff
 80130cc:	f7ff ff7a 	bl	8012fc4 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80130d0:	68bb      	ldr	r3, [r7, #8]
 80130d2:	3301      	adds	r3, #1
 80130d4:	60bb      	str	r3, [r7, #8]
 80130d6:	68bb      	ldr	r3, [r7, #8]
 80130d8:	2b09      	cmp	r3, #9
 80130da:	ddf6      	ble.n	80130ca <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 80130dc:	f7ff ff5a 	bl	8012f94 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 80130e0:	2340      	movs	r3, #64	@ 0x40
 80130e2:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 80130e4:	2300      	movs	r3, #0
 80130e6:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 80130e8:	2300      	movs	r3, #0
 80130ea:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 80130ec:	2300      	movs	r3, #0
 80130ee:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 80130f0:	2300      	movs	r3, #0
 80130f2:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 80130f4:	2395      	movs	r3, #149	@ 0x95
 80130f6:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 80130f8:	463b      	mov	r3, r7
 80130fa:	2106      	movs	r1, #6
 80130fc:	4618      	mov	r0, r3
 80130fe:	f7ff ff7b 	bl	8012ff8 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8013102:	e002      	b.n	801310a <SD_PowerOn+0x56>
  {
    cnt--;
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	3b01      	subs	r3, #1
 8013108:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 801310a:	f7ff ff8f 	bl	801302c <SPI_RxByte>
 801310e:	4603      	mov	r3, r0
 8013110:	2b01      	cmp	r3, #1
 8013112:	d002      	beq.n	801311a <SD_PowerOn+0x66>
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d1f4      	bne.n	8013104 <SD_PowerOn+0x50>
  }
  DESELECT();
 801311a:	f7ff ff47 	bl	8012fac <DESELECT>
  SPI_TxByte(0XFF);
 801311e:	20ff      	movs	r0, #255	@ 0xff
 8013120:	f7ff ff50 	bl	8012fc4 <SPI_TxByte>
  PowerFlag = 1;
 8013124:	4b03      	ldr	r3, [pc, #12]	@ (8013134 <SD_PowerOn+0x80>)
 8013126:	2201      	movs	r2, #1
 8013128:	701a      	strb	r2, [r3, #0]
}
 801312a:	bf00      	nop
 801312c:	3710      	adds	r7, #16
 801312e:	46bd      	mov	sp, r7
 8013130:	bd80      	pop	{r7, pc}
 8013132:	bf00      	nop
 8013134:	24002a95 	.word	0x24002a95

08013138 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8013138:	b480      	push	{r7}
 801313a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 801313c:	4b03      	ldr	r3, [pc, #12]	@ (801314c <SD_PowerOff+0x14>)
 801313e:	2200      	movs	r2, #0
 8013140:	701a      	strb	r2, [r3, #0]
}
 8013142:	bf00      	nop
 8013144:	46bd      	mov	sp, r7
 8013146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801314a:	4770      	bx	lr
 801314c:	24002a95 	.word	0x24002a95

08013150 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8013150:	b480      	push	{r7}
 8013152:	af00      	add	r7, sp, #0
  return PowerFlag;
 8013154:	4b03      	ldr	r3, [pc, #12]	@ (8013164 <SD_CheckPower+0x14>)
 8013156:	781b      	ldrb	r3, [r3, #0]
}
 8013158:	4618      	mov	r0, r3
 801315a:	46bd      	mov	sp, r7
 801315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013160:	4770      	bx	lr
 8013162:	bf00      	nop
 8013164:	24002a95 	.word	0x24002a95

08013168 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8013168:	b580      	push	{r7, lr}
 801316a:	b084      	sub	sp, #16
 801316c:	af00      	add	r7, sp, #0
 801316e:	6078      	str	r0, [r7, #4]
 8013170:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 8013172:	4b13      	ldr	r3, [pc, #76]	@ (80131c0 <SD_RxDataBlock+0x58>)
 8013174:	22c8      	movs	r2, #200	@ 0xc8
 8013176:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8013178:	f7ff ff58 	bl	801302c <SPI_RxByte>
 801317c:	4603      	mov	r3, r0
 801317e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8013180:	7bfb      	ldrb	r3, [r7, #15]
 8013182:	2bff      	cmp	r3, #255	@ 0xff
 8013184:	d103      	bne.n	801318e <SD_RxDataBlock+0x26>
 8013186:	4b0e      	ldr	r3, [pc, #56]	@ (80131c0 <SD_RxDataBlock+0x58>)
 8013188:	881b      	ldrh	r3, [r3, #0]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d1f4      	bne.n	8013178 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 801318e:	7bfb      	ldrb	r3, [r7, #15]
 8013190:	2bfe      	cmp	r3, #254	@ 0xfe
 8013192:	d001      	beq.n	8013198 <SD_RxDataBlock+0x30>
 8013194:	2300      	movs	r3, #0
 8013196:	e00f      	b.n	80131b8 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	1c5a      	adds	r2, r3, #1
 801319c:	607a      	str	r2, [r7, #4]
 801319e:	4618      	mov	r0, r3
 80131a0:	f7ff ff60 	bl	8013064 <SPI_RxBytePtr>
  } while(len--);
 80131a4:	683b      	ldr	r3, [r7, #0]
 80131a6:	1e5a      	subs	r2, r3, #1
 80131a8:	603a      	str	r2, [r7, #0]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d1f4      	bne.n	8013198 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 80131ae:	f7ff ff3d 	bl	801302c <SPI_RxByte>
  SPI_RxByte();
 80131b2:	f7ff ff3b 	bl	801302c <SPI_RxByte>
  return TRUE;
 80131b6:	2301      	movs	r3, #1
}
 80131b8:	4618      	mov	r0, r3
 80131ba:	3710      	adds	r7, #16
 80131bc:	46bd      	mov	sp, r7
 80131be:	bd80      	pop	{r7, pc}
 80131c0:	24002a90 	.word	0x24002a90

080131c4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80131c4:	b580      	push	{r7, lr}
 80131c6:	b084      	sub	sp, #16
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	6078      	str	r0, [r7, #4]
 80131cc:	460b      	mov	r3, r1
 80131ce:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 80131d0:	2300      	movs	r3, #0
 80131d2:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 80131d4:	f7ff ff54 	bl	8013080 <SD_ReadyWait>
 80131d8:	4603      	mov	r3, r0
 80131da:	2bff      	cmp	r3, #255	@ 0xff
 80131dc:	d001      	beq.n	80131e2 <SD_TxDataBlock+0x1e>
 80131de:	2300      	movs	r3, #0
 80131e0:	e02f      	b.n	8013242 <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 80131e2:	78fb      	ldrb	r3, [r7, #3]
 80131e4:	4618      	mov	r0, r3
 80131e6:	f7ff feed 	bl	8012fc4 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 80131ea:	78fb      	ldrb	r3, [r7, #3]
 80131ec:	2bfd      	cmp	r3, #253	@ 0xfd
 80131ee:	d020      	beq.n	8013232 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 80131f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80131f4:	6878      	ldr	r0, [r7, #4]
 80131f6:	f7ff feff 	bl	8012ff8 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 80131fa:	f7ff ff17 	bl	801302c <SPI_RxByte>
    SPI_RxByte();
 80131fe:	f7ff ff15 	bl	801302c <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 8013202:	e00b      	b.n	801321c <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8013204:	f7ff ff12 	bl	801302c <SPI_RxByte>
 8013208:	4603      	mov	r3, r0
 801320a:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 801320c:	7bfb      	ldrb	r3, [r7, #15]
 801320e:	f003 031f 	and.w	r3, r3, #31
 8013212:	2b05      	cmp	r3, #5
 8013214:	d006      	beq.n	8013224 <SD_TxDataBlock+0x60>
      i++;
 8013216:	7bbb      	ldrb	r3, [r7, #14]
 8013218:	3301      	adds	r3, #1
 801321a:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 801321c:	7bbb      	ldrb	r3, [r7, #14]
 801321e:	2b40      	cmp	r3, #64	@ 0x40
 8013220:	d9f0      	bls.n	8013204 <SD_TxDataBlock+0x40>
 8013222:	e000      	b.n	8013226 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8013224:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8013226:	bf00      	nop
 8013228:	f7ff ff00 	bl	801302c <SPI_RxByte>
 801322c:	4603      	mov	r3, r0
 801322e:	2b00      	cmp	r3, #0
 8013230:	d0fa      	beq.n	8013228 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8013232:	7bfb      	ldrb	r3, [r7, #15]
 8013234:	f003 031f 	and.w	r3, r3, #31
 8013238:	2b05      	cmp	r3, #5
 801323a:	d101      	bne.n	8013240 <SD_TxDataBlock+0x7c>
 801323c:	2301      	movs	r3, #1
 801323e:	e000      	b.n	8013242 <SD_TxDataBlock+0x7e>

  return FALSE;
 8013240:	2300      	movs	r3, #0
}
 8013242:	4618      	mov	r0, r3
 8013244:	3710      	adds	r7, #16
 8013246:	46bd      	mov	sp, r7
 8013248:	bd80      	pop	{r7, pc}

0801324a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 801324a:	b580      	push	{r7, lr}
 801324c:	b084      	sub	sp, #16
 801324e:	af00      	add	r7, sp, #0
 8013250:	4603      	mov	r3, r0
 8013252:	6039      	str	r1, [r7, #0]
 8013254:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8013256:	f7ff ff13 	bl	8013080 <SD_ReadyWait>
 801325a:	4603      	mov	r3, r0
 801325c:	2bff      	cmp	r3, #255	@ 0xff
 801325e:	d001      	beq.n	8013264 <SD_SendCmd+0x1a>
 8013260:	23ff      	movs	r3, #255	@ 0xff
 8013262:	e042      	b.n	80132ea <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8013264:	79fb      	ldrb	r3, [r7, #7]
 8013266:	4618      	mov	r0, r3
 8013268:	f7ff feac 	bl	8012fc4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 801326c:	683b      	ldr	r3, [r7, #0]
 801326e:	0e1b      	lsrs	r3, r3, #24
 8013270:	b2db      	uxtb	r3, r3
 8013272:	4618      	mov	r0, r3
 8013274:	f7ff fea6 	bl	8012fc4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8013278:	683b      	ldr	r3, [r7, #0]
 801327a:	0c1b      	lsrs	r3, r3, #16
 801327c:	b2db      	uxtb	r3, r3
 801327e:	4618      	mov	r0, r3
 8013280:	f7ff fea0 	bl	8012fc4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8013284:	683b      	ldr	r3, [r7, #0]
 8013286:	0a1b      	lsrs	r3, r3, #8
 8013288:	b2db      	uxtb	r3, r3
 801328a:	4618      	mov	r0, r3
 801328c:	f7ff fe9a 	bl	8012fc4 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8013290:	683b      	ldr	r3, [r7, #0]
 8013292:	b2db      	uxtb	r3, r3
 8013294:	4618      	mov	r0, r3
 8013296:	f7ff fe95 	bl	8012fc4 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 801329a:	79fb      	ldrb	r3, [r7, #7]
 801329c:	2b40      	cmp	r3, #64	@ 0x40
 801329e:	d102      	bne.n	80132a6 <SD_SendCmd+0x5c>
 80132a0:	2395      	movs	r3, #149	@ 0x95
 80132a2:	73fb      	strb	r3, [r7, #15]
 80132a4:	e007      	b.n	80132b6 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 80132a6:	79fb      	ldrb	r3, [r7, #7]
 80132a8:	2b48      	cmp	r3, #72	@ 0x48
 80132aa:	d102      	bne.n	80132b2 <SD_SendCmd+0x68>
 80132ac:	2387      	movs	r3, #135	@ 0x87
 80132ae:	73fb      	strb	r3, [r7, #15]
 80132b0:	e001      	b.n	80132b6 <SD_SendCmd+0x6c>
  else crc = 1;
 80132b2:	2301      	movs	r3, #1
 80132b4:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 80132b6:	7bfb      	ldrb	r3, [r7, #15]
 80132b8:	4618      	mov	r0, r3
 80132ba:	f7ff fe83 	bl	8012fc4 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 80132be:	79fb      	ldrb	r3, [r7, #7]
 80132c0:	2b4c      	cmp	r3, #76	@ 0x4c
 80132c2:	d101      	bne.n	80132c8 <SD_SendCmd+0x7e>
 80132c4:	f7ff feb2 	bl	801302c <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 80132c8:	230a      	movs	r3, #10
 80132ca:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 80132cc:	f7ff feae 	bl	801302c <SPI_RxByte>
 80132d0:	4603      	mov	r3, r0
 80132d2:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80132d4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	da05      	bge.n	80132e8 <SD_SendCmd+0x9e>
 80132dc:	7bbb      	ldrb	r3, [r7, #14]
 80132de:	3b01      	subs	r3, #1
 80132e0:	73bb      	strb	r3, [r7, #14]
 80132e2:	7bbb      	ldrb	r3, [r7, #14]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d1f1      	bne.n	80132cc <SD_SendCmd+0x82>

  return res;
 80132e8:	7b7b      	ldrb	r3, [r7, #13]
}
 80132ea:	4618      	mov	r0, r3
 80132ec:	3710      	adds	r7, #16
 80132ee:	46bd      	mov	sp, r7
 80132f0:	bd80      	pop	{r7, pc}
	...

080132f4 <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80132f4:	b590      	push	{r4, r7, lr}
 80132f6:	b085      	sub	sp, #20
 80132f8:	af00      	add	r7, sp, #0
 80132fa:	4603      	mov	r3, r0
 80132fc:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 80132fe:	79fb      	ldrb	r3, [r7, #7]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d001      	beq.n	8013308 <SD_disk_initialize+0x14>
 8013304:	2301      	movs	r3, #1
 8013306:	e0d1      	b.n	80134ac <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8013308:	4b6a      	ldr	r3, [pc, #424]	@ (80134b4 <SD_disk_initialize+0x1c0>)
 801330a:	781b      	ldrb	r3, [r3, #0]
 801330c:	b2db      	uxtb	r3, r3
 801330e:	f003 0302 	and.w	r3, r3, #2
 8013312:	2b00      	cmp	r3, #0
 8013314:	d003      	beq.n	801331e <SD_disk_initialize+0x2a>
 8013316:	4b67      	ldr	r3, [pc, #412]	@ (80134b4 <SD_disk_initialize+0x1c0>)
 8013318:	781b      	ldrb	r3, [r3, #0]
 801331a:	b2db      	uxtb	r3, r3
 801331c:	e0c6      	b.n	80134ac <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 801331e:	f7ff fec9 	bl	80130b4 <SD_PowerOn>
  /* slave select */
  SELECT();
 8013322:	f7ff fe37 	bl	8012f94 <SELECT>
  /* check disk type */
  type = 0;
 8013326:	2300      	movs	r3, #0
 8013328:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 801332a:	2100      	movs	r1, #0
 801332c:	2040      	movs	r0, #64	@ 0x40
 801332e:	f7ff ff8c 	bl	801324a <SD_SendCmd>
 8013332:	4603      	mov	r3, r0
 8013334:	2b01      	cmp	r3, #1
 8013336:	f040 80a1 	bne.w	801347c <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 801333a:	4b5f      	ldr	r3, [pc, #380]	@ (80134b8 <SD_disk_initialize+0x1c4>)
 801333c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8013340:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8013342:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8013346:	2048      	movs	r0, #72	@ 0x48
 8013348:	f7ff ff7f 	bl	801324a <SD_SendCmd>
 801334c:	4603      	mov	r3, r0
 801334e:	2b01      	cmp	r3, #1
 8013350:	d155      	bne.n	80133fe <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8013352:	2300      	movs	r3, #0
 8013354:	73fb      	strb	r3, [r7, #15]
 8013356:	e00c      	b.n	8013372 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8013358:	7bfc      	ldrb	r4, [r7, #15]
 801335a:	f7ff fe67 	bl	801302c <SPI_RxByte>
 801335e:	4603      	mov	r3, r0
 8013360:	461a      	mov	r2, r3
 8013362:	f104 0310 	add.w	r3, r4, #16
 8013366:	443b      	add	r3, r7
 8013368:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 801336c:	7bfb      	ldrb	r3, [r7, #15]
 801336e:	3301      	adds	r3, #1
 8013370:	73fb      	strb	r3, [r7, #15]
 8013372:	7bfb      	ldrb	r3, [r7, #15]
 8013374:	2b03      	cmp	r3, #3
 8013376:	d9ef      	bls.n	8013358 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8013378:	7abb      	ldrb	r3, [r7, #10]
 801337a:	2b01      	cmp	r3, #1
 801337c:	d17e      	bne.n	801347c <SD_disk_initialize+0x188>
 801337e:	7afb      	ldrb	r3, [r7, #11]
 8013380:	2baa      	cmp	r3, #170	@ 0xaa
 8013382:	d17b      	bne.n	801347c <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8013384:	2100      	movs	r1, #0
 8013386:	2077      	movs	r0, #119	@ 0x77
 8013388:	f7ff ff5f 	bl	801324a <SD_SendCmd>
 801338c:	4603      	mov	r3, r0
 801338e:	2b01      	cmp	r3, #1
 8013390:	d807      	bhi.n	80133a2 <SD_disk_initialize+0xae>
 8013392:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8013396:	2069      	movs	r0, #105	@ 0x69
 8013398:	f7ff ff57 	bl	801324a <SD_SendCmd>
 801339c:	4603      	mov	r3, r0
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d004      	beq.n	80133ac <SD_disk_initialize+0xb8>
        } while (Timer1);
 80133a2:	4b45      	ldr	r3, [pc, #276]	@ (80134b8 <SD_disk_initialize+0x1c4>)
 80133a4:	881b      	ldrh	r3, [r3, #0]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d1ec      	bne.n	8013384 <SD_disk_initialize+0x90>
 80133aa:	e000      	b.n	80133ae <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80133ac:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80133ae:	4b42      	ldr	r3, [pc, #264]	@ (80134b8 <SD_disk_initialize+0x1c4>)
 80133b0:	881b      	ldrh	r3, [r3, #0]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d062      	beq.n	801347c <SD_disk_initialize+0x188>
 80133b6:	2100      	movs	r1, #0
 80133b8:	207a      	movs	r0, #122	@ 0x7a
 80133ba:	f7ff ff46 	bl	801324a <SD_SendCmd>
 80133be:	4603      	mov	r3, r0
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d15b      	bne.n	801347c <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80133c4:	2300      	movs	r3, #0
 80133c6:	73fb      	strb	r3, [r7, #15]
 80133c8:	e00c      	b.n	80133e4 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 80133ca:	7bfc      	ldrb	r4, [r7, #15]
 80133cc:	f7ff fe2e 	bl	801302c <SPI_RxByte>
 80133d0:	4603      	mov	r3, r0
 80133d2:	461a      	mov	r2, r3
 80133d4:	f104 0310 	add.w	r3, r4, #16
 80133d8:	443b      	add	r3, r7
 80133da:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80133de:	7bfb      	ldrb	r3, [r7, #15]
 80133e0:	3301      	adds	r3, #1
 80133e2:	73fb      	strb	r3, [r7, #15]
 80133e4:	7bfb      	ldrb	r3, [r7, #15]
 80133e6:	2b03      	cmp	r3, #3
 80133e8:	d9ef      	bls.n	80133ca <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80133ea:	7a3b      	ldrb	r3, [r7, #8]
 80133ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d001      	beq.n	80133f8 <SD_disk_initialize+0x104>
 80133f4:	230c      	movs	r3, #12
 80133f6:	e000      	b.n	80133fa <SD_disk_initialize+0x106>
 80133f8:	2304      	movs	r3, #4
 80133fa:	73bb      	strb	r3, [r7, #14]
 80133fc:	e03e      	b.n	801347c <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80133fe:	2100      	movs	r1, #0
 8013400:	2077      	movs	r0, #119	@ 0x77
 8013402:	f7ff ff22 	bl	801324a <SD_SendCmd>
 8013406:	4603      	mov	r3, r0
 8013408:	2b01      	cmp	r3, #1
 801340a:	d808      	bhi.n	801341e <SD_disk_initialize+0x12a>
 801340c:	2100      	movs	r1, #0
 801340e:	2069      	movs	r0, #105	@ 0x69
 8013410:	f7ff ff1b 	bl	801324a <SD_SendCmd>
 8013414:	4603      	mov	r3, r0
 8013416:	2b01      	cmp	r3, #1
 8013418:	d801      	bhi.n	801341e <SD_disk_initialize+0x12a>
 801341a:	2302      	movs	r3, #2
 801341c:	e000      	b.n	8013420 <SD_disk_initialize+0x12c>
 801341e:	2301      	movs	r3, #1
 8013420:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 8013422:	7bbb      	ldrb	r3, [r7, #14]
 8013424:	2b02      	cmp	r3, #2
 8013426:	d10e      	bne.n	8013446 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8013428:	2100      	movs	r1, #0
 801342a:	2077      	movs	r0, #119	@ 0x77
 801342c:	f7ff ff0d 	bl	801324a <SD_SendCmd>
 8013430:	4603      	mov	r3, r0
 8013432:	2b01      	cmp	r3, #1
 8013434:	d80e      	bhi.n	8013454 <SD_disk_initialize+0x160>
 8013436:	2100      	movs	r1, #0
 8013438:	2069      	movs	r0, #105	@ 0x69
 801343a:	f7ff ff06 	bl	801324a <SD_SendCmd>
 801343e:	4603      	mov	r3, r0
 8013440:	2b00      	cmp	r3, #0
 8013442:	d107      	bne.n	8013454 <SD_disk_initialize+0x160>
 8013444:	e00c      	b.n	8013460 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8013446:	2100      	movs	r1, #0
 8013448:	2041      	movs	r0, #65	@ 0x41
 801344a:	f7ff fefe 	bl	801324a <SD_SendCmd>
 801344e:	4603      	mov	r3, r0
 8013450:	2b00      	cmp	r3, #0
 8013452:	d004      	beq.n	801345e <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 8013454:	4b18      	ldr	r3, [pc, #96]	@ (80134b8 <SD_disk_initialize+0x1c4>)
 8013456:	881b      	ldrh	r3, [r3, #0]
 8013458:	2b00      	cmp	r3, #0
 801345a:	d1e2      	bne.n	8013422 <SD_disk_initialize+0x12e>
 801345c:	e000      	b.n	8013460 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 801345e:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8013460:	4b15      	ldr	r3, [pc, #84]	@ (80134b8 <SD_disk_initialize+0x1c4>)
 8013462:	881b      	ldrh	r3, [r3, #0]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d007      	beq.n	8013478 <SD_disk_initialize+0x184>
 8013468:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801346c:	2050      	movs	r0, #80	@ 0x50
 801346e:	f7ff feec 	bl	801324a <SD_SendCmd>
 8013472:	4603      	mov	r3, r0
 8013474:	2b00      	cmp	r3, #0
 8013476:	d001      	beq.n	801347c <SD_disk_initialize+0x188>
 8013478:	2300      	movs	r3, #0
 801347a:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 801347c:	4a0f      	ldr	r2, [pc, #60]	@ (80134bc <SD_disk_initialize+0x1c8>)
 801347e:	7bbb      	ldrb	r3, [r7, #14]
 8013480:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 8013482:	f7ff fd93 	bl	8012fac <DESELECT>
  SPI_RxByte();
 8013486:	f7ff fdd1 	bl	801302c <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 801348a:	7bbb      	ldrb	r3, [r7, #14]
 801348c:	2b00      	cmp	r3, #0
 801348e:	d008      	beq.n	80134a2 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8013490:	4b08      	ldr	r3, [pc, #32]	@ (80134b4 <SD_disk_initialize+0x1c0>)
 8013492:	781b      	ldrb	r3, [r3, #0]
 8013494:	b2db      	uxtb	r3, r3
 8013496:	f023 0301 	bic.w	r3, r3, #1
 801349a:	b2da      	uxtb	r2, r3
 801349c:	4b05      	ldr	r3, [pc, #20]	@ (80134b4 <SD_disk_initialize+0x1c0>)
 801349e:	701a      	strb	r2, [r3, #0]
 80134a0:	e001      	b.n	80134a6 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80134a2:	f7ff fe49 	bl	8013138 <SD_PowerOff>
  }
  return Stat;
 80134a6:	4b03      	ldr	r3, [pc, #12]	@ (80134b4 <SD_disk_initialize+0x1c0>)
 80134a8:	781b      	ldrb	r3, [r3, #0]
 80134aa:	b2db      	uxtb	r3, r3
}
 80134ac:	4618      	mov	r0, r3
 80134ae:	3714      	adds	r7, #20
 80134b0:	46bd      	mov	sp, r7
 80134b2:	bd90      	pop	{r4, r7, pc}
 80134b4:	240000c0 	.word	0x240000c0
 80134b8:	24002a90 	.word	0x24002a90
 80134bc:	24002a94 	.word	0x24002a94

080134c0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80134c0:	b480      	push	{r7}
 80134c2:	b083      	sub	sp, #12
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	4603      	mov	r3, r0
 80134c8:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 80134ca:	79fb      	ldrb	r3, [r7, #7]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d001      	beq.n	80134d4 <SD_disk_status+0x14>
 80134d0:	2301      	movs	r3, #1
 80134d2:	e002      	b.n	80134da <SD_disk_status+0x1a>
  return Stat;
 80134d4:	4b04      	ldr	r3, [pc, #16]	@ (80134e8 <SD_disk_status+0x28>)
 80134d6:	781b      	ldrb	r3, [r3, #0]
 80134d8:	b2db      	uxtb	r3, r3
}
 80134da:	4618      	mov	r0, r3
 80134dc:	370c      	adds	r7, #12
 80134de:	46bd      	mov	sp, r7
 80134e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e4:	4770      	bx	lr
 80134e6:	bf00      	nop
 80134e8:	240000c0 	.word	0x240000c0

080134ec <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80134ec:	b580      	push	{r7, lr}
 80134ee:	b084      	sub	sp, #16
 80134f0:	af00      	add	r7, sp, #0
 80134f2:	60b9      	str	r1, [r7, #8]
 80134f4:	607a      	str	r2, [r7, #4]
 80134f6:	603b      	str	r3, [r7, #0]
 80134f8:	4603      	mov	r3, r0
 80134fa:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 80134fc:	7bfb      	ldrb	r3, [r7, #15]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d102      	bne.n	8013508 <SD_disk_read+0x1c>
 8013502:	683b      	ldr	r3, [r7, #0]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d101      	bne.n	801350c <SD_disk_read+0x20>
 8013508:	2304      	movs	r3, #4
 801350a:	e051      	b.n	80135b0 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801350c:	4b2a      	ldr	r3, [pc, #168]	@ (80135b8 <SD_disk_read+0xcc>)
 801350e:	781b      	ldrb	r3, [r3, #0]
 8013510:	b2db      	uxtb	r3, r3
 8013512:	f003 0301 	and.w	r3, r3, #1
 8013516:	2b00      	cmp	r3, #0
 8013518:	d001      	beq.n	801351e <SD_disk_read+0x32>
 801351a:	2303      	movs	r3, #3
 801351c:	e048      	b.n	80135b0 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 801351e:	4b27      	ldr	r3, [pc, #156]	@ (80135bc <SD_disk_read+0xd0>)
 8013520:	781b      	ldrb	r3, [r3, #0]
 8013522:	f003 0304 	and.w	r3, r3, #4
 8013526:	2b00      	cmp	r3, #0
 8013528:	d102      	bne.n	8013530 <SD_disk_read+0x44>
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	025b      	lsls	r3, r3, #9
 801352e:	607b      	str	r3, [r7, #4]

  SELECT();
 8013530:	f7ff fd30 	bl	8012f94 <SELECT>

  if (count == 1)
 8013534:	683b      	ldr	r3, [r7, #0]
 8013536:	2b01      	cmp	r3, #1
 8013538:	d111      	bne.n	801355e <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 801353a:	6879      	ldr	r1, [r7, #4]
 801353c:	2051      	movs	r0, #81	@ 0x51
 801353e:	f7ff fe84 	bl	801324a <SD_SendCmd>
 8013542:	4603      	mov	r3, r0
 8013544:	2b00      	cmp	r3, #0
 8013546:	d129      	bne.n	801359c <SD_disk_read+0xb0>
 8013548:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801354c:	68b8      	ldr	r0, [r7, #8]
 801354e:	f7ff fe0b 	bl	8013168 <SD_RxDataBlock>
 8013552:	4603      	mov	r3, r0
 8013554:	2b00      	cmp	r3, #0
 8013556:	d021      	beq.n	801359c <SD_disk_read+0xb0>
 8013558:	2300      	movs	r3, #0
 801355a:	603b      	str	r3, [r7, #0]
 801355c:	e01e      	b.n	801359c <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 801355e:	6879      	ldr	r1, [r7, #4]
 8013560:	2052      	movs	r0, #82	@ 0x52
 8013562:	f7ff fe72 	bl	801324a <SD_SendCmd>
 8013566:	4603      	mov	r3, r0
 8013568:	2b00      	cmp	r3, #0
 801356a:	d117      	bne.n	801359c <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 801356c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8013570:	68b8      	ldr	r0, [r7, #8]
 8013572:	f7ff fdf9 	bl	8013168 <SD_RxDataBlock>
 8013576:	4603      	mov	r3, r0
 8013578:	2b00      	cmp	r3, #0
 801357a:	d00a      	beq.n	8013592 <SD_disk_read+0xa6>
        buff += 512;
 801357c:	68bb      	ldr	r3, [r7, #8]
 801357e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8013582:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8013584:	683b      	ldr	r3, [r7, #0]
 8013586:	3b01      	subs	r3, #1
 8013588:	603b      	str	r3, [r7, #0]
 801358a:	683b      	ldr	r3, [r7, #0]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d1ed      	bne.n	801356c <SD_disk_read+0x80>
 8013590:	e000      	b.n	8013594 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8013592:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8013594:	2100      	movs	r1, #0
 8013596:	204c      	movs	r0, #76	@ 0x4c
 8013598:	f7ff fe57 	bl	801324a <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 801359c:	f7ff fd06 	bl	8012fac <DESELECT>
  SPI_RxByte();
 80135a0:	f7ff fd44 	bl	801302c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80135a4:	683b      	ldr	r3, [r7, #0]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	bf14      	ite	ne
 80135aa:	2301      	movne	r3, #1
 80135ac:	2300      	moveq	r3, #0
 80135ae:	b2db      	uxtb	r3, r3
}
 80135b0:	4618      	mov	r0, r3
 80135b2:	3710      	adds	r7, #16
 80135b4:	46bd      	mov	sp, r7
 80135b6:	bd80      	pop	{r7, pc}
 80135b8:	240000c0 	.word	0x240000c0
 80135bc:	24002a94 	.word	0x24002a94

080135c0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b084      	sub	sp, #16
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	60b9      	str	r1, [r7, #8]
 80135c8:	607a      	str	r2, [r7, #4]
 80135ca:	603b      	str	r3, [r7, #0]
 80135cc:	4603      	mov	r3, r0
 80135ce:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 80135d0:	7bfb      	ldrb	r3, [r7, #15]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d102      	bne.n	80135dc <SD_disk_write+0x1c>
 80135d6:	683b      	ldr	r3, [r7, #0]
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d101      	bne.n	80135e0 <SD_disk_write+0x20>
 80135dc:	2304      	movs	r3, #4
 80135de:	e06b      	b.n	80136b8 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80135e0:	4b37      	ldr	r3, [pc, #220]	@ (80136c0 <SD_disk_write+0x100>)
 80135e2:	781b      	ldrb	r3, [r3, #0]
 80135e4:	b2db      	uxtb	r3, r3
 80135e6:	f003 0301 	and.w	r3, r3, #1
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d001      	beq.n	80135f2 <SD_disk_write+0x32>
 80135ee:	2303      	movs	r3, #3
 80135f0:	e062      	b.n	80136b8 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 80135f2:	4b33      	ldr	r3, [pc, #204]	@ (80136c0 <SD_disk_write+0x100>)
 80135f4:	781b      	ldrb	r3, [r3, #0]
 80135f6:	b2db      	uxtb	r3, r3
 80135f8:	f003 0304 	and.w	r3, r3, #4
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d001      	beq.n	8013604 <SD_disk_write+0x44>
 8013600:	2302      	movs	r3, #2
 8013602:	e059      	b.n	80136b8 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8013604:	4b2f      	ldr	r3, [pc, #188]	@ (80136c4 <SD_disk_write+0x104>)
 8013606:	781b      	ldrb	r3, [r3, #0]
 8013608:	f003 0304 	and.w	r3, r3, #4
 801360c:	2b00      	cmp	r3, #0
 801360e:	d102      	bne.n	8013616 <SD_disk_write+0x56>
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	025b      	lsls	r3, r3, #9
 8013614:	607b      	str	r3, [r7, #4]

  SELECT();
 8013616:	f7ff fcbd 	bl	8012f94 <SELECT>

  if (count == 1)
 801361a:	683b      	ldr	r3, [r7, #0]
 801361c:	2b01      	cmp	r3, #1
 801361e:	d110      	bne.n	8013642 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8013620:	6879      	ldr	r1, [r7, #4]
 8013622:	2058      	movs	r0, #88	@ 0x58
 8013624:	f7ff fe11 	bl	801324a <SD_SendCmd>
 8013628:	4603      	mov	r3, r0
 801362a:	2b00      	cmp	r3, #0
 801362c:	d13a      	bne.n	80136a4 <SD_disk_write+0xe4>
 801362e:	21fe      	movs	r1, #254	@ 0xfe
 8013630:	68b8      	ldr	r0, [r7, #8]
 8013632:	f7ff fdc7 	bl	80131c4 <SD_TxDataBlock>
 8013636:	4603      	mov	r3, r0
 8013638:	2b00      	cmp	r3, #0
 801363a:	d033      	beq.n	80136a4 <SD_disk_write+0xe4>
      count = 0;
 801363c:	2300      	movs	r3, #0
 801363e:	603b      	str	r3, [r7, #0]
 8013640:	e030      	b.n	80136a4 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8013642:	4b20      	ldr	r3, [pc, #128]	@ (80136c4 <SD_disk_write+0x104>)
 8013644:	781b      	ldrb	r3, [r3, #0]
 8013646:	f003 0302 	and.w	r3, r3, #2
 801364a:	2b00      	cmp	r3, #0
 801364c:	d007      	beq.n	801365e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 801364e:	2100      	movs	r1, #0
 8013650:	2077      	movs	r0, #119	@ 0x77
 8013652:	f7ff fdfa 	bl	801324a <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8013656:	6839      	ldr	r1, [r7, #0]
 8013658:	2057      	movs	r0, #87	@ 0x57
 801365a:	f7ff fdf6 	bl	801324a <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 801365e:	6879      	ldr	r1, [r7, #4]
 8013660:	2059      	movs	r0, #89	@ 0x59
 8013662:	f7ff fdf2 	bl	801324a <SD_SendCmd>
 8013666:	4603      	mov	r3, r0
 8013668:	2b00      	cmp	r3, #0
 801366a:	d11b      	bne.n	80136a4 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 801366c:	21fc      	movs	r1, #252	@ 0xfc
 801366e:	68b8      	ldr	r0, [r7, #8]
 8013670:	f7ff fda8 	bl	80131c4 <SD_TxDataBlock>
 8013674:	4603      	mov	r3, r0
 8013676:	2b00      	cmp	r3, #0
 8013678:	d00a      	beq.n	8013690 <SD_disk_write+0xd0>
        buff += 512;
 801367a:	68bb      	ldr	r3, [r7, #8]
 801367c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8013680:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8013682:	683b      	ldr	r3, [r7, #0]
 8013684:	3b01      	subs	r3, #1
 8013686:	603b      	str	r3, [r7, #0]
 8013688:	683b      	ldr	r3, [r7, #0]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d1ee      	bne.n	801366c <SD_disk_write+0xac>
 801368e:	e000      	b.n	8013692 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8013690:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8013692:	21fd      	movs	r1, #253	@ 0xfd
 8013694:	2000      	movs	r0, #0
 8013696:	f7ff fd95 	bl	80131c4 <SD_TxDataBlock>
 801369a:	4603      	mov	r3, r0
 801369c:	2b00      	cmp	r3, #0
 801369e:	d101      	bne.n	80136a4 <SD_disk_write+0xe4>
      {
        count = 1;
 80136a0:	2301      	movs	r3, #1
 80136a2:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 80136a4:	f7ff fc82 	bl	8012fac <DESELECT>
  SPI_RxByte();
 80136a8:	f7ff fcc0 	bl	801302c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80136ac:	683b      	ldr	r3, [r7, #0]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	bf14      	ite	ne
 80136b2:	2301      	movne	r3, #1
 80136b4:	2300      	moveq	r3, #0
 80136b6:	b2db      	uxtb	r3, r3
}
 80136b8:	4618      	mov	r0, r3
 80136ba:	3710      	adds	r7, #16
 80136bc:	46bd      	mov	sp, r7
 80136be:	bd80      	pop	{r7, pc}
 80136c0:	240000c0 	.word	0x240000c0
 80136c4:	24002a94 	.word	0x24002a94

080136c8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80136c8:	b590      	push	{r4, r7, lr}
 80136ca:	b08b      	sub	sp, #44	@ 0x2c
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	4603      	mov	r3, r0
 80136d0:	603a      	str	r2, [r7, #0]
 80136d2:	71fb      	strb	r3, [r7, #7]
 80136d4:	460b      	mov	r3, r1
 80136d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 80136d8:	683b      	ldr	r3, [r7, #0]
 80136da:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 80136dc:	79fb      	ldrb	r3, [r7, #7]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d001      	beq.n	80136e6 <SD_disk_ioctl+0x1e>
 80136e2:	2304      	movs	r3, #4
 80136e4:	e113      	b.n	801390e <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 80136e6:	2301      	movs	r3, #1
 80136e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 80136ec:	79bb      	ldrb	r3, [r7, #6]
 80136ee:	2b05      	cmp	r3, #5
 80136f0:	d124      	bne.n	801373c <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 80136f2:	6a3b      	ldr	r3, [r7, #32]
 80136f4:	781b      	ldrb	r3, [r3, #0]
 80136f6:	2b02      	cmp	r3, #2
 80136f8:	d012      	beq.n	8013720 <SD_disk_ioctl+0x58>
 80136fa:	2b02      	cmp	r3, #2
 80136fc:	dc1a      	bgt.n	8013734 <SD_disk_ioctl+0x6c>
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d002      	beq.n	8013708 <SD_disk_ioctl+0x40>
 8013702:	2b01      	cmp	r3, #1
 8013704:	d006      	beq.n	8013714 <SD_disk_ioctl+0x4c>
 8013706:	e015      	b.n	8013734 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8013708:	f7ff fd16 	bl	8013138 <SD_PowerOff>
      res = RES_OK;
 801370c:	2300      	movs	r3, #0
 801370e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8013712:	e0fa      	b.n	801390a <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8013714:	f7ff fcce 	bl	80130b4 <SD_PowerOn>
      res = RES_OK;
 8013718:	2300      	movs	r3, #0
 801371a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 801371e:	e0f4      	b.n	801390a <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8013720:	6a3b      	ldr	r3, [r7, #32]
 8013722:	1c5c      	adds	r4, r3, #1
 8013724:	f7ff fd14 	bl	8013150 <SD_CheckPower>
 8013728:	4603      	mov	r3, r0
 801372a:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 801372c:	2300      	movs	r3, #0
 801372e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8013732:	e0ea      	b.n	801390a <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 8013734:	2304      	movs	r3, #4
 8013736:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801373a:	e0e6      	b.n	801390a <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 801373c:	4b76      	ldr	r3, [pc, #472]	@ (8013918 <SD_disk_ioctl+0x250>)
 801373e:	781b      	ldrb	r3, [r3, #0]
 8013740:	b2db      	uxtb	r3, r3
 8013742:	f003 0301 	and.w	r3, r3, #1
 8013746:	2b00      	cmp	r3, #0
 8013748:	d001      	beq.n	801374e <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 801374a:	2303      	movs	r3, #3
 801374c:	e0df      	b.n	801390e <SD_disk_ioctl+0x246>
    }
    SELECT();
 801374e:	f7ff fc21 	bl	8012f94 <SELECT>
    switch (ctrl)
 8013752:	79bb      	ldrb	r3, [r7, #6]
 8013754:	2b0d      	cmp	r3, #13
 8013756:	f200 80c9 	bhi.w	80138ec <SD_disk_ioctl+0x224>
 801375a:	a201      	add	r2, pc, #4	@ (adr r2, 8013760 <SD_disk_ioctl+0x98>)
 801375c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013760:	08013857 	.word	0x08013857
 8013764:	08013799 	.word	0x08013799
 8013768:	08013847 	.word	0x08013847
 801376c:	080138ed 	.word	0x080138ed
 8013770:	080138ed 	.word	0x080138ed
 8013774:	080138ed 	.word	0x080138ed
 8013778:	080138ed 	.word	0x080138ed
 801377c:	080138ed 	.word	0x080138ed
 8013780:	080138ed 	.word	0x080138ed
 8013784:	080138ed 	.word	0x080138ed
 8013788:	080138ed 	.word	0x080138ed
 801378c:	08013869 	.word	0x08013869
 8013790:	0801388d 	.word	0x0801388d
 8013794:	080138b1 	.word	0x080138b1
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8013798:	2100      	movs	r1, #0
 801379a:	2049      	movs	r0, #73	@ 0x49
 801379c:	f7ff fd55 	bl	801324a <SD_SendCmd>
 80137a0:	4603      	mov	r3, r0
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	f040 80a6 	bne.w	80138f4 <SD_disk_ioctl+0x22c>
 80137a8:	f107 030c 	add.w	r3, r7, #12
 80137ac:	2110      	movs	r1, #16
 80137ae:	4618      	mov	r0, r3
 80137b0:	f7ff fcda 	bl	8013168 <SD_RxDataBlock>
 80137b4:	4603      	mov	r3, r0
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	f000 809c 	beq.w	80138f4 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 80137bc:	7b3b      	ldrb	r3, [r7, #12]
 80137be:	099b      	lsrs	r3, r3, #6
 80137c0:	b2db      	uxtb	r3, r3
 80137c2:	2b01      	cmp	r3, #1
 80137c4:	d10d      	bne.n	80137e2 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80137c6:	7d7b      	ldrb	r3, [r7, #21]
 80137c8:	461a      	mov	r2, r3
 80137ca:	7d3b      	ldrb	r3, [r7, #20]
 80137cc:	021b      	lsls	r3, r3, #8
 80137ce:	b29b      	uxth	r3, r3
 80137d0:	4413      	add	r3, r2
 80137d2:	b29b      	uxth	r3, r3
 80137d4:	3301      	adds	r3, #1
 80137d6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80137d8:	8bfb      	ldrh	r3, [r7, #30]
 80137da:	029a      	lsls	r2, r3, #10
 80137dc:	683b      	ldr	r3, [r7, #0]
 80137de:	601a      	str	r2, [r3, #0]
 80137e0:	e02d      	b.n	801383e <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80137e2:	7c7b      	ldrb	r3, [r7, #17]
 80137e4:	f003 030f 	and.w	r3, r3, #15
 80137e8:	b2da      	uxtb	r2, r3
 80137ea:	7dbb      	ldrb	r3, [r7, #22]
 80137ec:	09db      	lsrs	r3, r3, #7
 80137ee:	b2db      	uxtb	r3, r3
 80137f0:	4413      	add	r3, r2
 80137f2:	b2da      	uxtb	r2, r3
 80137f4:	7d7b      	ldrb	r3, [r7, #21]
 80137f6:	005b      	lsls	r3, r3, #1
 80137f8:	b2db      	uxtb	r3, r3
 80137fa:	f003 0306 	and.w	r3, r3, #6
 80137fe:	b2db      	uxtb	r3, r3
 8013800:	4413      	add	r3, r2
 8013802:	b2db      	uxtb	r3, r3
 8013804:	3302      	adds	r3, #2
 8013806:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 801380a:	7d3b      	ldrb	r3, [r7, #20]
 801380c:	099b      	lsrs	r3, r3, #6
 801380e:	b2db      	uxtb	r3, r3
 8013810:	461a      	mov	r2, r3
 8013812:	7cfb      	ldrb	r3, [r7, #19]
 8013814:	009b      	lsls	r3, r3, #2
 8013816:	b29b      	uxth	r3, r3
 8013818:	4413      	add	r3, r2
 801381a:	b29a      	uxth	r2, r3
 801381c:	7cbb      	ldrb	r3, [r7, #18]
 801381e:	029b      	lsls	r3, r3, #10
 8013820:	b29b      	uxth	r3, r3
 8013822:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8013826:	b29b      	uxth	r3, r3
 8013828:	4413      	add	r3, r2
 801382a:	b29b      	uxth	r3, r3
 801382c:	3301      	adds	r3, #1
 801382e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8013830:	8bfa      	ldrh	r2, [r7, #30]
 8013832:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013836:	3b09      	subs	r3, #9
 8013838:	409a      	lsls	r2, r3
 801383a:	683b      	ldr	r3, [r7, #0]
 801383c:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 801383e:	2300      	movs	r3, #0
 8013840:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8013844:	e056      	b.n	80138f4 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8013846:	683b      	ldr	r3, [r7, #0]
 8013848:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801384c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 801384e:	2300      	movs	r3, #0
 8013850:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8013854:	e055      	b.n	8013902 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8013856:	f7ff fc13 	bl	8013080 <SD_ReadyWait>
 801385a:	4603      	mov	r3, r0
 801385c:	2bff      	cmp	r3, #255	@ 0xff
 801385e:	d14b      	bne.n	80138f8 <SD_disk_ioctl+0x230>
 8013860:	2300      	movs	r3, #0
 8013862:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8013866:	e047      	b.n	80138f8 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8013868:	2100      	movs	r1, #0
 801386a:	2049      	movs	r0, #73	@ 0x49
 801386c:	f7ff fced 	bl	801324a <SD_SendCmd>
 8013870:	4603      	mov	r3, r0
 8013872:	2b00      	cmp	r3, #0
 8013874:	d142      	bne.n	80138fc <SD_disk_ioctl+0x234>
 8013876:	2110      	movs	r1, #16
 8013878:	6a38      	ldr	r0, [r7, #32]
 801387a:	f7ff fc75 	bl	8013168 <SD_RxDataBlock>
 801387e:	4603      	mov	r3, r0
 8013880:	2b00      	cmp	r3, #0
 8013882:	d03b      	beq.n	80138fc <SD_disk_ioctl+0x234>
 8013884:	2300      	movs	r3, #0
 8013886:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 801388a:	e037      	b.n	80138fc <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 801388c:	2100      	movs	r1, #0
 801388e:	204a      	movs	r0, #74	@ 0x4a
 8013890:	f7ff fcdb 	bl	801324a <SD_SendCmd>
 8013894:	4603      	mov	r3, r0
 8013896:	2b00      	cmp	r3, #0
 8013898:	d132      	bne.n	8013900 <SD_disk_ioctl+0x238>
 801389a:	2110      	movs	r1, #16
 801389c:	6a38      	ldr	r0, [r7, #32]
 801389e:	f7ff fc63 	bl	8013168 <SD_RxDataBlock>
 80138a2:	4603      	mov	r3, r0
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d02b      	beq.n	8013900 <SD_disk_ioctl+0x238>
 80138a8:	2300      	movs	r3, #0
 80138aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80138ae:	e027      	b.n	8013900 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 80138b0:	2100      	movs	r1, #0
 80138b2:	207a      	movs	r0, #122	@ 0x7a
 80138b4:	f7ff fcc9 	bl	801324a <SD_SendCmd>
 80138b8:	4603      	mov	r3, r0
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d116      	bne.n	80138ec <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 80138be:	2300      	movs	r3, #0
 80138c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80138c4:	e00b      	b.n	80138de <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 80138c6:	6a3c      	ldr	r4, [r7, #32]
 80138c8:	1c63      	adds	r3, r4, #1
 80138ca:	623b      	str	r3, [r7, #32]
 80138cc:	f7ff fbae 	bl	801302c <SPI_RxByte>
 80138d0:	4603      	mov	r3, r0
 80138d2:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80138d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80138d8:	3301      	adds	r3, #1
 80138da:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80138de:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80138e2:	2b03      	cmp	r3, #3
 80138e4:	d9ef      	bls.n	80138c6 <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 80138e6:	2300      	movs	r3, #0
 80138e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 80138ec:	2304      	movs	r3, #4
 80138ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80138f2:	e006      	b.n	8013902 <SD_disk_ioctl+0x23a>
      break;
 80138f4:	bf00      	nop
 80138f6:	e004      	b.n	8013902 <SD_disk_ioctl+0x23a>
      break;
 80138f8:	bf00      	nop
 80138fa:	e002      	b.n	8013902 <SD_disk_ioctl+0x23a>
      break;
 80138fc:	bf00      	nop
 80138fe:	e000      	b.n	8013902 <SD_disk_ioctl+0x23a>
      break;
 8013900:	bf00      	nop
    }
    DESELECT();
 8013902:	f7ff fb53 	bl	8012fac <DESELECT>
    SPI_RxByte();
 8013906:	f7ff fb91 	bl	801302c <SPI_RxByte>
  }
  return res;
 801390a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801390e:	4618      	mov	r0, r3
 8013910:	372c      	adds	r7, #44	@ 0x2c
 8013912:	46bd      	mov	sp, r7
 8013914:	bd90      	pop	{r4, r7, pc}
 8013916:	bf00      	nop
 8013918:	240000c0 	.word	0x240000c0

0801391c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801391c:	b580      	push	{r7, lr}
 801391e:	b084      	sub	sp, #16
 8013920:	af00      	add	r7, sp, #0
 8013922:	4603      	mov	r3, r0
 8013924:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8013926:	79fb      	ldrb	r3, [r7, #7]
 8013928:	4a08      	ldr	r2, [pc, #32]	@ (801394c <disk_status+0x30>)
 801392a:	009b      	lsls	r3, r3, #2
 801392c:	4413      	add	r3, r2
 801392e:	685b      	ldr	r3, [r3, #4]
 8013930:	685b      	ldr	r3, [r3, #4]
 8013932:	79fa      	ldrb	r2, [r7, #7]
 8013934:	4905      	ldr	r1, [pc, #20]	@ (801394c <disk_status+0x30>)
 8013936:	440a      	add	r2, r1
 8013938:	7a12      	ldrb	r2, [r2, #8]
 801393a:	4610      	mov	r0, r2
 801393c:	4798      	blx	r3
 801393e:	4603      	mov	r3, r0
 8013940:	73fb      	strb	r3, [r7, #15]
  return stat;
 8013942:	7bfb      	ldrb	r3, [r7, #15]
}
 8013944:	4618      	mov	r0, r3
 8013946:	3710      	adds	r7, #16
 8013948:	46bd      	mov	sp, r7
 801394a:	bd80      	pop	{r7, pc}
 801394c:	24002a98 	.word	0x24002a98

08013950 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8013950:	b590      	push	{r4, r7, lr}
 8013952:	b087      	sub	sp, #28
 8013954:	af00      	add	r7, sp, #0
 8013956:	60b9      	str	r1, [r7, #8]
 8013958:	607a      	str	r2, [r7, #4]
 801395a:	603b      	str	r3, [r7, #0]
 801395c:	4603      	mov	r3, r0
 801395e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8013960:	7bfb      	ldrb	r3, [r7, #15]
 8013962:	4a0a      	ldr	r2, [pc, #40]	@ (801398c <disk_read+0x3c>)
 8013964:	009b      	lsls	r3, r3, #2
 8013966:	4413      	add	r3, r2
 8013968:	685b      	ldr	r3, [r3, #4]
 801396a:	689c      	ldr	r4, [r3, #8]
 801396c:	7bfb      	ldrb	r3, [r7, #15]
 801396e:	4a07      	ldr	r2, [pc, #28]	@ (801398c <disk_read+0x3c>)
 8013970:	4413      	add	r3, r2
 8013972:	7a18      	ldrb	r0, [r3, #8]
 8013974:	683b      	ldr	r3, [r7, #0]
 8013976:	687a      	ldr	r2, [r7, #4]
 8013978:	68b9      	ldr	r1, [r7, #8]
 801397a:	47a0      	blx	r4
 801397c:	4603      	mov	r3, r0
 801397e:	75fb      	strb	r3, [r7, #23]
  return res;
 8013980:	7dfb      	ldrb	r3, [r7, #23]
}
 8013982:	4618      	mov	r0, r3
 8013984:	371c      	adds	r7, #28
 8013986:	46bd      	mov	sp, r7
 8013988:	bd90      	pop	{r4, r7, pc}
 801398a:	bf00      	nop
 801398c:	24002a98 	.word	0x24002a98

08013990 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8013990:	b590      	push	{r4, r7, lr}
 8013992:	b087      	sub	sp, #28
 8013994:	af00      	add	r7, sp, #0
 8013996:	60b9      	str	r1, [r7, #8]
 8013998:	607a      	str	r2, [r7, #4]
 801399a:	603b      	str	r3, [r7, #0]
 801399c:	4603      	mov	r3, r0
 801399e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80139a0:	7bfb      	ldrb	r3, [r7, #15]
 80139a2:	4a0a      	ldr	r2, [pc, #40]	@ (80139cc <disk_write+0x3c>)
 80139a4:	009b      	lsls	r3, r3, #2
 80139a6:	4413      	add	r3, r2
 80139a8:	685b      	ldr	r3, [r3, #4]
 80139aa:	68dc      	ldr	r4, [r3, #12]
 80139ac:	7bfb      	ldrb	r3, [r7, #15]
 80139ae:	4a07      	ldr	r2, [pc, #28]	@ (80139cc <disk_write+0x3c>)
 80139b0:	4413      	add	r3, r2
 80139b2:	7a18      	ldrb	r0, [r3, #8]
 80139b4:	683b      	ldr	r3, [r7, #0]
 80139b6:	687a      	ldr	r2, [r7, #4]
 80139b8:	68b9      	ldr	r1, [r7, #8]
 80139ba:	47a0      	blx	r4
 80139bc:	4603      	mov	r3, r0
 80139be:	75fb      	strb	r3, [r7, #23]
  return res;
 80139c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80139c2:	4618      	mov	r0, r3
 80139c4:	371c      	adds	r7, #28
 80139c6:	46bd      	mov	sp, r7
 80139c8:	bd90      	pop	{r4, r7, pc}
 80139ca:	bf00      	nop
 80139cc:	24002a98 	.word	0x24002a98

080139d0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80139d0:	b580      	push	{r7, lr}
 80139d2:	b084      	sub	sp, #16
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	4603      	mov	r3, r0
 80139d8:	603a      	str	r2, [r7, #0]
 80139da:	71fb      	strb	r3, [r7, #7]
 80139dc:	460b      	mov	r3, r1
 80139de:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80139e0:	79fb      	ldrb	r3, [r7, #7]
 80139e2:	4a09      	ldr	r2, [pc, #36]	@ (8013a08 <disk_ioctl+0x38>)
 80139e4:	009b      	lsls	r3, r3, #2
 80139e6:	4413      	add	r3, r2
 80139e8:	685b      	ldr	r3, [r3, #4]
 80139ea:	691b      	ldr	r3, [r3, #16]
 80139ec:	79fa      	ldrb	r2, [r7, #7]
 80139ee:	4906      	ldr	r1, [pc, #24]	@ (8013a08 <disk_ioctl+0x38>)
 80139f0:	440a      	add	r2, r1
 80139f2:	7a10      	ldrb	r0, [r2, #8]
 80139f4:	79b9      	ldrb	r1, [r7, #6]
 80139f6:	683a      	ldr	r2, [r7, #0]
 80139f8:	4798      	blx	r3
 80139fa:	4603      	mov	r3, r0
 80139fc:	73fb      	strb	r3, [r7, #15]
  return res;
 80139fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a00:	4618      	mov	r0, r3
 8013a02:	3710      	adds	r7, #16
 8013a04:	46bd      	mov	sp, r7
 8013a06:	bd80      	pop	{r7, pc}
 8013a08:	24002a98 	.word	0x24002a98

08013a0c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8013a0c:	b480      	push	{r7}
 8013a0e:	b085      	sub	sp, #20
 8013a10:	af00      	add	r7, sp, #0
 8013a12:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	3301      	adds	r3, #1
 8013a18:	781b      	ldrb	r3, [r3, #0]
 8013a1a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8013a1c:	89fb      	ldrh	r3, [r7, #14]
 8013a1e:	021b      	lsls	r3, r3, #8
 8013a20:	b21a      	sxth	r2, r3
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	781b      	ldrb	r3, [r3, #0]
 8013a26:	b21b      	sxth	r3, r3
 8013a28:	4313      	orrs	r3, r2
 8013a2a:	b21b      	sxth	r3, r3
 8013a2c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8013a2e:	89fb      	ldrh	r3, [r7, #14]
}
 8013a30:	4618      	mov	r0, r3
 8013a32:	3714      	adds	r7, #20
 8013a34:	46bd      	mov	sp, r7
 8013a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a3a:	4770      	bx	lr

08013a3c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8013a3c:	b480      	push	{r7}
 8013a3e:	b085      	sub	sp, #20
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	3303      	adds	r3, #3
 8013a48:	781b      	ldrb	r3, [r3, #0]
 8013a4a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	021b      	lsls	r3, r3, #8
 8013a50:	687a      	ldr	r2, [r7, #4]
 8013a52:	3202      	adds	r2, #2
 8013a54:	7812      	ldrb	r2, [r2, #0]
 8013a56:	4313      	orrs	r3, r2
 8013a58:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	021b      	lsls	r3, r3, #8
 8013a5e:	687a      	ldr	r2, [r7, #4]
 8013a60:	3201      	adds	r2, #1
 8013a62:	7812      	ldrb	r2, [r2, #0]
 8013a64:	4313      	orrs	r3, r2
 8013a66:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	021b      	lsls	r3, r3, #8
 8013a6c:	687a      	ldr	r2, [r7, #4]
 8013a6e:	7812      	ldrb	r2, [r2, #0]
 8013a70:	4313      	orrs	r3, r2
 8013a72:	60fb      	str	r3, [r7, #12]
	return rv;
 8013a74:	68fb      	ldr	r3, [r7, #12]
}
 8013a76:	4618      	mov	r0, r3
 8013a78:	3714      	adds	r7, #20
 8013a7a:	46bd      	mov	sp, r7
 8013a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a80:	4770      	bx	lr

08013a82 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8013a82:	b480      	push	{r7}
 8013a84:	b083      	sub	sp, #12
 8013a86:	af00      	add	r7, sp, #0
 8013a88:	6078      	str	r0, [r7, #4]
 8013a8a:	460b      	mov	r3, r1
 8013a8c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	1c5a      	adds	r2, r3, #1
 8013a92:	607a      	str	r2, [r7, #4]
 8013a94:	887a      	ldrh	r2, [r7, #2]
 8013a96:	b2d2      	uxtb	r2, r2
 8013a98:	701a      	strb	r2, [r3, #0]
 8013a9a:	887b      	ldrh	r3, [r7, #2]
 8013a9c:	0a1b      	lsrs	r3, r3, #8
 8013a9e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	1c5a      	adds	r2, r3, #1
 8013aa4:	607a      	str	r2, [r7, #4]
 8013aa6:	887a      	ldrh	r2, [r7, #2]
 8013aa8:	b2d2      	uxtb	r2, r2
 8013aaa:	701a      	strb	r2, [r3, #0]
}
 8013aac:	bf00      	nop
 8013aae:	370c      	adds	r7, #12
 8013ab0:	46bd      	mov	sp, r7
 8013ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab6:	4770      	bx	lr

08013ab8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8013ab8:	b480      	push	{r7}
 8013aba:	b083      	sub	sp, #12
 8013abc:	af00      	add	r7, sp, #0
 8013abe:	6078      	str	r0, [r7, #4]
 8013ac0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	1c5a      	adds	r2, r3, #1
 8013ac6:	607a      	str	r2, [r7, #4]
 8013ac8:	683a      	ldr	r2, [r7, #0]
 8013aca:	b2d2      	uxtb	r2, r2
 8013acc:	701a      	strb	r2, [r3, #0]
 8013ace:	683b      	ldr	r3, [r7, #0]
 8013ad0:	0a1b      	lsrs	r3, r3, #8
 8013ad2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	1c5a      	adds	r2, r3, #1
 8013ad8:	607a      	str	r2, [r7, #4]
 8013ada:	683a      	ldr	r2, [r7, #0]
 8013adc:	b2d2      	uxtb	r2, r2
 8013ade:	701a      	strb	r2, [r3, #0]
 8013ae0:	683b      	ldr	r3, [r7, #0]
 8013ae2:	0a1b      	lsrs	r3, r3, #8
 8013ae4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	1c5a      	adds	r2, r3, #1
 8013aea:	607a      	str	r2, [r7, #4]
 8013aec:	683a      	ldr	r2, [r7, #0]
 8013aee:	b2d2      	uxtb	r2, r2
 8013af0:	701a      	strb	r2, [r3, #0]
 8013af2:	683b      	ldr	r3, [r7, #0]
 8013af4:	0a1b      	lsrs	r3, r3, #8
 8013af6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	1c5a      	adds	r2, r3, #1
 8013afc:	607a      	str	r2, [r7, #4]
 8013afe:	683a      	ldr	r2, [r7, #0]
 8013b00:	b2d2      	uxtb	r2, r2
 8013b02:	701a      	strb	r2, [r3, #0]
}
 8013b04:	bf00      	nop
 8013b06:	370c      	adds	r7, #12
 8013b08:	46bd      	mov	sp, r7
 8013b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b0e:	4770      	bx	lr

08013b10 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8013b10:	b480      	push	{r7}
 8013b12:	b087      	sub	sp, #28
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	60f8      	str	r0, [r7, #12]
 8013b18:	60b9      	str	r1, [r7, #8]
 8013b1a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8013b20:	68bb      	ldr	r3, [r7, #8]
 8013b22:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d00d      	beq.n	8013b46 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8013b2a:	693a      	ldr	r2, [r7, #16]
 8013b2c:	1c53      	adds	r3, r2, #1
 8013b2e:	613b      	str	r3, [r7, #16]
 8013b30:	697b      	ldr	r3, [r7, #20]
 8013b32:	1c59      	adds	r1, r3, #1
 8013b34:	6179      	str	r1, [r7, #20]
 8013b36:	7812      	ldrb	r2, [r2, #0]
 8013b38:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	3b01      	subs	r3, #1
 8013b3e:	607b      	str	r3, [r7, #4]
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d1f1      	bne.n	8013b2a <mem_cpy+0x1a>
	}
}
 8013b46:	bf00      	nop
 8013b48:	371c      	adds	r7, #28
 8013b4a:	46bd      	mov	sp, r7
 8013b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b50:	4770      	bx	lr

08013b52 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8013b52:	b480      	push	{r7}
 8013b54:	b087      	sub	sp, #28
 8013b56:	af00      	add	r7, sp, #0
 8013b58:	60f8      	str	r0, [r7, #12]
 8013b5a:	60b9      	str	r1, [r7, #8]
 8013b5c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8013b62:	697b      	ldr	r3, [r7, #20]
 8013b64:	1c5a      	adds	r2, r3, #1
 8013b66:	617a      	str	r2, [r7, #20]
 8013b68:	68ba      	ldr	r2, [r7, #8]
 8013b6a:	b2d2      	uxtb	r2, r2
 8013b6c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	3b01      	subs	r3, #1
 8013b72:	607b      	str	r3, [r7, #4]
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d1f3      	bne.n	8013b62 <mem_set+0x10>
}
 8013b7a:	bf00      	nop
 8013b7c:	bf00      	nop
 8013b7e:	371c      	adds	r7, #28
 8013b80:	46bd      	mov	sp, r7
 8013b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b86:	4770      	bx	lr

08013b88 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b082      	sub	sp, #8
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d009      	beq.n	8013baa <lock_fs+0x22>
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	691b      	ldr	r3, [r3, #16]
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	f000 fe6f 	bl	801487e <ff_req_grant>
 8013ba0:	4603      	mov	r3, r0
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d001      	beq.n	8013baa <lock_fs+0x22>
 8013ba6:	2301      	movs	r3, #1
 8013ba8:	e000      	b.n	8013bac <lock_fs+0x24>
 8013baa:	2300      	movs	r3, #0
}
 8013bac:	4618      	mov	r0, r3
 8013bae:	3708      	adds	r7, #8
 8013bb0:	46bd      	mov	sp, r7
 8013bb2:	bd80      	pop	{r7, pc}

08013bb4 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8013bb4:	b580      	push	{r7, lr}
 8013bb6:	b082      	sub	sp, #8
 8013bb8:	af00      	add	r7, sp, #0
 8013bba:	6078      	str	r0, [r7, #4]
 8013bbc:	460b      	mov	r3, r1
 8013bbe:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d00d      	beq.n	8013be2 <unlock_fs+0x2e>
 8013bc6:	78fb      	ldrb	r3, [r7, #3]
 8013bc8:	2b0c      	cmp	r3, #12
 8013bca:	d00a      	beq.n	8013be2 <unlock_fs+0x2e>
 8013bcc:	78fb      	ldrb	r3, [r7, #3]
 8013bce:	2b0b      	cmp	r3, #11
 8013bd0:	d007      	beq.n	8013be2 <unlock_fs+0x2e>
 8013bd2:	78fb      	ldrb	r3, [r7, #3]
 8013bd4:	2b0f      	cmp	r3, #15
 8013bd6:	d004      	beq.n	8013be2 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	691b      	ldr	r3, [r3, #16]
 8013bdc:	4618      	mov	r0, r3
 8013bde:	f000 fe63 	bl	80148a8 <ff_rel_grant>
	}
}
 8013be2:	bf00      	nop
 8013be4:	3708      	adds	r7, #8
 8013be6:	46bd      	mov	sp, r7
 8013be8:	bd80      	pop	{r7, pc}

08013bea <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8013bea:	b580      	push	{r7, lr}
 8013bec:	b086      	sub	sp, #24
 8013bee:	af00      	add	r7, sp, #0
 8013bf0:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8013bf2:	2300      	movs	r3, #0
 8013bf4:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	78db      	ldrb	r3, [r3, #3]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d034      	beq.n	8013c68 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013c02:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	7858      	ldrb	r0, [r3, #1]
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8013c0e:	2301      	movs	r3, #1
 8013c10:	697a      	ldr	r2, [r7, #20]
 8013c12:	f7ff febd 	bl	8013990 <disk_write>
 8013c16:	4603      	mov	r3, r0
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d002      	beq.n	8013c22 <sync_window+0x38>
			res = FR_DISK_ERR;
 8013c1c:	2301      	movs	r3, #1
 8013c1e:	73fb      	strb	r3, [r7, #15]
 8013c20:	e022      	b.n	8013c68 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	2200      	movs	r2, #0
 8013c26:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013c2c:	697a      	ldr	r2, [r7, #20]
 8013c2e:	1ad2      	subs	r2, r2, r3
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	6a1b      	ldr	r3, [r3, #32]
 8013c34:	429a      	cmp	r2, r3
 8013c36:	d217      	bcs.n	8013c68 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	789b      	ldrb	r3, [r3, #2]
 8013c3c:	613b      	str	r3, [r7, #16]
 8013c3e:	e010      	b.n	8013c62 <sync_window+0x78>
					wsect += fs->fsize;
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	6a1b      	ldr	r3, [r3, #32]
 8013c44:	697a      	ldr	r2, [r7, #20]
 8013c46:	4413      	add	r3, r2
 8013c48:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	7858      	ldrb	r0, [r3, #1]
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8013c54:	2301      	movs	r3, #1
 8013c56:	697a      	ldr	r2, [r7, #20]
 8013c58:	f7ff fe9a 	bl	8013990 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013c5c:	693b      	ldr	r3, [r7, #16]
 8013c5e:	3b01      	subs	r3, #1
 8013c60:	613b      	str	r3, [r7, #16]
 8013c62:	693b      	ldr	r3, [r7, #16]
 8013c64:	2b01      	cmp	r3, #1
 8013c66:	d8eb      	bhi.n	8013c40 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8013c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	3718      	adds	r7, #24
 8013c6e:	46bd      	mov	sp, r7
 8013c70:	bd80      	pop	{r7, pc}

08013c72 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8013c72:	b580      	push	{r7, lr}
 8013c74:	b084      	sub	sp, #16
 8013c76:	af00      	add	r7, sp, #0
 8013c78:	6078      	str	r0, [r7, #4]
 8013c7a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8013c7c:	2300      	movs	r3, #0
 8013c7e:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013c84:	683a      	ldr	r2, [r7, #0]
 8013c86:	429a      	cmp	r2, r3
 8013c88:	d01b      	beq.n	8013cc2 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8013c8a:	6878      	ldr	r0, [r7, #4]
 8013c8c:	f7ff ffad 	bl	8013bea <sync_window>
 8013c90:	4603      	mov	r3, r0
 8013c92:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8013c94:	7bfb      	ldrb	r3, [r7, #15]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d113      	bne.n	8013cc2 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	7858      	ldrb	r0, [r3, #1]
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8013ca4:	2301      	movs	r3, #1
 8013ca6:	683a      	ldr	r2, [r7, #0]
 8013ca8:	f7ff fe52 	bl	8013950 <disk_read>
 8013cac:	4603      	mov	r3, r0
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d004      	beq.n	8013cbc <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8013cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8013cb6:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8013cb8:	2301      	movs	r3, #1
 8013cba:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	683a      	ldr	r2, [r7, #0]
 8013cc0:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8013cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	3710      	adds	r7, #16
 8013cc8:	46bd      	mov	sp, r7
 8013cca:	bd80      	pop	{r7, pc}

08013ccc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8013ccc:	b580      	push	{r7, lr}
 8013cce:	b084      	sub	sp, #16
 8013cd0:	af00      	add	r7, sp, #0
 8013cd2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8013cd4:	6878      	ldr	r0, [r7, #4]
 8013cd6:	f7ff ff88 	bl	8013bea <sync_window>
 8013cda:	4603      	mov	r3, r0
 8013cdc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8013cde:	7bfb      	ldrb	r3, [r7, #15]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d158      	bne.n	8013d96 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	781b      	ldrb	r3, [r3, #0]
 8013ce8:	2b03      	cmp	r3, #3
 8013cea:	d148      	bne.n	8013d7e <sync_fs+0xb2>
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	791b      	ldrb	r3, [r3, #4]
 8013cf0:	2b01      	cmp	r3, #1
 8013cf2:	d144      	bne.n	8013d7e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	3338      	adds	r3, #56	@ 0x38
 8013cf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013cfc:	2100      	movs	r1, #0
 8013cfe:	4618      	mov	r0, r3
 8013d00:	f7ff ff27 	bl	8013b52 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	3338      	adds	r3, #56	@ 0x38
 8013d08:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013d0c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8013d10:	4618      	mov	r0, r3
 8013d12:	f7ff feb6 	bl	8013a82 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	3338      	adds	r3, #56	@ 0x38
 8013d1a:	4921      	ldr	r1, [pc, #132]	@ (8013da0 <sync_fs+0xd4>)
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	f7ff fecb 	bl	8013ab8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	3338      	adds	r3, #56	@ 0x38
 8013d26:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8013d2a:	491e      	ldr	r1, [pc, #120]	@ (8013da4 <sync_fs+0xd8>)
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	f7ff fec3 	bl	8013ab8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	3338      	adds	r3, #56	@ 0x38
 8013d36:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	699b      	ldr	r3, [r3, #24]
 8013d3e:	4619      	mov	r1, r3
 8013d40:	4610      	mov	r0, r2
 8013d42:	f7ff feb9 	bl	8013ab8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	3338      	adds	r3, #56	@ 0x38
 8013d4a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	695b      	ldr	r3, [r3, #20]
 8013d52:	4619      	mov	r1, r3
 8013d54:	4610      	mov	r0, r2
 8013d56:	f7ff feaf 	bl	8013ab8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d5e:	1c5a      	adds	r2, r3, #1
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	7858      	ldrb	r0, [r3, #1]
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013d72:	2301      	movs	r3, #1
 8013d74:	f7ff fe0c 	bl	8013990 <disk_write>
			fs->fsi_flag = 0;
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	2200      	movs	r2, #0
 8013d7c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	785b      	ldrb	r3, [r3, #1]
 8013d82:	2200      	movs	r2, #0
 8013d84:	2100      	movs	r1, #0
 8013d86:	4618      	mov	r0, r3
 8013d88:	f7ff fe22 	bl	80139d0 <disk_ioctl>
 8013d8c:	4603      	mov	r3, r0
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d001      	beq.n	8013d96 <sync_fs+0xca>
 8013d92:	2301      	movs	r3, #1
 8013d94:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8013d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d98:	4618      	mov	r0, r3
 8013d9a:	3710      	adds	r7, #16
 8013d9c:	46bd      	mov	sp, r7
 8013d9e:	bd80      	pop	{r7, pc}
 8013da0:	41615252 	.word	0x41615252
 8013da4:	61417272 	.word	0x61417272

08013da8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8013da8:	b480      	push	{r7}
 8013daa:	b083      	sub	sp, #12
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	6078      	str	r0, [r7, #4]
 8013db0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8013db2:	683b      	ldr	r3, [r7, #0]
 8013db4:	3b02      	subs	r3, #2
 8013db6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	69db      	ldr	r3, [r3, #28]
 8013dbc:	3b02      	subs	r3, #2
 8013dbe:	683a      	ldr	r2, [r7, #0]
 8013dc0:	429a      	cmp	r2, r3
 8013dc2:	d301      	bcc.n	8013dc8 <clust2sect+0x20>
 8013dc4:	2300      	movs	r3, #0
 8013dc6:	e008      	b.n	8013dda <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	895b      	ldrh	r3, [r3, #10]
 8013dcc:	461a      	mov	r2, r3
 8013dce:	683b      	ldr	r3, [r7, #0]
 8013dd0:	fb03 f202 	mul.w	r2, r3, r2
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013dd8:	4413      	add	r3, r2
}
 8013dda:	4618      	mov	r0, r3
 8013ddc:	370c      	adds	r7, #12
 8013dde:	46bd      	mov	sp, r7
 8013de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de4:	4770      	bx	lr

08013de6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8013de6:	b580      	push	{r7, lr}
 8013de8:	b086      	sub	sp, #24
 8013dea:	af00      	add	r7, sp, #0
 8013dec:	6078      	str	r0, [r7, #4]
 8013dee:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8013df6:	683b      	ldr	r3, [r7, #0]
 8013df8:	2b01      	cmp	r3, #1
 8013dfa:	d904      	bls.n	8013e06 <get_fat+0x20>
 8013dfc:	693b      	ldr	r3, [r7, #16]
 8013dfe:	69db      	ldr	r3, [r3, #28]
 8013e00:	683a      	ldr	r2, [r7, #0]
 8013e02:	429a      	cmp	r2, r3
 8013e04:	d302      	bcc.n	8013e0c <get_fat+0x26>
		val = 1;	/* Internal error */
 8013e06:	2301      	movs	r3, #1
 8013e08:	617b      	str	r3, [r7, #20]
 8013e0a:	e08e      	b.n	8013f2a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8013e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8013e10:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8013e12:	693b      	ldr	r3, [r7, #16]
 8013e14:	781b      	ldrb	r3, [r3, #0]
 8013e16:	2b03      	cmp	r3, #3
 8013e18:	d061      	beq.n	8013ede <get_fat+0xf8>
 8013e1a:	2b03      	cmp	r3, #3
 8013e1c:	dc7b      	bgt.n	8013f16 <get_fat+0x130>
 8013e1e:	2b01      	cmp	r3, #1
 8013e20:	d002      	beq.n	8013e28 <get_fat+0x42>
 8013e22:	2b02      	cmp	r3, #2
 8013e24:	d041      	beq.n	8013eaa <get_fat+0xc4>
 8013e26:	e076      	b.n	8013f16 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8013e28:	683b      	ldr	r3, [r7, #0]
 8013e2a:	60fb      	str	r3, [r7, #12]
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	085b      	lsrs	r3, r3, #1
 8013e30:	68fa      	ldr	r2, [r7, #12]
 8013e32:	4413      	add	r3, r2
 8013e34:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013e36:	693b      	ldr	r3, [r7, #16]
 8013e38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	0a5b      	lsrs	r3, r3, #9
 8013e3e:	4413      	add	r3, r2
 8013e40:	4619      	mov	r1, r3
 8013e42:	6938      	ldr	r0, [r7, #16]
 8013e44:	f7ff ff15 	bl	8013c72 <move_window>
 8013e48:	4603      	mov	r3, r0
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d166      	bne.n	8013f1c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	1c5a      	adds	r2, r3, #1
 8013e52:	60fa      	str	r2, [r7, #12]
 8013e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e58:	693a      	ldr	r2, [r7, #16]
 8013e5a:	4413      	add	r3, r2
 8013e5c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013e60:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013e62:	693b      	ldr	r3, [r7, #16]
 8013e64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	0a5b      	lsrs	r3, r3, #9
 8013e6a:	4413      	add	r3, r2
 8013e6c:	4619      	mov	r1, r3
 8013e6e:	6938      	ldr	r0, [r7, #16]
 8013e70:	f7ff feff 	bl	8013c72 <move_window>
 8013e74:	4603      	mov	r3, r0
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d152      	bne.n	8013f20 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e80:	693a      	ldr	r2, [r7, #16]
 8013e82:	4413      	add	r3, r2
 8013e84:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013e88:	021b      	lsls	r3, r3, #8
 8013e8a:	68ba      	ldr	r2, [r7, #8]
 8013e8c:	4313      	orrs	r3, r2
 8013e8e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8013e90:	683b      	ldr	r3, [r7, #0]
 8013e92:	f003 0301 	and.w	r3, r3, #1
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d002      	beq.n	8013ea0 <get_fat+0xba>
 8013e9a:	68bb      	ldr	r3, [r7, #8]
 8013e9c:	091b      	lsrs	r3, r3, #4
 8013e9e:	e002      	b.n	8013ea6 <get_fat+0xc0>
 8013ea0:	68bb      	ldr	r3, [r7, #8]
 8013ea2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013ea6:	617b      	str	r3, [r7, #20]
			break;
 8013ea8:	e03f      	b.n	8013f2a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013eaa:	693b      	ldr	r3, [r7, #16]
 8013eac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013eae:	683b      	ldr	r3, [r7, #0]
 8013eb0:	0a1b      	lsrs	r3, r3, #8
 8013eb2:	4413      	add	r3, r2
 8013eb4:	4619      	mov	r1, r3
 8013eb6:	6938      	ldr	r0, [r7, #16]
 8013eb8:	f7ff fedb 	bl	8013c72 <move_window>
 8013ebc:	4603      	mov	r3, r0
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d130      	bne.n	8013f24 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8013ec2:	693b      	ldr	r3, [r7, #16]
 8013ec4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8013ec8:	683b      	ldr	r3, [r7, #0]
 8013eca:	005b      	lsls	r3, r3, #1
 8013ecc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8013ed0:	4413      	add	r3, r2
 8013ed2:	4618      	mov	r0, r3
 8013ed4:	f7ff fd9a 	bl	8013a0c <ld_word>
 8013ed8:	4603      	mov	r3, r0
 8013eda:	617b      	str	r3, [r7, #20]
			break;
 8013edc:	e025      	b.n	8013f2a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013ede:	693b      	ldr	r3, [r7, #16]
 8013ee0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013ee2:	683b      	ldr	r3, [r7, #0]
 8013ee4:	09db      	lsrs	r3, r3, #7
 8013ee6:	4413      	add	r3, r2
 8013ee8:	4619      	mov	r1, r3
 8013eea:	6938      	ldr	r0, [r7, #16]
 8013eec:	f7ff fec1 	bl	8013c72 <move_window>
 8013ef0:	4603      	mov	r3, r0
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d118      	bne.n	8013f28 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8013ef6:	693b      	ldr	r3, [r7, #16]
 8013ef8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8013efc:	683b      	ldr	r3, [r7, #0]
 8013efe:	009b      	lsls	r3, r3, #2
 8013f00:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8013f04:	4413      	add	r3, r2
 8013f06:	4618      	mov	r0, r3
 8013f08:	f7ff fd98 	bl	8013a3c <ld_dword>
 8013f0c:	4603      	mov	r3, r0
 8013f0e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8013f12:	617b      	str	r3, [r7, #20]
			break;
 8013f14:	e009      	b.n	8013f2a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8013f16:	2301      	movs	r3, #1
 8013f18:	617b      	str	r3, [r7, #20]
 8013f1a:	e006      	b.n	8013f2a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013f1c:	bf00      	nop
 8013f1e:	e004      	b.n	8013f2a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013f20:	bf00      	nop
 8013f22:	e002      	b.n	8013f2a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013f24:	bf00      	nop
 8013f26:	e000      	b.n	8013f2a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013f28:	bf00      	nop
		}
	}

	return val;
 8013f2a:	697b      	ldr	r3, [r7, #20]
}
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	3718      	adds	r7, #24
 8013f30:	46bd      	mov	sp, r7
 8013f32:	bd80      	pop	{r7, pc}

08013f34 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8013f34:	b590      	push	{r4, r7, lr}
 8013f36:	b089      	sub	sp, #36	@ 0x24
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	60f8      	str	r0, [r7, #12]
 8013f3c:	60b9      	str	r1, [r7, #8]
 8013f3e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8013f40:	2302      	movs	r3, #2
 8013f42:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8013f44:	68bb      	ldr	r3, [r7, #8]
 8013f46:	2b01      	cmp	r3, #1
 8013f48:	f240 80d9 	bls.w	80140fe <put_fat+0x1ca>
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	69db      	ldr	r3, [r3, #28]
 8013f50:	68ba      	ldr	r2, [r7, #8]
 8013f52:	429a      	cmp	r2, r3
 8013f54:	f080 80d3 	bcs.w	80140fe <put_fat+0x1ca>
		switch (fs->fs_type) {
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	781b      	ldrb	r3, [r3, #0]
 8013f5c:	2b03      	cmp	r3, #3
 8013f5e:	f000 8096 	beq.w	801408e <put_fat+0x15a>
 8013f62:	2b03      	cmp	r3, #3
 8013f64:	f300 80cb 	bgt.w	80140fe <put_fat+0x1ca>
 8013f68:	2b01      	cmp	r3, #1
 8013f6a:	d002      	beq.n	8013f72 <put_fat+0x3e>
 8013f6c:	2b02      	cmp	r3, #2
 8013f6e:	d06e      	beq.n	801404e <put_fat+0x11a>
 8013f70:	e0c5      	b.n	80140fe <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8013f72:	68bb      	ldr	r3, [r7, #8]
 8013f74:	61bb      	str	r3, [r7, #24]
 8013f76:	69bb      	ldr	r3, [r7, #24]
 8013f78:	085b      	lsrs	r3, r3, #1
 8013f7a:	69ba      	ldr	r2, [r7, #24]
 8013f7c:	4413      	add	r3, r2
 8013f7e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013f84:	69bb      	ldr	r3, [r7, #24]
 8013f86:	0a5b      	lsrs	r3, r3, #9
 8013f88:	4413      	add	r3, r2
 8013f8a:	4619      	mov	r1, r3
 8013f8c:	68f8      	ldr	r0, [r7, #12]
 8013f8e:	f7ff fe70 	bl	8013c72 <move_window>
 8013f92:	4603      	mov	r3, r0
 8013f94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013f96:	7ffb      	ldrb	r3, [r7, #31]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	f040 80a9 	bne.w	80140f0 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8013fa4:	69bb      	ldr	r3, [r7, #24]
 8013fa6:	1c59      	adds	r1, r3, #1
 8013fa8:	61b9      	str	r1, [r7, #24]
 8013faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013fae:	4413      	add	r3, r2
 8013fb0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013fb2:	68bb      	ldr	r3, [r7, #8]
 8013fb4:	f003 0301 	and.w	r3, r3, #1
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d00d      	beq.n	8013fd8 <put_fat+0xa4>
 8013fbc:	697b      	ldr	r3, [r7, #20]
 8013fbe:	781b      	ldrb	r3, [r3, #0]
 8013fc0:	b25b      	sxtb	r3, r3
 8013fc2:	f003 030f 	and.w	r3, r3, #15
 8013fc6:	b25a      	sxtb	r2, r3
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	b2db      	uxtb	r3, r3
 8013fcc:	011b      	lsls	r3, r3, #4
 8013fce:	b25b      	sxtb	r3, r3
 8013fd0:	4313      	orrs	r3, r2
 8013fd2:	b25b      	sxtb	r3, r3
 8013fd4:	b2db      	uxtb	r3, r3
 8013fd6:	e001      	b.n	8013fdc <put_fat+0xa8>
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	b2db      	uxtb	r3, r3
 8013fdc:	697a      	ldr	r2, [r7, #20]
 8013fde:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	2201      	movs	r2, #1
 8013fe4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013fea:	69bb      	ldr	r3, [r7, #24]
 8013fec:	0a5b      	lsrs	r3, r3, #9
 8013fee:	4413      	add	r3, r2
 8013ff0:	4619      	mov	r1, r3
 8013ff2:	68f8      	ldr	r0, [r7, #12]
 8013ff4:	f7ff fe3d 	bl	8013c72 <move_window>
 8013ff8:	4603      	mov	r3, r0
 8013ffa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013ffc:	7ffb      	ldrb	r3, [r7, #31]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d178      	bne.n	80140f4 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8014008:	69bb      	ldr	r3, [r7, #24]
 801400a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801400e:	4413      	add	r3, r2
 8014010:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8014012:	68bb      	ldr	r3, [r7, #8]
 8014014:	f003 0301 	and.w	r3, r3, #1
 8014018:	2b00      	cmp	r3, #0
 801401a:	d003      	beq.n	8014024 <put_fat+0xf0>
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	091b      	lsrs	r3, r3, #4
 8014020:	b2db      	uxtb	r3, r3
 8014022:	e00e      	b.n	8014042 <put_fat+0x10e>
 8014024:	697b      	ldr	r3, [r7, #20]
 8014026:	781b      	ldrb	r3, [r3, #0]
 8014028:	b25b      	sxtb	r3, r3
 801402a:	f023 030f 	bic.w	r3, r3, #15
 801402e:	b25a      	sxtb	r2, r3
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	0a1b      	lsrs	r3, r3, #8
 8014034:	b25b      	sxtb	r3, r3
 8014036:	f003 030f 	and.w	r3, r3, #15
 801403a:	b25b      	sxtb	r3, r3
 801403c:	4313      	orrs	r3, r2
 801403e:	b25b      	sxtb	r3, r3
 8014040:	b2db      	uxtb	r3, r3
 8014042:	697a      	ldr	r2, [r7, #20]
 8014044:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	2201      	movs	r2, #1
 801404a:	70da      	strb	r2, [r3, #3]
			break;
 801404c:	e057      	b.n	80140fe <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014052:	68bb      	ldr	r3, [r7, #8]
 8014054:	0a1b      	lsrs	r3, r3, #8
 8014056:	4413      	add	r3, r2
 8014058:	4619      	mov	r1, r3
 801405a:	68f8      	ldr	r0, [r7, #12]
 801405c:	f7ff fe09 	bl	8013c72 <move_window>
 8014060:	4603      	mov	r3, r0
 8014062:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014064:	7ffb      	ldrb	r3, [r7, #31]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d146      	bne.n	80140f8 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8014070:	68bb      	ldr	r3, [r7, #8]
 8014072:	005b      	lsls	r3, r3, #1
 8014074:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8014078:	4413      	add	r3, r2
 801407a:	687a      	ldr	r2, [r7, #4]
 801407c:	b292      	uxth	r2, r2
 801407e:	4611      	mov	r1, r2
 8014080:	4618      	mov	r0, r3
 8014082:	f7ff fcfe 	bl	8013a82 <st_word>
			fs->wflag = 1;
 8014086:	68fb      	ldr	r3, [r7, #12]
 8014088:	2201      	movs	r2, #1
 801408a:	70da      	strb	r2, [r3, #3]
			break;
 801408c:	e037      	b.n	80140fe <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014092:	68bb      	ldr	r3, [r7, #8]
 8014094:	09db      	lsrs	r3, r3, #7
 8014096:	4413      	add	r3, r2
 8014098:	4619      	mov	r1, r3
 801409a:	68f8      	ldr	r0, [r7, #12]
 801409c:	f7ff fde9 	bl	8013c72 <move_window>
 80140a0:	4603      	mov	r3, r0
 80140a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80140a4:	7ffb      	ldrb	r3, [r7, #31]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d128      	bne.n	80140fc <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80140b6:	68bb      	ldr	r3, [r7, #8]
 80140b8:	009b      	lsls	r3, r3, #2
 80140ba:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80140be:	4413      	add	r3, r2
 80140c0:	4618      	mov	r0, r3
 80140c2:	f7ff fcbb 	bl	8013a3c <ld_dword>
 80140c6:	4603      	mov	r3, r0
 80140c8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80140cc:	4323      	orrs	r3, r4
 80140ce:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80140d6:	68bb      	ldr	r3, [r7, #8]
 80140d8:	009b      	lsls	r3, r3, #2
 80140da:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80140de:	4413      	add	r3, r2
 80140e0:	6879      	ldr	r1, [r7, #4]
 80140e2:	4618      	mov	r0, r3
 80140e4:	f7ff fce8 	bl	8013ab8 <st_dword>
			fs->wflag = 1;
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	2201      	movs	r2, #1
 80140ec:	70da      	strb	r2, [r3, #3]
			break;
 80140ee:	e006      	b.n	80140fe <put_fat+0x1ca>
			if (res != FR_OK) break;
 80140f0:	bf00      	nop
 80140f2:	e004      	b.n	80140fe <put_fat+0x1ca>
			if (res != FR_OK) break;
 80140f4:	bf00      	nop
 80140f6:	e002      	b.n	80140fe <put_fat+0x1ca>
			if (res != FR_OK) break;
 80140f8:	bf00      	nop
 80140fa:	e000      	b.n	80140fe <put_fat+0x1ca>
			if (res != FR_OK) break;
 80140fc:	bf00      	nop
		}
	}
	return res;
 80140fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8014100:	4618      	mov	r0, r3
 8014102:	3724      	adds	r7, #36	@ 0x24
 8014104:	46bd      	mov	sp, r7
 8014106:	bd90      	pop	{r4, r7, pc}

08014108 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8014108:	b580      	push	{r7, lr}
 801410a:	b088      	sub	sp, #32
 801410c:	af00      	add	r7, sp, #0
 801410e:	6078      	str	r0, [r7, #4]
 8014110:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8014118:	683b      	ldr	r3, [r7, #0]
 801411a:	2b00      	cmp	r3, #0
 801411c:	d10d      	bne.n	801413a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801411e:	693b      	ldr	r3, [r7, #16]
 8014120:	695b      	ldr	r3, [r3, #20]
 8014122:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8014124:	69bb      	ldr	r3, [r7, #24]
 8014126:	2b00      	cmp	r3, #0
 8014128:	d004      	beq.n	8014134 <create_chain+0x2c>
 801412a:	693b      	ldr	r3, [r7, #16]
 801412c:	69db      	ldr	r3, [r3, #28]
 801412e:	69ba      	ldr	r2, [r7, #24]
 8014130:	429a      	cmp	r2, r3
 8014132:	d31b      	bcc.n	801416c <create_chain+0x64>
 8014134:	2301      	movs	r3, #1
 8014136:	61bb      	str	r3, [r7, #24]
 8014138:	e018      	b.n	801416c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801413a:	6839      	ldr	r1, [r7, #0]
 801413c:	6878      	ldr	r0, [r7, #4]
 801413e:	f7ff fe52 	bl	8013de6 <get_fat>
 8014142:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	2b01      	cmp	r3, #1
 8014148:	d801      	bhi.n	801414e <create_chain+0x46>
 801414a:	2301      	movs	r3, #1
 801414c:	e070      	b.n	8014230 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014154:	d101      	bne.n	801415a <create_chain+0x52>
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	e06a      	b.n	8014230 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801415a:	693b      	ldr	r3, [r7, #16]
 801415c:	69db      	ldr	r3, [r3, #28]
 801415e:	68fa      	ldr	r2, [r7, #12]
 8014160:	429a      	cmp	r2, r3
 8014162:	d201      	bcs.n	8014168 <create_chain+0x60>
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	e063      	b.n	8014230 <create_chain+0x128>
		scl = clst;
 8014168:	683b      	ldr	r3, [r7, #0]
 801416a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801416c:	69bb      	ldr	r3, [r7, #24]
 801416e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8014170:	69fb      	ldr	r3, [r7, #28]
 8014172:	3301      	adds	r3, #1
 8014174:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8014176:	693b      	ldr	r3, [r7, #16]
 8014178:	69db      	ldr	r3, [r3, #28]
 801417a:	69fa      	ldr	r2, [r7, #28]
 801417c:	429a      	cmp	r2, r3
 801417e:	d307      	bcc.n	8014190 <create_chain+0x88>
				ncl = 2;
 8014180:	2302      	movs	r3, #2
 8014182:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8014184:	69fa      	ldr	r2, [r7, #28]
 8014186:	69bb      	ldr	r3, [r7, #24]
 8014188:	429a      	cmp	r2, r3
 801418a:	d901      	bls.n	8014190 <create_chain+0x88>
 801418c:	2300      	movs	r3, #0
 801418e:	e04f      	b.n	8014230 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8014190:	69f9      	ldr	r1, [r7, #28]
 8014192:	6878      	ldr	r0, [r7, #4]
 8014194:	f7ff fe27 	bl	8013de6 <get_fat>
 8014198:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	2b00      	cmp	r3, #0
 801419e:	d00e      	beq.n	80141be <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	2b01      	cmp	r3, #1
 80141a4:	d003      	beq.n	80141ae <create_chain+0xa6>
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141ac:	d101      	bne.n	80141b2 <create_chain+0xaa>
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	e03e      	b.n	8014230 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80141b2:	69fa      	ldr	r2, [r7, #28]
 80141b4:	69bb      	ldr	r3, [r7, #24]
 80141b6:	429a      	cmp	r2, r3
 80141b8:	d1da      	bne.n	8014170 <create_chain+0x68>
 80141ba:	2300      	movs	r3, #0
 80141bc:	e038      	b.n	8014230 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80141be:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80141c0:	f04f 32ff 	mov.w	r2, #4294967295
 80141c4:	69f9      	ldr	r1, [r7, #28]
 80141c6:	6938      	ldr	r0, [r7, #16]
 80141c8:	f7ff feb4 	bl	8013f34 <put_fat>
 80141cc:	4603      	mov	r3, r0
 80141ce:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80141d0:	7dfb      	ldrb	r3, [r7, #23]
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d109      	bne.n	80141ea <create_chain+0xe2>
 80141d6:	683b      	ldr	r3, [r7, #0]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d006      	beq.n	80141ea <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80141dc:	69fa      	ldr	r2, [r7, #28]
 80141de:	6839      	ldr	r1, [r7, #0]
 80141e0:	6938      	ldr	r0, [r7, #16]
 80141e2:	f7ff fea7 	bl	8013f34 <put_fat>
 80141e6:	4603      	mov	r3, r0
 80141e8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80141ea:	7dfb      	ldrb	r3, [r7, #23]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d116      	bne.n	801421e <create_chain+0x116>
		fs->last_clst = ncl;
 80141f0:	693b      	ldr	r3, [r7, #16]
 80141f2:	69fa      	ldr	r2, [r7, #28]
 80141f4:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80141f6:	693b      	ldr	r3, [r7, #16]
 80141f8:	699a      	ldr	r2, [r3, #24]
 80141fa:	693b      	ldr	r3, [r7, #16]
 80141fc:	69db      	ldr	r3, [r3, #28]
 80141fe:	3b02      	subs	r3, #2
 8014200:	429a      	cmp	r2, r3
 8014202:	d804      	bhi.n	801420e <create_chain+0x106>
 8014204:	693b      	ldr	r3, [r7, #16]
 8014206:	699b      	ldr	r3, [r3, #24]
 8014208:	1e5a      	subs	r2, r3, #1
 801420a:	693b      	ldr	r3, [r7, #16]
 801420c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801420e:	693b      	ldr	r3, [r7, #16]
 8014210:	791b      	ldrb	r3, [r3, #4]
 8014212:	f043 0301 	orr.w	r3, r3, #1
 8014216:	b2da      	uxtb	r2, r3
 8014218:	693b      	ldr	r3, [r7, #16]
 801421a:	711a      	strb	r2, [r3, #4]
 801421c:	e007      	b.n	801422e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801421e:	7dfb      	ldrb	r3, [r7, #23]
 8014220:	2b01      	cmp	r3, #1
 8014222:	d102      	bne.n	801422a <create_chain+0x122>
 8014224:	f04f 33ff 	mov.w	r3, #4294967295
 8014228:	e000      	b.n	801422c <create_chain+0x124>
 801422a:	2301      	movs	r3, #1
 801422c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801422e:	69fb      	ldr	r3, [r7, #28]
}
 8014230:	4618      	mov	r0, r3
 8014232:	3720      	adds	r7, #32
 8014234:	46bd      	mov	sp, r7
 8014236:	bd80      	pop	{r7, pc}

08014238 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8014238:	b480      	push	{r7}
 801423a:	b087      	sub	sp, #28
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
 8014240:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801424c:	3304      	adds	r3, #4
 801424e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8014250:	683b      	ldr	r3, [r7, #0]
 8014252:	0a5b      	lsrs	r3, r3, #9
 8014254:	68fa      	ldr	r2, [r7, #12]
 8014256:	8952      	ldrh	r2, [r2, #10]
 8014258:	fbb3 f3f2 	udiv	r3, r3, r2
 801425c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801425e:	693b      	ldr	r3, [r7, #16]
 8014260:	1d1a      	adds	r2, r3, #4
 8014262:	613a      	str	r2, [r7, #16]
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8014268:	68bb      	ldr	r3, [r7, #8]
 801426a:	2b00      	cmp	r3, #0
 801426c:	d101      	bne.n	8014272 <clmt_clust+0x3a>
 801426e:	2300      	movs	r3, #0
 8014270:	e010      	b.n	8014294 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8014272:	697a      	ldr	r2, [r7, #20]
 8014274:	68bb      	ldr	r3, [r7, #8]
 8014276:	429a      	cmp	r2, r3
 8014278:	d307      	bcc.n	801428a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801427a:	697a      	ldr	r2, [r7, #20]
 801427c:	68bb      	ldr	r3, [r7, #8]
 801427e:	1ad3      	subs	r3, r2, r3
 8014280:	617b      	str	r3, [r7, #20]
 8014282:	693b      	ldr	r3, [r7, #16]
 8014284:	3304      	adds	r3, #4
 8014286:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8014288:	e7e9      	b.n	801425e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801428a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801428c:	693b      	ldr	r3, [r7, #16]
 801428e:	681a      	ldr	r2, [r3, #0]
 8014290:	697b      	ldr	r3, [r7, #20]
 8014292:	4413      	add	r3, r2
}
 8014294:	4618      	mov	r0, r3
 8014296:	371c      	adds	r7, #28
 8014298:	46bd      	mov	sp, r7
 801429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801429e:	4770      	bx	lr

080142a0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80142a0:	b580      	push	{r7, lr}
 80142a2:	b084      	sub	sp, #16
 80142a4:	af00      	add	r7, sp, #0
 80142a6:	60f8      	str	r0, [r7, #12]
 80142a8:	60b9      	str	r1, [r7, #8]
 80142aa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80142ac:	68bb      	ldr	r3, [r7, #8]
 80142ae:	331a      	adds	r3, #26
 80142b0:	687a      	ldr	r2, [r7, #4]
 80142b2:	b292      	uxth	r2, r2
 80142b4:	4611      	mov	r1, r2
 80142b6:	4618      	mov	r0, r3
 80142b8:	f7ff fbe3 	bl	8013a82 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	781b      	ldrb	r3, [r3, #0]
 80142c0:	2b03      	cmp	r3, #3
 80142c2:	d109      	bne.n	80142d8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80142c4:	68bb      	ldr	r3, [r7, #8]
 80142c6:	f103 0214 	add.w	r2, r3, #20
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	0c1b      	lsrs	r3, r3, #16
 80142ce:	b29b      	uxth	r3, r3
 80142d0:	4619      	mov	r1, r3
 80142d2:	4610      	mov	r0, r2
 80142d4:	f7ff fbd5 	bl	8013a82 <st_word>
	}
}
 80142d8:	bf00      	nop
 80142da:	3710      	adds	r7, #16
 80142dc:	46bd      	mov	sp, r7
 80142de:	bd80      	pop	{r7, pc}

080142e0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b084      	sub	sp, #16
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	6078      	str	r0, [r7, #4]
 80142e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80142ea:	2309      	movs	r3, #9
 80142ec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d02e      	beq.n	8014352 <validate+0x72>
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d02a      	beq.n	8014352 <validate+0x72>
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	781b      	ldrb	r3, [r3, #0]
 8014302:	2b00      	cmp	r3, #0
 8014304:	d025      	beq.n	8014352 <validate+0x72>
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	889a      	ldrh	r2, [r3, #4]
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	88db      	ldrh	r3, [r3, #6]
 8014310:	429a      	cmp	r2, r3
 8014312:	d11e      	bne.n	8014352 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	4618      	mov	r0, r3
 801431a:	f7ff fc35 	bl	8013b88 <lock_fs>
 801431e:	4603      	mov	r3, r0
 8014320:	2b00      	cmp	r3, #0
 8014322:	d014      	beq.n	801434e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	785b      	ldrb	r3, [r3, #1]
 801432a:	4618      	mov	r0, r3
 801432c:	f7ff faf6 	bl	801391c <disk_status>
 8014330:	4603      	mov	r3, r0
 8014332:	f003 0301 	and.w	r3, r3, #1
 8014336:	2b00      	cmp	r3, #0
 8014338:	d102      	bne.n	8014340 <validate+0x60>
				res = FR_OK;
 801433a:	2300      	movs	r3, #0
 801433c:	73fb      	strb	r3, [r7, #15]
 801433e:	e008      	b.n	8014352 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	2100      	movs	r1, #0
 8014346:	4618      	mov	r0, r3
 8014348:	f7ff fc34 	bl	8013bb4 <unlock_fs>
 801434c:	e001      	b.n	8014352 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 801434e:	230f      	movs	r3, #15
 8014350:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8014352:	7bfb      	ldrb	r3, [r7, #15]
 8014354:	2b00      	cmp	r3, #0
 8014356:	d102      	bne.n	801435e <validate+0x7e>
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	681b      	ldr	r3, [r3, #0]
 801435c:	e000      	b.n	8014360 <validate+0x80>
 801435e:	2300      	movs	r3, #0
 8014360:	683a      	ldr	r2, [r7, #0]
 8014362:	6013      	str	r3, [r2, #0]
	return res;
 8014364:	7bfb      	ldrb	r3, [r7, #15]
}
 8014366:	4618      	mov	r0, r3
 8014368:	3710      	adds	r7, #16
 801436a:	46bd      	mov	sp, r7
 801436c:	bd80      	pop	{r7, pc}

0801436e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801436e:	b580      	push	{r7, lr}
 8014370:	b08c      	sub	sp, #48	@ 0x30
 8014372:	af00      	add	r7, sp, #0
 8014374:	60f8      	str	r0, [r7, #12]
 8014376:	60b9      	str	r1, [r7, #8]
 8014378:	607a      	str	r2, [r7, #4]
 801437a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801437c:	68bb      	ldr	r3, [r7, #8]
 801437e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014380:	683b      	ldr	r3, [r7, #0]
 8014382:	2200      	movs	r2, #0
 8014384:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	f107 0210 	add.w	r2, r7, #16
 801438c:	4611      	mov	r1, r2
 801438e:	4618      	mov	r0, r3
 8014390:	f7ff ffa6 	bl	80142e0 <validate>
 8014394:	4603      	mov	r3, r0
 8014396:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801439a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d107      	bne.n	80143b2 <f_write+0x44>
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	7d5b      	ldrb	r3, [r3, #21]
 80143a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80143aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d009      	beq.n	80143c6 <f_write+0x58>
 80143b2:	693b      	ldr	r3, [r7, #16]
 80143b4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80143b8:	4611      	mov	r1, r2
 80143ba:	4618      	mov	r0, r3
 80143bc:	f7ff fbfa 	bl	8013bb4 <unlock_fs>
 80143c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80143c4:	e173      	b.n	80146ae <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	7d1b      	ldrb	r3, [r3, #20]
 80143ca:	f003 0302 	and.w	r3, r3, #2
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d106      	bne.n	80143e0 <f_write+0x72>
 80143d2:	693b      	ldr	r3, [r7, #16]
 80143d4:	2107      	movs	r1, #7
 80143d6:	4618      	mov	r0, r3
 80143d8:	f7ff fbec 	bl	8013bb4 <unlock_fs>
 80143dc:	2307      	movs	r3, #7
 80143de:	e166      	b.n	80146ae <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	699a      	ldr	r2, [r3, #24]
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	441a      	add	r2, r3
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	699b      	ldr	r3, [r3, #24]
 80143ec:	429a      	cmp	r2, r3
 80143ee:	f080 814b 	bcs.w	8014688 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	699b      	ldr	r3, [r3, #24]
 80143f6:	43db      	mvns	r3, r3
 80143f8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80143fa:	e145      	b.n	8014688 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	699b      	ldr	r3, [r3, #24]
 8014400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014404:	2b00      	cmp	r3, #0
 8014406:	f040 8101 	bne.w	801460c <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	699b      	ldr	r3, [r3, #24]
 801440e:	0a5b      	lsrs	r3, r3, #9
 8014410:	693a      	ldr	r2, [r7, #16]
 8014412:	8952      	ldrh	r2, [r2, #10]
 8014414:	3a01      	subs	r2, #1
 8014416:	4013      	ands	r3, r2
 8014418:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801441a:	69bb      	ldr	r3, [r7, #24]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d14d      	bne.n	80144bc <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	699b      	ldr	r3, [r3, #24]
 8014424:	2b00      	cmp	r3, #0
 8014426:	d10c      	bne.n	8014442 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	689b      	ldr	r3, [r3, #8]
 801442c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801442e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014430:	2b00      	cmp	r3, #0
 8014432:	d11a      	bne.n	801446a <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8014434:	68fb      	ldr	r3, [r7, #12]
 8014436:	2100      	movs	r1, #0
 8014438:	4618      	mov	r0, r3
 801443a:	f7ff fe65 	bl	8014108 <create_chain>
 801443e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8014440:	e013      	b.n	801446a <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014442:	68fb      	ldr	r3, [r7, #12]
 8014444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014446:	2b00      	cmp	r3, #0
 8014448:	d007      	beq.n	801445a <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	699b      	ldr	r3, [r3, #24]
 801444e:	4619      	mov	r1, r3
 8014450:	68f8      	ldr	r0, [r7, #12]
 8014452:	f7ff fef1 	bl	8014238 <clmt_clust>
 8014456:	62b8      	str	r0, [r7, #40]	@ 0x28
 8014458:	e007      	b.n	801446a <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801445a:	68fa      	ldr	r2, [r7, #12]
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	69db      	ldr	r3, [r3, #28]
 8014460:	4619      	mov	r1, r3
 8014462:	4610      	mov	r0, r2
 8014464:	f7ff fe50 	bl	8014108 <create_chain>
 8014468:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801446a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801446c:	2b00      	cmp	r3, #0
 801446e:	f000 8110 	beq.w	8014692 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014474:	2b01      	cmp	r3, #1
 8014476:	d109      	bne.n	801448c <f_write+0x11e>
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	2202      	movs	r2, #2
 801447c:	755a      	strb	r2, [r3, #21]
 801447e:	693b      	ldr	r3, [r7, #16]
 8014480:	2102      	movs	r1, #2
 8014482:	4618      	mov	r0, r3
 8014484:	f7ff fb96 	bl	8013bb4 <unlock_fs>
 8014488:	2302      	movs	r3, #2
 801448a:	e110      	b.n	80146ae <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801448c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801448e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014492:	d109      	bne.n	80144a8 <f_write+0x13a>
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	2201      	movs	r2, #1
 8014498:	755a      	strb	r2, [r3, #21]
 801449a:	693b      	ldr	r3, [r7, #16]
 801449c:	2101      	movs	r1, #1
 801449e:	4618      	mov	r0, r3
 80144a0:	f7ff fb88 	bl	8013bb4 <unlock_fs>
 80144a4:	2301      	movs	r3, #1
 80144a6:	e102      	b.n	80146ae <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 80144a8:	68fb      	ldr	r3, [r7, #12]
 80144aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80144ac:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	689b      	ldr	r3, [r3, #8]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d102      	bne.n	80144bc <f_write+0x14e>
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80144ba:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	7d1b      	ldrb	r3, [r3, #20]
 80144c0:	b25b      	sxtb	r3, r3
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	da1d      	bge.n	8014502 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80144c6:	693b      	ldr	r3, [r7, #16]
 80144c8:	7858      	ldrb	r0, [r3, #1]
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	6a1a      	ldr	r2, [r3, #32]
 80144d4:	2301      	movs	r3, #1
 80144d6:	f7ff fa5b 	bl	8013990 <disk_write>
 80144da:	4603      	mov	r3, r0
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d009      	beq.n	80144f4 <f_write+0x186>
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	2201      	movs	r2, #1
 80144e4:	755a      	strb	r2, [r3, #21]
 80144e6:	693b      	ldr	r3, [r7, #16]
 80144e8:	2101      	movs	r1, #1
 80144ea:	4618      	mov	r0, r3
 80144ec:	f7ff fb62 	bl	8013bb4 <unlock_fs>
 80144f0:	2301      	movs	r3, #1
 80144f2:	e0dc      	b.n	80146ae <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	7d1b      	ldrb	r3, [r3, #20]
 80144f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80144fc:	b2da      	uxtb	r2, r3
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014502:	693a      	ldr	r2, [r7, #16]
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	69db      	ldr	r3, [r3, #28]
 8014508:	4619      	mov	r1, r3
 801450a:	4610      	mov	r0, r2
 801450c:	f7ff fc4c 	bl	8013da8 <clust2sect>
 8014510:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014512:	697b      	ldr	r3, [r7, #20]
 8014514:	2b00      	cmp	r3, #0
 8014516:	d109      	bne.n	801452c <f_write+0x1be>
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	2202      	movs	r2, #2
 801451c:	755a      	strb	r2, [r3, #21]
 801451e:	693b      	ldr	r3, [r7, #16]
 8014520:	2102      	movs	r1, #2
 8014522:	4618      	mov	r0, r3
 8014524:	f7ff fb46 	bl	8013bb4 <unlock_fs>
 8014528:	2302      	movs	r3, #2
 801452a:	e0c0      	b.n	80146ae <f_write+0x340>
			sect += csect;
 801452c:	697a      	ldr	r2, [r7, #20]
 801452e:	69bb      	ldr	r3, [r7, #24]
 8014530:	4413      	add	r3, r2
 8014532:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	0a5b      	lsrs	r3, r3, #9
 8014538:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801453a:	6a3b      	ldr	r3, [r7, #32]
 801453c:	2b00      	cmp	r3, #0
 801453e:	d041      	beq.n	80145c4 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014540:	69ba      	ldr	r2, [r7, #24]
 8014542:	6a3b      	ldr	r3, [r7, #32]
 8014544:	4413      	add	r3, r2
 8014546:	693a      	ldr	r2, [r7, #16]
 8014548:	8952      	ldrh	r2, [r2, #10]
 801454a:	4293      	cmp	r3, r2
 801454c:	d905      	bls.n	801455a <f_write+0x1ec>
					cc = fs->csize - csect;
 801454e:	693b      	ldr	r3, [r7, #16]
 8014550:	895b      	ldrh	r3, [r3, #10]
 8014552:	461a      	mov	r2, r3
 8014554:	69bb      	ldr	r3, [r7, #24]
 8014556:	1ad3      	subs	r3, r2, r3
 8014558:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801455a:	693b      	ldr	r3, [r7, #16]
 801455c:	7858      	ldrb	r0, [r3, #1]
 801455e:	6a3b      	ldr	r3, [r7, #32]
 8014560:	697a      	ldr	r2, [r7, #20]
 8014562:	69f9      	ldr	r1, [r7, #28]
 8014564:	f7ff fa14 	bl	8013990 <disk_write>
 8014568:	4603      	mov	r3, r0
 801456a:	2b00      	cmp	r3, #0
 801456c:	d009      	beq.n	8014582 <f_write+0x214>
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	2201      	movs	r2, #1
 8014572:	755a      	strb	r2, [r3, #21]
 8014574:	693b      	ldr	r3, [r7, #16]
 8014576:	2101      	movs	r1, #1
 8014578:	4618      	mov	r0, r3
 801457a:	f7ff fb1b 	bl	8013bb4 <unlock_fs>
 801457e:	2301      	movs	r3, #1
 8014580:	e095      	b.n	80146ae <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	6a1a      	ldr	r2, [r3, #32]
 8014586:	697b      	ldr	r3, [r7, #20]
 8014588:	1ad3      	subs	r3, r2, r3
 801458a:	6a3a      	ldr	r2, [r7, #32]
 801458c:	429a      	cmp	r2, r3
 801458e:	d915      	bls.n	80145bc <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	6a1a      	ldr	r2, [r3, #32]
 801459a:	697b      	ldr	r3, [r7, #20]
 801459c:	1ad3      	subs	r3, r2, r3
 801459e:	025b      	lsls	r3, r3, #9
 80145a0:	69fa      	ldr	r2, [r7, #28]
 80145a2:	4413      	add	r3, r2
 80145a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80145a8:	4619      	mov	r1, r3
 80145aa:	f7ff fab1 	bl	8013b10 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	7d1b      	ldrb	r3, [r3, #20]
 80145b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80145b6:	b2da      	uxtb	r2, r3
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80145bc:	6a3b      	ldr	r3, [r7, #32]
 80145be:	025b      	lsls	r3, r3, #9
 80145c0:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80145c2:	e044      	b.n	801464e <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	6a1b      	ldr	r3, [r3, #32]
 80145c8:	697a      	ldr	r2, [r7, #20]
 80145ca:	429a      	cmp	r2, r3
 80145cc:	d01b      	beq.n	8014606 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	699a      	ldr	r2, [r3, #24]
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80145d6:	429a      	cmp	r2, r3
 80145d8:	d215      	bcs.n	8014606 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80145da:	693b      	ldr	r3, [r7, #16]
 80145dc:	7858      	ldrb	r0, [r3, #1]
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80145e4:	2301      	movs	r3, #1
 80145e6:	697a      	ldr	r2, [r7, #20]
 80145e8:	f7ff f9b2 	bl	8013950 <disk_read>
 80145ec:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d009      	beq.n	8014606 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 80145f2:	68fb      	ldr	r3, [r7, #12]
 80145f4:	2201      	movs	r2, #1
 80145f6:	755a      	strb	r2, [r3, #21]
 80145f8:	693b      	ldr	r3, [r7, #16]
 80145fa:	2101      	movs	r1, #1
 80145fc:	4618      	mov	r0, r3
 80145fe:	f7ff fad9 	bl	8013bb4 <unlock_fs>
 8014602:	2301      	movs	r3, #1
 8014604:	e053      	b.n	80146ae <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	697a      	ldr	r2, [r7, #20]
 801460a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	699b      	ldr	r3, [r3, #24]
 8014610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014614:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8014618:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801461a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	429a      	cmp	r2, r3
 8014620:	d901      	bls.n	8014626 <f_write+0x2b8>
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	699b      	ldr	r3, [r3, #24]
 8014630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014634:	4413      	add	r3, r2
 8014636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014638:	69f9      	ldr	r1, [r7, #28]
 801463a:	4618      	mov	r0, r3
 801463c:	f7ff fa68 	bl	8013b10 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	7d1b      	ldrb	r3, [r3, #20]
 8014644:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8014648:	b2da      	uxtb	r2, r3
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801464e:	69fa      	ldr	r2, [r7, #28]
 8014650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014652:	4413      	add	r3, r2
 8014654:	61fb      	str	r3, [r7, #28]
 8014656:	68fb      	ldr	r3, [r7, #12]
 8014658:	699a      	ldr	r2, [r3, #24]
 801465a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801465c:	441a      	add	r2, r3
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	619a      	str	r2, [r3, #24]
 8014662:	68fb      	ldr	r3, [r7, #12]
 8014664:	68da      	ldr	r2, [r3, #12]
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	699b      	ldr	r3, [r3, #24]
 801466a:	429a      	cmp	r2, r3
 801466c:	bf38      	it	cc
 801466e:	461a      	movcc	r2, r3
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	60da      	str	r2, [r3, #12]
 8014674:	683b      	ldr	r3, [r7, #0]
 8014676:	681a      	ldr	r2, [r3, #0]
 8014678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801467a:	441a      	add	r2, r3
 801467c:	683b      	ldr	r3, [r7, #0]
 801467e:	601a      	str	r2, [r3, #0]
 8014680:	687a      	ldr	r2, [r7, #4]
 8014682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014684:	1ad3      	subs	r3, r2, r3
 8014686:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	2b00      	cmp	r3, #0
 801468c:	f47f aeb6 	bne.w	80143fc <f_write+0x8e>
 8014690:	e000      	b.n	8014694 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014692:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	7d1b      	ldrb	r3, [r3, #20]
 8014698:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801469c:	b2da      	uxtb	r2, r3
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80146a2:	693b      	ldr	r3, [r7, #16]
 80146a4:	2100      	movs	r1, #0
 80146a6:	4618      	mov	r0, r3
 80146a8:	f7ff fa84 	bl	8013bb4 <unlock_fs>
 80146ac:	2300      	movs	r3, #0
}
 80146ae:	4618      	mov	r0, r3
 80146b0:	3730      	adds	r7, #48	@ 0x30
 80146b2:	46bd      	mov	sp, r7
 80146b4:	bd80      	pop	{r7, pc}

080146b6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80146b6:	b580      	push	{r7, lr}
 80146b8:	b086      	sub	sp, #24
 80146ba:	af00      	add	r7, sp, #0
 80146bc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	f107 0208 	add.w	r2, r7, #8
 80146c4:	4611      	mov	r1, r2
 80146c6:	4618      	mov	r0, r3
 80146c8:	f7ff fe0a 	bl	80142e0 <validate>
 80146cc:	4603      	mov	r3, r0
 80146ce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80146d0:	7dfb      	ldrb	r3, [r7, #23]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d16d      	bne.n	80147b2 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	7d1b      	ldrb	r3, [r3, #20]
 80146da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d067      	beq.n	80147b2 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	7d1b      	ldrb	r3, [r3, #20]
 80146e6:	b25b      	sxtb	r3, r3
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	da1a      	bge.n	8014722 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80146ec:	68bb      	ldr	r3, [r7, #8]
 80146ee:	7858      	ldrb	r0, [r3, #1]
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	6a1a      	ldr	r2, [r3, #32]
 80146fa:	2301      	movs	r3, #1
 80146fc:	f7ff f948 	bl	8013990 <disk_write>
 8014700:	4603      	mov	r3, r0
 8014702:	2b00      	cmp	r3, #0
 8014704:	d006      	beq.n	8014714 <f_sync+0x5e>
 8014706:	68bb      	ldr	r3, [r7, #8]
 8014708:	2101      	movs	r1, #1
 801470a:	4618      	mov	r0, r3
 801470c:	f7ff fa52 	bl	8013bb4 <unlock_fs>
 8014710:	2301      	movs	r3, #1
 8014712:	e055      	b.n	80147c0 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	7d1b      	ldrb	r3, [r3, #20]
 8014718:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801471c:	b2da      	uxtb	r2, r3
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8014722:	f7fe fbd9 	bl	8012ed8 <get_fattime>
 8014726:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014728:	68ba      	ldr	r2, [r7, #8]
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801472e:	4619      	mov	r1, r3
 8014730:	4610      	mov	r0, r2
 8014732:	f7ff fa9e 	bl	8013c72 <move_window>
 8014736:	4603      	mov	r3, r0
 8014738:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801473a:	7dfb      	ldrb	r3, [r7, #23]
 801473c:	2b00      	cmp	r3, #0
 801473e:	d138      	bne.n	80147b2 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014744:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	330b      	adds	r3, #11
 801474a:	781a      	ldrb	r2, [r3, #0]
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	330b      	adds	r3, #11
 8014750:	f042 0220 	orr.w	r2, r2, #32
 8014754:	b2d2      	uxtb	r2, r2
 8014756:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	6818      	ldr	r0, [r3, #0]
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	689b      	ldr	r3, [r3, #8]
 8014760:	461a      	mov	r2, r3
 8014762:	68f9      	ldr	r1, [r7, #12]
 8014764:	f7ff fd9c 	bl	80142a0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	f103 021c 	add.w	r2, r3, #28
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	68db      	ldr	r3, [r3, #12]
 8014772:	4619      	mov	r1, r3
 8014774:	4610      	mov	r0, r2
 8014776:	f7ff f99f 	bl	8013ab8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	3316      	adds	r3, #22
 801477e:	6939      	ldr	r1, [r7, #16]
 8014780:	4618      	mov	r0, r3
 8014782:	f7ff f999 	bl	8013ab8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	3312      	adds	r3, #18
 801478a:	2100      	movs	r1, #0
 801478c:	4618      	mov	r0, r3
 801478e:	f7ff f978 	bl	8013a82 <st_word>
					fs->wflag = 1;
 8014792:	68bb      	ldr	r3, [r7, #8]
 8014794:	2201      	movs	r2, #1
 8014796:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014798:	68bb      	ldr	r3, [r7, #8]
 801479a:	4618      	mov	r0, r3
 801479c:	f7ff fa96 	bl	8013ccc <sync_fs>
 80147a0:	4603      	mov	r3, r0
 80147a2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	7d1b      	ldrb	r3, [r3, #20]
 80147a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80147ac:	b2da      	uxtb	r2, r3
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80147b2:	68bb      	ldr	r3, [r7, #8]
 80147b4:	7dfa      	ldrb	r2, [r7, #23]
 80147b6:	4611      	mov	r1, r2
 80147b8:	4618      	mov	r0, r3
 80147ba:	f7ff f9fb 	bl	8013bb4 <unlock_fs>
 80147be:	7dfb      	ldrb	r3, [r7, #23]
}
 80147c0:	4618      	mov	r0, r3
 80147c2:	3718      	adds	r7, #24
 80147c4:	46bd      	mov	sp, r7
 80147c6:	bd80      	pop	{r7, pc}

080147c8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80147c8:	b480      	push	{r7}
 80147ca:	b087      	sub	sp, #28
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	60f8      	str	r0, [r7, #12]
 80147d0:	60b9      	str	r1, [r7, #8]
 80147d2:	4613      	mov	r3, r2
 80147d4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80147d6:	2301      	movs	r3, #1
 80147d8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80147da:	2300      	movs	r3, #0
 80147dc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80147de:	4b1f      	ldr	r3, [pc, #124]	@ (801485c <FATFS_LinkDriverEx+0x94>)
 80147e0:	7a5b      	ldrb	r3, [r3, #9]
 80147e2:	b2db      	uxtb	r3, r3
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d131      	bne.n	801484c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80147e8:	4b1c      	ldr	r3, [pc, #112]	@ (801485c <FATFS_LinkDriverEx+0x94>)
 80147ea:	7a5b      	ldrb	r3, [r3, #9]
 80147ec:	b2db      	uxtb	r3, r3
 80147ee:	461a      	mov	r2, r3
 80147f0:	4b1a      	ldr	r3, [pc, #104]	@ (801485c <FATFS_LinkDriverEx+0x94>)
 80147f2:	2100      	movs	r1, #0
 80147f4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80147f6:	4b19      	ldr	r3, [pc, #100]	@ (801485c <FATFS_LinkDriverEx+0x94>)
 80147f8:	7a5b      	ldrb	r3, [r3, #9]
 80147fa:	b2db      	uxtb	r3, r3
 80147fc:	4a17      	ldr	r2, [pc, #92]	@ (801485c <FATFS_LinkDriverEx+0x94>)
 80147fe:	009b      	lsls	r3, r3, #2
 8014800:	4413      	add	r3, r2
 8014802:	68fa      	ldr	r2, [r7, #12]
 8014804:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014806:	4b15      	ldr	r3, [pc, #84]	@ (801485c <FATFS_LinkDriverEx+0x94>)
 8014808:	7a5b      	ldrb	r3, [r3, #9]
 801480a:	b2db      	uxtb	r3, r3
 801480c:	461a      	mov	r2, r3
 801480e:	4b13      	ldr	r3, [pc, #76]	@ (801485c <FATFS_LinkDriverEx+0x94>)
 8014810:	4413      	add	r3, r2
 8014812:	79fa      	ldrb	r2, [r7, #7]
 8014814:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014816:	4b11      	ldr	r3, [pc, #68]	@ (801485c <FATFS_LinkDriverEx+0x94>)
 8014818:	7a5b      	ldrb	r3, [r3, #9]
 801481a:	b2db      	uxtb	r3, r3
 801481c:	1c5a      	adds	r2, r3, #1
 801481e:	b2d1      	uxtb	r1, r2
 8014820:	4a0e      	ldr	r2, [pc, #56]	@ (801485c <FATFS_LinkDriverEx+0x94>)
 8014822:	7251      	strb	r1, [r2, #9]
 8014824:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014826:	7dbb      	ldrb	r3, [r7, #22]
 8014828:	3330      	adds	r3, #48	@ 0x30
 801482a:	b2da      	uxtb	r2, r3
 801482c:	68bb      	ldr	r3, [r7, #8]
 801482e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014830:	68bb      	ldr	r3, [r7, #8]
 8014832:	3301      	adds	r3, #1
 8014834:	223a      	movs	r2, #58	@ 0x3a
 8014836:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014838:	68bb      	ldr	r3, [r7, #8]
 801483a:	3302      	adds	r3, #2
 801483c:	222f      	movs	r2, #47	@ 0x2f
 801483e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014840:	68bb      	ldr	r3, [r7, #8]
 8014842:	3303      	adds	r3, #3
 8014844:	2200      	movs	r2, #0
 8014846:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014848:	2300      	movs	r3, #0
 801484a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801484c:	7dfb      	ldrb	r3, [r7, #23]
}
 801484e:	4618      	mov	r0, r3
 8014850:	371c      	adds	r7, #28
 8014852:	46bd      	mov	sp, r7
 8014854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014858:	4770      	bx	lr
 801485a:	bf00      	nop
 801485c:	24002a98 	.word	0x24002a98

08014860 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014860:	b580      	push	{r7, lr}
 8014862:	b082      	sub	sp, #8
 8014864:	af00      	add	r7, sp, #0
 8014866:	6078      	str	r0, [r7, #4]
 8014868:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801486a:	2200      	movs	r2, #0
 801486c:	6839      	ldr	r1, [r7, #0]
 801486e:	6878      	ldr	r0, [r7, #4]
 8014870:	f7ff ffaa 	bl	80147c8 <FATFS_LinkDriverEx>
 8014874:	4603      	mov	r3, r0
}
 8014876:	4618      	mov	r0, r3
 8014878:	3708      	adds	r7, #8
 801487a:	46bd      	mov	sp, r7
 801487c:	bd80      	pop	{r7, pc}

0801487e <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801487e:	b580      	push	{r7, lr}
 8014880:	b084      	sub	sp, #16
 8014882:	af00      	add	r7, sp, #0
 8014884:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8014886:	2300      	movs	r3, #0
 8014888:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 801488a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801488e:	6878      	ldr	r0, [r7, #4]
 8014890:	f000 f8a6 	bl	80149e0 <osSemaphoreWait>
 8014894:	4603      	mov	r3, r0
 8014896:	2b00      	cmp	r3, #0
 8014898:	d101      	bne.n	801489e <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 801489a:	2301      	movs	r3, #1
 801489c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801489e:	68fb      	ldr	r3, [r7, #12]
}
 80148a0:	4618      	mov	r0, r3
 80148a2:	3710      	adds	r7, #16
 80148a4:	46bd      	mov	sp, r7
 80148a6:	bd80      	pop	{r7, pc}

080148a8 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80148a8:	b580      	push	{r7, lr}
 80148aa:	b082      	sub	sp, #8
 80148ac:	af00      	add	r7, sp, #0
 80148ae:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80148b0:	6878      	ldr	r0, [r7, #4]
 80148b2:	f000 f8e3 	bl	8014a7c <osSemaphoreRelease>
#endif
}
 80148b6:	bf00      	nop
 80148b8:	3708      	adds	r7, #8
 80148ba:	46bd      	mov	sp, r7
 80148bc:	bd80      	pop	{r7, pc}

080148be <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80148be:	b480      	push	{r7}
 80148c0:	b085      	sub	sp, #20
 80148c2:	af00      	add	r7, sp, #0
 80148c4:	4603      	mov	r3, r0
 80148c6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80148c8:	2300      	movs	r3, #0
 80148ca:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80148cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80148d0:	2b84      	cmp	r3, #132	@ 0x84
 80148d2:	d005      	beq.n	80148e0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80148d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	4413      	add	r3, r2
 80148dc:	3303      	adds	r3, #3
 80148de:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80148e0:	68fb      	ldr	r3, [r7, #12]
}
 80148e2:	4618      	mov	r0, r3
 80148e4:	3714      	adds	r7, #20
 80148e6:	46bd      	mov	sp, r7
 80148e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ec:	4770      	bx	lr

080148ee <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80148ee:	b480      	push	{r7}
 80148f0:	b083      	sub	sp, #12
 80148f2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80148f4:	f3ef 8305 	mrs	r3, IPSR
 80148f8:	607b      	str	r3, [r7, #4]
  return(result);
 80148fa:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	bf14      	ite	ne
 8014900:	2301      	movne	r3, #1
 8014902:	2300      	moveq	r3, #0
 8014904:	b2db      	uxtb	r3, r3
}
 8014906:	4618      	mov	r0, r3
 8014908:	370c      	adds	r7, #12
 801490a:	46bd      	mov	sp, r7
 801490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014910:	4770      	bx	lr

08014912 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8014912:	b580      	push	{r7, lr}
 8014914:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8014916:	f000 ffb5 	bl	8015884 <vTaskStartScheduler>
  
  return osOK;
 801491a:	2300      	movs	r3, #0
}
 801491c:	4618      	mov	r0, r3
 801491e:	bd80      	pop	{r7, pc}

08014920 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8014920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014922:	b089      	sub	sp, #36	@ 0x24
 8014924:	af04      	add	r7, sp, #16
 8014926:	6078      	str	r0, [r7, #4]
 8014928:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	695b      	ldr	r3, [r3, #20]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d020      	beq.n	8014974 <osThreadCreate+0x54>
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	699b      	ldr	r3, [r3, #24]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d01c      	beq.n	8014974 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	685c      	ldr	r4, [r3, #4]
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	691e      	ldr	r6, [r3, #16]
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801494c:	4618      	mov	r0, r3
 801494e:	f7ff ffb6 	bl	80148be <makeFreeRtosPriority>
 8014952:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	695b      	ldr	r3, [r3, #20]
 8014958:	687a      	ldr	r2, [r7, #4]
 801495a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801495c:	9202      	str	r2, [sp, #8]
 801495e:	9301      	str	r3, [sp, #4]
 8014960:	9100      	str	r1, [sp, #0]
 8014962:	683b      	ldr	r3, [r7, #0]
 8014964:	4632      	mov	r2, r6
 8014966:	4629      	mov	r1, r5
 8014968:	4620      	mov	r0, r4
 801496a:	f000 fdbd 	bl	80154e8 <xTaskCreateStatic>
 801496e:	4603      	mov	r3, r0
 8014970:	60fb      	str	r3, [r7, #12]
 8014972:	e01c      	b.n	80149ae <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	685c      	ldr	r4, [r3, #4]
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014980:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014988:	4618      	mov	r0, r3
 801498a:	f7ff ff98 	bl	80148be <makeFreeRtosPriority>
 801498e:	4602      	mov	r2, r0
 8014990:	f107 030c 	add.w	r3, r7, #12
 8014994:	9301      	str	r3, [sp, #4]
 8014996:	9200      	str	r2, [sp, #0]
 8014998:	683b      	ldr	r3, [r7, #0]
 801499a:	4632      	mov	r2, r6
 801499c:	4629      	mov	r1, r5
 801499e:	4620      	mov	r0, r4
 80149a0:	f000 fe02 	bl	80155a8 <xTaskCreate>
 80149a4:	4603      	mov	r3, r0
 80149a6:	2b01      	cmp	r3, #1
 80149a8:	d001      	beq.n	80149ae <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80149aa:	2300      	movs	r3, #0
 80149ac:	e000      	b.n	80149b0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80149ae:	68fb      	ldr	r3, [r7, #12]
}
 80149b0:	4618      	mov	r0, r3
 80149b2:	3714      	adds	r7, #20
 80149b4:	46bd      	mov	sp, r7
 80149b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080149b8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80149b8:	b580      	push	{r7, lr}
 80149ba:	b084      	sub	sp, #16
 80149bc:	af00      	add	r7, sp, #0
 80149be:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d001      	beq.n	80149ce <osDelay+0x16>
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	e000      	b.n	80149d0 <osDelay+0x18>
 80149ce:	2301      	movs	r3, #1
 80149d0:	4618      	mov	r0, r3
 80149d2:	f000 ff21 	bl	8015818 <vTaskDelay>
  
  return osOK;
 80149d6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80149d8:	4618      	mov	r0, r3
 80149da:	3710      	adds	r7, #16
 80149dc:	46bd      	mov	sp, r7
 80149de:	bd80      	pop	{r7, pc}

080149e0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80149e0:	b580      	push	{r7, lr}
 80149e2:	b084      	sub	sp, #16
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	6078      	str	r0, [r7, #4]
 80149e8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80149ea:	2300      	movs	r3, #0
 80149ec:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d101      	bne.n	80149f8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80149f4:	2380      	movs	r3, #128	@ 0x80
 80149f6:	e03a      	b.n	8014a6e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80149f8:	2300      	movs	r3, #0
 80149fa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80149fc:	683b      	ldr	r3, [r7, #0]
 80149fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a02:	d103      	bne.n	8014a0c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8014a04:	f04f 33ff 	mov.w	r3, #4294967295
 8014a08:	60fb      	str	r3, [r7, #12]
 8014a0a:	e009      	b.n	8014a20 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8014a0c:	683b      	ldr	r3, [r7, #0]
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d006      	beq.n	8014a20 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8014a12:	683b      	ldr	r3, [r7, #0]
 8014a14:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d101      	bne.n	8014a20 <osSemaphoreWait+0x40>
      ticks = 1;
 8014a1c:	2301      	movs	r3, #1
 8014a1e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8014a20:	f7ff ff65 	bl	80148ee <inHandlerMode>
 8014a24:	4603      	mov	r3, r0
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d017      	beq.n	8014a5a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8014a2a:	f107 0308 	add.w	r3, r7, #8
 8014a2e:	461a      	mov	r2, r3
 8014a30:	2100      	movs	r1, #0
 8014a32:	6878      	ldr	r0, [r7, #4]
 8014a34:	f000 fbae 	bl	8015194 <xQueueReceiveFromISR>
 8014a38:	4603      	mov	r3, r0
 8014a3a:	2b01      	cmp	r3, #1
 8014a3c:	d001      	beq.n	8014a42 <osSemaphoreWait+0x62>
      return osErrorOS;
 8014a3e:	23ff      	movs	r3, #255	@ 0xff
 8014a40:	e015      	b.n	8014a6e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8014a42:	68bb      	ldr	r3, [r7, #8]
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d011      	beq.n	8014a6c <osSemaphoreWait+0x8c>
 8014a48:	4b0b      	ldr	r3, [pc, #44]	@ (8014a78 <osSemaphoreWait+0x98>)
 8014a4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014a4e:	601a      	str	r2, [r3, #0]
 8014a50:	f3bf 8f4f 	dsb	sy
 8014a54:	f3bf 8f6f 	isb	sy
 8014a58:	e008      	b.n	8014a6c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8014a5a:	68f9      	ldr	r1, [r7, #12]
 8014a5c:	6878      	ldr	r0, [r7, #4]
 8014a5e:	f000 fa89 	bl	8014f74 <xQueueSemaphoreTake>
 8014a62:	4603      	mov	r3, r0
 8014a64:	2b01      	cmp	r3, #1
 8014a66:	d001      	beq.n	8014a6c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8014a68:	23ff      	movs	r3, #255	@ 0xff
 8014a6a:	e000      	b.n	8014a6e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8014a6c:	2300      	movs	r3, #0
}
 8014a6e:	4618      	mov	r0, r3
 8014a70:	3710      	adds	r7, #16
 8014a72:	46bd      	mov	sp, r7
 8014a74:	bd80      	pop	{r7, pc}
 8014a76:	bf00      	nop
 8014a78:	e000ed04 	.word	0xe000ed04

08014a7c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8014a7c:	b580      	push	{r7, lr}
 8014a7e:	b084      	sub	sp, #16
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8014a84:	2300      	movs	r3, #0
 8014a86:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8014a88:	2300      	movs	r3, #0
 8014a8a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8014a8c:	f7ff ff2f 	bl	80148ee <inHandlerMode>
 8014a90:	4603      	mov	r3, r0
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d016      	beq.n	8014ac4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8014a96:	f107 0308 	add.w	r3, r7, #8
 8014a9a:	4619      	mov	r1, r3
 8014a9c:	6878      	ldr	r0, [r7, #4]
 8014a9e:	f000 f9d9 	bl	8014e54 <xQueueGiveFromISR>
 8014aa2:	4603      	mov	r3, r0
 8014aa4:	2b01      	cmp	r3, #1
 8014aa6:	d001      	beq.n	8014aac <osSemaphoreRelease+0x30>
      return osErrorOS;
 8014aa8:	23ff      	movs	r3, #255	@ 0xff
 8014aaa:	e017      	b.n	8014adc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014aac:	68bb      	ldr	r3, [r7, #8]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d013      	beq.n	8014ada <osSemaphoreRelease+0x5e>
 8014ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8014ae4 <osSemaphoreRelease+0x68>)
 8014ab4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014ab8:	601a      	str	r2, [r3, #0]
 8014aba:	f3bf 8f4f 	dsb	sy
 8014abe:	f3bf 8f6f 	isb	sy
 8014ac2:	e00a      	b.n	8014ada <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8014ac4:	2300      	movs	r3, #0
 8014ac6:	2200      	movs	r2, #0
 8014ac8:	2100      	movs	r1, #0
 8014aca:	6878      	ldr	r0, [r7, #4]
 8014acc:	f000 f8c0 	bl	8014c50 <xQueueGenericSend>
 8014ad0:	4603      	mov	r3, r0
 8014ad2:	2b01      	cmp	r3, #1
 8014ad4:	d001      	beq.n	8014ada <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8014ad6:	23ff      	movs	r3, #255	@ 0xff
 8014ad8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8014ada:	68fb      	ldr	r3, [r7, #12]
}
 8014adc:	4618      	mov	r0, r3
 8014ade:	3710      	adds	r7, #16
 8014ae0:	46bd      	mov	sp, r7
 8014ae2:	bd80      	pop	{r7, pc}
 8014ae4:	e000ed04 	.word	0xe000ed04

08014ae8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014ae8:	b480      	push	{r7}
 8014aea:	b083      	sub	sp, #12
 8014aec:	af00      	add	r7, sp, #0
 8014aee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	f103 0208 	add.w	r2, r3, #8
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	f04f 32ff 	mov.w	r2, #4294967295
 8014b00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	f103 0208 	add.w	r2, r3, #8
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	f103 0208 	add.w	r2, r3, #8
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	2200      	movs	r2, #0
 8014b1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014b1c:	bf00      	nop
 8014b1e:	370c      	adds	r7, #12
 8014b20:	46bd      	mov	sp, r7
 8014b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b26:	4770      	bx	lr

08014b28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014b28:	b480      	push	{r7}
 8014b2a:	b083      	sub	sp, #12
 8014b2c:	af00      	add	r7, sp, #0
 8014b2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	2200      	movs	r2, #0
 8014b34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014b36:	bf00      	nop
 8014b38:	370c      	adds	r7, #12
 8014b3a:	46bd      	mov	sp, r7
 8014b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b40:	4770      	bx	lr

08014b42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014b42:	b480      	push	{r7}
 8014b44:	b085      	sub	sp, #20
 8014b46:	af00      	add	r7, sp, #0
 8014b48:	6078      	str	r0, [r7, #4]
 8014b4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	685b      	ldr	r3, [r3, #4]
 8014b50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014b52:	683b      	ldr	r3, [r7, #0]
 8014b54:	68fa      	ldr	r2, [r7, #12]
 8014b56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	689a      	ldr	r2, [r3, #8]
 8014b5c:	683b      	ldr	r3, [r7, #0]
 8014b5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	689b      	ldr	r3, [r3, #8]
 8014b64:	683a      	ldr	r2, [r7, #0]
 8014b66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	683a      	ldr	r2, [r7, #0]
 8014b6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8014b6e:	683b      	ldr	r3, [r7, #0]
 8014b70:	687a      	ldr	r2, [r7, #4]
 8014b72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	1c5a      	adds	r2, r3, #1
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	601a      	str	r2, [r3, #0]
}
 8014b7e:	bf00      	nop
 8014b80:	3714      	adds	r7, #20
 8014b82:	46bd      	mov	sp, r7
 8014b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b88:	4770      	bx	lr

08014b8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014b8a:	b480      	push	{r7}
 8014b8c:	b085      	sub	sp, #20
 8014b8e:	af00      	add	r7, sp, #0
 8014b90:	6078      	str	r0, [r7, #4]
 8014b92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014b94:	683b      	ldr	r3, [r7, #0]
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014b9a:	68bb      	ldr	r3, [r7, #8]
 8014b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ba0:	d103      	bne.n	8014baa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	691b      	ldr	r3, [r3, #16]
 8014ba6:	60fb      	str	r3, [r7, #12]
 8014ba8:	e00c      	b.n	8014bc4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	3308      	adds	r3, #8
 8014bae:	60fb      	str	r3, [r7, #12]
 8014bb0:	e002      	b.n	8014bb8 <vListInsert+0x2e>
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	685b      	ldr	r3, [r3, #4]
 8014bb6:	60fb      	str	r3, [r7, #12]
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	685b      	ldr	r3, [r3, #4]
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	68ba      	ldr	r2, [r7, #8]
 8014bc0:	429a      	cmp	r2, r3
 8014bc2:	d2f6      	bcs.n	8014bb2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	685a      	ldr	r2, [r3, #4]
 8014bc8:	683b      	ldr	r3, [r7, #0]
 8014bca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014bcc:	683b      	ldr	r3, [r7, #0]
 8014bce:	685b      	ldr	r3, [r3, #4]
 8014bd0:	683a      	ldr	r2, [r7, #0]
 8014bd2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014bd4:	683b      	ldr	r3, [r7, #0]
 8014bd6:	68fa      	ldr	r2, [r7, #12]
 8014bd8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	683a      	ldr	r2, [r7, #0]
 8014bde:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8014be0:	683b      	ldr	r3, [r7, #0]
 8014be2:	687a      	ldr	r2, [r7, #4]
 8014be4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	1c5a      	adds	r2, r3, #1
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	601a      	str	r2, [r3, #0]
}
 8014bf0:	bf00      	nop
 8014bf2:	3714      	adds	r7, #20
 8014bf4:	46bd      	mov	sp, r7
 8014bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bfa:	4770      	bx	lr

08014bfc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014bfc:	b480      	push	{r7}
 8014bfe:	b085      	sub	sp, #20
 8014c00:	af00      	add	r7, sp, #0
 8014c02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	691b      	ldr	r3, [r3, #16]
 8014c08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	685b      	ldr	r3, [r3, #4]
 8014c0e:	687a      	ldr	r2, [r7, #4]
 8014c10:	6892      	ldr	r2, [r2, #8]
 8014c12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	689b      	ldr	r3, [r3, #8]
 8014c18:	687a      	ldr	r2, [r7, #4]
 8014c1a:	6852      	ldr	r2, [r2, #4]
 8014c1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	685b      	ldr	r3, [r3, #4]
 8014c22:	687a      	ldr	r2, [r7, #4]
 8014c24:	429a      	cmp	r2, r3
 8014c26:	d103      	bne.n	8014c30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	689a      	ldr	r2, [r3, #8]
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	2200      	movs	r2, #0
 8014c34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	1e5a      	subs	r2, r3, #1
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	681b      	ldr	r3, [r3, #0]
}
 8014c44:	4618      	mov	r0, r3
 8014c46:	3714      	adds	r7, #20
 8014c48:	46bd      	mov	sp, r7
 8014c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c4e:	4770      	bx	lr

08014c50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014c50:	b580      	push	{r7, lr}
 8014c52:	b08e      	sub	sp, #56	@ 0x38
 8014c54:	af00      	add	r7, sp, #0
 8014c56:	60f8      	str	r0, [r7, #12]
 8014c58:	60b9      	str	r1, [r7, #8]
 8014c5a:	607a      	str	r2, [r7, #4]
 8014c5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014c5e:	2300      	movs	r3, #0
 8014c60:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8014c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d10b      	bne.n	8014c84 <xQueueGenericSend+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c70:	f383 8811 	msr	BASEPRI, r3
 8014c74:	f3bf 8f6f 	isb	sy
 8014c78:	f3bf 8f4f 	dsb	sy
 8014c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8014c7e:	bf00      	nop
 8014c80:	bf00      	nop
 8014c82:	e7fd      	b.n	8014c80 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014c84:	68bb      	ldr	r3, [r7, #8]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d103      	bne.n	8014c92 <xQueueGenericSend+0x42>
 8014c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d101      	bne.n	8014c96 <xQueueGenericSend+0x46>
 8014c92:	2301      	movs	r3, #1
 8014c94:	e000      	b.n	8014c98 <xQueueGenericSend+0x48>
 8014c96:	2300      	movs	r3, #0
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d10b      	bne.n	8014cb4 <xQueueGenericSend+0x64>
	__asm volatile
 8014c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ca0:	f383 8811 	msr	BASEPRI, r3
 8014ca4:	f3bf 8f6f 	isb	sy
 8014ca8:	f3bf 8f4f 	dsb	sy
 8014cac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014cae:	bf00      	nop
 8014cb0:	bf00      	nop
 8014cb2:	e7fd      	b.n	8014cb0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014cb4:	683b      	ldr	r3, [r7, #0]
 8014cb6:	2b02      	cmp	r3, #2
 8014cb8:	d103      	bne.n	8014cc2 <xQueueGenericSend+0x72>
 8014cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014cbe:	2b01      	cmp	r3, #1
 8014cc0:	d101      	bne.n	8014cc6 <xQueueGenericSend+0x76>
 8014cc2:	2301      	movs	r3, #1
 8014cc4:	e000      	b.n	8014cc8 <xQueueGenericSend+0x78>
 8014cc6:	2300      	movs	r3, #0
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d10b      	bne.n	8014ce4 <xQueueGenericSend+0x94>
	__asm volatile
 8014ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014cd0:	f383 8811 	msr	BASEPRI, r3
 8014cd4:	f3bf 8f6f 	isb	sy
 8014cd8:	f3bf 8f4f 	dsb	sy
 8014cdc:	623b      	str	r3, [r7, #32]
}
 8014cde:	bf00      	nop
 8014ce0:	bf00      	nop
 8014ce2:	e7fd      	b.n	8014ce0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014ce4:	f001 f9d8 	bl	8016098 <xTaskGetSchedulerState>
 8014ce8:	4603      	mov	r3, r0
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d102      	bne.n	8014cf4 <xQueueGenericSend+0xa4>
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d101      	bne.n	8014cf8 <xQueueGenericSend+0xa8>
 8014cf4:	2301      	movs	r3, #1
 8014cf6:	e000      	b.n	8014cfa <xQueueGenericSend+0xaa>
 8014cf8:	2300      	movs	r3, #0
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d10b      	bne.n	8014d16 <xQueueGenericSend+0xc6>
	__asm volatile
 8014cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d02:	f383 8811 	msr	BASEPRI, r3
 8014d06:	f3bf 8f6f 	isb	sy
 8014d0a:	f3bf 8f4f 	dsb	sy
 8014d0e:	61fb      	str	r3, [r7, #28]
}
 8014d10:	bf00      	nop
 8014d12:	bf00      	nop
 8014d14:	e7fd      	b.n	8014d12 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014d16:	f001 fd17 	bl	8016748 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014d22:	429a      	cmp	r2, r3
 8014d24:	d302      	bcc.n	8014d2c <xQueueGenericSend+0xdc>
 8014d26:	683b      	ldr	r3, [r7, #0]
 8014d28:	2b02      	cmp	r3, #2
 8014d2a:	d129      	bne.n	8014d80 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014d2c:	683a      	ldr	r2, [r7, #0]
 8014d2e:	68b9      	ldr	r1, [r7, #8]
 8014d30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014d32:	f000 fac9 	bl	80152c8 <prvCopyDataToQueue>
 8014d36:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d010      	beq.n	8014d62 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d42:	3324      	adds	r3, #36	@ 0x24
 8014d44:	4618      	mov	r0, r3
 8014d46:	f000 ffe7 	bl	8015d18 <xTaskRemoveFromEventList>
 8014d4a:	4603      	mov	r3, r0
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d013      	beq.n	8014d78 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014d50:	4b3f      	ldr	r3, [pc, #252]	@ (8014e50 <xQueueGenericSend+0x200>)
 8014d52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014d56:	601a      	str	r2, [r3, #0]
 8014d58:	f3bf 8f4f 	dsb	sy
 8014d5c:	f3bf 8f6f 	isb	sy
 8014d60:	e00a      	b.n	8014d78 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d007      	beq.n	8014d78 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014d68:	4b39      	ldr	r3, [pc, #228]	@ (8014e50 <xQueueGenericSend+0x200>)
 8014d6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014d6e:	601a      	str	r2, [r3, #0]
 8014d70:	f3bf 8f4f 	dsb	sy
 8014d74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014d78:	f001 fd18 	bl	80167ac <vPortExitCritical>
				return pdPASS;
 8014d7c:	2301      	movs	r3, #1
 8014d7e:	e063      	b.n	8014e48 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d103      	bne.n	8014d8e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014d86:	f001 fd11 	bl	80167ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8014d8a:	2300      	movs	r3, #0
 8014d8c:	e05c      	b.n	8014e48 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d106      	bne.n	8014da2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014d94:	f107 0314 	add.w	r3, r7, #20
 8014d98:	4618      	mov	r0, r3
 8014d9a:	f001 f821 	bl	8015de0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014d9e:	2301      	movs	r3, #1
 8014da0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014da2:	f001 fd03 	bl	80167ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014da6:	f000 fdcf 	bl	8015948 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014daa:	f001 fccd 	bl	8016748 <vPortEnterCritical>
 8014dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014db0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014db4:	b25b      	sxtb	r3, r3
 8014db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014dba:	d103      	bne.n	8014dc4 <xQueueGenericSend+0x174>
 8014dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dbe:	2200      	movs	r2, #0
 8014dc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dc6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014dca:	b25b      	sxtb	r3, r3
 8014dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014dd0:	d103      	bne.n	8014dda <xQueueGenericSend+0x18a>
 8014dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dd4:	2200      	movs	r2, #0
 8014dd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014dda:	f001 fce7 	bl	80167ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014dde:	1d3a      	adds	r2, r7, #4
 8014de0:	f107 0314 	add.w	r3, r7, #20
 8014de4:	4611      	mov	r1, r2
 8014de6:	4618      	mov	r0, r3
 8014de8:	f001 f810 	bl	8015e0c <xTaskCheckForTimeOut>
 8014dec:	4603      	mov	r3, r0
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d124      	bne.n	8014e3c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014df2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014df4:	f000 fb60 	bl	80154b8 <prvIsQueueFull>
 8014df8:	4603      	mov	r3, r0
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d018      	beq.n	8014e30 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e00:	3310      	adds	r3, #16
 8014e02:	687a      	ldr	r2, [r7, #4]
 8014e04:	4611      	mov	r1, r2
 8014e06:	4618      	mov	r0, r3
 8014e08:	f000 ff60 	bl	8015ccc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014e0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014e0e:	f000 faeb 	bl	80153e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8014e12:	f000 fda7 	bl	8015964 <xTaskResumeAll>
 8014e16:	4603      	mov	r3, r0
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	f47f af7c 	bne.w	8014d16 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8014e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8014e50 <xQueueGenericSend+0x200>)
 8014e20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014e24:	601a      	str	r2, [r3, #0]
 8014e26:	f3bf 8f4f 	dsb	sy
 8014e2a:	f3bf 8f6f 	isb	sy
 8014e2e:	e772      	b.n	8014d16 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014e30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014e32:	f000 fad9 	bl	80153e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014e36:	f000 fd95 	bl	8015964 <xTaskResumeAll>
 8014e3a:	e76c      	b.n	8014d16 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014e3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014e3e:	f000 fad3 	bl	80153e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014e42:	f000 fd8f 	bl	8015964 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8014e46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8014e48:	4618      	mov	r0, r3
 8014e4a:	3738      	adds	r7, #56	@ 0x38
 8014e4c:	46bd      	mov	sp, r7
 8014e4e:	bd80      	pop	{r7, pc}
 8014e50:	e000ed04 	.word	0xe000ed04

08014e54 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014e54:	b580      	push	{r7, lr}
 8014e56:	b08e      	sub	sp, #56	@ 0x38
 8014e58:	af00      	add	r7, sp, #0
 8014e5a:	6078      	str	r0, [r7, #4]
 8014e5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8014e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d10b      	bne.n	8014e80 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8014e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e6c:	f383 8811 	msr	BASEPRI, r3
 8014e70:	f3bf 8f6f 	isb	sy
 8014e74:	f3bf 8f4f 	dsb	sy
 8014e78:	623b      	str	r3, [r7, #32]
}
 8014e7a:	bf00      	nop
 8014e7c:	bf00      	nop
 8014e7e:	e7fd      	b.n	8014e7c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d00b      	beq.n	8014ea0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8014e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e8c:	f383 8811 	msr	BASEPRI, r3
 8014e90:	f3bf 8f6f 	isb	sy
 8014e94:	f3bf 8f4f 	dsb	sy
 8014e98:	61fb      	str	r3, [r7, #28]
}
 8014e9a:	bf00      	nop
 8014e9c:	bf00      	nop
 8014e9e:	e7fd      	b.n	8014e9c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8014ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d103      	bne.n	8014eb0 <xQueueGiveFromISR+0x5c>
 8014ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014eaa:	689b      	ldr	r3, [r3, #8]
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d101      	bne.n	8014eb4 <xQueueGiveFromISR+0x60>
 8014eb0:	2301      	movs	r3, #1
 8014eb2:	e000      	b.n	8014eb6 <xQueueGiveFromISR+0x62>
 8014eb4:	2300      	movs	r3, #0
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d10b      	bne.n	8014ed2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8014eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ebe:	f383 8811 	msr	BASEPRI, r3
 8014ec2:	f3bf 8f6f 	isb	sy
 8014ec6:	f3bf 8f4f 	dsb	sy
 8014eca:	61bb      	str	r3, [r7, #24]
}
 8014ecc:	bf00      	nop
 8014ece:	bf00      	nop
 8014ed0:	e7fd      	b.n	8014ece <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014ed2:	f001 fd19 	bl	8016908 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8014ed6:	f3ef 8211 	mrs	r2, BASEPRI
 8014eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ede:	f383 8811 	msr	BASEPRI, r3
 8014ee2:	f3bf 8f6f 	isb	sy
 8014ee6:	f3bf 8f4f 	dsb	sy
 8014eea:	617a      	str	r2, [r7, #20]
 8014eec:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8014eee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014ef6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8014ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014efc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014efe:	429a      	cmp	r2, r3
 8014f00:	d22b      	bcs.n	8014f5a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f04:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014f08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f0e:	1c5a      	adds	r2, r3, #1
 8014f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f12:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014f14:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8014f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f1c:	d112      	bne.n	8014f44 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d016      	beq.n	8014f54 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f28:	3324      	adds	r3, #36	@ 0x24
 8014f2a:	4618      	mov	r0, r3
 8014f2c:	f000 fef4 	bl	8015d18 <xTaskRemoveFromEventList>
 8014f30:	4603      	mov	r3, r0
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d00e      	beq.n	8014f54 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014f36:	683b      	ldr	r3, [r7, #0]
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d00b      	beq.n	8014f54 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014f3c:	683b      	ldr	r3, [r7, #0]
 8014f3e:	2201      	movs	r2, #1
 8014f40:	601a      	str	r2, [r3, #0]
 8014f42:	e007      	b.n	8014f54 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014f44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014f48:	3301      	adds	r3, #1
 8014f4a:	b2db      	uxtb	r3, r3
 8014f4c:	b25a      	sxtb	r2, r3
 8014f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8014f54:	2301      	movs	r3, #1
 8014f56:	637b      	str	r3, [r7, #52]	@ 0x34
 8014f58:	e001      	b.n	8014f5e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014f5a:	2300      	movs	r3, #0
 8014f5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8014f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f60:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8014f68:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	3738      	adds	r7, #56	@ 0x38
 8014f70:	46bd      	mov	sp, r7
 8014f72:	bd80      	pop	{r7, pc}

08014f74 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8014f74:	b580      	push	{r7, lr}
 8014f76:	b08e      	sub	sp, #56	@ 0x38
 8014f78:	af00      	add	r7, sp, #0
 8014f7a:	6078      	str	r0, [r7, #4]
 8014f7c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8014f7e:	2300      	movs	r3, #0
 8014f80:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8014f86:	2300      	movs	r3, #0
 8014f88:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d10b      	bne.n	8014fa8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8014f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f94:	f383 8811 	msr	BASEPRI, r3
 8014f98:	f3bf 8f6f 	isb	sy
 8014f9c:	f3bf 8f4f 	dsb	sy
 8014fa0:	623b      	str	r3, [r7, #32]
}
 8014fa2:	bf00      	nop
 8014fa4:	bf00      	nop
 8014fa6:	e7fd      	b.n	8014fa4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d00b      	beq.n	8014fc8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8014fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fb4:	f383 8811 	msr	BASEPRI, r3
 8014fb8:	f3bf 8f6f 	isb	sy
 8014fbc:	f3bf 8f4f 	dsb	sy
 8014fc0:	61fb      	str	r3, [r7, #28]
}
 8014fc2:	bf00      	nop
 8014fc4:	bf00      	nop
 8014fc6:	e7fd      	b.n	8014fc4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014fc8:	f001 f866 	bl	8016098 <xTaskGetSchedulerState>
 8014fcc:	4603      	mov	r3, r0
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d102      	bne.n	8014fd8 <xQueueSemaphoreTake+0x64>
 8014fd2:	683b      	ldr	r3, [r7, #0]
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d101      	bne.n	8014fdc <xQueueSemaphoreTake+0x68>
 8014fd8:	2301      	movs	r3, #1
 8014fda:	e000      	b.n	8014fde <xQueueSemaphoreTake+0x6a>
 8014fdc:	2300      	movs	r3, #0
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d10b      	bne.n	8014ffa <xQueueSemaphoreTake+0x86>
	__asm volatile
 8014fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fe6:	f383 8811 	msr	BASEPRI, r3
 8014fea:	f3bf 8f6f 	isb	sy
 8014fee:	f3bf 8f4f 	dsb	sy
 8014ff2:	61bb      	str	r3, [r7, #24]
}
 8014ff4:	bf00      	nop
 8014ff6:	bf00      	nop
 8014ff8:	e7fd      	b.n	8014ff6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014ffa:	f001 fba5 	bl	8016748 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8014ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015002:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8015004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015006:	2b00      	cmp	r3, #0
 8015008:	d024      	beq.n	8015054 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801500a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801500c:	1e5a      	subs	r2, r3, #1
 801500e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015010:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	2b00      	cmp	r3, #0
 8015018:	d104      	bne.n	8015024 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801501a:	f001 f9e9 	bl	80163f0 <pvTaskIncrementMutexHeldCount>
 801501e:	4602      	mov	r2, r0
 8015020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015022:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015026:	691b      	ldr	r3, [r3, #16]
 8015028:	2b00      	cmp	r3, #0
 801502a:	d00f      	beq.n	801504c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801502c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801502e:	3310      	adds	r3, #16
 8015030:	4618      	mov	r0, r3
 8015032:	f000 fe71 	bl	8015d18 <xTaskRemoveFromEventList>
 8015036:	4603      	mov	r3, r0
 8015038:	2b00      	cmp	r3, #0
 801503a:	d007      	beq.n	801504c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801503c:	4b54      	ldr	r3, [pc, #336]	@ (8015190 <xQueueSemaphoreTake+0x21c>)
 801503e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015042:	601a      	str	r2, [r3, #0]
 8015044:	f3bf 8f4f 	dsb	sy
 8015048:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801504c:	f001 fbae 	bl	80167ac <vPortExitCritical>
				return pdPASS;
 8015050:	2301      	movs	r3, #1
 8015052:	e098      	b.n	8015186 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015054:	683b      	ldr	r3, [r7, #0]
 8015056:	2b00      	cmp	r3, #0
 8015058:	d112      	bne.n	8015080 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801505a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801505c:	2b00      	cmp	r3, #0
 801505e:	d00b      	beq.n	8015078 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8015060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015064:	f383 8811 	msr	BASEPRI, r3
 8015068:	f3bf 8f6f 	isb	sy
 801506c:	f3bf 8f4f 	dsb	sy
 8015070:	617b      	str	r3, [r7, #20]
}
 8015072:	bf00      	nop
 8015074:	bf00      	nop
 8015076:	e7fd      	b.n	8015074 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8015078:	f001 fb98 	bl	80167ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801507c:	2300      	movs	r3, #0
 801507e:	e082      	b.n	8015186 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015082:	2b00      	cmp	r3, #0
 8015084:	d106      	bne.n	8015094 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015086:	f107 030c 	add.w	r3, r7, #12
 801508a:	4618      	mov	r0, r3
 801508c:	f000 fea8 	bl	8015de0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015090:	2301      	movs	r3, #1
 8015092:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015094:	f001 fb8a 	bl	80167ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015098:	f000 fc56 	bl	8015948 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801509c:	f001 fb54 	bl	8016748 <vPortEnterCritical>
 80150a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150a2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80150a6:	b25b      	sxtb	r3, r3
 80150a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80150ac:	d103      	bne.n	80150b6 <xQueueSemaphoreTake+0x142>
 80150ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150b0:	2200      	movs	r2, #0
 80150b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80150b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80150bc:	b25b      	sxtb	r3, r3
 80150be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80150c2:	d103      	bne.n	80150cc <xQueueSemaphoreTake+0x158>
 80150c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150c6:	2200      	movs	r2, #0
 80150c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80150cc:	f001 fb6e 	bl	80167ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80150d0:	463a      	mov	r2, r7
 80150d2:	f107 030c 	add.w	r3, r7, #12
 80150d6:	4611      	mov	r1, r2
 80150d8:	4618      	mov	r0, r3
 80150da:	f000 fe97 	bl	8015e0c <xTaskCheckForTimeOut>
 80150de:	4603      	mov	r3, r0
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d132      	bne.n	801514a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80150e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80150e6:	f000 f9d1 	bl	801548c <prvIsQueueEmpty>
 80150ea:	4603      	mov	r3, r0
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d026      	beq.n	801513e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80150f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d109      	bne.n	801510c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80150f8:	f001 fb26 	bl	8016748 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80150fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150fe:	689b      	ldr	r3, [r3, #8]
 8015100:	4618      	mov	r0, r3
 8015102:	f000 ffe7 	bl	80160d4 <xTaskPriorityInherit>
 8015106:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8015108:	f001 fb50 	bl	80167ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801510c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801510e:	3324      	adds	r3, #36	@ 0x24
 8015110:	683a      	ldr	r2, [r7, #0]
 8015112:	4611      	mov	r1, r2
 8015114:	4618      	mov	r0, r3
 8015116:	f000 fdd9 	bl	8015ccc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801511a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801511c:	f000 f964 	bl	80153e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015120:	f000 fc20 	bl	8015964 <xTaskResumeAll>
 8015124:	4603      	mov	r3, r0
 8015126:	2b00      	cmp	r3, #0
 8015128:	f47f af67 	bne.w	8014ffa <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 801512c:	4b18      	ldr	r3, [pc, #96]	@ (8015190 <xQueueSemaphoreTake+0x21c>)
 801512e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015132:	601a      	str	r2, [r3, #0]
 8015134:	f3bf 8f4f 	dsb	sy
 8015138:	f3bf 8f6f 	isb	sy
 801513c:	e75d      	b.n	8014ffa <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801513e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015140:	f000 f952 	bl	80153e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015144:	f000 fc0e 	bl	8015964 <xTaskResumeAll>
 8015148:	e757      	b.n	8014ffa <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801514a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801514c:	f000 f94c 	bl	80153e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015150:	f000 fc08 	bl	8015964 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015154:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015156:	f000 f999 	bl	801548c <prvIsQueueEmpty>
 801515a:	4603      	mov	r3, r0
 801515c:	2b00      	cmp	r3, #0
 801515e:	f43f af4c 	beq.w	8014ffa <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8015162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015164:	2b00      	cmp	r3, #0
 8015166:	d00d      	beq.n	8015184 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8015168:	f001 faee 	bl	8016748 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801516c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801516e:	f000 f893 	bl	8015298 <prvGetDisinheritPriorityAfterTimeout>
 8015172:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8015174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015176:	689b      	ldr	r3, [r3, #8]
 8015178:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801517a:	4618      	mov	r0, r3
 801517c:	f001 f8a8 	bl	80162d0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8015180:	f001 fb14 	bl	80167ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015184:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015186:	4618      	mov	r0, r3
 8015188:	3738      	adds	r7, #56	@ 0x38
 801518a:	46bd      	mov	sp, r7
 801518c:	bd80      	pop	{r7, pc}
 801518e:	bf00      	nop
 8015190:	e000ed04 	.word	0xe000ed04

08015194 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015194:	b580      	push	{r7, lr}
 8015196:	b08e      	sub	sp, #56	@ 0x38
 8015198:	af00      	add	r7, sp, #0
 801519a:	60f8      	str	r0, [r7, #12]
 801519c:	60b9      	str	r1, [r7, #8]
 801519e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80151a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d10b      	bne.n	80151c2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80151aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151ae:	f383 8811 	msr	BASEPRI, r3
 80151b2:	f3bf 8f6f 	isb	sy
 80151b6:	f3bf 8f4f 	dsb	sy
 80151ba:	623b      	str	r3, [r7, #32]
}
 80151bc:	bf00      	nop
 80151be:	bf00      	nop
 80151c0:	e7fd      	b.n	80151be <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80151c2:	68bb      	ldr	r3, [r7, #8]
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d103      	bne.n	80151d0 <xQueueReceiveFromISR+0x3c>
 80151c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80151ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d101      	bne.n	80151d4 <xQueueReceiveFromISR+0x40>
 80151d0:	2301      	movs	r3, #1
 80151d2:	e000      	b.n	80151d6 <xQueueReceiveFromISR+0x42>
 80151d4:	2300      	movs	r3, #0
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d10b      	bne.n	80151f2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80151da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151de:	f383 8811 	msr	BASEPRI, r3
 80151e2:	f3bf 8f6f 	isb	sy
 80151e6:	f3bf 8f4f 	dsb	sy
 80151ea:	61fb      	str	r3, [r7, #28]
}
 80151ec:	bf00      	nop
 80151ee:	bf00      	nop
 80151f0:	e7fd      	b.n	80151ee <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80151f2:	f001 fb89 	bl	8016908 <vPortValidateInterruptPriority>
	__asm volatile
 80151f6:	f3ef 8211 	mrs	r2, BASEPRI
 80151fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151fe:	f383 8811 	msr	BASEPRI, r3
 8015202:	f3bf 8f6f 	isb	sy
 8015206:	f3bf 8f4f 	dsb	sy
 801520a:	61ba      	str	r2, [r7, #24]
 801520c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801520e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015210:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015216:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801521a:	2b00      	cmp	r3, #0
 801521c:	d02f      	beq.n	801527e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801521e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015220:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015224:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015228:	68b9      	ldr	r1, [r7, #8]
 801522a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801522c:	f000 f8b6 	bl	801539c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015232:	1e5a      	subs	r2, r3, #1
 8015234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015236:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8015238:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801523c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015240:	d112      	bne.n	8015268 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015244:	691b      	ldr	r3, [r3, #16]
 8015246:	2b00      	cmp	r3, #0
 8015248:	d016      	beq.n	8015278 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801524a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801524c:	3310      	adds	r3, #16
 801524e:	4618      	mov	r0, r3
 8015250:	f000 fd62 	bl	8015d18 <xTaskRemoveFromEventList>
 8015254:	4603      	mov	r3, r0
 8015256:	2b00      	cmp	r3, #0
 8015258:	d00e      	beq.n	8015278 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	2b00      	cmp	r3, #0
 801525e:	d00b      	beq.n	8015278 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	2201      	movs	r2, #1
 8015264:	601a      	str	r2, [r3, #0]
 8015266:	e007      	b.n	8015278 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8015268:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801526c:	3301      	adds	r3, #1
 801526e:	b2db      	uxtb	r3, r3
 8015270:	b25a      	sxtb	r2, r3
 8015272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015274:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8015278:	2301      	movs	r3, #1
 801527a:	637b      	str	r3, [r7, #52]	@ 0x34
 801527c:	e001      	b.n	8015282 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 801527e:	2300      	movs	r3, #0
 8015280:	637b      	str	r3, [r7, #52]	@ 0x34
 8015282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015284:	613b      	str	r3, [r7, #16]
	__asm volatile
 8015286:	693b      	ldr	r3, [r7, #16]
 8015288:	f383 8811 	msr	BASEPRI, r3
}
 801528c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801528e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8015290:	4618      	mov	r0, r3
 8015292:	3738      	adds	r7, #56	@ 0x38
 8015294:	46bd      	mov	sp, r7
 8015296:	bd80      	pop	{r7, pc}

08015298 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8015298:	b480      	push	{r7}
 801529a:	b085      	sub	sp, #20
 801529c:	af00      	add	r7, sp, #0
 801529e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d006      	beq.n	80152b6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80152ac:	681b      	ldr	r3, [r3, #0]
 80152ae:	f1c3 0307 	rsb	r3, r3, #7
 80152b2:	60fb      	str	r3, [r7, #12]
 80152b4:	e001      	b.n	80152ba <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80152b6:	2300      	movs	r3, #0
 80152b8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80152ba:	68fb      	ldr	r3, [r7, #12]
	}
 80152bc:	4618      	mov	r0, r3
 80152be:	3714      	adds	r7, #20
 80152c0:	46bd      	mov	sp, r7
 80152c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c6:	4770      	bx	lr

080152c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80152c8:	b580      	push	{r7, lr}
 80152ca:	b086      	sub	sp, #24
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	60f8      	str	r0, [r7, #12]
 80152d0:	60b9      	str	r1, [r7, #8]
 80152d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80152d4:	2300      	movs	r3, #0
 80152d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80152dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d10d      	bne.n	8015302 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d14d      	bne.n	801538a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80152ee:	68fb      	ldr	r3, [r7, #12]
 80152f0:	689b      	ldr	r3, [r3, #8]
 80152f2:	4618      	mov	r0, r3
 80152f4:	f000 ff64 	bl	80161c0 <xTaskPriorityDisinherit>
 80152f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	2200      	movs	r2, #0
 80152fe:	609a      	str	r2, [r3, #8]
 8015300:	e043      	b.n	801538a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	2b00      	cmp	r3, #0
 8015306:	d119      	bne.n	801533c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	6858      	ldr	r0, [r3, #4]
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015310:	461a      	mov	r2, r3
 8015312:	68b9      	ldr	r1, [r7, #8]
 8015314:	f002 fd11 	bl	8017d3a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	685a      	ldr	r2, [r3, #4]
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015320:	441a      	add	r2, r3
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	685a      	ldr	r2, [r3, #4]
 801532a:	68fb      	ldr	r3, [r7, #12]
 801532c:	689b      	ldr	r3, [r3, #8]
 801532e:	429a      	cmp	r2, r3
 8015330:	d32b      	bcc.n	801538a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	681a      	ldr	r2, [r3, #0]
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	605a      	str	r2, [r3, #4]
 801533a:	e026      	b.n	801538a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	68d8      	ldr	r0, [r3, #12]
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015344:	461a      	mov	r2, r3
 8015346:	68b9      	ldr	r1, [r7, #8]
 8015348:	f002 fcf7 	bl	8017d3a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	68da      	ldr	r2, [r3, #12]
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015354:	425b      	negs	r3, r3
 8015356:	441a      	add	r2, r3
 8015358:	68fb      	ldr	r3, [r7, #12]
 801535a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	68da      	ldr	r2, [r3, #12]
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	429a      	cmp	r2, r3
 8015366:	d207      	bcs.n	8015378 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	689a      	ldr	r2, [r3, #8]
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015370:	425b      	negs	r3, r3
 8015372:	441a      	add	r2, r3
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	2b02      	cmp	r3, #2
 801537c:	d105      	bne.n	801538a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801537e:	693b      	ldr	r3, [r7, #16]
 8015380:	2b00      	cmp	r3, #0
 8015382:	d002      	beq.n	801538a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015384:	693b      	ldr	r3, [r7, #16]
 8015386:	3b01      	subs	r3, #1
 8015388:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801538a:	693b      	ldr	r3, [r7, #16]
 801538c:	1c5a      	adds	r2, r3, #1
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8015392:	697b      	ldr	r3, [r7, #20]
}
 8015394:	4618      	mov	r0, r3
 8015396:	3718      	adds	r7, #24
 8015398:	46bd      	mov	sp, r7
 801539a:	bd80      	pop	{r7, pc}

0801539c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801539c:	b580      	push	{r7, lr}
 801539e:	b082      	sub	sp, #8
 80153a0:	af00      	add	r7, sp, #0
 80153a2:	6078      	str	r0, [r7, #4]
 80153a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d018      	beq.n	80153e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	68da      	ldr	r2, [r3, #12]
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80153b6:	441a      	add	r2, r3
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	68da      	ldr	r2, [r3, #12]
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	689b      	ldr	r3, [r3, #8]
 80153c4:	429a      	cmp	r2, r3
 80153c6:	d303      	bcc.n	80153d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	681a      	ldr	r2, [r3, #0]
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	68d9      	ldr	r1, [r3, #12]
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80153d8:	461a      	mov	r2, r3
 80153da:	6838      	ldr	r0, [r7, #0]
 80153dc:	f002 fcad 	bl	8017d3a <memcpy>
	}
}
 80153e0:	bf00      	nop
 80153e2:	3708      	adds	r7, #8
 80153e4:	46bd      	mov	sp, r7
 80153e6:	bd80      	pop	{r7, pc}

080153e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80153e8:	b580      	push	{r7, lr}
 80153ea:	b084      	sub	sp, #16
 80153ec:	af00      	add	r7, sp, #0
 80153ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80153f0:	f001 f9aa 	bl	8016748 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80153fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80153fc:	e011      	b.n	8015422 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015402:	2b00      	cmp	r3, #0
 8015404:	d012      	beq.n	801542c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	3324      	adds	r3, #36	@ 0x24
 801540a:	4618      	mov	r0, r3
 801540c:	f000 fc84 	bl	8015d18 <xTaskRemoveFromEventList>
 8015410:	4603      	mov	r3, r0
 8015412:	2b00      	cmp	r3, #0
 8015414:	d001      	beq.n	801541a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015416:	f000 fd5d 	bl	8015ed4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801541a:	7bfb      	ldrb	r3, [r7, #15]
 801541c:	3b01      	subs	r3, #1
 801541e:	b2db      	uxtb	r3, r3
 8015420:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015426:	2b00      	cmp	r3, #0
 8015428:	dce9      	bgt.n	80153fe <prvUnlockQueue+0x16>
 801542a:	e000      	b.n	801542e <prvUnlockQueue+0x46>
					break;
 801542c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	22ff      	movs	r2, #255	@ 0xff
 8015432:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8015436:	f001 f9b9 	bl	80167ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801543a:	f001 f985 	bl	8016748 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015444:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015446:	e011      	b.n	801546c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	691b      	ldr	r3, [r3, #16]
 801544c:	2b00      	cmp	r3, #0
 801544e:	d012      	beq.n	8015476 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	3310      	adds	r3, #16
 8015454:	4618      	mov	r0, r3
 8015456:	f000 fc5f 	bl	8015d18 <xTaskRemoveFromEventList>
 801545a:	4603      	mov	r3, r0
 801545c:	2b00      	cmp	r3, #0
 801545e:	d001      	beq.n	8015464 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015460:	f000 fd38 	bl	8015ed4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015464:	7bbb      	ldrb	r3, [r7, #14]
 8015466:	3b01      	subs	r3, #1
 8015468:	b2db      	uxtb	r3, r3
 801546a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801546c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015470:	2b00      	cmp	r3, #0
 8015472:	dce9      	bgt.n	8015448 <prvUnlockQueue+0x60>
 8015474:	e000      	b.n	8015478 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8015476:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	22ff      	movs	r2, #255	@ 0xff
 801547c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8015480:	f001 f994 	bl	80167ac <vPortExitCritical>
}
 8015484:	bf00      	nop
 8015486:	3710      	adds	r7, #16
 8015488:	46bd      	mov	sp, r7
 801548a:	bd80      	pop	{r7, pc}

0801548c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801548c:	b580      	push	{r7, lr}
 801548e:	b084      	sub	sp, #16
 8015490:	af00      	add	r7, sp, #0
 8015492:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015494:	f001 f958 	bl	8016748 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801549c:	2b00      	cmp	r3, #0
 801549e:	d102      	bne.n	80154a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80154a0:	2301      	movs	r3, #1
 80154a2:	60fb      	str	r3, [r7, #12]
 80154a4:	e001      	b.n	80154aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80154a6:	2300      	movs	r3, #0
 80154a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80154aa:	f001 f97f 	bl	80167ac <vPortExitCritical>

	return xReturn;
 80154ae:	68fb      	ldr	r3, [r7, #12]
}
 80154b0:	4618      	mov	r0, r3
 80154b2:	3710      	adds	r7, #16
 80154b4:	46bd      	mov	sp, r7
 80154b6:	bd80      	pop	{r7, pc}

080154b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80154b8:	b580      	push	{r7, lr}
 80154ba:	b084      	sub	sp, #16
 80154bc:	af00      	add	r7, sp, #0
 80154be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80154c0:	f001 f942 	bl	8016748 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80154cc:	429a      	cmp	r2, r3
 80154ce:	d102      	bne.n	80154d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80154d0:	2301      	movs	r3, #1
 80154d2:	60fb      	str	r3, [r7, #12]
 80154d4:	e001      	b.n	80154da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80154d6:	2300      	movs	r3, #0
 80154d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80154da:	f001 f967 	bl	80167ac <vPortExitCritical>

	return xReturn;
 80154de:	68fb      	ldr	r3, [r7, #12]
}
 80154e0:	4618      	mov	r0, r3
 80154e2:	3710      	adds	r7, #16
 80154e4:	46bd      	mov	sp, r7
 80154e6:	bd80      	pop	{r7, pc}

080154e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b08e      	sub	sp, #56	@ 0x38
 80154ec:	af04      	add	r7, sp, #16
 80154ee:	60f8      	str	r0, [r7, #12]
 80154f0:	60b9      	str	r1, [r7, #8]
 80154f2:	607a      	str	r2, [r7, #4]
 80154f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80154f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	d10b      	bne.n	8015514 <xTaskCreateStatic+0x2c>
	__asm volatile
 80154fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015500:	f383 8811 	msr	BASEPRI, r3
 8015504:	f3bf 8f6f 	isb	sy
 8015508:	f3bf 8f4f 	dsb	sy
 801550c:	623b      	str	r3, [r7, #32]
}
 801550e:	bf00      	nop
 8015510:	bf00      	nop
 8015512:	e7fd      	b.n	8015510 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8015514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015516:	2b00      	cmp	r3, #0
 8015518:	d10b      	bne.n	8015532 <xTaskCreateStatic+0x4a>
	__asm volatile
 801551a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801551e:	f383 8811 	msr	BASEPRI, r3
 8015522:	f3bf 8f6f 	isb	sy
 8015526:	f3bf 8f4f 	dsb	sy
 801552a:	61fb      	str	r3, [r7, #28]
}
 801552c:	bf00      	nop
 801552e:	bf00      	nop
 8015530:	e7fd      	b.n	801552e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8015532:	2354      	movs	r3, #84	@ 0x54
 8015534:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8015536:	693b      	ldr	r3, [r7, #16]
 8015538:	2b54      	cmp	r3, #84	@ 0x54
 801553a:	d00b      	beq.n	8015554 <xTaskCreateStatic+0x6c>
	__asm volatile
 801553c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015540:	f383 8811 	msr	BASEPRI, r3
 8015544:	f3bf 8f6f 	isb	sy
 8015548:	f3bf 8f4f 	dsb	sy
 801554c:	61bb      	str	r3, [r7, #24]
}
 801554e:	bf00      	nop
 8015550:	bf00      	nop
 8015552:	e7fd      	b.n	8015550 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8015554:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8015556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015558:	2b00      	cmp	r3, #0
 801555a:	d01e      	beq.n	801559a <xTaskCreateStatic+0xb2>
 801555c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801555e:	2b00      	cmp	r3, #0
 8015560:	d01b      	beq.n	801559a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015564:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8015566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015568:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801556a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801556c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801556e:	2202      	movs	r2, #2
 8015570:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8015574:	2300      	movs	r3, #0
 8015576:	9303      	str	r3, [sp, #12]
 8015578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801557a:	9302      	str	r3, [sp, #8]
 801557c:	f107 0314 	add.w	r3, r7, #20
 8015580:	9301      	str	r3, [sp, #4]
 8015582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015584:	9300      	str	r3, [sp, #0]
 8015586:	683b      	ldr	r3, [r7, #0]
 8015588:	687a      	ldr	r2, [r7, #4]
 801558a:	68b9      	ldr	r1, [r7, #8]
 801558c:	68f8      	ldr	r0, [r7, #12]
 801558e:	f000 f850 	bl	8015632 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015592:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015594:	f000 f8d6 	bl	8015744 <prvAddNewTaskToReadyList>
 8015598:	e001      	b.n	801559e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801559a:	2300      	movs	r3, #0
 801559c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801559e:	697b      	ldr	r3, [r7, #20]
	}
 80155a0:	4618      	mov	r0, r3
 80155a2:	3728      	adds	r7, #40	@ 0x28
 80155a4:	46bd      	mov	sp, r7
 80155a6:	bd80      	pop	{r7, pc}

080155a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80155a8:	b580      	push	{r7, lr}
 80155aa:	b08c      	sub	sp, #48	@ 0x30
 80155ac:	af04      	add	r7, sp, #16
 80155ae:	60f8      	str	r0, [r7, #12]
 80155b0:	60b9      	str	r1, [r7, #8]
 80155b2:	603b      	str	r3, [r7, #0]
 80155b4:	4613      	mov	r3, r2
 80155b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80155b8:	88fb      	ldrh	r3, [r7, #6]
 80155ba:	009b      	lsls	r3, r3, #2
 80155bc:	4618      	mov	r0, r3
 80155be:	f001 f9e5 	bl	801698c <pvPortMalloc>
 80155c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80155c4:	697b      	ldr	r3, [r7, #20]
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d00e      	beq.n	80155e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80155ca:	2054      	movs	r0, #84	@ 0x54
 80155cc:	f001 f9de 	bl	801698c <pvPortMalloc>
 80155d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80155d2:	69fb      	ldr	r3, [r7, #28]
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d003      	beq.n	80155e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80155d8:	69fb      	ldr	r3, [r7, #28]
 80155da:	697a      	ldr	r2, [r7, #20]
 80155dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80155de:	e005      	b.n	80155ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80155e0:	6978      	ldr	r0, [r7, #20]
 80155e2:	f001 faa1 	bl	8016b28 <vPortFree>
 80155e6:	e001      	b.n	80155ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80155e8:	2300      	movs	r3, #0
 80155ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80155ec:	69fb      	ldr	r3, [r7, #28]
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d017      	beq.n	8015622 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80155f2:	69fb      	ldr	r3, [r7, #28]
 80155f4:	2200      	movs	r2, #0
 80155f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80155fa:	88fa      	ldrh	r2, [r7, #6]
 80155fc:	2300      	movs	r3, #0
 80155fe:	9303      	str	r3, [sp, #12]
 8015600:	69fb      	ldr	r3, [r7, #28]
 8015602:	9302      	str	r3, [sp, #8]
 8015604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015606:	9301      	str	r3, [sp, #4]
 8015608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801560a:	9300      	str	r3, [sp, #0]
 801560c:	683b      	ldr	r3, [r7, #0]
 801560e:	68b9      	ldr	r1, [r7, #8]
 8015610:	68f8      	ldr	r0, [r7, #12]
 8015612:	f000 f80e 	bl	8015632 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015616:	69f8      	ldr	r0, [r7, #28]
 8015618:	f000 f894 	bl	8015744 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801561c:	2301      	movs	r3, #1
 801561e:	61bb      	str	r3, [r7, #24]
 8015620:	e002      	b.n	8015628 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015622:	f04f 33ff 	mov.w	r3, #4294967295
 8015626:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8015628:	69bb      	ldr	r3, [r7, #24]
	}
 801562a:	4618      	mov	r0, r3
 801562c:	3720      	adds	r7, #32
 801562e:	46bd      	mov	sp, r7
 8015630:	bd80      	pop	{r7, pc}

08015632 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8015632:	b580      	push	{r7, lr}
 8015634:	b088      	sub	sp, #32
 8015636:	af00      	add	r7, sp, #0
 8015638:	60f8      	str	r0, [r7, #12]
 801563a:	60b9      	str	r1, [r7, #8]
 801563c:	607a      	str	r2, [r7, #4]
 801563e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015642:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015644:	6879      	ldr	r1, [r7, #4]
 8015646:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801564a:	440b      	add	r3, r1
 801564c:	009b      	lsls	r3, r3, #2
 801564e:	4413      	add	r3, r2
 8015650:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8015652:	69bb      	ldr	r3, [r7, #24]
 8015654:	f023 0307 	bic.w	r3, r3, #7
 8015658:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801565a:	69bb      	ldr	r3, [r7, #24]
 801565c:	f003 0307 	and.w	r3, r3, #7
 8015660:	2b00      	cmp	r3, #0
 8015662:	d00b      	beq.n	801567c <prvInitialiseNewTask+0x4a>
	__asm volatile
 8015664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015668:	f383 8811 	msr	BASEPRI, r3
 801566c:	f3bf 8f6f 	isb	sy
 8015670:	f3bf 8f4f 	dsb	sy
 8015674:	617b      	str	r3, [r7, #20]
}
 8015676:	bf00      	nop
 8015678:	bf00      	nop
 801567a:	e7fd      	b.n	8015678 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801567c:	68bb      	ldr	r3, [r7, #8]
 801567e:	2b00      	cmp	r3, #0
 8015680:	d01f      	beq.n	80156c2 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015682:	2300      	movs	r3, #0
 8015684:	61fb      	str	r3, [r7, #28]
 8015686:	e012      	b.n	80156ae <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015688:	68ba      	ldr	r2, [r7, #8]
 801568a:	69fb      	ldr	r3, [r7, #28]
 801568c:	4413      	add	r3, r2
 801568e:	7819      	ldrb	r1, [r3, #0]
 8015690:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015692:	69fb      	ldr	r3, [r7, #28]
 8015694:	4413      	add	r3, r2
 8015696:	3334      	adds	r3, #52	@ 0x34
 8015698:	460a      	mov	r2, r1
 801569a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801569c:	68ba      	ldr	r2, [r7, #8]
 801569e:	69fb      	ldr	r3, [r7, #28]
 80156a0:	4413      	add	r3, r2
 80156a2:	781b      	ldrb	r3, [r3, #0]
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d006      	beq.n	80156b6 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80156a8:	69fb      	ldr	r3, [r7, #28]
 80156aa:	3301      	adds	r3, #1
 80156ac:	61fb      	str	r3, [r7, #28]
 80156ae:	69fb      	ldr	r3, [r7, #28]
 80156b0:	2b0f      	cmp	r3, #15
 80156b2:	d9e9      	bls.n	8015688 <prvInitialiseNewTask+0x56>
 80156b4:	e000      	b.n	80156b8 <prvInitialiseNewTask+0x86>
			{
				break;
 80156b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80156b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156ba:	2200      	movs	r2, #0
 80156bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80156c0:	e003      	b.n	80156ca <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80156c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156c4:	2200      	movs	r2, #0
 80156c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80156ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156cc:	2b06      	cmp	r3, #6
 80156ce:	d901      	bls.n	80156d4 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80156d0:	2306      	movs	r3, #6
 80156d2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80156d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80156d8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80156da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80156de:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80156e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156e2:	2200      	movs	r2, #0
 80156e4:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80156e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156e8:	3304      	adds	r3, #4
 80156ea:	4618      	mov	r0, r3
 80156ec:	f7ff fa1c 	bl	8014b28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80156f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156f2:	3318      	adds	r3, #24
 80156f4:	4618      	mov	r0, r3
 80156f6:	f7ff fa17 	bl	8014b28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80156fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80156fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015702:	f1c3 0207 	rsb	r2, r3, #7
 8015706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015708:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801570a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801570c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801570e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8015710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015712:	2200      	movs	r2, #0
 8015714:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015718:	2200      	movs	r2, #0
 801571a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801571e:	683a      	ldr	r2, [r7, #0]
 8015720:	68f9      	ldr	r1, [r7, #12]
 8015722:	69b8      	ldr	r0, [r7, #24]
 8015724:	f000 fede 	bl	80164e4 <pxPortInitialiseStack>
 8015728:	4602      	mov	r2, r0
 801572a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801572c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801572e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015730:	2b00      	cmp	r3, #0
 8015732:	d002      	beq.n	801573a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8015734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015736:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015738:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801573a:	bf00      	nop
 801573c:	3720      	adds	r7, #32
 801573e:	46bd      	mov	sp, r7
 8015740:	bd80      	pop	{r7, pc}
	...

08015744 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015744:	b580      	push	{r7, lr}
 8015746:	b082      	sub	sp, #8
 8015748:	af00      	add	r7, sp, #0
 801574a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801574c:	f000 fffc 	bl	8016748 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015750:	4b2a      	ldr	r3, [pc, #168]	@ (80157fc <prvAddNewTaskToReadyList+0xb8>)
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	3301      	adds	r3, #1
 8015756:	4a29      	ldr	r2, [pc, #164]	@ (80157fc <prvAddNewTaskToReadyList+0xb8>)
 8015758:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801575a:	4b29      	ldr	r3, [pc, #164]	@ (8015800 <prvAddNewTaskToReadyList+0xbc>)
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	2b00      	cmp	r3, #0
 8015760:	d109      	bne.n	8015776 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8015762:	4a27      	ldr	r2, [pc, #156]	@ (8015800 <prvAddNewTaskToReadyList+0xbc>)
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015768:	4b24      	ldr	r3, [pc, #144]	@ (80157fc <prvAddNewTaskToReadyList+0xb8>)
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	2b01      	cmp	r3, #1
 801576e:	d110      	bne.n	8015792 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015770:	f000 fbd4 	bl	8015f1c <prvInitialiseTaskLists>
 8015774:	e00d      	b.n	8015792 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8015776:	4b23      	ldr	r3, [pc, #140]	@ (8015804 <prvAddNewTaskToReadyList+0xc0>)
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d109      	bne.n	8015792 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801577e:	4b20      	ldr	r3, [pc, #128]	@ (8015800 <prvAddNewTaskToReadyList+0xbc>)
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015788:	429a      	cmp	r2, r3
 801578a:	d802      	bhi.n	8015792 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801578c:	4a1c      	ldr	r2, [pc, #112]	@ (8015800 <prvAddNewTaskToReadyList+0xbc>)
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8015792:	4b1d      	ldr	r3, [pc, #116]	@ (8015808 <prvAddNewTaskToReadyList+0xc4>)
 8015794:	681b      	ldr	r3, [r3, #0]
 8015796:	3301      	adds	r3, #1
 8015798:	4a1b      	ldr	r2, [pc, #108]	@ (8015808 <prvAddNewTaskToReadyList+0xc4>)
 801579a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80157a0:	2201      	movs	r2, #1
 80157a2:	409a      	lsls	r2, r3
 80157a4:	4b19      	ldr	r3, [pc, #100]	@ (801580c <prvAddNewTaskToReadyList+0xc8>)
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	4313      	orrs	r3, r2
 80157aa:	4a18      	ldr	r2, [pc, #96]	@ (801580c <prvAddNewTaskToReadyList+0xc8>)
 80157ac:	6013      	str	r3, [r2, #0]
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80157b2:	4613      	mov	r3, r2
 80157b4:	009b      	lsls	r3, r3, #2
 80157b6:	4413      	add	r3, r2
 80157b8:	009b      	lsls	r3, r3, #2
 80157ba:	4a15      	ldr	r2, [pc, #84]	@ (8015810 <prvAddNewTaskToReadyList+0xcc>)
 80157bc:	441a      	add	r2, r3
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	3304      	adds	r3, #4
 80157c2:	4619      	mov	r1, r3
 80157c4:	4610      	mov	r0, r2
 80157c6:	f7ff f9bc 	bl	8014b42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80157ca:	f000 ffef 	bl	80167ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80157ce:	4b0d      	ldr	r3, [pc, #52]	@ (8015804 <prvAddNewTaskToReadyList+0xc0>)
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d00e      	beq.n	80157f4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80157d6:	4b0a      	ldr	r3, [pc, #40]	@ (8015800 <prvAddNewTaskToReadyList+0xbc>)
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80157e0:	429a      	cmp	r2, r3
 80157e2:	d207      	bcs.n	80157f4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80157e4:	4b0b      	ldr	r3, [pc, #44]	@ (8015814 <prvAddNewTaskToReadyList+0xd0>)
 80157e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80157ea:	601a      	str	r2, [r3, #0]
 80157ec:	f3bf 8f4f 	dsb	sy
 80157f0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80157f4:	bf00      	nop
 80157f6:	3708      	adds	r7, #8
 80157f8:	46bd      	mov	sp, r7
 80157fa:	bd80      	pop	{r7, pc}
 80157fc:	24002ba4 	.word	0x24002ba4
 8015800:	24002aa4 	.word	0x24002aa4
 8015804:	24002bb0 	.word	0x24002bb0
 8015808:	24002bc0 	.word	0x24002bc0
 801580c:	24002bac 	.word	0x24002bac
 8015810:	24002aa8 	.word	0x24002aa8
 8015814:	e000ed04 	.word	0xe000ed04

08015818 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015818:	b580      	push	{r7, lr}
 801581a:	b084      	sub	sp, #16
 801581c:	af00      	add	r7, sp, #0
 801581e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8015820:	2300      	movs	r3, #0
 8015822:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d018      	beq.n	801585c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801582a:	4b14      	ldr	r3, [pc, #80]	@ (801587c <vTaskDelay+0x64>)
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	2b00      	cmp	r3, #0
 8015830:	d00b      	beq.n	801584a <vTaskDelay+0x32>
	__asm volatile
 8015832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015836:	f383 8811 	msr	BASEPRI, r3
 801583a:	f3bf 8f6f 	isb	sy
 801583e:	f3bf 8f4f 	dsb	sy
 8015842:	60bb      	str	r3, [r7, #8]
}
 8015844:	bf00      	nop
 8015846:	bf00      	nop
 8015848:	e7fd      	b.n	8015846 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801584a:	f000 f87d 	bl	8015948 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801584e:	2100      	movs	r1, #0
 8015850:	6878      	ldr	r0, [r7, #4]
 8015852:	f000 fde1 	bl	8016418 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8015856:	f000 f885 	bl	8015964 <xTaskResumeAll>
 801585a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	2b00      	cmp	r3, #0
 8015860:	d107      	bne.n	8015872 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8015862:	4b07      	ldr	r3, [pc, #28]	@ (8015880 <vTaskDelay+0x68>)
 8015864:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015868:	601a      	str	r2, [r3, #0]
 801586a:	f3bf 8f4f 	dsb	sy
 801586e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015872:	bf00      	nop
 8015874:	3710      	adds	r7, #16
 8015876:	46bd      	mov	sp, r7
 8015878:	bd80      	pop	{r7, pc}
 801587a:	bf00      	nop
 801587c:	24002bcc 	.word	0x24002bcc
 8015880:	e000ed04 	.word	0xe000ed04

08015884 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015884:	b580      	push	{r7, lr}
 8015886:	b08a      	sub	sp, #40	@ 0x28
 8015888:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801588a:	2300      	movs	r3, #0
 801588c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801588e:	2300      	movs	r3, #0
 8015890:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8015892:	463a      	mov	r2, r7
 8015894:	1d39      	adds	r1, r7, #4
 8015896:	f107 0308 	add.w	r3, r7, #8
 801589a:	4618      	mov	r0, r3
 801589c:	f7ec fc94 	bl	80021c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80158a0:	6839      	ldr	r1, [r7, #0]
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	68ba      	ldr	r2, [r7, #8]
 80158a6:	9202      	str	r2, [sp, #8]
 80158a8:	9301      	str	r3, [sp, #4]
 80158aa:	2300      	movs	r3, #0
 80158ac:	9300      	str	r3, [sp, #0]
 80158ae:	2300      	movs	r3, #0
 80158b0:	460a      	mov	r2, r1
 80158b2:	491f      	ldr	r1, [pc, #124]	@ (8015930 <vTaskStartScheduler+0xac>)
 80158b4:	481f      	ldr	r0, [pc, #124]	@ (8015934 <vTaskStartScheduler+0xb0>)
 80158b6:	f7ff fe17 	bl	80154e8 <xTaskCreateStatic>
 80158ba:	4603      	mov	r3, r0
 80158bc:	4a1e      	ldr	r2, [pc, #120]	@ (8015938 <vTaskStartScheduler+0xb4>)
 80158be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80158c0:	4b1d      	ldr	r3, [pc, #116]	@ (8015938 <vTaskStartScheduler+0xb4>)
 80158c2:	681b      	ldr	r3, [r3, #0]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d002      	beq.n	80158ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80158c8:	2301      	movs	r3, #1
 80158ca:	617b      	str	r3, [r7, #20]
 80158cc:	e001      	b.n	80158d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80158ce:	2300      	movs	r3, #0
 80158d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80158d2:	697b      	ldr	r3, [r7, #20]
 80158d4:	2b01      	cmp	r3, #1
 80158d6:	d116      	bne.n	8015906 <vTaskStartScheduler+0x82>
	__asm volatile
 80158d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80158dc:	f383 8811 	msr	BASEPRI, r3
 80158e0:	f3bf 8f6f 	isb	sy
 80158e4:	f3bf 8f4f 	dsb	sy
 80158e8:	613b      	str	r3, [r7, #16]
}
 80158ea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80158ec:	4b13      	ldr	r3, [pc, #76]	@ (801593c <vTaskStartScheduler+0xb8>)
 80158ee:	f04f 32ff 	mov.w	r2, #4294967295
 80158f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80158f4:	4b12      	ldr	r3, [pc, #72]	@ (8015940 <vTaskStartScheduler+0xbc>)
 80158f6:	2201      	movs	r2, #1
 80158f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80158fa:	4b12      	ldr	r3, [pc, #72]	@ (8015944 <vTaskStartScheduler+0xc0>)
 80158fc:	2200      	movs	r2, #0
 80158fe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015900:	f000 fe7e 	bl	8016600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015904:	e00f      	b.n	8015926 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015906:	697b      	ldr	r3, [r7, #20]
 8015908:	f1b3 3fff 	cmp.w	r3, #4294967295
 801590c:	d10b      	bne.n	8015926 <vTaskStartScheduler+0xa2>
	__asm volatile
 801590e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015912:	f383 8811 	msr	BASEPRI, r3
 8015916:	f3bf 8f6f 	isb	sy
 801591a:	f3bf 8f4f 	dsb	sy
 801591e:	60fb      	str	r3, [r7, #12]
}
 8015920:	bf00      	nop
 8015922:	bf00      	nop
 8015924:	e7fd      	b.n	8015922 <vTaskStartScheduler+0x9e>
}
 8015926:	bf00      	nop
 8015928:	3718      	adds	r7, #24
 801592a:	46bd      	mov	sp, r7
 801592c:	bd80      	pop	{r7, pc}
 801592e:	bf00      	nop
 8015930:	08019d4c 	.word	0x08019d4c
 8015934:	08015eed 	.word	0x08015eed
 8015938:	24002bc8 	.word	0x24002bc8
 801593c:	24002bc4 	.word	0x24002bc4
 8015940:	24002bb0 	.word	0x24002bb0
 8015944:	24002ba8 	.word	0x24002ba8

08015948 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015948:	b480      	push	{r7}
 801594a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801594c:	4b04      	ldr	r3, [pc, #16]	@ (8015960 <vTaskSuspendAll+0x18>)
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	3301      	adds	r3, #1
 8015952:	4a03      	ldr	r2, [pc, #12]	@ (8015960 <vTaskSuspendAll+0x18>)
 8015954:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8015956:	bf00      	nop
 8015958:	46bd      	mov	sp, r7
 801595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801595e:	4770      	bx	lr
 8015960:	24002bcc 	.word	0x24002bcc

08015964 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015964:	b580      	push	{r7, lr}
 8015966:	b084      	sub	sp, #16
 8015968:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801596a:	2300      	movs	r3, #0
 801596c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801596e:	2300      	movs	r3, #0
 8015970:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8015972:	4b42      	ldr	r3, [pc, #264]	@ (8015a7c <xTaskResumeAll+0x118>)
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	2b00      	cmp	r3, #0
 8015978:	d10b      	bne.n	8015992 <xTaskResumeAll+0x2e>
	__asm volatile
 801597a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801597e:	f383 8811 	msr	BASEPRI, r3
 8015982:	f3bf 8f6f 	isb	sy
 8015986:	f3bf 8f4f 	dsb	sy
 801598a:	603b      	str	r3, [r7, #0]
}
 801598c:	bf00      	nop
 801598e:	bf00      	nop
 8015990:	e7fd      	b.n	801598e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015992:	f000 fed9 	bl	8016748 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8015996:	4b39      	ldr	r3, [pc, #228]	@ (8015a7c <xTaskResumeAll+0x118>)
 8015998:	681b      	ldr	r3, [r3, #0]
 801599a:	3b01      	subs	r3, #1
 801599c:	4a37      	ldr	r2, [pc, #220]	@ (8015a7c <xTaskResumeAll+0x118>)
 801599e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80159a0:	4b36      	ldr	r3, [pc, #216]	@ (8015a7c <xTaskResumeAll+0x118>)
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d161      	bne.n	8015a6c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80159a8:	4b35      	ldr	r3, [pc, #212]	@ (8015a80 <xTaskResumeAll+0x11c>)
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d05d      	beq.n	8015a6c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80159b0:	e02e      	b.n	8015a10 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80159b2:	4b34      	ldr	r3, [pc, #208]	@ (8015a84 <xTaskResumeAll+0x120>)
 80159b4:	68db      	ldr	r3, [r3, #12]
 80159b6:	68db      	ldr	r3, [r3, #12]
 80159b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	3318      	adds	r3, #24
 80159be:	4618      	mov	r0, r3
 80159c0:	f7ff f91c 	bl	8014bfc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	3304      	adds	r3, #4
 80159c8:	4618      	mov	r0, r3
 80159ca:	f7ff f917 	bl	8014bfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80159d2:	2201      	movs	r2, #1
 80159d4:	409a      	lsls	r2, r3
 80159d6:	4b2c      	ldr	r3, [pc, #176]	@ (8015a88 <xTaskResumeAll+0x124>)
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	4313      	orrs	r3, r2
 80159dc:	4a2a      	ldr	r2, [pc, #168]	@ (8015a88 <xTaskResumeAll+0x124>)
 80159de:	6013      	str	r3, [r2, #0]
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80159e4:	4613      	mov	r3, r2
 80159e6:	009b      	lsls	r3, r3, #2
 80159e8:	4413      	add	r3, r2
 80159ea:	009b      	lsls	r3, r3, #2
 80159ec:	4a27      	ldr	r2, [pc, #156]	@ (8015a8c <xTaskResumeAll+0x128>)
 80159ee:	441a      	add	r2, r3
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	3304      	adds	r3, #4
 80159f4:	4619      	mov	r1, r3
 80159f6:	4610      	mov	r0, r2
 80159f8:	f7ff f8a3 	bl	8014b42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015a00:	4b23      	ldr	r3, [pc, #140]	@ (8015a90 <xTaskResumeAll+0x12c>)
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a06:	429a      	cmp	r2, r3
 8015a08:	d302      	bcc.n	8015a10 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8015a0a:	4b22      	ldr	r3, [pc, #136]	@ (8015a94 <xTaskResumeAll+0x130>)
 8015a0c:	2201      	movs	r2, #1
 8015a0e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015a10:	4b1c      	ldr	r3, [pc, #112]	@ (8015a84 <xTaskResumeAll+0x120>)
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d1cc      	bne.n	80159b2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d001      	beq.n	8015a22 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8015a1e:	f000 fb1b 	bl	8016058 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8015a22:	4b1d      	ldr	r3, [pc, #116]	@ (8015a98 <xTaskResumeAll+0x134>)
 8015a24:	681b      	ldr	r3, [r3, #0]
 8015a26:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d010      	beq.n	8015a50 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8015a2e:	f000 f837 	bl	8015aa0 <xTaskIncrementTick>
 8015a32:	4603      	mov	r3, r0
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d002      	beq.n	8015a3e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8015a38:	4b16      	ldr	r3, [pc, #88]	@ (8015a94 <xTaskResumeAll+0x130>)
 8015a3a:	2201      	movs	r2, #1
 8015a3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	3b01      	subs	r3, #1
 8015a42:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d1f1      	bne.n	8015a2e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8015a4a:	4b13      	ldr	r3, [pc, #76]	@ (8015a98 <xTaskResumeAll+0x134>)
 8015a4c:	2200      	movs	r2, #0
 8015a4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015a50:	4b10      	ldr	r3, [pc, #64]	@ (8015a94 <xTaskResumeAll+0x130>)
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d009      	beq.n	8015a6c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015a58:	2301      	movs	r3, #1
 8015a5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8015a9c <xTaskResumeAll+0x138>)
 8015a5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015a62:	601a      	str	r2, [r3, #0]
 8015a64:	f3bf 8f4f 	dsb	sy
 8015a68:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015a6c:	f000 fe9e 	bl	80167ac <vPortExitCritical>

	return xAlreadyYielded;
 8015a70:	68bb      	ldr	r3, [r7, #8]
}
 8015a72:	4618      	mov	r0, r3
 8015a74:	3710      	adds	r7, #16
 8015a76:	46bd      	mov	sp, r7
 8015a78:	bd80      	pop	{r7, pc}
 8015a7a:	bf00      	nop
 8015a7c:	24002bcc 	.word	0x24002bcc
 8015a80:	24002ba4 	.word	0x24002ba4
 8015a84:	24002b64 	.word	0x24002b64
 8015a88:	24002bac 	.word	0x24002bac
 8015a8c:	24002aa8 	.word	0x24002aa8
 8015a90:	24002aa4 	.word	0x24002aa4
 8015a94:	24002bb8 	.word	0x24002bb8
 8015a98:	24002bb4 	.word	0x24002bb4
 8015a9c:	e000ed04 	.word	0xe000ed04

08015aa0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015aa0:	b580      	push	{r7, lr}
 8015aa2:	b086      	sub	sp, #24
 8015aa4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015aa6:	2300      	movs	r3, #0
 8015aa8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015aaa:	4b4f      	ldr	r3, [pc, #316]	@ (8015be8 <xTaskIncrementTick+0x148>)
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	f040 808f 	bne.w	8015bd2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015ab4:	4b4d      	ldr	r3, [pc, #308]	@ (8015bec <xTaskIncrementTick+0x14c>)
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	3301      	adds	r3, #1
 8015aba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015abc:	4a4b      	ldr	r2, [pc, #300]	@ (8015bec <xTaskIncrementTick+0x14c>)
 8015abe:	693b      	ldr	r3, [r7, #16]
 8015ac0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015ac2:	693b      	ldr	r3, [r7, #16]
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d121      	bne.n	8015b0c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8015ac8:	4b49      	ldr	r3, [pc, #292]	@ (8015bf0 <xTaskIncrementTick+0x150>)
 8015aca:	681b      	ldr	r3, [r3, #0]
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d00b      	beq.n	8015aea <xTaskIncrementTick+0x4a>
	__asm volatile
 8015ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ad6:	f383 8811 	msr	BASEPRI, r3
 8015ada:	f3bf 8f6f 	isb	sy
 8015ade:	f3bf 8f4f 	dsb	sy
 8015ae2:	603b      	str	r3, [r7, #0]
}
 8015ae4:	bf00      	nop
 8015ae6:	bf00      	nop
 8015ae8:	e7fd      	b.n	8015ae6 <xTaskIncrementTick+0x46>
 8015aea:	4b41      	ldr	r3, [pc, #260]	@ (8015bf0 <xTaskIncrementTick+0x150>)
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	60fb      	str	r3, [r7, #12]
 8015af0:	4b40      	ldr	r3, [pc, #256]	@ (8015bf4 <xTaskIncrementTick+0x154>)
 8015af2:	681b      	ldr	r3, [r3, #0]
 8015af4:	4a3e      	ldr	r2, [pc, #248]	@ (8015bf0 <xTaskIncrementTick+0x150>)
 8015af6:	6013      	str	r3, [r2, #0]
 8015af8:	4a3e      	ldr	r2, [pc, #248]	@ (8015bf4 <xTaskIncrementTick+0x154>)
 8015afa:	68fb      	ldr	r3, [r7, #12]
 8015afc:	6013      	str	r3, [r2, #0]
 8015afe:	4b3e      	ldr	r3, [pc, #248]	@ (8015bf8 <xTaskIncrementTick+0x158>)
 8015b00:	681b      	ldr	r3, [r3, #0]
 8015b02:	3301      	adds	r3, #1
 8015b04:	4a3c      	ldr	r2, [pc, #240]	@ (8015bf8 <xTaskIncrementTick+0x158>)
 8015b06:	6013      	str	r3, [r2, #0]
 8015b08:	f000 faa6 	bl	8016058 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015b0c:	4b3b      	ldr	r3, [pc, #236]	@ (8015bfc <xTaskIncrementTick+0x15c>)
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	693a      	ldr	r2, [r7, #16]
 8015b12:	429a      	cmp	r2, r3
 8015b14:	d348      	bcc.n	8015ba8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015b16:	4b36      	ldr	r3, [pc, #216]	@ (8015bf0 <xTaskIncrementTick+0x150>)
 8015b18:	681b      	ldr	r3, [r3, #0]
 8015b1a:	681b      	ldr	r3, [r3, #0]
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d104      	bne.n	8015b2a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015b20:	4b36      	ldr	r3, [pc, #216]	@ (8015bfc <xTaskIncrementTick+0x15c>)
 8015b22:	f04f 32ff 	mov.w	r2, #4294967295
 8015b26:	601a      	str	r2, [r3, #0]
					break;
 8015b28:	e03e      	b.n	8015ba8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015b2a:	4b31      	ldr	r3, [pc, #196]	@ (8015bf0 <xTaskIncrementTick+0x150>)
 8015b2c:	681b      	ldr	r3, [r3, #0]
 8015b2e:	68db      	ldr	r3, [r3, #12]
 8015b30:	68db      	ldr	r3, [r3, #12]
 8015b32:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015b34:	68bb      	ldr	r3, [r7, #8]
 8015b36:	685b      	ldr	r3, [r3, #4]
 8015b38:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015b3a:	693a      	ldr	r2, [r7, #16]
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	429a      	cmp	r2, r3
 8015b40:	d203      	bcs.n	8015b4a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015b42:	4a2e      	ldr	r2, [pc, #184]	@ (8015bfc <xTaskIncrementTick+0x15c>)
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015b48:	e02e      	b.n	8015ba8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015b4a:	68bb      	ldr	r3, [r7, #8]
 8015b4c:	3304      	adds	r3, #4
 8015b4e:	4618      	mov	r0, r3
 8015b50:	f7ff f854 	bl	8014bfc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015b54:	68bb      	ldr	r3, [r7, #8]
 8015b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d004      	beq.n	8015b66 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015b5c:	68bb      	ldr	r3, [r7, #8]
 8015b5e:	3318      	adds	r3, #24
 8015b60:	4618      	mov	r0, r3
 8015b62:	f7ff f84b 	bl	8014bfc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015b66:	68bb      	ldr	r3, [r7, #8]
 8015b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b6a:	2201      	movs	r2, #1
 8015b6c:	409a      	lsls	r2, r3
 8015b6e:	4b24      	ldr	r3, [pc, #144]	@ (8015c00 <xTaskIncrementTick+0x160>)
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	4313      	orrs	r3, r2
 8015b74:	4a22      	ldr	r2, [pc, #136]	@ (8015c00 <xTaskIncrementTick+0x160>)
 8015b76:	6013      	str	r3, [r2, #0]
 8015b78:	68bb      	ldr	r3, [r7, #8]
 8015b7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015b7c:	4613      	mov	r3, r2
 8015b7e:	009b      	lsls	r3, r3, #2
 8015b80:	4413      	add	r3, r2
 8015b82:	009b      	lsls	r3, r3, #2
 8015b84:	4a1f      	ldr	r2, [pc, #124]	@ (8015c04 <xTaskIncrementTick+0x164>)
 8015b86:	441a      	add	r2, r3
 8015b88:	68bb      	ldr	r3, [r7, #8]
 8015b8a:	3304      	adds	r3, #4
 8015b8c:	4619      	mov	r1, r3
 8015b8e:	4610      	mov	r0, r2
 8015b90:	f7fe ffd7 	bl	8014b42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015b94:	68bb      	ldr	r3, [r7, #8]
 8015b96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015b98:	4b1b      	ldr	r3, [pc, #108]	@ (8015c08 <xTaskIncrementTick+0x168>)
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b9e:	429a      	cmp	r2, r3
 8015ba0:	d3b9      	bcc.n	8015b16 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8015ba2:	2301      	movs	r3, #1
 8015ba4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015ba6:	e7b6      	b.n	8015b16 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015ba8:	4b17      	ldr	r3, [pc, #92]	@ (8015c08 <xTaskIncrementTick+0x168>)
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015bae:	4915      	ldr	r1, [pc, #84]	@ (8015c04 <xTaskIncrementTick+0x164>)
 8015bb0:	4613      	mov	r3, r2
 8015bb2:	009b      	lsls	r3, r3, #2
 8015bb4:	4413      	add	r3, r2
 8015bb6:	009b      	lsls	r3, r3, #2
 8015bb8:	440b      	add	r3, r1
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	2b01      	cmp	r3, #1
 8015bbe:	d901      	bls.n	8015bc4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8015bc0:	2301      	movs	r3, #1
 8015bc2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8015bc4:	4b11      	ldr	r3, [pc, #68]	@ (8015c0c <xTaskIncrementTick+0x16c>)
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d007      	beq.n	8015bdc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8015bcc:	2301      	movs	r3, #1
 8015bce:	617b      	str	r3, [r7, #20]
 8015bd0:	e004      	b.n	8015bdc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8015bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8015c10 <xTaskIncrementTick+0x170>)
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	3301      	adds	r3, #1
 8015bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8015c10 <xTaskIncrementTick+0x170>)
 8015bda:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8015bdc:	697b      	ldr	r3, [r7, #20]
}
 8015bde:	4618      	mov	r0, r3
 8015be0:	3718      	adds	r7, #24
 8015be2:	46bd      	mov	sp, r7
 8015be4:	bd80      	pop	{r7, pc}
 8015be6:	bf00      	nop
 8015be8:	24002bcc 	.word	0x24002bcc
 8015bec:	24002ba8 	.word	0x24002ba8
 8015bf0:	24002b5c 	.word	0x24002b5c
 8015bf4:	24002b60 	.word	0x24002b60
 8015bf8:	24002bbc 	.word	0x24002bbc
 8015bfc:	24002bc4 	.word	0x24002bc4
 8015c00:	24002bac 	.word	0x24002bac
 8015c04:	24002aa8 	.word	0x24002aa8
 8015c08:	24002aa4 	.word	0x24002aa4
 8015c0c:	24002bb8 	.word	0x24002bb8
 8015c10:	24002bb4 	.word	0x24002bb4

08015c14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015c14:	b480      	push	{r7}
 8015c16:	b087      	sub	sp, #28
 8015c18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015c1a:	4b27      	ldr	r3, [pc, #156]	@ (8015cb8 <vTaskSwitchContext+0xa4>)
 8015c1c:	681b      	ldr	r3, [r3, #0]
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d003      	beq.n	8015c2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015c22:	4b26      	ldr	r3, [pc, #152]	@ (8015cbc <vTaskSwitchContext+0xa8>)
 8015c24:	2201      	movs	r2, #1
 8015c26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015c28:	e040      	b.n	8015cac <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8015c2a:	4b24      	ldr	r3, [pc, #144]	@ (8015cbc <vTaskSwitchContext+0xa8>)
 8015c2c:	2200      	movs	r2, #0
 8015c2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015c30:	4b23      	ldr	r3, [pc, #140]	@ (8015cc0 <vTaskSwitchContext+0xac>)
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	fab3 f383 	clz	r3, r3
 8015c3c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8015c3e:	7afb      	ldrb	r3, [r7, #11]
 8015c40:	f1c3 031f 	rsb	r3, r3, #31
 8015c44:	617b      	str	r3, [r7, #20]
 8015c46:	491f      	ldr	r1, [pc, #124]	@ (8015cc4 <vTaskSwitchContext+0xb0>)
 8015c48:	697a      	ldr	r2, [r7, #20]
 8015c4a:	4613      	mov	r3, r2
 8015c4c:	009b      	lsls	r3, r3, #2
 8015c4e:	4413      	add	r3, r2
 8015c50:	009b      	lsls	r3, r3, #2
 8015c52:	440b      	add	r3, r1
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d10b      	bne.n	8015c72 <vTaskSwitchContext+0x5e>
	__asm volatile
 8015c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c5e:	f383 8811 	msr	BASEPRI, r3
 8015c62:	f3bf 8f6f 	isb	sy
 8015c66:	f3bf 8f4f 	dsb	sy
 8015c6a:	607b      	str	r3, [r7, #4]
}
 8015c6c:	bf00      	nop
 8015c6e:	bf00      	nop
 8015c70:	e7fd      	b.n	8015c6e <vTaskSwitchContext+0x5a>
 8015c72:	697a      	ldr	r2, [r7, #20]
 8015c74:	4613      	mov	r3, r2
 8015c76:	009b      	lsls	r3, r3, #2
 8015c78:	4413      	add	r3, r2
 8015c7a:	009b      	lsls	r3, r3, #2
 8015c7c:	4a11      	ldr	r2, [pc, #68]	@ (8015cc4 <vTaskSwitchContext+0xb0>)
 8015c7e:	4413      	add	r3, r2
 8015c80:	613b      	str	r3, [r7, #16]
 8015c82:	693b      	ldr	r3, [r7, #16]
 8015c84:	685b      	ldr	r3, [r3, #4]
 8015c86:	685a      	ldr	r2, [r3, #4]
 8015c88:	693b      	ldr	r3, [r7, #16]
 8015c8a:	605a      	str	r2, [r3, #4]
 8015c8c:	693b      	ldr	r3, [r7, #16]
 8015c8e:	685a      	ldr	r2, [r3, #4]
 8015c90:	693b      	ldr	r3, [r7, #16]
 8015c92:	3308      	adds	r3, #8
 8015c94:	429a      	cmp	r2, r3
 8015c96:	d104      	bne.n	8015ca2 <vTaskSwitchContext+0x8e>
 8015c98:	693b      	ldr	r3, [r7, #16]
 8015c9a:	685b      	ldr	r3, [r3, #4]
 8015c9c:	685a      	ldr	r2, [r3, #4]
 8015c9e:	693b      	ldr	r3, [r7, #16]
 8015ca0:	605a      	str	r2, [r3, #4]
 8015ca2:	693b      	ldr	r3, [r7, #16]
 8015ca4:	685b      	ldr	r3, [r3, #4]
 8015ca6:	68db      	ldr	r3, [r3, #12]
 8015ca8:	4a07      	ldr	r2, [pc, #28]	@ (8015cc8 <vTaskSwitchContext+0xb4>)
 8015caa:	6013      	str	r3, [r2, #0]
}
 8015cac:	bf00      	nop
 8015cae:	371c      	adds	r7, #28
 8015cb0:	46bd      	mov	sp, r7
 8015cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cb6:	4770      	bx	lr
 8015cb8:	24002bcc 	.word	0x24002bcc
 8015cbc:	24002bb8 	.word	0x24002bb8
 8015cc0:	24002bac 	.word	0x24002bac
 8015cc4:	24002aa8 	.word	0x24002aa8
 8015cc8:	24002aa4 	.word	0x24002aa4

08015ccc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015ccc:	b580      	push	{r7, lr}
 8015cce:	b084      	sub	sp, #16
 8015cd0:	af00      	add	r7, sp, #0
 8015cd2:	6078      	str	r0, [r7, #4]
 8015cd4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d10b      	bne.n	8015cf4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8015cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ce0:	f383 8811 	msr	BASEPRI, r3
 8015ce4:	f3bf 8f6f 	isb	sy
 8015ce8:	f3bf 8f4f 	dsb	sy
 8015cec:	60fb      	str	r3, [r7, #12]
}
 8015cee:	bf00      	nop
 8015cf0:	bf00      	nop
 8015cf2:	e7fd      	b.n	8015cf0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015cf4:	4b07      	ldr	r3, [pc, #28]	@ (8015d14 <vTaskPlaceOnEventList+0x48>)
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	3318      	adds	r3, #24
 8015cfa:	4619      	mov	r1, r3
 8015cfc:	6878      	ldr	r0, [r7, #4]
 8015cfe:	f7fe ff44 	bl	8014b8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015d02:	2101      	movs	r1, #1
 8015d04:	6838      	ldr	r0, [r7, #0]
 8015d06:	f000 fb87 	bl	8016418 <prvAddCurrentTaskToDelayedList>
}
 8015d0a:	bf00      	nop
 8015d0c:	3710      	adds	r7, #16
 8015d0e:	46bd      	mov	sp, r7
 8015d10:	bd80      	pop	{r7, pc}
 8015d12:	bf00      	nop
 8015d14:	24002aa4 	.word	0x24002aa4

08015d18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015d18:	b580      	push	{r7, lr}
 8015d1a:	b086      	sub	sp, #24
 8015d1c:	af00      	add	r7, sp, #0
 8015d1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	68db      	ldr	r3, [r3, #12]
 8015d24:	68db      	ldr	r3, [r3, #12]
 8015d26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015d28:	693b      	ldr	r3, [r7, #16]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d10b      	bne.n	8015d46 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8015d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d32:	f383 8811 	msr	BASEPRI, r3
 8015d36:	f3bf 8f6f 	isb	sy
 8015d3a:	f3bf 8f4f 	dsb	sy
 8015d3e:	60fb      	str	r3, [r7, #12]
}
 8015d40:	bf00      	nop
 8015d42:	bf00      	nop
 8015d44:	e7fd      	b.n	8015d42 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015d46:	693b      	ldr	r3, [r7, #16]
 8015d48:	3318      	adds	r3, #24
 8015d4a:	4618      	mov	r0, r3
 8015d4c:	f7fe ff56 	bl	8014bfc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015d50:	4b1d      	ldr	r3, [pc, #116]	@ (8015dc8 <xTaskRemoveFromEventList+0xb0>)
 8015d52:	681b      	ldr	r3, [r3, #0]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d11c      	bne.n	8015d92 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015d58:	693b      	ldr	r3, [r7, #16]
 8015d5a:	3304      	adds	r3, #4
 8015d5c:	4618      	mov	r0, r3
 8015d5e:	f7fe ff4d 	bl	8014bfc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015d62:	693b      	ldr	r3, [r7, #16]
 8015d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015d66:	2201      	movs	r2, #1
 8015d68:	409a      	lsls	r2, r3
 8015d6a:	4b18      	ldr	r3, [pc, #96]	@ (8015dcc <xTaskRemoveFromEventList+0xb4>)
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	4313      	orrs	r3, r2
 8015d70:	4a16      	ldr	r2, [pc, #88]	@ (8015dcc <xTaskRemoveFromEventList+0xb4>)
 8015d72:	6013      	str	r3, [r2, #0]
 8015d74:	693b      	ldr	r3, [r7, #16]
 8015d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015d78:	4613      	mov	r3, r2
 8015d7a:	009b      	lsls	r3, r3, #2
 8015d7c:	4413      	add	r3, r2
 8015d7e:	009b      	lsls	r3, r3, #2
 8015d80:	4a13      	ldr	r2, [pc, #76]	@ (8015dd0 <xTaskRemoveFromEventList+0xb8>)
 8015d82:	441a      	add	r2, r3
 8015d84:	693b      	ldr	r3, [r7, #16]
 8015d86:	3304      	adds	r3, #4
 8015d88:	4619      	mov	r1, r3
 8015d8a:	4610      	mov	r0, r2
 8015d8c:	f7fe fed9 	bl	8014b42 <vListInsertEnd>
 8015d90:	e005      	b.n	8015d9e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015d92:	693b      	ldr	r3, [r7, #16]
 8015d94:	3318      	adds	r3, #24
 8015d96:	4619      	mov	r1, r3
 8015d98:	480e      	ldr	r0, [pc, #56]	@ (8015dd4 <xTaskRemoveFromEventList+0xbc>)
 8015d9a:	f7fe fed2 	bl	8014b42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015d9e:	693b      	ldr	r3, [r7, #16]
 8015da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015da2:	4b0d      	ldr	r3, [pc, #52]	@ (8015dd8 <xTaskRemoveFromEventList+0xc0>)
 8015da4:	681b      	ldr	r3, [r3, #0]
 8015da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015da8:	429a      	cmp	r2, r3
 8015daa:	d905      	bls.n	8015db8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015dac:	2301      	movs	r3, #1
 8015dae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015db0:	4b0a      	ldr	r3, [pc, #40]	@ (8015ddc <xTaskRemoveFromEventList+0xc4>)
 8015db2:	2201      	movs	r2, #1
 8015db4:	601a      	str	r2, [r3, #0]
 8015db6:	e001      	b.n	8015dbc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8015db8:	2300      	movs	r3, #0
 8015dba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8015dbc:	697b      	ldr	r3, [r7, #20]
}
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	3718      	adds	r7, #24
 8015dc2:	46bd      	mov	sp, r7
 8015dc4:	bd80      	pop	{r7, pc}
 8015dc6:	bf00      	nop
 8015dc8:	24002bcc 	.word	0x24002bcc
 8015dcc:	24002bac 	.word	0x24002bac
 8015dd0:	24002aa8 	.word	0x24002aa8
 8015dd4:	24002b64 	.word	0x24002b64
 8015dd8:	24002aa4 	.word	0x24002aa4
 8015ddc:	24002bb8 	.word	0x24002bb8

08015de0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015de0:	b480      	push	{r7}
 8015de2:	b083      	sub	sp, #12
 8015de4:	af00      	add	r7, sp, #0
 8015de6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015de8:	4b06      	ldr	r3, [pc, #24]	@ (8015e04 <vTaskInternalSetTimeOutState+0x24>)
 8015dea:	681a      	ldr	r2, [r3, #0]
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015df0:	4b05      	ldr	r3, [pc, #20]	@ (8015e08 <vTaskInternalSetTimeOutState+0x28>)
 8015df2:	681a      	ldr	r2, [r3, #0]
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	605a      	str	r2, [r3, #4]
}
 8015df8:	bf00      	nop
 8015dfa:	370c      	adds	r7, #12
 8015dfc:	46bd      	mov	sp, r7
 8015dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e02:	4770      	bx	lr
 8015e04:	24002bbc 	.word	0x24002bbc
 8015e08:	24002ba8 	.word	0x24002ba8

08015e0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015e0c:	b580      	push	{r7, lr}
 8015e0e:	b088      	sub	sp, #32
 8015e10:	af00      	add	r7, sp, #0
 8015e12:	6078      	str	r0, [r7, #4]
 8015e14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d10b      	bne.n	8015e34 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8015e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e20:	f383 8811 	msr	BASEPRI, r3
 8015e24:	f3bf 8f6f 	isb	sy
 8015e28:	f3bf 8f4f 	dsb	sy
 8015e2c:	613b      	str	r3, [r7, #16]
}
 8015e2e:	bf00      	nop
 8015e30:	bf00      	nop
 8015e32:	e7fd      	b.n	8015e30 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8015e34:	683b      	ldr	r3, [r7, #0]
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d10b      	bne.n	8015e52 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8015e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e3e:	f383 8811 	msr	BASEPRI, r3
 8015e42:	f3bf 8f6f 	isb	sy
 8015e46:	f3bf 8f4f 	dsb	sy
 8015e4a:	60fb      	str	r3, [r7, #12]
}
 8015e4c:	bf00      	nop
 8015e4e:	bf00      	nop
 8015e50:	e7fd      	b.n	8015e4e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8015e52:	f000 fc79 	bl	8016748 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015e56:	4b1d      	ldr	r3, [pc, #116]	@ (8015ecc <xTaskCheckForTimeOut+0xc0>)
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	685b      	ldr	r3, [r3, #4]
 8015e60:	69ba      	ldr	r2, [r7, #24]
 8015e62:	1ad3      	subs	r3, r2, r3
 8015e64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015e66:	683b      	ldr	r3, [r7, #0]
 8015e68:	681b      	ldr	r3, [r3, #0]
 8015e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e6e:	d102      	bne.n	8015e76 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015e70:	2300      	movs	r3, #0
 8015e72:	61fb      	str	r3, [r7, #28]
 8015e74:	e023      	b.n	8015ebe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	681a      	ldr	r2, [r3, #0]
 8015e7a:	4b15      	ldr	r3, [pc, #84]	@ (8015ed0 <xTaskCheckForTimeOut+0xc4>)
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	429a      	cmp	r2, r3
 8015e80:	d007      	beq.n	8015e92 <xTaskCheckForTimeOut+0x86>
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	685b      	ldr	r3, [r3, #4]
 8015e86:	69ba      	ldr	r2, [r7, #24]
 8015e88:	429a      	cmp	r2, r3
 8015e8a:	d302      	bcc.n	8015e92 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015e8c:	2301      	movs	r3, #1
 8015e8e:	61fb      	str	r3, [r7, #28]
 8015e90:	e015      	b.n	8015ebe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015e92:	683b      	ldr	r3, [r7, #0]
 8015e94:	681b      	ldr	r3, [r3, #0]
 8015e96:	697a      	ldr	r2, [r7, #20]
 8015e98:	429a      	cmp	r2, r3
 8015e9a:	d20b      	bcs.n	8015eb4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015e9c:	683b      	ldr	r3, [r7, #0]
 8015e9e:	681a      	ldr	r2, [r3, #0]
 8015ea0:	697b      	ldr	r3, [r7, #20]
 8015ea2:	1ad2      	subs	r2, r2, r3
 8015ea4:	683b      	ldr	r3, [r7, #0]
 8015ea6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015ea8:	6878      	ldr	r0, [r7, #4]
 8015eaa:	f7ff ff99 	bl	8015de0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015eae:	2300      	movs	r3, #0
 8015eb0:	61fb      	str	r3, [r7, #28]
 8015eb2:	e004      	b.n	8015ebe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8015eb4:	683b      	ldr	r3, [r7, #0]
 8015eb6:	2200      	movs	r2, #0
 8015eb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015eba:	2301      	movs	r3, #1
 8015ebc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015ebe:	f000 fc75 	bl	80167ac <vPortExitCritical>

	return xReturn;
 8015ec2:	69fb      	ldr	r3, [r7, #28]
}
 8015ec4:	4618      	mov	r0, r3
 8015ec6:	3720      	adds	r7, #32
 8015ec8:	46bd      	mov	sp, r7
 8015eca:	bd80      	pop	{r7, pc}
 8015ecc:	24002ba8 	.word	0x24002ba8
 8015ed0:	24002bbc 	.word	0x24002bbc

08015ed4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015ed4:	b480      	push	{r7}
 8015ed6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015ed8:	4b03      	ldr	r3, [pc, #12]	@ (8015ee8 <vTaskMissedYield+0x14>)
 8015eda:	2201      	movs	r2, #1
 8015edc:	601a      	str	r2, [r3, #0]
}
 8015ede:	bf00      	nop
 8015ee0:	46bd      	mov	sp, r7
 8015ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ee6:	4770      	bx	lr
 8015ee8:	24002bb8 	.word	0x24002bb8

08015eec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015eec:	b580      	push	{r7, lr}
 8015eee:	b082      	sub	sp, #8
 8015ef0:	af00      	add	r7, sp, #0
 8015ef2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015ef4:	f000 f852 	bl	8015f9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015ef8:	4b06      	ldr	r3, [pc, #24]	@ (8015f14 <prvIdleTask+0x28>)
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	2b01      	cmp	r3, #1
 8015efe:	d9f9      	bls.n	8015ef4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8015f00:	4b05      	ldr	r3, [pc, #20]	@ (8015f18 <prvIdleTask+0x2c>)
 8015f02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015f06:	601a      	str	r2, [r3, #0]
 8015f08:	f3bf 8f4f 	dsb	sy
 8015f0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8015f10:	e7f0      	b.n	8015ef4 <prvIdleTask+0x8>
 8015f12:	bf00      	nop
 8015f14:	24002aa8 	.word	0x24002aa8
 8015f18:	e000ed04 	.word	0xe000ed04

08015f1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015f1c:	b580      	push	{r7, lr}
 8015f1e:	b082      	sub	sp, #8
 8015f20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015f22:	2300      	movs	r3, #0
 8015f24:	607b      	str	r3, [r7, #4]
 8015f26:	e00c      	b.n	8015f42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015f28:	687a      	ldr	r2, [r7, #4]
 8015f2a:	4613      	mov	r3, r2
 8015f2c:	009b      	lsls	r3, r3, #2
 8015f2e:	4413      	add	r3, r2
 8015f30:	009b      	lsls	r3, r3, #2
 8015f32:	4a12      	ldr	r2, [pc, #72]	@ (8015f7c <prvInitialiseTaskLists+0x60>)
 8015f34:	4413      	add	r3, r2
 8015f36:	4618      	mov	r0, r3
 8015f38:	f7fe fdd6 	bl	8014ae8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	3301      	adds	r3, #1
 8015f40:	607b      	str	r3, [r7, #4]
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	2b06      	cmp	r3, #6
 8015f46:	d9ef      	bls.n	8015f28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015f48:	480d      	ldr	r0, [pc, #52]	@ (8015f80 <prvInitialiseTaskLists+0x64>)
 8015f4a:	f7fe fdcd 	bl	8014ae8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015f4e:	480d      	ldr	r0, [pc, #52]	@ (8015f84 <prvInitialiseTaskLists+0x68>)
 8015f50:	f7fe fdca 	bl	8014ae8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015f54:	480c      	ldr	r0, [pc, #48]	@ (8015f88 <prvInitialiseTaskLists+0x6c>)
 8015f56:	f7fe fdc7 	bl	8014ae8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015f5a:	480c      	ldr	r0, [pc, #48]	@ (8015f8c <prvInitialiseTaskLists+0x70>)
 8015f5c:	f7fe fdc4 	bl	8014ae8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015f60:	480b      	ldr	r0, [pc, #44]	@ (8015f90 <prvInitialiseTaskLists+0x74>)
 8015f62:	f7fe fdc1 	bl	8014ae8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015f66:	4b0b      	ldr	r3, [pc, #44]	@ (8015f94 <prvInitialiseTaskLists+0x78>)
 8015f68:	4a05      	ldr	r2, [pc, #20]	@ (8015f80 <prvInitialiseTaskLists+0x64>)
 8015f6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8015f98 <prvInitialiseTaskLists+0x7c>)
 8015f6e:	4a05      	ldr	r2, [pc, #20]	@ (8015f84 <prvInitialiseTaskLists+0x68>)
 8015f70:	601a      	str	r2, [r3, #0]
}
 8015f72:	bf00      	nop
 8015f74:	3708      	adds	r7, #8
 8015f76:	46bd      	mov	sp, r7
 8015f78:	bd80      	pop	{r7, pc}
 8015f7a:	bf00      	nop
 8015f7c:	24002aa8 	.word	0x24002aa8
 8015f80:	24002b34 	.word	0x24002b34
 8015f84:	24002b48 	.word	0x24002b48
 8015f88:	24002b64 	.word	0x24002b64
 8015f8c:	24002b78 	.word	0x24002b78
 8015f90:	24002b90 	.word	0x24002b90
 8015f94:	24002b5c 	.word	0x24002b5c
 8015f98:	24002b60 	.word	0x24002b60

08015f9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015f9c:	b580      	push	{r7, lr}
 8015f9e:	b082      	sub	sp, #8
 8015fa0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015fa2:	e019      	b.n	8015fd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015fa4:	f000 fbd0 	bl	8016748 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015fa8:	4b10      	ldr	r3, [pc, #64]	@ (8015fec <prvCheckTasksWaitingTermination+0x50>)
 8015faa:	68db      	ldr	r3, [r3, #12]
 8015fac:	68db      	ldr	r3, [r3, #12]
 8015fae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	3304      	adds	r3, #4
 8015fb4:	4618      	mov	r0, r3
 8015fb6:	f7fe fe21 	bl	8014bfc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015fba:	4b0d      	ldr	r3, [pc, #52]	@ (8015ff0 <prvCheckTasksWaitingTermination+0x54>)
 8015fbc:	681b      	ldr	r3, [r3, #0]
 8015fbe:	3b01      	subs	r3, #1
 8015fc0:	4a0b      	ldr	r2, [pc, #44]	@ (8015ff0 <prvCheckTasksWaitingTermination+0x54>)
 8015fc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8015ff4 <prvCheckTasksWaitingTermination+0x58>)
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	3b01      	subs	r3, #1
 8015fca:	4a0a      	ldr	r2, [pc, #40]	@ (8015ff4 <prvCheckTasksWaitingTermination+0x58>)
 8015fcc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8015fce:	f000 fbed 	bl	80167ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015fd2:	6878      	ldr	r0, [r7, #4]
 8015fd4:	f000 f810 	bl	8015ff8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015fd8:	4b06      	ldr	r3, [pc, #24]	@ (8015ff4 <prvCheckTasksWaitingTermination+0x58>)
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d1e1      	bne.n	8015fa4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015fe0:	bf00      	nop
 8015fe2:	bf00      	nop
 8015fe4:	3708      	adds	r7, #8
 8015fe6:	46bd      	mov	sp, r7
 8015fe8:	bd80      	pop	{r7, pc}
 8015fea:	bf00      	nop
 8015fec:	24002b78 	.word	0x24002b78
 8015ff0:	24002ba4 	.word	0x24002ba4
 8015ff4:	24002b8c 	.word	0x24002b8c

08015ff8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015ff8:	b580      	push	{r7, lr}
 8015ffa:	b084      	sub	sp, #16
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8016006:	2b00      	cmp	r3, #0
 8016008:	d108      	bne.n	801601c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801600e:	4618      	mov	r0, r3
 8016010:	f000 fd8a 	bl	8016b28 <vPortFree>
				vPortFree( pxTCB );
 8016014:	6878      	ldr	r0, [r7, #4]
 8016016:	f000 fd87 	bl	8016b28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801601a:	e019      	b.n	8016050 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8016022:	2b01      	cmp	r3, #1
 8016024:	d103      	bne.n	801602e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8016026:	6878      	ldr	r0, [r7, #4]
 8016028:	f000 fd7e 	bl	8016b28 <vPortFree>
	}
 801602c:	e010      	b.n	8016050 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8016034:	2b02      	cmp	r3, #2
 8016036:	d00b      	beq.n	8016050 <prvDeleteTCB+0x58>
	__asm volatile
 8016038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801603c:	f383 8811 	msr	BASEPRI, r3
 8016040:	f3bf 8f6f 	isb	sy
 8016044:	f3bf 8f4f 	dsb	sy
 8016048:	60fb      	str	r3, [r7, #12]
}
 801604a:	bf00      	nop
 801604c:	bf00      	nop
 801604e:	e7fd      	b.n	801604c <prvDeleteTCB+0x54>
	}
 8016050:	bf00      	nop
 8016052:	3710      	adds	r7, #16
 8016054:	46bd      	mov	sp, r7
 8016056:	bd80      	pop	{r7, pc}

08016058 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016058:	b480      	push	{r7}
 801605a:	b083      	sub	sp, #12
 801605c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801605e:	4b0c      	ldr	r3, [pc, #48]	@ (8016090 <prvResetNextTaskUnblockTime+0x38>)
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	2b00      	cmp	r3, #0
 8016066:	d104      	bne.n	8016072 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016068:	4b0a      	ldr	r3, [pc, #40]	@ (8016094 <prvResetNextTaskUnblockTime+0x3c>)
 801606a:	f04f 32ff 	mov.w	r2, #4294967295
 801606e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016070:	e008      	b.n	8016084 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016072:	4b07      	ldr	r3, [pc, #28]	@ (8016090 <prvResetNextTaskUnblockTime+0x38>)
 8016074:	681b      	ldr	r3, [r3, #0]
 8016076:	68db      	ldr	r3, [r3, #12]
 8016078:	68db      	ldr	r3, [r3, #12]
 801607a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	685b      	ldr	r3, [r3, #4]
 8016080:	4a04      	ldr	r2, [pc, #16]	@ (8016094 <prvResetNextTaskUnblockTime+0x3c>)
 8016082:	6013      	str	r3, [r2, #0]
}
 8016084:	bf00      	nop
 8016086:	370c      	adds	r7, #12
 8016088:	46bd      	mov	sp, r7
 801608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801608e:	4770      	bx	lr
 8016090:	24002b5c 	.word	0x24002b5c
 8016094:	24002bc4 	.word	0x24002bc4

08016098 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016098:	b480      	push	{r7}
 801609a:	b083      	sub	sp, #12
 801609c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801609e:	4b0b      	ldr	r3, [pc, #44]	@ (80160cc <xTaskGetSchedulerState+0x34>)
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d102      	bne.n	80160ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80160a6:	2301      	movs	r3, #1
 80160a8:	607b      	str	r3, [r7, #4]
 80160aa:	e008      	b.n	80160be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80160ac:	4b08      	ldr	r3, [pc, #32]	@ (80160d0 <xTaskGetSchedulerState+0x38>)
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d102      	bne.n	80160ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80160b4:	2302      	movs	r3, #2
 80160b6:	607b      	str	r3, [r7, #4]
 80160b8:	e001      	b.n	80160be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80160ba:	2300      	movs	r3, #0
 80160bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80160be:	687b      	ldr	r3, [r7, #4]
	}
 80160c0:	4618      	mov	r0, r3
 80160c2:	370c      	adds	r7, #12
 80160c4:	46bd      	mov	sp, r7
 80160c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160ca:	4770      	bx	lr
 80160cc:	24002bb0 	.word	0x24002bb0
 80160d0:	24002bcc 	.word	0x24002bcc

080160d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80160d4:	b580      	push	{r7, lr}
 80160d6:	b084      	sub	sp, #16
 80160d8:	af00      	add	r7, sp, #0
 80160da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80160e0:	2300      	movs	r3, #0
 80160e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d05e      	beq.n	80161a8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80160ea:	68bb      	ldr	r3, [r7, #8]
 80160ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80160ee:	4b31      	ldr	r3, [pc, #196]	@ (80161b4 <xTaskPriorityInherit+0xe0>)
 80160f0:	681b      	ldr	r3, [r3, #0]
 80160f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80160f4:	429a      	cmp	r2, r3
 80160f6:	d24e      	bcs.n	8016196 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80160f8:	68bb      	ldr	r3, [r7, #8]
 80160fa:	699b      	ldr	r3, [r3, #24]
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	db06      	blt.n	801610e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016100:	4b2c      	ldr	r3, [pc, #176]	@ (80161b4 <xTaskPriorityInherit+0xe0>)
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016106:	f1c3 0207 	rsb	r2, r3, #7
 801610a:	68bb      	ldr	r3, [r7, #8]
 801610c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801610e:	68bb      	ldr	r3, [r7, #8]
 8016110:	6959      	ldr	r1, [r3, #20]
 8016112:	68bb      	ldr	r3, [r7, #8]
 8016114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016116:	4613      	mov	r3, r2
 8016118:	009b      	lsls	r3, r3, #2
 801611a:	4413      	add	r3, r2
 801611c:	009b      	lsls	r3, r3, #2
 801611e:	4a26      	ldr	r2, [pc, #152]	@ (80161b8 <xTaskPriorityInherit+0xe4>)
 8016120:	4413      	add	r3, r2
 8016122:	4299      	cmp	r1, r3
 8016124:	d12f      	bne.n	8016186 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016126:	68bb      	ldr	r3, [r7, #8]
 8016128:	3304      	adds	r3, #4
 801612a:	4618      	mov	r0, r3
 801612c:	f7fe fd66 	bl	8014bfc <uxListRemove>
 8016130:	4603      	mov	r3, r0
 8016132:	2b00      	cmp	r3, #0
 8016134:	d10a      	bne.n	801614c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8016136:	68bb      	ldr	r3, [r7, #8]
 8016138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801613a:	2201      	movs	r2, #1
 801613c:	fa02 f303 	lsl.w	r3, r2, r3
 8016140:	43da      	mvns	r2, r3
 8016142:	4b1e      	ldr	r3, [pc, #120]	@ (80161bc <xTaskPriorityInherit+0xe8>)
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	4013      	ands	r3, r2
 8016148:	4a1c      	ldr	r2, [pc, #112]	@ (80161bc <xTaskPriorityInherit+0xe8>)
 801614a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801614c:	4b19      	ldr	r3, [pc, #100]	@ (80161b4 <xTaskPriorityInherit+0xe0>)
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016152:	68bb      	ldr	r3, [r7, #8]
 8016154:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8016156:	68bb      	ldr	r3, [r7, #8]
 8016158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801615a:	2201      	movs	r2, #1
 801615c:	409a      	lsls	r2, r3
 801615e:	4b17      	ldr	r3, [pc, #92]	@ (80161bc <xTaskPriorityInherit+0xe8>)
 8016160:	681b      	ldr	r3, [r3, #0]
 8016162:	4313      	orrs	r3, r2
 8016164:	4a15      	ldr	r2, [pc, #84]	@ (80161bc <xTaskPriorityInherit+0xe8>)
 8016166:	6013      	str	r3, [r2, #0]
 8016168:	68bb      	ldr	r3, [r7, #8]
 801616a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801616c:	4613      	mov	r3, r2
 801616e:	009b      	lsls	r3, r3, #2
 8016170:	4413      	add	r3, r2
 8016172:	009b      	lsls	r3, r3, #2
 8016174:	4a10      	ldr	r2, [pc, #64]	@ (80161b8 <xTaskPriorityInherit+0xe4>)
 8016176:	441a      	add	r2, r3
 8016178:	68bb      	ldr	r3, [r7, #8]
 801617a:	3304      	adds	r3, #4
 801617c:	4619      	mov	r1, r3
 801617e:	4610      	mov	r0, r2
 8016180:	f7fe fcdf 	bl	8014b42 <vListInsertEnd>
 8016184:	e004      	b.n	8016190 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016186:	4b0b      	ldr	r3, [pc, #44]	@ (80161b4 <xTaskPriorityInherit+0xe0>)
 8016188:	681b      	ldr	r3, [r3, #0]
 801618a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801618c:	68bb      	ldr	r3, [r7, #8]
 801618e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8016190:	2301      	movs	r3, #1
 8016192:	60fb      	str	r3, [r7, #12]
 8016194:	e008      	b.n	80161a8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8016196:	68bb      	ldr	r3, [r7, #8]
 8016198:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801619a:	4b06      	ldr	r3, [pc, #24]	@ (80161b4 <xTaskPriorityInherit+0xe0>)
 801619c:	681b      	ldr	r3, [r3, #0]
 801619e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80161a0:	429a      	cmp	r2, r3
 80161a2:	d201      	bcs.n	80161a8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80161a4:	2301      	movs	r3, #1
 80161a6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80161a8:	68fb      	ldr	r3, [r7, #12]
	}
 80161aa:	4618      	mov	r0, r3
 80161ac:	3710      	adds	r7, #16
 80161ae:	46bd      	mov	sp, r7
 80161b0:	bd80      	pop	{r7, pc}
 80161b2:	bf00      	nop
 80161b4:	24002aa4 	.word	0x24002aa4
 80161b8:	24002aa8 	.word	0x24002aa8
 80161bc:	24002bac 	.word	0x24002bac

080161c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80161c0:	b580      	push	{r7, lr}
 80161c2:	b086      	sub	sp, #24
 80161c4:	af00      	add	r7, sp, #0
 80161c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80161cc:	2300      	movs	r3, #0
 80161ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d070      	beq.n	80162b8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80161d6:	4b3b      	ldr	r3, [pc, #236]	@ (80162c4 <xTaskPriorityDisinherit+0x104>)
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	693a      	ldr	r2, [r7, #16]
 80161dc:	429a      	cmp	r2, r3
 80161de:	d00b      	beq.n	80161f8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80161e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80161e4:	f383 8811 	msr	BASEPRI, r3
 80161e8:	f3bf 8f6f 	isb	sy
 80161ec:	f3bf 8f4f 	dsb	sy
 80161f0:	60fb      	str	r3, [r7, #12]
}
 80161f2:	bf00      	nop
 80161f4:	bf00      	nop
 80161f6:	e7fd      	b.n	80161f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80161f8:	693b      	ldr	r3, [r7, #16]
 80161fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d10b      	bne.n	8016218 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8016200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016204:	f383 8811 	msr	BASEPRI, r3
 8016208:	f3bf 8f6f 	isb	sy
 801620c:	f3bf 8f4f 	dsb	sy
 8016210:	60bb      	str	r3, [r7, #8]
}
 8016212:	bf00      	nop
 8016214:	bf00      	nop
 8016216:	e7fd      	b.n	8016214 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8016218:	693b      	ldr	r3, [r7, #16]
 801621a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801621c:	1e5a      	subs	r2, r3, #1
 801621e:	693b      	ldr	r3, [r7, #16]
 8016220:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016222:	693b      	ldr	r3, [r7, #16]
 8016224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016226:	693b      	ldr	r3, [r7, #16]
 8016228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801622a:	429a      	cmp	r2, r3
 801622c:	d044      	beq.n	80162b8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801622e:	693b      	ldr	r3, [r7, #16]
 8016230:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016232:	2b00      	cmp	r3, #0
 8016234:	d140      	bne.n	80162b8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016236:	693b      	ldr	r3, [r7, #16]
 8016238:	3304      	adds	r3, #4
 801623a:	4618      	mov	r0, r3
 801623c:	f7fe fcde 	bl	8014bfc <uxListRemove>
 8016240:	4603      	mov	r3, r0
 8016242:	2b00      	cmp	r3, #0
 8016244:	d115      	bne.n	8016272 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016246:	693b      	ldr	r3, [r7, #16]
 8016248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801624a:	491f      	ldr	r1, [pc, #124]	@ (80162c8 <xTaskPriorityDisinherit+0x108>)
 801624c:	4613      	mov	r3, r2
 801624e:	009b      	lsls	r3, r3, #2
 8016250:	4413      	add	r3, r2
 8016252:	009b      	lsls	r3, r3, #2
 8016254:	440b      	add	r3, r1
 8016256:	681b      	ldr	r3, [r3, #0]
 8016258:	2b00      	cmp	r3, #0
 801625a:	d10a      	bne.n	8016272 <xTaskPriorityDisinherit+0xb2>
 801625c:	693b      	ldr	r3, [r7, #16]
 801625e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016260:	2201      	movs	r2, #1
 8016262:	fa02 f303 	lsl.w	r3, r2, r3
 8016266:	43da      	mvns	r2, r3
 8016268:	4b18      	ldr	r3, [pc, #96]	@ (80162cc <xTaskPriorityDisinherit+0x10c>)
 801626a:	681b      	ldr	r3, [r3, #0]
 801626c:	4013      	ands	r3, r2
 801626e:	4a17      	ldr	r2, [pc, #92]	@ (80162cc <xTaskPriorityDisinherit+0x10c>)
 8016270:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016272:	693b      	ldr	r3, [r7, #16]
 8016274:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016276:	693b      	ldr	r3, [r7, #16]
 8016278:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801627a:	693b      	ldr	r3, [r7, #16]
 801627c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801627e:	f1c3 0207 	rsb	r2, r3, #7
 8016282:	693b      	ldr	r3, [r7, #16]
 8016284:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016286:	693b      	ldr	r3, [r7, #16]
 8016288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801628a:	2201      	movs	r2, #1
 801628c:	409a      	lsls	r2, r3
 801628e:	4b0f      	ldr	r3, [pc, #60]	@ (80162cc <xTaskPriorityDisinherit+0x10c>)
 8016290:	681b      	ldr	r3, [r3, #0]
 8016292:	4313      	orrs	r3, r2
 8016294:	4a0d      	ldr	r2, [pc, #52]	@ (80162cc <xTaskPriorityDisinherit+0x10c>)
 8016296:	6013      	str	r3, [r2, #0]
 8016298:	693b      	ldr	r3, [r7, #16]
 801629a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801629c:	4613      	mov	r3, r2
 801629e:	009b      	lsls	r3, r3, #2
 80162a0:	4413      	add	r3, r2
 80162a2:	009b      	lsls	r3, r3, #2
 80162a4:	4a08      	ldr	r2, [pc, #32]	@ (80162c8 <xTaskPriorityDisinherit+0x108>)
 80162a6:	441a      	add	r2, r3
 80162a8:	693b      	ldr	r3, [r7, #16]
 80162aa:	3304      	adds	r3, #4
 80162ac:	4619      	mov	r1, r3
 80162ae:	4610      	mov	r0, r2
 80162b0:	f7fe fc47 	bl	8014b42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80162b4:	2301      	movs	r3, #1
 80162b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80162b8:	697b      	ldr	r3, [r7, #20]
	}
 80162ba:	4618      	mov	r0, r3
 80162bc:	3718      	adds	r7, #24
 80162be:	46bd      	mov	sp, r7
 80162c0:	bd80      	pop	{r7, pc}
 80162c2:	bf00      	nop
 80162c4:	24002aa4 	.word	0x24002aa4
 80162c8:	24002aa8 	.word	0x24002aa8
 80162cc:	24002bac 	.word	0x24002bac

080162d0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80162d0:	b580      	push	{r7, lr}
 80162d2:	b088      	sub	sp, #32
 80162d4:	af00      	add	r7, sp, #0
 80162d6:	6078      	str	r0, [r7, #4]
 80162d8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80162de:	2301      	movs	r3, #1
 80162e0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d079      	beq.n	80163dc <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80162e8:	69bb      	ldr	r3, [r7, #24]
 80162ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d10b      	bne.n	8016308 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80162f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80162f4:	f383 8811 	msr	BASEPRI, r3
 80162f8:	f3bf 8f6f 	isb	sy
 80162fc:	f3bf 8f4f 	dsb	sy
 8016300:	60fb      	str	r3, [r7, #12]
}
 8016302:	bf00      	nop
 8016304:	bf00      	nop
 8016306:	e7fd      	b.n	8016304 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8016308:	69bb      	ldr	r3, [r7, #24]
 801630a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801630c:	683a      	ldr	r2, [r7, #0]
 801630e:	429a      	cmp	r2, r3
 8016310:	d902      	bls.n	8016318 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8016312:	683b      	ldr	r3, [r7, #0]
 8016314:	61fb      	str	r3, [r7, #28]
 8016316:	e002      	b.n	801631e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8016318:	69bb      	ldr	r3, [r7, #24]
 801631a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801631c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801631e:	69bb      	ldr	r3, [r7, #24]
 8016320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016322:	69fa      	ldr	r2, [r7, #28]
 8016324:	429a      	cmp	r2, r3
 8016326:	d059      	beq.n	80163dc <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8016328:	69bb      	ldr	r3, [r7, #24]
 801632a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801632c:	697a      	ldr	r2, [r7, #20]
 801632e:	429a      	cmp	r2, r3
 8016330:	d154      	bne.n	80163dc <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8016332:	4b2c      	ldr	r3, [pc, #176]	@ (80163e4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	69ba      	ldr	r2, [r7, #24]
 8016338:	429a      	cmp	r2, r3
 801633a:	d10b      	bne.n	8016354 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 801633c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016340:	f383 8811 	msr	BASEPRI, r3
 8016344:	f3bf 8f6f 	isb	sy
 8016348:	f3bf 8f4f 	dsb	sy
 801634c:	60bb      	str	r3, [r7, #8]
}
 801634e:	bf00      	nop
 8016350:	bf00      	nop
 8016352:	e7fd      	b.n	8016350 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8016354:	69bb      	ldr	r3, [r7, #24]
 8016356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016358:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801635a:	69bb      	ldr	r3, [r7, #24]
 801635c:	69fa      	ldr	r2, [r7, #28]
 801635e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016360:	69bb      	ldr	r3, [r7, #24]
 8016362:	699b      	ldr	r3, [r3, #24]
 8016364:	2b00      	cmp	r3, #0
 8016366:	db04      	blt.n	8016372 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016368:	69fb      	ldr	r3, [r7, #28]
 801636a:	f1c3 0207 	rsb	r2, r3, #7
 801636e:	69bb      	ldr	r3, [r7, #24]
 8016370:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8016372:	69bb      	ldr	r3, [r7, #24]
 8016374:	6959      	ldr	r1, [r3, #20]
 8016376:	693a      	ldr	r2, [r7, #16]
 8016378:	4613      	mov	r3, r2
 801637a:	009b      	lsls	r3, r3, #2
 801637c:	4413      	add	r3, r2
 801637e:	009b      	lsls	r3, r3, #2
 8016380:	4a19      	ldr	r2, [pc, #100]	@ (80163e8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8016382:	4413      	add	r3, r2
 8016384:	4299      	cmp	r1, r3
 8016386:	d129      	bne.n	80163dc <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016388:	69bb      	ldr	r3, [r7, #24]
 801638a:	3304      	adds	r3, #4
 801638c:	4618      	mov	r0, r3
 801638e:	f7fe fc35 	bl	8014bfc <uxListRemove>
 8016392:	4603      	mov	r3, r0
 8016394:	2b00      	cmp	r3, #0
 8016396:	d10a      	bne.n	80163ae <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8016398:	69bb      	ldr	r3, [r7, #24]
 801639a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801639c:	2201      	movs	r2, #1
 801639e:	fa02 f303 	lsl.w	r3, r2, r3
 80163a2:	43da      	mvns	r2, r3
 80163a4:	4b11      	ldr	r3, [pc, #68]	@ (80163ec <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	4013      	ands	r3, r2
 80163aa:	4a10      	ldr	r2, [pc, #64]	@ (80163ec <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80163ac:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80163ae:	69bb      	ldr	r3, [r7, #24]
 80163b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80163b2:	2201      	movs	r2, #1
 80163b4:	409a      	lsls	r2, r3
 80163b6:	4b0d      	ldr	r3, [pc, #52]	@ (80163ec <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	4313      	orrs	r3, r2
 80163bc:	4a0b      	ldr	r2, [pc, #44]	@ (80163ec <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80163be:	6013      	str	r3, [r2, #0]
 80163c0:	69bb      	ldr	r3, [r7, #24]
 80163c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80163c4:	4613      	mov	r3, r2
 80163c6:	009b      	lsls	r3, r3, #2
 80163c8:	4413      	add	r3, r2
 80163ca:	009b      	lsls	r3, r3, #2
 80163cc:	4a06      	ldr	r2, [pc, #24]	@ (80163e8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80163ce:	441a      	add	r2, r3
 80163d0:	69bb      	ldr	r3, [r7, #24]
 80163d2:	3304      	adds	r3, #4
 80163d4:	4619      	mov	r1, r3
 80163d6:	4610      	mov	r0, r2
 80163d8:	f7fe fbb3 	bl	8014b42 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80163dc:	bf00      	nop
 80163de:	3720      	adds	r7, #32
 80163e0:	46bd      	mov	sp, r7
 80163e2:	bd80      	pop	{r7, pc}
 80163e4:	24002aa4 	.word	0x24002aa4
 80163e8:	24002aa8 	.word	0x24002aa8
 80163ec:	24002bac 	.word	0x24002bac

080163f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80163f0:	b480      	push	{r7}
 80163f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80163f4:	4b07      	ldr	r3, [pc, #28]	@ (8016414 <pvTaskIncrementMutexHeldCount+0x24>)
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d004      	beq.n	8016406 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80163fc:	4b05      	ldr	r3, [pc, #20]	@ (8016414 <pvTaskIncrementMutexHeldCount+0x24>)
 80163fe:	681b      	ldr	r3, [r3, #0]
 8016400:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8016402:	3201      	adds	r2, #1
 8016404:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8016406:	4b03      	ldr	r3, [pc, #12]	@ (8016414 <pvTaskIncrementMutexHeldCount+0x24>)
 8016408:	681b      	ldr	r3, [r3, #0]
	}
 801640a:	4618      	mov	r0, r3
 801640c:	46bd      	mov	sp, r7
 801640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016412:	4770      	bx	lr
 8016414:	24002aa4 	.word	0x24002aa4

08016418 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016418:	b580      	push	{r7, lr}
 801641a:	b084      	sub	sp, #16
 801641c:	af00      	add	r7, sp, #0
 801641e:	6078      	str	r0, [r7, #4]
 8016420:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016422:	4b29      	ldr	r3, [pc, #164]	@ (80164c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8016424:	681b      	ldr	r3, [r3, #0]
 8016426:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016428:	4b28      	ldr	r3, [pc, #160]	@ (80164cc <prvAddCurrentTaskToDelayedList+0xb4>)
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	3304      	adds	r3, #4
 801642e:	4618      	mov	r0, r3
 8016430:	f7fe fbe4 	bl	8014bfc <uxListRemove>
 8016434:	4603      	mov	r3, r0
 8016436:	2b00      	cmp	r3, #0
 8016438:	d10b      	bne.n	8016452 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801643a:	4b24      	ldr	r3, [pc, #144]	@ (80164cc <prvAddCurrentTaskToDelayedList+0xb4>)
 801643c:	681b      	ldr	r3, [r3, #0]
 801643e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016440:	2201      	movs	r2, #1
 8016442:	fa02 f303 	lsl.w	r3, r2, r3
 8016446:	43da      	mvns	r2, r3
 8016448:	4b21      	ldr	r3, [pc, #132]	@ (80164d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	4013      	ands	r3, r2
 801644e:	4a20      	ldr	r2, [pc, #128]	@ (80164d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8016450:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016458:	d10a      	bne.n	8016470 <prvAddCurrentTaskToDelayedList+0x58>
 801645a:	683b      	ldr	r3, [r7, #0]
 801645c:	2b00      	cmp	r3, #0
 801645e:	d007      	beq.n	8016470 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016460:	4b1a      	ldr	r3, [pc, #104]	@ (80164cc <prvAddCurrentTaskToDelayedList+0xb4>)
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	3304      	adds	r3, #4
 8016466:	4619      	mov	r1, r3
 8016468:	481a      	ldr	r0, [pc, #104]	@ (80164d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 801646a:	f7fe fb6a 	bl	8014b42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801646e:	e026      	b.n	80164be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016470:	68fa      	ldr	r2, [r7, #12]
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	4413      	add	r3, r2
 8016476:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016478:	4b14      	ldr	r3, [pc, #80]	@ (80164cc <prvAddCurrentTaskToDelayedList+0xb4>)
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	68ba      	ldr	r2, [r7, #8]
 801647e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016480:	68ba      	ldr	r2, [r7, #8]
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	429a      	cmp	r2, r3
 8016486:	d209      	bcs.n	801649c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016488:	4b13      	ldr	r3, [pc, #76]	@ (80164d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 801648a:	681a      	ldr	r2, [r3, #0]
 801648c:	4b0f      	ldr	r3, [pc, #60]	@ (80164cc <prvAddCurrentTaskToDelayedList+0xb4>)
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	3304      	adds	r3, #4
 8016492:	4619      	mov	r1, r3
 8016494:	4610      	mov	r0, r2
 8016496:	f7fe fb78 	bl	8014b8a <vListInsert>
}
 801649a:	e010      	b.n	80164be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801649c:	4b0f      	ldr	r3, [pc, #60]	@ (80164dc <prvAddCurrentTaskToDelayedList+0xc4>)
 801649e:	681a      	ldr	r2, [r3, #0]
 80164a0:	4b0a      	ldr	r3, [pc, #40]	@ (80164cc <prvAddCurrentTaskToDelayedList+0xb4>)
 80164a2:	681b      	ldr	r3, [r3, #0]
 80164a4:	3304      	adds	r3, #4
 80164a6:	4619      	mov	r1, r3
 80164a8:	4610      	mov	r0, r2
 80164aa:	f7fe fb6e 	bl	8014b8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80164ae:	4b0c      	ldr	r3, [pc, #48]	@ (80164e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80164b0:	681b      	ldr	r3, [r3, #0]
 80164b2:	68ba      	ldr	r2, [r7, #8]
 80164b4:	429a      	cmp	r2, r3
 80164b6:	d202      	bcs.n	80164be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80164b8:	4a09      	ldr	r2, [pc, #36]	@ (80164e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80164ba:	68bb      	ldr	r3, [r7, #8]
 80164bc:	6013      	str	r3, [r2, #0]
}
 80164be:	bf00      	nop
 80164c0:	3710      	adds	r7, #16
 80164c2:	46bd      	mov	sp, r7
 80164c4:	bd80      	pop	{r7, pc}
 80164c6:	bf00      	nop
 80164c8:	24002ba8 	.word	0x24002ba8
 80164cc:	24002aa4 	.word	0x24002aa4
 80164d0:	24002bac 	.word	0x24002bac
 80164d4:	24002b90 	.word	0x24002b90
 80164d8:	24002b60 	.word	0x24002b60
 80164dc:	24002b5c 	.word	0x24002b5c
 80164e0:	24002bc4 	.word	0x24002bc4

080164e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80164e4:	b480      	push	{r7}
 80164e6:	b085      	sub	sp, #20
 80164e8:	af00      	add	r7, sp, #0
 80164ea:	60f8      	str	r0, [r7, #12]
 80164ec:	60b9      	str	r1, [r7, #8]
 80164ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	3b04      	subs	r3, #4
 80164f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80164f6:	68fb      	ldr	r3, [r7, #12]
 80164f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80164fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80164fe:	68fb      	ldr	r3, [r7, #12]
 8016500:	3b04      	subs	r3, #4
 8016502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016504:	68bb      	ldr	r3, [r7, #8]
 8016506:	f023 0201 	bic.w	r2, r3, #1
 801650a:	68fb      	ldr	r3, [r7, #12]
 801650c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801650e:	68fb      	ldr	r3, [r7, #12]
 8016510:	3b04      	subs	r3, #4
 8016512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016514:	4a0c      	ldr	r2, [pc, #48]	@ (8016548 <pxPortInitialiseStack+0x64>)
 8016516:	68fb      	ldr	r3, [r7, #12]
 8016518:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801651a:	68fb      	ldr	r3, [r7, #12]
 801651c:	3b14      	subs	r3, #20
 801651e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016520:	687a      	ldr	r2, [r7, #4]
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016526:	68fb      	ldr	r3, [r7, #12]
 8016528:	3b04      	subs	r3, #4
 801652a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	f06f 0202 	mvn.w	r2, #2
 8016532:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016534:	68fb      	ldr	r3, [r7, #12]
 8016536:	3b20      	subs	r3, #32
 8016538:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801653a:	68fb      	ldr	r3, [r7, #12]
}
 801653c:	4618      	mov	r0, r3
 801653e:	3714      	adds	r7, #20
 8016540:	46bd      	mov	sp, r7
 8016542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016546:	4770      	bx	lr
 8016548:	0801654d 	.word	0x0801654d

0801654c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801654c:	b480      	push	{r7}
 801654e:	b085      	sub	sp, #20
 8016550:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8016552:	2300      	movs	r3, #0
 8016554:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8016556:	4b13      	ldr	r3, [pc, #76]	@ (80165a4 <prvTaskExitError+0x58>)
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801655e:	d00b      	beq.n	8016578 <prvTaskExitError+0x2c>
	__asm volatile
 8016560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016564:	f383 8811 	msr	BASEPRI, r3
 8016568:	f3bf 8f6f 	isb	sy
 801656c:	f3bf 8f4f 	dsb	sy
 8016570:	60fb      	str	r3, [r7, #12]
}
 8016572:	bf00      	nop
 8016574:	bf00      	nop
 8016576:	e7fd      	b.n	8016574 <prvTaskExitError+0x28>
	__asm volatile
 8016578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801657c:	f383 8811 	msr	BASEPRI, r3
 8016580:	f3bf 8f6f 	isb	sy
 8016584:	f3bf 8f4f 	dsb	sy
 8016588:	60bb      	str	r3, [r7, #8]
}
 801658a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801658c:	bf00      	nop
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	2b00      	cmp	r3, #0
 8016592:	d0fc      	beq.n	801658e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8016594:	bf00      	nop
 8016596:	bf00      	nop
 8016598:	3714      	adds	r7, #20
 801659a:	46bd      	mov	sp, r7
 801659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165a0:	4770      	bx	lr
 80165a2:	bf00      	nop
 80165a4:	240000c4 	.word	0x240000c4
	...

080165b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80165b0:	4b07      	ldr	r3, [pc, #28]	@ (80165d0 <pxCurrentTCBConst2>)
 80165b2:	6819      	ldr	r1, [r3, #0]
 80165b4:	6808      	ldr	r0, [r1, #0]
 80165b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165ba:	f380 8809 	msr	PSP, r0
 80165be:	f3bf 8f6f 	isb	sy
 80165c2:	f04f 0000 	mov.w	r0, #0
 80165c6:	f380 8811 	msr	BASEPRI, r0
 80165ca:	4770      	bx	lr
 80165cc:	f3af 8000 	nop.w

080165d0 <pxCurrentTCBConst2>:
 80165d0:	24002aa4 	.word	0x24002aa4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80165d4:	bf00      	nop
 80165d6:	bf00      	nop

080165d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80165d8:	4808      	ldr	r0, [pc, #32]	@ (80165fc <prvPortStartFirstTask+0x24>)
 80165da:	6800      	ldr	r0, [r0, #0]
 80165dc:	6800      	ldr	r0, [r0, #0]
 80165de:	f380 8808 	msr	MSP, r0
 80165e2:	f04f 0000 	mov.w	r0, #0
 80165e6:	f380 8814 	msr	CONTROL, r0
 80165ea:	b662      	cpsie	i
 80165ec:	b661      	cpsie	f
 80165ee:	f3bf 8f4f 	dsb	sy
 80165f2:	f3bf 8f6f 	isb	sy
 80165f6:	df00      	svc	0
 80165f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80165fa:	bf00      	nop
 80165fc:	e000ed08 	.word	0xe000ed08

08016600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016600:	b580      	push	{r7, lr}
 8016602:	b086      	sub	sp, #24
 8016604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016606:	4b47      	ldr	r3, [pc, #284]	@ (8016724 <xPortStartScheduler+0x124>)
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	4a47      	ldr	r2, [pc, #284]	@ (8016728 <xPortStartScheduler+0x128>)
 801660c:	4293      	cmp	r3, r2
 801660e:	d10b      	bne.n	8016628 <xPortStartScheduler+0x28>
	__asm volatile
 8016610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016614:	f383 8811 	msr	BASEPRI, r3
 8016618:	f3bf 8f6f 	isb	sy
 801661c:	f3bf 8f4f 	dsb	sy
 8016620:	613b      	str	r3, [r7, #16]
}
 8016622:	bf00      	nop
 8016624:	bf00      	nop
 8016626:	e7fd      	b.n	8016624 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016628:	4b3e      	ldr	r3, [pc, #248]	@ (8016724 <xPortStartScheduler+0x124>)
 801662a:	681b      	ldr	r3, [r3, #0]
 801662c:	4a3f      	ldr	r2, [pc, #252]	@ (801672c <xPortStartScheduler+0x12c>)
 801662e:	4293      	cmp	r3, r2
 8016630:	d10b      	bne.n	801664a <xPortStartScheduler+0x4a>
	__asm volatile
 8016632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016636:	f383 8811 	msr	BASEPRI, r3
 801663a:	f3bf 8f6f 	isb	sy
 801663e:	f3bf 8f4f 	dsb	sy
 8016642:	60fb      	str	r3, [r7, #12]
}
 8016644:	bf00      	nop
 8016646:	bf00      	nop
 8016648:	e7fd      	b.n	8016646 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801664a:	4b39      	ldr	r3, [pc, #228]	@ (8016730 <xPortStartScheduler+0x130>)
 801664c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801664e:	697b      	ldr	r3, [r7, #20]
 8016650:	781b      	ldrb	r3, [r3, #0]
 8016652:	b2db      	uxtb	r3, r3
 8016654:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016656:	697b      	ldr	r3, [r7, #20]
 8016658:	22ff      	movs	r2, #255	@ 0xff
 801665a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801665c:	697b      	ldr	r3, [r7, #20]
 801665e:	781b      	ldrb	r3, [r3, #0]
 8016660:	b2db      	uxtb	r3, r3
 8016662:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016664:	78fb      	ldrb	r3, [r7, #3]
 8016666:	b2db      	uxtb	r3, r3
 8016668:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801666c:	b2da      	uxtb	r2, r3
 801666e:	4b31      	ldr	r3, [pc, #196]	@ (8016734 <xPortStartScheduler+0x134>)
 8016670:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8016672:	4b31      	ldr	r3, [pc, #196]	@ (8016738 <xPortStartScheduler+0x138>)
 8016674:	2207      	movs	r2, #7
 8016676:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016678:	e009      	b.n	801668e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801667a:	4b2f      	ldr	r3, [pc, #188]	@ (8016738 <xPortStartScheduler+0x138>)
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	3b01      	subs	r3, #1
 8016680:	4a2d      	ldr	r2, [pc, #180]	@ (8016738 <xPortStartScheduler+0x138>)
 8016682:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016684:	78fb      	ldrb	r3, [r7, #3]
 8016686:	b2db      	uxtb	r3, r3
 8016688:	005b      	lsls	r3, r3, #1
 801668a:	b2db      	uxtb	r3, r3
 801668c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801668e:	78fb      	ldrb	r3, [r7, #3]
 8016690:	b2db      	uxtb	r3, r3
 8016692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016696:	2b80      	cmp	r3, #128	@ 0x80
 8016698:	d0ef      	beq.n	801667a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801669a:	4b27      	ldr	r3, [pc, #156]	@ (8016738 <xPortStartScheduler+0x138>)
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	f1c3 0307 	rsb	r3, r3, #7
 80166a2:	2b04      	cmp	r3, #4
 80166a4:	d00b      	beq.n	80166be <xPortStartScheduler+0xbe>
	__asm volatile
 80166a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80166aa:	f383 8811 	msr	BASEPRI, r3
 80166ae:	f3bf 8f6f 	isb	sy
 80166b2:	f3bf 8f4f 	dsb	sy
 80166b6:	60bb      	str	r3, [r7, #8]
}
 80166b8:	bf00      	nop
 80166ba:	bf00      	nop
 80166bc:	e7fd      	b.n	80166ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80166be:	4b1e      	ldr	r3, [pc, #120]	@ (8016738 <xPortStartScheduler+0x138>)
 80166c0:	681b      	ldr	r3, [r3, #0]
 80166c2:	021b      	lsls	r3, r3, #8
 80166c4:	4a1c      	ldr	r2, [pc, #112]	@ (8016738 <xPortStartScheduler+0x138>)
 80166c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80166c8:	4b1b      	ldr	r3, [pc, #108]	@ (8016738 <xPortStartScheduler+0x138>)
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80166d0:	4a19      	ldr	r2, [pc, #100]	@ (8016738 <xPortStartScheduler+0x138>)
 80166d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	b2da      	uxtb	r2, r3
 80166d8:	697b      	ldr	r3, [r7, #20]
 80166da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80166dc:	4b17      	ldr	r3, [pc, #92]	@ (801673c <xPortStartScheduler+0x13c>)
 80166de:	681b      	ldr	r3, [r3, #0]
 80166e0:	4a16      	ldr	r2, [pc, #88]	@ (801673c <xPortStartScheduler+0x13c>)
 80166e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80166e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80166e8:	4b14      	ldr	r3, [pc, #80]	@ (801673c <xPortStartScheduler+0x13c>)
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	4a13      	ldr	r2, [pc, #76]	@ (801673c <xPortStartScheduler+0x13c>)
 80166ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80166f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80166f4:	f000 f8da 	bl	80168ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80166f8:	4b11      	ldr	r3, [pc, #68]	@ (8016740 <xPortStartScheduler+0x140>)
 80166fa:	2200      	movs	r2, #0
 80166fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80166fe:	f000 f8f9 	bl	80168f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016702:	4b10      	ldr	r3, [pc, #64]	@ (8016744 <xPortStartScheduler+0x144>)
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	4a0f      	ldr	r2, [pc, #60]	@ (8016744 <xPortStartScheduler+0x144>)
 8016708:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801670c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801670e:	f7ff ff63 	bl	80165d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016712:	f7ff fa7f 	bl	8015c14 <vTaskSwitchContext>
	prvTaskExitError();
 8016716:	f7ff ff19 	bl	801654c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801671a:	2300      	movs	r3, #0
}
 801671c:	4618      	mov	r0, r3
 801671e:	3718      	adds	r7, #24
 8016720:	46bd      	mov	sp, r7
 8016722:	bd80      	pop	{r7, pc}
 8016724:	e000ed00 	.word	0xe000ed00
 8016728:	410fc271 	.word	0x410fc271
 801672c:	410fc270 	.word	0x410fc270
 8016730:	e000e400 	.word	0xe000e400
 8016734:	24002bd0 	.word	0x24002bd0
 8016738:	24002bd4 	.word	0x24002bd4
 801673c:	e000ed20 	.word	0xe000ed20
 8016740:	240000c4 	.word	0x240000c4
 8016744:	e000ef34 	.word	0xe000ef34

08016748 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016748:	b480      	push	{r7}
 801674a:	b083      	sub	sp, #12
 801674c:	af00      	add	r7, sp, #0
	__asm volatile
 801674e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016752:	f383 8811 	msr	BASEPRI, r3
 8016756:	f3bf 8f6f 	isb	sy
 801675a:	f3bf 8f4f 	dsb	sy
 801675e:	607b      	str	r3, [r7, #4]
}
 8016760:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016762:	4b10      	ldr	r3, [pc, #64]	@ (80167a4 <vPortEnterCritical+0x5c>)
 8016764:	681b      	ldr	r3, [r3, #0]
 8016766:	3301      	adds	r3, #1
 8016768:	4a0e      	ldr	r2, [pc, #56]	@ (80167a4 <vPortEnterCritical+0x5c>)
 801676a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801676c:	4b0d      	ldr	r3, [pc, #52]	@ (80167a4 <vPortEnterCritical+0x5c>)
 801676e:	681b      	ldr	r3, [r3, #0]
 8016770:	2b01      	cmp	r3, #1
 8016772:	d110      	bne.n	8016796 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016774:	4b0c      	ldr	r3, [pc, #48]	@ (80167a8 <vPortEnterCritical+0x60>)
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	b2db      	uxtb	r3, r3
 801677a:	2b00      	cmp	r3, #0
 801677c:	d00b      	beq.n	8016796 <vPortEnterCritical+0x4e>
	__asm volatile
 801677e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016782:	f383 8811 	msr	BASEPRI, r3
 8016786:	f3bf 8f6f 	isb	sy
 801678a:	f3bf 8f4f 	dsb	sy
 801678e:	603b      	str	r3, [r7, #0]
}
 8016790:	bf00      	nop
 8016792:	bf00      	nop
 8016794:	e7fd      	b.n	8016792 <vPortEnterCritical+0x4a>
	}
}
 8016796:	bf00      	nop
 8016798:	370c      	adds	r7, #12
 801679a:	46bd      	mov	sp, r7
 801679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167a0:	4770      	bx	lr
 80167a2:	bf00      	nop
 80167a4:	240000c4 	.word	0x240000c4
 80167a8:	e000ed04 	.word	0xe000ed04

080167ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80167ac:	b480      	push	{r7}
 80167ae:	b083      	sub	sp, #12
 80167b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80167b2:	4b12      	ldr	r3, [pc, #72]	@ (80167fc <vPortExitCritical+0x50>)
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d10b      	bne.n	80167d2 <vPortExitCritical+0x26>
	__asm volatile
 80167ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80167be:	f383 8811 	msr	BASEPRI, r3
 80167c2:	f3bf 8f6f 	isb	sy
 80167c6:	f3bf 8f4f 	dsb	sy
 80167ca:	607b      	str	r3, [r7, #4]
}
 80167cc:	bf00      	nop
 80167ce:	bf00      	nop
 80167d0:	e7fd      	b.n	80167ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80167d2:	4b0a      	ldr	r3, [pc, #40]	@ (80167fc <vPortExitCritical+0x50>)
 80167d4:	681b      	ldr	r3, [r3, #0]
 80167d6:	3b01      	subs	r3, #1
 80167d8:	4a08      	ldr	r2, [pc, #32]	@ (80167fc <vPortExitCritical+0x50>)
 80167da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80167dc:	4b07      	ldr	r3, [pc, #28]	@ (80167fc <vPortExitCritical+0x50>)
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	d105      	bne.n	80167f0 <vPortExitCritical+0x44>
 80167e4:	2300      	movs	r3, #0
 80167e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80167e8:	683b      	ldr	r3, [r7, #0]
 80167ea:	f383 8811 	msr	BASEPRI, r3
}
 80167ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80167f0:	bf00      	nop
 80167f2:	370c      	adds	r7, #12
 80167f4:	46bd      	mov	sp, r7
 80167f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167fa:	4770      	bx	lr
 80167fc:	240000c4 	.word	0x240000c4

08016800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016800:	f3ef 8009 	mrs	r0, PSP
 8016804:	f3bf 8f6f 	isb	sy
 8016808:	4b15      	ldr	r3, [pc, #84]	@ (8016860 <pxCurrentTCBConst>)
 801680a:	681a      	ldr	r2, [r3, #0]
 801680c:	f01e 0f10 	tst.w	lr, #16
 8016810:	bf08      	it	eq
 8016812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801681a:	6010      	str	r0, [r2, #0]
 801681c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016820:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8016824:	f380 8811 	msr	BASEPRI, r0
 8016828:	f3bf 8f4f 	dsb	sy
 801682c:	f3bf 8f6f 	isb	sy
 8016830:	f7ff f9f0 	bl	8015c14 <vTaskSwitchContext>
 8016834:	f04f 0000 	mov.w	r0, #0
 8016838:	f380 8811 	msr	BASEPRI, r0
 801683c:	bc09      	pop	{r0, r3}
 801683e:	6819      	ldr	r1, [r3, #0]
 8016840:	6808      	ldr	r0, [r1, #0]
 8016842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016846:	f01e 0f10 	tst.w	lr, #16
 801684a:	bf08      	it	eq
 801684c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016850:	f380 8809 	msr	PSP, r0
 8016854:	f3bf 8f6f 	isb	sy
 8016858:	4770      	bx	lr
 801685a:	bf00      	nop
 801685c:	f3af 8000 	nop.w

08016860 <pxCurrentTCBConst>:
 8016860:	24002aa4 	.word	0x24002aa4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016864:	bf00      	nop
 8016866:	bf00      	nop

08016868 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016868:	b580      	push	{r7, lr}
 801686a:	b082      	sub	sp, #8
 801686c:	af00      	add	r7, sp, #0
	__asm volatile
 801686e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016872:	f383 8811 	msr	BASEPRI, r3
 8016876:	f3bf 8f6f 	isb	sy
 801687a:	f3bf 8f4f 	dsb	sy
 801687e:	607b      	str	r3, [r7, #4]
}
 8016880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016882:	f7ff f90d 	bl	8015aa0 <xTaskIncrementTick>
 8016886:	4603      	mov	r3, r0
 8016888:	2b00      	cmp	r3, #0
 801688a:	d003      	beq.n	8016894 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801688c:	4b06      	ldr	r3, [pc, #24]	@ (80168a8 <SysTick_Handler+0x40>)
 801688e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016892:	601a      	str	r2, [r3, #0]
 8016894:	2300      	movs	r3, #0
 8016896:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016898:	683b      	ldr	r3, [r7, #0]
 801689a:	f383 8811 	msr	BASEPRI, r3
}
 801689e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80168a0:	bf00      	nop
 80168a2:	3708      	adds	r7, #8
 80168a4:	46bd      	mov	sp, r7
 80168a6:	bd80      	pop	{r7, pc}
 80168a8:	e000ed04 	.word	0xe000ed04

080168ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80168ac:	b480      	push	{r7}
 80168ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80168b0:	4b0b      	ldr	r3, [pc, #44]	@ (80168e0 <vPortSetupTimerInterrupt+0x34>)
 80168b2:	2200      	movs	r2, #0
 80168b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80168b6:	4b0b      	ldr	r3, [pc, #44]	@ (80168e4 <vPortSetupTimerInterrupt+0x38>)
 80168b8:	2200      	movs	r2, #0
 80168ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80168bc:	4b0a      	ldr	r3, [pc, #40]	@ (80168e8 <vPortSetupTimerInterrupt+0x3c>)
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	4a0a      	ldr	r2, [pc, #40]	@ (80168ec <vPortSetupTimerInterrupt+0x40>)
 80168c2:	fba2 2303 	umull	r2, r3, r2, r3
 80168c6:	099b      	lsrs	r3, r3, #6
 80168c8:	4a09      	ldr	r2, [pc, #36]	@ (80168f0 <vPortSetupTimerInterrupt+0x44>)
 80168ca:	3b01      	subs	r3, #1
 80168cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80168ce:	4b04      	ldr	r3, [pc, #16]	@ (80168e0 <vPortSetupTimerInterrupt+0x34>)
 80168d0:	2207      	movs	r2, #7
 80168d2:	601a      	str	r2, [r3, #0]
}
 80168d4:	bf00      	nop
 80168d6:	46bd      	mov	sp, r7
 80168d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168dc:	4770      	bx	lr
 80168de:	bf00      	nop
 80168e0:	e000e010 	.word	0xe000e010
 80168e4:	e000e018 	.word	0xe000e018
 80168e8:	24000000 	.word	0x24000000
 80168ec:	10624dd3 	.word	0x10624dd3
 80168f0:	e000e014 	.word	0xe000e014

080168f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80168f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8016904 <vPortEnableVFP+0x10>
 80168f8:	6801      	ldr	r1, [r0, #0]
 80168fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80168fe:	6001      	str	r1, [r0, #0]
 8016900:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016902:	bf00      	nop
 8016904:	e000ed88 	.word	0xe000ed88

08016908 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016908:	b480      	push	{r7}
 801690a:	b085      	sub	sp, #20
 801690c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801690e:	f3ef 8305 	mrs	r3, IPSR
 8016912:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	2b0f      	cmp	r3, #15
 8016918:	d915      	bls.n	8016946 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801691a:	4a18      	ldr	r2, [pc, #96]	@ (801697c <vPortValidateInterruptPriority+0x74>)
 801691c:	68fb      	ldr	r3, [r7, #12]
 801691e:	4413      	add	r3, r2
 8016920:	781b      	ldrb	r3, [r3, #0]
 8016922:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016924:	4b16      	ldr	r3, [pc, #88]	@ (8016980 <vPortValidateInterruptPriority+0x78>)
 8016926:	781b      	ldrb	r3, [r3, #0]
 8016928:	7afa      	ldrb	r2, [r7, #11]
 801692a:	429a      	cmp	r2, r3
 801692c:	d20b      	bcs.n	8016946 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801692e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016932:	f383 8811 	msr	BASEPRI, r3
 8016936:	f3bf 8f6f 	isb	sy
 801693a:	f3bf 8f4f 	dsb	sy
 801693e:	607b      	str	r3, [r7, #4]
}
 8016940:	bf00      	nop
 8016942:	bf00      	nop
 8016944:	e7fd      	b.n	8016942 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016946:	4b0f      	ldr	r3, [pc, #60]	@ (8016984 <vPortValidateInterruptPriority+0x7c>)
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801694e:	4b0e      	ldr	r3, [pc, #56]	@ (8016988 <vPortValidateInterruptPriority+0x80>)
 8016950:	681b      	ldr	r3, [r3, #0]
 8016952:	429a      	cmp	r2, r3
 8016954:	d90b      	bls.n	801696e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8016956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801695a:	f383 8811 	msr	BASEPRI, r3
 801695e:	f3bf 8f6f 	isb	sy
 8016962:	f3bf 8f4f 	dsb	sy
 8016966:	603b      	str	r3, [r7, #0]
}
 8016968:	bf00      	nop
 801696a:	bf00      	nop
 801696c:	e7fd      	b.n	801696a <vPortValidateInterruptPriority+0x62>
	}
 801696e:	bf00      	nop
 8016970:	3714      	adds	r7, #20
 8016972:	46bd      	mov	sp, r7
 8016974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016978:	4770      	bx	lr
 801697a:	bf00      	nop
 801697c:	e000e3f0 	.word	0xe000e3f0
 8016980:	24002bd0 	.word	0x24002bd0
 8016984:	e000ed0c 	.word	0xe000ed0c
 8016988:	24002bd4 	.word	0x24002bd4

0801698c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801698c:	b580      	push	{r7, lr}
 801698e:	b08a      	sub	sp, #40	@ 0x28
 8016990:	af00      	add	r7, sp, #0
 8016992:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016994:	2300      	movs	r3, #0
 8016996:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016998:	f7fe ffd6 	bl	8015948 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801699c:	4b5c      	ldr	r3, [pc, #368]	@ (8016b10 <pvPortMalloc+0x184>)
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d101      	bne.n	80169a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80169a4:	f000 f924 	bl	8016bf0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80169a8:	4b5a      	ldr	r3, [pc, #360]	@ (8016b14 <pvPortMalloc+0x188>)
 80169aa:	681a      	ldr	r2, [r3, #0]
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	4013      	ands	r3, r2
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	f040 8095 	bne.w	8016ae0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d01e      	beq.n	80169fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80169bc:	2208      	movs	r2, #8
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	4413      	add	r3, r2
 80169c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	f003 0307 	and.w	r3, r3, #7
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d015      	beq.n	80169fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	f023 0307 	bic.w	r3, r3, #7
 80169d4:	3308      	adds	r3, #8
 80169d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	f003 0307 	and.w	r3, r3, #7
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d00b      	beq.n	80169fa <pvPortMalloc+0x6e>
	__asm volatile
 80169e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80169e6:	f383 8811 	msr	BASEPRI, r3
 80169ea:	f3bf 8f6f 	isb	sy
 80169ee:	f3bf 8f4f 	dsb	sy
 80169f2:	617b      	str	r3, [r7, #20]
}
 80169f4:	bf00      	nop
 80169f6:	bf00      	nop
 80169f8:	e7fd      	b.n	80169f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	d06f      	beq.n	8016ae0 <pvPortMalloc+0x154>
 8016a00:	4b45      	ldr	r3, [pc, #276]	@ (8016b18 <pvPortMalloc+0x18c>)
 8016a02:	681b      	ldr	r3, [r3, #0]
 8016a04:	687a      	ldr	r2, [r7, #4]
 8016a06:	429a      	cmp	r2, r3
 8016a08:	d86a      	bhi.n	8016ae0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016a0a:	4b44      	ldr	r3, [pc, #272]	@ (8016b1c <pvPortMalloc+0x190>)
 8016a0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016a0e:	4b43      	ldr	r3, [pc, #268]	@ (8016b1c <pvPortMalloc+0x190>)
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016a14:	e004      	b.n	8016a20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8016a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a22:	685b      	ldr	r3, [r3, #4]
 8016a24:	687a      	ldr	r2, [r7, #4]
 8016a26:	429a      	cmp	r2, r3
 8016a28:	d903      	bls.n	8016a32 <pvPortMalloc+0xa6>
 8016a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d1f1      	bne.n	8016a16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016a32:	4b37      	ldr	r3, [pc, #220]	@ (8016b10 <pvPortMalloc+0x184>)
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016a38:	429a      	cmp	r2, r3
 8016a3a:	d051      	beq.n	8016ae0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016a3c:	6a3b      	ldr	r3, [r7, #32]
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	2208      	movs	r2, #8
 8016a42:	4413      	add	r3, r2
 8016a44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a48:	681a      	ldr	r2, [r3, #0]
 8016a4a:	6a3b      	ldr	r3, [r7, #32]
 8016a4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a50:	685a      	ldr	r2, [r3, #4]
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	1ad2      	subs	r2, r2, r3
 8016a56:	2308      	movs	r3, #8
 8016a58:	005b      	lsls	r3, r3, #1
 8016a5a:	429a      	cmp	r2, r3
 8016a5c:	d920      	bls.n	8016aa0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016a5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	4413      	add	r3, r2
 8016a64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016a66:	69bb      	ldr	r3, [r7, #24]
 8016a68:	f003 0307 	and.w	r3, r3, #7
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d00b      	beq.n	8016a88 <pvPortMalloc+0xfc>
	__asm volatile
 8016a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a74:	f383 8811 	msr	BASEPRI, r3
 8016a78:	f3bf 8f6f 	isb	sy
 8016a7c:	f3bf 8f4f 	dsb	sy
 8016a80:	613b      	str	r3, [r7, #16]
}
 8016a82:	bf00      	nop
 8016a84:	bf00      	nop
 8016a86:	e7fd      	b.n	8016a84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a8a:	685a      	ldr	r2, [r3, #4]
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	1ad2      	subs	r2, r2, r3
 8016a90:	69bb      	ldr	r3, [r7, #24]
 8016a92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a96:	687a      	ldr	r2, [r7, #4]
 8016a98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016a9a:	69b8      	ldr	r0, [r7, #24]
 8016a9c:	f000 f90a 	bl	8016cb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8016b18 <pvPortMalloc+0x18c>)
 8016aa2:	681a      	ldr	r2, [r3, #0]
 8016aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016aa6:	685b      	ldr	r3, [r3, #4]
 8016aa8:	1ad3      	subs	r3, r2, r3
 8016aaa:	4a1b      	ldr	r2, [pc, #108]	@ (8016b18 <pvPortMalloc+0x18c>)
 8016aac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016aae:	4b1a      	ldr	r3, [pc, #104]	@ (8016b18 <pvPortMalloc+0x18c>)
 8016ab0:	681a      	ldr	r2, [r3, #0]
 8016ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8016b20 <pvPortMalloc+0x194>)
 8016ab4:	681b      	ldr	r3, [r3, #0]
 8016ab6:	429a      	cmp	r2, r3
 8016ab8:	d203      	bcs.n	8016ac2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016aba:	4b17      	ldr	r3, [pc, #92]	@ (8016b18 <pvPortMalloc+0x18c>)
 8016abc:	681b      	ldr	r3, [r3, #0]
 8016abe:	4a18      	ldr	r2, [pc, #96]	@ (8016b20 <pvPortMalloc+0x194>)
 8016ac0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ac4:	685a      	ldr	r2, [r3, #4]
 8016ac6:	4b13      	ldr	r3, [pc, #76]	@ (8016b14 <pvPortMalloc+0x188>)
 8016ac8:	681b      	ldr	r3, [r3, #0]
 8016aca:	431a      	orrs	r2, r3
 8016acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ace:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ad2:	2200      	movs	r2, #0
 8016ad4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8016ad6:	4b13      	ldr	r3, [pc, #76]	@ (8016b24 <pvPortMalloc+0x198>)
 8016ad8:	681b      	ldr	r3, [r3, #0]
 8016ada:	3301      	adds	r3, #1
 8016adc:	4a11      	ldr	r2, [pc, #68]	@ (8016b24 <pvPortMalloc+0x198>)
 8016ade:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016ae0:	f7fe ff40 	bl	8015964 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016ae4:	69fb      	ldr	r3, [r7, #28]
 8016ae6:	f003 0307 	and.w	r3, r3, #7
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d00b      	beq.n	8016b06 <pvPortMalloc+0x17a>
	__asm volatile
 8016aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016af2:	f383 8811 	msr	BASEPRI, r3
 8016af6:	f3bf 8f6f 	isb	sy
 8016afa:	f3bf 8f4f 	dsb	sy
 8016afe:	60fb      	str	r3, [r7, #12]
}
 8016b00:	bf00      	nop
 8016b02:	bf00      	nop
 8016b04:	e7fd      	b.n	8016b02 <pvPortMalloc+0x176>
	return pvReturn;
 8016b06:	69fb      	ldr	r3, [r7, #28]
}
 8016b08:	4618      	mov	r0, r3
 8016b0a:	3728      	adds	r7, #40	@ 0x28
 8016b0c:	46bd      	mov	sp, r7
 8016b0e:	bd80      	pop	{r7, pc}
 8016b10:	240067e0 	.word	0x240067e0
 8016b14:	240067f4 	.word	0x240067f4
 8016b18:	240067e4 	.word	0x240067e4
 8016b1c:	240067d8 	.word	0x240067d8
 8016b20:	240067e8 	.word	0x240067e8
 8016b24:	240067ec 	.word	0x240067ec

08016b28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016b28:	b580      	push	{r7, lr}
 8016b2a:	b086      	sub	sp, #24
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d04f      	beq.n	8016bda <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016b3a:	2308      	movs	r3, #8
 8016b3c:	425b      	negs	r3, r3
 8016b3e:	697a      	ldr	r2, [r7, #20]
 8016b40:	4413      	add	r3, r2
 8016b42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016b44:	697b      	ldr	r3, [r7, #20]
 8016b46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016b48:	693b      	ldr	r3, [r7, #16]
 8016b4a:	685a      	ldr	r2, [r3, #4]
 8016b4c:	4b25      	ldr	r3, [pc, #148]	@ (8016be4 <vPortFree+0xbc>)
 8016b4e:	681b      	ldr	r3, [r3, #0]
 8016b50:	4013      	ands	r3, r2
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d10b      	bne.n	8016b6e <vPortFree+0x46>
	__asm volatile
 8016b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016b5a:	f383 8811 	msr	BASEPRI, r3
 8016b5e:	f3bf 8f6f 	isb	sy
 8016b62:	f3bf 8f4f 	dsb	sy
 8016b66:	60fb      	str	r3, [r7, #12]
}
 8016b68:	bf00      	nop
 8016b6a:	bf00      	nop
 8016b6c:	e7fd      	b.n	8016b6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016b6e:	693b      	ldr	r3, [r7, #16]
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d00b      	beq.n	8016b8e <vPortFree+0x66>
	__asm volatile
 8016b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016b7a:	f383 8811 	msr	BASEPRI, r3
 8016b7e:	f3bf 8f6f 	isb	sy
 8016b82:	f3bf 8f4f 	dsb	sy
 8016b86:	60bb      	str	r3, [r7, #8]
}
 8016b88:	bf00      	nop
 8016b8a:	bf00      	nop
 8016b8c:	e7fd      	b.n	8016b8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016b8e:	693b      	ldr	r3, [r7, #16]
 8016b90:	685a      	ldr	r2, [r3, #4]
 8016b92:	4b14      	ldr	r3, [pc, #80]	@ (8016be4 <vPortFree+0xbc>)
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	4013      	ands	r3, r2
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d01e      	beq.n	8016bda <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016b9c:	693b      	ldr	r3, [r7, #16]
 8016b9e:	681b      	ldr	r3, [r3, #0]
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	d11a      	bne.n	8016bda <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016ba4:	693b      	ldr	r3, [r7, #16]
 8016ba6:	685a      	ldr	r2, [r3, #4]
 8016ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8016be4 <vPortFree+0xbc>)
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	43db      	mvns	r3, r3
 8016bae:	401a      	ands	r2, r3
 8016bb0:	693b      	ldr	r3, [r7, #16]
 8016bb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016bb4:	f7fe fec8 	bl	8015948 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016bb8:	693b      	ldr	r3, [r7, #16]
 8016bba:	685a      	ldr	r2, [r3, #4]
 8016bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8016be8 <vPortFree+0xc0>)
 8016bbe:	681b      	ldr	r3, [r3, #0]
 8016bc0:	4413      	add	r3, r2
 8016bc2:	4a09      	ldr	r2, [pc, #36]	@ (8016be8 <vPortFree+0xc0>)
 8016bc4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016bc6:	6938      	ldr	r0, [r7, #16]
 8016bc8:	f000 f874 	bl	8016cb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016bcc:	4b07      	ldr	r3, [pc, #28]	@ (8016bec <vPortFree+0xc4>)
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	3301      	adds	r3, #1
 8016bd2:	4a06      	ldr	r2, [pc, #24]	@ (8016bec <vPortFree+0xc4>)
 8016bd4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8016bd6:	f7fe fec5 	bl	8015964 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016bda:	bf00      	nop
 8016bdc:	3718      	adds	r7, #24
 8016bde:	46bd      	mov	sp, r7
 8016be0:	bd80      	pop	{r7, pc}
 8016be2:	bf00      	nop
 8016be4:	240067f4 	.word	0x240067f4
 8016be8:	240067e4 	.word	0x240067e4
 8016bec:	240067f0 	.word	0x240067f0

08016bf0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016bf0:	b480      	push	{r7}
 8016bf2:	b085      	sub	sp, #20
 8016bf4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016bf6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8016bfa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016bfc:	4b27      	ldr	r3, [pc, #156]	@ (8016c9c <prvHeapInit+0xac>)
 8016bfe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016c00:	68fb      	ldr	r3, [r7, #12]
 8016c02:	f003 0307 	and.w	r3, r3, #7
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d00c      	beq.n	8016c24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016c0a:	68fb      	ldr	r3, [r7, #12]
 8016c0c:	3307      	adds	r3, #7
 8016c0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	f023 0307 	bic.w	r3, r3, #7
 8016c16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016c18:	68ba      	ldr	r2, [r7, #8]
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	1ad3      	subs	r3, r2, r3
 8016c1e:	4a1f      	ldr	r2, [pc, #124]	@ (8016c9c <prvHeapInit+0xac>)
 8016c20:	4413      	add	r3, r2
 8016c22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016c24:	68fb      	ldr	r3, [r7, #12]
 8016c26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016c28:	4a1d      	ldr	r2, [pc, #116]	@ (8016ca0 <prvHeapInit+0xb0>)
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016c2e:	4b1c      	ldr	r3, [pc, #112]	@ (8016ca0 <prvHeapInit+0xb0>)
 8016c30:	2200      	movs	r2, #0
 8016c32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	68ba      	ldr	r2, [r7, #8]
 8016c38:	4413      	add	r3, r2
 8016c3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016c3c:	2208      	movs	r2, #8
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	1a9b      	subs	r3, r3, r2
 8016c42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016c44:	68fb      	ldr	r3, [r7, #12]
 8016c46:	f023 0307 	bic.w	r3, r3, #7
 8016c4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	4a15      	ldr	r2, [pc, #84]	@ (8016ca4 <prvHeapInit+0xb4>)
 8016c50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016c52:	4b14      	ldr	r3, [pc, #80]	@ (8016ca4 <prvHeapInit+0xb4>)
 8016c54:	681b      	ldr	r3, [r3, #0]
 8016c56:	2200      	movs	r2, #0
 8016c58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016c5a:	4b12      	ldr	r3, [pc, #72]	@ (8016ca4 <prvHeapInit+0xb4>)
 8016c5c:	681b      	ldr	r3, [r3, #0]
 8016c5e:	2200      	movs	r2, #0
 8016c60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016c66:	683b      	ldr	r3, [r7, #0]
 8016c68:	68fa      	ldr	r2, [r7, #12]
 8016c6a:	1ad2      	subs	r2, r2, r3
 8016c6c:	683b      	ldr	r3, [r7, #0]
 8016c6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016c70:	4b0c      	ldr	r3, [pc, #48]	@ (8016ca4 <prvHeapInit+0xb4>)
 8016c72:	681a      	ldr	r2, [r3, #0]
 8016c74:	683b      	ldr	r3, [r7, #0]
 8016c76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016c78:	683b      	ldr	r3, [r7, #0]
 8016c7a:	685b      	ldr	r3, [r3, #4]
 8016c7c:	4a0a      	ldr	r2, [pc, #40]	@ (8016ca8 <prvHeapInit+0xb8>)
 8016c7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016c80:	683b      	ldr	r3, [r7, #0]
 8016c82:	685b      	ldr	r3, [r3, #4]
 8016c84:	4a09      	ldr	r2, [pc, #36]	@ (8016cac <prvHeapInit+0xbc>)
 8016c86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016c88:	4b09      	ldr	r3, [pc, #36]	@ (8016cb0 <prvHeapInit+0xc0>)
 8016c8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8016c8e:	601a      	str	r2, [r3, #0]
}
 8016c90:	bf00      	nop
 8016c92:	3714      	adds	r7, #20
 8016c94:	46bd      	mov	sp, r7
 8016c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c9a:	4770      	bx	lr
 8016c9c:	24002bd8 	.word	0x24002bd8
 8016ca0:	240067d8 	.word	0x240067d8
 8016ca4:	240067e0 	.word	0x240067e0
 8016ca8:	240067e8 	.word	0x240067e8
 8016cac:	240067e4 	.word	0x240067e4
 8016cb0:	240067f4 	.word	0x240067f4

08016cb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016cb4:	b480      	push	{r7}
 8016cb6:	b085      	sub	sp, #20
 8016cb8:	af00      	add	r7, sp, #0
 8016cba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016cbc:	4b28      	ldr	r3, [pc, #160]	@ (8016d60 <prvInsertBlockIntoFreeList+0xac>)
 8016cbe:	60fb      	str	r3, [r7, #12]
 8016cc0:	e002      	b.n	8016cc8 <prvInsertBlockIntoFreeList+0x14>
 8016cc2:	68fb      	ldr	r3, [r7, #12]
 8016cc4:	681b      	ldr	r3, [r3, #0]
 8016cc6:	60fb      	str	r3, [r7, #12]
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	681b      	ldr	r3, [r3, #0]
 8016ccc:	687a      	ldr	r2, [r7, #4]
 8016cce:	429a      	cmp	r2, r3
 8016cd0:	d8f7      	bhi.n	8016cc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016cd2:	68fb      	ldr	r3, [r7, #12]
 8016cd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016cd6:	68fb      	ldr	r3, [r7, #12]
 8016cd8:	685b      	ldr	r3, [r3, #4]
 8016cda:	68ba      	ldr	r2, [r7, #8]
 8016cdc:	4413      	add	r3, r2
 8016cde:	687a      	ldr	r2, [r7, #4]
 8016ce0:	429a      	cmp	r2, r3
 8016ce2:	d108      	bne.n	8016cf6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016ce4:	68fb      	ldr	r3, [r7, #12]
 8016ce6:	685a      	ldr	r2, [r3, #4]
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	685b      	ldr	r3, [r3, #4]
 8016cec:	441a      	add	r2, r3
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016cf2:	68fb      	ldr	r3, [r7, #12]
 8016cf4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	685b      	ldr	r3, [r3, #4]
 8016cfe:	68ba      	ldr	r2, [r7, #8]
 8016d00:	441a      	add	r2, r3
 8016d02:	68fb      	ldr	r3, [r7, #12]
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	429a      	cmp	r2, r3
 8016d08:	d118      	bne.n	8016d3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016d0a:	68fb      	ldr	r3, [r7, #12]
 8016d0c:	681a      	ldr	r2, [r3, #0]
 8016d0e:	4b15      	ldr	r3, [pc, #84]	@ (8016d64 <prvInsertBlockIntoFreeList+0xb0>)
 8016d10:	681b      	ldr	r3, [r3, #0]
 8016d12:	429a      	cmp	r2, r3
 8016d14:	d00d      	beq.n	8016d32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	685a      	ldr	r2, [r3, #4]
 8016d1a:	68fb      	ldr	r3, [r7, #12]
 8016d1c:	681b      	ldr	r3, [r3, #0]
 8016d1e:	685b      	ldr	r3, [r3, #4]
 8016d20:	441a      	add	r2, r3
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016d26:	68fb      	ldr	r3, [r7, #12]
 8016d28:	681b      	ldr	r3, [r3, #0]
 8016d2a:	681a      	ldr	r2, [r3, #0]
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	601a      	str	r2, [r3, #0]
 8016d30:	e008      	b.n	8016d44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016d32:	4b0c      	ldr	r3, [pc, #48]	@ (8016d64 <prvInsertBlockIntoFreeList+0xb0>)
 8016d34:	681a      	ldr	r2, [r3, #0]
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	601a      	str	r2, [r3, #0]
 8016d3a:	e003      	b.n	8016d44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	681a      	ldr	r2, [r3, #0]
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016d44:	68fa      	ldr	r2, [r7, #12]
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	429a      	cmp	r2, r3
 8016d4a:	d002      	beq.n	8016d52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016d4c:	68fb      	ldr	r3, [r7, #12]
 8016d4e:	687a      	ldr	r2, [r7, #4]
 8016d50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016d52:	bf00      	nop
 8016d54:	3714      	adds	r7, #20
 8016d56:	46bd      	mov	sp, r7
 8016d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d5c:	4770      	bx	lr
 8016d5e:	bf00      	nop
 8016d60:	240067d8 	.word	0x240067d8
 8016d64:	240067e0 	.word	0x240067e0

08016d68 <atof>:
 8016d68:	2100      	movs	r1, #0
 8016d6a:	f000 bdb7 	b.w	80178dc <strtod>

08016d6e <atoi>:
 8016d6e:	220a      	movs	r2, #10
 8016d70:	2100      	movs	r1, #0
 8016d72:	f000 be39 	b.w	80179e8 <strtol>

08016d76 <sulp>:
 8016d76:	b570      	push	{r4, r5, r6, lr}
 8016d78:	4604      	mov	r4, r0
 8016d7a:	460d      	mov	r5, r1
 8016d7c:	4616      	mov	r6, r2
 8016d7e:	ec45 4b10 	vmov	d0, r4, r5
 8016d82:	f001 ffa9 	bl	8018cd8 <__ulp>
 8016d86:	b17e      	cbz	r6, 8016da8 <sulp+0x32>
 8016d88:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016d8c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	dd09      	ble.n	8016da8 <sulp+0x32>
 8016d94:	051b      	lsls	r3, r3, #20
 8016d96:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8016d9a:	2000      	movs	r0, #0
 8016d9c:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8016da0:	ec41 0b17 	vmov	d7, r0, r1
 8016da4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016da8:	bd70      	pop	{r4, r5, r6, pc}
 8016daa:	0000      	movs	r0, r0
 8016dac:	0000      	movs	r0, r0
	...

08016db0 <_strtod_l>:
 8016db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016db4:	ed2d 8b0a 	vpush	{d8-d12}
 8016db8:	b097      	sub	sp, #92	@ 0x5c
 8016dba:	4688      	mov	r8, r1
 8016dbc:	920e      	str	r2, [sp, #56]	@ 0x38
 8016dbe:	2200      	movs	r2, #0
 8016dc0:	9212      	str	r2, [sp, #72]	@ 0x48
 8016dc2:	9005      	str	r0, [sp, #20]
 8016dc4:	f04f 0a00 	mov.w	sl, #0
 8016dc8:	f04f 0b00 	mov.w	fp, #0
 8016dcc:	460a      	mov	r2, r1
 8016dce:	9211      	str	r2, [sp, #68]	@ 0x44
 8016dd0:	7811      	ldrb	r1, [r2, #0]
 8016dd2:	292b      	cmp	r1, #43	@ 0x2b
 8016dd4:	d04c      	beq.n	8016e70 <_strtod_l+0xc0>
 8016dd6:	d839      	bhi.n	8016e4c <_strtod_l+0x9c>
 8016dd8:	290d      	cmp	r1, #13
 8016dda:	d833      	bhi.n	8016e44 <_strtod_l+0x94>
 8016ddc:	2908      	cmp	r1, #8
 8016dde:	d833      	bhi.n	8016e48 <_strtod_l+0x98>
 8016de0:	2900      	cmp	r1, #0
 8016de2:	d03c      	beq.n	8016e5e <_strtod_l+0xae>
 8016de4:	2200      	movs	r2, #0
 8016de6:	9208      	str	r2, [sp, #32]
 8016de8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8016dea:	782a      	ldrb	r2, [r5, #0]
 8016dec:	2a30      	cmp	r2, #48	@ 0x30
 8016dee:	f040 80b5 	bne.w	8016f5c <_strtod_l+0x1ac>
 8016df2:	786a      	ldrb	r2, [r5, #1]
 8016df4:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016df8:	2a58      	cmp	r2, #88	@ 0x58
 8016dfa:	d170      	bne.n	8016ede <_strtod_l+0x12e>
 8016dfc:	9302      	str	r3, [sp, #8]
 8016dfe:	9b08      	ldr	r3, [sp, #32]
 8016e00:	9301      	str	r3, [sp, #4]
 8016e02:	ab12      	add	r3, sp, #72	@ 0x48
 8016e04:	9300      	str	r3, [sp, #0]
 8016e06:	4a8b      	ldr	r2, [pc, #556]	@ (8017034 <_strtod_l+0x284>)
 8016e08:	9805      	ldr	r0, [sp, #20]
 8016e0a:	ab13      	add	r3, sp, #76	@ 0x4c
 8016e0c:	a911      	add	r1, sp, #68	@ 0x44
 8016e0e:	f001 f85d 	bl	8017ecc <__gethex>
 8016e12:	f010 060f 	ands.w	r6, r0, #15
 8016e16:	4604      	mov	r4, r0
 8016e18:	d005      	beq.n	8016e26 <_strtod_l+0x76>
 8016e1a:	2e06      	cmp	r6, #6
 8016e1c:	d12a      	bne.n	8016e74 <_strtod_l+0xc4>
 8016e1e:	3501      	adds	r5, #1
 8016e20:	2300      	movs	r3, #0
 8016e22:	9511      	str	r5, [sp, #68]	@ 0x44
 8016e24:	9308      	str	r3, [sp, #32]
 8016e26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	f040 852f 	bne.w	801788c <_strtod_l+0xadc>
 8016e2e:	9b08      	ldr	r3, [sp, #32]
 8016e30:	ec4b ab10 	vmov	d0, sl, fp
 8016e34:	b1cb      	cbz	r3, 8016e6a <_strtod_l+0xba>
 8016e36:	eeb1 0b40 	vneg.f64	d0, d0
 8016e3a:	b017      	add	sp, #92	@ 0x5c
 8016e3c:	ecbd 8b0a 	vpop	{d8-d12}
 8016e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e44:	2920      	cmp	r1, #32
 8016e46:	d1cd      	bne.n	8016de4 <_strtod_l+0x34>
 8016e48:	3201      	adds	r2, #1
 8016e4a:	e7c0      	b.n	8016dce <_strtod_l+0x1e>
 8016e4c:	292d      	cmp	r1, #45	@ 0x2d
 8016e4e:	d1c9      	bne.n	8016de4 <_strtod_l+0x34>
 8016e50:	2101      	movs	r1, #1
 8016e52:	9108      	str	r1, [sp, #32]
 8016e54:	1c51      	adds	r1, r2, #1
 8016e56:	9111      	str	r1, [sp, #68]	@ 0x44
 8016e58:	7852      	ldrb	r2, [r2, #1]
 8016e5a:	2a00      	cmp	r2, #0
 8016e5c:	d1c4      	bne.n	8016de8 <_strtod_l+0x38>
 8016e5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016e60:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	f040 850f 	bne.w	8017888 <_strtod_l+0xad8>
 8016e6a:	ec4b ab10 	vmov	d0, sl, fp
 8016e6e:	e7e4      	b.n	8016e3a <_strtod_l+0x8a>
 8016e70:	2100      	movs	r1, #0
 8016e72:	e7ee      	b.n	8016e52 <_strtod_l+0xa2>
 8016e74:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016e76:	b13a      	cbz	r2, 8016e88 <_strtod_l+0xd8>
 8016e78:	2135      	movs	r1, #53	@ 0x35
 8016e7a:	a814      	add	r0, sp, #80	@ 0x50
 8016e7c:	f002 f823 	bl	8018ec6 <__copybits>
 8016e80:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016e82:	9805      	ldr	r0, [sp, #20]
 8016e84:	f001 fbf4 	bl	8018670 <_Bfree>
 8016e88:	1e73      	subs	r3, r6, #1
 8016e8a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8016e8c:	2b04      	cmp	r3, #4
 8016e8e:	d806      	bhi.n	8016e9e <_strtod_l+0xee>
 8016e90:	e8df f003 	tbb	[pc, r3]
 8016e94:	201d0314 	.word	0x201d0314
 8016e98:	14          	.byte	0x14
 8016e99:	00          	.byte	0x00
 8016e9a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8016e9e:	05e3      	lsls	r3, r4, #23
 8016ea0:	bf48      	it	mi
 8016ea2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8016ea6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016eaa:	0d1b      	lsrs	r3, r3, #20
 8016eac:	051b      	lsls	r3, r3, #20
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d1b9      	bne.n	8016e26 <_strtod_l+0x76>
 8016eb2:	f000 ff15 	bl	8017ce0 <__errno>
 8016eb6:	2322      	movs	r3, #34	@ 0x22
 8016eb8:	6003      	str	r3, [r0, #0]
 8016eba:	e7b4      	b.n	8016e26 <_strtod_l+0x76>
 8016ebc:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8016ec0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8016ec4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8016ec8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016ecc:	e7e7      	b.n	8016e9e <_strtod_l+0xee>
 8016ece:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 801703c <_strtod_l+0x28c>
 8016ed2:	e7e4      	b.n	8016e9e <_strtod_l+0xee>
 8016ed4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8016ed8:	f04f 3aff 	mov.w	sl, #4294967295
 8016edc:	e7df      	b.n	8016e9e <_strtod_l+0xee>
 8016ede:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016ee0:	1c5a      	adds	r2, r3, #1
 8016ee2:	9211      	str	r2, [sp, #68]	@ 0x44
 8016ee4:	785b      	ldrb	r3, [r3, #1]
 8016ee6:	2b30      	cmp	r3, #48	@ 0x30
 8016ee8:	d0f9      	beq.n	8016ede <_strtod_l+0x12e>
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d09b      	beq.n	8016e26 <_strtod_l+0x76>
 8016eee:	2301      	movs	r3, #1
 8016ef0:	2600      	movs	r6, #0
 8016ef2:	9307      	str	r3, [sp, #28]
 8016ef4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016ef6:	930a      	str	r3, [sp, #40]	@ 0x28
 8016ef8:	46b1      	mov	r9, r6
 8016efa:	4635      	mov	r5, r6
 8016efc:	220a      	movs	r2, #10
 8016efe:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8016f00:	7804      	ldrb	r4, [r0, #0]
 8016f02:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8016f06:	b2d9      	uxtb	r1, r3
 8016f08:	2909      	cmp	r1, #9
 8016f0a:	d929      	bls.n	8016f60 <_strtod_l+0x1b0>
 8016f0c:	494a      	ldr	r1, [pc, #296]	@ (8017038 <_strtod_l+0x288>)
 8016f0e:	2201      	movs	r2, #1
 8016f10:	f000 fe8e 	bl	8017c30 <strncmp>
 8016f14:	b378      	cbz	r0, 8016f76 <_strtod_l+0x1c6>
 8016f16:	2000      	movs	r0, #0
 8016f18:	4622      	mov	r2, r4
 8016f1a:	462b      	mov	r3, r5
 8016f1c:	4607      	mov	r7, r0
 8016f1e:	9006      	str	r0, [sp, #24]
 8016f20:	2a65      	cmp	r2, #101	@ 0x65
 8016f22:	d001      	beq.n	8016f28 <_strtod_l+0x178>
 8016f24:	2a45      	cmp	r2, #69	@ 0x45
 8016f26:	d117      	bne.n	8016f58 <_strtod_l+0x1a8>
 8016f28:	b91b      	cbnz	r3, 8016f32 <_strtod_l+0x182>
 8016f2a:	9b07      	ldr	r3, [sp, #28]
 8016f2c:	4303      	orrs	r3, r0
 8016f2e:	d096      	beq.n	8016e5e <_strtod_l+0xae>
 8016f30:	2300      	movs	r3, #0
 8016f32:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8016f36:	f108 0201 	add.w	r2, r8, #1
 8016f3a:	9211      	str	r2, [sp, #68]	@ 0x44
 8016f3c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8016f40:	2a2b      	cmp	r2, #43	@ 0x2b
 8016f42:	d06b      	beq.n	801701c <_strtod_l+0x26c>
 8016f44:	2a2d      	cmp	r2, #45	@ 0x2d
 8016f46:	d071      	beq.n	801702c <_strtod_l+0x27c>
 8016f48:	f04f 0e00 	mov.w	lr, #0
 8016f4c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8016f50:	2c09      	cmp	r4, #9
 8016f52:	d979      	bls.n	8017048 <_strtod_l+0x298>
 8016f54:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8016f58:	2400      	movs	r4, #0
 8016f5a:	e094      	b.n	8017086 <_strtod_l+0x2d6>
 8016f5c:	2300      	movs	r3, #0
 8016f5e:	e7c7      	b.n	8016ef0 <_strtod_l+0x140>
 8016f60:	2d08      	cmp	r5, #8
 8016f62:	f100 0001 	add.w	r0, r0, #1
 8016f66:	bfd4      	ite	le
 8016f68:	fb02 3909 	mlale	r9, r2, r9, r3
 8016f6c:	fb02 3606 	mlagt	r6, r2, r6, r3
 8016f70:	3501      	adds	r5, #1
 8016f72:	9011      	str	r0, [sp, #68]	@ 0x44
 8016f74:	e7c3      	b.n	8016efe <_strtod_l+0x14e>
 8016f76:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016f78:	1c5a      	adds	r2, r3, #1
 8016f7a:	9211      	str	r2, [sp, #68]	@ 0x44
 8016f7c:	785a      	ldrb	r2, [r3, #1]
 8016f7e:	b375      	cbz	r5, 8016fde <_strtod_l+0x22e>
 8016f80:	4607      	mov	r7, r0
 8016f82:	462b      	mov	r3, r5
 8016f84:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8016f88:	2909      	cmp	r1, #9
 8016f8a:	d913      	bls.n	8016fb4 <_strtod_l+0x204>
 8016f8c:	2101      	movs	r1, #1
 8016f8e:	9106      	str	r1, [sp, #24]
 8016f90:	e7c6      	b.n	8016f20 <_strtod_l+0x170>
 8016f92:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016f94:	1c5a      	adds	r2, r3, #1
 8016f96:	9211      	str	r2, [sp, #68]	@ 0x44
 8016f98:	785a      	ldrb	r2, [r3, #1]
 8016f9a:	3001      	adds	r0, #1
 8016f9c:	2a30      	cmp	r2, #48	@ 0x30
 8016f9e:	d0f8      	beq.n	8016f92 <_strtod_l+0x1e2>
 8016fa0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8016fa4:	2b08      	cmp	r3, #8
 8016fa6:	f200 8476 	bhi.w	8017896 <_strtod_l+0xae6>
 8016faa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016fac:	930a      	str	r3, [sp, #40]	@ 0x28
 8016fae:	4607      	mov	r7, r0
 8016fb0:	2000      	movs	r0, #0
 8016fb2:	4603      	mov	r3, r0
 8016fb4:	3a30      	subs	r2, #48	@ 0x30
 8016fb6:	f100 0101 	add.w	r1, r0, #1
 8016fba:	d023      	beq.n	8017004 <_strtod_l+0x254>
 8016fbc:	440f      	add	r7, r1
 8016fbe:	eb00 0c03 	add.w	ip, r0, r3
 8016fc2:	4619      	mov	r1, r3
 8016fc4:	240a      	movs	r4, #10
 8016fc6:	4561      	cmp	r1, ip
 8016fc8:	d10b      	bne.n	8016fe2 <_strtod_l+0x232>
 8016fca:	1c5c      	adds	r4, r3, #1
 8016fcc:	4403      	add	r3, r0
 8016fce:	2b08      	cmp	r3, #8
 8016fd0:	4404      	add	r4, r0
 8016fd2:	dc11      	bgt.n	8016ff8 <_strtod_l+0x248>
 8016fd4:	230a      	movs	r3, #10
 8016fd6:	fb03 2909 	mla	r9, r3, r9, r2
 8016fda:	2100      	movs	r1, #0
 8016fdc:	e013      	b.n	8017006 <_strtod_l+0x256>
 8016fde:	4628      	mov	r0, r5
 8016fe0:	e7dc      	b.n	8016f9c <_strtod_l+0x1ec>
 8016fe2:	2908      	cmp	r1, #8
 8016fe4:	f101 0101 	add.w	r1, r1, #1
 8016fe8:	dc02      	bgt.n	8016ff0 <_strtod_l+0x240>
 8016fea:	fb04 f909 	mul.w	r9, r4, r9
 8016fee:	e7ea      	b.n	8016fc6 <_strtod_l+0x216>
 8016ff0:	2910      	cmp	r1, #16
 8016ff2:	bfd8      	it	le
 8016ff4:	4366      	mulle	r6, r4
 8016ff6:	e7e6      	b.n	8016fc6 <_strtod_l+0x216>
 8016ff8:	2b0f      	cmp	r3, #15
 8016ffa:	dcee      	bgt.n	8016fda <_strtod_l+0x22a>
 8016ffc:	230a      	movs	r3, #10
 8016ffe:	fb03 2606 	mla	r6, r3, r6, r2
 8017002:	e7ea      	b.n	8016fda <_strtod_l+0x22a>
 8017004:	461c      	mov	r4, r3
 8017006:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017008:	1c5a      	adds	r2, r3, #1
 801700a:	9211      	str	r2, [sp, #68]	@ 0x44
 801700c:	785a      	ldrb	r2, [r3, #1]
 801700e:	4608      	mov	r0, r1
 8017010:	4623      	mov	r3, r4
 8017012:	e7b7      	b.n	8016f84 <_strtod_l+0x1d4>
 8017014:	2301      	movs	r3, #1
 8017016:	2700      	movs	r7, #0
 8017018:	9306      	str	r3, [sp, #24]
 801701a:	e786      	b.n	8016f2a <_strtod_l+0x17a>
 801701c:	f04f 0e00 	mov.w	lr, #0
 8017020:	f108 0202 	add.w	r2, r8, #2
 8017024:	9211      	str	r2, [sp, #68]	@ 0x44
 8017026:	f898 2002 	ldrb.w	r2, [r8, #2]
 801702a:	e78f      	b.n	8016f4c <_strtod_l+0x19c>
 801702c:	f04f 0e01 	mov.w	lr, #1
 8017030:	e7f6      	b.n	8017020 <_strtod_l+0x270>
 8017032:	bf00      	nop
 8017034:	08019db8 	.word	0x08019db8
 8017038:	08019d94 	.word	0x08019d94
 801703c:	7ff00000 	.word	0x7ff00000
 8017040:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017042:	1c54      	adds	r4, r2, #1
 8017044:	9411      	str	r4, [sp, #68]	@ 0x44
 8017046:	7852      	ldrb	r2, [r2, #1]
 8017048:	2a30      	cmp	r2, #48	@ 0x30
 801704a:	d0f9      	beq.n	8017040 <_strtod_l+0x290>
 801704c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8017050:	2c08      	cmp	r4, #8
 8017052:	d881      	bhi.n	8016f58 <_strtod_l+0x1a8>
 8017054:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8017058:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801705a:	9209      	str	r2, [sp, #36]	@ 0x24
 801705c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801705e:	1c51      	adds	r1, r2, #1
 8017060:	9111      	str	r1, [sp, #68]	@ 0x44
 8017062:	7852      	ldrb	r2, [r2, #1]
 8017064:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8017068:	2c09      	cmp	r4, #9
 801706a:	d938      	bls.n	80170de <_strtod_l+0x32e>
 801706c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801706e:	1b0c      	subs	r4, r1, r4
 8017070:	2c08      	cmp	r4, #8
 8017072:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8017076:	dc02      	bgt.n	801707e <_strtod_l+0x2ce>
 8017078:	4564      	cmp	r4, ip
 801707a:	bfa8      	it	ge
 801707c:	4664      	movge	r4, ip
 801707e:	f1be 0f00 	cmp.w	lr, #0
 8017082:	d000      	beq.n	8017086 <_strtod_l+0x2d6>
 8017084:	4264      	negs	r4, r4
 8017086:	2b00      	cmp	r3, #0
 8017088:	d14e      	bne.n	8017128 <_strtod_l+0x378>
 801708a:	9b07      	ldr	r3, [sp, #28]
 801708c:	4318      	orrs	r0, r3
 801708e:	f47f aeca 	bne.w	8016e26 <_strtod_l+0x76>
 8017092:	9b06      	ldr	r3, [sp, #24]
 8017094:	2b00      	cmp	r3, #0
 8017096:	f47f aee2 	bne.w	8016e5e <_strtod_l+0xae>
 801709a:	2a69      	cmp	r2, #105	@ 0x69
 801709c:	d027      	beq.n	80170ee <_strtod_l+0x33e>
 801709e:	dc24      	bgt.n	80170ea <_strtod_l+0x33a>
 80170a0:	2a49      	cmp	r2, #73	@ 0x49
 80170a2:	d024      	beq.n	80170ee <_strtod_l+0x33e>
 80170a4:	2a4e      	cmp	r2, #78	@ 0x4e
 80170a6:	f47f aeda 	bne.w	8016e5e <_strtod_l+0xae>
 80170aa:	4997      	ldr	r1, [pc, #604]	@ (8017308 <_strtod_l+0x558>)
 80170ac:	a811      	add	r0, sp, #68	@ 0x44
 80170ae:	f001 f92f 	bl	8018310 <__match>
 80170b2:	2800      	cmp	r0, #0
 80170b4:	f43f aed3 	beq.w	8016e5e <_strtod_l+0xae>
 80170b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80170ba:	781b      	ldrb	r3, [r3, #0]
 80170bc:	2b28      	cmp	r3, #40	@ 0x28
 80170be:	d12d      	bne.n	801711c <_strtod_l+0x36c>
 80170c0:	4992      	ldr	r1, [pc, #584]	@ (801730c <_strtod_l+0x55c>)
 80170c2:	aa14      	add	r2, sp, #80	@ 0x50
 80170c4:	a811      	add	r0, sp, #68	@ 0x44
 80170c6:	f001 f937 	bl	8018338 <__hexnan>
 80170ca:	2805      	cmp	r0, #5
 80170cc:	d126      	bne.n	801711c <_strtod_l+0x36c>
 80170ce:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80170d0:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 80170d4:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80170d8:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80170dc:	e6a3      	b.n	8016e26 <_strtod_l+0x76>
 80170de:	240a      	movs	r4, #10
 80170e0:	fb04 2c0c 	mla	ip, r4, ip, r2
 80170e4:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 80170e8:	e7b8      	b.n	801705c <_strtod_l+0x2ac>
 80170ea:	2a6e      	cmp	r2, #110	@ 0x6e
 80170ec:	e7db      	b.n	80170a6 <_strtod_l+0x2f6>
 80170ee:	4988      	ldr	r1, [pc, #544]	@ (8017310 <_strtod_l+0x560>)
 80170f0:	a811      	add	r0, sp, #68	@ 0x44
 80170f2:	f001 f90d 	bl	8018310 <__match>
 80170f6:	2800      	cmp	r0, #0
 80170f8:	f43f aeb1 	beq.w	8016e5e <_strtod_l+0xae>
 80170fc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80170fe:	4985      	ldr	r1, [pc, #532]	@ (8017314 <_strtod_l+0x564>)
 8017100:	3b01      	subs	r3, #1
 8017102:	a811      	add	r0, sp, #68	@ 0x44
 8017104:	9311      	str	r3, [sp, #68]	@ 0x44
 8017106:	f001 f903 	bl	8018310 <__match>
 801710a:	b910      	cbnz	r0, 8017112 <_strtod_l+0x362>
 801710c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801710e:	3301      	adds	r3, #1
 8017110:	9311      	str	r3, [sp, #68]	@ 0x44
 8017112:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8017328 <_strtod_l+0x578>
 8017116:	f04f 0a00 	mov.w	sl, #0
 801711a:	e684      	b.n	8016e26 <_strtod_l+0x76>
 801711c:	487e      	ldr	r0, [pc, #504]	@ (8017318 <_strtod_l+0x568>)
 801711e:	f000 fe1b 	bl	8017d58 <nan>
 8017122:	ec5b ab10 	vmov	sl, fp, d0
 8017126:	e67e      	b.n	8016e26 <_strtod_l+0x76>
 8017128:	ee07 9a90 	vmov	s15, r9
 801712c:	1be2      	subs	r2, r4, r7
 801712e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8017132:	2d00      	cmp	r5, #0
 8017134:	bf08      	it	eq
 8017136:	461d      	moveq	r5, r3
 8017138:	2b10      	cmp	r3, #16
 801713a:	9209      	str	r2, [sp, #36]	@ 0x24
 801713c:	461a      	mov	r2, r3
 801713e:	bfa8      	it	ge
 8017140:	2210      	movge	r2, #16
 8017142:	2b09      	cmp	r3, #9
 8017144:	ec5b ab17 	vmov	sl, fp, d7
 8017148:	dc15      	bgt.n	8017176 <_strtod_l+0x3c6>
 801714a:	1be1      	subs	r1, r4, r7
 801714c:	2900      	cmp	r1, #0
 801714e:	f43f ae6a 	beq.w	8016e26 <_strtod_l+0x76>
 8017152:	eba4 0107 	sub.w	r1, r4, r7
 8017156:	dd72      	ble.n	801723e <_strtod_l+0x48e>
 8017158:	2916      	cmp	r1, #22
 801715a:	dc59      	bgt.n	8017210 <_strtod_l+0x460>
 801715c:	4b6f      	ldr	r3, [pc, #444]	@ (801731c <_strtod_l+0x56c>)
 801715e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017160:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017164:	ed93 7b00 	vldr	d7, [r3]
 8017168:	ec4b ab16 	vmov	d6, sl, fp
 801716c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017170:	ec5b ab17 	vmov	sl, fp, d7
 8017174:	e657      	b.n	8016e26 <_strtod_l+0x76>
 8017176:	4969      	ldr	r1, [pc, #420]	@ (801731c <_strtod_l+0x56c>)
 8017178:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801717c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8017180:	ee06 6a90 	vmov	s13, r6
 8017184:	2b0f      	cmp	r3, #15
 8017186:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801718a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801718e:	ec5b ab16 	vmov	sl, fp, d6
 8017192:	ddda      	ble.n	801714a <_strtod_l+0x39a>
 8017194:	1a9a      	subs	r2, r3, r2
 8017196:	1be1      	subs	r1, r4, r7
 8017198:	440a      	add	r2, r1
 801719a:	2a00      	cmp	r2, #0
 801719c:	f340 8094 	ble.w	80172c8 <_strtod_l+0x518>
 80171a0:	f012 000f 	ands.w	r0, r2, #15
 80171a4:	d00a      	beq.n	80171bc <_strtod_l+0x40c>
 80171a6:	495d      	ldr	r1, [pc, #372]	@ (801731c <_strtod_l+0x56c>)
 80171a8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80171ac:	ed91 7b00 	vldr	d7, [r1]
 80171b0:	ec4b ab16 	vmov	d6, sl, fp
 80171b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80171b8:	ec5b ab17 	vmov	sl, fp, d7
 80171bc:	f032 020f 	bics.w	r2, r2, #15
 80171c0:	d073      	beq.n	80172aa <_strtod_l+0x4fa>
 80171c2:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 80171c6:	dd47      	ble.n	8017258 <_strtod_l+0x4a8>
 80171c8:	2400      	movs	r4, #0
 80171ca:	4625      	mov	r5, r4
 80171cc:	9407      	str	r4, [sp, #28]
 80171ce:	4626      	mov	r6, r4
 80171d0:	9a05      	ldr	r2, [sp, #20]
 80171d2:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8017328 <_strtod_l+0x578>
 80171d6:	2322      	movs	r3, #34	@ 0x22
 80171d8:	6013      	str	r3, [r2, #0]
 80171da:	f04f 0a00 	mov.w	sl, #0
 80171de:	9b07      	ldr	r3, [sp, #28]
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	f43f ae20 	beq.w	8016e26 <_strtod_l+0x76>
 80171e6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80171e8:	9805      	ldr	r0, [sp, #20]
 80171ea:	f001 fa41 	bl	8018670 <_Bfree>
 80171ee:	9805      	ldr	r0, [sp, #20]
 80171f0:	4631      	mov	r1, r6
 80171f2:	f001 fa3d 	bl	8018670 <_Bfree>
 80171f6:	9805      	ldr	r0, [sp, #20]
 80171f8:	4629      	mov	r1, r5
 80171fa:	f001 fa39 	bl	8018670 <_Bfree>
 80171fe:	9907      	ldr	r1, [sp, #28]
 8017200:	9805      	ldr	r0, [sp, #20]
 8017202:	f001 fa35 	bl	8018670 <_Bfree>
 8017206:	9805      	ldr	r0, [sp, #20]
 8017208:	4621      	mov	r1, r4
 801720a:	f001 fa31 	bl	8018670 <_Bfree>
 801720e:	e60a      	b.n	8016e26 <_strtod_l+0x76>
 8017210:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8017214:	1be0      	subs	r0, r4, r7
 8017216:	4281      	cmp	r1, r0
 8017218:	dbbc      	blt.n	8017194 <_strtod_l+0x3e4>
 801721a:	4a40      	ldr	r2, [pc, #256]	@ (801731c <_strtod_l+0x56c>)
 801721c:	f1c3 030f 	rsb	r3, r3, #15
 8017220:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8017224:	ed91 7b00 	vldr	d7, [r1]
 8017228:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801722a:	ec4b ab16 	vmov	d6, sl, fp
 801722e:	1acb      	subs	r3, r1, r3
 8017230:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8017234:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017238:	ed92 6b00 	vldr	d6, [r2]
 801723c:	e796      	b.n	801716c <_strtod_l+0x3bc>
 801723e:	3116      	adds	r1, #22
 8017240:	dba8      	blt.n	8017194 <_strtod_l+0x3e4>
 8017242:	4b36      	ldr	r3, [pc, #216]	@ (801731c <_strtod_l+0x56c>)
 8017244:	1b3c      	subs	r4, r7, r4
 8017246:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801724a:	ed94 7b00 	vldr	d7, [r4]
 801724e:	ec4b ab16 	vmov	d6, sl, fp
 8017252:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8017256:	e78b      	b.n	8017170 <_strtod_l+0x3c0>
 8017258:	2000      	movs	r0, #0
 801725a:	ec4b ab17 	vmov	d7, sl, fp
 801725e:	4e30      	ldr	r6, [pc, #192]	@ (8017320 <_strtod_l+0x570>)
 8017260:	1112      	asrs	r2, r2, #4
 8017262:	4601      	mov	r1, r0
 8017264:	2a01      	cmp	r2, #1
 8017266:	dc23      	bgt.n	80172b0 <_strtod_l+0x500>
 8017268:	b108      	cbz	r0, 801726e <_strtod_l+0x4be>
 801726a:	ec5b ab17 	vmov	sl, fp, d7
 801726e:	4a2c      	ldr	r2, [pc, #176]	@ (8017320 <_strtod_l+0x570>)
 8017270:	482c      	ldr	r0, [pc, #176]	@ (8017324 <_strtod_l+0x574>)
 8017272:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8017276:	ed92 7b00 	vldr	d7, [r2]
 801727a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801727e:	ec4b ab16 	vmov	d6, sl, fp
 8017282:	4a29      	ldr	r2, [pc, #164]	@ (8017328 <_strtod_l+0x578>)
 8017284:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017288:	ee17 1a90 	vmov	r1, s15
 801728c:	400a      	ands	r2, r1
 801728e:	4282      	cmp	r2, r0
 8017290:	ec5b ab17 	vmov	sl, fp, d7
 8017294:	d898      	bhi.n	80171c8 <_strtod_l+0x418>
 8017296:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 801729a:	4282      	cmp	r2, r0
 801729c:	bf86      	itte	hi
 801729e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 801732c <_strtod_l+0x57c>
 80172a2:	f04f 3aff 	movhi.w	sl, #4294967295
 80172a6:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 80172aa:	2200      	movs	r2, #0
 80172ac:	9206      	str	r2, [sp, #24]
 80172ae:	e076      	b.n	801739e <_strtod_l+0x5ee>
 80172b0:	f012 0f01 	tst.w	r2, #1
 80172b4:	d004      	beq.n	80172c0 <_strtod_l+0x510>
 80172b6:	ed96 6b00 	vldr	d6, [r6]
 80172ba:	2001      	movs	r0, #1
 80172bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80172c0:	3101      	adds	r1, #1
 80172c2:	1052      	asrs	r2, r2, #1
 80172c4:	3608      	adds	r6, #8
 80172c6:	e7cd      	b.n	8017264 <_strtod_l+0x4b4>
 80172c8:	d0ef      	beq.n	80172aa <_strtod_l+0x4fa>
 80172ca:	4252      	negs	r2, r2
 80172cc:	f012 000f 	ands.w	r0, r2, #15
 80172d0:	d00a      	beq.n	80172e8 <_strtod_l+0x538>
 80172d2:	4912      	ldr	r1, [pc, #72]	@ (801731c <_strtod_l+0x56c>)
 80172d4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80172d8:	ed91 7b00 	vldr	d7, [r1]
 80172dc:	ec4b ab16 	vmov	d6, sl, fp
 80172e0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80172e4:	ec5b ab17 	vmov	sl, fp, d7
 80172e8:	1112      	asrs	r2, r2, #4
 80172ea:	d0de      	beq.n	80172aa <_strtod_l+0x4fa>
 80172ec:	2a1f      	cmp	r2, #31
 80172ee:	dd1f      	ble.n	8017330 <_strtod_l+0x580>
 80172f0:	2400      	movs	r4, #0
 80172f2:	4625      	mov	r5, r4
 80172f4:	9407      	str	r4, [sp, #28]
 80172f6:	4626      	mov	r6, r4
 80172f8:	9a05      	ldr	r2, [sp, #20]
 80172fa:	2322      	movs	r3, #34	@ 0x22
 80172fc:	f04f 0a00 	mov.w	sl, #0
 8017300:	f04f 0b00 	mov.w	fp, #0
 8017304:	6013      	str	r3, [r2, #0]
 8017306:	e76a      	b.n	80171de <_strtod_l+0x42e>
 8017308:	08019d9f 	.word	0x08019d9f
 801730c:	08019da4 	.word	0x08019da4
 8017310:	08019d96 	.word	0x08019d96
 8017314:	08019d99 	.word	0x08019d99
 8017318:	0801a11b 	.word	0x0801a11b
 801731c:	0801a018 	.word	0x0801a018
 8017320:	08019ff0 	.word	0x08019ff0
 8017324:	7ca00000 	.word	0x7ca00000
 8017328:	7ff00000 	.word	0x7ff00000
 801732c:	7fefffff 	.word	0x7fefffff
 8017330:	f012 0110 	ands.w	r1, r2, #16
 8017334:	bf18      	it	ne
 8017336:	216a      	movne	r1, #106	@ 0x6a
 8017338:	9106      	str	r1, [sp, #24]
 801733a:	ec4b ab17 	vmov	d7, sl, fp
 801733e:	49b0      	ldr	r1, [pc, #704]	@ (8017600 <_strtod_l+0x850>)
 8017340:	2000      	movs	r0, #0
 8017342:	07d6      	lsls	r6, r2, #31
 8017344:	d504      	bpl.n	8017350 <_strtod_l+0x5a0>
 8017346:	ed91 6b00 	vldr	d6, [r1]
 801734a:	2001      	movs	r0, #1
 801734c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017350:	1052      	asrs	r2, r2, #1
 8017352:	f101 0108 	add.w	r1, r1, #8
 8017356:	d1f4      	bne.n	8017342 <_strtod_l+0x592>
 8017358:	b108      	cbz	r0, 801735e <_strtod_l+0x5ae>
 801735a:	ec5b ab17 	vmov	sl, fp, d7
 801735e:	9a06      	ldr	r2, [sp, #24]
 8017360:	b1b2      	cbz	r2, 8017390 <_strtod_l+0x5e0>
 8017362:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8017366:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 801736a:	2a00      	cmp	r2, #0
 801736c:	4658      	mov	r0, fp
 801736e:	dd0f      	ble.n	8017390 <_strtod_l+0x5e0>
 8017370:	2a1f      	cmp	r2, #31
 8017372:	dd55      	ble.n	8017420 <_strtod_l+0x670>
 8017374:	2a34      	cmp	r2, #52	@ 0x34
 8017376:	bfde      	ittt	le
 8017378:	f04f 32ff 	movle.w	r2, #4294967295
 801737c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8017380:	408a      	lslle	r2, r1
 8017382:	f04f 0a00 	mov.w	sl, #0
 8017386:	bfcc      	ite	gt
 8017388:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801738c:	ea02 0b00 	andle.w	fp, r2, r0
 8017390:	ec4b ab17 	vmov	d7, sl, fp
 8017394:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801739c:	d0a8      	beq.n	80172f0 <_strtod_l+0x540>
 801739e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80173a0:	9805      	ldr	r0, [sp, #20]
 80173a2:	f8cd 9000 	str.w	r9, [sp]
 80173a6:	462a      	mov	r2, r5
 80173a8:	f001 f9ca 	bl	8018740 <__s2b>
 80173ac:	9007      	str	r0, [sp, #28]
 80173ae:	2800      	cmp	r0, #0
 80173b0:	f43f af0a 	beq.w	80171c8 <_strtod_l+0x418>
 80173b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80173b6:	1b3f      	subs	r7, r7, r4
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	bfb4      	ite	lt
 80173bc:	463b      	movlt	r3, r7
 80173be:	2300      	movge	r3, #0
 80173c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80173c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80173c4:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 80175f0 <_strtod_l+0x840>
 80173c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80173cc:	2400      	movs	r4, #0
 80173ce:	930d      	str	r3, [sp, #52]	@ 0x34
 80173d0:	4625      	mov	r5, r4
 80173d2:	9b07      	ldr	r3, [sp, #28]
 80173d4:	9805      	ldr	r0, [sp, #20]
 80173d6:	6859      	ldr	r1, [r3, #4]
 80173d8:	f001 f90a 	bl	80185f0 <_Balloc>
 80173dc:	4606      	mov	r6, r0
 80173de:	2800      	cmp	r0, #0
 80173e0:	f43f aef6 	beq.w	80171d0 <_strtod_l+0x420>
 80173e4:	9b07      	ldr	r3, [sp, #28]
 80173e6:	691a      	ldr	r2, [r3, #16]
 80173e8:	ec4b ab19 	vmov	d9, sl, fp
 80173ec:	3202      	adds	r2, #2
 80173ee:	f103 010c 	add.w	r1, r3, #12
 80173f2:	0092      	lsls	r2, r2, #2
 80173f4:	300c      	adds	r0, #12
 80173f6:	f000 fca0 	bl	8017d3a <memcpy>
 80173fa:	eeb0 0b49 	vmov.f64	d0, d9
 80173fe:	9805      	ldr	r0, [sp, #20]
 8017400:	aa14      	add	r2, sp, #80	@ 0x50
 8017402:	a913      	add	r1, sp, #76	@ 0x4c
 8017404:	f001 fcd8 	bl	8018db8 <__d2b>
 8017408:	9012      	str	r0, [sp, #72]	@ 0x48
 801740a:	2800      	cmp	r0, #0
 801740c:	f43f aee0 	beq.w	80171d0 <_strtod_l+0x420>
 8017410:	9805      	ldr	r0, [sp, #20]
 8017412:	2101      	movs	r1, #1
 8017414:	f001 fa2a 	bl	801886c <__i2b>
 8017418:	4605      	mov	r5, r0
 801741a:	b940      	cbnz	r0, 801742e <_strtod_l+0x67e>
 801741c:	2500      	movs	r5, #0
 801741e:	e6d7      	b.n	80171d0 <_strtod_l+0x420>
 8017420:	f04f 31ff 	mov.w	r1, #4294967295
 8017424:	fa01 f202 	lsl.w	r2, r1, r2
 8017428:	ea02 0a0a 	and.w	sl, r2, sl
 801742c:	e7b0      	b.n	8017390 <_strtod_l+0x5e0>
 801742e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8017430:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017432:	2f00      	cmp	r7, #0
 8017434:	bfab      	itete	ge
 8017436:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8017438:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 801743a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 801743e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8017442:	bfac      	ite	ge
 8017444:	eb07 0903 	addge.w	r9, r7, r3
 8017448:	eba3 0807 	sublt.w	r8, r3, r7
 801744c:	9b06      	ldr	r3, [sp, #24]
 801744e:	1aff      	subs	r7, r7, r3
 8017450:	4417      	add	r7, r2
 8017452:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8017456:	4a6b      	ldr	r2, [pc, #428]	@ (8017604 <_strtod_l+0x854>)
 8017458:	3f01      	subs	r7, #1
 801745a:	4297      	cmp	r7, r2
 801745c:	da51      	bge.n	8017502 <_strtod_l+0x752>
 801745e:	1bd1      	subs	r1, r2, r7
 8017460:	291f      	cmp	r1, #31
 8017462:	eba3 0301 	sub.w	r3, r3, r1
 8017466:	f04f 0201 	mov.w	r2, #1
 801746a:	dc3e      	bgt.n	80174ea <_strtod_l+0x73a>
 801746c:	408a      	lsls	r2, r1
 801746e:	920c      	str	r2, [sp, #48]	@ 0x30
 8017470:	2200      	movs	r2, #0
 8017472:	920b      	str	r2, [sp, #44]	@ 0x2c
 8017474:	eb09 0703 	add.w	r7, r9, r3
 8017478:	4498      	add	r8, r3
 801747a:	9b06      	ldr	r3, [sp, #24]
 801747c:	45b9      	cmp	r9, r7
 801747e:	4498      	add	r8, r3
 8017480:	464b      	mov	r3, r9
 8017482:	bfa8      	it	ge
 8017484:	463b      	movge	r3, r7
 8017486:	4543      	cmp	r3, r8
 8017488:	bfa8      	it	ge
 801748a:	4643      	movge	r3, r8
 801748c:	2b00      	cmp	r3, #0
 801748e:	bfc2      	ittt	gt
 8017490:	1aff      	subgt	r7, r7, r3
 8017492:	eba8 0803 	subgt.w	r8, r8, r3
 8017496:	eba9 0903 	subgt.w	r9, r9, r3
 801749a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801749c:	2b00      	cmp	r3, #0
 801749e:	dd16      	ble.n	80174ce <_strtod_l+0x71e>
 80174a0:	4629      	mov	r1, r5
 80174a2:	9805      	ldr	r0, [sp, #20]
 80174a4:	461a      	mov	r2, r3
 80174a6:	f001 faa1 	bl	80189ec <__pow5mult>
 80174aa:	4605      	mov	r5, r0
 80174ac:	2800      	cmp	r0, #0
 80174ae:	d0b5      	beq.n	801741c <_strtod_l+0x66c>
 80174b0:	4601      	mov	r1, r0
 80174b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80174b4:	9805      	ldr	r0, [sp, #20]
 80174b6:	f001 f9ef 	bl	8018898 <__multiply>
 80174ba:	900f      	str	r0, [sp, #60]	@ 0x3c
 80174bc:	2800      	cmp	r0, #0
 80174be:	f43f ae87 	beq.w	80171d0 <_strtod_l+0x420>
 80174c2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80174c4:	9805      	ldr	r0, [sp, #20]
 80174c6:	f001 f8d3 	bl	8018670 <_Bfree>
 80174ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80174cc:	9312      	str	r3, [sp, #72]	@ 0x48
 80174ce:	2f00      	cmp	r7, #0
 80174d0:	dc1b      	bgt.n	801750a <_strtod_l+0x75a>
 80174d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	dd21      	ble.n	801751c <_strtod_l+0x76c>
 80174d8:	4631      	mov	r1, r6
 80174da:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80174dc:	9805      	ldr	r0, [sp, #20]
 80174de:	f001 fa85 	bl	80189ec <__pow5mult>
 80174e2:	4606      	mov	r6, r0
 80174e4:	b9d0      	cbnz	r0, 801751c <_strtod_l+0x76c>
 80174e6:	2600      	movs	r6, #0
 80174e8:	e672      	b.n	80171d0 <_strtod_l+0x420>
 80174ea:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 80174ee:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 80174f2:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 80174f6:	37e2      	adds	r7, #226	@ 0xe2
 80174f8:	fa02 f107 	lsl.w	r1, r2, r7
 80174fc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80174fe:	920c      	str	r2, [sp, #48]	@ 0x30
 8017500:	e7b8      	b.n	8017474 <_strtod_l+0x6c4>
 8017502:	2200      	movs	r2, #0
 8017504:	920b      	str	r2, [sp, #44]	@ 0x2c
 8017506:	2201      	movs	r2, #1
 8017508:	e7f9      	b.n	80174fe <_strtod_l+0x74e>
 801750a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801750c:	9805      	ldr	r0, [sp, #20]
 801750e:	463a      	mov	r2, r7
 8017510:	f001 fac6 	bl	8018aa0 <__lshift>
 8017514:	9012      	str	r0, [sp, #72]	@ 0x48
 8017516:	2800      	cmp	r0, #0
 8017518:	d1db      	bne.n	80174d2 <_strtod_l+0x722>
 801751a:	e659      	b.n	80171d0 <_strtod_l+0x420>
 801751c:	f1b8 0f00 	cmp.w	r8, #0
 8017520:	dd07      	ble.n	8017532 <_strtod_l+0x782>
 8017522:	4631      	mov	r1, r6
 8017524:	9805      	ldr	r0, [sp, #20]
 8017526:	4642      	mov	r2, r8
 8017528:	f001 faba 	bl	8018aa0 <__lshift>
 801752c:	4606      	mov	r6, r0
 801752e:	2800      	cmp	r0, #0
 8017530:	d0d9      	beq.n	80174e6 <_strtod_l+0x736>
 8017532:	f1b9 0f00 	cmp.w	r9, #0
 8017536:	dd08      	ble.n	801754a <_strtod_l+0x79a>
 8017538:	4629      	mov	r1, r5
 801753a:	9805      	ldr	r0, [sp, #20]
 801753c:	464a      	mov	r2, r9
 801753e:	f001 faaf 	bl	8018aa0 <__lshift>
 8017542:	4605      	mov	r5, r0
 8017544:	2800      	cmp	r0, #0
 8017546:	f43f ae43 	beq.w	80171d0 <_strtod_l+0x420>
 801754a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801754c:	9805      	ldr	r0, [sp, #20]
 801754e:	4632      	mov	r2, r6
 8017550:	f001 fb2e 	bl	8018bb0 <__mdiff>
 8017554:	4604      	mov	r4, r0
 8017556:	2800      	cmp	r0, #0
 8017558:	f43f ae3a 	beq.w	80171d0 <_strtod_l+0x420>
 801755c:	2300      	movs	r3, #0
 801755e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8017562:	60c3      	str	r3, [r0, #12]
 8017564:	4629      	mov	r1, r5
 8017566:	f001 fb07 	bl	8018b78 <__mcmp>
 801756a:	2800      	cmp	r0, #0
 801756c:	da4e      	bge.n	801760c <_strtod_l+0x85c>
 801756e:	ea58 080a 	orrs.w	r8, r8, sl
 8017572:	d174      	bne.n	801765e <_strtod_l+0x8ae>
 8017574:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017578:	2b00      	cmp	r3, #0
 801757a:	d170      	bne.n	801765e <_strtod_l+0x8ae>
 801757c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017580:	0d1b      	lsrs	r3, r3, #20
 8017582:	051b      	lsls	r3, r3, #20
 8017584:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8017588:	d969      	bls.n	801765e <_strtod_l+0x8ae>
 801758a:	6963      	ldr	r3, [r4, #20]
 801758c:	b913      	cbnz	r3, 8017594 <_strtod_l+0x7e4>
 801758e:	6923      	ldr	r3, [r4, #16]
 8017590:	2b01      	cmp	r3, #1
 8017592:	dd64      	ble.n	801765e <_strtod_l+0x8ae>
 8017594:	4621      	mov	r1, r4
 8017596:	2201      	movs	r2, #1
 8017598:	9805      	ldr	r0, [sp, #20]
 801759a:	f001 fa81 	bl	8018aa0 <__lshift>
 801759e:	4629      	mov	r1, r5
 80175a0:	4604      	mov	r4, r0
 80175a2:	f001 fae9 	bl	8018b78 <__mcmp>
 80175a6:	2800      	cmp	r0, #0
 80175a8:	dd59      	ble.n	801765e <_strtod_l+0x8ae>
 80175aa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80175ae:	9a06      	ldr	r2, [sp, #24]
 80175b0:	0d1b      	lsrs	r3, r3, #20
 80175b2:	051b      	lsls	r3, r3, #20
 80175b4:	2a00      	cmp	r2, #0
 80175b6:	d070      	beq.n	801769a <_strtod_l+0x8ea>
 80175b8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80175bc:	d86d      	bhi.n	801769a <_strtod_l+0x8ea>
 80175be:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80175c2:	f67f ae99 	bls.w	80172f8 <_strtod_l+0x548>
 80175c6:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 80175f8 <_strtod_l+0x848>
 80175ca:	ec4b ab16 	vmov	d6, sl, fp
 80175ce:	4b0e      	ldr	r3, [pc, #56]	@ (8017608 <_strtod_l+0x858>)
 80175d0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80175d4:	ee17 2a90 	vmov	r2, s15
 80175d8:	4013      	ands	r3, r2
 80175da:	ec5b ab17 	vmov	sl, fp, d7
 80175de:	2b00      	cmp	r3, #0
 80175e0:	f47f ae01 	bne.w	80171e6 <_strtod_l+0x436>
 80175e4:	9a05      	ldr	r2, [sp, #20]
 80175e6:	2322      	movs	r3, #34	@ 0x22
 80175e8:	6013      	str	r3, [r2, #0]
 80175ea:	e5fc      	b.n	80171e6 <_strtod_l+0x436>
 80175ec:	f3af 8000 	nop.w
 80175f0:	ffc00000 	.word	0xffc00000
 80175f4:	41dfffff 	.word	0x41dfffff
 80175f8:	00000000 	.word	0x00000000
 80175fc:	39500000 	.word	0x39500000
 8017600:	08019dd0 	.word	0x08019dd0
 8017604:	fffffc02 	.word	0xfffffc02
 8017608:	7ff00000 	.word	0x7ff00000
 801760c:	46d9      	mov	r9, fp
 801760e:	d15d      	bne.n	80176cc <_strtod_l+0x91c>
 8017610:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017614:	f1b8 0f00 	cmp.w	r8, #0
 8017618:	d02a      	beq.n	8017670 <_strtod_l+0x8c0>
 801761a:	4aab      	ldr	r2, [pc, #684]	@ (80178c8 <_strtod_l+0xb18>)
 801761c:	4293      	cmp	r3, r2
 801761e:	d12a      	bne.n	8017676 <_strtod_l+0x8c6>
 8017620:	9b06      	ldr	r3, [sp, #24]
 8017622:	4652      	mov	r2, sl
 8017624:	b1fb      	cbz	r3, 8017666 <_strtod_l+0x8b6>
 8017626:	4ba9      	ldr	r3, [pc, #676]	@ (80178cc <_strtod_l+0xb1c>)
 8017628:	ea0b 0303 	and.w	r3, fp, r3
 801762c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8017630:	f04f 31ff 	mov.w	r1, #4294967295
 8017634:	d81a      	bhi.n	801766c <_strtod_l+0x8bc>
 8017636:	0d1b      	lsrs	r3, r3, #20
 8017638:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801763c:	fa01 f303 	lsl.w	r3, r1, r3
 8017640:	429a      	cmp	r2, r3
 8017642:	d118      	bne.n	8017676 <_strtod_l+0x8c6>
 8017644:	4ba2      	ldr	r3, [pc, #648]	@ (80178d0 <_strtod_l+0xb20>)
 8017646:	4599      	cmp	r9, r3
 8017648:	d102      	bne.n	8017650 <_strtod_l+0x8a0>
 801764a:	3201      	adds	r2, #1
 801764c:	f43f adc0 	beq.w	80171d0 <_strtod_l+0x420>
 8017650:	4b9e      	ldr	r3, [pc, #632]	@ (80178cc <_strtod_l+0xb1c>)
 8017652:	ea09 0303 	and.w	r3, r9, r3
 8017656:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 801765a:	f04f 0a00 	mov.w	sl, #0
 801765e:	9b06      	ldr	r3, [sp, #24]
 8017660:	2b00      	cmp	r3, #0
 8017662:	d1b0      	bne.n	80175c6 <_strtod_l+0x816>
 8017664:	e5bf      	b.n	80171e6 <_strtod_l+0x436>
 8017666:	f04f 33ff 	mov.w	r3, #4294967295
 801766a:	e7e9      	b.n	8017640 <_strtod_l+0x890>
 801766c:	460b      	mov	r3, r1
 801766e:	e7e7      	b.n	8017640 <_strtod_l+0x890>
 8017670:	ea53 030a 	orrs.w	r3, r3, sl
 8017674:	d099      	beq.n	80175aa <_strtod_l+0x7fa>
 8017676:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017678:	b1c3      	cbz	r3, 80176ac <_strtod_l+0x8fc>
 801767a:	ea13 0f09 	tst.w	r3, r9
 801767e:	d0ee      	beq.n	801765e <_strtod_l+0x8ae>
 8017680:	9a06      	ldr	r2, [sp, #24]
 8017682:	4650      	mov	r0, sl
 8017684:	4659      	mov	r1, fp
 8017686:	f1b8 0f00 	cmp.w	r8, #0
 801768a:	d013      	beq.n	80176b4 <_strtod_l+0x904>
 801768c:	f7ff fb73 	bl	8016d76 <sulp>
 8017690:	ee39 7b00 	vadd.f64	d7, d9, d0
 8017694:	ec5b ab17 	vmov	sl, fp, d7
 8017698:	e7e1      	b.n	801765e <_strtod_l+0x8ae>
 801769a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801769e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80176a2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80176a6:	f04f 3aff 	mov.w	sl, #4294967295
 80176aa:	e7d8      	b.n	801765e <_strtod_l+0x8ae>
 80176ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80176ae:	ea13 0f0a 	tst.w	r3, sl
 80176b2:	e7e4      	b.n	801767e <_strtod_l+0x8ce>
 80176b4:	f7ff fb5f 	bl	8016d76 <sulp>
 80176b8:	ee39 0b40 	vsub.f64	d0, d9, d0
 80176bc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80176c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176c4:	ec5b ab10 	vmov	sl, fp, d0
 80176c8:	d1c9      	bne.n	801765e <_strtod_l+0x8ae>
 80176ca:	e615      	b.n	80172f8 <_strtod_l+0x548>
 80176cc:	4629      	mov	r1, r5
 80176ce:	4620      	mov	r0, r4
 80176d0:	f001 fbca 	bl	8018e68 <__ratio>
 80176d4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 80176d8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80176dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176e0:	d85d      	bhi.n	801779e <_strtod_l+0x9ee>
 80176e2:	f1b8 0f00 	cmp.w	r8, #0
 80176e6:	d164      	bne.n	80177b2 <_strtod_l+0xa02>
 80176e8:	f1ba 0f00 	cmp.w	sl, #0
 80176ec:	d14b      	bne.n	8017786 <_strtod_l+0x9d6>
 80176ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80176f2:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	d160      	bne.n	80177bc <_strtod_l+0xa0c>
 80176fa:	eeb4 0bc8 	vcmpe.f64	d0, d8
 80176fe:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8017702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017706:	d401      	bmi.n	801770c <_strtod_l+0x95c>
 8017708:	ee20 8b08 	vmul.f64	d8, d0, d8
 801770c:	eeb1 ab48 	vneg.f64	d10, d8
 8017710:	486e      	ldr	r0, [pc, #440]	@ (80178cc <_strtod_l+0xb1c>)
 8017712:	4970      	ldr	r1, [pc, #448]	@ (80178d4 <_strtod_l+0xb24>)
 8017714:	ea09 0700 	and.w	r7, r9, r0
 8017718:	428f      	cmp	r7, r1
 801771a:	ec53 2b1a 	vmov	r2, r3, d10
 801771e:	d17d      	bne.n	801781c <_strtod_l+0xa6c>
 8017720:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8017724:	ec4b ab1c 	vmov	d12, sl, fp
 8017728:	eeb0 0b4c 	vmov.f64	d0, d12
 801772c:	f001 fad4 	bl	8018cd8 <__ulp>
 8017730:	4866      	ldr	r0, [pc, #408]	@ (80178cc <_strtod_l+0xb1c>)
 8017732:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8017736:	ee1c 3a90 	vmov	r3, s25
 801773a:	4a67      	ldr	r2, [pc, #412]	@ (80178d8 <_strtod_l+0xb28>)
 801773c:	ea03 0100 	and.w	r1, r3, r0
 8017740:	4291      	cmp	r1, r2
 8017742:	ec5b ab1c 	vmov	sl, fp, d12
 8017746:	d93c      	bls.n	80177c2 <_strtod_l+0xa12>
 8017748:	ee19 2a90 	vmov	r2, s19
 801774c:	4b60      	ldr	r3, [pc, #384]	@ (80178d0 <_strtod_l+0xb20>)
 801774e:	429a      	cmp	r2, r3
 8017750:	d104      	bne.n	801775c <_strtod_l+0x9ac>
 8017752:	ee19 3a10 	vmov	r3, s18
 8017756:	3301      	adds	r3, #1
 8017758:	f43f ad3a 	beq.w	80171d0 <_strtod_l+0x420>
 801775c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 80178d0 <_strtod_l+0xb20>
 8017760:	f04f 3aff 	mov.w	sl, #4294967295
 8017764:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017766:	9805      	ldr	r0, [sp, #20]
 8017768:	f000 ff82 	bl	8018670 <_Bfree>
 801776c:	9805      	ldr	r0, [sp, #20]
 801776e:	4631      	mov	r1, r6
 8017770:	f000 ff7e 	bl	8018670 <_Bfree>
 8017774:	9805      	ldr	r0, [sp, #20]
 8017776:	4629      	mov	r1, r5
 8017778:	f000 ff7a 	bl	8018670 <_Bfree>
 801777c:	9805      	ldr	r0, [sp, #20]
 801777e:	4621      	mov	r1, r4
 8017780:	f000 ff76 	bl	8018670 <_Bfree>
 8017784:	e625      	b.n	80173d2 <_strtod_l+0x622>
 8017786:	f1ba 0f01 	cmp.w	sl, #1
 801778a:	d103      	bne.n	8017794 <_strtod_l+0x9e4>
 801778c:	f1bb 0f00 	cmp.w	fp, #0
 8017790:	f43f adb2 	beq.w	80172f8 <_strtod_l+0x548>
 8017794:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8017798:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801779c:	e7b8      	b.n	8017710 <_strtod_l+0x960>
 801779e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80177a2:	ee20 8b08 	vmul.f64	d8, d0, d8
 80177a6:	f1b8 0f00 	cmp.w	r8, #0
 80177aa:	d0af      	beq.n	801770c <_strtod_l+0x95c>
 80177ac:	eeb0 ab48 	vmov.f64	d10, d8
 80177b0:	e7ae      	b.n	8017710 <_strtod_l+0x960>
 80177b2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 80177b6:	eeb0 8b4a 	vmov.f64	d8, d10
 80177ba:	e7a9      	b.n	8017710 <_strtod_l+0x960>
 80177bc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80177c0:	e7a6      	b.n	8017710 <_strtod_l+0x960>
 80177c2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80177c6:	9b06      	ldr	r3, [sp, #24]
 80177c8:	46d9      	mov	r9, fp
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	d1ca      	bne.n	8017764 <_strtod_l+0x9b4>
 80177ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80177d2:	0d1b      	lsrs	r3, r3, #20
 80177d4:	051b      	lsls	r3, r3, #20
 80177d6:	429f      	cmp	r7, r3
 80177d8:	d1c4      	bne.n	8017764 <_strtod_l+0x9b4>
 80177da:	ec51 0b18 	vmov	r0, r1, d8
 80177de:	f7e9 f80b 	bl	80007f8 <__aeabi_d2lz>
 80177e2:	f7e8 ff73 	bl	80006cc <__aeabi_l2d>
 80177e6:	f3cb 0913 	ubfx	r9, fp, #0, #20
 80177ea:	ec41 0b17 	vmov	d7, r0, r1
 80177ee:	ea49 090a 	orr.w	r9, r9, sl
 80177f2:	ea59 0908 	orrs.w	r9, r9, r8
 80177f6:	ee38 8b47 	vsub.f64	d8, d8, d7
 80177fa:	d03c      	beq.n	8017876 <_strtod_l+0xac6>
 80177fc:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80178b0 <_strtod_l+0xb00>
 8017800:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8017804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017808:	f53f aced 	bmi.w	80171e6 <_strtod_l+0x436>
 801780c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80178b8 <_strtod_l+0xb08>
 8017810:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8017814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017818:	dda4      	ble.n	8017764 <_strtod_l+0x9b4>
 801781a:	e4e4      	b.n	80171e6 <_strtod_l+0x436>
 801781c:	9906      	ldr	r1, [sp, #24]
 801781e:	b1e1      	cbz	r1, 801785a <_strtod_l+0xaaa>
 8017820:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8017824:	d819      	bhi.n	801785a <_strtod_l+0xaaa>
 8017826:	eeb4 8bcb 	vcmpe.f64	d8, d11
 801782a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801782e:	d811      	bhi.n	8017854 <_strtod_l+0xaa4>
 8017830:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8017834:	ee18 3a10 	vmov	r3, s16
 8017838:	2b01      	cmp	r3, #1
 801783a:	bf38      	it	cc
 801783c:	2301      	movcc	r3, #1
 801783e:	ee08 3a10 	vmov	s16, r3
 8017842:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8017846:	f1b8 0f00 	cmp.w	r8, #0
 801784a:	d111      	bne.n	8017870 <_strtod_l+0xac0>
 801784c:	eeb1 7b48 	vneg.f64	d7, d8
 8017850:	ec53 2b17 	vmov	r2, r3, d7
 8017854:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8017858:	1bcb      	subs	r3, r1, r7
 801785a:	eeb0 0b49 	vmov.f64	d0, d9
 801785e:	ec43 2b1a 	vmov	d10, r2, r3
 8017862:	f001 fa39 	bl	8018cd8 <__ulp>
 8017866:	eeaa 9b00 	vfma.f64	d9, d10, d0
 801786a:	ec5b ab19 	vmov	sl, fp, d9
 801786e:	e7aa      	b.n	80177c6 <_strtod_l+0xa16>
 8017870:	eeb0 7b48 	vmov.f64	d7, d8
 8017874:	e7ec      	b.n	8017850 <_strtod_l+0xaa0>
 8017876:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 80178c0 <_strtod_l+0xb10>
 801787a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801787e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017882:	f57f af6f 	bpl.w	8017764 <_strtod_l+0x9b4>
 8017886:	e4ae      	b.n	80171e6 <_strtod_l+0x436>
 8017888:	2300      	movs	r3, #0
 801788a:	9308      	str	r3, [sp, #32]
 801788c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801788e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017890:	6013      	str	r3, [r2, #0]
 8017892:	f7ff bacc 	b.w	8016e2e <_strtod_l+0x7e>
 8017896:	2a65      	cmp	r2, #101	@ 0x65
 8017898:	f43f abbc 	beq.w	8017014 <_strtod_l+0x264>
 801789c:	2a45      	cmp	r2, #69	@ 0x45
 801789e:	f43f abb9 	beq.w	8017014 <_strtod_l+0x264>
 80178a2:	2301      	movs	r3, #1
 80178a4:	9306      	str	r3, [sp, #24]
 80178a6:	f7ff bbf0 	b.w	801708a <_strtod_l+0x2da>
 80178aa:	bf00      	nop
 80178ac:	f3af 8000 	nop.w
 80178b0:	94a03595 	.word	0x94a03595
 80178b4:	3fdfffff 	.word	0x3fdfffff
 80178b8:	35afe535 	.word	0x35afe535
 80178bc:	3fe00000 	.word	0x3fe00000
 80178c0:	94a03595 	.word	0x94a03595
 80178c4:	3fcfffff 	.word	0x3fcfffff
 80178c8:	000fffff 	.word	0x000fffff
 80178cc:	7ff00000 	.word	0x7ff00000
 80178d0:	7fefffff 	.word	0x7fefffff
 80178d4:	7fe00000 	.word	0x7fe00000
 80178d8:	7c9fffff 	.word	0x7c9fffff

080178dc <strtod>:
 80178dc:	460a      	mov	r2, r1
 80178de:	4601      	mov	r1, r0
 80178e0:	4802      	ldr	r0, [pc, #8]	@ (80178ec <strtod+0x10>)
 80178e2:	4b03      	ldr	r3, [pc, #12]	@ (80178f0 <strtod+0x14>)
 80178e4:	6800      	ldr	r0, [r0, #0]
 80178e6:	f7ff ba63 	b.w	8016db0 <_strtod_l>
 80178ea:	bf00      	nop
 80178ec:	24000240 	.word	0x24000240
 80178f0:	240000d4 	.word	0x240000d4

080178f4 <_strtol_l.constprop.0>:
 80178f4:	2b24      	cmp	r3, #36	@ 0x24
 80178f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80178fa:	4686      	mov	lr, r0
 80178fc:	4690      	mov	r8, r2
 80178fe:	d801      	bhi.n	8017904 <_strtol_l.constprop.0+0x10>
 8017900:	2b01      	cmp	r3, #1
 8017902:	d106      	bne.n	8017912 <_strtol_l.constprop.0+0x1e>
 8017904:	f000 f9ec 	bl	8017ce0 <__errno>
 8017908:	2316      	movs	r3, #22
 801790a:	6003      	str	r3, [r0, #0]
 801790c:	2000      	movs	r0, #0
 801790e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017912:	4834      	ldr	r0, [pc, #208]	@ (80179e4 <_strtol_l.constprop.0+0xf0>)
 8017914:	460d      	mov	r5, r1
 8017916:	462a      	mov	r2, r5
 8017918:	f815 4b01 	ldrb.w	r4, [r5], #1
 801791c:	5d06      	ldrb	r6, [r0, r4]
 801791e:	f016 0608 	ands.w	r6, r6, #8
 8017922:	d1f8      	bne.n	8017916 <_strtol_l.constprop.0+0x22>
 8017924:	2c2d      	cmp	r4, #45	@ 0x2d
 8017926:	d12d      	bne.n	8017984 <_strtol_l.constprop.0+0x90>
 8017928:	782c      	ldrb	r4, [r5, #0]
 801792a:	2601      	movs	r6, #1
 801792c:	1c95      	adds	r5, r2, #2
 801792e:	f033 0210 	bics.w	r2, r3, #16
 8017932:	d109      	bne.n	8017948 <_strtol_l.constprop.0+0x54>
 8017934:	2c30      	cmp	r4, #48	@ 0x30
 8017936:	d12a      	bne.n	801798e <_strtol_l.constprop.0+0x9a>
 8017938:	782a      	ldrb	r2, [r5, #0]
 801793a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801793e:	2a58      	cmp	r2, #88	@ 0x58
 8017940:	d125      	bne.n	801798e <_strtol_l.constprop.0+0x9a>
 8017942:	786c      	ldrb	r4, [r5, #1]
 8017944:	2310      	movs	r3, #16
 8017946:	3502      	adds	r5, #2
 8017948:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801794c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017950:	2200      	movs	r2, #0
 8017952:	fbbc f9f3 	udiv	r9, ip, r3
 8017956:	4610      	mov	r0, r2
 8017958:	fb03 ca19 	mls	sl, r3, r9, ip
 801795c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8017960:	2f09      	cmp	r7, #9
 8017962:	d81b      	bhi.n	801799c <_strtol_l.constprop.0+0xa8>
 8017964:	463c      	mov	r4, r7
 8017966:	42a3      	cmp	r3, r4
 8017968:	dd27      	ble.n	80179ba <_strtol_l.constprop.0+0xc6>
 801796a:	1c57      	adds	r7, r2, #1
 801796c:	d007      	beq.n	801797e <_strtol_l.constprop.0+0x8a>
 801796e:	4581      	cmp	r9, r0
 8017970:	d320      	bcc.n	80179b4 <_strtol_l.constprop.0+0xc0>
 8017972:	d101      	bne.n	8017978 <_strtol_l.constprop.0+0x84>
 8017974:	45a2      	cmp	sl, r4
 8017976:	db1d      	blt.n	80179b4 <_strtol_l.constprop.0+0xc0>
 8017978:	fb00 4003 	mla	r0, r0, r3, r4
 801797c:	2201      	movs	r2, #1
 801797e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017982:	e7eb      	b.n	801795c <_strtol_l.constprop.0+0x68>
 8017984:	2c2b      	cmp	r4, #43	@ 0x2b
 8017986:	bf04      	itt	eq
 8017988:	782c      	ldrbeq	r4, [r5, #0]
 801798a:	1c95      	addeq	r5, r2, #2
 801798c:	e7cf      	b.n	801792e <_strtol_l.constprop.0+0x3a>
 801798e:	2b00      	cmp	r3, #0
 8017990:	d1da      	bne.n	8017948 <_strtol_l.constprop.0+0x54>
 8017992:	2c30      	cmp	r4, #48	@ 0x30
 8017994:	bf0c      	ite	eq
 8017996:	2308      	moveq	r3, #8
 8017998:	230a      	movne	r3, #10
 801799a:	e7d5      	b.n	8017948 <_strtol_l.constprop.0+0x54>
 801799c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80179a0:	2f19      	cmp	r7, #25
 80179a2:	d801      	bhi.n	80179a8 <_strtol_l.constprop.0+0xb4>
 80179a4:	3c37      	subs	r4, #55	@ 0x37
 80179a6:	e7de      	b.n	8017966 <_strtol_l.constprop.0+0x72>
 80179a8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80179ac:	2f19      	cmp	r7, #25
 80179ae:	d804      	bhi.n	80179ba <_strtol_l.constprop.0+0xc6>
 80179b0:	3c57      	subs	r4, #87	@ 0x57
 80179b2:	e7d8      	b.n	8017966 <_strtol_l.constprop.0+0x72>
 80179b4:	f04f 32ff 	mov.w	r2, #4294967295
 80179b8:	e7e1      	b.n	801797e <_strtol_l.constprop.0+0x8a>
 80179ba:	1c53      	adds	r3, r2, #1
 80179bc:	d108      	bne.n	80179d0 <_strtol_l.constprop.0+0xdc>
 80179be:	2322      	movs	r3, #34	@ 0x22
 80179c0:	f8ce 3000 	str.w	r3, [lr]
 80179c4:	4660      	mov	r0, ip
 80179c6:	f1b8 0f00 	cmp.w	r8, #0
 80179ca:	d0a0      	beq.n	801790e <_strtol_l.constprop.0+0x1a>
 80179cc:	1e69      	subs	r1, r5, #1
 80179ce:	e006      	b.n	80179de <_strtol_l.constprop.0+0xea>
 80179d0:	b106      	cbz	r6, 80179d4 <_strtol_l.constprop.0+0xe0>
 80179d2:	4240      	negs	r0, r0
 80179d4:	f1b8 0f00 	cmp.w	r8, #0
 80179d8:	d099      	beq.n	801790e <_strtol_l.constprop.0+0x1a>
 80179da:	2a00      	cmp	r2, #0
 80179dc:	d1f6      	bne.n	80179cc <_strtol_l.constprop.0+0xd8>
 80179de:	f8c8 1000 	str.w	r1, [r8]
 80179e2:	e794      	b.n	801790e <_strtol_l.constprop.0+0x1a>
 80179e4:	08019df9 	.word	0x08019df9

080179e8 <strtol>:
 80179e8:	4613      	mov	r3, r2
 80179ea:	460a      	mov	r2, r1
 80179ec:	4601      	mov	r1, r0
 80179ee:	4802      	ldr	r0, [pc, #8]	@ (80179f8 <strtol+0x10>)
 80179f0:	6800      	ldr	r0, [r0, #0]
 80179f2:	f7ff bf7f 	b.w	80178f4 <_strtol_l.constprop.0>
 80179f6:	bf00      	nop
 80179f8:	24000240 	.word	0x24000240

080179fc <std>:
 80179fc:	2300      	movs	r3, #0
 80179fe:	b510      	push	{r4, lr}
 8017a00:	4604      	mov	r4, r0
 8017a02:	e9c0 3300 	strd	r3, r3, [r0]
 8017a06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017a0a:	6083      	str	r3, [r0, #8]
 8017a0c:	8181      	strh	r1, [r0, #12]
 8017a0e:	6643      	str	r3, [r0, #100]	@ 0x64
 8017a10:	81c2      	strh	r2, [r0, #14]
 8017a12:	6183      	str	r3, [r0, #24]
 8017a14:	4619      	mov	r1, r3
 8017a16:	2208      	movs	r2, #8
 8017a18:	305c      	adds	r0, #92	@ 0x5c
 8017a1a:	f000 f8f4 	bl	8017c06 <memset>
 8017a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8017a54 <std+0x58>)
 8017a20:	6263      	str	r3, [r4, #36]	@ 0x24
 8017a22:	4b0d      	ldr	r3, [pc, #52]	@ (8017a58 <std+0x5c>)
 8017a24:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017a26:	4b0d      	ldr	r3, [pc, #52]	@ (8017a5c <std+0x60>)
 8017a28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8017a60 <std+0x64>)
 8017a2c:	6323      	str	r3, [r4, #48]	@ 0x30
 8017a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8017a64 <std+0x68>)
 8017a30:	6224      	str	r4, [r4, #32]
 8017a32:	429c      	cmp	r4, r3
 8017a34:	d006      	beq.n	8017a44 <std+0x48>
 8017a36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8017a3a:	4294      	cmp	r4, r2
 8017a3c:	d002      	beq.n	8017a44 <std+0x48>
 8017a3e:	33d0      	adds	r3, #208	@ 0xd0
 8017a40:	429c      	cmp	r4, r3
 8017a42:	d105      	bne.n	8017a50 <std+0x54>
 8017a44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017a4c:	f000 b972 	b.w	8017d34 <__retarget_lock_init_recursive>
 8017a50:	bd10      	pop	{r4, pc}
 8017a52:	bf00      	nop
 8017a54:	08017b81 	.word	0x08017b81
 8017a58:	08017ba3 	.word	0x08017ba3
 8017a5c:	08017bdb 	.word	0x08017bdb
 8017a60:	08017bff 	.word	0x08017bff
 8017a64:	240067f8 	.word	0x240067f8

08017a68 <stdio_exit_handler>:
 8017a68:	4a02      	ldr	r2, [pc, #8]	@ (8017a74 <stdio_exit_handler+0xc>)
 8017a6a:	4903      	ldr	r1, [pc, #12]	@ (8017a78 <stdio_exit_handler+0x10>)
 8017a6c:	4803      	ldr	r0, [pc, #12]	@ (8017a7c <stdio_exit_handler+0x14>)
 8017a6e:	f000 b869 	b.w	8017b44 <_fwalk_sglue>
 8017a72:	bf00      	nop
 8017a74:	240000c8 	.word	0x240000c8
 8017a78:	08019071 	.word	0x08019071
 8017a7c:	24000244 	.word	0x24000244

08017a80 <cleanup_stdio>:
 8017a80:	6841      	ldr	r1, [r0, #4]
 8017a82:	4b0c      	ldr	r3, [pc, #48]	@ (8017ab4 <cleanup_stdio+0x34>)
 8017a84:	4299      	cmp	r1, r3
 8017a86:	b510      	push	{r4, lr}
 8017a88:	4604      	mov	r4, r0
 8017a8a:	d001      	beq.n	8017a90 <cleanup_stdio+0x10>
 8017a8c:	f001 faf0 	bl	8019070 <_fflush_r>
 8017a90:	68a1      	ldr	r1, [r4, #8]
 8017a92:	4b09      	ldr	r3, [pc, #36]	@ (8017ab8 <cleanup_stdio+0x38>)
 8017a94:	4299      	cmp	r1, r3
 8017a96:	d002      	beq.n	8017a9e <cleanup_stdio+0x1e>
 8017a98:	4620      	mov	r0, r4
 8017a9a:	f001 fae9 	bl	8019070 <_fflush_r>
 8017a9e:	68e1      	ldr	r1, [r4, #12]
 8017aa0:	4b06      	ldr	r3, [pc, #24]	@ (8017abc <cleanup_stdio+0x3c>)
 8017aa2:	4299      	cmp	r1, r3
 8017aa4:	d004      	beq.n	8017ab0 <cleanup_stdio+0x30>
 8017aa6:	4620      	mov	r0, r4
 8017aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017aac:	f001 bae0 	b.w	8019070 <_fflush_r>
 8017ab0:	bd10      	pop	{r4, pc}
 8017ab2:	bf00      	nop
 8017ab4:	240067f8 	.word	0x240067f8
 8017ab8:	24006860 	.word	0x24006860
 8017abc:	240068c8 	.word	0x240068c8

08017ac0 <global_stdio_init.part.0>:
 8017ac0:	b510      	push	{r4, lr}
 8017ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8017af0 <global_stdio_init.part.0+0x30>)
 8017ac4:	4c0b      	ldr	r4, [pc, #44]	@ (8017af4 <global_stdio_init.part.0+0x34>)
 8017ac6:	4a0c      	ldr	r2, [pc, #48]	@ (8017af8 <global_stdio_init.part.0+0x38>)
 8017ac8:	601a      	str	r2, [r3, #0]
 8017aca:	4620      	mov	r0, r4
 8017acc:	2200      	movs	r2, #0
 8017ace:	2104      	movs	r1, #4
 8017ad0:	f7ff ff94 	bl	80179fc <std>
 8017ad4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017ad8:	2201      	movs	r2, #1
 8017ada:	2109      	movs	r1, #9
 8017adc:	f7ff ff8e 	bl	80179fc <std>
 8017ae0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017ae4:	2202      	movs	r2, #2
 8017ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017aea:	2112      	movs	r1, #18
 8017aec:	f7ff bf86 	b.w	80179fc <std>
 8017af0:	24006930 	.word	0x24006930
 8017af4:	240067f8 	.word	0x240067f8
 8017af8:	08017a69 	.word	0x08017a69

08017afc <__sfp_lock_acquire>:
 8017afc:	4801      	ldr	r0, [pc, #4]	@ (8017b04 <__sfp_lock_acquire+0x8>)
 8017afe:	f000 b91a 	b.w	8017d36 <__retarget_lock_acquire_recursive>
 8017b02:	bf00      	nop
 8017b04:	24006939 	.word	0x24006939

08017b08 <__sfp_lock_release>:
 8017b08:	4801      	ldr	r0, [pc, #4]	@ (8017b10 <__sfp_lock_release+0x8>)
 8017b0a:	f000 b915 	b.w	8017d38 <__retarget_lock_release_recursive>
 8017b0e:	bf00      	nop
 8017b10:	24006939 	.word	0x24006939

08017b14 <__sinit>:
 8017b14:	b510      	push	{r4, lr}
 8017b16:	4604      	mov	r4, r0
 8017b18:	f7ff fff0 	bl	8017afc <__sfp_lock_acquire>
 8017b1c:	6a23      	ldr	r3, [r4, #32]
 8017b1e:	b11b      	cbz	r3, 8017b28 <__sinit+0x14>
 8017b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b24:	f7ff bff0 	b.w	8017b08 <__sfp_lock_release>
 8017b28:	4b04      	ldr	r3, [pc, #16]	@ (8017b3c <__sinit+0x28>)
 8017b2a:	6223      	str	r3, [r4, #32]
 8017b2c:	4b04      	ldr	r3, [pc, #16]	@ (8017b40 <__sinit+0x2c>)
 8017b2e:	681b      	ldr	r3, [r3, #0]
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	d1f5      	bne.n	8017b20 <__sinit+0xc>
 8017b34:	f7ff ffc4 	bl	8017ac0 <global_stdio_init.part.0>
 8017b38:	e7f2      	b.n	8017b20 <__sinit+0xc>
 8017b3a:	bf00      	nop
 8017b3c:	08017a81 	.word	0x08017a81
 8017b40:	24006930 	.word	0x24006930

08017b44 <_fwalk_sglue>:
 8017b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017b48:	4607      	mov	r7, r0
 8017b4a:	4688      	mov	r8, r1
 8017b4c:	4614      	mov	r4, r2
 8017b4e:	2600      	movs	r6, #0
 8017b50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017b54:	f1b9 0901 	subs.w	r9, r9, #1
 8017b58:	d505      	bpl.n	8017b66 <_fwalk_sglue+0x22>
 8017b5a:	6824      	ldr	r4, [r4, #0]
 8017b5c:	2c00      	cmp	r4, #0
 8017b5e:	d1f7      	bne.n	8017b50 <_fwalk_sglue+0xc>
 8017b60:	4630      	mov	r0, r6
 8017b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017b66:	89ab      	ldrh	r3, [r5, #12]
 8017b68:	2b01      	cmp	r3, #1
 8017b6a:	d907      	bls.n	8017b7c <_fwalk_sglue+0x38>
 8017b6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017b70:	3301      	adds	r3, #1
 8017b72:	d003      	beq.n	8017b7c <_fwalk_sglue+0x38>
 8017b74:	4629      	mov	r1, r5
 8017b76:	4638      	mov	r0, r7
 8017b78:	47c0      	blx	r8
 8017b7a:	4306      	orrs	r6, r0
 8017b7c:	3568      	adds	r5, #104	@ 0x68
 8017b7e:	e7e9      	b.n	8017b54 <_fwalk_sglue+0x10>

08017b80 <__sread>:
 8017b80:	b510      	push	{r4, lr}
 8017b82:	460c      	mov	r4, r1
 8017b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b88:	f000 f886 	bl	8017c98 <_read_r>
 8017b8c:	2800      	cmp	r0, #0
 8017b8e:	bfab      	itete	ge
 8017b90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017b92:	89a3      	ldrhlt	r3, [r4, #12]
 8017b94:	181b      	addge	r3, r3, r0
 8017b96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017b9a:	bfac      	ite	ge
 8017b9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017b9e:	81a3      	strhlt	r3, [r4, #12]
 8017ba0:	bd10      	pop	{r4, pc}

08017ba2 <__swrite>:
 8017ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ba6:	461f      	mov	r7, r3
 8017ba8:	898b      	ldrh	r3, [r1, #12]
 8017baa:	05db      	lsls	r3, r3, #23
 8017bac:	4605      	mov	r5, r0
 8017bae:	460c      	mov	r4, r1
 8017bb0:	4616      	mov	r6, r2
 8017bb2:	d505      	bpl.n	8017bc0 <__swrite+0x1e>
 8017bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017bb8:	2302      	movs	r3, #2
 8017bba:	2200      	movs	r2, #0
 8017bbc:	f000 f85a 	bl	8017c74 <_lseek_r>
 8017bc0:	89a3      	ldrh	r3, [r4, #12]
 8017bc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017bc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017bca:	81a3      	strh	r3, [r4, #12]
 8017bcc:	4632      	mov	r2, r6
 8017bce:	463b      	mov	r3, r7
 8017bd0:	4628      	mov	r0, r5
 8017bd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017bd6:	f000 b871 	b.w	8017cbc <_write_r>

08017bda <__sseek>:
 8017bda:	b510      	push	{r4, lr}
 8017bdc:	460c      	mov	r4, r1
 8017bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017be2:	f000 f847 	bl	8017c74 <_lseek_r>
 8017be6:	1c43      	adds	r3, r0, #1
 8017be8:	89a3      	ldrh	r3, [r4, #12]
 8017bea:	bf15      	itete	ne
 8017bec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017bee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017bf2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017bf6:	81a3      	strheq	r3, [r4, #12]
 8017bf8:	bf18      	it	ne
 8017bfa:	81a3      	strhne	r3, [r4, #12]
 8017bfc:	bd10      	pop	{r4, pc}

08017bfe <__sclose>:
 8017bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c02:	f000 b827 	b.w	8017c54 <_close_r>

08017c06 <memset>:
 8017c06:	4402      	add	r2, r0
 8017c08:	4603      	mov	r3, r0
 8017c0a:	4293      	cmp	r3, r2
 8017c0c:	d100      	bne.n	8017c10 <memset+0xa>
 8017c0e:	4770      	bx	lr
 8017c10:	f803 1b01 	strb.w	r1, [r3], #1
 8017c14:	e7f9      	b.n	8017c0a <memset+0x4>

08017c16 <strchr>:
 8017c16:	b2c9      	uxtb	r1, r1
 8017c18:	4603      	mov	r3, r0
 8017c1a:	4618      	mov	r0, r3
 8017c1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017c20:	b112      	cbz	r2, 8017c28 <strchr+0x12>
 8017c22:	428a      	cmp	r2, r1
 8017c24:	d1f9      	bne.n	8017c1a <strchr+0x4>
 8017c26:	4770      	bx	lr
 8017c28:	2900      	cmp	r1, #0
 8017c2a:	bf18      	it	ne
 8017c2c:	2000      	movne	r0, #0
 8017c2e:	4770      	bx	lr

08017c30 <strncmp>:
 8017c30:	b510      	push	{r4, lr}
 8017c32:	b16a      	cbz	r2, 8017c50 <strncmp+0x20>
 8017c34:	3901      	subs	r1, #1
 8017c36:	1884      	adds	r4, r0, r2
 8017c38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017c3c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017c40:	429a      	cmp	r2, r3
 8017c42:	d103      	bne.n	8017c4c <strncmp+0x1c>
 8017c44:	42a0      	cmp	r0, r4
 8017c46:	d001      	beq.n	8017c4c <strncmp+0x1c>
 8017c48:	2a00      	cmp	r2, #0
 8017c4a:	d1f5      	bne.n	8017c38 <strncmp+0x8>
 8017c4c:	1ad0      	subs	r0, r2, r3
 8017c4e:	bd10      	pop	{r4, pc}
 8017c50:	4610      	mov	r0, r2
 8017c52:	e7fc      	b.n	8017c4e <strncmp+0x1e>

08017c54 <_close_r>:
 8017c54:	b538      	push	{r3, r4, r5, lr}
 8017c56:	4d06      	ldr	r5, [pc, #24]	@ (8017c70 <_close_r+0x1c>)
 8017c58:	2300      	movs	r3, #0
 8017c5a:	4604      	mov	r4, r0
 8017c5c:	4608      	mov	r0, r1
 8017c5e:	602b      	str	r3, [r5, #0]
 8017c60:	f7eb fd1a 	bl	8003698 <_close>
 8017c64:	1c43      	adds	r3, r0, #1
 8017c66:	d102      	bne.n	8017c6e <_close_r+0x1a>
 8017c68:	682b      	ldr	r3, [r5, #0]
 8017c6a:	b103      	cbz	r3, 8017c6e <_close_r+0x1a>
 8017c6c:	6023      	str	r3, [r4, #0]
 8017c6e:	bd38      	pop	{r3, r4, r5, pc}
 8017c70:	24006934 	.word	0x24006934

08017c74 <_lseek_r>:
 8017c74:	b538      	push	{r3, r4, r5, lr}
 8017c76:	4d07      	ldr	r5, [pc, #28]	@ (8017c94 <_lseek_r+0x20>)
 8017c78:	4604      	mov	r4, r0
 8017c7a:	4608      	mov	r0, r1
 8017c7c:	4611      	mov	r1, r2
 8017c7e:	2200      	movs	r2, #0
 8017c80:	602a      	str	r2, [r5, #0]
 8017c82:	461a      	mov	r2, r3
 8017c84:	f7eb fd2f 	bl	80036e6 <_lseek>
 8017c88:	1c43      	adds	r3, r0, #1
 8017c8a:	d102      	bne.n	8017c92 <_lseek_r+0x1e>
 8017c8c:	682b      	ldr	r3, [r5, #0]
 8017c8e:	b103      	cbz	r3, 8017c92 <_lseek_r+0x1e>
 8017c90:	6023      	str	r3, [r4, #0]
 8017c92:	bd38      	pop	{r3, r4, r5, pc}
 8017c94:	24006934 	.word	0x24006934

08017c98 <_read_r>:
 8017c98:	b538      	push	{r3, r4, r5, lr}
 8017c9a:	4d07      	ldr	r5, [pc, #28]	@ (8017cb8 <_read_r+0x20>)
 8017c9c:	4604      	mov	r4, r0
 8017c9e:	4608      	mov	r0, r1
 8017ca0:	4611      	mov	r1, r2
 8017ca2:	2200      	movs	r2, #0
 8017ca4:	602a      	str	r2, [r5, #0]
 8017ca6:	461a      	mov	r2, r3
 8017ca8:	f7eb fcbd 	bl	8003626 <_read>
 8017cac:	1c43      	adds	r3, r0, #1
 8017cae:	d102      	bne.n	8017cb6 <_read_r+0x1e>
 8017cb0:	682b      	ldr	r3, [r5, #0]
 8017cb2:	b103      	cbz	r3, 8017cb6 <_read_r+0x1e>
 8017cb4:	6023      	str	r3, [r4, #0]
 8017cb6:	bd38      	pop	{r3, r4, r5, pc}
 8017cb8:	24006934 	.word	0x24006934

08017cbc <_write_r>:
 8017cbc:	b538      	push	{r3, r4, r5, lr}
 8017cbe:	4d07      	ldr	r5, [pc, #28]	@ (8017cdc <_write_r+0x20>)
 8017cc0:	4604      	mov	r4, r0
 8017cc2:	4608      	mov	r0, r1
 8017cc4:	4611      	mov	r1, r2
 8017cc6:	2200      	movs	r2, #0
 8017cc8:	602a      	str	r2, [r5, #0]
 8017cca:	461a      	mov	r2, r3
 8017ccc:	f7eb fcc8 	bl	8003660 <_write>
 8017cd0:	1c43      	adds	r3, r0, #1
 8017cd2:	d102      	bne.n	8017cda <_write_r+0x1e>
 8017cd4:	682b      	ldr	r3, [r5, #0]
 8017cd6:	b103      	cbz	r3, 8017cda <_write_r+0x1e>
 8017cd8:	6023      	str	r3, [r4, #0]
 8017cda:	bd38      	pop	{r3, r4, r5, pc}
 8017cdc:	24006934 	.word	0x24006934

08017ce0 <__errno>:
 8017ce0:	4b01      	ldr	r3, [pc, #4]	@ (8017ce8 <__errno+0x8>)
 8017ce2:	6818      	ldr	r0, [r3, #0]
 8017ce4:	4770      	bx	lr
 8017ce6:	bf00      	nop
 8017ce8:	24000240 	.word	0x24000240

08017cec <__libc_init_array>:
 8017cec:	b570      	push	{r4, r5, r6, lr}
 8017cee:	4d0d      	ldr	r5, [pc, #52]	@ (8017d24 <__libc_init_array+0x38>)
 8017cf0:	4c0d      	ldr	r4, [pc, #52]	@ (8017d28 <__libc_init_array+0x3c>)
 8017cf2:	1b64      	subs	r4, r4, r5
 8017cf4:	10a4      	asrs	r4, r4, #2
 8017cf6:	2600      	movs	r6, #0
 8017cf8:	42a6      	cmp	r6, r4
 8017cfa:	d109      	bne.n	8017d10 <__libc_init_array+0x24>
 8017cfc:	4d0b      	ldr	r5, [pc, #44]	@ (8017d2c <__libc_init_array+0x40>)
 8017cfe:	4c0c      	ldr	r4, [pc, #48]	@ (8017d30 <__libc_init_array+0x44>)
 8017d00:	f001 ff9a 	bl	8019c38 <_init>
 8017d04:	1b64      	subs	r4, r4, r5
 8017d06:	10a4      	asrs	r4, r4, #2
 8017d08:	2600      	movs	r6, #0
 8017d0a:	42a6      	cmp	r6, r4
 8017d0c:	d105      	bne.n	8017d1a <__libc_init_array+0x2e>
 8017d0e:	bd70      	pop	{r4, r5, r6, pc}
 8017d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8017d14:	4798      	blx	r3
 8017d16:	3601      	adds	r6, #1
 8017d18:	e7ee      	b.n	8017cf8 <__libc_init_array+0xc>
 8017d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8017d1e:	4798      	blx	r3
 8017d20:	3601      	adds	r6, #1
 8017d22:	e7f2      	b.n	8017d0a <__libc_init_array+0x1e>
 8017d24:	0801a9e8 	.word	0x0801a9e8
 8017d28:	0801a9e8 	.word	0x0801a9e8
 8017d2c:	0801a9e8 	.word	0x0801a9e8
 8017d30:	0801a9ec 	.word	0x0801a9ec

08017d34 <__retarget_lock_init_recursive>:
 8017d34:	4770      	bx	lr

08017d36 <__retarget_lock_acquire_recursive>:
 8017d36:	4770      	bx	lr

08017d38 <__retarget_lock_release_recursive>:
 8017d38:	4770      	bx	lr

08017d3a <memcpy>:
 8017d3a:	440a      	add	r2, r1
 8017d3c:	4291      	cmp	r1, r2
 8017d3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8017d42:	d100      	bne.n	8017d46 <memcpy+0xc>
 8017d44:	4770      	bx	lr
 8017d46:	b510      	push	{r4, lr}
 8017d48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017d4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017d50:	4291      	cmp	r1, r2
 8017d52:	d1f9      	bne.n	8017d48 <memcpy+0xe>
 8017d54:	bd10      	pop	{r4, pc}
	...

08017d58 <nan>:
 8017d58:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8017d60 <nan+0x8>
 8017d5c:	4770      	bx	lr
 8017d5e:	bf00      	nop
 8017d60:	00000000 	.word	0x00000000
 8017d64:	7ff80000 	.word	0x7ff80000

08017d68 <_free_r>:
 8017d68:	b538      	push	{r3, r4, r5, lr}
 8017d6a:	4605      	mov	r5, r0
 8017d6c:	2900      	cmp	r1, #0
 8017d6e:	d041      	beq.n	8017df4 <_free_r+0x8c>
 8017d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017d74:	1f0c      	subs	r4, r1, #4
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	bfb8      	it	lt
 8017d7a:	18e4      	addlt	r4, r4, r3
 8017d7c:	f000 fc2c 	bl	80185d8 <__malloc_lock>
 8017d80:	4a1d      	ldr	r2, [pc, #116]	@ (8017df8 <_free_r+0x90>)
 8017d82:	6813      	ldr	r3, [r2, #0]
 8017d84:	b933      	cbnz	r3, 8017d94 <_free_r+0x2c>
 8017d86:	6063      	str	r3, [r4, #4]
 8017d88:	6014      	str	r4, [r2, #0]
 8017d8a:	4628      	mov	r0, r5
 8017d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017d90:	f000 bc28 	b.w	80185e4 <__malloc_unlock>
 8017d94:	42a3      	cmp	r3, r4
 8017d96:	d908      	bls.n	8017daa <_free_r+0x42>
 8017d98:	6820      	ldr	r0, [r4, #0]
 8017d9a:	1821      	adds	r1, r4, r0
 8017d9c:	428b      	cmp	r3, r1
 8017d9e:	bf01      	itttt	eq
 8017da0:	6819      	ldreq	r1, [r3, #0]
 8017da2:	685b      	ldreq	r3, [r3, #4]
 8017da4:	1809      	addeq	r1, r1, r0
 8017da6:	6021      	streq	r1, [r4, #0]
 8017da8:	e7ed      	b.n	8017d86 <_free_r+0x1e>
 8017daa:	461a      	mov	r2, r3
 8017dac:	685b      	ldr	r3, [r3, #4]
 8017dae:	b10b      	cbz	r3, 8017db4 <_free_r+0x4c>
 8017db0:	42a3      	cmp	r3, r4
 8017db2:	d9fa      	bls.n	8017daa <_free_r+0x42>
 8017db4:	6811      	ldr	r1, [r2, #0]
 8017db6:	1850      	adds	r0, r2, r1
 8017db8:	42a0      	cmp	r0, r4
 8017dba:	d10b      	bne.n	8017dd4 <_free_r+0x6c>
 8017dbc:	6820      	ldr	r0, [r4, #0]
 8017dbe:	4401      	add	r1, r0
 8017dc0:	1850      	adds	r0, r2, r1
 8017dc2:	4283      	cmp	r3, r0
 8017dc4:	6011      	str	r1, [r2, #0]
 8017dc6:	d1e0      	bne.n	8017d8a <_free_r+0x22>
 8017dc8:	6818      	ldr	r0, [r3, #0]
 8017dca:	685b      	ldr	r3, [r3, #4]
 8017dcc:	6053      	str	r3, [r2, #4]
 8017dce:	4408      	add	r0, r1
 8017dd0:	6010      	str	r0, [r2, #0]
 8017dd2:	e7da      	b.n	8017d8a <_free_r+0x22>
 8017dd4:	d902      	bls.n	8017ddc <_free_r+0x74>
 8017dd6:	230c      	movs	r3, #12
 8017dd8:	602b      	str	r3, [r5, #0]
 8017dda:	e7d6      	b.n	8017d8a <_free_r+0x22>
 8017ddc:	6820      	ldr	r0, [r4, #0]
 8017dde:	1821      	adds	r1, r4, r0
 8017de0:	428b      	cmp	r3, r1
 8017de2:	bf04      	itt	eq
 8017de4:	6819      	ldreq	r1, [r3, #0]
 8017de6:	685b      	ldreq	r3, [r3, #4]
 8017de8:	6063      	str	r3, [r4, #4]
 8017dea:	bf04      	itt	eq
 8017dec:	1809      	addeq	r1, r1, r0
 8017dee:	6021      	streq	r1, [r4, #0]
 8017df0:	6054      	str	r4, [r2, #4]
 8017df2:	e7ca      	b.n	8017d8a <_free_r+0x22>
 8017df4:	bd38      	pop	{r3, r4, r5, pc}
 8017df6:	bf00      	nop
 8017df8:	24006940 	.word	0x24006940

08017dfc <rshift>:
 8017dfc:	6903      	ldr	r3, [r0, #16]
 8017dfe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017e02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017e06:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017e0a:	f100 0414 	add.w	r4, r0, #20
 8017e0e:	dd45      	ble.n	8017e9c <rshift+0xa0>
 8017e10:	f011 011f 	ands.w	r1, r1, #31
 8017e14:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017e18:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017e1c:	d10c      	bne.n	8017e38 <rshift+0x3c>
 8017e1e:	f100 0710 	add.w	r7, r0, #16
 8017e22:	4629      	mov	r1, r5
 8017e24:	42b1      	cmp	r1, r6
 8017e26:	d334      	bcc.n	8017e92 <rshift+0x96>
 8017e28:	1a9b      	subs	r3, r3, r2
 8017e2a:	009b      	lsls	r3, r3, #2
 8017e2c:	1eea      	subs	r2, r5, #3
 8017e2e:	4296      	cmp	r6, r2
 8017e30:	bf38      	it	cc
 8017e32:	2300      	movcc	r3, #0
 8017e34:	4423      	add	r3, r4
 8017e36:	e015      	b.n	8017e64 <rshift+0x68>
 8017e38:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017e3c:	f1c1 0820 	rsb	r8, r1, #32
 8017e40:	40cf      	lsrs	r7, r1
 8017e42:	f105 0e04 	add.w	lr, r5, #4
 8017e46:	46a1      	mov	r9, r4
 8017e48:	4576      	cmp	r6, lr
 8017e4a:	46f4      	mov	ip, lr
 8017e4c:	d815      	bhi.n	8017e7a <rshift+0x7e>
 8017e4e:	1a9a      	subs	r2, r3, r2
 8017e50:	0092      	lsls	r2, r2, #2
 8017e52:	3a04      	subs	r2, #4
 8017e54:	3501      	adds	r5, #1
 8017e56:	42ae      	cmp	r6, r5
 8017e58:	bf38      	it	cc
 8017e5a:	2200      	movcc	r2, #0
 8017e5c:	18a3      	adds	r3, r4, r2
 8017e5e:	50a7      	str	r7, [r4, r2]
 8017e60:	b107      	cbz	r7, 8017e64 <rshift+0x68>
 8017e62:	3304      	adds	r3, #4
 8017e64:	1b1a      	subs	r2, r3, r4
 8017e66:	42a3      	cmp	r3, r4
 8017e68:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017e6c:	bf08      	it	eq
 8017e6e:	2300      	moveq	r3, #0
 8017e70:	6102      	str	r2, [r0, #16]
 8017e72:	bf08      	it	eq
 8017e74:	6143      	streq	r3, [r0, #20]
 8017e76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e7a:	f8dc c000 	ldr.w	ip, [ip]
 8017e7e:	fa0c fc08 	lsl.w	ip, ip, r8
 8017e82:	ea4c 0707 	orr.w	r7, ip, r7
 8017e86:	f849 7b04 	str.w	r7, [r9], #4
 8017e8a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017e8e:	40cf      	lsrs	r7, r1
 8017e90:	e7da      	b.n	8017e48 <rshift+0x4c>
 8017e92:	f851 cb04 	ldr.w	ip, [r1], #4
 8017e96:	f847 cf04 	str.w	ip, [r7, #4]!
 8017e9a:	e7c3      	b.n	8017e24 <rshift+0x28>
 8017e9c:	4623      	mov	r3, r4
 8017e9e:	e7e1      	b.n	8017e64 <rshift+0x68>

08017ea0 <__hexdig_fun>:
 8017ea0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8017ea4:	2b09      	cmp	r3, #9
 8017ea6:	d802      	bhi.n	8017eae <__hexdig_fun+0xe>
 8017ea8:	3820      	subs	r0, #32
 8017eaa:	b2c0      	uxtb	r0, r0
 8017eac:	4770      	bx	lr
 8017eae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8017eb2:	2b05      	cmp	r3, #5
 8017eb4:	d801      	bhi.n	8017eba <__hexdig_fun+0x1a>
 8017eb6:	3847      	subs	r0, #71	@ 0x47
 8017eb8:	e7f7      	b.n	8017eaa <__hexdig_fun+0xa>
 8017eba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8017ebe:	2b05      	cmp	r3, #5
 8017ec0:	d801      	bhi.n	8017ec6 <__hexdig_fun+0x26>
 8017ec2:	3827      	subs	r0, #39	@ 0x27
 8017ec4:	e7f1      	b.n	8017eaa <__hexdig_fun+0xa>
 8017ec6:	2000      	movs	r0, #0
 8017ec8:	4770      	bx	lr
	...

08017ecc <__gethex>:
 8017ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ed0:	b085      	sub	sp, #20
 8017ed2:	468a      	mov	sl, r1
 8017ed4:	9302      	str	r3, [sp, #8]
 8017ed6:	680b      	ldr	r3, [r1, #0]
 8017ed8:	9001      	str	r0, [sp, #4]
 8017eda:	4690      	mov	r8, r2
 8017edc:	1c9c      	adds	r4, r3, #2
 8017ede:	46a1      	mov	r9, r4
 8017ee0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8017ee4:	2830      	cmp	r0, #48	@ 0x30
 8017ee6:	d0fa      	beq.n	8017ede <__gethex+0x12>
 8017ee8:	eba9 0303 	sub.w	r3, r9, r3
 8017eec:	f1a3 0b02 	sub.w	fp, r3, #2
 8017ef0:	f7ff ffd6 	bl	8017ea0 <__hexdig_fun>
 8017ef4:	4605      	mov	r5, r0
 8017ef6:	2800      	cmp	r0, #0
 8017ef8:	d168      	bne.n	8017fcc <__gethex+0x100>
 8017efa:	49a0      	ldr	r1, [pc, #640]	@ (801817c <__gethex+0x2b0>)
 8017efc:	2201      	movs	r2, #1
 8017efe:	4648      	mov	r0, r9
 8017f00:	f7ff fe96 	bl	8017c30 <strncmp>
 8017f04:	4607      	mov	r7, r0
 8017f06:	2800      	cmp	r0, #0
 8017f08:	d167      	bne.n	8017fda <__gethex+0x10e>
 8017f0a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8017f0e:	4626      	mov	r6, r4
 8017f10:	f7ff ffc6 	bl	8017ea0 <__hexdig_fun>
 8017f14:	2800      	cmp	r0, #0
 8017f16:	d062      	beq.n	8017fde <__gethex+0x112>
 8017f18:	4623      	mov	r3, r4
 8017f1a:	7818      	ldrb	r0, [r3, #0]
 8017f1c:	2830      	cmp	r0, #48	@ 0x30
 8017f1e:	4699      	mov	r9, r3
 8017f20:	f103 0301 	add.w	r3, r3, #1
 8017f24:	d0f9      	beq.n	8017f1a <__gethex+0x4e>
 8017f26:	f7ff ffbb 	bl	8017ea0 <__hexdig_fun>
 8017f2a:	fab0 f580 	clz	r5, r0
 8017f2e:	096d      	lsrs	r5, r5, #5
 8017f30:	f04f 0b01 	mov.w	fp, #1
 8017f34:	464a      	mov	r2, r9
 8017f36:	4616      	mov	r6, r2
 8017f38:	3201      	adds	r2, #1
 8017f3a:	7830      	ldrb	r0, [r6, #0]
 8017f3c:	f7ff ffb0 	bl	8017ea0 <__hexdig_fun>
 8017f40:	2800      	cmp	r0, #0
 8017f42:	d1f8      	bne.n	8017f36 <__gethex+0x6a>
 8017f44:	498d      	ldr	r1, [pc, #564]	@ (801817c <__gethex+0x2b0>)
 8017f46:	2201      	movs	r2, #1
 8017f48:	4630      	mov	r0, r6
 8017f4a:	f7ff fe71 	bl	8017c30 <strncmp>
 8017f4e:	2800      	cmp	r0, #0
 8017f50:	d13f      	bne.n	8017fd2 <__gethex+0x106>
 8017f52:	b944      	cbnz	r4, 8017f66 <__gethex+0x9a>
 8017f54:	1c74      	adds	r4, r6, #1
 8017f56:	4622      	mov	r2, r4
 8017f58:	4616      	mov	r6, r2
 8017f5a:	3201      	adds	r2, #1
 8017f5c:	7830      	ldrb	r0, [r6, #0]
 8017f5e:	f7ff ff9f 	bl	8017ea0 <__hexdig_fun>
 8017f62:	2800      	cmp	r0, #0
 8017f64:	d1f8      	bne.n	8017f58 <__gethex+0x8c>
 8017f66:	1ba4      	subs	r4, r4, r6
 8017f68:	00a7      	lsls	r7, r4, #2
 8017f6a:	7833      	ldrb	r3, [r6, #0]
 8017f6c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8017f70:	2b50      	cmp	r3, #80	@ 0x50
 8017f72:	d13e      	bne.n	8017ff2 <__gethex+0x126>
 8017f74:	7873      	ldrb	r3, [r6, #1]
 8017f76:	2b2b      	cmp	r3, #43	@ 0x2b
 8017f78:	d033      	beq.n	8017fe2 <__gethex+0x116>
 8017f7a:	2b2d      	cmp	r3, #45	@ 0x2d
 8017f7c:	d034      	beq.n	8017fe8 <__gethex+0x11c>
 8017f7e:	1c71      	adds	r1, r6, #1
 8017f80:	2400      	movs	r4, #0
 8017f82:	7808      	ldrb	r0, [r1, #0]
 8017f84:	f7ff ff8c 	bl	8017ea0 <__hexdig_fun>
 8017f88:	1e43      	subs	r3, r0, #1
 8017f8a:	b2db      	uxtb	r3, r3
 8017f8c:	2b18      	cmp	r3, #24
 8017f8e:	d830      	bhi.n	8017ff2 <__gethex+0x126>
 8017f90:	f1a0 0210 	sub.w	r2, r0, #16
 8017f94:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017f98:	f7ff ff82 	bl	8017ea0 <__hexdig_fun>
 8017f9c:	f100 3cff 	add.w	ip, r0, #4294967295
 8017fa0:	fa5f fc8c 	uxtb.w	ip, ip
 8017fa4:	f1bc 0f18 	cmp.w	ip, #24
 8017fa8:	f04f 030a 	mov.w	r3, #10
 8017fac:	d91e      	bls.n	8017fec <__gethex+0x120>
 8017fae:	b104      	cbz	r4, 8017fb2 <__gethex+0xe6>
 8017fb0:	4252      	negs	r2, r2
 8017fb2:	4417      	add	r7, r2
 8017fb4:	f8ca 1000 	str.w	r1, [sl]
 8017fb8:	b1ed      	cbz	r5, 8017ff6 <__gethex+0x12a>
 8017fba:	f1bb 0f00 	cmp.w	fp, #0
 8017fbe:	bf0c      	ite	eq
 8017fc0:	2506      	moveq	r5, #6
 8017fc2:	2500      	movne	r5, #0
 8017fc4:	4628      	mov	r0, r5
 8017fc6:	b005      	add	sp, #20
 8017fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fcc:	2500      	movs	r5, #0
 8017fce:	462c      	mov	r4, r5
 8017fd0:	e7b0      	b.n	8017f34 <__gethex+0x68>
 8017fd2:	2c00      	cmp	r4, #0
 8017fd4:	d1c7      	bne.n	8017f66 <__gethex+0x9a>
 8017fd6:	4627      	mov	r7, r4
 8017fd8:	e7c7      	b.n	8017f6a <__gethex+0x9e>
 8017fda:	464e      	mov	r6, r9
 8017fdc:	462f      	mov	r7, r5
 8017fde:	2501      	movs	r5, #1
 8017fe0:	e7c3      	b.n	8017f6a <__gethex+0x9e>
 8017fe2:	2400      	movs	r4, #0
 8017fe4:	1cb1      	adds	r1, r6, #2
 8017fe6:	e7cc      	b.n	8017f82 <__gethex+0xb6>
 8017fe8:	2401      	movs	r4, #1
 8017fea:	e7fb      	b.n	8017fe4 <__gethex+0x118>
 8017fec:	fb03 0002 	mla	r0, r3, r2, r0
 8017ff0:	e7ce      	b.n	8017f90 <__gethex+0xc4>
 8017ff2:	4631      	mov	r1, r6
 8017ff4:	e7de      	b.n	8017fb4 <__gethex+0xe8>
 8017ff6:	eba6 0309 	sub.w	r3, r6, r9
 8017ffa:	3b01      	subs	r3, #1
 8017ffc:	4629      	mov	r1, r5
 8017ffe:	2b07      	cmp	r3, #7
 8018000:	dc0a      	bgt.n	8018018 <__gethex+0x14c>
 8018002:	9801      	ldr	r0, [sp, #4]
 8018004:	f000 faf4 	bl	80185f0 <_Balloc>
 8018008:	4604      	mov	r4, r0
 801800a:	b940      	cbnz	r0, 801801e <__gethex+0x152>
 801800c:	4b5c      	ldr	r3, [pc, #368]	@ (8018180 <__gethex+0x2b4>)
 801800e:	4602      	mov	r2, r0
 8018010:	21e4      	movs	r1, #228	@ 0xe4
 8018012:	485c      	ldr	r0, [pc, #368]	@ (8018184 <__gethex+0x2b8>)
 8018014:	f001 f864 	bl	80190e0 <__assert_func>
 8018018:	3101      	adds	r1, #1
 801801a:	105b      	asrs	r3, r3, #1
 801801c:	e7ef      	b.n	8017ffe <__gethex+0x132>
 801801e:	f100 0a14 	add.w	sl, r0, #20
 8018022:	2300      	movs	r3, #0
 8018024:	4655      	mov	r5, sl
 8018026:	469b      	mov	fp, r3
 8018028:	45b1      	cmp	r9, r6
 801802a:	d337      	bcc.n	801809c <__gethex+0x1d0>
 801802c:	f845 bb04 	str.w	fp, [r5], #4
 8018030:	eba5 050a 	sub.w	r5, r5, sl
 8018034:	10ad      	asrs	r5, r5, #2
 8018036:	6125      	str	r5, [r4, #16]
 8018038:	4658      	mov	r0, fp
 801803a:	f000 fbcb 	bl	80187d4 <__hi0bits>
 801803e:	016d      	lsls	r5, r5, #5
 8018040:	f8d8 6000 	ldr.w	r6, [r8]
 8018044:	1a2d      	subs	r5, r5, r0
 8018046:	42b5      	cmp	r5, r6
 8018048:	dd54      	ble.n	80180f4 <__gethex+0x228>
 801804a:	1bad      	subs	r5, r5, r6
 801804c:	4629      	mov	r1, r5
 801804e:	4620      	mov	r0, r4
 8018050:	f000 ff5c 	bl	8018f0c <__any_on>
 8018054:	4681      	mov	r9, r0
 8018056:	b178      	cbz	r0, 8018078 <__gethex+0x1ac>
 8018058:	1e6b      	subs	r3, r5, #1
 801805a:	1159      	asrs	r1, r3, #5
 801805c:	f003 021f 	and.w	r2, r3, #31
 8018060:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8018064:	f04f 0901 	mov.w	r9, #1
 8018068:	fa09 f202 	lsl.w	r2, r9, r2
 801806c:	420a      	tst	r2, r1
 801806e:	d003      	beq.n	8018078 <__gethex+0x1ac>
 8018070:	454b      	cmp	r3, r9
 8018072:	dc36      	bgt.n	80180e2 <__gethex+0x216>
 8018074:	f04f 0902 	mov.w	r9, #2
 8018078:	4629      	mov	r1, r5
 801807a:	4620      	mov	r0, r4
 801807c:	f7ff febe 	bl	8017dfc <rshift>
 8018080:	442f      	add	r7, r5
 8018082:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018086:	42bb      	cmp	r3, r7
 8018088:	da42      	bge.n	8018110 <__gethex+0x244>
 801808a:	9801      	ldr	r0, [sp, #4]
 801808c:	4621      	mov	r1, r4
 801808e:	f000 faef 	bl	8018670 <_Bfree>
 8018092:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018094:	2300      	movs	r3, #0
 8018096:	6013      	str	r3, [r2, #0]
 8018098:	25a3      	movs	r5, #163	@ 0xa3
 801809a:	e793      	b.n	8017fc4 <__gethex+0xf8>
 801809c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80180a0:	2a2e      	cmp	r2, #46	@ 0x2e
 80180a2:	d012      	beq.n	80180ca <__gethex+0x1fe>
 80180a4:	2b20      	cmp	r3, #32
 80180a6:	d104      	bne.n	80180b2 <__gethex+0x1e6>
 80180a8:	f845 bb04 	str.w	fp, [r5], #4
 80180ac:	f04f 0b00 	mov.w	fp, #0
 80180b0:	465b      	mov	r3, fp
 80180b2:	7830      	ldrb	r0, [r6, #0]
 80180b4:	9303      	str	r3, [sp, #12]
 80180b6:	f7ff fef3 	bl	8017ea0 <__hexdig_fun>
 80180ba:	9b03      	ldr	r3, [sp, #12]
 80180bc:	f000 000f 	and.w	r0, r0, #15
 80180c0:	4098      	lsls	r0, r3
 80180c2:	ea4b 0b00 	orr.w	fp, fp, r0
 80180c6:	3304      	adds	r3, #4
 80180c8:	e7ae      	b.n	8018028 <__gethex+0x15c>
 80180ca:	45b1      	cmp	r9, r6
 80180cc:	d8ea      	bhi.n	80180a4 <__gethex+0x1d8>
 80180ce:	492b      	ldr	r1, [pc, #172]	@ (801817c <__gethex+0x2b0>)
 80180d0:	9303      	str	r3, [sp, #12]
 80180d2:	2201      	movs	r2, #1
 80180d4:	4630      	mov	r0, r6
 80180d6:	f7ff fdab 	bl	8017c30 <strncmp>
 80180da:	9b03      	ldr	r3, [sp, #12]
 80180dc:	2800      	cmp	r0, #0
 80180de:	d1e1      	bne.n	80180a4 <__gethex+0x1d8>
 80180e0:	e7a2      	b.n	8018028 <__gethex+0x15c>
 80180e2:	1ea9      	subs	r1, r5, #2
 80180e4:	4620      	mov	r0, r4
 80180e6:	f000 ff11 	bl	8018f0c <__any_on>
 80180ea:	2800      	cmp	r0, #0
 80180ec:	d0c2      	beq.n	8018074 <__gethex+0x1a8>
 80180ee:	f04f 0903 	mov.w	r9, #3
 80180f2:	e7c1      	b.n	8018078 <__gethex+0x1ac>
 80180f4:	da09      	bge.n	801810a <__gethex+0x23e>
 80180f6:	1b75      	subs	r5, r6, r5
 80180f8:	4621      	mov	r1, r4
 80180fa:	9801      	ldr	r0, [sp, #4]
 80180fc:	462a      	mov	r2, r5
 80180fe:	f000 fccf 	bl	8018aa0 <__lshift>
 8018102:	1b7f      	subs	r7, r7, r5
 8018104:	4604      	mov	r4, r0
 8018106:	f100 0a14 	add.w	sl, r0, #20
 801810a:	f04f 0900 	mov.w	r9, #0
 801810e:	e7b8      	b.n	8018082 <__gethex+0x1b6>
 8018110:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018114:	42bd      	cmp	r5, r7
 8018116:	dd6f      	ble.n	80181f8 <__gethex+0x32c>
 8018118:	1bed      	subs	r5, r5, r7
 801811a:	42ae      	cmp	r6, r5
 801811c:	dc34      	bgt.n	8018188 <__gethex+0x2bc>
 801811e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018122:	2b02      	cmp	r3, #2
 8018124:	d022      	beq.n	801816c <__gethex+0x2a0>
 8018126:	2b03      	cmp	r3, #3
 8018128:	d024      	beq.n	8018174 <__gethex+0x2a8>
 801812a:	2b01      	cmp	r3, #1
 801812c:	d115      	bne.n	801815a <__gethex+0x28e>
 801812e:	42ae      	cmp	r6, r5
 8018130:	d113      	bne.n	801815a <__gethex+0x28e>
 8018132:	2e01      	cmp	r6, #1
 8018134:	d10b      	bne.n	801814e <__gethex+0x282>
 8018136:	9a02      	ldr	r2, [sp, #8]
 8018138:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801813c:	6013      	str	r3, [r2, #0]
 801813e:	2301      	movs	r3, #1
 8018140:	6123      	str	r3, [r4, #16]
 8018142:	f8ca 3000 	str.w	r3, [sl]
 8018146:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018148:	2562      	movs	r5, #98	@ 0x62
 801814a:	601c      	str	r4, [r3, #0]
 801814c:	e73a      	b.n	8017fc4 <__gethex+0xf8>
 801814e:	1e71      	subs	r1, r6, #1
 8018150:	4620      	mov	r0, r4
 8018152:	f000 fedb 	bl	8018f0c <__any_on>
 8018156:	2800      	cmp	r0, #0
 8018158:	d1ed      	bne.n	8018136 <__gethex+0x26a>
 801815a:	9801      	ldr	r0, [sp, #4]
 801815c:	4621      	mov	r1, r4
 801815e:	f000 fa87 	bl	8018670 <_Bfree>
 8018162:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018164:	2300      	movs	r3, #0
 8018166:	6013      	str	r3, [r2, #0]
 8018168:	2550      	movs	r5, #80	@ 0x50
 801816a:	e72b      	b.n	8017fc4 <__gethex+0xf8>
 801816c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801816e:	2b00      	cmp	r3, #0
 8018170:	d1f3      	bne.n	801815a <__gethex+0x28e>
 8018172:	e7e0      	b.n	8018136 <__gethex+0x26a>
 8018174:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018176:	2b00      	cmp	r3, #0
 8018178:	d1dd      	bne.n	8018136 <__gethex+0x26a>
 801817a:	e7ee      	b.n	801815a <__gethex+0x28e>
 801817c:	08019d94 	.word	0x08019d94
 8018180:	08019f01 	.word	0x08019f01
 8018184:	08019f12 	.word	0x08019f12
 8018188:	1e6f      	subs	r7, r5, #1
 801818a:	f1b9 0f00 	cmp.w	r9, #0
 801818e:	d130      	bne.n	80181f2 <__gethex+0x326>
 8018190:	b127      	cbz	r7, 801819c <__gethex+0x2d0>
 8018192:	4639      	mov	r1, r7
 8018194:	4620      	mov	r0, r4
 8018196:	f000 feb9 	bl	8018f0c <__any_on>
 801819a:	4681      	mov	r9, r0
 801819c:	117a      	asrs	r2, r7, #5
 801819e:	2301      	movs	r3, #1
 80181a0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80181a4:	f007 071f 	and.w	r7, r7, #31
 80181a8:	40bb      	lsls	r3, r7
 80181aa:	4213      	tst	r3, r2
 80181ac:	4629      	mov	r1, r5
 80181ae:	4620      	mov	r0, r4
 80181b0:	bf18      	it	ne
 80181b2:	f049 0902 	orrne.w	r9, r9, #2
 80181b6:	f7ff fe21 	bl	8017dfc <rshift>
 80181ba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80181be:	1b76      	subs	r6, r6, r5
 80181c0:	2502      	movs	r5, #2
 80181c2:	f1b9 0f00 	cmp.w	r9, #0
 80181c6:	d047      	beq.n	8018258 <__gethex+0x38c>
 80181c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80181cc:	2b02      	cmp	r3, #2
 80181ce:	d015      	beq.n	80181fc <__gethex+0x330>
 80181d0:	2b03      	cmp	r3, #3
 80181d2:	d017      	beq.n	8018204 <__gethex+0x338>
 80181d4:	2b01      	cmp	r3, #1
 80181d6:	d109      	bne.n	80181ec <__gethex+0x320>
 80181d8:	f019 0f02 	tst.w	r9, #2
 80181dc:	d006      	beq.n	80181ec <__gethex+0x320>
 80181de:	f8da 3000 	ldr.w	r3, [sl]
 80181e2:	ea49 0903 	orr.w	r9, r9, r3
 80181e6:	f019 0f01 	tst.w	r9, #1
 80181ea:	d10e      	bne.n	801820a <__gethex+0x33e>
 80181ec:	f045 0510 	orr.w	r5, r5, #16
 80181f0:	e032      	b.n	8018258 <__gethex+0x38c>
 80181f2:	f04f 0901 	mov.w	r9, #1
 80181f6:	e7d1      	b.n	801819c <__gethex+0x2d0>
 80181f8:	2501      	movs	r5, #1
 80181fa:	e7e2      	b.n	80181c2 <__gethex+0x2f6>
 80181fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80181fe:	f1c3 0301 	rsb	r3, r3, #1
 8018202:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018204:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018206:	2b00      	cmp	r3, #0
 8018208:	d0f0      	beq.n	80181ec <__gethex+0x320>
 801820a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801820e:	f104 0314 	add.w	r3, r4, #20
 8018212:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018216:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801821a:	f04f 0c00 	mov.w	ip, #0
 801821e:	4618      	mov	r0, r3
 8018220:	f853 2b04 	ldr.w	r2, [r3], #4
 8018224:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018228:	d01b      	beq.n	8018262 <__gethex+0x396>
 801822a:	3201      	adds	r2, #1
 801822c:	6002      	str	r2, [r0, #0]
 801822e:	2d02      	cmp	r5, #2
 8018230:	f104 0314 	add.w	r3, r4, #20
 8018234:	d13c      	bne.n	80182b0 <__gethex+0x3e4>
 8018236:	f8d8 2000 	ldr.w	r2, [r8]
 801823a:	3a01      	subs	r2, #1
 801823c:	42b2      	cmp	r2, r6
 801823e:	d109      	bne.n	8018254 <__gethex+0x388>
 8018240:	1171      	asrs	r1, r6, #5
 8018242:	2201      	movs	r2, #1
 8018244:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018248:	f006 061f 	and.w	r6, r6, #31
 801824c:	fa02 f606 	lsl.w	r6, r2, r6
 8018250:	421e      	tst	r6, r3
 8018252:	d13a      	bne.n	80182ca <__gethex+0x3fe>
 8018254:	f045 0520 	orr.w	r5, r5, #32
 8018258:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801825a:	601c      	str	r4, [r3, #0]
 801825c:	9b02      	ldr	r3, [sp, #8]
 801825e:	601f      	str	r7, [r3, #0]
 8018260:	e6b0      	b.n	8017fc4 <__gethex+0xf8>
 8018262:	4299      	cmp	r1, r3
 8018264:	f843 cc04 	str.w	ip, [r3, #-4]
 8018268:	d8d9      	bhi.n	801821e <__gethex+0x352>
 801826a:	68a3      	ldr	r3, [r4, #8]
 801826c:	459b      	cmp	fp, r3
 801826e:	db17      	blt.n	80182a0 <__gethex+0x3d4>
 8018270:	6861      	ldr	r1, [r4, #4]
 8018272:	9801      	ldr	r0, [sp, #4]
 8018274:	3101      	adds	r1, #1
 8018276:	f000 f9bb 	bl	80185f0 <_Balloc>
 801827a:	4681      	mov	r9, r0
 801827c:	b918      	cbnz	r0, 8018286 <__gethex+0x3ba>
 801827e:	4b1a      	ldr	r3, [pc, #104]	@ (80182e8 <__gethex+0x41c>)
 8018280:	4602      	mov	r2, r0
 8018282:	2184      	movs	r1, #132	@ 0x84
 8018284:	e6c5      	b.n	8018012 <__gethex+0x146>
 8018286:	6922      	ldr	r2, [r4, #16]
 8018288:	3202      	adds	r2, #2
 801828a:	f104 010c 	add.w	r1, r4, #12
 801828e:	0092      	lsls	r2, r2, #2
 8018290:	300c      	adds	r0, #12
 8018292:	f7ff fd52 	bl	8017d3a <memcpy>
 8018296:	4621      	mov	r1, r4
 8018298:	9801      	ldr	r0, [sp, #4]
 801829a:	f000 f9e9 	bl	8018670 <_Bfree>
 801829e:	464c      	mov	r4, r9
 80182a0:	6923      	ldr	r3, [r4, #16]
 80182a2:	1c5a      	adds	r2, r3, #1
 80182a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80182a8:	6122      	str	r2, [r4, #16]
 80182aa:	2201      	movs	r2, #1
 80182ac:	615a      	str	r2, [r3, #20]
 80182ae:	e7be      	b.n	801822e <__gethex+0x362>
 80182b0:	6922      	ldr	r2, [r4, #16]
 80182b2:	455a      	cmp	r2, fp
 80182b4:	dd0b      	ble.n	80182ce <__gethex+0x402>
 80182b6:	2101      	movs	r1, #1
 80182b8:	4620      	mov	r0, r4
 80182ba:	f7ff fd9f 	bl	8017dfc <rshift>
 80182be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80182c2:	3701      	adds	r7, #1
 80182c4:	42bb      	cmp	r3, r7
 80182c6:	f6ff aee0 	blt.w	801808a <__gethex+0x1be>
 80182ca:	2501      	movs	r5, #1
 80182cc:	e7c2      	b.n	8018254 <__gethex+0x388>
 80182ce:	f016 061f 	ands.w	r6, r6, #31
 80182d2:	d0fa      	beq.n	80182ca <__gethex+0x3fe>
 80182d4:	4453      	add	r3, sl
 80182d6:	f1c6 0620 	rsb	r6, r6, #32
 80182da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80182de:	f000 fa79 	bl	80187d4 <__hi0bits>
 80182e2:	42b0      	cmp	r0, r6
 80182e4:	dbe7      	blt.n	80182b6 <__gethex+0x3ea>
 80182e6:	e7f0      	b.n	80182ca <__gethex+0x3fe>
 80182e8:	08019f01 	.word	0x08019f01

080182ec <L_shift>:
 80182ec:	f1c2 0208 	rsb	r2, r2, #8
 80182f0:	0092      	lsls	r2, r2, #2
 80182f2:	b570      	push	{r4, r5, r6, lr}
 80182f4:	f1c2 0620 	rsb	r6, r2, #32
 80182f8:	6843      	ldr	r3, [r0, #4]
 80182fa:	6804      	ldr	r4, [r0, #0]
 80182fc:	fa03 f506 	lsl.w	r5, r3, r6
 8018300:	432c      	orrs	r4, r5
 8018302:	40d3      	lsrs	r3, r2
 8018304:	6004      	str	r4, [r0, #0]
 8018306:	f840 3f04 	str.w	r3, [r0, #4]!
 801830a:	4288      	cmp	r0, r1
 801830c:	d3f4      	bcc.n	80182f8 <L_shift+0xc>
 801830e:	bd70      	pop	{r4, r5, r6, pc}

08018310 <__match>:
 8018310:	b530      	push	{r4, r5, lr}
 8018312:	6803      	ldr	r3, [r0, #0]
 8018314:	3301      	adds	r3, #1
 8018316:	f811 4b01 	ldrb.w	r4, [r1], #1
 801831a:	b914      	cbnz	r4, 8018322 <__match+0x12>
 801831c:	6003      	str	r3, [r0, #0]
 801831e:	2001      	movs	r0, #1
 8018320:	bd30      	pop	{r4, r5, pc}
 8018322:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018326:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801832a:	2d19      	cmp	r5, #25
 801832c:	bf98      	it	ls
 801832e:	3220      	addls	r2, #32
 8018330:	42a2      	cmp	r2, r4
 8018332:	d0f0      	beq.n	8018316 <__match+0x6>
 8018334:	2000      	movs	r0, #0
 8018336:	e7f3      	b.n	8018320 <__match+0x10>

08018338 <__hexnan>:
 8018338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801833c:	680b      	ldr	r3, [r1, #0]
 801833e:	6801      	ldr	r1, [r0, #0]
 8018340:	115e      	asrs	r6, r3, #5
 8018342:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018346:	f013 031f 	ands.w	r3, r3, #31
 801834a:	b087      	sub	sp, #28
 801834c:	bf18      	it	ne
 801834e:	3604      	addne	r6, #4
 8018350:	2500      	movs	r5, #0
 8018352:	1f37      	subs	r7, r6, #4
 8018354:	4682      	mov	sl, r0
 8018356:	4690      	mov	r8, r2
 8018358:	9301      	str	r3, [sp, #4]
 801835a:	f846 5c04 	str.w	r5, [r6, #-4]
 801835e:	46b9      	mov	r9, r7
 8018360:	463c      	mov	r4, r7
 8018362:	9502      	str	r5, [sp, #8]
 8018364:	46ab      	mov	fp, r5
 8018366:	784a      	ldrb	r2, [r1, #1]
 8018368:	1c4b      	adds	r3, r1, #1
 801836a:	9303      	str	r3, [sp, #12]
 801836c:	b342      	cbz	r2, 80183c0 <__hexnan+0x88>
 801836e:	4610      	mov	r0, r2
 8018370:	9105      	str	r1, [sp, #20]
 8018372:	9204      	str	r2, [sp, #16]
 8018374:	f7ff fd94 	bl	8017ea0 <__hexdig_fun>
 8018378:	2800      	cmp	r0, #0
 801837a:	d151      	bne.n	8018420 <__hexnan+0xe8>
 801837c:	9a04      	ldr	r2, [sp, #16]
 801837e:	9905      	ldr	r1, [sp, #20]
 8018380:	2a20      	cmp	r2, #32
 8018382:	d818      	bhi.n	80183b6 <__hexnan+0x7e>
 8018384:	9b02      	ldr	r3, [sp, #8]
 8018386:	459b      	cmp	fp, r3
 8018388:	dd13      	ble.n	80183b2 <__hexnan+0x7a>
 801838a:	454c      	cmp	r4, r9
 801838c:	d206      	bcs.n	801839c <__hexnan+0x64>
 801838e:	2d07      	cmp	r5, #7
 8018390:	dc04      	bgt.n	801839c <__hexnan+0x64>
 8018392:	462a      	mov	r2, r5
 8018394:	4649      	mov	r1, r9
 8018396:	4620      	mov	r0, r4
 8018398:	f7ff ffa8 	bl	80182ec <L_shift>
 801839c:	4544      	cmp	r4, r8
 801839e:	d952      	bls.n	8018446 <__hexnan+0x10e>
 80183a0:	2300      	movs	r3, #0
 80183a2:	f1a4 0904 	sub.w	r9, r4, #4
 80183a6:	f844 3c04 	str.w	r3, [r4, #-4]
 80183aa:	f8cd b008 	str.w	fp, [sp, #8]
 80183ae:	464c      	mov	r4, r9
 80183b0:	461d      	mov	r5, r3
 80183b2:	9903      	ldr	r1, [sp, #12]
 80183b4:	e7d7      	b.n	8018366 <__hexnan+0x2e>
 80183b6:	2a29      	cmp	r2, #41	@ 0x29
 80183b8:	d157      	bne.n	801846a <__hexnan+0x132>
 80183ba:	3102      	adds	r1, #2
 80183bc:	f8ca 1000 	str.w	r1, [sl]
 80183c0:	f1bb 0f00 	cmp.w	fp, #0
 80183c4:	d051      	beq.n	801846a <__hexnan+0x132>
 80183c6:	454c      	cmp	r4, r9
 80183c8:	d206      	bcs.n	80183d8 <__hexnan+0xa0>
 80183ca:	2d07      	cmp	r5, #7
 80183cc:	dc04      	bgt.n	80183d8 <__hexnan+0xa0>
 80183ce:	462a      	mov	r2, r5
 80183d0:	4649      	mov	r1, r9
 80183d2:	4620      	mov	r0, r4
 80183d4:	f7ff ff8a 	bl	80182ec <L_shift>
 80183d8:	4544      	cmp	r4, r8
 80183da:	d936      	bls.n	801844a <__hexnan+0x112>
 80183dc:	f1a8 0204 	sub.w	r2, r8, #4
 80183e0:	4623      	mov	r3, r4
 80183e2:	f853 1b04 	ldr.w	r1, [r3], #4
 80183e6:	f842 1f04 	str.w	r1, [r2, #4]!
 80183ea:	429f      	cmp	r7, r3
 80183ec:	d2f9      	bcs.n	80183e2 <__hexnan+0xaa>
 80183ee:	1b3b      	subs	r3, r7, r4
 80183f0:	f023 0303 	bic.w	r3, r3, #3
 80183f4:	3304      	adds	r3, #4
 80183f6:	3401      	adds	r4, #1
 80183f8:	3e03      	subs	r6, #3
 80183fa:	42b4      	cmp	r4, r6
 80183fc:	bf88      	it	hi
 80183fe:	2304      	movhi	r3, #4
 8018400:	4443      	add	r3, r8
 8018402:	2200      	movs	r2, #0
 8018404:	f843 2b04 	str.w	r2, [r3], #4
 8018408:	429f      	cmp	r7, r3
 801840a:	d2fb      	bcs.n	8018404 <__hexnan+0xcc>
 801840c:	683b      	ldr	r3, [r7, #0]
 801840e:	b91b      	cbnz	r3, 8018418 <__hexnan+0xe0>
 8018410:	4547      	cmp	r7, r8
 8018412:	d128      	bne.n	8018466 <__hexnan+0x12e>
 8018414:	2301      	movs	r3, #1
 8018416:	603b      	str	r3, [r7, #0]
 8018418:	2005      	movs	r0, #5
 801841a:	b007      	add	sp, #28
 801841c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018420:	3501      	adds	r5, #1
 8018422:	2d08      	cmp	r5, #8
 8018424:	f10b 0b01 	add.w	fp, fp, #1
 8018428:	dd06      	ble.n	8018438 <__hexnan+0x100>
 801842a:	4544      	cmp	r4, r8
 801842c:	d9c1      	bls.n	80183b2 <__hexnan+0x7a>
 801842e:	2300      	movs	r3, #0
 8018430:	f844 3c04 	str.w	r3, [r4, #-4]
 8018434:	2501      	movs	r5, #1
 8018436:	3c04      	subs	r4, #4
 8018438:	6822      	ldr	r2, [r4, #0]
 801843a:	f000 000f 	and.w	r0, r0, #15
 801843e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8018442:	6020      	str	r0, [r4, #0]
 8018444:	e7b5      	b.n	80183b2 <__hexnan+0x7a>
 8018446:	2508      	movs	r5, #8
 8018448:	e7b3      	b.n	80183b2 <__hexnan+0x7a>
 801844a:	9b01      	ldr	r3, [sp, #4]
 801844c:	2b00      	cmp	r3, #0
 801844e:	d0dd      	beq.n	801840c <__hexnan+0xd4>
 8018450:	f1c3 0320 	rsb	r3, r3, #32
 8018454:	f04f 32ff 	mov.w	r2, #4294967295
 8018458:	40da      	lsrs	r2, r3
 801845a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801845e:	4013      	ands	r3, r2
 8018460:	f846 3c04 	str.w	r3, [r6, #-4]
 8018464:	e7d2      	b.n	801840c <__hexnan+0xd4>
 8018466:	3f04      	subs	r7, #4
 8018468:	e7d0      	b.n	801840c <__hexnan+0xd4>
 801846a:	2004      	movs	r0, #4
 801846c:	e7d5      	b.n	801841a <__hexnan+0xe2>
	...

08018470 <sbrk_aligned>:
 8018470:	b570      	push	{r4, r5, r6, lr}
 8018472:	4e0f      	ldr	r6, [pc, #60]	@ (80184b0 <sbrk_aligned+0x40>)
 8018474:	460c      	mov	r4, r1
 8018476:	6831      	ldr	r1, [r6, #0]
 8018478:	4605      	mov	r5, r0
 801847a:	b911      	cbnz	r1, 8018482 <sbrk_aligned+0x12>
 801847c:	f000 fe20 	bl	80190c0 <_sbrk_r>
 8018480:	6030      	str	r0, [r6, #0]
 8018482:	4621      	mov	r1, r4
 8018484:	4628      	mov	r0, r5
 8018486:	f000 fe1b 	bl	80190c0 <_sbrk_r>
 801848a:	1c43      	adds	r3, r0, #1
 801848c:	d103      	bne.n	8018496 <sbrk_aligned+0x26>
 801848e:	f04f 34ff 	mov.w	r4, #4294967295
 8018492:	4620      	mov	r0, r4
 8018494:	bd70      	pop	{r4, r5, r6, pc}
 8018496:	1cc4      	adds	r4, r0, #3
 8018498:	f024 0403 	bic.w	r4, r4, #3
 801849c:	42a0      	cmp	r0, r4
 801849e:	d0f8      	beq.n	8018492 <sbrk_aligned+0x22>
 80184a0:	1a21      	subs	r1, r4, r0
 80184a2:	4628      	mov	r0, r5
 80184a4:	f000 fe0c 	bl	80190c0 <_sbrk_r>
 80184a8:	3001      	adds	r0, #1
 80184aa:	d1f2      	bne.n	8018492 <sbrk_aligned+0x22>
 80184ac:	e7ef      	b.n	801848e <sbrk_aligned+0x1e>
 80184ae:	bf00      	nop
 80184b0:	2400693c 	.word	0x2400693c

080184b4 <_malloc_r>:
 80184b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80184b8:	1ccd      	adds	r5, r1, #3
 80184ba:	f025 0503 	bic.w	r5, r5, #3
 80184be:	3508      	adds	r5, #8
 80184c0:	2d0c      	cmp	r5, #12
 80184c2:	bf38      	it	cc
 80184c4:	250c      	movcc	r5, #12
 80184c6:	2d00      	cmp	r5, #0
 80184c8:	4606      	mov	r6, r0
 80184ca:	db01      	blt.n	80184d0 <_malloc_r+0x1c>
 80184cc:	42a9      	cmp	r1, r5
 80184ce:	d904      	bls.n	80184da <_malloc_r+0x26>
 80184d0:	230c      	movs	r3, #12
 80184d2:	6033      	str	r3, [r6, #0]
 80184d4:	2000      	movs	r0, #0
 80184d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80184da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80185b0 <_malloc_r+0xfc>
 80184de:	f000 f87b 	bl	80185d8 <__malloc_lock>
 80184e2:	f8d8 3000 	ldr.w	r3, [r8]
 80184e6:	461c      	mov	r4, r3
 80184e8:	bb44      	cbnz	r4, 801853c <_malloc_r+0x88>
 80184ea:	4629      	mov	r1, r5
 80184ec:	4630      	mov	r0, r6
 80184ee:	f7ff ffbf 	bl	8018470 <sbrk_aligned>
 80184f2:	1c43      	adds	r3, r0, #1
 80184f4:	4604      	mov	r4, r0
 80184f6:	d158      	bne.n	80185aa <_malloc_r+0xf6>
 80184f8:	f8d8 4000 	ldr.w	r4, [r8]
 80184fc:	4627      	mov	r7, r4
 80184fe:	2f00      	cmp	r7, #0
 8018500:	d143      	bne.n	801858a <_malloc_r+0xd6>
 8018502:	2c00      	cmp	r4, #0
 8018504:	d04b      	beq.n	801859e <_malloc_r+0xea>
 8018506:	6823      	ldr	r3, [r4, #0]
 8018508:	4639      	mov	r1, r7
 801850a:	4630      	mov	r0, r6
 801850c:	eb04 0903 	add.w	r9, r4, r3
 8018510:	f000 fdd6 	bl	80190c0 <_sbrk_r>
 8018514:	4581      	cmp	r9, r0
 8018516:	d142      	bne.n	801859e <_malloc_r+0xea>
 8018518:	6821      	ldr	r1, [r4, #0]
 801851a:	1a6d      	subs	r5, r5, r1
 801851c:	4629      	mov	r1, r5
 801851e:	4630      	mov	r0, r6
 8018520:	f7ff ffa6 	bl	8018470 <sbrk_aligned>
 8018524:	3001      	adds	r0, #1
 8018526:	d03a      	beq.n	801859e <_malloc_r+0xea>
 8018528:	6823      	ldr	r3, [r4, #0]
 801852a:	442b      	add	r3, r5
 801852c:	6023      	str	r3, [r4, #0]
 801852e:	f8d8 3000 	ldr.w	r3, [r8]
 8018532:	685a      	ldr	r2, [r3, #4]
 8018534:	bb62      	cbnz	r2, 8018590 <_malloc_r+0xdc>
 8018536:	f8c8 7000 	str.w	r7, [r8]
 801853a:	e00f      	b.n	801855c <_malloc_r+0xa8>
 801853c:	6822      	ldr	r2, [r4, #0]
 801853e:	1b52      	subs	r2, r2, r5
 8018540:	d420      	bmi.n	8018584 <_malloc_r+0xd0>
 8018542:	2a0b      	cmp	r2, #11
 8018544:	d917      	bls.n	8018576 <_malloc_r+0xc2>
 8018546:	1961      	adds	r1, r4, r5
 8018548:	42a3      	cmp	r3, r4
 801854a:	6025      	str	r5, [r4, #0]
 801854c:	bf18      	it	ne
 801854e:	6059      	strne	r1, [r3, #4]
 8018550:	6863      	ldr	r3, [r4, #4]
 8018552:	bf08      	it	eq
 8018554:	f8c8 1000 	streq.w	r1, [r8]
 8018558:	5162      	str	r2, [r4, r5]
 801855a:	604b      	str	r3, [r1, #4]
 801855c:	4630      	mov	r0, r6
 801855e:	f000 f841 	bl	80185e4 <__malloc_unlock>
 8018562:	f104 000b 	add.w	r0, r4, #11
 8018566:	1d23      	adds	r3, r4, #4
 8018568:	f020 0007 	bic.w	r0, r0, #7
 801856c:	1ac2      	subs	r2, r0, r3
 801856e:	bf1c      	itt	ne
 8018570:	1a1b      	subne	r3, r3, r0
 8018572:	50a3      	strne	r3, [r4, r2]
 8018574:	e7af      	b.n	80184d6 <_malloc_r+0x22>
 8018576:	6862      	ldr	r2, [r4, #4]
 8018578:	42a3      	cmp	r3, r4
 801857a:	bf0c      	ite	eq
 801857c:	f8c8 2000 	streq.w	r2, [r8]
 8018580:	605a      	strne	r2, [r3, #4]
 8018582:	e7eb      	b.n	801855c <_malloc_r+0xa8>
 8018584:	4623      	mov	r3, r4
 8018586:	6864      	ldr	r4, [r4, #4]
 8018588:	e7ae      	b.n	80184e8 <_malloc_r+0x34>
 801858a:	463c      	mov	r4, r7
 801858c:	687f      	ldr	r7, [r7, #4]
 801858e:	e7b6      	b.n	80184fe <_malloc_r+0x4a>
 8018590:	461a      	mov	r2, r3
 8018592:	685b      	ldr	r3, [r3, #4]
 8018594:	42a3      	cmp	r3, r4
 8018596:	d1fb      	bne.n	8018590 <_malloc_r+0xdc>
 8018598:	2300      	movs	r3, #0
 801859a:	6053      	str	r3, [r2, #4]
 801859c:	e7de      	b.n	801855c <_malloc_r+0xa8>
 801859e:	230c      	movs	r3, #12
 80185a0:	6033      	str	r3, [r6, #0]
 80185a2:	4630      	mov	r0, r6
 80185a4:	f000 f81e 	bl	80185e4 <__malloc_unlock>
 80185a8:	e794      	b.n	80184d4 <_malloc_r+0x20>
 80185aa:	6005      	str	r5, [r0, #0]
 80185ac:	e7d6      	b.n	801855c <_malloc_r+0xa8>
 80185ae:	bf00      	nop
 80185b0:	24006940 	.word	0x24006940

080185b4 <__ascii_mbtowc>:
 80185b4:	b082      	sub	sp, #8
 80185b6:	b901      	cbnz	r1, 80185ba <__ascii_mbtowc+0x6>
 80185b8:	a901      	add	r1, sp, #4
 80185ba:	b142      	cbz	r2, 80185ce <__ascii_mbtowc+0x1a>
 80185bc:	b14b      	cbz	r3, 80185d2 <__ascii_mbtowc+0x1e>
 80185be:	7813      	ldrb	r3, [r2, #0]
 80185c0:	600b      	str	r3, [r1, #0]
 80185c2:	7812      	ldrb	r2, [r2, #0]
 80185c4:	1e10      	subs	r0, r2, #0
 80185c6:	bf18      	it	ne
 80185c8:	2001      	movne	r0, #1
 80185ca:	b002      	add	sp, #8
 80185cc:	4770      	bx	lr
 80185ce:	4610      	mov	r0, r2
 80185d0:	e7fb      	b.n	80185ca <__ascii_mbtowc+0x16>
 80185d2:	f06f 0001 	mvn.w	r0, #1
 80185d6:	e7f8      	b.n	80185ca <__ascii_mbtowc+0x16>

080185d8 <__malloc_lock>:
 80185d8:	4801      	ldr	r0, [pc, #4]	@ (80185e0 <__malloc_lock+0x8>)
 80185da:	f7ff bbac 	b.w	8017d36 <__retarget_lock_acquire_recursive>
 80185de:	bf00      	nop
 80185e0:	24006938 	.word	0x24006938

080185e4 <__malloc_unlock>:
 80185e4:	4801      	ldr	r0, [pc, #4]	@ (80185ec <__malloc_unlock+0x8>)
 80185e6:	f7ff bba7 	b.w	8017d38 <__retarget_lock_release_recursive>
 80185ea:	bf00      	nop
 80185ec:	24006938 	.word	0x24006938

080185f0 <_Balloc>:
 80185f0:	b570      	push	{r4, r5, r6, lr}
 80185f2:	69c6      	ldr	r6, [r0, #28]
 80185f4:	4604      	mov	r4, r0
 80185f6:	460d      	mov	r5, r1
 80185f8:	b976      	cbnz	r6, 8018618 <_Balloc+0x28>
 80185fa:	2010      	movs	r0, #16
 80185fc:	f000 fda2 	bl	8019144 <malloc>
 8018600:	4602      	mov	r2, r0
 8018602:	61e0      	str	r0, [r4, #28]
 8018604:	b920      	cbnz	r0, 8018610 <_Balloc+0x20>
 8018606:	4b18      	ldr	r3, [pc, #96]	@ (8018668 <_Balloc+0x78>)
 8018608:	4818      	ldr	r0, [pc, #96]	@ (801866c <_Balloc+0x7c>)
 801860a:	216b      	movs	r1, #107	@ 0x6b
 801860c:	f000 fd68 	bl	80190e0 <__assert_func>
 8018610:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018614:	6006      	str	r6, [r0, #0]
 8018616:	60c6      	str	r6, [r0, #12]
 8018618:	69e6      	ldr	r6, [r4, #28]
 801861a:	68f3      	ldr	r3, [r6, #12]
 801861c:	b183      	cbz	r3, 8018640 <_Balloc+0x50>
 801861e:	69e3      	ldr	r3, [r4, #28]
 8018620:	68db      	ldr	r3, [r3, #12]
 8018622:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018626:	b9b8      	cbnz	r0, 8018658 <_Balloc+0x68>
 8018628:	2101      	movs	r1, #1
 801862a:	fa01 f605 	lsl.w	r6, r1, r5
 801862e:	1d72      	adds	r2, r6, #5
 8018630:	0092      	lsls	r2, r2, #2
 8018632:	4620      	mov	r0, r4
 8018634:	f000 fd72 	bl	801911c <_calloc_r>
 8018638:	b160      	cbz	r0, 8018654 <_Balloc+0x64>
 801863a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801863e:	e00e      	b.n	801865e <_Balloc+0x6e>
 8018640:	2221      	movs	r2, #33	@ 0x21
 8018642:	2104      	movs	r1, #4
 8018644:	4620      	mov	r0, r4
 8018646:	f000 fd69 	bl	801911c <_calloc_r>
 801864a:	69e3      	ldr	r3, [r4, #28]
 801864c:	60f0      	str	r0, [r6, #12]
 801864e:	68db      	ldr	r3, [r3, #12]
 8018650:	2b00      	cmp	r3, #0
 8018652:	d1e4      	bne.n	801861e <_Balloc+0x2e>
 8018654:	2000      	movs	r0, #0
 8018656:	bd70      	pop	{r4, r5, r6, pc}
 8018658:	6802      	ldr	r2, [r0, #0]
 801865a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801865e:	2300      	movs	r3, #0
 8018660:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018664:	e7f7      	b.n	8018656 <_Balloc+0x66>
 8018666:	bf00      	nop
 8018668:	08019f72 	.word	0x08019f72
 801866c:	08019f89 	.word	0x08019f89

08018670 <_Bfree>:
 8018670:	b570      	push	{r4, r5, r6, lr}
 8018672:	69c6      	ldr	r6, [r0, #28]
 8018674:	4605      	mov	r5, r0
 8018676:	460c      	mov	r4, r1
 8018678:	b976      	cbnz	r6, 8018698 <_Bfree+0x28>
 801867a:	2010      	movs	r0, #16
 801867c:	f000 fd62 	bl	8019144 <malloc>
 8018680:	4602      	mov	r2, r0
 8018682:	61e8      	str	r0, [r5, #28]
 8018684:	b920      	cbnz	r0, 8018690 <_Bfree+0x20>
 8018686:	4b09      	ldr	r3, [pc, #36]	@ (80186ac <_Bfree+0x3c>)
 8018688:	4809      	ldr	r0, [pc, #36]	@ (80186b0 <_Bfree+0x40>)
 801868a:	218f      	movs	r1, #143	@ 0x8f
 801868c:	f000 fd28 	bl	80190e0 <__assert_func>
 8018690:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018694:	6006      	str	r6, [r0, #0]
 8018696:	60c6      	str	r6, [r0, #12]
 8018698:	b13c      	cbz	r4, 80186aa <_Bfree+0x3a>
 801869a:	69eb      	ldr	r3, [r5, #28]
 801869c:	6862      	ldr	r2, [r4, #4]
 801869e:	68db      	ldr	r3, [r3, #12]
 80186a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80186a4:	6021      	str	r1, [r4, #0]
 80186a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80186aa:	bd70      	pop	{r4, r5, r6, pc}
 80186ac:	08019f72 	.word	0x08019f72
 80186b0:	08019f89 	.word	0x08019f89

080186b4 <__multadd>:
 80186b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80186b8:	690d      	ldr	r5, [r1, #16]
 80186ba:	4607      	mov	r7, r0
 80186bc:	460c      	mov	r4, r1
 80186be:	461e      	mov	r6, r3
 80186c0:	f101 0c14 	add.w	ip, r1, #20
 80186c4:	2000      	movs	r0, #0
 80186c6:	f8dc 3000 	ldr.w	r3, [ip]
 80186ca:	b299      	uxth	r1, r3
 80186cc:	fb02 6101 	mla	r1, r2, r1, r6
 80186d0:	0c1e      	lsrs	r6, r3, #16
 80186d2:	0c0b      	lsrs	r3, r1, #16
 80186d4:	fb02 3306 	mla	r3, r2, r6, r3
 80186d8:	b289      	uxth	r1, r1
 80186da:	3001      	adds	r0, #1
 80186dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80186e0:	4285      	cmp	r5, r0
 80186e2:	f84c 1b04 	str.w	r1, [ip], #4
 80186e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80186ea:	dcec      	bgt.n	80186c6 <__multadd+0x12>
 80186ec:	b30e      	cbz	r6, 8018732 <__multadd+0x7e>
 80186ee:	68a3      	ldr	r3, [r4, #8]
 80186f0:	42ab      	cmp	r3, r5
 80186f2:	dc19      	bgt.n	8018728 <__multadd+0x74>
 80186f4:	6861      	ldr	r1, [r4, #4]
 80186f6:	4638      	mov	r0, r7
 80186f8:	3101      	adds	r1, #1
 80186fa:	f7ff ff79 	bl	80185f0 <_Balloc>
 80186fe:	4680      	mov	r8, r0
 8018700:	b928      	cbnz	r0, 801870e <__multadd+0x5a>
 8018702:	4602      	mov	r2, r0
 8018704:	4b0c      	ldr	r3, [pc, #48]	@ (8018738 <__multadd+0x84>)
 8018706:	480d      	ldr	r0, [pc, #52]	@ (801873c <__multadd+0x88>)
 8018708:	21ba      	movs	r1, #186	@ 0xba
 801870a:	f000 fce9 	bl	80190e0 <__assert_func>
 801870e:	6922      	ldr	r2, [r4, #16]
 8018710:	3202      	adds	r2, #2
 8018712:	f104 010c 	add.w	r1, r4, #12
 8018716:	0092      	lsls	r2, r2, #2
 8018718:	300c      	adds	r0, #12
 801871a:	f7ff fb0e 	bl	8017d3a <memcpy>
 801871e:	4621      	mov	r1, r4
 8018720:	4638      	mov	r0, r7
 8018722:	f7ff ffa5 	bl	8018670 <_Bfree>
 8018726:	4644      	mov	r4, r8
 8018728:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801872c:	3501      	adds	r5, #1
 801872e:	615e      	str	r6, [r3, #20]
 8018730:	6125      	str	r5, [r4, #16]
 8018732:	4620      	mov	r0, r4
 8018734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018738:	08019f01 	.word	0x08019f01
 801873c:	08019f89 	.word	0x08019f89

08018740 <__s2b>:
 8018740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018744:	460c      	mov	r4, r1
 8018746:	4615      	mov	r5, r2
 8018748:	461f      	mov	r7, r3
 801874a:	2209      	movs	r2, #9
 801874c:	3308      	adds	r3, #8
 801874e:	4606      	mov	r6, r0
 8018750:	fb93 f3f2 	sdiv	r3, r3, r2
 8018754:	2100      	movs	r1, #0
 8018756:	2201      	movs	r2, #1
 8018758:	429a      	cmp	r2, r3
 801875a:	db09      	blt.n	8018770 <__s2b+0x30>
 801875c:	4630      	mov	r0, r6
 801875e:	f7ff ff47 	bl	80185f0 <_Balloc>
 8018762:	b940      	cbnz	r0, 8018776 <__s2b+0x36>
 8018764:	4602      	mov	r2, r0
 8018766:	4b19      	ldr	r3, [pc, #100]	@ (80187cc <__s2b+0x8c>)
 8018768:	4819      	ldr	r0, [pc, #100]	@ (80187d0 <__s2b+0x90>)
 801876a:	21d3      	movs	r1, #211	@ 0xd3
 801876c:	f000 fcb8 	bl	80190e0 <__assert_func>
 8018770:	0052      	lsls	r2, r2, #1
 8018772:	3101      	adds	r1, #1
 8018774:	e7f0      	b.n	8018758 <__s2b+0x18>
 8018776:	9b08      	ldr	r3, [sp, #32]
 8018778:	6143      	str	r3, [r0, #20]
 801877a:	2d09      	cmp	r5, #9
 801877c:	f04f 0301 	mov.w	r3, #1
 8018780:	6103      	str	r3, [r0, #16]
 8018782:	dd16      	ble.n	80187b2 <__s2b+0x72>
 8018784:	f104 0909 	add.w	r9, r4, #9
 8018788:	46c8      	mov	r8, r9
 801878a:	442c      	add	r4, r5
 801878c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018790:	4601      	mov	r1, r0
 8018792:	3b30      	subs	r3, #48	@ 0x30
 8018794:	220a      	movs	r2, #10
 8018796:	4630      	mov	r0, r6
 8018798:	f7ff ff8c 	bl	80186b4 <__multadd>
 801879c:	45a0      	cmp	r8, r4
 801879e:	d1f5      	bne.n	801878c <__s2b+0x4c>
 80187a0:	f1a5 0408 	sub.w	r4, r5, #8
 80187a4:	444c      	add	r4, r9
 80187a6:	1b2d      	subs	r5, r5, r4
 80187a8:	1963      	adds	r3, r4, r5
 80187aa:	42bb      	cmp	r3, r7
 80187ac:	db04      	blt.n	80187b8 <__s2b+0x78>
 80187ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80187b2:	340a      	adds	r4, #10
 80187b4:	2509      	movs	r5, #9
 80187b6:	e7f6      	b.n	80187a6 <__s2b+0x66>
 80187b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80187bc:	4601      	mov	r1, r0
 80187be:	3b30      	subs	r3, #48	@ 0x30
 80187c0:	220a      	movs	r2, #10
 80187c2:	4630      	mov	r0, r6
 80187c4:	f7ff ff76 	bl	80186b4 <__multadd>
 80187c8:	e7ee      	b.n	80187a8 <__s2b+0x68>
 80187ca:	bf00      	nop
 80187cc:	08019f01 	.word	0x08019f01
 80187d0:	08019f89 	.word	0x08019f89

080187d4 <__hi0bits>:
 80187d4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80187d8:	4603      	mov	r3, r0
 80187da:	bf36      	itet	cc
 80187dc:	0403      	lslcc	r3, r0, #16
 80187de:	2000      	movcs	r0, #0
 80187e0:	2010      	movcc	r0, #16
 80187e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80187e6:	bf3c      	itt	cc
 80187e8:	021b      	lslcc	r3, r3, #8
 80187ea:	3008      	addcc	r0, #8
 80187ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80187f0:	bf3c      	itt	cc
 80187f2:	011b      	lslcc	r3, r3, #4
 80187f4:	3004      	addcc	r0, #4
 80187f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80187fa:	bf3c      	itt	cc
 80187fc:	009b      	lslcc	r3, r3, #2
 80187fe:	3002      	addcc	r0, #2
 8018800:	2b00      	cmp	r3, #0
 8018802:	db05      	blt.n	8018810 <__hi0bits+0x3c>
 8018804:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8018808:	f100 0001 	add.w	r0, r0, #1
 801880c:	bf08      	it	eq
 801880e:	2020      	moveq	r0, #32
 8018810:	4770      	bx	lr

08018812 <__lo0bits>:
 8018812:	6803      	ldr	r3, [r0, #0]
 8018814:	4602      	mov	r2, r0
 8018816:	f013 0007 	ands.w	r0, r3, #7
 801881a:	d00b      	beq.n	8018834 <__lo0bits+0x22>
 801881c:	07d9      	lsls	r1, r3, #31
 801881e:	d421      	bmi.n	8018864 <__lo0bits+0x52>
 8018820:	0798      	lsls	r0, r3, #30
 8018822:	bf49      	itett	mi
 8018824:	085b      	lsrmi	r3, r3, #1
 8018826:	089b      	lsrpl	r3, r3, #2
 8018828:	2001      	movmi	r0, #1
 801882a:	6013      	strmi	r3, [r2, #0]
 801882c:	bf5c      	itt	pl
 801882e:	6013      	strpl	r3, [r2, #0]
 8018830:	2002      	movpl	r0, #2
 8018832:	4770      	bx	lr
 8018834:	b299      	uxth	r1, r3
 8018836:	b909      	cbnz	r1, 801883c <__lo0bits+0x2a>
 8018838:	0c1b      	lsrs	r3, r3, #16
 801883a:	2010      	movs	r0, #16
 801883c:	b2d9      	uxtb	r1, r3
 801883e:	b909      	cbnz	r1, 8018844 <__lo0bits+0x32>
 8018840:	3008      	adds	r0, #8
 8018842:	0a1b      	lsrs	r3, r3, #8
 8018844:	0719      	lsls	r1, r3, #28
 8018846:	bf04      	itt	eq
 8018848:	091b      	lsreq	r3, r3, #4
 801884a:	3004      	addeq	r0, #4
 801884c:	0799      	lsls	r1, r3, #30
 801884e:	bf04      	itt	eq
 8018850:	089b      	lsreq	r3, r3, #2
 8018852:	3002      	addeq	r0, #2
 8018854:	07d9      	lsls	r1, r3, #31
 8018856:	d403      	bmi.n	8018860 <__lo0bits+0x4e>
 8018858:	085b      	lsrs	r3, r3, #1
 801885a:	f100 0001 	add.w	r0, r0, #1
 801885e:	d003      	beq.n	8018868 <__lo0bits+0x56>
 8018860:	6013      	str	r3, [r2, #0]
 8018862:	4770      	bx	lr
 8018864:	2000      	movs	r0, #0
 8018866:	4770      	bx	lr
 8018868:	2020      	movs	r0, #32
 801886a:	4770      	bx	lr

0801886c <__i2b>:
 801886c:	b510      	push	{r4, lr}
 801886e:	460c      	mov	r4, r1
 8018870:	2101      	movs	r1, #1
 8018872:	f7ff febd 	bl	80185f0 <_Balloc>
 8018876:	4602      	mov	r2, r0
 8018878:	b928      	cbnz	r0, 8018886 <__i2b+0x1a>
 801887a:	4b05      	ldr	r3, [pc, #20]	@ (8018890 <__i2b+0x24>)
 801887c:	4805      	ldr	r0, [pc, #20]	@ (8018894 <__i2b+0x28>)
 801887e:	f240 1145 	movw	r1, #325	@ 0x145
 8018882:	f000 fc2d 	bl	80190e0 <__assert_func>
 8018886:	2301      	movs	r3, #1
 8018888:	6144      	str	r4, [r0, #20]
 801888a:	6103      	str	r3, [r0, #16]
 801888c:	bd10      	pop	{r4, pc}
 801888e:	bf00      	nop
 8018890:	08019f01 	.word	0x08019f01
 8018894:	08019f89 	.word	0x08019f89

08018898 <__multiply>:
 8018898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801889c:	4614      	mov	r4, r2
 801889e:	690a      	ldr	r2, [r1, #16]
 80188a0:	6923      	ldr	r3, [r4, #16]
 80188a2:	429a      	cmp	r2, r3
 80188a4:	bfa8      	it	ge
 80188a6:	4623      	movge	r3, r4
 80188a8:	460f      	mov	r7, r1
 80188aa:	bfa4      	itt	ge
 80188ac:	460c      	movge	r4, r1
 80188ae:	461f      	movge	r7, r3
 80188b0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80188b4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80188b8:	68a3      	ldr	r3, [r4, #8]
 80188ba:	6861      	ldr	r1, [r4, #4]
 80188bc:	eb0a 0609 	add.w	r6, sl, r9
 80188c0:	42b3      	cmp	r3, r6
 80188c2:	b085      	sub	sp, #20
 80188c4:	bfb8      	it	lt
 80188c6:	3101      	addlt	r1, #1
 80188c8:	f7ff fe92 	bl	80185f0 <_Balloc>
 80188cc:	b930      	cbnz	r0, 80188dc <__multiply+0x44>
 80188ce:	4602      	mov	r2, r0
 80188d0:	4b44      	ldr	r3, [pc, #272]	@ (80189e4 <__multiply+0x14c>)
 80188d2:	4845      	ldr	r0, [pc, #276]	@ (80189e8 <__multiply+0x150>)
 80188d4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80188d8:	f000 fc02 	bl	80190e0 <__assert_func>
 80188dc:	f100 0514 	add.w	r5, r0, #20
 80188e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80188e4:	462b      	mov	r3, r5
 80188e6:	2200      	movs	r2, #0
 80188e8:	4543      	cmp	r3, r8
 80188ea:	d321      	bcc.n	8018930 <__multiply+0x98>
 80188ec:	f107 0114 	add.w	r1, r7, #20
 80188f0:	f104 0214 	add.w	r2, r4, #20
 80188f4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80188f8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80188fc:	9302      	str	r3, [sp, #8]
 80188fe:	1b13      	subs	r3, r2, r4
 8018900:	3b15      	subs	r3, #21
 8018902:	f023 0303 	bic.w	r3, r3, #3
 8018906:	3304      	adds	r3, #4
 8018908:	f104 0715 	add.w	r7, r4, #21
 801890c:	42ba      	cmp	r2, r7
 801890e:	bf38      	it	cc
 8018910:	2304      	movcc	r3, #4
 8018912:	9301      	str	r3, [sp, #4]
 8018914:	9b02      	ldr	r3, [sp, #8]
 8018916:	9103      	str	r1, [sp, #12]
 8018918:	428b      	cmp	r3, r1
 801891a:	d80c      	bhi.n	8018936 <__multiply+0x9e>
 801891c:	2e00      	cmp	r6, #0
 801891e:	dd03      	ble.n	8018928 <__multiply+0x90>
 8018920:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018924:	2b00      	cmp	r3, #0
 8018926:	d05b      	beq.n	80189e0 <__multiply+0x148>
 8018928:	6106      	str	r6, [r0, #16]
 801892a:	b005      	add	sp, #20
 801892c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018930:	f843 2b04 	str.w	r2, [r3], #4
 8018934:	e7d8      	b.n	80188e8 <__multiply+0x50>
 8018936:	f8b1 a000 	ldrh.w	sl, [r1]
 801893a:	f1ba 0f00 	cmp.w	sl, #0
 801893e:	d024      	beq.n	801898a <__multiply+0xf2>
 8018940:	f104 0e14 	add.w	lr, r4, #20
 8018944:	46a9      	mov	r9, r5
 8018946:	f04f 0c00 	mov.w	ip, #0
 801894a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801894e:	f8d9 3000 	ldr.w	r3, [r9]
 8018952:	fa1f fb87 	uxth.w	fp, r7
 8018956:	b29b      	uxth	r3, r3
 8018958:	fb0a 330b 	mla	r3, sl, fp, r3
 801895c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8018960:	f8d9 7000 	ldr.w	r7, [r9]
 8018964:	4463      	add	r3, ip
 8018966:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801896a:	fb0a c70b 	mla	r7, sl, fp, ip
 801896e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8018972:	b29b      	uxth	r3, r3
 8018974:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018978:	4572      	cmp	r2, lr
 801897a:	f849 3b04 	str.w	r3, [r9], #4
 801897e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8018982:	d8e2      	bhi.n	801894a <__multiply+0xb2>
 8018984:	9b01      	ldr	r3, [sp, #4]
 8018986:	f845 c003 	str.w	ip, [r5, r3]
 801898a:	9b03      	ldr	r3, [sp, #12]
 801898c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8018990:	3104      	adds	r1, #4
 8018992:	f1b9 0f00 	cmp.w	r9, #0
 8018996:	d021      	beq.n	80189dc <__multiply+0x144>
 8018998:	682b      	ldr	r3, [r5, #0]
 801899a:	f104 0c14 	add.w	ip, r4, #20
 801899e:	46ae      	mov	lr, r5
 80189a0:	f04f 0a00 	mov.w	sl, #0
 80189a4:	f8bc b000 	ldrh.w	fp, [ip]
 80189a8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80189ac:	fb09 770b 	mla	r7, r9, fp, r7
 80189b0:	4457      	add	r7, sl
 80189b2:	b29b      	uxth	r3, r3
 80189b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80189b8:	f84e 3b04 	str.w	r3, [lr], #4
 80189bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80189c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80189c4:	f8be 3000 	ldrh.w	r3, [lr]
 80189c8:	fb09 330a 	mla	r3, r9, sl, r3
 80189cc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80189d0:	4562      	cmp	r2, ip
 80189d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80189d6:	d8e5      	bhi.n	80189a4 <__multiply+0x10c>
 80189d8:	9f01      	ldr	r7, [sp, #4]
 80189da:	51eb      	str	r3, [r5, r7]
 80189dc:	3504      	adds	r5, #4
 80189de:	e799      	b.n	8018914 <__multiply+0x7c>
 80189e0:	3e01      	subs	r6, #1
 80189e2:	e79b      	b.n	801891c <__multiply+0x84>
 80189e4:	08019f01 	.word	0x08019f01
 80189e8:	08019f89 	.word	0x08019f89

080189ec <__pow5mult>:
 80189ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80189f0:	4615      	mov	r5, r2
 80189f2:	f012 0203 	ands.w	r2, r2, #3
 80189f6:	4607      	mov	r7, r0
 80189f8:	460e      	mov	r6, r1
 80189fa:	d007      	beq.n	8018a0c <__pow5mult+0x20>
 80189fc:	4c25      	ldr	r4, [pc, #148]	@ (8018a94 <__pow5mult+0xa8>)
 80189fe:	3a01      	subs	r2, #1
 8018a00:	2300      	movs	r3, #0
 8018a02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018a06:	f7ff fe55 	bl	80186b4 <__multadd>
 8018a0a:	4606      	mov	r6, r0
 8018a0c:	10ad      	asrs	r5, r5, #2
 8018a0e:	d03d      	beq.n	8018a8c <__pow5mult+0xa0>
 8018a10:	69fc      	ldr	r4, [r7, #28]
 8018a12:	b97c      	cbnz	r4, 8018a34 <__pow5mult+0x48>
 8018a14:	2010      	movs	r0, #16
 8018a16:	f000 fb95 	bl	8019144 <malloc>
 8018a1a:	4602      	mov	r2, r0
 8018a1c:	61f8      	str	r0, [r7, #28]
 8018a1e:	b928      	cbnz	r0, 8018a2c <__pow5mult+0x40>
 8018a20:	4b1d      	ldr	r3, [pc, #116]	@ (8018a98 <__pow5mult+0xac>)
 8018a22:	481e      	ldr	r0, [pc, #120]	@ (8018a9c <__pow5mult+0xb0>)
 8018a24:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8018a28:	f000 fb5a 	bl	80190e0 <__assert_func>
 8018a2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018a30:	6004      	str	r4, [r0, #0]
 8018a32:	60c4      	str	r4, [r0, #12]
 8018a34:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8018a38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018a3c:	b94c      	cbnz	r4, 8018a52 <__pow5mult+0x66>
 8018a3e:	f240 2171 	movw	r1, #625	@ 0x271
 8018a42:	4638      	mov	r0, r7
 8018a44:	f7ff ff12 	bl	801886c <__i2b>
 8018a48:	2300      	movs	r3, #0
 8018a4a:	f8c8 0008 	str.w	r0, [r8, #8]
 8018a4e:	4604      	mov	r4, r0
 8018a50:	6003      	str	r3, [r0, #0]
 8018a52:	f04f 0900 	mov.w	r9, #0
 8018a56:	07eb      	lsls	r3, r5, #31
 8018a58:	d50a      	bpl.n	8018a70 <__pow5mult+0x84>
 8018a5a:	4631      	mov	r1, r6
 8018a5c:	4622      	mov	r2, r4
 8018a5e:	4638      	mov	r0, r7
 8018a60:	f7ff ff1a 	bl	8018898 <__multiply>
 8018a64:	4631      	mov	r1, r6
 8018a66:	4680      	mov	r8, r0
 8018a68:	4638      	mov	r0, r7
 8018a6a:	f7ff fe01 	bl	8018670 <_Bfree>
 8018a6e:	4646      	mov	r6, r8
 8018a70:	106d      	asrs	r5, r5, #1
 8018a72:	d00b      	beq.n	8018a8c <__pow5mult+0xa0>
 8018a74:	6820      	ldr	r0, [r4, #0]
 8018a76:	b938      	cbnz	r0, 8018a88 <__pow5mult+0x9c>
 8018a78:	4622      	mov	r2, r4
 8018a7a:	4621      	mov	r1, r4
 8018a7c:	4638      	mov	r0, r7
 8018a7e:	f7ff ff0b 	bl	8018898 <__multiply>
 8018a82:	6020      	str	r0, [r4, #0]
 8018a84:	f8c0 9000 	str.w	r9, [r0]
 8018a88:	4604      	mov	r4, r0
 8018a8a:	e7e4      	b.n	8018a56 <__pow5mult+0x6a>
 8018a8c:	4630      	mov	r0, r6
 8018a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a92:	bf00      	nop
 8018a94:	08019fe4 	.word	0x08019fe4
 8018a98:	08019f72 	.word	0x08019f72
 8018a9c:	08019f89 	.word	0x08019f89

08018aa0 <__lshift>:
 8018aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018aa4:	460c      	mov	r4, r1
 8018aa6:	6849      	ldr	r1, [r1, #4]
 8018aa8:	6923      	ldr	r3, [r4, #16]
 8018aaa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018aae:	68a3      	ldr	r3, [r4, #8]
 8018ab0:	4607      	mov	r7, r0
 8018ab2:	4691      	mov	r9, r2
 8018ab4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018ab8:	f108 0601 	add.w	r6, r8, #1
 8018abc:	42b3      	cmp	r3, r6
 8018abe:	db0b      	blt.n	8018ad8 <__lshift+0x38>
 8018ac0:	4638      	mov	r0, r7
 8018ac2:	f7ff fd95 	bl	80185f0 <_Balloc>
 8018ac6:	4605      	mov	r5, r0
 8018ac8:	b948      	cbnz	r0, 8018ade <__lshift+0x3e>
 8018aca:	4602      	mov	r2, r0
 8018acc:	4b28      	ldr	r3, [pc, #160]	@ (8018b70 <__lshift+0xd0>)
 8018ace:	4829      	ldr	r0, [pc, #164]	@ (8018b74 <__lshift+0xd4>)
 8018ad0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8018ad4:	f000 fb04 	bl	80190e0 <__assert_func>
 8018ad8:	3101      	adds	r1, #1
 8018ada:	005b      	lsls	r3, r3, #1
 8018adc:	e7ee      	b.n	8018abc <__lshift+0x1c>
 8018ade:	2300      	movs	r3, #0
 8018ae0:	f100 0114 	add.w	r1, r0, #20
 8018ae4:	f100 0210 	add.w	r2, r0, #16
 8018ae8:	4618      	mov	r0, r3
 8018aea:	4553      	cmp	r3, sl
 8018aec:	db33      	blt.n	8018b56 <__lshift+0xb6>
 8018aee:	6920      	ldr	r0, [r4, #16]
 8018af0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018af4:	f104 0314 	add.w	r3, r4, #20
 8018af8:	f019 091f 	ands.w	r9, r9, #31
 8018afc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018b00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018b04:	d02b      	beq.n	8018b5e <__lshift+0xbe>
 8018b06:	f1c9 0e20 	rsb	lr, r9, #32
 8018b0a:	468a      	mov	sl, r1
 8018b0c:	2200      	movs	r2, #0
 8018b0e:	6818      	ldr	r0, [r3, #0]
 8018b10:	fa00 f009 	lsl.w	r0, r0, r9
 8018b14:	4310      	orrs	r0, r2
 8018b16:	f84a 0b04 	str.w	r0, [sl], #4
 8018b1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8018b1e:	459c      	cmp	ip, r3
 8018b20:	fa22 f20e 	lsr.w	r2, r2, lr
 8018b24:	d8f3      	bhi.n	8018b0e <__lshift+0x6e>
 8018b26:	ebac 0304 	sub.w	r3, ip, r4
 8018b2a:	3b15      	subs	r3, #21
 8018b2c:	f023 0303 	bic.w	r3, r3, #3
 8018b30:	3304      	adds	r3, #4
 8018b32:	f104 0015 	add.w	r0, r4, #21
 8018b36:	4584      	cmp	ip, r0
 8018b38:	bf38      	it	cc
 8018b3a:	2304      	movcc	r3, #4
 8018b3c:	50ca      	str	r2, [r1, r3]
 8018b3e:	b10a      	cbz	r2, 8018b44 <__lshift+0xa4>
 8018b40:	f108 0602 	add.w	r6, r8, #2
 8018b44:	3e01      	subs	r6, #1
 8018b46:	4638      	mov	r0, r7
 8018b48:	612e      	str	r6, [r5, #16]
 8018b4a:	4621      	mov	r1, r4
 8018b4c:	f7ff fd90 	bl	8018670 <_Bfree>
 8018b50:	4628      	mov	r0, r5
 8018b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b56:	f842 0f04 	str.w	r0, [r2, #4]!
 8018b5a:	3301      	adds	r3, #1
 8018b5c:	e7c5      	b.n	8018aea <__lshift+0x4a>
 8018b5e:	3904      	subs	r1, #4
 8018b60:	f853 2b04 	ldr.w	r2, [r3], #4
 8018b64:	f841 2f04 	str.w	r2, [r1, #4]!
 8018b68:	459c      	cmp	ip, r3
 8018b6a:	d8f9      	bhi.n	8018b60 <__lshift+0xc0>
 8018b6c:	e7ea      	b.n	8018b44 <__lshift+0xa4>
 8018b6e:	bf00      	nop
 8018b70:	08019f01 	.word	0x08019f01
 8018b74:	08019f89 	.word	0x08019f89

08018b78 <__mcmp>:
 8018b78:	690a      	ldr	r2, [r1, #16]
 8018b7a:	4603      	mov	r3, r0
 8018b7c:	6900      	ldr	r0, [r0, #16]
 8018b7e:	1a80      	subs	r0, r0, r2
 8018b80:	b530      	push	{r4, r5, lr}
 8018b82:	d10e      	bne.n	8018ba2 <__mcmp+0x2a>
 8018b84:	3314      	adds	r3, #20
 8018b86:	3114      	adds	r1, #20
 8018b88:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8018b8c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8018b90:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018b94:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018b98:	4295      	cmp	r5, r2
 8018b9a:	d003      	beq.n	8018ba4 <__mcmp+0x2c>
 8018b9c:	d205      	bcs.n	8018baa <__mcmp+0x32>
 8018b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8018ba2:	bd30      	pop	{r4, r5, pc}
 8018ba4:	42a3      	cmp	r3, r4
 8018ba6:	d3f3      	bcc.n	8018b90 <__mcmp+0x18>
 8018ba8:	e7fb      	b.n	8018ba2 <__mcmp+0x2a>
 8018baa:	2001      	movs	r0, #1
 8018bac:	e7f9      	b.n	8018ba2 <__mcmp+0x2a>
	...

08018bb0 <__mdiff>:
 8018bb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bb4:	4689      	mov	r9, r1
 8018bb6:	4606      	mov	r6, r0
 8018bb8:	4611      	mov	r1, r2
 8018bba:	4648      	mov	r0, r9
 8018bbc:	4614      	mov	r4, r2
 8018bbe:	f7ff ffdb 	bl	8018b78 <__mcmp>
 8018bc2:	1e05      	subs	r5, r0, #0
 8018bc4:	d112      	bne.n	8018bec <__mdiff+0x3c>
 8018bc6:	4629      	mov	r1, r5
 8018bc8:	4630      	mov	r0, r6
 8018bca:	f7ff fd11 	bl	80185f0 <_Balloc>
 8018bce:	4602      	mov	r2, r0
 8018bd0:	b928      	cbnz	r0, 8018bde <__mdiff+0x2e>
 8018bd2:	4b3f      	ldr	r3, [pc, #252]	@ (8018cd0 <__mdiff+0x120>)
 8018bd4:	f240 2137 	movw	r1, #567	@ 0x237
 8018bd8:	483e      	ldr	r0, [pc, #248]	@ (8018cd4 <__mdiff+0x124>)
 8018bda:	f000 fa81 	bl	80190e0 <__assert_func>
 8018bde:	2301      	movs	r3, #1
 8018be0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018be4:	4610      	mov	r0, r2
 8018be6:	b003      	add	sp, #12
 8018be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bec:	bfbc      	itt	lt
 8018bee:	464b      	movlt	r3, r9
 8018bf0:	46a1      	movlt	r9, r4
 8018bf2:	4630      	mov	r0, r6
 8018bf4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8018bf8:	bfba      	itte	lt
 8018bfa:	461c      	movlt	r4, r3
 8018bfc:	2501      	movlt	r5, #1
 8018bfe:	2500      	movge	r5, #0
 8018c00:	f7ff fcf6 	bl	80185f0 <_Balloc>
 8018c04:	4602      	mov	r2, r0
 8018c06:	b918      	cbnz	r0, 8018c10 <__mdiff+0x60>
 8018c08:	4b31      	ldr	r3, [pc, #196]	@ (8018cd0 <__mdiff+0x120>)
 8018c0a:	f240 2145 	movw	r1, #581	@ 0x245
 8018c0e:	e7e3      	b.n	8018bd8 <__mdiff+0x28>
 8018c10:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8018c14:	6926      	ldr	r6, [r4, #16]
 8018c16:	60c5      	str	r5, [r0, #12]
 8018c18:	f109 0310 	add.w	r3, r9, #16
 8018c1c:	f109 0514 	add.w	r5, r9, #20
 8018c20:	f104 0e14 	add.w	lr, r4, #20
 8018c24:	f100 0b14 	add.w	fp, r0, #20
 8018c28:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8018c2c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8018c30:	9301      	str	r3, [sp, #4]
 8018c32:	46d9      	mov	r9, fp
 8018c34:	f04f 0c00 	mov.w	ip, #0
 8018c38:	9b01      	ldr	r3, [sp, #4]
 8018c3a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8018c3e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8018c42:	9301      	str	r3, [sp, #4]
 8018c44:	fa1f f38a 	uxth.w	r3, sl
 8018c48:	4619      	mov	r1, r3
 8018c4a:	b283      	uxth	r3, r0
 8018c4c:	1acb      	subs	r3, r1, r3
 8018c4e:	0c00      	lsrs	r0, r0, #16
 8018c50:	4463      	add	r3, ip
 8018c52:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8018c56:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8018c5a:	b29b      	uxth	r3, r3
 8018c5c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8018c60:	4576      	cmp	r6, lr
 8018c62:	f849 3b04 	str.w	r3, [r9], #4
 8018c66:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8018c6a:	d8e5      	bhi.n	8018c38 <__mdiff+0x88>
 8018c6c:	1b33      	subs	r3, r6, r4
 8018c6e:	3b15      	subs	r3, #21
 8018c70:	f023 0303 	bic.w	r3, r3, #3
 8018c74:	3415      	adds	r4, #21
 8018c76:	3304      	adds	r3, #4
 8018c78:	42a6      	cmp	r6, r4
 8018c7a:	bf38      	it	cc
 8018c7c:	2304      	movcc	r3, #4
 8018c7e:	441d      	add	r5, r3
 8018c80:	445b      	add	r3, fp
 8018c82:	461e      	mov	r6, r3
 8018c84:	462c      	mov	r4, r5
 8018c86:	4544      	cmp	r4, r8
 8018c88:	d30e      	bcc.n	8018ca8 <__mdiff+0xf8>
 8018c8a:	f108 0103 	add.w	r1, r8, #3
 8018c8e:	1b49      	subs	r1, r1, r5
 8018c90:	f021 0103 	bic.w	r1, r1, #3
 8018c94:	3d03      	subs	r5, #3
 8018c96:	45a8      	cmp	r8, r5
 8018c98:	bf38      	it	cc
 8018c9a:	2100      	movcc	r1, #0
 8018c9c:	440b      	add	r3, r1
 8018c9e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018ca2:	b191      	cbz	r1, 8018cca <__mdiff+0x11a>
 8018ca4:	6117      	str	r7, [r2, #16]
 8018ca6:	e79d      	b.n	8018be4 <__mdiff+0x34>
 8018ca8:	f854 1b04 	ldr.w	r1, [r4], #4
 8018cac:	46e6      	mov	lr, ip
 8018cae:	0c08      	lsrs	r0, r1, #16
 8018cb0:	fa1c fc81 	uxtah	ip, ip, r1
 8018cb4:	4471      	add	r1, lr
 8018cb6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8018cba:	b289      	uxth	r1, r1
 8018cbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8018cc0:	f846 1b04 	str.w	r1, [r6], #4
 8018cc4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8018cc8:	e7dd      	b.n	8018c86 <__mdiff+0xd6>
 8018cca:	3f01      	subs	r7, #1
 8018ccc:	e7e7      	b.n	8018c9e <__mdiff+0xee>
 8018cce:	bf00      	nop
 8018cd0:	08019f01 	.word	0x08019f01
 8018cd4:	08019f89 	.word	0x08019f89

08018cd8 <__ulp>:
 8018cd8:	b082      	sub	sp, #8
 8018cda:	ed8d 0b00 	vstr	d0, [sp]
 8018cde:	9a01      	ldr	r2, [sp, #4]
 8018ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8018d20 <__ulp+0x48>)
 8018ce2:	4013      	ands	r3, r2
 8018ce4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8018ce8:	2b00      	cmp	r3, #0
 8018cea:	dc08      	bgt.n	8018cfe <__ulp+0x26>
 8018cec:	425b      	negs	r3, r3
 8018cee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8018cf2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8018cf6:	da04      	bge.n	8018d02 <__ulp+0x2a>
 8018cf8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8018cfc:	4113      	asrs	r3, r2
 8018cfe:	2200      	movs	r2, #0
 8018d00:	e008      	b.n	8018d14 <__ulp+0x3c>
 8018d02:	f1a2 0314 	sub.w	r3, r2, #20
 8018d06:	2b1e      	cmp	r3, #30
 8018d08:	bfda      	itte	le
 8018d0a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8018d0e:	40da      	lsrle	r2, r3
 8018d10:	2201      	movgt	r2, #1
 8018d12:	2300      	movs	r3, #0
 8018d14:	4619      	mov	r1, r3
 8018d16:	4610      	mov	r0, r2
 8018d18:	ec41 0b10 	vmov	d0, r0, r1
 8018d1c:	b002      	add	sp, #8
 8018d1e:	4770      	bx	lr
 8018d20:	7ff00000 	.word	0x7ff00000

08018d24 <__b2d>:
 8018d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d28:	6906      	ldr	r6, [r0, #16]
 8018d2a:	f100 0814 	add.w	r8, r0, #20
 8018d2e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8018d32:	1f37      	subs	r7, r6, #4
 8018d34:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018d38:	4610      	mov	r0, r2
 8018d3a:	f7ff fd4b 	bl	80187d4 <__hi0bits>
 8018d3e:	f1c0 0320 	rsb	r3, r0, #32
 8018d42:	280a      	cmp	r0, #10
 8018d44:	600b      	str	r3, [r1, #0]
 8018d46:	491b      	ldr	r1, [pc, #108]	@ (8018db4 <__b2d+0x90>)
 8018d48:	dc15      	bgt.n	8018d76 <__b2d+0x52>
 8018d4a:	f1c0 0c0b 	rsb	ip, r0, #11
 8018d4e:	fa22 f30c 	lsr.w	r3, r2, ip
 8018d52:	45b8      	cmp	r8, r7
 8018d54:	ea43 0501 	orr.w	r5, r3, r1
 8018d58:	bf34      	ite	cc
 8018d5a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8018d5e:	2300      	movcs	r3, #0
 8018d60:	3015      	adds	r0, #21
 8018d62:	fa02 f000 	lsl.w	r0, r2, r0
 8018d66:	fa23 f30c 	lsr.w	r3, r3, ip
 8018d6a:	4303      	orrs	r3, r0
 8018d6c:	461c      	mov	r4, r3
 8018d6e:	ec45 4b10 	vmov	d0, r4, r5
 8018d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d76:	45b8      	cmp	r8, r7
 8018d78:	bf3a      	itte	cc
 8018d7a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8018d7e:	f1a6 0708 	subcc.w	r7, r6, #8
 8018d82:	2300      	movcs	r3, #0
 8018d84:	380b      	subs	r0, #11
 8018d86:	d012      	beq.n	8018dae <__b2d+0x8a>
 8018d88:	f1c0 0120 	rsb	r1, r0, #32
 8018d8c:	fa23 f401 	lsr.w	r4, r3, r1
 8018d90:	4082      	lsls	r2, r0
 8018d92:	4322      	orrs	r2, r4
 8018d94:	4547      	cmp	r7, r8
 8018d96:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8018d9a:	bf8c      	ite	hi
 8018d9c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8018da0:	2200      	movls	r2, #0
 8018da2:	4083      	lsls	r3, r0
 8018da4:	40ca      	lsrs	r2, r1
 8018da6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8018daa:	4313      	orrs	r3, r2
 8018dac:	e7de      	b.n	8018d6c <__b2d+0x48>
 8018dae:	ea42 0501 	orr.w	r5, r2, r1
 8018db2:	e7db      	b.n	8018d6c <__b2d+0x48>
 8018db4:	3ff00000 	.word	0x3ff00000

08018db8 <__d2b>:
 8018db8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018dbc:	460f      	mov	r7, r1
 8018dbe:	2101      	movs	r1, #1
 8018dc0:	ec59 8b10 	vmov	r8, r9, d0
 8018dc4:	4616      	mov	r6, r2
 8018dc6:	f7ff fc13 	bl	80185f0 <_Balloc>
 8018dca:	4604      	mov	r4, r0
 8018dcc:	b930      	cbnz	r0, 8018ddc <__d2b+0x24>
 8018dce:	4602      	mov	r2, r0
 8018dd0:	4b23      	ldr	r3, [pc, #140]	@ (8018e60 <__d2b+0xa8>)
 8018dd2:	4824      	ldr	r0, [pc, #144]	@ (8018e64 <__d2b+0xac>)
 8018dd4:	f240 310f 	movw	r1, #783	@ 0x30f
 8018dd8:	f000 f982 	bl	80190e0 <__assert_func>
 8018ddc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018de0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018de4:	b10d      	cbz	r5, 8018dea <__d2b+0x32>
 8018de6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8018dea:	9301      	str	r3, [sp, #4]
 8018dec:	f1b8 0300 	subs.w	r3, r8, #0
 8018df0:	d023      	beq.n	8018e3a <__d2b+0x82>
 8018df2:	4668      	mov	r0, sp
 8018df4:	9300      	str	r3, [sp, #0]
 8018df6:	f7ff fd0c 	bl	8018812 <__lo0bits>
 8018dfa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8018dfe:	b1d0      	cbz	r0, 8018e36 <__d2b+0x7e>
 8018e00:	f1c0 0320 	rsb	r3, r0, #32
 8018e04:	fa02 f303 	lsl.w	r3, r2, r3
 8018e08:	430b      	orrs	r3, r1
 8018e0a:	40c2      	lsrs	r2, r0
 8018e0c:	6163      	str	r3, [r4, #20]
 8018e0e:	9201      	str	r2, [sp, #4]
 8018e10:	9b01      	ldr	r3, [sp, #4]
 8018e12:	61a3      	str	r3, [r4, #24]
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	bf0c      	ite	eq
 8018e18:	2201      	moveq	r2, #1
 8018e1a:	2202      	movne	r2, #2
 8018e1c:	6122      	str	r2, [r4, #16]
 8018e1e:	b1a5      	cbz	r5, 8018e4a <__d2b+0x92>
 8018e20:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8018e24:	4405      	add	r5, r0
 8018e26:	603d      	str	r5, [r7, #0]
 8018e28:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8018e2c:	6030      	str	r0, [r6, #0]
 8018e2e:	4620      	mov	r0, r4
 8018e30:	b003      	add	sp, #12
 8018e32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018e36:	6161      	str	r1, [r4, #20]
 8018e38:	e7ea      	b.n	8018e10 <__d2b+0x58>
 8018e3a:	a801      	add	r0, sp, #4
 8018e3c:	f7ff fce9 	bl	8018812 <__lo0bits>
 8018e40:	9b01      	ldr	r3, [sp, #4]
 8018e42:	6163      	str	r3, [r4, #20]
 8018e44:	3020      	adds	r0, #32
 8018e46:	2201      	movs	r2, #1
 8018e48:	e7e8      	b.n	8018e1c <__d2b+0x64>
 8018e4a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018e4e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8018e52:	6038      	str	r0, [r7, #0]
 8018e54:	6918      	ldr	r0, [r3, #16]
 8018e56:	f7ff fcbd 	bl	80187d4 <__hi0bits>
 8018e5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018e5e:	e7e5      	b.n	8018e2c <__d2b+0x74>
 8018e60:	08019f01 	.word	0x08019f01
 8018e64:	08019f89 	.word	0x08019f89

08018e68 <__ratio>:
 8018e68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e6c:	4688      	mov	r8, r1
 8018e6e:	4669      	mov	r1, sp
 8018e70:	4681      	mov	r9, r0
 8018e72:	f7ff ff57 	bl	8018d24 <__b2d>
 8018e76:	a901      	add	r1, sp, #4
 8018e78:	4640      	mov	r0, r8
 8018e7a:	ec55 4b10 	vmov	r4, r5, d0
 8018e7e:	f7ff ff51 	bl	8018d24 <__b2d>
 8018e82:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018e86:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8018e8a:	1ad2      	subs	r2, r2, r3
 8018e8c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8018e90:	1a5b      	subs	r3, r3, r1
 8018e92:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8018e96:	ec57 6b10 	vmov	r6, r7, d0
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	bfd6      	itet	le
 8018e9e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018ea2:	462a      	movgt	r2, r5
 8018ea4:	463a      	movle	r2, r7
 8018ea6:	46ab      	mov	fp, r5
 8018ea8:	46a2      	mov	sl, r4
 8018eaa:	bfce      	itee	gt
 8018eac:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8018eb0:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8018eb4:	ee00 3a90 	vmovle	s1, r3
 8018eb8:	ec4b ab17 	vmov	d7, sl, fp
 8018ebc:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8018ec0:	b003      	add	sp, #12
 8018ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018ec6 <__copybits>:
 8018ec6:	3901      	subs	r1, #1
 8018ec8:	b570      	push	{r4, r5, r6, lr}
 8018eca:	1149      	asrs	r1, r1, #5
 8018ecc:	6914      	ldr	r4, [r2, #16]
 8018ece:	3101      	adds	r1, #1
 8018ed0:	f102 0314 	add.w	r3, r2, #20
 8018ed4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018ed8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018edc:	1f05      	subs	r5, r0, #4
 8018ede:	42a3      	cmp	r3, r4
 8018ee0:	d30c      	bcc.n	8018efc <__copybits+0x36>
 8018ee2:	1aa3      	subs	r3, r4, r2
 8018ee4:	3b11      	subs	r3, #17
 8018ee6:	f023 0303 	bic.w	r3, r3, #3
 8018eea:	3211      	adds	r2, #17
 8018eec:	42a2      	cmp	r2, r4
 8018eee:	bf88      	it	hi
 8018ef0:	2300      	movhi	r3, #0
 8018ef2:	4418      	add	r0, r3
 8018ef4:	2300      	movs	r3, #0
 8018ef6:	4288      	cmp	r0, r1
 8018ef8:	d305      	bcc.n	8018f06 <__copybits+0x40>
 8018efa:	bd70      	pop	{r4, r5, r6, pc}
 8018efc:	f853 6b04 	ldr.w	r6, [r3], #4
 8018f00:	f845 6f04 	str.w	r6, [r5, #4]!
 8018f04:	e7eb      	b.n	8018ede <__copybits+0x18>
 8018f06:	f840 3b04 	str.w	r3, [r0], #4
 8018f0a:	e7f4      	b.n	8018ef6 <__copybits+0x30>

08018f0c <__any_on>:
 8018f0c:	f100 0214 	add.w	r2, r0, #20
 8018f10:	6900      	ldr	r0, [r0, #16]
 8018f12:	114b      	asrs	r3, r1, #5
 8018f14:	4298      	cmp	r0, r3
 8018f16:	b510      	push	{r4, lr}
 8018f18:	db11      	blt.n	8018f3e <__any_on+0x32>
 8018f1a:	dd0a      	ble.n	8018f32 <__any_on+0x26>
 8018f1c:	f011 011f 	ands.w	r1, r1, #31
 8018f20:	d007      	beq.n	8018f32 <__any_on+0x26>
 8018f22:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018f26:	fa24 f001 	lsr.w	r0, r4, r1
 8018f2a:	fa00 f101 	lsl.w	r1, r0, r1
 8018f2e:	428c      	cmp	r4, r1
 8018f30:	d10b      	bne.n	8018f4a <__any_on+0x3e>
 8018f32:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018f36:	4293      	cmp	r3, r2
 8018f38:	d803      	bhi.n	8018f42 <__any_on+0x36>
 8018f3a:	2000      	movs	r0, #0
 8018f3c:	bd10      	pop	{r4, pc}
 8018f3e:	4603      	mov	r3, r0
 8018f40:	e7f7      	b.n	8018f32 <__any_on+0x26>
 8018f42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018f46:	2900      	cmp	r1, #0
 8018f48:	d0f5      	beq.n	8018f36 <__any_on+0x2a>
 8018f4a:	2001      	movs	r0, #1
 8018f4c:	e7f6      	b.n	8018f3c <__any_on+0x30>

08018f4e <__ascii_wctomb>:
 8018f4e:	4603      	mov	r3, r0
 8018f50:	4608      	mov	r0, r1
 8018f52:	b141      	cbz	r1, 8018f66 <__ascii_wctomb+0x18>
 8018f54:	2aff      	cmp	r2, #255	@ 0xff
 8018f56:	d904      	bls.n	8018f62 <__ascii_wctomb+0x14>
 8018f58:	228a      	movs	r2, #138	@ 0x8a
 8018f5a:	601a      	str	r2, [r3, #0]
 8018f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8018f60:	4770      	bx	lr
 8018f62:	700a      	strb	r2, [r1, #0]
 8018f64:	2001      	movs	r0, #1
 8018f66:	4770      	bx	lr

08018f68 <__sflush_r>:
 8018f68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f70:	0716      	lsls	r6, r2, #28
 8018f72:	4605      	mov	r5, r0
 8018f74:	460c      	mov	r4, r1
 8018f76:	d454      	bmi.n	8019022 <__sflush_r+0xba>
 8018f78:	684b      	ldr	r3, [r1, #4]
 8018f7a:	2b00      	cmp	r3, #0
 8018f7c:	dc02      	bgt.n	8018f84 <__sflush_r+0x1c>
 8018f7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018f80:	2b00      	cmp	r3, #0
 8018f82:	dd48      	ble.n	8019016 <__sflush_r+0xae>
 8018f84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018f86:	2e00      	cmp	r6, #0
 8018f88:	d045      	beq.n	8019016 <__sflush_r+0xae>
 8018f8a:	2300      	movs	r3, #0
 8018f8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018f90:	682f      	ldr	r7, [r5, #0]
 8018f92:	6a21      	ldr	r1, [r4, #32]
 8018f94:	602b      	str	r3, [r5, #0]
 8018f96:	d030      	beq.n	8018ffa <__sflush_r+0x92>
 8018f98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018f9a:	89a3      	ldrh	r3, [r4, #12]
 8018f9c:	0759      	lsls	r1, r3, #29
 8018f9e:	d505      	bpl.n	8018fac <__sflush_r+0x44>
 8018fa0:	6863      	ldr	r3, [r4, #4]
 8018fa2:	1ad2      	subs	r2, r2, r3
 8018fa4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018fa6:	b10b      	cbz	r3, 8018fac <__sflush_r+0x44>
 8018fa8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018faa:	1ad2      	subs	r2, r2, r3
 8018fac:	2300      	movs	r3, #0
 8018fae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018fb0:	6a21      	ldr	r1, [r4, #32]
 8018fb2:	4628      	mov	r0, r5
 8018fb4:	47b0      	blx	r6
 8018fb6:	1c43      	adds	r3, r0, #1
 8018fb8:	89a3      	ldrh	r3, [r4, #12]
 8018fba:	d106      	bne.n	8018fca <__sflush_r+0x62>
 8018fbc:	6829      	ldr	r1, [r5, #0]
 8018fbe:	291d      	cmp	r1, #29
 8018fc0:	d82b      	bhi.n	801901a <__sflush_r+0xb2>
 8018fc2:	4a2a      	ldr	r2, [pc, #168]	@ (801906c <__sflush_r+0x104>)
 8018fc4:	410a      	asrs	r2, r1
 8018fc6:	07d6      	lsls	r6, r2, #31
 8018fc8:	d427      	bmi.n	801901a <__sflush_r+0xb2>
 8018fca:	2200      	movs	r2, #0
 8018fcc:	6062      	str	r2, [r4, #4]
 8018fce:	04d9      	lsls	r1, r3, #19
 8018fd0:	6922      	ldr	r2, [r4, #16]
 8018fd2:	6022      	str	r2, [r4, #0]
 8018fd4:	d504      	bpl.n	8018fe0 <__sflush_r+0x78>
 8018fd6:	1c42      	adds	r2, r0, #1
 8018fd8:	d101      	bne.n	8018fde <__sflush_r+0x76>
 8018fda:	682b      	ldr	r3, [r5, #0]
 8018fdc:	b903      	cbnz	r3, 8018fe0 <__sflush_r+0x78>
 8018fde:	6560      	str	r0, [r4, #84]	@ 0x54
 8018fe0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018fe2:	602f      	str	r7, [r5, #0]
 8018fe4:	b1b9      	cbz	r1, 8019016 <__sflush_r+0xae>
 8018fe6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018fea:	4299      	cmp	r1, r3
 8018fec:	d002      	beq.n	8018ff4 <__sflush_r+0x8c>
 8018fee:	4628      	mov	r0, r5
 8018ff0:	f7fe feba 	bl	8017d68 <_free_r>
 8018ff4:	2300      	movs	r3, #0
 8018ff6:	6363      	str	r3, [r4, #52]	@ 0x34
 8018ff8:	e00d      	b.n	8019016 <__sflush_r+0xae>
 8018ffa:	2301      	movs	r3, #1
 8018ffc:	4628      	mov	r0, r5
 8018ffe:	47b0      	blx	r6
 8019000:	4602      	mov	r2, r0
 8019002:	1c50      	adds	r0, r2, #1
 8019004:	d1c9      	bne.n	8018f9a <__sflush_r+0x32>
 8019006:	682b      	ldr	r3, [r5, #0]
 8019008:	2b00      	cmp	r3, #0
 801900a:	d0c6      	beq.n	8018f9a <__sflush_r+0x32>
 801900c:	2b1d      	cmp	r3, #29
 801900e:	d001      	beq.n	8019014 <__sflush_r+0xac>
 8019010:	2b16      	cmp	r3, #22
 8019012:	d11e      	bne.n	8019052 <__sflush_r+0xea>
 8019014:	602f      	str	r7, [r5, #0]
 8019016:	2000      	movs	r0, #0
 8019018:	e022      	b.n	8019060 <__sflush_r+0xf8>
 801901a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801901e:	b21b      	sxth	r3, r3
 8019020:	e01b      	b.n	801905a <__sflush_r+0xf2>
 8019022:	690f      	ldr	r7, [r1, #16]
 8019024:	2f00      	cmp	r7, #0
 8019026:	d0f6      	beq.n	8019016 <__sflush_r+0xae>
 8019028:	0793      	lsls	r3, r2, #30
 801902a:	680e      	ldr	r6, [r1, #0]
 801902c:	bf08      	it	eq
 801902e:	694b      	ldreq	r3, [r1, #20]
 8019030:	600f      	str	r7, [r1, #0]
 8019032:	bf18      	it	ne
 8019034:	2300      	movne	r3, #0
 8019036:	eba6 0807 	sub.w	r8, r6, r7
 801903a:	608b      	str	r3, [r1, #8]
 801903c:	f1b8 0f00 	cmp.w	r8, #0
 8019040:	dde9      	ble.n	8019016 <__sflush_r+0xae>
 8019042:	6a21      	ldr	r1, [r4, #32]
 8019044:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8019046:	4643      	mov	r3, r8
 8019048:	463a      	mov	r2, r7
 801904a:	4628      	mov	r0, r5
 801904c:	47b0      	blx	r6
 801904e:	2800      	cmp	r0, #0
 8019050:	dc08      	bgt.n	8019064 <__sflush_r+0xfc>
 8019052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019056:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801905a:	81a3      	strh	r3, [r4, #12]
 801905c:	f04f 30ff 	mov.w	r0, #4294967295
 8019060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019064:	4407      	add	r7, r0
 8019066:	eba8 0800 	sub.w	r8, r8, r0
 801906a:	e7e7      	b.n	801903c <__sflush_r+0xd4>
 801906c:	dfbffffe 	.word	0xdfbffffe

08019070 <_fflush_r>:
 8019070:	b538      	push	{r3, r4, r5, lr}
 8019072:	690b      	ldr	r3, [r1, #16]
 8019074:	4605      	mov	r5, r0
 8019076:	460c      	mov	r4, r1
 8019078:	b913      	cbnz	r3, 8019080 <_fflush_r+0x10>
 801907a:	2500      	movs	r5, #0
 801907c:	4628      	mov	r0, r5
 801907e:	bd38      	pop	{r3, r4, r5, pc}
 8019080:	b118      	cbz	r0, 801908a <_fflush_r+0x1a>
 8019082:	6a03      	ldr	r3, [r0, #32]
 8019084:	b90b      	cbnz	r3, 801908a <_fflush_r+0x1a>
 8019086:	f7fe fd45 	bl	8017b14 <__sinit>
 801908a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801908e:	2b00      	cmp	r3, #0
 8019090:	d0f3      	beq.n	801907a <_fflush_r+0xa>
 8019092:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019094:	07d0      	lsls	r0, r2, #31
 8019096:	d404      	bmi.n	80190a2 <_fflush_r+0x32>
 8019098:	0599      	lsls	r1, r3, #22
 801909a:	d402      	bmi.n	80190a2 <_fflush_r+0x32>
 801909c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801909e:	f7fe fe4a 	bl	8017d36 <__retarget_lock_acquire_recursive>
 80190a2:	4628      	mov	r0, r5
 80190a4:	4621      	mov	r1, r4
 80190a6:	f7ff ff5f 	bl	8018f68 <__sflush_r>
 80190aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80190ac:	07da      	lsls	r2, r3, #31
 80190ae:	4605      	mov	r5, r0
 80190b0:	d4e4      	bmi.n	801907c <_fflush_r+0xc>
 80190b2:	89a3      	ldrh	r3, [r4, #12]
 80190b4:	059b      	lsls	r3, r3, #22
 80190b6:	d4e1      	bmi.n	801907c <_fflush_r+0xc>
 80190b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80190ba:	f7fe fe3d 	bl	8017d38 <__retarget_lock_release_recursive>
 80190be:	e7dd      	b.n	801907c <_fflush_r+0xc>

080190c0 <_sbrk_r>:
 80190c0:	b538      	push	{r3, r4, r5, lr}
 80190c2:	4d06      	ldr	r5, [pc, #24]	@ (80190dc <_sbrk_r+0x1c>)
 80190c4:	2300      	movs	r3, #0
 80190c6:	4604      	mov	r4, r0
 80190c8:	4608      	mov	r0, r1
 80190ca:	602b      	str	r3, [r5, #0]
 80190cc:	f7ea fb18 	bl	8003700 <_sbrk>
 80190d0:	1c43      	adds	r3, r0, #1
 80190d2:	d102      	bne.n	80190da <_sbrk_r+0x1a>
 80190d4:	682b      	ldr	r3, [r5, #0]
 80190d6:	b103      	cbz	r3, 80190da <_sbrk_r+0x1a>
 80190d8:	6023      	str	r3, [r4, #0]
 80190da:	bd38      	pop	{r3, r4, r5, pc}
 80190dc:	24006934 	.word	0x24006934

080190e0 <__assert_func>:
 80190e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80190e2:	4614      	mov	r4, r2
 80190e4:	461a      	mov	r2, r3
 80190e6:	4b09      	ldr	r3, [pc, #36]	@ (801910c <__assert_func+0x2c>)
 80190e8:	681b      	ldr	r3, [r3, #0]
 80190ea:	4605      	mov	r5, r0
 80190ec:	68d8      	ldr	r0, [r3, #12]
 80190ee:	b954      	cbnz	r4, 8019106 <__assert_func+0x26>
 80190f0:	4b07      	ldr	r3, [pc, #28]	@ (8019110 <__assert_func+0x30>)
 80190f2:	461c      	mov	r4, r3
 80190f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80190f8:	9100      	str	r1, [sp, #0]
 80190fa:	462b      	mov	r3, r5
 80190fc:	4905      	ldr	r1, [pc, #20]	@ (8019114 <__assert_func+0x34>)
 80190fe:	f000 f829 	bl	8019154 <fiprintf>
 8019102:	f000 f839 	bl	8019178 <abort>
 8019106:	4b04      	ldr	r3, [pc, #16]	@ (8019118 <__assert_func+0x38>)
 8019108:	e7f4      	b.n	80190f4 <__assert_func+0x14>
 801910a:	bf00      	nop
 801910c:	24000240 	.word	0x24000240
 8019110:	0801a11b 	.word	0x0801a11b
 8019114:	0801a0ed 	.word	0x0801a0ed
 8019118:	0801a0e0 	.word	0x0801a0e0

0801911c <_calloc_r>:
 801911c:	b570      	push	{r4, r5, r6, lr}
 801911e:	fba1 5402 	umull	r5, r4, r1, r2
 8019122:	b93c      	cbnz	r4, 8019134 <_calloc_r+0x18>
 8019124:	4629      	mov	r1, r5
 8019126:	f7ff f9c5 	bl	80184b4 <_malloc_r>
 801912a:	4606      	mov	r6, r0
 801912c:	b928      	cbnz	r0, 801913a <_calloc_r+0x1e>
 801912e:	2600      	movs	r6, #0
 8019130:	4630      	mov	r0, r6
 8019132:	bd70      	pop	{r4, r5, r6, pc}
 8019134:	220c      	movs	r2, #12
 8019136:	6002      	str	r2, [r0, #0]
 8019138:	e7f9      	b.n	801912e <_calloc_r+0x12>
 801913a:	462a      	mov	r2, r5
 801913c:	4621      	mov	r1, r4
 801913e:	f7fe fd62 	bl	8017c06 <memset>
 8019142:	e7f5      	b.n	8019130 <_calloc_r+0x14>

08019144 <malloc>:
 8019144:	4b02      	ldr	r3, [pc, #8]	@ (8019150 <malloc+0xc>)
 8019146:	4601      	mov	r1, r0
 8019148:	6818      	ldr	r0, [r3, #0]
 801914a:	f7ff b9b3 	b.w	80184b4 <_malloc_r>
 801914e:	bf00      	nop
 8019150:	24000240 	.word	0x24000240

08019154 <fiprintf>:
 8019154:	b40e      	push	{r1, r2, r3}
 8019156:	b503      	push	{r0, r1, lr}
 8019158:	4601      	mov	r1, r0
 801915a:	ab03      	add	r3, sp, #12
 801915c:	4805      	ldr	r0, [pc, #20]	@ (8019174 <fiprintf+0x20>)
 801915e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019162:	6800      	ldr	r0, [r0, #0]
 8019164:	9301      	str	r3, [sp, #4]
 8019166:	f000 f837 	bl	80191d8 <_vfiprintf_r>
 801916a:	b002      	add	sp, #8
 801916c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019170:	b003      	add	sp, #12
 8019172:	4770      	bx	lr
 8019174:	24000240 	.word	0x24000240

08019178 <abort>:
 8019178:	b508      	push	{r3, lr}
 801917a:	2006      	movs	r0, #6
 801917c:	f000 fb8e 	bl	801989c <raise>
 8019180:	2001      	movs	r0, #1
 8019182:	f7ea fa45 	bl	8003610 <_exit>

08019186 <__sfputc_r>:
 8019186:	6893      	ldr	r3, [r2, #8]
 8019188:	3b01      	subs	r3, #1
 801918a:	2b00      	cmp	r3, #0
 801918c:	b410      	push	{r4}
 801918e:	6093      	str	r3, [r2, #8]
 8019190:	da08      	bge.n	80191a4 <__sfputc_r+0x1e>
 8019192:	6994      	ldr	r4, [r2, #24]
 8019194:	42a3      	cmp	r3, r4
 8019196:	db01      	blt.n	801919c <__sfputc_r+0x16>
 8019198:	290a      	cmp	r1, #10
 801919a:	d103      	bne.n	80191a4 <__sfputc_r+0x1e>
 801919c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80191a0:	f000 bac0 	b.w	8019724 <__swbuf_r>
 80191a4:	6813      	ldr	r3, [r2, #0]
 80191a6:	1c58      	adds	r0, r3, #1
 80191a8:	6010      	str	r0, [r2, #0]
 80191aa:	7019      	strb	r1, [r3, #0]
 80191ac:	4608      	mov	r0, r1
 80191ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80191b2:	4770      	bx	lr

080191b4 <__sfputs_r>:
 80191b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80191b6:	4606      	mov	r6, r0
 80191b8:	460f      	mov	r7, r1
 80191ba:	4614      	mov	r4, r2
 80191bc:	18d5      	adds	r5, r2, r3
 80191be:	42ac      	cmp	r4, r5
 80191c0:	d101      	bne.n	80191c6 <__sfputs_r+0x12>
 80191c2:	2000      	movs	r0, #0
 80191c4:	e007      	b.n	80191d6 <__sfputs_r+0x22>
 80191c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80191ca:	463a      	mov	r2, r7
 80191cc:	4630      	mov	r0, r6
 80191ce:	f7ff ffda 	bl	8019186 <__sfputc_r>
 80191d2:	1c43      	adds	r3, r0, #1
 80191d4:	d1f3      	bne.n	80191be <__sfputs_r+0xa>
 80191d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080191d8 <_vfiprintf_r>:
 80191d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191dc:	460d      	mov	r5, r1
 80191de:	b09d      	sub	sp, #116	@ 0x74
 80191e0:	4614      	mov	r4, r2
 80191e2:	4698      	mov	r8, r3
 80191e4:	4606      	mov	r6, r0
 80191e6:	b118      	cbz	r0, 80191f0 <_vfiprintf_r+0x18>
 80191e8:	6a03      	ldr	r3, [r0, #32]
 80191ea:	b90b      	cbnz	r3, 80191f0 <_vfiprintf_r+0x18>
 80191ec:	f7fe fc92 	bl	8017b14 <__sinit>
 80191f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80191f2:	07d9      	lsls	r1, r3, #31
 80191f4:	d405      	bmi.n	8019202 <_vfiprintf_r+0x2a>
 80191f6:	89ab      	ldrh	r3, [r5, #12]
 80191f8:	059a      	lsls	r2, r3, #22
 80191fa:	d402      	bmi.n	8019202 <_vfiprintf_r+0x2a>
 80191fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80191fe:	f7fe fd9a 	bl	8017d36 <__retarget_lock_acquire_recursive>
 8019202:	89ab      	ldrh	r3, [r5, #12]
 8019204:	071b      	lsls	r3, r3, #28
 8019206:	d501      	bpl.n	801920c <_vfiprintf_r+0x34>
 8019208:	692b      	ldr	r3, [r5, #16]
 801920a:	b99b      	cbnz	r3, 8019234 <_vfiprintf_r+0x5c>
 801920c:	4629      	mov	r1, r5
 801920e:	4630      	mov	r0, r6
 8019210:	f000 fac6 	bl	80197a0 <__swsetup_r>
 8019214:	b170      	cbz	r0, 8019234 <_vfiprintf_r+0x5c>
 8019216:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019218:	07dc      	lsls	r4, r3, #31
 801921a:	d504      	bpl.n	8019226 <_vfiprintf_r+0x4e>
 801921c:	f04f 30ff 	mov.w	r0, #4294967295
 8019220:	b01d      	add	sp, #116	@ 0x74
 8019222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019226:	89ab      	ldrh	r3, [r5, #12]
 8019228:	0598      	lsls	r0, r3, #22
 801922a:	d4f7      	bmi.n	801921c <_vfiprintf_r+0x44>
 801922c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801922e:	f7fe fd83 	bl	8017d38 <__retarget_lock_release_recursive>
 8019232:	e7f3      	b.n	801921c <_vfiprintf_r+0x44>
 8019234:	2300      	movs	r3, #0
 8019236:	9309      	str	r3, [sp, #36]	@ 0x24
 8019238:	2320      	movs	r3, #32
 801923a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801923e:	f8cd 800c 	str.w	r8, [sp, #12]
 8019242:	2330      	movs	r3, #48	@ 0x30
 8019244:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80193f4 <_vfiprintf_r+0x21c>
 8019248:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801924c:	f04f 0901 	mov.w	r9, #1
 8019250:	4623      	mov	r3, r4
 8019252:	469a      	mov	sl, r3
 8019254:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019258:	b10a      	cbz	r2, 801925e <_vfiprintf_r+0x86>
 801925a:	2a25      	cmp	r2, #37	@ 0x25
 801925c:	d1f9      	bne.n	8019252 <_vfiprintf_r+0x7a>
 801925e:	ebba 0b04 	subs.w	fp, sl, r4
 8019262:	d00b      	beq.n	801927c <_vfiprintf_r+0xa4>
 8019264:	465b      	mov	r3, fp
 8019266:	4622      	mov	r2, r4
 8019268:	4629      	mov	r1, r5
 801926a:	4630      	mov	r0, r6
 801926c:	f7ff ffa2 	bl	80191b4 <__sfputs_r>
 8019270:	3001      	adds	r0, #1
 8019272:	f000 80a7 	beq.w	80193c4 <_vfiprintf_r+0x1ec>
 8019276:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019278:	445a      	add	r2, fp
 801927a:	9209      	str	r2, [sp, #36]	@ 0x24
 801927c:	f89a 3000 	ldrb.w	r3, [sl]
 8019280:	2b00      	cmp	r3, #0
 8019282:	f000 809f 	beq.w	80193c4 <_vfiprintf_r+0x1ec>
 8019286:	2300      	movs	r3, #0
 8019288:	f04f 32ff 	mov.w	r2, #4294967295
 801928c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019290:	f10a 0a01 	add.w	sl, sl, #1
 8019294:	9304      	str	r3, [sp, #16]
 8019296:	9307      	str	r3, [sp, #28]
 8019298:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801929c:	931a      	str	r3, [sp, #104]	@ 0x68
 801929e:	4654      	mov	r4, sl
 80192a0:	2205      	movs	r2, #5
 80192a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80192a6:	4853      	ldr	r0, [pc, #332]	@ (80193f4 <_vfiprintf_r+0x21c>)
 80192a8:	f7e7 f832 	bl	8000310 <memchr>
 80192ac:	9a04      	ldr	r2, [sp, #16]
 80192ae:	b9d8      	cbnz	r0, 80192e8 <_vfiprintf_r+0x110>
 80192b0:	06d1      	lsls	r1, r2, #27
 80192b2:	bf44      	itt	mi
 80192b4:	2320      	movmi	r3, #32
 80192b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80192ba:	0713      	lsls	r3, r2, #28
 80192bc:	bf44      	itt	mi
 80192be:	232b      	movmi	r3, #43	@ 0x2b
 80192c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80192c4:	f89a 3000 	ldrb.w	r3, [sl]
 80192c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80192ca:	d015      	beq.n	80192f8 <_vfiprintf_r+0x120>
 80192cc:	9a07      	ldr	r2, [sp, #28]
 80192ce:	4654      	mov	r4, sl
 80192d0:	2000      	movs	r0, #0
 80192d2:	f04f 0c0a 	mov.w	ip, #10
 80192d6:	4621      	mov	r1, r4
 80192d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80192dc:	3b30      	subs	r3, #48	@ 0x30
 80192de:	2b09      	cmp	r3, #9
 80192e0:	d94b      	bls.n	801937a <_vfiprintf_r+0x1a2>
 80192e2:	b1b0      	cbz	r0, 8019312 <_vfiprintf_r+0x13a>
 80192e4:	9207      	str	r2, [sp, #28]
 80192e6:	e014      	b.n	8019312 <_vfiprintf_r+0x13a>
 80192e8:	eba0 0308 	sub.w	r3, r0, r8
 80192ec:	fa09 f303 	lsl.w	r3, r9, r3
 80192f0:	4313      	orrs	r3, r2
 80192f2:	9304      	str	r3, [sp, #16]
 80192f4:	46a2      	mov	sl, r4
 80192f6:	e7d2      	b.n	801929e <_vfiprintf_r+0xc6>
 80192f8:	9b03      	ldr	r3, [sp, #12]
 80192fa:	1d19      	adds	r1, r3, #4
 80192fc:	681b      	ldr	r3, [r3, #0]
 80192fe:	9103      	str	r1, [sp, #12]
 8019300:	2b00      	cmp	r3, #0
 8019302:	bfbb      	ittet	lt
 8019304:	425b      	neglt	r3, r3
 8019306:	f042 0202 	orrlt.w	r2, r2, #2
 801930a:	9307      	strge	r3, [sp, #28]
 801930c:	9307      	strlt	r3, [sp, #28]
 801930e:	bfb8      	it	lt
 8019310:	9204      	strlt	r2, [sp, #16]
 8019312:	7823      	ldrb	r3, [r4, #0]
 8019314:	2b2e      	cmp	r3, #46	@ 0x2e
 8019316:	d10a      	bne.n	801932e <_vfiprintf_r+0x156>
 8019318:	7863      	ldrb	r3, [r4, #1]
 801931a:	2b2a      	cmp	r3, #42	@ 0x2a
 801931c:	d132      	bne.n	8019384 <_vfiprintf_r+0x1ac>
 801931e:	9b03      	ldr	r3, [sp, #12]
 8019320:	1d1a      	adds	r2, r3, #4
 8019322:	681b      	ldr	r3, [r3, #0]
 8019324:	9203      	str	r2, [sp, #12]
 8019326:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801932a:	3402      	adds	r4, #2
 801932c:	9305      	str	r3, [sp, #20]
 801932e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019404 <_vfiprintf_r+0x22c>
 8019332:	7821      	ldrb	r1, [r4, #0]
 8019334:	2203      	movs	r2, #3
 8019336:	4650      	mov	r0, sl
 8019338:	f7e6 ffea 	bl	8000310 <memchr>
 801933c:	b138      	cbz	r0, 801934e <_vfiprintf_r+0x176>
 801933e:	9b04      	ldr	r3, [sp, #16]
 8019340:	eba0 000a 	sub.w	r0, r0, sl
 8019344:	2240      	movs	r2, #64	@ 0x40
 8019346:	4082      	lsls	r2, r0
 8019348:	4313      	orrs	r3, r2
 801934a:	3401      	adds	r4, #1
 801934c:	9304      	str	r3, [sp, #16]
 801934e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019352:	4829      	ldr	r0, [pc, #164]	@ (80193f8 <_vfiprintf_r+0x220>)
 8019354:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019358:	2206      	movs	r2, #6
 801935a:	f7e6 ffd9 	bl	8000310 <memchr>
 801935e:	2800      	cmp	r0, #0
 8019360:	d03f      	beq.n	80193e2 <_vfiprintf_r+0x20a>
 8019362:	4b26      	ldr	r3, [pc, #152]	@ (80193fc <_vfiprintf_r+0x224>)
 8019364:	bb1b      	cbnz	r3, 80193ae <_vfiprintf_r+0x1d6>
 8019366:	9b03      	ldr	r3, [sp, #12]
 8019368:	3307      	adds	r3, #7
 801936a:	f023 0307 	bic.w	r3, r3, #7
 801936e:	3308      	adds	r3, #8
 8019370:	9303      	str	r3, [sp, #12]
 8019372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019374:	443b      	add	r3, r7
 8019376:	9309      	str	r3, [sp, #36]	@ 0x24
 8019378:	e76a      	b.n	8019250 <_vfiprintf_r+0x78>
 801937a:	fb0c 3202 	mla	r2, ip, r2, r3
 801937e:	460c      	mov	r4, r1
 8019380:	2001      	movs	r0, #1
 8019382:	e7a8      	b.n	80192d6 <_vfiprintf_r+0xfe>
 8019384:	2300      	movs	r3, #0
 8019386:	3401      	adds	r4, #1
 8019388:	9305      	str	r3, [sp, #20]
 801938a:	4619      	mov	r1, r3
 801938c:	f04f 0c0a 	mov.w	ip, #10
 8019390:	4620      	mov	r0, r4
 8019392:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019396:	3a30      	subs	r2, #48	@ 0x30
 8019398:	2a09      	cmp	r2, #9
 801939a:	d903      	bls.n	80193a4 <_vfiprintf_r+0x1cc>
 801939c:	2b00      	cmp	r3, #0
 801939e:	d0c6      	beq.n	801932e <_vfiprintf_r+0x156>
 80193a0:	9105      	str	r1, [sp, #20]
 80193a2:	e7c4      	b.n	801932e <_vfiprintf_r+0x156>
 80193a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80193a8:	4604      	mov	r4, r0
 80193aa:	2301      	movs	r3, #1
 80193ac:	e7f0      	b.n	8019390 <_vfiprintf_r+0x1b8>
 80193ae:	ab03      	add	r3, sp, #12
 80193b0:	9300      	str	r3, [sp, #0]
 80193b2:	462a      	mov	r2, r5
 80193b4:	4b12      	ldr	r3, [pc, #72]	@ (8019400 <_vfiprintf_r+0x228>)
 80193b6:	a904      	add	r1, sp, #16
 80193b8:	4630      	mov	r0, r6
 80193ba:	f3af 8000 	nop.w
 80193be:	4607      	mov	r7, r0
 80193c0:	1c78      	adds	r0, r7, #1
 80193c2:	d1d6      	bne.n	8019372 <_vfiprintf_r+0x19a>
 80193c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80193c6:	07d9      	lsls	r1, r3, #31
 80193c8:	d405      	bmi.n	80193d6 <_vfiprintf_r+0x1fe>
 80193ca:	89ab      	ldrh	r3, [r5, #12]
 80193cc:	059a      	lsls	r2, r3, #22
 80193ce:	d402      	bmi.n	80193d6 <_vfiprintf_r+0x1fe>
 80193d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80193d2:	f7fe fcb1 	bl	8017d38 <__retarget_lock_release_recursive>
 80193d6:	89ab      	ldrh	r3, [r5, #12]
 80193d8:	065b      	lsls	r3, r3, #25
 80193da:	f53f af1f 	bmi.w	801921c <_vfiprintf_r+0x44>
 80193de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80193e0:	e71e      	b.n	8019220 <_vfiprintf_r+0x48>
 80193e2:	ab03      	add	r3, sp, #12
 80193e4:	9300      	str	r3, [sp, #0]
 80193e6:	462a      	mov	r2, r5
 80193e8:	4b05      	ldr	r3, [pc, #20]	@ (8019400 <_vfiprintf_r+0x228>)
 80193ea:	a904      	add	r1, sp, #16
 80193ec:	4630      	mov	r0, r6
 80193ee:	f000 f879 	bl	80194e4 <_printf_i>
 80193f2:	e7e4      	b.n	80193be <_vfiprintf_r+0x1e6>
 80193f4:	0801a11c 	.word	0x0801a11c
 80193f8:	0801a126 	.word	0x0801a126
 80193fc:	00000000 	.word	0x00000000
 8019400:	080191b5 	.word	0x080191b5
 8019404:	0801a122 	.word	0x0801a122

08019408 <_printf_common>:
 8019408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801940c:	4616      	mov	r6, r2
 801940e:	4698      	mov	r8, r3
 8019410:	688a      	ldr	r2, [r1, #8]
 8019412:	690b      	ldr	r3, [r1, #16]
 8019414:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019418:	4293      	cmp	r3, r2
 801941a:	bfb8      	it	lt
 801941c:	4613      	movlt	r3, r2
 801941e:	6033      	str	r3, [r6, #0]
 8019420:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019424:	4607      	mov	r7, r0
 8019426:	460c      	mov	r4, r1
 8019428:	b10a      	cbz	r2, 801942e <_printf_common+0x26>
 801942a:	3301      	adds	r3, #1
 801942c:	6033      	str	r3, [r6, #0]
 801942e:	6823      	ldr	r3, [r4, #0]
 8019430:	0699      	lsls	r1, r3, #26
 8019432:	bf42      	ittt	mi
 8019434:	6833      	ldrmi	r3, [r6, #0]
 8019436:	3302      	addmi	r3, #2
 8019438:	6033      	strmi	r3, [r6, #0]
 801943a:	6825      	ldr	r5, [r4, #0]
 801943c:	f015 0506 	ands.w	r5, r5, #6
 8019440:	d106      	bne.n	8019450 <_printf_common+0x48>
 8019442:	f104 0a19 	add.w	sl, r4, #25
 8019446:	68e3      	ldr	r3, [r4, #12]
 8019448:	6832      	ldr	r2, [r6, #0]
 801944a:	1a9b      	subs	r3, r3, r2
 801944c:	42ab      	cmp	r3, r5
 801944e:	dc26      	bgt.n	801949e <_printf_common+0x96>
 8019450:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019454:	6822      	ldr	r2, [r4, #0]
 8019456:	3b00      	subs	r3, #0
 8019458:	bf18      	it	ne
 801945a:	2301      	movne	r3, #1
 801945c:	0692      	lsls	r2, r2, #26
 801945e:	d42b      	bmi.n	80194b8 <_printf_common+0xb0>
 8019460:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019464:	4641      	mov	r1, r8
 8019466:	4638      	mov	r0, r7
 8019468:	47c8      	blx	r9
 801946a:	3001      	adds	r0, #1
 801946c:	d01e      	beq.n	80194ac <_printf_common+0xa4>
 801946e:	6823      	ldr	r3, [r4, #0]
 8019470:	6922      	ldr	r2, [r4, #16]
 8019472:	f003 0306 	and.w	r3, r3, #6
 8019476:	2b04      	cmp	r3, #4
 8019478:	bf02      	ittt	eq
 801947a:	68e5      	ldreq	r5, [r4, #12]
 801947c:	6833      	ldreq	r3, [r6, #0]
 801947e:	1aed      	subeq	r5, r5, r3
 8019480:	68a3      	ldr	r3, [r4, #8]
 8019482:	bf0c      	ite	eq
 8019484:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019488:	2500      	movne	r5, #0
 801948a:	4293      	cmp	r3, r2
 801948c:	bfc4      	itt	gt
 801948e:	1a9b      	subgt	r3, r3, r2
 8019490:	18ed      	addgt	r5, r5, r3
 8019492:	2600      	movs	r6, #0
 8019494:	341a      	adds	r4, #26
 8019496:	42b5      	cmp	r5, r6
 8019498:	d11a      	bne.n	80194d0 <_printf_common+0xc8>
 801949a:	2000      	movs	r0, #0
 801949c:	e008      	b.n	80194b0 <_printf_common+0xa8>
 801949e:	2301      	movs	r3, #1
 80194a0:	4652      	mov	r2, sl
 80194a2:	4641      	mov	r1, r8
 80194a4:	4638      	mov	r0, r7
 80194a6:	47c8      	blx	r9
 80194a8:	3001      	adds	r0, #1
 80194aa:	d103      	bne.n	80194b4 <_printf_common+0xac>
 80194ac:	f04f 30ff 	mov.w	r0, #4294967295
 80194b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80194b4:	3501      	adds	r5, #1
 80194b6:	e7c6      	b.n	8019446 <_printf_common+0x3e>
 80194b8:	18e1      	adds	r1, r4, r3
 80194ba:	1c5a      	adds	r2, r3, #1
 80194bc:	2030      	movs	r0, #48	@ 0x30
 80194be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80194c2:	4422      	add	r2, r4
 80194c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80194c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80194cc:	3302      	adds	r3, #2
 80194ce:	e7c7      	b.n	8019460 <_printf_common+0x58>
 80194d0:	2301      	movs	r3, #1
 80194d2:	4622      	mov	r2, r4
 80194d4:	4641      	mov	r1, r8
 80194d6:	4638      	mov	r0, r7
 80194d8:	47c8      	blx	r9
 80194da:	3001      	adds	r0, #1
 80194dc:	d0e6      	beq.n	80194ac <_printf_common+0xa4>
 80194de:	3601      	adds	r6, #1
 80194e0:	e7d9      	b.n	8019496 <_printf_common+0x8e>
	...

080194e4 <_printf_i>:
 80194e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80194e8:	7e0f      	ldrb	r7, [r1, #24]
 80194ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80194ec:	2f78      	cmp	r7, #120	@ 0x78
 80194ee:	4691      	mov	r9, r2
 80194f0:	4680      	mov	r8, r0
 80194f2:	460c      	mov	r4, r1
 80194f4:	469a      	mov	sl, r3
 80194f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80194fa:	d807      	bhi.n	801950c <_printf_i+0x28>
 80194fc:	2f62      	cmp	r7, #98	@ 0x62
 80194fe:	d80a      	bhi.n	8019516 <_printf_i+0x32>
 8019500:	2f00      	cmp	r7, #0
 8019502:	f000 80d2 	beq.w	80196aa <_printf_i+0x1c6>
 8019506:	2f58      	cmp	r7, #88	@ 0x58
 8019508:	f000 80b9 	beq.w	801967e <_printf_i+0x19a>
 801950c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019510:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019514:	e03a      	b.n	801958c <_printf_i+0xa8>
 8019516:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801951a:	2b15      	cmp	r3, #21
 801951c:	d8f6      	bhi.n	801950c <_printf_i+0x28>
 801951e:	a101      	add	r1, pc, #4	@ (adr r1, 8019524 <_printf_i+0x40>)
 8019520:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019524:	0801957d 	.word	0x0801957d
 8019528:	08019591 	.word	0x08019591
 801952c:	0801950d 	.word	0x0801950d
 8019530:	0801950d 	.word	0x0801950d
 8019534:	0801950d 	.word	0x0801950d
 8019538:	0801950d 	.word	0x0801950d
 801953c:	08019591 	.word	0x08019591
 8019540:	0801950d 	.word	0x0801950d
 8019544:	0801950d 	.word	0x0801950d
 8019548:	0801950d 	.word	0x0801950d
 801954c:	0801950d 	.word	0x0801950d
 8019550:	08019691 	.word	0x08019691
 8019554:	080195bb 	.word	0x080195bb
 8019558:	0801964b 	.word	0x0801964b
 801955c:	0801950d 	.word	0x0801950d
 8019560:	0801950d 	.word	0x0801950d
 8019564:	080196b3 	.word	0x080196b3
 8019568:	0801950d 	.word	0x0801950d
 801956c:	080195bb 	.word	0x080195bb
 8019570:	0801950d 	.word	0x0801950d
 8019574:	0801950d 	.word	0x0801950d
 8019578:	08019653 	.word	0x08019653
 801957c:	6833      	ldr	r3, [r6, #0]
 801957e:	1d1a      	adds	r2, r3, #4
 8019580:	681b      	ldr	r3, [r3, #0]
 8019582:	6032      	str	r2, [r6, #0]
 8019584:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019588:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801958c:	2301      	movs	r3, #1
 801958e:	e09d      	b.n	80196cc <_printf_i+0x1e8>
 8019590:	6833      	ldr	r3, [r6, #0]
 8019592:	6820      	ldr	r0, [r4, #0]
 8019594:	1d19      	adds	r1, r3, #4
 8019596:	6031      	str	r1, [r6, #0]
 8019598:	0606      	lsls	r6, r0, #24
 801959a:	d501      	bpl.n	80195a0 <_printf_i+0xbc>
 801959c:	681d      	ldr	r5, [r3, #0]
 801959e:	e003      	b.n	80195a8 <_printf_i+0xc4>
 80195a0:	0645      	lsls	r5, r0, #25
 80195a2:	d5fb      	bpl.n	801959c <_printf_i+0xb8>
 80195a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80195a8:	2d00      	cmp	r5, #0
 80195aa:	da03      	bge.n	80195b4 <_printf_i+0xd0>
 80195ac:	232d      	movs	r3, #45	@ 0x2d
 80195ae:	426d      	negs	r5, r5
 80195b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80195b4:	4859      	ldr	r0, [pc, #356]	@ (801971c <_printf_i+0x238>)
 80195b6:	230a      	movs	r3, #10
 80195b8:	e011      	b.n	80195de <_printf_i+0xfa>
 80195ba:	6821      	ldr	r1, [r4, #0]
 80195bc:	6833      	ldr	r3, [r6, #0]
 80195be:	0608      	lsls	r0, r1, #24
 80195c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80195c4:	d402      	bmi.n	80195cc <_printf_i+0xe8>
 80195c6:	0649      	lsls	r1, r1, #25
 80195c8:	bf48      	it	mi
 80195ca:	b2ad      	uxthmi	r5, r5
 80195cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80195ce:	4853      	ldr	r0, [pc, #332]	@ (801971c <_printf_i+0x238>)
 80195d0:	6033      	str	r3, [r6, #0]
 80195d2:	bf14      	ite	ne
 80195d4:	230a      	movne	r3, #10
 80195d6:	2308      	moveq	r3, #8
 80195d8:	2100      	movs	r1, #0
 80195da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80195de:	6866      	ldr	r6, [r4, #4]
 80195e0:	60a6      	str	r6, [r4, #8]
 80195e2:	2e00      	cmp	r6, #0
 80195e4:	bfa2      	ittt	ge
 80195e6:	6821      	ldrge	r1, [r4, #0]
 80195e8:	f021 0104 	bicge.w	r1, r1, #4
 80195ec:	6021      	strge	r1, [r4, #0]
 80195ee:	b90d      	cbnz	r5, 80195f4 <_printf_i+0x110>
 80195f0:	2e00      	cmp	r6, #0
 80195f2:	d04b      	beq.n	801968c <_printf_i+0x1a8>
 80195f4:	4616      	mov	r6, r2
 80195f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80195fa:	fb03 5711 	mls	r7, r3, r1, r5
 80195fe:	5dc7      	ldrb	r7, [r0, r7]
 8019600:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019604:	462f      	mov	r7, r5
 8019606:	42bb      	cmp	r3, r7
 8019608:	460d      	mov	r5, r1
 801960a:	d9f4      	bls.n	80195f6 <_printf_i+0x112>
 801960c:	2b08      	cmp	r3, #8
 801960e:	d10b      	bne.n	8019628 <_printf_i+0x144>
 8019610:	6823      	ldr	r3, [r4, #0]
 8019612:	07df      	lsls	r7, r3, #31
 8019614:	d508      	bpl.n	8019628 <_printf_i+0x144>
 8019616:	6923      	ldr	r3, [r4, #16]
 8019618:	6861      	ldr	r1, [r4, #4]
 801961a:	4299      	cmp	r1, r3
 801961c:	bfde      	ittt	le
 801961e:	2330      	movle	r3, #48	@ 0x30
 8019620:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019624:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019628:	1b92      	subs	r2, r2, r6
 801962a:	6122      	str	r2, [r4, #16]
 801962c:	f8cd a000 	str.w	sl, [sp]
 8019630:	464b      	mov	r3, r9
 8019632:	aa03      	add	r2, sp, #12
 8019634:	4621      	mov	r1, r4
 8019636:	4640      	mov	r0, r8
 8019638:	f7ff fee6 	bl	8019408 <_printf_common>
 801963c:	3001      	adds	r0, #1
 801963e:	d14a      	bne.n	80196d6 <_printf_i+0x1f2>
 8019640:	f04f 30ff 	mov.w	r0, #4294967295
 8019644:	b004      	add	sp, #16
 8019646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801964a:	6823      	ldr	r3, [r4, #0]
 801964c:	f043 0320 	orr.w	r3, r3, #32
 8019650:	6023      	str	r3, [r4, #0]
 8019652:	4833      	ldr	r0, [pc, #204]	@ (8019720 <_printf_i+0x23c>)
 8019654:	2778      	movs	r7, #120	@ 0x78
 8019656:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801965a:	6823      	ldr	r3, [r4, #0]
 801965c:	6831      	ldr	r1, [r6, #0]
 801965e:	061f      	lsls	r7, r3, #24
 8019660:	f851 5b04 	ldr.w	r5, [r1], #4
 8019664:	d402      	bmi.n	801966c <_printf_i+0x188>
 8019666:	065f      	lsls	r7, r3, #25
 8019668:	bf48      	it	mi
 801966a:	b2ad      	uxthmi	r5, r5
 801966c:	6031      	str	r1, [r6, #0]
 801966e:	07d9      	lsls	r1, r3, #31
 8019670:	bf44      	itt	mi
 8019672:	f043 0320 	orrmi.w	r3, r3, #32
 8019676:	6023      	strmi	r3, [r4, #0]
 8019678:	b11d      	cbz	r5, 8019682 <_printf_i+0x19e>
 801967a:	2310      	movs	r3, #16
 801967c:	e7ac      	b.n	80195d8 <_printf_i+0xf4>
 801967e:	4827      	ldr	r0, [pc, #156]	@ (801971c <_printf_i+0x238>)
 8019680:	e7e9      	b.n	8019656 <_printf_i+0x172>
 8019682:	6823      	ldr	r3, [r4, #0]
 8019684:	f023 0320 	bic.w	r3, r3, #32
 8019688:	6023      	str	r3, [r4, #0]
 801968a:	e7f6      	b.n	801967a <_printf_i+0x196>
 801968c:	4616      	mov	r6, r2
 801968e:	e7bd      	b.n	801960c <_printf_i+0x128>
 8019690:	6833      	ldr	r3, [r6, #0]
 8019692:	6825      	ldr	r5, [r4, #0]
 8019694:	6961      	ldr	r1, [r4, #20]
 8019696:	1d18      	adds	r0, r3, #4
 8019698:	6030      	str	r0, [r6, #0]
 801969a:	062e      	lsls	r6, r5, #24
 801969c:	681b      	ldr	r3, [r3, #0]
 801969e:	d501      	bpl.n	80196a4 <_printf_i+0x1c0>
 80196a0:	6019      	str	r1, [r3, #0]
 80196a2:	e002      	b.n	80196aa <_printf_i+0x1c6>
 80196a4:	0668      	lsls	r0, r5, #25
 80196a6:	d5fb      	bpl.n	80196a0 <_printf_i+0x1bc>
 80196a8:	8019      	strh	r1, [r3, #0]
 80196aa:	2300      	movs	r3, #0
 80196ac:	6123      	str	r3, [r4, #16]
 80196ae:	4616      	mov	r6, r2
 80196b0:	e7bc      	b.n	801962c <_printf_i+0x148>
 80196b2:	6833      	ldr	r3, [r6, #0]
 80196b4:	1d1a      	adds	r2, r3, #4
 80196b6:	6032      	str	r2, [r6, #0]
 80196b8:	681e      	ldr	r6, [r3, #0]
 80196ba:	6862      	ldr	r2, [r4, #4]
 80196bc:	2100      	movs	r1, #0
 80196be:	4630      	mov	r0, r6
 80196c0:	f7e6 fe26 	bl	8000310 <memchr>
 80196c4:	b108      	cbz	r0, 80196ca <_printf_i+0x1e6>
 80196c6:	1b80      	subs	r0, r0, r6
 80196c8:	6060      	str	r0, [r4, #4]
 80196ca:	6863      	ldr	r3, [r4, #4]
 80196cc:	6123      	str	r3, [r4, #16]
 80196ce:	2300      	movs	r3, #0
 80196d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80196d4:	e7aa      	b.n	801962c <_printf_i+0x148>
 80196d6:	6923      	ldr	r3, [r4, #16]
 80196d8:	4632      	mov	r2, r6
 80196da:	4649      	mov	r1, r9
 80196dc:	4640      	mov	r0, r8
 80196de:	47d0      	blx	sl
 80196e0:	3001      	adds	r0, #1
 80196e2:	d0ad      	beq.n	8019640 <_printf_i+0x15c>
 80196e4:	6823      	ldr	r3, [r4, #0]
 80196e6:	079b      	lsls	r3, r3, #30
 80196e8:	d413      	bmi.n	8019712 <_printf_i+0x22e>
 80196ea:	68e0      	ldr	r0, [r4, #12]
 80196ec:	9b03      	ldr	r3, [sp, #12]
 80196ee:	4298      	cmp	r0, r3
 80196f0:	bfb8      	it	lt
 80196f2:	4618      	movlt	r0, r3
 80196f4:	e7a6      	b.n	8019644 <_printf_i+0x160>
 80196f6:	2301      	movs	r3, #1
 80196f8:	4632      	mov	r2, r6
 80196fa:	4649      	mov	r1, r9
 80196fc:	4640      	mov	r0, r8
 80196fe:	47d0      	blx	sl
 8019700:	3001      	adds	r0, #1
 8019702:	d09d      	beq.n	8019640 <_printf_i+0x15c>
 8019704:	3501      	adds	r5, #1
 8019706:	68e3      	ldr	r3, [r4, #12]
 8019708:	9903      	ldr	r1, [sp, #12]
 801970a:	1a5b      	subs	r3, r3, r1
 801970c:	42ab      	cmp	r3, r5
 801970e:	dcf2      	bgt.n	80196f6 <_printf_i+0x212>
 8019710:	e7eb      	b.n	80196ea <_printf_i+0x206>
 8019712:	2500      	movs	r5, #0
 8019714:	f104 0619 	add.w	r6, r4, #25
 8019718:	e7f5      	b.n	8019706 <_printf_i+0x222>
 801971a:	bf00      	nop
 801971c:	0801a12d 	.word	0x0801a12d
 8019720:	0801a13e 	.word	0x0801a13e

08019724 <__swbuf_r>:
 8019724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019726:	460e      	mov	r6, r1
 8019728:	4614      	mov	r4, r2
 801972a:	4605      	mov	r5, r0
 801972c:	b118      	cbz	r0, 8019736 <__swbuf_r+0x12>
 801972e:	6a03      	ldr	r3, [r0, #32]
 8019730:	b90b      	cbnz	r3, 8019736 <__swbuf_r+0x12>
 8019732:	f7fe f9ef 	bl	8017b14 <__sinit>
 8019736:	69a3      	ldr	r3, [r4, #24]
 8019738:	60a3      	str	r3, [r4, #8]
 801973a:	89a3      	ldrh	r3, [r4, #12]
 801973c:	071a      	lsls	r2, r3, #28
 801973e:	d501      	bpl.n	8019744 <__swbuf_r+0x20>
 8019740:	6923      	ldr	r3, [r4, #16]
 8019742:	b943      	cbnz	r3, 8019756 <__swbuf_r+0x32>
 8019744:	4621      	mov	r1, r4
 8019746:	4628      	mov	r0, r5
 8019748:	f000 f82a 	bl	80197a0 <__swsetup_r>
 801974c:	b118      	cbz	r0, 8019756 <__swbuf_r+0x32>
 801974e:	f04f 37ff 	mov.w	r7, #4294967295
 8019752:	4638      	mov	r0, r7
 8019754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019756:	6823      	ldr	r3, [r4, #0]
 8019758:	6922      	ldr	r2, [r4, #16]
 801975a:	1a98      	subs	r0, r3, r2
 801975c:	6963      	ldr	r3, [r4, #20]
 801975e:	b2f6      	uxtb	r6, r6
 8019760:	4283      	cmp	r3, r0
 8019762:	4637      	mov	r7, r6
 8019764:	dc05      	bgt.n	8019772 <__swbuf_r+0x4e>
 8019766:	4621      	mov	r1, r4
 8019768:	4628      	mov	r0, r5
 801976a:	f7ff fc81 	bl	8019070 <_fflush_r>
 801976e:	2800      	cmp	r0, #0
 8019770:	d1ed      	bne.n	801974e <__swbuf_r+0x2a>
 8019772:	68a3      	ldr	r3, [r4, #8]
 8019774:	3b01      	subs	r3, #1
 8019776:	60a3      	str	r3, [r4, #8]
 8019778:	6823      	ldr	r3, [r4, #0]
 801977a:	1c5a      	adds	r2, r3, #1
 801977c:	6022      	str	r2, [r4, #0]
 801977e:	701e      	strb	r6, [r3, #0]
 8019780:	6962      	ldr	r2, [r4, #20]
 8019782:	1c43      	adds	r3, r0, #1
 8019784:	429a      	cmp	r2, r3
 8019786:	d004      	beq.n	8019792 <__swbuf_r+0x6e>
 8019788:	89a3      	ldrh	r3, [r4, #12]
 801978a:	07db      	lsls	r3, r3, #31
 801978c:	d5e1      	bpl.n	8019752 <__swbuf_r+0x2e>
 801978e:	2e0a      	cmp	r6, #10
 8019790:	d1df      	bne.n	8019752 <__swbuf_r+0x2e>
 8019792:	4621      	mov	r1, r4
 8019794:	4628      	mov	r0, r5
 8019796:	f7ff fc6b 	bl	8019070 <_fflush_r>
 801979a:	2800      	cmp	r0, #0
 801979c:	d0d9      	beq.n	8019752 <__swbuf_r+0x2e>
 801979e:	e7d6      	b.n	801974e <__swbuf_r+0x2a>

080197a0 <__swsetup_r>:
 80197a0:	b538      	push	{r3, r4, r5, lr}
 80197a2:	4b29      	ldr	r3, [pc, #164]	@ (8019848 <__swsetup_r+0xa8>)
 80197a4:	4605      	mov	r5, r0
 80197a6:	6818      	ldr	r0, [r3, #0]
 80197a8:	460c      	mov	r4, r1
 80197aa:	b118      	cbz	r0, 80197b4 <__swsetup_r+0x14>
 80197ac:	6a03      	ldr	r3, [r0, #32]
 80197ae:	b90b      	cbnz	r3, 80197b4 <__swsetup_r+0x14>
 80197b0:	f7fe f9b0 	bl	8017b14 <__sinit>
 80197b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80197b8:	0719      	lsls	r1, r3, #28
 80197ba:	d422      	bmi.n	8019802 <__swsetup_r+0x62>
 80197bc:	06da      	lsls	r2, r3, #27
 80197be:	d407      	bmi.n	80197d0 <__swsetup_r+0x30>
 80197c0:	2209      	movs	r2, #9
 80197c2:	602a      	str	r2, [r5, #0]
 80197c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80197c8:	81a3      	strh	r3, [r4, #12]
 80197ca:	f04f 30ff 	mov.w	r0, #4294967295
 80197ce:	e033      	b.n	8019838 <__swsetup_r+0x98>
 80197d0:	0758      	lsls	r0, r3, #29
 80197d2:	d512      	bpl.n	80197fa <__swsetup_r+0x5a>
 80197d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80197d6:	b141      	cbz	r1, 80197ea <__swsetup_r+0x4a>
 80197d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80197dc:	4299      	cmp	r1, r3
 80197de:	d002      	beq.n	80197e6 <__swsetup_r+0x46>
 80197e0:	4628      	mov	r0, r5
 80197e2:	f7fe fac1 	bl	8017d68 <_free_r>
 80197e6:	2300      	movs	r3, #0
 80197e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80197ea:	89a3      	ldrh	r3, [r4, #12]
 80197ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80197f0:	81a3      	strh	r3, [r4, #12]
 80197f2:	2300      	movs	r3, #0
 80197f4:	6063      	str	r3, [r4, #4]
 80197f6:	6923      	ldr	r3, [r4, #16]
 80197f8:	6023      	str	r3, [r4, #0]
 80197fa:	89a3      	ldrh	r3, [r4, #12]
 80197fc:	f043 0308 	orr.w	r3, r3, #8
 8019800:	81a3      	strh	r3, [r4, #12]
 8019802:	6923      	ldr	r3, [r4, #16]
 8019804:	b94b      	cbnz	r3, 801981a <__swsetup_r+0x7a>
 8019806:	89a3      	ldrh	r3, [r4, #12]
 8019808:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801980c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019810:	d003      	beq.n	801981a <__swsetup_r+0x7a>
 8019812:	4621      	mov	r1, r4
 8019814:	4628      	mov	r0, r5
 8019816:	f000 f883 	bl	8019920 <__smakebuf_r>
 801981a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801981e:	f013 0201 	ands.w	r2, r3, #1
 8019822:	d00a      	beq.n	801983a <__swsetup_r+0x9a>
 8019824:	2200      	movs	r2, #0
 8019826:	60a2      	str	r2, [r4, #8]
 8019828:	6962      	ldr	r2, [r4, #20]
 801982a:	4252      	negs	r2, r2
 801982c:	61a2      	str	r2, [r4, #24]
 801982e:	6922      	ldr	r2, [r4, #16]
 8019830:	b942      	cbnz	r2, 8019844 <__swsetup_r+0xa4>
 8019832:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8019836:	d1c5      	bne.n	80197c4 <__swsetup_r+0x24>
 8019838:	bd38      	pop	{r3, r4, r5, pc}
 801983a:	0799      	lsls	r1, r3, #30
 801983c:	bf58      	it	pl
 801983e:	6962      	ldrpl	r2, [r4, #20]
 8019840:	60a2      	str	r2, [r4, #8]
 8019842:	e7f4      	b.n	801982e <__swsetup_r+0x8e>
 8019844:	2000      	movs	r0, #0
 8019846:	e7f7      	b.n	8019838 <__swsetup_r+0x98>
 8019848:	24000240 	.word	0x24000240

0801984c <_raise_r>:
 801984c:	291f      	cmp	r1, #31
 801984e:	b538      	push	{r3, r4, r5, lr}
 8019850:	4605      	mov	r5, r0
 8019852:	460c      	mov	r4, r1
 8019854:	d904      	bls.n	8019860 <_raise_r+0x14>
 8019856:	2316      	movs	r3, #22
 8019858:	6003      	str	r3, [r0, #0]
 801985a:	f04f 30ff 	mov.w	r0, #4294967295
 801985e:	bd38      	pop	{r3, r4, r5, pc}
 8019860:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019862:	b112      	cbz	r2, 801986a <_raise_r+0x1e>
 8019864:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019868:	b94b      	cbnz	r3, 801987e <_raise_r+0x32>
 801986a:	4628      	mov	r0, r5
 801986c:	f000 f830 	bl	80198d0 <_getpid_r>
 8019870:	4622      	mov	r2, r4
 8019872:	4601      	mov	r1, r0
 8019874:	4628      	mov	r0, r5
 8019876:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801987a:	f000 b817 	b.w	80198ac <_kill_r>
 801987e:	2b01      	cmp	r3, #1
 8019880:	d00a      	beq.n	8019898 <_raise_r+0x4c>
 8019882:	1c59      	adds	r1, r3, #1
 8019884:	d103      	bne.n	801988e <_raise_r+0x42>
 8019886:	2316      	movs	r3, #22
 8019888:	6003      	str	r3, [r0, #0]
 801988a:	2001      	movs	r0, #1
 801988c:	e7e7      	b.n	801985e <_raise_r+0x12>
 801988e:	2100      	movs	r1, #0
 8019890:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019894:	4620      	mov	r0, r4
 8019896:	4798      	blx	r3
 8019898:	2000      	movs	r0, #0
 801989a:	e7e0      	b.n	801985e <_raise_r+0x12>

0801989c <raise>:
 801989c:	4b02      	ldr	r3, [pc, #8]	@ (80198a8 <raise+0xc>)
 801989e:	4601      	mov	r1, r0
 80198a0:	6818      	ldr	r0, [r3, #0]
 80198a2:	f7ff bfd3 	b.w	801984c <_raise_r>
 80198a6:	bf00      	nop
 80198a8:	24000240 	.word	0x24000240

080198ac <_kill_r>:
 80198ac:	b538      	push	{r3, r4, r5, lr}
 80198ae:	4d07      	ldr	r5, [pc, #28]	@ (80198cc <_kill_r+0x20>)
 80198b0:	2300      	movs	r3, #0
 80198b2:	4604      	mov	r4, r0
 80198b4:	4608      	mov	r0, r1
 80198b6:	4611      	mov	r1, r2
 80198b8:	602b      	str	r3, [r5, #0]
 80198ba:	f7e9 fe99 	bl	80035f0 <_kill>
 80198be:	1c43      	adds	r3, r0, #1
 80198c0:	d102      	bne.n	80198c8 <_kill_r+0x1c>
 80198c2:	682b      	ldr	r3, [r5, #0]
 80198c4:	b103      	cbz	r3, 80198c8 <_kill_r+0x1c>
 80198c6:	6023      	str	r3, [r4, #0]
 80198c8:	bd38      	pop	{r3, r4, r5, pc}
 80198ca:	bf00      	nop
 80198cc:	24006934 	.word	0x24006934

080198d0 <_getpid_r>:
 80198d0:	f7e9 be86 	b.w	80035e0 <_getpid>

080198d4 <__swhatbuf_r>:
 80198d4:	b570      	push	{r4, r5, r6, lr}
 80198d6:	460c      	mov	r4, r1
 80198d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80198dc:	2900      	cmp	r1, #0
 80198de:	b096      	sub	sp, #88	@ 0x58
 80198e0:	4615      	mov	r5, r2
 80198e2:	461e      	mov	r6, r3
 80198e4:	da0d      	bge.n	8019902 <__swhatbuf_r+0x2e>
 80198e6:	89a3      	ldrh	r3, [r4, #12]
 80198e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80198ec:	f04f 0100 	mov.w	r1, #0
 80198f0:	bf14      	ite	ne
 80198f2:	2340      	movne	r3, #64	@ 0x40
 80198f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80198f8:	2000      	movs	r0, #0
 80198fa:	6031      	str	r1, [r6, #0]
 80198fc:	602b      	str	r3, [r5, #0]
 80198fe:	b016      	add	sp, #88	@ 0x58
 8019900:	bd70      	pop	{r4, r5, r6, pc}
 8019902:	466a      	mov	r2, sp
 8019904:	f000 f848 	bl	8019998 <_fstat_r>
 8019908:	2800      	cmp	r0, #0
 801990a:	dbec      	blt.n	80198e6 <__swhatbuf_r+0x12>
 801990c:	9901      	ldr	r1, [sp, #4]
 801990e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019912:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019916:	4259      	negs	r1, r3
 8019918:	4159      	adcs	r1, r3
 801991a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801991e:	e7eb      	b.n	80198f8 <__swhatbuf_r+0x24>

08019920 <__smakebuf_r>:
 8019920:	898b      	ldrh	r3, [r1, #12]
 8019922:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019924:	079d      	lsls	r5, r3, #30
 8019926:	4606      	mov	r6, r0
 8019928:	460c      	mov	r4, r1
 801992a:	d507      	bpl.n	801993c <__smakebuf_r+0x1c>
 801992c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019930:	6023      	str	r3, [r4, #0]
 8019932:	6123      	str	r3, [r4, #16]
 8019934:	2301      	movs	r3, #1
 8019936:	6163      	str	r3, [r4, #20]
 8019938:	b003      	add	sp, #12
 801993a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801993c:	ab01      	add	r3, sp, #4
 801993e:	466a      	mov	r2, sp
 8019940:	f7ff ffc8 	bl	80198d4 <__swhatbuf_r>
 8019944:	9f00      	ldr	r7, [sp, #0]
 8019946:	4605      	mov	r5, r0
 8019948:	4639      	mov	r1, r7
 801994a:	4630      	mov	r0, r6
 801994c:	f7fe fdb2 	bl	80184b4 <_malloc_r>
 8019950:	b948      	cbnz	r0, 8019966 <__smakebuf_r+0x46>
 8019952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019956:	059a      	lsls	r2, r3, #22
 8019958:	d4ee      	bmi.n	8019938 <__smakebuf_r+0x18>
 801995a:	f023 0303 	bic.w	r3, r3, #3
 801995e:	f043 0302 	orr.w	r3, r3, #2
 8019962:	81a3      	strh	r3, [r4, #12]
 8019964:	e7e2      	b.n	801992c <__smakebuf_r+0xc>
 8019966:	89a3      	ldrh	r3, [r4, #12]
 8019968:	6020      	str	r0, [r4, #0]
 801996a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801996e:	81a3      	strh	r3, [r4, #12]
 8019970:	9b01      	ldr	r3, [sp, #4]
 8019972:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8019976:	b15b      	cbz	r3, 8019990 <__smakebuf_r+0x70>
 8019978:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801997c:	4630      	mov	r0, r6
 801997e:	f000 f81d 	bl	80199bc <_isatty_r>
 8019982:	b128      	cbz	r0, 8019990 <__smakebuf_r+0x70>
 8019984:	89a3      	ldrh	r3, [r4, #12]
 8019986:	f023 0303 	bic.w	r3, r3, #3
 801998a:	f043 0301 	orr.w	r3, r3, #1
 801998e:	81a3      	strh	r3, [r4, #12]
 8019990:	89a3      	ldrh	r3, [r4, #12]
 8019992:	431d      	orrs	r5, r3
 8019994:	81a5      	strh	r5, [r4, #12]
 8019996:	e7cf      	b.n	8019938 <__smakebuf_r+0x18>

08019998 <_fstat_r>:
 8019998:	b538      	push	{r3, r4, r5, lr}
 801999a:	4d07      	ldr	r5, [pc, #28]	@ (80199b8 <_fstat_r+0x20>)
 801999c:	2300      	movs	r3, #0
 801999e:	4604      	mov	r4, r0
 80199a0:	4608      	mov	r0, r1
 80199a2:	4611      	mov	r1, r2
 80199a4:	602b      	str	r3, [r5, #0]
 80199a6:	f7e9 fe83 	bl	80036b0 <_fstat>
 80199aa:	1c43      	adds	r3, r0, #1
 80199ac:	d102      	bne.n	80199b4 <_fstat_r+0x1c>
 80199ae:	682b      	ldr	r3, [r5, #0]
 80199b0:	b103      	cbz	r3, 80199b4 <_fstat_r+0x1c>
 80199b2:	6023      	str	r3, [r4, #0]
 80199b4:	bd38      	pop	{r3, r4, r5, pc}
 80199b6:	bf00      	nop
 80199b8:	24006934 	.word	0x24006934

080199bc <_isatty_r>:
 80199bc:	b538      	push	{r3, r4, r5, lr}
 80199be:	4d06      	ldr	r5, [pc, #24]	@ (80199d8 <_isatty_r+0x1c>)
 80199c0:	2300      	movs	r3, #0
 80199c2:	4604      	mov	r4, r0
 80199c4:	4608      	mov	r0, r1
 80199c6:	602b      	str	r3, [r5, #0]
 80199c8:	f7e9 fe82 	bl	80036d0 <_isatty>
 80199cc:	1c43      	adds	r3, r0, #1
 80199ce:	d102      	bne.n	80199d6 <_isatty_r+0x1a>
 80199d0:	682b      	ldr	r3, [r5, #0]
 80199d2:	b103      	cbz	r3, 80199d6 <_isatty_r+0x1a>
 80199d4:	6023      	str	r3, [r4, #0]
 80199d6:	bd38      	pop	{r3, r4, r5, pc}
 80199d8:	24006934 	.word	0x24006934
 80199dc:	00000000 	.word	0x00000000

080199e0 <log>:
 80199e0:	b4f0      	push	{r4, r5, r6, r7}
 80199e2:	ee10 0a90 	vmov	r0, s1
 80199e6:	ee10 3a10 	vmov	r3, s0
 80199ea:	f04f 34ff 	mov.w	r4, #4294967295
 80199ee:	429c      	cmp	r4, r3
 80199f0:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 80199f4:	4c70      	ldr	r4, [pc, #448]	@ (8019bb8 <log+0x1d8>)
 80199f6:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 80199fa:	418c      	sbcs	r4, r1
 80199fc:	ed2d 8b02 	vpush	{d8}
 8019a00:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8019a04:	d35a      	bcc.n	8019abc <log+0xdc>
 8019a06:	4a6d      	ldr	r2, [pc, #436]	@ (8019bbc <log+0x1dc>)
 8019a08:	4290      	cmp	r0, r2
 8019a0a:	bf08      	it	eq
 8019a0c:	2b00      	cmpeq	r3, #0
 8019a0e:	f000 80c4 	beq.w	8019b9a <log+0x1ba>
 8019a12:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8019a16:	ee30 0b47 	vsub.f64	d0, d0, d7
 8019a1a:	4b69      	ldr	r3, [pc, #420]	@ (8019bc0 <log+0x1e0>)
 8019a1c:	ee20 2b00 	vmul.f64	d2, d0, d0
 8019a20:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8019a24:	ee20 4b02 	vmul.f64	d4, d0, d2
 8019a28:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8019a2c:	eea6 7b00 	vfma.f64	d7, d6, d0
 8019a30:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 8019a34:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 8019a38:	eea6 7b02 	vfma.f64	d7, d6, d2
 8019a3c:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 8019a40:	eea5 6b00 	vfma.f64	d6, d5, d0
 8019a44:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 8019a48:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 8019a4c:	eea5 6b02 	vfma.f64	d6, d5, d2
 8019a50:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 8019a54:	eea3 5b00 	vfma.f64	d5, d3, d0
 8019a58:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 8019a5c:	eea3 5b02 	vfma.f64	d5, d3, d2
 8019a60:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 8019a64:	eea3 5b04 	vfma.f64	d5, d3, d4
 8019a68:	eea5 6b04 	vfma.f64	d6, d5, d4
 8019a6c:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8019a70:	eea6 7b04 	vfma.f64	d7, d6, d4
 8019a74:	eeb0 2b47 	vmov.f64	d2, d7
 8019a78:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8019ba0 <log+0x1c0>
 8019a7c:	eeb0 6b40 	vmov.f64	d6, d0
 8019a80:	eeb0 3b40 	vmov.f64	d3, d0
 8019a84:	eea0 6b07 	vfma.f64	d6, d0, d7
 8019a88:	eea0 6b47 	vfms.f64	d6, d0, d7
 8019a8c:	ee30 8b46 	vsub.f64	d8, d0, d6
 8019a90:	ee26 1b06 	vmul.f64	d1, d6, d6
 8019a94:	eea1 3b05 	vfma.f64	d3, d1, d5
 8019a98:	ee30 7b43 	vsub.f64	d7, d0, d3
 8019a9c:	ee30 0b06 	vadd.f64	d0, d0, d6
 8019aa0:	eea1 7b05 	vfma.f64	d7, d1, d5
 8019aa4:	ee25 5b08 	vmul.f64	d5, d5, d8
 8019aa8:	eea5 7b00 	vfma.f64	d7, d5, d0
 8019aac:	eea2 7b04 	vfma.f64	d7, d2, d4
 8019ab0:	ee33 0b07 	vadd.f64	d0, d3, d7
 8019ab4:	ecbd 8b02 	vpop	{d8}
 8019ab8:	bcf0      	pop	{r4, r5, r6, r7}
 8019aba:	4770      	bx	lr
 8019abc:	f1a2 0410 	sub.w	r4, r2, #16
 8019ac0:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 8019ac4:	428c      	cmp	r4, r1
 8019ac6:	d923      	bls.n	8019b10 <log+0x130>
 8019ac8:	18d9      	adds	r1, r3, r3
 8019aca:	eb40 0400 	adc.w	r4, r0, r0
 8019ace:	4321      	orrs	r1, r4
 8019ad0:	d105      	bne.n	8019ade <log+0xfe>
 8019ad2:	ecbd 8b02 	vpop	{d8}
 8019ad6:	2001      	movs	r0, #1
 8019ad8:	bcf0      	pop	{r4, r5, r6, r7}
 8019ada:	f000 b885 	b.w	8019be8 <__math_divzero>
 8019ade:	4939      	ldr	r1, [pc, #228]	@ (8019bc4 <log+0x1e4>)
 8019ae0:	4288      	cmp	r0, r1
 8019ae2:	bf08      	it	eq
 8019ae4:	2b00      	cmpeq	r3, #0
 8019ae6:	d0e5      	beq.n	8019ab4 <log+0xd4>
 8019ae8:	0413      	lsls	r3, r2, #16
 8019aea:	d403      	bmi.n	8019af4 <log+0x114>
 8019aec:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8019af0:	4393      	bics	r3, r2
 8019af2:	d104      	bne.n	8019afe <log+0x11e>
 8019af4:	ecbd 8b02 	vpop	{d8}
 8019af8:	bcf0      	pop	{r4, r5, r6, r7}
 8019afa:	f000 b88d 	b.w	8019c18 <__math_invalid>
 8019afe:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8019ba8 <log+0x1c8>
 8019b02:	ee20 7b07 	vmul.f64	d7, d0, d7
 8019b06:	ec53 2b17 	vmov	r2, r3, d7
 8019b0a:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 8019b0e:	4613      	mov	r3, r2
 8019b10:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 8019b14:	492a      	ldr	r1, [pc, #168]	@ (8019bc0 <log+0x1e0>)
 8019b16:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 8019b1a:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 8019b1e:	f3c2 3446 	ubfx	r4, r2, #13, #7
 8019b22:	0d15      	lsrs	r5, r2, #20
 8019b24:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 8019b28:	052d      	lsls	r5, r5, #20
 8019b2a:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 8019b2e:	1e1e      	subs	r6, r3, #0
 8019b30:	1b47      	subs	r7, r0, r5
 8019b32:	ec47 6b16 	vmov	d6, r6, r7
 8019b36:	1512      	asrs	r2, r2, #20
 8019b38:	eea7 5b06 	vfma.f64	d5, d7, d6
 8019b3c:	ee07 2a90 	vmov	s15, r2
 8019b40:	ee25 2b05 	vmul.f64	d2, d5, d5
 8019b44:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8019b48:	ed91 4b00 	vldr	d4, [r1]
 8019b4c:	ee25 1b02 	vmul.f64	d1, d5, d2
 8019b50:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 8019b54:	eea4 7b06 	vfma.f64	d7, d4, d6
 8019b58:	ee35 4b07 	vadd.f64	d4, d5, d7
 8019b5c:	ee37 0b44 	vsub.f64	d0, d7, d4
 8019b60:	ed91 7b02 	vldr	d7, [r1, #8]
 8019b64:	ee30 0b05 	vadd.f64	d0, d0, d5
 8019b68:	eea7 0b06 	vfma.f64	d0, d7, d6
 8019b6c:	ed91 7b04 	vldr	d7, [r1, #16]
 8019b70:	ed91 6b08 	vldr	d6, [r1, #32]
 8019b74:	eea7 0b02 	vfma.f64	d0, d7, d2
 8019b78:	ed91 7b06 	vldr	d7, [r1, #24]
 8019b7c:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 8019b80:	eea6 7b05 	vfma.f64	d7, d6, d5
 8019b84:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8019b88:	eea3 6b05 	vfma.f64	d6, d3, d5
 8019b8c:	eea6 7b02 	vfma.f64	d7, d6, d2
 8019b90:	eea1 0b07 	vfma.f64	d0, d1, d7
 8019b94:	ee30 0b04 	vadd.f64	d0, d0, d4
 8019b98:	e78c      	b.n	8019ab4 <log+0xd4>
 8019b9a:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8019bb0 <log+0x1d0>
 8019b9e:	e789      	b.n	8019ab4 <log+0xd4>
 8019ba0:	00000000 	.word	0x00000000
 8019ba4:	41a00000 	.word	0x41a00000
 8019ba8:	00000000 	.word	0x00000000
 8019bac:	43300000 	.word	0x43300000
	...
 8019bb8:	000308ff 	.word	0x000308ff
 8019bbc:	3ff00000 	.word	0x3ff00000
 8019bc0:	0801a150 	.word	0x0801a150
 8019bc4:	7ff00000 	.word	0x7ff00000

08019bc8 <with_errno>:
 8019bc8:	b510      	push	{r4, lr}
 8019bca:	ed2d 8b02 	vpush	{d8}
 8019bce:	eeb0 8b40 	vmov.f64	d8, d0
 8019bd2:	4604      	mov	r4, r0
 8019bd4:	f7fe f884 	bl	8017ce0 <__errno>
 8019bd8:	eeb0 0b48 	vmov.f64	d0, d8
 8019bdc:	ecbd 8b02 	vpop	{d8}
 8019be0:	6004      	str	r4, [r0, #0]
 8019be2:	bd10      	pop	{r4, pc}
 8019be4:	0000      	movs	r0, r0
	...

08019be8 <__math_divzero>:
 8019be8:	b082      	sub	sp, #8
 8019bea:	2800      	cmp	r0, #0
 8019bec:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8019bf0:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8019bf4:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8019bf8:	ed8d 7b00 	vstr	d7, [sp]
 8019bfc:	ed9d 0b00 	vldr	d0, [sp]
 8019c00:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8019c10 <__math_divzero+0x28>
 8019c04:	2022      	movs	r0, #34	@ 0x22
 8019c06:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8019c0a:	b002      	add	sp, #8
 8019c0c:	f7ff bfdc 	b.w	8019bc8 <with_errno>
	...

08019c18 <__math_invalid>:
 8019c18:	eeb0 7b40 	vmov.f64	d7, d0
 8019c1c:	eeb4 7b47 	vcmp.f64	d7, d7
 8019c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c24:	ee30 6b40 	vsub.f64	d6, d0, d0
 8019c28:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8019c2c:	d602      	bvs.n	8019c34 <__math_invalid+0x1c>
 8019c2e:	2021      	movs	r0, #33	@ 0x21
 8019c30:	f7ff bfca 	b.w	8019bc8 <with_errno>
 8019c34:	4770      	bx	lr
	...

08019c38 <_init>:
 8019c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c3a:	bf00      	nop
 8019c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019c3e:	bc08      	pop	{r3}
 8019c40:	469e      	mov	lr, r3
 8019c42:	4770      	bx	lr

08019c44 <_fini>:
 8019c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c46:	bf00      	nop
 8019c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019c4a:	bc08      	pop	{r3}
 8019c4c:	469e      	mov	lr, r3
 8019c4e:	4770      	bx	lr
