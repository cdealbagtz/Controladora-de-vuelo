
Controladora-de-vuelo-V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018c30  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d90  08018ee0  08018ee0  00019ee0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019c70  08019c70  0001ac70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08019c78  08019c78  0001ac78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08019c7c  08019c7c  0001ac7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000290  24000000  08019c80  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000065b4  24000290  08019f10  0001b290  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24006844  08019f10  0001b844  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001b290  2**0
                  CONTENTS, READONLY
 10 .debug_info   00035079  00000000  00000000  0001b2be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007abc  00000000  00000000  00050337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000028e0  00000000  00000000  00057df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001f7b  00000000  00000000  0005a6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d413  00000000  00000000  0005c653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004083a  00000000  00000000  00099a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00161510  00000000  00000000  000da2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0023b7b0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ba30  00000000  00000000  0023b7f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006a  00000000  00000000  00247224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000290 	.word	0x24000290
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08018ec8 	.word	0x08018ec8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000294 	.word	0x24000294
 80002ec:	08018ec8 	.word	0x08018ec8

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_ldivmod>:
 8000728:	b97b      	cbnz	r3, 800074a <__aeabi_ldivmod+0x22>
 800072a:	b972      	cbnz	r2, 800074a <__aeabi_ldivmod+0x22>
 800072c:	2900      	cmp	r1, #0
 800072e:	bfbe      	ittt	lt
 8000730:	2000      	movlt	r0, #0
 8000732:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000736:	e006      	blt.n	8000746 <__aeabi_ldivmod+0x1e>
 8000738:	bf08      	it	eq
 800073a:	2800      	cmpeq	r0, #0
 800073c:	bf1c      	itt	ne
 800073e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000742:	f04f 30ff 	movne.w	r0, #4294967295
 8000746:	f000 b9ed 	b.w	8000b24 <__aeabi_idiv0>
 800074a:	f1ad 0c08 	sub.w	ip, sp, #8
 800074e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000752:	2900      	cmp	r1, #0
 8000754:	db09      	blt.n	800076a <__aeabi_ldivmod+0x42>
 8000756:	2b00      	cmp	r3, #0
 8000758:	db1a      	blt.n	8000790 <__aeabi_ldivmod+0x68>
 800075a:	f000 f885 	bl	8000868 <__udivmoddi4>
 800075e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000762:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000766:	b004      	add	sp, #16
 8000768:	4770      	bx	lr
 800076a:	4240      	negs	r0, r0
 800076c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000770:	2b00      	cmp	r3, #0
 8000772:	db1b      	blt.n	80007ac <__aeabi_ldivmod+0x84>
 8000774:	f000 f878 	bl	8000868 <__udivmoddi4>
 8000778:	f8dd e004 	ldr.w	lr, [sp, #4]
 800077c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000780:	b004      	add	sp, #16
 8000782:	4240      	negs	r0, r0
 8000784:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000788:	4252      	negs	r2, r2
 800078a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800078e:	4770      	bx	lr
 8000790:	4252      	negs	r2, r2
 8000792:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000796:	f000 f867 	bl	8000868 <__udivmoddi4>
 800079a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800079e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007a2:	b004      	add	sp, #16
 80007a4:	4240      	negs	r0, r0
 80007a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007aa:	4770      	bx	lr
 80007ac:	4252      	negs	r2, r2
 80007ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007b2:	f000 f859 	bl	8000868 <__udivmoddi4>
 80007b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007be:	b004      	add	sp, #16
 80007c0:	4252      	negs	r2, r2
 80007c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007c6:	4770      	bx	lr

080007c8 <__aeabi_uldivmod>:
 80007c8:	b953      	cbnz	r3, 80007e0 <__aeabi_uldivmod+0x18>
 80007ca:	b94a      	cbnz	r2, 80007e0 <__aeabi_uldivmod+0x18>
 80007cc:	2900      	cmp	r1, #0
 80007ce:	bf08      	it	eq
 80007d0:	2800      	cmpeq	r0, #0
 80007d2:	bf1c      	itt	ne
 80007d4:	f04f 31ff 	movne.w	r1, #4294967295
 80007d8:	f04f 30ff 	movne.w	r0, #4294967295
 80007dc:	f000 b9a2 	b.w	8000b24 <__aeabi_idiv0>
 80007e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007e8:	f000 f83e 	bl	8000868 <__udivmoddi4>
 80007ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f4:	b004      	add	sp, #16
 80007f6:	4770      	bx	lr

080007f8 <__aeabi_d2lz>:
 80007f8:	b508      	push	{r3, lr}
 80007fa:	4602      	mov	r2, r0
 80007fc:	460b      	mov	r3, r1
 80007fe:	ec43 2b17 	vmov	d7, r2, r3
 8000802:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800080a:	d403      	bmi.n	8000814 <__aeabi_d2lz+0x1c>
 800080c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000810:	f000 b80a 	b.w	8000828 <__aeabi_d2ulz>
 8000814:	eeb1 7b47 	vneg.f64	d7, d7
 8000818:	ec51 0b17 	vmov	r0, r1, d7
 800081c:	f000 f804 	bl	8000828 <__aeabi_d2ulz>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	bd08      	pop	{r3, pc}

08000828 <__aeabi_d2ulz>:
 8000828:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000858 <__aeabi_d2ulz+0x30>
 800082c:	ec41 0b17 	vmov	d7, r0, r1
 8000830:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000860 <__aeabi_d2ulz+0x38>
 8000834:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000838:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800083c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000840:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000844:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000848:	ee16 1a10 	vmov	r1, s12
 800084c:	ee17 0a90 	vmov	r0, s15
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	f3af 8000 	nop.w
 8000858:	00000000 	.word	0x00000000
 800085c:	3df00000 	.word	0x3df00000
 8000860:	00000000 	.word	0x00000000
 8000864:	41f00000 	.word	0x41f00000

08000868 <__udivmoddi4>:
 8000868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800086c:	9d08      	ldr	r5, [sp, #32]
 800086e:	460c      	mov	r4, r1
 8000870:	2b00      	cmp	r3, #0
 8000872:	d14e      	bne.n	8000912 <__udivmoddi4+0xaa>
 8000874:	4694      	mov	ip, r2
 8000876:	458c      	cmp	ip, r1
 8000878:	4686      	mov	lr, r0
 800087a:	fab2 f282 	clz	r2, r2
 800087e:	d962      	bls.n	8000946 <__udivmoddi4+0xde>
 8000880:	b14a      	cbz	r2, 8000896 <__udivmoddi4+0x2e>
 8000882:	f1c2 0320 	rsb	r3, r2, #32
 8000886:	4091      	lsls	r1, r2
 8000888:	fa20 f303 	lsr.w	r3, r0, r3
 800088c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000890:	4319      	orrs	r1, r3
 8000892:	fa00 fe02 	lsl.w	lr, r0, r2
 8000896:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800089a:	fa1f f68c 	uxth.w	r6, ip
 800089e:	fbb1 f4f7 	udiv	r4, r1, r7
 80008a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a6:	fb07 1114 	mls	r1, r7, r4, r1
 80008aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ae:	fb04 f106 	mul.w	r1, r4, r6
 80008b2:	4299      	cmp	r1, r3
 80008b4:	d90a      	bls.n	80008cc <__udivmoddi4+0x64>
 80008b6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80008be:	f080 8112 	bcs.w	8000ae6 <__udivmoddi4+0x27e>
 80008c2:	4299      	cmp	r1, r3
 80008c4:	f240 810f 	bls.w	8000ae6 <__udivmoddi4+0x27e>
 80008c8:	3c02      	subs	r4, #2
 80008ca:	4463      	add	r3, ip
 80008cc:	1a59      	subs	r1, r3, r1
 80008ce:	fa1f f38e 	uxth.w	r3, lr
 80008d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80008d6:	fb07 1110 	mls	r1, r7, r0, r1
 80008da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008de:	fb00 f606 	mul.w	r6, r0, r6
 80008e2:	429e      	cmp	r6, r3
 80008e4:	d90a      	bls.n	80008fc <__udivmoddi4+0x94>
 80008e6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80008ee:	f080 80fc 	bcs.w	8000aea <__udivmoddi4+0x282>
 80008f2:	429e      	cmp	r6, r3
 80008f4:	f240 80f9 	bls.w	8000aea <__udivmoddi4+0x282>
 80008f8:	4463      	add	r3, ip
 80008fa:	3802      	subs	r0, #2
 80008fc:	1b9b      	subs	r3, r3, r6
 80008fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000902:	2100      	movs	r1, #0
 8000904:	b11d      	cbz	r5, 800090e <__udivmoddi4+0xa6>
 8000906:	40d3      	lsrs	r3, r2
 8000908:	2200      	movs	r2, #0
 800090a:	e9c5 3200 	strd	r3, r2, [r5]
 800090e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000912:	428b      	cmp	r3, r1
 8000914:	d905      	bls.n	8000922 <__udivmoddi4+0xba>
 8000916:	b10d      	cbz	r5, 800091c <__udivmoddi4+0xb4>
 8000918:	e9c5 0100 	strd	r0, r1, [r5]
 800091c:	2100      	movs	r1, #0
 800091e:	4608      	mov	r0, r1
 8000920:	e7f5      	b.n	800090e <__udivmoddi4+0xa6>
 8000922:	fab3 f183 	clz	r1, r3
 8000926:	2900      	cmp	r1, #0
 8000928:	d146      	bne.n	80009b8 <__udivmoddi4+0x150>
 800092a:	42a3      	cmp	r3, r4
 800092c:	d302      	bcc.n	8000934 <__udivmoddi4+0xcc>
 800092e:	4290      	cmp	r0, r2
 8000930:	f0c0 80f0 	bcc.w	8000b14 <__udivmoddi4+0x2ac>
 8000934:	1a86      	subs	r6, r0, r2
 8000936:	eb64 0303 	sbc.w	r3, r4, r3
 800093a:	2001      	movs	r0, #1
 800093c:	2d00      	cmp	r5, #0
 800093e:	d0e6      	beq.n	800090e <__udivmoddi4+0xa6>
 8000940:	e9c5 6300 	strd	r6, r3, [r5]
 8000944:	e7e3      	b.n	800090e <__udivmoddi4+0xa6>
 8000946:	2a00      	cmp	r2, #0
 8000948:	f040 8090 	bne.w	8000a6c <__udivmoddi4+0x204>
 800094c:	eba1 040c 	sub.w	r4, r1, ip
 8000950:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000954:	fa1f f78c 	uxth.w	r7, ip
 8000958:	2101      	movs	r1, #1
 800095a:	fbb4 f6f8 	udiv	r6, r4, r8
 800095e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000962:	fb08 4416 	mls	r4, r8, r6, r4
 8000966:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800096a:	fb07 f006 	mul.w	r0, r7, r6
 800096e:	4298      	cmp	r0, r3
 8000970:	d908      	bls.n	8000984 <__udivmoddi4+0x11c>
 8000972:	eb1c 0303 	adds.w	r3, ip, r3
 8000976:	f106 34ff 	add.w	r4, r6, #4294967295
 800097a:	d202      	bcs.n	8000982 <__udivmoddi4+0x11a>
 800097c:	4298      	cmp	r0, r3
 800097e:	f200 80cd 	bhi.w	8000b1c <__udivmoddi4+0x2b4>
 8000982:	4626      	mov	r6, r4
 8000984:	1a1c      	subs	r4, r3, r0
 8000986:	fa1f f38e 	uxth.w	r3, lr
 800098a:	fbb4 f0f8 	udiv	r0, r4, r8
 800098e:	fb08 4410 	mls	r4, r8, r0, r4
 8000992:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000996:	fb00 f707 	mul.w	r7, r0, r7
 800099a:	429f      	cmp	r7, r3
 800099c:	d908      	bls.n	80009b0 <__udivmoddi4+0x148>
 800099e:	eb1c 0303 	adds.w	r3, ip, r3
 80009a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0x146>
 80009a8:	429f      	cmp	r7, r3
 80009aa:	f200 80b0 	bhi.w	8000b0e <__udivmoddi4+0x2a6>
 80009ae:	4620      	mov	r0, r4
 80009b0:	1bdb      	subs	r3, r3, r7
 80009b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009b6:	e7a5      	b.n	8000904 <__udivmoddi4+0x9c>
 80009b8:	f1c1 0620 	rsb	r6, r1, #32
 80009bc:	408b      	lsls	r3, r1
 80009be:	fa22 f706 	lsr.w	r7, r2, r6
 80009c2:	431f      	orrs	r7, r3
 80009c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80009c8:	fa04 f301 	lsl.w	r3, r4, r1
 80009cc:	ea43 030c 	orr.w	r3, r3, ip
 80009d0:	40f4      	lsrs	r4, r6
 80009d2:	fa00 f801 	lsl.w	r8, r0, r1
 80009d6:	0c38      	lsrs	r0, r7, #16
 80009d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009dc:	fbb4 fef0 	udiv	lr, r4, r0
 80009e0:	fa1f fc87 	uxth.w	ip, r7
 80009e4:	fb00 441e 	mls	r4, r0, lr, r4
 80009e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009ec:	fb0e f90c 	mul.w	r9, lr, ip
 80009f0:	45a1      	cmp	r9, r4
 80009f2:	fa02 f201 	lsl.w	r2, r2, r1
 80009f6:	d90a      	bls.n	8000a0e <__udivmoddi4+0x1a6>
 80009f8:	193c      	adds	r4, r7, r4
 80009fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009fe:	f080 8084 	bcs.w	8000b0a <__udivmoddi4+0x2a2>
 8000a02:	45a1      	cmp	r9, r4
 8000a04:	f240 8081 	bls.w	8000b0a <__udivmoddi4+0x2a2>
 8000a08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a0c:	443c      	add	r4, r7
 8000a0e:	eba4 0409 	sub.w	r4, r4, r9
 8000a12:	fa1f f983 	uxth.w	r9, r3
 8000a16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000a1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a26:	45a4      	cmp	ip, r4
 8000a28:	d907      	bls.n	8000a3a <__udivmoddi4+0x1d2>
 8000a2a:	193c      	adds	r4, r7, r4
 8000a2c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a30:	d267      	bcs.n	8000b02 <__udivmoddi4+0x29a>
 8000a32:	45a4      	cmp	ip, r4
 8000a34:	d965      	bls.n	8000b02 <__udivmoddi4+0x29a>
 8000a36:	3b02      	subs	r3, #2
 8000a38:	443c      	add	r4, r7
 8000a3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000a42:	eba4 040c 	sub.w	r4, r4, ip
 8000a46:	429c      	cmp	r4, r3
 8000a48:	46ce      	mov	lr, r9
 8000a4a:	469c      	mov	ip, r3
 8000a4c:	d351      	bcc.n	8000af2 <__udivmoddi4+0x28a>
 8000a4e:	d04e      	beq.n	8000aee <__udivmoddi4+0x286>
 8000a50:	b155      	cbz	r5, 8000a68 <__udivmoddi4+0x200>
 8000a52:	ebb8 030e 	subs.w	r3, r8, lr
 8000a56:	eb64 040c 	sbc.w	r4, r4, ip
 8000a5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000a5e:	40cb      	lsrs	r3, r1
 8000a60:	431e      	orrs	r6, r3
 8000a62:	40cc      	lsrs	r4, r1
 8000a64:	e9c5 6400 	strd	r6, r4, [r5]
 8000a68:	2100      	movs	r1, #0
 8000a6a:	e750      	b.n	800090e <__udivmoddi4+0xa6>
 8000a6c:	f1c2 0320 	rsb	r3, r2, #32
 8000a70:	fa20 f103 	lsr.w	r1, r0, r3
 8000a74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a78:	fa24 f303 	lsr.w	r3, r4, r3
 8000a7c:	4094      	lsls	r4, r2
 8000a7e:	430c      	orrs	r4, r1
 8000a80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a88:	fa1f f78c 	uxth.w	r7, ip
 8000a8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a90:	fb08 3110 	mls	r1, r8, r0, r3
 8000a94:	0c23      	lsrs	r3, r4, #16
 8000a96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a9a:	fb00 f107 	mul.w	r1, r0, r7
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	d908      	bls.n	8000ab4 <__udivmoddi4+0x24c>
 8000aa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000aaa:	d22c      	bcs.n	8000b06 <__udivmoddi4+0x29e>
 8000aac:	4299      	cmp	r1, r3
 8000aae:	d92a      	bls.n	8000b06 <__udivmoddi4+0x29e>
 8000ab0:	3802      	subs	r0, #2
 8000ab2:	4463      	add	r3, ip
 8000ab4:	1a5b      	subs	r3, r3, r1
 8000ab6:	b2a4      	uxth	r4, r4
 8000ab8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000abc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ac0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac4:	fb01 f307 	mul.w	r3, r1, r7
 8000ac8:	42a3      	cmp	r3, r4
 8000aca:	d908      	bls.n	8000ade <__udivmoddi4+0x276>
 8000acc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ad0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ad4:	d213      	bcs.n	8000afe <__udivmoddi4+0x296>
 8000ad6:	42a3      	cmp	r3, r4
 8000ad8:	d911      	bls.n	8000afe <__udivmoddi4+0x296>
 8000ada:	3902      	subs	r1, #2
 8000adc:	4464      	add	r4, ip
 8000ade:	1ae4      	subs	r4, r4, r3
 8000ae0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ae4:	e739      	b.n	800095a <__udivmoddi4+0xf2>
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	e6f0      	b.n	80008cc <__udivmoddi4+0x64>
 8000aea:	4608      	mov	r0, r1
 8000aec:	e706      	b.n	80008fc <__udivmoddi4+0x94>
 8000aee:	45c8      	cmp	r8, r9
 8000af0:	d2ae      	bcs.n	8000a50 <__udivmoddi4+0x1e8>
 8000af2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000af6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000afa:	3801      	subs	r0, #1
 8000afc:	e7a8      	b.n	8000a50 <__udivmoddi4+0x1e8>
 8000afe:	4631      	mov	r1, r6
 8000b00:	e7ed      	b.n	8000ade <__udivmoddi4+0x276>
 8000b02:	4603      	mov	r3, r0
 8000b04:	e799      	b.n	8000a3a <__udivmoddi4+0x1d2>
 8000b06:	4630      	mov	r0, r6
 8000b08:	e7d4      	b.n	8000ab4 <__udivmoddi4+0x24c>
 8000b0a:	46d6      	mov	lr, sl
 8000b0c:	e77f      	b.n	8000a0e <__udivmoddi4+0x1a6>
 8000b0e:	4463      	add	r3, ip
 8000b10:	3802      	subs	r0, #2
 8000b12:	e74d      	b.n	80009b0 <__udivmoddi4+0x148>
 8000b14:	4606      	mov	r6, r0
 8000b16:	4623      	mov	r3, r4
 8000b18:	4608      	mov	r0, r1
 8000b1a:	e70f      	b.n	800093c <__udivmoddi4+0xd4>
 8000b1c:	3e02      	subs	r6, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	e730      	b.n	8000984 <__udivmoddi4+0x11c>
 8000b22:	bf00      	nop

08000b24 <__aeabi_idiv0>:
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <get_commands_rc>:
    }
    return signal_out;
}

Cmd_s get_commands_rc(void)
{
 8000b28:	b490      	push	{r4, r7}
 8000b2a:	b08c      	sub	sp, #48	@ 0x30
 8000b2c:	af00      	add	r7, sp, #0
	//
	Cmd_s out_norms;

	out_norms.roll 		= ((float)Radio_input.Canal_1 - 1500.0 ) / 500.0 ;
 8000b2e:	4b3e      	ldr	r3, [pc, #248]	@ (8000c28 <get_commands_rc+0x100>)
 8000b30:	885b      	ldrh	r3, [r3, #2]
 8000b32:	ee07 3a90 	vmov	s15, r3
 8000b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b3a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b3e:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 8000c10 <get_commands_rc+0xe8>
 8000b42:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000b46:	ed9f 5b34 	vldr	d5, [pc, #208]	@ 8000c18 <get_commands_rc+0xf0>
 8000b4a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b4e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b52:	edc7 7a04 	vstr	s15, [r7, #16]

	out_norms.pitch 	= ((float)Radio_input.Canal_2 - 1500.0 ) / 500.0 ;
 8000b56:	4b34      	ldr	r3, [pc, #208]	@ (8000c28 <get_commands_rc+0x100>)
 8000b58:	889b      	ldrh	r3, [r3, #4]
 8000b5a:	ee07 3a90 	vmov	s15, r3
 8000b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b62:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b66:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8000c10 <get_commands_rc+0xe8>
 8000b6a:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000b6e:	ed9f 5b2a 	vldr	d5, [pc, #168]	@ 8000c18 <get_commands_rc+0xf0>
 8000b72:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b76:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b7a:	edc7 7a05 	vstr	s15, [r7, #20]

	out_norms.yaw 		= ((float)Radio_input.Canal_3 - 1500.0 ) / 500.0 ;
 8000b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000c28 <get_commands_rc+0x100>)
 8000b80:	88db      	ldrh	r3, [r3, #6]
 8000b82:	ee07 3a90 	vmov	s15, r3
 8000b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b8a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b8e:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 8000c10 <get_commands_rc+0xe8>
 8000b92:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000b96:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 8000c18 <get_commands_rc+0xf0>
 8000b9a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b9e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ba2:	edc7 7a06 	vstr	s15, [r7, #24]

	out_norms.thrust 	= ((float)Radio_input.Canal_4 - 1000.0 ) / 1000.0 ;
 8000ba6:	4b20      	ldr	r3, [pc, #128]	@ (8000c28 <get_commands_rc+0x100>)
 8000ba8:	891b      	ldrh	r3, [r3, #8]
 8000baa:	ee07 3a90 	vmov	s15, r3
 8000bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bb2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bb6:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 8000c20 <get_commands_rc+0xf8>
 8000bba:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000bbe:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8000c20 <get_commands_rc+0xf8>
 8000bc2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000bc6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bca:	edc7 7a07 	vstr	s15, [r7, #28]

	return out_norms;
 8000bce:	f107 0420 	add.w	r4, r7, #32
 8000bd2:	f107 0310 	add.w	r3, r7, #16
 8000bd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000bdc:	6a38      	ldr	r0, [r7, #32]
 8000bde:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000be0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000be4:	ee06 0a10 	vmov	s12, r0
 8000be8:	ee06 1a90 	vmov	s13, r1
 8000bec:	ee07 2a10 	vmov	s14, r2
 8000bf0:	ee07 3a90 	vmov	s15, r3
}
 8000bf4:	eeb0 0a46 	vmov.f32	s0, s12
 8000bf8:	eef0 0a66 	vmov.f32	s1, s13
 8000bfc:	eeb0 1a47 	vmov.f32	s2, s14
 8000c00:	eef0 1a67 	vmov.f32	s3, s15
 8000c04:	3730      	adds	r7, #48	@ 0x30
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc90      	pop	{r4, r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	f3af 8000 	nop.w
 8000c10:	00000000 	.word	0x00000000
 8000c14:	40977000 	.word	0x40977000
 8000c18:	00000000 	.word	0x00000000
 8000c1c:	407f4000 	.word	0x407f4000
 8000c20:	00000000 	.word	0x00000000
 8000c24:	408f4000 	.word	0x408f4000
 8000c28:	2400007c 	.word	0x2400007c

08000c2c <FlightTaskAttitude>:
Cmd_s Command_out;
Cmd_s rates_Gains;


void FlightTaskAttitude(void)
{
 8000c2c:	b598      	push	{r3, r4, r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	//
	attitude_parameters_refresh();
 8000c30:	f000 f8ac 	bl	8000d8c <attitude_parameters_refresh>

	refresh_actual_rates();
 8000c34:	f000 f9ae 	bl	8000f94 <refresh_actual_rates>

	get_flight_mode();
 8000c38:	f000 f89c 	bl	8000d74 <get_flight_mode>

	Command_in = get_commands_rc();
 8000c3c:	f7ff ff74 	bl	8000b28 <get_commands_rc>
 8000c40:	eeb0 6a40 	vmov.f32	s12, s0
 8000c44:	eef0 6a60 	vmov.f32	s13, s1
 8000c48:	eeb0 7a41 	vmov.f32	s14, s2
 8000c4c:	eef0 7a61 	vmov.f32	s15, s3
 8000c50:	4b2d      	ldr	r3, [pc, #180]	@ (8000d08 <FlightTaskAttitude+0xdc>)
 8000c52:	ed83 6a00 	vstr	s12, [r3]
 8000c56:	edc3 6a01 	vstr	s13, [r3, #4]
 8000c5a:	ed83 7a02 	vstr	s14, [r3, #8]
 8000c5e:	edc3 7a03 	vstr	s15, [r3, #12]


	switch(mode)
 8000c62:	4b2a      	ldr	r3, [pc, #168]	@ (8000d0c <FlightTaskAttitude+0xe0>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	dc48      	bgt.n	8000cfc <FlightTaskAttitude+0xd0>
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	da48      	bge.n	8000d00 <FlightTaskAttitude+0xd4>
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d03d      	beq.n	8000cee <FlightTaskAttitude+0xc2>
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d000      	beq.n	8000c78 <FlightTaskAttitude+0x4c>
		//
		Command_out = Command_in;
		break;
	default:
		//
		break;
 8000c76:	e041      	b.n	8000cfc <FlightTaskAttitude+0xd0>
		Command_out = rates_control_law(Command_in , actual_rates, rates_Gains);
 8000c78:	4b25      	ldr	r3, [pc, #148]	@ (8000d10 <FlightTaskAttitude+0xe4>)
 8000c7a:	edd3 3a00 	vldr	s7, [r3]
 8000c7e:	ed93 4a01 	vldr	s8, [r3, #4]
 8000c82:	edd3 4a02 	vldr	s9, [r3, #8]
 8000c86:	ed93 5a03 	vldr	s10, [r3, #12]
 8000c8a:	4b22      	ldr	r3, [pc, #136]	@ (8000d14 <FlightTaskAttitude+0xe8>)
 8000c8c:	edd3 2a00 	vldr	s5, [r3]
 8000c90:	ed93 3a01 	vldr	s6, [r3, #4]
 8000c94:	edd3 5a02 	vldr	s11, [r3, #8]
 8000c98:	4b1b      	ldr	r3, [pc, #108]	@ (8000d08 <FlightTaskAttitude+0xdc>)
 8000c9a:	ed93 6a00 	vldr	s12, [r3]
 8000c9e:	edd3 6a01 	vldr	s13, [r3, #4]
 8000ca2:	ed93 7a02 	vldr	s14, [r3, #8]
 8000ca6:	edd3 7a03 	vldr	s15, [r3, #12]
 8000caa:	eeb0 2a62 	vmov.f32	s4, s5
 8000cae:	eef0 2a43 	vmov.f32	s5, s6
 8000cb2:	eeb0 3a65 	vmov.f32	s6, s11
 8000cb6:	eeb0 0a46 	vmov.f32	s0, s12
 8000cba:	eef0 0a66 	vmov.f32	s1, s13
 8000cbe:	eeb0 1a47 	vmov.f32	s2, s14
 8000cc2:	eef0 1a67 	vmov.f32	s3, s15
 8000cc6:	f000 f875 	bl	8000db4 <rates_control_law>
 8000cca:	eeb0 6a40 	vmov.f32	s12, s0
 8000cce:	eef0 6a60 	vmov.f32	s13, s1
 8000cd2:	eeb0 7a41 	vmov.f32	s14, s2
 8000cd6:	eef0 7a61 	vmov.f32	s15, s3
 8000cda:	4b0f      	ldr	r3, [pc, #60]	@ (8000d18 <FlightTaskAttitude+0xec>)
 8000cdc:	ed83 6a00 	vstr	s12, [r3]
 8000ce0:	edc3 6a01 	vstr	s13, [r3, #4]
 8000ce4:	ed83 7a02 	vstr	s14, [r3, #8]
 8000ce8:	edc3 7a03 	vstr	s15, [r3, #12]
		break;
 8000cec:	e009      	b.n	8000d02 <FlightTaskAttitude+0xd6>
		Command_out = Command_in;
 8000cee:	4a0a      	ldr	r2, [pc, #40]	@ (8000d18 <FlightTaskAttitude+0xec>)
 8000cf0:	4b05      	ldr	r3, [pc, #20]	@ (8000d08 <FlightTaskAttitude+0xdc>)
 8000cf2:	4614      	mov	r4, r2
 8000cf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cf6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		break;
 8000cfa:	e002      	b.n	8000d02 <FlightTaskAttitude+0xd6>
		break;
 8000cfc:	bf00      	nop
 8000cfe:	e000      	b.n	8000d02 <FlightTaskAttitude+0xd6>
		break;
 8000d00:	bf00      	nop
	}

}
 8000d02:	bf00      	nop
 8000d04:	bd98      	pop	{r3, r4, r7, pc}
 8000d06:	bf00      	nop
 8000d08:	240002ac 	.word	0x240002ac
 8000d0c:	240002dc 	.word	0x240002dc
 8000d10:	240002cc 	.word	0x240002cc
 8000d14:	2400037c 	.word	0x2400037c
 8000d18:	240002bc 	.word	0x240002bc

08000d1c <CurrentMode>:
#include "Flight_Management_Control/modes_management.h"

FlightMode_t mode ;

uint8_t CurrentMode(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
	//
	uint16_t pwm_value = Radio_input.Canal_5;
 8000d22:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <CurrentMode+0x50>)
 8000d24:	895b      	ldrh	r3, [r3, #10]
 8000d26:	80fb      	strh	r3, [r7, #6]

	if (pwm_value < (PWM_MID - PWM_DEADZONE))
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	f240 52a9 	movw	r2, #1449	@ 0x5a9
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d801      	bhi.n	8000d36 <CurrentMode+0x1a>
	{
	        return MANUAL_MODE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	e014      	b.n	8000d60 <CurrentMode+0x44>
	 }
	else if (pwm_value > (PWM_MID + PWM_DEADZONE) && pwm_value < (PWM_MAX - PWM_DEADZONE))
 8000d36:	88fb      	ldrh	r3, [r7, #6]
 8000d38:	f240 620e 	movw	r2, #1550	@ 0x60e
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d906      	bls.n	8000d4e <CurrentMode+0x32>
 8000d40:	88fb      	ldrh	r3, [r7, #6]
 8000d42:	f240 729d 	movw	r2, #1949	@ 0x79d
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d801      	bhi.n	8000d4e <CurrentMode+0x32>
	 {
	        return RATE_MODE;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e008      	b.n	8000d60 <CurrentMode+0x44>
	  }
	else if (pwm_value >= (PWM_MAX - PWM_DEADZONE))
 8000d4e:	88fb      	ldrh	r3, [r7, #6]
 8000d50:	f240 729d 	movw	r2, #1949	@ 0x79d
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d901      	bls.n	8000d5c <CurrentMode+0x40>
	 {
	        return ATTITUDE_HOLD_MODE;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	e001      	b.n	8000d60 <CurrentMode+0x44>
	  }
	else {
	        // Zona muerta → mantener último modo (evita oscilaciones)
	        static FlightMode_t last_mode = MANUAL_MODE;
	        return last_mode;
 8000d5c:	4b04      	ldr	r3, [pc, #16]	@ (8000d70 <CurrentMode+0x54>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
	    }

}
 8000d60:	4618      	mov	r0, r3
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	2400007c 	.word	0x2400007c
 8000d70:	240002dd 	.word	0x240002dd

08000d74 <get_flight_mode>:

void get_flight_mode(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	//
	mode = (FlightMode_t)CurrentMode();
 8000d78:	f7ff ffd0 	bl	8000d1c <CurrentMode>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	461a      	mov	r2, r3
 8000d80:	4b01      	ldr	r3, [pc, #4]	@ (8000d88 <get_flight_mode+0x14>)
 8000d82:	701a      	strb	r2, [r3, #0]
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	240002dc 	.word	0x240002dc

08000d8c <attitude_parameters_refresh>:
#include "Flight_Management_Control/parameters_manager.h"
#include "Flight_Management_Control/flight_management.h"


void attitude_parameters_refresh(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
	//
	rates_Gains.roll  = K_P * 100;
 8000d90:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <attitude_parameters_refresh+0x20>)
 8000d92:	4a07      	ldr	r2, [pc, #28]	@ (8000db0 <attitude_parameters_refresh+0x24>)
 8000d94:	601a      	str	r2, [r3, #0]
	rates_Gains.pitch = K_Q * 100;
 8000d96:	4b05      	ldr	r3, [pc, #20]	@ (8000dac <attitude_parameters_refresh+0x20>)
 8000d98:	4a05      	ldr	r2, [pc, #20]	@ (8000db0 <attitude_parameters_refresh+0x24>)
 8000d9a:	605a      	str	r2, [r3, #4]
	rates_Gains.yaw   = K_R * 100;
 8000d9c:	4b03      	ldr	r3, [pc, #12]	@ (8000dac <attitude_parameters_refresh+0x20>)
 8000d9e:	4a04      	ldr	r2, [pc, #16]	@ (8000db0 <attitude_parameters_refresh+0x24>)
 8000da0:	609a      	str	r2, [r3, #8]

}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	240002cc 	.word	0x240002cc
 8000db0:	3dcccccd 	.word	0x3dcccccd

08000db4 <rates_control_law>:
 *      Author: rtrujillo
 */
#include "Flight_Management_Control/rates_mode.h"

Cmd_s rates_control_law(Cmd_s inputs_norms, Gyro_s actual_gyro, Cmd_s K)
{
 8000db4:	b490      	push	{r4, r7}
 8000db6:	b098      	sub	sp, #96	@ 0x60
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	eef0 5a43 	vmov.f32	s11, s6
 8000dbe:	eeb0 6a63 	vmov.f32	s12, s7
 8000dc2:	eef0 6a44 	vmov.f32	s13, s8
 8000dc6:	eeb0 7a64 	vmov.f32	s14, s9
 8000dca:	eef0 7a45 	vmov.f32	s15, s10
 8000dce:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
 8000dd2:	edc7 0a0d 	vstr	s1, [r7, #52]	@ 0x34
 8000dd6:	ed87 1a0e 	vstr	s2, [r7, #56]	@ 0x38
 8000dda:	edc7 1a0f 	vstr	s3, [r7, #60]	@ 0x3c
 8000dde:	ed87 2a09 	vstr	s4, [r7, #36]	@ 0x24
 8000de2:	edc7 2a0a 	vstr	s5, [r7, #40]	@ 0x28
 8000de6:	edc7 5a0b 	vstr	s11, [r7, #44]	@ 0x2c
 8000dea:	ed87 6a05 	vstr	s12, [r7, #20]
 8000dee:	edc7 6a06 	vstr	s13, [r7, #24]
 8000df2:	ed87 7a07 	vstr	s14, [r7, #28]
 8000df6:	edc7 7a08 	vstr	s15, [r7, #32]
	//
	Cmd_s out_puts;

	out_puts.roll   = inputs_norms.roll  -  actual_gyro.roll * K.roll ;
 8000dfa:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000dfe:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8000e02:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e0e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	out_puts.pitch  = inputs_norms.pitch -  actual_gyro.pitch* K.pitch ;
 8000e12:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000e16:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8000e1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e26:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	out_puts.yaw    = inputs_norms.yaw   -  actual_gyro.yaw  * K.yaw ;
 8000e2a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8000e2e:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8000e32:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e3e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	out_puts.thrust = inputs_norms.thrust ;
 8000e42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e44:	64fb      	str	r3, [r7, #76]	@ 0x4c

	return out_puts ;
 8000e46:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8000e4a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000e54:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8000e56:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8000e58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000e5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000e5c:	ee06 0a10 	vmov	s12, r0
 8000e60:	ee06 1a90 	vmov	s13, r1
 8000e64:	ee07 2a10 	vmov	s14, r2
 8000e68:	ee07 3a90 	vmov	s15, r3
}
 8000e6c:	eeb0 0a46 	vmov.f32	s0, s12
 8000e70:	eef0 0a66 	vmov.f32	s1, s13
 8000e74:	eeb0 1a47 	vmov.f32	s2, s14
 8000e78:	eef0 1a67 	vmov.f32	s3, s15
 8000e7c:	3760      	adds	r7, #96	@ 0x60
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc90      	pop	{r4, r7}
 8000e82:	4770      	bx	lr

08000e84 <LPF_gyro_filter_init>:


Gyro_s actual_rates;

void LPF_gyro_filter_init(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
	// Inicializaciones
	LPF_gyros[0] = LPF_gyro_x ;
 8000e8a:	4b3e      	ldr	r3, [pc, #248]	@ (8000f84 <LPF_gyro_filter_init+0x100>)
 8000e8c:	4a3e      	ldr	r2, [pc, #248]	@ (8000f88 <LPF_gyro_filter_init+0x104>)
 8000e8e:	601a      	str	r2, [r3, #0]
	LPF_gyros[1] = LPF_gyro_y ;
 8000e90:	4b3c      	ldr	r3, [pc, #240]	@ (8000f84 <LPF_gyro_filter_init+0x100>)
 8000e92:	4a3d      	ldr	r2, [pc, #244]	@ (8000f88 <LPF_gyro_filter_init+0x104>)
 8000e94:	605a      	str	r2, [r3, #4]
	LPF_gyros[2] = LPF_gyro_z ;
 8000e96:	4b3b      	ldr	r3, [pc, #236]	@ (8000f84 <LPF_gyro_filter_init+0x100>)
 8000e98:	4a3b      	ldr	r2, [pc, #236]	@ (8000f88 <LPF_gyro_filter_init+0x104>)
 8000e9a:	609a      	str	r2, [r3, #8]
	for(int idx = 0;idx < 3; idx++)
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	e066      	b.n	8000f70 <LPF_gyro_filter_init+0xec>
	{
		//
		gyros_fltrs[idx].inicio 	= 1;
 8000ea2:	4a3a      	ldr	r2, [pc, #232]	@ (8000f8c <LPF_gyro_filter_init+0x108>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	212c      	movs	r1, #44	@ 0x2c
 8000ea8:	fb01 f303 	mul.w	r3, r1, r3
 8000eac:	4413      	add	r3, r2
 8000eae:	3328      	adds	r3, #40	@ 0x28
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].f_cutoff 	= LPF_gyros[idx] ;
 8000eb4:	4a33      	ldr	r2, [pc, #204]	@ (8000f84 <LPF_gyro_filter_init+0x100>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	4413      	add	r3, r2
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	4933      	ldr	r1, [pc, #204]	@ (8000f8c <LPF_gyro_filter_init+0x108>)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	202c      	movs	r0, #44	@ 0x2c
 8000ec4:	fb00 f303 	mul.w	r3, r0, r3
 8000ec8:	440b      	add	r3, r1
 8000eca:	3318      	adds	r3, #24
 8000ecc:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].t_sample 	= SAMPLE_ATT ;
 8000ece:	4a2f      	ldr	r2, [pc, #188]	@ (8000f8c <LPF_gyro_filter_init+0x108>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	212c      	movs	r1, #44	@ 0x2c
 8000ed4:	fb01 f303 	mul.w	r3, r1, r3
 8000ed8:	4413      	add	r3, r2
 8000eda:	331c      	adds	r3, #28
 8000edc:	4a2c      	ldr	r2, [pc, #176]	@ (8000f90 <LPF_gyro_filter_init+0x10c>)
 8000ede:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].Y_0 		= 0.0f ;
 8000ee0:	4a2a      	ldr	r2, [pc, #168]	@ (8000f8c <LPF_gyro_filter_init+0x108>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	212c      	movs	r1, #44	@ 0x2c
 8000ee6:	fb01 f303 	mul.w	r3, r1, r3
 8000eea:	4413      	add	r3, r2
 8000eec:	3308      	adds	r3, #8
 8000eee:	f04f 0200 	mov.w	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].U_n 		= 0.0f;
 8000ef4:	4a25      	ldr	r2, [pc, #148]	@ (8000f8c <LPF_gyro_filter_init+0x108>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	212c      	movs	r1, #44	@ 0x2c
 8000efa:	fb01 f303 	mul.w	r3, r1, r3
 8000efe:	4413      	add	r3, r2
 8000f00:	330c      	adds	r3, #12
 8000f02:	f04f 0200 	mov.w	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].Y_n 		= 0.0f;
 8000f08:	4a20      	ldr	r2, [pc, #128]	@ (8000f8c <LPF_gyro_filter_init+0x108>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	212c      	movs	r1, #44	@ 0x2c
 8000f0e:	fb01 f303 	mul.w	r3, r1, r3
 8000f12:	4413      	add	r3, r2
 8000f14:	f04f 0200 	mov.w	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].Y_nm1 		= 0.0f;
 8000f1a:	4a1c      	ldr	r2, [pc, #112]	@ (8000f8c <LPF_gyro_filter_init+0x108>)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	212c      	movs	r1, #44	@ 0x2c
 8000f20:	fb01 f303 	mul.w	r3, r1, r3
 8000f24:	4413      	add	r3, r2
 8000f26:	3304      	adds	r3, #4
 8000f28:	f04f 0200 	mov.w	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].U_nm1 		= 0.0f;
 8000f2e:	4a17      	ldr	r2, [pc, #92]	@ (8000f8c <LPF_gyro_filter_init+0x108>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	212c      	movs	r1, #44	@ 0x2c
 8000f34:	fb01 f303 	mul.w	r3, r1, r3
 8000f38:	4413      	add	r3, r2
 8000f3a:	3310      	adds	r3, #16
 8000f3c:	f04f 0200 	mov.w	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].t_n 		= 0.0f;
 8000f42:	4a12      	ldr	r2, [pc, #72]	@ (8000f8c <LPF_gyro_filter_init+0x108>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	212c      	movs	r1, #44	@ 0x2c
 8000f48:	fb01 f303 	mul.w	r3, r1, r3
 8000f4c:	4413      	add	r3, r2
 8000f4e:	3320      	adds	r3, #32
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].t_nm1 		= 0.0f;
 8000f56:	4a0d      	ldr	r2, [pc, #52]	@ (8000f8c <LPF_gyro_filter_init+0x108>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	212c      	movs	r1, #44	@ 0x2c
 8000f5c:	fb01 f303 	mul.w	r3, r1, r3
 8000f60:	4413      	add	r3, r2
 8000f62:	3324      	adds	r3, #36	@ 0x24
 8000f64:	f04f 0200 	mov.w	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
	for(int idx = 0;idx < 3; idx++)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	dd95      	ble.n	8000ea2 <LPF_gyro_filter_init+0x1e>

	}

}
 8000f76:	bf00      	nop
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	24000364 	.word	0x24000364
 8000f88:	42480000 	.word	0x42480000
 8000f8c:	240002e0 	.word	0x240002e0
 8000f90:	3ba3d70a 	.word	0x3ba3d70a

08000f94 <refresh_actual_rates>:

void refresh_actual_rates(void)
{
 8000f94:	b5b0      	push	{r4, r5, r7, lr}
 8000f96:	b08e      	sub	sp, #56	@ 0x38
 8000f98:	af00      	add	r7, sp, #0
	//
	imu_gyr[0] 		= IMU.GYR.x ;
 8000f9a:	4b26      	ldr	r3, [pc, #152]	@ (8001034 <refresh_actual_rates+0xa0>)
 8000f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f9e:	4a26      	ldr	r2, [pc, #152]	@ (8001038 <refresh_actual_rates+0xa4>)
 8000fa0:	6013      	str	r3, [r2, #0]
	imu_gyr[1] 		= IMU.GYR.y ;
 8000fa2:	4b24      	ldr	r3, [pc, #144]	@ (8001034 <refresh_actual_rates+0xa0>)
 8000fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fa6:	4a24      	ldr	r2, [pc, #144]	@ (8001038 <refresh_actual_rates+0xa4>)
 8000fa8:	6053      	str	r3, [r2, #4]
	imu_gyr[2] 		= IMU.GYR.z ;
 8000faa:	4b22      	ldr	r3, [pc, #136]	@ (8001034 <refresh_actual_rates+0xa0>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	4a22      	ldr	r2, [pc, #136]	@ (8001038 <refresh_actual_rates+0xa4>)
 8000fb0:	6093      	str	r3, [r2, #8]

	//
	for(int idx = 0; idx < 3; idx++)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8000fb6:	e02a      	b.n	800100e <refresh_actual_rates+0x7a>
	{
		//
		gyros_fltrs[idx].U_n = imu_gyr[idx];
 8000fb8:	4a1f      	ldr	r2, [pc, #124]	@ (8001038 <refresh_actual_rates+0xa4>)
 8000fba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4413      	add	r3, r2
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	491e      	ldr	r1, [pc, #120]	@ (800103c <refresh_actual_rates+0xa8>)
 8000fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fc6:	202c      	movs	r0, #44	@ 0x2c
 8000fc8:	fb00 f303 	mul.w	r3, r0, r3
 8000fcc:	440b      	add	r3, r1
 8000fce:	330c      	adds	r3, #12
 8000fd0:	601a      	str	r2, [r3, #0]

		gyros_fltrs[idx] = filtering_lpf(&gyros_fltrs[idx]);
 8000fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fd4:	222c      	movs	r2, #44	@ 0x2c
 8000fd6:	fb02 f303 	mul.w	r3, r2, r3
 8000fda:	4a18      	ldr	r2, [pc, #96]	@ (800103c <refresh_actual_rates+0xa8>)
 8000fdc:	441a      	add	r2, r3
 8000fde:	4917      	ldr	r1, [pc, #92]	@ (800103c <refresh_actual_rates+0xa8>)
 8000fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fe2:	202c      	movs	r0, #44	@ 0x2c
 8000fe4:	fb00 f303 	mul.w	r3, r0, r3
 8000fe8:	18cc      	adds	r4, r1, r3
 8000fea:	463b      	mov	r3, r7
 8000fec:	4611      	mov	r1, r2
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f936 	bl	8001260 <filtering_lpf>
 8000ff4:	4625      	mov	r5, r4
 8000ff6:	463c      	mov	r4, r7
 8000ff8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ffa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ffc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ffe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001000:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001004:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	for(int idx = 0; idx < 3; idx++)
 8001008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800100a:	3301      	adds	r3, #1
 800100c:	637b      	str	r3, [r7, #52]	@ 0x34
 800100e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001010:	2b02      	cmp	r3, #2
 8001012:	ddd1      	ble.n	8000fb8 <refresh_actual_rates+0x24>
	}

	actual_rates.roll  = gyros_fltrs[0].Y_n ;
 8001014:	4b09      	ldr	r3, [pc, #36]	@ (800103c <refresh_actual_rates+0xa8>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a09      	ldr	r2, [pc, #36]	@ (8001040 <refresh_actual_rates+0xac>)
 800101a:	6013      	str	r3, [r2, #0]
	actual_rates.pitch = gyros_fltrs[1].Y_n ;
 800101c:	4b07      	ldr	r3, [pc, #28]	@ (800103c <refresh_actual_rates+0xa8>)
 800101e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001020:	4a07      	ldr	r2, [pc, #28]	@ (8001040 <refresh_actual_rates+0xac>)
 8001022:	6053      	str	r3, [r2, #4]
	actual_rates.yaw   = gyros_fltrs[2].Y_n ;
 8001024:	4b05      	ldr	r3, [pc, #20]	@ (800103c <refresh_actual_rates+0xa8>)
 8001026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001028:	4a05      	ldr	r2, [pc, #20]	@ (8001040 <refresh_actual_rates+0xac>)
 800102a:	6093      	str	r3, [r2, #8]
}
 800102c:	bf00      	nop
 800102e:	3738      	adds	r7, #56	@ 0x38
 8001030:	46bd      	mov	sp, r7
 8001032:	bdb0      	pop	{r4, r5, r7, pc}
 8001034:	24001550 	.word	0x24001550
 8001038:	24000370 	.word	0x24000370
 800103c:	240002e0 	.word	0x240002e0
 8001040:	2400037c 	.word	0x2400037c

08001044 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800104a:	4b15      	ldr	r3, [pc, #84]	@ (80010a0 <MX_DMA_Init+0x5c>)
 800104c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001050:	4a13      	ldr	r2, [pc, #76]	@ (80010a0 <MX_DMA_Init+0x5c>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 800105a:	4b11      	ldr	r3, [pc, #68]	@ (80010a0 <MX_DMA_Init+0x5c>)
 800105c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	2105      	movs	r1, #5
 800106c:	200b      	movs	r0, #11
 800106e:	f004 fdff 	bl	8005c70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001072:	200b      	movs	r0, #11
 8001074:	f004 fe16 	bl	8005ca4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001078:	2200      	movs	r2, #0
 800107a:	2105      	movs	r1, #5
 800107c:	200c      	movs	r0, #12
 800107e:	f004 fdf7 	bl	8005c70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001082:	200c      	movs	r0, #12
 8001084:	f004 fe0e 	bl	8005ca4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001088:	2200      	movs	r2, #0
 800108a:	2105      	movs	r1, #5
 800108c:	200d      	movs	r0, #13
 800108e:	f004 fdef 	bl	8005c70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001092:	200d      	movs	r0, #13
 8001094:	f004 fe06 	bl	8005ca4 <HAL_NVIC_EnableIRQ>

}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	58024400 	.word	0x58024400

080010a4 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80010a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001164 <MX_FDCAN1_Init+0xc0>)
 80010aa:	4a2f      	ldr	r2, [pc, #188]	@ (8001168 <MX_FDCAN1_Init+0xc4>)
 80010ac:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80010ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001164 <MX_FDCAN1_Init+0xc0>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80010b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001164 <MX_FDCAN1_Init+0xc0>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80010ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001164 <MX_FDCAN1_Init+0xc0>)
 80010bc:	2200      	movs	r2, #0
 80010be:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80010c0:	4b28      	ldr	r3, [pc, #160]	@ (8001164 <MX_FDCAN1_Init+0xc0>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80010c6:	4b27      	ldr	r3, [pc, #156]	@ (8001164 <MX_FDCAN1_Init+0xc0>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80010cc:	4b25      	ldr	r3, [pc, #148]	@ (8001164 <MX_FDCAN1_Init+0xc0>)
 80010ce:	2210      	movs	r2, #16
 80010d0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80010d2:	4b24      	ldr	r3, [pc, #144]	@ (8001164 <MX_FDCAN1_Init+0xc0>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80010d8:	4b22      	ldr	r3, [pc, #136]	@ (8001164 <MX_FDCAN1_Init+0xc0>)
 80010da:	2202      	movs	r2, #2
 80010dc:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80010de:	4b21      	ldr	r3, [pc, #132]	@ (8001164 <MX_FDCAN1_Init+0xc0>)
 80010e0:	2202      	movs	r2, #2
 80010e2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80010e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001164 <MX_FDCAN1_Init+0xc0>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80010ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001164 <MX_FDCAN1_Init+0xc0>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80010f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001164 <MX_FDCAN1_Init+0xc0>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80010f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001164 <MX_FDCAN1_Init+0xc0>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80010fc:	4b19      	ldr	r3, [pc, #100]	@ (8001164 <MX_FDCAN1_Init+0xc0>)
 80010fe:	2200      	movs	r2, #0
 8001100:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001102:	4b18      	ldr	r3, [pc, #96]	@ (8001164 <MX_FDCAN1_Init+0xc0>)
 8001104:	2200      	movs	r2, #0
 8001106:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001108:	4b16      	ldr	r3, [pc, #88]	@ (8001164 <MX_FDCAN1_Init+0xc0>)
 800110a:	2200      	movs	r2, #0
 800110c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800110e:	4b15      	ldr	r3, [pc, #84]	@ (8001164 <MX_FDCAN1_Init+0xc0>)
 8001110:	2200      	movs	r2, #0
 8001112:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001114:	4b13      	ldr	r3, [pc, #76]	@ (8001164 <MX_FDCAN1_Init+0xc0>)
 8001116:	2204      	movs	r2, #4
 8001118:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800111a:	4b12      	ldr	r3, [pc, #72]	@ (8001164 <MX_FDCAN1_Init+0xc0>)
 800111c:	2200      	movs	r2, #0
 800111e:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001120:	4b10      	ldr	r3, [pc, #64]	@ (8001164 <MX_FDCAN1_Init+0xc0>)
 8001122:	2204      	movs	r2, #4
 8001124:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001126:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <MX_FDCAN1_Init+0xc0>)
 8001128:	2200      	movs	r2, #0
 800112a:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800112c:	4b0d      	ldr	r3, [pc, #52]	@ (8001164 <MX_FDCAN1_Init+0xc0>)
 800112e:	2204      	movs	r2, #4
 8001130:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001132:	4b0c      	ldr	r3, [pc, #48]	@ (8001164 <MX_FDCAN1_Init+0xc0>)
 8001134:	2200      	movs	r2, #0
 8001136:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001138:	4b0a      	ldr	r3, [pc, #40]	@ (8001164 <MX_FDCAN1_Init+0xc0>)
 800113a:	2200      	movs	r2, #0
 800113c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 800113e:	4b09      	ldr	r3, [pc, #36]	@ (8001164 <MX_FDCAN1_Init+0xc0>)
 8001140:	2200      	movs	r2, #0
 8001142:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001144:	4b07      	ldr	r3, [pc, #28]	@ (8001164 <MX_FDCAN1_Init+0xc0>)
 8001146:	2200      	movs	r2, #0
 8001148:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800114a:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <MX_FDCAN1_Init+0xc0>)
 800114c:	2204      	movs	r2, #4
 800114e:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001150:	4804      	ldr	r0, [pc, #16]	@ (8001164 <MX_FDCAN1_Init+0xc0>)
 8001152:	f007 fd17 	bl	8008b84 <HAL_FDCAN_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 800115c:	f001 f934 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	24000388 	.word	0x24000388
 8001168:	4000a000 	.word	0x4000a000

0800116c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b0ba      	sub	sp, #232	@ 0xe8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	22c0      	movs	r2, #192	@ 0xc0
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f015 fe82 	bl	8016e96 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a2f      	ldr	r2, [pc, #188]	@ (8001254 <HAL_FDCAN_MspInit+0xe8>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d157      	bne.n	800124c <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800119c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80011a0:	f04f 0300 	mov.w	r3, #0
 80011a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80011a8:	2304      	movs	r3, #4
 80011aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 80011ac:	2308      	movs	r3, #8
 80011ae:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80011b0:	2302      	movs	r3, #2
 80011b2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 80011b4:	2301      	movs	r3, #1
 80011b6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80011b8:	2302      	movs	r3, #2
 80011ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80011bc:	23c0      	movs	r3, #192	@ 0xc0
 80011be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 80011c8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80011cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	4618      	mov	r0, r3
 80011d6:	f009 fb71 	bl	800a8bc <HAL_RCCEx_PeriphCLKConfig>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 80011e0:	f001 f8f2 	bl	80023c8 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80011e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001258 <HAL_FDCAN_MspInit+0xec>)
 80011e6:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80011ea:	4a1b      	ldr	r2, [pc, #108]	@ (8001258 <HAL_FDCAN_MspInit+0xec>)
 80011ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011f0:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 80011f4:	4b18      	ldr	r3, [pc, #96]	@ (8001258 <HAL_FDCAN_MspInit+0xec>)
 80011f6:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80011fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <HAL_FDCAN_MspInit+0xec>)
 8001204:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001208:	4a13      	ldr	r2, [pc, #76]	@ (8001258 <HAL_FDCAN_MspInit+0xec>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001212:	4b11      	ldr	r3, [pc, #68]	@ (8001258 <HAL_FDCAN_MspInit+0xec>)
 8001214:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001220:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001224:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001228:	2302      	movs	r3, #2
 800122a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	2300      	movs	r3, #0
 8001236:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800123a:	2309      	movs	r3, #9
 800123c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001240:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001244:	4619      	mov	r1, r3
 8001246:	4805      	ldr	r0, [pc, #20]	@ (800125c <HAL_FDCAN_MspInit+0xf0>)
 8001248:	f008 f800 	bl	800924c <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 800124c:	bf00      	nop
 800124e:	37e8      	adds	r7, #232	@ 0xe8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	4000a000 	.word	0x4000a000
 8001258:	58024400 	.word	0x58024400
 800125c:	58020000 	.word	0x58020000

08001260 <filtering_lpf>:
/* Includes ------------------------------------------------------------------*/
#include "filter.h"
#include <math.h>

LPF_s filtering_lpf(LPF_s *filtro)
{
 8001260:	b4b0      	push	{r4, r5, r7}
 8001262:	b097      	sub	sp, #92	@ 0x5c
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
     *   f_cutoff -> frecuencia de corte
     *   u -> Señal de entrada
     *   y -> Señal de salida
     *   */

    LPF_s resultado = *filtro;
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	f107 040c 	add.w	r4, r7, #12
 8001270:	461d      	mov	r5, r3
 8001272:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001274:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001276:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001278:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800127a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800127e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    static float y_n;

    // Validación básica de parámetros
    if(filtro->f_cutoff <= 0.0f || filtro->t_sample <= 0.0f) {
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	edd3 7a06 	vldr	s15, [r3, #24]
 8001288:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001290:	d907      	bls.n	80012a2 <filtering_lpf+0x42>
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	edd3 7a07 	vldr	s15, [r3, #28]
 8001298:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800129c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a0:	d80c      	bhi.n	80012bc <filtering_lpf+0x5c>
        return resultado;  // O manejar error adecuadamente
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	461d      	mov	r5, r3
 80012a6:	f107 040c 	add.w	r4, r7, #12
 80012aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012b2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80012b6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80012ba:	e0c6      	b.n	800144a <filtering_lpf+0x1ea>
    }

    const float w_0 = filtro->f_cutoff * 6.283185307179586f; // 2*PI
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	edd3 7a06 	vldr	s15, [r3, #24]
 80012c2:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8001454 <filtering_lpf+0x1f4>
 80012c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ca:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    if(filtro->inicio) {
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d016      	beq.n	8001304 <filtering_lpf+0xa4>
        y_n = resultado.Y_n = resultado.Y_nm1 = filtro->Y_0;
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4a5d      	ldr	r2, [pc, #372]	@ (8001458 <filtering_lpf+0x1f8>)
 80012e4:	6013      	str	r3, [r2, #0]
        resultado.inicio = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	637b      	str	r3, [r7, #52]	@ 0x34
        return resultado;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	461d      	mov	r5, r3
 80012ee:	f107 040c 	add.w	r4, r7, #12
 80012f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012fa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80012fe:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001302:	e0a2      	b.n	800144a <filtering_lpf+0x1ea>
    }

    const float u_n = filtro->U_n;
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	653b      	str	r3, [r7, #80]	@ 0x50
    const float h = filtro->t_sample;
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    const float h2 = h * 0.5f;
 8001310:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001314:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001318:	ee67 7a87 	vmul.f32	s15, s15, s14
 800131c:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    // Runge-Kutta 4to orden
    const float k1 = w_0 * (u_n - y_n);
 8001320:	4b4d      	ldr	r3, [pc, #308]	@ (8001458 <filtering_lpf+0x1f8>)
 8001322:	edd3 7a00 	vldr	s15, [r3]
 8001326:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800132a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800132e:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001336:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    const float k2 = w_0 * (u_n - (y_n + k1 * h2));
 800133a:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800133e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001342:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001346:	4b44      	ldr	r3, [pc, #272]	@ (8001458 <filtering_lpf+0x1f8>)
 8001348:	edd3 7a00 	vldr	s15, [r3]
 800134c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001350:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001354:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001358:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800135c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001360:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    const float k3 = w_0 * (u_n - (y_n + k2 * h2));
 8001364:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001368:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800136c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001370:	4b39      	ldr	r3, [pc, #228]	@ (8001458 <filtering_lpf+0x1f8>)
 8001372:	edd3 7a00 	vldr	s15, [r3]
 8001376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800137a:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800137e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001382:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800138a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    const float k4 = w_0 * (u_n - (y_n + k3 * h));
 800138e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001392:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001396:	ee27 7a27 	vmul.f32	s14, s14, s15
 800139a:	4b2f      	ldr	r3, [pc, #188]	@ (8001458 <filtering_lpf+0x1f8>)
 800139c:	edd3 7a00 	vldr	s15, [r3]
 80013a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a4:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80013a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ac:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80013b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b4:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    y_n += h * (0.166666667f * k1 + 0.333333333f * (k2 + k3) + 0.166666667f * k4);
 80013b8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80013bc:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800145c <filtering_lpf+0x1fc>
 80013c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013c4:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 80013c8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80013cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80013d0:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8001460 <filtering_lpf+0x200>
 80013d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80013d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013dc:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80013e0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800145c <filtering_lpf+0x1fc>
 80013e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80013e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013ec:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80013f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013f4:	4b18      	ldr	r3, [pc, #96]	@ (8001458 <filtering_lpf+0x1f8>)
 80013f6:	edd3 7a00 	vldr	s15, [r3]
 80013fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013fe:	4b16      	ldr	r3, [pc, #88]	@ (8001458 <filtering_lpf+0x1f8>)
 8001400:	edc3 7a00 	vstr	s15, [r3]

    // Manejo robusto de NaN (protección contra condiciones inválidas)
    y_n = isnan(y_n) ? resultado.Y_nm1 : y_n;
 8001404:	4b14      	ldr	r3, [pc, #80]	@ (8001458 <filtering_lpf+0x1f8>)
 8001406:	edd3 7a00 	vldr	s15, [r3]
 800140a:	eef4 7a67 	vcmp.f32	s15, s15
 800140e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001412:	d701      	bvc.n	8001418 <filtering_lpf+0x1b8>
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	e001      	b.n	800141c <filtering_lpf+0x1bc>
 8001418:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <filtering_lpf+0x1f8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a0e      	ldr	r2, [pc, #56]	@ (8001458 <filtering_lpf+0x1f8>)
 800141e:	6013      	str	r3, [r2, #0]

    // Actualizar estructura de resultado
    resultado.Y_n = resultado.Y_nm1 = y_n;
 8001420:	4b0d      	ldr	r3, [pc, #52]	@ (8001458 <filtering_lpf+0x1f8>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	60fb      	str	r3, [r7, #12]
    resultado.U_nm1 = u_n;
 800142a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800142c:	61fb      	str	r3, [r7, #28]
    resultado.t_nm1 = resultado.t_n;
 800142e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001430:	633b      	str	r3, [r7, #48]	@ 0x30

    return resultado;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	461d      	mov	r5, r3
 8001436:	f107 040c 	add.w	r4, r7, #12
 800143a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800143c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800143e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001440:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001442:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001446:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	375c      	adds	r7, #92	@ 0x5c
 800144e:	46bd      	mov	sp, r7
 8001450:	bcb0      	pop	{r4, r5, r7}
 8001452:	4770      	bx	lr
 8001454:	40c90fdb 	.word	0x40c90fdb
 8001458:	24000428 	.word	0x24000428
 800145c:	3e2aaaab 	.word	0x3e2aaaab
 8001460:	3eaaaaab 	.word	0x3eaaaaab

08001464 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4a07      	ldr	r2, [pc, #28]	@ (8001490 <vApplicationGetIdleTaskMemory+0x2c>)
 8001474:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	4a06      	ldr	r2, [pc, #24]	@ (8001494 <vApplicationGetIdleTaskMemory+0x30>)
 800147a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2280      	movs	r2, #128	@ 0x80
 8001480:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001482:	bf00      	nop
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	24000438 	.word	0x24000438
 8001494:	2400048c 	.word	0x2400048c

08001498 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001498:	b5b0      	push	{r4, r5, r7, lr}
 800149a:	b096      	sub	sp, #88	@ 0x58
 800149c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task_1ms */
  osThreadDef(Task_1ms, fTask_1ms, osPriorityNormal, 0, 128);
 800149e:	4b1d      	ldr	r3, [pc, #116]	@ (8001514 <MX_FREERTOS_Init+0x7c>)
 80014a0:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80014a4:	461d      	mov	r5, r3
 80014a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_1msHandle = osThreadCreate(osThread(Task_1ms), NULL);
 80014b2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f012 fb7d 	bl	8013bb8 <osThreadCreate>
 80014be:	4603      	mov	r3, r0
 80014c0:	4a15      	ldr	r2, [pc, #84]	@ (8001518 <MX_FREERTOS_Init+0x80>)
 80014c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_10ms */
  osThreadDef(Task_10ms, fTask_10ms, osPriorityNormal, 0, 128);
 80014c4:	4b15      	ldr	r3, [pc, #84]	@ (800151c <MX_FREERTOS_Init+0x84>)
 80014c6:	f107 0420 	add.w	r4, r7, #32
 80014ca:	461d      	mov	r5, r3
 80014cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_10msHandle = osThreadCreate(osThread(Task_10ms), NULL);
 80014d8:	f107 0320 	add.w	r3, r7, #32
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f012 fb6a 	bl	8013bb8 <osThreadCreate>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001520 <MX_FREERTOS_Init+0x88>)
 80014e8:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_100ms */
  osThreadDef(Task_100ms, fTask_100ms, osPriorityNormal, 0, 128);
 80014ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001524 <MX_FREERTOS_Init+0x8c>)
 80014ec:	1d3c      	adds	r4, r7, #4
 80014ee:	461d      	mov	r5, r3
 80014f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_100msHandle = osThreadCreate(osThread(Task_100ms), NULL);
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f012 fb59 	bl	8013bb8 <osThreadCreate>
 8001506:	4603      	mov	r3, r0
 8001508:	4a07      	ldr	r2, [pc, #28]	@ (8001528 <MX_FREERTOS_Init+0x90>)
 800150a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800150c:	bf00      	nop
 800150e:	3758      	adds	r7, #88	@ 0x58
 8001510:	46bd      	mov	sp, r7
 8001512:	bdb0      	pop	{r4, r5, r7, pc}
 8001514:	08018eec 	.word	0x08018eec
 8001518:	2400042c 	.word	0x2400042c
 800151c:	08018f14 	.word	0x08018f14
 8001520:	24000430 	.word	0x24000430
 8001524:	08018f3c 	.word	0x08018f3c
 8001528:	24000434 	.word	0x24000434

0800152c <fTask_1ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTask_1ms */
void fTask_1ms(void const * argument)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTask_1ms */
  /* Infinite loop */
	LPF_gyro_filter_init();
 8001534:	f7ff fca6 	bl	8000e84 <LPF_gyro_filter_init>
  for(;;)
  {
	TimeOn_Counter++;
 8001538:	4b07      	ldr	r3, [pc, #28]	@ (8001558 <fTask_1ms+0x2c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	3301      	adds	r3, #1
 800153e:	4a06      	ldr	r2, [pc, #24]	@ (8001558 <fTask_1ms+0x2c>)
 8001540:	6013      	str	r3, [r2, #0]
	LED_Tasks();
 8001542:	f003 fc2d 	bl	8004da0 <LED_Tasks>
	SBUS_IntegrityVerification();
 8001546:	f004 f8ed 	bl	8005724 <SBUS_IntegrityVerification>
	NMEA_process_task();
 800154a:	f000 fdb1 	bl	80020b0 <NMEA_process_task>
    osDelay(1);
 800154e:	2001      	movs	r0, #1
 8001550:	f012 fb7e 	bl	8013c50 <osDelay>
	TimeOn_Counter++;
 8001554:	bf00      	nop
 8001556:	e7ef      	b.n	8001538 <fTask_1ms+0xc>
 8001558:	24000dc4 	.word	0x24000dc4

0800155c <fTask_10ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTask_10ms */
void fTask_10ms(void const * argument)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTask_10ms */
  /* Infinite loop */
  for(;;)
  {
	BNO_Tasks();
 8001564:	f003 fb58 	bl	8004c18 <BNO_Tasks>
	BMP280_calculate();
 8001568:	f002 fda8 	bl	80040bc <BMP280_calculate>

	FlightTaskAttitude();
 800156c:	f7ff fb5e 	bl	8000c2c <FlightTaskAttitude>

	PWM_Assign();
 8001570:	f003 fcc8 	bl	8004f04 <PWM_Assign>
	SD_blackbox_write();
 8001574:	f004 f9b8 	bl	80058e8 <SD_blackbox_write>
    osDelay(10);
 8001578:	200a      	movs	r0, #10
 800157a:	f012 fb69 	bl	8013c50 <osDelay>
  {
 800157e:	bf00      	nop
 8001580:	e7f0      	b.n	8001564 <fTask_10ms+0x8>

08001582 <fTask_100ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTask_100ms */
void fTask_100ms(void const * argument)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b082      	sub	sp, #8
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTask_100ms */
  /* Infinite loop */
  for(;;)
  {
	LR03_StateMachine();
 800158a:	f003 fca3 	bl	8004ed4 <LR03_StateMachine>
    osDelay(100);
 800158e:	2064      	movs	r0, #100	@ 0x64
 8001590:	f012 fb5e 	bl	8013c50 <osDelay>
	LR03_StateMachine();
 8001594:	bf00      	nop
 8001596:	e7f8      	b.n	800158a <fTask_100ms+0x8>

08001598 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	@ 0x28
 800159c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
 80015ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ae:	4b4e      	ldr	r3, [pc, #312]	@ (80016e8 <MX_GPIO_Init+0x150>)
 80015b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80015b4:	4a4c      	ldr	r2, [pc, #304]	@ (80016e8 <MX_GPIO_Init+0x150>)
 80015b6:	f043 0304 	orr.w	r3, r3, #4
 80015ba:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80015be:	4b4a      	ldr	r3, [pc, #296]	@ (80016e8 <MX_GPIO_Init+0x150>)
 80015c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015cc:	4b46      	ldr	r3, [pc, #280]	@ (80016e8 <MX_GPIO_Init+0x150>)
 80015ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80015d2:	4a45      	ldr	r2, [pc, #276]	@ (80016e8 <MX_GPIO_Init+0x150>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80015dc:	4b42      	ldr	r3, [pc, #264]	@ (80016e8 <MX_GPIO_Init+0x150>)
 80015de:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ea:	4b3f      	ldr	r3, [pc, #252]	@ (80016e8 <MX_GPIO_Init+0x150>)
 80015ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80015f0:	4a3d      	ldr	r2, [pc, #244]	@ (80016e8 <MX_GPIO_Init+0x150>)
 80015f2:	f043 0302 	orr.w	r3, r3, #2
 80015f6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80015fa:	4b3b      	ldr	r3, [pc, #236]	@ (80016e8 <MX_GPIO_Init+0x150>)
 80015fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001608:	4b37      	ldr	r3, [pc, #220]	@ (80016e8 <MX_GPIO_Init+0x150>)
 800160a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800160e:	4a36      	ldr	r2, [pc, #216]	@ (80016e8 <MX_GPIO_Init+0x150>)
 8001610:	f043 0308 	orr.w	r3, r3, #8
 8001614:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001618:	4b33      	ldr	r3, [pc, #204]	@ (80016e8 <MX_GPIO_Init+0x150>)
 800161a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8001626:	2200      	movs	r2, #0
 8001628:	f242 010f 	movw	r1, #8207	@ 0x200f
 800162c:	482f      	ldr	r0, [pc, #188]	@ (80016ec <MX_GPIO_Init+0x154>)
 800162e:	f007 ffbd 	bl	80095ac <HAL_GPIO_WritePin>
                          |LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 8001632:	2200      	movs	r2, #0
 8001634:	2110      	movs	r1, #16
 8001636:	482e      	ldr	r0, [pc, #184]	@ (80016f0 <MX_GPIO_Init+0x158>)
 8001638:	f007 ffb8 	bl	80095ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU_BOOT_Pin|BME_NSS_Pin, GPIO_PIN_RESET);
 800163c:	2200      	movs	r2, #0
 800163e:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8001642:	482c      	ldr	r0, [pc, #176]	@ (80016f4 <MX_GPIO_Init+0x15c>)
 8001644:	f007 ffb2 	bl	80095ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, GPIO_PIN_RESET);
 8001648:	2200      	movs	r2, #0
 800164a:	2104      	movs	r1, #4
 800164c:	482a      	ldr	r0, [pc, #168]	@ (80016f8 <MX_GPIO_Init+0x160>)
 800164e:	f007 ffad 	bl	80095ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8001652:	f242 030f 	movw	r3, #8207	@ 0x200f
 8001656:	617b      	str	r3, [r7, #20]
                          |LED_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001658:	2301      	movs	r3, #1
 800165a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	2300      	movs	r3, #0
 8001662:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4619      	mov	r1, r3
 800166a:	4820      	ldr	r0, [pc, #128]	@ (80016ec <MX_GPIO_Init+0x154>)
 800166c:	f007 fdee 	bl	800924c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 8001670:	2310      	movs	r3, #16
 8001672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001674:	2301      	movs	r3, #1
 8001676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167c:	2300      	movs	r3, #0
 800167e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	4619      	mov	r1, r3
 8001686:	481a      	ldr	r0, [pc, #104]	@ (80016f0 <MX_GPIO_Init+0x158>)
 8001688:	f007 fde0 	bl	800924c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IMU_BOOT_Pin|BME_NSS_Pin;
 800168c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001692:	2301      	movs	r3, #1
 8001694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169a:	2300      	movs	r3, #0
 800169c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	4619      	mov	r1, r3
 80016a4:	4813      	ldr	r0, [pc, #76]	@ (80016f4 <MX_GPIO_Init+0x15c>)
 80016a6:	f007 fdd1 	bl	800924c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 80016aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	4619      	mov	r1, r3
 80016be:	480b      	ldr	r0, [pc, #44]	@ (80016ec <MX_GPIO_Init+0x154>)
 80016c0:	f007 fdc4 	bl	800924c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin;
 80016c4:	2304      	movs	r3, #4
 80016c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c8:	2301      	movs	r3, #1
 80016ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d0:	2300      	movs	r3, #0
 80016d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_RST_GPIO_Port, &GPIO_InitStruct);
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	4619      	mov	r1, r3
 80016da:	4807      	ldr	r0, [pc, #28]	@ (80016f8 <MX_GPIO_Init+0x160>)
 80016dc:	f007 fdb6 	bl	800924c <HAL_GPIO_Init>

}
 80016e0:	bf00      	nop
 80016e2:	3728      	adds	r7, #40	@ 0x28
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	58024400 	.word	0x58024400
 80016ec:	58020800 	.word	0x58020800
 80016f0:	58020000 	.word	0x58020000
 80016f4:	58020400 	.word	0x58020400
 80016f8:	58020c00 	.word	0x58020c00

080016fc <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001700:	4b1b      	ldr	r3, [pc, #108]	@ (8001770 <MX_I2C3_Init+0x74>)
 8001702:	4a1c      	ldr	r2, [pc, #112]	@ (8001774 <MX_I2C3_Init+0x78>)
 8001704:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B0CCFF;
 8001706:	4b1a      	ldr	r3, [pc, #104]	@ (8001770 <MX_I2C3_Init+0x74>)
 8001708:	4a1b      	ldr	r2, [pc, #108]	@ (8001778 <MX_I2C3_Init+0x7c>)
 800170a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800170c:	4b18      	ldr	r3, [pc, #96]	@ (8001770 <MX_I2C3_Init+0x74>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001712:	4b17      	ldr	r3, [pc, #92]	@ (8001770 <MX_I2C3_Init+0x74>)
 8001714:	2201      	movs	r2, #1
 8001716:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001718:	4b15      	ldr	r3, [pc, #84]	@ (8001770 <MX_I2C3_Init+0x74>)
 800171a:	2200      	movs	r2, #0
 800171c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800171e:	4b14      	ldr	r3, [pc, #80]	@ (8001770 <MX_I2C3_Init+0x74>)
 8001720:	2200      	movs	r2, #0
 8001722:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001724:	4b12      	ldr	r3, [pc, #72]	@ (8001770 <MX_I2C3_Init+0x74>)
 8001726:	2200      	movs	r2, #0
 8001728:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800172a:	4b11      	ldr	r3, [pc, #68]	@ (8001770 <MX_I2C3_Init+0x74>)
 800172c:	2200      	movs	r2, #0
 800172e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001730:	4b0f      	ldr	r3, [pc, #60]	@ (8001770 <MX_I2C3_Init+0x74>)
 8001732:	2200      	movs	r2, #0
 8001734:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001736:	480e      	ldr	r0, [pc, #56]	@ (8001770 <MX_I2C3_Init+0x74>)
 8001738:	f007 ff52 	bl	80095e0 <HAL_I2C_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001742:	f000 fe41 	bl	80023c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001746:	2100      	movs	r1, #0
 8001748:	4809      	ldr	r0, [pc, #36]	@ (8001770 <MX_I2C3_Init+0x74>)
 800174a:	f007 ffe5 	bl	8009718 <HAL_I2CEx_ConfigAnalogFilter>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001754:	f000 fe38 	bl	80023c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001758:	2100      	movs	r1, #0
 800175a:	4805      	ldr	r0, [pc, #20]	@ (8001770 <MX_I2C3_Init+0x74>)
 800175c:	f008 f827 	bl	80097ae <HAL_I2CEx_ConfigDigitalFilter>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001766:	f000 fe2f 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	2400068c 	.word	0x2400068c
 8001774:	40005c00 	.word	0x40005c00
 8001778:	20b0ccff 	.word	0x20b0ccff

0800177c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b0bc      	sub	sp, #240	@ 0xf0
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001794:	f107 0318 	add.w	r3, r7, #24
 8001798:	22c0      	movs	r2, #192	@ 0xc0
 800179a:	2100      	movs	r1, #0
 800179c:	4618      	mov	r0, r3
 800179e:	f015 fb7a 	bl	8016e96 <memset>
  if(i2cHandle->Instance==I2C3)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a39      	ldr	r2, [pc, #228]	@ (800188c <HAL_I2C_MspInit+0x110>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d16b      	bne.n	8001884 <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80017ac:	f04f 0208 	mov.w	r2, #8
 80017b0:	f04f 0300 	mov.w	r3, #0
 80017b4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80017b8:	2300      	movs	r3, #0
 80017ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017be:	f107 0318 	add.w	r3, r7, #24
 80017c2:	4618      	mov	r0, r3
 80017c4:	f009 f87a 	bl	800a8bc <HAL_RCCEx_PeriphCLKConfig>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80017ce:	f000 fdfb 	bl	80023c8 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001890 <HAL_I2C_MspInit+0x114>)
 80017d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80017d8:	4a2d      	ldr	r2, [pc, #180]	@ (8001890 <HAL_I2C_MspInit+0x114>)
 80017da:	f043 0304 	orr.w	r3, r3, #4
 80017de:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80017e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001890 <HAL_I2C_MspInit+0x114>)
 80017e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	617b      	str	r3, [r7, #20]
 80017ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f0:	4b27      	ldr	r3, [pc, #156]	@ (8001890 <HAL_I2C_MspInit+0x114>)
 80017f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80017f6:	4a26      	ldr	r2, [pc, #152]	@ (8001890 <HAL_I2C_MspInit+0x114>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001800:	4b23      	ldr	r3, [pc, #140]	@ (8001890 <HAL_I2C_MspInit+0x114>)
 8001802:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800180e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001812:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001816:	2312      	movs	r3, #18
 8001818:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2300      	movs	r3, #0
 8001824:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001828:	2304      	movs	r3, #4
 800182a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800182e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001832:	4619      	mov	r1, r3
 8001834:	4817      	ldr	r0, [pc, #92]	@ (8001894 <HAL_I2C_MspInit+0x118>)
 8001836:	f007 fd09 	bl	800924c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800183a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800183e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001842:	2312      	movs	r3, #18
 8001844:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	2300      	movs	r3, #0
 8001850:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001854:	2304      	movs	r3, #4
 8001856:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800185e:	4619      	mov	r1, r3
 8001860:	480d      	ldr	r0, [pc, #52]	@ (8001898 <HAL_I2C_MspInit+0x11c>)
 8001862:	f007 fcf3 	bl	800924c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001866:	4b0a      	ldr	r3, [pc, #40]	@ (8001890 <HAL_I2C_MspInit+0x114>)
 8001868:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800186c:	4a08      	ldr	r2, [pc, #32]	@ (8001890 <HAL_I2C_MspInit+0x114>)
 800186e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001872:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001876:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <HAL_I2C_MspInit+0x114>)
 8001878:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800187c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001884:	bf00      	nop
 8001886:	37f0      	adds	r7, #240	@ 0xf0
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40005c00 	.word	0x40005c00
 8001890:	58024400 	.word	0x58024400
 8001894:	58020800 	.word	0x58020800
 8001898:	58020000 	.word	0x58020000

0800189c <default_CB>:
static float speed_fall_barrier;	/**< Barrier of decreasing speed*/
/**
 * default_CB() is a default function for all the CB pointers which do nothing.\n
 * The unregistering CB pointer is setting to pointer of this function.  
 */
static void default_CB(void){}
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
	...

080018ac <NMEA_parser>:
 * NMEA_parser is function which parses single correct NMEA message.\n
 * Inside this function all known types of NMEA message are recognized and nmea_data structure fields are set.\n
 * There is also implemented mechanism of recognizing specified events and calling corresponding to them callbacks.
 * @param[in]	message	pointer to buffer storing NMEA message.
 */
static void 	NMEA_parser(char *message){
 80018ac:	b5b0      	push	{r4, r5, r7, lr}
 80018ae:	b0b2      	sub	sp, #200	@ 0xc8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]

	NMEA_data previous_data = nmea_data;
 80018b4:	4ba9      	ldr	r3, [pc, #676]	@ (8001b5c <NMEA_parser+0x2b0>)
 80018b6:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80018ba:	461d      	mov	r5, r3
 80018bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80018cc:	e884 0003 	stmia.w	r4, {r0, r1}

	int num = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	char *fields[32]={NULL};
 80018d6:	f107 030c 	add.w	r3, r7, #12
 80018da:	2280      	movs	r2, #128	@ 0x80
 80018dc:	2100      	movs	r1, #0
 80018de:	4618      	mov	r0, r3
 80018e0:	f015 fad9 	bl	8016e96 <memset>
	fields[num++]=message;
 80018e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	33c8      	adds	r3, #200	@ 0xc8
 80018f2:	443b      	add	r3, r7
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	f843 2cbc 	str.w	r2, [r3, #-188]
	while ((message = strchr(message, ','))) {
 80018fa:	e00f      	b.n	800191c <NMEA_parser+0x70>
		*message++ = 0;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	1c5a      	adds	r2, r3, #1
 8001900:	607a      	str	r2, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	701a      	strb	r2, [r3, #0]
		fields[num++]=message;
 8001906:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	33c8      	adds	r3, #200	@ 0xc8
 8001914:	443b      	add	r3, r7
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	f843 2cbc 	str.w	r2, [r3, #-188]
	while ((message = strchr(message, ','))) {
 800191c:	212c      	movs	r1, #44	@ 0x2c
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f015 fac1 	bl	8016ea6 <strchr>
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1e7      	bne.n	80018fc <NMEA_parser+0x50>
	}

	if(strcmp(fields[0],"$GPGLL")==0){
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	498c      	ldr	r1, [pc, #560]	@ (8001b60 <NMEA_parser+0x2b4>)
 8001930:	4618      	mov	r0, r3
 8001932:	f7fe fcdd 	bl	80002f0 <strcmp>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d11e      	bne.n	800197a <NMEA_parser+0xce>

		nmea_data.latitude = atof(fields[1]);
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4618      	mov	r0, r3
 8001940:	f014 fb5a 	bl	8015ff8 <atof>
 8001944:	eeb0 7b40 	vmov.f64	d7, d0
 8001948:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800194c:	4b83      	ldr	r3, [pc, #524]	@ (8001b5c <NMEA_parser+0x2b0>)
 800194e:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[2];
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	781a      	ldrb	r2, [r3, #0]
 8001956:	4b81      	ldr	r3, [pc, #516]	@ (8001b5c <NMEA_parser+0x2b0>)
 8001958:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[3]);
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	4618      	mov	r0, r3
 800195e:	f014 fb4b 	bl	8015ff8 <atof>
 8001962:	eeb0 7b40 	vmov.f64	d7, d0
 8001966:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800196a:	4b7c      	ldr	r3, [pc, #496]	@ (8001b5c <NMEA_parser+0x2b0>)
 800196c:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[4];
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	781a      	ldrb	r2, [r3, #0]
 8001974:	4b79      	ldr	r3, [pc, #484]	@ (8001b5c <NMEA_parser+0x2b0>)
 8001976:	751a      	strb	r2, [r3, #20]
 8001978:	e10d      	b.n	8001b96 <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPRMC")==0){
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4979      	ldr	r1, [pc, #484]	@ (8001b64 <NMEA_parser+0x2b8>)
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fcb6 	bl	80002f0 <strcmp>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d130      	bne.n	80019ec <NMEA_parser+0x140>

		nmea_data.UTC_time = atof(fields[1]);
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	4618      	mov	r0, r3
 800198e:	f014 fb33 	bl	8015ff8 <atof>
 8001992:	eeb0 7b40 	vmov.f64	d7, d0
 8001996:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800199a:	4b70      	ldr	r3, [pc, #448]	@ (8001b5c <NMEA_parser+0x2b0>)
 800199c:	edc3 7a00 	vstr	s15, [r3]
		nmea_data.UT_date = atoi(fields[9]);
 80019a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019a2:	4618      	mov	r0, r3
 80019a4:	f014 fb2b 	bl	8015ffe <atoi>
 80019a8:	4603      	mov	r3, r0
 80019aa:	4a6c      	ldr	r2, [pc, #432]	@ (8001b5c <NMEA_parser+0x2b0>)
 80019ac:	6053      	str	r3, [r2, #4]

		nmea_data.latitude = atof(fields[3]);
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f014 fb21 	bl	8015ff8 <atof>
 80019b6:	eeb0 7b40 	vmov.f64	d7, d0
 80019ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019be:	4b67      	ldr	r3, [pc, #412]	@ (8001b5c <NMEA_parser+0x2b0>)
 80019c0:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[4];
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	781a      	ldrb	r2, [r3, #0]
 80019c8:	4b64      	ldr	r3, [pc, #400]	@ (8001b5c <NMEA_parser+0x2b0>)
 80019ca:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[5]);
 80019cc:	6a3b      	ldr	r3, [r7, #32]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f014 fb12 	bl	8015ff8 <atof>
 80019d4:	eeb0 7b40 	vmov.f64	d7, d0
 80019d8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019dc:	4b5f      	ldr	r3, [pc, #380]	@ (8001b5c <NMEA_parser+0x2b0>)
 80019de:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[6];
 80019e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e4:	781a      	ldrb	r2, [r3, #0]
 80019e6:	4b5d      	ldr	r3, [pc, #372]	@ (8001b5c <NMEA_parser+0x2b0>)
 80019e8:	751a      	strb	r2, [r3, #20]
 80019ea:	e0d4      	b.n	8001b96 <NMEA_parser+0x2ea>


	}else if(strcmp(fields[0],"$GPVTG")==0){
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	495e      	ldr	r1, [pc, #376]	@ (8001b68 <NMEA_parser+0x2bc>)
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe fc7d 	bl	80002f0 <strcmp>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d116      	bne.n	8001a2a <NMEA_parser+0x17e>

		nmea_data.speed_knots =  atoi(fields[5]);
 80019fc:	6a3b      	ldr	r3, [r7, #32]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f014 fafd 	bl	8015ffe <atoi>
 8001a04:	ee07 0a90 	vmov	s15, r0
 8001a08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a0c:	4b53      	ldr	r3, [pc, #332]	@ (8001b5c <NMEA_parser+0x2b0>)
 8001a0e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		nmea_data.speed_kmph =  atoi(fields[7]);
 8001a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a14:	4618      	mov	r0, r3
 8001a16:	f014 faf2 	bl	8015ffe <atoi>
 8001a1a:	ee07 0a90 	vmov	s15, r0
 8001a1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a22:	4b4e      	ldr	r3, [pc, #312]	@ (8001b5c <NMEA_parser+0x2b0>)
 8001a24:	edc3 7a08 	vstr	s15, [r3, #32]
 8001a28:	e0b5      	b.n	8001b96 <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPGGA")==0){
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	494f      	ldr	r1, [pc, #316]	@ (8001b6c <NMEA_parser+0x2c0>)
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fc5e 	bl	80002f0 <strcmp>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d15c      	bne.n	8001af4 <NMEA_parser+0x248>

		nmea_data.UTC_time = atof(fields[1]);
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f014 fadb 	bl	8015ff8 <atof>
 8001a42:	eeb0 7b40 	vmov.f64	d7, d0
 8001a46:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a4a:	4b44      	ldr	r3, [pc, #272]	@ (8001b5c <NMEA_parser+0x2b0>)
 8001a4c:	edc3 7a00 	vstr	s15, [r3]

		nmea_data.latitude = atof(fields[2]);
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f014 fad0 	bl	8015ff8 <atof>
 8001a58:	eeb0 7b40 	vmov.f64	d7, d0
 8001a5c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a60:	4b3e      	ldr	r3, [pc, #248]	@ (8001b5c <NMEA_parser+0x2b0>)
 8001a62:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[3];
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	781a      	ldrb	r2, [r3, #0]
 8001a6a:	4b3c      	ldr	r3, [pc, #240]	@ (8001b5c <NMEA_parser+0x2b0>)
 8001a6c:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[4]);
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f014 fac1 	bl	8015ff8 <atof>
 8001a76:	eeb0 7b40 	vmov.f64	d7, d0
 8001a7a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a7e:	4b37      	ldr	r3, [pc, #220]	@ (8001b5c <NMEA_parser+0x2b0>)
 8001a80:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[5];
 8001a84:	6a3b      	ldr	r3, [r7, #32]
 8001a86:	781a      	ldrb	r2, [r3, #0]
 8001a88:	4b34      	ldr	r3, [pc, #208]	@ (8001b5c <NMEA_parser+0x2b0>)
 8001a8a:	751a      	strb	r2, [r3, #20]

		nmea_data.fix = atoi(fields[6]);
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f014 fab5 	bl	8015ffe <atoi>
 8001a94:	4603      	mov	r3, r0
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	4b30      	ldr	r3, [pc, #192]	@ (8001b5c <NMEA_parser+0x2b0>)
 8001a9a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		nmea_data.sat_in_use = atoi(fields[7]);
 8001a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f014 faac 	bl	8015ffe <atoi>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	4b2c      	ldr	r3, [pc, #176]	@ (8001b5c <NMEA_parser+0x2b0>)
 8001aac:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		nmea_data.HDOP = atof(fields[8]);
 8001ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f014 faa0 	bl	8015ff8 <atof>
 8001ab8:	eeb0 7b40 	vmov.f64	d7, d0
 8001abc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ac0:	4b26      	ldr	r3, [pc, #152]	@ (8001b5c <NMEA_parser+0x2b0>)
 8001ac2:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

		nmea_data.altitude = atof(fields[9]);
 8001ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f014 fa95 	bl	8015ff8 <atof>
 8001ace:	eeb0 7b40 	vmov.f64	d7, d0
 8001ad2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ad6:	4b21      	ldr	r3, [pc, #132]	@ (8001b5c <NMEA_parser+0x2b0>)
 8001ad8:	edc3 7a06 	vstr	s15, [r3, #24]
		nmea_data.geoidal_separation = atof(fields[11]);
 8001adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f014 fa8a 	bl	8015ff8 <atof>
 8001ae4:	eeb0 7b40 	vmov.f64	d7, d0
 8001ae8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001aec:	4b1b      	ldr	r3, [pc, #108]	@ (8001b5c <NMEA_parser+0x2b0>)
 8001aee:	edc3 7a07 	vstr	s15, [r3, #28]
 8001af2:	e050      	b.n	8001b96 <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPGSA")==0){
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	491e      	ldr	r1, [pc, #120]	@ (8001b70 <NMEA_parser+0x2c4>)
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fbf9 	bl	80002f0 <strcmp>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d137      	bne.n	8001b74 <NMEA_parser+0x2c8>

		nmea_data.fix_mode = atoi(fields[2]);
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f014 fa79 	bl	8015ffe <atoi>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	4b12      	ldr	r3, [pc, #72]	@ (8001b5c <NMEA_parser+0x2b0>)
 8001b12:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

		nmea_data.PDOP = atof(fields[15]);
 8001b16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f014 fa6d 	bl	8015ff8 <atof>
 8001b1e:	eeb0 7b40 	vmov.f64	d7, d0
 8001b22:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b26:	4b0d      	ldr	r3, [pc, #52]	@ (8001b5c <NMEA_parser+0x2b0>)
 8001b28:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		nmea_data.HDOP = atof(fields[16]);
 8001b2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f014 fa62 	bl	8015ff8 <atof>
 8001b34:	eeb0 7b40 	vmov.f64	d7, d0
 8001b38:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b3c:	4b07      	ldr	r3, [pc, #28]	@ (8001b5c <NMEA_parser+0x2b0>)
 8001b3e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		nmea_data.VDOP = atof(fields[17]);
 8001b42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b44:	4618      	mov	r0, r3
 8001b46:	f014 fa57 	bl	8015ff8 <atof>
 8001b4a:	eeb0 7b40 	vmov.f64	d7, d0
 8001b4e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b52:	4b02      	ldr	r3, [pc, #8]	@ (8001b5c <NMEA_parser+0x2b0>)
 8001b54:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
 8001b58:	e01d      	b.n	8001b96 <NMEA_parser+0x2ea>
 8001b5a:	bf00      	nop
 8001b5c:	24000d88 	.word	0x24000d88
 8001b60:	08018f58 	.word	0x08018f58
 8001b64:	08018f60 	.word	0x08018f60
 8001b68:	08018f68 	.word	0x08018f68
 8001b6c:	08018f70 	.word	0x08018f70
 8001b70:	08018f78 	.word	0x08018f78

	}else if(strcmp(fields[0],"$GPGSV")==0){
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4931      	ldr	r1, [pc, #196]	@ (8001c3c <NMEA_parser+0x390>)
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fbb9 	bl	80002f0 <strcmp>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d108      	bne.n	8001b96 <NMEA_parser+0x2ea>
		nmea_data.sat_in_view = atoi(fields[3]);
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f014 fa39 	bl	8015ffe <atoi>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	4b2b      	ldr	r3, [pc, #172]	@ (8001c40 <NMEA_parser+0x394>)
 8001b92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	}

	if (abs(nmea_data.speed_kmph - previous_data.speed_kmph) > speed_change_tolerance){
 8001b96:	4b2a      	ldr	r3, [pc, #168]	@ (8001c40 <NMEA_parser+0x394>)
 8001b98:	ed93 7a08 	vldr	s14, [r3, #32]
 8001b9c:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8001ba0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ba4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ba8:	ee17 3a90 	vmov	r3, s15
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	bfb8      	it	lt
 8001bb0:	425b      	neglt	r3, r3
 8001bb2:	ee07 3a90 	vmov	s15, r3
 8001bb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bba:	4b22      	ldr	r3, [pc, #136]	@ (8001c44 <NMEA_parser+0x398>)
 8001bbc:	edd3 7a00 	vldr	s15, [r3]
 8001bc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc8:	dd02      	ble.n	8001bd0 <NMEA_parser+0x324>
		speed_change_CB_fun_ptr();
 8001bca:	4b1f      	ldr	r3, [pc, #124]	@ (8001c48 <NMEA_parser+0x39c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4798      	blx	r3
	}

	if (nmea_data.speed_kmph > speed_raise_barrier && previous_data.speed_kmph <= speed_raise_barrier){
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c40 <NMEA_parser+0x394>)
 8001bd2:	ed93 7a08 	vldr	s14, [r3, #32]
 8001bd6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c4c <NMEA_parser+0x3a0>)
 8001bd8:	edd3 7a00 	vldr	s15, [r3]
 8001bdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be4:	dd0c      	ble.n	8001c00 <NMEA_parser+0x354>
 8001be6:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8001bea:	4b18      	ldr	r3, [pc, #96]	@ (8001c4c <NMEA_parser+0x3a0>)
 8001bec:	edd3 7a00 	vldr	s15, [r3]
 8001bf0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf8:	d802      	bhi.n	8001c00 <NMEA_parser+0x354>
		speed_raise_barrier_CB_fun_ptr();
 8001bfa:	4b15      	ldr	r3, [pc, #84]	@ (8001c50 <NMEA_parser+0x3a4>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4798      	blx	r3
	}

	if (nmea_data.speed_kmph < speed_raise_barrier && previous_data.speed_kmph >= speed_raise_barrier){
 8001c00:	4b0f      	ldr	r3, [pc, #60]	@ (8001c40 <NMEA_parser+0x394>)
 8001c02:	ed93 7a08 	vldr	s14, [r3, #32]
 8001c06:	4b11      	ldr	r3, [pc, #68]	@ (8001c4c <NMEA_parser+0x3a0>)
 8001c08:	edd3 7a00 	vldr	s15, [r3]
 8001c0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c14:	d400      	bmi.n	8001c18 <NMEA_parser+0x36c>
		speed_fall_barrier_CB_fun_ptr();
	}
}
 8001c16:	e00d      	b.n	8001c34 <NMEA_parser+0x388>
	if (nmea_data.speed_kmph < speed_raise_barrier && previous_data.speed_kmph >= speed_raise_barrier){
 8001c18:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c4c <NMEA_parser+0x3a0>)
 8001c1e:	edd3 7a00 	vldr	s15, [r3]
 8001c22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2a:	da00      	bge.n	8001c2e <NMEA_parser+0x382>
}
 8001c2c:	e002      	b.n	8001c34 <NMEA_parser+0x388>
		speed_fall_barrier_CB_fun_ptr();
 8001c2e:	4b09      	ldr	r3, [pc, #36]	@ (8001c54 <NMEA_parser+0x3a8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4798      	blx	r3
}
 8001c34:	bf00      	nop
 8001c36:	37c8      	adds	r7, #200	@ 0xc8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c3c:	08018f80 	.word	0x08018f80
 8001c40:	24000d88 	.word	0x24000d88
 8001c44:	24000d70 	.word	0x24000d70
 8001c48:	24000d6c 	.word	0x24000d6c
 8001c4c:	24000d78 	.word	0x24000d78
 8001c50:	24000d74 	.word	0x24000d74
 8001c54:	24000d7c 	.word	0x24000d7c

08001c58 <hx2int>:
 * hx2int is function which converts hex number written using characters to corresponding integer.
 * @param[in]	n2		is older position ix hex code
 * @param[in]	n1		is younger position ix hex code
 * @param[out]	uint8_t	is integer corresponding to input hex
 */
static uint8_t hx2int(uint8_t n2, uint8_t n1){
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	460a      	mov	r2, r1
 8001c62:	71fb      	strb	r3, [r7, #7]
 8001c64:	4613      	mov	r3, r2
 8001c66:	71bb      	strb	r3, [r7, #6]
	if (n2 <= '9') n2-='0';
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	2b39      	cmp	r3, #57	@ 0x39
 8001c6c:	d803      	bhi.n	8001c76 <hx2int+0x1e>
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	3b30      	subs	r3, #48	@ 0x30
 8001c72:	71fb      	strb	r3, [r7, #7]
 8001c74:	e002      	b.n	8001c7c <hx2int+0x24>
	else n2=n2-'A'+10;
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	3b37      	subs	r3, #55	@ 0x37
 8001c7a:	71fb      	strb	r3, [r7, #7]

	if (n1 <= '9') n1-='0';
 8001c7c:	79bb      	ldrb	r3, [r7, #6]
 8001c7e:	2b39      	cmp	r3, #57	@ 0x39
 8001c80:	d803      	bhi.n	8001c8a <hx2int+0x32>
 8001c82:	79bb      	ldrb	r3, [r7, #6]
 8001c84:	3b30      	subs	r3, #48	@ 0x30
 8001c86:	71bb      	strb	r3, [r7, #6]
 8001c88:	e002      	b.n	8001c90 <hx2int+0x38>
	else n1=n1-'A'+10;
 8001c8a:	79bb      	ldrb	r3, [r7, #6]
 8001c8c:	3b37      	subs	r3, #55	@ 0x37
 8001c8e:	71bb      	strb	r3, [r7, #6]

	return n2*16+n1;
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	79bb      	ldrb	r3, [r7, #6]
 8001c98:	4413      	add	r3, r2
 8001c9a:	b2db      	uxtb	r3, r3

}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <NMEA_checksum_clc>:
 * NMEA_checksum_clc is function which calculates checksum of the message and compares it to checksum value given in NMEA message.\n
 * To convert given checksum it uses hx2int function.
 * @param[in]	message	pointer to buffer storing NMEA message.
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_checksum_clc(uint8_t * message){
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
	uint8_t index = 1;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	73fb      	strb	r3, [r7, #15]
	uint8_t checksum_clc =0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	73bb      	strb	r3, [r7, #14]

	while (message[index]!='*' && index<NMEA_WORKING_BUFFER_SIZE-2){
 8001cb8:	e009      	b.n	8001cce <NMEA_checksum_clc+0x26>
		checksum_clc^=message[index++];
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
 8001cbc:	1c5a      	adds	r2, r3, #1
 8001cbe:	73fa      	strb	r2, [r7, #15]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	781a      	ldrb	r2, [r3, #0]
 8001cc8:	7bbb      	ldrb	r3, [r7, #14]
 8001cca:	4053      	eors	r3, r2
 8001ccc:	73bb      	strb	r3, [r7, #14]
	while (message[index]!='*' && index<NMEA_WORKING_BUFFER_SIZE-2){
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8001cd8:	d002      	beq.n	8001ce0 <NMEA_checksum_clc+0x38>
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	2b7d      	cmp	r3, #125	@ 0x7d
 8001cde:	d9ec      	bls.n	8001cba <NMEA_checksum_clc+0x12>
	}

	uint8_t checksum = hx2int(message[index+1],message[index+2]);
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	7818      	ldrb	r0, [r3, #0]
 8001cea:	7bfb      	ldrb	r3, [r7, #15]
 8001cec:	3302      	adds	r3, #2
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f7ff ffaf 	bl	8001c58 <hx2int>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	737b      	strb	r3, [r7, #13]
	if (checksum!=checksum_clc){
 8001cfe:	7b7a      	ldrb	r2, [r7, #13]
 8001d00:	7bbb      	ldrb	r3, [r7, #14]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d001      	beq.n	8001d0a <NMEA_checksum_clc+0x62>
		return NMEA_CHECKSUM_ERROR;
 8001d06:	2302      	movs	r3, #2
 8001d08:	e000      	b.n	8001d0c <NMEA_checksum_clc+0x64>
	}
	return NMEA_OK;
 8001d0a:	2300      	movs	r3, #0


}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <NMEA_read_line>:

/**
 * NMEA_read_line is function which reads one NMEA message line from NMEA_UART_buffer circular buffer to NMEA_working_buffer.
 */
static void NMEA_read_line(void){
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
	int index = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	607b      	str	r3, [r7, #4]
	while (index < NMEA_WORKING_BUFFER_SIZE) NMEA_working_buffer[index++]=0;	// Clean up working buffer.
 8001d1e:	e005      	b.n	8001d2c <NMEA_read_line+0x18>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	1c5a      	adds	r2, r3, #1
 8001d24:	607a      	str	r2, [r7, #4]
 8001d26:	4a2b      	ldr	r2, [pc, #172]	@ (8001dd4 <NMEA_read_line+0xc0>)
 8001d28:	2100      	movs	r1, #0
 8001d2a:	54d1      	strb	r1, [r2, r3]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d30:	ddf6      	ble.n	8001d20 <NMEA_read_line+0xc>

	index = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	607b      	str	r3, [r7, #4]
	while(NMEA_UART_buffer[UART_buffer_tail]!= '\n' && index < NMEA_WORKING_BUFFER_SIZE-2){
 8001d36:	e01c      	b.n	8001d72 <NMEA_read_line+0x5e>
		NMEA_working_buffer[index]=NMEA_UART_buffer[UART_buffer_tail];
 8001d38:	4b27      	ldr	r3, [pc, #156]	@ (8001dd8 <NMEA_read_line+0xc4>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a27      	ldr	r2, [pc, #156]	@ (8001ddc <NMEA_read_line+0xc8>)
 8001d3e:	5cd1      	ldrb	r1, [r2, r3]
 8001d40:	4a24      	ldr	r2, [pc, #144]	@ (8001dd4 <NMEA_read_line+0xc0>)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	460a      	mov	r2, r1
 8001d48:	701a      	strb	r2, [r3, #0]
		NMEA_UART_buffer[UART_buffer_tail] = 0;
 8001d4a:	4b23      	ldr	r3, [pc, #140]	@ (8001dd8 <NMEA_read_line+0xc4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a23      	ldr	r2, [pc, #140]	@ (8001ddc <NMEA_read_line+0xc8>)
 8001d50:	2100      	movs	r1, #0
 8001d52:	54d1      	strb	r1, [r2, r3]
		UART_buffer_tail = (UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8001d54:	4b20      	ldr	r3, [pc, #128]	@ (8001dd8 <NMEA_read_line+0xc4>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	425a      	negs	r2, r3
 8001d5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d60:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001d64:	bf58      	it	pl
 8001d66:	4253      	negpl	r3, r2
 8001d68:	4a1b      	ldr	r2, [pc, #108]	@ (8001dd8 <NMEA_read_line+0xc4>)
 8001d6a:	6013      	str	r3, [r2, #0]
		++index;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	607b      	str	r3, [r7, #4]
	while(NMEA_UART_buffer[UART_buffer_tail]!= '\n' && index < NMEA_WORKING_BUFFER_SIZE-2){
 8001d72:	4b19      	ldr	r3, [pc, #100]	@ (8001dd8 <NMEA_read_line+0xc4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a19      	ldr	r2, [pc, #100]	@ (8001ddc <NMEA_read_line+0xc8>)
 8001d78:	5cd3      	ldrb	r3, [r2, r3]
 8001d7a:	2b0a      	cmp	r3, #10
 8001d7c:	d002      	beq.n	8001d84 <NMEA_read_line+0x70>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b7d      	cmp	r3, #125	@ 0x7d
 8001d82:	ddd9      	ble.n	8001d38 <NMEA_read_line+0x24>
	}
	NMEA_working_buffer[index]=NMEA_UART_buffer[UART_buffer_tail];
 8001d84:	4b14      	ldr	r3, [pc, #80]	@ (8001dd8 <NMEA_read_line+0xc4>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a14      	ldr	r2, [pc, #80]	@ (8001ddc <NMEA_read_line+0xc8>)
 8001d8a:	5cd1      	ldrb	r1, [r2, r3]
 8001d8c:	4a11      	ldr	r2, [pc, #68]	@ (8001dd4 <NMEA_read_line+0xc0>)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	460a      	mov	r2, r1
 8001d94:	701a      	strb	r2, [r3, #0]
	NMEA_UART_buffer[UART_buffer_tail] = 0;
 8001d96:	4b10      	ldr	r3, [pc, #64]	@ (8001dd8 <NMEA_read_line+0xc4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a10      	ldr	r2, [pc, #64]	@ (8001ddc <NMEA_read_line+0xc8>)
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	54d1      	strb	r1, [r2, r3]
	UART_buffer_tail = (UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8001da0:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd8 <NMEA_read_line+0xc4>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	3301      	adds	r3, #1
 8001da6:	425a      	negs	r2, r3
 8001da8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dac:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001db0:	bf58      	it	pl
 8001db2:	4253      	negpl	r3, r2
 8001db4:	4a08      	ldr	r2, [pc, #32]	@ (8001dd8 <NMEA_read_line+0xc4>)
 8001db6:	6013      	str	r3, [r2, #0]
	++index;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	607b      	str	r3, [r7, #4]
	--UART_buffer_lines;
 8001dbe:	4b08      	ldr	r3, [pc, #32]	@ (8001de0 <NMEA_read_line+0xcc>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	4a06      	ldr	r2, [pc, #24]	@ (8001de0 <NMEA_read_line+0xcc>)
 8001dc6:	6013      	str	r3, [r2, #0]

}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	24000ce0 	.word	0x24000ce0
 8001dd8:	24000d64 	.word	0x24000d64
 8001ddc:	240008e0 	.word	0x240008e0
 8001de0:	24000d68 	.word	0x24000d68

08001de4 <NMEA_init>:

void NMEA_init(UART_HandleTypeDef *huart, DMA_HandleTypeDef *DMA){
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
	HAL_Delay(10);
 8001dee:	200a      	movs	r0, #10
 8001df0:	f003 fe62 	bl	8005ab8 <HAL_Delay>
	NMEA_huart=huart;
 8001df4:	4a12      	ldr	r2, [pc, #72]	@ (8001e40 <NMEA_init+0x5c>)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6013      	str	r3, [r2, #0]
	NMEA_DMA=DMA;
 8001dfa:	4a12      	ldr	r2, [pc, #72]	@ (8001e44 <NMEA_init+0x60>)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	6013      	str	r3, [r2, #0]
	__HAL_UART_ENABLE_IT(NMEA_huart,UART_IT_IDLE);
 8001e00:	4b0f      	ldr	r3, [pc, #60]	@ (8001e40 <NMEA_init+0x5c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b0d      	ldr	r3, [pc, #52]	@ (8001e40 <NMEA_init+0x5c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f042 0210 	orr.w	r2, r2, #16
 8001e12:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(NMEA_huart, NMEA_UART_DMA_buffer, NMEA_UART_DMA_BUFFER_SIZE);
 8001e14:	4b0a      	ldr	r3, [pc, #40]	@ (8001e40 <NMEA_init+0x5c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e1c:	490a      	ldr	r1, [pc, #40]	@ (8001e48 <NMEA_init+0x64>)
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f00c ff58 	bl	800ecd4 <HAL_UART_Receive_DMA>


	speed_change_CB_fun_ptr = &default_CB;
 8001e24:	4b09      	ldr	r3, [pc, #36]	@ (8001e4c <NMEA_init+0x68>)
 8001e26:	4a0a      	ldr	r2, [pc, #40]	@ (8001e50 <NMEA_init+0x6c>)
 8001e28:	601a      	str	r2, [r3, #0]
	speed_raise_barrier_CB_fun_ptr = &default_CB;
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e54 <NMEA_init+0x70>)
 8001e2c:	4a08      	ldr	r2, [pc, #32]	@ (8001e50 <NMEA_init+0x6c>)
 8001e2e:	601a      	str	r2, [r3, #0]
	speed_fall_barrier_CB_fun_ptr = &default_CB;
 8001e30:	4b09      	ldr	r3, [pc, #36]	@ (8001e58 <NMEA_init+0x74>)
 8001e32:	4a07      	ldr	r2, [pc, #28]	@ (8001e50 <NMEA_init+0x6c>)
 8001e34:	601a      	str	r2, [r3, #0]
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	24000d80 	.word	0x24000d80
 8001e44:	24000d84 	.word	0x24000d84
 8001e48:	240006e0 	.word	0x240006e0
 8001e4c:	24000d6c 	.word	0x24000d6c
 8001e50:	0800189d 	.word	0x0800189d
 8001e54:	24000d74 	.word	0x24000d74
 8001e58:	24000d7c 	.word	0x24000d7c

08001e5c <NMEA_UART_DMA_get_char>:
 * If buffer overflowes, the oldest NMEA message will be deleted to make space for incoming messages.\n
 * If new line character is detected ('\ n'), the line counter (UART_buffer_lines) increases.
 * @param[in]	DMA_char	character from DMA buffer
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_UART_DMA_get_char(uint8_t DMA_char){
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	71fb      	strb	r3, [r7, #7]
	int position = (UART_buffer_head + 1)%NMEA_UART_BUFFER_SIZE;
 8001e66:	4b2d      	ldr	r3, [pc, #180]	@ (8001f1c <NMEA_UART_DMA_get_char+0xc0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	425a      	negs	r2, r3
 8001e6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e72:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001e76:	bf58      	it	pl
 8001e78:	4253      	negpl	r3, r2
 8001e7a:	60bb      	str	r3, [r7, #8]
	NMEA_status stat=NMEA_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	73fb      	strb	r3, [r7, #15]

	if (position == UART_buffer_tail){		//buffer overflowed! make space for new message
 8001e80:	4b27      	ldr	r3, [pc, #156]	@ (8001f20 <NMEA_UART_DMA_get_char+0xc4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68ba      	ldr	r2, [r7, #8]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d130      	bne.n	8001eec <NMEA_UART_DMA_get_char+0x90>
		while (NMEA_UART_buffer[UART_buffer_tail]!='\n' && NMEA_UART_buffer[UART_buffer_tail]!=0){
 8001e8a:	e010      	b.n	8001eae <NMEA_UART_DMA_get_char+0x52>
			NMEA_UART_buffer[UART_buffer_tail]=0;
 8001e8c:	4b24      	ldr	r3, [pc, #144]	@ (8001f20 <NMEA_UART_DMA_get_char+0xc4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a24      	ldr	r2, [pc, #144]	@ (8001f24 <NMEA_UART_DMA_get_char+0xc8>)
 8001e92:	2100      	movs	r1, #0
 8001e94:	54d1      	strb	r1, [r2, r3]
			UART_buffer_tail=(UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8001e96:	4b22      	ldr	r3, [pc, #136]	@ (8001f20 <NMEA_UART_DMA_get_char+0xc4>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	425a      	negs	r2, r3
 8001e9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ea2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001ea6:	bf58      	it	pl
 8001ea8:	4253      	negpl	r3, r2
 8001eaa:	4a1d      	ldr	r2, [pc, #116]	@ (8001f20 <NMEA_UART_DMA_get_char+0xc4>)
 8001eac:	6013      	str	r3, [r2, #0]
		while (NMEA_UART_buffer[UART_buffer_tail]!='\n' && NMEA_UART_buffer[UART_buffer_tail]!=0){
 8001eae:	4b1c      	ldr	r3, [pc, #112]	@ (8001f20 <NMEA_UART_DMA_get_char+0xc4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a1c      	ldr	r2, [pc, #112]	@ (8001f24 <NMEA_UART_DMA_get_char+0xc8>)
 8001eb4:	5cd3      	ldrb	r3, [r2, r3]
 8001eb6:	2b0a      	cmp	r3, #10
 8001eb8:	d005      	beq.n	8001ec6 <NMEA_UART_DMA_get_char+0x6a>
 8001eba:	4b19      	ldr	r3, [pc, #100]	@ (8001f20 <NMEA_UART_DMA_get_char+0xc4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a19      	ldr	r2, [pc, #100]	@ (8001f24 <NMEA_UART_DMA_get_char+0xc8>)
 8001ec0:	5cd3      	ldrb	r3, [r2, r3]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1e2      	bne.n	8001e8c <NMEA_UART_DMA_get_char+0x30>
		}
		NMEA_UART_buffer[UART_buffer_tail]=0;
 8001ec6:	4b16      	ldr	r3, [pc, #88]	@ (8001f20 <NMEA_UART_DMA_get_char+0xc4>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a16      	ldr	r2, [pc, #88]	@ (8001f24 <NMEA_UART_DMA_get_char+0xc8>)
 8001ecc:	2100      	movs	r1, #0
 8001ece:	54d1      	strb	r1, [r2, r3]
		UART_buffer_tail=(UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8001ed0:	4b13      	ldr	r3, [pc, #76]	@ (8001f20 <NMEA_UART_DMA_get_char+0xc4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	425a      	negs	r2, r3
 8001ed8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001edc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001ee0:	bf58      	it	pl
 8001ee2:	4253      	negpl	r3, r2
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	@ (8001f20 <NMEA_UART_DMA_get_char+0xc4>)
 8001ee6:	6013      	str	r3, [r2, #0]
		stat=NMEA_BUFFER_OVERFLOWED;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
	}

	NMEA_UART_buffer[UART_buffer_head]=DMA_char;
 8001eec:	4b0b      	ldr	r3, [pc, #44]	@ (8001f1c <NMEA_UART_DMA_get_char+0xc0>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	490c      	ldr	r1, [pc, #48]	@ (8001f24 <NMEA_UART_DMA_get_char+0xc8>)
 8001ef2:	79fa      	ldrb	r2, [r7, #7]
 8001ef4:	54ca      	strb	r2, [r1, r3]

	UART_buffer_head=position;
 8001ef6:	4a09      	ldr	r2, [pc, #36]	@ (8001f1c <NMEA_UART_DMA_get_char+0xc0>)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	6013      	str	r3, [r2, #0]

	if(DMA_char=='\n'){
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	2b0a      	cmp	r3, #10
 8001f00:	d104      	bne.n	8001f0c <NMEA_UART_DMA_get_char+0xb0>
		++UART_buffer_lines;	//increment lines counter
 8001f02:	4b09      	ldr	r3, [pc, #36]	@ (8001f28 <NMEA_UART_DMA_get_char+0xcc>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	3301      	adds	r3, #1
 8001f08:	4a07      	ldr	r2, [pc, #28]	@ (8001f28 <NMEA_UART_DMA_get_char+0xcc>)
 8001f0a:	6013      	str	r3, [r2, #0]
	}

	return stat;
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	24000d60 	.word	0x24000d60
 8001f20:	24000d64 	.word	0x24000d64
 8001f24:	240008e0 	.word	0x240008e0
 8001f28:	24000d68 	.word	0x24000d68

08001f2c <NMEA_UART_DMA_copy_buffer>:
/**
 * NMEA_UART_DMA_copy_buffer is a function which copies messages from DMA buffer to UART circular buffer.\n
 * To do so, it uses NMEA_UART_DMA_get_char function for every character in NMEA_UART_DMA_buffer from 0 to (NMEA_UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(NMEA_DMA)).
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_UART_DMA_copy_buffer(void){
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0


	NMEA_status stat=NMEA_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	73fb      	strb	r3, [r7, #15]

	int data_length = NMEA_UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(NMEA_DMA);
 8001f36:	4b4b      	ldr	r3, [pc, #300]	@ (8002064 <NMEA_UART_DMA_copy_buffer+0x138>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a4a      	ldr	r2, [pc, #296]	@ (8002068 <NMEA_UART_DMA_copy_buffer+0x13c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d059      	beq.n	8001ff6 <NMEA_UART_DMA_copy_buffer+0xca>
 8001f42:	4b48      	ldr	r3, [pc, #288]	@ (8002064 <NMEA_UART_DMA_copy_buffer+0x138>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a48      	ldr	r2, [pc, #288]	@ (800206c <NMEA_UART_DMA_copy_buffer+0x140>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d053      	beq.n	8001ff6 <NMEA_UART_DMA_copy_buffer+0xca>
 8001f4e:	4b45      	ldr	r3, [pc, #276]	@ (8002064 <NMEA_UART_DMA_copy_buffer+0x138>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a46      	ldr	r2, [pc, #280]	@ (8002070 <NMEA_UART_DMA_copy_buffer+0x144>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d04d      	beq.n	8001ff6 <NMEA_UART_DMA_copy_buffer+0xca>
 8001f5a:	4b42      	ldr	r3, [pc, #264]	@ (8002064 <NMEA_UART_DMA_copy_buffer+0x138>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a44      	ldr	r2, [pc, #272]	@ (8002074 <NMEA_UART_DMA_copy_buffer+0x148>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d047      	beq.n	8001ff6 <NMEA_UART_DMA_copy_buffer+0xca>
 8001f66:	4b3f      	ldr	r3, [pc, #252]	@ (8002064 <NMEA_UART_DMA_copy_buffer+0x138>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a42      	ldr	r2, [pc, #264]	@ (8002078 <NMEA_UART_DMA_copy_buffer+0x14c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d041      	beq.n	8001ff6 <NMEA_UART_DMA_copy_buffer+0xca>
 8001f72:	4b3c      	ldr	r3, [pc, #240]	@ (8002064 <NMEA_UART_DMA_copy_buffer+0x138>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a40      	ldr	r2, [pc, #256]	@ (800207c <NMEA_UART_DMA_copy_buffer+0x150>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d03b      	beq.n	8001ff6 <NMEA_UART_DMA_copy_buffer+0xca>
 8001f7e:	4b39      	ldr	r3, [pc, #228]	@ (8002064 <NMEA_UART_DMA_copy_buffer+0x138>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a3e      	ldr	r2, [pc, #248]	@ (8002080 <NMEA_UART_DMA_copy_buffer+0x154>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d035      	beq.n	8001ff6 <NMEA_UART_DMA_copy_buffer+0xca>
 8001f8a:	4b36      	ldr	r3, [pc, #216]	@ (8002064 <NMEA_UART_DMA_copy_buffer+0x138>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a3c      	ldr	r2, [pc, #240]	@ (8002084 <NMEA_UART_DMA_copy_buffer+0x158>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d02f      	beq.n	8001ff6 <NMEA_UART_DMA_copy_buffer+0xca>
 8001f96:	4b33      	ldr	r3, [pc, #204]	@ (8002064 <NMEA_UART_DMA_copy_buffer+0x138>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a3a      	ldr	r2, [pc, #232]	@ (8002088 <NMEA_UART_DMA_copy_buffer+0x15c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d029      	beq.n	8001ff6 <NMEA_UART_DMA_copy_buffer+0xca>
 8001fa2:	4b30      	ldr	r3, [pc, #192]	@ (8002064 <NMEA_UART_DMA_copy_buffer+0x138>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a38      	ldr	r2, [pc, #224]	@ (800208c <NMEA_UART_DMA_copy_buffer+0x160>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d023      	beq.n	8001ff6 <NMEA_UART_DMA_copy_buffer+0xca>
 8001fae:	4b2d      	ldr	r3, [pc, #180]	@ (8002064 <NMEA_UART_DMA_copy_buffer+0x138>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a36      	ldr	r2, [pc, #216]	@ (8002090 <NMEA_UART_DMA_copy_buffer+0x164>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d01d      	beq.n	8001ff6 <NMEA_UART_DMA_copy_buffer+0xca>
 8001fba:	4b2a      	ldr	r3, [pc, #168]	@ (8002064 <NMEA_UART_DMA_copy_buffer+0x138>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a34      	ldr	r2, [pc, #208]	@ (8002094 <NMEA_UART_DMA_copy_buffer+0x168>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d017      	beq.n	8001ff6 <NMEA_UART_DMA_copy_buffer+0xca>
 8001fc6:	4b27      	ldr	r3, [pc, #156]	@ (8002064 <NMEA_UART_DMA_copy_buffer+0x138>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a32      	ldr	r2, [pc, #200]	@ (8002098 <NMEA_UART_DMA_copy_buffer+0x16c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d011      	beq.n	8001ff6 <NMEA_UART_DMA_copy_buffer+0xca>
 8001fd2:	4b24      	ldr	r3, [pc, #144]	@ (8002064 <NMEA_UART_DMA_copy_buffer+0x138>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a30      	ldr	r2, [pc, #192]	@ (800209c <NMEA_UART_DMA_copy_buffer+0x170>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d00b      	beq.n	8001ff6 <NMEA_UART_DMA_copy_buffer+0xca>
 8001fde:	4b21      	ldr	r3, [pc, #132]	@ (8002064 <NMEA_UART_DMA_copy_buffer+0x138>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a2e      	ldr	r2, [pc, #184]	@ (80020a0 <NMEA_UART_DMA_copy_buffer+0x174>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d005      	beq.n	8001ff6 <NMEA_UART_DMA_copy_buffer+0xca>
 8001fea:	4b1e      	ldr	r3, [pc, #120]	@ (8002064 <NMEA_UART_DMA_copy_buffer+0x138>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a2c      	ldr	r2, [pc, #176]	@ (80020a4 <NMEA_UART_DMA_copy_buffer+0x178>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d106      	bne.n	8002004 <NMEA_UART_DMA_copy_buffer+0xd8>
 8001ff6:	4b1b      	ldr	r3, [pc, #108]	@ (8002064 <NMEA_UART_DMA_copy_buffer+0x138>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8002002:	e005      	b.n	8002010 <NMEA_UART_DMA_copy_buffer+0xe4>
 8002004:	4b17      	ldr	r3, [pc, #92]	@ (8002064 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8002010:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < data_length; i++){
 8002012:	2300      	movs	r3, #0
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	e013      	b.n	8002040 <NMEA_UART_DMA_copy_buffer+0x114>
		if (NMEA_UART_DMA_get_char(NMEA_UART_DMA_buffer[i])==NMEA_BUFFER_OVERFLOWED){
 8002018:	4a23      	ldr	r2, [pc, #140]	@ (80020a8 <NMEA_UART_DMA_copy_buffer+0x17c>)
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	4413      	add	r3, r2
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff1b 	bl	8001e5c <NMEA_UART_DMA_get_char>
 8002026:	4603      	mov	r3, r0
 8002028:	2b01      	cmp	r3, #1
 800202a:	d101      	bne.n	8002030 <NMEA_UART_DMA_copy_buffer+0x104>
			stat=NMEA_BUFFER_OVERFLOWED;
 800202c:	2301      	movs	r3, #1
 800202e:	73fb      	strb	r3, [r7, #15]
		}
		NMEA_UART_DMA_buffer[i]=0;
 8002030:	4a1d      	ldr	r2, [pc, #116]	@ (80020a8 <NMEA_UART_DMA_copy_buffer+0x17c>)
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	4413      	add	r3, r2
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < data_length; i++){
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	3301      	adds	r3, #1
 800203e:	60bb      	str	r3, [r7, #8]
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	429a      	cmp	r2, r3
 8002046:	dbe7      	blt.n	8002018 <NMEA_UART_DMA_copy_buffer+0xec>
	}

	HAL_UART_Receive_DMA(NMEA_huart, NMEA_UART_DMA_buffer, NMEA_UART_DMA_BUFFER_SIZE);
 8002048:	4b18      	ldr	r3, [pc, #96]	@ (80020ac <NMEA_UART_DMA_copy_buffer+0x180>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002050:	4915      	ldr	r1, [pc, #84]	@ (80020a8 <NMEA_UART_DMA_copy_buffer+0x17c>)
 8002052:	4618      	mov	r0, r3
 8002054:	f00c fe3e 	bl	800ecd4 <HAL_UART_Receive_DMA>
	return stat;
 8002058:	7bfb      	ldrb	r3, [r7, #15]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	24000d84 	.word	0x24000d84
 8002068:	40020010 	.word	0x40020010
 800206c:	40020028 	.word	0x40020028
 8002070:	40020040 	.word	0x40020040
 8002074:	40020058 	.word	0x40020058
 8002078:	40020070 	.word	0x40020070
 800207c:	40020088 	.word	0x40020088
 8002080:	400200a0 	.word	0x400200a0
 8002084:	400200b8 	.word	0x400200b8
 8002088:	40020410 	.word	0x40020410
 800208c:	40020428 	.word	0x40020428
 8002090:	40020440 	.word	0x40020440
 8002094:	40020458 	.word	0x40020458
 8002098:	40020470 	.word	0x40020470
 800209c:	40020488 	.word	0x40020488
 80020a0:	400204a0 	.word	0x400204a0
 80020a4:	400204b8 	.word	0x400204b8
 80020a8:	240006e0 	.word	0x240006e0
 80020ac:	24000d80 	.word	0x24000d80

080020b0 <NMEA_process_task>:

NMEA_status NMEA_process_task(void){
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
	NMEA_status stat = NMEA_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	71fb      	strb	r3, [r7, #7]
	while(UART_buffer_lines>0) {
 80020ba:	e00d      	b.n	80020d8 <NMEA_process_task+0x28>
		NMEA_read_line();
 80020bc:	f7ff fe2a 	bl	8001d14 <NMEA_read_line>
		if (NMEA_checksum_clc(NMEA_working_buffer) == NMEA_OK){
 80020c0:	480a      	ldr	r0, [pc, #40]	@ (80020ec <NMEA_process_task+0x3c>)
 80020c2:	f7ff fdf1 	bl	8001ca8 <NMEA_checksum_clc>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d103      	bne.n	80020d4 <NMEA_process_task+0x24>
			NMEA_parser((char *)NMEA_working_buffer);
 80020cc:	4807      	ldr	r0, [pc, #28]	@ (80020ec <NMEA_process_task+0x3c>)
 80020ce:	f7ff fbed 	bl	80018ac <NMEA_parser>
 80020d2:	e001      	b.n	80020d8 <NMEA_process_task+0x28>
		}else stat = NMEA_CHECKSUM_ERROR;
 80020d4:	2302      	movs	r3, #2
 80020d6:	71fb      	strb	r3, [r7, #7]
	while(UART_buffer_lines>0) {
 80020d8:	4b05      	ldr	r3, [pc, #20]	@ (80020f0 <NMEA_process_task+0x40>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	dced      	bgt.n	80020bc <NMEA_process_task+0xc>
	}
	return stat;
 80020e0:	79fb      	ldrb	r3, [r7, #7]
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	24000ce0 	.word	0x24000ce0
 80020f0:	24000d68 	.word	0x24000d68

080020f4 <user_UART_IDLE_IT_handler>:

NMEA_status user_UART_IDLE_IT_handler(void){
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
	NMEA_status stat = NMEA_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	71fb      	strb	r3, [r7, #7]
	if (__HAL_UART_GET_FLAG(NMEA_huart, UART_FLAG_IDLE) == SET) {
 80020fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002134 <user_UART_IDLE_IT_handler+0x40>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	f003 0310 	and.w	r3, r3, #16
 800210a:	2b10      	cmp	r3, #16
 800210c:	d10d      	bne.n	800212a <user_UART_IDLE_IT_handler+0x36>
		__HAL_UART_CLEAR_FLAG(NMEA_huart,UART_FLAG_IDLE);
 800210e:	4b09      	ldr	r3, [pc, #36]	@ (8002134 <user_UART_IDLE_IT_handler+0x40>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2210      	movs	r2, #16
 8002116:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(NMEA_huart);
 8002118:	4b06      	ldr	r3, [pc, #24]	@ (8002134 <user_UART_IDLE_IT_handler+0x40>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f00c fe25 	bl	800ed6c <HAL_UART_DMAStop>
		stat = NMEA_UART_DMA_copy_buffer();
 8002122:	f7ff ff03 	bl	8001f2c <NMEA_UART_DMA_copy_buffer>
 8002126:	4603      	mov	r3, r0
 8002128:	71fb      	strb	r3, [r7, #7]
	}
	return stat;
 800212a:	79fb      	ldrb	r3, [r7, #7]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	24000d80 	.word	0x24000d80

08002138 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800213c:	f000 f906 	bl	800234c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002140:	f003 fc5e 	bl	8005a00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002144:	f000 f842 	bl	80021cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002148:	f7ff fa26 	bl	8001598 <MX_GPIO_Init>
  MX_DMA_Init();
 800214c:	f7fe ff7a 	bl	8001044 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8002150:	f7fe ffa8 	bl	80010a4 <MX_FDCAN1_Init>
  MX_I2C3_Init();
 8002154:	f7ff fad2 	bl	80016fc <MX_I2C3_Init>
  MX_SPI1_Init();
 8002158:	f000 f93c 	bl	80023d4 <MX_SPI1_Init>
  MX_SPI2_Init();
 800215c:	f000 f990 	bl	8002480 <MX_SPI2_Init>
  MX_TIM2_Init();
 8002160:	f000 fcc8 	bl	8002af4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002164:	f000 fd42 	bl	8002bec <MX_TIM3_Init>
  MX_TIM4_Init();
 8002168:	f000 fda6 	bl	8002cb8 <MX_TIM4_Init>
  MX_UART4_Init();
 800216c:	f000 ff5e 	bl	800302c <MX_UART4_Init>
  MX_USART1_UART_Init();
 8002170:	f000 ffa8 	bl	80030c4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002174:	f001 f842 	bl	80031fc <MX_USART6_UART_Init>
  MX_TIM13_Init();
 8002178:	f000 fe1a 	bl	8002db0 <MX_TIM13_Init>
  MX_USART3_UART_Init();
 800217c:	f000 fff2 	bl	8003164 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8002180:	f00f ffe4 	bl	801214c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  BMP280_init();
 8002184:	f001 ff74 	bl	8004070 <BMP280_init>
  //SD_init();
  SBUS_init();
 8002188:	f002 ff20 	bl	8004fcc <SBUS_init>
  HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 800218c:	2201      	movs	r2, #1
 800218e:	4909      	ldr	r1, [pc, #36]	@ (80021b4 <main+0x7c>)
 8002190:	4809      	ldr	r0, [pc, #36]	@ (80021b8 <main+0x80>)
 8002192:	f00c fd9f 	bl	800ecd4 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_IT(&huart6, &LR03_RxByte,1);
 8002196:	2201      	movs	r2, #1
 8002198:	4908      	ldr	r1, [pc, #32]	@ (80021bc <main+0x84>)
 800219a:	4809      	ldr	r0, [pc, #36]	@ (80021c0 <main+0x88>)
 800219c:	f00c fd4e 	bl	800ec3c <HAL_UART_Receive_IT>
  NMEA_init(&huart4, &hdma_uart4_rx);
 80021a0:	4908      	ldr	r1, [pc, #32]	@ (80021c4 <main+0x8c>)
 80021a2:	4809      	ldr	r0, [pc, #36]	@ (80021c8 <main+0x90>)
 80021a4:	f7ff fe1e 	bl	8001de4 <NMEA_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80021a8:	f7ff f976 	bl	8001498 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80021ac:	f011 fcfd 	bl	8013baa <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80021b0:	bf00      	nop
 80021b2:	e7fd      	b.n	80021b0 <main+0x78>
 80021b4:	24001547 	.word	0x24001547
 80021b8:	24001180 	.word	0x24001180
 80021bc:	24000dc0 	.word	0x24000dc0
 80021c0:	24001214 	.word	0x24001214
 80021c4:	240012a8 	.word	0x240012a8
 80021c8:	24001058 	.word	0x24001058

080021cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b09c      	sub	sp, #112	@ 0x70
 80021d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021d6:	224c      	movs	r2, #76	@ 0x4c
 80021d8:	2100      	movs	r1, #0
 80021da:	4618      	mov	r0, r3
 80021dc:	f014 fe5b 	bl	8016e96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021e0:	1d3b      	adds	r3, r7, #4
 80021e2:	2220      	movs	r2, #32
 80021e4:	2100      	movs	r1, #0
 80021e6:	4618      	mov	r0, r3
 80021e8:	f014 fe55 	bl	8016e96 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80021ec:	4b30      	ldr	r3, [pc, #192]	@ (80022b0 <SystemClock_Config+0xe4>)
 80021ee:	f04f 32ff 	mov.w	r2, #4294967295
 80021f2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80021f6:	2002      	movs	r0, #2
 80021f8:	f007 fb26 	bl	8009848 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80021fc:	2300      	movs	r3, #0
 80021fe:	603b      	str	r3, [r7, #0]
 8002200:	4b2c      	ldr	r3, [pc, #176]	@ (80022b4 <SystemClock_Config+0xe8>)
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	4a2b      	ldr	r2, [pc, #172]	@ (80022b4 <SystemClock_Config+0xe8>)
 8002206:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800220a:	6193      	str	r3, [r2, #24]
 800220c:	4b29      	ldr	r3, [pc, #164]	@ (80022b4 <SystemClock_Config+0xe8>)
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002214:	603b      	str	r3, [r7, #0]
 8002216:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002218:	bf00      	nop
 800221a:	4b26      	ldr	r3, [pc, #152]	@ (80022b4 <SystemClock_Config+0xe8>)
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002222:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002226:	d1f8      	bne.n	800221a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002228:	2302      	movs	r3, #2
 800222a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800222c:	2301      	movs	r3, #1
 800222e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8002230:	2340      	movs	r3, #64	@ 0x40
 8002232:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002234:	2302      	movs	r3, #2
 8002236:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002238:	2300      	movs	r3, #0
 800223a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800223c:	2304      	movs	r3, #4
 800223e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8002240:	2323      	movs	r3, #35	@ 0x23
 8002242:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002244:	2302      	movs	r3, #2
 8002246:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002248:	2302      	movs	r3, #2
 800224a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800224c:	2302      	movs	r3, #2
 800224e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002250:	230c      	movs	r3, #12
 8002252:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002254:	2300      	movs	r3, #0
 8002256:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800225c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002260:	4618      	mov	r0, r3
 8002262:	f007 fb2b 	bl	80098bc <HAL_RCC_OscConfig>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800226c:	f000 f8ac 	bl	80023c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002270:	233f      	movs	r3, #63	@ 0x3f
 8002272:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002274:	2303      	movs	r3, #3
 8002276:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002278:	2300      	movs	r3, #0
 800227a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800227c:	2300      	movs	r3, #0
 800227e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002280:	2340      	movs	r3, #64	@ 0x40
 8002282:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002284:	2340      	movs	r3, #64	@ 0x40
 8002286:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002288:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800228c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800228e:	2340      	movs	r3, #64	@ 0x40
 8002290:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002292:	1d3b      	adds	r3, r7, #4
 8002294:	2106      	movs	r1, #6
 8002296:	4618      	mov	r0, r3
 8002298:	f007 ff42 	bl	800a120 <HAL_RCC_ClockConfig>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80022a2:	f000 f891 	bl	80023c8 <Error_Handler>
  }
}
 80022a6:	bf00      	nop
 80022a8:	3770      	adds	r7, #112	@ 0x70
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	58024400 	.word	0x58024400
 80022b4:	58024800 	.word	0x58024800

080022b8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1){
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a18      	ldr	r2, [pc, #96]	@ (8002328 <HAL_UART_RxCpltCallback+0x70>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d10a      	bne.n	80022e0 <HAL_UART_RxCpltCallback+0x28>
		SBUS_Receive(SBUS_RxBuffer);
 80022ca:	4b18      	ldr	r3, [pc, #96]	@ (800232c <HAL_UART_RxCpltCallback+0x74>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f002 fe8a 	bl	8004fe8 <SBUS_Receive>
		HAL_UART_Receive_DMA(&huart1, &SBUS_RxBuffer, 1);
 80022d4:	2201      	movs	r2, #1
 80022d6:	4915      	ldr	r1, [pc, #84]	@ (800232c <HAL_UART_RxCpltCallback+0x74>)
 80022d8:	4815      	ldr	r0, [pc, #84]	@ (8002330 <HAL_UART_RxCpltCallback+0x78>)
 80022da:	f00c fcfb 	bl	800ecd4 <HAL_UART_Receive_DMA>
    }
    else if(huart -> Instance == USART6){
    	LR03_Receive(LR03_RxByte);
    	HAL_UART_Receive_IT(&huart6, &LR03_RxByte,1);
    }
}
 80022de:	e01e      	b.n	800231e <HAL_UART_RxCpltCallback+0x66>
    else if (huart -> Instance == USART3){
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a13      	ldr	r2, [pc, #76]	@ (8002334 <HAL_UART_RxCpltCallback+0x7c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d10a      	bne.n	8002300 <HAL_UART_RxCpltCallback+0x48>
        BNO_Receive(BNO_BufferByte);
 80022ea:	4b13      	ldr	r3, [pc, #76]	@ (8002338 <HAL_UART_RxCpltCallback+0x80>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f002 fbf2 	bl	8004ad8 <BNO_Receive>
        HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 80022f4:	2201      	movs	r2, #1
 80022f6:	4910      	ldr	r1, [pc, #64]	@ (8002338 <HAL_UART_RxCpltCallback+0x80>)
 80022f8:	4810      	ldr	r0, [pc, #64]	@ (800233c <HAL_UART_RxCpltCallback+0x84>)
 80022fa:	f00c fceb 	bl	800ecd4 <HAL_UART_Receive_DMA>
}
 80022fe:	e00e      	b.n	800231e <HAL_UART_RxCpltCallback+0x66>
    else if(huart -> Instance == USART6){
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a0e      	ldr	r2, [pc, #56]	@ (8002340 <HAL_UART_RxCpltCallback+0x88>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d109      	bne.n	800231e <HAL_UART_RxCpltCallback+0x66>
    	LR03_Receive(LR03_RxByte);
 800230a:	4b0e      	ldr	r3, [pc, #56]	@ (8002344 <HAL_UART_RxCpltCallback+0x8c>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f002 fdc4 	bl	8004e9c <LR03_Receive>
    	HAL_UART_Receive_IT(&huart6, &LR03_RxByte,1);
 8002314:	2201      	movs	r2, #1
 8002316:	490b      	ldr	r1, [pc, #44]	@ (8002344 <HAL_UART_RxCpltCallback+0x8c>)
 8002318:	480b      	ldr	r0, [pc, #44]	@ (8002348 <HAL_UART_RxCpltCallback+0x90>)
 800231a:	f00c fc8f 	bl	800ec3c <HAL_UART_Receive_IT>
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40011000 	.word	0x40011000
 800232c:	240016d1 	.word	0x240016d1
 8002330:	240010ec 	.word	0x240010ec
 8002334:	40004800 	.word	0x40004800
 8002338:	24001547 	.word	0x24001547
 800233c:	24001180 	.word	0x24001180
 8002340:	40011400 	.word	0x40011400
 8002344:	24000dc0 	.word	0x24000dc0
 8002348:	24001214 	.word	0x24001214

0800234c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002352:	463b      	mov	r3, r7
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800235e:	f003 fcaf 	bl	8005cc0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002362:	2301      	movs	r3, #1
 8002364:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002366:	2300      	movs	r3, #0
 8002368:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800236a:	2300      	movs	r3, #0
 800236c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800236e:	231f      	movs	r3, #31
 8002370:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002372:	2387      	movs	r3, #135	@ 0x87
 8002374:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002376:	2300      	movs	r3, #0
 8002378:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800237a:	2300      	movs	r3, #0
 800237c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800237e:	2301      	movs	r3, #1
 8002380:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002382:	2301      	movs	r3, #1
 8002384:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002386:	2300      	movs	r3, #0
 8002388:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800238a:	2300      	movs	r3, #0
 800238c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800238e:	463b      	mov	r3, r7
 8002390:	4618      	mov	r0, r3
 8002392:	f003 fccd 	bl	8005d30 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002396:	2004      	movs	r0, #4
 8002398:	f003 fcaa 	bl	8005cf0 <HAL_MPU_Enable>

}
 800239c:	bf00      	nop
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a04      	ldr	r2, [pc, #16]	@ (80023c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d101      	bne.n	80023ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80023b6:	f003 fb5f 	bl	8005a78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40014800 	.word	0x40014800

080023c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023cc:	b672      	cpsid	i
}
 80023ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023d0:	bf00      	nop
 80023d2:	e7fd      	b.n	80023d0 <Error_Handler+0x8>

080023d4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80023d8:	4b27      	ldr	r3, [pc, #156]	@ (8002478 <MX_SPI1_Init+0xa4>)
 80023da:	4a28      	ldr	r2, [pc, #160]	@ (800247c <MX_SPI1_Init+0xa8>)
 80023dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023de:	4b26      	ldr	r3, [pc, #152]	@ (8002478 <MX_SPI1_Init+0xa4>)
 80023e0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80023e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023e6:	4b24      	ldr	r3, [pc, #144]	@ (8002478 <MX_SPI1_Init+0xa4>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023ec:	4b22      	ldr	r3, [pc, #136]	@ (8002478 <MX_SPI1_Init+0xa4>)
 80023ee:	2207      	movs	r2, #7
 80023f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023f2:	4b21      	ldr	r3, [pc, #132]	@ (8002478 <MX_SPI1_Init+0xa4>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002478 <MX_SPI1_Init+0xa4>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002478 <MX_SPI1_Init+0xa4>)
 8002400:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002404:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002406:	4b1c      	ldr	r3, [pc, #112]	@ (8002478 <MX_SPI1_Init+0xa4>)
 8002408:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 800240c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800240e:	4b1a      	ldr	r3, [pc, #104]	@ (8002478 <MX_SPI1_Init+0xa4>)
 8002410:	2200      	movs	r2, #0
 8002412:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002414:	4b18      	ldr	r3, [pc, #96]	@ (8002478 <MX_SPI1_Init+0xa4>)
 8002416:	2200      	movs	r2, #0
 8002418:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800241a:	4b17      	ldr	r3, [pc, #92]	@ (8002478 <MX_SPI1_Init+0xa4>)
 800241c:	2200      	movs	r2, #0
 800241e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002420:	4b15      	ldr	r3, [pc, #84]	@ (8002478 <MX_SPI1_Init+0xa4>)
 8002422:	2200      	movs	r2, #0
 8002424:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002426:	4b14      	ldr	r3, [pc, #80]	@ (8002478 <MX_SPI1_Init+0xa4>)
 8002428:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800242c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800242e:	4b12      	ldr	r3, [pc, #72]	@ (8002478 <MX_SPI1_Init+0xa4>)
 8002430:	2200      	movs	r2, #0
 8002432:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002434:	4b10      	ldr	r3, [pc, #64]	@ (8002478 <MX_SPI1_Init+0xa4>)
 8002436:	2200      	movs	r2, #0
 8002438:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800243a:	4b0f      	ldr	r3, [pc, #60]	@ (8002478 <MX_SPI1_Init+0xa4>)
 800243c:	2200      	movs	r2, #0
 800243e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002440:	4b0d      	ldr	r3, [pc, #52]	@ (8002478 <MX_SPI1_Init+0xa4>)
 8002442:	2200      	movs	r2, #0
 8002444:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002446:	4b0c      	ldr	r3, [pc, #48]	@ (8002478 <MX_SPI1_Init+0xa4>)
 8002448:	2200      	movs	r2, #0
 800244a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800244c:	4b0a      	ldr	r3, [pc, #40]	@ (8002478 <MX_SPI1_Init+0xa4>)
 800244e:	2200      	movs	r2, #0
 8002450:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002452:	4b09      	ldr	r3, [pc, #36]	@ (8002478 <MX_SPI1_Init+0xa4>)
 8002454:	2200      	movs	r2, #0
 8002456:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002458:	4b07      	ldr	r3, [pc, #28]	@ (8002478 <MX_SPI1_Init+0xa4>)
 800245a:	2200      	movs	r2, #0
 800245c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800245e:	4b06      	ldr	r3, [pc, #24]	@ (8002478 <MX_SPI1_Init+0xa4>)
 8002460:	2200      	movs	r2, #0
 8002462:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002464:	4804      	ldr	r0, [pc, #16]	@ (8002478 <MX_SPI1_Init+0xa4>)
 8002466:	f00a f809 	bl	800c47c <HAL_SPI_Init>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8002470:	f7ff ffaa 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002474:	bf00      	nop
 8002476:	bd80      	pop	{r7, pc}
 8002478:	24000dc8 	.word	0x24000dc8
 800247c:	40013000 	.word	0x40013000

08002480 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002484:	4b27      	ldr	r3, [pc, #156]	@ (8002524 <MX_SPI2_Init+0xa4>)
 8002486:	4a28      	ldr	r2, [pc, #160]	@ (8002528 <MX_SPI2_Init+0xa8>)
 8002488:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800248a:	4b26      	ldr	r3, [pc, #152]	@ (8002524 <MX_SPI2_Init+0xa4>)
 800248c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002490:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002492:	4b24      	ldr	r3, [pc, #144]	@ (8002524 <MX_SPI2_Init+0xa4>)
 8002494:	2200      	movs	r2, #0
 8002496:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002498:	4b22      	ldr	r3, [pc, #136]	@ (8002524 <MX_SPI2_Init+0xa4>)
 800249a:	2207      	movs	r2, #7
 800249c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800249e:	4b21      	ldr	r3, [pc, #132]	@ (8002524 <MX_SPI2_Init+0xa4>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002524 <MX_SPI2_Init+0xa4>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80024aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002524 <MX_SPI2_Init+0xa4>)
 80024ac:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80024b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80024b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002524 <MX_SPI2_Init+0xa4>)
 80024b4:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80024b8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002524 <MX_SPI2_Init+0xa4>)
 80024bc:	2200      	movs	r2, #0
 80024be:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80024c0:	4b18      	ldr	r3, [pc, #96]	@ (8002524 <MX_SPI2_Init+0xa4>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024c6:	4b17      	ldr	r3, [pc, #92]	@ (8002524 <MX_SPI2_Init+0xa4>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80024cc:	4b15      	ldr	r3, [pc, #84]	@ (8002524 <MX_SPI2_Init+0xa4>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80024d2:	4b14      	ldr	r3, [pc, #80]	@ (8002524 <MX_SPI2_Init+0xa4>)
 80024d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80024d8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80024da:	4b12      	ldr	r3, [pc, #72]	@ (8002524 <MX_SPI2_Init+0xa4>)
 80024dc:	2200      	movs	r2, #0
 80024de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80024e0:	4b10      	ldr	r3, [pc, #64]	@ (8002524 <MX_SPI2_Init+0xa4>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80024e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002524 <MX_SPI2_Init+0xa4>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80024ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002524 <MX_SPI2_Init+0xa4>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80024f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002524 <MX_SPI2_Init+0xa4>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80024f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002524 <MX_SPI2_Init+0xa4>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80024fe:	4b09      	ldr	r3, [pc, #36]	@ (8002524 <MX_SPI2_Init+0xa4>)
 8002500:	2200      	movs	r2, #0
 8002502:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002504:	4b07      	ldr	r3, [pc, #28]	@ (8002524 <MX_SPI2_Init+0xa4>)
 8002506:	2200      	movs	r2, #0
 8002508:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800250a:	4b06      	ldr	r3, [pc, #24]	@ (8002524 <MX_SPI2_Init+0xa4>)
 800250c:	2200      	movs	r2, #0
 800250e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002510:	4804      	ldr	r0, [pc, #16]	@ (8002524 <MX_SPI2_Init+0xa4>)
 8002512:	f009 ffb3 	bl	800c47c <HAL_SPI_Init>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 800251c:	f7ff ff54 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002520:	bf00      	nop
 8002522:	bd80      	pop	{r7, pc}
 8002524:	24000e50 	.word	0x24000e50
 8002528:	40003800 	.word	0x40003800

0800252c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b0bc      	sub	sp, #240	@ 0xf0
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002534:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002544:	f107 0318 	add.w	r3, r7, #24
 8002548:	22c0      	movs	r2, #192	@ 0xc0
 800254a:	2100      	movs	r1, #0
 800254c:	4618      	mov	r0, r3
 800254e:	f014 fca2 	bl	8016e96 <memset>
  if(spiHandle->Instance==SPI1)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a4c      	ldr	r2, [pc, #304]	@ (8002688 <HAL_SPI_MspInit+0x15c>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d145      	bne.n	80025e8 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800255c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002560:	f04f 0300 	mov.w	r3, #0
 8002564:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002568:	2300      	movs	r3, #0
 800256a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800256c:	f107 0318 	add.w	r3, r7, #24
 8002570:	4618      	mov	r0, r3
 8002572:	f008 f9a3 	bl	800a8bc <HAL_RCCEx_PeriphCLKConfig>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800257c:	f7ff ff24 	bl	80023c8 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002580:	4b42      	ldr	r3, [pc, #264]	@ (800268c <HAL_SPI_MspInit+0x160>)
 8002582:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002586:	4a41      	ldr	r2, [pc, #260]	@ (800268c <HAL_SPI_MspInit+0x160>)
 8002588:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800258c:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8002590:	4b3e      	ldr	r3, [pc, #248]	@ (800268c <HAL_SPI_MspInit+0x160>)
 8002592:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002596:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800259e:	4b3b      	ldr	r3, [pc, #236]	@ (800268c <HAL_SPI_MspInit+0x160>)
 80025a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80025a4:	4a39      	ldr	r2, [pc, #228]	@ (800268c <HAL_SPI_MspInit+0x160>)
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80025ae:	4b37      	ldr	r3, [pc, #220]	@ (800268c <HAL_SPI_MspInit+0x160>)
 80025b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 80025bc:	23e0      	movs	r3, #224	@ 0xe0
 80025be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c2:	2302      	movs	r3, #2
 80025c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ce:	2300      	movs	r3, #0
 80025d0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025d4:	2305      	movs	r3, #5
 80025d6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025da:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80025de:	4619      	mov	r1, r3
 80025e0:	482b      	ldr	r0, [pc, #172]	@ (8002690 <HAL_SPI_MspInit+0x164>)
 80025e2:	f006 fe33 	bl	800924c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80025e6:	e04a      	b.n	800267e <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a29      	ldr	r2, [pc, #164]	@ (8002694 <HAL_SPI_MspInit+0x168>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d145      	bne.n	800267e <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80025f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80025fe:	2300      	movs	r3, #0
 8002600:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002602:	f107 0318 	add.w	r3, r7, #24
 8002606:	4618      	mov	r0, r3
 8002608:	f008 f958 	bl	800a8bc <HAL_RCCEx_PeriphCLKConfig>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8002612:	f7ff fed9 	bl	80023c8 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002616:	4b1d      	ldr	r3, [pc, #116]	@ (800268c <HAL_SPI_MspInit+0x160>)
 8002618:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800261c:	4a1b      	ldr	r2, [pc, #108]	@ (800268c <HAL_SPI_MspInit+0x160>)
 800261e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002622:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002626:	4b19      	ldr	r3, [pc, #100]	@ (800268c <HAL_SPI_MspInit+0x160>)
 8002628:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800262c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002634:	4b15      	ldr	r3, [pc, #84]	@ (800268c <HAL_SPI_MspInit+0x160>)
 8002636:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800263a:	4a14      	ldr	r2, [pc, #80]	@ (800268c <HAL_SPI_MspInit+0x160>)
 800263c:	f043 0302 	orr.w	r3, r3, #2
 8002640:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002644:	4b11      	ldr	r3, [pc, #68]	@ (800268c <HAL_SPI_MspInit+0x160>)
 8002646:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	60bb      	str	r3, [r7, #8]
 8002650:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 8002652:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002656:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265a:	2302      	movs	r3, #2
 800265c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002660:	2300      	movs	r3, #0
 8002662:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002666:	2300      	movs	r3, #0
 8002668:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800266c:	2305      	movs	r3, #5
 800266e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002672:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002676:	4619      	mov	r1, r3
 8002678:	4807      	ldr	r0, [pc, #28]	@ (8002698 <HAL_SPI_MspInit+0x16c>)
 800267a:	f006 fde7 	bl	800924c <HAL_GPIO_Init>
}
 800267e:	bf00      	nop
 8002680:	37f0      	adds	r7, #240	@ 0xf0
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40013000 	.word	0x40013000
 800268c:	58024400 	.word	0x58024400
 8002690:	58020000 	.word	0x58020000
 8002694:	40003800 	.word	0x40003800
 8002698:	58020400 	.word	0x58020400

0800269c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a2:	4b0c      	ldr	r3, [pc, #48]	@ (80026d4 <HAL_MspInit+0x38>)
 80026a4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80026a8:	4a0a      	ldr	r2, [pc, #40]	@ (80026d4 <HAL_MspInit+0x38>)
 80026aa:	f043 0302 	orr.w	r3, r3, #2
 80026ae:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80026b2:	4b08      	ldr	r3, [pc, #32]	@ (80026d4 <HAL_MspInit+0x38>)
 80026b4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	607b      	str	r3, [r7, #4]
 80026be:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026c0:	2200      	movs	r2, #0
 80026c2:	210f      	movs	r1, #15
 80026c4:	f06f 0001 	mvn.w	r0, #1
 80026c8:	f003 fad2 	bl	8005c70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026cc:	bf00      	nop
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	58024400 	.word	0x58024400

080026d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08e      	sub	sp, #56	@ 0x38
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b0f      	cmp	r3, #15
 80026e4:	d844      	bhi.n	8002770 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 80026e6:	2200      	movs	r2, #0
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	2076      	movs	r0, #118	@ 0x76
 80026ec:	f003 fac0 	bl	8005c70 <HAL_NVIC_SetPriority>

     /* Enable the TIM17 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80026f0:	2076      	movs	r0, #118	@ 0x76
 80026f2:	f003 fad7 	bl	8005ca4 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80026f6:	4a24      	ldr	r2, [pc, #144]	@ (8002788 <HAL_InitTick+0xb0>)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80026fc:	4b23      	ldr	r3, [pc, #140]	@ (800278c <HAL_InitTick+0xb4>)
 80026fe:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002702:	4a22      	ldr	r2, [pc, #136]	@ (800278c <HAL_InitTick+0xb4>)
 8002704:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002708:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 800270c:	4b1f      	ldr	r3, [pc, #124]	@ (800278c <HAL_InitTick+0xb4>)
 800270e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002712:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002716:	60bb      	str	r3, [r7, #8]
 8002718:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800271a:	f107 020c 	add.w	r2, r7, #12
 800271e:	f107 0310 	add.w	r3, r7, #16
 8002722:	4611      	mov	r1, r2
 8002724:	4618      	mov	r0, r3
 8002726:	f008 f887 	bl	800a838 <HAL_RCC_GetClockConfig>
  /* Compute TIM17 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800272a:	f008 f86f 	bl	800a80c <HAL_RCC_GetPCLK2Freq>
 800272e:	4603      	mov	r3, r0
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002736:	4a16      	ldr	r2, [pc, #88]	@ (8002790 <HAL_InitTick+0xb8>)
 8002738:	fba2 2303 	umull	r2, r3, r2, r3
 800273c:	0c9b      	lsrs	r3, r3, #18
 800273e:	3b01      	subs	r3, #1
 8002740:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8002742:	4b14      	ldr	r3, [pc, #80]	@ (8002794 <HAL_InitTick+0xbc>)
 8002744:	4a14      	ldr	r2, [pc, #80]	@ (8002798 <HAL_InitTick+0xc0>)
 8002746:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8002748:	4b12      	ldr	r3, [pc, #72]	@ (8002794 <HAL_InitTick+0xbc>)
 800274a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800274e:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8002750:	4a10      	ldr	r2, [pc, #64]	@ (8002794 <HAL_InitTick+0xbc>)
 8002752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002754:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8002756:	4b0f      	ldr	r3, [pc, #60]	@ (8002794 <HAL_InitTick+0xbc>)
 8002758:	2200      	movs	r2, #0
 800275a:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800275c:	4b0d      	ldr	r3, [pc, #52]	@ (8002794 <HAL_InitTick+0xbc>)
 800275e:	2200      	movs	r2, #0
 8002760:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8002762:	480c      	ldr	r0, [pc, #48]	@ (8002794 <HAL_InitTick+0xbc>)
 8002764:	f00b f831 	bl	800d7ca <HAL_TIM_Base_Init>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d107      	bne.n	800277e <HAL_InitTick+0xa6>
 800276e:	e001      	b.n	8002774 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e005      	b.n	8002780 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8002774:	4807      	ldr	r0, [pc, #28]	@ (8002794 <HAL_InitTick+0xbc>)
 8002776:	f00b f87f 	bl	800d878 <HAL_TIM_Base_Start_IT>
 800277a:	4603      	mov	r3, r0
 800277c:	e000      	b.n	8002780 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
}
 8002780:	4618      	mov	r0, r3
 8002782:	3738      	adds	r7, #56	@ 0x38
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	240000a4 	.word	0x240000a4
 800278c:	58024400 	.word	0x58024400
 8002790:	431bde83 	.word	0x431bde83
 8002794:	24000ed8 	.word	0x24000ed8
 8002798:	40014800 	.word	0x40014800

0800279c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027a0:	bf00      	nop
 80027a2:	e7fd      	b.n	80027a0 <NMI_Handler+0x4>

080027a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027a8:	bf00      	nop
 80027aa:	e7fd      	b.n	80027a8 <HardFault_Handler+0x4>

080027ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027b0:	bf00      	nop
 80027b2:	e7fd      	b.n	80027b0 <MemManage_Handler+0x4>

080027b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027b8:	bf00      	nop
 80027ba:	e7fd      	b.n	80027b8 <BusFault_Handler+0x4>

080027bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027c0:	bf00      	nop
 80027c2:	e7fd      	b.n	80027c0 <UsageFault_Handler+0x4>

080027c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
	...

080027d4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80027d8:	4802      	ldr	r0, [pc, #8]	@ (80027e4 <DMA1_Stream0_IRQHandler+0x10>)
 80027da:	f004 fe45 	bl	8007468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	24001320 	.word	0x24001320

080027e8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80027ec:	4802      	ldr	r0, [pc, #8]	@ (80027f8 <DMA1_Stream1_IRQHandler+0x10>)
 80027ee:	f004 fe3b 	bl	8007468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	24001398 	.word	0x24001398

080027fc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002800:	4802      	ldr	r0, [pc, #8]	@ (800280c <DMA1_Stream2_IRQHandler+0x10>)
 8002802:	f004 fe31 	bl	8007468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	240012a8 	.word	0x240012a8

08002810 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002814:	4802      	ldr	r0, [pc, #8]	@ (8002820 <USART1_IRQHandler+0x10>)
 8002816:	f00c fc7b 	bl	800f110 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	240010ec 	.word	0x240010ec

08002824 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002828:	4802      	ldr	r0, [pc, #8]	@ (8002834 <USART3_IRQHandler+0x10>)
 800282a:	f00c fc71 	bl	800f110 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	24001180 	.word	0x24001180

08002838 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	user_UART_IDLE_IT_handler();
 800283c:	f7ff fc5a 	bl	80020f4 <user_UART_IDLE_IT_handler>
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002840:	4802      	ldr	r0, [pc, #8]	@ (800284c <UART4_IRQHandler+0x14>)
 8002842:	f00c fc65 	bl	800f110 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	24001058 	.word	0x24001058

08002850 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002854:	4802      	ldr	r0, [pc, #8]	@ (8002860 <USART6_IRQHandler+0x10>)
 8002856:	f00c fc5b 	bl	800f110 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	24001214 	.word	0x24001214

08002864 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002868:	4802      	ldr	r0, [pc, #8]	@ (8002874 <TIM17_IRQHandler+0x10>)
 800286a:	f00b f9e3 	bl	800dc34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	24000ed8 	.word	0x24000ed8

08002878 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return 1;
 800287c:	2301      	movs	r3, #1
}
 800287e:	4618      	mov	r0, r3
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <_kill>:

int _kill(int pid, int sig)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002892:	f014 fb6d 	bl	8016f70 <__errno>
 8002896:	4603      	mov	r3, r0
 8002898:	2216      	movs	r2, #22
 800289a:	601a      	str	r2, [r3, #0]
  return -1;
 800289c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <_exit>:

void _exit (int status)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028b0:	f04f 31ff 	mov.w	r1, #4294967295
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7ff ffe7 	bl	8002888 <_kill>
  while (1) {}    /* Make sure we hang here */
 80028ba:	bf00      	nop
 80028bc:	e7fd      	b.n	80028ba <_exit+0x12>

080028be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b086      	sub	sp, #24
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	60f8      	str	r0, [r7, #12]
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]
 80028ce:	e00a      	b.n	80028e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028d0:	f3af 8000 	nop.w
 80028d4:	4601      	mov	r1, r0
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	1c5a      	adds	r2, r3, #1
 80028da:	60ba      	str	r2, [r7, #8]
 80028dc:	b2ca      	uxtb	r2, r1
 80028de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	3301      	adds	r3, #1
 80028e4:	617b      	str	r3, [r7, #20]
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	dbf0      	blt.n	80028d0 <_read+0x12>
  }

  return len;
 80028ee:	687b      	ldr	r3, [r7, #4]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]
 8002908:	e009      	b.n	800291e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	60ba      	str	r2, [r7, #8]
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	3301      	adds	r3, #1
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	429a      	cmp	r2, r3
 8002924:	dbf1      	blt.n	800290a <_write+0x12>
  }
  return len;
 8002926:	687b      	ldr	r3, [r7, #4]
}
 8002928:	4618      	mov	r0, r3
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <_close>:

int _close(int file)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002938:	f04f 33ff 	mov.w	r3, #4294967295
}
 800293c:	4618      	mov	r0, r3
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002958:	605a      	str	r2, [r3, #4]
  return 0;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <_isatty>:

int _isatty(int file)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002970:	2301      	movs	r3, #1
}
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800297e:	b480      	push	{r7}
 8002980:	b085      	sub	sp, #20
 8002982:	af00      	add	r7, sp, #0
 8002984:	60f8      	str	r0, [r7, #12]
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029a0:	4a14      	ldr	r2, [pc, #80]	@ (80029f4 <_sbrk+0x5c>)
 80029a2:	4b15      	ldr	r3, [pc, #84]	@ (80029f8 <_sbrk+0x60>)
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029ac:	4b13      	ldr	r3, [pc, #76]	@ (80029fc <_sbrk+0x64>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d102      	bne.n	80029ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029b4:	4b11      	ldr	r3, [pc, #68]	@ (80029fc <_sbrk+0x64>)
 80029b6:	4a12      	ldr	r2, [pc, #72]	@ (8002a00 <_sbrk+0x68>)
 80029b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029ba:	4b10      	ldr	r3, [pc, #64]	@ (80029fc <_sbrk+0x64>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4413      	add	r3, r2
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d207      	bcs.n	80029d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029c8:	f014 fad2 	bl	8016f70 <__errno>
 80029cc:	4603      	mov	r3, r0
 80029ce:	220c      	movs	r2, #12
 80029d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029d2:	f04f 33ff 	mov.w	r3, #4294967295
 80029d6:	e009      	b.n	80029ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029d8:	4b08      	ldr	r3, [pc, #32]	@ (80029fc <_sbrk+0x64>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029de:	4b07      	ldr	r3, [pc, #28]	@ (80029fc <_sbrk+0x64>)
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4413      	add	r3, r2
 80029e6:	4a05      	ldr	r2, [pc, #20]	@ (80029fc <_sbrk+0x64>)
 80029e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029ea:	68fb      	ldr	r3, [r7, #12]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	24100000 	.word	0x24100000
 80029f8:	00000400 	.word	0x00000400
 80029fc:	24000f24 	.word	0x24000f24
 8002a00:	24006848 	.word	0x24006848

08002a04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002a08:	4b32      	ldr	r3, [pc, #200]	@ (8002ad4 <SystemInit+0xd0>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a0e:	4a31      	ldr	r2, [pc, #196]	@ (8002ad4 <SystemInit+0xd0>)
 8002a10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002a18:	4b2f      	ldr	r3, [pc, #188]	@ (8002ad8 <SystemInit+0xd4>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 030f 	and.w	r3, r3, #15
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d807      	bhi.n	8002a34 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002a24:	4b2c      	ldr	r3, [pc, #176]	@ (8002ad8 <SystemInit+0xd4>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f023 030f 	bic.w	r3, r3, #15
 8002a2c:	4a2a      	ldr	r2, [pc, #168]	@ (8002ad8 <SystemInit+0xd4>)
 8002a2e:	f043 0303 	orr.w	r3, r3, #3
 8002a32:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002a34:	4b29      	ldr	r3, [pc, #164]	@ (8002adc <SystemInit+0xd8>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a28      	ldr	r2, [pc, #160]	@ (8002adc <SystemInit+0xd8>)
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002a40:	4b26      	ldr	r3, [pc, #152]	@ (8002adc <SystemInit+0xd8>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002a46:	4b25      	ldr	r3, [pc, #148]	@ (8002adc <SystemInit+0xd8>)
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	4924      	ldr	r1, [pc, #144]	@ (8002adc <SystemInit+0xd8>)
 8002a4c:	4b24      	ldr	r3, [pc, #144]	@ (8002ae0 <SystemInit+0xdc>)
 8002a4e:	4013      	ands	r3, r2
 8002a50:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002a52:	4b21      	ldr	r3, [pc, #132]	@ (8002ad8 <SystemInit+0xd4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 030c 	and.w	r3, r3, #12
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d007      	beq.n	8002a6e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad8 <SystemInit+0xd4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f023 030f 	bic.w	r3, r3, #15
 8002a66:	4a1c      	ldr	r2, [pc, #112]	@ (8002ad8 <SystemInit+0xd4>)
 8002a68:	f043 0303 	orr.w	r3, r3, #3
 8002a6c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8002a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8002adc <SystemInit+0xd8>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002a74:	4b19      	ldr	r3, [pc, #100]	@ (8002adc <SystemInit+0xd8>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002a7a:	4b18      	ldr	r3, [pc, #96]	@ (8002adc <SystemInit+0xd8>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002a80:	4b16      	ldr	r3, [pc, #88]	@ (8002adc <SystemInit+0xd8>)
 8002a82:	4a18      	ldr	r2, [pc, #96]	@ (8002ae4 <SystemInit+0xe0>)
 8002a84:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002a86:	4b15      	ldr	r3, [pc, #84]	@ (8002adc <SystemInit+0xd8>)
 8002a88:	4a17      	ldr	r2, [pc, #92]	@ (8002ae8 <SystemInit+0xe4>)
 8002a8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002a8c:	4b13      	ldr	r3, [pc, #76]	@ (8002adc <SystemInit+0xd8>)
 8002a8e:	4a17      	ldr	r2, [pc, #92]	@ (8002aec <SystemInit+0xe8>)
 8002a90:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002a92:	4b12      	ldr	r3, [pc, #72]	@ (8002adc <SystemInit+0xd8>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002a98:	4b10      	ldr	r3, [pc, #64]	@ (8002adc <SystemInit+0xd8>)
 8002a9a:	4a14      	ldr	r2, [pc, #80]	@ (8002aec <SystemInit+0xe8>)
 8002a9c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8002adc <SystemInit+0xd8>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8002adc <SystemInit+0xd8>)
 8002aa6:	4a11      	ldr	r2, [pc, #68]	@ (8002aec <SystemInit+0xe8>)
 8002aa8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8002adc <SystemInit+0xd8>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8002adc <SystemInit+0xd8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a09      	ldr	r2, [pc, #36]	@ (8002adc <SystemInit+0xd8>)
 8002ab6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002aba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002abc:	4b07      	ldr	r3, [pc, #28]	@ (8002adc <SystemInit+0xd8>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8002af0 <SystemInit+0xec>)
 8002ac4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002ac8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002aca:	bf00      	nop
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	e000ed00 	.word	0xe000ed00
 8002ad8:	52002000 	.word	0x52002000
 8002adc:	58024400 	.word	0x58024400
 8002ae0:	eaf6ed7f 	.word	0xeaf6ed7f
 8002ae4:	02020200 	.word	0x02020200
 8002ae8:	01ff0000 	.word	0x01ff0000
 8002aec:	01010280 	.word	0x01010280
 8002af0:	52004000 	.word	0x52004000

08002af4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08a      	sub	sp, #40	@ 0x28
 8002af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002afa:	f107 031c 	add.w	r3, r7, #28
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	605a      	str	r2, [r3, #4]
 8002b04:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b06:	463b      	mov	r3, r7
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	60da      	str	r2, [r3, #12]
 8002b12:	611a      	str	r2, [r3, #16]
 8002b14:	615a      	str	r2, [r3, #20]
 8002b16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b18:	4b33      	ldr	r3, [pc, #204]	@ (8002be8 <MX_TIM2_Init+0xf4>)
 8002b1a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002b1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280-1;
 8002b20:	4b31      	ldr	r3, [pc, #196]	@ (8002be8 <MX_TIM2_Init+0xf4>)
 8002b22:	f240 1217 	movw	r2, #279	@ 0x117
 8002b26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b28:	4b2f      	ldr	r3, [pc, #188]	@ (8002be8 <MX_TIM2_Init+0xf4>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 8002b2e:	4b2e      	ldr	r3, [pc, #184]	@ (8002be8 <MX_TIM2_Init+0xf4>)
 8002b30:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002b34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b36:	4b2c      	ldr	r3, [pc, #176]	@ (8002be8 <MX_TIM2_Init+0xf4>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b3c:	4b2a      	ldr	r3, [pc, #168]	@ (8002be8 <MX_TIM2_Init+0xf4>)
 8002b3e:	2280      	movs	r2, #128	@ 0x80
 8002b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002b42:	4829      	ldr	r0, [pc, #164]	@ (8002be8 <MX_TIM2_Init+0xf4>)
 8002b44:	f00a ff10 	bl	800d968 <HAL_TIM_PWM_Init>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8002b4e:	f7ff fc3b 	bl	80023c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b52:	2300      	movs	r3, #0
 8002b54:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b56:	2300      	movs	r3, #0
 8002b58:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b5a:	f107 031c 	add.w	r3, r7, #28
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4821      	ldr	r0, [pc, #132]	@ (8002be8 <MX_TIM2_Init+0xf4>)
 8002b62:	f00b fe4d 	bl	800e800 <HAL_TIMEx_MasterConfigSynchronization>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8002b6c:	f7ff fc2c 	bl	80023c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b70:	2360      	movs	r3, #96	@ 0x60
 8002b72:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002b74:	2300      	movs	r3, #0
 8002b76:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b80:	463b      	mov	r3, r7
 8002b82:	2200      	movs	r2, #0
 8002b84:	4619      	mov	r1, r3
 8002b86:	4818      	ldr	r0, [pc, #96]	@ (8002be8 <MX_TIM2_Init+0xf4>)
 8002b88:	f00b f95c 	bl	800de44 <HAL_TIM_PWM_ConfigChannel>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8002b92:	f7ff fc19 	bl	80023c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b96:	463b      	mov	r3, r7
 8002b98:	2204      	movs	r2, #4
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4812      	ldr	r0, [pc, #72]	@ (8002be8 <MX_TIM2_Init+0xf4>)
 8002b9e:	f00b f951 	bl	800de44 <HAL_TIM_PWM_ConfigChannel>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8002ba8:	f7ff fc0e 	bl	80023c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002bac:	463b      	mov	r3, r7
 8002bae:	2208      	movs	r2, #8
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	480d      	ldr	r0, [pc, #52]	@ (8002be8 <MX_TIM2_Init+0xf4>)
 8002bb4:	f00b f946 	bl	800de44 <HAL_TIM_PWM_ConfigChannel>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8002bbe:	f7ff fc03 	bl	80023c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002bc2:	463b      	mov	r3, r7
 8002bc4:	220c      	movs	r2, #12
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4807      	ldr	r0, [pc, #28]	@ (8002be8 <MX_TIM2_Init+0xf4>)
 8002bca:	f00b f93b 	bl	800de44 <HAL_TIM_PWM_ConfigChannel>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8002bd4:	f7ff fbf8 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002bd8:	4803      	ldr	r0, [pc, #12]	@ (8002be8 <MX_TIM2_Init+0xf4>)
 8002bda:	f000 f97d 	bl	8002ed8 <HAL_TIM_MspPostInit>

}
 8002bde:	bf00      	nop
 8002be0:	3728      	adds	r7, #40	@ 0x28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	24000f28 	.word	0x24000f28

08002bec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08a      	sub	sp, #40	@ 0x28
 8002bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bf2:	f107 031c 	add.w	r3, r7, #28
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	605a      	str	r2, [r3, #4]
 8002bfc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bfe:	463b      	mov	r3, r7
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	605a      	str	r2, [r3, #4]
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	60da      	str	r2, [r3, #12]
 8002c0a:	611a      	str	r2, [r3, #16]
 8002c0c:	615a      	str	r2, [r3, #20]
 8002c0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c10:	4b27      	ldr	r3, [pc, #156]	@ (8002cb0 <MX_TIM3_Init+0xc4>)
 8002c12:	4a28      	ldr	r2, [pc, #160]	@ (8002cb4 <MX_TIM3_Init+0xc8>)
 8002c14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280-1;
 8002c16:	4b26      	ldr	r3, [pc, #152]	@ (8002cb0 <MX_TIM3_Init+0xc4>)
 8002c18:	f240 1217 	movw	r2, #279	@ 0x117
 8002c1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c1e:	4b24      	ldr	r3, [pc, #144]	@ (8002cb0 <MX_TIM3_Init+0xc4>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7000;
 8002c24:	4b22      	ldr	r3, [pc, #136]	@ (8002cb0 <MX_TIM3_Init+0xc4>)
 8002c26:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002c2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c2c:	4b20      	ldr	r3, [pc, #128]	@ (8002cb0 <MX_TIM3_Init+0xc4>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c32:	4b1f      	ldr	r3, [pc, #124]	@ (8002cb0 <MX_TIM3_Init+0xc4>)
 8002c34:	2280      	movs	r2, #128	@ 0x80
 8002c36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002c38:	481d      	ldr	r0, [pc, #116]	@ (8002cb0 <MX_TIM3_Init+0xc4>)
 8002c3a:	f00a fe95 	bl	800d968 <HAL_TIM_PWM_Init>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8002c44:	f7ff fbc0 	bl	80023c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c50:	f107 031c 	add.w	r3, r7, #28
 8002c54:	4619      	mov	r1, r3
 8002c56:	4816      	ldr	r0, [pc, #88]	@ (8002cb0 <MX_TIM3_Init+0xc4>)
 8002c58:	f00b fdd2 	bl	800e800 <HAL_TIMEx_MasterConfigSynchronization>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8002c62:	f7ff fbb1 	bl	80023c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c66:	2360      	movs	r3, #96	@ 0x60
 8002c68:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c72:	2300      	movs	r3, #0
 8002c74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c76:	463b      	mov	r3, r7
 8002c78:	2200      	movs	r2, #0
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	480c      	ldr	r0, [pc, #48]	@ (8002cb0 <MX_TIM3_Init+0xc4>)
 8002c7e:	f00b f8e1 	bl	800de44 <HAL_TIM_PWM_ConfigChannel>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8002c88:	f7ff fb9e 	bl	80023c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c8c:	463b      	mov	r3, r7
 8002c8e:	2204      	movs	r2, #4
 8002c90:	4619      	mov	r1, r3
 8002c92:	4807      	ldr	r0, [pc, #28]	@ (8002cb0 <MX_TIM3_Init+0xc4>)
 8002c94:	f00b f8d6 	bl	800de44 <HAL_TIM_PWM_ConfigChannel>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8002c9e:	f7ff fb93 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002ca2:	4803      	ldr	r0, [pc, #12]	@ (8002cb0 <MX_TIM3_Init+0xc4>)
 8002ca4:	f000 f918 	bl	8002ed8 <HAL_TIM_MspPostInit>

}
 8002ca8:	bf00      	nop
 8002caa:	3728      	adds	r7, #40	@ 0x28
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	24000f74 	.word	0x24000f74
 8002cb4:	40000400 	.word	0x40000400

08002cb8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08a      	sub	sp, #40	@ 0x28
 8002cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cbe:	f107 031c 	add.w	r3, r7, #28
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	605a      	str	r2, [r3, #4]
 8002cc8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cca:	463b      	mov	r3, r7
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	609a      	str	r2, [r3, #8]
 8002cd4:	60da      	str	r2, [r3, #12]
 8002cd6:	611a      	str	r2, [r3, #16]
 8002cd8:	615a      	str	r2, [r3, #20]
 8002cda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002cdc:	4b32      	ldr	r3, [pc, #200]	@ (8002da8 <MX_TIM4_Init+0xf0>)
 8002cde:	4a33      	ldr	r2, [pc, #204]	@ (8002dac <MX_TIM4_Init+0xf4>)
 8002ce0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 280-1;
 8002ce2:	4b31      	ldr	r3, [pc, #196]	@ (8002da8 <MX_TIM4_Init+0xf0>)
 8002ce4:	f240 1217 	movw	r2, #279	@ 0x117
 8002ce8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cea:	4b2f      	ldr	r3, [pc, #188]	@ (8002da8 <MX_TIM4_Init+0xf0>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7000;
 8002cf0:	4b2d      	ldr	r3, [pc, #180]	@ (8002da8 <MX_TIM4_Init+0xf0>)
 8002cf2:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002cf6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cf8:	4b2b      	ldr	r3, [pc, #172]	@ (8002da8 <MX_TIM4_Init+0xf0>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002cfe:	4b2a      	ldr	r3, [pc, #168]	@ (8002da8 <MX_TIM4_Init+0xf0>)
 8002d00:	2280      	movs	r2, #128	@ 0x80
 8002d02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002d04:	4828      	ldr	r0, [pc, #160]	@ (8002da8 <MX_TIM4_Init+0xf0>)
 8002d06:	f00a fe2f 	bl	800d968 <HAL_TIM_PWM_Init>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8002d10:	f7ff fb5a 	bl	80023c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d1c:	f107 031c 	add.w	r3, r7, #28
 8002d20:	4619      	mov	r1, r3
 8002d22:	4821      	ldr	r0, [pc, #132]	@ (8002da8 <MX_TIM4_Init+0xf0>)
 8002d24:	f00b fd6c 	bl	800e800 <HAL_TIMEx_MasterConfigSynchronization>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8002d2e:	f7ff fb4b 	bl	80023c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d32:	2360      	movs	r3, #96	@ 0x60
 8002d34:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002d36:	2300      	movs	r3, #0
 8002d38:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d42:	463b      	mov	r3, r7
 8002d44:	2200      	movs	r2, #0
 8002d46:	4619      	mov	r1, r3
 8002d48:	4817      	ldr	r0, [pc, #92]	@ (8002da8 <MX_TIM4_Init+0xf0>)
 8002d4a:	f00b f87b 	bl	800de44 <HAL_TIM_PWM_ConfigChannel>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8002d54:	f7ff fb38 	bl	80023c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d58:	463b      	mov	r3, r7
 8002d5a:	2204      	movs	r2, #4
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4812      	ldr	r0, [pc, #72]	@ (8002da8 <MX_TIM4_Init+0xf0>)
 8002d60:	f00b f870 	bl	800de44 <HAL_TIM_PWM_ConfigChannel>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8002d6a:	f7ff fb2d 	bl	80023c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d6e:	463b      	mov	r3, r7
 8002d70:	2208      	movs	r2, #8
 8002d72:	4619      	mov	r1, r3
 8002d74:	480c      	ldr	r0, [pc, #48]	@ (8002da8 <MX_TIM4_Init+0xf0>)
 8002d76:	f00b f865 	bl	800de44 <HAL_TIM_PWM_ConfigChannel>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8002d80:	f7ff fb22 	bl	80023c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d84:	463b      	mov	r3, r7
 8002d86:	220c      	movs	r2, #12
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4807      	ldr	r0, [pc, #28]	@ (8002da8 <MX_TIM4_Init+0xf0>)
 8002d8c:	f00b f85a 	bl	800de44 <HAL_TIM_PWM_ConfigChannel>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8002d96:	f7ff fb17 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002d9a:	4803      	ldr	r0, [pc, #12]	@ (8002da8 <MX_TIM4_Init+0xf0>)
 8002d9c:	f000 f89c 	bl	8002ed8 <HAL_TIM_MspPostInit>

}
 8002da0:	bf00      	nop
 8002da2:	3728      	adds	r7, #40	@ 0x28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	24000fc0 	.word	0x24000fc0
 8002dac:	40000800 	.word	0x40000800

08002db0 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002db4:	4b0e      	ldr	r3, [pc, #56]	@ (8002df0 <MX_TIM13_Init+0x40>)
 8002db6:	4a0f      	ldr	r2, [pc, #60]	@ (8002df4 <MX_TIM13_Init+0x44>)
 8002db8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 280-1;
 8002dba:	4b0d      	ldr	r3, [pc, #52]	@ (8002df0 <MX_TIM13_Init+0x40>)
 8002dbc:	f240 1217 	movw	r2, #279	@ 0x117
 8002dc0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8002df0 <MX_TIM13_Init+0x40>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8002dc8:	4b09      	ldr	r3, [pc, #36]	@ (8002df0 <MX_TIM13_Init+0x40>)
 8002dca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002dce:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dd0:	4b07      	ldr	r3, [pc, #28]	@ (8002df0 <MX_TIM13_Init+0x40>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002dd6:	4b06      	ldr	r3, [pc, #24]	@ (8002df0 <MX_TIM13_Init+0x40>)
 8002dd8:	2280      	movs	r2, #128	@ 0x80
 8002dda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002ddc:	4804      	ldr	r0, [pc, #16]	@ (8002df0 <MX_TIM13_Init+0x40>)
 8002dde:	f00a fcf4 	bl	800d7ca <HAL_TIM_Base_Init>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8002de8:	f7ff faee 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002dec:	bf00      	nop
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	2400100c 	.word	0x2400100c
 8002df4:	40001c00 	.word	0x40001c00

08002df8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b087      	sub	sp, #28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e08:	d10f      	bne.n	8002e2a <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e0a:	4b1f      	ldr	r3, [pc, #124]	@ (8002e88 <HAL_TIM_PWM_MspInit+0x90>)
 8002e0c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002e10:	4a1d      	ldr	r2, [pc, #116]	@ (8002e88 <HAL_TIM_PWM_MspInit+0x90>)
 8002e12:	f043 0301 	orr.w	r3, r3, #1
 8002e16:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8002e88 <HAL_TIM_PWM_MspInit+0x90>)
 8002e1c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002e28:	e028      	b.n	8002e7c <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM3)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a17      	ldr	r2, [pc, #92]	@ (8002e8c <HAL_TIM_PWM_MspInit+0x94>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d10f      	bne.n	8002e54 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e34:	4b14      	ldr	r3, [pc, #80]	@ (8002e88 <HAL_TIM_PWM_MspInit+0x90>)
 8002e36:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002e3a:	4a13      	ldr	r2, [pc, #76]	@ (8002e88 <HAL_TIM_PWM_MspInit+0x90>)
 8002e3c:	f043 0302 	orr.w	r3, r3, #2
 8002e40:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002e44:	4b10      	ldr	r3, [pc, #64]	@ (8002e88 <HAL_TIM_PWM_MspInit+0x90>)
 8002e46:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	693b      	ldr	r3, [r7, #16]
}
 8002e52:	e013      	b.n	8002e7c <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM4)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a0d      	ldr	r2, [pc, #52]	@ (8002e90 <HAL_TIM_PWM_MspInit+0x98>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d10e      	bne.n	8002e7c <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e88 <HAL_TIM_PWM_MspInit+0x90>)
 8002e60:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002e64:	4a08      	ldr	r2, [pc, #32]	@ (8002e88 <HAL_TIM_PWM_MspInit+0x90>)
 8002e66:	f043 0304 	orr.w	r3, r3, #4
 8002e6a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002e6e:	4b06      	ldr	r3, [pc, #24]	@ (8002e88 <HAL_TIM_PWM_MspInit+0x90>)
 8002e70:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
}
 8002e7c:	bf00      	nop
 8002e7e:	371c      	adds	r7, #28
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	58024400 	.word	0x58024400
 8002e8c:	40000400 	.word	0x40000400
 8002e90:	40000800 	.word	0x40000800

08002e94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a0b      	ldr	r2, [pc, #44]	@ (8002ed0 <HAL_TIM_Base_MspInit+0x3c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d10e      	bne.n	8002ec4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed4 <HAL_TIM_Base_MspInit+0x40>)
 8002ea8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002eac:	4a09      	ldr	r2, [pc, #36]	@ (8002ed4 <HAL_TIM_Base_MspInit+0x40>)
 8002eae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002eb2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002eb6:	4b07      	ldr	r3, [pc, #28]	@ (8002ed4 <HAL_TIM_Base_MspInit+0x40>)
 8002eb8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002ebc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002ec4:	bf00      	nop
 8002ec6:	3714      	adds	r7, #20
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	40001c00 	.word	0x40001c00
 8002ed4:	58024400 	.word	0x58024400

08002ed8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b08c      	sub	sp, #48	@ 0x30
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee0:	f107 031c 	add.w	r3, r7, #28
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	605a      	str	r2, [r3, #4]
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	60da      	str	r2, [r3, #12]
 8002eee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ef8:	d13f      	bne.n	8002f7a <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002efa:	4b47      	ldr	r3, [pc, #284]	@ (8003018 <HAL_TIM_MspPostInit+0x140>)
 8002efc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002f00:	4a45      	ldr	r2, [pc, #276]	@ (8003018 <HAL_TIM_MspPostInit+0x140>)
 8002f02:	f043 0301 	orr.w	r3, r3, #1
 8002f06:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002f0a:	4b43      	ldr	r3, [pc, #268]	@ (8003018 <HAL_TIM_MspPostInit+0x140>)
 8002f0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	61bb      	str	r3, [r7, #24]
 8002f16:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f18:	4b3f      	ldr	r3, [pc, #252]	@ (8003018 <HAL_TIM_MspPostInit+0x140>)
 8002f1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002f1e:	4a3e      	ldr	r2, [pc, #248]	@ (8003018 <HAL_TIM_MspPostInit+0x140>)
 8002f20:	f043 0302 	orr.w	r3, r3, #2
 8002f24:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002f28:	4b3b      	ldr	r3, [pc, #236]	@ (8003018 <HAL_TIM_MspPostInit+0x140>)
 8002f2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8002f36:	f248 030c 	movw	r3, #32780	@ 0x800c
 8002f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f44:	2300      	movs	r3, #0
 8002f46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f4c:	f107 031c 	add.w	r3, r7, #28
 8002f50:	4619      	mov	r1, r3
 8002f52:	4832      	ldr	r0, [pc, #200]	@ (800301c <HAL_TIM_MspPostInit+0x144>)
 8002f54:	f006 f97a 	bl	800924c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f58:	2308      	movs	r3, #8
 8002f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f64:	2300      	movs	r3, #0
 8002f66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f6c:	f107 031c 	add.w	r3, r7, #28
 8002f70:	4619      	mov	r1, r3
 8002f72:	482b      	ldr	r0, [pc, #172]	@ (8003020 <HAL_TIM_MspPostInit+0x148>)
 8002f74:	f006 f96a 	bl	800924c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002f78:	e049      	b.n	800300e <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM3)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a29      	ldr	r2, [pc, #164]	@ (8003024 <HAL_TIM_MspPostInit+0x14c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d11f      	bne.n	8002fc4 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f84:	4b24      	ldr	r3, [pc, #144]	@ (8003018 <HAL_TIM_MspPostInit+0x140>)
 8002f86:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002f8a:	4a23      	ldr	r2, [pc, #140]	@ (8003018 <HAL_TIM_MspPostInit+0x140>)
 8002f8c:	f043 0302 	orr.w	r3, r3, #2
 8002f90:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002f94:	4b20      	ldr	r3, [pc, #128]	@ (8003018 <HAL_TIM_MspPostInit+0x140>)
 8002f96:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002fa2:	2330      	movs	r3, #48	@ 0x30
 8002fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fb6:	f107 031c 	add.w	r3, r7, #28
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4818      	ldr	r0, [pc, #96]	@ (8003020 <HAL_TIM_MspPostInit+0x148>)
 8002fbe:	f006 f945 	bl	800924c <HAL_GPIO_Init>
}
 8002fc2:	e024      	b.n	800300e <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a17      	ldr	r2, [pc, #92]	@ (8003028 <HAL_TIM_MspPostInit+0x150>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d11f      	bne.n	800300e <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fce:	4b12      	ldr	r3, [pc, #72]	@ (8003018 <HAL_TIM_MspPostInit+0x140>)
 8002fd0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002fd4:	4a10      	ldr	r2, [pc, #64]	@ (8003018 <HAL_TIM_MspPostInit+0x140>)
 8002fd6:	f043 0302 	orr.w	r3, r3, #2
 8002fda:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002fde:	4b0e      	ldr	r3, [pc, #56]	@ (8003018 <HAL_TIM_MspPostInit+0x140>)
 8002fe0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002fec:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ffe:	2302      	movs	r3, #2
 8003000:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003002:	f107 031c 	add.w	r3, r7, #28
 8003006:	4619      	mov	r1, r3
 8003008:	4805      	ldr	r0, [pc, #20]	@ (8003020 <HAL_TIM_MspPostInit+0x148>)
 800300a:	f006 f91f 	bl	800924c <HAL_GPIO_Init>
}
 800300e:	bf00      	nop
 8003010:	3730      	adds	r7, #48	@ 0x30
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	58024400 	.word	0x58024400
 800301c:	58020000 	.word	0x58020000
 8003020:	58020400 	.word	0x58020400
 8003024:	40000400 	.word	0x40000400
 8003028:	40000800 	.word	0x40000800

0800302c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003030:	4b22      	ldr	r3, [pc, #136]	@ (80030bc <MX_UART4_Init+0x90>)
 8003032:	4a23      	ldr	r2, [pc, #140]	@ (80030c0 <MX_UART4_Init+0x94>)
 8003034:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003036:	4b21      	ldr	r3, [pc, #132]	@ (80030bc <MX_UART4_Init+0x90>)
 8003038:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800303c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800303e:	4b1f      	ldr	r3, [pc, #124]	@ (80030bc <MX_UART4_Init+0x90>)
 8003040:	2200      	movs	r2, #0
 8003042:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003044:	4b1d      	ldr	r3, [pc, #116]	@ (80030bc <MX_UART4_Init+0x90>)
 8003046:	2200      	movs	r2, #0
 8003048:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800304a:	4b1c      	ldr	r3, [pc, #112]	@ (80030bc <MX_UART4_Init+0x90>)
 800304c:	2200      	movs	r2, #0
 800304e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003050:	4b1a      	ldr	r3, [pc, #104]	@ (80030bc <MX_UART4_Init+0x90>)
 8003052:	220c      	movs	r2, #12
 8003054:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003056:	4b19      	ldr	r3, [pc, #100]	@ (80030bc <MX_UART4_Init+0x90>)
 8003058:	2200      	movs	r2, #0
 800305a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800305c:	4b17      	ldr	r3, [pc, #92]	@ (80030bc <MX_UART4_Init+0x90>)
 800305e:	2200      	movs	r2, #0
 8003060:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003062:	4b16      	ldr	r3, [pc, #88]	@ (80030bc <MX_UART4_Init+0x90>)
 8003064:	2200      	movs	r2, #0
 8003066:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003068:	4b14      	ldr	r3, [pc, #80]	@ (80030bc <MX_UART4_Init+0x90>)
 800306a:	2200      	movs	r2, #0
 800306c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800306e:	4b13      	ldr	r3, [pc, #76]	@ (80030bc <MX_UART4_Init+0x90>)
 8003070:	2200      	movs	r2, #0
 8003072:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003074:	4811      	ldr	r0, [pc, #68]	@ (80030bc <MX_UART4_Init+0x90>)
 8003076:	f00b fc6f 	bl	800e958 <HAL_UART_Init>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8003080:	f7ff f9a2 	bl	80023c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003084:	2100      	movs	r1, #0
 8003086:	480d      	ldr	r0, [pc, #52]	@ (80030bc <MX_UART4_Init+0x90>)
 8003088:	f00e ff95 	bl	8011fb6 <HAL_UARTEx_SetTxFifoThreshold>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8003092:	f7ff f999 	bl	80023c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003096:	2100      	movs	r1, #0
 8003098:	4808      	ldr	r0, [pc, #32]	@ (80030bc <MX_UART4_Init+0x90>)
 800309a:	f00e ffca 	bl	8012032 <HAL_UARTEx_SetRxFifoThreshold>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80030a4:	f7ff f990 	bl	80023c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80030a8:	4804      	ldr	r0, [pc, #16]	@ (80030bc <MX_UART4_Init+0x90>)
 80030aa:	f00e ff4b 	bl	8011f44 <HAL_UARTEx_DisableFifoMode>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80030b4:	f7ff f988 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80030b8:	bf00      	nop
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	24001058 	.word	0x24001058
 80030c0:	40004c00 	.word	0x40004c00

080030c4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80030c8:	4b23      	ldr	r3, [pc, #140]	@ (8003158 <MX_USART1_UART_Init+0x94>)
 80030ca:	4a24      	ldr	r2, [pc, #144]	@ (800315c <MX_USART1_UART_Init+0x98>)
 80030cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 80030ce:	4b22      	ldr	r3, [pc, #136]	@ (8003158 <MX_USART1_UART_Init+0x94>)
 80030d0:	4a23      	ldr	r2, [pc, #140]	@ (8003160 <MX_USART1_UART_Init+0x9c>)
 80030d2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80030d4:	4b20      	ldr	r3, [pc, #128]	@ (8003158 <MX_USART1_UART_Init+0x94>)
 80030d6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80030da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80030dc:	4b1e      	ldr	r3, [pc, #120]	@ (8003158 <MX_USART1_UART_Init+0x94>)
 80030de:	2200      	movs	r2, #0
 80030e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80030e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003158 <MX_USART1_UART_Init+0x94>)
 80030e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030e8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80030ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003158 <MX_USART1_UART_Init+0x94>)
 80030ec:	220c      	movs	r2, #12
 80030ee:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030f0:	4b19      	ldr	r3, [pc, #100]	@ (8003158 <MX_USART1_UART_Init+0x94>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80030f6:	4b18      	ldr	r3, [pc, #96]	@ (8003158 <MX_USART1_UART_Init+0x94>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030fc:	4b16      	ldr	r3, [pc, #88]	@ (8003158 <MX_USART1_UART_Init+0x94>)
 80030fe:	2200      	movs	r2, #0
 8003100:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003102:	4b15      	ldr	r3, [pc, #84]	@ (8003158 <MX_USART1_UART_Init+0x94>)
 8003104:	2200      	movs	r2, #0
 8003106:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003108:	4b13      	ldr	r3, [pc, #76]	@ (8003158 <MX_USART1_UART_Init+0x94>)
 800310a:	2200      	movs	r2, #0
 800310c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800310e:	4812      	ldr	r0, [pc, #72]	@ (8003158 <MX_USART1_UART_Init+0x94>)
 8003110:	f00b fc22 	bl	800e958 <HAL_UART_Init>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800311a:	f7ff f955 	bl	80023c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800311e:	2100      	movs	r1, #0
 8003120:	480d      	ldr	r0, [pc, #52]	@ (8003158 <MX_USART1_UART_Init+0x94>)
 8003122:	f00e ff48 	bl	8011fb6 <HAL_UARTEx_SetTxFifoThreshold>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 800312c:	f7ff f94c 	bl	80023c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003130:	2100      	movs	r1, #0
 8003132:	4809      	ldr	r0, [pc, #36]	@ (8003158 <MX_USART1_UART_Init+0x94>)
 8003134:	f00e ff7d 	bl	8012032 <HAL_UARTEx_SetRxFifoThreshold>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800313e:	f7ff f943 	bl	80023c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003142:	4805      	ldr	r0, [pc, #20]	@ (8003158 <MX_USART1_UART_Init+0x94>)
 8003144:	f00e fefe 	bl	8011f44 <HAL_UARTEx_DisableFifoMode>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800314e:	f7ff f93b 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003152:	bf00      	nop
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	240010ec 	.word	0x240010ec
 800315c:	40011000 	.word	0x40011000
 8003160:	000186a0 	.word	0x000186a0

08003164 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003168:	4b22      	ldr	r3, [pc, #136]	@ (80031f4 <MX_USART3_UART_Init+0x90>)
 800316a:	4a23      	ldr	r2, [pc, #140]	@ (80031f8 <MX_USART3_UART_Init+0x94>)
 800316c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800316e:	4b21      	ldr	r3, [pc, #132]	@ (80031f4 <MX_USART3_UART_Init+0x90>)
 8003170:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003174:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003176:	4b1f      	ldr	r3, [pc, #124]	@ (80031f4 <MX_USART3_UART_Init+0x90>)
 8003178:	2200      	movs	r2, #0
 800317a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800317c:	4b1d      	ldr	r3, [pc, #116]	@ (80031f4 <MX_USART3_UART_Init+0x90>)
 800317e:	2200      	movs	r2, #0
 8003180:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003182:	4b1c      	ldr	r3, [pc, #112]	@ (80031f4 <MX_USART3_UART_Init+0x90>)
 8003184:	2200      	movs	r2, #0
 8003186:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003188:	4b1a      	ldr	r3, [pc, #104]	@ (80031f4 <MX_USART3_UART_Init+0x90>)
 800318a:	220c      	movs	r2, #12
 800318c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800318e:	4b19      	ldr	r3, [pc, #100]	@ (80031f4 <MX_USART3_UART_Init+0x90>)
 8003190:	2200      	movs	r2, #0
 8003192:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003194:	4b17      	ldr	r3, [pc, #92]	@ (80031f4 <MX_USART3_UART_Init+0x90>)
 8003196:	2200      	movs	r2, #0
 8003198:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800319a:	4b16      	ldr	r3, [pc, #88]	@ (80031f4 <MX_USART3_UART_Init+0x90>)
 800319c:	2200      	movs	r2, #0
 800319e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80031a0:	4b14      	ldr	r3, [pc, #80]	@ (80031f4 <MX_USART3_UART_Init+0x90>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031a6:	4b13      	ldr	r3, [pc, #76]	@ (80031f4 <MX_USART3_UART_Init+0x90>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80031ac:	4811      	ldr	r0, [pc, #68]	@ (80031f4 <MX_USART3_UART_Init+0x90>)
 80031ae:	f00b fbd3 	bl	800e958 <HAL_UART_Init>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80031b8:	f7ff f906 	bl	80023c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031bc:	2100      	movs	r1, #0
 80031be:	480d      	ldr	r0, [pc, #52]	@ (80031f4 <MX_USART3_UART_Init+0x90>)
 80031c0:	f00e fef9 	bl	8011fb6 <HAL_UARTEx_SetTxFifoThreshold>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80031ca:	f7ff f8fd 	bl	80023c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031ce:	2100      	movs	r1, #0
 80031d0:	4808      	ldr	r0, [pc, #32]	@ (80031f4 <MX_USART3_UART_Init+0x90>)
 80031d2:	f00e ff2e 	bl	8012032 <HAL_UARTEx_SetRxFifoThreshold>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80031dc:	f7ff f8f4 	bl	80023c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80031e0:	4804      	ldr	r0, [pc, #16]	@ (80031f4 <MX_USART3_UART_Init+0x90>)
 80031e2:	f00e feaf 	bl	8011f44 <HAL_UARTEx_DisableFifoMode>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80031ec:	f7ff f8ec 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80031f0:	bf00      	nop
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	24001180 	.word	0x24001180
 80031f8:	40004800 	.word	0x40004800

080031fc <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003200:	4b22      	ldr	r3, [pc, #136]	@ (800328c <MX_USART6_UART_Init+0x90>)
 8003202:	4a23      	ldr	r2, [pc, #140]	@ (8003290 <MX_USART6_UART_Init+0x94>)
 8003204:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003206:	4b21      	ldr	r3, [pc, #132]	@ (800328c <MX_USART6_UART_Init+0x90>)
 8003208:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800320c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800320e:	4b1f      	ldr	r3, [pc, #124]	@ (800328c <MX_USART6_UART_Init+0x90>)
 8003210:	2200      	movs	r2, #0
 8003212:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003214:	4b1d      	ldr	r3, [pc, #116]	@ (800328c <MX_USART6_UART_Init+0x90>)
 8003216:	2200      	movs	r2, #0
 8003218:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800321a:	4b1c      	ldr	r3, [pc, #112]	@ (800328c <MX_USART6_UART_Init+0x90>)
 800321c:	2200      	movs	r2, #0
 800321e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003220:	4b1a      	ldr	r3, [pc, #104]	@ (800328c <MX_USART6_UART_Init+0x90>)
 8003222:	220c      	movs	r2, #12
 8003224:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003226:	4b19      	ldr	r3, [pc, #100]	@ (800328c <MX_USART6_UART_Init+0x90>)
 8003228:	2200      	movs	r2, #0
 800322a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800322c:	4b17      	ldr	r3, [pc, #92]	@ (800328c <MX_USART6_UART_Init+0x90>)
 800322e:	2200      	movs	r2, #0
 8003230:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003232:	4b16      	ldr	r3, [pc, #88]	@ (800328c <MX_USART6_UART_Init+0x90>)
 8003234:	2200      	movs	r2, #0
 8003236:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003238:	4b14      	ldr	r3, [pc, #80]	@ (800328c <MX_USART6_UART_Init+0x90>)
 800323a:	2200      	movs	r2, #0
 800323c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800323e:	4b13      	ldr	r3, [pc, #76]	@ (800328c <MX_USART6_UART_Init+0x90>)
 8003240:	2200      	movs	r2, #0
 8003242:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003244:	4811      	ldr	r0, [pc, #68]	@ (800328c <MX_USART6_UART_Init+0x90>)
 8003246:	f00b fb87 	bl	800e958 <HAL_UART_Init>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8003250:	f7ff f8ba 	bl	80023c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003254:	2100      	movs	r1, #0
 8003256:	480d      	ldr	r0, [pc, #52]	@ (800328c <MX_USART6_UART_Init+0x90>)
 8003258:	f00e fead 	bl	8011fb6 <HAL_UARTEx_SetTxFifoThreshold>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8003262:	f7ff f8b1 	bl	80023c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003266:	2100      	movs	r1, #0
 8003268:	4808      	ldr	r0, [pc, #32]	@ (800328c <MX_USART6_UART_Init+0x90>)
 800326a:	f00e fee2 	bl	8012032 <HAL_UARTEx_SetRxFifoThreshold>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8003274:	f7ff f8a8 	bl	80023c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8003278:	4804      	ldr	r0, [pc, #16]	@ (800328c <MX_USART6_UART_Init+0x90>)
 800327a:	f00e fe63 	bl	8011f44 <HAL_UARTEx_DisableFifoMode>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8003284:	f7ff f8a0 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003288:	bf00      	nop
 800328a:	bd80      	pop	{r7, pc}
 800328c:	24001214 	.word	0x24001214
 8003290:	40011400 	.word	0x40011400

08003294 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b0c0      	sub	sp, #256	@ 0x100
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800329c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	605a      	str	r2, [r3, #4]
 80032a6:	609a      	str	r2, [r3, #8]
 80032a8:	60da      	str	r2, [r3, #12]
 80032aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80032b0:	22c0      	movs	r2, #192	@ 0xc0
 80032b2:	2100      	movs	r1, #0
 80032b4:	4618      	mov	r0, r3
 80032b6:	f013 fdee 	bl	8016e96 <memset>
  if(uartHandle->Instance==UART4)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a82      	ldr	r2, [pc, #520]	@ (80034c8 <HAL_UART_MspInit+0x234>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d17c      	bne.n	80033be <HAL_UART_MspInit+0x12a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80032c4:	f04f 0202 	mov.w	r2, #2
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80032d0:	2300      	movs	r3, #0
 80032d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80032da:	4618      	mov	r0, r3
 80032dc:	f007 faee 	bl	800a8bc <HAL_RCCEx_PeriphCLKConfig>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80032e6:	f7ff f86f 	bl	80023c8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80032ea:	4b78      	ldr	r3, [pc, #480]	@ (80034cc <HAL_UART_MspInit+0x238>)
 80032ec:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80032f0:	4a76      	ldr	r2, [pc, #472]	@ (80034cc <HAL_UART_MspInit+0x238>)
 80032f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80032f6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80032fa:	4b74      	ldr	r3, [pc, #464]	@ (80034cc <HAL_UART_MspInit+0x238>)
 80032fc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003300:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003304:	627b      	str	r3, [r7, #36]	@ 0x24
 8003306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003308:	4b70      	ldr	r3, [pc, #448]	@ (80034cc <HAL_UART_MspInit+0x238>)
 800330a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800330e:	4a6f      	ldr	r2, [pc, #444]	@ (80034cc <HAL_UART_MspInit+0x238>)
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003318:	4b6c      	ldr	r3, [pc, #432]	@ (80034cc <HAL_UART_MspInit+0x238>)
 800331a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	623b      	str	r3, [r7, #32]
 8003324:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003326:	2303      	movs	r3, #3
 8003328:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332c:	2302      	movs	r3, #2
 800332e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003332:	2300      	movs	r3, #0
 8003334:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003338:	2300      	movs	r3, #0
 800333a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800333e:	2308      	movs	r3, #8
 8003340:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003344:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003348:	4619      	mov	r1, r3
 800334a:	4861      	ldr	r0, [pc, #388]	@ (80034d0 <HAL_UART_MspInit+0x23c>)
 800334c:	f005 ff7e 	bl	800924c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8003350:	4b60      	ldr	r3, [pc, #384]	@ (80034d4 <HAL_UART_MspInit+0x240>)
 8003352:	4a61      	ldr	r2, [pc, #388]	@ (80034d8 <HAL_UART_MspInit+0x244>)
 8003354:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8003356:	4b5f      	ldr	r3, [pc, #380]	@ (80034d4 <HAL_UART_MspInit+0x240>)
 8003358:	223f      	movs	r2, #63	@ 0x3f
 800335a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800335c:	4b5d      	ldr	r3, [pc, #372]	@ (80034d4 <HAL_UART_MspInit+0x240>)
 800335e:	2200      	movs	r2, #0
 8003360:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003362:	4b5c      	ldr	r3, [pc, #368]	@ (80034d4 <HAL_UART_MspInit+0x240>)
 8003364:	2200      	movs	r2, #0
 8003366:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003368:	4b5a      	ldr	r3, [pc, #360]	@ (80034d4 <HAL_UART_MspInit+0x240>)
 800336a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800336e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003370:	4b58      	ldr	r3, [pc, #352]	@ (80034d4 <HAL_UART_MspInit+0x240>)
 8003372:	2200      	movs	r2, #0
 8003374:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003376:	4b57      	ldr	r3, [pc, #348]	@ (80034d4 <HAL_UART_MspInit+0x240>)
 8003378:	2200      	movs	r2, #0
 800337a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800337c:	4b55      	ldr	r3, [pc, #340]	@ (80034d4 <HAL_UART_MspInit+0x240>)
 800337e:	2200      	movs	r2, #0
 8003380:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003382:	4b54      	ldr	r3, [pc, #336]	@ (80034d4 <HAL_UART_MspInit+0x240>)
 8003384:	2200      	movs	r2, #0
 8003386:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003388:	4b52      	ldr	r3, [pc, #328]	@ (80034d4 <HAL_UART_MspInit+0x240>)
 800338a:	2200      	movs	r2, #0
 800338c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800338e:	4851      	ldr	r0, [pc, #324]	@ (80034d4 <HAL_UART_MspInit+0x240>)
 8003390:	f002 fd0e 	bl	8005db0 <HAL_DMA_Init>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 800339a:	f7ff f815 	bl	80023c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a4c      	ldr	r2, [pc, #304]	@ (80034d4 <HAL_UART_MspInit+0x240>)
 80033a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80033a6:	4a4b      	ldr	r2, [pc, #300]	@ (80034d4 <HAL_UART_MspInit+0x240>)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80033ac:	2200      	movs	r2, #0
 80033ae:	2105      	movs	r1, #5
 80033b0:	2034      	movs	r0, #52	@ 0x34
 80033b2:	f002 fc5d 	bl	8005c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80033b6:	2034      	movs	r0, #52	@ 0x34
 80033b8:	f002 fc74 	bl	8005ca4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80033bc:	e16a      	b.n	8003694 <HAL_UART_MspInit+0x400>
  else if(uartHandle->Instance==USART1)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a46      	ldr	r2, [pc, #280]	@ (80034dc <HAL_UART_MspInit+0x248>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	f040 808f 	bne.w	80034e8 <HAL_UART_MspInit+0x254>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80033ca:	f04f 0201 	mov.w	r2, #1
 80033ce:	f04f 0300 	mov.w	r3, #0
 80033d2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80033d6:	2300      	movs	r3, #0
 80033d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80033e0:	4618      	mov	r0, r3
 80033e2:	f007 fa6b 	bl	800a8bc <HAL_RCCEx_PeriphCLKConfig>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 80033ec:	f7fe ffec 	bl	80023c8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80033f0:	4b36      	ldr	r3, [pc, #216]	@ (80034cc <HAL_UART_MspInit+0x238>)
 80033f2:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80033f6:	4a35      	ldr	r2, [pc, #212]	@ (80034cc <HAL_UART_MspInit+0x238>)
 80033f8:	f043 0310 	orr.w	r3, r3, #16
 80033fc:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8003400:	4b32      	ldr	r3, [pc, #200]	@ (80034cc <HAL_UART_MspInit+0x238>)
 8003402:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003406:	f003 0310 	and.w	r3, r3, #16
 800340a:	61fb      	str	r3, [r7, #28]
 800340c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800340e:	4b2f      	ldr	r3, [pc, #188]	@ (80034cc <HAL_UART_MspInit+0x238>)
 8003410:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003414:	4a2d      	ldr	r2, [pc, #180]	@ (80034cc <HAL_UART_MspInit+0x238>)
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800341e:	4b2b      	ldr	r3, [pc, #172]	@ (80034cc <HAL_UART_MspInit+0x238>)
 8003420:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	61bb      	str	r3, [r7, #24]
 800342a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|SBUS_RX_Pin;
 800342c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003430:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003434:	2302      	movs	r3, #2
 8003436:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343a:	2300      	movs	r3, #0
 800343c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003440:	2300      	movs	r3, #0
 8003442:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003446:	2307      	movs	r3, #7
 8003448:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800344c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003450:	4619      	mov	r1, r3
 8003452:	481f      	ldr	r0, [pc, #124]	@ (80034d0 <HAL_UART_MspInit+0x23c>)
 8003454:	f005 fefa 	bl	800924c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8003458:	4b21      	ldr	r3, [pc, #132]	@ (80034e0 <HAL_UART_MspInit+0x24c>)
 800345a:	4a22      	ldr	r2, [pc, #136]	@ (80034e4 <HAL_UART_MspInit+0x250>)
 800345c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800345e:	4b20      	ldr	r3, [pc, #128]	@ (80034e0 <HAL_UART_MspInit+0x24c>)
 8003460:	2229      	movs	r2, #41	@ 0x29
 8003462:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003464:	4b1e      	ldr	r3, [pc, #120]	@ (80034e0 <HAL_UART_MspInit+0x24c>)
 8003466:	2200      	movs	r2, #0
 8003468:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800346a:	4b1d      	ldr	r3, [pc, #116]	@ (80034e0 <HAL_UART_MspInit+0x24c>)
 800346c:	2200      	movs	r2, #0
 800346e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003470:	4b1b      	ldr	r3, [pc, #108]	@ (80034e0 <HAL_UART_MspInit+0x24c>)
 8003472:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003476:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003478:	4b19      	ldr	r3, [pc, #100]	@ (80034e0 <HAL_UART_MspInit+0x24c>)
 800347a:	2200      	movs	r2, #0
 800347c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800347e:	4b18      	ldr	r3, [pc, #96]	@ (80034e0 <HAL_UART_MspInit+0x24c>)
 8003480:	2200      	movs	r2, #0
 8003482:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003484:	4b16      	ldr	r3, [pc, #88]	@ (80034e0 <HAL_UART_MspInit+0x24c>)
 8003486:	2200      	movs	r2, #0
 8003488:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800348a:	4b15      	ldr	r3, [pc, #84]	@ (80034e0 <HAL_UART_MspInit+0x24c>)
 800348c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003490:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003492:	4b13      	ldr	r3, [pc, #76]	@ (80034e0 <HAL_UART_MspInit+0x24c>)
 8003494:	2200      	movs	r2, #0
 8003496:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003498:	4811      	ldr	r0, [pc, #68]	@ (80034e0 <HAL_UART_MspInit+0x24c>)
 800349a:	f002 fc89 	bl	8005db0 <HAL_DMA_Init>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <HAL_UART_MspInit+0x214>
      Error_Handler();
 80034a4:	f7fe ff90 	bl	80023c8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a0d      	ldr	r2, [pc, #52]	@ (80034e0 <HAL_UART_MspInit+0x24c>)
 80034ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80034b0:	4a0b      	ldr	r2, [pc, #44]	@ (80034e0 <HAL_UART_MspInit+0x24c>)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80034b6:	2200      	movs	r2, #0
 80034b8:	2105      	movs	r1, #5
 80034ba:	2025      	movs	r0, #37	@ 0x25
 80034bc:	f002 fbd8 	bl	8005c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80034c0:	2025      	movs	r0, #37	@ 0x25
 80034c2:	f002 fbef 	bl	8005ca4 <HAL_NVIC_EnableIRQ>
}
 80034c6:	e0e5      	b.n	8003694 <HAL_UART_MspInit+0x400>
 80034c8:	40004c00 	.word	0x40004c00
 80034cc:	58024400 	.word	0x58024400
 80034d0:	58020000 	.word	0x58020000
 80034d4:	240012a8 	.word	0x240012a8
 80034d8:	40020040 	.word	0x40020040
 80034dc:	40011000 	.word	0x40011000
 80034e0:	24001320 	.word	0x24001320
 80034e4:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART3)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a6c      	ldr	r2, [pc, #432]	@ (80036a0 <HAL_UART_MspInit+0x40c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d17d      	bne.n	80035ee <HAL_UART_MspInit+0x35a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80034f2:	f04f 0202 	mov.w	r2, #2
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80034fe:	2300      	movs	r3, #0
 8003500:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003504:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003508:	4618      	mov	r0, r3
 800350a:	f007 f9d7 	bl	800a8bc <HAL_RCCEx_PeriphCLKConfig>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <HAL_UART_MspInit+0x284>
      Error_Handler();
 8003514:	f7fe ff58 	bl	80023c8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003518:	4b62      	ldr	r3, [pc, #392]	@ (80036a4 <HAL_UART_MspInit+0x410>)
 800351a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800351e:	4a61      	ldr	r2, [pc, #388]	@ (80036a4 <HAL_UART_MspInit+0x410>)
 8003520:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003524:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003528:	4b5e      	ldr	r3, [pc, #376]	@ (80036a4 <HAL_UART_MspInit+0x410>)
 800352a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800352e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003536:	4b5b      	ldr	r3, [pc, #364]	@ (80036a4 <HAL_UART_MspInit+0x410>)
 8003538:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800353c:	4a59      	ldr	r2, [pc, #356]	@ (80036a4 <HAL_UART_MspInit+0x410>)
 800353e:	f043 0304 	orr.w	r3, r3, #4
 8003542:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003546:	4b57      	ldr	r3, [pc, #348]	@ (80036a4 <HAL_UART_MspInit+0x410>)
 8003548:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800354c:	f003 0304 	and.w	r3, r3, #4
 8003550:	613b      	str	r3, [r7, #16]
 8003552:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003554:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003558:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355c:	2302      	movs	r3, #2
 800355e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003562:	2300      	movs	r3, #0
 8003564:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003568:	2300      	movs	r3, #0
 800356a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800356e:	2307      	movs	r3, #7
 8003570:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003574:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003578:	4619      	mov	r1, r3
 800357a:	484b      	ldr	r0, [pc, #300]	@ (80036a8 <HAL_UART_MspInit+0x414>)
 800357c:	f005 fe66 	bl	800924c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003580:	4b4a      	ldr	r3, [pc, #296]	@ (80036ac <HAL_UART_MspInit+0x418>)
 8003582:	4a4b      	ldr	r2, [pc, #300]	@ (80036b0 <HAL_UART_MspInit+0x41c>)
 8003584:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003586:	4b49      	ldr	r3, [pc, #292]	@ (80036ac <HAL_UART_MspInit+0x418>)
 8003588:	222d      	movs	r2, #45	@ 0x2d
 800358a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800358c:	4b47      	ldr	r3, [pc, #284]	@ (80036ac <HAL_UART_MspInit+0x418>)
 800358e:	2200      	movs	r2, #0
 8003590:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003592:	4b46      	ldr	r3, [pc, #280]	@ (80036ac <HAL_UART_MspInit+0x418>)
 8003594:	2200      	movs	r2, #0
 8003596:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003598:	4b44      	ldr	r3, [pc, #272]	@ (80036ac <HAL_UART_MspInit+0x418>)
 800359a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800359e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035a0:	4b42      	ldr	r3, [pc, #264]	@ (80036ac <HAL_UART_MspInit+0x418>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035a6:	4b41      	ldr	r3, [pc, #260]	@ (80036ac <HAL_UART_MspInit+0x418>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80035ac:	4b3f      	ldr	r3, [pc, #252]	@ (80036ac <HAL_UART_MspInit+0x418>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035b2:	4b3e      	ldr	r3, [pc, #248]	@ (80036ac <HAL_UART_MspInit+0x418>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035b8:	4b3c      	ldr	r3, [pc, #240]	@ (80036ac <HAL_UART_MspInit+0x418>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80035be:	483b      	ldr	r0, [pc, #236]	@ (80036ac <HAL_UART_MspInit+0x418>)
 80035c0:	f002 fbf6 	bl	8005db0 <HAL_DMA_Init>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_UART_MspInit+0x33a>
      Error_Handler();
 80035ca:	f7fe fefd 	bl	80023c8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a36      	ldr	r2, [pc, #216]	@ (80036ac <HAL_UART_MspInit+0x418>)
 80035d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80035d6:	4a35      	ldr	r2, [pc, #212]	@ (80036ac <HAL_UART_MspInit+0x418>)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80035dc:	2200      	movs	r2, #0
 80035de:	2105      	movs	r1, #5
 80035e0:	2027      	movs	r0, #39	@ 0x27
 80035e2:	f002 fb45 	bl	8005c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80035e6:	2027      	movs	r0, #39	@ 0x27
 80035e8:	f002 fb5c 	bl	8005ca4 <HAL_NVIC_EnableIRQ>
}
 80035ec:	e052      	b.n	8003694 <HAL_UART_MspInit+0x400>
  else if(uartHandle->Instance==USART6)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a30      	ldr	r2, [pc, #192]	@ (80036b4 <HAL_UART_MspInit+0x420>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d14d      	bne.n	8003694 <HAL_UART_MspInit+0x400>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80035f8:	f04f 0201 	mov.w	r2, #1
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003604:	2300      	movs	r3, #0
 8003606:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800360a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800360e:	4618      	mov	r0, r3
 8003610:	f007 f954 	bl	800a8bc <HAL_RCCEx_PeriphCLKConfig>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <HAL_UART_MspInit+0x38a>
      Error_Handler();
 800361a:	f7fe fed5 	bl	80023c8 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800361e:	4b21      	ldr	r3, [pc, #132]	@ (80036a4 <HAL_UART_MspInit+0x410>)
 8003620:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003624:	4a1f      	ldr	r2, [pc, #124]	@ (80036a4 <HAL_UART_MspInit+0x410>)
 8003626:	f043 0320 	orr.w	r3, r3, #32
 800362a:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 800362e:	4b1d      	ldr	r3, [pc, #116]	@ (80036a4 <HAL_UART_MspInit+0x410>)
 8003630:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003634:	f003 0320 	and.w	r3, r3, #32
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800363c:	4b19      	ldr	r3, [pc, #100]	@ (80036a4 <HAL_UART_MspInit+0x410>)
 800363e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003642:	4a18      	ldr	r2, [pc, #96]	@ (80036a4 <HAL_UART_MspInit+0x410>)
 8003644:	f043 0304 	orr.w	r3, r3, #4
 8003648:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800364c:	4b15      	ldr	r3, [pc, #84]	@ (80036a4 <HAL_UART_MspInit+0x410>)
 800364e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	60bb      	str	r3, [r7, #8]
 8003658:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800365a:	23c0      	movs	r3, #192	@ 0xc0
 800365c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003660:	2302      	movs	r3, #2
 8003662:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003666:	2300      	movs	r3, #0
 8003668:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800366c:	2300      	movs	r3, #0
 800366e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003672:	2307      	movs	r3, #7
 8003674:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003678:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800367c:	4619      	mov	r1, r3
 800367e:	480a      	ldr	r0, [pc, #40]	@ (80036a8 <HAL_UART_MspInit+0x414>)
 8003680:	f005 fde4 	bl	800924c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003684:	2200      	movs	r2, #0
 8003686:	2105      	movs	r1, #5
 8003688:	2047      	movs	r0, #71	@ 0x47
 800368a:	f002 faf1 	bl	8005c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800368e:	2047      	movs	r0, #71	@ 0x47
 8003690:	f002 fb08 	bl	8005ca4 <HAL_NVIC_EnableIRQ>
}
 8003694:	bf00      	nop
 8003696:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40004800 	.word	0x40004800
 80036a4:	58024400 	.word	0x58024400
 80036a8:	58020800 	.word	0x58020800
 80036ac:	24001398 	.word	0x24001398
 80036b0:	40020028 	.word	0x40020028
 80036b4:	40011400 	.word	0x40011400

080036b8 <Reset_UART>:
  /* USER CODE END USART6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void Reset_UART(UART_HandleTypeDef *huart) {
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]

      // Clear any pending error flags
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF | UART_CLEAR_OREF);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	220f      	movs	r2, #15
 80036c6:	621a      	str	r2, [r3, #32]

    // Abort ongoing UART transfer
    if (HAL_UART_Abort_IT(huart) != HAL_OK) {
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f00b fbe5 	bl	800ee98 <HAL_UART_Abort_IT>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <Reset_UART+0x20>
        // Abort Error
        Error_Handler();
 80036d4:	f7fe fe78 	bl	80023c8 <Error_Handler>
    }
     if(huart == &huart3){
    	 MX_USART3_UART_Init();
     }
*/
}
 80036d8:	bf00      	nop
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	4603      	mov	r3, r0
 80036e8:	460a      	mov	r2, r1
 80036ea:	71fb      	strb	r3, [r7, #7]
 80036ec:	4613      	mov	r3, r2
 80036ee:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 80036f0:	2200      	movs	r2, #0
 80036f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80036f6:	480f      	ldr	r0, [pc, #60]	@ (8003734 <BMP280_write+0x54>)
 80036f8:	f005 ff58 	bl	80095ac <HAL_GPIO_WritePin>
	Address &= 0x7F;
 80036fc:	79fb      	ldrb	r3, [r7, #7]
 80036fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003702:	b2db      	uxtb	r3, r3
 8003704:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8003706:	1df9      	adds	r1, r7, #7
 8003708:	2364      	movs	r3, #100	@ 0x64
 800370a:	2201      	movs	r2, #1
 800370c:	480a      	ldr	r0, [pc, #40]	@ (8003738 <BMP280_write+0x58>)
 800370e:	f008 ffd9 	bl	800c6c4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 8003712:	1db9      	adds	r1, r7, #6
 8003714:	2364      	movs	r3, #100	@ 0x64
 8003716:	2201      	movs	r2, #1
 8003718:	4807      	ldr	r0, [pc, #28]	@ (8003738 <BMP280_write+0x58>)
 800371a:	f008 ffd3 	bl	800c6c4 <HAL_SPI_Transmit>

	BMP280_unselect();
 800371e:	2201      	movs	r2, #1
 8003720:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003724:	4803      	ldr	r0, [pc, #12]	@ (8003734 <BMP280_write+0x54>)
 8003726:	f005 ff41 	bl	80095ac <HAL_GPIO_WritePin>
}
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	58020400 	.word	0x58020400
 8003738:	24000e50 	.word	0x24000e50

0800373c <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	4603      	mov	r3, r0
 8003744:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 8003746:	79fb      	ldrb	r3, [r7, #7]
 8003748:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800374c:	b2db      	uxtb	r3, r3
 800374e:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 8003750:	2200      	movs	r2, #0
 8003752:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003756:	480e      	ldr	r0, [pc, #56]	@ (8003790 <BMP280_read+0x54>)
 8003758:	f005 ff28 	bl	80095ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 800375c:	f107 010f 	add.w	r1, r7, #15
 8003760:	2364      	movs	r3, #100	@ 0x64
 8003762:	2201      	movs	r2, #1
 8003764:	480b      	ldr	r0, [pc, #44]	@ (8003794 <BMP280_read+0x58>)
 8003766:	f008 ffad 	bl	800c6c4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 800376a:	f107 010f 	add.w	r1, r7, #15
 800376e:	2364      	movs	r3, #100	@ 0x64
 8003770:	2201      	movs	r2, #1
 8003772:	4808      	ldr	r0, [pc, #32]	@ (8003794 <BMP280_read+0x58>)
 8003774:	f009 f994 	bl	800caa0 <HAL_SPI_Receive>
	BMP280_unselect();
 8003778:	2201      	movs	r2, #1
 800377a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800377e:	4804      	ldr	r0, [pc, #16]	@ (8003790 <BMP280_read+0x54>)
 8003780:	f005 ff14 	bl	80095ac <HAL_GPIO_WritePin>

	return Buffer;
 8003784:	7bfb      	ldrb	r3, [r7, #15]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	58020400 	.word	0x58020400
 8003794:	24000e50 	.word	0x24000e50

08003798 <BMP280_config>:

void BMP280_config(void){
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 800379c:	2157      	movs	r1, #87	@ 0x57
 800379e:	20f4      	movs	r0, #244	@ 0xf4
 80037a0:	f7ff ff9e 	bl	80036e0 <BMP280_write>
	BMP280_write(config, 0x10);
 80037a4:	2110      	movs	r1, #16
 80037a6:	20f5      	movs	r0, #245	@ 0xf5
 80037a8:	f7ff ff9a 	bl	80036e0 <BMP280_write>
}
 80037ac:	bf00      	nop
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b088      	sub	sp, #32
 80037b4:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 80037b6:	2388      	movs	r3, #136	@ 0x88
 80037b8:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 80037ba:	2300      	movs	r3, #0
 80037bc:	607b      	str	r3, [r7, #4]
 80037be:	f107 0308 	add.w	r3, r7, #8
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	605a      	str	r2, [r3, #4]
 80037c8:	609a      	str	r2, [r3, #8]
 80037ca:	60da      	str	r2, [r3, #12]
 80037cc:	611a      	str	r2, [r3, #16]
	BMP280_select();
 80037ce:	2200      	movs	r2, #0
 80037d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80037d4:	4843      	ldr	r0, [pc, #268]	@ (80038e4 <BMP280_calibrationData+0x134>)
 80037d6:	f005 fee9 	bl	80095ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80037da:	f107 011f 	add.w	r1, r7, #31
 80037de:	2364      	movs	r3, #100	@ 0x64
 80037e0:	2201      	movs	r2, #1
 80037e2:	4841      	ldr	r0, [pc, #260]	@ (80038e8 <BMP280_calibrationData+0x138>)
 80037e4:	f008 ff6e 	bl	800c6c4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 80037e8:	1d39      	adds	r1, r7, #4
 80037ea:	2364      	movs	r3, #100	@ 0x64
 80037ec:	2218      	movs	r2, #24
 80037ee:	483e      	ldr	r0, [pc, #248]	@ (80038e8 <BMP280_calibrationData+0x138>)
 80037f0:	f009 f956 	bl	800caa0 <HAL_SPI_Receive>
	BMP280_unselect();
 80037f4:	2201      	movs	r2, #1
 80037f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80037fa:	483a      	ldr	r0, [pc, #232]	@ (80038e4 <BMP280_calibrationData+0x134>)
 80037fc:	f005 fed6 	bl	80095ac <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 8003800:	797b      	ldrb	r3, [r7, #5]
 8003802:	021b      	lsls	r3, r3, #8
 8003804:	b21a      	sxth	r2, r3
 8003806:	793b      	ldrb	r3, [r7, #4]
 8003808:	b21b      	sxth	r3, r3
 800380a:	4313      	orrs	r3, r2
 800380c:	b21b      	sxth	r3, r3
 800380e:	b29a      	uxth	r2, r3
 8003810:	4b36      	ldr	r3, [pc, #216]	@ (80038ec <BMP280_calibrationData+0x13c>)
 8003812:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 8003814:	79fb      	ldrb	r3, [r7, #7]
 8003816:	021b      	lsls	r3, r3, #8
 8003818:	b21a      	sxth	r2, r3
 800381a:	79bb      	ldrb	r3, [r7, #6]
 800381c:	b21b      	sxth	r3, r3
 800381e:	4313      	orrs	r3, r2
 8003820:	b21a      	sxth	r2, r3
 8003822:	4b33      	ldr	r3, [pc, #204]	@ (80038f0 <BMP280_calibrationData+0x140>)
 8003824:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 8003826:	7a7b      	ldrb	r3, [r7, #9]
 8003828:	021b      	lsls	r3, r3, #8
 800382a:	b21a      	sxth	r2, r3
 800382c:	7a3b      	ldrb	r3, [r7, #8]
 800382e:	b21b      	sxth	r3, r3
 8003830:	4313      	orrs	r3, r2
 8003832:	b21a      	sxth	r2, r3
 8003834:	4b2f      	ldr	r3, [pc, #188]	@ (80038f4 <BMP280_calibrationData+0x144>)
 8003836:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 8003838:	7afb      	ldrb	r3, [r7, #11]
 800383a:	021b      	lsls	r3, r3, #8
 800383c:	b21a      	sxth	r2, r3
 800383e:	7abb      	ldrb	r3, [r7, #10]
 8003840:	b21b      	sxth	r3, r3
 8003842:	4313      	orrs	r3, r2
 8003844:	b21b      	sxth	r3, r3
 8003846:	b29a      	uxth	r2, r3
 8003848:	4b2b      	ldr	r3, [pc, #172]	@ (80038f8 <BMP280_calibrationData+0x148>)
 800384a:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 800384c:	7b7b      	ldrb	r3, [r7, #13]
 800384e:	021b      	lsls	r3, r3, #8
 8003850:	b21a      	sxth	r2, r3
 8003852:	7b3b      	ldrb	r3, [r7, #12]
 8003854:	b21b      	sxth	r3, r3
 8003856:	4313      	orrs	r3, r2
 8003858:	b21a      	sxth	r2, r3
 800385a:	4b28      	ldr	r3, [pc, #160]	@ (80038fc <BMP280_calibrationData+0x14c>)
 800385c:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 800385e:	7bfb      	ldrb	r3, [r7, #15]
 8003860:	021b      	lsls	r3, r3, #8
 8003862:	b21a      	sxth	r2, r3
 8003864:	7bbb      	ldrb	r3, [r7, #14]
 8003866:	b21b      	sxth	r3, r3
 8003868:	4313      	orrs	r3, r2
 800386a:	b21a      	sxth	r2, r3
 800386c:	4b24      	ldr	r3, [pc, #144]	@ (8003900 <BMP280_calibrationData+0x150>)
 800386e:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8003870:	7c7b      	ldrb	r3, [r7, #17]
 8003872:	021b      	lsls	r3, r3, #8
 8003874:	b21a      	sxth	r2, r3
 8003876:	7c3b      	ldrb	r3, [r7, #16]
 8003878:	b21b      	sxth	r3, r3
 800387a:	4313      	orrs	r3, r2
 800387c:	b21a      	sxth	r2, r3
 800387e:	4b21      	ldr	r3, [pc, #132]	@ (8003904 <BMP280_calibrationData+0x154>)
 8003880:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 8003882:	7cfb      	ldrb	r3, [r7, #19]
 8003884:	021b      	lsls	r3, r3, #8
 8003886:	b21a      	sxth	r2, r3
 8003888:	7cbb      	ldrb	r3, [r7, #18]
 800388a:	b21b      	sxth	r3, r3
 800388c:	4313      	orrs	r3, r2
 800388e:	b21a      	sxth	r2, r3
 8003890:	4b1d      	ldr	r3, [pc, #116]	@ (8003908 <BMP280_calibrationData+0x158>)
 8003892:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 8003894:	7d7b      	ldrb	r3, [r7, #21]
 8003896:	021b      	lsls	r3, r3, #8
 8003898:	b21a      	sxth	r2, r3
 800389a:	7d3b      	ldrb	r3, [r7, #20]
 800389c:	b21b      	sxth	r3, r3
 800389e:	4313      	orrs	r3, r2
 80038a0:	b21a      	sxth	r2, r3
 80038a2:	4b1a      	ldr	r3, [pc, #104]	@ (800390c <BMP280_calibrationData+0x15c>)
 80038a4:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 80038a6:	7dfb      	ldrb	r3, [r7, #23]
 80038a8:	021b      	lsls	r3, r3, #8
 80038aa:	b21a      	sxth	r2, r3
 80038ac:	7dbb      	ldrb	r3, [r7, #22]
 80038ae:	b21b      	sxth	r3, r3
 80038b0:	4313      	orrs	r3, r2
 80038b2:	b21a      	sxth	r2, r3
 80038b4:	4b16      	ldr	r3, [pc, #88]	@ (8003910 <BMP280_calibrationData+0x160>)
 80038b6:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 80038b8:	7e7b      	ldrb	r3, [r7, #25]
 80038ba:	021b      	lsls	r3, r3, #8
 80038bc:	b21a      	sxth	r2, r3
 80038be:	7e3b      	ldrb	r3, [r7, #24]
 80038c0:	b21b      	sxth	r3, r3
 80038c2:	4313      	orrs	r3, r2
 80038c4:	b21a      	sxth	r2, r3
 80038c6:	4b13      	ldr	r3, [pc, #76]	@ (8003914 <BMP280_calibrationData+0x164>)
 80038c8:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 80038ca:	7efb      	ldrb	r3, [r7, #27]
 80038cc:	021b      	lsls	r3, r3, #8
 80038ce:	b21a      	sxth	r2, r3
 80038d0:	7ebb      	ldrb	r3, [r7, #26]
 80038d2:	b21b      	sxth	r3, r3
 80038d4:	4313      	orrs	r3, r2
 80038d6:	b21a      	sxth	r2, r3
 80038d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003918 <BMP280_calibrationData+0x168>)
 80038da:	801a      	strh	r2, [r3, #0]
}
 80038dc:	bf00      	nop
 80038de:	3720      	adds	r7, #32
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	58020400 	.word	0x58020400
 80038e8:	24000e50 	.word	0x24000e50
 80038ec:	24001424 	.word	0x24001424
 80038f0:	24001428 	.word	0x24001428
 80038f4:	2400142a 	.word	0x2400142a
 80038f8:	24001426 	.word	0x24001426
 80038fc:	2400142c 	.word	0x2400142c
 8003900:	2400142e 	.word	0x2400142e
 8003904:	24001430 	.word	0x24001430
 8003908:	24001432 	.word	0x24001432
 800390c:	24001434 	.word	0x24001434
 8003910:	24001436 	.word	0x24001436
 8003914:	24001438 	.word	0x24001438
 8003918:	2400143a 	.word	0x2400143a

0800391c <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 8003922:	23f7      	movs	r3, #247	@ 0xf7
 8003924:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 8003926:	2300      	movs	r3, #0
 8003928:	603b      	str	r3, [r7, #0]
 800392a:	2300      	movs	r3, #0
 800392c:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 800392e:	2200      	movs	r2, #0
 8003930:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003934:	4817      	ldr	r0, [pc, #92]	@ (8003994 <BMP280_readRawValues+0x78>)
 8003936:	f005 fe39 	bl	80095ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 800393a:	1df9      	adds	r1, r7, #7
 800393c:	2364      	movs	r3, #100	@ 0x64
 800393e:	2201      	movs	r2, #1
 8003940:	4815      	ldr	r0, [pc, #84]	@ (8003998 <BMP280_readRawValues+0x7c>)
 8003942:	f008 febf 	bl	800c6c4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 8003946:	4639      	mov	r1, r7
 8003948:	2364      	movs	r3, #100	@ 0x64
 800394a:	2206      	movs	r2, #6
 800394c:	4812      	ldr	r0, [pc, #72]	@ (8003998 <BMP280_readRawValues+0x7c>)
 800394e:	f009 f8a7 	bl	800caa0 <HAL_SPI_Receive>
	BMP280_unselect();
 8003952:	2201      	movs	r2, #1
 8003954:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003958:	480e      	ldr	r0, [pc, #56]	@ (8003994 <BMP280_readRawValues+0x78>)
 800395a:	f005 fe27 	bl	80095ac <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 800395e:	783b      	ldrb	r3, [r7, #0]
 8003960:	031a      	lsls	r2, r3, #12
 8003962:	787b      	ldrb	r3, [r7, #1]
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	4313      	orrs	r3, r2
 8003968:	78ba      	ldrb	r2, [r7, #2]
 800396a:	0912      	lsrs	r2, r2, #4
 800396c:	b2d2      	uxtb	r2, r2
 800396e:	4313      	orrs	r3, r2
 8003970:	4a0a      	ldr	r2, [pc, #40]	@ (800399c <BMP280_readRawValues+0x80>)
 8003972:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 8003974:	78fb      	ldrb	r3, [r7, #3]
 8003976:	031a      	lsls	r2, r3, #12
 8003978:	793b      	ldrb	r3, [r7, #4]
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	4313      	orrs	r3, r2
 800397e:	797a      	ldrb	r2, [r7, #5]
 8003980:	0912      	lsrs	r2, r2, #4
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	4313      	orrs	r3, r2
 8003986:	4a06      	ldr	r2, [pc, #24]	@ (80039a0 <BMP280_readRawValues+0x84>)
 8003988:	6013      	str	r3, [r2, #0]
}
 800398a:	bf00      	nop
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	58020400 	.word	0x58020400
 8003998:	24000e50 	.word	0x24000e50
 800399c:	24001440 	.word	0x24001440
 80039a0:	2400143c 	.word	0x2400143c

080039a4 <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80039ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003a18 <BMP280_measureT+0x74>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	10da      	asrs	r2, r3, #3
 80039b2:	4b1a      	ldr	r3, [pc, #104]	@ (8003a1c <BMP280_measureT+0x78>)
 80039b4:	881b      	ldrh	r3, [r3, #0]
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	4a19      	ldr	r2, [pc, #100]	@ (8003a20 <BMP280_measureT+0x7c>)
 80039bc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80039c0:	fb02 f303 	mul.w	r3, r2, r3
 80039c4:	12db      	asrs	r3, r3, #11
 80039c6:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	111b      	asrs	r3, r3, #4
 80039cc:	4a13      	ldr	r2, [pc, #76]	@ (8003a1c <BMP280_measureT+0x78>)
 80039ce:	8812      	ldrh	r2, [r2, #0]
 80039d0:	1a9b      	subs	r3, r3, r2
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	1112      	asrs	r2, r2, #4
 80039d6:	4911      	ldr	r1, [pc, #68]	@ (8003a1c <BMP280_measureT+0x78>)
 80039d8:	8809      	ldrh	r1, [r1, #0]
 80039da:	1a52      	subs	r2, r2, r1
 80039dc:	fb02 f303 	mul.w	r3, r2, r3
 80039e0:	131b      	asrs	r3, r3, #12
 80039e2:	4a10      	ldr	r2, [pc, #64]	@ (8003a24 <BMP280_measureT+0x80>)
 80039e4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80039e8:	fb02 f303 	mul.w	r3, r2, r3
 80039ec:	139b      	asrs	r3, r3, #14
 80039ee:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	4413      	add	r3, r2
 80039f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003a28 <BMP280_measureT+0x84>)
 80039f8:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80039fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003a28 <BMP280_measureT+0x84>)
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	4613      	mov	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	3380      	adds	r3, #128	@ 0x80
 8003a06:	121b      	asrs	r3, r3, #8
 8003a08:	60fb      	str	r3, [r7, #12]
	return T;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	371c      	adds	r7, #28
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	2400143c 	.word	0x2400143c
 8003a1c:	24001424 	.word	0x24001424
 8003a20:	24001428 	.word	0x24001428
 8003a24:	2400142a 	.word	0x2400142a
 8003a28:	24001444 	.word	0x24001444

08003a2c <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 8003a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a30:	b0ca      	sub	sp, #296	@ 0x128
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8003a38:	4baf      	ldr	r3, [pc, #700]	@ (8003cf8 <BMP280_measureP+0x2cc>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	17da      	asrs	r2, r3, #31
 8003a3e:	461c      	mov	r4, r3
 8003a40:	4615      	mov	r5, r2
 8003a42:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8003a46:	f145 3bff 	adc.w	fp, r5, #4294967295
 8003a4a:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8003a4e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8003a52:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003a56:	fb03 f102 	mul.w	r1, r3, r2
 8003a5a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8003a5e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003a62:	fb02 f303 	mul.w	r3, r2, r3
 8003a66:	18ca      	adds	r2, r1, r3
 8003a68:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003a6c:	fba3 8903 	umull	r8, r9, r3, r3
 8003a70:	eb02 0309 	add.w	r3, r2, r9
 8003a74:	4699      	mov	r9, r3
 8003a76:	4ba1      	ldr	r3, [pc, #644]	@ (8003cfc <BMP280_measureP+0x2d0>)
 8003a78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a7c:	b21b      	sxth	r3, r3
 8003a7e:	17da      	asrs	r2, r3, #31
 8003a80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a84:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003a88:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	fb03 f209 	mul.w	r2, r3, r9
 8003a92:	460b      	mov	r3, r1
 8003a94:	fb08 f303 	mul.w	r3, r8, r3
 8003a98:	4413      	add	r3, r2
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	fba8 1202 	umull	r1, r2, r8, r2
 8003aa0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003aa4:	460a      	mov	r2, r1
 8003aa6:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8003aaa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003aae:	4413      	add	r3, r2
 8003ab0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ab4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8003ab8:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8003abc:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8003ac0:	4b8f      	ldr	r3, [pc, #572]	@ (8003d00 <BMP280_measureP+0x2d4>)
 8003ac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ac6:	b21b      	sxth	r3, r3
 8003ac8:	17da      	asrs	r2, r3, #31
 8003aca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ace:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8003ad2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003ad6:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8003ada:	462a      	mov	r2, r5
 8003adc:	fb02 f203 	mul.w	r2, r2, r3
 8003ae0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003ae4:	4621      	mov	r1, r4
 8003ae6:	fb01 f303 	mul.w	r3, r1, r3
 8003aea:	441a      	add	r2, r3
 8003aec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003af0:	4621      	mov	r1, r4
 8003af2:	fba3 1301 	umull	r1, r3, r3, r1
 8003af6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003afa:	460b      	mov	r3, r1
 8003afc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b04:	18d3      	adds	r3, r2, r3
 8003b06:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003b0a:	f04f 0000 	mov.w	r0, #0
 8003b0e:	f04f 0100 	mov.w	r1, #0
 8003b12:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8003b16:	462b      	mov	r3, r5
 8003b18:	0459      	lsls	r1, r3, #17
 8003b1a:	4623      	mov	r3, r4
 8003b1c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8003b20:	4623      	mov	r3, r4
 8003b22:	0458      	lsls	r0, r3, #17
 8003b24:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8003b28:	1814      	adds	r4, r2, r0
 8003b2a:	643c      	str	r4, [r7, #64]	@ 0x40
 8003b2c:	414b      	adcs	r3, r1
 8003b2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b30:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8003b34:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8003b38:	4b72      	ldr	r3, [pc, #456]	@ (8003d04 <BMP280_measureP+0x2d8>)
 8003b3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b3e:	b21b      	sxth	r3, r3
 8003b40:	17da      	asrs	r2, r3, #31
 8003b42:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b46:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003b4a:	f04f 0000 	mov.w	r0, #0
 8003b4e:	f04f 0100 	mov.w	r1, #0
 8003b52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003b56:	00d9      	lsls	r1, r3, #3
 8003b58:	2000      	movs	r0, #0
 8003b5a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8003b5e:	1814      	adds	r4, r2, r0
 8003b60:	63bc      	str	r4, [r7, #56]	@ 0x38
 8003b62:	414b      	adcs	r3, r1
 8003b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b66:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8003b6a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8003b6e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8003b72:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003b76:	fb03 f102 	mul.w	r1, r3, r2
 8003b7a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8003b7e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003b82:	fb02 f303 	mul.w	r3, r2, r3
 8003b86:	18ca      	adds	r2, r1, r3
 8003b88:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003b8c:	fba3 1303 	umull	r1, r3, r3, r3
 8003b90:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003b94:	460b      	mov	r3, r1
 8003b96:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003b9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b9e:	18d3      	adds	r3, r2, r3
 8003ba0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003ba4:	4b58      	ldr	r3, [pc, #352]	@ (8003d08 <BMP280_measureP+0x2dc>)
 8003ba6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003baa:	b21b      	sxth	r3, r3
 8003bac:	17da      	asrs	r2, r3, #31
 8003bae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003bb2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003bb6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8003bba:	462b      	mov	r3, r5
 8003bbc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003bc0:	4642      	mov	r2, r8
 8003bc2:	fb02 f203 	mul.w	r2, r2, r3
 8003bc6:	464b      	mov	r3, r9
 8003bc8:	4621      	mov	r1, r4
 8003bca:	fb01 f303 	mul.w	r3, r1, r3
 8003bce:	4413      	add	r3, r2
 8003bd0:	4622      	mov	r2, r4
 8003bd2:	4641      	mov	r1, r8
 8003bd4:	fba2 1201 	umull	r1, r2, r2, r1
 8003bd8:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8003bdc:	460a      	mov	r2, r1
 8003bde:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8003be2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8003be6:	4413      	add	r3, r2
 8003be8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003bec:	f04f 0000 	mov.w	r0, #0
 8003bf0:	f04f 0100 	mov.w	r1, #0
 8003bf4:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8003bf8:	4623      	mov	r3, r4
 8003bfa:	0a18      	lsrs	r0, r3, #8
 8003bfc:	462b      	mov	r3, r5
 8003bfe:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8003c02:	462b      	mov	r3, r5
 8003c04:	1219      	asrs	r1, r3, #8
 8003c06:	4b41      	ldr	r3, [pc, #260]	@ (8003d0c <BMP280_measureP+0x2e0>)
 8003c08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c0c:	b21b      	sxth	r3, r3
 8003c0e:	17da      	asrs	r2, r3, #31
 8003c10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c14:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003c18:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003c1c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8003c20:	464a      	mov	r2, r9
 8003c22:	fb02 f203 	mul.w	r2, r2, r3
 8003c26:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003c2a:	4644      	mov	r4, r8
 8003c2c:	fb04 f303 	mul.w	r3, r4, r3
 8003c30:	441a      	add	r2, r3
 8003c32:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003c36:	4644      	mov	r4, r8
 8003c38:	fba3 4304 	umull	r4, r3, r3, r4
 8003c3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003c40:	4623      	mov	r3, r4
 8003c42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003c46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003c4a:	18d3      	adds	r3, r2, r3
 8003c4c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003c50:	f04f 0200 	mov.w	r2, #0
 8003c54:	f04f 0300 	mov.w	r3, #0
 8003c58:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8003c5c:	464c      	mov	r4, r9
 8003c5e:	0323      	lsls	r3, r4, #12
 8003c60:	4644      	mov	r4, r8
 8003c62:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8003c66:	4644      	mov	r4, r8
 8003c68:	0322      	lsls	r2, r4, #12
 8003c6a:	1884      	adds	r4, r0, r2
 8003c6c:	633c      	str	r4, [r7, #48]	@ 0x30
 8003c6e:	eb41 0303 	adc.w	r3, r1, r3
 8003c72:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c74:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8003c78:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8003c7c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8003c80:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8003c84:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8003c88:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8003c8c:	4b20      	ldr	r3, [pc, #128]	@ (8003d10 <BMP280_measureP+0x2e4>)
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	2200      	movs	r2, #0
 8003c94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c98:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003c9c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003ca0:	462b      	mov	r3, r5
 8003ca2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003ca6:	4642      	mov	r2, r8
 8003ca8:	fb02 f203 	mul.w	r2, r2, r3
 8003cac:	464b      	mov	r3, r9
 8003cae:	4621      	mov	r1, r4
 8003cb0:	fb01 f303 	mul.w	r3, r1, r3
 8003cb4:	4413      	add	r3, r2
 8003cb6:	4622      	mov	r2, r4
 8003cb8:	4641      	mov	r1, r8
 8003cba:	fba2 1201 	umull	r1, r2, r2, r1
 8003cbe:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8003cc2:	460a      	mov	r2, r1
 8003cc4:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8003cc8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003ccc:	4413      	add	r3, r2
 8003cce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003cd2:	f04f 0200 	mov.w	r2, #0
 8003cd6:	f04f 0300 	mov.w	r3, #0
 8003cda:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8003cde:	4629      	mov	r1, r5
 8003ce0:	104a      	asrs	r2, r1, #1
 8003ce2:	4629      	mov	r1, r5
 8003ce4:	17cb      	asrs	r3, r1, #31
 8003ce6:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8003cea:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	d110      	bne.n	8003d14 <BMP280_measureP+0x2e8>
	{
	return 0;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	e154      	b.n	8003fa0 <BMP280_measureP+0x574>
 8003cf6:	bf00      	nop
 8003cf8:	24001444 	.word	0x24001444
 8003cfc:	24001434 	.word	0x24001434
 8003d00:	24001432 	.word	0x24001432
 8003d04:	24001430 	.word	0x24001430
 8003d08:	2400142e 	.word	0x2400142e
 8003d0c:	2400142c 	.word	0x2400142c
 8003d10:	24001426 	.word	0x24001426
	}
	p = 1048576-adc_P;
 8003d14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d18:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8003d1c:	17da      	asrs	r2, r3, #31
 8003d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d22:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8003d26:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8003d2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003d2e:	105b      	asrs	r3, r3, #1
 8003d30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d34:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003d38:	07db      	lsls	r3, r3, #31
 8003d3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d3e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8003d42:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8003d46:	4621      	mov	r1, r4
 8003d48:	1a89      	subs	r1, r1, r2
 8003d4a:	67b9      	str	r1, [r7, #120]	@ 0x78
 8003d4c:	4629      	mov	r1, r5
 8003d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8003d52:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003d54:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003d58:	4622      	mov	r2, r4
 8003d5a:	462b      	mov	r3, r5
 8003d5c:	1891      	adds	r1, r2, r2
 8003d5e:	6239      	str	r1, [r7, #32]
 8003d60:	415b      	adcs	r3, r3
 8003d62:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d64:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d68:	4621      	mov	r1, r4
 8003d6a:	1851      	adds	r1, r2, r1
 8003d6c:	61b9      	str	r1, [r7, #24]
 8003d6e:	4629      	mov	r1, r5
 8003d70:	414b      	adcs	r3, r1
 8003d72:	61fb      	str	r3, [r7, #28]
 8003d74:	f04f 0200 	mov.w	r2, #0
 8003d78:	f04f 0300 	mov.w	r3, #0
 8003d7c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003d80:	4649      	mov	r1, r9
 8003d82:	018b      	lsls	r3, r1, #6
 8003d84:	4641      	mov	r1, r8
 8003d86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d8a:	4641      	mov	r1, r8
 8003d8c:	018a      	lsls	r2, r1, #6
 8003d8e:	4641      	mov	r1, r8
 8003d90:	1889      	adds	r1, r1, r2
 8003d92:	6139      	str	r1, [r7, #16]
 8003d94:	4649      	mov	r1, r9
 8003d96:	eb43 0101 	adc.w	r1, r3, r1
 8003d9a:	6179      	str	r1, [r7, #20]
 8003d9c:	f04f 0200 	mov.w	r2, #0
 8003da0:	f04f 0300 	mov.w	r3, #0
 8003da4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8003da8:	4649      	mov	r1, r9
 8003daa:	008b      	lsls	r3, r1, #2
 8003dac:	4641      	mov	r1, r8
 8003dae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003db2:	4641      	mov	r1, r8
 8003db4:	008a      	lsls	r2, r1, #2
 8003db6:	4610      	mov	r0, r2
 8003db8:	4619      	mov	r1, r3
 8003dba:	4603      	mov	r3, r0
 8003dbc:	4622      	mov	r2, r4
 8003dbe:	189b      	adds	r3, r3, r2
 8003dc0:	60bb      	str	r3, [r7, #8]
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	462a      	mov	r2, r5
 8003dc6:	eb42 0303 	adc.w	r3, r2, r3
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	f04f 0300 	mov.w	r3, #0
 8003dd4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8003dd8:	4649      	mov	r1, r9
 8003dda:	008b      	lsls	r3, r1, #2
 8003ddc:	4641      	mov	r1, r8
 8003dde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003de2:	4641      	mov	r1, r8
 8003de4:	008a      	lsls	r2, r1, #2
 8003de6:	4610      	mov	r0, r2
 8003de8:	4619      	mov	r1, r3
 8003dea:	4603      	mov	r3, r0
 8003dec:	4622      	mov	r2, r4
 8003dee:	189b      	adds	r3, r3, r2
 8003df0:	673b      	str	r3, [r7, #112]	@ 0x70
 8003df2:	462b      	mov	r3, r5
 8003df4:	460a      	mov	r2, r1
 8003df6:	eb42 0303 	adc.w	r3, r2, r3
 8003dfa:	677b      	str	r3, [r7, #116]	@ 0x74
 8003dfc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8003e00:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003e04:	f7fc fc90 	bl	8000728 <__aeabi_ldivmod>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8003e10:	4b66      	ldr	r3, [pc, #408]	@ (8003fac <BMP280_measureP+0x580>)
 8003e12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e16:	b21b      	sxth	r3, r3
 8003e18:	17da      	asrs	r2, r3, #31
 8003e1a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e1c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e1e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8003e22:	f04f 0000 	mov.w	r0, #0
 8003e26:	f04f 0100 	mov.w	r1, #0
 8003e2a:	0b50      	lsrs	r0, r2, #13
 8003e2c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8003e30:	1359      	asrs	r1, r3, #13
 8003e32:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8003e36:	462b      	mov	r3, r5
 8003e38:	fb00 f203 	mul.w	r2, r0, r3
 8003e3c:	4623      	mov	r3, r4
 8003e3e:	fb03 f301 	mul.w	r3, r3, r1
 8003e42:	4413      	add	r3, r2
 8003e44:	4622      	mov	r2, r4
 8003e46:	fba2 1200 	umull	r1, r2, r2, r0
 8003e4a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e4e:	460a      	mov	r2, r1
 8003e50:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8003e54:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003e58:	4413      	add	r3, r2
 8003e5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003e5e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8003e62:	f04f 0000 	mov.w	r0, #0
 8003e66:	f04f 0100 	mov.w	r1, #0
 8003e6a:	0b50      	lsrs	r0, r2, #13
 8003e6c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8003e70:	1359      	asrs	r1, r3, #13
 8003e72:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8003e76:	462b      	mov	r3, r5
 8003e78:	fb00 f203 	mul.w	r2, r0, r3
 8003e7c:	4623      	mov	r3, r4
 8003e7e:	fb03 f301 	mul.w	r3, r3, r1
 8003e82:	4413      	add	r3, r2
 8003e84:	4622      	mov	r2, r4
 8003e86:	fba2 1200 	umull	r1, r2, r2, r0
 8003e8a:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e8e:	460a      	mov	r2, r1
 8003e90:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8003e94:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8003e98:	4413      	add	r3, r2
 8003e9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003e9e:	f04f 0200 	mov.w	r2, #0
 8003ea2:	f04f 0300 	mov.w	r3, #0
 8003ea6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8003eaa:	4621      	mov	r1, r4
 8003eac:	0e4a      	lsrs	r2, r1, #25
 8003eae:	4629      	mov	r1, r5
 8003eb0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8003eb4:	4629      	mov	r1, r5
 8003eb6:	164b      	asrs	r3, r1, #25
 8003eb8:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8003ebc:	4b3c      	ldr	r3, [pc, #240]	@ (8003fb0 <BMP280_measureP+0x584>)
 8003ebe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ec2:	b21b      	sxth	r3, r3
 8003ec4:	17da      	asrs	r2, r3, #31
 8003ec6:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ec8:	667a      	str	r2, [r7, #100]	@ 0x64
 8003eca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003ece:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003ed2:	462a      	mov	r2, r5
 8003ed4:	fb02 f203 	mul.w	r2, r2, r3
 8003ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003edc:	4621      	mov	r1, r4
 8003ede:	fb01 f303 	mul.w	r3, r1, r3
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8003ee8:	4621      	mov	r1, r4
 8003eea:	fba2 1201 	umull	r1, r2, r2, r1
 8003eee:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8003ef2:	460a      	mov	r2, r1
 8003ef4:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8003ef8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8003efc:	4413      	add	r3, r2
 8003efe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	f04f 0300 	mov.w	r3, #0
 8003f0a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8003f0e:	4621      	mov	r1, r4
 8003f10:	0cca      	lsrs	r2, r1, #19
 8003f12:	4629      	mov	r1, r5
 8003f14:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8003f18:	4629      	mov	r1, r5
 8003f1a:	14cb      	asrs	r3, r1, #19
 8003f1c:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8003f20:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8003f24:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8003f28:	1884      	adds	r4, r0, r2
 8003f2a:	65bc      	str	r4, [r7, #88]	@ 0x58
 8003f2c:	eb41 0303 	adc.w	r3, r1, r3
 8003f30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f32:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8003f36:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8003f3a:	4621      	mov	r1, r4
 8003f3c:	1889      	adds	r1, r1, r2
 8003f3e:	6539      	str	r1, [r7, #80]	@ 0x50
 8003f40:	4629      	mov	r1, r5
 8003f42:	eb43 0101 	adc.w	r1, r3, r1
 8003f46:	6579      	str	r1, [r7, #84]	@ 0x54
 8003f48:	f04f 0000 	mov.w	r0, #0
 8003f4c:	f04f 0100 	mov.w	r1, #0
 8003f50:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8003f54:	4623      	mov	r3, r4
 8003f56:	0a18      	lsrs	r0, r3, #8
 8003f58:	462b      	mov	r3, r5
 8003f5a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8003f5e:	462b      	mov	r3, r5
 8003f60:	1219      	asrs	r1, r3, #8
 8003f62:	4b14      	ldr	r3, [pc, #80]	@ (8003fb4 <BMP280_measureP+0x588>)
 8003f64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f68:	b21b      	sxth	r3, r3
 8003f6a:	17da      	asrs	r2, r3, #31
 8003f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f6e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003f70:	f04f 0200 	mov.w	r2, #0
 8003f74:	f04f 0300 	mov.w	r3, #0
 8003f78:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8003f7c:	464c      	mov	r4, r9
 8003f7e:	0123      	lsls	r3, r4, #4
 8003f80:	4644      	mov	r4, r8
 8003f82:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8003f86:	4644      	mov	r4, r8
 8003f88:	0122      	lsls	r2, r4, #4
 8003f8a:	1884      	adds	r4, r0, r2
 8003f8c:	603c      	str	r4, [r7, #0]
 8003f8e:	eb41 0303 	adc.w	r3, r1, r3
 8003f92:	607b      	str	r3, [r7, #4]
 8003f94:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003f98:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8003f9c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fac:	2400143a 	.word	0x2400143a
 8003fb0:	24001438 	.word	0x24001438
 8003fb4:	24001436 	.word	0x24001436

08003fb8 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b088      	sub	sp, #32
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <BMP280_measureH+0x14>
 8003fc8:	2300      	movs	r3, #0
 8003fca:	e03d      	b.n	8004048 <BMP280_measureH+0x90>
	var1 = -log(((double)Pres)/101325);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	ee07 3a90 	vmov	s15, r3
 8003fd2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003fd6:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8004050 <BMP280_measureH+0x98>
 8003fda:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8003fde:	eeb0 0b46 	vmov.f64	d0, d6
 8003fe2:	f014 fe45 	bl	8018c70 <log>
 8003fe6:	eeb0 7b40 	vmov.f64	d7, d0
 8003fea:	eeb1 7b47 	vneg.f64	d7, d7
 8003fee:	ed87 7b06 	vstr	d7, [r7, #24]

	if(var1 == 0) return 0;
 8003ff2:	ed97 7b06 	vldr	d7, [r7, #24]
 8003ff6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ffe:	d101      	bne.n	8004004 <BMP280_measureH+0x4c>
 8004000:	2300      	movs	r3, #0
 8004002:	e021      	b.n	8004048 <BMP280_measureH+0x90>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	ee07 3a90 	vmov	s15, r3
 800400a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800400e:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8004058 <BMP280_measureH+0xa0>
 8004012:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004016:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8004060 <BMP280_measureH+0xa8>
 800401a:	ee37 6b06 	vadd.f64	d6, d7, d6
 800401e:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8004068 <BMP280_measureH+0xb0>
 8004022:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004026:	ed87 7b04 	vstr	d7, [r7, #16]
	h = var1/var2;
 800402a:	ed97 5b06 	vldr	d5, [r7, #24]
 800402e:	ed97 6b04 	vldr	d6, [r7, #16]
 8004032:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004036:	ed87 7b02 	vstr	d7, [r7, #8]
	return (uint16_t)h;
 800403a:	ed97 7b02 	vldr	d7, [r7, #8]
 800403e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004042:	ee17 3a90 	vmov	r3, s15
 8004046:	b29b      	uxth	r3, r3
}
 8004048:	4618      	mov	r0, r3
 800404a:	3720      	adds	r7, #32
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	00000000 	.word	0x00000000
 8004054:	40f8bcd0 	.word	0x40f8bcd0
 8004058:	00000000 	.word	0x00000000
 800405c:	40590000 	.word	0x40590000
 8004060:	66666666 	.word	0x66666666
 8004064:	40711266 	.word	0x40711266
 8004068:	ca402a92 	.word	0xca402a92
 800406c:	3fa17e3e 	.word	0x3fa17e3e

08004070 <BMP280_init>:

void BMP280_init(void){
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
	BMP280_unselect();
 8004074:	2201      	movs	r2, #1
 8004076:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800407a:	480d      	ldr	r0, [pc, #52]	@ (80040b0 <BMP280_init+0x40>)
 800407c:	f005 fa96 	bl	80095ac <HAL_GPIO_WritePin>
	BMP280_config();
 8004080:	f7ff fb8a 	bl	8003798 <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 8004084:	2089      	movs	r0, #137	@ 0x89
 8004086:	f7ff fb59 	bl	800373c <BMP280_read>
 800408a:	4603      	mov	r3, r0
 800408c:	461a      	mov	r2, r3
 800408e:	4b09      	ldr	r3, [pc, #36]	@ (80040b4 <BMP280_init+0x44>)
 8004090:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 8004092:	f7ff fb8d 	bl	80037b0 <BMP280_calibrationData>
	BMP280_readRawValues();
 8004096:	f7ff fc41 	bl	800391c <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 800409a:	4b07      	ldr	r3, [pc, #28]	@ (80040b8 <BMP280_init+0x48>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4618      	mov	r0, r3
 80040a0:	f7ff fc80 	bl	80039a4 <BMP280_measureT>
 80040a4:	4603      	mov	r3, r0
 80040a6:	4a03      	ldr	r2, [pc, #12]	@ (80040b4 <BMP280_init+0x44>)
 80040a8:	6093      	str	r3, [r2, #8]
}
 80040aa:	bf00      	nop
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	58020400 	.word	0x58020400
 80040b4:	24001410 	.word	0x24001410
 80040b8:	2400143c 	.word	0x2400143c

080040bc <BMP280_calculate>:

void BMP280_calculate(void){
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
	//BMP280.ID = 0;
	BMP280.ID = BMP280_read(0x89);
 80040c0:	2089      	movs	r0, #137	@ 0x89
 80040c2:	f7ff fb3b 	bl	800373c <BMP280_read>
 80040c6:	4603      	mov	r3, r0
 80040c8:	461a      	mov	r2, r3
 80040ca:	4b16      	ldr	r3, [pc, #88]	@ (8004124 <BMP280_calculate+0x68>)
 80040cc:	701a      	strb	r2, [r3, #0]
	BMP280_readRawValues();
 80040ce:	f7ff fc25 	bl	800391c <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 80040d2:	4b15      	ldr	r3, [pc, #84]	@ (8004128 <BMP280_calculate+0x6c>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff fc64 	bl	80039a4 <BMP280_measureT>
 80040dc:	4603      	mov	r3, r0
 80040de:	4a11      	ldr	r2, [pc, #68]	@ (8004124 <BMP280_calculate+0x68>)
 80040e0:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 80040e2:	4b12      	ldr	r3, [pc, #72]	@ (800412c <BMP280_calculate+0x70>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7ff fca0 	bl	8003a2c <BMP280_measureP>
 80040ec:	4603      	mov	r3, r0
 80040ee:	0a1b      	lsrs	r3, r3, #8
 80040f0:	4a0c      	ldr	r2, [pc, #48]	@ (8004124 <BMP280_calculate+0x68>)
 80040f2:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 80040f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004124 <BMP280_calculate+0x68>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	4a0a      	ldr	r2, [pc, #40]	@ (8004124 <BMP280_calculate+0x68>)
 80040fa:	6892      	ldr	r2, [r2, #8]
 80040fc:	4611      	mov	r1, r2
 80040fe:	4618      	mov	r0, r3
 8004100:	f7ff ff5a 	bl	8003fb8 <BMP280_measureH>
 8004104:	4603      	mov	r3, r0
 8004106:	461a      	mov	r2, r3
 8004108:	4b06      	ldr	r3, [pc, #24]	@ (8004124 <BMP280_calculate+0x68>)
 800410a:	821a      	strh	r2, [r3, #16]

	if(BMP280.Barometric_Altitude > BMP280.Max_Altitude) BMP280.Max_Altitude = BMP280.Barometric_Altitude;
 800410c:	4b05      	ldr	r3, [pc, #20]	@ (8004124 <BMP280_calculate+0x68>)
 800410e:	8a1a      	ldrh	r2, [r3, #16]
 8004110:	4b04      	ldr	r3, [pc, #16]	@ (8004124 <BMP280_calculate+0x68>)
 8004112:	8a5b      	ldrh	r3, [r3, #18]
 8004114:	429a      	cmp	r2, r3
 8004116:	d903      	bls.n	8004120 <BMP280_calculate+0x64>
 8004118:	4b02      	ldr	r3, [pc, #8]	@ (8004124 <BMP280_calculate+0x68>)
 800411a:	8a1a      	ldrh	r2, [r3, #16]
 800411c:	4b01      	ldr	r3, [pc, #4]	@ (8004124 <BMP280_calculate+0x68>)
 800411e:	825a      	strh	r2, [r3, #18]
}
 8004120:	bf00      	nop
 8004122:	bd80      	pop	{r7, pc}
 8004124:	24001410 	.word	0x24001410
 8004128:	2400143c 	.word	0x2400143c
 800412c:	24001440 	.word	0x24001440

08004130 <bno055_delay>:

BNO_CurrentState_e BNO_CurrentState = Init;

IMU_t IMU;

void bno055_delay(uint8_t time) {
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	4603      	mov	r3, r0
 8004138:	71fb      	strb	r3, [r7, #7]
	BNO_DelayCounter += time;
 800413a:	4b06      	ldr	r3, [pc, #24]	@ (8004154 <bno055_delay+0x24>)
 800413c:	781a      	ldrb	r2, [r3, #0]
 800413e:	79fb      	ldrb	r3, [r7, #7]
 8004140:	4413      	add	r3, r2
 8004142:	b2da      	uxtb	r2, r3
 8004144:	4b03      	ldr	r3, [pc, #12]	@ (8004154 <bno055_delay+0x24>)
 8004146:	701a      	strb	r2, [r3, #0]
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr
 8004154:	2400154b 	.word	0x2400154b

08004158 <BNO_Read>:

HAL_StatusTypeDef BNO_Read(uint8_t Address,uint8_t Size){
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	4603      	mov	r3, r0
 8004160:	460a      	mov	r2, r1
 8004162:	71fb      	strb	r3, [r7, #7]
 8004164:	4613      	mov	r3, r2
 8004166:	71bb      	strb	r3, [r7, #6]
	uint8_t ReadCommand[4] = {0xAA, 0x01, Address, Size};
 8004168:	23aa      	movs	r3, #170	@ 0xaa
 800416a:	723b      	strb	r3, [r7, #8]
 800416c:	2301      	movs	r3, #1
 800416e:	727b      	strb	r3, [r7, #9]
 8004170:	79fb      	ldrb	r3, [r7, #7]
 8004172:	72bb      	strb	r3, [r7, #10]
 8004174:	79bb      	ldrb	r3, [r7, #6]
 8004176:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef uartError;

	BNO_RxBuffer[0] = Address;
 8004178:	4a08      	ldr	r2, [pc, #32]	@ (800419c <BNO_Read+0x44>)
 800417a:	79fb      	ldrb	r3, [r7, #7]
 800417c:	7013      	strb	r3, [r2, #0]

	uartError = HAL_UART_Transmit(&huart3, ReadCommand, 4,100);
 800417e:	f107 0108 	add.w	r1, r7, #8
 8004182:	2364      	movs	r3, #100	@ 0x64
 8004184:	2204      	movs	r2, #4
 8004186:	4806      	ldr	r0, [pc, #24]	@ (80041a0 <BNO_Read+0x48>)
 8004188:	f00a fc36 	bl	800e9f8 <HAL_UART_Transmit>
 800418c:	4603      	mov	r3, r0
 800418e:	73fb      	strb	r3, [r7, #15]
	return uartError;
 8004190:	7bfb      	ldrb	r3, [r7, #15]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	24001448 	.word	0x24001448
 80041a0:	24001180 	.word	0x24001180

080041a4 <BNO_Write>:

HAL_StatusTypeDef BNO_Write(uint8_t Address,uint8_t Data){
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	4603      	mov	r3, r0
 80041ac:	460a      	mov	r2, r1
 80041ae:	71fb      	strb	r3, [r7, #7]
 80041b0:	4613      	mov	r3, r2
 80041b2:	71bb      	strb	r3, [r7, #6]
	uint8_t WriteCommand[5];
	HAL_StatusTypeDef uartError;

	WriteCommand[0] = 0xAA;
 80041b4:	23aa      	movs	r3, #170	@ 0xaa
 80041b6:	723b      	strb	r3, [r7, #8]
	WriteCommand[1] = 0x00;
 80041b8:	2300      	movs	r3, #0
 80041ba:	727b      	strb	r3, [r7, #9]
	WriteCommand[2] = Address;
 80041bc:	79fb      	ldrb	r3, [r7, #7]
 80041be:	72bb      	strb	r3, [r7, #10]
	WriteCommand[3] = 1;
 80041c0:	2301      	movs	r3, #1
 80041c2:	72fb      	strb	r3, [r7, #11]
	WriteCommand[4] = Data;
 80041c4:	79bb      	ldrb	r3, [r7, #6]
 80041c6:	733b      	strb	r3, [r7, #12]

	uartError = HAL_UART_Transmit(&huart3, WriteCommand,5,100);
 80041c8:	f107 0108 	add.w	r1, r7, #8
 80041cc:	2364      	movs	r3, #100	@ 0x64
 80041ce:	2205      	movs	r2, #5
 80041d0:	4804      	ldr	r0, [pc, #16]	@ (80041e4 <BNO_Write+0x40>)
 80041d2:	f00a fc11 	bl	800e9f8 <HAL_UART_Transmit>
 80041d6:	4603      	mov	r3, r0
 80041d8:	73fb      	strb	r3, [r7, #15]
	return uartError;
 80041da:	7bfb      	ldrb	r3, [r7, #15]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	24001180 	.word	0x24001180

080041e8 <BNO_Write_MB>:

HAL_StatusTypeDef BNO_Write_MB(uint8_t Address,uint8_t Size, uint8_t *pData){
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b0c4      	sub	sp, #272	@ 0x110
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80041f2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80041fc:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8004200:	4602      	mov	r2, r0
 8004202:	701a      	strb	r2, [r3, #0]
 8004204:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004208:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800420c:	460a      	mov	r2, r1
 800420e:	701a      	strb	r2, [r3, #0]
    uint8_t WriteCommand[255];
    HAL_StatusTypeDef uartError;

    WriteCommand[0] = 0xAA;
 8004210:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004214:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004218:	22aa      	movs	r2, #170	@ 0xaa
 800421a:	701a      	strb	r2, [r3, #0]
    WriteCommand[1] = 0x00;
 800421c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004220:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004224:	2200      	movs	r2, #0
 8004226:	705a      	strb	r2, [r3, #1]
    WriteCommand[2] = Address;
 8004228:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800422c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004230:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004234:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 8004238:	7812      	ldrb	r2, [r2, #0]
 800423a:	709a      	strb	r2, [r3, #2]
    WriteCommand[3] = Size;
 800423c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004240:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004244:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004248:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800424c:	7812      	ldrb	r2, [r2, #0]
 800424e:	70da      	strb	r2, [r3, #3]

    for (uint8_t n = 0; n < Size; ++n) {
 8004250:	2300      	movs	r3, #0
 8004252:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8004256:	e015      	b.n	8004284 <BNO_Write_MB+0x9c>
        WriteCommand[n + 4] = pData[n];
 8004258:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800425c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004260:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8004264:	6812      	ldr	r2, [r2, #0]
 8004266:	441a      	add	r2, r3
 8004268:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800426c:	3304      	adds	r3, #4
 800426e:	7811      	ldrb	r1, [r2, #0]
 8004270:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004274:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8004278:	54d1      	strb	r1, [r2, r3]
    for (uint8_t n = 0; n < Size; ++n) {
 800427a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800427e:	3301      	adds	r3, #1
 8004280:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8004284:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004288:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800428c:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	429a      	cmp	r2, r3
 8004294:	d3e0      	bcc.n	8004258 <BNO_Write_MB+0x70>
    }

    uartError = HAL_UART_Transmit(&huart3, WriteCommand, (Size + 4),100);
 8004296:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800429a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	3304      	adds	r3, #4
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	f107 010c 	add.w	r1, r7, #12
 80042aa:	2364      	movs	r3, #100	@ 0x64
 80042ac:	4806      	ldr	r0, [pc, #24]	@ (80042c8 <BNO_Write_MB+0xe0>)
 80042ae:	f00a fba3 	bl	800e9f8 <HAL_UART_Transmit>
 80042b2:	4603      	mov	r3, r0
 80042b4:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    return uartError;
 80042b8:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
}
 80042bc:	4618      	mov	r0, r3
 80042be:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	24001180 	.word	0x24001180

080042cc <BNO_Page0Adress>:

void BNO_Page0Adress(void){
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 80042d0:	4ba6      	ldr	r3, [pc, #664]	@ (800456c <BNO_Page0Adress+0x2a0>)
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	2b55      	cmp	r3, #85	@ 0x55
 80042d6:	f300 8247 	bgt.w	8004768 <BNO_Page0Adress+0x49c>
 80042da:	2b35      	cmp	r3, #53	@ 0x35
 80042dc:	da0a      	bge.n	80042f4 <BNO_Page0Adress+0x28>
 80042de:	2b08      	cmp	r3, #8
 80042e0:	f000 814a 	beq.w	8004578 <BNO_Page0Adress+0x2ac>
 80042e4:	2b08      	cmp	r3, #8
 80042e6:	f300 823f 	bgt.w	8004768 <BNO_Page0Adress+0x49c>
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d04c      	beq.n	8004388 <BNO_Page0Adress+0xbc>
 80042ee:	2b07      	cmp	r3, #7
 80042f0:	d064      	beq.n	80043bc <BNO_Page0Adress+0xf0>
			IMU.Roll = ((float)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;

			BNO_ErrorHandler = ReadSucces;
			break;
		default:
			break;
 80042f2:	e239      	b.n	8004768 <BNO_Page0Adress+0x49c>
	switch (BNO_RxBuffer[0]) {
 80042f4:	3b35      	subs	r3, #53	@ 0x35
 80042f6:	2b20      	cmp	r3, #32
 80042f8:	f200 8236 	bhi.w	8004768 <BNO_Page0Adress+0x49c>
 80042fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004304 <BNO_Page0Adress+0x38>)
 80042fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004302:	bf00      	nop
 8004304:	08004405 	.word	0x08004405
 8004308:	08004769 	.word	0x08004769
 800430c:	08004769 	.word	0x08004769
 8004310:	08004769 	.word	0x08004769
 8004314:	080043e1 	.word	0x080043e1
 8004318:	08004769 	.word	0x08004769
 800431c:	080043cf 	.word	0x080043cf
 8004320:	08004769 	.word	0x08004769
 8004324:	080043f3 	.word	0x080043f3
 8004328:	08004769 	.word	0x08004769
 800432c:	08004769 	.word	0x08004769
 8004330:	08004769 	.word	0x08004769
 8004334:	08004769 	.word	0x08004769
 8004338:	08004769 	.word	0x08004769
 800433c:	08004769 	.word	0x08004769
 8004340:	08004769 	.word	0x08004769
 8004344:	08004769 	.word	0x08004769
 8004348:	08004769 	.word	0x08004769
 800434c:	08004769 	.word	0x08004769
 8004350:	08004769 	.word	0x08004769
 8004354:	08004769 	.word	0x08004769
 8004358:	08004769 	.word	0x08004769
 800435c:	08004769 	.word	0x08004769
 8004360:	08004769 	.word	0x08004769
 8004364:	08004769 	.word	0x08004769
 8004368:	08004769 	.word	0x08004769
 800436c:	08004769 	.word	0x08004769
 8004370:	08004769 	.word	0x08004769
 8004374:	08004769 	.word	0x08004769
 8004378:	08004769 	.word	0x08004769
 800437c:	08004769 	.word	0x08004769
 8004380:	08004769 	.word	0x08004769
 8004384:	0800445d 	.word	0x0800445d
			if(BNO_RxBuffer[1] != 160) return;
 8004388:	4b78      	ldr	r3, [pc, #480]	@ (800456c <BNO_Page0Adress+0x2a0>)
 800438a:	785b      	ldrb	r3, [r3, #1]
 800438c:	2ba0      	cmp	r3, #160	@ 0xa0
 800438e:	f040 81ed 	bne.w	800476c <BNO_Page0Adress+0x4a0>
			IMU.ID = BNO_RxBuffer[1];
 8004392:	4b76      	ldr	r3, [pc, #472]	@ (800456c <BNO_Page0Adress+0x2a0>)
 8004394:	785a      	ldrb	r2, [r3, #1]
 8004396:	4b76      	ldr	r3, [pc, #472]	@ (8004570 <BNO_Page0Adress+0x2a4>)
 8004398:	701a      	strb	r2, [r3, #0]
			IMU.ACC.ID = BNO_RxBuffer[2];
 800439a:	4b74      	ldr	r3, [pc, #464]	@ (800456c <BNO_Page0Adress+0x2a0>)
 800439c:	789a      	ldrb	r2, [r3, #2]
 800439e:	4b74      	ldr	r3, [pc, #464]	@ (8004570 <BNO_Page0Adress+0x2a4>)
 80043a0:	711a      	strb	r2, [r3, #4]
			IMU.MAG.ID = BNO_RxBuffer[3];
 80043a2:	4b72      	ldr	r3, [pc, #456]	@ (800456c <BNO_Page0Adress+0x2a0>)
 80043a4:	78da      	ldrb	r2, [r3, #3]
 80043a6:	4b72      	ldr	r3, [pc, #456]	@ (8004570 <BNO_Page0Adress+0x2a4>)
 80043a8:	751a      	strb	r2, [r3, #20]
			IMU.GYR.ID = BNO_RxBuffer[4];
 80043aa:	4b70      	ldr	r3, [pc, #448]	@ (800456c <BNO_Page0Adress+0x2a0>)
 80043ac:	791a      	ldrb	r2, [r3, #4]
 80043ae:	4b70      	ldr	r3, [pc, #448]	@ (8004570 <BNO_Page0Adress+0x2a4>)
 80043b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			BNO_ErrorHandler = ReadSucces;
 80043b4:	4b6f      	ldr	r3, [pc, #444]	@ (8004574 <BNO_Page0Adress+0x2a8>)
 80043b6:	220b      	movs	r2, #11
 80043b8:	701a      	strb	r2, [r3, #0]
			break;
 80043ba:	e1d8      	b.n	800476e <BNO_Page0Adress+0x4a2>
			IMU.Page = BNO_RxBuffer[1];
 80043bc:	4b6b      	ldr	r3, [pc, #428]	@ (800456c <BNO_Page0Adress+0x2a0>)
 80043be:	785a      	ldrb	r2, [r3, #1]
 80043c0:	4b6b      	ldr	r3, [pc, #428]	@ (8004570 <BNO_Page0Adress+0x2a4>)
 80043c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			BNO_ErrorHandler = ReadSucces;
 80043c6:	4b6b      	ldr	r3, [pc, #428]	@ (8004574 <BNO_Page0Adress+0x2a8>)
 80043c8:	220b      	movs	r2, #11
 80043ca:	701a      	strb	r2, [r3, #0]
			break;
 80043cc:	e1cf      	b.n	800476e <BNO_Page0Adress+0x4a2>
			IMU.Unit_Select = BNO_RxBuffer[1];
 80043ce:	4b67      	ldr	r3, [pc, #412]	@ (800456c <BNO_Page0Adress+0x2a0>)
 80043d0:	785a      	ldrb	r2, [r3, #1]
 80043d2:	4b67      	ldr	r3, [pc, #412]	@ (8004570 <BNO_Page0Adress+0x2a4>)
 80043d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			BNO_ErrorHandler = ReadSucces;
 80043d8:	4b66      	ldr	r3, [pc, #408]	@ (8004574 <BNO_Page0Adress+0x2a8>)
 80043da:	220b      	movs	r2, #11
 80043dc:	701a      	strb	r2, [r3, #0]
			break;
 80043de:	e1c6      	b.n	800476e <BNO_Page0Adress+0x4a2>
			IMU.System_Status = BNO_RxBuffer[1];
 80043e0:	4b62      	ldr	r3, [pc, #392]	@ (800456c <BNO_Page0Adress+0x2a0>)
 80043e2:	785a      	ldrb	r2, [r3, #1]
 80043e4:	4b62      	ldr	r3, [pc, #392]	@ (8004570 <BNO_Page0Adress+0x2a4>)
 80043e6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			BNO_ErrorHandler = ReadSucces;
 80043ea:	4b62      	ldr	r3, [pc, #392]	@ (8004574 <BNO_Page0Adress+0x2a8>)
 80043ec:	220b      	movs	r2, #11
 80043ee:	701a      	strb	r2, [r3, #0]
			break;
 80043f0:	e1bd      	b.n	800476e <BNO_Page0Adress+0x4a2>
			IMU.Op_Mode = BNO_RxBuffer[1];
 80043f2:	4b5e      	ldr	r3, [pc, #376]	@ (800456c <BNO_Page0Adress+0x2a0>)
 80043f4:	785a      	ldrb	r2, [r3, #1]
 80043f6:	4b5e      	ldr	r3, [pc, #376]	@ (8004570 <BNO_Page0Adress+0x2a4>)
 80043f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
			BNO_ErrorHandler = ReadSucces;
 80043fc:	4b5d      	ldr	r3, [pc, #372]	@ (8004574 <BNO_Page0Adress+0x2a8>)
 80043fe:	220b      	movs	r2, #11
 8004400:	701a      	strb	r2, [r3, #0]
			break;
 8004402:	e1b4      	b.n	800476e <BNO_Page0Adress+0x4a2>
			IMU.CalSatus.Full = BNO_RxBuffer[1];
 8004404:	4b59      	ldr	r3, [pc, #356]	@ (800456c <BNO_Page0Adress+0x2a0>)
 8004406:	785a      	ldrb	r2, [r3, #1]
 8004408:	4b59      	ldr	r3, [pc, #356]	@ (8004570 <BNO_Page0Adress+0x2a4>)
 800440a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			IMU.CalSatus.Sys = (BNO_RxBuffer[1] >> 6) & 0x03;
 800440e:	4b57      	ldr	r3, [pc, #348]	@ (800456c <BNO_Page0Adress+0x2a0>)
 8004410:	785b      	ldrb	r3, [r3, #1]
 8004412:	099b      	lsrs	r3, r3, #6
 8004414:	b2da      	uxtb	r2, r3
 8004416:	4b56      	ldr	r3, [pc, #344]	@ (8004570 <BNO_Page0Adress+0x2a4>)
 8004418:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			IMU.CalSatus.Gyr = (BNO_RxBuffer[1] >> 4) & 0x03;
 800441c:	4b53      	ldr	r3, [pc, #332]	@ (800456c <BNO_Page0Adress+0x2a0>)
 800441e:	785b      	ldrb	r3, [r3, #1]
 8004420:	091b      	lsrs	r3, r3, #4
 8004422:	b2db      	uxtb	r3, r3
 8004424:	f003 0303 	and.w	r3, r3, #3
 8004428:	b2da      	uxtb	r2, r3
 800442a:	4b51      	ldr	r3, [pc, #324]	@ (8004570 <BNO_Page0Adress+0x2a4>)
 800442c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
			IMU.CalSatus.Acc = (BNO_RxBuffer[1] >> 2) & 0x03;
 8004430:	4b4e      	ldr	r3, [pc, #312]	@ (800456c <BNO_Page0Adress+0x2a0>)
 8004432:	785b      	ldrb	r3, [r3, #1]
 8004434:	089b      	lsrs	r3, r3, #2
 8004436:	b2db      	uxtb	r3, r3
 8004438:	f003 0303 	and.w	r3, r3, #3
 800443c:	b2da      	uxtb	r2, r3
 800443e:	4b4c      	ldr	r3, [pc, #304]	@ (8004570 <BNO_Page0Adress+0x2a4>)
 8004440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
			IMU.CalSatus.Mag = BNO_RxBuffer[1] & 0x03;
 8004444:	4b49      	ldr	r3, [pc, #292]	@ (800456c <BNO_Page0Adress+0x2a0>)
 8004446:	785b      	ldrb	r3, [r3, #1]
 8004448:	f003 0303 	and.w	r3, r3, #3
 800444c:	b2da      	uxtb	r2, r3
 800444e:	4b48      	ldr	r3, [pc, #288]	@ (8004570 <BNO_Page0Adress+0x2a4>)
 8004450:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			BNO_ErrorHandler = ReadSucces;
 8004454:	4b47      	ldr	r3, [pc, #284]	@ (8004574 <BNO_Page0Adress+0x2a8>)
 8004456:	220b      	movs	r2, #11
 8004458:	701a      	strb	r2, [r3, #0]
			break;
 800445a:	e188      	b.n	800476e <BNO_Page0Adress+0x4a2>
			IMU.Calibration_Data.offset.accel.x = (int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1]);
 800445c:	4b43      	ldr	r3, [pc, #268]	@ (800456c <BNO_Page0Adress+0x2a0>)
 800445e:	789b      	ldrb	r3, [r3, #2]
 8004460:	021b      	lsls	r3, r3, #8
 8004462:	b21a      	sxth	r2, r3
 8004464:	4b41      	ldr	r3, [pc, #260]	@ (800456c <BNO_Page0Adress+0x2a0>)
 8004466:	785b      	ldrb	r3, [r3, #1]
 8004468:	b21b      	sxth	r3, r3
 800446a:	4313      	orrs	r3, r2
 800446c:	b21a      	sxth	r2, r3
 800446e:	4b40      	ldr	r3, [pc, #256]	@ (8004570 <BNO_Page0Adress+0x2a4>)
 8004470:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
			IMU.Calibration_Data.offset.accel.y = (int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3]);
 8004474:	4b3d      	ldr	r3, [pc, #244]	@ (800456c <BNO_Page0Adress+0x2a0>)
 8004476:	791b      	ldrb	r3, [r3, #4]
 8004478:	021b      	lsls	r3, r3, #8
 800447a:	b21a      	sxth	r2, r3
 800447c:	4b3b      	ldr	r3, [pc, #236]	@ (800456c <BNO_Page0Adress+0x2a0>)
 800447e:	78db      	ldrb	r3, [r3, #3]
 8004480:	b21b      	sxth	r3, r3
 8004482:	4313      	orrs	r3, r2
 8004484:	b21a      	sxth	r2, r3
 8004486:	4b3a      	ldr	r3, [pc, #232]	@ (8004570 <BNO_Page0Adress+0x2a4>)
 8004488:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
			IMU.Calibration_Data.offset.accel.z = (int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5]);
 800448c:	4b37      	ldr	r3, [pc, #220]	@ (800456c <BNO_Page0Adress+0x2a0>)
 800448e:	799b      	ldrb	r3, [r3, #6]
 8004490:	021b      	lsls	r3, r3, #8
 8004492:	b21a      	sxth	r2, r3
 8004494:	4b35      	ldr	r3, [pc, #212]	@ (800456c <BNO_Page0Adress+0x2a0>)
 8004496:	795b      	ldrb	r3, [r3, #5]
 8004498:	b21b      	sxth	r3, r3
 800449a:	4313      	orrs	r3, r2
 800449c:	b21a      	sxth	r2, r3
 800449e:	4b34      	ldr	r3, [pc, #208]	@ (8004570 <BNO_Page0Adress+0x2a4>)
 80044a0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
			IMU.Calibration_Data.offset.mag.x = (int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7]);
 80044a4:	4b31      	ldr	r3, [pc, #196]	@ (800456c <BNO_Page0Adress+0x2a0>)
 80044a6:	7a1b      	ldrb	r3, [r3, #8]
 80044a8:	021b      	lsls	r3, r3, #8
 80044aa:	b21a      	sxth	r2, r3
 80044ac:	4b2f      	ldr	r3, [pc, #188]	@ (800456c <BNO_Page0Adress+0x2a0>)
 80044ae:	79db      	ldrb	r3, [r3, #7]
 80044b0:	b21b      	sxth	r3, r3
 80044b2:	4313      	orrs	r3, r2
 80044b4:	b21a      	sxth	r2, r3
 80044b6:	4b2e      	ldr	r3, [pc, #184]	@ (8004570 <BNO_Page0Adress+0x2a4>)
 80044b8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
			IMU.Calibration_Data.offset.mag.y = (int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9]);
 80044bc:	4b2b      	ldr	r3, [pc, #172]	@ (800456c <BNO_Page0Adress+0x2a0>)
 80044be:	7a9b      	ldrb	r3, [r3, #10]
 80044c0:	021b      	lsls	r3, r3, #8
 80044c2:	b21a      	sxth	r2, r3
 80044c4:	4b29      	ldr	r3, [pc, #164]	@ (800456c <BNO_Page0Adress+0x2a0>)
 80044c6:	7a5b      	ldrb	r3, [r3, #9]
 80044c8:	b21b      	sxth	r3, r3
 80044ca:	4313      	orrs	r3, r2
 80044cc:	b21a      	sxth	r2, r3
 80044ce:	4b28      	ldr	r3, [pc, #160]	@ (8004570 <BNO_Page0Adress+0x2a4>)
 80044d0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
			IMU.Calibration_Data.offset.mag.z = (int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11]);
 80044d4:	4b25      	ldr	r3, [pc, #148]	@ (800456c <BNO_Page0Adress+0x2a0>)
 80044d6:	7b1b      	ldrb	r3, [r3, #12]
 80044d8:	021b      	lsls	r3, r3, #8
 80044da:	b21a      	sxth	r2, r3
 80044dc:	4b23      	ldr	r3, [pc, #140]	@ (800456c <BNO_Page0Adress+0x2a0>)
 80044de:	7adb      	ldrb	r3, [r3, #11]
 80044e0:	b21b      	sxth	r3, r3
 80044e2:	4313      	orrs	r3, r2
 80044e4:	b21a      	sxth	r2, r3
 80044e6:	4b22      	ldr	r3, [pc, #136]	@ (8004570 <BNO_Page0Adress+0x2a4>)
 80044e8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
			IMU.Calibration_Data.offset.gyro.x = (int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13]);
 80044ec:	4b1f      	ldr	r3, [pc, #124]	@ (800456c <BNO_Page0Adress+0x2a0>)
 80044ee:	7b9b      	ldrb	r3, [r3, #14]
 80044f0:	021b      	lsls	r3, r3, #8
 80044f2:	b21a      	sxth	r2, r3
 80044f4:	4b1d      	ldr	r3, [pc, #116]	@ (800456c <BNO_Page0Adress+0x2a0>)
 80044f6:	7b5b      	ldrb	r3, [r3, #13]
 80044f8:	b21b      	sxth	r3, r3
 80044fa:	4313      	orrs	r3, r2
 80044fc:	b21a      	sxth	r2, r3
 80044fe:	4b1c      	ldr	r3, [pc, #112]	@ (8004570 <BNO_Page0Adress+0x2a4>)
 8004500:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
			IMU.Calibration_Data.offset.gyro.y = (int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15]);
 8004504:	4b19      	ldr	r3, [pc, #100]	@ (800456c <BNO_Page0Adress+0x2a0>)
 8004506:	7c1b      	ldrb	r3, [r3, #16]
 8004508:	021b      	lsls	r3, r3, #8
 800450a:	b21a      	sxth	r2, r3
 800450c:	4b17      	ldr	r3, [pc, #92]	@ (800456c <BNO_Page0Adress+0x2a0>)
 800450e:	7bdb      	ldrb	r3, [r3, #15]
 8004510:	b21b      	sxth	r3, r3
 8004512:	4313      	orrs	r3, r2
 8004514:	b21a      	sxth	r2, r3
 8004516:	4b16      	ldr	r3, [pc, #88]	@ (8004570 <BNO_Page0Adress+0x2a4>)
 8004518:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
			IMU.Calibration_Data.offset.gyro.z = (int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17]);
 800451c:	4b13      	ldr	r3, [pc, #76]	@ (800456c <BNO_Page0Adress+0x2a0>)
 800451e:	7c9b      	ldrb	r3, [r3, #18]
 8004520:	021b      	lsls	r3, r3, #8
 8004522:	b21a      	sxth	r2, r3
 8004524:	4b11      	ldr	r3, [pc, #68]	@ (800456c <BNO_Page0Adress+0x2a0>)
 8004526:	7c5b      	ldrb	r3, [r3, #17]
 8004528:	b21b      	sxth	r3, r3
 800452a:	4313      	orrs	r3, r2
 800452c:	b21a      	sxth	r2, r3
 800452e:	4b10      	ldr	r3, [pc, #64]	@ (8004570 <BNO_Page0Adress+0x2a4>)
 8004530:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
			IMU.Calibration_Data.radius.accel = (uint16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19]);
 8004534:	4b0d      	ldr	r3, [pc, #52]	@ (800456c <BNO_Page0Adress+0x2a0>)
 8004536:	7d1b      	ldrb	r3, [r3, #20]
 8004538:	021b      	lsls	r3, r3, #8
 800453a:	b21a      	sxth	r2, r3
 800453c:	4b0b      	ldr	r3, [pc, #44]	@ (800456c <BNO_Page0Adress+0x2a0>)
 800453e:	7cdb      	ldrb	r3, [r3, #19]
 8004540:	b21b      	sxth	r3, r3
 8004542:	4313      	orrs	r3, r2
 8004544:	b21b      	sxth	r3, r3
 8004546:	b29a      	uxth	r2, r3
 8004548:	4b09      	ldr	r3, [pc, #36]	@ (8004570 <BNO_Page0Adress+0x2a4>)
 800454a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
			IMU.Calibration_Data.radius.mag   = (uint16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21]);
 800454e:	4b07      	ldr	r3, [pc, #28]	@ (800456c <BNO_Page0Adress+0x2a0>)
 8004550:	7d9b      	ldrb	r3, [r3, #22]
 8004552:	021b      	lsls	r3, r3, #8
 8004554:	b21a      	sxth	r2, r3
 8004556:	4b05      	ldr	r3, [pc, #20]	@ (800456c <BNO_Page0Adress+0x2a0>)
 8004558:	7d5b      	ldrb	r3, [r3, #21]
 800455a:	b21b      	sxth	r3, r3
 800455c:	4313      	orrs	r3, r2
 800455e:	b21b      	sxth	r3, r3
 8004560:	b29a      	uxth	r2, r3
 8004562:	4b03      	ldr	r3, [pc, #12]	@ (8004570 <BNO_Page0Adress+0x2a4>)
 8004564:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
			break;
 8004568:	e101      	b.n	800476e <BNO_Page0Adress+0x4a2>
 800456a:	bf00      	nop
 800456c:	24001448 	.word	0x24001448
 8004570:	24001550 	.word	0x24001550
 8004574:	24001549 	.word	0x24001549
			IMU.ACC.x = ((float)((int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1])))/100;
 8004578:	4b7f      	ldr	r3, [pc, #508]	@ (8004778 <BNO_Page0Adress+0x4ac>)
 800457a:	789b      	ldrb	r3, [r3, #2]
 800457c:	021b      	lsls	r3, r3, #8
 800457e:	b21a      	sxth	r2, r3
 8004580:	4b7d      	ldr	r3, [pc, #500]	@ (8004778 <BNO_Page0Adress+0x4ac>)
 8004582:	785b      	ldrb	r3, [r3, #1]
 8004584:	b21b      	sxth	r3, r3
 8004586:	4313      	orrs	r3, r2
 8004588:	b21b      	sxth	r3, r3
 800458a:	ee07 3a90 	vmov	s15, r3
 800458e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004592:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 800477c <BNO_Page0Adress+0x4b0>
 8004596:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800459a:	4b79      	ldr	r3, [pc, #484]	@ (8004780 <BNO_Page0Adress+0x4b4>)
 800459c:	edc3 7a02 	vstr	s15, [r3, #8]
			IMU.ACC.y = ((float)((int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3])))/100;
 80045a0:	4b75      	ldr	r3, [pc, #468]	@ (8004778 <BNO_Page0Adress+0x4ac>)
 80045a2:	791b      	ldrb	r3, [r3, #4]
 80045a4:	021b      	lsls	r3, r3, #8
 80045a6:	b21a      	sxth	r2, r3
 80045a8:	4b73      	ldr	r3, [pc, #460]	@ (8004778 <BNO_Page0Adress+0x4ac>)
 80045aa:	78db      	ldrb	r3, [r3, #3]
 80045ac:	b21b      	sxth	r3, r3
 80045ae:	4313      	orrs	r3, r2
 80045b0:	b21b      	sxth	r3, r3
 80045b2:	ee07 3a90 	vmov	s15, r3
 80045b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045ba:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800477c <BNO_Page0Adress+0x4b0>
 80045be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045c2:	4b6f      	ldr	r3, [pc, #444]	@ (8004780 <BNO_Page0Adress+0x4b4>)
 80045c4:	edc3 7a03 	vstr	s15, [r3, #12]
			IMU.ACC.z = ((float)((int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5])))/100;
 80045c8:	4b6b      	ldr	r3, [pc, #428]	@ (8004778 <BNO_Page0Adress+0x4ac>)
 80045ca:	799b      	ldrb	r3, [r3, #6]
 80045cc:	021b      	lsls	r3, r3, #8
 80045ce:	b21a      	sxth	r2, r3
 80045d0:	4b69      	ldr	r3, [pc, #420]	@ (8004778 <BNO_Page0Adress+0x4ac>)
 80045d2:	795b      	ldrb	r3, [r3, #5]
 80045d4:	b21b      	sxth	r3, r3
 80045d6:	4313      	orrs	r3, r2
 80045d8:	b21b      	sxth	r3, r3
 80045da:	ee07 3a90 	vmov	s15, r3
 80045de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045e2:	eddf 6a66 	vldr	s13, [pc, #408]	@ 800477c <BNO_Page0Adress+0x4b0>
 80045e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045ea:	4b65      	ldr	r3, [pc, #404]	@ (8004780 <BNO_Page0Adress+0x4b4>)
 80045ec:	edc3 7a04 	vstr	s15, [r3, #16]
			IMU.MAG.x = ((float)((int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7])))/16;
 80045f0:	4b61      	ldr	r3, [pc, #388]	@ (8004778 <BNO_Page0Adress+0x4ac>)
 80045f2:	7a1b      	ldrb	r3, [r3, #8]
 80045f4:	021b      	lsls	r3, r3, #8
 80045f6:	b21a      	sxth	r2, r3
 80045f8:	4b5f      	ldr	r3, [pc, #380]	@ (8004778 <BNO_Page0Adress+0x4ac>)
 80045fa:	79db      	ldrb	r3, [r3, #7]
 80045fc:	b21b      	sxth	r3, r3
 80045fe:	4313      	orrs	r3, r2
 8004600:	b21b      	sxth	r3, r3
 8004602:	ee07 3a90 	vmov	s15, r3
 8004606:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800460a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800460e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004612:	4b5b      	ldr	r3, [pc, #364]	@ (8004780 <BNO_Page0Adress+0x4b4>)
 8004614:	edc3 7a06 	vstr	s15, [r3, #24]
			IMU.MAG.y = ((float)((int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9])))/16;
 8004618:	4b57      	ldr	r3, [pc, #348]	@ (8004778 <BNO_Page0Adress+0x4ac>)
 800461a:	7a9b      	ldrb	r3, [r3, #10]
 800461c:	021b      	lsls	r3, r3, #8
 800461e:	b21a      	sxth	r2, r3
 8004620:	4b55      	ldr	r3, [pc, #340]	@ (8004778 <BNO_Page0Adress+0x4ac>)
 8004622:	7a5b      	ldrb	r3, [r3, #9]
 8004624:	b21b      	sxth	r3, r3
 8004626:	4313      	orrs	r3, r2
 8004628:	b21b      	sxth	r3, r3
 800462a:	ee07 3a90 	vmov	s15, r3
 800462e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004632:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8004636:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800463a:	4b51      	ldr	r3, [pc, #324]	@ (8004780 <BNO_Page0Adress+0x4b4>)
 800463c:	edc3 7a07 	vstr	s15, [r3, #28]
			IMU.MAG.z = ((float)((int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11])))/16;
 8004640:	4b4d      	ldr	r3, [pc, #308]	@ (8004778 <BNO_Page0Adress+0x4ac>)
 8004642:	7b1b      	ldrb	r3, [r3, #12]
 8004644:	021b      	lsls	r3, r3, #8
 8004646:	b21a      	sxth	r2, r3
 8004648:	4b4b      	ldr	r3, [pc, #300]	@ (8004778 <BNO_Page0Adress+0x4ac>)
 800464a:	7adb      	ldrb	r3, [r3, #11]
 800464c:	b21b      	sxth	r3, r3
 800464e:	4313      	orrs	r3, r2
 8004650:	b21b      	sxth	r3, r3
 8004652:	ee07 3a90 	vmov	s15, r3
 8004656:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800465a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800465e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004662:	4b47      	ldr	r3, [pc, #284]	@ (8004780 <BNO_Page0Adress+0x4b4>)
 8004664:	edc3 7a08 	vstr	s15, [r3, #32]
			IMU.GYR.x = ((float)((int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13])))/16;
 8004668:	4b43      	ldr	r3, [pc, #268]	@ (8004778 <BNO_Page0Adress+0x4ac>)
 800466a:	7b9b      	ldrb	r3, [r3, #14]
 800466c:	021b      	lsls	r3, r3, #8
 800466e:	b21a      	sxth	r2, r3
 8004670:	4b41      	ldr	r3, [pc, #260]	@ (8004778 <BNO_Page0Adress+0x4ac>)
 8004672:	7b5b      	ldrb	r3, [r3, #13]
 8004674:	b21b      	sxth	r3, r3
 8004676:	4313      	orrs	r3, r2
 8004678:	b21b      	sxth	r3, r3
 800467a:	ee07 3a90 	vmov	s15, r3
 800467e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004682:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8004686:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800468a:	4b3d      	ldr	r3, [pc, #244]	@ (8004780 <BNO_Page0Adress+0x4b4>)
 800468c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
			IMU.GYR.y = -((float)((int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15])))/16;
 8004690:	4b39      	ldr	r3, [pc, #228]	@ (8004778 <BNO_Page0Adress+0x4ac>)
 8004692:	7c1b      	ldrb	r3, [r3, #16]
 8004694:	021b      	lsls	r3, r3, #8
 8004696:	b21a      	sxth	r2, r3
 8004698:	4b37      	ldr	r3, [pc, #220]	@ (8004778 <BNO_Page0Adress+0x4ac>)
 800469a:	7bdb      	ldrb	r3, [r3, #15]
 800469c:	b21b      	sxth	r3, r3
 800469e:	4313      	orrs	r3, r2
 80046a0:	b21b      	sxth	r3, r3
 80046a2:	ee07 3a90 	vmov	s15, r3
 80046a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046aa:	eeb1 7a67 	vneg.f32	s14, s15
 80046ae:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80046b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046b6:	4b32      	ldr	r3, [pc, #200]	@ (8004780 <BNO_Page0Adress+0x4b4>)
 80046b8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
			IMU.GYR.z = -((float)((int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17])))/16;
 80046bc:	4b2e      	ldr	r3, [pc, #184]	@ (8004778 <BNO_Page0Adress+0x4ac>)
 80046be:	7c9b      	ldrb	r3, [r3, #18]
 80046c0:	021b      	lsls	r3, r3, #8
 80046c2:	b21a      	sxth	r2, r3
 80046c4:	4b2c      	ldr	r3, [pc, #176]	@ (8004778 <BNO_Page0Adress+0x4ac>)
 80046c6:	7c5b      	ldrb	r3, [r3, #17]
 80046c8:	b21b      	sxth	r3, r3
 80046ca:	4313      	orrs	r3, r2
 80046cc:	b21b      	sxth	r3, r3
 80046ce:	ee07 3a90 	vmov	s15, r3
 80046d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046d6:	eeb1 7a67 	vneg.f32	s14, s15
 80046da:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80046de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046e2:	4b27      	ldr	r3, [pc, #156]	@ (8004780 <BNO_Page0Adress+0x4b4>)
 80046e4:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
			IMU.Heading = ((float)((int16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19])))/16;
 80046e8:	4b23      	ldr	r3, [pc, #140]	@ (8004778 <BNO_Page0Adress+0x4ac>)
 80046ea:	7d1b      	ldrb	r3, [r3, #20]
 80046ec:	021b      	lsls	r3, r3, #8
 80046ee:	b21a      	sxth	r2, r3
 80046f0:	4b21      	ldr	r3, [pc, #132]	@ (8004778 <BNO_Page0Adress+0x4ac>)
 80046f2:	7cdb      	ldrb	r3, [r3, #19]
 80046f4:	b21b      	sxth	r3, r3
 80046f6:	4313      	orrs	r3, r2
 80046f8:	b21b      	sxth	r3, r3
 80046fa:	ee07 3a90 	vmov	s15, r3
 80046fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004702:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8004706:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800470a:	4b1d      	ldr	r3, [pc, #116]	@ (8004780 <BNO_Page0Adress+0x4b4>)
 800470c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
			IMU.Pitch = ((float)((int16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21])))/16;
 8004710:	4b19      	ldr	r3, [pc, #100]	@ (8004778 <BNO_Page0Adress+0x4ac>)
 8004712:	7d9b      	ldrb	r3, [r3, #22]
 8004714:	021b      	lsls	r3, r3, #8
 8004716:	b21a      	sxth	r2, r3
 8004718:	4b17      	ldr	r3, [pc, #92]	@ (8004778 <BNO_Page0Adress+0x4ac>)
 800471a:	7d5b      	ldrb	r3, [r3, #21]
 800471c:	b21b      	sxth	r3, r3
 800471e:	4313      	orrs	r3, r2
 8004720:	b21b      	sxth	r3, r3
 8004722:	ee07 3a90 	vmov	s15, r3
 8004726:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800472a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800472e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004732:	4b13      	ldr	r3, [pc, #76]	@ (8004780 <BNO_Page0Adress+0x4b4>)
 8004734:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
			IMU.Roll = ((float)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;
 8004738:	4b0f      	ldr	r3, [pc, #60]	@ (8004778 <BNO_Page0Adress+0x4ac>)
 800473a:	7e1b      	ldrb	r3, [r3, #24]
 800473c:	021b      	lsls	r3, r3, #8
 800473e:	b21a      	sxth	r2, r3
 8004740:	4b0d      	ldr	r3, [pc, #52]	@ (8004778 <BNO_Page0Adress+0x4ac>)
 8004742:	7ddb      	ldrb	r3, [r3, #23]
 8004744:	b21b      	sxth	r3, r3
 8004746:	4313      	orrs	r3, r2
 8004748:	b21b      	sxth	r3, r3
 800474a:	ee07 3a90 	vmov	s15, r3
 800474e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004752:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8004756:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800475a:	4b09      	ldr	r3, [pc, #36]	@ (8004780 <BNO_Page0Adress+0x4b4>)
 800475c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			BNO_ErrorHandler = ReadSucces;
 8004760:	4b08      	ldr	r3, [pc, #32]	@ (8004784 <BNO_Page0Adress+0x4b8>)
 8004762:	220b      	movs	r2, #11
 8004764:	701a      	strb	r2, [r3, #0]
			break;
 8004766:	e002      	b.n	800476e <BNO_Page0Adress+0x4a2>
			break;
 8004768:	bf00      	nop
 800476a:	e000      	b.n	800476e <BNO_Page0Adress+0x4a2>
			if(BNO_RxBuffer[1] != 160) return;
 800476c:	bf00      	nop
	}
}
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	24001448 	.word	0x24001448
 800477c:	42c80000 	.word	0x42c80000
 8004780:	24001550 	.word	0x24001550
 8004784:	24001549 	.word	0x24001549

08004788 <BNO_Page1Adress>:

void BNO_Page1Adress(void){
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 800478c:	4b09      	ldr	r3, [pc, #36]	@ (80047b4 <BNO_Page1Adress+0x2c>)
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	2b07      	cmp	r3, #7
 8004792:	d108      	bne.n	80047a6 <BNO_Page1Adress+0x1e>
		case BNO055_PAGE_ID:
			IMU.Page = BNO_RxBuffer[1];
 8004794:	4b07      	ldr	r3, [pc, #28]	@ (80047b4 <BNO_Page1Adress+0x2c>)
 8004796:	785a      	ldrb	r2, [r3, #1]
 8004798:	4b07      	ldr	r3, [pc, #28]	@ (80047b8 <BNO_Page1Adress+0x30>)
 800479a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			BNO_ErrorHandler = ReadSucces;
 800479e:	4b07      	ldr	r3, [pc, #28]	@ (80047bc <BNO_Page1Adress+0x34>)
 80047a0:	220b      	movs	r2, #11
 80047a2:	701a      	strb	r2, [r3, #0]
			break;
 80047a4:	e000      	b.n	80047a8 <BNO_Page1Adress+0x20>

		default:
			break;
 80047a6:	bf00      	nop
	}
}
 80047a8:	bf00      	nop
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	24001448 	.word	0x24001448
 80047b8:	24001550 	.word	0x24001550
 80047bc:	24001549 	.word	0x24001549

080047c0 <BNO_EmptyingBuffer>:

void BNO_EmptyingBuffer(void){
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
	switch (IMU.Page) {
 80047c4:	4b0a      	ldr	r3, [pc, #40]	@ (80047f0 <BNO_EmptyingBuffer+0x30>)
 80047c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d002      	beq.n	80047d4 <BNO_EmptyingBuffer+0x14>
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d003      	beq.n	80047da <BNO_EmptyingBuffer+0x1a>
			break;
		case 1:
			BNO_Page1Adress();
			break;
		default:
			break;
 80047d2:	e005      	b.n	80047e0 <BNO_EmptyingBuffer+0x20>
			BNO_Page0Adress();
 80047d4:	f7ff fd7a 	bl	80042cc <BNO_Page0Adress>
			break;
 80047d8:	e002      	b.n	80047e0 <BNO_EmptyingBuffer+0x20>
			BNO_Page1Adress();
 80047da:	f7ff ffd5 	bl	8004788 <BNO_Page1Adress>
			break;
 80047de:	bf00      	nop
	}
	memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 80047e0:	22ff      	movs	r2, #255	@ 0xff
 80047e2:	2100      	movs	r1, #0
 80047e4:	4803      	ldr	r0, [pc, #12]	@ (80047f4 <BNO_EmptyingBuffer+0x34>)
 80047e6:	f012 fb56 	bl	8016e96 <memset>
}
 80047ea:	bf00      	nop
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	24001550 	.word	0x24001550
 80047f4:	24001448 	.word	0x24001448

080047f8 <BNO_SWReset>:
		default:
			break;
	}
}

void BNO_SWReset(void){
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
	BNO_Write(BNO055_SYS_TRIGGER,0x20);
 80047fc:	2120      	movs	r1, #32
 80047fe:	203f      	movs	r0, #63	@ 0x3f
 8004800:	f7ff fcd0 	bl	80041a4 <BNO_Write>
	bno055_delay(70);
 8004804:	2046      	movs	r0, #70	@ 0x46
 8004806:	f7ff fc93 	bl	8004130 <bno055_delay>
	IMU.ID = 0x00;
 800480a:	4b04      	ldr	r3, [pc, #16]	@ (800481c <BNO_SWReset+0x24>)
 800480c:	2200      	movs	r2, #0
 800480e:	701a      	strb	r2, [r3, #0]
	BNO_CurrentState = Configuration;
 8004810:	4b03      	ldr	r3, [pc, #12]	@ (8004820 <BNO_SWReset+0x28>)
 8004812:	2201      	movs	r2, #1
 8004814:	701a      	strb	r2, [r3, #0]
}
 8004816:	bf00      	nop
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	24001550 	.word	0x24001550
 8004820:	2400154c 	.word	0x2400154c

08004824 <bno055_setOperationMode>:

void bno055_setOperationMode(bno055_opmode_t mode) {
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	4603      	mov	r3, r0
 800482c:	71fb      	strb	r3, [r7, #7]
  BNO_Write(BNO055_OPR_MODE, mode);
 800482e:	79fb      	ldrb	r3, [r7, #7]
 8004830:	4619      	mov	r1, r3
 8004832:	203d      	movs	r0, #61	@ 0x3d
 8004834:	f7ff fcb6 	bl	80041a4 <BNO_Write>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8004838:	79fb      	ldrb	r3, [r7, #7]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d103      	bne.n	8004846 <bno055_setOperationMode+0x22>
    bno055_delay(5);
 800483e:	2005      	movs	r0, #5
 8004840:	f7ff fc76 	bl	8004130 <bno055_delay>
  } else {
    bno055_delay(3);
  }
}
 8004844:	e002      	b.n	800484c <bno055_setOperationMode+0x28>
    bno055_delay(3);
 8004846:	2003      	movs	r0, #3
 8004848:	f7ff fc72 	bl	8004130 <bno055_delay>
}
 800484c:	bf00      	nop
 800484e:	3708      	adds	r7, #8
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8004858:	2000      	movs	r0, #0
 800485a:	f7ff ffe3 	bl	8004824 <bno055_setOperationMode>
}
 800485e:	bf00      	nop
 8004860:	bd80      	pop	{r7, pc}

08004862 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8004862:	b580      	push	{r7, lr}
 8004864:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8004866:	200c      	movs	r0, #12
 8004868:	f7ff ffdc 	bl	8004824 <bno055_setOperationMode>
}
 800486c:	bf00      	nop
 800486e:	bd80      	pop	{r7, pc}

08004870 <BNO_GetCalibrationData>:

void BNO_GetCalibrationData(void){
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_OFFSET_X_LSB, 22);
 8004874:	2116      	movs	r1, #22
 8004876:	2055      	movs	r0, #85	@ 0x55
 8004878:	f7ff fc6e 	bl	8004158 <BNO_Read>
}
 800487c:	bf00      	nop
 800487e:	bd80      	pop	{r7, pc}

08004880 <BNO_SetCalibrationData>:

void BNO_SetCalibrationData(void){
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
	uint8_t buffer[22];

	  memcpy(&IMU.Calibration_Data.offset.accel, buffer, 6);
 8004886:	463b      	mov	r3, r7
 8004888:	2206      	movs	r2, #6
 800488a:	4619      	mov	r1, r3
 800488c:	4814      	ldr	r0, [pc, #80]	@ (80048e0 <BNO_SetCalibrationData+0x60>)
 800488e:	f012 fb9c 	bl	8016fca <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.mag, buffer + 6, 6);
 8004892:	463b      	mov	r3, r7
 8004894:	3306      	adds	r3, #6
 8004896:	2206      	movs	r2, #6
 8004898:	4619      	mov	r1, r3
 800489a:	4812      	ldr	r0, [pc, #72]	@ (80048e4 <BNO_SetCalibrationData+0x64>)
 800489c:	f012 fb95 	bl	8016fca <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.gyro, buffer + 12, 6);
 80048a0:	463b      	mov	r3, r7
 80048a2:	330c      	adds	r3, #12
 80048a4:	2206      	movs	r2, #6
 80048a6:	4619      	mov	r1, r3
 80048a8:	480f      	ldr	r0, [pc, #60]	@ (80048e8 <BNO_SetCalibrationData+0x68>)
 80048aa:	f012 fb8e 	bl	8016fca <memcpy>
	  memcpy(&IMU.Calibration_Data.radius.accel, buffer + 18, 2);
 80048ae:	463b      	mov	r3, r7
 80048b0:	3312      	adds	r3, #18
 80048b2:	881b      	ldrh	r3, [r3, #0]
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	4b0d      	ldr	r3, [pc, #52]	@ (80048ec <BNO_SetCalibrationData+0x6c>)
 80048b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
	  memcpy(&IMU.Calibration_Data.radius.mag, buffer + 20, 2);
 80048bc:	463b      	mov	r3, r7
 80048be:	3314      	adds	r3, #20
 80048c0:	881b      	ldrh	r3, [r3, #0]
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	4b09      	ldr	r3, [pc, #36]	@ (80048ec <BNO_SetCalibrationData+0x6c>)
 80048c6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

	BNO_Write_MB(BNO055_ACC_OFFSET_X_LSB, 22, buffer);
 80048ca:	463b      	mov	r3, r7
 80048cc:	461a      	mov	r2, r3
 80048ce:	2116      	movs	r1, #22
 80048d0:	2055      	movs	r0, #85	@ 0x55
 80048d2:	f7ff fc89 	bl	80041e8 <BNO_Write_MB>
}
 80048d6:	bf00      	nop
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	240015a6 	.word	0x240015a6
 80048e4:	240015a0 	.word	0x240015a0
 80048e8:	2400159a 	.word	0x2400159a
 80048ec:	24001550 	.word	0x24001550

080048f0 <BNO_Init>:

void BNO_Init(void){
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, SET);
 80048f4:	2201      	movs	r2, #1
 80048f6:	2104      	movs	r1, #4
 80048f8:	4808      	ldr	r0, [pc, #32]	@ (800491c <BNO_Init+0x2c>)
 80048fa:	f004 fe57 	bl	80095ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IMU_BOOT_GPIO_Port, IMU_BOOT_Pin, SET);
 80048fe:	2201      	movs	r2, #1
 8004900:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004904:	4806      	ldr	r0, [pc, #24]	@ (8004920 <BNO_Init+0x30>)
 8004906:	f004 fe51 	bl	80095ac <HAL_GPIO_WritePin>

	bno055_delay(100);
 800490a:	2064      	movs	r0, #100	@ 0x64
 800490c:	f7ff fc10 	bl	8004130 <bno055_delay>

	BNO_CurrentState = Reset;
 8004910:	4b04      	ldr	r3, [pc, #16]	@ (8004924 <BNO_Init+0x34>)
 8004912:	2204      	movs	r2, #4
 8004914:	701a      	strb	r2, [r3, #0]
}
 8004916:	bf00      	nop
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	58020c00 	.word	0x58020c00
 8004920:	58020400 	.word	0x58020400
 8004924:	2400154c 	.word	0x2400154c

08004928 <BNO_Config>:

void BNO_Config(void){
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0
	static uint8_t ConfigFlag = 0;

	switch (ConfigFlag) {
 800492c:	4b20      	ldr	r3, [pc, #128]	@ (80049b0 <BNO_Config+0x88>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	2b03      	cmp	r3, #3
 8004932:	d839      	bhi.n	80049a8 <BNO_Config+0x80>
 8004934:	a201      	add	r2, pc, #4	@ (adr r2, 800493c <BNO_Config+0x14>)
 8004936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493a:	bf00      	nop
 800493c:	0800494d 	.word	0x0800494d
 8004940:	0800495d 	.word	0x0800495d
 8004944:	08004969 	.word	0x08004969
 8004948:	0800498b 	.word	0x0800498b
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 800494c:	2100      	movs	r1, #0
 800494e:	203f      	movs	r0, #63	@ 0x3f
 8004950:	f7ff fc28 	bl	80041a4 <BNO_Write>
			ConfigFlag = 1;
 8004954:	4b16      	ldr	r3, [pc, #88]	@ (80049b0 <BNO_Config+0x88>)
 8004956:	2201      	movs	r2, #1
 8004958:	701a      	strb	r2, [r3, #0]
			break;
 800495a:	e026      	b.n	80049aa <BNO_Config+0x82>
		case 1:
			bno055_setOperationModeConfig();
 800495c:	f7ff ff7a 	bl	8004854 <bno055_setOperationModeConfig>
			ConfigFlag = 2;
 8004960:	4b13      	ldr	r3, [pc, #76]	@ (80049b0 <BNO_Config+0x88>)
 8004962:	2202      	movs	r2, #2
 8004964:	701a      	strb	r2, [r3, #0]
			break;
 8004966:	e020      	b.n	80049aa <BNO_Config+0x82>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 8004968:	2101      	movs	r1, #1
 800496a:	203d      	movs	r0, #61	@ 0x3d
 800496c:	f7ff fbf4 	bl	8004158 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 8004970:	4b10      	ldr	r3, [pc, #64]	@ (80049b4 <BNO_Config+0x8c>)
 8004972:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8004976:	2b00      	cmp	r3, #0
 8004978:	d103      	bne.n	8004982 <BNO_Config+0x5a>
				ConfigFlag = 3;
 800497a:	4b0d      	ldr	r3, [pc, #52]	@ (80049b0 <BNO_Config+0x88>)
 800497c:	2203      	movs	r2, #3
 800497e:	701a      	strb	r2, [r3, #0]
			}
			else ConfigFlag = 1;
			break;
 8004980:	e013      	b.n	80049aa <BNO_Config+0x82>
			else ConfigFlag = 1;
 8004982:	4b0b      	ldr	r3, [pc, #44]	@ (80049b0 <BNO_Config+0x88>)
 8004984:	2201      	movs	r2, #1
 8004986:	701a      	strb	r2, [r3, #0]
			break;
 8004988:	e00f      	b.n	80049aa <BNO_Config+0x82>
		case 3:
			BNO_Read(BNO055_CHIP_ID, 4);
 800498a:	2104      	movs	r1, #4
 800498c:	2000      	movs	r0, #0
 800498e:	f7ff fbe3 	bl	8004158 <BNO_Read>

			if(IMU.ID == BNO055_ID){
 8004992:	4b08      	ldr	r3, [pc, #32]	@ (80049b4 <BNO_Config+0x8c>)
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	2ba0      	cmp	r3, #160	@ 0xa0
 8004998:	d102      	bne.n	80049a0 <BNO_Config+0x78>
				BNO_CurrentState = Calibration;
 800499a:	4b07      	ldr	r3, [pc, #28]	@ (80049b8 <BNO_Config+0x90>)
 800499c:	2202      	movs	r2, #2
 800499e:	701a      	strb	r2, [r3, #0]
			}
			ConfigFlag = 0;
 80049a0:	4b03      	ldr	r3, [pc, #12]	@ (80049b0 <BNO_Config+0x88>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	701a      	strb	r2, [r3, #0]
			break;
 80049a6:	e000      	b.n	80049aa <BNO_Config+0x82>
		default:
			break;
 80049a8:	bf00      	nop
	}

}
 80049aa:	bf00      	nop
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	240015b0 	.word	0x240015b0
 80049b4:	24001550 	.word	0x24001550
 80049b8:	2400154c 	.word	0x2400154c

080049bc <BNO_CalibrationStatus>:

void BNO_CalibrationStatus(void){
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
	static uint8_t CalibrationFlag = 0;
	static uint8_t Calibrated = 1;

	switch (CalibrationFlag) {
 80049c0:	4b3d      	ldr	r3, [pc, #244]	@ (8004ab8 <BNO_CalibrationStatus+0xfc>)
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	2b07      	cmp	r3, #7
 80049c6:	d870      	bhi.n	8004aaa <BNO_CalibrationStatus+0xee>
 80049c8:	a201      	add	r2, pc, #4	@ (adr r2, 80049d0 <BNO_CalibrationStatus+0x14>)
 80049ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ce:	bf00      	nop
 80049d0:	080049f1 	.word	0x080049f1
 80049d4:	08004a01 	.word	0x08004a01
 80049d8:	08004a0d 	.word	0x08004a0d
 80049dc:	08004a45 	.word	0x08004a45
 80049e0:	08004a5f 	.word	0x08004a5f
 80049e4:	08004a6b 	.word	0x08004a6b
 80049e8:	08004a8d 	.word	0x08004a8d
 80049ec:	08004a9f 	.word	0x08004a9f
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 80049f0:	2100      	movs	r1, #0
 80049f2:	203f      	movs	r0, #63	@ 0x3f
 80049f4:	f7ff fbd6 	bl	80041a4 <BNO_Write>
			CalibrationFlag = 1;
 80049f8:	4b2f      	ldr	r3, [pc, #188]	@ (8004ab8 <BNO_CalibrationStatus+0xfc>)
 80049fa:	2201      	movs	r2, #1
 80049fc:	701a      	strb	r2, [r3, #0]
			break;
 80049fe:	e059      	b.n	8004ab4 <BNO_CalibrationStatus+0xf8>
		case 1:
			bno055_setOperationModeNDOF();
 8004a00:	f7ff ff2f 	bl	8004862 <bno055_setOperationModeNDOF>
			CalibrationFlag = 2;
 8004a04:	4b2c      	ldr	r3, [pc, #176]	@ (8004ab8 <BNO_CalibrationStatus+0xfc>)
 8004a06:	2202      	movs	r2, #2
 8004a08:	701a      	strb	r2, [r3, #0]
			break;
 8004a0a:	e053      	b.n	8004ab4 <BNO_CalibrationStatus+0xf8>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	203d      	movs	r0, #61	@ 0x3d
 8004a10:	f7ff fba2 	bl	8004158 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_NDOF){
 8004a14:	4b29      	ldr	r3, [pc, #164]	@ (8004abc <BNO_CalibrationStatus+0x100>)
 8004a16:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8004a1a:	2b0c      	cmp	r3, #12
 8004a1c:	d10e      	bne.n	8004a3c <BNO_CalibrationStatus+0x80>
				if(Calibrated){
 8004a1e:	4b28      	ldr	r3, [pc, #160]	@ (8004ac0 <BNO_CalibrationStatus+0x104>)
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d006      	beq.n	8004a34 <BNO_CalibrationStatus+0x78>
					CalibrationFlag = 0;
 8004a26:	4b24      	ldr	r3, [pc, #144]	@ (8004ab8 <BNO_CalibrationStatus+0xfc>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	701a      	strb	r2, [r3, #0]
					BNO_CurrentState = Operation;
 8004a2c:	4b25      	ldr	r3, [pc, #148]	@ (8004ac4 <BNO_CalibrationStatus+0x108>)
 8004a2e:	2203      	movs	r2, #3
 8004a30:	701a      	strb	r2, [r3, #0]
				}
				else CalibrationFlag = 3;
			}
			else CalibrationFlag = 1;
			break;
 8004a32:	e03f      	b.n	8004ab4 <BNO_CalibrationStatus+0xf8>
				else CalibrationFlag = 3;
 8004a34:	4b20      	ldr	r3, [pc, #128]	@ (8004ab8 <BNO_CalibrationStatus+0xfc>)
 8004a36:	2203      	movs	r2, #3
 8004a38:	701a      	strb	r2, [r3, #0]
			break;
 8004a3a:	e03b      	b.n	8004ab4 <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 1;
 8004a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8004ab8 <BNO_CalibrationStatus+0xfc>)
 8004a3e:	2201      	movs	r2, #1
 8004a40:	701a      	strb	r2, [r3, #0]
			break;
 8004a42:	e037      	b.n	8004ab4 <BNO_CalibrationStatus+0xf8>
		case 3:
			BNO_Read(BNO055_CALIB_STAT, 1);
 8004a44:	2101      	movs	r1, #1
 8004a46:	2035      	movs	r0, #53	@ 0x35
 8004a48:	f7ff fb86 	bl	8004158 <BNO_Read>
			if(IMU.CalSatus.Full == 0xFF){
 8004a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8004abc <BNO_CalibrationStatus+0x100>)
 8004a4e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004a52:	2bff      	cmp	r3, #255	@ 0xff
 8004a54:	d12d      	bne.n	8004ab2 <BNO_CalibrationStatus+0xf6>
				CalibrationFlag = 4;
 8004a56:	4b18      	ldr	r3, [pc, #96]	@ (8004ab8 <BNO_CalibrationStatus+0xfc>)
 8004a58:	2204      	movs	r2, #4
 8004a5a:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004a5c:	e029      	b.n	8004ab2 <BNO_CalibrationStatus+0xf6>
		case 4:
			bno055_setOperationModeConfig();
 8004a5e:	f7ff fef9 	bl	8004854 <bno055_setOperationModeConfig>
			CalibrationFlag = 5;
 8004a62:	4b15      	ldr	r3, [pc, #84]	@ (8004ab8 <BNO_CalibrationStatus+0xfc>)
 8004a64:	2205      	movs	r2, #5
 8004a66:	701a      	strb	r2, [r3, #0]
			break;
 8004a68:	e024      	b.n	8004ab4 <BNO_CalibrationStatus+0xf8>
		case 5:
			BNO_Read(BNO055_OPR_MODE, 1);
 8004a6a:	2101      	movs	r1, #1
 8004a6c:	203d      	movs	r0, #61	@ 0x3d
 8004a6e:	f7ff fb73 	bl	8004158 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 8004a72:	4b12      	ldr	r3, [pc, #72]	@ (8004abc <BNO_CalibrationStatus+0x100>)
 8004a74:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d103      	bne.n	8004a84 <BNO_CalibrationStatus+0xc8>
				CalibrationFlag = 6;
 8004a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8004ab8 <BNO_CalibrationStatus+0xfc>)
 8004a7e:	2206      	movs	r2, #6
 8004a80:	701a      	strb	r2, [r3, #0]

			}
			else CalibrationFlag = 4;
			break;
 8004a82:	e017      	b.n	8004ab4 <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 4;
 8004a84:	4b0c      	ldr	r3, [pc, #48]	@ (8004ab8 <BNO_CalibrationStatus+0xfc>)
 8004a86:	2204      	movs	r2, #4
 8004a88:	701a      	strb	r2, [r3, #0]
			break;
 8004a8a:	e013      	b.n	8004ab4 <BNO_CalibrationStatus+0xf8>
		case 6:
			BNO_GetCalibrationData();
 8004a8c:	f7ff fef0 	bl	8004870 <BNO_GetCalibrationData>
			Calibrated = 1;
 8004a90:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac0 <BNO_CalibrationStatus+0x104>)
 8004a92:	2201      	movs	r2, #1
 8004a94:	701a      	strb	r2, [r3, #0]
			CalibrationFlag = 1;
 8004a96:	4b08      	ldr	r3, [pc, #32]	@ (8004ab8 <BNO_CalibrationStatus+0xfc>)
 8004a98:	2201      	movs	r2, #1
 8004a9a:	701a      	strb	r2, [r3, #0]
			break;
 8004a9c:	e00a      	b.n	8004ab4 <BNO_CalibrationStatus+0xf8>
		case 7:
			BNO_SetCalibrationData();
 8004a9e:	f7ff feef 	bl	8004880 <BNO_SetCalibrationData>
			CalibrationFlag = 1;
 8004aa2:	4b05      	ldr	r3, [pc, #20]	@ (8004ab8 <BNO_CalibrationStatus+0xfc>)
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	701a      	strb	r2, [r3, #0]
			break;
 8004aa8:	e004      	b.n	8004ab4 <BNO_CalibrationStatus+0xf8>
		default:
			CalibrationFlag = 0;
 8004aaa:	4b03      	ldr	r3, [pc, #12]	@ (8004ab8 <BNO_CalibrationStatus+0xfc>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	701a      	strb	r2, [r3, #0]
			break;
 8004ab0:	e000      	b.n	8004ab4 <BNO_CalibrationStatus+0xf8>
			break;
 8004ab2:	bf00      	nop
    	BNO_CurrentState = Operation;
    }
    else bno055_setOperationModeNDOF();
    */

}
 8004ab4:	bf00      	nop
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	240015b1 	.word	0x240015b1
 8004abc:	24001550 	.word	0x24001550
 8004ac0:	24000008 	.word	0x24000008
 8004ac4:	2400154c 	.word	0x2400154c

08004ac8 <BNO_GetData>:

void BNO_GetData(void){
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_DATA_X_LSB,24);
 8004acc:	2118      	movs	r1, #24
 8004ace:	2008      	movs	r0, #8
 8004ad0:	f7ff fb42 	bl	8004158 <BNO_Read>
}
 8004ad4:	bf00      	nop
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <BNO_Receive>:

void BNO_Receive(uint8_t Buffer){
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	71fb      	strb	r3, [r7, #7]
	static uint8_t MsgSize = 0;
	static uint8_t Counter = 0;

	BNO_ComsCounter = 0;
 8004ae2:	4b2c      	ldr	r3, [pc, #176]	@ (8004b94 <BNO_Receive+0xbc>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	701a      	strb	r2, [r3, #0]

	switch (BNO_Rx_Status) {
 8004ae8:	4b2b      	ldr	r3, [pc, #172]	@ (8004b98 <BNO_Receive+0xc0>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	2bff      	cmp	r3, #255	@ 0xff
 8004aee:	d027      	beq.n	8004b40 <BNO_Receive+0x68>
 8004af0:	2bff      	cmp	r3, #255	@ 0xff
 8004af2:	dc46      	bgt.n	8004b82 <BNO_Receive+0xaa>
 8004af4:	2bee      	cmp	r3, #238	@ 0xee
 8004af6:	d017      	beq.n	8004b28 <BNO_Receive+0x50>
 8004af8:	2bee      	cmp	r3, #238	@ 0xee
 8004afa:	dc42      	bgt.n	8004b82 <BNO_Receive+0xaa>
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d002      	beq.n	8004b06 <BNO_Receive+0x2e>
 8004b00:	2bbb      	cmp	r3, #187	@ 0xbb
 8004b02:	d00a      	beq.n	8004b1a <BNO_Receive+0x42>
				BNO_EmptyingBuffer();
			}

			break;
		default:
			break;
 8004b04:	e03d      	b.n	8004b82 <BNO_Receive+0xaa>
			if(Buffer == Read_Response || Buffer == Header) BNO_Rx_Status = Buffer;
 8004b06:	79fb      	ldrb	r3, [r7, #7]
 8004b08:	2bbb      	cmp	r3, #187	@ 0xbb
 8004b0a:	d002      	beq.n	8004b12 <BNO_Receive+0x3a>
 8004b0c:	79fb      	ldrb	r3, [r7, #7]
 8004b0e:	2bee      	cmp	r3, #238	@ 0xee
 8004b10:	d139      	bne.n	8004b86 <BNO_Receive+0xae>
 8004b12:	4a21      	ldr	r2, [pc, #132]	@ (8004b98 <BNO_Receive+0xc0>)
 8004b14:	79fb      	ldrb	r3, [r7, #7]
 8004b16:	7013      	strb	r3, [r2, #0]
			break;
 8004b18:	e035      	b.n	8004b86 <BNO_Receive+0xae>
			MsgSize = Buffer;
 8004b1a:	4a20      	ldr	r2, [pc, #128]	@ (8004b9c <BNO_Receive+0xc4>)
 8004b1c:	79fb      	ldrb	r3, [r7, #7]
 8004b1e:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = Emptying_Buffer;
 8004b20:	4b1d      	ldr	r3, [pc, #116]	@ (8004b98 <BNO_Receive+0xc0>)
 8004b22:	22ff      	movs	r2, #255	@ 0xff
 8004b24:	701a      	strb	r2, [r3, #0]
			break;
 8004b26:	e031      	b.n	8004b8c <BNO_Receive+0xb4>
			BNO_ErrorHandler = Buffer;
 8004b28:	4a1d      	ldr	r2, [pc, #116]	@ (8004ba0 <BNO_Receive+0xc8>)
 8004b2a:	79fb      	ldrb	r3, [r7, #7]
 8004b2c:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = AwaitingMsg;
 8004b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8004b98 <BNO_Receive+0xc0>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	701a      	strb	r2, [r3, #0]
			memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 8004b34:	22ff      	movs	r2, #255	@ 0xff
 8004b36:	2100      	movs	r1, #0
 8004b38:	481a      	ldr	r0, [pc, #104]	@ (8004ba4 <BNO_Receive+0xcc>)
 8004b3a:	f012 f9ac 	bl	8016e96 <memset>
			break;
 8004b3e:	e025      	b.n	8004b8c <BNO_Receive+0xb4>
			BNO_RxBuffer[Counter + 1] = Buffer;
 8004b40:	4b19      	ldr	r3, [pc, #100]	@ (8004ba8 <BNO_Receive+0xd0>)
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	3301      	adds	r3, #1
 8004b46:	4917      	ldr	r1, [pc, #92]	@ (8004ba4 <BNO_Receive+0xcc>)
 8004b48:	79fa      	ldrb	r2, [r7, #7]
 8004b4a:	54ca      	strb	r2, [r1, r3]
			Counter++;
 8004b4c:	4b16      	ldr	r3, [pc, #88]	@ (8004ba8 <BNO_Receive+0xd0>)
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	3301      	adds	r3, #1
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	4b14      	ldr	r3, [pc, #80]	@ (8004ba8 <BNO_Receive+0xd0>)
 8004b56:	701a      	strb	r2, [r3, #0]
			if(Counter == MsgSize){
 8004b58:	4b13      	ldr	r3, [pc, #76]	@ (8004ba8 <BNO_Receive+0xd0>)
 8004b5a:	781a      	ldrb	r2, [r3, #0]
 8004b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8004b9c <BNO_Receive+0xc4>)
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d112      	bne.n	8004b8a <BNO_Receive+0xb2>
				Counter = 0;
 8004b64:	4b10      	ldr	r3, [pc, #64]	@ (8004ba8 <BNO_Receive+0xd0>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	701a      	strb	r2, [r3, #0]
				MsgSize = 0;
 8004b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8004b9c <BNO_Receive+0xc4>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	701a      	strb	r2, [r3, #0]
				BNO_Rx_Status = AwaitingMsg;
 8004b70:	4b09      	ldr	r3, [pc, #36]	@ (8004b98 <BNO_Receive+0xc0>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	701a      	strb	r2, [r3, #0]
				BNO_ErrorHandler = ReadSucces;
 8004b76:	4b0a      	ldr	r3, [pc, #40]	@ (8004ba0 <BNO_Receive+0xc8>)
 8004b78:	220b      	movs	r2, #11
 8004b7a:	701a      	strb	r2, [r3, #0]
				BNO_EmptyingBuffer();
 8004b7c:	f7ff fe20 	bl	80047c0 <BNO_EmptyingBuffer>
			break;
 8004b80:	e003      	b.n	8004b8a <BNO_Receive+0xb2>
			break;
 8004b82:	bf00      	nop
 8004b84:	e002      	b.n	8004b8c <BNO_Receive+0xb4>
			break;
 8004b86:	bf00      	nop
 8004b88:	e000      	b.n	8004b8c <BNO_Receive+0xb4>
			break;
 8004b8a:	bf00      	nop
	}
}
 8004b8c:	bf00      	nop
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	2400154a 	.word	0x2400154a
 8004b98:	24001548 	.word	0x24001548
 8004b9c:	240015b2 	.word	0x240015b2
 8004ba0:	24001549 	.word	0x24001549
 8004ba4:	24001448 	.word	0x24001448
 8004ba8:	240015b3 	.word	0x240015b3

08004bac <BNO_FaultManager>:

void BNO_FaultManager(void){
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
	if(BNO_ComsCounter > 3){
 8004bb2:	4b13      	ldr	r3, [pc, #76]	@ (8004c00 <BNO_FaultManager+0x54>)
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	d90f      	bls.n	8004bda <BNO_FaultManager+0x2e>
		Reset_UART(&huart3);
 8004bba:	4812      	ldr	r0, [pc, #72]	@ (8004c04 <BNO_FaultManager+0x58>)
 8004bbc:	f7fe fd7c 	bl	80036b8 <Reset_UART>
		BNO_Rx_Status = AwaitingMsg;
 8004bc0:	4b11      	ldr	r3, [pc, #68]	@ (8004c08 <BNO_FaultManager+0x5c>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	4910      	ldr	r1, [pc, #64]	@ (8004c0c <BNO_FaultManager+0x60>)
 8004bca:	480e      	ldr	r0, [pc, #56]	@ (8004c04 <BNO_FaultManager+0x58>)
 8004bcc:	f00a f882 	bl	800ecd4 <HAL_UART_Receive_DMA>
		memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 8004bd0:	22ff      	movs	r2, #255	@ 0xff
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	480e      	ldr	r0, [pc, #56]	@ (8004c10 <BNO_FaultManager+0x64>)
 8004bd6:	f012 f95e 	bl	8016e96 <memset>
	}
	if(BNO_ErrorHandler == WRONG_START_BYTE){
 8004bda:	4b0e      	ldr	r3, [pc, #56]	@ (8004c14 <BNO_FaultManager+0x68>)
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	2b06      	cmp	r3, #6
 8004be0:	d10a      	bne.n	8004bf8 <BNO_FaultManager+0x4c>
		uint8_t Buffer = 0x00;
 8004be2:	2300      	movs	r3, #0
 8004be4:	71fb      	strb	r3, [r7, #7]

		HAL_UART_Transmit_IT(&huart3, &Buffer, 1);
 8004be6:	1dfb      	adds	r3, r7, #7
 8004be8:	2201      	movs	r2, #1
 8004bea:	4619      	mov	r1, r3
 8004bec:	4805      	ldr	r0, [pc, #20]	@ (8004c04 <BNO_FaultManager+0x58>)
 8004bee:	f009 ff91 	bl	800eb14 <HAL_UART_Transmit_IT>
		BNO_ErrorHandler = 0;
 8004bf2:	4b08      	ldr	r3, [pc, #32]	@ (8004c14 <BNO_FaultManager+0x68>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	701a      	strb	r2, [r3, #0]
	}
}
 8004bf8:	bf00      	nop
 8004bfa:	3708      	adds	r7, #8
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	2400154a 	.word	0x2400154a
 8004c04:	24001180 	.word	0x24001180
 8004c08:	24001548 	.word	0x24001548
 8004c0c:	24001547 	.word	0x24001547
 8004c10:	24001448 	.word	0x24001448
 8004c14:	24001549 	.word	0x24001549

08004c18 <BNO_Tasks>:

void BNO_Tasks(void){
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
	if(BNO_DelayCounter == 0){
 8004c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8004c8c <BNO_Tasks+0x74>)
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d128      	bne.n	8004c76 <BNO_Tasks+0x5e>
		switch (BNO_CurrentState) {
 8004c24:	4b1a      	ldr	r3, [pc, #104]	@ (8004c90 <BNO_Tasks+0x78>)
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d81c      	bhi.n	8004c66 <BNO_Tasks+0x4e>
 8004c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8004c34 <BNO_Tasks+0x1c>)
 8004c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c32:	bf00      	nop
 8004c34:	08004c49 	.word	0x08004c49
 8004c38:	08004c55 	.word	0x08004c55
 8004c3c:	08004c5b 	.word	0x08004c5b
 8004c40:	08004c61 	.word	0x08004c61
 8004c44:	08004c4f 	.word	0x08004c4f
			case Init:
				BNO_Init();
 8004c48:	f7ff fe52 	bl	80048f0 <BNO_Init>
				break;
 8004c4c:	e00c      	b.n	8004c68 <BNO_Tasks+0x50>
			case Reset:
				BNO_SWReset();
 8004c4e:	f7ff fdd3 	bl	80047f8 <BNO_SWReset>
			break;
 8004c52:	e009      	b.n	8004c68 <BNO_Tasks+0x50>
			case Configuration:
				BNO_Config();
 8004c54:	f7ff fe68 	bl	8004928 <BNO_Config>
				break;
 8004c58:	e006      	b.n	8004c68 <BNO_Tasks+0x50>
			case Calibration:
				BNO_CalibrationStatus();
 8004c5a:	f7ff feaf 	bl	80049bc <BNO_CalibrationStatus>
				break;
 8004c5e:	e003      	b.n	8004c68 <BNO_Tasks+0x50>
			case Operation:
				BNO_GetData();
 8004c60:	f7ff ff32 	bl	8004ac8 <BNO_GetData>
				break;
 8004c64:	e000      	b.n	8004c68 <BNO_Tasks+0x50>

			default:
				break;
 8004c66:	bf00      	nop
		}
		++BNO_ComsCounter;
 8004c68:	4b0a      	ldr	r3, [pc, #40]	@ (8004c94 <BNO_Tasks+0x7c>)
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	b2da      	uxtb	r2, r3
 8004c70:	4b08      	ldr	r3, [pc, #32]	@ (8004c94 <BNO_Tasks+0x7c>)
 8004c72:	701a      	strb	r2, [r3, #0]
 8004c74:	e005      	b.n	8004c82 <BNO_Tasks+0x6a>
	}
	else{
		--BNO_DelayCounter;
 8004c76:	4b05      	ldr	r3, [pc, #20]	@ (8004c8c <BNO_Tasks+0x74>)
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	b2da      	uxtb	r2, r3
 8004c7e:	4b03      	ldr	r3, [pc, #12]	@ (8004c8c <BNO_Tasks+0x74>)
 8004c80:	701a      	strb	r2, [r3, #0]
	}
	BNO_FaultManager();
 8004c82:	f7ff ff93 	bl	8004bac <BNO_FaultManager>
}
 8004c86:	bf00      	nop
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	2400154b 	.word	0x2400154b
 8004c90:	2400154c 	.word	0x2400154c
 8004c94:	2400154a 	.word	0x2400154a

08004c98 <LED_blink>:

		.G_LED.LED_GPIO_GPIOx = LED_5_GPIO_Port,
		.G_LED.LED_GPIO_Pin   = LED_5_Pin
};

LED_config_t LED_blink(LED_config_t LED){
 8004c98:	b084      	sub	sp, #16
 8004c9a:	b590      	push	{r4, r7, lr}
 8004c9c:	b083      	sub	sp, #12
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
 8004ca2:	f107 001c 	add.w	r0, r7, #28
 8004ca6:	e880 000e 	stmia.w	r0, {r1, r2, r3}

		switch (LED.Blink_status) {
 8004caa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <LED_blink+0x20>
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d010      	beq.n	8004cd8 <LED_blink+0x40>
 8004cb6:	e01f      	b.n	8004cf8 <LED_blink+0x60>
			case 0x00:
				if(LED.count >= LED.Time_Off){
 8004cb8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004cba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d31f      	bcc.n	8004d00 <LED_blink+0x68>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	8c39      	ldrh	r1, [r7, #32]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f004 fc70 	bl	80095ac <HAL_GPIO_WritePin>
					LED.Blink_status = 1;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 8004cd6:	e013      	b.n	8004d00 <LED_blink+0x68>
			case 0x01:
				if(LED.count >= LED.Time_On){
 8004cd8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004cda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d311      	bcc.n	8004d04 <LED_blink+0x6c>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	8c39      	ldrh	r1, [r7, #32]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f004 fc60 	bl	80095ac <HAL_GPIO_WritePin>
					LED.Blink_status = 0;
 8004cec:	2300      	movs	r3, #0
 8004cee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 8004cf6:	e005      	b.n	8004d04 <LED_blink+0x6c>
			default:
				LED.Blink_status = 0;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
				break;
 8004cfe:	e002      	b.n	8004d06 <LED_blink+0x6e>
				break;
 8004d00:	bf00      	nop
 8004d02:	e000      	b.n	8004d06 <LED_blink+0x6e>
				break;
 8004d04:	bf00      	nop
		}

	LED.count++;
 8004d06:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004d08:	3301      	adds	r3, #1
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	853b      	strh	r3, [r7, #40]	@ 0x28
	return LED;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	461c      	mov	r4, r3
 8004d12:	f107 031c 	add.w	r3, r7, #28
 8004d16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004d26:	b004      	add	sp, #16
 8004d28:	4770      	bx	lr

08004d2a <LED_Rutine>:

LED_config_t LED_Rutine(LED_config_t LED){
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	b590      	push	{r4, r7, lr}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	f107 001c 	add.w	r0, r7, #28
 8004d38:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(LED.LED_status == 1){
 8004d3c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d117      	bne.n	8004d74 <LED_Rutine+0x4a>
		switch (LED.Sequence) {
 8004d44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d002      	beq.n	8004d52 <LED_Rutine+0x28>
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d007      	beq.n	8004d60 <LED_Rutine+0x36>
				break;
			case Blink:
				LED = LED_blink(LED);
				break;
			default:
				break;
 8004d50:	e018      	b.n	8004d84 <LED_Rutine+0x5a>
				HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	8c39      	ldrh	r1, [r7, #32]
 8004d56:	2201      	movs	r2, #1
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f004 fc27 	bl	80095ac <HAL_GPIO_WritePin>
				break;
 8004d5e:	e011      	b.n	8004d84 <LED_Rutine+0x5a>
				LED = LED_blink(LED);
 8004d60:	f107 001c 	add.w	r0, r7, #28
 8004d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	f107 031c 	add.w	r3, r7, #28
 8004d6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d6e:	f7ff ff93 	bl	8004c98 <LED_blink>
				break;
 8004d72:	e007      	b.n	8004d84 <LED_Rutine+0x5a>
		}
	}
	else{
		HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	8c39      	ldrh	r1, [r7, #32]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f004 fc16 	bl	80095ac <HAL_GPIO_WritePin>
		LED.count = 0;
 8004d80:	2300      	movs	r3, #0
 8004d82:	853b      	strh	r3, [r7, #40]	@ 0x28
	}
	return LED;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	461c      	mov	r4, r3
 8004d88:	f107 031c 	add.w	r3, r7, #28
 8004d8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004d9c:	b004      	add	sp, #16
 8004d9e:	4770      	bx	lr

08004da0 <LED_Tasks>:

void LED_Tasks (void){
 8004da0:	b590      	push	{r4, r7, lr}
 8004da2:	b087      	sub	sp, #28
 8004da4:	af02      	add	r7, sp, #8
	LED_Info.R_LED = LED_Rutine(LED_Info.R_LED);
 8004da6:	4c24      	ldr	r4, [pc, #144]	@ (8004e38 <LED_Tasks+0x98>)
 8004da8:	4638      	mov	r0, r7
 8004daa:	4b23      	ldr	r3, [pc, #140]	@ (8004e38 <LED_Tasks+0x98>)
 8004dac:	68da      	ldr	r2, [r3, #12]
 8004dae:	9200      	str	r2, [sp, #0]
 8004db0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004db2:	f7ff ffba 	bl	8004d2a <LED_Rutine>
 8004db6:	463b      	mov	r3, r7
 8004db8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004dba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED1 = LED_Rutine(LED_Info.B_LED1);
 8004dbe:	4c1e      	ldr	r4, [pc, #120]	@ (8004e38 <LED_Tasks+0x98>)
 8004dc0:	4638      	mov	r0, r7
 8004dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8004e38 <LED_Tasks+0x98>)
 8004dc4:	69da      	ldr	r2, [r3, #28]
 8004dc6:	9200      	str	r2, [sp, #0]
 8004dc8:	3310      	adds	r3, #16
 8004dca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004dcc:	f7ff ffad 	bl	8004d2a <LED_Rutine>
 8004dd0:	3410      	adds	r4, #16
 8004dd2:	463b      	mov	r3, r7
 8004dd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004dd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED2 = LED_Rutine(LED_Info.B_LED2);
 8004dda:	4c17      	ldr	r4, [pc, #92]	@ (8004e38 <LED_Tasks+0x98>)
 8004ddc:	4638      	mov	r0, r7
 8004dde:	4b16      	ldr	r3, [pc, #88]	@ (8004e38 <LED_Tasks+0x98>)
 8004de0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004de2:	9200      	str	r2, [sp, #0]
 8004de4:	3320      	adds	r3, #32
 8004de6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004de8:	f7ff ff9f 	bl	8004d2a <LED_Rutine>
 8004dec:	3420      	adds	r4, #32
 8004dee:	463b      	mov	r3, r7
 8004df0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004df2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED3 = LED_Rutine(LED_Info.B_LED3);
 8004df6:	4c10      	ldr	r4, [pc, #64]	@ (8004e38 <LED_Tasks+0x98>)
 8004df8:	4638      	mov	r0, r7
 8004dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8004e38 <LED_Tasks+0x98>)
 8004dfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004dfe:	9200      	str	r2, [sp, #0]
 8004e00:	3330      	adds	r3, #48	@ 0x30
 8004e02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e04:	f7ff ff91 	bl	8004d2a <LED_Rutine>
 8004e08:	3430      	adds	r4, #48	@ 0x30
 8004e0a:	463b      	mov	r3, r7
 8004e0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.G_LED = LED_Rutine(LED_Info.G_LED);
 8004e12:	4c09      	ldr	r4, [pc, #36]	@ (8004e38 <LED_Tasks+0x98>)
 8004e14:	4638      	mov	r0, r7
 8004e16:	4b08      	ldr	r3, [pc, #32]	@ (8004e38 <LED_Tasks+0x98>)
 8004e18:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004e1a:	9200      	str	r2, [sp, #0]
 8004e1c:	3340      	adds	r3, #64	@ 0x40
 8004e1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e20:	f7ff ff83 	bl	8004d2a <LED_Rutine>
 8004e24:	3440      	adds	r4, #64	@ 0x40
 8004e26:	463b      	mov	r3, r7
 8004e28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8004e2e:	bf00      	nop
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd90      	pop	{r4, r7, pc}
 8004e36:	bf00      	nop
 8004e38:	2400000c 	.word	0x2400000c

08004e3c <LR03_AT>:

uint8_t LR03_RxBuffer[256] = {0};

uint8_t Test_1;

void LR03_AT(void){
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0

	HAL_UART_Transmit_IT(&huart6, (uint8_t*)"+++\r\n", 5);
 8004e40:	2205      	movs	r2, #5
 8004e42:	4903      	ldr	r1, [pc, #12]	@ (8004e50 <LR03_AT+0x14>)
 8004e44:	4803      	ldr	r0, [pc, #12]	@ (8004e54 <LR03_AT+0x18>)
 8004e46:	f009 fe65 	bl	800eb14 <HAL_UART_Transmit_IT>
}
 8004e4a:	bf00      	nop
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	08018f88 	.word	0x08018f88
 8004e54:	24001214 	.word	0x24001214

08004e58 <LR03_Level>:

void LR03_Level(uint8_t Level){
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	4603      	mov	r3, r0
 8004e60:	71fb      	strb	r3, [r7, #7]
	static uint8_t Level_Command[] = {"AT+LEVEL7\r\n"};
	if(Level > 7) Level = 7;
 8004e62:	79fb      	ldrb	r3, [r7, #7]
 8004e64:	2b07      	cmp	r3, #7
 8004e66:	d901      	bls.n	8004e6c <LR03_Level+0x14>
 8004e68:	2307      	movs	r3, #7
 8004e6a:	71fb      	strb	r3, [r7, #7]
	if(Level < 1) Level = 1;
 8004e6c:	79fb      	ldrb	r3, [r7, #7]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <LR03_Level+0x1e>
 8004e72:	2301      	movs	r3, #1
 8004e74:	71fb      	strb	r3, [r7, #7]
	Level_Command[8] = Level + 48;
 8004e76:	79fb      	ldrb	r3, [r7, #7]
 8004e78:	3330      	adds	r3, #48	@ 0x30
 8004e7a:	b2da      	uxtb	r2, r3
 8004e7c:	4b05      	ldr	r3, [pc, #20]	@ (8004e94 <LR03_Level+0x3c>)
 8004e7e:	721a      	strb	r2, [r3, #8]
	HAL_UART_Transmit_IT(&huart6, Level_Command, 11);
 8004e80:	220b      	movs	r2, #11
 8004e82:	4904      	ldr	r1, [pc, #16]	@ (8004e94 <LR03_Level+0x3c>)
 8004e84:	4804      	ldr	r0, [pc, #16]	@ (8004e98 <LR03_Level+0x40>)
 8004e86:	f009 fe45 	bl	800eb14 <HAL_UART_Transmit_IT>
}
 8004e8a:	bf00      	nop
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	2400005c 	.word	0x2400005c
 8004e98:	24001214 	.word	0x24001214

08004e9c <LR03_Receive>:

void LR03_Receive(uint8_t Data){
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	71fb      	strb	r3, [r7, #7]
	static uint8_t DataPointer = 0;
	LR03_RxBuffer[DataPointer] = Data;
 8004ea6:	4b09      	ldr	r3, [pc, #36]	@ (8004ecc <LR03_Receive+0x30>)
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	4619      	mov	r1, r3
 8004eac:	4a08      	ldr	r2, [pc, #32]	@ (8004ed0 <LR03_Receive+0x34>)
 8004eae:	79fb      	ldrb	r3, [r7, #7]
 8004eb0:	5453      	strb	r3, [r2, r1]
	DataPointer++;
 8004eb2:	4b06      	ldr	r3, [pc, #24]	@ (8004ecc <LR03_Receive+0x30>)
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	b2da      	uxtb	r2, r3
 8004eba:	4b04      	ldr	r3, [pc, #16]	@ (8004ecc <LR03_Receive+0x30>)
 8004ebc:	701a      	strb	r2, [r3, #0]
}
 8004ebe:	bf00      	nop
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	240016b5 	.word	0x240016b5
 8004ed0:	240015b4 	.word	0x240015b4

08004ed4 <LR03_StateMachine>:

void LR03_StateMachine(void){
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	af00      	add	r7, sp, #0

	switch (Test_1) {
 8004ed8:	4b09      	ldr	r3, [pc, #36]	@ (8004f00 <LR03_StateMachine+0x2c>)
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d002      	beq.n	8004ee6 <LR03_StateMachine+0x12>
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d003      	beq.n	8004eec <LR03_StateMachine+0x18>
			break;
		case 2:
			LR03_Level(7);
			break;
		default:
			break;
 8004ee4:	e006      	b.n	8004ef4 <LR03_StateMachine+0x20>
			LR03_AT();
 8004ee6:	f7ff ffa9 	bl	8004e3c <LR03_AT>
			break;
 8004eea:	e003      	b.n	8004ef4 <LR03_StateMachine+0x20>
			LR03_Level(7);
 8004eec:	2007      	movs	r0, #7
 8004eee:	f7ff ffb3 	bl	8004e58 <LR03_Level>
			break;
 8004ef2:	bf00      	nop
	}
	Test_1 = 0;
 8004ef4:	4b02      	ldr	r3, [pc, #8]	@ (8004f00 <LR03_StateMachine+0x2c>)
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	701a      	strb	r2, [r3, #0]
}
 8004efa:	bf00      	nop
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	240016b4 	.word	0x240016b4

08004f04 <PWM_Assign>:
Servo_mgmt_s PWM_Output = {
	    .S = {1500, 1500, 1500, 1500, 1500,
	          1500, 1500, 1500, 1500, 1500}
	};

void PWM_Assign(void) {
 8004f04:	b580      	push	{r7, lr}
 8004f06:	af00      	add	r7, sp, #0
    // Timer 2 (Canales 1, 2, 10, 9)
    TIM2->CCR1 = PWM_Output.S[0];  // Canal_1 (S[0])
 8004f08:	4b2a      	ldr	r3, [pc, #168]	@ (8004fb4 <PWM_Assign+0xb0>)
 8004f0a:	881a      	ldrh	r2, [r3, #0]
 8004f0c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004f10:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2->CCR2 = PWM_Output.S[1];  // Canal_2 (S[1])
 8004f12:	4b28      	ldr	r3, [pc, #160]	@ (8004fb4 <PWM_Assign+0xb0>)
 8004f14:	885a      	ldrh	r2, [r3, #2]
 8004f16:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004f1a:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM2->CCR3 = PWM_Output.S[9];  // Canal_10 (S[9])
 8004f1c:	4b25      	ldr	r3, [pc, #148]	@ (8004fb4 <PWM_Assign+0xb0>)
 8004f1e:	8a5a      	ldrh	r2, [r3, #18]
 8004f20:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004f24:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2->CCR4 = PWM_Output.S[8];  // Canal_9 (S[8])
 8004f26:	4b23      	ldr	r3, [pc, #140]	@ (8004fb4 <PWM_Assign+0xb0>)
 8004f28:	8a1a      	ldrh	r2, [r3, #16]
 8004f2a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004f2e:	641a      	str	r2, [r3, #64]	@ 0x40

    // Timer 3 (Canales 3, 4)
    TIM3->CCR1 = PWM_Output.S[2];  // Canal_3 (S[2])
 8004f30:	4b20      	ldr	r3, [pc, #128]	@ (8004fb4 <PWM_Assign+0xb0>)
 8004f32:	889a      	ldrh	r2, [r3, #4]
 8004f34:	4b20      	ldr	r3, [pc, #128]	@ (8004fb8 <PWM_Assign+0xb4>)
 8004f36:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3->CCR2 = PWM_Output.S[3];  // Canal_4 (S[3])
 8004f38:	4b1e      	ldr	r3, [pc, #120]	@ (8004fb4 <PWM_Assign+0xb0>)
 8004f3a:	88da      	ldrh	r2, [r3, #6]
 8004f3c:	4b1e      	ldr	r3, [pc, #120]	@ (8004fb8 <PWM_Assign+0xb4>)
 8004f3e:	639a      	str	r2, [r3, #56]	@ 0x38

    // Timer 4 (Canales 5-8)
    TIM4->CCR1 = PWM_Output.S[4];  // Canal_5 (S[4])
 8004f40:	4b1c      	ldr	r3, [pc, #112]	@ (8004fb4 <PWM_Assign+0xb0>)
 8004f42:	891a      	ldrh	r2, [r3, #8]
 8004f44:	4b1d      	ldr	r3, [pc, #116]	@ (8004fbc <PWM_Assign+0xb8>)
 8004f46:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM4->CCR2 = PWM_Output.S[5];  // Canal_6 (S[5])
 8004f48:	4b1a      	ldr	r3, [pc, #104]	@ (8004fb4 <PWM_Assign+0xb0>)
 8004f4a:	895a      	ldrh	r2, [r3, #10]
 8004f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8004fbc <PWM_Assign+0xb8>)
 8004f4e:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM4->CCR3 = PWM_Output.S[6];  // Canal_7 (S[6])
 8004f50:	4b18      	ldr	r3, [pc, #96]	@ (8004fb4 <PWM_Assign+0xb0>)
 8004f52:	899a      	ldrh	r2, [r3, #12]
 8004f54:	4b19      	ldr	r3, [pc, #100]	@ (8004fbc <PWM_Assign+0xb8>)
 8004f56:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM4->CCR4 = PWM_Output.S[7];  // Canal_8 (S[7])
 8004f58:	4b16      	ldr	r3, [pc, #88]	@ (8004fb4 <PWM_Assign+0xb0>)
 8004f5a:	89da      	ldrh	r2, [r3, #14]
 8004f5c:	4b17      	ldr	r3, [pc, #92]	@ (8004fbc <PWM_Assign+0xb8>)
 8004f5e:	641a      	str	r2, [r3, #64]	@ 0x40

    // Iniciar PWM (igual que antes)
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004f60:	2100      	movs	r1, #0
 8004f62:	4817      	ldr	r0, [pc, #92]	@ (8004fc0 <PWM_Assign+0xbc>)
 8004f64:	f008 fd58 	bl	800da18 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8004f68:	2104      	movs	r1, #4
 8004f6a:	4815      	ldr	r0, [pc, #84]	@ (8004fc0 <PWM_Assign+0xbc>)
 8004f6c:	f008 fd54 	bl	800da18 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8004f70:	2108      	movs	r1, #8
 8004f72:	4813      	ldr	r0, [pc, #76]	@ (8004fc0 <PWM_Assign+0xbc>)
 8004f74:	f008 fd50 	bl	800da18 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8004f78:	210c      	movs	r1, #12
 8004f7a:	4811      	ldr	r0, [pc, #68]	@ (8004fc0 <PWM_Assign+0xbc>)
 8004f7c:	f008 fd4c 	bl	800da18 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004f80:	2100      	movs	r1, #0
 8004f82:	4810      	ldr	r0, [pc, #64]	@ (8004fc4 <PWM_Assign+0xc0>)
 8004f84:	f008 fd48 	bl	800da18 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8004f88:	2104      	movs	r1, #4
 8004f8a:	480e      	ldr	r0, [pc, #56]	@ (8004fc4 <PWM_Assign+0xc0>)
 8004f8c:	f008 fd44 	bl	800da18 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8004f90:	2100      	movs	r1, #0
 8004f92:	480d      	ldr	r0, [pc, #52]	@ (8004fc8 <PWM_Assign+0xc4>)
 8004f94:	f008 fd40 	bl	800da18 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8004f98:	2104      	movs	r1, #4
 8004f9a:	480b      	ldr	r0, [pc, #44]	@ (8004fc8 <PWM_Assign+0xc4>)
 8004f9c:	f008 fd3c 	bl	800da18 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004fa0:	2108      	movs	r1, #8
 8004fa2:	4809      	ldr	r0, [pc, #36]	@ (8004fc8 <PWM_Assign+0xc4>)
 8004fa4:	f008 fd38 	bl	800da18 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004fa8:	210c      	movs	r1, #12
 8004faa:	4807      	ldr	r0, [pc, #28]	@ (8004fc8 <PWM_Assign+0xc4>)
 8004fac:	f008 fd34 	bl	800da18 <HAL_TIM_PWM_Start>
}
 8004fb0:	bf00      	nop
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	24000068 	.word	0x24000068
 8004fb8:	40000400 	.word	0x40000400
 8004fbc:	40000800 	.word	0x40000800
 8004fc0:	24000f28 	.word	0x24000f28
 8004fc4:	24000f74 	.word	0x24000f74
 8004fc8:	24000fc0 	.word	0x24000fc0

08004fcc <SBUS_init>:

extern UART_HandleTypeDef huart1;
#define SBUS_UART_handler &huart1


void SBUS_init(void){
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(SBUS_UART_handler, &SBUS_RxBuffer, 1);
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	4903      	ldr	r1, [pc, #12]	@ (8004fe0 <SBUS_init+0x14>)
 8004fd4:	4803      	ldr	r0, [pc, #12]	@ (8004fe4 <SBUS_init+0x18>)
 8004fd6:	f009 fe7d 	bl	800ecd4 <HAL_UART_Receive_DMA>

}
 8004fda:	bf00      	nop
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	240016d1 	.word	0x240016d1
 8004fe4:	240010ec 	.word	0x240010ec

08004fe8 <SBUS_Receive>:

void SBUS_Receive(uint8_t SBUS_RxBuffer){
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	4603      	mov	r3, r0
 8004ff0:	71fb      	strb	r3, [r7, #7]
	static uint8_t Actual_status = 0;
	static uint8_t RxCount;

	switch (Actual_status) {
 8004ff2:	4b20      	ldr	r3, [pc, #128]	@ (8005074 <SBUS_Receive+0x8c>)
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d002      	beq.n	8005000 <SBUS_Receive+0x18>
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d017      	beq.n	800502e <SBUS_Receive+0x46>
 8004ffe:	e02f      	b.n	8005060 <SBUS_Receive+0x78>
		case 0:
			if(SBUS_RxBuffer == 0x0F){
 8005000:	79fb      	ldrb	r3, [r7, #7]
 8005002:	2b0f      	cmp	r3, #15
 8005004:	d10f      	bne.n	8005026 <SBUS_Receive+0x3e>
				SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 8005006:	4b1c      	ldr	r3, [pc, #112]	@ (8005078 <SBUS_Receive+0x90>)
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	4619      	mov	r1, r3
 800500c:	4a1b      	ldr	r2, [pc, #108]	@ (800507c <SBUS_Receive+0x94>)
 800500e:	79fb      	ldrb	r3, [r7, #7]
 8005010:	5453      	strb	r3, [r2, r1]
				Actual_status = 1;
 8005012:	4b18      	ldr	r3, [pc, #96]	@ (8005074 <SBUS_Receive+0x8c>)
 8005014:	2201      	movs	r2, #1
 8005016:	701a      	strb	r2, [r3, #0]
				RxCount++;
 8005018:	4b17      	ldr	r3, [pc, #92]	@ (8005078 <SBUS_Receive+0x90>)
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	3301      	adds	r3, #1
 800501e:	b2da      	uxtb	r2, r3
 8005020:	4b15      	ldr	r3, [pc, #84]	@ (8005078 <SBUS_Receive+0x90>)
 8005022:	701a      	strb	r2, [r3, #0]
			}
			else{
				RxCount = 0;
			}
			break;
 8005024:	e021      	b.n	800506a <SBUS_Receive+0x82>
				RxCount = 0;
 8005026:	4b14      	ldr	r3, [pc, #80]	@ (8005078 <SBUS_Receive+0x90>)
 8005028:	2200      	movs	r2, #0
 800502a:	701a      	strb	r2, [r3, #0]
			break;
 800502c:	e01d      	b.n	800506a <SBUS_Receive+0x82>
		case 1:
			SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 800502e:	4b12      	ldr	r3, [pc, #72]	@ (8005078 <SBUS_Receive+0x90>)
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	4619      	mov	r1, r3
 8005034:	4a11      	ldr	r2, [pc, #68]	@ (800507c <SBUS_Receive+0x94>)
 8005036:	79fb      	ldrb	r3, [r7, #7]
 8005038:	5453      	strb	r3, [r2, r1]
			RxCount++;
 800503a:	4b0f      	ldr	r3, [pc, #60]	@ (8005078 <SBUS_Receive+0x90>)
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	3301      	adds	r3, #1
 8005040:	b2da      	uxtb	r2, r3
 8005042:	4b0d      	ldr	r3, [pc, #52]	@ (8005078 <SBUS_Receive+0x90>)
 8005044:	701a      	strb	r2, [r3, #0]
			if(RxCount == 24){
 8005046:	4b0c      	ldr	r3, [pc, #48]	@ (8005078 <SBUS_Receive+0x90>)
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	2b18      	cmp	r3, #24
 800504c:	d10c      	bne.n	8005068 <SBUS_Receive+0x80>
				RxCount = 0;
 800504e:	4b0a      	ldr	r3, [pc, #40]	@ (8005078 <SBUS_Receive+0x90>)
 8005050:	2200      	movs	r2, #0
 8005052:	701a      	strb	r2, [r3, #0]
				Actual_status = 0;
 8005054:	4b07      	ldr	r3, [pc, #28]	@ (8005074 <SBUS_Receive+0x8c>)
 8005056:	2200      	movs	r2, #0
 8005058:	701a      	strb	r2, [r3, #0]
				SBUS_getData();
 800505a:	f000 f811 	bl	8005080 <SBUS_getData>
			}
			break;
 800505e:	e003      	b.n	8005068 <SBUS_Receive+0x80>
		default:
			Actual_status = 0;
 8005060:	4b04      	ldr	r3, [pc, #16]	@ (8005074 <SBUS_Receive+0x8c>)
 8005062:	2200      	movs	r2, #0
 8005064:	701a      	strb	r2, [r3, #0]
			break;
 8005066:	e000      	b.n	800506a <SBUS_Receive+0x82>
			break;
 8005068:	bf00      	nop
	}
}
 800506a:	bf00      	nop
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	240016d2 	.word	0x240016d2
 8005078:	240016d3 	.word	0x240016d3
 800507c:	240016b8 	.word	0x240016b8

08005080 <SBUS_getData>:


void SBUS_getData(void){
 8005080:	b480      	push	{r7}
 8005082:	af00      	add	r7, sp, #0
	//Se hace el corrimiento de bits para dar la estructura de los 16 canales, donde cada canal esta compuesto por 11 bits
	//pero cada paquete es de 1 byte. Para cada canal se utilizan los 8 bits (O los que correspondan) de el byte 1
	//(O el que corresponda) como los bits menos significativos del canal 1, y los tres bits faltantes se toman los 3 bits
	// menos significativos (O los que correspondan) del byte 2 y se colocan como los 3 bits más significativos del canal 1.
	Radio_input.Canal_1 = ((SBUS_UART_Rx[1] | SBUS_UART_Rx[2] << 8) & 0x07FF);
 8005084:	4b95      	ldr	r3, [pc, #596]	@ (80052dc <SBUS_getData+0x25c>)
 8005086:	785b      	ldrb	r3, [r3, #1]
 8005088:	b21a      	sxth	r2, r3
 800508a:	4b94      	ldr	r3, [pc, #592]	@ (80052dc <SBUS_getData+0x25c>)
 800508c:	789b      	ldrb	r3, [r3, #2]
 800508e:	021b      	lsls	r3, r3, #8
 8005090:	b21b      	sxth	r3, r3
 8005092:	4313      	orrs	r3, r2
 8005094:	b21b      	sxth	r3, r3
 8005096:	b29b      	uxth	r3, r3
 8005098:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800509c:	b29a      	uxth	r2, r3
 800509e:	4b90      	ldr	r3, [pc, #576]	@ (80052e0 <SBUS_getData+0x260>)
 80050a0:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_2 = ((SBUS_UART_Rx[2] >> 3 | SBUS_UART_Rx[3] << 5) & 0x07FF);
 80050a2:	4b8e      	ldr	r3, [pc, #568]	@ (80052dc <SBUS_getData+0x25c>)
 80050a4:	789b      	ldrb	r3, [r3, #2]
 80050a6:	08db      	lsrs	r3, r3, #3
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	b21a      	sxth	r2, r3
 80050ac:	4b8b      	ldr	r3, [pc, #556]	@ (80052dc <SBUS_getData+0x25c>)
 80050ae:	78db      	ldrb	r3, [r3, #3]
 80050b0:	015b      	lsls	r3, r3, #5
 80050b2:	b21b      	sxth	r3, r3
 80050b4:	4313      	orrs	r3, r2
 80050b6:	b21b      	sxth	r3, r3
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050be:	b29a      	uxth	r2, r3
 80050c0:	4b87      	ldr	r3, [pc, #540]	@ (80052e0 <SBUS_getData+0x260>)
 80050c2:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_3 = ((SBUS_UART_Rx[3] >> 6 | SBUS_UART_Rx[4] << 2 | SBUS_UART_Rx[5] << 10) & 0x07FF);
 80050c4:	4b85      	ldr	r3, [pc, #532]	@ (80052dc <SBUS_getData+0x25c>)
 80050c6:	78db      	ldrb	r3, [r3, #3]
 80050c8:	099b      	lsrs	r3, r3, #6
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	b21a      	sxth	r2, r3
 80050ce:	4b83      	ldr	r3, [pc, #524]	@ (80052dc <SBUS_getData+0x25c>)
 80050d0:	791b      	ldrb	r3, [r3, #4]
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	b21b      	sxth	r3, r3
 80050d6:	4313      	orrs	r3, r2
 80050d8:	b21a      	sxth	r2, r3
 80050da:	4b80      	ldr	r3, [pc, #512]	@ (80052dc <SBUS_getData+0x25c>)
 80050dc:	795b      	ldrb	r3, [r3, #5]
 80050de:	029b      	lsls	r3, r3, #10
 80050e0:	b21b      	sxth	r3, r3
 80050e2:	4313      	orrs	r3, r2
 80050e4:	b21b      	sxth	r3, r3
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	4b7c      	ldr	r3, [pc, #496]	@ (80052e0 <SBUS_getData+0x260>)
 80050f0:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_4 = ((SBUS_UART_Rx[5] >> 1 | SBUS_UART_Rx[6] << 7) & 0x07FF);
 80050f2:	4b7a      	ldr	r3, [pc, #488]	@ (80052dc <SBUS_getData+0x25c>)
 80050f4:	795b      	ldrb	r3, [r3, #5]
 80050f6:	085b      	lsrs	r3, r3, #1
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	b21a      	sxth	r2, r3
 80050fc:	4b77      	ldr	r3, [pc, #476]	@ (80052dc <SBUS_getData+0x25c>)
 80050fe:	799b      	ldrb	r3, [r3, #6]
 8005100:	01db      	lsls	r3, r3, #7
 8005102:	b21b      	sxth	r3, r3
 8005104:	4313      	orrs	r3, r2
 8005106:	b21b      	sxth	r3, r3
 8005108:	b29b      	uxth	r3, r3
 800510a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800510e:	b29a      	uxth	r2, r3
 8005110:	4b73      	ldr	r3, [pc, #460]	@ (80052e0 <SBUS_getData+0x260>)
 8005112:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_5 = ((SBUS_UART_Rx[6] >> 4 | SBUS_UART_Rx[7] << 4) & 0x07FF);
 8005114:	4b71      	ldr	r3, [pc, #452]	@ (80052dc <SBUS_getData+0x25c>)
 8005116:	799b      	ldrb	r3, [r3, #6]
 8005118:	091b      	lsrs	r3, r3, #4
 800511a:	b2db      	uxtb	r3, r3
 800511c:	b21a      	sxth	r2, r3
 800511e:	4b6f      	ldr	r3, [pc, #444]	@ (80052dc <SBUS_getData+0x25c>)
 8005120:	79db      	ldrb	r3, [r3, #7]
 8005122:	011b      	lsls	r3, r3, #4
 8005124:	b21b      	sxth	r3, r3
 8005126:	4313      	orrs	r3, r2
 8005128:	b21b      	sxth	r3, r3
 800512a:	b29b      	uxth	r3, r3
 800512c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005130:	b29a      	uxth	r2, r3
 8005132:	4b6b      	ldr	r3, [pc, #428]	@ (80052e0 <SBUS_getData+0x260>)
 8005134:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_6 = ((SBUS_UART_Rx[7] >> 7 | SBUS_UART_Rx[8] << 1 | SBUS_UART_Rx[9] << 9) & 0x07FF);
 8005136:	4b69      	ldr	r3, [pc, #420]	@ (80052dc <SBUS_getData+0x25c>)
 8005138:	79db      	ldrb	r3, [r3, #7]
 800513a:	09db      	lsrs	r3, r3, #7
 800513c:	b2db      	uxtb	r3, r3
 800513e:	b21a      	sxth	r2, r3
 8005140:	4b66      	ldr	r3, [pc, #408]	@ (80052dc <SBUS_getData+0x25c>)
 8005142:	7a1b      	ldrb	r3, [r3, #8]
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	b21b      	sxth	r3, r3
 8005148:	4313      	orrs	r3, r2
 800514a:	b21a      	sxth	r2, r3
 800514c:	4b63      	ldr	r3, [pc, #396]	@ (80052dc <SBUS_getData+0x25c>)
 800514e:	7a5b      	ldrb	r3, [r3, #9]
 8005150:	025b      	lsls	r3, r3, #9
 8005152:	b21b      	sxth	r3, r3
 8005154:	4313      	orrs	r3, r2
 8005156:	b21b      	sxth	r3, r3
 8005158:	b29b      	uxth	r3, r3
 800515a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800515e:	b29a      	uxth	r2, r3
 8005160:	4b5f      	ldr	r3, [pc, #380]	@ (80052e0 <SBUS_getData+0x260>)
 8005162:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_7 = ((SBUS_UART_Rx[9] >> 2 | SBUS_UART_Rx[10] << 6) & 0x07FF);
 8005164:	4b5d      	ldr	r3, [pc, #372]	@ (80052dc <SBUS_getData+0x25c>)
 8005166:	7a5b      	ldrb	r3, [r3, #9]
 8005168:	089b      	lsrs	r3, r3, #2
 800516a:	b2db      	uxtb	r3, r3
 800516c:	b21a      	sxth	r2, r3
 800516e:	4b5b      	ldr	r3, [pc, #364]	@ (80052dc <SBUS_getData+0x25c>)
 8005170:	7a9b      	ldrb	r3, [r3, #10]
 8005172:	019b      	lsls	r3, r3, #6
 8005174:	b21b      	sxth	r3, r3
 8005176:	4313      	orrs	r3, r2
 8005178:	b21b      	sxth	r3, r3
 800517a:	b29b      	uxth	r3, r3
 800517c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005180:	b29a      	uxth	r2, r3
 8005182:	4b57      	ldr	r3, [pc, #348]	@ (80052e0 <SBUS_getData+0x260>)
 8005184:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_8 = ((SBUS_UART_Rx[10] >> 5 | SBUS_UART_Rx[11] << 3) & 0x07FF);
 8005186:	4b55      	ldr	r3, [pc, #340]	@ (80052dc <SBUS_getData+0x25c>)
 8005188:	7a9b      	ldrb	r3, [r3, #10]
 800518a:	095b      	lsrs	r3, r3, #5
 800518c:	b2db      	uxtb	r3, r3
 800518e:	b21a      	sxth	r2, r3
 8005190:	4b52      	ldr	r3, [pc, #328]	@ (80052dc <SBUS_getData+0x25c>)
 8005192:	7adb      	ldrb	r3, [r3, #11]
 8005194:	00db      	lsls	r3, r3, #3
 8005196:	b21b      	sxth	r3, r3
 8005198:	4313      	orrs	r3, r2
 800519a:	b21b      	sxth	r3, r3
 800519c:	b29b      	uxth	r3, r3
 800519e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	4b4e      	ldr	r3, [pc, #312]	@ (80052e0 <SBUS_getData+0x260>)
 80051a6:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_9 = ((SBUS_UART_Rx[12] | SBUS_UART_Rx[13] << 8) & 0x07FF);
 80051a8:	4b4c      	ldr	r3, [pc, #304]	@ (80052dc <SBUS_getData+0x25c>)
 80051aa:	7b1b      	ldrb	r3, [r3, #12]
 80051ac:	b21a      	sxth	r2, r3
 80051ae:	4b4b      	ldr	r3, [pc, #300]	@ (80052dc <SBUS_getData+0x25c>)
 80051b0:	7b5b      	ldrb	r3, [r3, #13]
 80051b2:	021b      	lsls	r3, r3, #8
 80051b4:	b21b      	sxth	r3, r3
 80051b6:	4313      	orrs	r3, r2
 80051b8:	b21b      	sxth	r3, r3
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	4b47      	ldr	r3, [pc, #284]	@ (80052e0 <SBUS_getData+0x260>)
 80051c4:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_10 = ((SBUS_UART_Rx[13] >> 3 | SBUS_UART_Rx[14] << 5) & 0x07FF);
 80051c6:	4b45      	ldr	r3, [pc, #276]	@ (80052dc <SBUS_getData+0x25c>)
 80051c8:	7b5b      	ldrb	r3, [r3, #13]
 80051ca:	08db      	lsrs	r3, r3, #3
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	b21a      	sxth	r2, r3
 80051d0:	4b42      	ldr	r3, [pc, #264]	@ (80052dc <SBUS_getData+0x25c>)
 80051d2:	7b9b      	ldrb	r3, [r3, #14]
 80051d4:	015b      	lsls	r3, r3, #5
 80051d6:	b21b      	sxth	r3, r3
 80051d8:	4313      	orrs	r3, r2
 80051da:	b21b      	sxth	r3, r3
 80051dc:	b29b      	uxth	r3, r3
 80051de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	4b3e      	ldr	r3, [pc, #248]	@ (80052e0 <SBUS_getData+0x260>)
 80051e6:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_11 = ((SBUS_UART_Rx[14] >> 6 | SBUS_UART_Rx[15] << 2 | SBUS_UART_Rx[16] << 10) & 0x07FF);
 80051e8:	4b3c      	ldr	r3, [pc, #240]	@ (80052dc <SBUS_getData+0x25c>)
 80051ea:	7b9b      	ldrb	r3, [r3, #14]
 80051ec:	099b      	lsrs	r3, r3, #6
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	b21a      	sxth	r2, r3
 80051f2:	4b3a      	ldr	r3, [pc, #232]	@ (80052dc <SBUS_getData+0x25c>)
 80051f4:	7bdb      	ldrb	r3, [r3, #15]
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	b21b      	sxth	r3, r3
 80051fa:	4313      	orrs	r3, r2
 80051fc:	b21a      	sxth	r2, r3
 80051fe:	4b37      	ldr	r3, [pc, #220]	@ (80052dc <SBUS_getData+0x25c>)
 8005200:	7c1b      	ldrb	r3, [r3, #16]
 8005202:	029b      	lsls	r3, r3, #10
 8005204:	b21b      	sxth	r3, r3
 8005206:	4313      	orrs	r3, r2
 8005208:	b21b      	sxth	r3, r3
 800520a:	b29b      	uxth	r3, r3
 800520c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005210:	b29a      	uxth	r2, r3
 8005212:	4b33      	ldr	r3, [pc, #204]	@ (80052e0 <SBUS_getData+0x260>)
 8005214:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_12 = ((SBUS_UART_Rx[16] >> 1 | SBUS_UART_Rx[17] << 7) & 0x07FF);
 8005216:	4b31      	ldr	r3, [pc, #196]	@ (80052dc <SBUS_getData+0x25c>)
 8005218:	7c1b      	ldrb	r3, [r3, #16]
 800521a:	085b      	lsrs	r3, r3, #1
 800521c:	b2db      	uxtb	r3, r3
 800521e:	b21a      	sxth	r2, r3
 8005220:	4b2e      	ldr	r3, [pc, #184]	@ (80052dc <SBUS_getData+0x25c>)
 8005222:	7c5b      	ldrb	r3, [r3, #17]
 8005224:	01db      	lsls	r3, r3, #7
 8005226:	b21b      	sxth	r3, r3
 8005228:	4313      	orrs	r3, r2
 800522a:	b21b      	sxth	r3, r3
 800522c:	b29b      	uxth	r3, r3
 800522e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005232:	b29a      	uxth	r2, r3
 8005234:	4b2a      	ldr	r3, [pc, #168]	@ (80052e0 <SBUS_getData+0x260>)
 8005236:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_13 = ((SBUS_UART_Rx[17] >> 4 | SBUS_UART_Rx[18] << 4) & 0x07FF);
 8005238:	4b28      	ldr	r3, [pc, #160]	@ (80052dc <SBUS_getData+0x25c>)
 800523a:	7c5b      	ldrb	r3, [r3, #17]
 800523c:	091b      	lsrs	r3, r3, #4
 800523e:	b2db      	uxtb	r3, r3
 8005240:	b21a      	sxth	r2, r3
 8005242:	4b26      	ldr	r3, [pc, #152]	@ (80052dc <SBUS_getData+0x25c>)
 8005244:	7c9b      	ldrb	r3, [r3, #18]
 8005246:	011b      	lsls	r3, r3, #4
 8005248:	b21b      	sxth	r3, r3
 800524a:	4313      	orrs	r3, r2
 800524c:	b21b      	sxth	r3, r3
 800524e:	b29b      	uxth	r3, r3
 8005250:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005254:	b29a      	uxth	r2, r3
 8005256:	4b22      	ldr	r3, [pc, #136]	@ (80052e0 <SBUS_getData+0x260>)
 8005258:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_14 = ((SBUS_UART_Rx[18] >> 7 | SBUS_UART_Rx[19] << 1 | SBUS_UART_Rx[20] << 9) & 0x07FF);
 800525a:	4b20      	ldr	r3, [pc, #128]	@ (80052dc <SBUS_getData+0x25c>)
 800525c:	7c9b      	ldrb	r3, [r3, #18]
 800525e:	09db      	lsrs	r3, r3, #7
 8005260:	b2db      	uxtb	r3, r3
 8005262:	b21a      	sxth	r2, r3
 8005264:	4b1d      	ldr	r3, [pc, #116]	@ (80052dc <SBUS_getData+0x25c>)
 8005266:	7cdb      	ldrb	r3, [r3, #19]
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	b21b      	sxth	r3, r3
 800526c:	4313      	orrs	r3, r2
 800526e:	b21a      	sxth	r2, r3
 8005270:	4b1a      	ldr	r3, [pc, #104]	@ (80052dc <SBUS_getData+0x25c>)
 8005272:	7d1b      	ldrb	r3, [r3, #20]
 8005274:	025b      	lsls	r3, r3, #9
 8005276:	b21b      	sxth	r3, r3
 8005278:	4313      	orrs	r3, r2
 800527a:	b21b      	sxth	r3, r3
 800527c:	b29b      	uxth	r3, r3
 800527e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005282:	b29a      	uxth	r2, r3
 8005284:	4b16      	ldr	r3, [pc, #88]	@ (80052e0 <SBUS_getData+0x260>)
 8005286:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_15 = ((SBUS_UART_Rx[20] >> 2 | SBUS_UART_Rx[21] << 6) & 0x07FF);
 8005288:	4b14      	ldr	r3, [pc, #80]	@ (80052dc <SBUS_getData+0x25c>)
 800528a:	7d1b      	ldrb	r3, [r3, #20]
 800528c:	089b      	lsrs	r3, r3, #2
 800528e:	b2db      	uxtb	r3, r3
 8005290:	b21a      	sxth	r2, r3
 8005292:	4b12      	ldr	r3, [pc, #72]	@ (80052dc <SBUS_getData+0x25c>)
 8005294:	7d5b      	ldrb	r3, [r3, #21]
 8005296:	019b      	lsls	r3, r3, #6
 8005298:	b21b      	sxth	r3, r3
 800529a:	4313      	orrs	r3, r2
 800529c:	b21b      	sxth	r3, r3
 800529e:	b29b      	uxth	r3, r3
 80052a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	4b0e      	ldr	r3, [pc, #56]	@ (80052e0 <SBUS_getData+0x260>)
 80052a8:	83da      	strh	r2, [r3, #30]
	Radio_input.Canal_16 = ((SBUS_UART_Rx[21] >> 5 | SBUS_UART_Rx[22] << 3) & 0x07FF);
 80052aa:	4b0c      	ldr	r3, [pc, #48]	@ (80052dc <SBUS_getData+0x25c>)
 80052ac:	7d5b      	ldrb	r3, [r3, #21]
 80052ae:	095b      	lsrs	r3, r3, #5
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	b21a      	sxth	r2, r3
 80052b4:	4b09      	ldr	r3, [pc, #36]	@ (80052dc <SBUS_getData+0x25c>)
 80052b6:	7d9b      	ldrb	r3, [r3, #22]
 80052b8:	00db      	lsls	r3, r3, #3
 80052ba:	b21b      	sxth	r3, r3
 80052bc:	4313      	orrs	r3, r2
 80052be:	b21b      	sxth	r3, r3
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	4b05      	ldr	r3, [pc, #20]	@ (80052e0 <SBUS_getData+0x260>)
 80052ca:	841a      	strh	r2, [r3, #32]

	Radio_input.Canal_1 = (uint16_t)((((float)Radio_input.Canal_1 - 352) /1344 ) * 1000) + 1000;
 80052cc:	4b04      	ldr	r3, [pc, #16]	@ (80052e0 <SBUS_getData+0x260>)
 80052ce:	885b      	ldrh	r3, [r3, #2]
 80052d0:	ee07 3a90 	vmov	s15, r3
 80052d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052d8:	e00a      	b.n	80052f0 <SBUS_getData+0x270>
 80052da:	bf00      	nop
 80052dc:	240016b8 	.word	0x240016b8
 80052e0:	2400007c 	.word	0x2400007c
 80052e4:	43b00000 	.word	0x43b00000
 80052e8:	44a80000 	.word	0x44a80000
 80052ec:	447a0000 	.word	0x447a0000
 80052f0:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 80052e4 <SBUS_getData+0x264>
 80052f4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80052f8:	ed5f 6a05 	vldr	s13, [pc, #-20]	@ 80052e8 <SBUS_getData+0x268>
 80052fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005300:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 80052ec <SBUS_getData+0x26c>
 8005304:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005308:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800530c:	ee17 3a90 	vmov	r3, s15
 8005310:	b29b      	uxth	r3, r3
 8005312:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005316:	b29a      	uxth	r2, r3
 8005318:	4bd1      	ldr	r3, [pc, #836]	@ (8005660 <SBUS_getData+0x5e0>)
 800531a:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_2 = (uint16_t)((((float)Radio_input.Canal_2 - 352) /1344 ) * 1000) + 1000;
 800531c:	4bd0      	ldr	r3, [pc, #832]	@ (8005660 <SBUS_getData+0x5e0>)
 800531e:	889b      	ldrh	r3, [r3, #4]
 8005320:	ee07 3a90 	vmov	s15, r3
 8005324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005328:	ed9f 7ace 	vldr	s14, [pc, #824]	@ 8005664 <SBUS_getData+0x5e4>
 800532c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005330:	eddf 6acd 	vldr	s13, [pc, #820]	@ 8005668 <SBUS_getData+0x5e8>
 8005334:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005338:	ed9f 7acc 	vldr	s14, [pc, #816]	@ 800566c <SBUS_getData+0x5ec>
 800533c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005340:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005344:	ee17 3a90 	vmov	r3, s15
 8005348:	b29b      	uxth	r3, r3
 800534a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800534e:	b29a      	uxth	r2, r3
 8005350:	4bc3      	ldr	r3, [pc, #780]	@ (8005660 <SBUS_getData+0x5e0>)
 8005352:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_3 = (uint16_t)((((float)Radio_input.Canal_3 - 352) /1344 ) * 1000) + 1000;
 8005354:	4bc2      	ldr	r3, [pc, #776]	@ (8005660 <SBUS_getData+0x5e0>)
 8005356:	88db      	ldrh	r3, [r3, #6]
 8005358:	ee07 3a90 	vmov	s15, r3
 800535c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005360:	ed9f 7ac0 	vldr	s14, [pc, #768]	@ 8005664 <SBUS_getData+0x5e4>
 8005364:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005368:	eddf 6abf 	vldr	s13, [pc, #764]	@ 8005668 <SBUS_getData+0x5e8>
 800536c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005370:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 800566c <SBUS_getData+0x5ec>
 8005374:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005378:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800537c:	ee17 3a90 	vmov	r3, s15
 8005380:	b29b      	uxth	r3, r3
 8005382:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005386:	b29a      	uxth	r2, r3
 8005388:	4bb5      	ldr	r3, [pc, #724]	@ (8005660 <SBUS_getData+0x5e0>)
 800538a:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_4 = (uint16_t)((((float)Radio_input.Canal_4 - 352) /1344 ) * 1000) + 1000;
 800538c:	4bb4      	ldr	r3, [pc, #720]	@ (8005660 <SBUS_getData+0x5e0>)
 800538e:	891b      	ldrh	r3, [r3, #8]
 8005390:	ee07 3a90 	vmov	s15, r3
 8005394:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005398:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8005664 <SBUS_getData+0x5e4>
 800539c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80053a0:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8005668 <SBUS_getData+0x5e8>
 80053a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053a8:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 800566c <SBUS_getData+0x5ec>
 80053ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053b4:	ee17 3a90 	vmov	r3, s15
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80053be:	b29a      	uxth	r2, r3
 80053c0:	4ba7      	ldr	r3, [pc, #668]	@ (8005660 <SBUS_getData+0x5e0>)
 80053c2:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_5 = (uint16_t)((((float)Radio_input.Canal_5 - 352) /1344 ) * 1000) + 1000;
 80053c4:	4ba6      	ldr	r3, [pc, #664]	@ (8005660 <SBUS_getData+0x5e0>)
 80053c6:	895b      	ldrh	r3, [r3, #10]
 80053c8:	ee07 3a90 	vmov	s15, r3
 80053cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053d0:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8005664 <SBUS_getData+0x5e4>
 80053d4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80053d8:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8005668 <SBUS_getData+0x5e8>
 80053dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053e0:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 800566c <SBUS_getData+0x5ec>
 80053e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053ec:	ee17 3a90 	vmov	r3, s15
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	4b99      	ldr	r3, [pc, #612]	@ (8005660 <SBUS_getData+0x5e0>)
 80053fa:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_6 = (uint16_t)((((float)Radio_input.Canal_6 - 352) /1344 ) * 1000) + 1000;
 80053fc:	4b98      	ldr	r3, [pc, #608]	@ (8005660 <SBUS_getData+0x5e0>)
 80053fe:	899b      	ldrh	r3, [r3, #12]
 8005400:	ee07 3a90 	vmov	s15, r3
 8005404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005408:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8005664 <SBUS_getData+0x5e4>
 800540c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005410:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8005668 <SBUS_getData+0x5e8>
 8005414:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005418:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 800566c <SBUS_getData+0x5ec>
 800541c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005420:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005424:	ee17 3a90 	vmov	r3, s15
 8005428:	b29b      	uxth	r3, r3
 800542a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800542e:	b29a      	uxth	r2, r3
 8005430:	4b8b      	ldr	r3, [pc, #556]	@ (8005660 <SBUS_getData+0x5e0>)
 8005432:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_7 = (uint16_t)((((float)Radio_input.Canal_7 - 352) /1344 ) * 1000) + 1000;
 8005434:	4b8a      	ldr	r3, [pc, #552]	@ (8005660 <SBUS_getData+0x5e0>)
 8005436:	89db      	ldrh	r3, [r3, #14]
 8005438:	ee07 3a90 	vmov	s15, r3
 800543c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005440:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8005664 <SBUS_getData+0x5e4>
 8005444:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005448:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8005668 <SBUS_getData+0x5e8>
 800544c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005450:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 800566c <SBUS_getData+0x5ec>
 8005454:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005458:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800545c:	ee17 3a90 	vmov	r3, s15
 8005460:	b29b      	uxth	r3, r3
 8005462:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005466:	b29a      	uxth	r2, r3
 8005468:	4b7d      	ldr	r3, [pc, #500]	@ (8005660 <SBUS_getData+0x5e0>)
 800546a:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_8 = (uint16_t)((((float)Radio_input.Canal_8 - 352) /1344 ) * 1000) + 1000;
 800546c:	4b7c      	ldr	r3, [pc, #496]	@ (8005660 <SBUS_getData+0x5e0>)
 800546e:	8a1b      	ldrh	r3, [r3, #16]
 8005470:	ee07 3a90 	vmov	s15, r3
 8005474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005478:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8005664 <SBUS_getData+0x5e4>
 800547c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005480:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8005668 <SBUS_getData+0x5e8>
 8005484:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005488:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 800566c <SBUS_getData+0x5ec>
 800548c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005490:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005494:	ee17 3a90 	vmov	r3, s15
 8005498:	b29b      	uxth	r3, r3
 800549a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800549e:	b29a      	uxth	r2, r3
 80054a0:	4b6f      	ldr	r3, [pc, #444]	@ (8005660 <SBUS_getData+0x5e0>)
 80054a2:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_9 = (uint16_t)((((float)Radio_input.Canal_9 - 352) /1344 ) * 1000) + 1000;
 80054a4:	4b6e      	ldr	r3, [pc, #440]	@ (8005660 <SBUS_getData+0x5e0>)
 80054a6:	8a5b      	ldrh	r3, [r3, #18]
 80054a8:	ee07 3a90 	vmov	s15, r3
 80054ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054b0:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8005664 <SBUS_getData+0x5e4>
 80054b4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80054b8:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8005668 <SBUS_getData+0x5e8>
 80054bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054c0:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 800566c <SBUS_getData+0x5ec>
 80054c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054cc:	ee17 3a90 	vmov	r3, s15
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	4b61      	ldr	r3, [pc, #388]	@ (8005660 <SBUS_getData+0x5e0>)
 80054da:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_10 = (uint16_t)((((float)Radio_input.Canal_10 - 352) /1344 ) * 1000) + 1000;
 80054dc:	4b60      	ldr	r3, [pc, #384]	@ (8005660 <SBUS_getData+0x5e0>)
 80054de:	8a9b      	ldrh	r3, [r3, #20]
 80054e0:	ee07 3a90 	vmov	s15, r3
 80054e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e8:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8005664 <SBUS_getData+0x5e4>
 80054ec:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80054f0:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8005668 <SBUS_getData+0x5e8>
 80054f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054f8:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 800566c <SBUS_getData+0x5ec>
 80054fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005504:	ee17 3a90 	vmov	r3, s15
 8005508:	b29b      	uxth	r3, r3
 800550a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800550e:	b29a      	uxth	r2, r3
 8005510:	4b53      	ldr	r3, [pc, #332]	@ (8005660 <SBUS_getData+0x5e0>)
 8005512:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_11 = (uint16_t)((((float)Radio_input.Canal_11 - 352) /1344 ) * 1000) + 1000;
 8005514:	4b52      	ldr	r3, [pc, #328]	@ (8005660 <SBUS_getData+0x5e0>)
 8005516:	8adb      	ldrh	r3, [r3, #22]
 8005518:	ee07 3a90 	vmov	s15, r3
 800551c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005520:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8005664 <SBUS_getData+0x5e4>
 8005524:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005528:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005668 <SBUS_getData+0x5e8>
 800552c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005530:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 800566c <SBUS_getData+0x5ec>
 8005534:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005538:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800553c:	ee17 3a90 	vmov	r3, s15
 8005540:	b29b      	uxth	r3, r3
 8005542:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005546:	b29a      	uxth	r2, r3
 8005548:	4b45      	ldr	r3, [pc, #276]	@ (8005660 <SBUS_getData+0x5e0>)
 800554a:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_12 = (uint16_t)((((float)Radio_input.Canal_12 - 352) /1344 ) * 1000) + 1000;
 800554c:	4b44      	ldr	r3, [pc, #272]	@ (8005660 <SBUS_getData+0x5e0>)
 800554e:	8b1b      	ldrh	r3, [r3, #24]
 8005550:	ee07 3a90 	vmov	s15, r3
 8005554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005558:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8005664 <SBUS_getData+0x5e4>
 800555c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005560:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8005668 <SBUS_getData+0x5e8>
 8005564:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005568:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 800566c <SBUS_getData+0x5ec>
 800556c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005574:	ee17 3a90 	vmov	r3, s15
 8005578:	b29b      	uxth	r3, r3
 800557a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800557e:	b29a      	uxth	r2, r3
 8005580:	4b37      	ldr	r3, [pc, #220]	@ (8005660 <SBUS_getData+0x5e0>)
 8005582:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_13 = (uint16_t)((((float)Radio_input.Canal_13 - 352) /1344 ) * 1000) + 1000;
 8005584:	4b36      	ldr	r3, [pc, #216]	@ (8005660 <SBUS_getData+0x5e0>)
 8005586:	8b5b      	ldrh	r3, [r3, #26]
 8005588:	ee07 3a90 	vmov	s15, r3
 800558c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005590:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8005664 <SBUS_getData+0x5e4>
 8005594:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005598:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8005668 <SBUS_getData+0x5e8>
 800559c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055a0:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800566c <SBUS_getData+0x5ec>
 80055a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055ac:	ee17 3a90 	vmov	r3, s15
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	4b29      	ldr	r3, [pc, #164]	@ (8005660 <SBUS_getData+0x5e0>)
 80055ba:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_14 = (uint16_t)((((float)Radio_input.Canal_14 - 352) /1344 ) * 1000) + 1000;
 80055bc:	4b28      	ldr	r3, [pc, #160]	@ (8005660 <SBUS_getData+0x5e0>)
 80055be:	8b9b      	ldrh	r3, [r3, #28]
 80055c0:	ee07 3a90 	vmov	s15, r3
 80055c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055c8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8005664 <SBUS_getData+0x5e4>
 80055cc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80055d0:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8005668 <SBUS_getData+0x5e8>
 80055d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055d8:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800566c <SBUS_getData+0x5ec>
 80055dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055e4:	ee17 3a90 	vmov	r3, s15
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	4b1b      	ldr	r3, [pc, #108]	@ (8005660 <SBUS_getData+0x5e0>)
 80055f2:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_15 = (uint16_t)((((float)Radio_input.Canal_15 - 352) /1344 ) * 1000) + 1000;
 80055f4:	4b1a      	ldr	r3, [pc, #104]	@ (8005660 <SBUS_getData+0x5e0>)
 80055f6:	8bdb      	ldrh	r3, [r3, #30]
 80055f8:	ee07 3a90 	vmov	s15, r3
 80055fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005600:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8005664 <SBUS_getData+0x5e4>
 8005604:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005608:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8005668 <SBUS_getData+0x5e8>
 800560c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005610:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800566c <SBUS_getData+0x5ec>
 8005614:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005618:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800561c:	ee17 3a90 	vmov	r3, s15
 8005620:	b29b      	uxth	r3, r3
 8005622:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005626:	b29a      	uxth	r2, r3
 8005628:	4b0d      	ldr	r3, [pc, #52]	@ (8005660 <SBUS_getData+0x5e0>)
 800562a:	83da      	strh	r2, [r3, #30]
	Radio_input.Canal_16 = (uint16_t)((((float)Radio_input.Canal_16 - 352) /1344 ) * 1000) + 1000;
 800562c:	4b0c      	ldr	r3, [pc, #48]	@ (8005660 <SBUS_getData+0x5e0>)
 800562e:	8c1b      	ldrh	r3, [r3, #32]
 8005630:	ee07 3a90 	vmov	s15, r3
 8005634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005638:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8005664 <SBUS_getData+0x5e4>
 800563c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005640:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8005668 <SBUS_getData+0x5e8>
 8005644:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005648:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800566c <SBUS_getData+0x5ec>
 800564c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005650:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005654:	ee17 3a90 	vmov	r3, s15
 8005658:	b29b      	uxth	r3, r3
 800565a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800565e:	e007      	b.n	8005670 <SBUS_getData+0x5f0>
 8005660:	2400007c 	.word	0x2400007c
 8005664:	43b00000 	.word	0x43b00000
 8005668:	44a80000 	.word	0x44a80000
 800566c:	447a0000 	.word	0x447a0000
 8005670:	b29a      	uxth	r2, r3
 8005672:	4b2a      	ldr	r3, [pc, #168]	@ (800571c <SBUS_getData+0x69c>)
 8005674:	841a      	strh	r2, [r3, #32]

	//En el caso del byte 24, el primer bit menos significativo corresponde al canal 17, el segundo al canal 18, el tercero a el fail safe y
	//el cuarto a la perdida de paquetes. Los 4 restantes no se utilizan.

	Radio_input.Banderas = SBUS_UART_Rx[23];
 8005676:	4b2a      	ldr	r3, [pc, #168]	@ (8005720 <SBUS_getData+0x6a0>)
 8005678:	7dda      	ldrb	r2, [r3, #23]
 800567a:	4b28      	ldr	r3, [pc, #160]	@ (800571c <SBUS_getData+0x69c>)
 800567c:	701a      	strb	r2, [r3, #0]
	if(SBUS_UART_Rx[23]>=8){
 800567e:	4b28      	ldr	r3, [pc, #160]	@ (8005720 <SBUS_getData+0x6a0>)
 8005680:	7ddb      	ldrb	r3, [r3, #23]
 8005682:	2b07      	cmp	r3, #7
 8005684:	d90a      	bls.n	800569c <SBUS_getData+0x61c>
		SBUS_UART_Rx[23]-=8;
 8005686:	4b26      	ldr	r3, [pc, #152]	@ (8005720 <SBUS_getData+0x6a0>)
 8005688:	7ddb      	ldrb	r3, [r3, #23]
 800568a:	3b08      	subs	r3, #8
 800568c:	b2da      	uxtb	r2, r3
 800568e:	4b24      	ldr	r3, [pc, #144]	@ (8005720 <SBUS_getData+0x6a0>)
 8005690:	75da      	strb	r2, [r3, #23]
		Radio_input.fail_safe = FailSafe;
 8005692:	4b22      	ldr	r3, [pc, #136]	@ (800571c <SBUS_getData+0x69c>)
 8005694:	2235      	movs	r2, #53	@ 0x35
 8005696:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 800569a:	e003      	b.n	80056a4 <SBUS_getData+0x624>
	}else Radio_input.fail_safe= Ok;
 800569c:	4b1f      	ldr	r3, [pc, #124]	@ (800571c <SBUS_getData+0x69c>)
 800569e:	22aa      	movs	r2, #170	@ 0xaa
 80056a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

	if(SBUS_UART_Rx[23]>=4){
 80056a4:	4b1e      	ldr	r3, [pc, #120]	@ (8005720 <SBUS_getData+0x6a0>)
 80056a6:	7ddb      	ldrb	r3, [r3, #23]
 80056a8:	2b03      	cmp	r3, #3
 80056aa:	d90a      	bls.n	80056c2 <SBUS_getData+0x642>
		SBUS_UART_Rx[23]-=4;
 80056ac:	4b1c      	ldr	r3, [pc, #112]	@ (8005720 <SBUS_getData+0x6a0>)
 80056ae:	7ddb      	ldrb	r3, [r3, #23]
 80056b0:	3b04      	subs	r3, #4
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	4b1a      	ldr	r3, [pc, #104]	@ (8005720 <SBUS_getData+0x6a0>)
 80056b6:	75da      	strb	r2, [r3, #23]
		Radio_input.pkg_lost = Pkg_Lost;
 80056b8:	4b18      	ldr	r3, [pc, #96]	@ (800571c <SBUS_getData+0x69c>)
 80056ba:	2210      	movs	r2, #16
 80056bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80056c0:	e003      	b.n	80056ca <SBUS_getData+0x64a>
	}else Radio_input.pkg_lost=Ok;
 80056c2:	4b16      	ldr	r3, [pc, #88]	@ (800571c <SBUS_getData+0x69c>)
 80056c4:	22aa      	movs	r2, #170	@ 0xaa
 80056c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if(SBUS_UART_Rx[23]>=2){
 80056ca:	4b15      	ldr	r3, [pc, #84]	@ (8005720 <SBUS_getData+0x6a0>)
 80056cc:	7ddb      	ldrb	r3, [r3, #23]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d90a      	bls.n	80056e8 <SBUS_getData+0x668>
		SBUS_UART_Rx[23]-=2;
 80056d2:	4b13      	ldr	r3, [pc, #76]	@ (8005720 <SBUS_getData+0x6a0>)
 80056d4:	7ddb      	ldrb	r3, [r3, #23]
 80056d6:	3b02      	subs	r3, #2
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	4b11      	ldr	r3, [pc, #68]	@ (8005720 <SBUS_getData+0x6a0>)
 80056dc:	75da      	strb	r2, [r3, #23]
		Radio_input.Interruptor_2=ON;
 80056de:	4b0f      	ldr	r3, [pc, #60]	@ (800571c <SBUS_getData+0x69c>)
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 80056e6:	e003      	b.n	80056f0 <SBUS_getData+0x670>
	}else Radio_input.Interruptor_2=OFF;
 80056e8:	4b0c      	ldr	r3, [pc, #48]	@ (800571c <SBUS_getData+0x69c>)
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	if(SBUS_UART_Rx[23]){
 80056f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005720 <SBUS_getData+0x6a0>)
 80056f2:	7ddb      	ldrb	r3, [r3, #23]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d004      	beq.n	8005702 <SBUS_getData+0x682>
		Radio_input.Interruptor_1=ON;
 80056f8:	4b08      	ldr	r3, [pc, #32]	@ (800571c <SBUS_getData+0x69c>)
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8005700:	e003      	b.n	800570a <SBUS_getData+0x68a>
	}else Radio_input.Interruptor_1=OFF;
 8005702:	4b06      	ldr	r3, [pc, #24]	@ (800571c <SBUS_getData+0x69c>)
 8005704:	2200      	movs	r2, #0
 8005706:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22


	Radio_input.Uart_Counter = 0;
 800570a:	4b04      	ldr	r3, [pc, #16]	@ (800571c <SBUS_getData+0x69c>)
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

}
 8005712:	bf00      	nop
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr
 800571c:	2400007c 	.word	0x2400007c
 8005720:	240016b8 	.word	0x240016b8

08005724 <SBUS_IntegrityVerification>:

void SBUS_IntegrityVerification(void){
 8005724:	b480      	push	{r7}
 8005726:	af00      	add	r7, sp, #0

	if(Radio_input.Uart_Counter != 255){
 8005728:	4b0f      	ldr	r3, [pc, #60]	@ (8005768 <SBUS_IntegrityVerification+0x44>)
 800572a:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800572e:	2bff      	cmp	r3, #255	@ 0xff
 8005730:	d00c      	beq.n	800574c <SBUS_IntegrityVerification+0x28>
		Radio_input.Uart_Counter++;
 8005732:	4b0d      	ldr	r3, [pc, #52]	@ (8005768 <SBUS_IntegrityVerification+0x44>)
 8005734:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8005738:	3301      	adds	r3, #1
 800573a:	b2da      	uxtb	r2, r3
 800573c:	4b0a      	ldr	r3, [pc, #40]	@ (8005768 <SBUS_IntegrityVerification+0x44>)
 800573e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		Radio_input.uart_error = Ok;
 8005742:	4b09      	ldr	r3, [pc, #36]	@ (8005768 <SBUS_IntegrityVerification+0x44>)
 8005744:	22aa      	movs	r2, #170	@ 0xaa
 8005746:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	}
	else{
		Radio_input.uart_error = Uart_Error;
		Radio_input.fail_safe = FailSafe;
	}
}
 800574a:	e007      	b.n	800575c <SBUS_IntegrityVerification+0x38>
		Radio_input.uart_error = Uart_Error;
 800574c:	4b06      	ldr	r3, [pc, #24]	@ (8005768 <SBUS_IntegrityVerification+0x44>)
 800574e:	2220      	movs	r2, #32
 8005750:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		Radio_input.fail_safe = FailSafe;
 8005754:	4b04      	ldr	r3, [pc, #16]	@ (8005768 <SBUS_IntegrityVerification+0x44>)
 8005756:	2235      	movs	r2, #53	@ 0x35
 8005758:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 800575c:	bf00      	nop
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	2400007c 	.word	0x2400007c

0800576c <SD_blackbox_refresh>:
void SD_blackbox_init(void){

	f_open(&BlackBox, BlackBoxFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
}

void SD_blackbox_refresh(void){
 800576c:	b480      	push	{r7}
 800576e:	af00      	add	r7, sp, #0

	blackbox_data.Time = TimeOn_Counter;
 8005770:	4b58      	ldr	r3, [pc, #352]	@ (80058d4 <SD_blackbox_refresh+0x168>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a58      	ldr	r2, [pc, #352]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 8005776:	6353      	str	r3, [r2, #52]	@ 0x34

	blackbox_data.Ax = IMU.ACC.x;
 8005778:	4b58      	ldr	r3, [pc, #352]	@ (80058dc <SD_blackbox_refresh+0x170>)
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	4a56      	ldr	r2, [pc, #344]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 800577e:	6013      	str	r3, [r2, #0]
	blackbox_data.Ay = IMU.ACC.y;
 8005780:	4b56      	ldr	r3, [pc, #344]	@ (80058dc <SD_blackbox_refresh+0x170>)
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	4a54      	ldr	r2, [pc, #336]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 8005786:	6053      	str	r3, [r2, #4]
	blackbox_data.Az = IMU.ACC.z;
 8005788:	4b54      	ldr	r3, [pc, #336]	@ (80058dc <SD_blackbox_refresh+0x170>)
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	4a52      	ldr	r2, [pc, #328]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 800578e:	6093      	str	r3, [r2, #8]

	blackbox_data.Gx = IMU.GYR.x;
 8005790:	4b52      	ldr	r3, [pc, #328]	@ (80058dc <SD_blackbox_refresh+0x170>)
 8005792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005794:	4a50      	ldr	r2, [pc, #320]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 8005796:	60d3      	str	r3, [r2, #12]
	blackbox_data.Gy = IMU.GYR.y;
 8005798:	4b50      	ldr	r3, [pc, #320]	@ (80058dc <SD_blackbox_refresh+0x170>)
 800579a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579c:	4a4e      	ldr	r2, [pc, #312]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 800579e:	6113      	str	r3, [r2, #16]
	blackbox_data.Gz = IMU.GYR.z;
 80057a0:	4b4e      	ldr	r3, [pc, #312]	@ (80058dc <SD_blackbox_refresh+0x170>)
 80057a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a4:	4a4c      	ldr	r2, [pc, #304]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 80057a6:	6153      	str	r3, [r2, #20]

	blackbox_data.Gfx = 0;
 80057a8:	4b4b      	ldr	r3, [pc, #300]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 80057aa:	f04f 0200 	mov.w	r2, #0
 80057ae:	619a      	str	r2, [r3, #24]
	blackbox_data.Gfy = 0;
 80057b0:	4b49      	ldr	r3, [pc, #292]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 80057b2:	f04f 0200 	mov.w	r2, #0
 80057b6:	61da      	str	r2, [r3, #28]
	blackbox_data.Gfz = 0;
 80057b8:	4b47      	ldr	r3, [pc, #284]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 80057ba:	f04f 0200 	mov.w	r2, #0
 80057be:	621a      	str	r2, [r3, #32]

	blackbox_data.Roll    = IMU.Roll;
 80057c0:	4b46      	ldr	r3, [pc, #280]	@ (80058dc <SD_blackbox_refresh+0x170>)
 80057c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057c4:	4a44      	ldr	r2, [pc, #272]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 80057c6:	6253      	str	r3, [r2, #36]	@ 0x24
	blackbox_data.Pitch   = IMU.Pitch;
 80057c8:	4b44      	ldr	r3, [pc, #272]	@ (80058dc <SD_blackbox_refresh+0x170>)
 80057ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057cc:	4a42      	ldr	r2, [pc, #264]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 80057ce:	6293      	str	r3, [r2, #40]	@ 0x28
	blackbox_data.Heading = IMU.Heading;
 80057d0:	4b42      	ldr	r3, [pc, #264]	@ (80058dc <SD_blackbox_refresh+0x170>)
 80057d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057d4:	4a40      	ldr	r2, [pc, #256]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 80057d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

	blackbox_data.Alt = BMP280.Barometric_Altitude;
 80057d8:	4b41      	ldr	r3, [pc, #260]	@ (80058e0 <SD_blackbox_refresh+0x174>)
 80057da:	8a1a      	ldrh	r2, [r3, #16]
 80057dc:	4b3e      	ldr	r3, [pc, #248]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 80057de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	blackbox_data.Latitude = 0;
 80057e2:	4b3d      	ldr	r3, [pc, #244]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	639a      	str	r2, [r3, #56]	@ 0x38
	blackbox_data.Longitude= 0;
 80057e8:	4b3b      	ldr	r3, [pc, #236]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	63da      	str	r2, [r3, #60]	@ 0x3c

	blackbox_data.ARSP = 0;
 80057ee:	4b3a      	ldr	r3, [pc, #232]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

	blackbox_data.Pressure = BMP280.Pressure;
 80057f6:	4b3a      	ldr	r3, [pc, #232]	@ (80058e0 <SD_blackbox_refresh+0x174>)
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	4a37      	ldr	r2, [pc, #220]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 80057fc:	6413      	str	r3, [r2, #64]	@ 0x40

	blackbox_data.SBUS_Flags = Radio_input.Banderas;
 80057fe:	4b39      	ldr	r3, [pc, #228]	@ (80058e4 <SD_blackbox_refresh+0x178>)
 8005800:	781a      	ldrb	r2, [r3, #0]
 8005802:	4b35      	ldr	r3, [pc, #212]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 8005804:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
	blackbox_data.Flight_Mode = 0;
 8005808:	4b33      	ldr	r3, [pc, #204]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 800580a:	2200      	movs	r2, #0
 800580c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

	blackbox_data.Canal_1 = Radio_input.Canal_1;
 8005810:	4b34      	ldr	r3, [pc, #208]	@ (80058e4 <SD_blackbox_refresh+0x178>)
 8005812:	885a      	ldrh	r2, [r3, #2]
 8005814:	4b30      	ldr	r3, [pc, #192]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 8005816:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	blackbox_data.Canal_2 = Radio_input.Canal_2;
 800581a:	4b32      	ldr	r3, [pc, #200]	@ (80058e4 <SD_blackbox_refresh+0x178>)
 800581c:	889a      	ldrh	r2, [r3, #4]
 800581e:	4b2e      	ldr	r3, [pc, #184]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 8005820:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
	blackbox_data.Canal_3 = Radio_input.Canal_3;
 8005824:	4b2f      	ldr	r3, [pc, #188]	@ (80058e4 <SD_blackbox_refresh+0x178>)
 8005826:	88da      	ldrh	r2, [r3, #6]
 8005828:	4b2b      	ldr	r3, [pc, #172]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 800582a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
	blackbox_data.Canal_4 = Radio_input.Canal_4;
 800582e:	4b2d      	ldr	r3, [pc, #180]	@ (80058e4 <SD_blackbox_refresh+0x178>)
 8005830:	891a      	ldrh	r2, [r3, #8]
 8005832:	4b29      	ldr	r3, [pc, #164]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 8005834:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
	blackbox_data.Canal_5 = Radio_input.Canal_5;
 8005838:	4b2a      	ldr	r3, [pc, #168]	@ (80058e4 <SD_blackbox_refresh+0x178>)
 800583a:	895a      	ldrh	r2, [r3, #10]
 800583c:	4b26      	ldr	r3, [pc, #152]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 800583e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
	blackbox_data.Canal_6 = Radio_input.Canal_6;
 8005842:	4b28      	ldr	r3, [pc, #160]	@ (80058e4 <SD_blackbox_refresh+0x178>)
 8005844:	899a      	ldrh	r2, [r3, #12]
 8005846:	4b24      	ldr	r3, [pc, #144]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 8005848:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
	blackbox_data.Canal_7 = Radio_input.Canal_7;
 800584c:	4b25      	ldr	r3, [pc, #148]	@ (80058e4 <SD_blackbox_refresh+0x178>)
 800584e:	89da      	ldrh	r2, [r3, #14]
 8005850:	4b21      	ldr	r3, [pc, #132]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 8005852:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
	blackbox_data.Canal_8 = Radio_input.Canal_8;
 8005856:	4b23      	ldr	r3, [pc, #140]	@ (80058e4 <SD_blackbox_refresh+0x178>)
 8005858:	8a1a      	ldrh	r2, [r3, #16]
 800585a:	4b1f      	ldr	r3, [pc, #124]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 800585c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
	blackbox_data.Canal_9 = Radio_input.Canal_9;
 8005860:	4b20      	ldr	r3, [pc, #128]	@ (80058e4 <SD_blackbox_refresh+0x178>)
 8005862:	8a5a      	ldrh	r2, [r3, #18]
 8005864:	4b1c      	ldr	r3, [pc, #112]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 8005866:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
	blackbox_data.Canal_10 = Radio_input.Canal_10;
 800586a:	4b1e      	ldr	r3, [pc, #120]	@ (80058e4 <SD_blackbox_refresh+0x178>)
 800586c:	8a9a      	ldrh	r2, [r3, #20]
 800586e:	4b1a      	ldr	r3, [pc, #104]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 8005870:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
	blackbox_data.Canal_11 = Radio_input.Canal_11;
 8005874:	4b1b      	ldr	r3, [pc, #108]	@ (80058e4 <SD_blackbox_refresh+0x178>)
 8005876:	8ada      	ldrh	r2, [r3, #22]
 8005878:	4b17      	ldr	r3, [pc, #92]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 800587a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
	blackbox_data.Canal_12 = Radio_input.Canal_12;
 800587e:	4b19      	ldr	r3, [pc, #100]	@ (80058e4 <SD_blackbox_refresh+0x178>)
 8005880:	8b1a      	ldrh	r2, [r3, #24]
 8005882:	4b15      	ldr	r3, [pc, #84]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 8005884:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
	blackbox_data.Canal_13 = Radio_input.Canal_13;
 8005888:	4b16      	ldr	r3, [pc, #88]	@ (80058e4 <SD_blackbox_refresh+0x178>)
 800588a:	8b5a      	ldrh	r2, [r3, #26]
 800588c:	4b12      	ldr	r3, [pc, #72]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 800588e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
	blackbox_data.Canal_14 = Radio_input.Canal_14;
 8005892:	4b14      	ldr	r3, [pc, #80]	@ (80058e4 <SD_blackbox_refresh+0x178>)
 8005894:	8b9a      	ldrh	r2, [r3, #28]
 8005896:	4b10      	ldr	r3, [pc, #64]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 8005898:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	blackbox_data.Canal_15 = Radio_input.Canal_15;
 800589c:	4b11      	ldr	r3, [pc, #68]	@ (80058e4 <SD_blackbox_refresh+0x178>)
 800589e:	8bda      	ldrh	r2, [r3, #30]
 80058a0:	4b0d      	ldr	r3, [pc, #52]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 80058a2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
	blackbox_data.Canal_16 = Radio_input.Canal_16;
 80058a6:	4b0f      	ldr	r3, [pc, #60]	@ (80058e4 <SD_blackbox_refresh+0x178>)
 80058a8:	8c1a      	ldrh	r2, [r3, #32]
 80058aa:	4b0b      	ldr	r3, [pc, #44]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 80058ac:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

	blackbox_data.Interruptor_1 = Radio_input.Interruptor_1;
 80058b0:	4b0c      	ldr	r3, [pc, #48]	@ (80058e4 <SD_blackbox_refresh+0x178>)
 80058b2:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80058b6:	4b08      	ldr	r3, [pc, #32]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 80058b8:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
	blackbox_data.Interruptor_2 = Radio_input.Interruptor_2;
 80058bc:	4b09      	ldr	r3, [pc, #36]	@ (80058e4 <SD_blackbox_refresh+0x178>)
 80058be:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 80058c2:	4b05      	ldr	r3, [pc, #20]	@ (80058d8 <SD_blackbox_refresh+0x16c>)
 80058c4:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
//	blackbox_data.OUT6  = PWM_Output.Canal_6;
//	blackbox_data.OUT7  = PWM_Output.Canal_7;
//	blackbox_data.OUT8  = PWM_Output.Canal_8;
//	blackbox_data.OUT9  = PWM_Output.Canal_9;
//	blackbox_data.OUT10 = PWM_Output.Canal_10;
}
 80058c8:	bf00      	nop
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	24000dc4 	.word	0x24000dc4
 80058d8:	240028fc 	.word	0x240028fc
 80058dc:	24001550 	.word	0x24001550
 80058e0:	24001410 	.word	0x24001410
 80058e4:	2400007c 	.word	0x2400007c

080058e8 <SD_blackbox_write>:
	BlackBoxFile[4] = ActualFile[4];

	f_open(&BlackBox, BlackBoxFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
}

void SD_blackbox_write(void){
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
	static uint8_t NewFileCount = 0;
	static uint32_t DataCount = 0;
	static uint16_t WriteCount = 0;

	SD_blackbox_refresh();
 80058ee:	f7ff ff3d 	bl	800576c <SD_blackbox_refresh>

	blackbox_data.Nmsg = DataCount;
 80058f2:	4b26      	ldr	r3, [pc, #152]	@ (800598c <SD_blackbox_write+0xa4>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a26      	ldr	r2, [pc, #152]	@ (8005990 <SD_blackbox_write+0xa8>)
 80058f8:	6313      	str	r3, [r2, #48]	@ 0x30
	memcpy(&BlackBoxBuffer[WriteCount],&blackbox_data,sizeof(blackbox_data));
 80058fa:	4b26      	ldr	r3, [pc, #152]	@ (8005994 <SD_blackbox_write+0xac>)
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	461a      	mov	r2, r3
 8005900:	4613      	mov	r3, r2
 8005902:	021b      	lsls	r3, r3, #8
 8005904:	1a9b      	subs	r3, r3, r2
 8005906:	4a24      	ldr	r2, [pc, #144]	@ (8005998 <SD_blackbox_write+0xb0>)
 8005908:	4413      	add	r3, r2
 800590a:	2280      	movs	r2, #128	@ 0x80
 800590c:	4920      	ldr	r1, [pc, #128]	@ (8005990 <SD_blackbox_write+0xa8>)
 800590e:	4618      	mov	r0, r3
 8005910:	f011 fb5b 	bl	8016fca <memcpy>

	if(WriteCount == 15){
 8005914:	4b1f      	ldr	r3, [pc, #124]	@ (8005994 <SD_blackbox_write+0xac>)
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	2b0f      	cmp	r3, #15
 800591a:	d129      	bne.n	8005970 <SD_blackbox_write+0x88>
		for (uint8_t n = 0; n < 16; ++n) {
 800591c:	2300      	movs	r3, #0
 800591e:	71fb      	strb	r3, [r7, #7]
 8005920:	e00d      	b.n	800593e <SD_blackbox_write+0x56>
			f_write(&BlackBox, &BlackBoxBuffer[n], sizeof(blackbox_data), &bw);
 8005922:	79fa      	ldrb	r2, [r7, #7]
 8005924:	4613      	mov	r3, r2
 8005926:	021b      	lsls	r3, r3, #8
 8005928:	1a9b      	subs	r3, r3, r2
 800592a:	4a1b      	ldr	r2, [pc, #108]	@ (8005998 <SD_blackbox_write+0xb0>)
 800592c:	1899      	adds	r1, r3, r2
 800592e:	4b1b      	ldr	r3, [pc, #108]	@ (800599c <SD_blackbox_write+0xb4>)
 8005930:	2280      	movs	r2, #128	@ 0x80
 8005932:	481b      	ldr	r0, [pc, #108]	@ (80059a0 <SD_blackbox_write+0xb8>)
 8005934:	f00d fe67 	bl	8013606 <f_write>
		for (uint8_t n = 0; n < 16; ++n) {
 8005938:	79fb      	ldrb	r3, [r7, #7]
 800593a:	3301      	adds	r3, #1
 800593c:	71fb      	strb	r3, [r7, #7]
 800593e:	79fb      	ldrb	r3, [r7, #7]
 8005940:	2b0f      	cmp	r3, #15
 8005942:	d9ee      	bls.n	8005922 <SD_blackbox_write+0x3a>
		}
		fresult = f_sync(&BlackBox);
 8005944:	4816      	ldr	r0, [pc, #88]	@ (80059a0 <SD_blackbox_write+0xb8>)
 8005946:	f00e f802 	bl	801394e <f_sync>
 800594a:	4603      	mov	r3, r0
 800594c:	461a      	mov	r2, r3
 800594e:	4b15      	ldr	r3, [pc, #84]	@ (80059a4 <SD_blackbox_write+0xbc>)
 8005950:	701a      	strb	r2, [r3, #0]
		WriteCount = 0;
 8005952:	4b10      	ldr	r3, [pc, #64]	@ (8005994 <SD_blackbox_write+0xac>)
 8005954:	2200      	movs	r2, #0
 8005956:	801a      	strh	r2, [r3, #0]
		++NewFileCount;
 8005958:	4b13      	ldr	r3, [pc, #76]	@ (80059a8 <SD_blackbox_write+0xc0>)
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	3301      	adds	r3, #1
 800595e:	b2da      	uxtb	r2, r3
 8005960:	4b11      	ldr	r3, [pc, #68]	@ (80059a8 <SD_blackbox_write+0xc0>)
 8005962:	701a      	strb	r2, [r3, #0]
		++DataCount;
 8005964:	4b09      	ldr	r3, [pc, #36]	@ (800598c <SD_blackbox_write+0xa4>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	3301      	adds	r3, #1
 800596a:	4a08      	ldr	r2, [pc, #32]	@ (800598c <SD_blackbox_write+0xa4>)
 800596c:	6013      	str	r3, [r2, #0]
		return;
 800596e:	e00a      	b.n	8005986 <SD_blackbox_write+0x9e>
	}
	++WriteCount;
 8005970:	4b08      	ldr	r3, [pc, #32]	@ (8005994 <SD_blackbox_write+0xac>)
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	3301      	adds	r3, #1
 8005976:	b29a      	uxth	r2, r3
 8005978:	4b06      	ldr	r3, [pc, #24]	@ (8005994 <SD_blackbox_write+0xac>)
 800597a:	801a      	strh	r2, [r3, #0]
	++DataCount;
 800597c:	4b03      	ldr	r3, [pc, #12]	@ (800598c <SD_blackbox_write+0xa4>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	3301      	adds	r3, #1
 8005982:	4a02      	ldr	r2, [pc, #8]	@ (800598c <SD_blackbox_write+0xa4>)
 8005984:	6013      	str	r3, [r2, #0]
}
 8005986:	3708      	adds	r7, #8
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	2400297c 	.word	0x2400297c
 8005990:	240028fc 	.word	0x240028fc
 8005994:	24002980 	.word	0x24002980
 8005998:	2400190c 	.word	0x2400190c
 800599c:	24001908 	.word	0x24001908
 80059a0:	240016d4 	.word	0x240016d4
 80059a4:	24001904 	.word	0x24001904
 80059a8:	24002982 	.word	0x24002982

080059ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80059ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80059e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80059b0:	f7fd f828 	bl	8002a04 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80059b4:	480c      	ldr	r0, [pc, #48]	@ (80059e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80059b6:	490d      	ldr	r1, [pc, #52]	@ (80059ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80059b8:	4a0d      	ldr	r2, [pc, #52]	@ (80059f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80059ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80059bc:	e002      	b.n	80059c4 <LoopCopyDataInit>

080059be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80059be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80059c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80059c2:	3304      	adds	r3, #4

080059c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80059c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80059c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80059c8:	d3f9      	bcc.n	80059be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80059ca:	4a0a      	ldr	r2, [pc, #40]	@ (80059f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80059cc:	4c0a      	ldr	r4, [pc, #40]	@ (80059f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80059ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80059d0:	e001      	b.n	80059d6 <LoopFillZerobss>

080059d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80059d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80059d4:	3204      	adds	r2, #4

080059d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80059d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80059d8:	d3fb      	bcc.n	80059d2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80059da:	f011 facf 	bl	8016f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80059de:	f7fc fbab 	bl	8002138 <main>
  bx  lr
 80059e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80059e4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80059e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80059ec:	24000290 	.word	0x24000290
  ldr r2, =_sidata
 80059f0:	08019c80 	.word	0x08019c80
  ldr r2, =_sbss
 80059f4:	24000290 	.word	0x24000290
  ldr r4, =_ebss
 80059f8:	24006844 	.word	0x24006844

080059fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80059fc:	e7fe      	b.n	80059fc <ADC_IRQHandler>
	...

08005a00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a06:	2003      	movs	r0, #3
 8005a08:	f000 f927 	bl	8005c5a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005a0c:	f004 fd3e 	bl	800a48c <HAL_RCC_GetSysClockFreq>
 8005a10:	4602      	mov	r2, r0
 8005a12:	4b15      	ldr	r3, [pc, #84]	@ (8005a68 <HAL_Init+0x68>)
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	0a1b      	lsrs	r3, r3, #8
 8005a18:	f003 030f 	and.w	r3, r3, #15
 8005a1c:	4913      	ldr	r1, [pc, #76]	@ (8005a6c <HAL_Init+0x6c>)
 8005a1e:	5ccb      	ldrb	r3, [r1, r3]
 8005a20:	f003 031f 	and.w	r3, r3, #31
 8005a24:	fa22 f303 	lsr.w	r3, r2, r3
 8005a28:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8005a68 <HAL_Init+0x68>)
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	f003 030f 	and.w	r3, r3, #15
 8005a32:	4a0e      	ldr	r2, [pc, #56]	@ (8005a6c <HAL_Init+0x6c>)
 8005a34:	5cd3      	ldrb	r3, [r2, r3]
 8005a36:	f003 031f 	and.w	r3, r3, #31
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a40:	4a0b      	ldr	r2, [pc, #44]	@ (8005a70 <HAL_Init+0x70>)
 8005a42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a44:	4a0b      	ldr	r2, [pc, #44]	@ (8005a74 <HAL_Init+0x74>)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005a4a:	200f      	movs	r0, #15
 8005a4c:	f7fc fe44 	bl	80026d8 <HAL_InitTick>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d001      	beq.n	8005a5a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e002      	b.n	8005a60 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005a5a:	f7fc fe1f 	bl	800269c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3708      	adds	r7, #8
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	58024400 	.word	0x58024400
 8005a6c:	08018fe4 	.word	0x08018fe4
 8005a70:	24000004 	.word	0x24000004
 8005a74:	24000000 	.word	0x24000000

08005a78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005a7c:	4b06      	ldr	r3, [pc, #24]	@ (8005a98 <HAL_IncTick+0x20>)
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	461a      	mov	r2, r3
 8005a82:	4b06      	ldr	r3, [pc, #24]	@ (8005a9c <HAL_IncTick+0x24>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4413      	add	r3, r2
 8005a88:	4a04      	ldr	r2, [pc, #16]	@ (8005a9c <HAL_IncTick+0x24>)
 8005a8a:	6013      	str	r3, [r2, #0]
}
 8005a8c:	bf00      	nop
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	240000a8 	.word	0x240000a8
 8005a9c:	24002984 	.word	0x24002984

08005aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8005aa4:	4b03      	ldr	r3, [pc, #12]	@ (8005ab4 <HAL_GetTick+0x14>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	24002984 	.word	0x24002984

08005ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ac0:	f7ff ffee 	bl	8005aa0 <HAL_GetTick>
 8005ac4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad0:	d005      	beq.n	8005ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8005afc <HAL_Delay+0x44>)
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4413      	add	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005ade:	bf00      	nop
 8005ae0:	f7ff ffde 	bl	8005aa0 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d8f7      	bhi.n	8005ae0 <HAL_Delay+0x28>
  {
  }
}
 8005af0:	bf00      	nop
 8005af2:	bf00      	nop
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	240000a8 	.word	0x240000a8

08005b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f003 0307 	and.w	r3, r3, #7
 8005b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b10:	4b0b      	ldr	r3, [pc, #44]	@ (8005b40 <__NVIC_SetPriorityGrouping+0x40>)
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005b28:	4b06      	ldr	r3, [pc, #24]	@ (8005b44 <__NVIC_SetPriorityGrouping+0x44>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b2e:	4a04      	ldr	r2, [pc, #16]	@ (8005b40 <__NVIC_SetPriorityGrouping+0x40>)
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	60d3      	str	r3, [r2, #12]
}
 8005b34:	bf00      	nop
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	e000ed00 	.word	0xe000ed00
 8005b44:	05fa0000 	.word	0x05fa0000

08005b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b4c:	4b04      	ldr	r3, [pc, #16]	@ (8005b60 <__NVIC_GetPriorityGrouping+0x18>)
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	0a1b      	lsrs	r3, r3, #8
 8005b52:	f003 0307 	and.w	r3, r3, #7
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	e000ed00 	.word	0xe000ed00

08005b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005b6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	db0b      	blt.n	8005b8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b76:	88fb      	ldrh	r3, [r7, #6]
 8005b78:	f003 021f 	and.w	r2, r3, #31
 8005b7c:	4907      	ldr	r1, [pc, #28]	@ (8005b9c <__NVIC_EnableIRQ+0x38>)
 8005b7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b82:	095b      	lsrs	r3, r3, #5
 8005b84:	2001      	movs	r0, #1
 8005b86:	fa00 f202 	lsl.w	r2, r0, r2
 8005b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005b8e:	bf00      	nop
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	e000e100 	.word	0xe000e100

08005ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	6039      	str	r1, [r7, #0]
 8005baa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005bac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	db0a      	blt.n	8005bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	490c      	ldr	r1, [pc, #48]	@ (8005bec <__NVIC_SetPriority+0x4c>)
 8005bba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bbe:	0112      	lsls	r2, r2, #4
 8005bc0:	b2d2      	uxtb	r2, r2
 8005bc2:	440b      	add	r3, r1
 8005bc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005bc8:	e00a      	b.n	8005be0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	4908      	ldr	r1, [pc, #32]	@ (8005bf0 <__NVIC_SetPriority+0x50>)
 8005bd0:	88fb      	ldrh	r3, [r7, #6]
 8005bd2:	f003 030f 	and.w	r3, r3, #15
 8005bd6:	3b04      	subs	r3, #4
 8005bd8:	0112      	lsls	r2, r2, #4
 8005bda:	b2d2      	uxtb	r2, r2
 8005bdc:	440b      	add	r3, r1
 8005bde:	761a      	strb	r2, [r3, #24]
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr
 8005bec:	e000e100 	.word	0xe000e100
 8005bf0:	e000ed00 	.word	0xe000ed00

08005bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b089      	sub	sp, #36	@ 0x24
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f003 0307 	and.w	r3, r3, #7
 8005c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	f1c3 0307 	rsb	r3, r3, #7
 8005c0e:	2b04      	cmp	r3, #4
 8005c10:	bf28      	it	cs
 8005c12:	2304      	movcs	r3, #4
 8005c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	3304      	adds	r3, #4
 8005c1a:	2b06      	cmp	r3, #6
 8005c1c:	d902      	bls.n	8005c24 <NVIC_EncodePriority+0x30>
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	3b03      	subs	r3, #3
 8005c22:	e000      	b.n	8005c26 <NVIC_EncodePriority+0x32>
 8005c24:	2300      	movs	r3, #0
 8005c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c28:	f04f 32ff 	mov.w	r2, #4294967295
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c32:	43da      	mvns	r2, r3
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	401a      	ands	r2, r3
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	fa01 f303 	lsl.w	r3, r1, r3
 8005c46:	43d9      	mvns	r1, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c4c:	4313      	orrs	r3, r2
         );
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3724      	adds	r7, #36	@ 0x24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b082      	sub	sp, #8
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7ff ff4c 	bl	8005b00 <__NVIC_SetPriorityGrouping>
}
 8005c68:	bf00      	nop
 8005c6a:	3708      	adds	r7, #8
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	4603      	mov	r3, r0
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
 8005c7c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005c7e:	f7ff ff63 	bl	8005b48 <__NVIC_GetPriorityGrouping>
 8005c82:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	68b9      	ldr	r1, [r7, #8]
 8005c88:	6978      	ldr	r0, [r7, #20]
 8005c8a:	f7ff ffb3 	bl	8005bf4 <NVIC_EncodePriority>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005c94:	4611      	mov	r1, r2
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7ff ff82 	bl	8005ba0 <__NVIC_SetPriority>
}
 8005c9c:	bf00      	nop
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	4603      	mov	r3, r0
 8005cac:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005cae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7ff ff56 	bl	8005b64 <__NVIC_EnableIRQ>
}
 8005cb8:	bf00      	nop
 8005cba:	3708      	adds	r7, #8
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8005cc4:	f3bf 8f5f 	dmb	sy
}
 8005cc8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005cca:	4b07      	ldr	r3, [pc, #28]	@ (8005ce8 <HAL_MPU_Disable+0x28>)
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cce:	4a06      	ldr	r2, [pc, #24]	@ (8005ce8 <HAL_MPU_Disable+0x28>)
 8005cd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cd4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005cd6:	4b05      	ldr	r3, [pc, #20]	@ (8005cec <HAL_MPU_Disable+0x2c>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	605a      	str	r2, [r3, #4]
}
 8005cdc:	bf00      	nop
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	e000ed00 	.word	0xe000ed00
 8005cec:	e000ed90 	.word	0xe000ed90

08005cf0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005cf8:	4a0b      	ldr	r2, [pc, #44]	@ (8005d28 <HAL_MPU_Enable+0x38>)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f043 0301 	orr.w	r3, r3, #1
 8005d00:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005d02:	4b0a      	ldr	r3, [pc, #40]	@ (8005d2c <HAL_MPU_Enable+0x3c>)
 8005d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d06:	4a09      	ldr	r2, [pc, #36]	@ (8005d2c <HAL_MPU_Enable+0x3c>)
 8005d08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d0c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005d0e:	f3bf 8f4f 	dsb	sy
}
 8005d12:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005d14:	f3bf 8f6f 	isb	sy
}
 8005d18:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005d1a:	bf00      	nop
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	e000ed90 	.word	0xe000ed90
 8005d2c:	e000ed00 	.word	0xe000ed00

08005d30 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	785a      	ldrb	r2, [r3, #1]
 8005d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8005dac <HAL_MPU_ConfigRegion+0x7c>)
 8005d3e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8005d40:	4b1a      	ldr	r3, [pc, #104]	@ (8005dac <HAL_MPU_ConfigRegion+0x7c>)
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	4a19      	ldr	r2, [pc, #100]	@ (8005dac <HAL_MPU_ConfigRegion+0x7c>)
 8005d46:	f023 0301 	bic.w	r3, r3, #1
 8005d4a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8005d4c:	4a17      	ldr	r2, [pc, #92]	@ (8005dac <HAL_MPU_ConfigRegion+0x7c>)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	7b1b      	ldrb	r3, [r3, #12]
 8005d58:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	7adb      	ldrb	r3, [r3, #11]
 8005d5e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005d60:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	7a9b      	ldrb	r3, [r3, #10]
 8005d66:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005d68:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	7b5b      	ldrb	r3, [r3, #13]
 8005d6e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005d70:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	7b9b      	ldrb	r3, [r3, #14]
 8005d76:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005d78:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	7bdb      	ldrb	r3, [r3, #15]
 8005d7e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005d80:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	7a5b      	ldrb	r3, [r3, #9]
 8005d86:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005d88:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	7a1b      	ldrb	r3, [r3, #8]
 8005d8e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005d90:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	7812      	ldrb	r2, [r2, #0]
 8005d96:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005d98:	4a04      	ldr	r2, [pc, #16]	@ (8005dac <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005d9a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005d9c:	6113      	str	r3, [r2, #16]
}
 8005d9e:	bf00      	nop
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	e000ed90 	.word	0xe000ed90

08005db0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005db8:	f7ff fe72 	bl	8005aa0 <HAL_GetTick>
 8005dbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e37d      	b.n	80064c4 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a66      	ldr	r2, [pc, #408]	@ (8005f68 <HAL_DMA_Init+0x1b8>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d04a      	beq.n	8005e68 <HAL_DMA_Init+0xb8>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a65      	ldr	r2, [pc, #404]	@ (8005f6c <HAL_DMA_Init+0x1bc>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d045      	beq.n	8005e68 <HAL_DMA_Init+0xb8>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a63      	ldr	r2, [pc, #396]	@ (8005f70 <HAL_DMA_Init+0x1c0>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d040      	beq.n	8005e68 <HAL_DMA_Init+0xb8>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a62      	ldr	r2, [pc, #392]	@ (8005f74 <HAL_DMA_Init+0x1c4>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d03b      	beq.n	8005e68 <HAL_DMA_Init+0xb8>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a60      	ldr	r2, [pc, #384]	@ (8005f78 <HAL_DMA_Init+0x1c8>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d036      	beq.n	8005e68 <HAL_DMA_Init+0xb8>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a5f      	ldr	r2, [pc, #380]	@ (8005f7c <HAL_DMA_Init+0x1cc>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d031      	beq.n	8005e68 <HAL_DMA_Init+0xb8>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a5d      	ldr	r2, [pc, #372]	@ (8005f80 <HAL_DMA_Init+0x1d0>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d02c      	beq.n	8005e68 <HAL_DMA_Init+0xb8>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a5c      	ldr	r2, [pc, #368]	@ (8005f84 <HAL_DMA_Init+0x1d4>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d027      	beq.n	8005e68 <HAL_DMA_Init+0xb8>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a5a      	ldr	r2, [pc, #360]	@ (8005f88 <HAL_DMA_Init+0x1d8>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d022      	beq.n	8005e68 <HAL_DMA_Init+0xb8>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a59      	ldr	r2, [pc, #356]	@ (8005f8c <HAL_DMA_Init+0x1dc>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d01d      	beq.n	8005e68 <HAL_DMA_Init+0xb8>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a57      	ldr	r2, [pc, #348]	@ (8005f90 <HAL_DMA_Init+0x1e0>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d018      	beq.n	8005e68 <HAL_DMA_Init+0xb8>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a56      	ldr	r2, [pc, #344]	@ (8005f94 <HAL_DMA_Init+0x1e4>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d013      	beq.n	8005e68 <HAL_DMA_Init+0xb8>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a54      	ldr	r2, [pc, #336]	@ (8005f98 <HAL_DMA_Init+0x1e8>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d00e      	beq.n	8005e68 <HAL_DMA_Init+0xb8>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a53      	ldr	r2, [pc, #332]	@ (8005f9c <HAL_DMA_Init+0x1ec>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d009      	beq.n	8005e68 <HAL_DMA_Init+0xb8>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a51      	ldr	r2, [pc, #324]	@ (8005fa0 <HAL_DMA_Init+0x1f0>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d004      	beq.n	8005e68 <HAL_DMA_Init+0xb8>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a50      	ldr	r2, [pc, #320]	@ (8005fa4 <HAL_DMA_Init+0x1f4>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d101      	bne.n	8005e6c <HAL_DMA_Init+0xbc>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e000      	b.n	8005e6e <HAL_DMA_Init+0xbe>
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f000 813c 	beq.w	80060ec <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2202      	movs	r2, #2
 8005e78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a37      	ldr	r2, [pc, #220]	@ (8005f68 <HAL_DMA_Init+0x1b8>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d04a      	beq.n	8005f24 <HAL_DMA_Init+0x174>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a36      	ldr	r2, [pc, #216]	@ (8005f6c <HAL_DMA_Init+0x1bc>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d045      	beq.n	8005f24 <HAL_DMA_Init+0x174>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a34      	ldr	r2, [pc, #208]	@ (8005f70 <HAL_DMA_Init+0x1c0>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d040      	beq.n	8005f24 <HAL_DMA_Init+0x174>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a33      	ldr	r2, [pc, #204]	@ (8005f74 <HAL_DMA_Init+0x1c4>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d03b      	beq.n	8005f24 <HAL_DMA_Init+0x174>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a31      	ldr	r2, [pc, #196]	@ (8005f78 <HAL_DMA_Init+0x1c8>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d036      	beq.n	8005f24 <HAL_DMA_Init+0x174>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a30      	ldr	r2, [pc, #192]	@ (8005f7c <HAL_DMA_Init+0x1cc>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d031      	beq.n	8005f24 <HAL_DMA_Init+0x174>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a2e      	ldr	r2, [pc, #184]	@ (8005f80 <HAL_DMA_Init+0x1d0>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d02c      	beq.n	8005f24 <HAL_DMA_Init+0x174>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a2d      	ldr	r2, [pc, #180]	@ (8005f84 <HAL_DMA_Init+0x1d4>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d027      	beq.n	8005f24 <HAL_DMA_Init+0x174>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a2b      	ldr	r2, [pc, #172]	@ (8005f88 <HAL_DMA_Init+0x1d8>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d022      	beq.n	8005f24 <HAL_DMA_Init+0x174>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a2a      	ldr	r2, [pc, #168]	@ (8005f8c <HAL_DMA_Init+0x1dc>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d01d      	beq.n	8005f24 <HAL_DMA_Init+0x174>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a28      	ldr	r2, [pc, #160]	@ (8005f90 <HAL_DMA_Init+0x1e0>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d018      	beq.n	8005f24 <HAL_DMA_Init+0x174>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a27      	ldr	r2, [pc, #156]	@ (8005f94 <HAL_DMA_Init+0x1e4>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d013      	beq.n	8005f24 <HAL_DMA_Init+0x174>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a25      	ldr	r2, [pc, #148]	@ (8005f98 <HAL_DMA_Init+0x1e8>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d00e      	beq.n	8005f24 <HAL_DMA_Init+0x174>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a24      	ldr	r2, [pc, #144]	@ (8005f9c <HAL_DMA_Init+0x1ec>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d009      	beq.n	8005f24 <HAL_DMA_Init+0x174>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a22      	ldr	r2, [pc, #136]	@ (8005fa0 <HAL_DMA_Init+0x1f0>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d004      	beq.n	8005f24 <HAL_DMA_Init+0x174>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a21      	ldr	r2, [pc, #132]	@ (8005fa4 <HAL_DMA_Init+0x1f4>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d108      	bne.n	8005f36 <HAL_DMA_Init+0x186>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f022 0201 	bic.w	r2, r2, #1
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	e007      	b.n	8005f46 <HAL_DMA_Init+0x196>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f022 0201 	bic.w	r2, r2, #1
 8005f44:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005f46:	e02f      	b.n	8005fa8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f48:	f7ff fdaa 	bl	8005aa0 <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	2b05      	cmp	r3, #5
 8005f54:	d928      	bls.n	8005fa8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2220      	movs	r2, #32
 8005f5a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2203      	movs	r2, #3
 8005f60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e2ad      	b.n	80064c4 <HAL_DMA_Init+0x714>
 8005f68:	40020010 	.word	0x40020010
 8005f6c:	40020028 	.word	0x40020028
 8005f70:	40020040 	.word	0x40020040
 8005f74:	40020058 	.word	0x40020058
 8005f78:	40020070 	.word	0x40020070
 8005f7c:	40020088 	.word	0x40020088
 8005f80:	400200a0 	.word	0x400200a0
 8005f84:	400200b8 	.word	0x400200b8
 8005f88:	40020410 	.word	0x40020410
 8005f8c:	40020428 	.word	0x40020428
 8005f90:	40020440 	.word	0x40020440
 8005f94:	40020458 	.word	0x40020458
 8005f98:	40020470 	.word	0x40020470
 8005f9c:	40020488 	.word	0x40020488
 8005fa0:	400204a0 	.word	0x400204a0
 8005fa4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1c8      	bne.n	8005f48 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	4b73      	ldr	r3, [pc, #460]	@ (8006190 <HAL_DMA_Init+0x3e0>)
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005fce:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fda:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fe6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff8:	2b04      	cmp	r3, #4
 8005ffa:	d107      	bne.n	800600c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006004:	4313      	orrs	r3, r2
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	4313      	orrs	r3, r2
 800600a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	2b28      	cmp	r3, #40	@ 0x28
 8006012:	d903      	bls.n	800601c <HAL_DMA_Init+0x26c>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	2b2e      	cmp	r3, #46	@ 0x2e
 800601a:	d91f      	bls.n	800605c <HAL_DMA_Init+0x2ac>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	2b3e      	cmp	r3, #62	@ 0x3e
 8006022:	d903      	bls.n	800602c <HAL_DMA_Init+0x27c>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	2b42      	cmp	r3, #66	@ 0x42
 800602a:	d917      	bls.n	800605c <HAL_DMA_Init+0x2ac>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	2b46      	cmp	r3, #70	@ 0x46
 8006032:	d903      	bls.n	800603c <HAL_DMA_Init+0x28c>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	2b48      	cmp	r3, #72	@ 0x48
 800603a:	d90f      	bls.n	800605c <HAL_DMA_Init+0x2ac>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	2b4e      	cmp	r3, #78	@ 0x4e
 8006042:	d903      	bls.n	800604c <HAL_DMA_Init+0x29c>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	2b52      	cmp	r3, #82	@ 0x52
 800604a:	d907      	bls.n	800605c <HAL_DMA_Init+0x2ac>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	2b73      	cmp	r3, #115	@ 0x73
 8006052:	d905      	bls.n	8006060 <HAL_DMA_Init+0x2b0>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	2b77      	cmp	r3, #119	@ 0x77
 800605a:	d801      	bhi.n	8006060 <HAL_DMA_Init+0x2b0>
 800605c:	2301      	movs	r3, #1
 800605e:	e000      	b.n	8006062 <HAL_DMA_Init+0x2b2>
 8006060:	2300      	movs	r3, #0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d003      	beq.n	800606e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800606c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	695b      	ldr	r3, [r3, #20]
 800607c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	f023 0307 	bic.w	r3, r3, #7
 8006084:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	4313      	orrs	r3, r2
 800608e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006094:	2b04      	cmp	r3, #4
 8006096:	d117      	bne.n	80060c8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	4313      	orrs	r3, r2
 80060a0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00e      	beq.n	80060c8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f002 fbe0 	bl	8008870 <DMA_CheckFifoParam>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d008      	beq.n	80060c8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2240      	movs	r2, #64	@ 0x40
 80060ba:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e1fd      	b.n	80064c4 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f002 fb1b 	bl	800870c <DMA_CalcBaseAndBitshift>
 80060d6:	4603      	mov	r3, r0
 80060d8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060de:	f003 031f 	and.w	r3, r3, #31
 80060e2:	223f      	movs	r2, #63	@ 0x3f
 80060e4:	409a      	lsls	r2, r3
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	609a      	str	r2, [r3, #8]
 80060ea:	e0fd      	b.n	80062e8 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a28      	ldr	r2, [pc, #160]	@ (8006194 <HAL_DMA_Init+0x3e4>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d04a      	beq.n	800618c <HAL_DMA_Init+0x3dc>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a27      	ldr	r2, [pc, #156]	@ (8006198 <HAL_DMA_Init+0x3e8>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d045      	beq.n	800618c <HAL_DMA_Init+0x3dc>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a25      	ldr	r2, [pc, #148]	@ (800619c <HAL_DMA_Init+0x3ec>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d040      	beq.n	800618c <HAL_DMA_Init+0x3dc>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a24      	ldr	r2, [pc, #144]	@ (80061a0 <HAL_DMA_Init+0x3f0>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d03b      	beq.n	800618c <HAL_DMA_Init+0x3dc>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a22      	ldr	r2, [pc, #136]	@ (80061a4 <HAL_DMA_Init+0x3f4>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d036      	beq.n	800618c <HAL_DMA_Init+0x3dc>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a21      	ldr	r2, [pc, #132]	@ (80061a8 <HAL_DMA_Init+0x3f8>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d031      	beq.n	800618c <HAL_DMA_Init+0x3dc>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a1f      	ldr	r2, [pc, #124]	@ (80061ac <HAL_DMA_Init+0x3fc>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d02c      	beq.n	800618c <HAL_DMA_Init+0x3dc>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a1e      	ldr	r2, [pc, #120]	@ (80061b0 <HAL_DMA_Init+0x400>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d027      	beq.n	800618c <HAL_DMA_Init+0x3dc>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a1c      	ldr	r2, [pc, #112]	@ (80061b4 <HAL_DMA_Init+0x404>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d022      	beq.n	800618c <HAL_DMA_Init+0x3dc>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a1b      	ldr	r2, [pc, #108]	@ (80061b8 <HAL_DMA_Init+0x408>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d01d      	beq.n	800618c <HAL_DMA_Init+0x3dc>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a19      	ldr	r2, [pc, #100]	@ (80061bc <HAL_DMA_Init+0x40c>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d018      	beq.n	800618c <HAL_DMA_Init+0x3dc>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a18      	ldr	r2, [pc, #96]	@ (80061c0 <HAL_DMA_Init+0x410>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d013      	beq.n	800618c <HAL_DMA_Init+0x3dc>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a16      	ldr	r2, [pc, #88]	@ (80061c4 <HAL_DMA_Init+0x414>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d00e      	beq.n	800618c <HAL_DMA_Init+0x3dc>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a15      	ldr	r2, [pc, #84]	@ (80061c8 <HAL_DMA_Init+0x418>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d009      	beq.n	800618c <HAL_DMA_Init+0x3dc>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a13      	ldr	r2, [pc, #76]	@ (80061cc <HAL_DMA_Init+0x41c>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d004      	beq.n	800618c <HAL_DMA_Init+0x3dc>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a12      	ldr	r2, [pc, #72]	@ (80061d0 <HAL_DMA_Init+0x420>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d123      	bne.n	80061d4 <HAL_DMA_Init+0x424>
 800618c:	2301      	movs	r3, #1
 800618e:	e022      	b.n	80061d6 <HAL_DMA_Init+0x426>
 8006190:	fe10803f 	.word	0xfe10803f
 8006194:	48022c08 	.word	0x48022c08
 8006198:	48022c1c 	.word	0x48022c1c
 800619c:	48022c30 	.word	0x48022c30
 80061a0:	48022c44 	.word	0x48022c44
 80061a4:	48022c58 	.word	0x48022c58
 80061a8:	48022c6c 	.word	0x48022c6c
 80061ac:	48022c80 	.word	0x48022c80
 80061b0:	48022c94 	.word	0x48022c94
 80061b4:	58025408 	.word	0x58025408
 80061b8:	5802541c 	.word	0x5802541c
 80061bc:	58025430 	.word	0x58025430
 80061c0:	58025444 	.word	0x58025444
 80061c4:	58025458 	.word	0x58025458
 80061c8:	5802546c 	.word	0x5802546c
 80061cc:	58025480 	.word	0x58025480
 80061d0:	58025494 	.word	0x58025494
 80061d4:	2300      	movs	r3, #0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d07d      	beq.n	80062d6 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a7f      	ldr	r2, [pc, #508]	@ (80063dc <HAL_DMA_Init+0x62c>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d021      	beq.n	8006228 <HAL_DMA_Init+0x478>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a7d      	ldr	r2, [pc, #500]	@ (80063e0 <HAL_DMA_Init+0x630>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d01c      	beq.n	8006228 <HAL_DMA_Init+0x478>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a7c      	ldr	r2, [pc, #496]	@ (80063e4 <HAL_DMA_Init+0x634>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d017      	beq.n	8006228 <HAL_DMA_Init+0x478>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a7a      	ldr	r2, [pc, #488]	@ (80063e8 <HAL_DMA_Init+0x638>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d012      	beq.n	8006228 <HAL_DMA_Init+0x478>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a79      	ldr	r2, [pc, #484]	@ (80063ec <HAL_DMA_Init+0x63c>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d00d      	beq.n	8006228 <HAL_DMA_Init+0x478>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a77      	ldr	r2, [pc, #476]	@ (80063f0 <HAL_DMA_Init+0x640>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d008      	beq.n	8006228 <HAL_DMA_Init+0x478>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a76      	ldr	r2, [pc, #472]	@ (80063f4 <HAL_DMA_Init+0x644>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d003      	beq.n	8006228 <HAL_DMA_Init+0x478>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a74      	ldr	r2, [pc, #464]	@ (80063f8 <HAL_DMA_Init+0x648>)
 8006226:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2202      	movs	r2, #2
 800622c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	4b6e      	ldr	r3, [pc, #440]	@ (80063fc <HAL_DMA_Init+0x64c>)
 8006244:	4013      	ands	r3, r2
 8006246:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	2b40      	cmp	r3, #64	@ 0x40
 800624e:	d008      	beq.n	8006262 <HAL_DMA_Init+0x4b2>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	2b80      	cmp	r3, #128	@ 0x80
 8006256:	d102      	bne.n	800625e <HAL_DMA_Init+0x4ae>
 8006258:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800625c:	e002      	b.n	8006264 <HAL_DMA_Init+0x4b4>
 800625e:	2300      	movs	r3, #0
 8006260:	e000      	b.n	8006264 <HAL_DMA_Init+0x4b4>
 8006262:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	68d2      	ldr	r2, [r2, #12]
 8006268:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800626a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006272:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	695b      	ldr	r3, [r3, #20]
 8006278:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800627a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006282:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	69db      	ldr	r3, [r3, #28]
 8006288:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800628a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a1b      	ldr	r3, [r3, #32]
 8006290:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006292:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	4313      	orrs	r3, r2
 8006298:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	461a      	mov	r2, r3
 80062a8:	4b55      	ldr	r3, [pc, #340]	@ (8006400 <HAL_DMA_Init+0x650>)
 80062aa:	4413      	add	r3, r2
 80062ac:	4a55      	ldr	r2, [pc, #340]	@ (8006404 <HAL_DMA_Init+0x654>)
 80062ae:	fba2 2303 	umull	r2, r3, r2, r3
 80062b2:	091b      	lsrs	r3, r3, #4
 80062b4:	009a      	lsls	r2, r3, #2
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f002 fa26 	bl	800870c <DMA_CalcBaseAndBitshift>
 80062c0:	4603      	mov	r3, r0
 80062c2:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062c8:	f003 031f 	and.w	r3, r3, #31
 80062cc:	2201      	movs	r2, #1
 80062ce:	409a      	lsls	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	605a      	str	r2, [r3, #4]
 80062d4:	e008      	b.n	80062e8 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2240      	movs	r2, #64	@ 0x40
 80062da:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2203      	movs	r2, #3
 80062e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e0ed      	b.n	80064c4 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a46      	ldr	r2, [pc, #280]	@ (8006408 <HAL_DMA_Init+0x658>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d072      	beq.n	80063d8 <HAL_DMA_Init+0x628>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a45      	ldr	r2, [pc, #276]	@ (800640c <HAL_DMA_Init+0x65c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d06d      	beq.n	80063d8 <HAL_DMA_Init+0x628>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a43      	ldr	r2, [pc, #268]	@ (8006410 <HAL_DMA_Init+0x660>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d068      	beq.n	80063d8 <HAL_DMA_Init+0x628>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a42      	ldr	r2, [pc, #264]	@ (8006414 <HAL_DMA_Init+0x664>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d063      	beq.n	80063d8 <HAL_DMA_Init+0x628>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a40      	ldr	r2, [pc, #256]	@ (8006418 <HAL_DMA_Init+0x668>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d05e      	beq.n	80063d8 <HAL_DMA_Init+0x628>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a3f      	ldr	r2, [pc, #252]	@ (800641c <HAL_DMA_Init+0x66c>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d059      	beq.n	80063d8 <HAL_DMA_Init+0x628>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a3d      	ldr	r2, [pc, #244]	@ (8006420 <HAL_DMA_Init+0x670>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d054      	beq.n	80063d8 <HAL_DMA_Init+0x628>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a3c      	ldr	r2, [pc, #240]	@ (8006424 <HAL_DMA_Init+0x674>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d04f      	beq.n	80063d8 <HAL_DMA_Init+0x628>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a3a      	ldr	r2, [pc, #232]	@ (8006428 <HAL_DMA_Init+0x678>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d04a      	beq.n	80063d8 <HAL_DMA_Init+0x628>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a39      	ldr	r2, [pc, #228]	@ (800642c <HAL_DMA_Init+0x67c>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d045      	beq.n	80063d8 <HAL_DMA_Init+0x628>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a37      	ldr	r2, [pc, #220]	@ (8006430 <HAL_DMA_Init+0x680>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d040      	beq.n	80063d8 <HAL_DMA_Init+0x628>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a36      	ldr	r2, [pc, #216]	@ (8006434 <HAL_DMA_Init+0x684>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d03b      	beq.n	80063d8 <HAL_DMA_Init+0x628>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a34      	ldr	r2, [pc, #208]	@ (8006438 <HAL_DMA_Init+0x688>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d036      	beq.n	80063d8 <HAL_DMA_Init+0x628>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a33      	ldr	r2, [pc, #204]	@ (800643c <HAL_DMA_Init+0x68c>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d031      	beq.n	80063d8 <HAL_DMA_Init+0x628>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a31      	ldr	r2, [pc, #196]	@ (8006440 <HAL_DMA_Init+0x690>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d02c      	beq.n	80063d8 <HAL_DMA_Init+0x628>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a30      	ldr	r2, [pc, #192]	@ (8006444 <HAL_DMA_Init+0x694>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d027      	beq.n	80063d8 <HAL_DMA_Init+0x628>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a13      	ldr	r2, [pc, #76]	@ (80063dc <HAL_DMA_Init+0x62c>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d022      	beq.n	80063d8 <HAL_DMA_Init+0x628>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a12      	ldr	r2, [pc, #72]	@ (80063e0 <HAL_DMA_Init+0x630>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d01d      	beq.n	80063d8 <HAL_DMA_Init+0x628>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a10      	ldr	r2, [pc, #64]	@ (80063e4 <HAL_DMA_Init+0x634>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d018      	beq.n	80063d8 <HAL_DMA_Init+0x628>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a0f      	ldr	r2, [pc, #60]	@ (80063e8 <HAL_DMA_Init+0x638>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d013      	beq.n	80063d8 <HAL_DMA_Init+0x628>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a0d      	ldr	r2, [pc, #52]	@ (80063ec <HAL_DMA_Init+0x63c>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d00e      	beq.n	80063d8 <HAL_DMA_Init+0x628>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a0c      	ldr	r2, [pc, #48]	@ (80063f0 <HAL_DMA_Init+0x640>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d009      	beq.n	80063d8 <HAL_DMA_Init+0x628>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a0a      	ldr	r2, [pc, #40]	@ (80063f4 <HAL_DMA_Init+0x644>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d004      	beq.n	80063d8 <HAL_DMA_Init+0x628>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a09      	ldr	r2, [pc, #36]	@ (80063f8 <HAL_DMA_Init+0x648>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d137      	bne.n	8006448 <HAL_DMA_Init+0x698>
 80063d8:	2301      	movs	r3, #1
 80063da:	e036      	b.n	800644a <HAL_DMA_Init+0x69a>
 80063dc:	58025408 	.word	0x58025408
 80063e0:	5802541c 	.word	0x5802541c
 80063e4:	58025430 	.word	0x58025430
 80063e8:	58025444 	.word	0x58025444
 80063ec:	58025458 	.word	0x58025458
 80063f0:	5802546c 	.word	0x5802546c
 80063f4:	58025480 	.word	0x58025480
 80063f8:	58025494 	.word	0x58025494
 80063fc:	fffe000f 	.word	0xfffe000f
 8006400:	a7fdabf8 	.word	0xa7fdabf8
 8006404:	cccccccd 	.word	0xcccccccd
 8006408:	40020010 	.word	0x40020010
 800640c:	40020028 	.word	0x40020028
 8006410:	40020040 	.word	0x40020040
 8006414:	40020058 	.word	0x40020058
 8006418:	40020070 	.word	0x40020070
 800641c:	40020088 	.word	0x40020088
 8006420:	400200a0 	.word	0x400200a0
 8006424:	400200b8 	.word	0x400200b8
 8006428:	40020410 	.word	0x40020410
 800642c:	40020428 	.word	0x40020428
 8006430:	40020440 	.word	0x40020440
 8006434:	40020458 	.word	0x40020458
 8006438:	40020470 	.word	0x40020470
 800643c:	40020488 	.word	0x40020488
 8006440:	400204a0 	.word	0x400204a0
 8006444:	400204b8 	.word	0x400204b8
 8006448:	2300      	movs	r3, #0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d032      	beq.n	80064b4 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f002 fa8a 	bl	8008968 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	2b80      	cmp	r3, #128	@ 0x80
 800645a:	d102      	bne.n	8006462 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	685a      	ldr	r2, [r3, #4]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800646a:	b2d2      	uxtb	r2, r2
 800646c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006476:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d010      	beq.n	80064a2 <HAL_DMA_Init+0x6f2>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	2b08      	cmp	r3, #8
 8006486:	d80c      	bhi.n	80064a2 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f002 fb07 	bl	8008a9c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006492:	2200      	movs	r2, #0
 8006494:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800649e:	605a      	str	r2, [r3, #4]
 80064a0:	e008      	b.n	80064b4 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3718      	adds	r7, #24
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b086      	sub	sp, #24
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]
 80064d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064da:	2300      	movs	r3, #0
 80064dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d101      	bne.n	80064e8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e226      	b.n	8006936 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d101      	bne.n	80064f6 <HAL_DMA_Start_IT+0x2a>
 80064f2:	2302      	movs	r3, #2
 80064f4:	e21f      	b.n	8006936 <HAL_DMA_Start_IT+0x46a>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b01      	cmp	r3, #1
 8006508:	f040 820a 	bne.w	8006920 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2202      	movs	r2, #2
 8006510:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a68      	ldr	r2, [pc, #416]	@ (80066c0 <HAL_DMA_Start_IT+0x1f4>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d04a      	beq.n	80065ba <HAL_DMA_Start_IT+0xee>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a66      	ldr	r2, [pc, #408]	@ (80066c4 <HAL_DMA_Start_IT+0x1f8>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d045      	beq.n	80065ba <HAL_DMA_Start_IT+0xee>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a65      	ldr	r2, [pc, #404]	@ (80066c8 <HAL_DMA_Start_IT+0x1fc>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d040      	beq.n	80065ba <HAL_DMA_Start_IT+0xee>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a63      	ldr	r2, [pc, #396]	@ (80066cc <HAL_DMA_Start_IT+0x200>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d03b      	beq.n	80065ba <HAL_DMA_Start_IT+0xee>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a62      	ldr	r2, [pc, #392]	@ (80066d0 <HAL_DMA_Start_IT+0x204>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d036      	beq.n	80065ba <HAL_DMA_Start_IT+0xee>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a60      	ldr	r2, [pc, #384]	@ (80066d4 <HAL_DMA_Start_IT+0x208>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d031      	beq.n	80065ba <HAL_DMA_Start_IT+0xee>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a5f      	ldr	r2, [pc, #380]	@ (80066d8 <HAL_DMA_Start_IT+0x20c>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d02c      	beq.n	80065ba <HAL_DMA_Start_IT+0xee>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a5d      	ldr	r2, [pc, #372]	@ (80066dc <HAL_DMA_Start_IT+0x210>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d027      	beq.n	80065ba <HAL_DMA_Start_IT+0xee>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a5c      	ldr	r2, [pc, #368]	@ (80066e0 <HAL_DMA_Start_IT+0x214>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d022      	beq.n	80065ba <HAL_DMA_Start_IT+0xee>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a5a      	ldr	r2, [pc, #360]	@ (80066e4 <HAL_DMA_Start_IT+0x218>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d01d      	beq.n	80065ba <HAL_DMA_Start_IT+0xee>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a59      	ldr	r2, [pc, #356]	@ (80066e8 <HAL_DMA_Start_IT+0x21c>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d018      	beq.n	80065ba <HAL_DMA_Start_IT+0xee>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a57      	ldr	r2, [pc, #348]	@ (80066ec <HAL_DMA_Start_IT+0x220>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d013      	beq.n	80065ba <HAL_DMA_Start_IT+0xee>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a56      	ldr	r2, [pc, #344]	@ (80066f0 <HAL_DMA_Start_IT+0x224>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d00e      	beq.n	80065ba <HAL_DMA_Start_IT+0xee>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a54      	ldr	r2, [pc, #336]	@ (80066f4 <HAL_DMA_Start_IT+0x228>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d009      	beq.n	80065ba <HAL_DMA_Start_IT+0xee>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a53      	ldr	r2, [pc, #332]	@ (80066f8 <HAL_DMA_Start_IT+0x22c>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d004      	beq.n	80065ba <HAL_DMA_Start_IT+0xee>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a51      	ldr	r2, [pc, #324]	@ (80066fc <HAL_DMA_Start_IT+0x230>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d108      	bne.n	80065cc <HAL_DMA_Start_IT+0x100>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f022 0201 	bic.w	r2, r2, #1
 80065c8:	601a      	str	r2, [r3, #0]
 80065ca:	e007      	b.n	80065dc <HAL_DMA_Start_IT+0x110>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f022 0201 	bic.w	r2, r2, #1
 80065da:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	68b9      	ldr	r1, [r7, #8]
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f001 feae 	bl	8008344 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a34      	ldr	r2, [pc, #208]	@ (80066c0 <HAL_DMA_Start_IT+0x1f4>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d04a      	beq.n	8006688 <HAL_DMA_Start_IT+0x1bc>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a33      	ldr	r2, [pc, #204]	@ (80066c4 <HAL_DMA_Start_IT+0x1f8>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d045      	beq.n	8006688 <HAL_DMA_Start_IT+0x1bc>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a31      	ldr	r2, [pc, #196]	@ (80066c8 <HAL_DMA_Start_IT+0x1fc>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d040      	beq.n	8006688 <HAL_DMA_Start_IT+0x1bc>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a30      	ldr	r2, [pc, #192]	@ (80066cc <HAL_DMA_Start_IT+0x200>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d03b      	beq.n	8006688 <HAL_DMA_Start_IT+0x1bc>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a2e      	ldr	r2, [pc, #184]	@ (80066d0 <HAL_DMA_Start_IT+0x204>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d036      	beq.n	8006688 <HAL_DMA_Start_IT+0x1bc>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a2d      	ldr	r2, [pc, #180]	@ (80066d4 <HAL_DMA_Start_IT+0x208>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d031      	beq.n	8006688 <HAL_DMA_Start_IT+0x1bc>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a2b      	ldr	r2, [pc, #172]	@ (80066d8 <HAL_DMA_Start_IT+0x20c>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d02c      	beq.n	8006688 <HAL_DMA_Start_IT+0x1bc>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a2a      	ldr	r2, [pc, #168]	@ (80066dc <HAL_DMA_Start_IT+0x210>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d027      	beq.n	8006688 <HAL_DMA_Start_IT+0x1bc>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a28      	ldr	r2, [pc, #160]	@ (80066e0 <HAL_DMA_Start_IT+0x214>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d022      	beq.n	8006688 <HAL_DMA_Start_IT+0x1bc>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a27      	ldr	r2, [pc, #156]	@ (80066e4 <HAL_DMA_Start_IT+0x218>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d01d      	beq.n	8006688 <HAL_DMA_Start_IT+0x1bc>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a25      	ldr	r2, [pc, #148]	@ (80066e8 <HAL_DMA_Start_IT+0x21c>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d018      	beq.n	8006688 <HAL_DMA_Start_IT+0x1bc>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a24      	ldr	r2, [pc, #144]	@ (80066ec <HAL_DMA_Start_IT+0x220>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d013      	beq.n	8006688 <HAL_DMA_Start_IT+0x1bc>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a22      	ldr	r2, [pc, #136]	@ (80066f0 <HAL_DMA_Start_IT+0x224>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d00e      	beq.n	8006688 <HAL_DMA_Start_IT+0x1bc>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a21      	ldr	r2, [pc, #132]	@ (80066f4 <HAL_DMA_Start_IT+0x228>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d009      	beq.n	8006688 <HAL_DMA_Start_IT+0x1bc>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a1f      	ldr	r2, [pc, #124]	@ (80066f8 <HAL_DMA_Start_IT+0x22c>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d004      	beq.n	8006688 <HAL_DMA_Start_IT+0x1bc>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a1e      	ldr	r2, [pc, #120]	@ (80066fc <HAL_DMA_Start_IT+0x230>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d101      	bne.n	800668c <HAL_DMA_Start_IT+0x1c0>
 8006688:	2301      	movs	r3, #1
 800668a:	e000      	b.n	800668e <HAL_DMA_Start_IT+0x1c2>
 800668c:	2300      	movs	r3, #0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d036      	beq.n	8006700 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f023 021e 	bic.w	r2, r3, #30
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f042 0216 	orr.w	r2, r2, #22
 80066a4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d03e      	beq.n	800672c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f042 0208 	orr.w	r2, r2, #8
 80066bc:	601a      	str	r2, [r3, #0]
 80066be:	e035      	b.n	800672c <HAL_DMA_Start_IT+0x260>
 80066c0:	40020010 	.word	0x40020010
 80066c4:	40020028 	.word	0x40020028
 80066c8:	40020040 	.word	0x40020040
 80066cc:	40020058 	.word	0x40020058
 80066d0:	40020070 	.word	0x40020070
 80066d4:	40020088 	.word	0x40020088
 80066d8:	400200a0 	.word	0x400200a0
 80066dc:	400200b8 	.word	0x400200b8
 80066e0:	40020410 	.word	0x40020410
 80066e4:	40020428 	.word	0x40020428
 80066e8:	40020440 	.word	0x40020440
 80066ec:	40020458 	.word	0x40020458
 80066f0:	40020470 	.word	0x40020470
 80066f4:	40020488 	.word	0x40020488
 80066f8:	400204a0 	.word	0x400204a0
 80066fc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f023 020e 	bic.w	r2, r3, #14
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f042 020a 	orr.w	r2, r2, #10
 8006712:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006718:	2b00      	cmp	r3, #0
 800671a:	d007      	beq.n	800672c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f042 0204 	orr.w	r2, r2, #4
 800672a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a83      	ldr	r2, [pc, #524]	@ (8006940 <HAL_DMA_Start_IT+0x474>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d072      	beq.n	800681c <HAL_DMA_Start_IT+0x350>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a82      	ldr	r2, [pc, #520]	@ (8006944 <HAL_DMA_Start_IT+0x478>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d06d      	beq.n	800681c <HAL_DMA_Start_IT+0x350>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a80      	ldr	r2, [pc, #512]	@ (8006948 <HAL_DMA_Start_IT+0x47c>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d068      	beq.n	800681c <HAL_DMA_Start_IT+0x350>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a7f      	ldr	r2, [pc, #508]	@ (800694c <HAL_DMA_Start_IT+0x480>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d063      	beq.n	800681c <HAL_DMA_Start_IT+0x350>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a7d      	ldr	r2, [pc, #500]	@ (8006950 <HAL_DMA_Start_IT+0x484>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d05e      	beq.n	800681c <HAL_DMA_Start_IT+0x350>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a7c      	ldr	r2, [pc, #496]	@ (8006954 <HAL_DMA_Start_IT+0x488>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d059      	beq.n	800681c <HAL_DMA_Start_IT+0x350>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a7a      	ldr	r2, [pc, #488]	@ (8006958 <HAL_DMA_Start_IT+0x48c>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d054      	beq.n	800681c <HAL_DMA_Start_IT+0x350>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a79      	ldr	r2, [pc, #484]	@ (800695c <HAL_DMA_Start_IT+0x490>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d04f      	beq.n	800681c <HAL_DMA_Start_IT+0x350>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a77      	ldr	r2, [pc, #476]	@ (8006960 <HAL_DMA_Start_IT+0x494>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d04a      	beq.n	800681c <HAL_DMA_Start_IT+0x350>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a76      	ldr	r2, [pc, #472]	@ (8006964 <HAL_DMA_Start_IT+0x498>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d045      	beq.n	800681c <HAL_DMA_Start_IT+0x350>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a74      	ldr	r2, [pc, #464]	@ (8006968 <HAL_DMA_Start_IT+0x49c>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d040      	beq.n	800681c <HAL_DMA_Start_IT+0x350>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a73      	ldr	r2, [pc, #460]	@ (800696c <HAL_DMA_Start_IT+0x4a0>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d03b      	beq.n	800681c <HAL_DMA_Start_IT+0x350>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a71      	ldr	r2, [pc, #452]	@ (8006970 <HAL_DMA_Start_IT+0x4a4>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d036      	beq.n	800681c <HAL_DMA_Start_IT+0x350>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a70      	ldr	r2, [pc, #448]	@ (8006974 <HAL_DMA_Start_IT+0x4a8>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d031      	beq.n	800681c <HAL_DMA_Start_IT+0x350>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a6e      	ldr	r2, [pc, #440]	@ (8006978 <HAL_DMA_Start_IT+0x4ac>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d02c      	beq.n	800681c <HAL_DMA_Start_IT+0x350>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a6d      	ldr	r2, [pc, #436]	@ (800697c <HAL_DMA_Start_IT+0x4b0>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d027      	beq.n	800681c <HAL_DMA_Start_IT+0x350>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a6b      	ldr	r2, [pc, #428]	@ (8006980 <HAL_DMA_Start_IT+0x4b4>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d022      	beq.n	800681c <HAL_DMA_Start_IT+0x350>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a6a      	ldr	r2, [pc, #424]	@ (8006984 <HAL_DMA_Start_IT+0x4b8>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d01d      	beq.n	800681c <HAL_DMA_Start_IT+0x350>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a68      	ldr	r2, [pc, #416]	@ (8006988 <HAL_DMA_Start_IT+0x4bc>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d018      	beq.n	800681c <HAL_DMA_Start_IT+0x350>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a67      	ldr	r2, [pc, #412]	@ (800698c <HAL_DMA_Start_IT+0x4c0>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d013      	beq.n	800681c <HAL_DMA_Start_IT+0x350>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a65      	ldr	r2, [pc, #404]	@ (8006990 <HAL_DMA_Start_IT+0x4c4>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d00e      	beq.n	800681c <HAL_DMA_Start_IT+0x350>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a64      	ldr	r2, [pc, #400]	@ (8006994 <HAL_DMA_Start_IT+0x4c8>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d009      	beq.n	800681c <HAL_DMA_Start_IT+0x350>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a62      	ldr	r2, [pc, #392]	@ (8006998 <HAL_DMA_Start_IT+0x4cc>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d004      	beq.n	800681c <HAL_DMA_Start_IT+0x350>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a61      	ldr	r2, [pc, #388]	@ (800699c <HAL_DMA_Start_IT+0x4d0>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d101      	bne.n	8006820 <HAL_DMA_Start_IT+0x354>
 800681c:	2301      	movs	r3, #1
 800681e:	e000      	b.n	8006822 <HAL_DMA_Start_IT+0x356>
 8006820:	2300      	movs	r3, #0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d01a      	beq.n	800685c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d007      	beq.n	8006844 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800683e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006842:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006848:	2b00      	cmp	r3, #0
 800684a:	d007      	beq.n	800685c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006856:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800685a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a37      	ldr	r2, [pc, #220]	@ (8006940 <HAL_DMA_Start_IT+0x474>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d04a      	beq.n	80068fc <HAL_DMA_Start_IT+0x430>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a36      	ldr	r2, [pc, #216]	@ (8006944 <HAL_DMA_Start_IT+0x478>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d045      	beq.n	80068fc <HAL_DMA_Start_IT+0x430>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a34      	ldr	r2, [pc, #208]	@ (8006948 <HAL_DMA_Start_IT+0x47c>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d040      	beq.n	80068fc <HAL_DMA_Start_IT+0x430>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a33      	ldr	r2, [pc, #204]	@ (800694c <HAL_DMA_Start_IT+0x480>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d03b      	beq.n	80068fc <HAL_DMA_Start_IT+0x430>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a31      	ldr	r2, [pc, #196]	@ (8006950 <HAL_DMA_Start_IT+0x484>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d036      	beq.n	80068fc <HAL_DMA_Start_IT+0x430>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a30      	ldr	r2, [pc, #192]	@ (8006954 <HAL_DMA_Start_IT+0x488>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d031      	beq.n	80068fc <HAL_DMA_Start_IT+0x430>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a2e      	ldr	r2, [pc, #184]	@ (8006958 <HAL_DMA_Start_IT+0x48c>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d02c      	beq.n	80068fc <HAL_DMA_Start_IT+0x430>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a2d      	ldr	r2, [pc, #180]	@ (800695c <HAL_DMA_Start_IT+0x490>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d027      	beq.n	80068fc <HAL_DMA_Start_IT+0x430>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a2b      	ldr	r2, [pc, #172]	@ (8006960 <HAL_DMA_Start_IT+0x494>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d022      	beq.n	80068fc <HAL_DMA_Start_IT+0x430>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a2a      	ldr	r2, [pc, #168]	@ (8006964 <HAL_DMA_Start_IT+0x498>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d01d      	beq.n	80068fc <HAL_DMA_Start_IT+0x430>
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a28      	ldr	r2, [pc, #160]	@ (8006968 <HAL_DMA_Start_IT+0x49c>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d018      	beq.n	80068fc <HAL_DMA_Start_IT+0x430>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a27      	ldr	r2, [pc, #156]	@ (800696c <HAL_DMA_Start_IT+0x4a0>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d013      	beq.n	80068fc <HAL_DMA_Start_IT+0x430>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a25      	ldr	r2, [pc, #148]	@ (8006970 <HAL_DMA_Start_IT+0x4a4>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d00e      	beq.n	80068fc <HAL_DMA_Start_IT+0x430>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a24      	ldr	r2, [pc, #144]	@ (8006974 <HAL_DMA_Start_IT+0x4a8>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d009      	beq.n	80068fc <HAL_DMA_Start_IT+0x430>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a22      	ldr	r2, [pc, #136]	@ (8006978 <HAL_DMA_Start_IT+0x4ac>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d004      	beq.n	80068fc <HAL_DMA_Start_IT+0x430>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a21      	ldr	r2, [pc, #132]	@ (800697c <HAL_DMA_Start_IT+0x4b0>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d108      	bne.n	800690e <HAL_DMA_Start_IT+0x442>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f042 0201 	orr.w	r2, r2, #1
 800690a:	601a      	str	r2, [r3, #0]
 800690c:	e012      	b.n	8006934 <HAL_DMA_Start_IT+0x468>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f042 0201 	orr.w	r2, r2, #1
 800691c:	601a      	str	r2, [r3, #0]
 800691e:	e009      	b.n	8006934 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006926:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006934:	7dfb      	ldrb	r3, [r7, #23]
}
 8006936:	4618      	mov	r0, r3
 8006938:	3718      	adds	r7, #24
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	40020010 	.word	0x40020010
 8006944:	40020028 	.word	0x40020028
 8006948:	40020040 	.word	0x40020040
 800694c:	40020058 	.word	0x40020058
 8006950:	40020070 	.word	0x40020070
 8006954:	40020088 	.word	0x40020088
 8006958:	400200a0 	.word	0x400200a0
 800695c:	400200b8 	.word	0x400200b8
 8006960:	40020410 	.word	0x40020410
 8006964:	40020428 	.word	0x40020428
 8006968:	40020440 	.word	0x40020440
 800696c:	40020458 	.word	0x40020458
 8006970:	40020470 	.word	0x40020470
 8006974:	40020488 	.word	0x40020488
 8006978:	400204a0 	.word	0x400204a0
 800697c:	400204b8 	.word	0x400204b8
 8006980:	58025408 	.word	0x58025408
 8006984:	5802541c 	.word	0x5802541c
 8006988:	58025430 	.word	0x58025430
 800698c:	58025444 	.word	0x58025444
 8006990:	58025458 	.word	0x58025458
 8006994:	5802546c 	.word	0x5802546c
 8006998:	58025480 	.word	0x58025480
 800699c:	58025494 	.word	0x58025494

080069a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80069a8:	f7ff f87a 	bl	8005aa0 <HAL_GetTick>
 80069ac:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d101      	bne.n	80069b8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e2dc      	b.n	8006f72 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d008      	beq.n	80069d6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2280      	movs	r2, #128	@ 0x80
 80069c8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e2cd      	b.n	8006f72 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a76      	ldr	r2, [pc, #472]	@ (8006bb4 <HAL_DMA_Abort+0x214>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d04a      	beq.n	8006a76 <HAL_DMA_Abort+0xd6>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a74      	ldr	r2, [pc, #464]	@ (8006bb8 <HAL_DMA_Abort+0x218>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d045      	beq.n	8006a76 <HAL_DMA_Abort+0xd6>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a73      	ldr	r2, [pc, #460]	@ (8006bbc <HAL_DMA_Abort+0x21c>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d040      	beq.n	8006a76 <HAL_DMA_Abort+0xd6>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a71      	ldr	r2, [pc, #452]	@ (8006bc0 <HAL_DMA_Abort+0x220>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d03b      	beq.n	8006a76 <HAL_DMA_Abort+0xd6>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a70      	ldr	r2, [pc, #448]	@ (8006bc4 <HAL_DMA_Abort+0x224>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d036      	beq.n	8006a76 <HAL_DMA_Abort+0xd6>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a6e      	ldr	r2, [pc, #440]	@ (8006bc8 <HAL_DMA_Abort+0x228>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d031      	beq.n	8006a76 <HAL_DMA_Abort+0xd6>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a6d      	ldr	r2, [pc, #436]	@ (8006bcc <HAL_DMA_Abort+0x22c>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d02c      	beq.n	8006a76 <HAL_DMA_Abort+0xd6>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a6b      	ldr	r2, [pc, #428]	@ (8006bd0 <HAL_DMA_Abort+0x230>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d027      	beq.n	8006a76 <HAL_DMA_Abort+0xd6>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a6a      	ldr	r2, [pc, #424]	@ (8006bd4 <HAL_DMA_Abort+0x234>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d022      	beq.n	8006a76 <HAL_DMA_Abort+0xd6>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a68      	ldr	r2, [pc, #416]	@ (8006bd8 <HAL_DMA_Abort+0x238>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d01d      	beq.n	8006a76 <HAL_DMA_Abort+0xd6>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a67      	ldr	r2, [pc, #412]	@ (8006bdc <HAL_DMA_Abort+0x23c>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d018      	beq.n	8006a76 <HAL_DMA_Abort+0xd6>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a65      	ldr	r2, [pc, #404]	@ (8006be0 <HAL_DMA_Abort+0x240>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d013      	beq.n	8006a76 <HAL_DMA_Abort+0xd6>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a64      	ldr	r2, [pc, #400]	@ (8006be4 <HAL_DMA_Abort+0x244>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d00e      	beq.n	8006a76 <HAL_DMA_Abort+0xd6>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a62      	ldr	r2, [pc, #392]	@ (8006be8 <HAL_DMA_Abort+0x248>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d009      	beq.n	8006a76 <HAL_DMA_Abort+0xd6>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a61      	ldr	r2, [pc, #388]	@ (8006bec <HAL_DMA_Abort+0x24c>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d004      	beq.n	8006a76 <HAL_DMA_Abort+0xd6>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a5f      	ldr	r2, [pc, #380]	@ (8006bf0 <HAL_DMA_Abort+0x250>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d101      	bne.n	8006a7a <HAL_DMA_Abort+0xda>
 8006a76:	2301      	movs	r3, #1
 8006a78:	e000      	b.n	8006a7c <HAL_DMA_Abort+0xdc>
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d013      	beq.n	8006aa8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f022 021e 	bic.w	r2, r2, #30
 8006a8e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	695a      	ldr	r2, [r3, #20]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a9e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	617b      	str	r3, [r7, #20]
 8006aa6:	e00a      	b.n	8006abe <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f022 020e 	bic.w	r2, r2, #14
 8006ab6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a3c      	ldr	r2, [pc, #240]	@ (8006bb4 <HAL_DMA_Abort+0x214>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d072      	beq.n	8006bae <HAL_DMA_Abort+0x20e>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a3a      	ldr	r2, [pc, #232]	@ (8006bb8 <HAL_DMA_Abort+0x218>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d06d      	beq.n	8006bae <HAL_DMA_Abort+0x20e>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a39      	ldr	r2, [pc, #228]	@ (8006bbc <HAL_DMA_Abort+0x21c>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d068      	beq.n	8006bae <HAL_DMA_Abort+0x20e>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a37      	ldr	r2, [pc, #220]	@ (8006bc0 <HAL_DMA_Abort+0x220>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d063      	beq.n	8006bae <HAL_DMA_Abort+0x20e>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a36      	ldr	r2, [pc, #216]	@ (8006bc4 <HAL_DMA_Abort+0x224>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d05e      	beq.n	8006bae <HAL_DMA_Abort+0x20e>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a34      	ldr	r2, [pc, #208]	@ (8006bc8 <HAL_DMA_Abort+0x228>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d059      	beq.n	8006bae <HAL_DMA_Abort+0x20e>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a33      	ldr	r2, [pc, #204]	@ (8006bcc <HAL_DMA_Abort+0x22c>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d054      	beq.n	8006bae <HAL_DMA_Abort+0x20e>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a31      	ldr	r2, [pc, #196]	@ (8006bd0 <HAL_DMA_Abort+0x230>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d04f      	beq.n	8006bae <HAL_DMA_Abort+0x20e>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a30      	ldr	r2, [pc, #192]	@ (8006bd4 <HAL_DMA_Abort+0x234>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d04a      	beq.n	8006bae <HAL_DMA_Abort+0x20e>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a2e      	ldr	r2, [pc, #184]	@ (8006bd8 <HAL_DMA_Abort+0x238>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d045      	beq.n	8006bae <HAL_DMA_Abort+0x20e>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a2d      	ldr	r2, [pc, #180]	@ (8006bdc <HAL_DMA_Abort+0x23c>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d040      	beq.n	8006bae <HAL_DMA_Abort+0x20e>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a2b      	ldr	r2, [pc, #172]	@ (8006be0 <HAL_DMA_Abort+0x240>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d03b      	beq.n	8006bae <HAL_DMA_Abort+0x20e>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a2a      	ldr	r2, [pc, #168]	@ (8006be4 <HAL_DMA_Abort+0x244>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d036      	beq.n	8006bae <HAL_DMA_Abort+0x20e>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a28      	ldr	r2, [pc, #160]	@ (8006be8 <HAL_DMA_Abort+0x248>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d031      	beq.n	8006bae <HAL_DMA_Abort+0x20e>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a27      	ldr	r2, [pc, #156]	@ (8006bec <HAL_DMA_Abort+0x24c>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d02c      	beq.n	8006bae <HAL_DMA_Abort+0x20e>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a25      	ldr	r2, [pc, #148]	@ (8006bf0 <HAL_DMA_Abort+0x250>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d027      	beq.n	8006bae <HAL_DMA_Abort+0x20e>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a24      	ldr	r2, [pc, #144]	@ (8006bf4 <HAL_DMA_Abort+0x254>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d022      	beq.n	8006bae <HAL_DMA_Abort+0x20e>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a22      	ldr	r2, [pc, #136]	@ (8006bf8 <HAL_DMA_Abort+0x258>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d01d      	beq.n	8006bae <HAL_DMA_Abort+0x20e>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a21      	ldr	r2, [pc, #132]	@ (8006bfc <HAL_DMA_Abort+0x25c>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d018      	beq.n	8006bae <HAL_DMA_Abort+0x20e>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a1f      	ldr	r2, [pc, #124]	@ (8006c00 <HAL_DMA_Abort+0x260>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d013      	beq.n	8006bae <HAL_DMA_Abort+0x20e>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a1e      	ldr	r2, [pc, #120]	@ (8006c04 <HAL_DMA_Abort+0x264>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d00e      	beq.n	8006bae <HAL_DMA_Abort+0x20e>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a1c      	ldr	r2, [pc, #112]	@ (8006c08 <HAL_DMA_Abort+0x268>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d009      	beq.n	8006bae <HAL_DMA_Abort+0x20e>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a1b      	ldr	r2, [pc, #108]	@ (8006c0c <HAL_DMA_Abort+0x26c>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d004      	beq.n	8006bae <HAL_DMA_Abort+0x20e>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a19      	ldr	r2, [pc, #100]	@ (8006c10 <HAL_DMA_Abort+0x270>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d132      	bne.n	8006c14 <HAL_DMA_Abort+0x274>
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e031      	b.n	8006c16 <HAL_DMA_Abort+0x276>
 8006bb2:	bf00      	nop
 8006bb4:	40020010 	.word	0x40020010
 8006bb8:	40020028 	.word	0x40020028
 8006bbc:	40020040 	.word	0x40020040
 8006bc0:	40020058 	.word	0x40020058
 8006bc4:	40020070 	.word	0x40020070
 8006bc8:	40020088 	.word	0x40020088
 8006bcc:	400200a0 	.word	0x400200a0
 8006bd0:	400200b8 	.word	0x400200b8
 8006bd4:	40020410 	.word	0x40020410
 8006bd8:	40020428 	.word	0x40020428
 8006bdc:	40020440 	.word	0x40020440
 8006be0:	40020458 	.word	0x40020458
 8006be4:	40020470 	.word	0x40020470
 8006be8:	40020488 	.word	0x40020488
 8006bec:	400204a0 	.word	0x400204a0
 8006bf0:	400204b8 	.word	0x400204b8
 8006bf4:	58025408 	.word	0x58025408
 8006bf8:	5802541c 	.word	0x5802541c
 8006bfc:	58025430 	.word	0x58025430
 8006c00:	58025444 	.word	0x58025444
 8006c04:	58025458 	.word	0x58025458
 8006c08:	5802546c 	.word	0x5802546c
 8006c0c:	58025480 	.word	0x58025480
 8006c10:	58025494 	.word	0x58025494
 8006c14:	2300      	movs	r3, #0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d007      	beq.n	8006c2a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006c28:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a6d      	ldr	r2, [pc, #436]	@ (8006de4 <HAL_DMA_Abort+0x444>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d04a      	beq.n	8006cca <HAL_DMA_Abort+0x32a>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a6b      	ldr	r2, [pc, #428]	@ (8006de8 <HAL_DMA_Abort+0x448>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d045      	beq.n	8006cca <HAL_DMA_Abort+0x32a>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a6a      	ldr	r2, [pc, #424]	@ (8006dec <HAL_DMA_Abort+0x44c>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d040      	beq.n	8006cca <HAL_DMA_Abort+0x32a>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a68      	ldr	r2, [pc, #416]	@ (8006df0 <HAL_DMA_Abort+0x450>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d03b      	beq.n	8006cca <HAL_DMA_Abort+0x32a>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a67      	ldr	r2, [pc, #412]	@ (8006df4 <HAL_DMA_Abort+0x454>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d036      	beq.n	8006cca <HAL_DMA_Abort+0x32a>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a65      	ldr	r2, [pc, #404]	@ (8006df8 <HAL_DMA_Abort+0x458>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d031      	beq.n	8006cca <HAL_DMA_Abort+0x32a>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a64      	ldr	r2, [pc, #400]	@ (8006dfc <HAL_DMA_Abort+0x45c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d02c      	beq.n	8006cca <HAL_DMA_Abort+0x32a>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a62      	ldr	r2, [pc, #392]	@ (8006e00 <HAL_DMA_Abort+0x460>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d027      	beq.n	8006cca <HAL_DMA_Abort+0x32a>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a61      	ldr	r2, [pc, #388]	@ (8006e04 <HAL_DMA_Abort+0x464>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d022      	beq.n	8006cca <HAL_DMA_Abort+0x32a>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a5f      	ldr	r2, [pc, #380]	@ (8006e08 <HAL_DMA_Abort+0x468>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d01d      	beq.n	8006cca <HAL_DMA_Abort+0x32a>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a5e      	ldr	r2, [pc, #376]	@ (8006e0c <HAL_DMA_Abort+0x46c>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d018      	beq.n	8006cca <HAL_DMA_Abort+0x32a>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a5c      	ldr	r2, [pc, #368]	@ (8006e10 <HAL_DMA_Abort+0x470>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d013      	beq.n	8006cca <HAL_DMA_Abort+0x32a>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a5b      	ldr	r2, [pc, #364]	@ (8006e14 <HAL_DMA_Abort+0x474>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d00e      	beq.n	8006cca <HAL_DMA_Abort+0x32a>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a59      	ldr	r2, [pc, #356]	@ (8006e18 <HAL_DMA_Abort+0x478>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d009      	beq.n	8006cca <HAL_DMA_Abort+0x32a>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a58      	ldr	r2, [pc, #352]	@ (8006e1c <HAL_DMA_Abort+0x47c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d004      	beq.n	8006cca <HAL_DMA_Abort+0x32a>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a56      	ldr	r2, [pc, #344]	@ (8006e20 <HAL_DMA_Abort+0x480>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d108      	bne.n	8006cdc <HAL_DMA_Abort+0x33c>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f022 0201 	bic.w	r2, r2, #1
 8006cd8:	601a      	str	r2, [r3, #0]
 8006cda:	e007      	b.n	8006cec <HAL_DMA_Abort+0x34c>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f022 0201 	bic.w	r2, r2, #1
 8006cea:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006cec:	e013      	b.n	8006d16 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006cee:	f7fe fed7 	bl	8005aa0 <HAL_GetTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	2b05      	cmp	r3, #5
 8006cfa:	d90c      	bls.n	8006d16 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2203      	movs	r2, #3
 8006d06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e12d      	b.n	8006f72 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1e5      	bne.n	8006cee <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a2f      	ldr	r2, [pc, #188]	@ (8006de4 <HAL_DMA_Abort+0x444>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d04a      	beq.n	8006dc2 <HAL_DMA_Abort+0x422>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a2d      	ldr	r2, [pc, #180]	@ (8006de8 <HAL_DMA_Abort+0x448>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d045      	beq.n	8006dc2 <HAL_DMA_Abort+0x422>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a2c      	ldr	r2, [pc, #176]	@ (8006dec <HAL_DMA_Abort+0x44c>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d040      	beq.n	8006dc2 <HAL_DMA_Abort+0x422>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a2a      	ldr	r2, [pc, #168]	@ (8006df0 <HAL_DMA_Abort+0x450>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d03b      	beq.n	8006dc2 <HAL_DMA_Abort+0x422>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a29      	ldr	r2, [pc, #164]	@ (8006df4 <HAL_DMA_Abort+0x454>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d036      	beq.n	8006dc2 <HAL_DMA_Abort+0x422>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a27      	ldr	r2, [pc, #156]	@ (8006df8 <HAL_DMA_Abort+0x458>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d031      	beq.n	8006dc2 <HAL_DMA_Abort+0x422>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a26      	ldr	r2, [pc, #152]	@ (8006dfc <HAL_DMA_Abort+0x45c>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d02c      	beq.n	8006dc2 <HAL_DMA_Abort+0x422>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a24      	ldr	r2, [pc, #144]	@ (8006e00 <HAL_DMA_Abort+0x460>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d027      	beq.n	8006dc2 <HAL_DMA_Abort+0x422>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a23      	ldr	r2, [pc, #140]	@ (8006e04 <HAL_DMA_Abort+0x464>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d022      	beq.n	8006dc2 <HAL_DMA_Abort+0x422>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a21      	ldr	r2, [pc, #132]	@ (8006e08 <HAL_DMA_Abort+0x468>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d01d      	beq.n	8006dc2 <HAL_DMA_Abort+0x422>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a20      	ldr	r2, [pc, #128]	@ (8006e0c <HAL_DMA_Abort+0x46c>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d018      	beq.n	8006dc2 <HAL_DMA_Abort+0x422>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a1e      	ldr	r2, [pc, #120]	@ (8006e10 <HAL_DMA_Abort+0x470>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d013      	beq.n	8006dc2 <HAL_DMA_Abort+0x422>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a1d      	ldr	r2, [pc, #116]	@ (8006e14 <HAL_DMA_Abort+0x474>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d00e      	beq.n	8006dc2 <HAL_DMA_Abort+0x422>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a1b      	ldr	r2, [pc, #108]	@ (8006e18 <HAL_DMA_Abort+0x478>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d009      	beq.n	8006dc2 <HAL_DMA_Abort+0x422>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a1a      	ldr	r2, [pc, #104]	@ (8006e1c <HAL_DMA_Abort+0x47c>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d004      	beq.n	8006dc2 <HAL_DMA_Abort+0x422>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a18      	ldr	r2, [pc, #96]	@ (8006e20 <HAL_DMA_Abort+0x480>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d101      	bne.n	8006dc6 <HAL_DMA_Abort+0x426>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e000      	b.n	8006dc8 <HAL_DMA_Abort+0x428>
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d02b      	beq.n	8006e24 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dd0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dd6:	f003 031f 	and.w	r3, r3, #31
 8006dda:	223f      	movs	r2, #63	@ 0x3f
 8006ddc:	409a      	lsls	r2, r3
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	609a      	str	r2, [r3, #8]
 8006de2:	e02a      	b.n	8006e3a <HAL_DMA_Abort+0x49a>
 8006de4:	40020010 	.word	0x40020010
 8006de8:	40020028 	.word	0x40020028
 8006dec:	40020040 	.word	0x40020040
 8006df0:	40020058 	.word	0x40020058
 8006df4:	40020070 	.word	0x40020070
 8006df8:	40020088 	.word	0x40020088
 8006dfc:	400200a0 	.word	0x400200a0
 8006e00:	400200b8 	.word	0x400200b8
 8006e04:	40020410 	.word	0x40020410
 8006e08:	40020428 	.word	0x40020428
 8006e0c:	40020440 	.word	0x40020440
 8006e10:	40020458 	.word	0x40020458
 8006e14:	40020470 	.word	0x40020470
 8006e18:	40020488 	.word	0x40020488
 8006e1c:	400204a0 	.word	0x400204a0
 8006e20:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e28:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e2e:	f003 031f 	and.w	r3, r3, #31
 8006e32:	2201      	movs	r2, #1
 8006e34:	409a      	lsls	r2, r3
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a4f      	ldr	r2, [pc, #316]	@ (8006f7c <HAL_DMA_Abort+0x5dc>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d072      	beq.n	8006f2a <HAL_DMA_Abort+0x58a>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a4d      	ldr	r2, [pc, #308]	@ (8006f80 <HAL_DMA_Abort+0x5e0>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d06d      	beq.n	8006f2a <HAL_DMA_Abort+0x58a>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a4c      	ldr	r2, [pc, #304]	@ (8006f84 <HAL_DMA_Abort+0x5e4>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d068      	beq.n	8006f2a <HAL_DMA_Abort+0x58a>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a4a      	ldr	r2, [pc, #296]	@ (8006f88 <HAL_DMA_Abort+0x5e8>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d063      	beq.n	8006f2a <HAL_DMA_Abort+0x58a>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a49      	ldr	r2, [pc, #292]	@ (8006f8c <HAL_DMA_Abort+0x5ec>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d05e      	beq.n	8006f2a <HAL_DMA_Abort+0x58a>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a47      	ldr	r2, [pc, #284]	@ (8006f90 <HAL_DMA_Abort+0x5f0>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d059      	beq.n	8006f2a <HAL_DMA_Abort+0x58a>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a46      	ldr	r2, [pc, #280]	@ (8006f94 <HAL_DMA_Abort+0x5f4>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d054      	beq.n	8006f2a <HAL_DMA_Abort+0x58a>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a44      	ldr	r2, [pc, #272]	@ (8006f98 <HAL_DMA_Abort+0x5f8>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d04f      	beq.n	8006f2a <HAL_DMA_Abort+0x58a>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a43      	ldr	r2, [pc, #268]	@ (8006f9c <HAL_DMA_Abort+0x5fc>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d04a      	beq.n	8006f2a <HAL_DMA_Abort+0x58a>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a41      	ldr	r2, [pc, #260]	@ (8006fa0 <HAL_DMA_Abort+0x600>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d045      	beq.n	8006f2a <HAL_DMA_Abort+0x58a>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a40      	ldr	r2, [pc, #256]	@ (8006fa4 <HAL_DMA_Abort+0x604>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d040      	beq.n	8006f2a <HAL_DMA_Abort+0x58a>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a3e      	ldr	r2, [pc, #248]	@ (8006fa8 <HAL_DMA_Abort+0x608>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d03b      	beq.n	8006f2a <HAL_DMA_Abort+0x58a>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a3d      	ldr	r2, [pc, #244]	@ (8006fac <HAL_DMA_Abort+0x60c>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d036      	beq.n	8006f2a <HAL_DMA_Abort+0x58a>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a3b      	ldr	r2, [pc, #236]	@ (8006fb0 <HAL_DMA_Abort+0x610>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d031      	beq.n	8006f2a <HAL_DMA_Abort+0x58a>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a3a      	ldr	r2, [pc, #232]	@ (8006fb4 <HAL_DMA_Abort+0x614>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d02c      	beq.n	8006f2a <HAL_DMA_Abort+0x58a>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a38      	ldr	r2, [pc, #224]	@ (8006fb8 <HAL_DMA_Abort+0x618>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d027      	beq.n	8006f2a <HAL_DMA_Abort+0x58a>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a37      	ldr	r2, [pc, #220]	@ (8006fbc <HAL_DMA_Abort+0x61c>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d022      	beq.n	8006f2a <HAL_DMA_Abort+0x58a>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a35      	ldr	r2, [pc, #212]	@ (8006fc0 <HAL_DMA_Abort+0x620>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d01d      	beq.n	8006f2a <HAL_DMA_Abort+0x58a>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a34      	ldr	r2, [pc, #208]	@ (8006fc4 <HAL_DMA_Abort+0x624>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d018      	beq.n	8006f2a <HAL_DMA_Abort+0x58a>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a32      	ldr	r2, [pc, #200]	@ (8006fc8 <HAL_DMA_Abort+0x628>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d013      	beq.n	8006f2a <HAL_DMA_Abort+0x58a>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a31      	ldr	r2, [pc, #196]	@ (8006fcc <HAL_DMA_Abort+0x62c>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d00e      	beq.n	8006f2a <HAL_DMA_Abort+0x58a>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a2f      	ldr	r2, [pc, #188]	@ (8006fd0 <HAL_DMA_Abort+0x630>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d009      	beq.n	8006f2a <HAL_DMA_Abort+0x58a>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a2e      	ldr	r2, [pc, #184]	@ (8006fd4 <HAL_DMA_Abort+0x634>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d004      	beq.n	8006f2a <HAL_DMA_Abort+0x58a>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a2c      	ldr	r2, [pc, #176]	@ (8006fd8 <HAL_DMA_Abort+0x638>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d101      	bne.n	8006f2e <HAL_DMA_Abort+0x58e>
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e000      	b.n	8006f30 <HAL_DMA_Abort+0x590>
 8006f2e:	2300      	movs	r3, #0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d015      	beq.n	8006f60 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006f3c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00c      	beq.n	8006f60 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006f54:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006f5e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3718      	adds	r7, #24
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	40020010 	.word	0x40020010
 8006f80:	40020028 	.word	0x40020028
 8006f84:	40020040 	.word	0x40020040
 8006f88:	40020058 	.word	0x40020058
 8006f8c:	40020070 	.word	0x40020070
 8006f90:	40020088 	.word	0x40020088
 8006f94:	400200a0 	.word	0x400200a0
 8006f98:	400200b8 	.word	0x400200b8
 8006f9c:	40020410 	.word	0x40020410
 8006fa0:	40020428 	.word	0x40020428
 8006fa4:	40020440 	.word	0x40020440
 8006fa8:	40020458 	.word	0x40020458
 8006fac:	40020470 	.word	0x40020470
 8006fb0:	40020488 	.word	0x40020488
 8006fb4:	400204a0 	.word	0x400204a0
 8006fb8:	400204b8 	.word	0x400204b8
 8006fbc:	58025408 	.word	0x58025408
 8006fc0:	5802541c 	.word	0x5802541c
 8006fc4:	58025430 	.word	0x58025430
 8006fc8:	58025444 	.word	0x58025444
 8006fcc:	58025458 	.word	0x58025458
 8006fd0:	5802546c 	.word	0x5802546c
 8006fd4:	58025480 	.word	0x58025480
 8006fd8:	58025494 	.word	0x58025494

08006fdc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d101      	bne.n	8006fee <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e237      	b.n	800745e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d004      	beq.n	8007004 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2280      	movs	r2, #128	@ 0x80
 8006ffe:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e22c      	b.n	800745e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a5c      	ldr	r2, [pc, #368]	@ (800717c <HAL_DMA_Abort_IT+0x1a0>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d04a      	beq.n	80070a4 <HAL_DMA_Abort_IT+0xc8>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a5b      	ldr	r2, [pc, #364]	@ (8007180 <HAL_DMA_Abort_IT+0x1a4>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d045      	beq.n	80070a4 <HAL_DMA_Abort_IT+0xc8>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a59      	ldr	r2, [pc, #356]	@ (8007184 <HAL_DMA_Abort_IT+0x1a8>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d040      	beq.n	80070a4 <HAL_DMA_Abort_IT+0xc8>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a58      	ldr	r2, [pc, #352]	@ (8007188 <HAL_DMA_Abort_IT+0x1ac>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d03b      	beq.n	80070a4 <HAL_DMA_Abort_IT+0xc8>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a56      	ldr	r2, [pc, #344]	@ (800718c <HAL_DMA_Abort_IT+0x1b0>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d036      	beq.n	80070a4 <HAL_DMA_Abort_IT+0xc8>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a55      	ldr	r2, [pc, #340]	@ (8007190 <HAL_DMA_Abort_IT+0x1b4>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d031      	beq.n	80070a4 <HAL_DMA_Abort_IT+0xc8>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a53      	ldr	r2, [pc, #332]	@ (8007194 <HAL_DMA_Abort_IT+0x1b8>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d02c      	beq.n	80070a4 <HAL_DMA_Abort_IT+0xc8>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a52      	ldr	r2, [pc, #328]	@ (8007198 <HAL_DMA_Abort_IT+0x1bc>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d027      	beq.n	80070a4 <HAL_DMA_Abort_IT+0xc8>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a50      	ldr	r2, [pc, #320]	@ (800719c <HAL_DMA_Abort_IT+0x1c0>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d022      	beq.n	80070a4 <HAL_DMA_Abort_IT+0xc8>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a4f      	ldr	r2, [pc, #316]	@ (80071a0 <HAL_DMA_Abort_IT+0x1c4>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d01d      	beq.n	80070a4 <HAL_DMA_Abort_IT+0xc8>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a4d      	ldr	r2, [pc, #308]	@ (80071a4 <HAL_DMA_Abort_IT+0x1c8>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d018      	beq.n	80070a4 <HAL_DMA_Abort_IT+0xc8>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a4c      	ldr	r2, [pc, #304]	@ (80071a8 <HAL_DMA_Abort_IT+0x1cc>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d013      	beq.n	80070a4 <HAL_DMA_Abort_IT+0xc8>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a4a      	ldr	r2, [pc, #296]	@ (80071ac <HAL_DMA_Abort_IT+0x1d0>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d00e      	beq.n	80070a4 <HAL_DMA_Abort_IT+0xc8>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a49      	ldr	r2, [pc, #292]	@ (80071b0 <HAL_DMA_Abort_IT+0x1d4>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d009      	beq.n	80070a4 <HAL_DMA_Abort_IT+0xc8>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a47      	ldr	r2, [pc, #284]	@ (80071b4 <HAL_DMA_Abort_IT+0x1d8>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d004      	beq.n	80070a4 <HAL_DMA_Abort_IT+0xc8>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a46      	ldr	r2, [pc, #280]	@ (80071b8 <HAL_DMA_Abort_IT+0x1dc>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d101      	bne.n	80070a8 <HAL_DMA_Abort_IT+0xcc>
 80070a4:	2301      	movs	r3, #1
 80070a6:	e000      	b.n	80070aa <HAL_DMA_Abort_IT+0xce>
 80070a8:	2300      	movs	r3, #0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f000 8086 	beq.w	80071bc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2204      	movs	r2, #4
 80070b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a2f      	ldr	r2, [pc, #188]	@ (800717c <HAL_DMA_Abort_IT+0x1a0>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d04a      	beq.n	8007158 <HAL_DMA_Abort_IT+0x17c>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a2e      	ldr	r2, [pc, #184]	@ (8007180 <HAL_DMA_Abort_IT+0x1a4>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d045      	beq.n	8007158 <HAL_DMA_Abort_IT+0x17c>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a2c      	ldr	r2, [pc, #176]	@ (8007184 <HAL_DMA_Abort_IT+0x1a8>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d040      	beq.n	8007158 <HAL_DMA_Abort_IT+0x17c>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a2b      	ldr	r2, [pc, #172]	@ (8007188 <HAL_DMA_Abort_IT+0x1ac>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d03b      	beq.n	8007158 <HAL_DMA_Abort_IT+0x17c>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a29      	ldr	r2, [pc, #164]	@ (800718c <HAL_DMA_Abort_IT+0x1b0>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d036      	beq.n	8007158 <HAL_DMA_Abort_IT+0x17c>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a28      	ldr	r2, [pc, #160]	@ (8007190 <HAL_DMA_Abort_IT+0x1b4>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d031      	beq.n	8007158 <HAL_DMA_Abort_IT+0x17c>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a26      	ldr	r2, [pc, #152]	@ (8007194 <HAL_DMA_Abort_IT+0x1b8>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d02c      	beq.n	8007158 <HAL_DMA_Abort_IT+0x17c>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a25      	ldr	r2, [pc, #148]	@ (8007198 <HAL_DMA_Abort_IT+0x1bc>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d027      	beq.n	8007158 <HAL_DMA_Abort_IT+0x17c>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a23      	ldr	r2, [pc, #140]	@ (800719c <HAL_DMA_Abort_IT+0x1c0>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d022      	beq.n	8007158 <HAL_DMA_Abort_IT+0x17c>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a22      	ldr	r2, [pc, #136]	@ (80071a0 <HAL_DMA_Abort_IT+0x1c4>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d01d      	beq.n	8007158 <HAL_DMA_Abort_IT+0x17c>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a20      	ldr	r2, [pc, #128]	@ (80071a4 <HAL_DMA_Abort_IT+0x1c8>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d018      	beq.n	8007158 <HAL_DMA_Abort_IT+0x17c>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a1f      	ldr	r2, [pc, #124]	@ (80071a8 <HAL_DMA_Abort_IT+0x1cc>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d013      	beq.n	8007158 <HAL_DMA_Abort_IT+0x17c>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a1d      	ldr	r2, [pc, #116]	@ (80071ac <HAL_DMA_Abort_IT+0x1d0>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d00e      	beq.n	8007158 <HAL_DMA_Abort_IT+0x17c>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a1c      	ldr	r2, [pc, #112]	@ (80071b0 <HAL_DMA_Abort_IT+0x1d4>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d009      	beq.n	8007158 <HAL_DMA_Abort_IT+0x17c>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a1a      	ldr	r2, [pc, #104]	@ (80071b4 <HAL_DMA_Abort_IT+0x1d8>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d004      	beq.n	8007158 <HAL_DMA_Abort_IT+0x17c>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a19      	ldr	r2, [pc, #100]	@ (80071b8 <HAL_DMA_Abort_IT+0x1dc>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d108      	bne.n	800716a <HAL_DMA_Abort_IT+0x18e>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f022 0201 	bic.w	r2, r2, #1
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	e178      	b.n	800745c <HAL_DMA_Abort_IT+0x480>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f022 0201 	bic.w	r2, r2, #1
 8007178:	601a      	str	r2, [r3, #0]
 800717a:	e16f      	b.n	800745c <HAL_DMA_Abort_IT+0x480>
 800717c:	40020010 	.word	0x40020010
 8007180:	40020028 	.word	0x40020028
 8007184:	40020040 	.word	0x40020040
 8007188:	40020058 	.word	0x40020058
 800718c:	40020070 	.word	0x40020070
 8007190:	40020088 	.word	0x40020088
 8007194:	400200a0 	.word	0x400200a0
 8007198:	400200b8 	.word	0x400200b8
 800719c:	40020410 	.word	0x40020410
 80071a0:	40020428 	.word	0x40020428
 80071a4:	40020440 	.word	0x40020440
 80071a8:	40020458 	.word	0x40020458
 80071ac:	40020470 	.word	0x40020470
 80071b0:	40020488 	.word	0x40020488
 80071b4:	400204a0 	.word	0x400204a0
 80071b8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f022 020e 	bic.w	r2, r2, #14
 80071ca:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a6c      	ldr	r2, [pc, #432]	@ (8007384 <HAL_DMA_Abort_IT+0x3a8>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d04a      	beq.n	800726c <HAL_DMA_Abort_IT+0x290>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a6b      	ldr	r2, [pc, #428]	@ (8007388 <HAL_DMA_Abort_IT+0x3ac>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d045      	beq.n	800726c <HAL_DMA_Abort_IT+0x290>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a69      	ldr	r2, [pc, #420]	@ (800738c <HAL_DMA_Abort_IT+0x3b0>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d040      	beq.n	800726c <HAL_DMA_Abort_IT+0x290>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a68      	ldr	r2, [pc, #416]	@ (8007390 <HAL_DMA_Abort_IT+0x3b4>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d03b      	beq.n	800726c <HAL_DMA_Abort_IT+0x290>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a66      	ldr	r2, [pc, #408]	@ (8007394 <HAL_DMA_Abort_IT+0x3b8>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d036      	beq.n	800726c <HAL_DMA_Abort_IT+0x290>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a65      	ldr	r2, [pc, #404]	@ (8007398 <HAL_DMA_Abort_IT+0x3bc>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d031      	beq.n	800726c <HAL_DMA_Abort_IT+0x290>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a63      	ldr	r2, [pc, #396]	@ (800739c <HAL_DMA_Abort_IT+0x3c0>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d02c      	beq.n	800726c <HAL_DMA_Abort_IT+0x290>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a62      	ldr	r2, [pc, #392]	@ (80073a0 <HAL_DMA_Abort_IT+0x3c4>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d027      	beq.n	800726c <HAL_DMA_Abort_IT+0x290>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a60      	ldr	r2, [pc, #384]	@ (80073a4 <HAL_DMA_Abort_IT+0x3c8>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d022      	beq.n	800726c <HAL_DMA_Abort_IT+0x290>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a5f      	ldr	r2, [pc, #380]	@ (80073a8 <HAL_DMA_Abort_IT+0x3cc>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d01d      	beq.n	800726c <HAL_DMA_Abort_IT+0x290>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a5d      	ldr	r2, [pc, #372]	@ (80073ac <HAL_DMA_Abort_IT+0x3d0>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d018      	beq.n	800726c <HAL_DMA_Abort_IT+0x290>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a5c      	ldr	r2, [pc, #368]	@ (80073b0 <HAL_DMA_Abort_IT+0x3d4>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d013      	beq.n	800726c <HAL_DMA_Abort_IT+0x290>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a5a      	ldr	r2, [pc, #360]	@ (80073b4 <HAL_DMA_Abort_IT+0x3d8>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d00e      	beq.n	800726c <HAL_DMA_Abort_IT+0x290>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a59      	ldr	r2, [pc, #356]	@ (80073b8 <HAL_DMA_Abort_IT+0x3dc>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d009      	beq.n	800726c <HAL_DMA_Abort_IT+0x290>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a57      	ldr	r2, [pc, #348]	@ (80073bc <HAL_DMA_Abort_IT+0x3e0>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d004      	beq.n	800726c <HAL_DMA_Abort_IT+0x290>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a56      	ldr	r2, [pc, #344]	@ (80073c0 <HAL_DMA_Abort_IT+0x3e4>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d108      	bne.n	800727e <HAL_DMA_Abort_IT+0x2a2>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f022 0201 	bic.w	r2, r2, #1
 800727a:	601a      	str	r2, [r3, #0]
 800727c:	e007      	b.n	800728e <HAL_DMA_Abort_IT+0x2b2>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f022 0201 	bic.w	r2, r2, #1
 800728c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a3c      	ldr	r2, [pc, #240]	@ (8007384 <HAL_DMA_Abort_IT+0x3a8>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d072      	beq.n	800737e <HAL_DMA_Abort_IT+0x3a2>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a3a      	ldr	r2, [pc, #232]	@ (8007388 <HAL_DMA_Abort_IT+0x3ac>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d06d      	beq.n	800737e <HAL_DMA_Abort_IT+0x3a2>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a39      	ldr	r2, [pc, #228]	@ (800738c <HAL_DMA_Abort_IT+0x3b0>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d068      	beq.n	800737e <HAL_DMA_Abort_IT+0x3a2>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a37      	ldr	r2, [pc, #220]	@ (8007390 <HAL_DMA_Abort_IT+0x3b4>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d063      	beq.n	800737e <HAL_DMA_Abort_IT+0x3a2>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a36      	ldr	r2, [pc, #216]	@ (8007394 <HAL_DMA_Abort_IT+0x3b8>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d05e      	beq.n	800737e <HAL_DMA_Abort_IT+0x3a2>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a34      	ldr	r2, [pc, #208]	@ (8007398 <HAL_DMA_Abort_IT+0x3bc>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d059      	beq.n	800737e <HAL_DMA_Abort_IT+0x3a2>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a33      	ldr	r2, [pc, #204]	@ (800739c <HAL_DMA_Abort_IT+0x3c0>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d054      	beq.n	800737e <HAL_DMA_Abort_IT+0x3a2>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a31      	ldr	r2, [pc, #196]	@ (80073a0 <HAL_DMA_Abort_IT+0x3c4>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d04f      	beq.n	800737e <HAL_DMA_Abort_IT+0x3a2>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a30      	ldr	r2, [pc, #192]	@ (80073a4 <HAL_DMA_Abort_IT+0x3c8>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d04a      	beq.n	800737e <HAL_DMA_Abort_IT+0x3a2>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a2e      	ldr	r2, [pc, #184]	@ (80073a8 <HAL_DMA_Abort_IT+0x3cc>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d045      	beq.n	800737e <HAL_DMA_Abort_IT+0x3a2>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a2d      	ldr	r2, [pc, #180]	@ (80073ac <HAL_DMA_Abort_IT+0x3d0>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d040      	beq.n	800737e <HAL_DMA_Abort_IT+0x3a2>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a2b      	ldr	r2, [pc, #172]	@ (80073b0 <HAL_DMA_Abort_IT+0x3d4>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d03b      	beq.n	800737e <HAL_DMA_Abort_IT+0x3a2>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a2a      	ldr	r2, [pc, #168]	@ (80073b4 <HAL_DMA_Abort_IT+0x3d8>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d036      	beq.n	800737e <HAL_DMA_Abort_IT+0x3a2>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a28      	ldr	r2, [pc, #160]	@ (80073b8 <HAL_DMA_Abort_IT+0x3dc>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d031      	beq.n	800737e <HAL_DMA_Abort_IT+0x3a2>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a27      	ldr	r2, [pc, #156]	@ (80073bc <HAL_DMA_Abort_IT+0x3e0>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d02c      	beq.n	800737e <HAL_DMA_Abort_IT+0x3a2>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a25      	ldr	r2, [pc, #148]	@ (80073c0 <HAL_DMA_Abort_IT+0x3e4>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d027      	beq.n	800737e <HAL_DMA_Abort_IT+0x3a2>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a24      	ldr	r2, [pc, #144]	@ (80073c4 <HAL_DMA_Abort_IT+0x3e8>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d022      	beq.n	800737e <HAL_DMA_Abort_IT+0x3a2>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a22      	ldr	r2, [pc, #136]	@ (80073c8 <HAL_DMA_Abort_IT+0x3ec>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d01d      	beq.n	800737e <HAL_DMA_Abort_IT+0x3a2>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a21      	ldr	r2, [pc, #132]	@ (80073cc <HAL_DMA_Abort_IT+0x3f0>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d018      	beq.n	800737e <HAL_DMA_Abort_IT+0x3a2>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a1f      	ldr	r2, [pc, #124]	@ (80073d0 <HAL_DMA_Abort_IT+0x3f4>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d013      	beq.n	800737e <HAL_DMA_Abort_IT+0x3a2>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a1e      	ldr	r2, [pc, #120]	@ (80073d4 <HAL_DMA_Abort_IT+0x3f8>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d00e      	beq.n	800737e <HAL_DMA_Abort_IT+0x3a2>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a1c      	ldr	r2, [pc, #112]	@ (80073d8 <HAL_DMA_Abort_IT+0x3fc>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d009      	beq.n	800737e <HAL_DMA_Abort_IT+0x3a2>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a1b      	ldr	r2, [pc, #108]	@ (80073dc <HAL_DMA_Abort_IT+0x400>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d004      	beq.n	800737e <HAL_DMA_Abort_IT+0x3a2>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a19      	ldr	r2, [pc, #100]	@ (80073e0 <HAL_DMA_Abort_IT+0x404>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d132      	bne.n	80073e4 <HAL_DMA_Abort_IT+0x408>
 800737e:	2301      	movs	r3, #1
 8007380:	e031      	b.n	80073e6 <HAL_DMA_Abort_IT+0x40a>
 8007382:	bf00      	nop
 8007384:	40020010 	.word	0x40020010
 8007388:	40020028 	.word	0x40020028
 800738c:	40020040 	.word	0x40020040
 8007390:	40020058 	.word	0x40020058
 8007394:	40020070 	.word	0x40020070
 8007398:	40020088 	.word	0x40020088
 800739c:	400200a0 	.word	0x400200a0
 80073a0:	400200b8 	.word	0x400200b8
 80073a4:	40020410 	.word	0x40020410
 80073a8:	40020428 	.word	0x40020428
 80073ac:	40020440 	.word	0x40020440
 80073b0:	40020458 	.word	0x40020458
 80073b4:	40020470 	.word	0x40020470
 80073b8:	40020488 	.word	0x40020488
 80073bc:	400204a0 	.word	0x400204a0
 80073c0:	400204b8 	.word	0x400204b8
 80073c4:	58025408 	.word	0x58025408
 80073c8:	5802541c 	.word	0x5802541c
 80073cc:	58025430 	.word	0x58025430
 80073d0:	58025444 	.word	0x58025444
 80073d4:	58025458 	.word	0x58025458
 80073d8:	5802546c 	.word	0x5802546c
 80073dc:	58025480 	.word	0x58025480
 80073e0:	58025494 	.word	0x58025494
 80073e4:	2300      	movs	r3, #0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d028      	beq.n	800743c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80073f8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073fe:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007404:	f003 031f 	and.w	r3, r3, #31
 8007408:	2201      	movs	r2, #1
 800740a:	409a      	lsls	r2, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007418:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00c      	beq.n	800743c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800742c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007430:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800743a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007450:	2b00      	cmp	r3, #0
 8007452:	d003      	beq.n	800745c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop

08007468 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b08a      	sub	sp, #40	@ 0x28
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007470:	2300      	movs	r3, #0
 8007472:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007474:	4b67      	ldr	r3, [pc, #412]	@ (8007614 <HAL_DMA_IRQHandler+0x1ac>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a67      	ldr	r2, [pc, #412]	@ (8007618 <HAL_DMA_IRQHandler+0x1b0>)
 800747a:	fba2 2303 	umull	r2, r3, r2, r3
 800747e:	0a9b      	lsrs	r3, r3, #10
 8007480:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007486:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800748c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800748e:	6a3b      	ldr	r3, [r7, #32]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a5f      	ldr	r2, [pc, #380]	@ (800761c <HAL_DMA_IRQHandler+0x1b4>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d04a      	beq.n	800753a <HAL_DMA_IRQHandler+0xd2>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a5d      	ldr	r2, [pc, #372]	@ (8007620 <HAL_DMA_IRQHandler+0x1b8>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d045      	beq.n	800753a <HAL_DMA_IRQHandler+0xd2>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a5c      	ldr	r2, [pc, #368]	@ (8007624 <HAL_DMA_IRQHandler+0x1bc>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d040      	beq.n	800753a <HAL_DMA_IRQHandler+0xd2>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a5a      	ldr	r2, [pc, #360]	@ (8007628 <HAL_DMA_IRQHandler+0x1c0>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d03b      	beq.n	800753a <HAL_DMA_IRQHandler+0xd2>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a59      	ldr	r2, [pc, #356]	@ (800762c <HAL_DMA_IRQHandler+0x1c4>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d036      	beq.n	800753a <HAL_DMA_IRQHandler+0xd2>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a57      	ldr	r2, [pc, #348]	@ (8007630 <HAL_DMA_IRQHandler+0x1c8>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d031      	beq.n	800753a <HAL_DMA_IRQHandler+0xd2>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a56      	ldr	r2, [pc, #344]	@ (8007634 <HAL_DMA_IRQHandler+0x1cc>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d02c      	beq.n	800753a <HAL_DMA_IRQHandler+0xd2>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a54      	ldr	r2, [pc, #336]	@ (8007638 <HAL_DMA_IRQHandler+0x1d0>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d027      	beq.n	800753a <HAL_DMA_IRQHandler+0xd2>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a53      	ldr	r2, [pc, #332]	@ (800763c <HAL_DMA_IRQHandler+0x1d4>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d022      	beq.n	800753a <HAL_DMA_IRQHandler+0xd2>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a51      	ldr	r2, [pc, #324]	@ (8007640 <HAL_DMA_IRQHandler+0x1d8>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d01d      	beq.n	800753a <HAL_DMA_IRQHandler+0xd2>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a50      	ldr	r2, [pc, #320]	@ (8007644 <HAL_DMA_IRQHandler+0x1dc>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d018      	beq.n	800753a <HAL_DMA_IRQHandler+0xd2>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a4e      	ldr	r2, [pc, #312]	@ (8007648 <HAL_DMA_IRQHandler+0x1e0>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d013      	beq.n	800753a <HAL_DMA_IRQHandler+0xd2>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a4d      	ldr	r2, [pc, #308]	@ (800764c <HAL_DMA_IRQHandler+0x1e4>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d00e      	beq.n	800753a <HAL_DMA_IRQHandler+0xd2>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a4b      	ldr	r2, [pc, #300]	@ (8007650 <HAL_DMA_IRQHandler+0x1e8>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d009      	beq.n	800753a <HAL_DMA_IRQHandler+0xd2>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a4a      	ldr	r2, [pc, #296]	@ (8007654 <HAL_DMA_IRQHandler+0x1ec>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d004      	beq.n	800753a <HAL_DMA_IRQHandler+0xd2>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a48      	ldr	r2, [pc, #288]	@ (8007658 <HAL_DMA_IRQHandler+0x1f0>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d101      	bne.n	800753e <HAL_DMA_IRQHandler+0xd6>
 800753a:	2301      	movs	r3, #1
 800753c:	e000      	b.n	8007540 <HAL_DMA_IRQHandler+0xd8>
 800753e:	2300      	movs	r3, #0
 8007540:	2b00      	cmp	r3, #0
 8007542:	f000 842b 	beq.w	8007d9c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800754a:	f003 031f 	and.w	r3, r3, #31
 800754e:	2208      	movs	r2, #8
 8007550:	409a      	lsls	r2, r3
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	4013      	ands	r3, r2
 8007556:	2b00      	cmp	r3, #0
 8007558:	f000 80a2 	beq.w	80076a0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a2e      	ldr	r2, [pc, #184]	@ (800761c <HAL_DMA_IRQHandler+0x1b4>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d04a      	beq.n	80075fc <HAL_DMA_IRQHandler+0x194>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a2d      	ldr	r2, [pc, #180]	@ (8007620 <HAL_DMA_IRQHandler+0x1b8>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d045      	beq.n	80075fc <HAL_DMA_IRQHandler+0x194>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a2b      	ldr	r2, [pc, #172]	@ (8007624 <HAL_DMA_IRQHandler+0x1bc>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d040      	beq.n	80075fc <HAL_DMA_IRQHandler+0x194>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a2a      	ldr	r2, [pc, #168]	@ (8007628 <HAL_DMA_IRQHandler+0x1c0>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d03b      	beq.n	80075fc <HAL_DMA_IRQHandler+0x194>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a28      	ldr	r2, [pc, #160]	@ (800762c <HAL_DMA_IRQHandler+0x1c4>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d036      	beq.n	80075fc <HAL_DMA_IRQHandler+0x194>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a27      	ldr	r2, [pc, #156]	@ (8007630 <HAL_DMA_IRQHandler+0x1c8>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d031      	beq.n	80075fc <HAL_DMA_IRQHandler+0x194>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a25      	ldr	r2, [pc, #148]	@ (8007634 <HAL_DMA_IRQHandler+0x1cc>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d02c      	beq.n	80075fc <HAL_DMA_IRQHandler+0x194>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a24      	ldr	r2, [pc, #144]	@ (8007638 <HAL_DMA_IRQHandler+0x1d0>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d027      	beq.n	80075fc <HAL_DMA_IRQHandler+0x194>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a22      	ldr	r2, [pc, #136]	@ (800763c <HAL_DMA_IRQHandler+0x1d4>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d022      	beq.n	80075fc <HAL_DMA_IRQHandler+0x194>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a21      	ldr	r2, [pc, #132]	@ (8007640 <HAL_DMA_IRQHandler+0x1d8>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d01d      	beq.n	80075fc <HAL_DMA_IRQHandler+0x194>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a1f      	ldr	r2, [pc, #124]	@ (8007644 <HAL_DMA_IRQHandler+0x1dc>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d018      	beq.n	80075fc <HAL_DMA_IRQHandler+0x194>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a1e      	ldr	r2, [pc, #120]	@ (8007648 <HAL_DMA_IRQHandler+0x1e0>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d013      	beq.n	80075fc <HAL_DMA_IRQHandler+0x194>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a1c      	ldr	r2, [pc, #112]	@ (800764c <HAL_DMA_IRQHandler+0x1e4>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d00e      	beq.n	80075fc <HAL_DMA_IRQHandler+0x194>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a1b      	ldr	r2, [pc, #108]	@ (8007650 <HAL_DMA_IRQHandler+0x1e8>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d009      	beq.n	80075fc <HAL_DMA_IRQHandler+0x194>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a19      	ldr	r2, [pc, #100]	@ (8007654 <HAL_DMA_IRQHandler+0x1ec>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d004      	beq.n	80075fc <HAL_DMA_IRQHandler+0x194>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a18      	ldr	r2, [pc, #96]	@ (8007658 <HAL_DMA_IRQHandler+0x1f0>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d12f      	bne.n	800765c <HAL_DMA_IRQHandler+0x1f4>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 0304 	and.w	r3, r3, #4
 8007606:	2b00      	cmp	r3, #0
 8007608:	bf14      	ite	ne
 800760a:	2301      	movne	r3, #1
 800760c:	2300      	moveq	r3, #0
 800760e:	b2db      	uxtb	r3, r3
 8007610:	e02e      	b.n	8007670 <HAL_DMA_IRQHandler+0x208>
 8007612:	bf00      	nop
 8007614:	24000000 	.word	0x24000000
 8007618:	1b4e81b5 	.word	0x1b4e81b5
 800761c:	40020010 	.word	0x40020010
 8007620:	40020028 	.word	0x40020028
 8007624:	40020040 	.word	0x40020040
 8007628:	40020058 	.word	0x40020058
 800762c:	40020070 	.word	0x40020070
 8007630:	40020088 	.word	0x40020088
 8007634:	400200a0 	.word	0x400200a0
 8007638:	400200b8 	.word	0x400200b8
 800763c:	40020410 	.word	0x40020410
 8007640:	40020428 	.word	0x40020428
 8007644:	40020440 	.word	0x40020440
 8007648:	40020458 	.word	0x40020458
 800764c:	40020470 	.word	0x40020470
 8007650:	40020488 	.word	0x40020488
 8007654:	400204a0 	.word	0x400204a0
 8007658:	400204b8 	.word	0x400204b8
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 0308 	and.w	r3, r3, #8
 8007666:	2b00      	cmp	r3, #0
 8007668:	bf14      	ite	ne
 800766a:	2301      	movne	r3, #1
 800766c:	2300      	moveq	r3, #0
 800766e:	b2db      	uxtb	r3, r3
 8007670:	2b00      	cmp	r3, #0
 8007672:	d015      	beq.n	80076a0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f022 0204 	bic.w	r2, r2, #4
 8007682:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007688:	f003 031f 	and.w	r3, r3, #31
 800768c:	2208      	movs	r2, #8
 800768e:	409a      	lsls	r2, r3
 8007690:	6a3b      	ldr	r3, [r7, #32]
 8007692:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007698:	f043 0201 	orr.w	r2, r3, #1
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076a4:	f003 031f 	and.w	r3, r3, #31
 80076a8:	69ba      	ldr	r2, [r7, #24]
 80076aa:	fa22 f303 	lsr.w	r3, r2, r3
 80076ae:	f003 0301 	and.w	r3, r3, #1
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d06e      	beq.n	8007794 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a69      	ldr	r2, [pc, #420]	@ (8007860 <HAL_DMA_IRQHandler+0x3f8>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d04a      	beq.n	8007756 <HAL_DMA_IRQHandler+0x2ee>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a67      	ldr	r2, [pc, #412]	@ (8007864 <HAL_DMA_IRQHandler+0x3fc>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d045      	beq.n	8007756 <HAL_DMA_IRQHandler+0x2ee>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a66      	ldr	r2, [pc, #408]	@ (8007868 <HAL_DMA_IRQHandler+0x400>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d040      	beq.n	8007756 <HAL_DMA_IRQHandler+0x2ee>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a64      	ldr	r2, [pc, #400]	@ (800786c <HAL_DMA_IRQHandler+0x404>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d03b      	beq.n	8007756 <HAL_DMA_IRQHandler+0x2ee>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a63      	ldr	r2, [pc, #396]	@ (8007870 <HAL_DMA_IRQHandler+0x408>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d036      	beq.n	8007756 <HAL_DMA_IRQHandler+0x2ee>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a61      	ldr	r2, [pc, #388]	@ (8007874 <HAL_DMA_IRQHandler+0x40c>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d031      	beq.n	8007756 <HAL_DMA_IRQHandler+0x2ee>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a60      	ldr	r2, [pc, #384]	@ (8007878 <HAL_DMA_IRQHandler+0x410>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d02c      	beq.n	8007756 <HAL_DMA_IRQHandler+0x2ee>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a5e      	ldr	r2, [pc, #376]	@ (800787c <HAL_DMA_IRQHandler+0x414>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d027      	beq.n	8007756 <HAL_DMA_IRQHandler+0x2ee>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a5d      	ldr	r2, [pc, #372]	@ (8007880 <HAL_DMA_IRQHandler+0x418>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d022      	beq.n	8007756 <HAL_DMA_IRQHandler+0x2ee>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a5b      	ldr	r2, [pc, #364]	@ (8007884 <HAL_DMA_IRQHandler+0x41c>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d01d      	beq.n	8007756 <HAL_DMA_IRQHandler+0x2ee>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a5a      	ldr	r2, [pc, #360]	@ (8007888 <HAL_DMA_IRQHandler+0x420>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d018      	beq.n	8007756 <HAL_DMA_IRQHandler+0x2ee>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a58      	ldr	r2, [pc, #352]	@ (800788c <HAL_DMA_IRQHandler+0x424>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d013      	beq.n	8007756 <HAL_DMA_IRQHandler+0x2ee>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a57      	ldr	r2, [pc, #348]	@ (8007890 <HAL_DMA_IRQHandler+0x428>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d00e      	beq.n	8007756 <HAL_DMA_IRQHandler+0x2ee>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a55      	ldr	r2, [pc, #340]	@ (8007894 <HAL_DMA_IRQHandler+0x42c>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d009      	beq.n	8007756 <HAL_DMA_IRQHandler+0x2ee>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a54      	ldr	r2, [pc, #336]	@ (8007898 <HAL_DMA_IRQHandler+0x430>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d004      	beq.n	8007756 <HAL_DMA_IRQHandler+0x2ee>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a52      	ldr	r2, [pc, #328]	@ (800789c <HAL_DMA_IRQHandler+0x434>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d10a      	bne.n	800776c <HAL_DMA_IRQHandler+0x304>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	695b      	ldr	r3, [r3, #20]
 800775c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007760:	2b00      	cmp	r3, #0
 8007762:	bf14      	ite	ne
 8007764:	2301      	movne	r3, #1
 8007766:	2300      	moveq	r3, #0
 8007768:	b2db      	uxtb	r3, r3
 800776a:	e003      	b.n	8007774 <HAL_DMA_IRQHandler+0x30c>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2300      	movs	r3, #0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00d      	beq.n	8007794 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800777c:	f003 031f 	and.w	r3, r3, #31
 8007780:	2201      	movs	r2, #1
 8007782:	409a      	lsls	r2, r3
 8007784:	6a3b      	ldr	r3, [r7, #32]
 8007786:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800778c:	f043 0202 	orr.w	r2, r3, #2
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007798:	f003 031f 	and.w	r3, r3, #31
 800779c:	2204      	movs	r2, #4
 800779e:	409a      	lsls	r2, r3
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	4013      	ands	r3, r2
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f000 808f 	beq.w	80078c8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a2c      	ldr	r2, [pc, #176]	@ (8007860 <HAL_DMA_IRQHandler+0x3f8>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d04a      	beq.n	800784a <HAL_DMA_IRQHandler+0x3e2>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a2a      	ldr	r2, [pc, #168]	@ (8007864 <HAL_DMA_IRQHandler+0x3fc>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d045      	beq.n	800784a <HAL_DMA_IRQHandler+0x3e2>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a29      	ldr	r2, [pc, #164]	@ (8007868 <HAL_DMA_IRQHandler+0x400>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d040      	beq.n	800784a <HAL_DMA_IRQHandler+0x3e2>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a27      	ldr	r2, [pc, #156]	@ (800786c <HAL_DMA_IRQHandler+0x404>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d03b      	beq.n	800784a <HAL_DMA_IRQHandler+0x3e2>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a26      	ldr	r2, [pc, #152]	@ (8007870 <HAL_DMA_IRQHandler+0x408>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d036      	beq.n	800784a <HAL_DMA_IRQHandler+0x3e2>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a24      	ldr	r2, [pc, #144]	@ (8007874 <HAL_DMA_IRQHandler+0x40c>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d031      	beq.n	800784a <HAL_DMA_IRQHandler+0x3e2>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a23      	ldr	r2, [pc, #140]	@ (8007878 <HAL_DMA_IRQHandler+0x410>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d02c      	beq.n	800784a <HAL_DMA_IRQHandler+0x3e2>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a21      	ldr	r2, [pc, #132]	@ (800787c <HAL_DMA_IRQHandler+0x414>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d027      	beq.n	800784a <HAL_DMA_IRQHandler+0x3e2>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a20      	ldr	r2, [pc, #128]	@ (8007880 <HAL_DMA_IRQHandler+0x418>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d022      	beq.n	800784a <HAL_DMA_IRQHandler+0x3e2>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a1e      	ldr	r2, [pc, #120]	@ (8007884 <HAL_DMA_IRQHandler+0x41c>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d01d      	beq.n	800784a <HAL_DMA_IRQHandler+0x3e2>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a1d      	ldr	r2, [pc, #116]	@ (8007888 <HAL_DMA_IRQHandler+0x420>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d018      	beq.n	800784a <HAL_DMA_IRQHandler+0x3e2>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a1b      	ldr	r2, [pc, #108]	@ (800788c <HAL_DMA_IRQHandler+0x424>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d013      	beq.n	800784a <HAL_DMA_IRQHandler+0x3e2>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a1a      	ldr	r2, [pc, #104]	@ (8007890 <HAL_DMA_IRQHandler+0x428>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d00e      	beq.n	800784a <HAL_DMA_IRQHandler+0x3e2>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a18      	ldr	r2, [pc, #96]	@ (8007894 <HAL_DMA_IRQHandler+0x42c>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d009      	beq.n	800784a <HAL_DMA_IRQHandler+0x3e2>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a17      	ldr	r2, [pc, #92]	@ (8007898 <HAL_DMA_IRQHandler+0x430>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d004      	beq.n	800784a <HAL_DMA_IRQHandler+0x3e2>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a15      	ldr	r2, [pc, #84]	@ (800789c <HAL_DMA_IRQHandler+0x434>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d12a      	bne.n	80078a0 <HAL_DMA_IRQHandler+0x438>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 0302 	and.w	r3, r3, #2
 8007854:	2b00      	cmp	r3, #0
 8007856:	bf14      	ite	ne
 8007858:	2301      	movne	r3, #1
 800785a:	2300      	moveq	r3, #0
 800785c:	b2db      	uxtb	r3, r3
 800785e:	e023      	b.n	80078a8 <HAL_DMA_IRQHandler+0x440>
 8007860:	40020010 	.word	0x40020010
 8007864:	40020028 	.word	0x40020028
 8007868:	40020040 	.word	0x40020040
 800786c:	40020058 	.word	0x40020058
 8007870:	40020070 	.word	0x40020070
 8007874:	40020088 	.word	0x40020088
 8007878:	400200a0 	.word	0x400200a0
 800787c:	400200b8 	.word	0x400200b8
 8007880:	40020410 	.word	0x40020410
 8007884:	40020428 	.word	0x40020428
 8007888:	40020440 	.word	0x40020440
 800788c:	40020458 	.word	0x40020458
 8007890:	40020470 	.word	0x40020470
 8007894:	40020488 	.word	0x40020488
 8007898:	400204a0 	.word	0x400204a0
 800789c:	400204b8 	.word	0x400204b8
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2300      	movs	r3, #0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00d      	beq.n	80078c8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078b0:	f003 031f 	and.w	r3, r3, #31
 80078b4:	2204      	movs	r2, #4
 80078b6:	409a      	lsls	r2, r3
 80078b8:	6a3b      	ldr	r3, [r7, #32]
 80078ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078c0:	f043 0204 	orr.w	r2, r3, #4
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078cc:	f003 031f 	and.w	r3, r3, #31
 80078d0:	2210      	movs	r2, #16
 80078d2:	409a      	lsls	r2, r3
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	4013      	ands	r3, r2
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f000 80a6 	beq.w	8007a2a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a85      	ldr	r2, [pc, #532]	@ (8007af8 <HAL_DMA_IRQHandler+0x690>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d04a      	beq.n	800797e <HAL_DMA_IRQHandler+0x516>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a83      	ldr	r2, [pc, #524]	@ (8007afc <HAL_DMA_IRQHandler+0x694>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d045      	beq.n	800797e <HAL_DMA_IRQHandler+0x516>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a82      	ldr	r2, [pc, #520]	@ (8007b00 <HAL_DMA_IRQHandler+0x698>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d040      	beq.n	800797e <HAL_DMA_IRQHandler+0x516>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a80      	ldr	r2, [pc, #512]	@ (8007b04 <HAL_DMA_IRQHandler+0x69c>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d03b      	beq.n	800797e <HAL_DMA_IRQHandler+0x516>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a7f      	ldr	r2, [pc, #508]	@ (8007b08 <HAL_DMA_IRQHandler+0x6a0>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d036      	beq.n	800797e <HAL_DMA_IRQHandler+0x516>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a7d      	ldr	r2, [pc, #500]	@ (8007b0c <HAL_DMA_IRQHandler+0x6a4>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d031      	beq.n	800797e <HAL_DMA_IRQHandler+0x516>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a7c      	ldr	r2, [pc, #496]	@ (8007b10 <HAL_DMA_IRQHandler+0x6a8>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d02c      	beq.n	800797e <HAL_DMA_IRQHandler+0x516>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a7a      	ldr	r2, [pc, #488]	@ (8007b14 <HAL_DMA_IRQHandler+0x6ac>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d027      	beq.n	800797e <HAL_DMA_IRQHandler+0x516>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a79      	ldr	r2, [pc, #484]	@ (8007b18 <HAL_DMA_IRQHandler+0x6b0>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d022      	beq.n	800797e <HAL_DMA_IRQHandler+0x516>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a77      	ldr	r2, [pc, #476]	@ (8007b1c <HAL_DMA_IRQHandler+0x6b4>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d01d      	beq.n	800797e <HAL_DMA_IRQHandler+0x516>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a76      	ldr	r2, [pc, #472]	@ (8007b20 <HAL_DMA_IRQHandler+0x6b8>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d018      	beq.n	800797e <HAL_DMA_IRQHandler+0x516>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a74      	ldr	r2, [pc, #464]	@ (8007b24 <HAL_DMA_IRQHandler+0x6bc>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d013      	beq.n	800797e <HAL_DMA_IRQHandler+0x516>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a73      	ldr	r2, [pc, #460]	@ (8007b28 <HAL_DMA_IRQHandler+0x6c0>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d00e      	beq.n	800797e <HAL_DMA_IRQHandler+0x516>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a71      	ldr	r2, [pc, #452]	@ (8007b2c <HAL_DMA_IRQHandler+0x6c4>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d009      	beq.n	800797e <HAL_DMA_IRQHandler+0x516>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a70      	ldr	r2, [pc, #448]	@ (8007b30 <HAL_DMA_IRQHandler+0x6c8>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d004      	beq.n	800797e <HAL_DMA_IRQHandler+0x516>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a6e      	ldr	r2, [pc, #440]	@ (8007b34 <HAL_DMA_IRQHandler+0x6cc>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d10a      	bne.n	8007994 <HAL_DMA_IRQHandler+0x52c>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 0308 	and.w	r3, r3, #8
 8007988:	2b00      	cmp	r3, #0
 800798a:	bf14      	ite	ne
 800798c:	2301      	movne	r3, #1
 800798e:	2300      	moveq	r3, #0
 8007990:	b2db      	uxtb	r3, r3
 8007992:	e009      	b.n	80079a8 <HAL_DMA_IRQHandler+0x540>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 0304 	and.w	r3, r3, #4
 800799e:	2b00      	cmp	r3, #0
 80079a0:	bf14      	ite	ne
 80079a2:	2301      	movne	r3, #1
 80079a4:	2300      	moveq	r3, #0
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d03e      	beq.n	8007a2a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079b0:	f003 031f 	and.w	r3, r3, #31
 80079b4:	2210      	movs	r2, #16
 80079b6:	409a      	lsls	r2, r3
 80079b8:	6a3b      	ldr	r3, [r7, #32]
 80079ba:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d018      	beq.n	80079fc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d108      	bne.n	80079ea <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d024      	beq.n	8007a2a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	4798      	blx	r3
 80079e8:	e01f      	b.n	8007a2a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d01b      	beq.n	8007a2a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	4798      	blx	r3
 80079fa:	e016      	b.n	8007a2a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d107      	bne.n	8007a1a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f022 0208 	bic.w	r2, r2, #8
 8007a18:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d003      	beq.n	8007a2a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a2e:	f003 031f 	and.w	r3, r3, #31
 8007a32:	2220      	movs	r2, #32
 8007a34:	409a      	lsls	r2, r3
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	4013      	ands	r3, r2
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f000 8110 	beq.w	8007c60 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a2c      	ldr	r2, [pc, #176]	@ (8007af8 <HAL_DMA_IRQHandler+0x690>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d04a      	beq.n	8007ae0 <HAL_DMA_IRQHandler+0x678>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a2b      	ldr	r2, [pc, #172]	@ (8007afc <HAL_DMA_IRQHandler+0x694>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d045      	beq.n	8007ae0 <HAL_DMA_IRQHandler+0x678>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a29      	ldr	r2, [pc, #164]	@ (8007b00 <HAL_DMA_IRQHandler+0x698>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d040      	beq.n	8007ae0 <HAL_DMA_IRQHandler+0x678>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a28      	ldr	r2, [pc, #160]	@ (8007b04 <HAL_DMA_IRQHandler+0x69c>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d03b      	beq.n	8007ae0 <HAL_DMA_IRQHandler+0x678>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a26      	ldr	r2, [pc, #152]	@ (8007b08 <HAL_DMA_IRQHandler+0x6a0>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d036      	beq.n	8007ae0 <HAL_DMA_IRQHandler+0x678>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a25      	ldr	r2, [pc, #148]	@ (8007b0c <HAL_DMA_IRQHandler+0x6a4>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d031      	beq.n	8007ae0 <HAL_DMA_IRQHandler+0x678>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a23      	ldr	r2, [pc, #140]	@ (8007b10 <HAL_DMA_IRQHandler+0x6a8>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d02c      	beq.n	8007ae0 <HAL_DMA_IRQHandler+0x678>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a22      	ldr	r2, [pc, #136]	@ (8007b14 <HAL_DMA_IRQHandler+0x6ac>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d027      	beq.n	8007ae0 <HAL_DMA_IRQHandler+0x678>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a20      	ldr	r2, [pc, #128]	@ (8007b18 <HAL_DMA_IRQHandler+0x6b0>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d022      	beq.n	8007ae0 <HAL_DMA_IRQHandler+0x678>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a1f      	ldr	r2, [pc, #124]	@ (8007b1c <HAL_DMA_IRQHandler+0x6b4>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d01d      	beq.n	8007ae0 <HAL_DMA_IRQHandler+0x678>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b20 <HAL_DMA_IRQHandler+0x6b8>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d018      	beq.n	8007ae0 <HAL_DMA_IRQHandler+0x678>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a1c      	ldr	r2, [pc, #112]	@ (8007b24 <HAL_DMA_IRQHandler+0x6bc>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d013      	beq.n	8007ae0 <HAL_DMA_IRQHandler+0x678>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a1a      	ldr	r2, [pc, #104]	@ (8007b28 <HAL_DMA_IRQHandler+0x6c0>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d00e      	beq.n	8007ae0 <HAL_DMA_IRQHandler+0x678>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a19      	ldr	r2, [pc, #100]	@ (8007b2c <HAL_DMA_IRQHandler+0x6c4>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d009      	beq.n	8007ae0 <HAL_DMA_IRQHandler+0x678>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a17      	ldr	r2, [pc, #92]	@ (8007b30 <HAL_DMA_IRQHandler+0x6c8>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d004      	beq.n	8007ae0 <HAL_DMA_IRQHandler+0x678>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a16      	ldr	r2, [pc, #88]	@ (8007b34 <HAL_DMA_IRQHandler+0x6cc>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d12b      	bne.n	8007b38 <HAL_DMA_IRQHandler+0x6d0>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f003 0310 	and.w	r3, r3, #16
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	bf14      	ite	ne
 8007aee:	2301      	movne	r3, #1
 8007af0:	2300      	moveq	r3, #0
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	e02a      	b.n	8007b4c <HAL_DMA_IRQHandler+0x6e4>
 8007af6:	bf00      	nop
 8007af8:	40020010 	.word	0x40020010
 8007afc:	40020028 	.word	0x40020028
 8007b00:	40020040 	.word	0x40020040
 8007b04:	40020058 	.word	0x40020058
 8007b08:	40020070 	.word	0x40020070
 8007b0c:	40020088 	.word	0x40020088
 8007b10:	400200a0 	.word	0x400200a0
 8007b14:	400200b8 	.word	0x400200b8
 8007b18:	40020410 	.word	0x40020410
 8007b1c:	40020428 	.word	0x40020428
 8007b20:	40020440 	.word	0x40020440
 8007b24:	40020458 	.word	0x40020458
 8007b28:	40020470 	.word	0x40020470
 8007b2c:	40020488 	.word	0x40020488
 8007b30:	400204a0 	.word	0x400204a0
 8007b34:	400204b8 	.word	0x400204b8
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 0302 	and.w	r3, r3, #2
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	bf14      	ite	ne
 8007b46:	2301      	movne	r3, #1
 8007b48:	2300      	moveq	r3, #0
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f000 8087 	beq.w	8007c60 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b56:	f003 031f 	and.w	r3, r3, #31
 8007b5a:	2220      	movs	r2, #32
 8007b5c:	409a      	lsls	r2, r3
 8007b5e:	6a3b      	ldr	r3, [r7, #32]
 8007b60:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	2b04      	cmp	r3, #4
 8007b6c:	d139      	bne.n	8007be2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f022 0216 	bic.w	r2, r2, #22
 8007b7c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	695a      	ldr	r2, [r3, #20]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007b8c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d103      	bne.n	8007b9e <HAL_DMA_IRQHandler+0x736>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d007      	beq.n	8007bae <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f022 0208 	bic.w	r2, r2, #8
 8007bac:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bb2:	f003 031f 	and.w	r3, r3, #31
 8007bb6:	223f      	movs	r2, #63	@ 0x3f
 8007bb8:	409a      	lsls	r2, r3
 8007bba:	6a3b      	ldr	r3, [r7, #32]
 8007bbc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f000 8382 	beq.w	80082dc <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	4798      	blx	r3
          }
          return;
 8007be0:	e37c      	b.n	80082dc <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d018      	beq.n	8007c22 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d108      	bne.n	8007c10 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d02c      	beq.n	8007c60 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	4798      	blx	r3
 8007c0e:	e027      	b.n	8007c60 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d023      	beq.n	8007c60 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	4798      	blx	r3
 8007c20:	e01e      	b.n	8007c60 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d10f      	bne.n	8007c50 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f022 0210 	bic.w	r2, r2, #16
 8007c3e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d003      	beq.n	8007c60 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f000 833e 	beq.w	80082e6 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c6e:	f003 0301 	and.w	r3, r3, #1
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	f000 8088 	beq.w	8007d88 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2204      	movs	r2, #4
 8007c7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a89      	ldr	r2, [pc, #548]	@ (8007eac <HAL_DMA_IRQHandler+0xa44>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d04a      	beq.n	8007d20 <HAL_DMA_IRQHandler+0x8b8>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a88      	ldr	r2, [pc, #544]	@ (8007eb0 <HAL_DMA_IRQHandler+0xa48>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d045      	beq.n	8007d20 <HAL_DMA_IRQHandler+0x8b8>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a86      	ldr	r2, [pc, #536]	@ (8007eb4 <HAL_DMA_IRQHandler+0xa4c>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d040      	beq.n	8007d20 <HAL_DMA_IRQHandler+0x8b8>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a85      	ldr	r2, [pc, #532]	@ (8007eb8 <HAL_DMA_IRQHandler+0xa50>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d03b      	beq.n	8007d20 <HAL_DMA_IRQHandler+0x8b8>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a83      	ldr	r2, [pc, #524]	@ (8007ebc <HAL_DMA_IRQHandler+0xa54>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d036      	beq.n	8007d20 <HAL_DMA_IRQHandler+0x8b8>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a82      	ldr	r2, [pc, #520]	@ (8007ec0 <HAL_DMA_IRQHandler+0xa58>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d031      	beq.n	8007d20 <HAL_DMA_IRQHandler+0x8b8>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a80      	ldr	r2, [pc, #512]	@ (8007ec4 <HAL_DMA_IRQHandler+0xa5c>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d02c      	beq.n	8007d20 <HAL_DMA_IRQHandler+0x8b8>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a7f      	ldr	r2, [pc, #508]	@ (8007ec8 <HAL_DMA_IRQHandler+0xa60>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d027      	beq.n	8007d20 <HAL_DMA_IRQHandler+0x8b8>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a7d      	ldr	r2, [pc, #500]	@ (8007ecc <HAL_DMA_IRQHandler+0xa64>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d022      	beq.n	8007d20 <HAL_DMA_IRQHandler+0x8b8>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a7c      	ldr	r2, [pc, #496]	@ (8007ed0 <HAL_DMA_IRQHandler+0xa68>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d01d      	beq.n	8007d20 <HAL_DMA_IRQHandler+0x8b8>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a7a      	ldr	r2, [pc, #488]	@ (8007ed4 <HAL_DMA_IRQHandler+0xa6c>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d018      	beq.n	8007d20 <HAL_DMA_IRQHandler+0x8b8>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a79      	ldr	r2, [pc, #484]	@ (8007ed8 <HAL_DMA_IRQHandler+0xa70>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d013      	beq.n	8007d20 <HAL_DMA_IRQHandler+0x8b8>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a77      	ldr	r2, [pc, #476]	@ (8007edc <HAL_DMA_IRQHandler+0xa74>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d00e      	beq.n	8007d20 <HAL_DMA_IRQHandler+0x8b8>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a76      	ldr	r2, [pc, #472]	@ (8007ee0 <HAL_DMA_IRQHandler+0xa78>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d009      	beq.n	8007d20 <HAL_DMA_IRQHandler+0x8b8>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a74      	ldr	r2, [pc, #464]	@ (8007ee4 <HAL_DMA_IRQHandler+0xa7c>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d004      	beq.n	8007d20 <HAL_DMA_IRQHandler+0x8b8>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a73      	ldr	r2, [pc, #460]	@ (8007ee8 <HAL_DMA_IRQHandler+0xa80>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d108      	bne.n	8007d32 <HAL_DMA_IRQHandler+0x8ca>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f022 0201 	bic.w	r2, r2, #1
 8007d2e:	601a      	str	r2, [r3, #0]
 8007d30:	e007      	b.n	8007d42 <HAL_DMA_IRQHandler+0x8da>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f022 0201 	bic.w	r2, r2, #1
 8007d40:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	3301      	adds	r3, #1
 8007d46:	60fb      	str	r3, [r7, #12]
 8007d48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d307      	bcc.n	8007d5e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f003 0301 	and.w	r3, r3, #1
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d1f2      	bne.n	8007d42 <HAL_DMA_IRQHandler+0x8da>
 8007d5c:	e000      	b.n	8007d60 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007d5e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0301 	and.w	r3, r3, #1
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d004      	beq.n	8007d78 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2203      	movs	r2, #3
 8007d72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8007d76:	e003      	b.n	8007d80 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	f000 82aa 	beq.w	80082e6 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	4798      	blx	r3
 8007d9a:	e2a4      	b.n	80082e6 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a52      	ldr	r2, [pc, #328]	@ (8007eec <HAL_DMA_IRQHandler+0xa84>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d04a      	beq.n	8007e3c <HAL_DMA_IRQHandler+0x9d4>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a51      	ldr	r2, [pc, #324]	@ (8007ef0 <HAL_DMA_IRQHandler+0xa88>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d045      	beq.n	8007e3c <HAL_DMA_IRQHandler+0x9d4>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a4f      	ldr	r2, [pc, #316]	@ (8007ef4 <HAL_DMA_IRQHandler+0xa8c>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d040      	beq.n	8007e3c <HAL_DMA_IRQHandler+0x9d4>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a4e      	ldr	r2, [pc, #312]	@ (8007ef8 <HAL_DMA_IRQHandler+0xa90>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d03b      	beq.n	8007e3c <HAL_DMA_IRQHandler+0x9d4>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a4c      	ldr	r2, [pc, #304]	@ (8007efc <HAL_DMA_IRQHandler+0xa94>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d036      	beq.n	8007e3c <HAL_DMA_IRQHandler+0x9d4>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a4b      	ldr	r2, [pc, #300]	@ (8007f00 <HAL_DMA_IRQHandler+0xa98>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d031      	beq.n	8007e3c <HAL_DMA_IRQHandler+0x9d4>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a49      	ldr	r2, [pc, #292]	@ (8007f04 <HAL_DMA_IRQHandler+0xa9c>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d02c      	beq.n	8007e3c <HAL_DMA_IRQHandler+0x9d4>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a48      	ldr	r2, [pc, #288]	@ (8007f08 <HAL_DMA_IRQHandler+0xaa0>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d027      	beq.n	8007e3c <HAL_DMA_IRQHandler+0x9d4>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a46      	ldr	r2, [pc, #280]	@ (8007f0c <HAL_DMA_IRQHandler+0xaa4>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d022      	beq.n	8007e3c <HAL_DMA_IRQHandler+0x9d4>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a45      	ldr	r2, [pc, #276]	@ (8007f10 <HAL_DMA_IRQHandler+0xaa8>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d01d      	beq.n	8007e3c <HAL_DMA_IRQHandler+0x9d4>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a43      	ldr	r2, [pc, #268]	@ (8007f14 <HAL_DMA_IRQHandler+0xaac>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d018      	beq.n	8007e3c <HAL_DMA_IRQHandler+0x9d4>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a42      	ldr	r2, [pc, #264]	@ (8007f18 <HAL_DMA_IRQHandler+0xab0>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d013      	beq.n	8007e3c <HAL_DMA_IRQHandler+0x9d4>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a40      	ldr	r2, [pc, #256]	@ (8007f1c <HAL_DMA_IRQHandler+0xab4>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d00e      	beq.n	8007e3c <HAL_DMA_IRQHandler+0x9d4>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a3f      	ldr	r2, [pc, #252]	@ (8007f20 <HAL_DMA_IRQHandler+0xab8>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d009      	beq.n	8007e3c <HAL_DMA_IRQHandler+0x9d4>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a3d      	ldr	r2, [pc, #244]	@ (8007f24 <HAL_DMA_IRQHandler+0xabc>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d004      	beq.n	8007e3c <HAL_DMA_IRQHandler+0x9d4>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a3c      	ldr	r2, [pc, #240]	@ (8007f28 <HAL_DMA_IRQHandler+0xac0>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d101      	bne.n	8007e40 <HAL_DMA_IRQHandler+0x9d8>
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e000      	b.n	8007e42 <HAL_DMA_IRQHandler+0x9da>
 8007e40:	2300      	movs	r3, #0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	f000 824f 	beq.w	80082e6 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e54:	f003 031f 	and.w	r3, r3, #31
 8007e58:	2204      	movs	r2, #4
 8007e5a:	409a      	lsls	r2, r3
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	4013      	ands	r3, r2
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f000 80dd 	beq.w	8008020 <HAL_DMA_IRQHandler+0xbb8>
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	f003 0304 	and.w	r3, r3, #4
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f000 80d7 	beq.w	8008020 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e76:	f003 031f 	and.w	r3, r3, #31
 8007e7a:	2204      	movs	r2, #4
 8007e7c:	409a      	lsls	r2, r3
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d059      	beq.n	8007f40 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d14a      	bne.n	8007f2c <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f000 8220 	beq.w	80082e0 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ea8:	e21a      	b.n	80082e0 <HAL_DMA_IRQHandler+0xe78>
 8007eaa:	bf00      	nop
 8007eac:	40020010 	.word	0x40020010
 8007eb0:	40020028 	.word	0x40020028
 8007eb4:	40020040 	.word	0x40020040
 8007eb8:	40020058 	.word	0x40020058
 8007ebc:	40020070 	.word	0x40020070
 8007ec0:	40020088 	.word	0x40020088
 8007ec4:	400200a0 	.word	0x400200a0
 8007ec8:	400200b8 	.word	0x400200b8
 8007ecc:	40020410 	.word	0x40020410
 8007ed0:	40020428 	.word	0x40020428
 8007ed4:	40020440 	.word	0x40020440
 8007ed8:	40020458 	.word	0x40020458
 8007edc:	40020470 	.word	0x40020470
 8007ee0:	40020488 	.word	0x40020488
 8007ee4:	400204a0 	.word	0x400204a0
 8007ee8:	400204b8 	.word	0x400204b8
 8007eec:	48022c08 	.word	0x48022c08
 8007ef0:	48022c1c 	.word	0x48022c1c
 8007ef4:	48022c30 	.word	0x48022c30
 8007ef8:	48022c44 	.word	0x48022c44
 8007efc:	48022c58 	.word	0x48022c58
 8007f00:	48022c6c 	.word	0x48022c6c
 8007f04:	48022c80 	.word	0x48022c80
 8007f08:	48022c94 	.word	0x48022c94
 8007f0c:	58025408 	.word	0x58025408
 8007f10:	5802541c 	.word	0x5802541c
 8007f14:	58025430 	.word	0x58025430
 8007f18:	58025444 	.word	0x58025444
 8007f1c:	58025458 	.word	0x58025458
 8007f20:	5802546c 	.word	0x5802546c
 8007f24:	58025480 	.word	0x58025480
 8007f28:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	f000 81d5 	beq.w	80082e0 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f3e:	e1cf      	b.n	80082e0 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	f003 0320 	and.w	r3, r3, #32
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d160      	bne.n	800800c <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a7f      	ldr	r2, [pc, #508]	@ (800814c <HAL_DMA_IRQHandler+0xce4>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d04a      	beq.n	8007fea <HAL_DMA_IRQHandler+0xb82>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a7d      	ldr	r2, [pc, #500]	@ (8008150 <HAL_DMA_IRQHandler+0xce8>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d045      	beq.n	8007fea <HAL_DMA_IRQHandler+0xb82>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a7c      	ldr	r2, [pc, #496]	@ (8008154 <HAL_DMA_IRQHandler+0xcec>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d040      	beq.n	8007fea <HAL_DMA_IRQHandler+0xb82>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a7a      	ldr	r2, [pc, #488]	@ (8008158 <HAL_DMA_IRQHandler+0xcf0>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d03b      	beq.n	8007fea <HAL_DMA_IRQHandler+0xb82>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a79      	ldr	r2, [pc, #484]	@ (800815c <HAL_DMA_IRQHandler+0xcf4>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d036      	beq.n	8007fea <HAL_DMA_IRQHandler+0xb82>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a77      	ldr	r2, [pc, #476]	@ (8008160 <HAL_DMA_IRQHandler+0xcf8>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d031      	beq.n	8007fea <HAL_DMA_IRQHandler+0xb82>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a76      	ldr	r2, [pc, #472]	@ (8008164 <HAL_DMA_IRQHandler+0xcfc>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d02c      	beq.n	8007fea <HAL_DMA_IRQHandler+0xb82>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a74      	ldr	r2, [pc, #464]	@ (8008168 <HAL_DMA_IRQHandler+0xd00>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d027      	beq.n	8007fea <HAL_DMA_IRQHandler+0xb82>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a73      	ldr	r2, [pc, #460]	@ (800816c <HAL_DMA_IRQHandler+0xd04>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d022      	beq.n	8007fea <HAL_DMA_IRQHandler+0xb82>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a71      	ldr	r2, [pc, #452]	@ (8008170 <HAL_DMA_IRQHandler+0xd08>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d01d      	beq.n	8007fea <HAL_DMA_IRQHandler+0xb82>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a70      	ldr	r2, [pc, #448]	@ (8008174 <HAL_DMA_IRQHandler+0xd0c>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d018      	beq.n	8007fea <HAL_DMA_IRQHandler+0xb82>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a6e      	ldr	r2, [pc, #440]	@ (8008178 <HAL_DMA_IRQHandler+0xd10>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d013      	beq.n	8007fea <HAL_DMA_IRQHandler+0xb82>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a6d      	ldr	r2, [pc, #436]	@ (800817c <HAL_DMA_IRQHandler+0xd14>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d00e      	beq.n	8007fea <HAL_DMA_IRQHandler+0xb82>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a6b      	ldr	r2, [pc, #428]	@ (8008180 <HAL_DMA_IRQHandler+0xd18>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d009      	beq.n	8007fea <HAL_DMA_IRQHandler+0xb82>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a6a      	ldr	r2, [pc, #424]	@ (8008184 <HAL_DMA_IRQHandler+0xd1c>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d004      	beq.n	8007fea <HAL_DMA_IRQHandler+0xb82>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a68      	ldr	r2, [pc, #416]	@ (8008188 <HAL_DMA_IRQHandler+0xd20>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d108      	bne.n	8007ffc <HAL_DMA_IRQHandler+0xb94>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f022 0208 	bic.w	r2, r2, #8
 8007ff8:	601a      	str	r2, [r3, #0]
 8007ffa:	e007      	b.n	800800c <HAL_DMA_IRQHandler+0xba4>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f022 0204 	bic.w	r2, r2, #4
 800800a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008010:	2b00      	cmp	r3, #0
 8008012:	f000 8165 	beq.w	80082e0 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800801e:	e15f      	b.n	80082e0 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008024:	f003 031f 	and.w	r3, r3, #31
 8008028:	2202      	movs	r2, #2
 800802a:	409a      	lsls	r2, r3
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	4013      	ands	r3, r2
 8008030:	2b00      	cmp	r3, #0
 8008032:	f000 80c5 	beq.w	80081c0 <HAL_DMA_IRQHandler+0xd58>
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	f003 0302 	and.w	r3, r3, #2
 800803c:	2b00      	cmp	r3, #0
 800803e:	f000 80bf 	beq.w	80081c0 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008046:	f003 031f 	and.w	r3, r3, #31
 800804a:	2202      	movs	r2, #2
 800804c:	409a      	lsls	r2, r3
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008058:	2b00      	cmp	r3, #0
 800805a:	d018      	beq.n	800808e <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008062:	2b00      	cmp	r3, #0
 8008064:	d109      	bne.n	800807a <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800806a:	2b00      	cmp	r3, #0
 800806c:	f000 813a 	beq.w	80082e4 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008078:	e134      	b.n	80082e4 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800807e:	2b00      	cmp	r3, #0
 8008080:	f000 8130 	beq.w	80082e4 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800808c:	e12a      	b.n	80082e4 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	f003 0320 	and.w	r3, r3, #32
 8008094:	2b00      	cmp	r3, #0
 8008096:	f040 8089 	bne.w	80081ac <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a2b      	ldr	r2, [pc, #172]	@ (800814c <HAL_DMA_IRQHandler+0xce4>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d04a      	beq.n	800813a <HAL_DMA_IRQHandler+0xcd2>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a29      	ldr	r2, [pc, #164]	@ (8008150 <HAL_DMA_IRQHandler+0xce8>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d045      	beq.n	800813a <HAL_DMA_IRQHandler+0xcd2>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a28      	ldr	r2, [pc, #160]	@ (8008154 <HAL_DMA_IRQHandler+0xcec>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d040      	beq.n	800813a <HAL_DMA_IRQHandler+0xcd2>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a26      	ldr	r2, [pc, #152]	@ (8008158 <HAL_DMA_IRQHandler+0xcf0>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d03b      	beq.n	800813a <HAL_DMA_IRQHandler+0xcd2>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a25      	ldr	r2, [pc, #148]	@ (800815c <HAL_DMA_IRQHandler+0xcf4>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d036      	beq.n	800813a <HAL_DMA_IRQHandler+0xcd2>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a23      	ldr	r2, [pc, #140]	@ (8008160 <HAL_DMA_IRQHandler+0xcf8>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d031      	beq.n	800813a <HAL_DMA_IRQHandler+0xcd2>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a22      	ldr	r2, [pc, #136]	@ (8008164 <HAL_DMA_IRQHandler+0xcfc>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d02c      	beq.n	800813a <HAL_DMA_IRQHandler+0xcd2>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a20      	ldr	r2, [pc, #128]	@ (8008168 <HAL_DMA_IRQHandler+0xd00>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d027      	beq.n	800813a <HAL_DMA_IRQHandler+0xcd2>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a1f      	ldr	r2, [pc, #124]	@ (800816c <HAL_DMA_IRQHandler+0xd04>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d022      	beq.n	800813a <HAL_DMA_IRQHandler+0xcd2>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a1d      	ldr	r2, [pc, #116]	@ (8008170 <HAL_DMA_IRQHandler+0xd08>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d01d      	beq.n	800813a <HAL_DMA_IRQHandler+0xcd2>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a1c      	ldr	r2, [pc, #112]	@ (8008174 <HAL_DMA_IRQHandler+0xd0c>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d018      	beq.n	800813a <HAL_DMA_IRQHandler+0xcd2>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a1a      	ldr	r2, [pc, #104]	@ (8008178 <HAL_DMA_IRQHandler+0xd10>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d013      	beq.n	800813a <HAL_DMA_IRQHandler+0xcd2>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a19      	ldr	r2, [pc, #100]	@ (800817c <HAL_DMA_IRQHandler+0xd14>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d00e      	beq.n	800813a <HAL_DMA_IRQHandler+0xcd2>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a17      	ldr	r2, [pc, #92]	@ (8008180 <HAL_DMA_IRQHandler+0xd18>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d009      	beq.n	800813a <HAL_DMA_IRQHandler+0xcd2>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a16      	ldr	r2, [pc, #88]	@ (8008184 <HAL_DMA_IRQHandler+0xd1c>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d004      	beq.n	800813a <HAL_DMA_IRQHandler+0xcd2>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a14      	ldr	r2, [pc, #80]	@ (8008188 <HAL_DMA_IRQHandler+0xd20>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d128      	bne.n	800818c <HAL_DMA_IRQHandler+0xd24>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f022 0214 	bic.w	r2, r2, #20
 8008148:	601a      	str	r2, [r3, #0]
 800814a:	e027      	b.n	800819c <HAL_DMA_IRQHandler+0xd34>
 800814c:	40020010 	.word	0x40020010
 8008150:	40020028 	.word	0x40020028
 8008154:	40020040 	.word	0x40020040
 8008158:	40020058 	.word	0x40020058
 800815c:	40020070 	.word	0x40020070
 8008160:	40020088 	.word	0x40020088
 8008164:	400200a0 	.word	0x400200a0
 8008168:	400200b8 	.word	0x400200b8
 800816c:	40020410 	.word	0x40020410
 8008170:	40020428 	.word	0x40020428
 8008174:	40020440 	.word	0x40020440
 8008178:	40020458 	.word	0x40020458
 800817c:	40020470 	.word	0x40020470
 8008180:	40020488 	.word	0x40020488
 8008184:	400204a0 	.word	0x400204a0
 8008188:	400204b8 	.word	0x400204b8
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f022 020a 	bic.w	r2, r2, #10
 800819a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f000 8097 	beq.w	80082e4 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80081be:	e091      	b.n	80082e4 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081c4:	f003 031f 	and.w	r3, r3, #31
 80081c8:	2208      	movs	r2, #8
 80081ca:	409a      	lsls	r2, r3
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	4013      	ands	r3, r2
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	f000 8088 	beq.w	80082e6 <HAL_DMA_IRQHandler+0xe7e>
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	f003 0308 	and.w	r3, r3, #8
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f000 8082 	beq.w	80082e6 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a41      	ldr	r2, [pc, #260]	@ (80082ec <HAL_DMA_IRQHandler+0xe84>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d04a      	beq.n	8008282 <HAL_DMA_IRQHandler+0xe1a>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a3f      	ldr	r2, [pc, #252]	@ (80082f0 <HAL_DMA_IRQHandler+0xe88>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d045      	beq.n	8008282 <HAL_DMA_IRQHandler+0xe1a>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a3e      	ldr	r2, [pc, #248]	@ (80082f4 <HAL_DMA_IRQHandler+0xe8c>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d040      	beq.n	8008282 <HAL_DMA_IRQHandler+0xe1a>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a3c      	ldr	r2, [pc, #240]	@ (80082f8 <HAL_DMA_IRQHandler+0xe90>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d03b      	beq.n	8008282 <HAL_DMA_IRQHandler+0xe1a>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a3b      	ldr	r2, [pc, #236]	@ (80082fc <HAL_DMA_IRQHandler+0xe94>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d036      	beq.n	8008282 <HAL_DMA_IRQHandler+0xe1a>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a39      	ldr	r2, [pc, #228]	@ (8008300 <HAL_DMA_IRQHandler+0xe98>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d031      	beq.n	8008282 <HAL_DMA_IRQHandler+0xe1a>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a38      	ldr	r2, [pc, #224]	@ (8008304 <HAL_DMA_IRQHandler+0xe9c>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d02c      	beq.n	8008282 <HAL_DMA_IRQHandler+0xe1a>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a36      	ldr	r2, [pc, #216]	@ (8008308 <HAL_DMA_IRQHandler+0xea0>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d027      	beq.n	8008282 <HAL_DMA_IRQHandler+0xe1a>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a35      	ldr	r2, [pc, #212]	@ (800830c <HAL_DMA_IRQHandler+0xea4>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d022      	beq.n	8008282 <HAL_DMA_IRQHandler+0xe1a>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a33      	ldr	r2, [pc, #204]	@ (8008310 <HAL_DMA_IRQHandler+0xea8>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d01d      	beq.n	8008282 <HAL_DMA_IRQHandler+0xe1a>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a32      	ldr	r2, [pc, #200]	@ (8008314 <HAL_DMA_IRQHandler+0xeac>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d018      	beq.n	8008282 <HAL_DMA_IRQHandler+0xe1a>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a30      	ldr	r2, [pc, #192]	@ (8008318 <HAL_DMA_IRQHandler+0xeb0>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d013      	beq.n	8008282 <HAL_DMA_IRQHandler+0xe1a>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a2f      	ldr	r2, [pc, #188]	@ (800831c <HAL_DMA_IRQHandler+0xeb4>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d00e      	beq.n	8008282 <HAL_DMA_IRQHandler+0xe1a>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a2d      	ldr	r2, [pc, #180]	@ (8008320 <HAL_DMA_IRQHandler+0xeb8>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d009      	beq.n	8008282 <HAL_DMA_IRQHandler+0xe1a>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a2c      	ldr	r2, [pc, #176]	@ (8008324 <HAL_DMA_IRQHandler+0xebc>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d004      	beq.n	8008282 <HAL_DMA_IRQHandler+0xe1a>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a2a      	ldr	r2, [pc, #168]	@ (8008328 <HAL_DMA_IRQHandler+0xec0>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d108      	bne.n	8008294 <HAL_DMA_IRQHandler+0xe2c>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f022 021c 	bic.w	r2, r2, #28
 8008290:	601a      	str	r2, [r3, #0]
 8008292:	e007      	b.n	80082a4 <HAL_DMA_IRQHandler+0xe3c>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f022 020e 	bic.w	r2, r2, #14
 80082a2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082a8:	f003 031f 	and.w	r3, r3, #31
 80082ac:	2201      	movs	r2, #1
 80082ae:	409a      	lsls	r2, r3
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2201      	movs	r2, #1
 80082be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d009      	beq.n	80082e6 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	4798      	blx	r3
 80082da:	e004      	b.n	80082e6 <HAL_DMA_IRQHandler+0xe7e>
          return;
 80082dc:	bf00      	nop
 80082de:	e002      	b.n	80082e6 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082e0:	bf00      	nop
 80082e2:	e000      	b.n	80082e6 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082e4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80082e6:	3728      	adds	r7, #40	@ 0x28
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	40020010 	.word	0x40020010
 80082f0:	40020028 	.word	0x40020028
 80082f4:	40020040 	.word	0x40020040
 80082f8:	40020058 	.word	0x40020058
 80082fc:	40020070 	.word	0x40020070
 8008300:	40020088 	.word	0x40020088
 8008304:	400200a0 	.word	0x400200a0
 8008308:	400200b8 	.word	0x400200b8
 800830c:	40020410 	.word	0x40020410
 8008310:	40020428 	.word	0x40020428
 8008314:	40020440 	.word	0x40020440
 8008318:	40020458 	.word	0x40020458
 800831c:	40020470 	.word	0x40020470
 8008320:	40020488 	.word	0x40020488
 8008324:	400204a0 	.word	0x400204a0
 8008328:	400204b8 	.word	0x400204b8

0800832c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8008338:	4618      	mov	r0, r3
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008344:	b480      	push	{r7}
 8008346:	b087      	sub	sp, #28
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
 8008350:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008356:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800835c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a7f      	ldr	r2, [pc, #508]	@ (8008560 <DMA_SetConfig+0x21c>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d072      	beq.n	800844e <DMA_SetConfig+0x10a>
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a7d      	ldr	r2, [pc, #500]	@ (8008564 <DMA_SetConfig+0x220>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d06d      	beq.n	800844e <DMA_SetConfig+0x10a>
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a7c      	ldr	r2, [pc, #496]	@ (8008568 <DMA_SetConfig+0x224>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d068      	beq.n	800844e <DMA_SetConfig+0x10a>
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a7a      	ldr	r2, [pc, #488]	@ (800856c <DMA_SetConfig+0x228>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d063      	beq.n	800844e <DMA_SetConfig+0x10a>
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a79      	ldr	r2, [pc, #484]	@ (8008570 <DMA_SetConfig+0x22c>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d05e      	beq.n	800844e <DMA_SetConfig+0x10a>
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a77      	ldr	r2, [pc, #476]	@ (8008574 <DMA_SetConfig+0x230>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d059      	beq.n	800844e <DMA_SetConfig+0x10a>
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a76      	ldr	r2, [pc, #472]	@ (8008578 <DMA_SetConfig+0x234>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d054      	beq.n	800844e <DMA_SetConfig+0x10a>
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a74      	ldr	r2, [pc, #464]	@ (800857c <DMA_SetConfig+0x238>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d04f      	beq.n	800844e <DMA_SetConfig+0x10a>
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a73      	ldr	r2, [pc, #460]	@ (8008580 <DMA_SetConfig+0x23c>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d04a      	beq.n	800844e <DMA_SetConfig+0x10a>
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a71      	ldr	r2, [pc, #452]	@ (8008584 <DMA_SetConfig+0x240>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d045      	beq.n	800844e <DMA_SetConfig+0x10a>
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a70      	ldr	r2, [pc, #448]	@ (8008588 <DMA_SetConfig+0x244>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d040      	beq.n	800844e <DMA_SetConfig+0x10a>
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a6e      	ldr	r2, [pc, #440]	@ (800858c <DMA_SetConfig+0x248>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d03b      	beq.n	800844e <DMA_SetConfig+0x10a>
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a6d      	ldr	r2, [pc, #436]	@ (8008590 <DMA_SetConfig+0x24c>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d036      	beq.n	800844e <DMA_SetConfig+0x10a>
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a6b      	ldr	r2, [pc, #428]	@ (8008594 <DMA_SetConfig+0x250>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d031      	beq.n	800844e <DMA_SetConfig+0x10a>
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a6a      	ldr	r2, [pc, #424]	@ (8008598 <DMA_SetConfig+0x254>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d02c      	beq.n	800844e <DMA_SetConfig+0x10a>
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a68      	ldr	r2, [pc, #416]	@ (800859c <DMA_SetConfig+0x258>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d027      	beq.n	800844e <DMA_SetConfig+0x10a>
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a67      	ldr	r2, [pc, #412]	@ (80085a0 <DMA_SetConfig+0x25c>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d022      	beq.n	800844e <DMA_SetConfig+0x10a>
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a65      	ldr	r2, [pc, #404]	@ (80085a4 <DMA_SetConfig+0x260>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d01d      	beq.n	800844e <DMA_SetConfig+0x10a>
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a64      	ldr	r2, [pc, #400]	@ (80085a8 <DMA_SetConfig+0x264>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d018      	beq.n	800844e <DMA_SetConfig+0x10a>
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a62      	ldr	r2, [pc, #392]	@ (80085ac <DMA_SetConfig+0x268>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d013      	beq.n	800844e <DMA_SetConfig+0x10a>
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a61      	ldr	r2, [pc, #388]	@ (80085b0 <DMA_SetConfig+0x26c>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d00e      	beq.n	800844e <DMA_SetConfig+0x10a>
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a5f      	ldr	r2, [pc, #380]	@ (80085b4 <DMA_SetConfig+0x270>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d009      	beq.n	800844e <DMA_SetConfig+0x10a>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a5e      	ldr	r2, [pc, #376]	@ (80085b8 <DMA_SetConfig+0x274>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d004      	beq.n	800844e <DMA_SetConfig+0x10a>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a5c      	ldr	r2, [pc, #368]	@ (80085bc <DMA_SetConfig+0x278>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d101      	bne.n	8008452 <DMA_SetConfig+0x10e>
 800844e:	2301      	movs	r3, #1
 8008450:	e000      	b.n	8008454 <DMA_SetConfig+0x110>
 8008452:	2300      	movs	r3, #0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d00d      	beq.n	8008474 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800845c:	68fa      	ldr	r2, [r7, #12]
 800845e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008460:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008466:	2b00      	cmp	r3, #0
 8008468:	d004      	beq.n	8008474 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800846e:	68fa      	ldr	r2, [r7, #12]
 8008470:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008472:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a39      	ldr	r2, [pc, #228]	@ (8008560 <DMA_SetConfig+0x21c>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d04a      	beq.n	8008514 <DMA_SetConfig+0x1d0>
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a38      	ldr	r2, [pc, #224]	@ (8008564 <DMA_SetConfig+0x220>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d045      	beq.n	8008514 <DMA_SetConfig+0x1d0>
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a36      	ldr	r2, [pc, #216]	@ (8008568 <DMA_SetConfig+0x224>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d040      	beq.n	8008514 <DMA_SetConfig+0x1d0>
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a35      	ldr	r2, [pc, #212]	@ (800856c <DMA_SetConfig+0x228>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d03b      	beq.n	8008514 <DMA_SetConfig+0x1d0>
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a33      	ldr	r2, [pc, #204]	@ (8008570 <DMA_SetConfig+0x22c>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d036      	beq.n	8008514 <DMA_SetConfig+0x1d0>
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a32      	ldr	r2, [pc, #200]	@ (8008574 <DMA_SetConfig+0x230>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d031      	beq.n	8008514 <DMA_SetConfig+0x1d0>
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a30      	ldr	r2, [pc, #192]	@ (8008578 <DMA_SetConfig+0x234>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d02c      	beq.n	8008514 <DMA_SetConfig+0x1d0>
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a2f      	ldr	r2, [pc, #188]	@ (800857c <DMA_SetConfig+0x238>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d027      	beq.n	8008514 <DMA_SetConfig+0x1d0>
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a2d      	ldr	r2, [pc, #180]	@ (8008580 <DMA_SetConfig+0x23c>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d022      	beq.n	8008514 <DMA_SetConfig+0x1d0>
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a2c      	ldr	r2, [pc, #176]	@ (8008584 <DMA_SetConfig+0x240>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d01d      	beq.n	8008514 <DMA_SetConfig+0x1d0>
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a2a      	ldr	r2, [pc, #168]	@ (8008588 <DMA_SetConfig+0x244>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d018      	beq.n	8008514 <DMA_SetConfig+0x1d0>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a29      	ldr	r2, [pc, #164]	@ (800858c <DMA_SetConfig+0x248>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d013      	beq.n	8008514 <DMA_SetConfig+0x1d0>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a27      	ldr	r2, [pc, #156]	@ (8008590 <DMA_SetConfig+0x24c>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d00e      	beq.n	8008514 <DMA_SetConfig+0x1d0>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a26      	ldr	r2, [pc, #152]	@ (8008594 <DMA_SetConfig+0x250>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d009      	beq.n	8008514 <DMA_SetConfig+0x1d0>
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a24      	ldr	r2, [pc, #144]	@ (8008598 <DMA_SetConfig+0x254>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d004      	beq.n	8008514 <DMA_SetConfig+0x1d0>
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a23      	ldr	r2, [pc, #140]	@ (800859c <DMA_SetConfig+0x258>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d101      	bne.n	8008518 <DMA_SetConfig+0x1d4>
 8008514:	2301      	movs	r3, #1
 8008516:	e000      	b.n	800851a <DMA_SetConfig+0x1d6>
 8008518:	2300      	movs	r3, #0
 800851a:	2b00      	cmp	r3, #0
 800851c:	d059      	beq.n	80085d2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008522:	f003 031f 	and.w	r3, r3, #31
 8008526:	223f      	movs	r2, #63	@ 0x3f
 8008528:	409a      	lsls	r2, r3
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800853c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	683a      	ldr	r2, [r7, #0]
 8008544:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	2b40      	cmp	r3, #64	@ 0x40
 800854c:	d138      	bne.n	80085c0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	68ba      	ldr	r2, [r7, #8]
 800855c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800855e:	e0ae      	b.n	80086be <DMA_SetConfig+0x37a>
 8008560:	40020010 	.word	0x40020010
 8008564:	40020028 	.word	0x40020028
 8008568:	40020040 	.word	0x40020040
 800856c:	40020058 	.word	0x40020058
 8008570:	40020070 	.word	0x40020070
 8008574:	40020088 	.word	0x40020088
 8008578:	400200a0 	.word	0x400200a0
 800857c:	400200b8 	.word	0x400200b8
 8008580:	40020410 	.word	0x40020410
 8008584:	40020428 	.word	0x40020428
 8008588:	40020440 	.word	0x40020440
 800858c:	40020458 	.word	0x40020458
 8008590:	40020470 	.word	0x40020470
 8008594:	40020488 	.word	0x40020488
 8008598:	400204a0 	.word	0x400204a0
 800859c:	400204b8 	.word	0x400204b8
 80085a0:	58025408 	.word	0x58025408
 80085a4:	5802541c 	.word	0x5802541c
 80085a8:	58025430 	.word	0x58025430
 80085ac:	58025444 	.word	0x58025444
 80085b0:	58025458 	.word	0x58025458
 80085b4:	5802546c 	.word	0x5802546c
 80085b8:	58025480 	.word	0x58025480
 80085bc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	68ba      	ldr	r2, [r7, #8]
 80085c6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	60da      	str	r2, [r3, #12]
}
 80085d0:	e075      	b.n	80086be <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a3d      	ldr	r2, [pc, #244]	@ (80086cc <DMA_SetConfig+0x388>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d04a      	beq.n	8008672 <DMA_SetConfig+0x32e>
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a3b      	ldr	r2, [pc, #236]	@ (80086d0 <DMA_SetConfig+0x38c>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d045      	beq.n	8008672 <DMA_SetConfig+0x32e>
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a3a      	ldr	r2, [pc, #232]	@ (80086d4 <DMA_SetConfig+0x390>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d040      	beq.n	8008672 <DMA_SetConfig+0x32e>
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a38      	ldr	r2, [pc, #224]	@ (80086d8 <DMA_SetConfig+0x394>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d03b      	beq.n	8008672 <DMA_SetConfig+0x32e>
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a37      	ldr	r2, [pc, #220]	@ (80086dc <DMA_SetConfig+0x398>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d036      	beq.n	8008672 <DMA_SetConfig+0x32e>
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a35      	ldr	r2, [pc, #212]	@ (80086e0 <DMA_SetConfig+0x39c>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d031      	beq.n	8008672 <DMA_SetConfig+0x32e>
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a34      	ldr	r2, [pc, #208]	@ (80086e4 <DMA_SetConfig+0x3a0>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d02c      	beq.n	8008672 <DMA_SetConfig+0x32e>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a32      	ldr	r2, [pc, #200]	@ (80086e8 <DMA_SetConfig+0x3a4>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d027      	beq.n	8008672 <DMA_SetConfig+0x32e>
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a31      	ldr	r2, [pc, #196]	@ (80086ec <DMA_SetConfig+0x3a8>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d022      	beq.n	8008672 <DMA_SetConfig+0x32e>
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a2f      	ldr	r2, [pc, #188]	@ (80086f0 <DMA_SetConfig+0x3ac>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d01d      	beq.n	8008672 <DMA_SetConfig+0x32e>
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a2e      	ldr	r2, [pc, #184]	@ (80086f4 <DMA_SetConfig+0x3b0>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d018      	beq.n	8008672 <DMA_SetConfig+0x32e>
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a2c      	ldr	r2, [pc, #176]	@ (80086f8 <DMA_SetConfig+0x3b4>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d013      	beq.n	8008672 <DMA_SetConfig+0x32e>
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a2b      	ldr	r2, [pc, #172]	@ (80086fc <DMA_SetConfig+0x3b8>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d00e      	beq.n	8008672 <DMA_SetConfig+0x32e>
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a29      	ldr	r2, [pc, #164]	@ (8008700 <DMA_SetConfig+0x3bc>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d009      	beq.n	8008672 <DMA_SetConfig+0x32e>
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a28      	ldr	r2, [pc, #160]	@ (8008704 <DMA_SetConfig+0x3c0>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d004      	beq.n	8008672 <DMA_SetConfig+0x32e>
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a26      	ldr	r2, [pc, #152]	@ (8008708 <DMA_SetConfig+0x3c4>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d101      	bne.n	8008676 <DMA_SetConfig+0x332>
 8008672:	2301      	movs	r3, #1
 8008674:	e000      	b.n	8008678 <DMA_SetConfig+0x334>
 8008676:	2300      	movs	r3, #0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d020      	beq.n	80086be <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008680:	f003 031f 	and.w	r3, r3, #31
 8008684:	2201      	movs	r2, #1
 8008686:	409a      	lsls	r2, r3
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	683a      	ldr	r2, [r7, #0]
 8008692:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	2b40      	cmp	r3, #64	@ 0x40
 800869a:	d108      	bne.n	80086ae <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68ba      	ldr	r2, [r7, #8]
 80086aa:	60da      	str	r2, [r3, #12]
}
 80086ac:	e007      	b.n	80086be <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	68ba      	ldr	r2, [r7, #8]
 80086b4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	60da      	str	r2, [r3, #12]
}
 80086be:	bf00      	nop
 80086c0:	371c      	adds	r7, #28
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop
 80086cc:	48022c08 	.word	0x48022c08
 80086d0:	48022c1c 	.word	0x48022c1c
 80086d4:	48022c30 	.word	0x48022c30
 80086d8:	48022c44 	.word	0x48022c44
 80086dc:	48022c58 	.word	0x48022c58
 80086e0:	48022c6c 	.word	0x48022c6c
 80086e4:	48022c80 	.word	0x48022c80
 80086e8:	48022c94 	.word	0x48022c94
 80086ec:	58025408 	.word	0x58025408
 80086f0:	5802541c 	.word	0x5802541c
 80086f4:	58025430 	.word	0x58025430
 80086f8:	58025444 	.word	0x58025444
 80086fc:	58025458 	.word	0x58025458
 8008700:	5802546c 	.word	0x5802546c
 8008704:	58025480 	.word	0x58025480
 8008708:	58025494 	.word	0x58025494

0800870c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a42      	ldr	r2, [pc, #264]	@ (8008824 <DMA_CalcBaseAndBitshift+0x118>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d04a      	beq.n	80087b4 <DMA_CalcBaseAndBitshift+0xa8>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a41      	ldr	r2, [pc, #260]	@ (8008828 <DMA_CalcBaseAndBitshift+0x11c>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d045      	beq.n	80087b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a3f      	ldr	r2, [pc, #252]	@ (800882c <DMA_CalcBaseAndBitshift+0x120>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d040      	beq.n	80087b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a3e      	ldr	r2, [pc, #248]	@ (8008830 <DMA_CalcBaseAndBitshift+0x124>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d03b      	beq.n	80087b4 <DMA_CalcBaseAndBitshift+0xa8>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a3c      	ldr	r2, [pc, #240]	@ (8008834 <DMA_CalcBaseAndBitshift+0x128>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d036      	beq.n	80087b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a3b      	ldr	r2, [pc, #236]	@ (8008838 <DMA_CalcBaseAndBitshift+0x12c>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d031      	beq.n	80087b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a39      	ldr	r2, [pc, #228]	@ (800883c <DMA_CalcBaseAndBitshift+0x130>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d02c      	beq.n	80087b4 <DMA_CalcBaseAndBitshift+0xa8>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a38      	ldr	r2, [pc, #224]	@ (8008840 <DMA_CalcBaseAndBitshift+0x134>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d027      	beq.n	80087b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a36      	ldr	r2, [pc, #216]	@ (8008844 <DMA_CalcBaseAndBitshift+0x138>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d022      	beq.n	80087b4 <DMA_CalcBaseAndBitshift+0xa8>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a35      	ldr	r2, [pc, #212]	@ (8008848 <DMA_CalcBaseAndBitshift+0x13c>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d01d      	beq.n	80087b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a33      	ldr	r2, [pc, #204]	@ (800884c <DMA_CalcBaseAndBitshift+0x140>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d018      	beq.n	80087b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a32      	ldr	r2, [pc, #200]	@ (8008850 <DMA_CalcBaseAndBitshift+0x144>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d013      	beq.n	80087b4 <DMA_CalcBaseAndBitshift+0xa8>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a30      	ldr	r2, [pc, #192]	@ (8008854 <DMA_CalcBaseAndBitshift+0x148>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d00e      	beq.n	80087b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a2f      	ldr	r2, [pc, #188]	@ (8008858 <DMA_CalcBaseAndBitshift+0x14c>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d009      	beq.n	80087b4 <DMA_CalcBaseAndBitshift+0xa8>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a2d      	ldr	r2, [pc, #180]	@ (800885c <DMA_CalcBaseAndBitshift+0x150>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d004      	beq.n	80087b4 <DMA_CalcBaseAndBitshift+0xa8>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a2c      	ldr	r2, [pc, #176]	@ (8008860 <DMA_CalcBaseAndBitshift+0x154>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d101      	bne.n	80087b8 <DMA_CalcBaseAndBitshift+0xac>
 80087b4:	2301      	movs	r3, #1
 80087b6:	e000      	b.n	80087ba <DMA_CalcBaseAndBitshift+0xae>
 80087b8:	2300      	movs	r3, #0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d024      	beq.n	8008808 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	3b10      	subs	r3, #16
 80087c6:	4a27      	ldr	r2, [pc, #156]	@ (8008864 <DMA_CalcBaseAndBitshift+0x158>)
 80087c8:	fba2 2303 	umull	r2, r3, r2, r3
 80087cc:	091b      	lsrs	r3, r3, #4
 80087ce:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f003 0307 	and.w	r3, r3, #7
 80087d6:	4a24      	ldr	r2, [pc, #144]	@ (8008868 <DMA_CalcBaseAndBitshift+0x15c>)
 80087d8:	5cd3      	ldrb	r3, [r2, r3]
 80087da:	461a      	mov	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2b03      	cmp	r3, #3
 80087e4:	d908      	bls.n	80087f8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	461a      	mov	r2, r3
 80087ec:	4b1f      	ldr	r3, [pc, #124]	@ (800886c <DMA_CalcBaseAndBitshift+0x160>)
 80087ee:	4013      	ands	r3, r2
 80087f0:	1d1a      	adds	r2, r3, #4
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	659a      	str	r2, [r3, #88]	@ 0x58
 80087f6:	e00d      	b.n	8008814 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	461a      	mov	r2, r3
 80087fe:	4b1b      	ldr	r3, [pc, #108]	@ (800886c <DMA_CalcBaseAndBitshift+0x160>)
 8008800:	4013      	ands	r3, r2
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	6593      	str	r3, [r2, #88]	@ 0x58
 8008806:	e005      	b.n	8008814 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8008818:	4618      	mov	r0, r3
 800881a:	3714      	adds	r7, #20
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr
 8008824:	40020010 	.word	0x40020010
 8008828:	40020028 	.word	0x40020028
 800882c:	40020040 	.word	0x40020040
 8008830:	40020058 	.word	0x40020058
 8008834:	40020070 	.word	0x40020070
 8008838:	40020088 	.word	0x40020088
 800883c:	400200a0 	.word	0x400200a0
 8008840:	400200b8 	.word	0x400200b8
 8008844:	40020410 	.word	0x40020410
 8008848:	40020428 	.word	0x40020428
 800884c:	40020440 	.word	0x40020440
 8008850:	40020458 	.word	0x40020458
 8008854:	40020470 	.word	0x40020470
 8008858:	40020488 	.word	0x40020488
 800885c:	400204a0 	.word	0x400204a0
 8008860:	400204b8 	.word	0x400204b8
 8008864:	aaaaaaab 	.word	0xaaaaaaab
 8008868:	08018ff4 	.word	0x08018ff4
 800886c:	fffffc00 	.word	0xfffffc00

08008870 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008870:	b480      	push	{r7}
 8008872:	b085      	sub	sp, #20
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008878:	2300      	movs	r3, #0
 800887a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	699b      	ldr	r3, [r3, #24]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d120      	bne.n	80088c6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008888:	2b03      	cmp	r3, #3
 800888a:	d858      	bhi.n	800893e <DMA_CheckFifoParam+0xce>
 800888c:	a201      	add	r2, pc, #4	@ (adr r2, 8008894 <DMA_CheckFifoParam+0x24>)
 800888e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008892:	bf00      	nop
 8008894:	080088a5 	.word	0x080088a5
 8008898:	080088b7 	.word	0x080088b7
 800889c:	080088a5 	.word	0x080088a5
 80088a0:	0800893f 	.word	0x0800893f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d048      	beq.n	8008942 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80088b4:	e045      	b.n	8008942 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80088be:	d142      	bne.n	8008946 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80088c4:	e03f      	b.n	8008946 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	699b      	ldr	r3, [r3, #24]
 80088ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088ce:	d123      	bne.n	8008918 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088d4:	2b03      	cmp	r3, #3
 80088d6:	d838      	bhi.n	800894a <DMA_CheckFifoParam+0xda>
 80088d8:	a201      	add	r2, pc, #4	@ (adr r2, 80088e0 <DMA_CheckFifoParam+0x70>)
 80088da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088de:	bf00      	nop
 80088e0:	080088f1 	.word	0x080088f1
 80088e4:	080088f7 	.word	0x080088f7
 80088e8:	080088f1 	.word	0x080088f1
 80088ec:	08008909 	.word	0x08008909
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	73fb      	strb	r3, [r7, #15]
        break;
 80088f4:	e030      	b.n	8008958 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d025      	beq.n	800894e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008906:	e022      	b.n	800894e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800890c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008910:	d11f      	bne.n	8008952 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008916:	e01c      	b.n	8008952 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800891c:	2b02      	cmp	r3, #2
 800891e:	d902      	bls.n	8008926 <DMA_CheckFifoParam+0xb6>
 8008920:	2b03      	cmp	r3, #3
 8008922:	d003      	beq.n	800892c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008924:	e018      	b.n	8008958 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	73fb      	strb	r3, [r7, #15]
        break;
 800892a:	e015      	b.n	8008958 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008930:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008934:	2b00      	cmp	r3, #0
 8008936:	d00e      	beq.n	8008956 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008938:	2301      	movs	r3, #1
 800893a:	73fb      	strb	r3, [r7, #15]
    break;
 800893c:	e00b      	b.n	8008956 <DMA_CheckFifoParam+0xe6>
        break;
 800893e:	bf00      	nop
 8008940:	e00a      	b.n	8008958 <DMA_CheckFifoParam+0xe8>
        break;
 8008942:	bf00      	nop
 8008944:	e008      	b.n	8008958 <DMA_CheckFifoParam+0xe8>
        break;
 8008946:	bf00      	nop
 8008948:	e006      	b.n	8008958 <DMA_CheckFifoParam+0xe8>
        break;
 800894a:	bf00      	nop
 800894c:	e004      	b.n	8008958 <DMA_CheckFifoParam+0xe8>
        break;
 800894e:	bf00      	nop
 8008950:	e002      	b.n	8008958 <DMA_CheckFifoParam+0xe8>
        break;
 8008952:	bf00      	nop
 8008954:	e000      	b.n	8008958 <DMA_CheckFifoParam+0xe8>
    break;
 8008956:	bf00      	nop
    }
  }

  return status;
 8008958:	7bfb      	ldrb	r3, [r7, #15]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3714      	adds	r7, #20
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr
 8008966:	bf00      	nop

08008968 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008968:	b480      	push	{r7}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a38      	ldr	r2, [pc, #224]	@ (8008a5c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d022      	beq.n	80089c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a36      	ldr	r2, [pc, #216]	@ (8008a60 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d01d      	beq.n	80089c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a35      	ldr	r2, [pc, #212]	@ (8008a64 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d018      	beq.n	80089c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a33      	ldr	r2, [pc, #204]	@ (8008a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d013      	beq.n	80089c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a32      	ldr	r2, [pc, #200]	@ (8008a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d00e      	beq.n	80089c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a30      	ldr	r2, [pc, #192]	@ (8008a70 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d009      	beq.n	80089c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a2f      	ldr	r2, [pc, #188]	@ (8008a74 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d004      	beq.n	80089c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a2d      	ldr	r2, [pc, #180]	@ (8008a78 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d101      	bne.n	80089ca <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80089c6:	2301      	movs	r3, #1
 80089c8:	e000      	b.n	80089cc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80089ca:	2300      	movs	r3, #0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d01a      	beq.n	8008a06 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	3b08      	subs	r3, #8
 80089d8:	4a28      	ldr	r2, [pc, #160]	@ (8008a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80089da:	fba2 2303 	umull	r2, r3, r2, r3
 80089de:	091b      	lsrs	r3, r3, #4
 80089e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	4b26      	ldr	r3, [pc, #152]	@ (8008a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80089e6:	4413      	add	r3, r2
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	461a      	mov	r2, r3
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a24      	ldr	r2, [pc, #144]	@ (8008a84 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80089f4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f003 031f 	and.w	r3, r3, #31
 80089fc:	2201      	movs	r2, #1
 80089fe:	409a      	lsls	r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008a04:	e024      	b.n	8008a50 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	3b10      	subs	r3, #16
 8008a0e:	4a1e      	ldr	r2, [pc, #120]	@ (8008a88 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008a10:	fba2 2303 	umull	r2, r3, r2, r3
 8008a14:	091b      	lsrs	r3, r3, #4
 8008a16:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	4a1c      	ldr	r2, [pc, #112]	@ (8008a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d806      	bhi.n	8008a2e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	4a1b      	ldr	r2, [pc, #108]	@ (8008a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d902      	bls.n	8008a2e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	3308      	adds	r3, #8
 8008a2c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	4b18      	ldr	r3, [pc, #96]	@ (8008a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008a32:	4413      	add	r3, r2
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	461a      	mov	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a16      	ldr	r2, [pc, #88]	@ (8008a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008a40:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f003 031f 	and.w	r3, r3, #31
 8008a48:	2201      	movs	r2, #1
 8008a4a:	409a      	lsls	r2, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008a50:	bf00      	nop
 8008a52:	3714      	adds	r7, #20
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr
 8008a5c:	58025408 	.word	0x58025408
 8008a60:	5802541c 	.word	0x5802541c
 8008a64:	58025430 	.word	0x58025430
 8008a68:	58025444 	.word	0x58025444
 8008a6c:	58025458 	.word	0x58025458
 8008a70:	5802546c 	.word	0x5802546c
 8008a74:	58025480 	.word	0x58025480
 8008a78:	58025494 	.word	0x58025494
 8008a7c:	cccccccd 	.word	0xcccccccd
 8008a80:	16009600 	.word	0x16009600
 8008a84:	58025880 	.word	0x58025880
 8008a88:	aaaaaaab 	.word	0xaaaaaaab
 8008a8c:	400204b8 	.word	0x400204b8
 8008a90:	4002040f 	.word	0x4002040f
 8008a94:	10008200 	.word	0x10008200
 8008a98:	40020880 	.word	0x40020880

08008a9c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d04a      	beq.n	8008b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2b08      	cmp	r3, #8
 8008ab6:	d847      	bhi.n	8008b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a25      	ldr	r2, [pc, #148]	@ (8008b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d022      	beq.n	8008b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a24      	ldr	r2, [pc, #144]	@ (8008b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d01d      	beq.n	8008b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a22      	ldr	r2, [pc, #136]	@ (8008b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d018      	beq.n	8008b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a21      	ldr	r2, [pc, #132]	@ (8008b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d013      	beq.n	8008b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a1f      	ldr	r2, [pc, #124]	@ (8008b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d00e      	beq.n	8008b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a1e      	ldr	r2, [pc, #120]	@ (8008b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d009      	beq.n	8008b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a1c      	ldr	r2, [pc, #112]	@ (8008b6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d004      	beq.n	8008b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a1b      	ldr	r2, [pc, #108]	@ (8008b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d101      	bne.n	8008b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e000      	b.n	8008b0e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d00a      	beq.n	8008b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	4b17      	ldr	r3, [pc, #92]	@ (8008b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008b16:	4413      	add	r3, r2
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4a15      	ldr	r2, [pc, #84]	@ (8008b78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008b24:	671a      	str	r2, [r3, #112]	@ 0x70
 8008b26:	e009      	b.n	8008b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	4b14      	ldr	r3, [pc, #80]	@ (8008b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008b2c:	4413      	add	r3, r2
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	461a      	mov	r2, r3
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4a11      	ldr	r2, [pc, #68]	@ (8008b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008b3a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	2201      	movs	r2, #1
 8008b42:	409a      	lsls	r2, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8008b48:	bf00      	nop
 8008b4a:	3714      	adds	r7, #20
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr
 8008b54:	58025408 	.word	0x58025408
 8008b58:	5802541c 	.word	0x5802541c
 8008b5c:	58025430 	.word	0x58025430
 8008b60:	58025444 	.word	0x58025444
 8008b64:	58025458 	.word	0x58025458
 8008b68:	5802546c 	.word	0x5802546c
 8008b6c:	58025480 	.word	0x58025480
 8008b70:	58025494 	.word	0x58025494
 8008b74:	1600963f 	.word	0x1600963f
 8008b78:	58025940 	.word	0x58025940
 8008b7c:	1000823f 	.word	0x1000823f
 8008b80:	40020940 	.word	0x40020940

08008b84 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b098      	sub	sp, #96	@ 0x60
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8008b8c:	4a84      	ldr	r2, [pc, #528]	@ (8008da0 <HAL_FDCAN_Init+0x21c>)
 8008b8e:	f107 030c 	add.w	r3, r7, #12
 8008b92:	4611      	mov	r1, r2
 8008b94:	224c      	movs	r2, #76	@ 0x4c
 8008b96:	4618      	mov	r0, r3
 8008b98:	f00e fa17 	bl	8016fca <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d101      	bne.n	8008ba6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	e1c6      	b.n	8008f34 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a7e      	ldr	r2, [pc, #504]	@ (8008da4 <HAL_FDCAN_Init+0x220>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d106      	bne.n	8008bbe <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8008bb8:	461a      	mov	r2, r3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d106      	bne.n	8008bd8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f7f8 faca 	bl	800116c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	699a      	ldr	r2, [r3, #24]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f022 0210 	bic.w	r2, r2, #16
 8008be6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008be8:	f7fc ff5a 	bl	8005aa0 <HAL_GetTick>
 8008bec:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008bee:	e014      	b.n	8008c1a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008bf0:	f7fc ff56 	bl	8005aa0 <HAL_GetTick>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008bf8:	1ad3      	subs	r3, r2, r3
 8008bfa:	2b0a      	cmp	r3, #10
 8008bfc:	d90d      	bls.n	8008c1a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c04:	f043 0201 	orr.w	r2, r3, #1
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2203      	movs	r2, #3
 8008c12:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e18c      	b.n	8008f34 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	699b      	ldr	r3, [r3, #24]
 8008c20:	f003 0308 	and.w	r3, r3, #8
 8008c24:	2b08      	cmp	r3, #8
 8008c26:	d0e3      	beq.n	8008bf0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	699a      	ldr	r2, [r3, #24]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f042 0201 	orr.w	r2, r2, #1
 8008c36:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008c38:	f7fc ff32 	bl	8005aa0 <HAL_GetTick>
 8008c3c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008c3e:	e014      	b.n	8008c6a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008c40:	f7fc ff2e 	bl	8005aa0 <HAL_GetTick>
 8008c44:	4602      	mov	r2, r0
 8008c46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c48:	1ad3      	subs	r3, r2, r3
 8008c4a:	2b0a      	cmp	r3, #10
 8008c4c:	d90d      	bls.n	8008c6a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c54:	f043 0201 	orr.w	r2, r3, #1
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2203      	movs	r2, #3
 8008c62:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	e164      	b.n	8008f34 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	699b      	ldr	r3, [r3, #24]
 8008c70:	f003 0301 	and.w	r3, r3, #1
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d0e3      	beq.n	8008c40 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	699a      	ldr	r2, [r3, #24]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f042 0202 	orr.w	r2, r2, #2
 8008c86:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	7c1b      	ldrb	r3, [r3, #16]
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d108      	bne.n	8008ca2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	699a      	ldr	r2, [r3, #24]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c9e:	619a      	str	r2, [r3, #24]
 8008ca0:	e007      	b.n	8008cb2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	699a      	ldr	r2, [r3, #24]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008cb0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	7c5b      	ldrb	r3, [r3, #17]
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d108      	bne.n	8008ccc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	699a      	ldr	r2, [r3, #24]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008cc8:	619a      	str	r2, [r3, #24]
 8008cca:	e007      	b.n	8008cdc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	699a      	ldr	r2, [r3, #24]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008cda:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	7c9b      	ldrb	r3, [r3, #18]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d108      	bne.n	8008cf6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	699a      	ldr	r2, [r3, #24]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008cf2:	619a      	str	r2, [r3, #24]
 8008cf4:	e007      	b.n	8008d06 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	699a      	ldr	r2, [r3, #24]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008d04:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	699b      	ldr	r3, [r3, #24]
 8008d0c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	689a      	ldr	r2, [r3, #8]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	430a      	orrs	r2, r1
 8008d1a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	699a      	ldr	r2, [r3, #24]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8008d2a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	691a      	ldr	r2, [r3, #16]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f022 0210 	bic.w	r2, r2, #16
 8008d3a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d108      	bne.n	8008d56 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	699a      	ldr	r2, [r3, #24]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f042 0204 	orr.w	r2, r2, #4
 8008d52:	619a      	str	r2, [r3, #24]
 8008d54:	e030      	b.n	8008db8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d02c      	beq.n	8008db8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	d020      	beq.n	8008da8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	699a      	ldr	r2, [r3, #24]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008d74:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	691a      	ldr	r2, [r3, #16]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f042 0210 	orr.w	r2, r2, #16
 8008d84:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	2b03      	cmp	r3, #3
 8008d8c:	d114      	bne.n	8008db8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	699a      	ldr	r2, [r3, #24]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f042 0220 	orr.w	r2, r2, #32
 8008d9c:	619a      	str	r2, [r3, #24]
 8008d9e:	e00b      	b.n	8008db8 <HAL_FDCAN_Init+0x234>
 8008da0:	08018f90 	.word	0x08018f90
 8008da4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	699a      	ldr	r2, [r3, #24]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f042 0220 	orr.w	r2, r2, #32
 8008db6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	699b      	ldr	r3, [r3, #24]
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	69db      	ldr	r3, [r3, #28]
 8008dc4:	3b01      	subs	r3, #1
 8008dc6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008dc8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a1b      	ldr	r3, [r3, #32]
 8008dce:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008dd0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	695b      	ldr	r3, [r3, #20]
 8008dd8:	3b01      	subs	r3, #1
 8008dda:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008de0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008de2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008dec:	d115      	bne.n	8008e1a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008df2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008df8:	3b01      	subs	r3, #1
 8008dfa:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008dfc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e02:	3b01      	subs	r3, #1
 8008e04:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008e06:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8008e16:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008e18:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d00a      	beq.n	8008e38 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	430a      	orrs	r2, r1
 8008e34:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e40:	4413      	add	r3, r2
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d011      	beq.n	8008e6a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008e4e:	f023 0107 	bic.w	r1, r3, #7
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	3360      	adds	r3, #96	@ 0x60
 8008e5a:	443b      	add	r3, r7
 8008e5c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	430a      	orrs	r2, r1
 8008e66:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d011      	beq.n	8008e96 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008e7a:	f023 0107 	bic.w	r1, r3, #7
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	3360      	adds	r3, #96	@ 0x60
 8008e86:	443b      	add	r3, r7
 8008e88:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	430a      	orrs	r2, r1
 8008e92:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d012      	beq.n	8008ec4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008ea6:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	3360      	adds	r3, #96	@ 0x60
 8008eb2:	443b      	add	r3, r7
 8008eb4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008eb8:	011a      	lsls	r2, r3, #4
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	430a      	orrs	r2, r1
 8008ec0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d012      	beq.n	8008ef2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008ed4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	3360      	adds	r3, #96	@ 0x60
 8008ee0:	443b      	add	r3, r7
 8008ee2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008ee6:	021a      	lsls	r2, r3, #8
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	430a      	orrs	r2, r1
 8008eee:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a11      	ldr	r2, [pc, #68]	@ (8008f3c <HAL_FDCAN_Init+0x3b8>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d107      	bne.n	8008f0c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	689a      	ldr	r2, [r3, #8]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	f022 0203 	bic.w	r2, r2, #3
 8008f0a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 f80b 	bl	8008f40 <FDCAN_CalcultateRamBlockAddresses>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8008f30:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3760      	adds	r7, #96	@ 0x60
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	4000a000 	.word	0x4000a000

08008f40 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b085      	sub	sp, #20
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f4c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008f56:	4ba7      	ldr	r3, [pc, #668]	@ (80091f4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008f58:	4013      	ands	r3, r2
 8008f5a:	68ba      	ldr	r2, [r7, #8]
 8008f5c:	0091      	lsls	r1, r2, #2
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	6812      	ldr	r2, [r2, #0]
 8008f62:	430b      	orrs	r3, r1
 8008f64:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f70:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f78:	041a      	lsls	r2, r3, #16
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	430a      	orrs	r2, r1
 8008f80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f88:	68ba      	ldr	r2, [r7, #8]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008f96:	4b97      	ldr	r3, [pc, #604]	@ (80091f4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008f98:	4013      	ands	r3, r2
 8008f9a:	68ba      	ldr	r2, [r7, #8]
 8008f9c:	0091      	lsls	r1, r2, #2
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	6812      	ldr	r2, [r2, #0]
 8008fa2:	430b      	orrs	r3, r1
 8008fa4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fb0:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fb8:	041a      	lsls	r2, r3, #16
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	430a      	orrs	r2, r1
 8008fc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fc8:	005b      	lsls	r3, r3, #1
 8008fca:	68ba      	ldr	r2, [r7, #8]
 8008fcc:	4413      	add	r3, r2
 8008fce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008fd8:	4b86      	ldr	r3, [pc, #536]	@ (80091f4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008fda:	4013      	ands	r3, r2
 8008fdc:	68ba      	ldr	r2, [r7, #8]
 8008fde:	0091      	lsls	r1, r2, #2
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	6812      	ldr	r2, [r2, #0]
 8008fe4:	430b      	orrs	r3, r1
 8008fe6:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008ff2:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ffa:	041a      	lsls	r2, r3, #16
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	430a      	orrs	r2, r1
 8009002:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800900e:	fb02 f303 	mul.w	r3, r2, r3
 8009012:	68ba      	ldr	r2, [r7, #8]
 8009014:	4413      	add	r3, r2
 8009016:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8009020:	4b74      	ldr	r3, [pc, #464]	@ (80091f4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009022:	4013      	ands	r3, r2
 8009024:	68ba      	ldr	r2, [r7, #8]
 8009026:	0091      	lsls	r1, r2, #2
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	6812      	ldr	r2, [r2, #0]
 800902c:	430b      	orrs	r3, r1
 800902e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800903a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009042:	041a      	lsls	r2, r3, #16
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	430a      	orrs	r2, r1
 800904a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009056:	fb02 f303 	mul.w	r3, r2, r3
 800905a:	68ba      	ldr	r2, [r7, #8]
 800905c:	4413      	add	r3, r2
 800905e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8009068:	4b62      	ldr	r3, [pc, #392]	@ (80091f4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800906a:	4013      	ands	r3, r2
 800906c:	68ba      	ldr	r2, [r7, #8]
 800906e:	0091      	lsls	r1, r2, #2
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	6812      	ldr	r2, [r2, #0]
 8009074:	430b      	orrs	r3, r1
 8009076:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009082:	fb02 f303 	mul.w	r3, r2, r3
 8009086:	68ba      	ldr	r2, [r7, #8]
 8009088:	4413      	add	r3, r2
 800908a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8009094:	4b57      	ldr	r3, [pc, #348]	@ (80091f4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009096:	4013      	ands	r3, r2
 8009098:	68ba      	ldr	r2, [r7, #8]
 800909a:	0091      	lsls	r1, r2, #2
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	6812      	ldr	r2, [r2, #0]
 80090a0:	430b      	orrs	r3, r1
 80090a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80090ae:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090b6:	041a      	lsls	r2, r3, #16
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	430a      	orrs	r2, r1
 80090be:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090c6:	005b      	lsls	r3, r3, #1
 80090c8:	68ba      	ldr	r2, [r7, #8]
 80090ca:	4413      	add	r3, r2
 80090cc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80090d6:	4b47      	ldr	r3, [pc, #284]	@ (80091f4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80090d8:	4013      	ands	r3, r2
 80090da:	68ba      	ldr	r2, [r7, #8]
 80090dc:	0091      	lsls	r1, r2, #2
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	6812      	ldr	r2, [r2, #0]
 80090e2:	430b      	orrs	r3, r1
 80090e4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80090f0:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090f8:	041a      	lsls	r2, r3, #16
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	430a      	orrs	r2, r1
 8009100:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800910c:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009114:	061a      	lsls	r2, r3, #24
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	430a      	orrs	r2, r1
 800911c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009124:	4b34      	ldr	r3, [pc, #208]	@ (80091f8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8009126:	4413      	add	r3, r2
 8009128:	009a      	lsls	r2, r3, #2
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	441a      	add	r2, r3
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009146:	00db      	lsls	r3, r3, #3
 8009148:	441a      	add	r2, r3
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009156:	6879      	ldr	r1, [r7, #4]
 8009158:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800915a:	fb01 f303 	mul.w	r3, r1, r3
 800915e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8009160:	441a      	add	r2, r3
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800916e:	6879      	ldr	r1, [r7, #4]
 8009170:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8009172:	fb01 f303 	mul.w	r3, r1, r3
 8009176:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8009178:	441a      	add	r2, r3
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009186:	6879      	ldr	r1, [r7, #4]
 8009188:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800918a:	fb01 f303 	mul.w	r3, r1, r3
 800918e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8009190:	441a      	add	r2, r3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091a2:	00db      	lsls	r3, r3, #3
 80091a4:	441a      	add	r2, r3
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091b6:	6879      	ldr	r1, [r7, #4]
 80091b8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80091ba:	fb01 f303 	mul.w	r3, r1, r3
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	441a      	add	r2, r3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091d2:	6879      	ldr	r1, [r7, #4]
 80091d4:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80091d6:	fb01 f303 	mul.w	r3, r1, r3
 80091da:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80091dc:	441a      	add	r2, r3
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091ea:	4a04      	ldr	r2, [pc, #16]	@ (80091fc <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d915      	bls.n	800921c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80091f0:	e006      	b.n	8009200 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80091f2:	bf00      	nop
 80091f4:	ffff0003 	.word	0xffff0003
 80091f8:	10002b00 	.word	0x10002b00
 80091fc:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009206:	f043 0220 	orr.w	r2, r3, #32
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2203      	movs	r2, #3
 8009214:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8009218:	2301      	movs	r3, #1
 800921a:	e010      	b.n	800923e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009220:	60fb      	str	r3, [r7, #12]
 8009222:	e005      	b.n	8009230 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2200      	movs	r2, #0
 8009228:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	3304      	adds	r3, #4
 800922e:	60fb      	str	r3, [r7, #12]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	429a      	cmp	r2, r3
 800923a:	d3f3      	bcc.n	8009224 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800923c:	2300      	movs	r3, #0
}
 800923e:	4618      	mov	r0, r3
 8009240:	3714      	adds	r7, #20
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr
 800924a:	bf00      	nop

0800924c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800924c:	b480      	push	{r7}
 800924e:	b089      	sub	sp, #36	@ 0x24
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009256:	2300      	movs	r3, #0
 8009258:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800925a:	4b89      	ldr	r3, [pc, #548]	@ (8009480 <HAL_GPIO_Init+0x234>)
 800925c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800925e:	e194      	b.n	800958a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	2101      	movs	r1, #1
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	fa01 f303 	lsl.w	r3, r1, r3
 800926c:	4013      	ands	r3, r2
 800926e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	2b00      	cmp	r3, #0
 8009274:	f000 8186 	beq.w	8009584 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	f003 0303 	and.w	r3, r3, #3
 8009280:	2b01      	cmp	r3, #1
 8009282:	d005      	beq.n	8009290 <HAL_GPIO_Init+0x44>
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	f003 0303 	and.w	r3, r3, #3
 800928c:	2b02      	cmp	r3, #2
 800928e:	d130      	bne.n	80092f2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009296:	69fb      	ldr	r3, [r7, #28]
 8009298:	005b      	lsls	r3, r3, #1
 800929a:	2203      	movs	r2, #3
 800929c:	fa02 f303 	lsl.w	r3, r2, r3
 80092a0:	43db      	mvns	r3, r3
 80092a2:	69ba      	ldr	r2, [r7, #24]
 80092a4:	4013      	ands	r3, r2
 80092a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	68da      	ldr	r2, [r3, #12]
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	005b      	lsls	r3, r3, #1
 80092b0:	fa02 f303 	lsl.w	r3, r2, r3
 80092b4:	69ba      	ldr	r2, [r7, #24]
 80092b6:	4313      	orrs	r3, r2
 80092b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	69ba      	ldr	r2, [r7, #24]
 80092be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80092c6:	2201      	movs	r2, #1
 80092c8:	69fb      	ldr	r3, [r7, #28]
 80092ca:	fa02 f303 	lsl.w	r3, r2, r3
 80092ce:	43db      	mvns	r3, r3
 80092d0:	69ba      	ldr	r2, [r7, #24]
 80092d2:	4013      	ands	r3, r2
 80092d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	091b      	lsrs	r3, r3, #4
 80092dc:	f003 0201 	and.w	r2, r3, #1
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	fa02 f303 	lsl.w	r3, r2, r3
 80092e6:	69ba      	ldr	r2, [r7, #24]
 80092e8:	4313      	orrs	r3, r2
 80092ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	69ba      	ldr	r2, [r7, #24]
 80092f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	f003 0303 	and.w	r3, r3, #3
 80092fa:	2b03      	cmp	r3, #3
 80092fc:	d017      	beq.n	800932e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	005b      	lsls	r3, r3, #1
 8009308:	2203      	movs	r2, #3
 800930a:	fa02 f303 	lsl.w	r3, r2, r3
 800930e:	43db      	mvns	r3, r3
 8009310:	69ba      	ldr	r2, [r7, #24]
 8009312:	4013      	ands	r3, r2
 8009314:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	689a      	ldr	r2, [r3, #8]
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	005b      	lsls	r3, r3, #1
 800931e:	fa02 f303 	lsl.w	r3, r2, r3
 8009322:	69ba      	ldr	r2, [r7, #24]
 8009324:	4313      	orrs	r3, r2
 8009326:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	69ba      	ldr	r2, [r7, #24]
 800932c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	f003 0303 	and.w	r3, r3, #3
 8009336:	2b02      	cmp	r3, #2
 8009338:	d123      	bne.n	8009382 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	08da      	lsrs	r2, r3, #3
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	3208      	adds	r2, #8
 8009342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009346:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009348:	69fb      	ldr	r3, [r7, #28]
 800934a:	f003 0307 	and.w	r3, r3, #7
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	220f      	movs	r2, #15
 8009352:	fa02 f303 	lsl.w	r3, r2, r3
 8009356:	43db      	mvns	r3, r3
 8009358:	69ba      	ldr	r2, [r7, #24]
 800935a:	4013      	ands	r3, r2
 800935c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	691a      	ldr	r2, [r3, #16]
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	f003 0307 	and.w	r3, r3, #7
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	fa02 f303 	lsl.w	r3, r2, r3
 800936e:	69ba      	ldr	r2, [r7, #24]
 8009370:	4313      	orrs	r3, r2
 8009372:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	08da      	lsrs	r2, r3, #3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	3208      	adds	r2, #8
 800937c:	69b9      	ldr	r1, [r7, #24]
 800937e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	005b      	lsls	r3, r3, #1
 800938c:	2203      	movs	r2, #3
 800938e:	fa02 f303 	lsl.w	r3, r2, r3
 8009392:	43db      	mvns	r3, r3
 8009394:	69ba      	ldr	r2, [r7, #24]
 8009396:	4013      	ands	r3, r2
 8009398:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	f003 0203 	and.w	r2, r3, #3
 80093a2:	69fb      	ldr	r3, [r7, #28]
 80093a4:	005b      	lsls	r3, r3, #1
 80093a6:	fa02 f303 	lsl.w	r3, r2, r3
 80093aa:	69ba      	ldr	r2, [r7, #24]
 80093ac:	4313      	orrs	r3, r2
 80093ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	69ba      	ldr	r2, [r7, #24]
 80093b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80093be:	2b00      	cmp	r3, #0
 80093c0:	f000 80e0 	beq.w	8009584 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80093c4:	4b2f      	ldr	r3, [pc, #188]	@ (8009484 <HAL_GPIO_Init+0x238>)
 80093c6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80093ca:	4a2e      	ldr	r2, [pc, #184]	@ (8009484 <HAL_GPIO_Init+0x238>)
 80093cc:	f043 0302 	orr.w	r3, r3, #2
 80093d0:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80093d4:	4b2b      	ldr	r3, [pc, #172]	@ (8009484 <HAL_GPIO_Init+0x238>)
 80093d6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80093da:	f003 0302 	and.w	r3, r3, #2
 80093de:	60fb      	str	r3, [r7, #12]
 80093e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80093e2:	4a29      	ldr	r2, [pc, #164]	@ (8009488 <HAL_GPIO_Init+0x23c>)
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	089b      	lsrs	r3, r3, #2
 80093e8:	3302      	adds	r3, #2
 80093ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	f003 0303 	and.w	r3, r3, #3
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	220f      	movs	r2, #15
 80093fa:	fa02 f303 	lsl.w	r3, r2, r3
 80093fe:	43db      	mvns	r3, r3
 8009400:	69ba      	ldr	r2, [r7, #24]
 8009402:	4013      	ands	r3, r2
 8009404:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4a20      	ldr	r2, [pc, #128]	@ (800948c <HAL_GPIO_Init+0x240>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d052      	beq.n	80094b4 <HAL_GPIO_Init+0x268>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	4a1f      	ldr	r2, [pc, #124]	@ (8009490 <HAL_GPIO_Init+0x244>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d031      	beq.n	800947a <HAL_GPIO_Init+0x22e>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	4a1e      	ldr	r2, [pc, #120]	@ (8009494 <HAL_GPIO_Init+0x248>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d02b      	beq.n	8009476 <HAL_GPIO_Init+0x22a>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	4a1d      	ldr	r2, [pc, #116]	@ (8009498 <HAL_GPIO_Init+0x24c>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d025      	beq.n	8009472 <HAL_GPIO_Init+0x226>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	4a1c      	ldr	r2, [pc, #112]	@ (800949c <HAL_GPIO_Init+0x250>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d01f      	beq.n	800946e <HAL_GPIO_Init+0x222>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	4a1b      	ldr	r2, [pc, #108]	@ (80094a0 <HAL_GPIO_Init+0x254>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d019      	beq.n	800946a <HAL_GPIO_Init+0x21e>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4a1a      	ldr	r2, [pc, #104]	@ (80094a4 <HAL_GPIO_Init+0x258>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d013      	beq.n	8009466 <HAL_GPIO_Init+0x21a>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	4a19      	ldr	r2, [pc, #100]	@ (80094a8 <HAL_GPIO_Init+0x25c>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d00d      	beq.n	8009462 <HAL_GPIO_Init+0x216>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a18      	ldr	r2, [pc, #96]	@ (80094ac <HAL_GPIO_Init+0x260>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d007      	beq.n	800945e <HAL_GPIO_Init+0x212>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4a17      	ldr	r2, [pc, #92]	@ (80094b0 <HAL_GPIO_Init+0x264>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d101      	bne.n	800945a <HAL_GPIO_Init+0x20e>
 8009456:	2309      	movs	r3, #9
 8009458:	e02d      	b.n	80094b6 <HAL_GPIO_Init+0x26a>
 800945a:	230a      	movs	r3, #10
 800945c:	e02b      	b.n	80094b6 <HAL_GPIO_Init+0x26a>
 800945e:	2308      	movs	r3, #8
 8009460:	e029      	b.n	80094b6 <HAL_GPIO_Init+0x26a>
 8009462:	2307      	movs	r3, #7
 8009464:	e027      	b.n	80094b6 <HAL_GPIO_Init+0x26a>
 8009466:	2306      	movs	r3, #6
 8009468:	e025      	b.n	80094b6 <HAL_GPIO_Init+0x26a>
 800946a:	2305      	movs	r3, #5
 800946c:	e023      	b.n	80094b6 <HAL_GPIO_Init+0x26a>
 800946e:	2304      	movs	r3, #4
 8009470:	e021      	b.n	80094b6 <HAL_GPIO_Init+0x26a>
 8009472:	2303      	movs	r3, #3
 8009474:	e01f      	b.n	80094b6 <HAL_GPIO_Init+0x26a>
 8009476:	2302      	movs	r3, #2
 8009478:	e01d      	b.n	80094b6 <HAL_GPIO_Init+0x26a>
 800947a:	2301      	movs	r3, #1
 800947c:	e01b      	b.n	80094b6 <HAL_GPIO_Init+0x26a>
 800947e:	bf00      	nop
 8009480:	58000080 	.word	0x58000080
 8009484:	58024400 	.word	0x58024400
 8009488:	58000400 	.word	0x58000400
 800948c:	58020000 	.word	0x58020000
 8009490:	58020400 	.word	0x58020400
 8009494:	58020800 	.word	0x58020800
 8009498:	58020c00 	.word	0x58020c00
 800949c:	58021000 	.word	0x58021000
 80094a0:	58021400 	.word	0x58021400
 80094a4:	58021800 	.word	0x58021800
 80094a8:	58021c00 	.word	0x58021c00
 80094ac:	58022000 	.word	0x58022000
 80094b0:	58022400 	.word	0x58022400
 80094b4:	2300      	movs	r3, #0
 80094b6:	69fa      	ldr	r2, [r7, #28]
 80094b8:	f002 0203 	and.w	r2, r2, #3
 80094bc:	0092      	lsls	r2, r2, #2
 80094be:	4093      	lsls	r3, r2
 80094c0:	69ba      	ldr	r2, [r7, #24]
 80094c2:	4313      	orrs	r3, r2
 80094c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80094c6:	4938      	ldr	r1, [pc, #224]	@ (80095a8 <HAL_GPIO_Init+0x35c>)
 80094c8:	69fb      	ldr	r3, [r7, #28]
 80094ca:	089b      	lsrs	r3, r3, #2
 80094cc:	3302      	adds	r3, #2
 80094ce:	69ba      	ldr	r2, [r7, #24]
 80094d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80094d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	43db      	mvns	r3, r3
 80094e0:	69ba      	ldr	r2, [r7, #24]
 80094e2:	4013      	ands	r3, r2
 80094e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d003      	beq.n	80094fa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80094f2:	69ba      	ldr	r2, [r7, #24]
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	4313      	orrs	r3, r2
 80094f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80094fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009502:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	43db      	mvns	r3, r3
 800950e:	69ba      	ldr	r2, [r7, #24]
 8009510:	4013      	ands	r3, r2
 8009512:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800951c:	2b00      	cmp	r3, #0
 800951e:	d003      	beq.n	8009528 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009520:	69ba      	ldr	r2, [r7, #24]
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	4313      	orrs	r3, r2
 8009526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009528:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800952c:	69bb      	ldr	r3, [r7, #24]
 800952e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	43db      	mvns	r3, r3
 800953a:	69ba      	ldr	r2, [r7, #24]
 800953c:	4013      	ands	r3, r2
 800953e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009548:	2b00      	cmp	r3, #0
 800954a:	d003      	beq.n	8009554 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800954c:	69ba      	ldr	r2, [r7, #24]
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	4313      	orrs	r3, r2
 8009552:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	69ba      	ldr	r2, [r7, #24]
 8009558:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	43db      	mvns	r3, r3
 8009564:	69ba      	ldr	r2, [r7, #24]
 8009566:	4013      	ands	r3, r2
 8009568:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009572:	2b00      	cmp	r3, #0
 8009574:	d003      	beq.n	800957e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8009576:	69ba      	ldr	r2, [r7, #24]
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	4313      	orrs	r3, r2
 800957c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	69ba      	ldr	r2, [r7, #24]
 8009582:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009584:	69fb      	ldr	r3, [r7, #28]
 8009586:	3301      	adds	r3, #1
 8009588:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	fa22 f303 	lsr.w	r3, r2, r3
 8009594:	2b00      	cmp	r3, #0
 8009596:	f47f ae63 	bne.w	8009260 <HAL_GPIO_Init+0x14>
  }
}
 800959a:	bf00      	nop
 800959c:	bf00      	nop
 800959e:	3724      	adds	r7, #36	@ 0x24
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr
 80095a8:	58000400 	.word	0x58000400

080095ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	460b      	mov	r3, r1
 80095b6:	807b      	strh	r3, [r7, #2]
 80095b8:	4613      	mov	r3, r2
 80095ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80095bc:	787b      	ldrb	r3, [r7, #1]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d003      	beq.n	80095ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80095c2:	887a      	ldrh	r2, [r7, #2]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80095c8:	e003      	b.n	80095d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80095ca:	887b      	ldrh	r3, [r7, #2]
 80095cc:	041a      	lsls	r2, r3, #16
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	619a      	str	r2, [r3, #24]
}
 80095d2:	bf00      	nop
 80095d4:	370c      	adds	r7, #12
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr
	...

080095e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b082      	sub	sp, #8
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d101      	bne.n	80095f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80095ee:	2301      	movs	r3, #1
 80095f0:	e08b      	b.n	800970a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d106      	bne.n	800960c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f7f8 f8b8 	bl	800177c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2224      	movs	r2, #36	@ 0x24
 8009610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f022 0201 	bic.w	r2, r2, #1
 8009622:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	685a      	ldr	r2, [r3, #4]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009630:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	689a      	ldr	r2, [r3, #8]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009640:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	68db      	ldr	r3, [r3, #12]
 8009646:	2b01      	cmp	r3, #1
 8009648:	d107      	bne.n	800965a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	689a      	ldr	r2, [r3, #8]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009656:	609a      	str	r2, [r3, #8]
 8009658:	e006      	b.n	8009668 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	689a      	ldr	r2, [r3, #8]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8009666:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	2b02      	cmp	r3, #2
 800966e:	d108      	bne.n	8009682 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	685a      	ldr	r2, [r3, #4]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800967e:	605a      	str	r2, [r3, #4]
 8009680:	e007      	b.n	8009692 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	685a      	ldr	r2, [r3, #4]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009690:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	6859      	ldr	r1, [r3, #4]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	4b1d      	ldr	r3, [pc, #116]	@ (8009714 <HAL_I2C_Init+0x134>)
 800969e:	430b      	orrs	r3, r1
 80096a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	68da      	ldr	r2, [r3, #12]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80096b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	691a      	ldr	r2, [r3, #16]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	695b      	ldr	r3, [r3, #20]
 80096ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	699b      	ldr	r3, [r3, #24]
 80096c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	430a      	orrs	r2, r1
 80096ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	69d9      	ldr	r1, [r3, #28]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6a1a      	ldr	r2, [r3, #32]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	430a      	orrs	r2, r1
 80096da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f042 0201 	orr.w	r2, r2, #1
 80096ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2220      	movs	r2, #32
 80096f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	3708      	adds	r7, #8
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	02008000 	.word	0x02008000

08009718 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009728:	b2db      	uxtb	r3, r3
 800972a:	2b20      	cmp	r3, #32
 800972c:	d138      	bne.n	80097a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009734:	2b01      	cmp	r3, #1
 8009736:	d101      	bne.n	800973c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009738:	2302      	movs	r3, #2
 800973a:	e032      	b.n	80097a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2201      	movs	r2, #1
 8009740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2224      	movs	r2, #36	@ 0x24
 8009748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f022 0201 	bic.w	r2, r2, #1
 800975a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800976a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	6819      	ldr	r1, [r3, #0]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	683a      	ldr	r2, [r7, #0]
 8009778:	430a      	orrs	r2, r1
 800977a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	681a      	ldr	r2, [r3, #0]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f042 0201 	orr.w	r2, r2, #1
 800978a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2220      	movs	r2, #32
 8009790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800979c:	2300      	movs	r3, #0
 800979e:	e000      	b.n	80097a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80097a0:	2302      	movs	r3, #2
  }
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	370c      	adds	r7, #12
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr

080097ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80097ae:	b480      	push	{r7}
 80097b0:	b085      	sub	sp, #20
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
 80097b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	2b20      	cmp	r3, #32
 80097c2:	d139      	bne.n	8009838 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d101      	bne.n	80097d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80097ce:	2302      	movs	r3, #2
 80097d0:	e033      	b.n	800983a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2201      	movs	r2, #1
 80097d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2224      	movs	r2, #36	@ 0x24
 80097de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f022 0201 	bic.w	r2, r2, #1
 80097f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009800:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	021b      	lsls	r3, r3, #8
 8009806:	68fa      	ldr	r2, [r7, #12]
 8009808:	4313      	orrs	r3, r2
 800980a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	681a      	ldr	r2, [r3, #0]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f042 0201 	orr.w	r2, r2, #1
 8009822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2220      	movs	r2, #32
 8009828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009834:	2300      	movs	r3, #0
 8009836:	e000      	b.n	800983a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009838:	2302      	movs	r3, #2
  }
}
 800983a:	4618      	mov	r0, r3
 800983c:	3714      	adds	r7, #20
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr
	...

08009848 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009850:	4b19      	ldr	r3, [pc, #100]	@ (80098b8 <HAL_PWREx_ConfigSupply+0x70>)
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	f003 0304 	and.w	r3, r3, #4
 8009858:	2b04      	cmp	r3, #4
 800985a:	d00a      	beq.n	8009872 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800985c:	4b16      	ldr	r3, [pc, #88]	@ (80098b8 <HAL_PWREx_ConfigSupply+0x70>)
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	f003 0307 	and.w	r3, r3, #7
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	429a      	cmp	r2, r3
 8009868:	d001      	beq.n	800986e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800986a:	2301      	movs	r3, #1
 800986c:	e01f      	b.n	80098ae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800986e:	2300      	movs	r3, #0
 8009870:	e01d      	b.n	80098ae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009872:	4b11      	ldr	r3, [pc, #68]	@ (80098b8 <HAL_PWREx_ConfigSupply+0x70>)
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	f023 0207 	bic.w	r2, r3, #7
 800987a:	490f      	ldr	r1, [pc, #60]	@ (80098b8 <HAL_PWREx_ConfigSupply+0x70>)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	4313      	orrs	r3, r2
 8009880:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009882:	f7fc f90d 	bl	8005aa0 <HAL_GetTick>
 8009886:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009888:	e009      	b.n	800989e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800988a:	f7fc f909 	bl	8005aa0 <HAL_GetTick>
 800988e:	4602      	mov	r2, r0
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	1ad3      	subs	r3, r2, r3
 8009894:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009898:	d901      	bls.n	800989e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	e007      	b.n	80098ae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800989e:	4b06      	ldr	r3, [pc, #24]	@ (80098b8 <HAL_PWREx_ConfigSupply+0x70>)
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80098a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098aa:	d1ee      	bne.n	800988a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80098ac:	2300      	movs	r3, #0
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3710      	adds	r7, #16
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	58024800 	.word	0x58024800

080098bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b08c      	sub	sp, #48	@ 0x30
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d102      	bne.n	80098d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80098ca:	2301      	movs	r3, #1
 80098cc:	f000 bc1f 	b.w	800a10e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f003 0301 	and.w	r3, r3, #1
 80098d8:	2b00      	cmp	r3, #0
 80098da:	f000 80b3 	beq.w	8009a44 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098de:	4b95      	ldr	r3, [pc, #596]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 80098e0:	691b      	ldr	r3, [r3, #16]
 80098e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80098e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80098e8:	4b92      	ldr	r3, [pc, #584]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 80098ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80098ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098f0:	2b10      	cmp	r3, #16
 80098f2:	d007      	beq.n	8009904 <HAL_RCC_OscConfig+0x48>
 80098f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098f6:	2b18      	cmp	r3, #24
 80098f8:	d112      	bne.n	8009920 <HAL_RCC_OscConfig+0x64>
 80098fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098fc:	f003 0303 	and.w	r3, r3, #3
 8009900:	2b02      	cmp	r3, #2
 8009902:	d10d      	bne.n	8009920 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009904:	4b8b      	ldr	r3, [pc, #556]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800990c:	2b00      	cmp	r3, #0
 800990e:	f000 8098 	beq.w	8009a42 <HAL_RCC_OscConfig+0x186>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	f040 8093 	bne.w	8009a42 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800991c:	2301      	movs	r3, #1
 800991e:	e3f6      	b.n	800a10e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009928:	d106      	bne.n	8009938 <HAL_RCC_OscConfig+0x7c>
 800992a:	4b82      	ldr	r3, [pc, #520]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a81      	ldr	r2, [pc, #516]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 8009930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009934:	6013      	str	r3, [r2, #0]
 8009936:	e058      	b.n	80099ea <HAL_RCC_OscConfig+0x12e>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d112      	bne.n	8009966 <HAL_RCC_OscConfig+0xaa>
 8009940:	4b7c      	ldr	r3, [pc, #496]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a7b      	ldr	r2, [pc, #492]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 8009946:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800994a:	6013      	str	r3, [r2, #0]
 800994c:	4b79      	ldr	r3, [pc, #484]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a78      	ldr	r2, [pc, #480]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 8009952:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009956:	6013      	str	r3, [r2, #0]
 8009958:	4b76      	ldr	r3, [pc, #472]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a75      	ldr	r2, [pc, #468]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 800995e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009962:	6013      	str	r3, [r2, #0]
 8009964:	e041      	b.n	80099ea <HAL_RCC_OscConfig+0x12e>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800996e:	d112      	bne.n	8009996 <HAL_RCC_OscConfig+0xda>
 8009970:	4b70      	ldr	r3, [pc, #448]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a6f      	ldr	r2, [pc, #444]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 8009976:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800997a:	6013      	str	r3, [r2, #0]
 800997c:	4b6d      	ldr	r3, [pc, #436]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a6c      	ldr	r2, [pc, #432]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 8009982:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009986:	6013      	str	r3, [r2, #0]
 8009988:	4b6a      	ldr	r3, [pc, #424]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a69      	ldr	r2, [pc, #420]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 800998e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009992:	6013      	str	r3, [r2, #0]
 8009994:	e029      	b.n	80099ea <HAL_RCC_OscConfig+0x12e>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800999e:	d112      	bne.n	80099c6 <HAL_RCC_OscConfig+0x10a>
 80099a0:	4b64      	ldr	r3, [pc, #400]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a63      	ldr	r2, [pc, #396]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 80099a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80099aa:	6013      	str	r3, [r2, #0]
 80099ac:	4b61      	ldr	r3, [pc, #388]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a60      	ldr	r2, [pc, #384]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 80099b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80099b6:	6013      	str	r3, [r2, #0]
 80099b8:	4b5e      	ldr	r3, [pc, #376]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a5d      	ldr	r2, [pc, #372]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 80099be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80099c2:	6013      	str	r3, [r2, #0]
 80099c4:	e011      	b.n	80099ea <HAL_RCC_OscConfig+0x12e>
 80099c6:	4b5b      	ldr	r3, [pc, #364]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a5a      	ldr	r2, [pc, #360]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 80099cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80099d0:	6013      	str	r3, [r2, #0]
 80099d2:	4b58      	ldr	r3, [pc, #352]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a57      	ldr	r2, [pc, #348]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 80099d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80099dc:	6013      	str	r3, [r2, #0]
 80099de:	4b55      	ldr	r3, [pc, #340]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a54      	ldr	r2, [pc, #336]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 80099e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80099e8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d013      	beq.n	8009a1a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099f2:	f7fc f855 	bl	8005aa0 <HAL_GetTick>
 80099f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80099f8:	e008      	b.n	8009a0c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80099fa:	f7fc f851 	bl	8005aa0 <HAL_GetTick>
 80099fe:	4602      	mov	r2, r0
 8009a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a02:	1ad3      	subs	r3, r2, r3
 8009a04:	2b64      	cmp	r3, #100	@ 0x64
 8009a06:	d901      	bls.n	8009a0c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8009a08:	2303      	movs	r3, #3
 8009a0a:	e380      	b.n	800a10e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009a0c:	4b49      	ldr	r3, [pc, #292]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d0f0      	beq.n	80099fa <HAL_RCC_OscConfig+0x13e>
 8009a18:	e014      	b.n	8009a44 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a1a:	f7fc f841 	bl	8005aa0 <HAL_GetTick>
 8009a1e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009a20:	e008      	b.n	8009a34 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a22:	f7fc f83d 	bl	8005aa0 <HAL_GetTick>
 8009a26:	4602      	mov	r2, r0
 8009a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a2a:	1ad3      	subs	r3, r2, r3
 8009a2c:	2b64      	cmp	r3, #100	@ 0x64
 8009a2e:	d901      	bls.n	8009a34 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8009a30:	2303      	movs	r3, #3
 8009a32:	e36c      	b.n	800a10e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009a34:	4b3f      	ldr	r3, [pc, #252]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d1f0      	bne.n	8009a22 <HAL_RCC_OscConfig+0x166>
 8009a40:	e000      	b.n	8009a44 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a42:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f003 0302 	and.w	r3, r3, #2
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	f000 808c 	beq.w	8009b6a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a52:	4b38      	ldr	r3, [pc, #224]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 8009a54:	691b      	ldr	r3, [r3, #16]
 8009a56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009a5a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009a5c:	4b35      	ldr	r3, [pc, #212]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 8009a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a60:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009a62:	6a3b      	ldr	r3, [r7, #32]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d007      	beq.n	8009a78 <HAL_RCC_OscConfig+0x1bc>
 8009a68:	6a3b      	ldr	r3, [r7, #32]
 8009a6a:	2b18      	cmp	r3, #24
 8009a6c:	d137      	bne.n	8009ade <HAL_RCC_OscConfig+0x222>
 8009a6e:	69fb      	ldr	r3, [r7, #28]
 8009a70:	f003 0303 	and.w	r3, r3, #3
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d132      	bne.n	8009ade <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a78:	4b2e      	ldr	r3, [pc, #184]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f003 0304 	and.w	r3, r3, #4
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d005      	beq.n	8009a90 <HAL_RCC_OscConfig+0x1d4>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d101      	bne.n	8009a90 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	e33e      	b.n	800a10e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009a90:	4b28      	ldr	r3, [pc, #160]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f023 0219 	bic.w	r2, r3, #25
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	4925      	ldr	r1, [pc, #148]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009aa2:	f7fb fffd 	bl	8005aa0 <HAL_GetTick>
 8009aa6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009aa8:	e008      	b.n	8009abc <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009aaa:	f7fb fff9 	bl	8005aa0 <HAL_GetTick>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ab2:	1ad3      	subs	r3, r2, r3
 8009ab4:	2b02      	cmp	r3, #2
 8009ab6:	d901      	bls.n	8009abc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8009ab8:	2303      	movs	r3, #3
 8009aba:	e328      	b.n	800a10e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009abc:	4b1d      	ldr	r3, [pc, #116]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f003 0304 	and.w	r3, r3, #4
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d0f0      	beq.n	8009aaa <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	691b      	ldr	r3, [r3, #16]
 8009ad4:	061b      	lsls	r3, r3, #24
 8009ad6:	4917      	ldr	r1, [pc, #92]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009adc:	e045      	b.n	8009b6a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	68db      	ldr	r3, [r3, #12]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d028      	beq.n	8009b38 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009ae6:	4b13      	ldr	r3, [pc, #76]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f023 0219 	bic.w	r2, r3, #25
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	68db      	ldr	r3, [r3, #12]
 8009af2:	4910      	ldr	r1, [pc, #64]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 8009af4:	4313      	orrs	r3, r2
 8009af6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009af8:	f7fb ffd2 	bl	8005aa0 <HAL_GetTick>
 8009afc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009afe:	e008      	b.n	8009b12 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b00:	f7fb ffce 	bl	8005aa0 <HAL_GetTick>
 8009b04:	4602      	mov	r2, r0
 8009b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b08:	1ad3      	subs	r3, r2, r3
 8009b0a:	2b02      	cmp	r3, #2
 8009b0c:	d901      	bls.n	8009b12 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8009b0e:	2303      	movs	r3, #3
 8009b10:	e2fd      	b.n	800a10e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b12:	4b08      	ldr	r3, [pc, #32]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f003 0304 	and.w	r3, r3, #4
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d0f0      	beq.n	8009b00 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b1e:	4b05      	ldr	r3, [pc, #20]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	691b      	ldr	r3, [r3, #16]
 8009b2a:	061b      	lsls	r3, r3, #24
 8009b2c:	4901      	ldr	r1, [pc, #4]	@ (8009b34 <HAL_RCC_OscConfig+0x278>)
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	604b      	str	r3, [r1, #4]
 8009b32:	e01a      	b.n	8009b6a <HAL_RCC_OscConfig+0x2ae>
 8009b34:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009b38:	4b97      	ldr	r3, [pc, #604]	@ (8009d98 <HAL_RCC_OscConfig+0x4dc>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a96      	ldr	r2, [pc, #600]	@ (8009d98 <HAL_RCC_OscConfig+0x4dc>)
 8009b3e:	f023 0301 	bic.w	r3, r3, #1
 8009b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b44:	f7fb ffac 	bl	8005aa0 <HAL_GetTick>
 8009b48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009b4a:	e008      	b.n	8009b5e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b4c:	f7fb ffa8 	bl	8005aa0 <HAL_GetTick>
 8009b50:	4602      	mov	r2, r0
 8009b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b54:	1ad3      	subs	r3, r2, r3
 8009b56:	2b02      	cmp	r3, #2
 8009b58:	d901      	bls.n	8009b5e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8009b5a:	2303      	movs	r3, #3
 8009b5c:	e2d7      	b.n	800a10e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009b5e:	4b8e      	ldr	r3, [pc, #568]	@ (8009d98 <HAL_RCC_OscConfig+0x4dc>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f003 0304 	and.w	r3, r3, #4
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d1f0      	bne.n	8009b4c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f003 0310 	and.w	r3, r3, #16
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d06a      	beq.n	8009c4c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b76:	4b88      	ldr	r3, [pc, #544]	@ (8009d98 <HAL_RCC_OscConfig+0x4dc>)
 8009b78:	691b      	ldr	r3, [r3, #16]
 8009b7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009b7e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009b80:	4b85      	ldr	r3, [pc, #532]	@ (8009d98 <HAL_RCC_OscConfig+0x4dc>)
 8009b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b84:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	2b08      	cmp	r3, #8
 8009b8a:	d007      	beq.n	8009b9c <HAL_RCC_OscConfig+0x2e0>
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	2b18      	cmp	r3, #24
 8009b90:	d11b      	bne.n	8009bca <HAL_RCC_OscConfig+0x30e>
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	f003 0303 	and.w	r3, r3, #3
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d116      	bne.n	8009bca <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009b9c:	4b7e      	ldr	r3, [pc, #504]	@ (8009d98 <HAL_RCC_OscConfig+0x4dc>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d005      	beq.n	8009bb4 <HAL_RCC_OscConfig+0x2f8>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	69db      	ldr	r3, [r3, #28]
 8009bac:	2b80      	cmp	r3, #128	@ 0x80
 8009bae:	d001      	beq.n	8009bb4 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e2ac      	b.n	800a10e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009bb4:	4b78      	ldr	r3, [pc, #480]	@ (8009d98 <HAL_RCC_OscConfig+0x4dc>)
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6a1b      	ldr	r3, [r3, #32]
 8009bc0:	061b      	lsls	r3, r3, #24
 8009bc2:	4975      	ldr	r1, [pc, #468]	@ (8009d98 <HAL_RCC_OscConfig+0x4dc>)
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009bc8:	e040      	b.n	8009c4c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	69db      	ldr	r3, [r3, #28]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d023      	beq.n	8009c1a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009bd2:	4b71      	ldr	r3, [pc, #452]	@ (8009d98 <HAL_RCC_OscConfig+0x4dc>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4a70      	ldr	r2, [pc, #448]	@ (8009d98 <HAL_RCC_OscConfig+0x4dc>)
 8009bd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bde:	f7fb ff5f 	bl	8005aa0 <HAL_GetTick>
 8009be2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009be4:	e008      	b.n	8009bf8 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009be6:	f7fb ff5b 	bl	8005aa0 <HAL_GetTick>
 8009bea:	4602      	mov	r2, r0
 8009bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bee:	1ad3      	subs	r3, r2, r3
 8009bf0:	2b02      	cmp	r3, #2
 8009bf2:	d901      	bls.n	8009bf8 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8009bf4:	2303      	movs	r3, #3
 8009bf6:	e28a      	b.n	800a10e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009bf8:	4b67      	ldr	r3, [pc, #412]	@ (8009d98 <HAL_RCC_OscConfig+0x4dc>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d0f0      	beq.n	8009be6 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009c04:	4b64      	ldr	r3, [pc, #400]	@ (8009d98 <HAL_RCC_OscConfig+0x4dc>)
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6a1b      	ldr	r3, [r3, #32]
 8009c10:	061b      	lsls	r3, r3, #24
 8009c12:	4961      	ldr	r1, [pc, #388]	@ (8009d98 <HAL_RCC_OscConfig+0x4dc>)
 8009c14:	4313      	orrs	r3, r2
 8009c16:	60cb      	str	r3, [r1, #12]
 8009c18:	e018      	b.n	8009c4c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009c1a:	4b5f      	ldr	r3, [pc, #380]	@ (8009d98 <HAL_RCC_OscConfig+0x4dc>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a5e      	ldr	r2, [pc, #376]	@ (8009d98 <HAL_RCC_OscConfig+0x4dc>)
 8009c20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c26:	f7fb ff3b 	bl	8005aa0 <HAL_GetTick>
 8009c2a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009c2c:	e008      	b.n	8009c40 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009c2e:	f7fb ff37 	bl	8005aa0 <HAL_GetTick>
 8009c32:	4602      	mov	r2, r0
 8009c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c36:	1ad3      	subs	r3, r2, r3
 8009c38:	2b02      	cmp	r3, #2
 8009c3a:	d901      	bls.n	8009c40 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8009c3c:	2303      	movs	r3, #3
 8009c3e:	e266      	b.n	800a10e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009c40:	4b55      	ldr	r3, [pc, #340]	@ (8009d98 <HAL_RCC_OscConfig+0x4dc>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d1f0      	bne.n	8009c2e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f003 0308 	and.w	r3, r3, #8
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d036      	beq.n	8009cc6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	695b      	ldr	r3, [r3, #20]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d019      	beq.n	8009c94 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009c60:	4b4d      	ldr	r3, [pc, #308]	@ (8009d98 <HAL_RCC_OscConfig+0x4dc>)
 8009c62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c64:	4a4c      	ldr	r2, [pc, #304]	@ (8009d98 <HAL_RCC_OscConfig+0x4dc>)
 8009c66:	f043 0301 	orr.w	r3, r3, #1
 8009c6a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c6c:	f7fb ff18 	bl	8005aa0 <HAL_GetTick>
 8009c70:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009c72:	e008      	b.n	8009c86 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c74:	f7fb ff14 	bl	8005aa0 <HAL_GetTick>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c7c:	1ad3      	subs	r3, r2, r3
 8009c7e:	2b02      	cmp	r3, #2
 8009c80:	d901      	bls.n	8009c86 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8009c82:	2303      	movs	r3, #3
 8009c84:	e243      	b.n	800a10e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009c86:	4b44      	ldr	r3, [pc, #272]	@ (8009d98 <HAL_RCC_OscConfig+0x4dc>)
 8009c88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c8a:	f003 0302 	and.w	r3, r3, #2
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d0f0      	beq.n	8009c74 <HAL_RCC_OscConfig+0x3b8>
 8009c92:	e018      	b.n	8009cc6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009c94:	4b40      	ldr	r3, [pc, #256]	@ (8009d98 <HAL_RCC_OscConfig+0x4dc>)
 8009c96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c98:	4a3f      	ldr	r2, [pc, #252]	@ (8009d98 <HAL_RCC_OscConfig+0x4dc>)
 8009c9a:	f023 0301 	bic.w	r3, r3, #1
 8009c9e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ca0:	f7fb fefe 	bl	8005aa0 <HAL_GetTick>
 8009ca4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009ca6:	e008      	b.n	8009cba <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009ca8:	f7fb fefa 	bl	8005aa0 <HAL_GetTick>
 8009cac:	4602      	mov	r2, r0
 8009cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb0:	1ad3      	subs	r3, r2, r3
 8009cb2:	2b02      	cmp	r3, #2
 8009cb4:	d901      	bls.n	8009cba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8009cb6:	2303      	movs	r3, #3
 8009cb8:	e229      	b.n	800a10e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009cba:	4b37      	ldr	r3, [pc, #220]	@ (8009d98 <HAL_RCC_OscConfig+0x4dc>)
 8009cbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cbe:	f003 0302 	and.w	r3, r3, #2
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d1f0      	bne.n	8009ca8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f003 0320 	and.w	r3, r3, #32
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d036      	beq.n	8009d40 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	699b      	ldr	r3, [r3, #24]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d019      	beq.n	8009d0e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009cda:	4b2f      	ldr	r3, [pc, #188]	@ (8009d98 <HAL_RCC_OscConfig+0x4dc>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a2e      	ldr	r2, [pc, #184]	@ (8009d98 <HAL_RCC_OscConfig+0x4dc>)
 8009ce0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009ce4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009ce6:	f7fb fedb 	bl	8005aa0 <HAL_GetTick>
 8009cea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009cec:	e008      	b.n	8009d00 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009cee:	f7fb fed7 	bl	8005aa0 <HAL_GetTick>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf6:	1ad3      	subs	r3, r2, r3
 8009cf8:	2b02      	cmp	r3, #2
 8009cfa:	d901      	bls.n	8009d00 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8009cfc:	2303      	movs	r3, #3
 8009cfe:	e206      	b.n	800a10e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009d00:	4b25      	ldr	r3, [pc, #148]	@ (8009d98 <HAL_RCC_OscConfig+0x4dc>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d0f0      	beq.n	8009cee <HAL_RCC_OscConfig+0x432>
 8009d0c:	e018      	b.n	8009d40 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009d0e:	4b22      	ldr	r3, [pc, #136]	@ (8009d98 <HAL_RCC_OscConfig+0x4dc>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a21      	ldr	r2, [pc, #132]	@ (8009d98 <HAL_RCC_OscConfig+0x4dc>)
 8009d14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009d18:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009d1a:	f7fb fec1 	bl	8005aa0 <HAL_GetTick>
 8009d1e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009d20:	e008      	b.n	8009d34 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009d22:	f7fb febd 	bl	8005aa0 <HAL_GetTick>
 8009d26:	4602      	mov	r2, r0
 8009d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d2a:	1ad3      	subs	r3, r2, r3
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	d901      	bls.n	8009d34 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8009d30:	2303      	movs	r3, #3
 8009d32:	e1ec      	b.n	800a10e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009d34:	4b18      	ldr	r3, [pc, #96]	@ (8009d98 <HAL_RCC_OscConfig+0x4dc>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d1f0      	bne.n	8009d22 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f003 0304 	and.w	r3, r3, #4
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	f000 80af 	beq.w	8009eac <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009d4e:	4b13      	ldr	r3, [pc, #76]	@ (8009d9c <HAL_RCC_OscConfig+0x4e0>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a12      	ldr	r2, [pc, #72]	@ (8009d9c <HAL_RCC_OscConfig+0x4e0>)
 8009d54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009d5a:	f7fb fea1 	bl	8005aa0 <HAL_GetTick>
 8009d5e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d60:	e008      	b.n	8009d74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d62:	f7fb fe9d 	bl	8005aa0 <HAL_GetTick>
 8009d66:	4602      	mov	r2, r0
 8009d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d6a:	1ad3      	subs	r3, r2, r3
 8009d6c:	2b64      	cmp	r3, #100	@ 0x64
 8009d6e:	d901      	bls.n	8009d74 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8009d70:	2303      	movs	r3, #3
 8009d72:	e1cc      	b.n	800a10e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d74:	4b09      	ldr	r3, [pc, #36]	@ (8009d9c <HAL_RCC_OscConfig+0x4e0>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d0f0      	beq.n	8009d62 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d10b      	bne.n	8009da0 <HAL_RCC_OscConfig+0x4e4>
 8009d88:	4b03      	ldr	r3, [pc, #12]	@ (8009d98 <HAL_RCC_OscConfig+0x4dc>)
 8009d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d8c:	4a02      	ldr	r2, [pc, #8]	@ (8009d98 <HAL_RCC_OscConfig+0x4dc>)
 8009d8e:	f043 0301 	orr.w	r3, r3, #1
 8009d92:	6713      	str	r3, [r2, #112]	@ 0x70
 8009d94:	e05b      	b.n	8009e4e <HAL_RCC_OscConfig+0x592>
 8009d96:	bf00      	nop
 8009d98:	58024400 	.word	0x58024400
 8009d9c:	58024800 	.word	0x58024800
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d112      	bne.n	8009dce <HAL_RCC_OscConfig+0x512>
 8009da8:	4b9d      	ldr	r3, [pc, #628]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009dac:	4a9c      	ldr	r2, [pc, #624]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009dae:	f023 0301 	bic.w	r3, r3, #1
 8009db2:	6713      	str	r3, [r2, #112]	@ 0x70
 8009db4:	4b9a      	ldr	r3, [pc, #616]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009db8:	4a99      	ldr	r2, [pc, #612]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009dba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009dbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8009dc0:	4b97      	ldr	r3, [pc, #604]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009dc4:	4a96      	ldr	r2, [pc, #600]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009dc6:	f023 0304 	bic.w	r3, r3, #4
 8009dca:	6713      	str	r3, [r2, #112]	@ 0x70
 8009dcc:	e03f      	b.n	8009e4e <HAL_RCC_OscConfig+0x592>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	689b      	ldr	r3, [r3, #8]
 8009dd2:	2b05      	cmp	r3, #5
 8009dd4:	d112      	bne.n	8009dfc <HAL_RCC_OscConfig+0x540>
 8009dd6:	4b92      	ldr	r3, [pc, #584]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009dda:	4a91      	ldr	r2, [pc, #580]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009ddc:	f043 0304 	orr.w	r3, r3, #4
 8009de0:	6713      	str	r3, [r2, #112]	@ 0x70
 8009de2:	4b8f      	ldr	r3, [pc, #572]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009de6:	4a8e      	ldr	r2, [pc, #568]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009de8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009dec:	6713      	str	r3, [r2, #112]	@ 0x70
 8009dee:	4b8c      	ldr	r3, [pc, #560]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009df2:	4a8b      	ldr	r2, [pc, #556]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009df4:	f043 0301 	orr.w	r3, r3, #1
 8009df8:	6713      	str	r3, [r2, #112]	@ 0x70
 8009dfa:	e028      	b.n	8009e4e <HAL_RCC_OscConfig+0x592>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	689b      	ldr	r3, [r3, #8]
 8009e00:	2b85      	cmp	r3, #133	@ 0x85
 8009e02:	d112      	bne.n	8009e2a <HAL_RCC_OscConfig+0x56e>
 8009e04:	4b86      	ldr	r3, [pc, #536]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009e06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e08:	4a85      	ldr	r2, [pc, #532]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009e0a:	f043 0304 	orr.w	r3, r3, #4
 8009e0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009e10:	4b83      	ldr	r3, [pc, #524]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009e12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e14:	4a82      	ldr	r2, [pc, #520]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009e16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8009e1c:	4b80      	ldr	r3, [pc, #512]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e20:	4a7f      	ldr	r2, [pc, #508]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009e22:	f043 0301 	orr.w	r3, r3, #1
 8009e26:	6713      	str	r3, [r2, #112]	@ 0x70
 8009e28:	e011      	b.n	8009e4e <HAL_RCC_OscConfig+0x592>
 8009e2a:	4b7d      	ldr	r3, [pc, #500]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e2e:	4a7c      	ldr	r2, [pc, #496]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009e30:	f023 0301 	bic.w	r3, r3, #1
 8009e34:	6713      	str	r3, [r2, #112]	@ 0x70
 8009e36:	4b7a      	ldr	r3, [pc, #488]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e3a:	4a79      	ldr	r2, [pc, #484]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009e3c:	f023 0304 	bic.w	r3, r3, #4
 8009e40:	6713      	str	r3, [r2, #112]	@ 0x70
 8009e42:	4b77      	ldr	r3, [pc, #476]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e46:	4a76      	ldr	r2, [pc, #472]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009e48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e4c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d015      	beq.n	8009e82 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e56:	f7fb fe23 	bl	8005aa0 <HAL_GetTick>
 8009e5a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e5c:	e00a      	b.n	8009e74 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e5e:	f7fb fe1f 	bl	8005aa0 <HAL_GetTick>
 8009e62:	4602      	mov	r2, r0
 8009e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e66:	1ad3      	subs	r3, r2, r3
 8009e68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d901      	bls.n	8009e74 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8009e70:	2303      	movs	r3, #3
 8009e72:	e14c      	b.n	800a10e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e74:	4b6a      	ldr	r3, [pc, #424]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e78:	f003 0302 	and.w	r3, r3, #2
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d0ee      	beq.n	8009e5e <HAL_RCC_OscConfig+0x5a2>
 8009e80:	e014      	b.n	8009eac <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e82:	f7fb fe0d 	bl	8005aa0 <HAL_GetTick>
 8009e86:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009e88:	e00a      	b.n	8009ea0 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e8a:	f7fb fe09 	bl	8005aa0 <HAL_GetTick>
 8009e8e:	4602      	mov	r2, r0
 8009e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e92:	1ad3      	subs	r3, r2, r3
 8009e94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d901      	bls.n	8009ea0 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8009e9c:	2303      	movs	r3, #3
 8009e9e:	e136      	b.n	800a10e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009ea0:	4b5f      	ldr	r3, [pc, #380]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ea4:	f003 0302 	and.w	r3, r3, #2
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d1ee      	bne.n	8009e8a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	f000 812b 	beq.w	800a10c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009eb6:	4b5a      	ldr	r3, [pc, #360]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009eb8:	691b      	ldr	r3, [r3, #16]
 8009eba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009ebe:	2b18      	cmp	r3, #24
 8009ec0:	f000 80bb 	beq.w	800a03a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	f040 8095 	bne.w	8009ff8 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ece:	4b54      	ldr	r3, [pc, #336]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4a53      	ldr	r2, [pc, #332]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009ed4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009ed8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009eda:	f7fb fde1 	bl	8005aa0 <HAL_GetTick>
 8009ede:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009ee0:	e008      	b.n	8009ef4 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ee2:	f7fb fddd 	bl	8005aa0 <HAL_GetTick>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eea:	1ad3      	subs	r3, r2, r3
 8009eec:	2b02      	cmp	r3, #2
 8009eee:	d901      	bls.n	8009ef4 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8009ef0:	2303      	movs	r3, #3
 8009ef2:	e10c      	b.n	800a10e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009ef4:	4b4a      	ldr	r3, [pc, #296]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d1f0      	bne.n	8009ee2 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009f00:	4b47      	ldr	r3, [pc, #284]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009f02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009f04:	4b47      	ldr	r3, [pc, #284]	@ (800a024 <HAL_RCC_OscConfig+0x768>)
 8009f06:	4013      	ands	r3, r2
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009f10:	0112      	lsls	r2, r2, #4
 8009f12:	430a      	orrs	r2, r1
 8009f14:	4942      	ldr	r1, [pc, #264]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009f16:	4313      	orrs	r3, r2
 8009f18:	628b      	str	r3, [r1, #40]	@ 0x28
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f1e:	3b01      	subs	r3, #1
 8009f20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f28:	3b01      	subs	r3, #1
 8009f2a:	025b      	lsls	r3, r3, #9
 8009f2c:	b29b      	uxth	r3, r3
 8009f2e:	431a      	orrs	r2, r3
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f34:	3b01      	subs	r3, #1
 8009f36:	041b      	lsls	r3, r3, #16
 8009f38:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009f3c:	431a      	orrs	r2, r3
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f42:	3b01      	subs	r3, #1
 8009f44:	061b      	lsls	r3, r3, #24
 8009f46:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009f4a:	4935      	ldr	r1, [pc, #212]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009f50:	4b33      	ldr	r3, [pc, #204]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f54:	4a32      	ldr	r2, [pc, #200]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009f56:	f023 0301 	bic.w	r3, r3, #1
 8009f5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009f5c:	4b30      	ldr	r3, [pc, #192]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009f5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f60:	4b31      	ldr	r3, [pc, #196]	@ (800a028 <HAL_RCC_OscConfig+0x76c>)
 8009f62:	4013      	ands	r3, r2
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009f68:	00d2      	lsls	r2, r2, #3
 8009f6a:	492d      	ldr	r1, [pc, #180]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009f70:	4b2b      	ldr	r3, [pc, #172]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f74:	f023 020c 	bic.w	r2, r3, #12
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f7c:	4928      	ldr	r1, [pc, #160]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009f82:	4b27      	ldr	r3, [pc, #156]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f86:	f023 0202 	bic.w	r2, r3, #2
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f8e:	4924      	ldr	r1, [pc, #144]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009f90:	4313      	orrs	r3, r2
 8009f92:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009f94:	4b22      	ldr	r3, [pc, #136]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f98:	4a21      	ldr	r2, [pc, #132]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009f9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fa0:	4b1f      	ldr	r3, [pc, #124]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fa4:	4a1e      	ldr	r2, [pc, #120]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009fa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009faa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009fac:	4b1c      	ldr	r3, [pc, #112]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fb0:	4a1b      	ldr	r2, [pc, #108]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009fb2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009fb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009fb8:	4b19      	ldr	r3, [pc, #100]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fbc:	4a18      	ldr	r2, [pc, #96]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009fbe:	f043 0301 	orr.w	r3, r3, #1
 8009fc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009fc4:	4b16      	ldr	r3, [pc, #88]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a15      	ldr	r2, [pc, #84]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009fca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fd0:	f7fb fd66 	bl	8005aa0 <HAL_GetTick>
 8009fd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009fd6:	e008      	b.n	8009fea <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009fd8:	f7fb fd62 	bl	8005aa0 <HAL_GetTick>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fe0:	1ad3      	subs	r3, r2, r3
 8009fe2:	2b02      	cmp	r3, #2
 8009fe4:	d901      	bls.n	8009fea <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8009fe6:	2303      	movs	r3, #3
 8009fe8:	e091      	b.n	800a10e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009fea:	4b0d      	ldr	r3, [pc, #52]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d0f0      	beq.n	8009fd8 <HAL_RCC_OscConfig+0x71c>
 8009ff6:	e089      	b.n	800a10c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ff8:	4b09      	ldr	r3, [pc, #36]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a08      	ldr	r2, [pc, #32]	@ (800a020 <HAL_RCC_OscConfig+0x764>)
 8009ffe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a004:	f7fb fd4c 	bl	8005aa0 <HAL_GetTick>
 800a008:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a00a:	e00f      	b.n	800a02c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a00c:	f7fb fd48 	bl	8005aa0 <HAL_GetTick>
 800a010:	4602      	mov	r2, r0
 800a012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a014:	1ad3      	subs	r3, r2, r3
 800a016:	2b02      	cmp	r3, #2
 800a018:	d908      	bls.n	800a02c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800a01a:	2303      	movs	r3, #3
 800a01c:	e077      	b.n	800a10e <HAL_RCC_OscConfig+0x852>
 800a01e:	bf00      	nop
 800a020:	58024400 	.word	0x58024400
 800a024:	fffffc0c 	.word	0xfffffc0c
 800a028:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a02c:	4b3a      	ldr	r3, [pc, #232]	@ (800a118 <HAL_RCC_OscConfig+0x85c>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a034:	2b00      	cmp	r3, #0
 800a036:	d1e9      	bne.n	800a00c <HAL_RCC_OscConfig+0x750>
 800a038:	e068      	b.n	800a10c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a03a:	4b37      	ldr	r3, [pc, #220]	@ (800a118 <HAL_RCC_OscConfig+0x85c>)
 800a03c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a03e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a040:	4b35      	ldr	r3, [pc, #212]	@ (800a118 <HAL_RCC_OscConfig+0x85c>)
 800a042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a044:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d031      	beq.n	800a0b2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	f003 0203 	and.w	r2, r3, #3
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a058:	429a      	cmp	r2, r3
 800a05a:	d12a      	bne.n	800a0b2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	091b      	lsrs	r3, r3, #4
 800a060:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a068:	429a      	cmp	r2, r3
 800a06a:	d122      	bne.n	800a0b2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a076:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a078:	429a      	cmp	r2, r3
 800a07a:	d11a      	bne.n	800a0b2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	0a5b      	lsrs	r3, r3, #9
 800a080:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a088:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d111      	bne.n	800a0b2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	0c1b      	lsrs	r3, r3, #16
 800a092:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a09a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d108      	bne.n	800a0b2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	0e1b      	lsrs	r3, r3, #24
 800a0a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d001      	beq.n	800a0b6 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	e02b      	b.n	800a10e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a0b6:	4b18      	ldr	r3, [pc, #96]	@ (800a118 <HAL_RCC_OscConfig+0x85c>)
 800a0b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0ba:	08db      	lsrs	r3, r3, #3
 800a0bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a0c0:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a0c6:	693a      	ldr	r2, [r7, #16]
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d01f      	beq.n	800a10c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a0cc:	4b12      	ldr	r3, [pc, #72]	@ (800a118 <HAL_RCC_OscConfig+0x85c>)
 800a0ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0d0:	4a11      	ldr	r2, [pc, #68]	@ (800a118 <HAL_RCC_OscConfig+0x85c>)
 800a0d2:	f023 0301 	bic.w	r3, r3, #1
 800a0d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a0d8:	f7fb fce2 	bl	8005aa0 <HAL_GetTick>
 800a0dc:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a0de:	bf00      	nop
 800a0e0:	f7fb fcde 	bl	8005aa0 <HAL_GetTick>
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d0f9      	beq.n	800a0e0 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a0ec:	4b0a      	ldr	r3, [pc, #40]	@ (800a118 <HAL_RCC_OscConfig+0x85c>)
 800a0ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a0f0:	4b0a      	ldr	r3, [pc, #40]	@ (800a11c <HAL_RCC_OscConfig+0x860>)
 800a0f2:	4013      	ands	r3, r2
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a0f8:	00d2      	lsls	r2, r2, #3
 800a0fa:	4907      	ldr	r1, [pc, #28]	@ (800a118 <HAL_RCC_OscConfig+0x85c>)
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a100:	4b05      	ldr	r3, [pc, #20]	@ (800a118 <HAL_RCC_OscConfig+0x85c>)
 800a102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a104:	4a04      	ldr	r2, [pc, #16]	@ (800a118 <HAL_RCC_OscConfig+0x85c>)
 800a106:	f043 0301 	orr.w	r3, r3, #1
 800a10a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3730      	adds	r7, #48	@ 0x30
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	58024400 	.word	0x58024400
 800a11c:	ffff0007 	.word	0xffff0007

0800a120 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b086      	sub	sp, #24
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d101      	bne.n	800a134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a130:	2301      	movs	r3, #1
 800a132:	e19c      	b.n	800a46e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a134:	4b8a      	ldr	r3, [pc, #552]	@ (800a360 <HAL_RCC_ClockConfig+0x240>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f003 030f 	and.w	r3, r3, #15
 800a13c:	683a      	ldr	r2, [r7, #0]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d910      	bls.n	800a164 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a142:	4b87      	ldr	r3, [pc, #540]	@ (800a360 <HAL_RCC_ClockConfig+0x240>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f023 020f 	bic.w	r2, r3, #15
 800a14a:	4985      	ldr	r1, [pc, #532]	@ (800a360 <HAL_RCC_ClockConfig+0x240>)
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	4313      	orrs	r3, r2
 800a150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a152:	4b83      	ldr	r3, [pc, #524]	@ (800a360 <HAL_RCC_ClockConfig+0x240>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f003 030f 	and.w	r3, r3, #15
 800a15a:	683a      	ldr	r2, [r7, #0]
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d001      	beq.n	800a164 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a160:	2301      	movs	r3, #1
 800a162:	e184      	b.n	800a46e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f003 0304 	and.w	r3, r3, #4
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d010      	beq.n	800a192 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	691a      	ldr	r2, [r3, #16]
 800a174:	4b7b      	ldr	r3, [pc, #492]	@ (800a364 <HAL_RCC_ClockConfig+0x244>)
 800a176:	699b      	ldr	r3, [r3, #24]
 800a178:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d908      	bls.n	800a192 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a180:	4b78      	ldr	r3, [pc, #480]	@ (800a364 <HAL_RCC_ClockConfig+0x244>)
 800a182:	699b      	ldr	r3, [r3, #24]
 800a184:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	691b      	ldr	r3, [r3, #16]
 800a18c:	4975      	ldr	r1, [pc, #468]	@ (800a364 <HAL_RCC_ClockConfig+0x244>)
 800a18e:	4313      	orrs	r3, r2
 800a190:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f003 0308 	and.w	r3, r3, #8
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d010      	beq.n	800a1c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	695a      	ldr	r2, [r3, #20]
 800a1a2:	4b70      	ldr	r3, [pc, #448]	@ (800a364 <HAL_RCC_ClockConfig+0x244>)
 800a1a4:	69db      	ldr	r3, [r3, #28]
 800a1a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d908      	bls.n	800a1c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a1ae:	4b6d      	ldr	r3, [pc, #436]	@ (800a364 <HAL_RCC_ClockConfig+0x244>)
 800a1b0:	69db      	ldr	r3, [r3, #28]
 800a1b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	695b      	ldr	r3, [r3, #20]
 800a1ba:	496a      	ldr	r1, [pc, #424]	@ (800a364 <HAL_RCC_ClockConfig+0x244>)
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f003 0310 	and.w	r3, r3, #16
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d010      	beq.n	800a1ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	699a      	ldr	r2, [r3, #24]
 800a1d0:	4b64      	ldr	r3, [pc, #400]	@ (800a364 <HAL_RCC_ClockConfig+0x244>)
 800a1d2:	69db      	ldr	r3, [r3, #28]
 800a1d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d908      	bls.n	800a1ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a1dc:	4b61      	ldr	r3, [pc, #388]	@ (800a364 <HAL_RCC_ClockConfig+0x244>)
 800a1de:	69db      	ldr	r3, [r3, #28]
 800a1e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	699b      	ldr	r3, [r3, #24]
 800a1e8:	495e      	ldr	r1, [pc, #376]	@ (800a364 <HAL_RCC_ClockConfig+0x244>)
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f003 0320 	and.w	r3, r3, #32
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d010      	beq.n	800a21c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	69da      	ldr	r2, [r3, #28]
 800a1fe:	4b59      	ldr	r3, [pc, #356]	@ (800a364 <HAL_RCC_ClockConfig+0x244>)
 800a200:	6a1b      	ldr	r3, [r3, #32]
 800a202:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a206:	429a      	cmp	r2, r3
 800a208:	d908      	bls.n	800a21c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a20a:	4b56      	ldr	r3, [pc, #344]	@ (800a364 <HAL_RCC_ClockConfig+0x244>)
 800a20c:	6a1b      	ldr	r3, [r3, #32]
 800a20e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	69db      	ldr	r3, [r3, #28]
 800a216:	4953      	ldr	r1, [pc, #332]	@ (800a364 <HAL_RCC_ClockConfig+0x244>)
 800a218:	4313      	orrs	r3, r2
 800a21a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f003 0302 	and.w	r3, r3, #2
 800a224:	2b00      	cmp	r3, #0
 800a226:	d010      	beq.n	800a24a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	68da      	ldr	r2, [r3, #12]
 800a22c:	4b4d      	ldr	r3, [pc, #308]	@ (800a364 <HAL_RCC_ClockConfig+0x244>)
 800a22e:	699b      	ldr	r3, [r3, #24]
 800a230:	f003 030f 	and.w	r3, r3, #15
 800a234:	429a      	cmp	r2, r3
 800a236:	d908      	bls.n	800a24a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a238:	4b4a      	ldr	r3, [pc, #296]	@ (800a364 <HAL_RCC_ClockConfig+0x244>)
 800a23a:	699b      	ldr	r3, [r3, #24]
 800a23c:	f023 020f 	bic.w	r2, r3, #15
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	4947      	ldr	r1, [pc, #284]	@ (800a364 <HAL_RCC_ClockConfig+0x244>)
 800a246:	4313      	orrs	r3, r2
 800a248:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f003 0301 	and.w	r3, r3, #1
 800a252:	2b00      	cmp	r3, #0
 800a254:	d055      	beq.n	800a302 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a256:	4b43      	ldr	r3, [pc, #268]	@ (800a364 <HAL_RCC_ClockConfig+0x244>)
 800a258:	699b      	ldr	r3, [r3, #24]
 800a25a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	689b      	ldr	r3, [r3, #8]
 800a262:	4940      	ldr	r1, [pc, #256]	@ (800a364 <HAL_RCC_ClockConfig+0x244>)
 800a264:	4313      	orrs	r3, r2
 800a266:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	2b02      	cmp	r3, #2
 800a26e:	d107      	bne.n	800a280 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a270:	4b3c      	ldr	r3, [pc, #240]	@ (800a364 <HAL_RCC_ClockConfig+0x244>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d121      	bne.n	800a2c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a27c:	2301      	movs	r3, #1
 800a27e:	e0f6      	b.n	800a46e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	2b03      	cmp	r3, #3
 800a286:	d107      	bne.n	800a298 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a288:	4b36      	ldr	r3, [pc, #216]	@ (800a364 <HAL_RCC_ClockConfig+0x244>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a290:	2b00      	cmp	r3, #0
 800a292:	d115      	bne.n	800a2c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a294:	2301      	movs	r3, #1
 800a296:	e0ea      	b.n	800a46e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d107      	bne.n	800a2b0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a2a0:	4b30      	ldr	r3, [pc, #192]	@ (800a364 <HAL_RCC_ClockConfig+0x244>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d109      	bne.n	800a2c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e0de      	b.n	800a46e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a2b0:	4b2c      	ldr	r3, [pc, #176]	@ (800a364 <HAL_RCC_ClockConfig+0x244>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f003 0304 	and.w	r3, r3, #4
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d101      	bne.n	800a2c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	e0d6      	b.n	800a46e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a2c0:	4b28      	ldr	r3, [pc, #160]	@ (800a364 <HAL_RCC_ClockConfig+0x244>)
 800a2c2:	691b      	ldr	r3, [r3, #16]
 800a2c4:	f023 0207 	bic.w	r2, r3, #7
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	4925      	ldr	r1, [pc, #148]	@ (800a364 <HAL_RCC_ClockConfig+0x244>)
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2d2:	f7fb fbe5 	bl	8005aa0 <HAL_GetTick>
 800a2d6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a2d8:	e00a      	b.n	800a2f0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a2da:	f7fb fbe1 	bl	8005aa0 <HAL_GetTick>
 800a2de:	4602      	mov	r2, r0
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	1ad3      	subs	r3, r2, r3
 800a2e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d901      	bls.n	800a2f0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a2ec:	2303      	movs	r3, #3
 800a2ee:	e0be      	b.n	800a46e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a2f0:	4b1c      	ldr	r3, [pc, #112]	@ (800a364 <HAL_RCC_ClockConfig+0x244>)
 800a2f2:	691b      	ldr	r3, [r3, #16]
 800a2f4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	00db      	lsls	r3, r3, #3
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d1eb      	bne.n	800a2da <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f003 0302 	and.w	r3, r3, #2
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d010      	beq.n	800a330 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	68da      	ldr	r2, [r3, #12]
 800a312:	4b14      	ldr	r3, [pc, #80]	@ (800a364 <HAL_RCC_ClockConfig+0x244>)
 800a314:	699b      	ldr	r3, [r3, #24]
 800a316:	f003 030f 	and.w	r3, r3, #15
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d208      	bcs.n	800a330 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a31e:	4b11      	ldr	r3, [pc, #68]	@ (800a364 <HAL_RCC_ClockConfig+0x244>)
 800a320:	699b      	ldr	r3, [r3, #24]
 800a322:	f023 020f 	bic.w	r2, r3, #15
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	490e      	ldr	r1, [pc, #56]	@ (800a364 <HAL_RCC_ClockConfig+0x244>)
 800a32c:	4313      	orrs	r3, r2
 800a32e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a330:	4b0b      	ldr	r3, [pc, #44]	@ (800a360 <HAL_RCC_ClockConfig+0x240>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f003 030f 	and.w	r3, r3, #15
 800a338:	683a      	ldr	r2, [r7, #0]
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d214      	bcs.n	800a368 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a33e:	4b08      	ldr	r3, [pc, #32]	@ (800a360 <HAL_RCC_ClockConfig+0x240>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f023 020f 	bic.w	r2, r3, #15
 800a346:	4906      	ldr	r1, [pc, #24]	@ (800a360 <HAL_RCC_ClockConfig+0x240>)
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	4313      	orrs	r3, r2
 800a34c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a34e:	4b04      	ldr	r3, [pc, #16]	@ (800a360 <HAL_RCC_ClockConfig+0x240>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f003 030f 	and.w	r3, r3, #15
 800a356:	683a      	ldr	r2, [r7, #0]
 800a358:	429a      	cmp	r2, r3
 800a35a:	d005      	beq.n	800a368 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a35c:	2301      	movs	r3, #1
 800a35e:	e086      	b.n	800a46e <HAL_RCC_ClockConfig+0x34e>
 800a360:	52002000 	.word	0x52002000
 800a364:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f003 0304 	and.w	r3, r3, #4
 800a370:	2b00      	cmp	r3, #0
 800a372:	d010      	beq.n	800a396 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	691a      	ldr	r2, [r3, #16]
 800a378:	4b3f      	ldr	r3, [pc, #252]	@ (800a478 <HAL_RCC_ClockConfig+0x358>)
 800a37a:	699b      	ldr	r3, [r3, #24]
 800a37c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a380:	429a      	cmp	r2, r3
 800a382:	d208      	bcs.n	800a396 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a384:	4b3c      	ldr	r3, [pc, #240]	@ (800a478 <HAL_RCC_ClockConfig+0x358>)
 800a386:	699b      	ldr	r3, [r3, #24]
 800a388:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	691b      	ldr	r3, [r3, #16]
 800a390:	4939      	ldr	r1, [pc, #228]	@ (800a478 <HAL_RCC_ClockConfig+0x358>)
 800a392:	4313      	orrs	r3, r2
 800a394:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f003 0308 	and.w	r3, r3, #8
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d010      	beq.n	800a3c4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	695a      	ldr	r2, [r3, #20]
 800a3a6:	4b34      	ldr	r3, [pc, #208]	@ (800a478 <HAL_RCC_ClockConfig+0x358>)
 800a3a8:	69db      	ldr	r3, [r3, #28]
 800a3aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d208      	bcs.n	800a3c4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a3b2:	4b31      	ldr	r3, [pc, #196]	@ (800a478 <HAL_RCC_ClockConfig+0x358>)
 800a3b4:	69db      	ldr	r3, [r3, #28]
 800a3b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	695b      	ldr	r3, [r3, #20]
 800a3be:	492e      	ldr	r1, [pc, #184]	@ (800a478 <HAL_RCC_ClockConfig+0x358>)
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f003 0310 	and.w	r3, r3, #16
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d010      	beq.n	800a3f2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	699a      	ldr	r2, [r3, #24]
 800a3d4:	4b28      	ldr	r3, [pc, #160]	@ (800a478 <HAL_RCC_ClockConfig+0x358>)
 800a3d6:	69db      	ldr	r3, [r3, #28]
 800a3d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d208      	bcs.n	800a3f2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a3e0:	4b25      	ldr	r3, [pc, #148]	@ (800a478 <HAL_RCC_ClockConfig+0x358>)
 800a3e2:	69db      	ldr	r3, [r3, #28]
 800a3e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	699b      	ldr	r3, [r3, #24]
 800a3ec:	4922      	ldr	r1, [pc, #136]	@ (800a478 <HAL_RCC_ClockConfig+0x358>)
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f003 0320 	and.w	r3, r3, #32
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d010      	beq.n	800a420 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	69da      	ldr	r2, [r3, #28]
 800a402:	4b1d      	ldr	r3, [pc, #116]	@ (800a478 <HAL_RCC_ClockConfig+0x358>)
 800a404:	6a1b      	ldr	r3, [r3, #32]
 800a406:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d208      	bcs.n	800a420 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a40e:	4b1a      	ldr	r3, [pc, #104]	@ (800a478 <HAL_RCC_ClockConfig+0x358>)
 800a410:	6a1b      	ldr	r3, [r3, #32]
 800a412:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	69db      	ldr	r3, [r3, #28]
 800a41a:	4917      	ldr	r1, [pc, #92]	@ (800a478 <HAL_RCC_ClockConfig+0x358>)
 800a41c:	4313      	orrs	r3, r2
 800a41e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800a420:	f000 f834 	bl	800a48c <HAL_RCC_GetSysClockFreq>
 800a424:	4602      	mov	r2, r0
 800a426:	4b14      	ldr	r3, [pc, #80]	@ (800a478 <HAL_RCC_ClockConfig+0x358>)
 800a428:	699b      	ldr	r3, [r3, #24]
 800a42a:	0a1b      	lsrs	r3, r3, #8
 800a42c:	f003 030f 	and.w	r3, r3, #15
 800a430:	4912      	ldr	r1, [pc, #72]	@ (800a47c <HAL_RCC_ClockConfig+0x35c>)
 800a432:	5ccb      	ldrb	r3, [r1, r3]
 800a434:	f003 031f 	and.w	r3, r3, #31
 800a438:	fa22 f303 	lsr.w	r3, r2, r3
 800a43c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800a43e:	4b0e      	ldr	r3, [pc, #56]	@ (800a478 <HAL_RCC_ClockConfig+0x358>)
 800a440:	699b      	ldr	r3, [r3, #24]
 800a442:	f003 030f 	and.w	r3, r3, #15
 800a446:	4a0d      	ldr	r2, [pc, #52]	@ (800a47c <HAL_RCC_ClockConfig+0x35c>)
 800a448:	5cd3      	ldrb	r3, [r2, r3]
 800a44a:	f003 031f 	and.w	r3, r3, #31
 800a44e:	693a      	ldr	r2, [r7, #16]
 800a450:	fa22 f303 	lsr.w	r3, r2, r3
 800a454:	4a0a      	ldr	r2, [pc, #40]	@ (800a480 <HAL_RCC_ClockConfig+0x360>)
 800a456:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a458:	4a0a      	ldr	r2, [pc, #40]	@ (800a484 <HAL_RCC_ClockConfig+0x364>)
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a45e:	4b0a      	ldr	r3, [pc, #40]	@ (800a488 <HAL_RCC_ClockConfig+0x368>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4618      	mov	r0, r3
 800a464:	f7f8 f938 	bl	80026d8 <HAL_InitTick>
 800a468:	4603      	mov	r3, r0
 800a46a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a46c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3718      	adds	r7, #24
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	58024400 	.word	0x58024400
 800a47c:	08018fe4 	.word	0x08018fe4
 800a480:	24000004 	.word	0x24000004
 800a484:	24000000 	.word	0x24000000
 800a488:	240000a4 	.word	0x240000a4

0800a48c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b089      	sub	sp, #36	@ 0x24
 800a490:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a492:	4bb3      	ldr	r3, [pc, #716]	@ (800a760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a494:	691b      	ldr	r3, [r3, #16]
 800a496:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a49a:	2b18      	cmp	r3, #24
 800a49c:	f200 8155 	bhi.w	800a74a <HAL_RCC_GetSysClockFreq+0x2be>
 800a4a0:	a201      	add	r2, pc, #4	@ (adr r2, 800a4a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a4a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a6:	bf00      	nop
 800a4a8:	0800a50d 	.word	0x0800a50d
 800a4ac:	0800a74b 	.word	0x0800a74b
 800a4b0:	0800a74b 	.word	0x0800a74b
 800a4b4:	0800a74b 	.word	0x0800a74b
 800a4b8:	0800a74b 	.word	0x0800a74b
 800a4bc:	0800a74b 	.word	0x0800a74b
 800a4c0:	0800a74b 	.word	0x0800a74b
 800a4c4:	0800a74b 	.word	0x0800a74b
 800a4c8:	0800a533 	.word	0x0800a533
 800a4cc:	0800a74b 	.word	0x0800a74b
 800a4d0:	0800a74b 	.word	0x0800a74b
 800a4d4:	0800a74b 	.word	0x0800a74b
 800a4d8:	0800a74b 	.word	0x0800a74b
 800a4dc:	0800a74b 	.word	0x0800a74b
 800a4e0:	0800a74b 	.word	0x0800a74b
 800a4e4:	0800a74b 	.word	0x0800a74b
 800a4e8:	0800a539 	.word	0x0800a539
 800a4ec:	0800a74b 	.word	0x0800a74b
 800a4f0:	0800a74b 	.word	0x0800a74b
 800a4f4:	0800a74b 	.word	0x0800a74b
 800a4f8:	0800a74b 	.word	0x0800a74b
 800a4fc:	0800a74b 	.word	0x0800a74b
 800a500:	0800a74b 	.word	0x0800a74b
 800a504:	0800a74b 	.word	0x0800a74b
 800a508:	0800a53f 	.word	0x0800a53f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a50c:	4b94      	ldr	r3, [pc, #592]	@ (800a760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f003 0320 	and.w	r3, r3, #32
 800a514:	2b00      	cmp	r3, #0
 800a516:	d009      	beq.n	800a52c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a518:	4b91      	ldr	r3, [pc, #580]	@ (800a760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	08db      	lsrs	r3, r3, #3
 800a51e:	f003 0303 	and.w	r3, r3, #3
 800a522:	4a90      	ldr	r2, [pc, #576]	@ (800a764 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a524:	fa22 f303 	lsr.w	r3, r2, r3
 800a528:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a52a:	e111      	b.n	800a750 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a52c:	4b8d      	ldr	r3, [pc, #564]	@ (800a764 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a52e:	61bb      	str	r3, [r7, #24]
      break;
 800a530:	e10e      	b.n	800a750 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a532:	4b8d      	ldr	r3, [pc, #564]	@ (800a768 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a534:	61bb      	str	r3, [r7, #24]
      break;
 800a536:	e10b      	b.n	800a750 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a538:	4b8c      	ldr	r3, [pc, #560]	@ (800a76c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a53a:	61bb      	str	r3, [r7, #24]
      break;
 800a53c:	e108      	b.n	800a750 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a53e:	4b88      	ldr	r3, [pc, #544]	@ (800a760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a542:	f003 0303 	and.w	r3, r3, #3
 800a546:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a548:	4b85      	ldr	r3, [pc, #532]	@ (800a760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a54a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a54c:	091b      	lsrs	r3, r3, #4
 800a54e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a552:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a554:	4b82      	ldr	r3, [pc, #520]	@ (800a760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a558:	f003 0301 	and.w	r3, r3, #1
 800a55c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a55e:	4b80      	ldr	r3, [pc, #512]	@ (800a760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a562:	08db      	lsrs	r3, r3, #3
 800a564:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a568:	68fa      	ldr	r2, [r7, #12]
 800a56a:	fb02 f303 	mul.w	r3, r2, r3
 800a56e:	ee07 3a90 	vmov	s15, r3
 800a572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a576:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	f000 80e1 	beq.w	800a744 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	2b02      	cmp	r3, #2
 800a586:	f000 8083 	beq.w	800a690 <HAL_RCC_GetSysClockFreq+0x204>
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	2b02      	cmp	r3, #2
 800a58e:	f200 80a1 	bhi.w	800a6d4 <HAL_RCC_GetSysClockFreq+0x248>
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d003      	beq.n	800a5a0 <HAL_RCC_GetSysClockFreq+0x114>
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d056      	beq.n	800a64c <HAL_RCC_GetSysClockFreq+0x1c0>
 800a59e:	e099      	b.n	800a6d4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5a0:	4b6f      	ldr	r3, [pc, #444]	@ (800a760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f003 0320 	and.w	r3, r3, #32
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d02d      	beq.n	800a608 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5ac:	4b6c      	ldr	r3, [pc, #432]	@ (800a760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	08db      	lsrs	r3, r3, #3
 800a5b2:	f003 0303 	and.w	r3, r3, #3
 800a5b6:	4a6b      	ldr	r2, [pc, #428]	@ (800a764 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a5b8:	fa22 f303 	lsr.w	r3, r2, r3
 800a5bc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	ee07 3a90 	vmov	s15, r3
 800a5c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	ee07 3a90 	vmov	s15, r3
 800a5ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5d6:	4b62      	ldr	r3, [pc, #392]	@ (800a760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5de:	ee07 3a90 	vmov	s15, r3
 800a5e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5e6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a5ea:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800a770 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a5ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a5fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a602:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a606:	e087      	b.n	800a718 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	ee07 3a90 	vmov	s15, r3
 800a60e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a612:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800a774 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a61a:	4b51      	ldr	r3, [pc, #324]	@ (800a760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a61c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a61e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a622:	ee07 3a90 	vmov	s15, r3
 800a626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a62a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a62e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800a770 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a63a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a63e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a642:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a646:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a64a:	e065      	b.n	800a718 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	ee07 3a90 	vmov	s15, r3
 800a652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a656:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800a778 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a65a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a65e:	4b40      	ldr	r3, [pc, #256]	@ (800a760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a666:	ee07 3a90 	vmov	s15, r3
 800a66a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a66e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a672:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800a770 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a67a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a67e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a68a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a68e:	e043      	b.n	800a718 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	ee07 3a90 	vmov	s15, r3
 800a696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a69a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800a77c <HAL_RCC_GetSysClockFreq+0x2f0>
 800a69e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6a2:	4b2f      	ldr	r3, [pc, #188]	@ (800a760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6aa:	ee07 3a90 	vmov	s15, r3
 800a6ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6b2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a6b6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800a770 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a6ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a6c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a6d2:	e021      	b.n	800a718 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	ee07 3a90 	vmov	s15, r3
 800a6da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6de:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800a778 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a6e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6e6:	4b1e      	ldr	r3, [pc, #120]	@ (800a760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6ee:	ee07 3a90 	vmov	s15, r3
 800a6f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6f6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a6fa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800a770 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a6fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a706:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a70a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a70e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a712:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a716:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a718:	4b11      	ldr	r3, [pc, #68]	@ (800a760 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a71a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a71c:	0a5b      	lsrs	r3, r3, #9
 800a71e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a722:	3301      	adds	r3, #1
 800a724:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	ee07 3a90 	vmov	s15, r3
 800a72c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a730:	edd7 6a07 	vldr	s13, [r7, #28]
 800a734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a73c:	ee17 3a90 	vmov	r3, s15
 800a740:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a742:	e005      	b.n	800a750 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a744:	2300      	movs	r3, #0
 800a746:	61bb      	str	r3, [r7, #24]
      break;
 800a748:	e002      	b.n	800a750 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a74a:	4b07      	ldr	r3, [pc, #28]	@ (800a768 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a74c:	61bb      	str	r3, [r7, #24]
      break;
 800a74e:	bf00      	nop
  }

  return sysclockfreq;
 800a750:	69bb      	ldr	r3, [r7, #24]
}
 800a752:	4618      	mov	r0, r3
 800a754:	3724      	adds	r7, #36	@ 0x24
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr
 800a75e:	bf00      	nop
 800a760:	58024400 	.word	0x58024400
 800a764:	03d09000 	.word	0x03d09000
 800a768:	003d0900 	.word	0x003d0900
 800a76c:	016e3600 	.word	0x016e3600
 800a770:	46000000 	.word	0x46000000
 800a774:	4c742400 	.word	0x4c742400
 800a778:	4a742400 	.word	0x4a742400
 800a77c:	4bb71b00 	.word	0x4bb71b00

0800a780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b082      	sub	sp, #8
 800a784:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800a786:	f7ff fe81 	bl	800a48c <HAL_RCC_GetSysClockFreq>
 800a78a:	4602      	mov	r2, r0
 800a78c:	4b10      	ldr	r3, [pc, #64]	@ (800a7d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800a78e:	699b      	ldr	r3, [r3, #24]
 800a790:	0a1b      	lsrs	r3, r3, #8
 800a792:	f003 030f 	and.w	r3, r3, #15
 800a796:	490f      	ldr	r1, [pc, #60]	@ (800a7d4 <HAL_RCC_GetHCLKFreq+0x54>)
 800a798:	5ccb      	ldrb	r3, [r1, r3]
 800a79a:	f003 031f 	and.w	r3, r3, #31
 800a79e:	fa22 f303 	lsr.w	r3, r2, r3
 800a7a2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800a7a4:	4b0a      	ldr	r3, [pc, #40]	@ (800a7d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800a7a6:	699b      	ldr	r3, [r3, #24]
 800a7a8:	f003 030f 	and.w	r3, r3, #15
 800a7ac:	4a09      	ldr	r2, [pc, #36]	@ (800a7d4 <HAL_RCC_GetHCLKFreq+0x54>)
 800a7ae:	5cd3      	ldrb	r3, [r2, r3]
 800a7b0:	f003 031f 	and.w	r3, r3, #31
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a7ba:	4a07      	ldr	r2, [pc, #28]	@ (800a7d8 <HAL_RCC_GetHCLKFreq+0x58>)
 800a7bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a7be:	4a07      	ldr	r2, [pc, #28]	@ (800a7dc <HAL_RCC_GetHCLKFreq+0x5c>)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a7c4:	4b04      	ldr	r3, [pc, #16]	@ (800a7d8 <HAL_RCC_GetHCLKFreq+0x58>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3708      	adds	r7, #8
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	58024400 	.word	0x58024400
 800a7d4:	08018fe4 	.word	0x08018fe4
 800a7d8:	24000004 	.word	0x24000004
 800a7dc:	24000000 	.word	0x24000000

0800a7e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800a7e4:	f7ff ffcc 	bl	800a780 <HAL_RCC_GetHCLKFreq>
 800a7e8:	4602      	mov	r2, r0
 800a7ea:	4b06      	ldr	r3, [pc, #24]	@ (800a804 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a7ec:	69db      	ldr	r3, [r3, #28]
 800a7ee:	091b      	lsrs	r3, r3, #4
 800a7f0:	f003 0307 	and.w	r3, r3, #7
 800a7f4:	4904      	ldr	r1, [pc, #16]	@ (800a808 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a7f6:	5ccb      	ldrb	r3, [r1, r3]
 800a7f8:	f003 031f 	and.w	r3, r3, #31
 800a7fc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800a800:	4618      	mov	r0, r3
 800a802:	bd80      	pop	{r7, pc}
 800a804:	58024400 	.word	0x58024400
 800a808:	08018fe4 	.word	0x08018fe4

0800a80c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800a810:	f7ff ffb6 	bl	800a780 <HAL_RCC_GetHCLKFreq>
 800a814:	4602      	mov	r2, r0
 800a816:	4b06      	ldr	r3, [pc, #24]	@ (800a830 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a818:	69db      	ldr	r3, [r3, #28]
 800a81a:	0a1b      	lsrs	r3, r3, #8
 800a81c:	f003 0307 	and.w	r3, r3, #7
 800a820:	4904      	ldr	r1, [pc, #16]	@ (800a834 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a822:	5ccb      	ldrb	r3, [r1, r3]
 800a824:	f003 031f 	and.w	r3, r3, #31
 800a828:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	bd80      	pop	{r7, pc}
 800a830:	58024400 	.word	0x58024400
 800a834:	08018fe4 	.word	0x08018fe4

0800a838 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	223f      	movs	r2, #63	@ 0x3f
 800a846:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a848:	4b1a      	ldr	r3, [pc, #104]	@ (800a8b4 <HAL_RCC_GetClockConfig+0x7c>)
 800a84a:	691b      	ldr	r3, [r3, #16]
 800a84c:	f003 0207 	and.w	r2, r3, #7
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 800a854:	4b17      	ldr	r3, [pc, #92]	@ (800a8b4 <HAL_RCC_GetClockConfig+0x7c>)
 800a856:	699b      	ldr	r3, [r3, #24]
 800a858:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 800a860:	4b14      	ldr	r3, [pc, #80]	@ (800a8b4 <HAL_RCC_GetClockConfig+0x7c>)
 800a862:	699b      	ldr	r3, [r3, #24]
 800a864:	f003 020f 	and.w	r2, r3, #15
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 800a86c:	4b11      	ldr	r3, [pc, #68]	@ (800a8b4 <HAL_RCC_GetClockConfig+0x7c>)
 800a86e:	699b      	ldr	r3, [r3, #24]
 800a870:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 800a878:	4b0e      	ldr	r3, [pc, #56]	@ (800a8b4 <HAL_RCC_GetClockConfig+0x7c>)
 800a87a:	69db      	ldr	r3, [r3, #28]
 800a87c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 800a884:	4b0b      	ldr	r3, [pc, #44]	@ (800a8b4 <HAL_RCC_GetClockConfig+0x7c>)
 800a886:	69db      	ldr	r3, [r3, #28]
 800a888:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 800a890:	4b08      	ldr	r3, [pc, #32]	@ (800a8b4 <HAL_RCC_GetClockConfig+0x7c>)
 800a892:	6a1b      	ldr	r3, [r3, #32]
 800a894:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a89c:	4b06      	ldr	r3, [pc, #24]	@ (800a8b8 <HAL_RCC_GetClockConfig+0x80>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f003 020f 	and.w	r2, r3, #15
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	601a      	str	r2, [r3, #0]
}
 800a8a8:	bf00      	nop
 800a8aa:	370c      	adds	r7, #12
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr
 800a8b4:	58024400 	.word	0x58024400
 800a8b8:	52002000 	.word	0x52002000

0800a8bc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a8bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a8c0:	b0c8      	sub	sp, #288	@ 0x120
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a8d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8dc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800a8e0:	2500      	movs	r5, #0
 800a8e2:	ea54 0305 	orrs.w	r3, r4, r5
 800a8e6:	d049      	beq.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a8e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a8f2:	d02f      	beq.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a8f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a8f8:	d828      	bhi.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a8fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a8fe:	d01a      	beq.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a900:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a904:	d822      	bhi.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a906:	2b00      	cmp	r3, #0
 800a908:	d003      	beq.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a90a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a90e:	d007      	beq.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a910:	e01c      	b.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a912:	4ba7      	ldr	r3, [pc, #668]	@ (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a916:	4aa6      	ldr	r2, [pc, #664]	@ (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a918:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a91c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a91e:	e01a      	b.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a920:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a924:	3308      	adds	r3, #8
 800a926:	2102      	movs	r1, #2
 800a928:	4618      	mov	r0, r3
 800a92a:	f001 fc43 	bl	800c1b4 <RCCEx_PLL2_Config>
 800a92e:	4603      	mov	r3, r0
 800a930:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a934:	e00f      	b.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a936:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a93a:	3328      	adds	r3, #40	@ 0x28
 800a93c:	2102      	movs	r1, #2
 800a93e:	4618      	mov	r0, r3
 800a940:	f001 fcea 	bl	800c318 <RCCEx_PLL3_Config>
 800a944:	4603      	mov	r3, r0
 800a946:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a94a:	e004      	b.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a94c:	2301      	movs	r3, #1
 800a94e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a952:	e000      	b.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a954:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a956:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d10a      	bne.n	800a974 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a95e:	4b94      	ldr	r3, [pc, #592]	@ (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a960:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a962:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a966:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a96a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a96c:	4a90      	ldr	r2, [pc, #576]	@ (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a96e:	430b      	orrs	r3, r1
 800a970:	6513      	str	r3, [r2, #80]	@ 0x50
 800a972:	e003      	b.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a974:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a978:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a97c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a984:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800a988:	f04f 0900 	mov.w	r9, #0
 800a98c:	ea58 0309 	orrs.w	r3, r8, r9
 800a990:	d047      	beq.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a992:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a998:	2b04      	cmp	r3, #4
 800a99a:	d82a      	bhi.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a99c:	a201      	add	r2, pc, #4	@ (adr r2, 800a9a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a99e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9a2:	bf00      	nop
 800a9a4:	0800a9b9 	.word	0x0800a9b9
 800a9a8:	0800a9c7 	.word	0x0800a9c7
 800a9ac:	0800a9dd 	.word	0x0800a9dd
 800a9b0:	0800a9fb 	.word	0x0800a9fb
 800a9b4:	0800a9fb 	.word	0x0800a9fb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9b8:	4b7d      	ldr	r3, [pc, #500]	@ (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a9ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9bc:	4a7c      	ldr	r2, [pc, #496]	@ (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a9be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a9c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a9c4:	e01a      	b.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a9c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9ca:	3308      	adds	r3, #8
 800a9cc:	2100      	movs	r1, #0
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f001 fbf0 	bl	800c1b4 <RCCEx_PLL2_Config>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a9da:	e00f      	b.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a9dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9e0:	3328      	adds	r3, #40	@ 0x28
 800a9e2:	2100      	movs	r1, #0
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f001 fc97 	bl	800c318 <RCCEx_PLL3_Config>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a9f0:	e004      	b.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a9f8:	e000      	b.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a9fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d10a      	bne.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aa04:	4b6a      	ldr	r3, [pc, #424]	@ (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa08:	f023 0107 	bic.w	r1, r3, #7
 800aa0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa12:	4a67      	ldr	r2, [pc, #412]	@ (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa14:	430b      	orrs	r3, r1
 800aa16:	6513      	str	r3, [r2, #80]	@ 0x50
 800aa18:	e003      	b.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa1a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aa1e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800aa22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800aa2e:	f04f 0b00 	mov.w	fp, #0
 800aa32:	ea5a 030b 	orrs.w	r3, sl, fp
 800aa36:	d054      	beq.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800aa38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa3e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800aa42:	d036      	beq.n	800aab2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800aa44:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800aa48:	d82f      	bhi.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800aa4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa4e:	d032      	beq.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800aa50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa54:	d829      	bhi.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800aa56:	2bc0      	cmp	r3, #192	@ 0xc0
 800aa58:	d02f      	beq.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800aa5a:	2bc0      	cmp	r3, #192	@ 0xc0
 800aa5c:	d825      	bhi.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800aa5e:	2b80      	cmp	r3, #128	@ 0x80
 800aa60:	d018      	beq.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800aa62:	2b80      	cmp	r3, #128	@ 0x80
 800aa64:	d821      	bhi.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d002      	beq.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800aa6a:	2b40      	cmp	r3, #64	@ 0x40
 800aa6c:	d007      	beq.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800aa6e:	e01c      	b.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa70:	4b4f      	ldr	r3, [pc, #316]	@ (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa74:	4a4e      	ldr	r2, [pc, #312]	@ (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aa7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800aa7c:	e01e      	b.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa82:	3308      	adds	r3, #8
 800aa84:	2100      	movs	r1, #0
 800aa86:	4618      	mov	r0, r3
 800aa88:	f001 fb94 	bl	800c1b4 <RCCEx_PLL2_Config>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800aa92:	e013      	b.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa98:	3328      	adds	r3, #40	@ 0x28
 800aa9a:	2100      	movs	r1, #0
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f001 fc3b 	bl	800c318 <RCCEx_PLL3_Config>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800aaa8:	e008      	b.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800aab0:	e004      	b.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800aab2:	bf00      	nop
 800aab4:	e002      	b.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800aab6:	bf00      	nop
 800aab8:	e000      	b.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800aaba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aabc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d10a      	bne.n	800aada <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800aac4:	4b3a      	ldr	r3, [pc, #232]	@ (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aac8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800aacc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aad2:	4a37      	ldr	r2, [pc, #220]	@ (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aad4:	430b      	orrs	r3, r1
 800aad6:	6513      	str	r3, [r2, #80]	@ 0x50
 800aad8:	e003      	b.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aada:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aade:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800aae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaea:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800aaee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800aaf8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800aafc:	460b      	mov	r3, r1
 800aafe:	4313      	orrs	r3, r2
 800ab00:	d05c      	beq.n	800abbc <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800ab02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab08:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800ab0c:	d03b      	beq.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800ab0e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800ab12:	d834      	bhi.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800ab14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab18:	d037      	beq.n	800ab8a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800ab1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab1e:	d82e      	bhi.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800ab20:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800ab24:	d033      	beq.n	800ab8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ab26:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800ab2a:	d828      	bhi.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800ab2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab30:	d01a      	beq.n	800ab68 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800ab32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab36:	d822      	bhi.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d003      	beq.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800ab3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab40:	d007      	beq.n	800ab52 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800ab42:	e01c      	b.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab44:	4b1a      	ldr	r3, [pc, #104]	@ (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab48:	4a19      	ldr	r2, [pc, #100]	@ (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ab4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800ab50:	e01e      	b.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab56:	3308      	adds	r3, #8
 800ab58:	2100      	movs	r1, #0
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f001 fb2a 	bl	800c1b4 <RCCEx_PLL2_Config>
 800ab60:	4603      	mov	r3, r0
 800ab62:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800ab66:	e013      	b.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab6c:	3328      	adds	r3, #40	@ 0x28
 800ab6e:	2100      	movs	r1, #0
 800ab70:	4618      	mov	r0, r3
 800ab72:	f001 fbd1 	bl	800c318 <RCCEx_PLL3_Config>
 800ab76:	4603      	mov	r3, r0
 800ab78:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800ab7c:	e008      	b.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ab84:	e004      	b.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800ab86:	bf00      	nop
 800ab88:	e002      	b.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800ab8a:	bf00      	nop
 800ab8c:	e000      	b.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800ab8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d10d      	bne.n	800abb4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800ab98:	4b05      	ldr	r3, [pc, #20]	@ (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab9c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800aba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aba6:	4a02      	ldr	r2, [pc, #8]	@ (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aba8:	430b      	orrs	r3, r1
 800abaa:	6513      	str	r3, [r2, #80]	@ 0x50
 800abac:	e006      	b.n	800abbc <HAL_RCCEx_PeriphCLKConfig+0x300>
 800abae:	bf00      	nop
 800abb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abb4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800abb8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800abbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800abc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800abcc:	2300      	movs	r3, #0
 800abce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800abd2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800abd6:	460b      	mov	r3, r1
 800abd8:	4313      	orrs	r3, r2
 800abda:	d03a      	beq.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800abdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abe2:	2b30      	cmp	r3, #48	@ 0x30
 800abe4:	d01f      	beq.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800abe6:	2b30      	cmp	r3, #48	@ 0x30
 800abe8:	d819      	bhi.n	800ac1e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800abea:	2b20      	cmp	r3, #32
 800abec:	d00c      	beq.n	800ac08 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800abee:	2b20      	cmp	r3, #32
 800abf0:	d815      	bhi.n	800ac1e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d019      	beq.n	800ac2a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800abf6:	2b10      	cmp	r3, #16
 800abf8:	d111      	bne.n	800ac1e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abfa:	4bae      	ldr	r3, [pc, #696]	@ (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800abfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abfe:	4aad      	ldr	r2, [pc, #692]	@ (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ac04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800ac06:	e011      	b.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ac08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac0c:	3308      	adds	r3, #8
 800ac0e:	2102      	movs	r1, #2
 800ac10:	4618      	mov	r0, r3
 800ac12:	f001 facf 	bl	800c1b4 <RCCEx_PLL2_Config>
 800ac16:	4603      	mov	r3, r0
 800ac18:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800ac1c:	e006      	b.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ac24:	e002      	b.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800ac26:	bf00      	nop
 800ac28:	e000      	b.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800ac2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac2c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d10a      	bne.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800ac34:	4b9f      	ldr	r3, [pc, #636]	@ (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac38:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800ac3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac42:	4a9c      	ldr	r2, [pc, #624]	@ (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac44:	430b      	orrs	r3, r1
 800ac46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ac48:	e003      	b.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac4a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ac4e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ac52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800ac5e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ac62:	2300      	movs	r3, #0
 800ac64:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ac68:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	d051      	beq.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ac72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ac7c:	d035      	beq.n	800acea <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800ac7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ac82:	d82e      	bhi.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800ac84:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ac88:	d031      	beq.n	800acee <HAL_RCCEx_PeriphCLKConfig+0x432>
 800ac8a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ac8e:	d828      	bhi.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800ac90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac94:	d01a      	beq.n	800accc <HAL_RCCEx_PeriphCLKConfig+0x410>
 800ac96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac9a:	d822      	bhi.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d003      	beq.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800aca0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aca4:	d007      	beq.n	800acb6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800aca6:	e01c      	b.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aca8:	4b82      	ldr	r3, [pc, #520]	@ (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800acaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acac:	4a81      	ldr	r2, [pc, #516]	@ (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800acae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800acb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800acb4:	e01c      	b.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800acb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acba:	3308      	adds	r3, #8
 800acbc:	2100      	movs	r1, #0
 800acbe:	4618      	mov	r0, r3
 800acc0:	f001 fa78 	bl	800c1b4 <RCCEx_PLL2_Config>
 800acc4:	4603      	mov	r3, r0
 800acc6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800acca:	e011      	b.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800accc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acd0:	3328      	adds	r3, #40	@ 0x28
 800acd2:	2100      	movs	r1, #0
 800acd4:	4618      	mov	r0, r3
 800acd6:	f001 fb1f 	bl	800c318 <RCCEx_PLL3_Config>
 800acda:	4603      	mov	r3, r0
 800acdc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ace0:	e006      	b.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ace2:	2301      	movs	r3, #1
 800ace4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ace8:	e002      	b.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800acea:	bf00      	nop
 800acec:	e000      	b.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800acee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acf0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d10a      	bne.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800acf8:	4b6e      	ldr	r3, [pc, #440]	@ (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800acfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acfc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800ad00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad06:	4a6b      	ldr	r2, [pc, #428]	@ (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad08:	430b      	orrs	r3, r1
 800ad0a:	6513      	str	r3, [r2, #80]	@ 0x50
 800ad0c:	e003      	b.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad0e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ad12:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ad16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad1e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800ad22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ad26:	2300      	movs	r3, #0
 800ad28:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800ad2c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800ad30:	460b      	mov	r3, r1
 800ad32:	4313      	orrs	r3, r2
 800ad34:	d053      	beq.n	800adde <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ad36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ad3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ad40:	d033      	beq.n	800adaa <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800ad42:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ad46:	d82c      	bhi.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ad48:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ad4c:	d02f      	beq.n	800adae <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800ad4e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ad52:	d826      	bhi.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ad54:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ad58:	d02b      	beq.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ad5a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ad5e:	d820      	bhi.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ad60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad64:	d012      	beq.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800ad66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad6a:	d81a      	bhi.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d022      	beq.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800ad70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad74:	d115      	bne.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad7a:	3308      	adds	r3, #8
 800ad7c:	2101      	movs	r1, #1
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f001 fa18 	bl	800c1b4 <RCCEx_PLL2_Config>
 800ad84:	4603      	mov	r3, r0
 800ad86:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ad8a:	e015      	b.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad90:	3328      	adds	r3, #40	@ 0x28
 800ad92:	2101      	movs	r1, #1
 800ad94:	4618      	mov	r0, r3
 800ad96:	f001 fabf 	bl	800c318 <RCCEx_PLL3_Config>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ada0:	e00a      	b.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ada2:	2301      	movs	r3, #1
 800ada4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ada8:	e006      	b.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800adaa:	bf00      	nop
 800adac:	e004      	b.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800adae:	bf00      	nop
 800adb0:	e002      	b.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800adb2:	bf00      	nop
 800adb4:	e000      	b.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800adb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adb8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d10a      	bne.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800adc0:	4b3c      	ldr	r3, [pc, #240]	@ (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800adc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800adc4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800adc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800adcc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800adce:	4a39      	ldr	r2, [pc, #228]	@ (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800add0:	430b      	orrs	r3, r1
 800add2:	6513      	str	r3, [r2, #80]	@ 0x50
 800add4:	e003      	b.n	800adde <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800add6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800adda:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800adde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ade2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800adea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800adee:	2300      	movs	r3, #0
 800adf0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800adf4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800adf8:	460b      	mov	r3, r1
 800adfa:	4313      	orrs	r3, r2
 800adfc:	d060      	beq.n	800aec0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800adfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ae06:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800ae0a:	d039      	beq.n	800ae80 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800ae0c:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800ae10:	d832      	bhi.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800ae12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ae16:	d035      	beq.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800ae18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ae1c:	d82c      	bhi.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800ae1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae22:	d031      	beq.n	800ae88 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800ae24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae28:	d826      	bhi.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800ae2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ae2e:	d02d      	beq.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800ae30:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ae34:	d820      	bhi.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800ae36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae3a:	d012      	beq.n	800ae62 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800ae3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae40:	d81a      	bhi.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d024      	beq.n	800ae90 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800ae46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae4a:	d115      	bne.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae50:	3308      	adds	r3, #8
 800ae52:	2101      	movs	r1, #1
 800ae54:	4618      	mov	r0, r3
 800ae56:	f001 f9ad 	bl	800c1b4 <RCCEx_PLL2_Config>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ae60:	e017      	b.n	800ae92 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ae62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae66:	3328      	adds	r3, #40	@ 0x28
 800ae68:	2101      	movs	r1, #1
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f001 fa54 	bl	800c318 <RCCEx_PLL3_Config>
 800ae70:	4603      	mov	r3, r0
 800ae72:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ae76:	e00c      	b.n	800ae92 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ae78:	2301      	movs	r3, #1
 800ae7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ae7e:	e008      	b.n	800ae92 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ae80:	bf00      	nop
 800ae82:	e006      	b.n	800ae92 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ae84:	bf00      	nop
 800ae86:	e004      	b.n	800ae92 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ae88:	bf00      	nop
 800ae8a:	e002      	b.n	800ae92 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ae8c:	bf00      	nop
 800ae8e:	e000      	b.n	800ae92 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ae90:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae92:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d10e      	bne.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ae9a:	4b06      	ldr	r3, [pc, #24]	@ (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae9e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800aea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aea6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aeaa:	4a02      	ldr	r2, [pc, #8]	@ (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aeac:	430b      	orrs	r3, r1
 800aeae:	6593      	str	r3, [r2, #88]	@ 0x58
 800aeb0:	e006      	b.n	800aec0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800aeb2:	bf00      	nop
 800aeb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeb8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aebc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800aec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800aecc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800aed0:	2300      	movs	r3, #0
 800aed2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800aed6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800aeda:	460b      	mov	r3, r1
 800aedc:	4313      	orrs	r3, r2
 800aede:	d037      	beq.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800aee0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aee4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aee6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aeea:	d00e      	beq.n	800af0a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800aeec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aef0:	d816      	bhi.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d018      	beq.n	800af28 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800aef6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aefa:	d111      	bne.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aefc:	4bc4      	ldr	r3, [pc, #784]	@ (800b210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aefe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af00:	4ac3      	ldr	r2, [pc, #780]	@ (800b210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800af06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800af08:	e00f      	b.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af0e:	3308      	adds	r3, #8
 800af10:	2101      	movs	r1, #1
 800af12:	4618      	mov	r0, r3
 800af14:	f001 f94e 	bl	800c1b4 <RCCEx_PLL2_Config>
 800af18:	4603      	mov	r3, r0
 800af1a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800af1e:	e004      	b.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af20:	2301      	movs	r3, #1
 800af22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800af26:	e000      	b.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800af28:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af2a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d10a      	bne.n	800af48 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800af32:	4bb7      	ldr	r3, [pc, #732]	@ (800b210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af36:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800af3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800af40:	4ab3      	ldr	r2, [pc, #716]	@ (800b210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af42:	430b      	orrs	r3, r1
 800af44:	6513      	str	r3, [r2, #80]	@ 0x50
 800af46:	e003      	b.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af48:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800af4c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800af50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af58:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800af5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800af60:	2300      	movs	r3, #0
 800af62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800af66:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800af6a:	460b      	mov	r3, r1
 800af6c:	4313      	orrs	r3, r2
 800af6e:	d039      	beq.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800af70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af76:	2b03      	cmp	r3, #3
 800af78:	d81c      	bhi.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800af7a:	a201      	add	r2, pc, #4	@ (adr r2, 800af80 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800af7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af80:	0800afbd 	.word	0x0800afbd
 800af84:	0800af91 	.word	0x0800af91
 800af88:	0800af9f 	.word	0x0800af9f
 800af8c:	0800afbd 	.word	0x0800afbd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af90:	4b9f      	ldr	r3, [pc, #636]	@ (800b210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af94:	4a9e      	ldr	r2, [pc, #632]	@ (800b210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800af9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800af9c:	e00f      	b.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800af9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afa2:	3308      	adds	r3, #8
 800afa4:	2102      	movs	r1, #2
 800afa6:	4618      	mov	r0, r3
 800afa8:	f001 f904 	bl	800c1b4 <RCCEx_PLL2_Config>
 800afac:	4603      	mov	r3, r0
 800afae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800afb2:	e004      	b.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800afb4:	2301      	movs	r3, #1
 800afb6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800afba:	e000      	b.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800afbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afbe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d10a      	bne.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800afc6:	4b92      	ldr	r3, [pc, #584]	@ (800b210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800afca:	f023 0103 	bic.w	r1, r3, #3
 800afce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800afd4:	4a8e      	ldr	r2, [pc, #568]	@ (800b210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afd6:	430b      	orrs	r3, r1
 800afd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800afda:	e003      	b.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afdc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800afe0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800afe4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afec:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800aff0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800aff4:	2300      	movs	r3, #0
 800aff6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800affa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800affe:	460b      	mov	r3, r1
 800b000:	4313      	orrs	r3, r2
 800b002:	f000 8099 	beq.w	800b138 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b006:	4b83      	ldr	r3, [pc, #524]	@ (800b214 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4a82      	ldr	r2, [pc, #520]	@ (800b214 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b00c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b010:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b012:	f7fa fd45 	bl	8005aa0 <HAL_GetTick>
 800b016:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b01a:	e00b      	b.n	800b034 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b01c:	f7fa fd40 	bl	8005aa0 <HAL_GetTick>
 800b020:	4602      	mov	r2, r0
 800b022:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b026:	1ad3      	subs	r3, r2, r3
 800b028:	2b64      	cmp	r3, #100	@ 0x64
 800b02a:	d903      	bls.n	800b034 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800b02c:	2303      	movs	r3, #3
 800b02e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b032:	e005      	b.n	800b040 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b034:	4b77      	ldr	r3, [pc, #476]	@ (800b214 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d0ed      	beq.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800b040:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b044:	2b00      	cmp	r3, #0
 800b046:	d173      	bne.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b048:	4b71      	ldr	r3, [pc, #452]	@ (800b210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b04a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b04c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b050:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b054:	4053      	eors	r3, r2
 800b056:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d015      	beq.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b05e:	4b6c      	ldr	r3, [pc, #432]	@ (800b210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b062:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b066:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b06a:	4b69      	ldr	r3, [pc, #420]	@ (800b210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b06c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b06e:	4a68      	ldr	r2, [pc, #416]	@ (800b210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b070:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b074:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b076:	4b66      	ldr	r3, [pc, #408]	@ (800b210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b07a:	4a65      	ldr	r2, [pc, #404]	@ (800b210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b07c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b080:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b082:	4a63      	ldr	r2, [pc, #396]	@ (800b210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b088:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b08a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b08e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b092:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b096:	d118      	bne.n	800b0ca <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b098:	f7fa fd02 	bl	8005aa0 <HAL_GetTick>
 800b09c:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b0a0:	e00d      	b.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b0a2:	f7fa fcfd 	bl	8005aa0 <HAL_GetTick>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b0ac:	1ad2      	subs	r2, r2, r3
 800b0ae:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d903      	bls.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800b0b6:	2303      	movs	r3, #3
 800b0b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800b0bc:	e005      	b.n	800b0ca <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b0be:	4b54      	ldr	r3, [pc, #336]	@ (800b210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0c2:	f003 0302 	and.w	r3, r3, #2
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d0eb      	beq.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800b0ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d129      	bne.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b0d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b0da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b0de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b0e2:	d10e      	bne.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800b0e4:	4b4a      	ldr	r3, [pc, #296]	@ (800b210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0e6:	691b      	ldr	r3, [r3, #16]
 800b0e8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800b0ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b0f4:	091a      	lsrs	r2, r3, #4
 800b0f6:	4b48      	ldr	r3, [pc, #288]	@ (800b218 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800b0f8:	4013      	ands	r3, r2
 800b0fa:	4a45      	ldr	r2, [pc, #276]	@ (800b210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0fc:	430b      	orrs	r3, r1
 800b0fe:	6113      	str	r3, [r2, #16]
 800b100:	e005      	b.n	800b10e <HAL_RCCEx_PeriphCLKConfig+0x852>
 800b102:	4b43      	ldr	r3, [pc, #268]	@ (800b210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b104:	691b      	ldr	r3, [r3, #16]
 800b106:	4a42      	ldr	r2, [pc, #264]	@ (800b210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b108:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b10c:	6113      	str	r3, [r2, #16]
 800b10e:	4b40      	ldr	r3, [pc, #256]	@ (800b210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b110:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800b112:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b116:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b11a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b11e:	4a3c      	ldr	r2, [pc, #240]	@ (800b210 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b120:	430b      	orrs	r3, r1
 800b122:	6713      	str	r3, [r2, #112]	@ 0x70
 800b124:	e008      	b.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b126:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b12a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800b12e:	e003      	b.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b130:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b134:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b138:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b140:	f002 0301 	and.w	r3, r2, #1
 800b144:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b148:	2300      	movs	r3, #0
 800b14a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b14e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b152:	460b      	mov	r3, r1
 800b154:	4313      	orrs	r3, r2
 800b156:	f000 8090 	beq.w	800b27a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b15a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b15e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b162:	2b28      	cmp	r3, #40	@ 0x28
 800b164:	d870      	bhi.n	800b248 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b166:	a201      	add	r2, pc, #4	@ (adr r2, 800b16c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b16c:	0800b251 	.word	0x0800b251
 800b170:	0800b249 	.word	0x0800b249
 800b174:	0800b249 	.word	0x0800b249
 800b178:	0800b249 	.word	0x0800b249
 800b17c:	0800b249 	.word	0x0800b249
 800b180:	0800b249 	.word	0x0800b249
 800b184:	0800b249 	.word	0x0800b249
 800b188:	0800b249 	.word	0x0800b249
 800b18c:	0800b21d 	.word	0x0800b21d
 800b190:	0800b249 	.word	0x0800b249
 800b194:	0800b249 	.word	0x0800b249
 800b198:	0800b249 	.word	0x0800b249
 800b19c:	0800b249 	.word	0x0800b249
 800b1a0:	0800b249 	.word	0x0800b249
 800b1a4:	0800b249 	.word	0x0800b249
 800b1a8:	0800b249 	.word	0x0800b249
 800b1ac:	0800b233 	.word	0x0800b233
 800b1b0:	0800b249 	.word	0x0800b249
 800b1b4:	0800b249 	.word	0x0800b249
 800b1b8:	0800b249 	.word	0x0800b249
 800b1bc:	0800b249 	.word	0x0800b249
 800b1c0:	0800b249 	.word	0x0800b249
 800b1c4:	0800b249 	.word	0x0800b249
 800b1c8:	0800b249 	.word	0x0800b249
 800b1cc:	0800b251 	.word	0x0800b251
 800b1d0:	0800b249 	.word	0x0800b249
 800b1d4:	0800b249 	.word	0x0800b249
 800b1d8:	0800b249 	.word	0x0800b249
 800b1dc:	0800b249 	.word	0x0800b249
 800b1e0:	0800b249 	.word	0x0800b249
 800b1e4:	0800b249 	.word	0x0800b249
 800b1e8:	0800b249 	.word	0x0800b249
 800b1ec:	0800b251 	.word	0x0800b251
 800b1f0:	0800b249 	.word	0x0800b249
 800b1f4:	0800b249 	.word	0x0800b249
 800b1f8:	0800b249 	.word	0x0800b249
 800b1fc:	0800b249 	.word	0x0800b249
 800b200:	0800b249 	.word	0x0800b249
 800b204:	0800b249 	.word	0x0800b249
 800b208:	0800b249 	.word	0x0800b249
 800b20c:	0800b251 	.word	0x0800b251
 800b210:	58024400 	.word	0x58024400
 800b214:	58024800 	.word	0x58024800
 800b218:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b21c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b220:	3308      	adds	r3, #8
 800b222:	2101      	movs	r1, #1
 800b224:	4618      	mov	r0, r3
 800b226:	f000 ffc5 	bl	800c1b4 <RCCEx_PLL2_Config>
 800b22a:	4603      	mov	r3, r0
 800b22c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b230:	e00f      	b.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b232:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b236:	3328      	adds	r3, #40	@ 0x28
 800b238:	2101      	movs	r1, #1
 800b23a:	4618      	mov	r0, r3
 800b23c:	f001 f86c 	bl	800c318 <RCCEx_PLL3_Config>
 800b240:	4603      	mov	r3, r0
 800b242:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b246:	e004      	b.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b248:	2301      	movs	r3, #1
 800b24a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b24e:	e000      	b.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b250:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b252:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b256:	2b00      	cmp	r3, #0
 800b258:	d10b      	bne.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b25a:	4bc0      	ldr	r3, [pc, #768]	@ (800b55c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b25c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b25e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800b262:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b266:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b26a:	4abc      	ldr	r2, [pc, #752]	@ (800b55c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b26c:	430b      	orrs	r3, r1
 800b26e:	6553      	str	r3, [r2, #84]	@ 0x54
 800b270:	e003      	b.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b272:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b276:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b27a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b282:	f002 0302 	and.w	r3, r2, #2
 800b286:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b28a:	2300      	movs	r3, #0
 800b28c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b290:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800b294:	460b      	mov	r3, r1
 800b296:	4313      	orrs	r3, r2
 800b298:	d043      	beq.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b29a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b29e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2a2:	2b05      	cmp	r3, #5
 800b2a4:	d824      	bhi.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800b2a6:	a201      	add	r2, pc, #4	@ (adr r2, 800b2ac <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800b2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ac:	0800b2f9 	.word	0x0800b2f9
 800b2b0:	0800b2c5 	.word	0x0800b2c5
 800b2b4:	0800b2db 	.word	0x0800b2db
 800b2b8:	0800b2f9 	.word	0x0800b2f9
 800b2bc:	0800b2f9 	.word	0x0800b2f9
 800b2c0:	0800b2f9 	.word	0x0800b2f9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b2c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2c8:	3308      	adds	r3, #8
 800b2ca:	2101      	movs	r1, #1
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f000 ff71 	bl	800c1b4 <RCCEx_PLL2_Config>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b2d8:	e00f      	b.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b2da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2de:	3328      	adds	r3, #40	@ 0x28
 800b2e0:	2101      	movs	r1, #1
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f001 f818 	bl	800c318 <RCCEx_PLL3_Config>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b2ee:	e004      	b.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b2f6:	e000      	b.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800b2f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2fa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d10b      	bne.n	800b31a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b302:	4b96      	ldr	r3, [pc, #600]	@ (800b55c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b306:	f023 0107 	bic.w	r1, r3, #7
 800b30a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b30e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b312:	4a92      	ldr	r2, [pc, #584]	@ (800b55c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b314:	430b      	orrs	r3, r1
 800b316:	6553      	str	r3, [r2, #84]	@ 0x54
 800b318:	e003      	b.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b31a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b31e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b322:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32a:	f002 0304 	and.w	r3, r2, #4
 800b32e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b332:	2300      	movs	r3, #0
 800b334:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b338:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800b33c:	460b      	mov	r3, r1
 800b33e:	4313      	orrs	r3, r2
 800b340:	d043      	beq.n	800b3ca <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b342:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b346:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b34a:	2b05      	cmp	r3, #5
 800b34c:	d824      	bhi.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800b34e:	a201      	add	r2, pc, #4	@ (adr r2, 800b354 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800b350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b354:	0800b3a1 	.word	0x0800b3a1
 800b358:	0800b36d 	.word	0x0800b36d
 800b35c:	0800b383 	.word	0x0800b383
 800b360:	0800b3a1 	.word	0x0800b3a1
 800b364:	0800b3a1 	.word	0x0800b3a1
 800b368:	0800b3a1 	.word	0x0800b3a1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b36c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b370:	3308      	adds	r3, #8
 800b372:	2101      	movs	r1, #1
 800b374:	4618      	mov	r0, r3
 800b376:	f000 ff1d 	bl	800c1b4 <RCCEx_PLL2_Config>
 800b37a:	4603      	mov	r3, r0
 800b37c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b380:	e00f      	b.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b382:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b386:	3328      	adds	r3, #40	@ 0x28
 800b388:	2101      	movs	r1, #1
 800b38a:	4618      	mov	r0, r3
 800b38c:	f000 ffc4 	bl	800c318 <RCCEx_PLL3_Config>
 800b390:	4603      	mov	r3, r0
 800b392:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b396:	e004      	b.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b398:	2301      	movs	r3, #1
 800b39a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b39e:	e000      	b.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800b3a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d10b      	bne.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b3aa:	4b6c      	ldr	r3, [pc, #432]	@ (800b55c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b3ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b3ae:	f023 0107 	bic.w	r1, r3, #7
 800b3b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b3ba:	4a68      	ldr	r2, [pc, #416]	@ (800b55c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b3bc:	430b      	orrs	r3, r1
 800b3be:	6593      	str	r3, [r2, #88]	@ 0x58
 800b3c0:	e003      	b.n	800b3ca <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b3c6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b3ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d2:	f002 0320 	and.w	r3, r2, #32
 800b3d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b3da:	2300      	movs	r3, #0
 800b3dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b3e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b3e4:	460b      	mov	r3, r1
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	d055      	beq.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b3ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b3f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b3f6:	d033      	beq.n	800b460 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b3f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b3fc:	d82c      	bhi.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800b3fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b402:	d02f      	beq.n	800b464 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b404:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b408:	d826      	bhi.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800b40a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b40e:	d02b      	beq.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b410:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b414:	d820      	bhi.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800b416:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b41a:	d012      	beq.n	800b442 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800b41c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b420:	d81a      	bhi.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800b422:	2b00      	cmp	r3, #0
 800b424:	d022      	beq.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800b426:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b42a:	d115      	bne.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b42c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b430:	3308      	adds	r3, #8
 800b432:	2100      	movs	r1, #0
 800b434:	4618      	mov	r0, r3
 800b436:	f000 febd 	bl	800c1b4 <RCCEx_PLL2_Config>
 800b43a:	4603      	mov	r3, r0
 800b43c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b440:	e015      	b.n	800b46e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b442:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b446:	3328      	adds	r3, #40	@ 0x28
 800b448:	2102      	movs	r1, #2
 800b44a:	4618      	mov	r0, r3
 800b44c:	f000 ff64 	bl	800c318 <RCCEx_PLL3_Config>
 800b450:	4603      	mov	r3, r0
 800b452:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b456:	e00a      	b.n	800b46e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b458:	2301      	movs	r3, #1
 800b45a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b45e:	e006      	b.n	800b46e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800b460:	bf00      	nop
 800b462:	e004      	b.n	800b46e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800b464:	bf00      	nop
 800b466:	e002      	b.n	800b46e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800b468:	bf00      	nop
 800b46a:	e000      	b.n	800b46e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800b46c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b46e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b472:	2b00      	cmp	r3, #0
 800b474:	d10b      	bne.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b476:	4b39      	ldr	r3, [pc, #228]	@ (800b55c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b47a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b47e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b482:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b486:	4a35      	ldr	r2, [pc, #212]	@ (800b55c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b488:	430b      	orrs	r3, r1
 800b48a:	6553      	str	r3, [r2, #84]	@ 0x54
 800b48c:	e003      	b.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b48e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b492:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b496:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800b4a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b4ac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800b4b0:	460b      	mov	r3, r1
 800b4b2:	4313      	orrs	r3, r2
 800b4b4:	d058      	beq.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b4b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b4be:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b4c2:	d033      	beq.n	800b52c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b4c4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b4c8:	d82c      	bhi.n	800b524 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b4ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b4ce:	d02f      	beq.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b4d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b4d4:	d826      	bhi.n	800b524 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b4d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b4da:	d02b      	beq.n	800b534 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b4dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b4e0:	d820      	bhi.n	800b524 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b4e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b4e6:	d012      	beq.n	800b50e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800b4e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b4ec:	d81a      	bhi.n	800b524 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d022      	beq.n	800b538 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800b4f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b4f6:	d115      	bne.n	800b524 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b4f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4fc:	3308      	adds	r3, #8
 800b4fe:	2100      	movs	r1, #0
 800b500:	4618      	mov	r0, r3
 800b502:	f000 fe57 	bl	800c1b4 <RCCEx_PLL2_Config>
 800b506:	4603      	mov	r3, r0
 800b508:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b50c:	e015      	b.n	800b53a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b50e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b512:	3328      	adds	r3, #40	@ 0x28
 800b514:	2102      	movs	r1, #2
 800b516:	4618      	mov	r0, r3
 800b518:	f000 fefe 	bl	800c318 <RCCEx_PLL3_Config>
 800b51c:	4603      	mov	r3, r0
 800b51e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b522:	e00a      	b.n	800b53a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b524:	2301      	movs	r3, #1
 800b526:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b52a:	e006      	b.n	800b53a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800b52c:	bf00      	nop
 800b52e:	e004      	b.n	800b53a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800b530:	bf00      	nop
 800b532:	e002      	b.n	800b53a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800b534:	bf00      	nop
 800b536:	e000      	b.n	800b53a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800b538:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b53a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d10e      	bne.n	800b560 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b542:	4b06      	ldr	r3, [pc, #24]	@ (800b55c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b546:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800b54a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b54e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b552:	4a02      	ldr	r2, [pc, #8]	@ (800b55c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b554:	430b      	orrs	r3, r1
 800b556:	6593      	str	r3, [r2, #88]	@ 0x58
 800b558:	e006      	b.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800b55a:	bf00      	nop
 800b55c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b560:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b564:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b568:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b570:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800b574:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b578:	2300      	movs	r3, #0
 800b57a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b57e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800b582:	460b      	mov	r3, r1
 800b584:	4313      	orrs	r3, r2
 800b586:	d055      	beq.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b588:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b58c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b590:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b594:	d033      	beq.n	800b5fe <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b596:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b59a:	d82c      	bhi.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800b59c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b5a0:	d02f      	beq.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b5a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b5a6:	d826      	bhi.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800b5a8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b5ac:	d02b      	beq.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b5ae:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b5b2:	d820      	bhi.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800b5b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b5b8:	d012      	beq.n	800b5e0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800b5ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b5be:	d81a      	bhi.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d022      	beq.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800b5c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b5c8:	d115      	bne.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b5ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5ce:	3308      	adds	r3, #8
 800b5d0:	2100      	movs	r1, #0
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f000 fdee 	bl	800c1b4 <RCCEx_PLL2_Config>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b5de:	e015      	b.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b5e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5e4:	3328      	adds	r3, #40	@ 0x28
 800b5e6:	2102      	movs	r1, #2
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f000 fe95 	bl	800c318 <RCCEx_PLL3_Config>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b5f4:	e00a      	b.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b5fc:	e006      	b.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800b5fe:	bf00      	nop
 800b600:	e004      	b.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800b602:	bf00      	nop
 800b604:	e002      	b.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800b606:	bf00      	nop
 800b608:	e000      	b.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800b60a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b60c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b610:	2b00      	cmp	r3, #0
 800b612:	d10b      	bne.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b614:	4ba1      	ldr	r3, [pc, #644]	@ (800b89c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b618:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800b61c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b620:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b624:	4a9d      	ldr	r2, [pc, #628]	@ (800b89c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b626:	430b      	orrs	r3, r1
 800b628:	6593      	str	r3, [r2, #88]	@ 0x58
 800b62a:	e003      	b.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b62c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b630:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b634:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63c:	f002 0308 	and.w	r3, r2, #8
 800b640:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b644:	2300      	movs	r3, #0
 800b646:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b64a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b64e:	460b      	mov	r3, r1
 800b650:	4313      	orrs	r3, r2
 800b652:	d01e      	beq.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b654:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b658:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b65c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b660:	d10c      	bne.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b662:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b666:	3328      	adds	r3, #40	@ 0x28
 800b668:	2102      	movs	r1, #2
 800b66a:	4618      	mov	r0, r3
 800b66c:	f000 fe54 	bl	800c318 <RCCEx_PLL3_Config>
 800b670:	4603      	mov	r3, r0
 800b672:	2b00      	cmp	r3, #0
 800b674:	d002      	beq.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800b676:	2301      	movs	r3, #1
 800b678:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b67c:	4b87      	ldr	r3, [pc, #540]	@ (800b89c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b67e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b680:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b684:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b688:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b68c:	4a83      	ldr	r2, [pc, #524]	@ (800b89c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b68e:	430b      	orrs	r3, r1
 800b690:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b692:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69a:	f002 0310 	and.w	r3, r2, #16
 800b69e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b6a8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b6ac:	460b      	mov	r3, r1
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	d01e      	beq.n	800b6f0 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b6b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b6ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b6be:	d10c      	bne.n	800b6da <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b6c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6c4:	3328      	adds	r3, #40	@ 0x28
 800b6c6:	2102      	movs	r1, #2
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f000 fe25 	bl	800c318 <RCCEx_PLL3_Config>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d002      	beq.n	800b6da <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b6da:	4b70      	ldr	r3, [pc, #448]	@ (800b89c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b6dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b6de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b6e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b6ea:	4a6c      	ldr	r2, [pc, #432]	@ (800b89c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b6ec:	430b      	orrs	r3, r1
 800b6ee:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b6f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b6fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b700:	2300      	movs	r3, #0
 800b702:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b706:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b70a:	460b      	mov	r3, r1
 800b70c:	4313      	orrs	r3, r2
 800b70e:	d03e      	beq.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b710:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b714:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b718:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b71c:	d022      	beq.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800b71e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b722:	d81b      	bhi.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b724:	2b00      	cmp	r3, #0
 800b726:	d003      	beq.n	800b730 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800b728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b72c:	d00b      	beq.n	800b746 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800b72e:	e015      	b.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b730:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b734:	3308      	adds	r3, #8
 800b736:	2100      	movs	r1, #0
 800b738:	4618      	mov	r0, r3
 800b73a:	f000 fd3b 	bl	800c1b4 <RCCEx_PLL2_Config>
 800b73e:	4603      	mov	r3, r0
 800b740:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b744:	e00f      	b.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b746:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b74a:	3328      	adds	r3, #40	@ 0x28
 800b74c:	2102      	movs	r1, #2
 800b74e:	4618      	mov	r0, r3
 800b750:	f000 fde2 	bl	800c318 <RCCEx_PLL3_Config>
 800b754:	4603      	mov	r3, r0
 800b756:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b75a:	e004      	b.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b75c:	2301      	movs	r3, #1
 800b75e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b762:	e000      	b.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800b764:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b766:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d10b      	bne.n	800b786 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b76e:	4b4b      	ldr	r3, [pc, #300]	@ (800b89c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b772:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b776:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b77a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b77e:	4a47      	ldr	r2, [pc, #284]	@ (800b89c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b780:	430b      	orrs	r3, r1
 800b782:	6593      	str	r3, [r2, #88]	@ 0x58
 800b784:	e003      	b.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b786:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b78a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b78e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b796:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b79a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b79c:	2300      	movs	r3, #0
 800b79e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b7a0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b7a4:	460b      	mov	r3, r1
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	d03b      	beq.n	800b822 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b7aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b7b6:	d01f      	beq.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800b7b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b7bc:	d818      	bhi.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b7be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b7c2:	d003      	beq.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800b7c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b7c8:	d007      	beq.n	800b7da <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800b7ca:	e011      	b.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7cc:	4b33      	ldr	r3, [pc, #204]	@ (800b89c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b7ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7d0:	4a32      	ldr	r2, [pc, #200]	@ (800b89c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b7d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b7d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b7d8:	e00f      	b.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b7da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7de:	3328      	adds	r3, #40	@ 0x28
 800b7e0:	2101      	movs	r1, #1
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f000 fd98 	bl	800c318 <RCCEx_PLL3_Config>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800b7ee:	e004      	b.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b7f6:	e000      	b.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800b7f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7fa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d10b      	bne.n	800b81a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b802:	4b26      	ldr	r3, [pc, #152]	@ (800b89c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b806:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b80a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b80e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b812:	4a22      	ldr	r2, [pc, #136]	@ (800b89c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b814:	430b      	orrs	r3, r1
 800b816:	6553      	str	r3, [r2, #84]	@ 0x54
 800b818:	e003      	b.n	800b822 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b81a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b81e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b822:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b82e:	673b      	str	r3, [r7, #112]	@ 0x70
 800b830:	2300      	movs	r3, #0
 800b832:	677b      	str	r3, [r7, #116]	@ 0x74
 800b834:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b838:	460b      	mov	r3, r1
 800b83a:	4313      	orrs	r3, r2
 800b83c:	d034      	beq.n	800b8a8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b83e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b842:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b844:	2b00      	cmp	r3, #0
 800b846:	d003      	beq.n	800b850 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800b848:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b84c:	d007      	beq.n	800b85e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800b84e:	e011      	b.n	800b874 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b850:	4b12      	ldr	r3, [pc, #72]	@ (800b89c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b854:	4a11      	ldr	r2, [pc, #68]	@ (800b89c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b856:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b85a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b85c:	e00e      	b.n	800b87c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b85e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b862:	3308      	adds	r3, #8
 800b864:	2102      	movs	r1, #2
 800b866:	4618      	mov	r0, r3
 800b868:	f000 fca4 	bl	800c1b4 <RCCEx_PLL2_Config>
 800b86c:	4603      	mov	r3, r0
 800b86e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b872:	e003      	b.n	800b87c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800b874:	2301      	movs	r3, #1
 800b876:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b87a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b87c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b880:	2b00      	cmp	r3, #0
 800b882:	d10d      	bne.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b884:	4b05      	ldr	r3, [pc, #20]	@ (800b89c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b888:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b88c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b890:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b892:	4a02      	ldr	r2, [pc, #8]	@ (800b89c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b894:	430b      	orrs	r3, r1
 800b896:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b898:	e006      	b.n	800b8a8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800b89a:	bf00      	nop
 800b89c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b8a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b8a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800b8b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b8ba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b8be:	460b      	mov	r3, r1
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	d00c      	beq.n	800b8de <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b8c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8c8:	3328      	adds	r3, #40	@ 0x28
 800b8ca:	2102      	movs	r1, #2
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f000 fd23 	bl	800c318 <RCCEx_PLL3_Config>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d002      	beq.n	800b8de <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b8de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b8ea:	663b      	str	r3, [r7, #96]	@ 0x60
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	667b      	str	r3, [r7, #100]	@ 0x64
 800b8f0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b8f4:	460b      	mov	r3, r1
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	d038      	beq.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b8fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b902:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b906:	d018      	beq.n	800b93a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800b908:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b90c:	d811      	bhi.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800b90e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b912:	d014      	beq.n	800b93e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800b914:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b918:	d80b      	bhi.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d011      	beq.n	800b942 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800b91e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b922:	d106      	bne.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b924:	4bc3      	ldr	r3, [pc, #780]	@ (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b928:	4ac2      	ldr	r2, [pc, #776]	@ (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b92a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b92e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b930:	e008      	b.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b932:	2301      	movs	r3, #1
 800b934:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b938:	e004      	b.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800b93a:	bf00      	nop
 800b93c:	e002      	b.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800b93e:	bf00      	nop
 800b940:	e000      	b.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800b942:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b944:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d10b      	bne.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b94c:	4bb9      	ldr	r3, [pc, #740]	@ (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b94e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b950:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b954:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b95c:	4ab5      	ldr	r2, [pc, #724]	@ (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b95e:	430b      	orrs	r3, r1
 800b960:	6553      	str	r3, [r2, #84]	@ 0x54
 800b962:	e003      	b.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b964:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b968:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b96c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b974:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b978:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b97a:	2300      	movs	r3, #0
 800b97c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b97e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b982:	460b      	mov	r3, r1
 800b984:	4313      	orrs	r3, r2
 800b986:	d009      	beq.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b988:	4baa      	ldr	r3, [pc, #680]	@ (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b98a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b98c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b990:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b994:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b996:	4aa7      	ldr	r2, [pc, #668]	@ (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b998:	430b      	orrs	r3, r1
 800b99a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b99c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b9a8:	653b      	str	r3, [r7, #80]	@ 0x50
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	657b      	str	r3, [r7, #84]	@ 0x54
 800b9ae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b9b2:	460b      	mov	r3, r1
 800b9b4:	4313      	orrs	r3, r2
 800b9b6:	d009      	beq.n	800b9cc <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b9b8:	4b9e      	ldr	r3, [pc, #632]	@ (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b9ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9bc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800b9c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b9c6:	4a9b      	ldr	r2, [pc, #620]	@ (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b9c8:	430b      	orrs	r3, r1
 800b9ca:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800b9cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800b9d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b9da:	2300      	movs	r3, #0
 800b9dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b9de:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b9e2:	460b      	mov	r3, r1
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	d009      	beq.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800b9e8:	4b92      	ldr	r3, [pc, #584]	@ (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b9ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9ec:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800b9f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b9f6:	4a8f      	ldr	r2, [pc, #572]	@ (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b9f8:	430b      	orrs	r3, r1
 800b9fa:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b9fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba04:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800ba08:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba0e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800ba12:	460b      	mov	r3, r1
 800ba14:	4313      	orrs	r3, r2
 800ba16:	d00e      	beq.n	800ba36 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ba18:	4b86      	ldr	r3, [pc, #536]	@ (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ba1a:	691b      	ldr	r3, [r3, #16]
 800ba1c:	4a85      	ldr	r2, [pc, #532]	@ (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ba1e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ba22:	6113      	str	r3, [r2, #16]
 800ba24:	4b83      	ldr	r3, [pc, #524]	@ (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ba26:	6919      	ldr	r1, [r3, #16]
 800ba28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba2c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ba30:	4a80      	ldr	r2, [pc, #512]	@ (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ba32:	430b      	orrs	r3, r1
 800ba34:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ba36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800ba42:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ba44:	2300      	movs	r3, #0
 800ba46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba48:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	d009      	beq.n	800ba66 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ba52:	4b78      	ldr	r3, [pc, #480]	@ (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ba54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba56:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800ba5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba60:	4a74      	ldr	r2, [pc, #464]	@ (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ba62:	430b      	orrs	r3, r1
 800ba64:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ba66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800ba72:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba74:	2300      	movs	r3, #0
 800ba76:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba78:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800ba7c:	460b      	mov	r3, r1
 800ba7e:	4313      	orrs	r3, r2
 800ba80:	d00a      	beq.n	800ba98 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ba82:	4b6c      	ldr	r3, [pc, #432]	@ (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ba84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba86:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800ba8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ba92:	4a68      	ldr	r2, [pc, #416]	@ (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ba94:	430b      	orrs	r3, r1
 800ba96:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ba98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa0:	2100      	movs	r1, #0
 800baa2:	62b9      	str	r1, [r7, #40]	@ 0x28
 800baa4:	f003 0301 	and.w	r3, r3, #1
 800baa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800baaa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800baae:	460b      	mov	r3, r1
 800bab0:	4313      	orrs	r3, r2
 800bab2:	d011      	beq.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bab4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bab8:	3308      	adds	r3, #8
 800baba:	2100      	movs	r1, #0
 800babc:	4618      	mov	r0, r3
 800babe:	f000 fb79 	bl	800c1b4 <RCCEx_PLL2_Config>
 800bac2:	4603      	mov	r3, r0
 800bac4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800bac8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d003      	beq.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bad0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bad4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800badc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae0:	2100      	movs	r1, #0
 800bae2:	6239      	str	r1, [r7, #32]
 800bae4:	f003 0302 	and.w	r3, r3, #2
 800bae8:	627b      	str	r3, [r7, #36]	@ 0x24
 800baea:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800baee:	460b      	mov	r3, r1
 800baf0:	4313      	orrs	r3, r2
 800baf2:	d011      	beq.n	800bb18 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800baf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800baf8:	3308      	adds	r3, #8
 800bafa:	2101      	movs	r1, #1
 800bafc:	4618      	mov	r0, r3
 800bafe:	f000 fb59 	bl	800c1b4 <RCCEx_PLL2_Config>
 800bb02:	4603      	mov	r3, r0
 800bb04:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800bb08:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d003      	beq.n	800bb18 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bb14:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bb18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb20:	2100      	movs	r1, #0
 800bb22:	61b9      	str	r1, [r7, #24]
 800bb24:	f003 0304 	and.w	r3, r3, #4
 800bb28:	61fb      	str	r3, [r7, #28]
 800bb2a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bb2e:	460b      	mov	r3, r1
 800bb30:	4313      	orrs	r3, r2
 800bb32:	d011      	beq.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bb34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb38:	3308      	adds	r3, #8
 800bb3a:	2102      	movs	r1, #2
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f000 fb39 	bl	800c1b4 <RCCEx_PLL2_Config>
 800bb42:	4603      	mov	r3, r0
 800bb44:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800bb48:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d003      	beq.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb50:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bb54:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bb58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb60:	2100      	movs	r1, #0
 800bb62:	6139      	str	r1, [r7, #16]
 800bb64:	f003 0308 	and.w	r3, r3, #8
 800bb68:	617b      	str	r3, [r7, #20]
 800bb6a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bb6e:	460b      	mov	r3, r1
 800bb70:	4313      	orrs	r3, r2
 800bb72:	d011      	beq.n	800bb98 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bb74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb78:	3328      	adds	r3, #40	@ 0x28
 800bb7a:	2100      	movs	r1, #0
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f000 fbcb 	bl	800c318 <RCCEx_PLL3_Config>
 800bb82:	4603      	mov	r3, r0
 800bb84:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800bb88:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d003      	beq.n	800bb98 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bb94:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bb98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba0:	2100      	movs	r1, #0
 800bba2:	60b9      	str	r1, [r7, #8]
 800bba4:	f003 0310 	and.w	r3, r3, #16
 800bba8:	60fb      	str	r3, [r7, #12]
 800bbaa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bbae:	460b      	mov	r3, r1
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	d011      	beq.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bbb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbb8:	3328      	adds	r3, #40	@ 0x28
 800bbba:	2101      	movs	r1, #1
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f000 fbab 	bl	800c318 <RCCEx_PLL3_Config>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800bbc8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d003      	beq.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbd0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bbd4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bbd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe0:	2100      	movs	r1, #0
 800bbe2:	6039      	str	r1, [r7, #0]
 800bbe4:	f003 0320 	and.w	r3, r3, #32
 800bbe8:	607b      	str	r3, [r7, #4]
 800bbea:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bbee:	460b      	mov	r3, r1
 800bbf0:	4313      	orrs	r3, r2
 800bbf2:	d011      	beq.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bbf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbf8:	3328      	adds	r3, #40	@ 0x28
 800bbfa:	2102      	movs	r1, #2
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f000 fb8b 	bl	800c318 <RCCEx_PLL3_Config>
 800bc02:	4603      	mov	r3, r0
 800bc04:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800bc08:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d003      	beq.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bc14:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800bc18:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d101      	bne.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800bc20:	2300      	movs	r3, #0
 800bc22:	e000      	b.n	800bc26 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800bc24:	2301      	movs	r3, #1
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bc32:	bf00      	nop
 800bc34:	58024400 	.word	0x58024400

0800bc38 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800bc3c:	f7fe fda0 	bl	800a780 <HAL_RCC_GetHCLKFreq>
 800bc40:	4602      	mov	r2, r0
 800bc42:	4b06      	ldr	r3, [pc, #24]	@ (800bc5c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bc44:	6a1b      	ldr	r3, [r3, #32]
 800bc46:	091b      	lsrs	r3, r3, #4
 800bc48:	f003 0307 	and.w	r3, r3, #7
 800bc4c:	4904      	ldr	r1, [pc, #16]	@ (800bc60 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bc4e:	5ccb      	ldrb	r3, [r1, r3]
 800bc50:	f003 031f 	and.w	r3, r3, #31
 800bc54:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	bd80      	pop	{r7, pc}
 800bc5c:	58024400 	.word	0x58024400
 800bc60:	08018fe4 	.word	0x08018fe4

0800bc64 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b089      	sub	sp, #36	@ 0x24
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bc6c:	4ba1      	ldr	r3, [pc, #644]	@ (800bef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc70:	f003 0303 	and.w	r3, r3, #3
 800bc74:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bc76:	4b9f      	ldr	r3, [pc, #636]	@ (800bef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc7a:	0b1b      	lsrs	r3, r3, #12
 800bc7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bc80:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bc82:	4b9c      	ldr	r3, [pc, #624]	@ (800bef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc86:	091b      	lsrs	r3, r3, #4
 800bc88:	f003 0301 	and.w	r3, r3, #1
 800bc8c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bc8e:	4b99      	ldr	r3, [pc, #612]	@ (800bef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc92:	08db      	lsrs	r3, r3, #3
 800bc94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bc98:	693a      	ldr	r2, [r7, #16]
 800bc9a:	fb02 f303 	mul.w	r3, r2, r3
 800bc9e:	ee07 3a90 	vmov	s15, r3
 800bca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bca6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	f000 8111 	beq.w	800bed4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bcb2:	69bb      	ldr	r3, [r7, #24]
 800bcb4:	2b02      	cmp	r3, #2
 800bcb6:	f000 8083 	beq.w	800bdc0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bcba:	69bb      	ldr	r3, [r7, #24]
 800bcbc:	2b02      	cmp	r3, #2
 800bcbe:	f200 80a1 	bhi.w	800be04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bcc2:	69bb      	ldr	r3, [r7, #24]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d003      	beq.n	800bcd0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bcc8:	69bb      	ldr	r3, [r7, #24]
 800bcca:	2b01      	cmp	r3, #1
 800bccc:	d056      	beq.n	800bd7c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bcce:	e099      	b.n	800be04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bcd0:	4b88      	ldr	r3, [pc, #544]	@ (800bef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f003 0320 	and.w	r3, r3, #32
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d02d      	beq.n	800bd38 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bcdc:	4b85      	ldr	r3, [pc, #532]	@ (800bef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	08db      	lsrs	r3, r3, #3
 800bce2:	f003 0303 	and.w	r3, r3, #3
 800bce6:	4a84      	ldr	r2, [pc, #528]	@ (800bef8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bce8:	fa22 f303 	lsr.w	r3, r2, r3
 800bcec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	ee07 3a90 	vmov	s15, r3
 800bcf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	ee07 3a90 	vmov	s15, r3
 800bcfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd06:	4b7b      	ldr	r3, [pc, #492]	@ (800bef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd0e:	ee07 3a90 	vmov	s15, r3
 800bd12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd16:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd1a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800befc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd32:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bd36:	e087      	b.n	800be48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	ee07 3a90 	vmov	s15, r3
 800bd3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd42:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bf00 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bd46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd4a:	4b6a      	ldr	r3, [pc, #424]	@ (800bef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd52:	ee07 3a90 	vmov	s15, r3
 800bd56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd5e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800befc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd7a:	e065      	b.n	800be48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	ee07 3a90 	vmov	s15, r3
 800bd82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd86:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bf04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bd8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd8e:	4b59      	ldr	r3, [pc, #356]	@ (800bef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd96:	ee07 3a90 	vmov	s15, r3
 800bd9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bda2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800befc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bda6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bdb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bdbe:	e043      	b.n	800be48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	ee07 3a90 	vmov	s15, r3
 800bdc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bf08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bdce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdd2:	4b48      	ldr	r3, [pc, #288]	@ (800bef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdda:	ee07 3a90 	vmov	s15, r3
 800bdde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bde2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bde6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800befc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bdea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bdf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be02:	e021      	b.n	800be48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	ee07 3a90 	vmov	s15, r3
 800be0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be0e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bf04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800be12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be16:	4b37      	ldr	r3, [pc, #220]	@ (800bef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be1e:	ee07 3a90 	vmov	s15, r3
 800be22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be26:	ed97 6a03 	vldr	s12, [r7, #12]
 800be2a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800befc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800be2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be46:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800be48:	4b2a      	ldr	r3, [pc, #168]	@ (800bef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be4c:	0a5b      	lsrs	r3, r3, #9
 800be4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be52:	ee07 3a90 	vmov	s15, r3
 800be56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be62:	edd7 6a07 	vldr	s13, [r7, #28]
 800be66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be6e:	ee17 2a90 	vmov	r2, s15
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800be76:	4b1f      	ldr	r3, [pc, #124]	@ (800bef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be7a:	0c1b      	lsrs	r3, r3, #16
 800be7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be80:	ee07 3a90 	vmov	s15, r3
 800be84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be90:	edd7 6a07 	vldr	s13, [r7, #28]
 800be94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be9c:	ee17 2a90 	vmov	r2, s15
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bea4:	4b13      	ldr	r3, [pc, #76]	@ (800bef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bea8:	0e1b      	lsrs	r3, r3, #24
 800beaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800beae:	ee07 3a90 	vmov	s15, r3
 800beb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800beba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bebe:	edd7 6a07 	vldr	s13, [r7, #28]
 800bec2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800beca:	ee17 2a90 	vmov	r2, s15
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bed2:	e008      	b.n	800bee6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2200      	movs	r2, #0
 800bed8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2200      	movs	r2, #0
 800bede:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2200      	movs	r2, #0
 800bee4:	609a      	str	r2, [r3, #8]
}
 800bee6:	bf00      	nop
 800bee8:	3724      	adds	r7, #36	@ 0x24
 800beea:	46bd      	mov	sp, r7
 800beec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef0:	4770      	bx	lr
 800bef2:	bf00      	nop
 800bef4:	58024400 	.word	0x58024400
 800bef8:	03d09000 	.word	0x03d09000
 800befc:	46000000 	.word	0x46000000
 800bf00:	4c742400 	.word	0x4c742400
 800bf04:	4a742400 	.word	0x4a742400
 800bf08:	4bb71b00 	.word	0x4bb71b00

0800bf0c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b089      	sub	sp, #36	@ 0x24
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bf14:	4ba1      	ldr	r3, [pc, #644]	@ (800c19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf18:	f003 0303 	and.w	r3, r3, #3
 800bf1c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bf1e:	4b9f      	ldr	r3, [pc, #636]	@ (800c19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf22:	0d1b      	lsrs	r3, r3, #20
 800bf24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bf28:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bf2a:	4b9c      	ldr	r3, [pc, #624]	@ (800c19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf2e:	0a1b      	lsrs	r3, r3, #8
 800bf30:	f003 0301 	and.w	r3, r3, #1
 800bf34:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bf36:	4b99      	ldr	r3, [pc, #612]	@ (800c19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf3a:	08db      	lsrs	r3, r3, #3
 800bf3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bf40:	693a      	ldr	r2, [r7, #16]
 800bf42:	fb02 f303 	mul.w	r3, r2, r3
 800bf46:	ee07 3a90 	vmov	s15, r3
 800bf4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	f000 8111 	beq.w	800c17c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bf5a:	69bb      	ldr	r3, [r7, #24]
 800bf5c:	2b02      	cmp	r3, #2
 800bf5e:	f000 8083 	beq.w	800c068 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bf62:	69bb      	ldr	r3, [r7, #24]
 800bf64:	2b02      	cmp	r3, #2
 800bf66:	f200 80a1 	bhi.w	800c0ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bf6a:	69bb      	ldr	r3, [r7, #24]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d003      	beq.n	800bf78 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bf70:	69bb      	ldr	r3, [r7, #24]
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	d056      	beq.n	800c024 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bf76:	e099      	b.n	800c0ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf78:	4b88      	ldr	r3, [pc, #544]	@ (800c19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f003 0320 	and.w	r3, r3, #32
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d02d      	beq.n	800bfe0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf84:	4b85      	ldr	r3, [pc, #532]	@ (800c19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	08db      	lsrs	r3, r3, #3
 800bf8a:	f003 0303 	and.w	r3, r3, #3
 800bf8e:	4a84      	ldr	r2, [pc, #528]	@ (800c1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bf90:	fa22 f303 	lsr.w	r3, r2, r3
 800bf94:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	ee07 3a90 	vmov	s15, r3
 800bf9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	ee07 3a90 	vmov	s15, r3
 800bfa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfae:	4b7b      	ldr	r3, [pc, #492]	@ (800c19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfb6:	ee07 3a90 	vmov	s15, r3
 800bfba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfbe:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfc2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bfc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bfd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfda:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bfde:	e087      	b.n	800c0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	ee07 3a90 	vmov	s15, r3
 800bfe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c1a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bfee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bff2:	4b6a      	ldr	r3, [pc, #424]	@ (800c19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bffa:	ee07 3a90 	vmov	s15, r3
 800bffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c002:	ed97 6a03 	vldr	s12, [r7, #12]
 800c006:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c00a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c00e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c012:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c01a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c01e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c022:	e065      	b.n	800c0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	ee07 3a90 	vmov	s15, r3
 800c02a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c02e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c1ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c036:	4b59      	ldr	r3, [pc, #356]	@ (800c19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c03a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c03e:	ee07 3a90 	vmov	s15, r3
 800c042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c046:	ed97 6a03 	vldr	s12, [r7, #12]
 800c04a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c04e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c056:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c05a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c05e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c062:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c066:	e043      	b.n	800c0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	ee07 3a90 	vmov	s15, r3
 800c06e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c072:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c07a:	4b48      	ldr	r3, [pc, #288]	@ (800c19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c07c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c07e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c082:	ee07 3a90 	vmov	s15, r3
 800c086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c08a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c08e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c09a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c09e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0aa:	e021      	b.n	800c0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	ee07 3a90 	vmov	s15, r3
 800c0b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0b6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c1ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c0ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0be:	4b37      	ldr	r3, [pc, #220]	@ (800c19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0c6:	ee07 3a90 	vmov	s15, r3
 800c0ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0d2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c0d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0ee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c0f0:	4b2a      	ldr	r3, [pc, #168]	@ (800c19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0f4:	0a5b      	lsrs	r3, r3, #9
 800c0f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0fa:	ee07 3a90 	vmov	s15, r3
 800c0fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c102:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c106:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c10a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c10e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c116:	ee17 2a90 	vmov	r2, s15
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c11e:	4b1f      	ldr	r3, [pc, #124]	@ (800c19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c122:	0c1b      	lsrs	r3, r3, #16
 800c124:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c128:	ee07 3a90 	vmov	s15, r3
 800c12c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c130:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c134:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c138:	edd7 6a07 	vldr	s13, [r7, #28]
 800c13c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c144:	ee17 2a90 	vmov	r2, s15
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c14c:	4b13      	ldr	r3, [pc, #76]	@ (800c19c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c14e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c150:	0e1b      	lsrs	r3, r3, #24
 800c152:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c156:	ee07 3a90 	vmov	s15, r3
 800c15a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c15e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c162:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c166:	edd7 6a07 	vldr	s13, [r7, #28]
 800c16a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c16e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c172:	ee17 2a90 	vmov	r2, s15
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c17a:	e008      	b.n	800c18e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2200      	movs	r2, #0
 800c180:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2200      	movs	r2, #0
 800c186:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2200      	movs	r2, #0
 800c18c:	609a      	str	r2, [r3, #8]
}
 800c18e:	bf00      	nop
 800c190:	3724      	adds	r7, #36	@ 0x24
 800c192:	46bd      	mov	sp, r7
 800c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c198:	4770      	bx	lr
 800c19a:	bf00      	nop
 800c19c:	58024400 	.word	0x58024400
 800c1a0:	03d09000 	.word	0x03d09000
 800c1a4:	46000000 	.word	0x46000000
 800c1a8:	4c742400 	.word	0x4c742400
 800c1ac:	4a742400 	.word	0x4a742400
 800c1b0:	4bb71b00 	.word	0x4bb71b00

0800c1b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
 800c1bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c1c2:	4b53      	ldr	r3, [pc, #332]	@ (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c1c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1c6:	f003 0303 	and.w	r3, r3, #3
 800c1ca:	2b03      	cmp	r3, #3
 800c1cc:	d101      	bne.n	800c1d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e099      	b.n	800c306 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c1d2:	4b4f      	ldr	r3, [pc, #316]	@ (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	4a4e      	ldr	r2, [pc, #312]	@ (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c1d8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c1dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c1de:	f7f9 fc5f 	bl	8005aa0 <HAL_GetTick>
 800c1e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c1e4:	e008      	b.n	800c1f8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c1e6:	f7f9 fc5b 	bl	8005aa0 <HAL_GetTick>
 800c1ea:	4602      	mov	r2, r0
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	1ad3      	subs	r3, r2, r3
 800c1f0:	2b02      	cmp	r3, #2
 800c1f2:	d901      	bls.n	800c1f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c1f4:	2303      	movs	r3, #3
 800c1f6:	e086      	b.n	800c306 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c1f8:	4b45      	ldr	r3, [pc, #276]	@ (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c200:	2b00      	cmp	r3, #0
 800c202:	d1f0      	bne.n	800c1e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c204:	4b42      	ldr	r3, [pc, #264]	@ (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c208:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	031b      	lsls	r3, r3, #12
 800c212:	493f      	ldr	r1, [pc, #252]	@ (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c214:	4313      	orrs	r3, r2
 800c216:	628b      	str	r3, [r1, #40]	@ 0x28
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	685b      	ldr	r3, [r3, #4]
 800c21c:	3b01      	subs	r3, #1
 800c21e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	689b      	ldr	r3, [r3, #8]
 800c226:	3b01      	subs	r3, #1
 800c228:	025b      	lsls	r3, r3, #9
 800c22a:	b29b      	uxth	r3, r3
 800c22c:	431a      	orrs	r2, r3
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	68db      	ldr	r3, [r3, #12]
 800c232:	3b01      	subs	r3, #1
 800c234:	041b      	lsls	r3, r3, #16
 800c236:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c23a:	431a      	orrs	r2, r3
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	691b      	ldr	r3, [r3, #16]
 800c240:	3b01      	subs	r3, #1
 800c242:	061b      	lsls	r3, r3, #24
 800c244:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c248:	4931      	ldr	r1, [pc, #196]	@ (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c24a:	4313      	orrs	r3, r2
 800c24c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c24e:	4b30      	ldr	r3, [pc, #192]	@ (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c252:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	695b      	ldr	r3, [r3, #20]
 800c25a:	492d      	ldr	r1, [pc, #180]	@ (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c25c:	4313      	orrs	r3, r2
 800c25e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c260:	4b2b      	ldr	r3, [pc, #172]	@ (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c264:	f023 0220 	bic.w	r2, r3, #32
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	699b      	ldr	r3, [r3, #24]
 800c26c:	4928      	ldr	r1, [pc, #160]	@ (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c26e:	4313      	orrs	r3, r2
 800c270:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c272:	4b27      	ldr	r3, [pc, #156]	@ (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c276:	4a26      	ldr	r2, [pc, #152]	@ (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c278:	f023 0310 	bic.w	r3, r3, #16
 800c27c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c27e:	4b24      	ldr	r3, [pc, #144]	@ (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c280:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c282:	4b24      	ldr	r3, [pc, #144]	@ (800c314 <RCCEx_PLL2_Config+0x160>)
 800c284:	4013      	ands	r3, r2
 800c286:	687a      	ldr	r2, [r7, #4]
 800c288:	69d2      	ldr	r2, [r2, #28]
 800c28a:	00d2      	lsls	r2, r2, #3
 800c28c:	4920      	ldr	r1, [pc, #128]	@ (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c28e:	4313      	orrs	r3, r2
 800c290:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c292:	4b1f      	ldr	r3, [pc, #124]	@ (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c296:	4a1e      	ldr	r2, [pc, #120]	@ (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c298:	f043 0310 	orr.w	r3, r3, #16
 800c29c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d106      	bne.n	800c2b2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c2a4:	4b1a      	ldr	r3, [pc, #104]	@ (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c2a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2a8:	4a19      	ldr	r2, [pc, #100]	@ (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c2aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c2ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c2b0:	e00f      	b.n	800c2d2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d106      	bne.n	800c2c6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c2b8:	4b15      	ldr	r3, [pc, #84]	@ (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c2ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2bc:	4a14      	ldr	r2, [pc, #80]	@ (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c2be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c2c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c2c4:	e005      	b.n	800c2d2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c2c6:	4b12      	ldr	r3, [pc, #72]	@ (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c2c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2ca:	4a11      	ldr	r2, [pc, #68]	@ (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c2cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c2d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c2d2:	4b0f      	ldr	r3, [pc, #60]	@ (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	4a0e      	ldr	r2, [pc, #56]	@ (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c2d8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c2dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2de:	f7f9 fbdf 	bl	8005aa0 <HAL_GetTick>
 800c2e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c2e4:	e008      	b.n	800c2f8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c2e6:	f7f9 fbdb 	bl	8005aa0 <HAL_GetTick>
 800c2ea:	4602      	mov	r2, r0
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	1ad3      	subs	r3, r2, r3
 800c2f0:	2b02      	cmp	r3, #2
 800c2f2:	d901      	bls.n	800c2f8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c2f4:	2303      	movs	r3, #3
 800c2f6:	e006      	b.n	800c306 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c2f8:	4b05      	ldr	r3, [pc, #20]	@ (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c300:	2b00      	cmp	r3, #0
 800c302:	d0f0      	beq.n	800c2e6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c304:	7bfb      	ldrb	r3, [r7, #15]
}
 800c306:	4618      	mov	r0, r3
 800c308:	3710      	adds	r7, #16
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
 800c30e:	bf00      	nop
 800c310:	58024400 	.word	0x58024400
 800c314:	ffff0007 	.word	0xffff0007

0800c318 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c322:	2300      	movs	r3, #0
 800c324:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c326:	4b53      	ldr	r3, [pc, #332]	@ (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c32a:	f003 0303 	and.w	r3, r3, #3
 800c32e:	2b03      	cmp	r3, #3
 800c330:	d101      	bne.n	800c336 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c332:	2301      	movs	r3, #1
 800c334:	e099      	b.n	800c46a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c336:	4b4f      	ldr	r3, [pc, #316]	@ (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	4a4e      	ldr	r2, [pc, #312]	@ (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c33c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c340:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c342:	f7f9 fbad 	bl	8005aa0 <HAL_GetTick>
 800c346:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c348:	e008      	b.n	800c35c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c34a:	f7f9 fba9 	bl	8005aa0 <HAL_GetTick>
 800c34e:	4602      	mov	r2, r0
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	1ad3      	subs	r3, r2, r3
 800c354:	2b02      	cmp	r3, #2
 800c356:	d901      	bls.n	800c35c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c358:	2303      	movs	r3, #3
 800c35a:	e086      	b.n	800c46a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c35c:	4b45      	ldr	r3, [pc, #276]	@ (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c364:	2b00      	cmp	r3, #0
 800c366:	d1f0      	bne.n	800c34a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c368:	4b42      	ldr	r3, [pc, #264]	@ (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c36a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c36c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	051b      	lsls	r3, r3, #20
 800c376:	493f      	ldr	r1, [pc, #252]	@ (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c378:	4313      	orrs	r3, r2
 800c37a:	628b      	str	r3, [r1, #40]	@ 0x28
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	685b      	ldr	r3, [r3, #4]
 800c380:	3b01      	subs	r3, #1
 800c382:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	689b      	ldr	r3, [r3, #8]
 800c38a:	3b01      	subs	r3, #1
 800c38c:	025b      	lsls	r3, r3, #9
 800c38e:	b29b      	uxth	r3, r3
 800c390:	431a      	orrs	r2, r3
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	68db      	ldr	r3, [r3, #12]
 800c396:	3b01      	subs	r3, #1
 800c398:	041b      	lsls	r3, r3, #16
 800c39a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c39e:	431a      	orrs	r2, r3
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	691b      	ldr	r3, [r3, #16]
 800c3a4:	3b01      	subs	r3, #1
 800c3a6:	061b      	lsls	r3, r3, #24
 800c3a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c3ac:	4931      	ldr	r1, [pc, #196]	@ (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c3b2:	4b30      	ldr	r3, [pc, #192]	@ (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c3b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	695b      	ldr	r3, [r3, #20]
 800c3be:	492d      	ldr	r1, [pc, #180]	@ (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c3c4:	4b2b      	ldr	r3, [pc, #172]	@ (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c3c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3c8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	699b      	ldr	r3, [r3, #24]
 800c3d0:	4928      	ldr	r1, [pc, #160]	@ (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c3d2:	4313      	orrs	r3, r2
 800c3d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c3d6:	4b27      	ldr	r3, [pc, #156]	@ (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c3d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3da:	4a26      	ldr	r2, [pc, #152]	@ (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c3dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c3e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c3e2:	4b24      	ldr	r3, [pc, #144]	@ (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c3e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c3e6:	4b24      	ldr	r3, [pc, #144]	@ (800c478 <RCCEx_PLL3_Config+0x160>)
 800c3e8:	4013      	ands	r3, r2
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	69d2      	ldr	r2, [r2, #28]
 800c3ee:	00d2      	lsls	r2, r2, #3
 800c3f0:	4920      	ldr	r1, [pc, #128]	@ (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c3f2:	4313      	orrs	r3, r2
 800c3f4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c3f6:	4b1f      	ldr	r3, [pc, #124]	@ (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c3f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3fa:	4a1e      	ldr	r2, [pc, #120]	@ (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c3fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c400:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d106      	bne.n	800c416 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c408:	4b1a      	ldr	r3, [pc, #104]	@ (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c40a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c40c:	4a19      	ldr	r2, [pc, #100]	@ (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c40e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c412:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c414:	e00f      	b.n	800c436 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	2b01      	cmp	r3, #1
 800c41a:	d106      	bne.n	800c42a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c41c:	4b15      	ldr	r3, [pc, #84]	@ (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c41e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c420:	4a14      	ldr	r2, [pc, #80]	@ (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c422:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c426:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c428:	e005      	b.n	800c436 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c42a:	4b12      	ldr	r3, [pc, #72]	@ (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c42c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c42e:	4a11      	ldr	r2, [pc, #68]	@ (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c430:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c434:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c436:	4b0f      	ldr	r3, [pc, #60]	@ (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4a0e      	ldr	r2, [pc, #56]	@ (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c43c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c440:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c442:	f7f9 fb2d 	bl	8005aa0 <HAL_GetTick>
 800c446:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c448:	e008      	b.n	800c45c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c44a:	f7f9 fb29 	bl	8005aa0 <HAL_GetTick>
 800c44e:	4602      	mov	r2, r0
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	1ad3      	subs	r3, r2, r3
 800c454:	2b02      	cmp	r3, #2
 800c456:	d901      	bls.n	800c45c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c458:	2303      	movs	r3, #3
 800c45a:	e006      	b.n	800c46a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c45c:	4b05      	ldr	r3, [pc, #20]	@ (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c464:	2b00      	cmp	r3, #0
 800c466:	d0f0      	beq.n	800c44a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c468:	7bfb      	ldrb	r3, [r7, #15]
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3710      	adds	r7, #16
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	58024400 	.word	0x58024400
 800c478:	ffff0007 	.word	0xffff0007

0800c47c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b084      	sub	sp, #16
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d101      	bne.n	800c48e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c48a:	2301      	movs	r3, #1
 800c48c:	e10f      	b.n	800c6ae <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2200      	movs	r2, #0
 800c492:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	4a87      	ldr	r2, [pc, #540]	@ (800c6b8 <HAL_SPI_Init+0x23c>)
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d00f      	beq.n	800c4be <HAL_SPI_Init+0x42>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	4a86      	ldr	r2, [pc, #536]	@ (800c6bc <HAL_SPI_Init+0x240>)
 800c4a4:	4293      	cmp	r3, r2
 800c4a6:	d00a      	beq.n	800c4be <HAL_SPI_Init+0x42>
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	4a84      	ldr	r2, [pc, #528]	@ (800c6c0 <HAL_SPI_Init+0x244>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d005      	beq.n	800c4be <HAL_SPI_Init+0x42>
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	68db      	ldr	r3, [r3, #12]
 800c4b6:	2b0f      	cmp	r3, #15
 800c4b8:	d901      	bls.n	800c4be <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	e0f7      	b.n	800c6ae <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f001 f968 	bl	800d794 <SPI_GetPacketSize>
 800c4c4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	4a7b      	ldr	r2, [pc, #492]	@ (800c6b8 <HAL_SPI_Init+0x23c>)
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	d00c      	beq.n	800c4ea <HAL_SPI_Init+0x6e>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	4a79      	ldr	r2, [pc, #484]	@ (800c6bc <HAL_SPI_Init+0x240>)
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	d007      	beq.n	800c4ea <HAL_SPI_Init+0x6e>
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	4a78      	ldr	r2, [pc, #480]	@ (800c6c0 <HAL_SPI_Init+0x244>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d002      	beq.n	800c4ea <HAL_SPI_Init+0x6e>
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	2b08      	cmp	r3, #8
 800c4e8:	d811      	bhi.n	800c50e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c4ee:	4a72      	ldr	r2, [pc, #456]	@ (800c6b8 <HAL_SPI_Init+0x23c>)
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	d009      	beq.n	800c508 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4a70      	ldr	r2, [pc, #448]	@ (800c6bc <HAL_SPI_Init+0x240>)
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d004      	beq.n	800c508 <HAL_SPI_Init+0x8c>
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	4a6f      	ldr	r2, [pc, #444]	@ (800c6c0 <HAL_SPI_Init+0x244>)
 800c504:	4293      	cmp	r3, r2
 800c506:	d104      	bne.n	800c512 <HAL_SPI_Init+0x96>
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	2b10      	cmp	r3, #16
 800c50c:	d901      	bls.n	800c512 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c50e:	2301      	movs	r3, #1
 800c510:	e0cd      	b.n	800c6ae <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c518:	b2db      	uxtb	r3, r3
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d106      	bne.n	800c52c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2200      	movs	r2, #0
 800c522:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f7f6 f800 	bl	800252c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2202      	movs	r2, #2
 800c530:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f022 0201 	bic.w	r2, r2, #1
 800c542:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	689b      	ldr	r3, [r3, #8]
 800c54a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800c54e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	699b      	ldr	r3, [r3, #24]
 800c554:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c558:	d119      	bne.n	800c58e <HAL_SPI_Init+0x112>
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c562:	d103      	bne.n	800c56c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d008      	beq.n	800c57e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c570:	2b00      	cmp	r3, #0
 800c572:	d10c      	bne.n	800c58e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c578:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c57c:	d107      	bne.n	800c58e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	681a      	ldr	r2, [r3, #0]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c58c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	685b      	ldr	r3, [r3, #4]
 800c592:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c596:	2b00      	cmp	r3, #0
 800c598:	d00f      	beq.n	800c5ba <HAL_SPI_Init+0x13e>
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	68db      	ldr	r3, [r3, #12]
 800c59e:	2b06      	cmp	r3, #6
 800c5a0:	d90b      	bls.n	800c5ba <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	430a      	orrs	r2, r1
 800c5b6:	601a      	str	r2, [r3, #0]
 800c5b8:	e007      	b.n	800c5ca <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	681a      	ldr	r2, [r3, #0]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c5c8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	69da      	ldr	r2, [r3, #28]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5d2:	431a      	orrs	r2, r3
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	431a      	orrs	r2, r3
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5dc:	ea42 0103 	orr.w	r1, r2, r3
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	68da      	ldr	r2, [r3, #12]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	430a      	orrs	r2, r1
 800c5ea:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5f4:	431a      	orrs	r2, r3
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5fa:	431a      	orrs	r2, r3
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	699b      	ldr	r3, [r3, #24]
 800c600:	431a      	orrs	r2, r3
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	691b      	ldr	r3, [r3, #16]
 800c606:	431a      	orrs	r2, r3
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	695b      	ldr	r3, [r3, #20]
 800c60c:	431a      	orrs	r2, r3
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6a1b      	ldr	r3, [r3, #32]
 800c612:	431a      	orrs	r2, r3
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	685b      	ldr	r3, [r3, #4]
 800c618:	431a      	orrs	r2, r3
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c61e:	431a      	orrs	r2, r3
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	689b      	ldr	r3, [r3, #8]
 800c624:	431a      	orrs	r2, r3
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c62a:	ea42 0103 	orr.w	r1, r2, r3
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	430a      	orrs	r2, r1
 800c638:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	685b      	ldr	r3, [r3, #4]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d113      	bne.n	800c66a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	689b      	ldr	r3, [r3, #8]
 800c648:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c654:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	689b      	ldr	r3, [r3, #8]
 800c65c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c668:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f022 0201 	bic.w	r2, r2, #1
 800c678:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	685b      	ldr	r3, [r3, #4]
 800c67e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c682:	2b00      	cmp	r3, #0
 800c684:	d00a      	beq.n	800c69c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	68db      	ldr	r3, [r3, #12]
 800c68c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	430a      	orrs	r2, r1
 800c69a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2201      	movs	r2, #1
 800c6a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800c6ac:	2300      	movs	r3, #0
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3710      	adds	r7, #16
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
 800c6b6:	bf00      	nop
 800c6b8:	40013000 	.word	0x40013000
 800c6bc:	40003800 	.word	0x40003800
 800c6c0:	40003c00 	.word	0x40003c00

0800c6c4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b088      	sub	sp, #32
 800c6c8:	af02      	add	r7, sp, #8
 800c6ca:	60f8      	str	r0, [r7, #12]
 800c6cc:	60b9      	str	r1, [r7, #8]
 800c6ce:	603b      	str	r3, [r7, #0]
 800c6d0:	4613      	mov	r3, r2
 800c6d2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	3320      	adds	r3, #32
 800c6da:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c6dc:	f7f9 f9e0 	bl	8005aa0 <HAL_GetTick>
 800c6e0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c6e8:	b2db      	uxtb	r3, r3
 800c6ea:	2b01      	cmp	r3, #1
 800c6ec:	d001      	beq.n	800c6f2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800c6ee:	2302      	movs	r3, #2
 800c6f0:	e1d1      	b.n	800ca96 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d002      	beq.n	800c6fe <HAL_SPI_Transmit+0x3a>
 800c6f8:	88fb      	ldrh	r3, [r7, #6]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d101      	bne.n	800c702 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800c6fe:	2301      	movs	r3, #1
 800c700:	e1c9      	b.n	800ca96 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c708:	2b01      	cmp	r3, #1
 800c70a:	d101      	bne.n	800c710 <HAL_SPI_Transmit+0x4c>
 800c70c:	2302      	movs	r3, #2
 800c70e:	e1c2      	b.n	800ca96 <HAL_SPI_Transmit+0x3d2>
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	2201      	movs	r2, #1
 800c714:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	2203      	movs	r2, #3
 800c71c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	2200      	movs	r2, #0
 800c724:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	68ba      	ldr	r2, [r7, #8]
 800c72c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	88fa      	ldrh	r2, [r7, #6]
 800c732:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	88fa      	ldrh	r2, [r7, #6]
 800c73a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	2200      	movs	r2, #0
 800c742:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	2200      	movs	r2, #0
 800c748:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	2200      	movs	r2, #0
 800c750:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	2200      	movs	r2, #0
 800c758:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	2200      	movs	r2, #0
 800c75e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	689b      	ldr	r3, [r3, #8]
 800c764:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c768:	d108      	bne.n	800c77c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	681a      	ldr	r2, [r3, #0]
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c778:	601a      	str	r2, [r3, #0]
 800c77a:	e009      	b.n	800c790 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	68db      	ldr	r3, [r3, #12]
 800c782:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800c78e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	685a      	ldr	r2, [r3, #4]
 800c796:	4b96      	ldr	r3, [pc, #600]	@ (800c9f0 <HAL_SPI_Transmit+0x32c>)
 800c798:	4013      	ands	r3, r2
 800c79a:	88f9      	ldrh	r1, [r7, #6]
 800c79c:	68fa      	ldr	r2, [r7, #12]
 800c79e:	6812      	ldr	r2, [r2, #0]
 800c7a0:	430b      	orrs	r3, r1
 800c7a2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	681a      	ldr	r2, [r3, #0]
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	f042 0201 	orr.w	r2, r2, #1
 800c7b2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	685b      	ldr	r3, [r3, #4]
 800c7b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c7bc:	d107      	bne.n	800c7ce <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	681a      	ldr	r2, [r3, #0]
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c7cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	68db      	ldr	r3, [r3, #12]
 800c7d2:	2b0f      	cmp	r3, #15
 800c7d4:	d947      	bls.n	800c866 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c7d6:	e03f      	b.n	800c858 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	695b      	ldr	r3, [r3, #20]
 800c7de:	f003 0302 	and.w	r3, r3, #2
 800c7e2:	2b02      	cmp	r3, #2
 800c7e4:	d114      	bne.n	800c810 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	6812      	ldr	r2, [r2, #0]
 800c7f0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c7f6:	1d1a      	adds	r2, r3, #4
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c802:	b29b      	uxth	r3, r3
 800c804:	3b01      	subs	r3, #1
 800c806:	b29a      	uxth	r2, r3
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c80e:	e023      	b.n	800c858 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c810:	f7f9 f946 	bl	8005aa0 <HAL_GetTick>
 800c814:	4602      	mov	r2, r0
 800c816:	693b      	ldr	r3, [r7, #16]
 800c818:	1ad3      	subs	r3, r2, r3
 800c81a:	683a      	ldr	r2, [r7, #0]
 800c81c:	429a      	cmp	r2, r3
 800c81e:	d803      	bhi.n	800c828 <HAL_SPI_Transmit+0x164>
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c826:	d102      	bne.n	800c82e <HAL_SPI_Transmit+0x16a>
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d114      	bne.n	800c858 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c82e:	68f8      	ldr	r0, [r7, #12]
 800c830:	f000 fee2 	bl	800d5f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c83a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	2201      	movs	r2, #1
 800c848:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	2200      	movs	r2, #0
 800c850:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c854:	2303      	movs	r3, #3
 800c856:	e11e      	b.n	800ca96 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c85e:	b29b      	uxth	r3, r3
 800c860:	2b00      	cmp	r3, #0
 800c862:	d1b9      	bne.n	800c7d8 <HAL_SPI_Transmit+0x114>
 800c864:	e0f1      	b.n	800ca4a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	68db      	ldr	r3, [r3, #12]
 800c86a:	2b07      	cmp	r3, #7
 800c86c:	f240 80e6 	bls.w	800ca3c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c870:	e05d      	b.n	800c92e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	695b      	ldr	r3, [r3, #20]
 800c878:	f003 0302 	and.w	r3, r3, #2
 800c87c:	2b02      	cmp	r3, #2
 800c87e:	d132      	bne.n	800c8e6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c886:	b29b      	uxth	r3, r3
 800c888:	2b01      	cmp	r3, #1
 800c88a:	d918      	bls.n	800c8be <HAL_SPI_Transmit+0x1fa>
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c890:	2b00      	cmp	r3, #0
 800c892:	d014      	beq.n	800c8be <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	6812      	ldr	r2, [r2, #0]
 800c89e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c8a4:	1d1a      	adds	r2, r3, #4
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c8b0:	b29b      	uxth	r3, r3
 800c8b2:	3b02      	subs	r3, #2
 800c8b4:	b29a      	uxth	r2, r3
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c8bc:	e037      	b.n	800c92e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c8c2:	881a      	ldrh	r2, [r3, #0]
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c8cc:	1c9a      	adds	r2, r3, #2
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c8d8:	b29b      	uxth	r3, r3
 800c8da:	3b01      	subs	r3, #1
 800c8dc:	b29a      	uxth	r2, r3
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c8e4:	e023      	b.n	800c92e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c8e6:	f7f9 f8db 	bl	8005aa0 <HAL_GetTick>
 800c8ea:	4602      	mov	r2, r0
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	1ad3      	subs	r3, r2, r3
 800c8f0:	683a      	ldr	r2, [r7, #0]
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d803      	bhi.n	800c8fe <HAL_SPI_Transmit+0x23a>
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8fc:	d102      	bne.n	800c904 <HAL_SPI_Transmit+0x240>
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d114      	bne.n	800c92e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c904:	68f8      	ldr	r0, [r7, #12]
 800c906:	f000 fe77 	bl	800d5f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c910:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	2201      	movs	r2, #1
 800c91e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	2200      	movs	r2, #0
 800c926:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c92a:	2303      	movs	r3, #3
 800c92c:	e0b3      	b.n	800ca96 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c934:	b29b      	uxth	r3, r3
 800c936:	2b00      	cmp	r3, #0
 800c938:	d19b      	bne.n	800c872 <HAL_SPI_Transmit+0x1ae>
 800c93a:	e086      	b.n	800ca4a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	695b      	ldr	r3, [r3, #20]
 800c942:	f003 0302 	and.w	r3, r3, #2
 800c946:	2b02      	cmp	r3, #2
 800c948:	d154      	bne.n	800c9f4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c950:	b29b      	uxth	r3, r3
 800c952:	2b03      	cmp	r3, #3
 800c954:	d918      	bls.n	800c988 <HAL_SPI_Transmit+0x2c4>
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c95a:	2b40      	cmp	r3, #64	@ 0x40
 800c95c:	d914      	bls.n	800c988 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	6812      	ldr	r2, [r2, #0]
 800c968:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c96e:	1d1a      	adds	r2, r3, #4
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c97a:	b29b      	uxth	r3, r3
 800c97c:	3b04      	subs	r3, #4
 800c97e:	b29a      	uxth	r2, r3
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c986:	e059      	b.n	800ca3c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c98e:	b29b      	uxth	r3, r3
 800c990:	2b01      	cmp	r3, #1
 800c992:	d917      	bls.n	800c9c4 <HAL_SPI_Transmit+0x300>
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d013      	beq.n	800c9c4 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c9a0:	881a      	ldrh	r2, [r3, #0]
 800c9a2:	697b      	ldr	r3, [r7, #20]
 800c9a4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c9aa:	1c9a      	adds	r2, r3, #2
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c9b6:	b29b      	uxth	r3, r3
 800c9b8:	3b02      	subs	r3, #2
 800c9ba:	b29a      	uxth	r2, r3
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c9c2:	e03b      	b.n	800ca3c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	3320      	adds	r3, #32
 800c9ce:	7812      	ldrb	r2, [r2, #0]
 800c9d0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c9d6:	1c5a      	adds	r2, r3, #1
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c9e2:	b29b      	uxth	r3, r3
 800c9e4:	3b01      	subs	r3, #1
 800c9e6:	b29a      	uxth	r2, r3
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c9ee:	e025      	b.n	800ca3c <HAL_SPI_Transmit+0x378>
 800c9f0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c9f4:	f7f9 f854 	bl	8005aa0 <HAL_GetTick>
 800c9f8:	4602      	mov	r2, r0
 800c9fa:	693b      	ldr	r3, [r7, #16]
 800c9fc:	1ad3      	subs	r3, r2, r3
 800c9fe:	683a      	ldr	r2, [r7, #0]
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d803      	bhi.n	800ca0c <HAL_SPI_Transmit+0x348>
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca0a:	d102      	bne.n	800ca12 <HAL_SPI_Transmit+0x34e>
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d114      	bne.n	800ca3c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ca12:	68f8      	ldr	r0, [r7, #12]
 800ca14:	f000 fdf0 	bl	800d5f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ca1e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	2201      	movs	r2, #1
 800ca2c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2200      	movs	r2, #0
 800ca34:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ca38:	2303      	movs	r3, #3
 800ca3a:	e02c      	b.n	800ca96 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ca42:	b29b      	uxth	r3, r3
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	f47f af79 	bne.w	800c93c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800ca4a:	693b      	ldr	r3, [r7, #16]
 800ca4c:	9300      	str	r3, [sp, #0]
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	2200      	movs	r2, #0
 800ca52:	2108      	movs	r1, #8
 800ca54:	68f8      	ldr	r0, [r7, #12]
 800ca56:	f000 fe6f 	bl	800d738 <SPI_WaitOnFlagUntilTimeout>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d007      	beq.n	800ca70 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ca66:	f043 0220 	orr.w	r2, r3, #32
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ca70:	68f8      	ldr	r0, [r7, #12]
 800ca72:	f000 fdc1 	bl	800d5f8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	2201      	movs	r2, #1
 800ca7a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	2200      	movs	r2, #0
 800ca82:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d001      	beq.n	800ca94 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800ca90:	2301      	movs	r3, #1
 800ca92:	e000      	b.n	800ca96 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800ca94:	2300      	movs	r3, #0
  }
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3718      	adds	r7, #24
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}
 800ca9e:	bf00      	nop

0800caa0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b088      	sub	sp, #32
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	60f8      	str	r0, [r7, #12]
 800caa8:	60b9      	str	r1, [r7, #8]
 800caaa:	603b      	str	r3, [r7, #0]
 800caac:	4613      	mov	r3, r2
 800caae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cab4:	095b      	lsrs	r3, r3, #5
 800cab6:	b29b      	uxth	r3, r3
 800cab8:	3301      	adds	r3, #1
 800caba:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	3330      	adds	r3, #48	@ 0x30
 800cac2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cac4:	f7f8 ffec 	bl	8005aa0 <HAL_GetTick>
 800cac8:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cad0:	b2db      	uxtb	r3, r3
 800cad2:	2b01      	cmp	r3, #1
 800cad4:	d001      	beq.n	800cada <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800cad6:	2302      	movs	r3, #2
 800cad8:	e250      	b.n	800cf7c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d002      	beq.n	800cae6 <HAL_SPI_Receive+0x46>
 800cae0:	88fb      	ldrh	r3, [r7, #6]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d101      	bne.n	800caea <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800cae6:	2301      	movs	r3, #1
 800cae8:	e248      	b.n	800cf7c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800caf0:	2b01      	cmp	r3, #1
 800caf2:	d101      	bne.n	800caf8 <HAL_SPI_Receive+0x58>
 800caf4:	2302      	movs	r3, #2
 800caf6:	e241      	b.n	800cf7c <HAL_SPI_Receive+0x4dc>
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	2201      	movs	r2, #1
 800cafc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	2204      	movs	r2, #4
 800cb04:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	68ba      	ldr	r2, [r7, #8]
 800cb14:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	88fa      	ldrh	r2, [r7, #6]
 800cb1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	88fa      	ldrh	r2, [r7, #6]
 800cb22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	2200      	movs	r2, #0
 800cb38:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	2200      	movs	r2, #0
 800cb46:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	689b      	ldr	r3, [r3, #8]
 800cb4c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800cb50:	d108      	bne.n	800cb64 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	681a      	ldr	r2, [r3, #0]
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800cb60:	601a      	str	r2, [r3, #0]
 800cb62:	e009      	b.n	800cb78 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	68db      	ldr	r3, [r3, #12]
 800cb6a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800cb76:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	685a      	ldr	r2, [r3, #4]
 800cb7e:	4b95      	ldr	r3, [pc, #596]	@ (800cdd4 <HAL_SPI_Receive+0x334>)
 800cb80:	4013      	ands	r3, r2
 800cb82:	88f9      	ldrh	r1, [r7, #6]
 800cb84:	68fa      	ldr	r2, [r7, #12]
 800cb86:	6812      	ldr	r2, [r2, #0]
 800cb88:	430b      	orrs	r3, r1
 800cb8a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	681a      	ldr	r2, [r3, #0]
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	f042 0201 	orr.w	r2, r2, #1
 800cb9a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	685b      	ldr	r3, [r3, #4]
 800cba0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cba4:	d107      	bne.n	800cbb6 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	681a      	ldr	r2, [r3, #0]
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cbb4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	68db      	ldr	r3, [r3, #12]
 800cbba:	2b0f      	cmp	r3, #15
 800cbbc:	d96c      	bls.n	800cc98 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800cbbe:	e064      	b.n	800cc8a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	695b      	ldr	r3, [r3, #20]
 800cbc6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	695b      	ldr	r3, [r3, #20]
 800cbce:	f003 0301 	and.w	r3, r3, #1
 800cbd2:	2b01      	cmp	r3, #1
 800cbd4:	d114      	bne.n	800cc00 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	681a      	ldr	r2, [r3, #0]
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cbde:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800cbe0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cbe6:	1d1a      	adds	r2, r3, #4
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cbf2:	b29b      	uxth	r3, r3
 800cbf4:	3b01      	subs	r3, #1
 800cbf6:	b29a      	uxth	r2, r3
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cbfe:	e044      	b.n	800cc8a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cc06:	b29b      	uxth	r3, r3
 800cc08:	8bfa      	ldrh	r2, [r7, #30]
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	d919      	bls.n	800cc42 <HAL_SPI_Receive+0x1a2>
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d014      	beq.n	800cc42 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681a      	ldr	r2, [r3, #0]
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc20:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800cc22:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc28:	1d1a      	adds	r2, r3, #4
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cc34:	b29b      	uxth	r3, r3
 800cc36:	3b01      	subs	r3, #1
 800cc38:	b29a      	uxth	r2, r3
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cc40:	e023      	b.n	800cc8a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cc42:	f7f8 ff2d 	bl	8005aa0 <HAL_GetTick>
 800cc46:	4602      	mov	r2, r0
 800cc48:	697b      	ldr	r3, [r7, #20]
 800cc4a:	1ad3      	subs	r3, r2, r3
 800cc4c:	683a      	ldr	r2, [r7, #0]
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	d803      	bhi.n	800cc5a <HAL_SPI_Receive+0x1ba>
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc58:	d102      	bne.n	800cc60 <HAL_SPI_Receive+0x1c0>
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d114      	bne.n	800cc8a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cc60:	68f8      	ldr	r0, [r7, #12]
 800cc62:	f000 fcc9 	bl	800d5f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cc6c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	2201      	movs	r2, #1
 800cc7a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	2200      	movs	r2, #0
 800cc82:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800cc86:	2303      	movs	r3, #3
 800cc88:	e178      	b.n	800cf7c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cc90:	b29b      	uxth	r3, r3
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d194      	bne.n	800cbc0 <HAL_SPI_Receive+0x120>
 800cc96:	e15e      	b.n	800cf56 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	68db      	ldr	r3, [r3, #12]
 800cc9c:	2b07      	cmp	r3, #7
 800cc9e:	f240 8153 	bls.w	800cf48 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800cca2:	e08f      	b.n	800cdc4 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	695b      	ldr	r3, [r3, #20]
 800ccaa:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	695b      	ldr	r3, [r3, #20]
 800ccb2:	f003 0301 	and.w	r3, r3, #1
 800ccb6:	2b01      	cmp	r3, #1
 800ccb8:	d114      	bne.n	800cce4 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ccbe:	69ba      	ldr	r2, [r7, #24]
 800ccc0:	8812      	ldrh	r2, [r2, #0]
 800ccc2:	b292      	uxth	r2, r2
 800ccc4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ccca:	1c9a      	adds	r2, r3, #2
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ccd6:	b29b      	uxth	r3, r3
 800ccd8:	3b01      	subs	r3, #1
 800ccda:	b29a      	uxth	r2, r3
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cce2:	e06f      	b.n	800cdc4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ccea:	b29b      	uxth	r3, r3
 800ccec:	8bfa      	ldrh	r2, [r7, #30]
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	d924      	bls.n	800cd3c <HAL_SPI_Receive+0x29c>
 800ccf2:	693b      	ldr	r3, [r7, #16]
 800ccf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d01f      	beq.n	800cd3c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd00:	69ba      	ldr	r2, [r7, #24]
 800cd02:	8812      	ldrh	r2, [r2, #0]
 800cd04:	b292      	uxth	r2, r2
 800cd06:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd0c:	1c9a      	adds	r2, r3, #2
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd16:	69ba      	ldr	r2, [r7, #24]
 800cd18:	8812      	ldrh	r2, [r2, #0]
 800cd1a:	b292      	uxth	r2, r2
 800cd1c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd22:	1c9a      	adds	r2, r3, #2
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cd2e:	b29b      	uxth	r3, r3
 800cd30:	3b02      	subs	r3, #2
 800cd32:	b29a      	uxth	r2, r3
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cd3a:	e043      	b.n	800cdc4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cd42:	b29b      	uxth	r3, r3
 800cd44:	2b01      	cmp	r3, #1
 800cd46:	d119      	bne.n	800cd7c <HAL_SPI_Receive+0x2dc>
 800cd48:	693b      	ldr	r3, [r7, #16]
 800cd4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d014      	beq.n	800cd7c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd56:	69ba      	ldr	r2, [r7, #24]
 800cd58:	8812      	ldrh	r2, [r2, #0]
 800cd5a:	b292      	uxth	r2, r2
 800cd5c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd62:	1c9a      	adds	r2, r3, #2
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cd6e:	b29b      	uxth	r3, r3
 800cd70:	3b01      	subs	r3, #1
 800cd72:	b29a      	uxth	r2, r3
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cd7a:	e023      	b.n	800cdc4 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cd7c:	f7f8 fe90 	bl	8005aa0 <HAL_GetTick>
 800cd80:	4602      	mov	r2, r0
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	1ad3      	subs	r3, r2, r3
 800cd86:	683a      	ldr	r2, [r7, #0]
 800cd88:	429a      	cmp	r2, r3
 800cd8a:	d803      	bhi.n	800cd94 <HAL_SPI_Receive+0x2f4>
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd92:	d102      	bne.n	800cd9a <HAL_SPI_Receive+0x2fa>
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d114      	bne.n	800cdc4 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cd9a:	68f8      	ldr	r0, [r7, #12]
 800cd9c:	f000 fc2c 	bl	800d5f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cda6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800cdc0:	2303      	movs	r3, #3
 800cdc2:	e0db      	b.n	800cf7c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cdca:	b29b      	uxth	r3, r3
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	f47f af69 	bne.w	800cca4 <HAL_SPI_Receive+0x204>
 800cdd2:	e0c0      	b.n	800cf56 <HAL_SPI_Receive+0x4b6>
 800cdd4:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	695b      	ldr	r3, [r3, #20]
 800cdde:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	695b      	ldr	r3, [r3, #20]
 800cde6:	f003 0301 	and.w	r3, r3, #1
 800cdea:	2b01      	cmp	r3, #1
 800cdec:	d117      	bne.n	800ce1e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cdfa:	7812      	ldrb	r2, [r2, #0]
 800cdfc:	b2d2      	uxtb	r2, r2
 800cdfe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce04:	1c5a      	adds	r2, r3, #1
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ce10:	b29b      	uxth	r3, r3
 800ce12:	3b01      	subs	r3, #1
 800ce14:	b29a      	uxth	r2, r3
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ce1c:	e094      	b.n	800cf48 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ce24:	b29b      	uxth	r3, r3
 800ce26:	8bfa      	ldrh	r2, [r7, #30]
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d946      	bls.n	800ceba <HAL_SPI_Receive+0x41a>
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d041      	beq.n	800ceba <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce42:	7812      	ldrb	r2, [r2, #0]
 800ce44:	b2d2      	uxtb	r2, r2
 800ce46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce4c:	1c5a      	adds	r2, r3, #1
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce5e:	7812      	ldrb	r2, [r2, #0]
 800ce60:	b2d2      	uxtb	r2, r2
 800ce62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce68:	1c5a      	adds	r2, r3, #1
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce7a:	7812      	ldrb	r2, [r2, #0]
 800ce7c:	b2d2      	uxtb	r2, r2
 800ce7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce84:	1c5a      	adds	r2, r3, #1
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce96:	7812      	ldrb	r2, [r2, #0]
 800ce98:	b2d2      	uxtb	r2, r2
 800ce9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cea0:	1c5a      	adds	r2, r3, #1
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ceac:	b29b      	uxth	r3, r3
 800ceae:	3b04      	subs	r3, #4
 800ceb0:	b29a      	uxth	r2, r3
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ceb8:	e046      	b.n	800cf48 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cec0:	b29b      	uxth	r3, r3
 800cec2:	2b03      	cmp	r3, #3
 800cec4:	d81c      	bhi.n	800cf00 <HAL_SPI_Receive+0x460>
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d017      	beq.n	800cf00 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cedc:	7812      	ldrb	r2, [r2, #0]
 800cede:	b2d2      	uxtb	r2, r2
 800cee0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cee6:	1c5a      	adds	r2, r3, #1
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cef2:	b29b      	uxth	r3, r3
 800cef4:	3b01      	subs	r3, #1
 800cef6:	b29a      	uxth	r2, r3
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cefe:	e023      	b.n	800cf48 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cf00:	f7f8 fdce 	bl	8005aa0 <HAL_GetTick>
 800cf04:	4602      	mov	r2, r0
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	1ad3      	subs	r3, r2, r3
 800cf0a:	683a      	ldr	r2, [r7, #0]
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d803      	bhi.n	800cf18 <HAL_SPI_Receive+0x478>
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf16:	d102      	bne.n	800cf1e <HAL_SPI_Receive+0x47e>
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d114      	bne.n	800cf48 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cf1e:	68f8      	ldr	r0, [r7, #12]
 800cf20:	f000 fb6a 	bl	800d5f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cf2a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	2201      	movs	r2, #1
 800cf38:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800cf44:	2303      	movs	r3, #3
 800cf46:	e019      	b.n	800cf7c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cf4e:	b29b      	uxth	r3, r3
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	f47f af41 	bne.w	800cdd8 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800cf56:	68f8      	ldr	r0, [r7, #12]
 800cf58:	f000 fb4e 	bl	800d5f8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	2201      	movs	r2, #1
 800cf60:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	2200      	movs	r2, #0
 800cf68:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d001      	beq.n	800cf7a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800cf76:	2301      	movs	r3, #1
 800cf78:	e000      	b.n	800cf7c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800cf7a:	2300      	movs	r3, #0
  }
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3720      	adds	r7, #32
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}

0800cf84 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b08e      	sub	sp, #56	@ 0x38
 800cf88:	af02      	add	r7, sp, #8
 800cf8a:	60f8      	str	r0, [r7, #12]
 800cf8c:	60b9      	str	r1, [r7, #8]
 800cf8e:	607a      	str	r2, [r7, #4]
 800cf90:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	3320      	adds	r3, #32
 800cf98:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	3330      	adds	r3, #48	@ 0x30
 800cfa0:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfa6:	095b      	lsrs	r3, r3, #5
 800cfa8:	b29b      	uxth	r3, r3
 800cfaa:	3301      	adds	r3, #1
 800cfac:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cfae:	f7f8 fd77 	bl	8005aa0 <HAL_GetTick>
 800cfb2:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800cfb4:	887b      	ldrh	r3, [r7, #2]
 800cfb6:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800cfb8:	887b      	ldrh	r3, [r7, #2]
 800cfba:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cfc2:	b2db      	uxtb	r3, r3
 800cfc4:	2b01      	cmp	r3, #1
 800cfc6:	d001      	beq.n	800cfcc <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800cfc8:	2302      	movs	r3, #2
 800cfca:	e310      	b.n	800d5ee <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d005      	beq.n	800cfde <HAL_SPI_TransmitReceive+0x5a>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d002      	beq.n	800cfde <HAL_SPI_TransmitReceive+0x5a>
 800cfd8:	887b      	ldrh	r3, [r7, #2]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d101      	bne.n	800cfe2 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800cfde:	2301      	movs	r3, #1
 800cfe0:	e305      	b.n	800d5ee <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800cfe8:	2b01      	cmp	r3, #1
 800cfea:	d101      	bne.n	800cff0 <HAL_SPI_TransmitReceive+0x6c>
 800cfec:	2302      	movs	r3, #2
 800cfee:	e2fe      	b.n	800d5ee <HAL_SPI_TransmitReceive+0x66a>
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2201      	movs	r2, #1
 800cff4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	2205      	movs	r2, #5
 800cffc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	2200      	movs	r2, #0
 800d004:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	687a      	ldr	r2, [r7, #4]
 800d00c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	887a      	ldrh	r2, [r7, #2]
 800d012:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	887a      	ldrh	r2, [r7, #2]
 800d01a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	68ba      	ldr	r2, [r7, #8]
 800d022:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	887a      	ldrh	r2, [r7, #2]
 800d028:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	887a      	ldrh	r2, [r7, #2]
 800d030:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	2200      	movs	r2, #0
 800d038:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	2200      	movs	r2, #0
 800d03e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	68da      	ldr	r2, [r3, #12]
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800d04e:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	4a70      	ldr	r2, [pc, #448]	@ (800d218 <HAL_SPI_TransmitReceive+0x294>)
 800d056:	4293      	cmp	r3, r2
 800d058:	d009      	beq.n	800d06e <HAL_SPI_TransmitReceive+0xea>
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	4a6f      	ldr	r2, [pc, #444]	@ (800d21c <HAL_SPI_TransmitReceive+0x298>)
 800d060:	4293      	cmp	r3, r2
 800d062:	d004      	beq.n	800d06e <HAL_SPI_TransmitReceive+0xea>
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4a6d      	ldr	r2, [pc, #436]	@ (800d220 <HAL_SPI_TransmitReceive+0x29c>)
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d102      	bne.n	800d074 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800d06e:	2310      	movs	r3, #16
 800d070:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d072:	e001      	b.n	800d078 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800d074:	2308      	movs	r3, #8
 800d076:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	685a      	ldr	r2, [r3, #4]
 800d07e:	4b69      	ldr	r3, [pc, #420]	@ (800d224 <HAL_SPI_TransmitReceive+0x2a0>)
 800d080:	4013      	ands	r3, r2
 800d082:	8879      	ldrh	r1, [r7, #2]
 800d084:	68fa      	ldr	r2, [r7, #12]
 800d086:	6812      	ldr	r2, [r2, #0]
 800d088:	430b      	orrs	r3, r1
 800d08a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	681a      	ldr	r2, [r3, #0]
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	f042 0201 	orr.w	r2, r2, #1
 800d09a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	685b      	ldr	r3, [r3, #4]
 800d0a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d0a4:	d107      	bne.n	800d0b6 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	681a      	ldr	r2, [r3, #0]
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d0b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	68db      	ldr	r3, [r3, #12]
 800d0ba:	2b0f      	cmp	r3, #15
 800d0bc:	f240 80a2 	bls.w	800d204 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800d0c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0c2:	089b      	lsrs	r3, r3, #2
 800d0c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d0c6:	e094      	b.n	800d1f2 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	695b      	ldr	r3, [r3, #20]
 800d0ce:	f003 0302 	and.w	r3, r3, #2
 800d0d2:	2b02      	cmp	r3, #2
 800d0d4:	d120      	bne.n	800d118 <HAL_SPI_TransmitReceive+0x194>
 800d0d6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d01d      	beq.n	800d118 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800d0dc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d0de:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800d0e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0e2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d217      	bcs.n	800d118 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	6812      	ldr	r2, [r2, #0]
 800d0f2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d0f8:	1d1a      	adds	r2, r3, #4
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d104:	b29b      	uxth	r3, r3
 800d106:	3b01      	subs	r3, #1
 800d108:	b29a      	uxth	r2, r3
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d116:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	695b      	ldr	r3, [r3, #20]
 800d11e:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800d120:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d122:	2b00      	cmp	r3, #0
 800d124:	d065      	beq.n	800d1f2 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	695b      	ldr	r3, [r3, #20]
 800d12c:	f003 0301 	and.w	r3, r3, #1
 800d130:	2b01      	cmp	r3, #1
 800d132:	d118      	bne.n	800d166 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	681a      	ldr	r2, [r3, #0]
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d13c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d13e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d144:	1d1a      	adds	r2, r3, #4
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d150:	b29b      	uxth	r3, r3
 800d152:	3b01      	subs	r3, #1
 800d154:	b29a      	uxth	r2, r3
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d162:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d164:	e045      	b.n	800d1f2 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800d166:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d168:	8bfb      	ldrh	r3, [r7, #30]
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d21d      	bcs.n	800d1aa <HAL_SPI_TransmitReceive+0x226>
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d174:	2b00      	cmp	r3, #0
 800d176:	d018      	beq.n	800d1aa <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681a      	ldr	r2, [r3, #0]
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d180:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d182:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d188:	1d1a      	adds	r2, r3, #4
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d194:	b29b      	uxth	r3, r3
 800d196:	3b01      	subs	r3, #1
 800d198:	b29a      	uxth	r2, r3
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d1a6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d1a8:	e023      	b.n	800d1f2 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d1aa:	f7f8 fc79 	bl	8005aa0 <HAL_GetTick>
 800d1ae:	4602      	mov	r2, r0
 800d1b0:	69bb      	ldr	r3, [r7, #24]
 800d1b2:	1ad3      	subs	r3, r2, r3
 800d1b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	d803      	bhi.n	800d1c2 <HAL_SPI_TransmitReceive+0x23e>
 800d1ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1c0:	d102      	bne.n	800d1c8 <HAL_SPI_TransmitReceive+0x244>
 800d1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d114      	bne.n	800d1f2 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800d1c8:	68f8      	ldr	r0, [r7, #12]
 800d1ca:	f000 fa15 	bl	800d5f8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d1d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	2201      	movs	r2, #1
 800d1e2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800d1ee:	2303      	movs	r3, #3
 800d1f0:	e1fd      	b.n	800d5ee <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d1f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	f47f af67 	bne.w	800d0c8 <HAL_SPI_TransmitReceive+0x144>
 800d1fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	f47f af63 	bne.w	800d0c8 <HAL_SPI_TransmitReceive+0x144>
 800d202:	e1ce      	b.n	800d5a2 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	68db      	ldr	r3, [r3, #12]
 800d208:	2b07      	cmp	r3, #7
 800d20a:	f240 81c2 	bls.w	800d592 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800d20e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d210:	085b      	lsrs	r3, r3, #1
 800d212:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d214:	e0c9      	b.n	800d3aa <HAL_SPI_TransmitReceive+0x426>
 800d216:	bf00      	nop
 800d218:	40013000 	.word	0x40013000
 800d21c:	40003800 	.word	0x40003800
 800d220:	40003c00 	.word	0x40003c00
 800d224:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	695b      	ldr	r3, [r3, #20]
 800d22e:	f003 0302 	and.w	r3, r3, #2
 800d232:	2b02      	cmp	r3, #2
 800d234:	d11f      	bne.n	800d276 <HAL_SPI_TransmitReceive+0x2f2>
 800d236:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d01c      	beq.n	800d276 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800d23c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d23e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800d240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d242:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800d244:	429a      	cmp	r2, r3
 800d246:	d216      	bcs.n	800d276 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d24c:	881a      	ldrh	r2, [r3, #0]
 800d24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d250:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d256:	1c9a      	adds	r2, r3, #2
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d262:	b29b      	uxth	r3, r3
 800d264:	3b01      	subs	r3, #1
 800d266:	b29a      	uxth	r2, r3
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d274:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	695b      	ldr	r3, [r3, #20]
 800d27c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800d27e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d280:	2b00      	cmp	r3, #0
 800d282:	f000 8092 	beq.w	800d3aa <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	695b      	ldr	r3, [r3, #20]
 800d28c:	f003 0301 	and.w	r3, r3, #1
 800d290:	2b01      	cmp	r3, #1
 800d292:	d118      	bne.n	800d2c6 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d298:	6a3a      	ldr	r2, [r7, #32]
 800d29a:	8812      	ldrh	r2, [r2, #0]
 800d29c:	b292      	uxth	r2, r2
 800d29e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d2a4:	1c9a      	adds	r2, r3, #2
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d2b0:	b29b      	uxth	r3, r3
 800d2b2:	3b01      	subs	r3, #1
 800d2b4:	b29a      	uxth	r2, r3
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d2c2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d2c4:	e071      	b.n	800d3aa <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800d2c6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d2c8:	8bfb      	ldrh	r3, [r7, #30]
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	d228      	bcs.n	800d320 <HAL_SPI_TransmitReceive+0x39c>
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d023      	beq.n	800d320 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d2dc:	6a3a      	ldr	r2, [r7, #32]
 800d2de:	8812      	ldrh	r2, [r2, #0]
 800d2e0:	b292      	uxth	r2, r2
 800d2e2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d2e8:	1c9a      	adds	r2, r3, #2
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d2f2:	6a3a      	ldr	r2, [r7, #32]
 800d2f4:	8812      	ldrh	r2, [r2, #0]
 800d2f6:	b292      	uxth	r2, r2
 800d2f8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d2fe:	1c9a      	adds	r2, r3, #2
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d30a:	b29b      	uxth	r3, r3
 800d30c:	3b02      	subs	r3, #2
 800d30e:	b29a      	uxth	r2, r3
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d31c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d31e:	e044      	b.n	800d3aa <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800d320:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d322:	2b01      	cmp	r3, #1
 800d324:	d11d      	bne.n	800d362 <HAL_SPI_TransmitReceive+0x3de>
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d018      	beq.n	800d362 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d334:	6a3a      	ldr	r2, [r7, #32]
 800d336:	8812      	ldrh	r2, [r2, #0]
 800d338:	b292      	uxth	r2, r2
 800d33a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d340:	1c9a      	adds	r2, r3, #2
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d34c:	b29b      	uxth	r3, r3
 800d34e:	3b01      	subs	r3, #1
 800d350:	b29a      	uxth	r2, r3
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d35e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d360:	e023      	b.n	800d3aa <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d362:	f7f8 fb9d 	bl	8005aa0 <HAL_GetTick>
 800d366:	4602      	mov	r2, r0
 800d368:	69bb      	ldr	r3, [r7, #24]
 800d36a:	1ad3      	subs	r3, r2, r3
 800d36c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d36e:	429a      	cmp	r2, r3
 800d370:	d803      	bhi.n	800d37a <HAL_SPI_TransmitReceive+0x3f6>
 800d372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d374:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d378:	d102      	bne.n	800d380 <HAL_SPI_TransmitReceive+0x3fc>
 800d37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d114      	bne.n	800d3aa <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800d380:	68f8      	ldr	r0, [r7, #12]
 800d382:	f000 f939 	bl	800d5f8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d38c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	2201      	movs	r2, #1
 800d39a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800d3a6:	2303      	movs	r3, #3
 800d3a8:	e121      	b.n	800d5ee <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d3aa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	f47f af3b 	bne.w	800d228 <HAL_SPI_TransmitReceive+0x2a4>
 800d3b2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	f47f af37 	bne.w	800d228 <HAL_SPI_TransmitReceive+0x2a4>
 800d3ba:	e0f2      	b.n	800d5a2 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	695b      	ldr	r3, [r3, #20]
 800d3c2:	f003 0302 	and.w	r3, r3, #2
 800d3c6:	2b02      	cmp	r3, #2
 800d3c8:	d121      	bne.n	800d40e <HAL_SPI_TransmitReceive+0x48a>
 800d3ca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d01e      	beq.n	800d40e <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800d3d0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d3d2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800d3d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3d6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d218      	bcs.n	800d40e <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	3320      	adds	r3, #32
 800d3e6:	7812      	ldrb	r2, [r2, #0]
 800d3e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d3ee:	1c5a      	adds	r2, r3, #1
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d3fa:	b29b      	uxth	r3, r3
 800d3fc:	3b01      	subs	r3, #1
 800d3fe:	b29a      	uxth	r2, r3
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d40c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	695b      	ldr	r3, [r3, #20]
 800d414:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800d416:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d418:	2b00      	cmp	r3, #0
 800d41a:	f000 80ba 	beq.w	800d592 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	695b      	ldr	r3, [r3, #20]
 800d424:	f003 0301 	and.w	r3, r3, #1
 800d428:	2b01      	cmp	r3, #1
 800d42a:	d11b      	bne.n	800d464 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d438:	7812      	ldrb	r2, [r2, #0]
 800d43a:	b2d2      	uxtb	r2, r2
 800d43c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d442:	1c5a      	adds	r2, r3, #1
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d44e:	b29b      	uxth	r3, r3
 800d450:	3b01      	subs	r3, #1
 800d452:	b29a      	uxth	r2, r3
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d460:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d462:	e096      	b.n	800d592 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800d464:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d466:	8bfb      	ldrh	r3, [r7, #30]
 800d468:	429a      	cmp	r2, r3
 800d46a:	d24a      	bcs.n	800d502 <HAL_SPI_TransmitReceive+0x57e>
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d472:	2b00      	cmp	r3, #0
 800d474:	d045      	beq.n	800d502 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d482:	7812      	ldrb	r2, [r2, #0]
 800d484:	b2d2      	uxtb	r2, r2
 800d486:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d48c:	1c5a      	adds	r2, r3, #1
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d49e:	7812      	ldrb	r2, [r2, #0]
 800d4a0:	b2d2      	uxtb	r2, r2
 800d4a2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d4a8:	1c5a      	adds	r2, r3, #1
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d4ba:	7812      	ldrb	r2, [r2, #0]
 800d4bc:	b2d2      	uxtb	r2, r2
 800d4be:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d4c4:	1c5a      	adds	r2, r3, #1
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d4d6:	7812      	ldrb	r2, [r2, #0]
 800d4d8:	b2d2      	uxtb	r2, r2
 800d4da:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d4e0:	1c5a      	adds	r2, r3, #1
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d4ec:	b29b      	uxth	r3, r3
 800d4ee:	3b04      	subs	r3, #4
 800d4f0:	b29a      	uxth	r2, r3
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d4fe:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d500:	e047      	b.n	800d592 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800d502:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d504:	2b03      	cmp	r3, #3
 800d506:	d820      	bhi.n	800d54a <HAL_SPI_TransmitReceive+0x5c6>
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d01b      	beq.n	800d54a <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d51e:	7812      	ldrb	r2, [r2, #0]
 800d520:	b2d2      	uxtb	r2, r2
 800d522:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d528:	1c5a      	adds	r2, r3, #1
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d534:	b29b      	uxth	r3, r3
 800d536:	3b01      	subs	r3, #1
 800d538:	b29a      	uxth	r2, r3
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d546:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d548:	e023      	b.n	800d592 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d54a:	f7f8 faa9 	bl	8005aa0 <HAL_GetTick>
 800d54e:	4602      	mov	r2, r0
 800d550:	69bb      	ldr	r3, [r7, #24]
 800d552:	1ad3      	subs	r3, r2, r3
 800d554:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d556:	429a      	cmp	r2, r3
 800d558:	d803      	bhi.n	800d562 <HAL_SPI_TransmitReceive+0x5de>
 800d55a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d55c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d560:	d102      	bne.n	800d568 <HAL_SPI_TransmitReceive+0x5e4>
 800d562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d564:	2b00      	cmp	r3, #0
 800d566:	d114      	bne.n	800d592 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800d568:	68f8      	ldr	r0, [r7, #12]
 800d56a:	f000 f845 	bl	800d5f8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d574:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	2201      	movs	r2, #1
 800d582:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	2200      	movs	r2, #0
 800d58a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800d58e:	2303      	movs	r3, #3
 800d590:	e02d      	b.n	800d5ee <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d592:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d594:	2b00      	cmp	r3, #0
 800d596:	f47f af11 	bne.w	800d3bc <HAL_SPI_TransmitReceive+0x438>
 800d59a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	f47f af0d 	bne.w	800d3bc <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800d5a2:	69bb      	ldr	r3, [r7, #24]
 800d5a4:	9300      	str	r3, [sp, #0]
 800d5a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	2108      	movs	r1, #8
 800d5ac:	68f8      	ldr	r0, [r7, #12]
 800d5ae:	f000 f8c3 	bl	800d738 <SPI_WaitOnFlagUntilTimeout>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d007      	beq.n	800d5c8 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d5be:	f043 0220 	orr.w	r2, r3, #32
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d5c8:	68f8      	ldr	r0, [r7, #12]
 800d5ca:	f000 f815 	bl	800d5f8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	2201      	movs	r2, #1
 800d5d2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	2200      	movs	r2, #0
 800d5da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d001      	beq.n	800d5ec <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	e000      	b.n	800d5ee <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800d5ec:	2300      	movs	r3, #0
  }
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	3730      	adds	r7, #48	@ 0x30
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}
 800d5f6:	bf00      	nop

0800d5f8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d5f8:	b480      	push	{r7}
 800d5fa:	b085      	sub	sp, #20
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	695b      	ldr	r3, [r3, #20]
 800d606:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	699a      	ldr	r2, [r3, #24]
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	f042 0208 	orr.w	r2, r2, #8
 800d616:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	699a      	ldr	r2, [r3, #24]
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	f042 0210 	orr.w	r2, r2, #16
 800d626:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	681a      	ldr	r2, [r3, #0]
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	f022 0201 	bic.w	r2, r2, #1
 800d636:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	6919      	ldr	r1, [r3, #16]
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681a      	ldr	r2, [r3, #0]
 800d642:	4b3c      	ldr	r3, [pc, #240]	@ (800d734 <SPI_CloseTransfer+0x13c>)
 800d644:	400b      	ands	r3, r1
 800d646:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	689a      	ldr	r2, [r3, #8]
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800d656:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d65e:	b2db      	uxtb	r3, r3
 800d660:	2b04      	cmp	r3, #4
 800d662:	d014      	beq.n	800d68e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	f003 0320 	and.w	r3, r3, #32
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d00f      	beq.n	800d68e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d674:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	699a      	ldr	r2, [r3, #24]
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f042 0220 	orr.w	r2, r2, #32
 800d68c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d694:	b2db      	uxtb	r3, r3
 800d696:	2b03      	cmp	r3, #3
 800d698:	d014      	beq.n	800d6c4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d00f      	beq.n	800d6c4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d6aa:	f043 0204 	orr.w	r2, r3, #4
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	699a      	ldr	r2, [r3, #24]
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d6c2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d00f      	beq.n	800d6ee <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d6d4:	f043 0201 	orr.w	r2, r3, #1
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	699a      	ldr	r2, [r3, #24]
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d6ec:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d00f      	beq.n	800d718 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d6fe:	f043 0208 	orr.w	r2, r3, #8
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	699a      	ldr	r2, [r3, #24]
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d716:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2200      	movs	r2, #0
 800d71c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2200      	movs	r2, #0
 800d724:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800d728:	bf00      	nop
 800d72a:	3714      	adds	r7, #20
 800d72c:	46bd      	mov	sp, r7
 800d72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d732:	4770      	bx	lr
 800d734:	fffffc90 	.word	0xfffffc90

0800d738 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b084      	sub	sp, #16
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	60f8      	str	r0, [r7, #12]
 800d740:	60b9      	str	r1, [r7, #8]
 800d742:	603b      	str	r3, [r7, #0]
 800d744:	4613      	mov	r3, r2
 800d746:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d748:	e010      	b.n	800d76c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d74a:	f7f8 f9a9 	bl	8005aa0 <HAL_GetTick>
 800d74e:	4602      	mov	r2, r0
 800d750:	69bb      	ldr	r3, [r7, #24]
 800d752:	1ad3      	subs	r3, r2, r3
 800d754:	683a      	ldr	r2, [r7, #0]
 800d756:	429a      	cmp	r2, r3
 800d758:	d803      	bhi.n	800d762 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d760:	d102      	bne.n	800d768 <SPI_WaitOnFlagUntilTimeout+0x30>
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d101      	bne.n	800d76c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d768:	2303      	movs	r3, #3
 800d76a:	e00f      	b.n	800d78c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	695a      	ldr	r2, [r3, #20]
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	4013      	ands	r3, r2
 800d776:	68ba      	ldr	r2, [r7, #8]
 800d778:	429a      	cmp	r2, r3
 800d77a:	bf0c      	ite	eq
 800d77c:	2301      	moveq	r3, #1
 800d77e:	2300      	movne	r3, #0
 800d780:	b2db      	uxtb	r3, r3
 800d782:	461a      	mov	r2, r3
 800d784:	79fb      	ldrb	r3, [r7, #7]
 800d786:	429a      	cmp	r2, r3
 800d788:	d0df      	beq.n	800d74a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d78a:	2300      	movs	r3, #0
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	3710      	adds	r7, #16
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}

0800d794 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800d794:	b480      	push	{r7}
 800d796:	b085      	sub	sp, #20
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d7a0:	095b      	lsrs	r3, r3, #5
 800d7a2:	3301      	adds	r3, #1
 800d7a4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	68db      	ldr	r3, [r3, #12]
 800d7aa:	3301      	adds	r3, #1
 800d7ac:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d7ae:	68bb      	ldr	r3, [r7, #8]
 800d7b0:	3307      	adds	r3, #7
 800d7b2:	08db      	lsrs	r3, r3, #3
 800d7b4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	68fa      	ldr	r2, [r7, #12]
 800d7ba:	fb02 f303 	mul.w	r3, r2, r3
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3714      	adds	r7, #20
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c8:	4770      	bx	lr

0800d7ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d7ca:	b580      	push	{r7, lr}
 800d7cc:	b082      	sub	sp, #8
 800d7ce:	af00      	add	r7, sp, #0
 800d7d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d101      	bne.n	800d7dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d7d8:	2301      	movs	r3, #1
 800d7da:	e049      	b.n	800d870 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d7e2:	b2db      	uxtb	r3, r3
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d106      	bne.n	800d7f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f7f5 fb4f 	bl	8002e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2202      	movs	r2, #2
 800d7fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681a      	ldr	r2, [r3, #0]
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	3304      	adds	r3, #4
 800d806:	4619      	mov	r1, r3
 800d808:	4610      	mov	r0, r2
 800d80a:	f000 fc57 	bl	800e0bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2201      	movs	r2, #1
 800d812:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2201      	movs	r2, #1
 800d81a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2201      	movs	r2, #1
 800d822:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2201      	movs	r2, #1
 800d82a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2201      	movs	r2, #1
 800d832:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2201      	movs	r2, #1
 800d83a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2201      	movs	r2, #1
 800d842:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2201      	movs	r2, #1
 800d84a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2201      	movs	r2, #1
 800d852:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2201      	movs	r2, #1
 800d85a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2201      	movs	r2, #1
 800d862:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2201      	movs	r2, #1
 800d86a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d86e:	2300      	movs	r3, #0
}
 800d870:	4618      	mov	r0, r3
 800d872:	3708      	adds	r7, #8
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}

0800d878 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d878:	b480      	push	{r7}
 800d87a:	b085      	sub	sp, #20
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d886:	b2db      	uxtb	r3, r3
 800d888:	2b01      	cmp	r3, #1
 800d88a:	d001      	beq.n	800d890 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d88c:	2301      	movs	r3, #1
 800d88e:	e054      	b.n	800d93a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2202      	movs	r2, #2
 800d894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	68da      	ldr	r2, [r3, #12]
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	f042 0201 	orr.w	r2, r2, #1
 800d8a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	4a26      	ldr	r2, [pc, #152]	@ (800d948 <HAL_TIM_Base_Start_IT+0xd0>)
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	d022      	beq.n	800d8f8 <HAL_TIM_Base_Start_IT+0x80>
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d8ba:	d01d      	beq.n	800d8f8 <HAL_TIM_Base_Start_IT+0x80>
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	4a22      	ldr	r2, [pc, #136]	@ (800d94c <HAL_TIM_Base_Start_IT+0xd4>)
 800d8c2:	4293      	cmp	r3, r2
 800d8c4:	d018      	beq.n	800d8f8 <HAL_TIM_Base_Start_IT+0x80>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	4a21      	ldr	r2, [pc, #132]	@ (800d950 <HAL_TIM_Base_Start_IT+0xd8>)
 800d8cc:	4293      	cmp	r3, r2
 800d8ce:	d013      	beq.n	800d8f8 <HAL_TIM_Base_Start_IT+0x80>
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	4a1f      	ldr	r2, [pc, #124]	@ (800d954 <HAL_TIM_Base_Start_IT+0xdc>)
 800d8d6:	4293      	cmp	r3, r2
 800d8d8:	d00e      	beq.n	800d8f8 <HAL_TIM_Base_Start_IT+0x80>
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	4a1e      	ldr	r2, [pc, #120]	@ (800d958 <HAL_TIM_Base_Start_IT+0xe0>)
 800d8e0:	4293      	cmp	r3, r2
 800d8e2:	d009      	beq.n	800d8f8 <HAL_TIM_Base_Start_IT+0x80>
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	4a1c      	ldr	r2, [pc, #112]	@ (800d95c <HAL_TIM_Base_Start_IT+0xe4>)
 800d8ea:	4293      	cmp	r3, r2
 800d8ec:	d004      	beq.n	800d8f8 <HAL_TIM_Base_Start_IT+0x80>
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	4a1b      	ldr	r2, [pc, #108]	@ (800d960 <HAL_TIM_Base_Start_IT+0xe8>)
 800d8f4:	4293      	cmp	r3, r2
 800d8f6:	d115      	bne.n	800d924 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	689a      	ldr	r2, [r3, #8]
 800d8fe:	4b19      	ldr	r3, [pc, #100]	@ (800d964 <HAL_TIM_Base_Start_IT+0xec>)
 800d900:	4013      	ands	r3, r2
 800d902:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	2b06      	cmp	r3, #6
 800d908:	d015      	beq.n	800d936 <HAL_TIM_Base_Start_IT+0xbe>
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d910:	d011      	beq.n	800d936 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	681a      	ldr	r2, [r3, #0]
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	f042 0201 	orr.w	r2, r2, #1
 800d920:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d922:	e008      	b.n	800d936 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	681a      	ldr	r2, [r3, #0]
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	f042 0201 	orr.w	r2, r2, #1
 800d932:	601a      	str	r2, [r3, #0]
 800d934:	e000      	b.n	800d938 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d936:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d938:	2300      	movs	r3, #0
}
 800d93a:	4618      	mov	r0, r3
 800d93c:	3714      	adds	r7, #20
 800d93e:	46bd      	mov	sp, r7
 800d940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d944:	4770      	bx	lr
 800d946:	bf00      	nop
 800d948:	40010000 	.word	0x40010000
 800d94c:	40000400 	.word	0x40000400
 800d950:	40000800 	.word	0x40000800
 800d954:	40000c00 	.word	0x40000c00
 800d958:	40010400 	.word	0x40010400
 800d95c:	40001800 	.word	0x40001800
 800d960:	40014000 	.word	0x40014000
 800d964:	00010007 	.word	0x00010007

0800d968 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b082      	sub	sp, #8
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d101      	bne.n	800d97a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d976:	2301      	movs	r3, #1
 800d978:	e049      	b.n	800da0e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d980:	b2db      	uxtb	r3, r3
 800d982:	2b00      	cmp	r3, #0
 800d984:	d106      	bne.n	800d994 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2200      	movs	r2, #0
 800d98a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d98e:	6878      	ldr	r0, [r7, #4]
 800d990:	f7f5 fa32 	bl	8002df8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2202      	movs	r2, #2
 800d998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681a      	ldr	r2, [r3, #0]
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	3304      	adds	r3, #4
 800d9a4:	4619      	mov	r1, r3
 800d9a6:	4610      	mov	r0, r2
 800d9a8:	f000 fb88 	bl	800e0bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2201      	movs	r2, #1
 800d9b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2201      	movs	r2, #1
 800d9c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2201      	movs	r2, #1
 800d9c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2201      	movs	r2, #1
 800d9d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2201      	movs	r2, #1
 800d9d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2201      	movs	r2, #1
 800d9e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2201      	movs	r2, #1
 800d9e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2201      	movs	r2, #1
 800d9f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2201      	movs	r2, #1
 800d9f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2201      	movs	r2, #1
 800da00:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2201      	movs	r2, #1
 800da08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800da0c:	2300      	movs	r3, #0
}
 800da0e:	4618      	mov	r0, r3
 800da10:	3708      	adds	r7, #8
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}
	...

0800da18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d109      	bne.n	800da3c <HAL_TIM_PWM_Start+0x24>
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800da2e:	b2db      	uxtb	r3, r3
 800da30:	2b01      	cmp	r3, #1
 800da32:	bf14      	ite	ne
 800da34:	2301      	movne	r3, #1
 800da36:	2300      	moveq	r3, #0
 800da38:	b2db      	uxtb	r3, r3
 800da3a:	e03c      	b.n	800dab6 <HAL_TIM_PWM_Start+0x9e>
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	2b04      	cmp	r3, #4
 800da40:	d109      	bne.n	800da56 <HAL_TIM_PWM_Start+0x3e>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800da48:	b2db      	uxtb	r3, r3
 800da4a:	2b01      	cmp	r3, #1
 800da4c:	bf14      	ite	ne
 800da4e:	2301      	movne	r3, #1
 800da50:	2300      	moveq	r3, #0
 800da52:	b2db      	uxtb	r3, r3
 800da54:	e02f      	b.n	800dab6 <HAL_TIM_PWM_Start+0x9e>
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	2b08      	cmp	r3, #8
 800da5a:	d109      	bne.n	800da70 <HAL_TIM_PWM_Start+0x58>
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800da62:	b2db      	uxtb	r3, r3
 800da64:	2b01      	cmp	r3, #1
 800da66:	bf14      	ite	ne
 800da68:	2301      	movne	r3, #1
 800da6a:	2300      	moveq	r3, #0
 800da6c:	b2db      	uxtb	r3, r3
 800da6e:	e022      	b.n	800dab6 <HAL_TIM_PWM_Start+0x9e>
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	2b0c      	cmp	r3, #12
 800da74:	d109      	bne.n	800da8a <HAL_TIM_PWM_Start+0x72>
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800da7c:	b2db      	uxtb	r3, r3
 800da7e:	2b01      	cmp	r3, #1
 800da80:	bf14      	ite	ne
 800da82:	2301      	movne	r3, #1
 800da84:	2300      	moveq	r3, #0
 800da86:	b2db      	uxtb	r3, r3
 800da88:	e015      	b.n	800dab6 <HAL_TIM_PWM_Start+0x9e>
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	2b10      	cmp	r3, #16
 800da8e:	d109      	bne.n	800daa4 <HAL_TIM_PWM_Start+0x8c>
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800da96:	b2db      	uxtb	r3, r3
 800da98:	2b01      	cmp	r3, #1
 800da9a:	bf14      	ite	ne
 800da9c:	2301      	movne	r3, #1
 800da9e:	2300      	moveq	r3, #0
 800daa0:	b2db      	uxtb	r3, r3
 800daa2:	e008      	b.n	800dab6 <HAL_TIM_PWM_Start+0x9e>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800daaa:	b2db      	uxtb	r3, r3
 800daac:	2b01      	cmp	r3, #1
 800daae:	bf14      	ite	ne
 800dab0:	2301      	movne	r3, #1
 800dab2:	2300      	moveq	r3, #0
 800dab4:	b2db      	uxtb	r3, r3
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d001      	beq.n	800dabe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800daba:	2301      	movs	r3, #1
 800dabc:	e0a1      	b.n	800dc02 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d104      	bne.n	800dace <HAL_TIM_PWM_Start+0xb6>
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2202      	movs	r2, #2
 800dac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dacc:	e023      	b.n	800db16 <HAL_TIM_PWM_Start+0xfe>
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	2b04      	cmp	r3, #4
 800dad2:	d104      	bne.n	800dade <HAL_TIM_PWM_Start+0xc6>
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2202      	movs	r2, #2
 800dad8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dadc:	e01b      	b.n	800db16 <HAL_TIM_PWM_Start+0xfe>
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	2b08      	cmp	r3, #8
 800dae2:	d104      	bne.n	800daee <HAL_TIM_PWM_Start+0xd6>
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2202      	movs	r2, #2
 800dae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800daec:	e013      	b.n	800db16 <HAL_TIM_PWM_Start+0xfe>
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	2b0c      	cmp	r3, #12
 800daf2:	d104      	bne.n	800dafe <HAL_TIM_PWM_Start+0xe6>
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2202      	movs	r2, #2
 800daf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dafc:	e00b      	b.n	800db16 <HAL_TIM_PWM_Start+0xfe>
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	2b10      	cmp	r3, #16
 800db02:	d104      	bne.n	800db0e <HAL_TIM_PWM_Start+0xf6>
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2202      	movs	r2, #2
 800db08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800db0c:	e003      	b.n	800db16 <HAL_TIM_PWM_Start+0xfe>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2202      	movs	r2, #2
 800db12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	2201      	movs	r2, #1
 800db1c:	6839      	ldr	r1, [r7, #0]
 800db1e:	4618      	mov	r0, r3
 800db20:	f000 fe48 	bl	800e7b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	4a38      	ldr	r2, [pc, #224]	@ (800dc0c <HAL_TIM_PWM_Start+0x1f4>)
 800db2a:	4293      	cmp	r3, r2
 800db2c:	d013      	beq.n	800db56 <HAL_TIM_PWM_Start+0x13e>
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	4a37      	ldr	r2, [pc, #220]	@ (800dc10 <HAL_TIM_PWM_Start+0x1f8>)
 800db34:	4293      	cmp	r3, r2
 800db36:	d00e      	beq.n	800db56 <HAL_TIM_PWM_Start+0x13e>
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	4a35      	ldr	r2, [pc, #212]	@ (800dc14 <HAL_TIM_PWM_Start+0x1fc>)
 800db3e:	4293      	cmp	r3, r2
 800db40:	d009      	beq.n	800db56 <HAL_TIM_PWM_Start+0x13e>
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	4a34      	ldr	r2, [pc, #208]	@ (800dc18 <HAL_TIM_PWM_Start+0x200>)
 800db48:	4293      	cmp	r3, r2
 800db4a:	d004      	beq.n	800db56 <HAL_TIM_PWM_Start+0x13e>
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	4a32      	ldr	r2, [pc, #200]	@ (800dc1c <HAL_TIM_PWM_Start+0x204>)
 800db52:	4293      	cmp	r3, r2
 800db54:	d101      	bne.n	800db5a <HAL_TIM_PWM_Start+0x142>
 800db56:	2301      	movs	r3, #1
 800db58:	e000      	b.n	800db5c <HAL_TIM_PWM_Start+0x144>
 800db5a:	2300      	movs	r3, #0
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d007      	beq.n	800db70 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800db6e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	4a25      	ldr	r2, [pc, #148]	@ (800dc0c <HAL_TIM_PWM_Start+0x1f4>)
 800db76:	4293      	cmp	r3, r2
 800db78:	d022      	beq.n	800dbc0 <HAL_TIM_PWM_Start+0x1a8>
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db82:	d01d      	beq.n	800dbc0 <HAL_TIM_PWM_Start+0x1a8>
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	4a25      	ldr	r2, [pc, #148]	@ (800dc20 <HAL_TIM_PWM_Start+0x208>)
 800db8a:	4293      	cmp	r3, r2
 800db8c:	d018      	beq.n	800dbc0 <HAL_TIM_PWM_Start+0x1a8>
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	4a24      	ldr	r2, [pc, #144]	@ (800dc24 <HAL_TIM_PWM_Start+0x20c>)
 800db94:	4293      	cmp	r3, r2
 800db96:	d013      	beq.n	800dbc0 <HAL_TIM_PWM_Start+0x1a8>
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	4a22      	ldr	r2, [pc, #136]	@ (800dc28 <HAL_TIM_PWM_Start+0x210>)
 800db9e:	4293      	cmp	r3, r2
 800dba0:	d00e      	beq.n	800dbc0 <HAL_TIM_PWM_Start+0x1a8>
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	4a1a      	ldr	r2, [pc, #104]	@ (800dc10 <HAL_TIM_PWM_Start+0x1f8>)
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	d009      	beq.n	800dbc0 <HAL_TIM_PWM_Start+0x1a8>
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	4a1e      	ldr	r2, [pc, #120]	@ (800dc2c <HAL_TIM_PWM_Start+0x214>)
 800dbb2:	4293      	cmp	r3, r2
 800dbb4:	d004      	beq.n	800dbc0 <HAL_TIM_PWM_Start+0x1a8>
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	4a16      	ldr	r2, [pc, #88]	@ (800dc14 <HAL_TIM_PWM_Start+0x1fc>)
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	d115      	bne.n	800dbec <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	689a      	ldr	r2, [r3, #8]
 800dbc6:	4b1a      	ldr	r3, [pc, #104]	@ (800dc30 <HAL_TIM_PWM_Start+0x218>)
 800dbc8:	4013      	ands	r3, r2
 800dbca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	2b06      	cmp	r3, #6
 800dbd0:	d015      	beq.n	800dbfe <HAL_TIM_PWM_Start+0x1e6>
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dbd8:	d011      	beq.n	800dbfe <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	681a      	ldr	r2, [r3, #0]
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	f042 0201 	orr.w	r2, r2, #1
 800dbe8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbea:	e008      	b.n	800dbfe <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	681a      	ldr	r2, [r3, #0]
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	f042 0201 	orr.w	r2, r2, #1
 800dbfa:	601a      	str	r2, [r3, #0]
 800dbfc:	e000      	b.n	800dc00 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbfe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dc00:	2300      	movs	r3, #0
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3710      	adds	r7, #16
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}
 800dc0a:	bf00      	nop
 800dc0c:	40010000 	.word	0x40010000
 800dc10:	40010400 	.word	0x40010400
 800dc14:	40014000 	.word	0x40014000
 800dc18:	40014400 	.word	0x40014400
 800dc1c:	40014800 	.word	0x40014800
 800dc20:	40000400 	.word	0x40000400
 800dc24:	40000800 	.word	0x40000800
 800dc28:	40000c00 	.word	0x40000c00
 800dc2c:	40001800 	.word	0x40001800
 800dc30:	00010007 	.word	0x00010007

0800dc34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b084      	sub	sp, #16
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	68db      	ldr	r3, [r3, #12]
 800dc42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	691b      	ldr	r3, [r3, #16]
 800dc4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	f003 0302 	and.w	r3, r3, #2
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d020      	beq.n	800dc98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	f003 0302 	and.w	r3, r3, #2
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d01b      	beq.n	800dc98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	f06f 0202 	mvn.w	r2, #2
 800dc68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	2201      	movs	r2, #1
 800dc6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	699b      	ldr	r3, [r3, #24]
 800dc76:	f003 0303 	and.w	r3, r3, #3
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d003      	beq.n	800dc86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	f000 f9fe 	bl	800e080 <HAL_TIM_IC_CaptureCallback>
 800dc84:	e005      	b.n	800dc92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f000 f9f0 	bl	800e06c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc8c:	6878      	ldr	r0, [r7, #4]
 800dc8e:	f000 fa01 	bl	800e094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	2200      	movs	r2, #0
 800dc96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800dc98:	68bb      	ldr	r3, [r7, #8]
 800dc9a:	f003 0304 	and.w	r3, r3, #4
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d020      	beq.n	800dce4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	f003 0304 	and.w	r3, r3, #4
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d01b      	beq.n	800dce4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	f06f 0204 	mvn.w	r2, #4
 800dcb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2202      	movs	r2, #2
 800dcba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	699b      	ldr	r3, [r3, #24]
 800dcc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d003      	beq.n	800dcd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	f000 f9d8 	bl	800e080 <HAL_TIM_IC_CaptureCallback>
 800dcd0:	e005      	b.n	800dcde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f000 f9ca 	bl	800e06c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dcd8:	6878      	ldr	r0, [r7, #4]
 800dcda:	f000 f9db 	bl	800e094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2200      	movs	r2, #0
 800dce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	f003 0308 	and.w	r3, r3, #8
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d020      	beq.n	800dd30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	f003 0308 	and.w	r3, r3, #8
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d01b      	beq.n	800dd30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	f06f 0208 	mvn.w	r2, #8
 800dd00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2204      	movs	r2, #4
 800dd06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	69db      	ldr	r3, [r3, #28]
 800dd0e:	f003 0303 	and.w	r3, r3, #3
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d003      	beq.n	800dd1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dd16:	6878      	ldr	r0, [r7, #4]
 800dd18:	f000 f9b2 	bl	800e080 <HAL_TIM_IC_CaptureCallback>
 800dd1c:	e005      	b.n	800dd2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f000 f9a4 	bl	800e06c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd24:	6878      	ldr	r0, [r7, #4]
 800dd26:	f000 f9b5 	bl	800e094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	f003 0310 	and.w	r3, r3, #16
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d020      	beq.n	800dd7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	f003 0310 	and.w	r3, r3, #16
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d01b      	beq.n	800dd7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	f06f 0210 	mvn.w	r2, #16
 800dd4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2208      	movs	r2, #8
 800dd52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	69db      	ldr	r3, [r3, #28]
 800dd5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d003      	beq.n	800dd6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f000 f98c 	bl	800e080 <HAL_TIM_IC_CaptureCallback>
 800dd68:	e005      	b.n	800dd76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f000 f97e 	bl	800e06c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd70:	6878      	ldr	r0, [r7, #4]
 800dd72:	f000 f98f 	bl	800e094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2200      	movs	r2, #0
 800dd7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800dd7c:	68bb      	ldr	r3, [r7, #8]
 800dd7e:	f003 0301 	and.w	r3, r3, #1
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d00c      	beq.n	800dda0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	f003 0301 	and.w	r3, r3, #1
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d007      	beq.n	800dda0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	f06f 0201 	mvn.w	r2, #1
 800dd98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f7f4 fb02 	bl	80023a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d104      	bne.n	800ddb4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d00c      	beq.n	800ddce <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d007      	beq.n	800ddce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ddc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ddc8:	6878      	ldr	r0, [r7, #4]
 800ddca:	f000 fdb1 	bl	800e930 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d00c      	beq.n	800ddf2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d007      	beq.n	800ddf2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ddea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f000 fda9 	bl	800e944 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ddf2:	68bb      	ldr	r3, [r7, #8]
 800ddf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d00c      	beq.n	800de16 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de02:	2b00      	cmp	r3, #0
 800de04:	d007      	beq.n	800de16 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800de0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f000 f949 	bl	800e0a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	f003 0320 	and.w	r3, r3, #32
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d00c      	beq.n	800de3a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	f003 0320 	and.w	r3, r3, #32
 800de26:	2b00      	cmp	r3, #0
 800de28:	d007      	beq.n	800de3a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	f06f 0220 	mvn.w	r2, #32
 800de32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f000 fd71 	bl	800e91c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800de3a:	bf00      	nop
 800de3c:	3710      	adds	r7, #16
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}
	...

0800de44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b086      	sub	sp, #24
 800de48:	af00      	add	r7, sp, #0
 800de4a:	60f8      	str	r0, [r7, #12]
 800de4c:	60b9      	str	r1, [r7, #8]
 800de4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800de50:	2300      	movs	r3, #0
 800de52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800de5a:	2b01      	cmp	r3, #1
 800de5c:	d101      	bne.n	800de62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800de5e:	2302      	movs	r3, #2
 800de60:	e0ff      	b.n	800e062 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	2201      	movs	r2, #1
 800de66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	2b14      	cmp	r3, #20
 800de6e:	f200 80f0 	bhi.w	800e052 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800de72:	a201      	add	r2, pc, #4	@ (adr r2, 800de78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800de74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de78:	0800decd 	.word	0x0800decd
 800de7c:	0800e053 	.word	0x0800e053
 800de80:	0800e053 	.word	0x0800e053
 800de84:	0800e053 	.word	0x0800e053
 800de88:	0800df0d 	.word	0x0800df0d
 800de8c:	0800e053 	.word	0x0800e053
 800de90:	0800e053 	.word	0x0800e053
 800de94:	0800e053 	.word	0x0800e053
 800de98:	0800df4f 	.word	0x0800df4f
 800de9c:	0800e053 	.word	0x0800e053
 800dea0:	0800e053 	.word	0x0800e053
 800dea4:	0800e053 	.word	0x0800e053
 800dea8:	0800df8f 	.word	0x0800df8f
 800deac:	0800e053 	.word	0x0800e053
 800deb0:	0800e053 	.word	0x0800e053
 800deb4:	0800e053 	.word	0x0800e053
 800deb8:	0800dfd1 	.word	0x0800dfd1
 800debc:	0800e053 	.word	0x0800e053
 800dec0:	0800e053 	.word	0x0800e053
 800dec4:	0800e053 	.word	0x0800e053
 800dec8:	0800e011 	.word	0x0800e011
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	68b9      	ldr	r1, [r7, #8]
 800ded2:	4618      	mov	r0, r3
 800ded4:	f000 f998 	bl	800e208 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	699a      	ldr	r2, [r3, #24]
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	f042 0208 	orr.w	r2, r2, #8
 800dee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	699a      	ldr	r2, [r3, #24]
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	f022 0204 	bic.w	r2, r2, #4
 800def6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	6999      	ldr	r1, [r3, #24]
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	691a      	ldr	r2, [r3, #16]
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	430a      	orrs	r2, r1
 800df08:	619a      	str	r2, [r3, #24]
      break;
 800df0a:	e0a5      	b.n	800e058 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	68b9      	ldr	r1, [r7, #8]
 800df12:	4618      	mov	r0, r3
 800df14:	f000 fa08 	bl	800e328 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	699a      	ldr	r2, [r3, #24]
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800df26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	699a      	ldr	r2, [r3, #24]
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800df36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	6999      	ldr	r1, [r3, #24]
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	691b      	ldr	r3, [r3, #16]
 800df42:	021a      	lsls	r2, r3, #8
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	430a      	orrs	r2, r1
 800df4a:	619a      	str	r2, [r3, #24]
      break;
 800df4c:	e084      	b.n	800e058 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	68b9      	ldr	r1, [r7, #8]
 800df54:	4618      	mov	r0, r3
 800df56:	f000 fa71 	bl	800e43c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	69da      	ldr	r2, [r3, #28]
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	f042 0208 	orr.w	r2, r2, #8
 800df68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	69da      	ldr	r2, [r3, #28]
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	f022 0204 	bic.w	r2, r2, #4
 800df78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	69d9      	ldr	r1, [r3, #28]
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	691a      	ldr	r2, [r3, #16]
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	430a      	orrs	r2, r1
 800df8a:	61da      	str	r2, [r3, #28]
      break;
 800df8c:	e064      	b.n	800e058 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	68b9      	ldr	r1, [r7, #8]
 800df94:	4618      	mov	r0, r3
 800df96:	f000 fad9 	bl	800e54c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	69da      	ldr	r2, [r3, #28]
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dfa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	69da      	ldr	r2, [r3, #28]
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dfb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	69d9      	ldr	r1, [r3, #28]
 800dfc0:	68bb      	ldr	r3, [r7, #8]
 800dfc2:	691b      	ldr	r3, [r3, #16]
 800dfc4:	021a      	lsls	r2, r3, #8
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	430a      	orrs	r2, r1
 800dfcc:	61da      	str	r2, [r3, #28]
      break;
 800dfce:	e043      	b.n	800e058 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	68b9      	ldr	r1, [r7, #8]
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f000 fb22 	bl	800e620 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	f042 0208 	orr.w	r2, r2, #8
 800dfea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	f022 0204 	bic.w	r2, r2, #4
 800dffa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e002:	68bb      	ldr	r3, [r7, #8]
 800e004:	691a      	ldr	r2, [r3, #16]
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	430a      	orrs	r2, r1
 800e00c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e00e:	e023      	b.n	800e058 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	68b9      	ldr	r1, [r7, #8]
 800e016:	4618      	mov	r0, r3
 800e018:	f000 fb66 	bl	800e6e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e02a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e03a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	691b      	ldr	r3, [r3, #16]
 800e046:	021a      	lsls	r2, r3, #8
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	430a      	orrs	r2, r1
 800e04e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e050:	e002      	b.n	800e058 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e052:	2301      	movs	r3, #1
 800e054:	75fb      	strb	r3, [r7, #23]
      break;
 800e056:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	2200      	movs	r2, #0
 800e05c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e060:	7dfb      	ldrb	r3, [r7, #23]
}
 800e062:	4618      	mov	r0, r3
 800e064:	3718      	adds	r7, #24
 800e066:	46bd      	mov	sp, r7
 800e068:	bd80      	pop	{r7, pc}
 800e06a:	bf00      	nop

0800e06c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e06c:	b480      	push	{r7}
 800e06e:	b083      	sub	sp, #12
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e074:	bf00      	nop
 800e076:	370c      	adds	r7, #12
 800e078:	46bd      	mov	sp, r7
 800e07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07e:	4770      	bx	lr

0800e080 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e080:	b480      	push	{r7}
 800e082:	b083      	sub	sp, #12
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e088:	bf00      	nop
 800e08a:	370c      	adds	r7, #12
 800e08c:	46bd      	mov	sp, r7
 800e08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e092:	4770      	bx	lr

0800e094 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e094:	b480      	push	{r7}
 800e096:	b083      	sub	sp, #12
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e09c:	bf00      	nop
 800e09e:	370c      	adds	r7, #12
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a6:	4770      	bx	lr

0800e0a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e0a8:	b480      	push	{r7}
 800e0aa:	b083      	sub	sp, #12
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e0b0:	bf00      	nop
 800e0b2:	370c      	adds	r7, #12
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ba:	4770      	bx	lr

0800e0bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e0bc:	b480      	push	{r7}
 800e0be:	b085      	sub	sp, #20
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
 800e0c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	4a46      	ldr	r2, [pc, #280]	@ (800e1e8 <TIM_Base_SetConfig+0x12c>)
 800e0d0:	4293      	cmp	r3, r2
 800e0d2:	d013      	beq.n	800e0fc <TIM_Base_SetConfig+0x40>
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e0da:	d00f      	beq.n	800e0fc <TIM_Base_SetConfig+0x40>
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	4a43      	ldr	r2, [pc, #268]	@ (800e1ec <TIM_Base_SetConfig+0x130>)
 800e0e0:	4293      	cmp	r3, r2
 800e0e2:	d00b      	beq.n	800e0fc <TIM_Base_SetConfig+0x40>
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	4a42      	ldr	r2, [pc, #264]	@ (800e1f0 <TIM_Base_SetConfig+0x134>)
 800e0e8:	4293      	cmp	r3, r2
 800e0ea:	d007      	beq.n	800e0fc <TIM_Base_SetConfig+0x40>
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	4a41      	ldr	r2, [pc, #260]	@ (800e1f4 <TIM_Base_SetConfig+0x138>)
 800e0f0:	4293      	cmp	r3, r2
 800e0f2:	d003      	beq.n	800e0fc <TIM_Base_SetConfig+0x40>
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	4a40      	ldr	r2, [pc, #256]	@ (800e1f8 <TIM_Base_SetConfig+0x13c>)
 800e0f8:	4293      	cmp	r3, r2
 800e0fa:	d108      	bne.n	800e10e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	685b      	ldr	r3, [r3, #4]
 800e108:	68fa      	ldr	r2, [r7, #12]
 800e10a:	4313      	orrs	r3, r2
 800e10c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	4a35      	ldr	r2, [pc, #212]	@ (800e1e8 <TIM_Base_SetConfig+0x12c>)
 800e112:	4293      	cmp	r3, r2
 800e114:	d01f      	beq.n	800e156 <TIM_Base_SetConfig+0x9a>
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e11c:	d01b      	beq.n	800e156 <TIM_Base_SetConfig+0x9a>
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	4a32      	ldr	r2, [pc, #200]	@ (800e1ec <TIM_Base_SetConfig+0x130>)
 800e122:	4293      	cmp	r3, r2
 800e124:	d017      	beq.n	800e156 <TIM_Base_SetConfig+0x9a>
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	4a31      	ldr	r2, [pc, #196]	@ (800e1f0 <TIM_Base_SetConfig+0x134>)
 800e12a:	4293      	cmp	r3, r2
 800e12c:	d013      	beq.n	800e156 <TIM_Base_SetConfig+0x9a>
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	4a30      	ldr	r2, [pc, #192]	@ (800e1f4 <TIM_Base_SetConfig+0x138>)
 800e132:	4293      	cmp	r3, r2
 800e134:	d00f      	beq.n	800e156 <TIM_Base_SetConfig+0x9a>
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	4a2f      	ldr	r2, [pc, #188]	@ (800e1f8 <TIM_Base_SetConfig+0x13c>)
 800e13a:	4293      	cmp	r3, r2
 800e13c:	d00b      	beq.n	800e156 <TIM_Base_SetConfig+0x9a>
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	4a2e      	ldr	r2, [pc, #184]	@ (800e1fc <TIM_Base_SetConfig+0x140>)
 800e142:	4293      	cmp	r3, r2
 800e144:	d007      	beq.n	800e156 <TIM_Base_SetConfig+0x9a>
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	4a2d      	ldr	r2, [pc, #180]	@ (800e200 <TIM_Base_SetConfig+0x144>)
 800e14a:	4293      	cmp	r3, r2
 800e14c:	d003      	beq.n	800e156 <TIM_Base_SetConfig+0x9a>
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	4a2c      	ldr	r2, [pc, #176]	@ (800e204 <TIM_Base_SetConfig+0x148>)
 800e152:	4293      	cmp	r3, r2
 800e154:	d108      	bne.n	800e168 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e15c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	68db      	ldr	r3, [r3, #12]
 800e162:	68fa      	ldr	r2, [r7, #12]
 800e164:	4313      	orrs	r3, r2
 800e166:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	695b      	ldr	r3, [r3, #20]
 800e172:	4313      	orrs	r3, r2
 800e174:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	68fa      	ldr	r2, [r7, #12]
 800e17a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	689a      	ldr	r2, [r3, #8]
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	681a      	ldr	r2, [r3, #0]
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	4a16      	ldr	r2, [pc, #88]	@ (800e1e8 <TIM_Base_SetConfig+0x12c>)
 800e190:	4293      	cmp	r3, r2
 800e192:	d00f      	beq.n	800e1b4 <TIM_Base_SetConfig+0xf8>
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	4a18      	ldr	r2, [pc, #96]	@ (800e1f8 <TIM_Base_SetConfig+0x13c>)
 800e198:	4293      	cmp	r3, r2
 800e19a:	d00b      	beq.n	800e1b4 <TIM_Base_SetConfig+0xf8>
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	4a17      	ldr	r2, [pc, #92]	@ (800e1fc <TIM_Base_SetConfig+0x140>)
 800e1a0:	4293      	cmp	r3, r2
 800e1a2:	d007      	beq.n	800e1b4 <TIM_Base_SetConfig+0xf8>
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	4a16      	ldr	r2, [pc, #88]	@ (800e200 <TIM_Base_SetConfig+0x144>)
 800e1a8:	4293      	cmp	r3, r2
 800e1aa:	d003      	beq.n	800e1b4 <TIM_Base_SetConfig+0xf8>
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	4a15      	ldr	r2, [pc, #84]	@ (800e204 <TIM_Base_SetConfig+0x148>)
 800e1b0:	4293      	cmp	r3, r2
 800e1b2:	d103      	bne.n	800e1bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	691a      	ldr	r2, [r3, #16]
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2201      	movs	r2, #1
 800e1c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	691b      	ldr	r3, [r3, #16]
 800e1c6:	f003 0301 	and.w	r3, r3, #1
 800e1ca:	2b01      	cmp	r3, #1
 800e1cc:	d105      	bne.n	800e1da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	691b      	ldr	r3, [r3, #16]
 800e1d2:	f023 0201 	bic.w	r2, r3, #1
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	611a      	str	r2, [r3, #16]
  }
}
 800e1da:	bf00      	nop
 800e1dc:	3714      	adds	r7, #20
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e4:	4770      	bx	lr
 800e1e6:	bf00      	nop
 800e1e8:	40010000 	.word	0x40010000
 800e1ec:	40000400 	.word	0x40000400
 800e1f0:	40000800 	.word	0x40000800
 800e1f4:	40000c00 	.word	0x40000c00
 800e1f8:	40010400 	.word	0x40010400
 800e1fc:	40014000 	.word	0x40014000
 800e200:	40014400 	.word	0x40014400
 800e204:	40014800 	.word	0x40014800

0800e208 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e208:	b480      	push	{r7}
 800e20a:	b087      	sub	sp, #28
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
 800e210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	6a1b      	ldr	r3, [r3, #32]
 800e216:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	6a1b      	ldr	r3, [r3, #32]
 800e21c:	f023 0201 	bic.w	r2, r3, #1
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	685b      	ldr	r3, [r3, #4]
 800e228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	699b      	ldr	r3, [r3, #24]
 800e22e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e230:	68fa      	ldr	r2, [r7, #12]
 800e232:	4b37      	ldr	r3, [pc, #220]	@ (800e310 <TIM_OC1_SetConfig+0x108>)
 800e234:	4013      	ands	r3, r2
 800e236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	f023 0303 	bic.w	r3, r3, #3
 800e23e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	68fa      	ldr	r2, [r7, #12]
 800e246:	4313      	orrs	r3, r2
 800e248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e24a:	697b      	ldr	r3, [r7, #20]
 800e24c:	f023 0302 	bic.w	r3, r3, #2
 800e250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	689b      	ldr	r3, [r3, #8]
 800e256:	697a      	ldr	r2, [r7, #20]
 800e258:	4313      	orrs	r3, r2
 800e25a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	4a2d      	ldr	r2, [pc, #180]	@ (800e314 <TIM_OC1_SetConfig+0x10c>)
 800e260:	4293      	cmp	r3, r2
 800e262:	d00f      	beq.n	800e284 <TIM_OC1_SetConfig+0x7c>
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	4a2c      	ldr	r2, [pc, #176]	@ (800e318 <TIM_OC1_SetConfig+0x110>)
 800e268:	4293      	cmp	r3, r2
 800e26a:	d00b      	beq.n	800e284 <TIM_OC1_SetConfig+0x7c>
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	4a2b      	ldr	r2, [pc, #172]	@ (800e31c <TIM_OC1_SetConfig+0x114>)
 800e270:	4293      	cmp	r3, r2
 800e272:	d007      	beq.n	800e284 <TIM_OC1_SetConfig+0x7c>
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	4a2a      	ldr	r2, [pc, #168]	@ (800e320 <TIM_OC1_SetConfig+0x118>)
 800e278:	4293      	cmp	r3, r2
 800e27a:	d003      	beq.n	800e284 <TIM_OC1_SetConfig+0x7c>
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	4a29      	ldr	r2, [pc, #164]	@ (800e324 <TIM_OC1_SetConfig+0x11c>)
 800e280:	4293      	cmp	r3, r2
 800e282:	d10c      	bne.n	800e29e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e284:	697b      	ldr	r3, [r7, #20]
 800e286:	f023 0308 	bic.w	r3, r3, #8
 800e28a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	68db      	ldr	r3, [r3, #12]
 800e290:	697a      	ldr	r2, [r7, #20]
 800e292:	4313      	orrs	r3, r2
 800e294:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e296:	697b      	ldr	r3, [r7, #20]
 800e298:	f023 0304 	bic.w	r3, r3, #4
 800e29c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	4a1c      	ldr	r2, [pc, #112]	@ (800e314 <TIM_OC1_SetConfig+0x10c>)
 800e2a2:	4293      	cmp	r3, r2
 800e2a4:	d00f      	beq.n	800e2c6 <TIM_OC1_SetConfig+0xbe>
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	4a1b      	ldr	r2, [pc, #108]	@ (800e318 <TIM_OC1_SetConfig+0x110>)
 800e2aa:	4293      	cmp	r3, r2
 800e2ac:	d00b      	beq.n	800e2c6 <TIM_OC1_SetConfig+0xbe>
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	4a1a      	ldr	r2, [pc, #104]	@ (800e31c <TIM_OC1_SetConfig+0x114>)
 800e2b2:	4293      	cmp	r3, r2
 800e2b4:	d007      	beq.n	800e2c6 <TIM_OC1_SetConfig+0xbe>
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	4a19      	ldr	r2, [pc, #100]	@ (800e320 <TIM_OC1_SetConfig+0x118>)
 800e2ba:	4293      	cmp	r3, r2
 800e2bc:	d003      	beq.n	800e2c6 <TIM_OC1_SetConfig+0xbe>
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	4a18      	ldr	r2, [pc, #96]	@ (800e324 <TIM_OC1_SetConfig+0x11c>)
 800e2c2:	4293      	cmp	r3, r2
 800e2c4:	d111      	bne.n	800e2ea <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e2c6:	693b      	ldr	r3, [r7, #16]
 800e2c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e2cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e2d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	695b      	ldr	r3, [r3, #20]
 800e2da:	693a      	ldr	r2, [r7, #16]
 800e2dc:	4313      	orrs	r3, r2
 800e2de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	699b      	ldr	r3, [r3, #24]
 800e2e4:	693a      	ldr	r2, [r7, #16]
 800e2e6:	4313      	orrs	r3, r2
 800e2e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	693a      	ldr	r2, [r7, #16]
 800e2ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	68fa      	ldr	r2, [r7, #12]
 800e2f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	685a      	ldr	r2, [r3, #4]
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	697a      	ldr	r2, [r7, #20]
 800e302:	621a      	str	r2, [r3, #32]
}
 800e304:	bf00      	nop
 800e306:	371c      	adds	r7, #28
 800e308:	46bd      	mov	sp, r7
 800e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30e:	4770      	bx	lr
 800e310:	fffeff8f 	.word	0xfffeff8f
 800e314:	40010000 	.word	0x40010000
 800e318:	40010400 	.word	0x40010400
 800e31c:	40014000 	.word	0x40014000
 800e320:	40014400 	.word	0x40014400
 800e324:	40014800 	.word	0x40014800

0800e328 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e328:	b480      	push	{r7}
 800e32a:	b087      	sub	sp, #28
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	6a1b      	ldr	r3, [r3, #32]
 800e336:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	6a1b      	ldr	r3, [r3, #32]
 800e33c:	f023 0210 	bic.w	r2, r3, #16
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	685b      	ldr	r3, [r3, #4]
 800e348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	699b      	ldr	r3, [r3, #24]
 800e34e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e350:	68fa      	ldr	r2, [r7, #12]
 800e352:	4b34      	ldr	r3, [pc, #208]	@ (800e424 <TIM_OC2_SetConfig+0xfc>)
 800e354:	4013      	ands	r3, r2
 800e356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e35e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	021b      	lsls	r3, r3, #8
 800e366:	68fa      	ldr	r2, [r7, #12]
 800e368:	4313      	orrs	r3, r2
 800e36a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e36c:	697b      	ldr	r3, [r7, #20]
 800e36e:	f023 0320 	bic.w	r3, r3, #32
 800e372:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	689b      	ldr	r3, [r3, #8]
 800e378:	011b      	lsls	r3, r3, #4
 800e37a:	697a      	ldr	r2, [r7, #20]
 800e37c:	4313      	orrs	r3, r2
 800e37e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	4a29      	ldr	r2, [pc, #164]	@ (800e428 <TIM_OC2_SetConfig+0x100>)
 800e384:	4293      	cmp	r3, r2
 800e386:	d003      	beq.n	800e390 <TIM_OC2_SetConfig+0x68>
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	4a28      	ldr	r2, [pc, #160]	@ (800e42c <TIM_OC2_SetConfig+0x104>)
 800e38c:	4293      	cmp	r3, r2
 800e38e:	d10d      	bne.n	800e3ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e390:	697b      	ldr	r3, [r7, #20]
 800e392:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e396:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	68db      	ldr	r3, [r3, #12]
 800e39c:	011b      	lsls	r3, r3, #4
 800e39e:	697a      	ldr	r2, [r7, #20]
 800e3a0:	4313      	orrs	r3, r2
 800e3a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e3a4:	697b      	ldr	r3, [r7, #20]
 800e3a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e3aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	4a1e      	ldr	r2, [pc, #120]	@ (800e428 <TIM_OC2_SetConfig+0x100>)
 800e3b0:	4293      	cmp	r3, r2
 800e3b2:	d00f      	beq.n	800e3d4 <TIM_OC2_SetConfig+0xac>
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	4a1d      	ldr	r2, [pc, #116]	@ (800e42c <TIM_OC2_SetConfig+0x104>)
 800e3b8:	4293      	cmp	r3, r2
 800e3ba:	d00b      	beq.n	800e3d4 <TIM_OC2_SetConfig+0xac>
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	4a1c      	ldr	r2, [pc, #112]	@ (800e430 <TIM_OC2_SetConfig+0x108>)
 800e3c0:	4293      	cmp	r3, r2
 800e3c2:	d007      	beq.n	800e3d4 <TIM_OC2_SetConfig+0xac>
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	4a1b      	ldr	r2, [pc, #108]	@ (800e434 <TIM_OC2_SetConfig+0x10c>)
 800e3c8:	4293      	cmp	r3, r2
 800e3ca:	d003      	beq.n	800e3d4 <TIM_OC2_SetConfig+0xac>
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	4a1a      	ldr	r2, [pc, #104]	@ (800e438 <TIM_OC2_SetConfig+0x110>)
 800e3d0:	4293      	cmp	r3, r2
 800e3d2:	d113      	bne.n	800e3fc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e3da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e3dc:	693b      	ldr	r3, [r7, #16]
 800e3de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e3e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	695b      	ldr	r3, [r3, #20]
 800e3e8:	009b      	lsls	r3, r3, #2
 800e3ea:	693a      	ldr	r2, [r7, #16]
 800e3ec:	4313      	orrs	r3, r2
 800e3ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	699b      	ldr	r3, [r3, #24]
 800e3f4:	009b      	lsls	r3, r3, #2
 800e3f6:	693a      	ldr	r2, [r7, #16]
 800e3f8:	4313      	orrs	r3, r2
 800e3fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	693a      	ldr	r2, [r7, #16]
 800e400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	68fa      	ldr	r2, [r7, #12]
 800e406:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	685a      	ldr	r2, [r3, #4]
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	697a      	ldr	r2, [r7, #20]
 800e414:	621a      	str	r2, [r3, #32]
}
 800e416:	bf00      	nop
 800e418:	371c      	adds	r7, #28
 800e41a:	46bd      	mov	sp, r7
 800e41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e420:	4770      	bx	lr
 800e422:	bf00      	nop
 800e424:	feff8fff 	.word	0xfeff8fff
 800e428:	40010000 	.word	0x40010000
 800e42c:	40010400 	.word	0x40010400
 800e430:	40014000 	.word	0x40014000
 800e434:	40014400 	.word	0x40014400
 800e438:	40014800 	.word	0x40014800

0800e43c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e43c:	b480      	push	{r7}
 800e43e:	b087      	sub	sp, #28
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
 800e444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6a1b      	ldr	r3, [r3, #32]
 800e44a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	6a1b      	ldr	r3, [r3, #32]
 800e450:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	685b      	ldr	r3, [r3, #4]
 800e45c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	69db      	ldr	r3, [r3, #28]
 800e462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e464:	68fa      	ldr	r2, [r7, #12]
 800e466:	4b33      	ldr	r3, [pc, #204]	@ (800e534 <TIM_OC3_SetConfig+0xf8>)
 800e468:	4013      	ands	r3, r2
 800e46a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	f023 0303 	bic.w	r3, r3, #3
 800e472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	68fa      	ldr	r2, [r7, #12]
 800e47a:	4313      	orrs	r3, r2
 800e47c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e47e:	697b      	ldr	r3, [r7, #20]
 800e480:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	689b      	ldr	r3, [r3, #8]
 800e48a:	021b      	lsls	r3, r3, #8
 800e48c:	697a      	ldr	r2, [r7, #20]
 800e48e:	4313      	orrs	r3, r2
 800e490:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	4a28      	ldr	r2, [pc, #160]	@ (800e538 <TIM_OC3_SetConfig+0xfc>)
 800e496:	4293      	cmp	r3, r2
 800e498:	d003      	beq.n	800e4a2 <TIM_OC3_SetConfig+0x66>
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	4a27      	ldr	r2, [pc, #156]	@ (800e53c <TIM_OC3_SetConfig+0x100>)
 800e49e:	4293      	cmp	r3, r2
 800e4a0:	d10d      	bne.n	800e4be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e4a2:	697b      	ldr	r3, [r7, #20]
 800e4a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e4a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e4aa:	683b      	ldr	r3, [r7, #0]
 800e4ac:	68db      	ldr	r3, [r3, #12]
 800e4ae:	021b      	lsls	r3, r3, #8
 800e4b0:	697a      	ldr	r2, [r7, #20]
 800e4b2:	4313      	orrs	r3, r2
 800e4b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e4b6:	697b      	ldr	r3, [r7, #20]
 800e4b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e4bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	4a1d      	ldr	r2, [pc, #116]	@ (800e538 <TIM_OC3_SetConfig+0xfc>)
 800e4c2:	4293      	cmp	r3, r2
 800e4c4:	d00f      	beq.n	800e4e6 <TIM_OC3_SetConfig+0xaa>
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	4a1c      	ldr	r2, [pc, #112]	@ (800e53c <TIM_OC3_SetConfig+0x100>)
 800e4ca:	4293      	cmp	r3, r2
 800e4cc:	d00b      	beq.n	800e4e6 <TIM_OC3_SetConfig+0xaa>
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	4a1b      	ldr	r2, [pc, #108]	@ (800e540 <TIM_OC3_SetConfig+0x104>)
 800e4d2:	4293      	cmp	r3, r2
 800e4d4:	d007      	beq.n	800e4e6 <TIM_OC3_SetConfig+0xaa>
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	4a1a      	ldr	r2, [pc, #104]	@ (800e544 <TIM_OC3_SetConfig+0x108>)
 800e4da:	4293      	cmp	r3, r2
 800e4dc:	d003      	beq.n	800e4e6 <TIM_OC3_SetConfig+0xaa>
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	4a19      	ldr	r2, [pc, #100]	@ (800e548 <TIM_OC3_SetConfig+0x10c>)
 800e4e2:	4293      	cmp	r3, r2
 800e4e4:	d113      	bne.n	800e50e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e4e6:	693b      	ldr	r3, [r7, #16]
 800e4e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e4ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e4ee:	693b      	ldr	r3, [r7, #16]
 800e4f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e4f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e4f6:	683b      	ldr	r3, [r7, #0]
 800e4f8:	695b      	ldr	r3, [r3, #20]
 800e4fa:	011b      	lsls	r3, r3, #4
 800e4fc:	693a      	ldr	r2, [r7, #16]
 800e4fe:	4313      	orrs	r3, r2
 800e500:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	699b      	ldr	r3, [r3, #24]
 800e506:	011b      	lsls	r3, r3, #4
 800e508:	693a      	ldr	r2, [r7, #16]
 800e50a:	4313      	orrs	r3, r2
 800e50c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	693a      	ldr	r2, [r7, #16]
 800e512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	68fa      	ldr	r2, [r7, #12]
 800e518:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	685a      	ldr	r2, [r3, #4]
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	697a      	ldr	r2, [r7, #20]
 800e526:	621a      	str	r2, [r3, #32]
}
 800e528:	bf00      	nop
 800e52a:	371c      	adds	r7, #28
 800e52c:	46bd      	mov	sp, r7
 800e52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e532:	4770      	bx	lr
 800e534:	fffeff8f 	.word	0xfffeff8f
 800e538:	40010000 	.word	0x40010000
 800e53c:	40010400 	.word	0x40010400
 800e540:	40014000 	.word	0x40014000
 800e544:	40014400 	.word	0x40014400
 800e548:	40014800 	.word	0x40014800

0800e54c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e54c:	b480      	push	{r7}
 800e54e:	b087      	sub	sp, #28
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
 800e554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6a1b      	ldr	r3, [r3, #32]
 800e55a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	6a1b      	ldr	r3, [r3, #32]
 800e560:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	685b      	ldr	r3, [r3, #4]
 800e56c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	69db      	ldr	r3, [r3, #28]
 800e572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e574:	68fa      	ldr	r2, [r7, #12]
 800e576:	4b24      	ldr	r3, [pc, #144]	@ (800e608 <TIM_OC4_SetConfig+0xbc>)
 800e578:	4013      	ands	r3, r2
 800e57a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e582:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	021b      	lsls	r3, r3, #8
 800e58a:	68fa      	ldr	r2, [r7, #12]
 800e58c:	4313      	orrs	r3, r2
 800e58e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e590:	693b      	ldr	r3, [r7, #16]
 800e592:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e596:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	689b      	ldr	r3, [r3, #8]
 800e59c:	031b      	lsls	r3, r3, #12
 800e59e:	693a      	ldr	r2, [r7, #16]
 800e5a0:	4313      	orrs	r3, r2
 800e5a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	4a19      	ldr	r2, [pc, #100]	@ (800e60c <TIM_OC4_SetConfig+0xc0>)
 800e5a8:	4293      	cmp	r3, r2
 800e5aa:	d00f      	beq.n	800e5cc <TIM_OC4_SetConfig+0x80>
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	4a18      	ldr	r2, [pc, #96]	@ (800e610 <TIM_OC4_SetConfig+0xc4>)
 800e5b0:	4293      	cmp	r3, r2
 800e5b2:	d00b      	beq.n	800e5cc <TIM_OC4_SetConfig+0x80>
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	4a17      	ldr	r2, [pc, #92]	@ (800e614 <TIM_OC4_SetConfig+0xc8>)
 800e5b8:	4293      	cmp	r3, r2
 800e5ba:	d007      	beq.n	800e5cc <TIM_OC4_SetConfig+0x80>
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	4a16      	ldr	r2, [pc, #88]	@ (800e618 <TIM_OC4_SetConfig+0xcc>)
 800e5c0:	4293      	cmp	r3, r2
 800e5c2:	d003      	beq.n	800e5cc <TIM_OC4_SetConfig+0x80>
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	4a15      	ldr	r2, [pc, #84]	@ (800e61c <TIM_OC4_SetConfig+0xd0>)
 800e5c8:	4293      	cmp	r3, r2
 800e5ca:	d109      	bne.n	800e5e0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e5cc:	697b      	ldr	r3, [r7, #20]
 800e5ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e5d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	695b      	ldr	r3, [r3, #20]
 800e5d8:	019b      	lsls	r3, r3, #6
 800e5da:	697a      	ldr	r2, [r7, #20]
 800e5dc:	4313      	orrs	r3, r2
 800e5de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	697a      	ldr	r2, [r7, #20]
 800e5e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	68fa      	ldr	r2, [r7, #12]
 800e5ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	685a      	ldr	r2, [r3, #4]
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	693a      	ldr	r2, [r7, #16]
 800e5f8:	621a      	str	r2, [r3, #32]
}
 800e5fa:	bf00      	nop
 800e5fc:	371c      	adds	r7, #28
 800e5fe:	46bd      	mov	sp, r7
 800e600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e604:	4770      	bx	lr
 800e606:	bf00      	nop
 800e608:	feff8fff 	.word	0xfeff8fff
 800e60c:	40010000 	.word	0x40010000
 800e610:	40010400 	.word	0x40010400
 800e614:	40014000 	.word	0x40014000
 800e618:	40014400 	.word	0x40014400
 800e61c:	40014800 	.word	0x40014800

0800e620 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e620:	b480      	push	{r7}
 800e622:	b087      	sub	sp, #28
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
 800e628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	6a1b      	ldr	r3, [r3, #32]
 800e62e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	6a1b      	ldr	r3, [r3, #32]
 800e634:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	685b      	ldr	r3, [r3, #4]
 800e640:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e648:	68fa      	ldr	r2, [r7, #12]
 800e64a:	4b21      	ldr	r3, [pc, #132]	@ (800e6d0 <TIM_OC5_SetConfig+0xb0>)
 800e64c:	4013      	ands	r3, r2
 800e64e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	68fa      	ldr	r2, [r7, #12]
 800e656:	4313      	orrs	r3, r2
 800e658:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e65a:	693b      	ldr	r3, [r7, #16]
 800e65c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e660:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	689b      	ldr	r3, [r3, #8]
 800e666:	041b      	lsls	r3, r3, #16
 800e668:	693a      	ldr	r2, [r7, #16]
 800e66a:	4313      	orrs	r3, r2
 800e66c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	4a18      	ldr	r2, [pc, #96]	@ (800e6d4 <TIM_OC5_SetConfig+0xb4>)
 800e672:	4293      	cmp	r3, r2
 800e674:	d00f      	beq.n	800e696 <TIM_OC5_SetConfig+0x76>
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	4a17      	ldr	r2, [pc, #92]	@ (800e6d8 <TIM_OC5_SetConfig+0xb8>)
 800e67a:	4293      	cmp	r3, r2
 800e67c:	d00b      	beq.n	800e696 <TIM_OC5_SetConfig+0x76>
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	4a16      	ldr	r2, [pc, #88]	@ (800e6dc <TIM_OC5_SetConfig+0xbc>)
 800e682:	4293      	cmp	r3, r2
 800e684:	d007      	beq.n	800e696 <TIM_OC5_SetConfig+0x76>
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	4a15      	ldr	r2, [pc, #84]	@ (800e6e0 <TIM_OC5_SetConfig+0xc0>)
 800e68a:	4293      	cmp	r3, r2
 800e68c:	d003      	beq.n	800e696 <TIM_OC5_SetConfig+0x76>
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	4a14      	ldr	r2, [pc, #80]	@ (800e6e4 <TIM_OC5_SetConfig+0xc4>)
 800e692:	4293      	cmp	r3, r2
 800e694:	d109      	bne.n	800e6aa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e696:	697b      	ldr	r3, [r7, #20]
 800e698:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e69c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	695b      	ldr	r3, [r3, #20]
 800e6a2:	021b      	lsls	r3, r3, #8
 800e6a4:	697a      	ldr	r2, [r7, #20]
 800e6a6:	4313      	orrs	r3, r2
 800e6a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	697a      	ldr	r2, [r7, #20]
 800e6ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	68fa      	ldr	r2, [r7, #12]
 800e6b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	685a      	ldr	r2, [r3, #4]
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	693a      	ldr	r2, [r7, #16]
 800e6c2:	621a      	str	r2, [r3, #32]
}
 800e6c4:	bf00      	nop
 800e6c6:	371c      	adds	r7, #28
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ce:	4770      	bx	lr
 800e6d0:	fffeff8f 	.word	0xfffeff8f
 800e6d4:	40010000 	.word	0x40010000
 800e6d8:	40010400 	.word	0x40010400
 800e6dc:	40014000 	.word	0x40014000
 800e6e0:	40014400 	.word	0x40014400
 800e6e4:	40014800 	.word	0x40014800

0800e6e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e6e8:	b480      	push	{r7}
 800e6ea:	b087      	sub	sp, #28
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
 800e6f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	6a1b      	ldr	r3, [r3, #32]
 800e6f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	6a1b      	ldr	r3, [r3, #32]
 800e6fc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	685b      	ldr	r3, [r3, #4]
 800e708:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e70e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e710:	68fa      	ldr	r2, [r7, #12]
 800e712:	4b22      	ldr	r3, [pc, #136]	@ (800e79c <TIM_OC6_SetConfig+0xb4>)
 800e714:	4013      	ands	r3, r2
 800e716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	021b      	lsls	r3, r3, #8
 800e71e:	68fa      	ldr	r2, [r7, #12]
 800e720:	4313      	orrs	r3, r2
 800e722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e724:	693b      	ldr	r3, [r7, #16]
 800e726:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e72a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	689b      	ldr	r3, [r3, #8]
 800e730:	051b      	lsls	r3, r3, #20
 800e732:	693a      	ldr	r2, [r7, #16]
 800e734:	4313      	orrs	r3, r2
 800e736:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	4a19      	ldr	r2, [pc, #100]	@ (800e7a0 <TIM_OC6_SetConfig+0xb8>)
 800e73c:	4293      	cmp	r3, r2
 800e73e:	d00f      	beq.n	800e760 <TIM_OC6_SetConfig+0x78>
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	4a18      	ldr	r2, [pc, #96]	@ (800e7a4 <TIM_OC6_SetConfig+0xbc>)
 800e744:	4293      	cmp	r3, r2
 800e746:	d00b      	beq.n	800e760 <TIM_OC6_SetConfig+0x78>
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	4a17      	ldr	r2, [pc, #92]	@ (800e7a8 <TIM_OC6_SetConfig+0xc0>)
 800e74c:	4293      	cmp	r3, r2
 800e74e:	d007      	beq.n	800e760 <TIM_OC6_SetConfig+0x78>
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	4a16      	ldr	r2, [pc, #88]	@ (800e7ac <TIM_OC6_SetConfig+0xc4>)
 800e754:	4293      	cmp	r3, r2
 800e756:	d003      	beq.n	800e760 <TIM_OC6_SetConfig+0x78>
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	4a15      	ldr	r2, [pc, #84]	@ (800e7b0 <TIM_OC6_SetConfig+0xc8>)
 800e75c:	4293      	cmp	r3, r2
 800e75e:	d109      	bne.n	800e774 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e760:	697b      	ldr	r3, [r7, #20]
 800e762:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e766:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	695b      	ldr	r3, [r3, #20]
 800e76c:	029b      	lsls	r3, r3, #10
 800e76e:	697a      	ldr	r2, [r7, #20]
 800e770:	4313      	orrs	r3, r2
 800e772:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	697a      	ldr	r2, [r7, #20]
 800e778:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	68fa      	ldr	r2, [r7, #12]
 800e77e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	685a      	ldr	r2, [r3, #4]
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	693a      	ldr	r2, [r7, #16]
 800e78c:	621a      	str	r2, [r3, #32]
}
 800e78e:	bf00      	nop
 800e790:	371c      	adds	r7, #28
 800e792:	46bd      	mov	sp, r7
 800e794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e798:	4770      	bx	lr
 800e79a:	bf00      	nop
 800e79c:	feff8fff 	.word	0xfeff8fff
 800e7a0:	40010000 	.word	0x40010000
 800e7a4:	40010400 	.word	0x40010400
 800e7a8:	40014000 	.word	0x40014000
 800e7ac:	40014400 	.word	0x40014400
 800e7b0:	40014800 	.word	0x40014800

0800e7b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e7b4:	b480      	push	{r7}
 800e7b6:	b087      	sub	sp, #28
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	60f8      	str	r0, [r7, #12]
 800e7bc:	60b9      	str	r1, [r7, #8]
 800e7be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	f003 031f 	and.w	r3, r3, #31
 800e7c6:	2201      	movs	r2, #1
 800e7c8:	fa02 f303 	lsl.w	r3, r2, r3
 800e7cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	6a1a      	ldr	r2, [r3, #32]
 800e7d2:	697b      	ldr	r3, [r7, #20]
 800e7d4:	43db      	mvns	r3, r3
 800e7d6:	401a      	ands	r2, r3
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	6a1a      	ldr	r2, [r3, #32]
 800e7e0:	68bb      	ldr	r3, [r7, #8]
 800e7e2:	f003 031f 	and.w	r3, r3, #31
 800e7e6:	6879      	ldr	r1, [r7, #4]
 800e7e8:	fa01 f303 	lsl.w	r3, r1, r3
 800e7ec:	431a      	orrs	r2, r3
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	621a      	str	r2, [r3, #32]
}
 800e7f2:	bf00      	nop
 800e7f4:	371c      	adds	r7, #28
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fc:	4770      	bx	lr
	...

0800e800 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e800:	b480      	push	{r7}
 800e802:	b085      	sub	sp, #20
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
 800e808:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e810:	2b01      	cmp	r3, #1
 800e812:	d101      	bne.n	800e818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e814:	2302      	movs	r3, #2
 800e816:	e06d      	b.n	800e8f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2201      	movs	r2, #1
 800e81c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2202      	movs	r2, #2
 800e824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	685b      	ldr	r3, [r3, #4]
 800e82e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	689b      	ldr	r3, [r3, #8]
 800e836:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	4a30      	ldr	r2, [pc, #192]	@ (800e900 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e83e:	4293      	cmp	r3, r2
 800e840:	d004      	beq.n	800e84c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	4a2f      	ldr	r2, [pc, #188]	@ (800e904 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e848:	4293      	cmp	r3, r2
 800e84a:	d108      	bne.n	800e85e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e852:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	685b      	ldr	r3, [r3, #4]
 800e858:	68fa      	ldr	r2, [r7, #12]
 800e85a:	4313      	orrs	r3, r2
 800e85c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e864:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	68fa      	ldr	r2, [r7, #12]
 800e86c:	4313      	orrs	r3, r2
 800e86e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	68fa      	ldr	r2, [r7, #12]
 800e876:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	4a20      	ldr	r2, [pc, #128]	@ (800e900 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e87e:	4293      	cmp	r3, r2
 800e880:	d022      	beq.n	800e8c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e88a:	d01d      	beq.n	800e8c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	4a1d      	ldr	r2, [pc, #116]	@ (800e908 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e892:	4293      	cmp	r3, r2
 800e894:	d018      	beq.n	800e8c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	4a1c      	ldr	r2, [pc, #112]	@ (800e90c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e89c:	4293      	cmp	r3, r2
 800e89e:	d013      	beq.n	800e8c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	4a1a      	ldr	r2, [pc, #104]	@ (800e910 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e8a6:	4293      	cmp	r3, r2
 800e8a8:	d00e      	beq.n	800e8c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	4a15      	ldr	r2, [pc, #84]	@ (800e904 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e8b0:	4293      	cmp	r3, r2
 800e8b2:	d009      	beq.n	800e8c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	4a16      	ldr	r2, [pc, #88]	@ (800e914 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e8ba:	4293      	cmp	r3, r2
 800e8bc:	d004      	beq.n	800e8c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	4a15      	ldr	r2, [pc, #84]	@ (800e918 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e8c4:	4293      	cmp	r3, r2
 800e8c6:	d10c      	bne.n	800e8e2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e8c8:	68bb      	ldr	r3, [r7, #8]
 800e8ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e8ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	689b      	ldr	r3, [r3, #8]
 800e8d4:	68ba      	ldr	r2, [r7, #8]
 800e8d6:	4313      	orrs	r3, r2
 800e8d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	68ba      	ldr	r2, [r7, #8]
 800e8e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2201      	movs	r2, #1
 800e8e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e8f2:	2300      	movs	r3, #0
}
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	3714      	adds	r7, #20
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr
 800e900:	40010000 	.word	0x40010000
 800e904:	40010400 	.word	0x40010400
 800e908:	40000400 	.word	0x40000400
 800e90c:	40000800 	.word	0x40000800
 800e910:	40000c00 	.word	0x40000c00
 800e914:	40001800 	.word	0x40001800
 800e918:	40014000 	.word	0x40014000

0800e91c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e91c:	b480      	push	{r7}
 800e91e:	b083      	sub	sp, #12
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e924:	bf00      	nop
 800e926:	370c      	adds	r7, #12
 800e928:	46bd      	mov	sp, r7
 800e92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92e:	4770      	bx	lr

0800e930 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e930:	b480      	push	{r7}
 800e932:	b083      	sub	sp, #12
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e938:	bf00      	nop
 800e93a:	370c      	adds	r7, #12
 800e93c:	46bd      	mov	sp, r7
 800e93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e942:	4770      	bx	lr

0800e944 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e944:	b480      	push	{r7}
 800e946:	b083      	sub	sp, #12
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e94c:	bf00      	nop
 800e94e:	370c      	adds	r7, #12
 800e950:	46bd      	mov	sp, r7
 800e952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e956:	4770      	bx	lr

0800e958 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b082      	sub	sp, #8
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d101      	bne.n	800e96a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e966:	2301      	movs	r3, #1
 800e968:	e042      	b.n	800e9f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e970:	2b00      	cmp	r3, #0
 800e972:	d106      	bne.n	800e982 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2200      	movs	r2, #0
 800e978:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f7f4 fc89 	bl	8003294 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	2224      	movs	r2, #36	@ 0x24
 800e986:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	681a      	ldr	r2, [r3, #0]
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	f022 0201 	bic.w	r2, r2, #1
 800e998:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d002      	beq.n	800e9a8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f001 fe0e 	bl	80105c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e9a8:	6878      	ldr	r0, [r7, #4]
 800e9aa:	f000 ff9f 	bl	800f8ec <UART_SetConfig>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	2b01      	cmp	r3, #1
 800e9b2:	d101      	bne.n	800e9b8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e9b4:	2301      	movs	r3, #1
 800e9b6:	e01b      	b.n	800e9f0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	685a      	ldr	r2, [r3, #4]
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e9c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	689a      	ldr	r2, [r3, #8]
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e9d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	681a      	ldr	r2, [r3, #0]
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	f042 0201 	orr.w	r2, r2, #1
 800e9e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e9e8:	6878      	ldr	r0, [r7, #4]
 800e9ea:	f001 fe8d 	bl	8010708 <UART_CheckIdleState>
 800e9ee:	4603      	mov	r3, r0
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3708      	adds	r7, #8
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}

0800e9f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b08a      	sub	sp, #40	@ 0x28
 800e9fc:	af02      	add	r7, sp, #8
 800e9fe:	60f8      	str	r0, [r7, #12]
 800ea00:	60b9      	str	r1, [r7, #8]
 800ea02:	603b      	str	r3, [r7, #0]
 800ea04:	4613      	mov	r3, r2
 800ea06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ea0e:	2b20      	cmp	r3, #32
 800ea10:	d17b      	bne.n	800eb0a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d002      	beq.n	800ea1e <HAL_UART_Transmit+0x26>
 800ea18:	88fb      	ldrh	r3, [r7, #6]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d101      	bne.n	800ea22 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ea1e:	2301      	movs	r3, #1
 800ea20:	e074      	b.n	800eb0c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	2200      	movs	r2, #0
 800ea26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	2221      	movs	r2, #33	@ 0x21
 800ea2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ea32:	f7f7 f835 	bl	8005aa0 <HAL_GetTick>
 800ea36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	88fa      	ldrh	r2, [r7, #6]
 800ea3c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	88fa      	ldrh	r2, [r7, #6]
 800ea44:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	689b      	ldr	r3, [r3, #8]
 800ea4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ea50:	d108      	bne.n	800ea64 <HAL_UART_Transmit+0x6c>
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	691b      	ldr	r3, [r3, #16]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d104      	bne.n	800ea64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	61bb      	str	r3, [r7, #24]
 800ea62:	e003      	b.n	800ea6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ea68:	2300      	movs	r3, #0
 800ea6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ea6c:	e030      	b.n	800ead0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	9300      	str	r3, [sp, #0]
 800ea72:	697b      	ldr	r3, [r7, #20]
 800ea74:	2200      	movs	r2, #0
 800ea76:	2180      	movs	r1, #128	@ 0x80
 800ea78:	68f8      	ldr	r0, [r7, #12]
 800ea7a:	f001 feef 	bl	801085c <UART_WaitOnFlagUntilTimeout>
 800ea7e:	4603      	mov	r3, r0
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d005      	beq.n	800ea90 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	2220      	movs	r2, #32
 800ea88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ea8c:	2303      	movs	r3, #3
 800ea8e:	e03d      	b.n	800eb0c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ea90:	69fb      	ldr	r3, [r7, #28]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d10b      	bne.n	800eaae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ea96:	69bb      	ldr	r3, [r7, #24]
 800ea98:	881b      	ldrh	r3, [r3, #0]
 800ea9a:	461a      	mov	r2, r3
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800eaa4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800eaa6:	69bb      	ldr	r3, [r7, #24]
 800eaa8:	3302      	adds	r3, #2
 800eaaa:	61bb      	str	r3, [r7, #24]
 800eaac:	e007      	b.n	800eabe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800eaae:	69fb      	ldr	r3, [r7, #28]
 800eab0:	781a      	ldrb	r2, [r3, #0]
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800eab8:	69fb      	ldr	r3, [r7, #28]
 800eaba:	3301      	adds	r3, #1
 800eabc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800eac4:	b29b      	uxth	r3, r3
 800eac6:	3b01      	subs	r3, #1
 800eac8:	b29a      	uxth	r2, r3
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ead6:	b29b      	uxth	r3, r3
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d1c8      	bne.n	800ea6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	9300      	str	r3, [sp, #0]
 800eae0:	697b      	ldr	r3, [r7, #20]
 800eae2:	2200      	movs	r2, #0
 800eae4:	2140      	movs	r1, #64	@ 0x40
 800eae6:	68f8      	ldr	r0, [r7, #12]
 800eae8:	f001 feb8 	bl	801085c <UART_WaitOnFlagUntilTimeout>
 800eaec:	4603      	mov	r3, r0
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d005      	beq.n	800eafe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	2220      	movs	r2, #32
 800eaf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800eafa:	2303      	movs	r3, #3
 800eafc:	e006      	b.n	800eb0c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	2220      	movs	r2, #32
 800eb02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800eb06:	2300      	movs	r3, #0
 800eb08:	e000      	b.n	800eb0c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800eb0a:	2302      	movs	r3, #2
  }
}
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	3720      	adds	r7, #32
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bd80      	pop	{r7, pc}

0800eb14 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800eb14:	b480      	push	{r7}
 800eb16:	b091      	sub	sp, #68	@ 0x44
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	60f8      	str	r0, [r7, #12]
 800eb1c:	60b9      	str	r1, [r7, #8]
 800eb1e:	4613      	mov	r3, r2
 800eb20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eb28:	2b20      	cmp	r3, #32
 800eb2a:	d178      	bne.n	800ec1e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800eb2c:	68bb      	ldr	r3, [r7, #8]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d002      	beq.n	800eb38 <HAL_UART_Transmit_IT+0x24>
 800eb32:	88fb      	ldrh	r3, [r7, #6]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d101      	bne.n	800eb3c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800eb38:	2301      	movs	r3, #1
 800eb3a:	e071      	b.n	800ec20 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	68ba      	ldr	r2, [r7, #8]
 800eb40:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	88fa      	ldrh	r2, [r7, #6]
 800eb46:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	88fa      	ldrh	r2, [r7, #6]
 800eb4e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	2200      	movs	r2, #0
 800eb56:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	2221      	movs	r2, #33	@ 0x21
 800eb64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800eb6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800eb70:	d12a      	bne.n	800ebc8 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	689b      	ldr	r3, [r3, #8]
 800eb76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eb7a:	d107      	bne.n	800eb8c <HAL_UART_Transmit_IT+0x78>
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	691b      	ldr	r3, [r3, #16]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d103      	bne.n	800eb8c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	4a29      	ldr	r2, [pc, #164]	@ (800ec2c <HAL_UART_Transmit_IT+0x118>)
 800eb88:	679a      	str	r2, [r3, #120]	@ 0x78
 800eb8a:	e002      	b.n	800eb92 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	4a28      	ldr	r2, [pc, #160]	@ (800ec30 <HAL_UART_Transmit_IT+0x11c>)
 800eb90:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	3308      	adds	r3, #8
 800eb98:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb9c:	e853 3f00 	ldrex	r3, [r3]
 800eba0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800eba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eba4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800eba8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	3308      	adds	r3, #8
 800ebb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ebb2:	637a      	str	r2, [r7, #52]	@ 0x34
 800ebb4:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebb6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ebb8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ebba:	e841 2300 	strex	r3, r2, [r1]
 800ebbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ebc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d1e5      	bne.n	800eb92 <HAL_UART_Transmit_IT+0x7e>
 800ebc6:	e028      	b.n	800ec1a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	689b      	ldr	r3, [r3, #8]
 800ebcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ebd0:	d107      	bne.n	800ebe2 <HAL_UART_Transmit_IT+0xce>
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	691b      	ldr	r3, [r3, #16]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d103      	bne.n	800ebe2 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	4a15      	ldr	r2, [pc, #84]	@ (800ec34 <HAL_UART_Transmit_IT+0x120>)
 800ebde:	679a      	str	r2, [r3, #120]	@ 0x78
 800ebe0:	e002      	b.n	800ebe8 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	4a14      	ldr	r2, [pc, #80]	@ (800ec38 <HAL_UART_Transmit_IT+0x124>)
 800ebe6:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebee:	697b      	ldr	r3, [r7, #20]
 800ebf0:	e853 3f00 	ldrex	r3, [r3]
 800ebf4:	613b      	str	r3, [r7, #16]
   return(result);
 800ebf6:	693b      	ldr	r3, [r7, #16]
 800ebf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ebfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	461a      	mov	r2, r3
 800ec04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec06:	623b      	str	r3, [r7, #32]
 800ec08:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec0a:	69f9      	ldr	r1, [r7, #28]
 800ec0c:	6a3a      	ldr	r2, [r7, #32]
 800ec0e:	e841 2300 	strex	r3, r2, [r1]
 800ec12:	61bb      	str	r3, [r7, #24]
   return(result);
 800ec14:	69bb      	ldr	r3, [r7, #24]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d1e6      	bne.n	800ebe8 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	e000      	b.n	800ec20 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800ec1e:	2302      	movs	r3, #2
  }
}
 800ec20:	4618      	mov	r0, r3
 800ec22:	3744      	adds	r7, #68	@ 0x44
 800ec24:	46bd      	mov	sp, r7
 800ec26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2a:	4770      	bx	lr
 800ec2c:	08011391 	.word	0x08011391
 800ec30:	080112b1 	.word	0x080112b1
 800ec34:	080111ef 	.word	0x080111ef
 800ec38:	08011137 	.word	0x08011137

0800ec3c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b08a      	sub	sp, #40	@ 0x28
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	60f8      	str	r0, [r7, #12]
 800ec44:	60b9      	str	r1, [r7, #8]
 800ec46:	4613      	mov	r3, r2
 800ec48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ec50:	2b20      	cmp	r3, #32
 800ec52:	d137      	bne.n	800ecc4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d002      	beq.n	800ec60 <HAL_UART_Receive_IT+0x24>
 800ec5a:	88fb      	ldrh	r3, [r7, #6]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d101      	bne.n	800ec64 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ec60:	2301      	movs	r3, #1
 800ec62:	e030      	b.n	800ecc6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	2200      	movs	r2, #0
 800ec68:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	4a18      	ldr	r2, [pc, #96]	@ (800ecd0 <HAL_UART_Receive_IT+0x94>)
 800ec70:	4293      	cmp	r3, r2
 800ec72:	d01f      	beq.n	800ecb4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	685b      	ldr	r3, [r3, #4]
 800ec7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d018      	beq.n	800ecb4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec88:	697b      	ldr	r3, [r7, #20]
 800ec8a:	e853 3f00 	ldrex	r3, [r3]
 800ec8e:	613b      	str	r3, [r7, #16]
   return(result);
 800ec90:	693b      	ldr	r3, [r7, #16]
 800ec92:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ec96:	627b      	str	r3, [r7, #36]	@ 0x24
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	461a      	mov	r2, r3
 800ec9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eca0:	623b      	str	r3, [r7, #32]
 800eca2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eca4:	69f9      	ldr	r1, [r7, #28]
 800eca6:	6a3a      	ldr	r2, [r7, #32]
 800eca8:	e841 2300 	strex	r3, r2, [r1]
 800ecac:	61bb      	str	r3, [r7, #24]
   return(result);
 800ecae:	69bb      	ldr	r3, [r7, #24]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d1e6      	bne.n	800ec82 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ecb4:	88fb      	ldrh	r3, [r7, #6]
 800ecb6:	461a      	mov	r2, r3
 800ecb8:	68b9      	ldr	r1, [r7, #8]
 800ecba:	68f8      	ldr	r0, [r7, #12]
 800ecbc:	f001 fe3c 	bl	8010938 <UART_Start_Receive_IT>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	e000      	b.n	800ecc6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ecc4:	2302      	movs	r3, #2
  }
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3728      	adds	r7, #40	@ 0x28
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}
 800ecce:	bf00      	nop
 800ecd0:	58000c00 	.word	0x58000c00

0800ecd4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b08a      	sub	sp, #40	@ 0x28
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	60f8      	str	r0, [r7, #12]
 800ecdc:	60b9      	str	r1, [r7, #8]
 800ecde:	4613      	mov	r3, r2
 800ece0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ece8:	2b20      	cmp	r3, #32
 800ecea:	d137      	bne.n	800ed5c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ecec:	68bb      	ldr	r3, [r7, #8]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d002      	beq.n	800ecf8 <HAL_UART_Receive_DMA+0x24>
 800ecf2:	88fb      	ldrh	r3, [r7, #6]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d101      	bne.n	800ecfc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ecf8:	2301      	movs	r3, #1
 800ecfa:	e030      	b.n	800ed5e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	2200      	movs	r2, #0
 800ed00:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	4a18      	ldr	r2, [pc, #96]	@ (800ed68 <HAL_UART_Receive_DMA+0x94>)
 800ed08:	4293      	cmp	r3, r2
 800ed0a:	d01f      	beq.n	800ed4c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	685b      	ldr	r3, [r3, #4]
 800ed12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d018      	beq.n	800ed4c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed20:	697b      	ldr	r3, [r7, #20]
 800ed22:	e853 3f00 	ldrex	r3, [r3]
 800ed26:	613b      	str	r3, [r7, #16]
   return(result);
 800ed28:	693b      	ldr	r3, [r7, #16]
 800ed2a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ed2e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	461a      	mov	r2, r3
 800ed36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed38:	623b      	str	r3, [r7, #32]
 800ed3a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed3c:	69f9      	ldr	r1, [r7, #28]
 800ed3e:	6a3a      	ldr	r2, [r7, #32]
 800ed40:	e841 2300 	strex	r3, r2, [r1]
 800ed44:	61bb      	str	r3, [r7, #24]
   return(result);
 800ed46:	69bb      	ldr	r3, [r7, #24]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d1e6      	bne.n	800ed1a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ed4c:	88fb      	ldrh	r3, [r7, #6]
 800ed4e:	461a      	mov	r2, r3
 800ed50:	68b9      	ldr	r1, [r7, #8]
 800ed52:	68f8      	ldr	r0, [r7, #12]
 800ed54:	f001 ff12 	bl	8010b7c <UART_Start_Receive_DMA>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	e000      	b.n	800ed5e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ed5c:	2302      	movs	r3, #2
  }
}
 800ed5e:	4618      	mov	r0, r3
 800ed60:	3728      	adds	r7, #40	@ 0x28
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bd80      	pop	{r7, pc}
 800ed66:	bf00      	nop
 800ed68:	58000c00 	.word	0x58000c00

0800ed6c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b090      	sub	sp, #64	@ 0x40
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ed7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ed82:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	689b      	ldr	r3, [r3, #8]
 800ed8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ed8e:	2b80      	cmp	r3, #128	@ 0x80
 800ed90:	d139      	bne.n	800ee06 <HAL_UART_DMAStop+0x9a>
 800ed92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed94:	2b21      	cmp	r3, #33	@ 0x21
 800ed96:	d136      	bne.n	800ee06 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	3308      	adds	r3, #8
 800ed9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eda0:	6a3b      	ldr	r3, [r7, #32]
 800eda2:	e853 3f00 	ldrex	r3, [r3]
 800eda6:	61fb      	str	r3, [r7, #28]
   return(result);
 800eda8:	69fb      	ldr	r3, [r7, #28]
 800edaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800edae:	637b      	str	r3, [r7, #52]	@ 0x34
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	3308      	adds	r3, #8
 800edb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800edb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800edba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800edbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800edc0:	e841 2300 	strex	r3, r2, [r1]
 800edc4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800edc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d1e5      	bne.n	800ed98 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d015      	beq.n	800ee00 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800edd8:	4618      	mov	r0, r3
 800edda:	f7f7 fde1 	bl	80069a0 <HAL_DMA_Abort>
 800edde:	4603      	mov	r3, r0
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d00d      	beq.n	800ee00 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ede8:	4618      	mov	r0, r3
 800edea:	f7f9 fa9f 	bl	800832c <HAL_DMA_GetError>
 800edee:	4603      	mov	r3, r0
 800edf0:	2b20      	cmp	r3, #32
 800edf2:	d105      	bne.n	800ee00 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	2210      	movs	r2, #16
 800edf8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800edfc:	2303      	movs	r3, #3
 800edfe:	e047      	b.n	800ee90 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800ee00:	6878      	ldr	r0, [r7, #4]
 800ee02:	f001 ff61 	bl	8010cc8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	689b      	ldr	r3, [r3, #8]
 800ee0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee10:	2b40      	cmp	r3, #64	@ 0x40
 800ee12:	d13c      	bne.n	800ee8e <HAL_UART_DMAStop+0x122>
 800ee14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee16:	2b22      	cmp	r3, #34	@ 0x22
 800ee18:	d139      	bne.n	800ee8e <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	3308      	adds	r3, #8
 800ee20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	e853 3f00 	ldrex	r3, [r3]
 800ee28:	60bb      	str	r3, [r7, #8]
   return(result);
 800ee2a:	68bb      	ldr	r3, [r7, #8]
 800ee2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ee30:	633b      	str	r3, [r7, #48]	@ 0x30
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	3308      	adds	r3, #8
 800ee38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee3a:	61ba      	str	r2, [r7, #24]
 800ee3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee3e:	6979      	ldr	r1, [r7, #20]
 800ee40:	69ba      	ldr	r2, [r7, #24]
 800ee42:	e841 2300 	strex	r3, r2, [r1]
 800ee46:	613b      	str	r3, [r7, #16]
   return(result);
 800ee48:	693b      	ldr	r3, [r7, #16]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d1e5      	bne.n	800ee1a <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d017      	beq.n	800ee88 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f7f7 fd9e 	bl	80069a0 <HAL_DMA_Abort>
 800ee64:	4603      	mov	r3, r0
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d00e      	beq.n	800ee88 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee70:	4618      	mov	r0, r3
 800ee72:	f7f9 fa5b 	bl	800832c <HAL_DMA_GetError>
 800ee76:	4603      	mov	r3, r0
 800ee78:	2b20      	cmp	r3, #32
 800ee7a:	d105      	bne.n	800ee88 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2210      	movs	r2, #16
 800ee80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800ee84:	2303      	movs	r3, #3
 800ee86:	e003      	b.n	800ee90 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f001 ff5f 	bl	8010d4c <UART_EndRxTransfer>
  }

  return HAL_OK;
 800ee8e:	2300      	movs	r3, #0
}
 800ee90:	4618      	mov	r0, r3
 800ee92:	3740      	adds	r7, #64	@ 0x40
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}

0800ee98 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b0a2      	sub	sp, #136	@ 0x88
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 800eea0:	2301      	movs	r3, #1
 800eea2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eeac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800eeae:	e853 3f00 	ldrex	r3, [r3]
 800eeb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800eeb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eeb6:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800eeba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	461a      	mov	r2, r3
 800eec4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800eec8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800eeca:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eecc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800eece:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800eed0:	e841 2300 	strex	r3, r2, [r1]
 800eed4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800eed6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d1e4      	bne.n	800eea6 <HAL_UART_Abort_IT+0xe>
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	3308      	adds	r3, #8
 800eee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eee4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eee6:	e853 3f00 	ldrex	r3, [r3]
 800eeea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800eeec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800eeee:	4b85      	ldr	r3, [pc, #532]	@ (800f104 <HAL_UART_Abort_IT+0x26c>)
 800eef0:	4013      	ands	r3, r2
 800eef2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	3308      	adds	r3, #8
 800eefa:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800eefc:	65ba      	str	r2, [r7, #88]	@ 0x58
 800eefe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ef02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ef04:	e841 2300 	strex	r3, r2, [r1]
 800ef08:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ef0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d1e5      	bne.n	800eedc <HAL_UART_Abort_IT+0x44>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ef14:	2b01      	cmp	r3, #1
 800ef16:	d118      	bne.n	800ef4a <HAL_UART_Abort_IT+0xb2>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef20:	e853 3f00 	ldrex	r3, [r3]
 800ef24:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ef26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef28:	f023 0310 	bic.w	r3, r3, #16
 800ef2c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	461a      	mov	r2, r3
 800ef34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ef36:	647b      	str	r3, [r7, #68]	@ 0x44
 800ef38:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ef3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ef3e:	e841 2300 	strex	r3, r2, [r1]
 800ef42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ef44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d1e6      	bne.n	800ef18 <HAL_UART_Abort_IT+0x80>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d00f      	beq.n	800ef72 <HAL_UART_Abort_IT+0xda>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	689b      	ldr	r3, [r3, #8]
 800ef58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ef5c:	2b80      	cmp	r3, #128	@ 0x80
 800ef5e:	d104      	bne.n	800ef6a <HAL_UART_Abort_IT+0xd2>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ef64:	4a68      	ldr	r2, [pc, #416]	@ (800f108 <HAL_UART_Abort_IT+0x270>)
 800ef66:	651a      	str	r2, [r3, #80]	@ 0x50
 800ef68:	e003      	b.n	800ef72 <HAL_UART_Abort_IT+0xda>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ef6e:	2200      	movs	r2, #0
 800ef70:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d011      	beq.n	800efa0 <HAL_UART_Abort_IT+0x108>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	689b      	ldr	r3, [r3, #8]
 800ef82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef86:	2b40      	cmp	r3, #64	@ 0x40
 800ef88:	d105      	bne.n	800ef96 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef90:	4a5e      	ldr	r2, [pc, #376]	@ (800f10c <HAL_UART_Abort_IT+0x274>)
 800ef92:	651a      	str	r2, [r3, #80]	@ 0x50
 800ef94:	e004      	b.n	800efa0 <HAL_UART_Abort_IT+0x108>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	689b      	ldr	r3, [r3, #8]
 800efa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800efaa:	2b80      	cmp	r3, #128	@ 0x80
 800efac:	d12d      	bne.n	800f00a <HAL_UART_Abort_IT+0x172>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	3308      	adds	r3, #8
 800efb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efb8:	e853 3f00 	ldrex	r3, [r3]
 800efbc:	623b      	str	r3, [r7, #32]
   return(result);
 800efbe:	6a3b      	ldr	r3, [r7, #32]
 800efc0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800efc4:	677b      	str	r3, [r7, #116]	@ 0x74
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	3308      	adds	r3, #8
 800efcc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800efce:	633a      	str	r2, [r7, #48]	@ 0x30
 800efd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800efd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800efd6:	e841 2300 	strex	r3, r2, [r1]
 800efda:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800efdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d1e5      	bne.n	800efae <HAL_UART_Abort_IT+0x116>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d00f      	beq.n	800f00a <HAL_UART_Abort_IT+0x172>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800efee:	4618      	mov	r0, r3
 800eff0:	f7f7 fff4 	bl	8006fdc <HAL_DMA_Abort_IT>
 800eff4:	4603      	mov	r3, r0
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d004      	beq.n	800f004 <HAL_UART_Abort_IT+0x16c>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800effe:	2200      	movs	r2, #0
 800f000:	651a      	str	r2, [r3, #80]	@ 0x50
 800f002:	e002      	b.n	800f00a <HAL_UART_Abort_IT+0x172>
      }
      else
      {
        abortcplt = 0U;
 800f004:	2300      	movs	r3, #0
 800f006:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	689b      	ldr	r3, [r3, #8]
 800f010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f014:	2b40      	cmp	r3, #64	@ 0x40
 800f016:	d133      	bne.n	800f080 <HAL_UART_Abort_IT+0x1e8>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	3308      	adds	r3, #8
 800f01e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f020:	693b      	ldr	r3, [r7, #16]
 800f022:	e853 3f00 	ldrex	r3, [r3]
 800f026:	60fb      	str	r3, [r7, #12]
   return(result);
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f02e:	673b      	str	r3, [r7, #112]	@ 0x70
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	3308      	adds	r3, #8
 800f036:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800f038:	61fa      	str	r2, [r7, #28]
 800f03a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f03c:	69b9      	ldr	r1, [r7, #24]
 800f03e:	69fa      	ldr	r2, [r7, #28]
 800f040:	e841 2300 	strex	r3, r2, [r1]
 800f044:	617b      	str	r3, [r7, #20]
   return(result);
 800f046:	697b      	ldr	r3, [r7, #20]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d1e5      	bne.n	800f018 <HAL_UART_Abort_IT+0x180>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f052:	2b00      	cmp	r3, #0
 800f054:	d014      	beq.n	800f080 <HAL_UART_Abort_IT+0x1e8>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f05c:	4618      	mov	r0, r3
 800f05e:	f7f7 ffbd 	bl	8006fdc <HAL_DMA_Abort_IT>
 800f062:	4603      	mov	r3, r0
 800f064:	2b00      	cmp	r3, #0
 800f066:	d008      	beq.n	800f07a <HAL_UART_Abort_IT+0x1e2>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f06e:	2200      	movs	r2, #0
 800f070:	651a      	str	r2, [r3, #80]	@ 0x50
        abortcplt = 1U;
 800f072:	2301      	movs	r3, #1
 800f074:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f078:	e002      	b.n	800f080 <HAL_UART_Abort_IT+0x1e8>
      }
      else
      {
        abortcplt = 0U;
 800f07a:	2300      	movs	r3, #0
 800f07c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 800f080:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f084:	2b01      	cmp	r3, #1
 800f086:	d138      	bne.n	800f0fa <HAL_UART_Abort_IT+0x262>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2200      	movs	r2, #0
 800f08c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->RxXferCount = 0U;
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	2200      	movs	r2, #0
 800f094:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2200      	movs	r2, #0
 800f09c:	675a      	str	r2, [r3, #116]	@ 0x74
    huart->TxISR = NULL;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	220f      	movs	r2, #15
 800f0b2:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f0b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f0bc:	d107      	bne.n	800f0ce <HAL_UART_Abort_IT+0x236>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	699a      	ldr	r2, [r3, #24]
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	f042 0210 	orr.w	r2, r2, #16
 800f0cc:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	699a      	ldr	r2, [r3, #24]
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	f042 0208 	orr.w	r2, r2, #8
 800f0dc:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	2220      	movs	r2, #32
 800f0e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    huart->RxState = HAL_UART_STATE_READY;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	2220      	movs	r2, #32
 800f0ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800f0f4:	6878      	ldr	r0, [r7, #4]
 800f0f6:	f000 fbe3 	bl	800f8c0 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800f0fa:	2300      	movs	r3, #0
}
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	3788      	adds	r7, #136	@ 0x88
 800f100:	46bd      	mov	sp, r7
 800f102:	bd80      	pop	{r7, pc}
 800f104:	ef7ffffe 	.word	0xef7ffffe
 800f108:	0801102b 	.word	0x0801102b
 800f10c:	080110b7 	.word	0x080110b7

0800f110 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b0ba      	sub	sp, #232	@ 0xe8
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	69db      	ldr	r3, [r3, #28]
 800f11e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	689b      	ldr	r3, [r3, #8]
 800f132:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f136:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f13a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800f13e:	4013      	ands	r3, r2
 800f140:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800f144:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d11b      	bne.n	800f184 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f14c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f150:	f003 0320 	and.w	r3, r3, #32
 800f154:	2b00      	cmp	r3, #0
 800f156:	d015      	beq.n	800f184 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f15c:	f003 0320 	and.w	r3, r3, #32
 800f160:	2b00      	cmp	r3, #0
 800f162:	d105      	bne.n	800f170 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d009      	beq.n	800f184 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f174:	2b00      	cmp	r3, #0
 800f176:	f000 8377 	beq.w	800f868 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f17e:	6878      	ldr	r0, [r7, #4]
 800f180:	4798      	blx	r3
      }
      return;
 800f182:	e371      	b.n	800f868 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f184:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f188:	2b00      	cmp	r3, #0
 800f18a:	f000 8123 	beq.w	800f3d4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f18e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f192:	4b8d      	ldr	r3, [pc, #564]	@ (800f3c8 <HAL_UART_IRQHandler+0x2b8>)
 800f194:	4013      	ands	r3, r2
 800f196:	2b00      	cmp	r3, #0
 800f198:	d106      	bne.n	800f1a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f19a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f19e:	4b8b      	ldr	r3, [pc, #556]	@ (800f3cc <HAL_UART_IRQHandler+0x2bc>)
 800f1a0:	4013      	ands	r3, r2
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	f000 8116 	beq.w	800f3d4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f1a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f1ac:	f003 0301 	and.w	r3, r3, #1
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d011      	beq.n	800f1d8 <HAL_UART_IRQHandler+0xc8>
 800f1b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f1b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d00b      	beq.n	800f1d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	2201      	movs	r2, #1
 800f1c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f1ce:	f043 0201 	orr.w	r2, r3, #1
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f1d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f1dc:	f003 0302 	and.w	r3, r3, #2
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d011      	beq.n	800f208 <HAL_UART_IRQHandler+0xf8>
 800f1e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f1e8:	f003 0301 	and.w	r3, r3, #1
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d00b      	beq.n	800f208 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	2202      	movs	r2, #2
 800f1f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f1fe:	f043 0204 	orr.w	r2, r3, #4
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f20c:	f003 0304 	and.w	r3, r3, #4
 800f210:	2b00      	cmp	r3, #0
 800f212:	d011      	beq.n	800f238 <HAL_UART_IRQHandler+0x128>
 800f214:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f218:	f003 0301 	and.w	r3, r3, #1
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d00b      	beq.n	800f238 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	2204      	movs	r2, #4
 800f226:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f22e:	f043 0202 	orr.w	r2, r3, #2
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f23c:	f003 0308 	and.w	r3, r3, #8
 800f240:	2b00      	cmp	r3, #0
 800f242:	d017      	beq.n	800f274 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f248:	f003 0320 	and.w	r3, r3, #32
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d105      	bne.n	800f25c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f250:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f254:	4b5c      	ldr	r3, [pc, #368]	@ (800f3c8 <HAL_UART_IRQHandler+0x2b8>)
 800f256:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d00b      	beq.n	800f274 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	2208      	movs	r2, #8
 800f262:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f26a:	f043 0208 	orr.w	r2, r3, #8
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f278:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d012      	beq.n	800f2a6 <HAL_UART_IRQHandler+0x196>
 800f280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f284:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d00c      	beq.n	800f2a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f294:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f29c:	f043 0220 	orr.w	r2, r3, #32
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	f000 82dd 	beq.w	800f86c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f2b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f2b6:	f003 0320 	and.w	r3, r3, #32
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d013      	beq.n	800f2e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f2be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f2c2:	f003 0320 	and.w	r3, r3, #32
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d105      	bne.n	800f2d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f2ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f2ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d007      	beq.n	800f2e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d003      	beq.n	800f2e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f2ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	689b      	ldr	r3, [r3, #8]
 800f2f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f2fa:	2b40      	cmp	r3, #64	@ 0x40
 800f2fc:	d005      	beq.n	800f30a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f2fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f302:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f306:	2b00      	cmp	r3, #0
 800f308:	d054      	beq.n	800f3b4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	f001 fd1e 	bl	8010d4c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	689b      	ldr	r3, [r3, #8]
 800f316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f31a:	2b40      	cmp	r3, #64	@ 0x40
 800f31c:	d146      	bne.n	800f3ac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	3308      	adds	r3, #8
 800f324:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f328:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f32c:	e853 3f00 	ldrex	r3, [r3]
 800f330:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f334:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f338:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f33c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	3308      	adds	r3, #8
 800f346:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f34a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f34e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f352:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f356:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f35a:	e841 2300 	strex	r3, r2, [r1]
 800f35e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800f362:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f366:	2b00      	cmp	r3, #0
 800f368:	d1d9      	bne.n	800f31e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f370:	2b00      	cmp	r3, #0
 800f372:	d017      	beq.n	800f3a4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f37a:	4a15      	ldr	r2, [pc, #84]	@ (800f3d0 <HAL_UART_IRQHandler+0x2c0>)
 800f37c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f384:	4618      	mov	r0, r3
 800f386:	f7f7 fe29 	bl	8006fdc <HAL_DMA_Abort_IT>
 800f38a:	4603      	mov	r3, r0
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d019      	beq.n	800f3c4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f398:	687a      	ldr	r2, [r7, #4]
 800f39a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800f39e:	4610      	mov	r0, r2
 800f3a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f3a2:	e00f      	b.n	800f3c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f000 fa81 	bl	800f8ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f3aa:	e00b      	b.n	800f3c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	f000 fa7d 	bl	800f8ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f3b2:	e007      	b.n	800f3c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f3b4:	6878      	ldr	r0, [r7, #4]
 800f3b6:	f000 fa79 	bl	800f8ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	2200      	movs	r2, #0
 800f3be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800f3c2:	e253      	b.n	800f86c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f3c4:	bf00      	nop
    return;
 800f3c6:	e251      	b.n	800f86c <HAL_UART_IRQHandler+0x75c>
 800f3c8:	10000001 	.word	0x10000001
 800f3cc:	04000120 	.word	0x04000120
 800f3d0:	08010fff 	.word	0x08010fff

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f3d8:	2b01      	cmp	r3, #1
 800f3da:	f040 81e7 	bne.w	800f7ac <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f3de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f3e2:	f003 0310 	and.w	r3, r3, #16
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	f000 81e0 	beq.w	800f7ac <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f3ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f3f0:	f003 0310 	and.w	r3, r3, #16
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	f000 81d9 	beq.w	800f7ac <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	2210      	movs	r2, #16
 800f400:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	689b      	ldr	r3, [r3, #8]
 800f408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f40c:	2b40      	cmp	r3, #64	@ 0x40
 800f40e:	f040 8151 	bne.w	800f6b4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	4a96      	ldr	r2, [pc, #600]	@ (800f674 <HAL_UART_IRQHandler+0x564>)
 800f41c:	4293      	cmp	r3, r2
 800f41e:	d068      	beq.n	800f4f2 <HAL_UART_IRQHandler+0x3e2>
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	4a93      	ldr	r2, [pc, #588]	@ (800f678 <HAL_UART_IRQHandler+0x568>)
 800f42a:	4293      	cmp	r3, r2
 800f42c:	d061      	beq.n	800f4f2 <HAL_UART_IRQHandler+0x3e2>
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	4a91      	ldr	r2, [pc, #580]	@ (800f67c <HAL_UART_IRQHandler+0x56c>)
 800f438:	4293      	cmp	r3, r2
 800f43a:	d05a      	beq.n	800f4f2 <HAL_UART_IRQHandler+0x3e2>
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	4a8e      	ldr	r2, [pc, #568]	@ (800f680 <HAL_UART_IRQHandler+0x570>)
 800f446:	4293      	cmp	r3, r2
 800f448:	d053      	beq.n	800f4f2 <HAL_UART_IRQHandler+0x3e2>
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	4a8c      	ldr	r2, [pc, #560]	@ (800f684 <HAL_UART_IRQHandler+0x574>)
 800f454:	4293      	cmp	r3, r2
 800f456:	d04c      	beq.n	800f4f2 <HAL_UART_IRQHandler+0x3e2>
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	4a89      	ldr	r2, [pc, #548]	@ (800f688 <HAL_UART_IRQHandler+0x578>)
 800f462:	4293      	cmp	r3, r2
 800f464:	d045      	beq.n	800f4f2 <HAL_UART_IRQHandler+0x3e2>
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	4a87      	ldr	r2, [pc, #540]	@ (800f68c <HAL_UART_IRQHandler+0x57c>)
 800f470:	4293      	cmp	r3, r2
 800f472:	d03e      	beq.n	800f4f2 <HAL_UART_IRQHandler+0x3e2>
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	4a84      	ldr	r2, [pc, #528]	@ (800f690 <HAL_UART_IRQHandler+0x580>)
 800f47e:	4293      	cmp	r3, r2
 800f480:	d037      	beq.n	800f4f2 <HAL_UART_IRQHandler+0x3e2>
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	4a82      	ldr	r2, [pc, #520]	@ (800f694 <HAL_UART_IRQHandler+0x584>)
 800f48c:	4293      	cmp	r3, r2
 800f48e:	d030      	beq.n	800f4f2 <HAL_UART_IRQHandler+0x3e2>
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	4a7f      	ldr	r2, [pc, #508]	@ (800f698 <HAL_UART_IRQHandler+0x588>)
 800f49a:	4293      	cmp	r3, r2
 800f49c:	d029      	beq.n	800f4f2 <HAL_UART_IRQHandler+0x3e2>
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	4a7d      	ldr	r2, [pc, #500]	@ (800f69c <HAL_UART_IRQHandler+0x58c>)
 800f4a8:	4293      	cmp	r3, r2
 800f4aa:	d022      	beq.n	800f4f2 <HAL_UART_IRQHandler+0x3e2>
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	4a7a      	ldr	r2, [pc, #488]	@ (800f6a0 <HAL_UART_IRQHandler+0x590>)
 800f4b6:	4293      	cmp	r3, r2
 800f4b8:	d01b      	beq.n	800f4f2 <HAL_UART_IRQHandler+0x3e2>
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	4a78      	ldr	r2, [pc, #480]	@ (800f6a4 <HAL_UART_IRQHandler+0x594>)
 800f4c4:	4293      	cmp	r3, r2
 800f4c6:	d014      	beq.n	800f4f2 <HAL_UART_IRQHandler+0x3e2>
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	4a75      	ldr	r2, [pc, #468]	@ (800f6a8 <HAL_UART_IRQHandler+0x598>)
 800f4d2:	4293      	cmp	r3, r2
 800f4d4:	d00d      	beq.n	800f4f2 <HAL_UART_IRQHandler+0x3e2>
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	4a73      	ldr	r2, [pc, #460]	@ (800f6ac <HAL_UART_IRQHandler+0x59c>)
 800f4e0:	4293      	cmp	r3, r2
 800f4e2:	d006      	beq.n	800f4f2 <HAL_UART_IRQHandler+0x3e2>
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	4a70      	ldr	r2, [pc, #448]	@ (800f6b0 <HAL_UART_IRQHandler+0x5a0>)
 800f4ee:	4293      	cmp	r3, r2
 800f4f0:	d106      	bne.n	800f500 <HAL_UART_IRQHandler+0x3f0>
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	685b      	ldr	r3, [r3, #4]
 800f4fc:	b29b      	uxth	r3, r3
 800f4fe:	e005      	b.n	800f50c <HAL_UART_IRQHandler+0x3fc>
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	685b      	ldr	r3, [r3, #4]
 800f50a:	b29b      	uxth	r3, r3
 800f50c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f510:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800f514:	2b00      	cmp	r3, #0
 800f516:	f000 81ab 	beq.w	800f870 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f520:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f524:	429a      	cmp	r2, r3
 800f526:	f080 81a3 	bcs.w	800f870 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f530:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f53a:	69db      	ldr	r3, [r3, #28]
 800f53c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f540:	f000 8087 	beq.w	800f652 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f54c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f550:	e853 3f00 	ldrex	r3, [r3]
 800f554:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800f558:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f55c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f560:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	461a      	mov	r2, r3
 800f56a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f56e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f572:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f576:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f57a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f57e:	e841 2300 	strex	r3, r2, [r1]
 800f582:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800f586:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d1da      	bne.n	800f544 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	3308      	adds	r3, #8
 800f594:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f596:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f598:	e853 3f00 	ldrex	r3, [r3]
 800f59c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f59e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f5a0:	f023 0301 	bic.w	r3, r3, #1
 800f5a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	3308      	adds	r3, #8
 800f5ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f5b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f5b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f5ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f5be:	e841 2300 	strex	r3, r2, [r1]
 800f5c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f5c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d1e1      	bne.n	800f58e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	3308      	adds	r3, #8
 800f5d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f5d4:	e853 3f00 	ldrex	r3, [r3]
 800f5d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f5da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f5dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f5e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	3308      	adds	r3, #8
 800f5ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800f5ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f5f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f5f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f5f6:	e841 2300 	strex	r3, r2, [r1]
 800f5fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f5fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d1e3      	bne.n	800f5ca <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	2220      	movs	r2, #32
 800f606:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	2200      	movs	r2, #0
 800f60e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f616:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f618:	e853 3f00 	ldrex	r3, [r3]
 800f61c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f61e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f620:	f023 0310 	bic.w	r3, r3, #16
 800f624:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	461a      	mov	r2, r3
 800f62e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f632:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f634:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f636:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f638:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f63a:	e841 2300 	strex	r3, r2, [r1]
 800f63e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f640:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f642:	2b00      	cmp	r3, #0
 800f644:	d1e4      	bne.n	800f610 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f64c:	4618      	mov	r0, r3
 800f64e:	f7f7 f9a7 	bl	80069a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	2202      	movs	r2, #2
 800f656:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f664:	b29b      	uxth	r3, r3
 800f666:	1ad3      	subs	r3, r2, r3
 800f668:	b29b      	uxth	r3, r3
 800f66a:	4619      	mov	r1, r3
 800f66c:	6878      	ldr	r0, [r7, #4]
 800f66e:	f000 f931 	bl	800f8d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f672:	e0fd      	b.n	800f870 <HAL_UART_IRQHandler+0x760>
 800f674:	40020010 	.word	0x40020010
 800f678:	40020028 	.word	0x40020028
 800f67c:	40020040 	.word	0x40020040
 800f680:	40020058 	.word	0x40020058
 800f684:	40020070 	.word	0x40020070
 800f688:	40020088 	.word	0x40020088
 800f68c:	400200a0 	.word	0x400200a0
 800f690:	400200b8 	.word	0x400200b8
 800f694:	40020410 	.word	0x40020410
 800f698:	40020428 	.word	0x40020428
 800f69c:	40020440 	.word	0x40020440
 800f6a0:	40020458 	.word	0x40020458
 800f6a4:	40020470 	.word	0x40020470
 800f6a8:	40020488 	.word	0x40020488
 800f6ac:	400204a0 	.word	0x400204a0
 800f6b0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f6c0:	b29b      	uxth	r3, r3
 800f6c2:	1ad3      	subs	r3, r2, r3
 800f6c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f6ce:	b29b      	uxth	r3, r3
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	f000 80cf 	beq.w	800f874 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800f6d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	f000 80ca 	beq.w	800f874 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6e8:	e853 3f00 	ldrex	r3, [r3]
 800f6ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f6ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f6f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f6f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	461a      	mov	r2, r3
 800f6fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f702:	647b      	str	r3, [r7, #68]	@ 0x44
 800f704:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f706:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f708:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f70a:	e841 2300 	strex	r3, r2, [r1]
 800f70e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f710:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f712:	2b00      	cmp	r3, #0
 800f714:	d1e4      	bne.n	800f6e0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	3308      	adds	r3, #8
 800f71c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f71e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f720:	e853 3f00 	ldrex	r3, [r3]
 800f724:	623b      	str	r3, [r7, #32]
   return(result);
 800f726:	6a3a      	ldr	r2, [r7, #32]
 800f728:	4b55      	ldr	r3, [pc, #340]	@ (800f880 <HAL_UART_IRQHandler+0x770>)
 800f72a:	4013      	ands	r3, r2
 800f72c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	3308      	adds	r3, #8
 800f736:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f73a:	633a      	str	r2, [r7, #48]	@ 0x30
 800f73c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f73e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f740:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f742:	e841 2300 	strex	r3, r2, [r1]
 800f746:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d1e3      	bne.n	800f716 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	2220      	movs	r2, #32
 800f752:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	2200      	movs	r2, #0
 800f75a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2200      	movs	r2, #0
 800f760:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f768:	693b      	ldr	r3, [r7, #16]
 800f76a:	e853 3f00 	ldrex	r3, [r3]
 800f76e:	60fb      	str	r3, [r7, #12]
   return(result);
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	f023 0310 	bic.w	r3, r3, #16
 800f776:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	461a      	mov	r2, r3
 800f780:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f784:	61fb      	str	r3, [r7, #28]
 800f786:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f788:	69b9      	ldr	r1, [r7, #24]
 800f78a:	69fa      	ldr	r2, [r7, #28]
 800f78c:	e841 2300 	strex	r3, r2, [r1]
 800f790:	617b      	str	r3, [r7, #20]
   return(result);
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d1e4      	bne.n	800f762 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	2202      	movs	r2, #2
 800f79c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f79e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f7a2:	4619      	mov	r1, r3
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	f000 f895 	bl	800f8d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f7aa:	e063      	b.n	800f874 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f7ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f7b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d00e      	beq.n	800f7d6 <HAL_UART_IRQHandler+0x6c6>
 800f7b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f7bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d008      	beq.n	800f7d6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800f7cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f7ce:	6878      	ldr	r0, [r7, #4]
 800f7d0:	f002 fb9a 	bl	8011f08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f7d4:	e051      	b.n	800f87a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f7d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f7da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d014      	beq.n	800f80c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f7e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f7e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d105      	bne.n	800f7fa <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f7ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f7f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d008      	beq.n	800f80c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d03a      	beq.n	800f878 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f806:	6878      	ldr	r0, [r7, #4]
 800f808:	4798      	blx	r3
    }
    return;
 800f80a:	e035      	b.n	800f878 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f80c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f814:	2b00      	cmp	r3, #0
 800f816:	d009      	beq.n	800f82c <HAL_UART_IRQHandler+0x71c>
 800f818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f81c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f820:	2b00      	cmp	r3, #0
 800f822:	d003      	beq.n	800f82c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800f824:	6878      	ldr	r0, [r7, #4]
 800f826:	f001 fe28 	bl	801147a <UART_EndTransmit_IT>
    return;
 800f82a:	e026      	b.n	800f87a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f82c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f830:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f834:	2b00      	cmp	r3, #0
 800f836:	d009      	beq.n	800f84c <HAL_UART_IRQHandler+0x73c>
 800f838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f83c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f840:	2b00      	cmp	r3, #0
 800f842:	d003      	beq.n	800f84c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f844:	6878      	ldr	r0, [r7, #4]
 800f846:	f002 fb73 	bl	8011f30 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f84a:	e016      	b.n	800f87a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f84c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f850:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f854:	2b00      	cmp	r3, #0
 800f856:	d010      	beq.n	800f87a <HAL_UART_IRQHandler+0x76a>
 800f858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	da0c      	bge.n	800f87a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f860:	6878      	ldr	r0, [r7, #4]
 800f862:	f002 fb5b 	bl	8011f1c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f866:	e008      	b.n	800f87a <HAL_UART_IRQHandler+0x76a>
      return;
 800f868:	bf00      	nop
 800f86a:	e006      	b.n	800f87a <HAL_UART_IRQHandler+0x76a>
    return;
 800f86c:	bf00      	nop
 800f86e:	e004      	b.n	800f87a <HAL_UART_IRQHandler+0x76a>
      return;
 800f870:	bf00      	nop
 800f872:	e002      	b.n	800f87a <HAL_UART_IRQHandler+0x76a>
      return;
 800f874:	bf00      	nop
 800f876:	e000      	b.n	800f87a <HAL_UART_IRQHandler+0x76a>
    return;
 800f878:	bf00      	nop
  }
}
 800f87a:	37e8      	adds	r7, #232	@ 0xe8
 800f87c:	46bd      	mov	sp, r7
 800f87e:	bd80      	pop	{r7, pc}
 800f880:	effffffe 	.word	0xeffffffe

0800f884 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f884:	b480      	push	{r7}
 800f886:	b083      	sub	sp, #12
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f88c:	bf00      	nop
 800f88e:	370c      	adds	r7, #12
 800f890:	46bd      	mov	sp, r7
 800f892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f896:	4770      	bx	lr

0800f898 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f898:	b480      	push	{r7}
 800f89a:	b083      	sub	sp, #12
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f8a0:	bf00      	nop
 800f8a2:	370c      	adds	r7, #12
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8aa:	4770      	bx	lr

0800f8ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f8ac:	b480      	push	{r7}
 800f8ae:	b083      	sub	sp, #12
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f8b4:	bf00      	nop
 800f8b6:	370c      	adds	r7, #12
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8be:	4770      	bx	lr

0800f8c0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800f8c0:	b480      	push	{r7}
 800f8c2:	b083      	sub	sp, #12
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800f8c8:	bf00      	nop
 800f8ca:	370c      	adds	r7, #12
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d2:	4770      	bx	lr

0800f8d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f8d4:	b480      	push	{r7}
 800f8d6:	b083      	sub	sp, #12
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
 800f8dc:	460b      	mov	r3, r1
 800f8de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f8e0:	bf00      	nop
 800f8e2:	370c      	adds	r7, #12
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ea:	4770      	bx	lr

0800f8ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f8ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f8f0:	b092      	sub	sp, #72	@ 0x48
 800f8f2:	af00      	add	r7, sp, #0
 800f8f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f8fc:	697b      	ldr	r3, [r7, #20]
 800f8fe:	689a      	ldr	r2, [r3, #8]
 800f900:	697b      	ldr	r3, [r7, #20]
 800f902:	691b      	ldr	r3, [r3, #16]
 800f904:	431a      	orrs	r2, r3
 800f906:	697b      	ldr	r3, [r7, #20]
 800f908:	695b      	ldr	r3, [r3, #20]
 800f90a:	431a      	orrs	r2, r3
 800f90c:	697b      	ldr	r3, [r7, #20]
 800f90e:	69db      	ldr	r3, [r3, #28]
 800f910:	4313      	orrs	r3, r2
 800f912:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f914:	697b      	ldr	r3, [r7, #20]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	681a      	ldr	r2, [r3, #0]
 800f91a:	4bbe      	ldr	r3, [pc, #760]	@ (800fc14 <UART_SetConfig+0x328>)
 800f91c:	4013      	ands	r3, r2
 800f91e:	697a      	ldr	r2, [r7, #20]
 800f920:	6812      	ldr	r2, [r2, #0]
 800f922:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f924:	430b      	orrs	r3, r1
 800f926:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f928:	697b      	ldr	r3, [r7, #20]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	685b      	ldr	r3, [r3, #4]
 800f92e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f932:	697b      	ldr	r3, [r7, #20]
 800f934:	68da      	ldr	r2, [r3, #12]
 800f936:	697b      	ldr	r3, [r7, #20]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	430a      	orrs	r2, r1
 800f93c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f93e:	697b      	ldr	r3, [r7, #20]
 800f940:	699b      	ldr	r3, [r3, #24]
 800f942:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f944:	697b      	ldr	r3, [r7, #20]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	4ab3      	ldr	r2, [pc, #716]	@ (800fc18 <UART_SetConfig+0x32c>)
 800f94a:	4293      	cmp	r3, r2
 800f94c:	d004      	beq.n	800f958 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f94e:	697b      	ldr	r3, [r7, #20]
 800f950:	6a1b      	ldr	r3, [r3, #32]
 800f952:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f954:	4313      	orrs	r3, r2
 800f956:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f958:	697b      	ldr	r3, [r7, #20]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	689a      	ldr	r2, [r3, #8]
 800f95e:	4baf      	ldr	r3, [pc, #700]	@ (800fc1c <UART_SetConfig+0x330>)
 800f960:	4013      	ands	r3, r2
 800f962:	697a      	ldr	r2, [r7, #20]
 800f964:	6812      	ldr	r2, [r2, #0]
 800f966:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f968:	430b      	orrs	r3, r1
 800f96a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f96c:	697b      	ldr	r3, [r7, #20]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f972:	f023 010f 	bic.w	r1, r3, #15
 800f976:	697b      	ldr	r3, [r7, #20]
 800f978:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f97a:	697b      	ldr	r3, [r7, #20]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	430a      	orrs	r2, r1
 800f980:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f982:	697b      	ldr	r3, [r7, #20]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	4aa6      	ldr	r2, [pc, #664]	@ (800fc20 <UART_SetConfig+0x334>)
 800f988:	4293      	cmp	r3, r2
 800f98a:	d177      	bne.n	800fa7c <UART_SetConfig+0x190>
 800f98c:	4ba5      	ldr	r3, [pc, #660]	@ (800fc24 <UART_SetConfig+0x338>)
 800f98e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f990:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f994:	2b28      	cmp	r3, #40	@ 0x28
 800f996:	d86d      	bhi.n	800fa74 <UART_SetConfig+0x188>
 800f998:	a201      	add	r2, pc, #4	@ (adr r2, 800f9a0 <UART_SetConfig+0xb4>)
 800f99a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f99e:	bf00      	nop
 800f9a0:	0800fa45 	.word	0x0800fa45
 800f9a4:	0800fa75 	.word	0x0800fa75
 800f9a8:	0800fa75 	.word	0x0800fa75
 800f9ac:	0800fa75 	.word	0x0800fa75
 800f9b0:	0800fa75 	.word	0x0800fa75
 800f9b4:	0800fa75 	.word	0x0800fa75
 800f9b8:	0800fa75 	.word	0x0800fa75
 800f9bc:	0800fa75 	.word	0x0800fa75
 800f9c0:	0800fa4d 	.word	0x0800fa4d
 800f9c4:	0800fa75 	.word	0x0800fa75
 800f9c8:	0800fa75 	.word	0x0800fa75
 800f9cc:	0800fa75 	.word	0x0800fa75
 800f9d0:	0800fa75 	.word	0x0800fa75
 800f9d4:	0800fa75 	.word	0x0800fa75
 800f9d8:	0800fa75 	.word	0x0800fa75
 800f9dc:	0800fa75 	.word	0x0800fa75
 800f9e0:	0800fa55 	.word	0x0800fa55
 800f9e4:	0800fa75 	.word	0x0800fa75
 800f9e8:	0800fa75 	.word	0x0800fa75
 800f9ec:	0800fa75 	.word	0x0800fa75
 800f9f0:	0800fa75 	.word	0x0800fa75
 800f9f4:	0800fa75 	.word	0x0800fa75
 800f9f8:	0800fa75 	.word	0x0800fa75
 800f9fc:	0800fa75 	.word	0x0800fa75
 800fa00:	0800fa5d 	.word	0x0800fa5d
 800fa04:	0800fa75 	.word	0x0800fa75
 800fa08:	0800fa75 	.word	0x0800fa75
 800fa0c:	0800fa75 	.word	0x0800fa75
 800fa10:	0800fa75 	.word	0x0800fa75
 800fa14:	0800fa75 	.word	0x0800fa75
 800fa18:	0800fa75 	.word	0x0800fa75
 800fa1c:	0800fa75 	.word	0x0800fa75
 800fa20:	0800fa65 	.word	0x0800fa65
 800fa24:	0800fa75 	.word	0x0800fa75
 800fa28:	0800fa75 	.word	0x0800fa75
 800fa2c:	0800fa75 	.word	0x0800fa75
 800fa30:	0800fa75 	.word	0x0800fa75
 800fa34:	0800fa75 	.word	0x0800fa75
 800fa38:	0800fa75 	.word	0x0800fa75
 800fa3c:	0800fa75 	.word	0x0800fa75
 800fa40:	0800fa6d 	.word	0x0800fa6d
 800fa44:	2301      	movs	r3, #1
 800fa46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa4a:	e326      	b.n	801009a <UART_SetConfig+0x7ae>
 800fa4c:	2304      	movs	r3, #4
 800fa4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa52:	e322      	b.n	801009a <UART_SetConfig+0x7ae>
 800fa54:	2308      	movs	r3, #8
 800fa56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa5a:	e31e      	b.n	801009a <UART_SetConfig+0x7ae>
 800fa5c:	2310      	movs	r3, #16
 800fa5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa62:	e31a      	b.n	801009a <UART_SetConfig+0x7ae>
 800fa64:	2320      	movs	r3, #32
 800fa66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa6a:	e316      	b.n	801009a <UART_SetConfig+0x7ae>
 800fa6c:	2340      	movs	r3, #64	@ 0x40
 800fa6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa72:	e312      	b.n	801009a <UART_SetConfig+0x7ae>
 800fa74:	2380      	movs	r3, #128	@ 0x80
 800fa76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa7a:	e30e      	b.n	801009a <UART_SetConfig+0x7ae>
 800fa7c:	697b      	ldr	r3, [r7, #20]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	4a69      	ldr	r2, [pc, #420]	@ (800fc28 <UART_SetConfig+0x33c>)
 800fa82:	4293      	cmp	r3, r2
 800fa84:	d130      	bne.n	800fae8 <UART_SetConfig+0x1fc>
 800fa86:	4b67      	ldr	r3, [pc, #412]	@ (800fc24 <UART_SetConfig+0x338>)
 800fa88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fa8a:	f003 0307 	and.w	r3, r3, #7
 800fa8e:	2b05      	cmp	r3, #5
 800fa90:	d826      	bhi.n	800fae0 <UART_SetConfig+0x1f4>
 800fa92:	a201      	add	r2, pc, #4	@ (adr r2, 800fa98 <UART_SetConfig+0x1ac>)
 800fa94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa98:	0800fab1 	.word	0x0800fab1
 800fa9c:	0800fab9 	.word	0x0800fab9
 800faa0:	0800fac1 	.word	0x0800fac1
 800faa4:	0800fac9 	.word	0x0800fac9
 800faa8:	0800fad1 	.word	0x0800fad1
 800faac:	0800fad9 	.word	0x0800fad9
 800fab0:	2300      	movs	r3, #0
 800fab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fab6:	e2f0      	b.n	801009a <UART_SetConfig+0x7ae>
 800fab8:	2304      	movs	r3, #4
 800faba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fabe:	e2ec      	b.n	801009a <UART_SetConfig+0x7ae>
 800fac0:	2308      	movs	r3, #8
 800fac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fac6:	e2e8      	b.n	801009a <UART_SetConfig+0x7ae>
 800fac8:	2310      	movs	r3, #16
 800faca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800face:	e2e4      	b.n	801009a <UART_SetConfig+0x7ae>
 800fad0:	2320      	movs	r3, #32
 800fad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fad6:	e2e0      	b.n	801009a <UART_SetConfig+0x7ae>
 800fad8:	2340      	movs	r3, #64	@ 0x40
 800fada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fade:	e2dc      	b.n	801009a <UART_SetConfig+0x7ae>
 800fae0:	2380      	movs	r3, #128	@ 0x80
 800fae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fae6:	e2d8      	b.n	801009a <UART_SetConfig+0x7ae>
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	4a4f      	ldr	r2, [pc, #316]	@ (800fc2c <UART_SetConfig+0x340>)
 800faee:	4293      	cmp	r3, r2
 800faf0:	d130      	bne.n	800fb54 <UART_SetConfig+0x268>
 800faf2:	4b4c      	ldr	r3, [pc, #304]	@ (800fc24 <UART_SetConfig+0x338>)
 800faf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800faf6:	f003 0307 	and.w	r3, r3, #7
 800fafa:	2b05      	cmp	r3, #5
 800fafc:	d826      	bhi.n	800fb4c <UART_SetConfig+0x260>
 800fafe:	a201      	add	r2, pc, #4	@ (adr r2, 800fb04 <UART_SetConfig+0x218>)
 800fb00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb04:	0800fb1d 	.word	0x0800fb1d
 800fb08:	0800fb25 	.word	0x0800fb25
 800fb0c:	0800fb2d 	.word	0x0800fb2d
 800fb10:	0800fb35 	.word	0x0800fb35
 800fb14:	0800fb3d 	.word	0x0800fb3d
 800fb18:	0800fb45 	.word	0x0800fb45
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb22:	e2ba      	b.n	801009a <UART_SetConfig+0x7ae>
 800fb24:	2304      	movs	r3, #4
 800fb26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb2a:	e2b6      	b.n	801009a <UART_SetConfig+0x7ae>
 800fb2c:	2308      	movs	r3, #8
 800fb2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb32:	e2b2      	b.n	801009a <UART_SetConfig+0x7ae>
 800fb34:	2310      	movs	r3, #16
 800fb36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb3a:	e2ae      	b.n	801009a <UART_SetConfig+0x7ae>
 800fb3c:	2320      	movs	r3, #32
 800fb3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb42:	e2aa      	b.n	801009a <UART_SetConfig+0x7ae>
 800fb44:	2340      	movs	r3, #64	@ 0x40
 800fb46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb4a:	e2a6      	b.n	801009a <UART_SetConfig+0x7ae>
 800fb4c:	2380      	movs	r3, #128	@ 0x80
 800fb4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb52:	e2a2      	b.n	801009a <UART_SetConfig+0x7ae>
 800fb54:	697b      	ldr	r3, [r7, #20]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	4a35      	ldr	r2, [pc, #212]	@ (800fc30 <UART_SetConfig+0x344>)
 800fb5a:	4293      	cmp	r3, r2
 800fb5c:	d130      	bne.n	800fbc0 <UART_SetConfig+0x2d4>
 800fb5e:	4b31      	ldr	r3, [pc, #196]	@ (800fc24 <UART_SetConfig+0x338>)
 800fb60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb62:	f003 0307 	and.w	r3, r3, #7
 800fb66:	2b05      	cmp	r3, #5
 800fb68:	d826      	bhi.n	800fbb8 <UART_SetConfig+0x2cc>
 800fb6a:	a201      	add	r2, pc, #4	@ (adr r2, 800fb70 <UART_SetConfig+0x284>)
 800fb6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb70:	0800fb89 	.word	0x0800fb89
 800fb74:	0800fb91 	.word	0x0800fb91
 800fb78:	0800fb99 	.word	0x0800fb99
 800fb7c:	0800fba1 	.word	0x0800fba1
 800fb80:	0800fba9 	.word	0x0800fba9
 800fb84:	0800fbb1 	.word	0x0800fbb1
 800fb88:	2300      	movs	r3, #0
 800fb8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb8e:	e284      	b.n	801009a <UART_SetConfig+0x7ae>
 800fb90:	2304      	movs	r3, #4
 800fb92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb96:	e280      	b.n	801009a <UART_SetConfig+0x7ae>
 800fb98:	2308      	movs	r3, #8
 800fb9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb9e:	e27c      	b.n	801009a <UART_SetConfig+0x7ae>
 800fba0:	2310      	movs	r3, #16
 800fba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fba6:	e278      	b.n	801009a <UART_SetConfig+0x7ae>
 800fba8:	2320      	movs	r3, #32
 800fbaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbae:	e274      	b.n	801009a <UART_SetConfig+0x7ae>
 800fbb0:	2340      	movs	r3, #64	@ 0x40
 800fbb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbb6:	e270      	b.n	801009a <UART_SetConfig+0x7ae>
 800fbb8:	2380      	movs	r3, #128	@ 0x80
 800fbba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbbe:	e26c      	b.n	801009a <UART_SetConfig+0x7ae>
 800fbc0:	697b      	ldr	r3, [r7, #20]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	4a1b      	ldr	r2, [pc, #108]	@ (800fc34 <UART_SetConfig+0x348>)
 800fbc6:	4293      	cmp	r3, r2
 800fbc8:	d142      	bne.n	800fc50 <UART_SetConfig+0x364>
 800fbca:	4b16      	ldr	r3, [pc, #88]	@ (800fc24 <UART_SetConfig+0x338>)
 800fbcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fbce:	f003 0307 	and.w	r3, r3, #7
 800fbd2:	2b05      	cmp	r3, #5
 800fbd4:	d838      	bhi.n	800fc48 <UART_SetConfig+0x35c>
 800fbd6:	a201      	add	r2, pc, #4	@ (adr r2, 800fbdc <UART_SetConfig+0x2f0>)
 800fbd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbdc:	0800fbf5 	.word	0x0800fbf5
 800fbe0:	0800fbfd 	.word	0x0800fbfd
 800fbe4:	0800fc05 	.word	0x0800fc05
 800fbe8:	0800fc0d 	.word	0x0800fc0d
 800fbec:	0800fc39 	.word	0x0800fc39
 800fbf0:	0800fc41 	.word	0x0800fc41
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbfa:	e24e      	b.n	801009a <UART_SetConfig+0x7ae>
 800fbfc:	2304      	movs	r3, #4
 800fbfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc02:	e24a      	b.n	801009a <UART_SetConfig+0x7ae>
 800fc04:	2308      	movs	r3, #8
 800fc06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc0a:	e246      	b.n	801009a <UART_SetConfig+0x7ae>
 800fc0c:	2310      	movs	r3, #16
 800fc0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc12:	e242      	b.n	801009a <UART_SetConfig+0x7ae>
 800fc14:	cfff69f3 	.word	0xcfff69f3
 800fc18:	58000c00 	.word	0x58000c00
 800fc1c:	11fff4ff 	.word	0x11fff4ff
 800fc20:	40011000 	.word	0x40011000
 800fc24:	58024400 	.word	0x58024400
 800fc28:	40004400 	.word	0x40004400
 800fc2c:	40004800 	.word	0x40004800
 800fc30:	40004c00 	.word	0x40004c00
 800fc34:	40005000 	.word	0x40005000
 800fc38:	2320      	movs	r3, #32
 800fc3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc3e:	e22c      	b.n	801009a <UART_SetConfig+0x7ae>
 800fc40:	2340      	movs	r3, #64	@ 0x40
 800fc42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc46:	e228      	b.n	801009a <UART_SetConfig+0x7ae>
 800fc48:	2380      	movs	r3, #128	@ 0x80
 800fc4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc4e:	e224      	b.n	801009a <UART_SetConfig+0x7ae>
 800fc50:	697b      	ldr	r3, [r7, #20]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	4ab1      	ldr	r2, [pc, #708]	@ (800ff1c <UART_SetConfig+0x630>)
 800fc56:	4293      	cmp	r3, r2
 800fc58:	d176      	bne.n	800fd48 <UART_SetConfig+0x45c>
 800fc5a:	4bb1      	ldr	r3, [pc, #708]	@ (800ff20 <UART_SetConfig+0x634>)
 800fc5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fc5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fc62:	2b28      	cmp	r3, #40	@ 0x28
 800fc64:	d86c      	bhi.n	800fd40 <UART_SetConfig+0x454>
 800fc66:	a201      	add	r2, pc, #4	@ (adr r2, 800fc6c <UART_SetConfig+0x380>)
 800fc68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc6c:	0800fd11 	.word	0x0800fd11
 800fc70:	0800fd41 	.word	0x0800fd41
 800fc74:	0800fd41 	.word	0x0800fd41
 800fc78:	0800fd41 	.word	0x0800fd41
 800fc7c:	0800fd41 	.word	0x0800fd41
 800fc80:	0800fd41 	.word	0x0800fd41
 800fc84:	0800fd41 	.word	0x0800fd41
 800fc88:	0800fd41 	.word	0x0800fd41
 800fc8c:	0800fd19 	.word	0x0800fd19
 800fc90:	0800fd41 	.word	0x0800fd41
 800fc94:	0800fd41 	.word	0x0800fd41
 800fc98:	0800fd41 	.word	0x0800fd41
 800fc9c:	0800fd41 	.word	0x0800fd41
 800fca0:	0800fd41 	.word	0x0800fd41
 800fca4:	0800fd41 	.word	0x0800fd41
 800fca8:	0800fd41 	.word	0x0800fd41
 800fcac:	0800fd21 	.word	0x0800fd21
 800fcb0:	0800fd41 	.word	0x0800fd41
 800fcb4:	0800fd41 	.word	0x0800fd41
 800fcb8:	0800fd41 	.word	0x0800fd41
 800fcbc:	0800fd41 	.word	0x0800fd41
 800fcc0:	0800fd41 	.word	0x0800fd41
 800fcc4:	0800fd41 	.word	0x0800fd41
 800fcc8:	0800fd41 	.word	0x0800fd41
 800fccc:	0800fd29 	.word	0x0800fd29
 800fcd0:	0800fd41 	.word	0x0800fd41
 800fcd4:	0800fd41 	.word	0x0800fd41
 800fcd8:	0800fd41 	.word	0x0800fd41
 800fcdc:	0800fd41 	.word	0x0800fd41
 800fce0:	0800fd41 	.word	0x0800fd41
 800fce4:	0800fd41 	.word	0x0800fd41
 800fce8:	0800fd41 	.word	0x0800fd41
 800fcec:	0800fd31 	.word	0x0800fd31
 800fcf0:	0800fd41 	.word	0x0800fd41
 800fcf4:	0800fd41 	.word	0x0800fd41
 800fcf8:	0800fd41 	.word	0x0800fd41
 800fcfc:	0800fd41 	.word	0x0800fd41
 800fd00:	0800fd41 	.word	0x0800fd41
 800fd04:	0800fd41 	.word	0x0800fd41
 800fd08:	0800fd41 	.word	0x0800fd41
 800fd0c:	0800fd39 	.word	0x0800fd39
 800fd10:	2301      	movs	r3, #1
 800fd12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd16:	e1c0      	b.n	801009a <UART_SetConfig+0x7ae>
 800fd18:	2304      	movs	r3, #4
 800fd1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd1e:	e1bc      	b.n	801009a <UART_SetConfig+0x7ae>
 800fd20:	2308      	movs	r3, #8
 800fd22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd26:	e1b8      	b.n	801009a <UART_SetConfig+0x7ae>
 800fd28:	2310      	movs	r3, #16
 800fd2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd2e:	e1b4      	b.n	801009a <UART_SetConfig+0x7ae>
 800fd30:	2320      	movs	r3, #32
 800fd32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd36:	e1b0      	b.n	801009a <UART_SetConfig+0x7ae>
 800fd38:	2340      	movs	r3, #64	@ 0x40
 800fd3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd3e:	e1ac      	b.n	801009a <UART_SetConfig+0x7ae>
 800fd40:	2380      	movs	r3, #128	@ 0x80
 800fd42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd46:	e1a8      	b.n	801009a <UART_SetConfig+0x7ae>
 800fd48:	697b      	ldr	r3, [r7, #20]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	4a75      	ldr	r2, [pc, #468]	@ (800ff24 <UART_SetConfig+0x638>)
 800fd4e:	4293      	cmp	r3, r2
 800fd50:	d130      	bne.n	800fdb4 <UART_SetConfig+0x4c8>
 800fd52:	4b73      	ldr	r3, [pc, #460]	@ (800ff20 <UART_SetConfig+0x634>)
 800fd54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd56:	f003 0307 	and.w	r3, r3, #7
 800fd5a:	2b05      	cmp	r3, #5
 800fd5c:	d826      	bhi.n	800fdac <UART_SetConfig+0x4c0>
 800fd5e:	a201      	add	r2, pc, #4	@ (adr r2, 800fd64 <UART_SetConfig+0x478>)
 800fd60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd64:	0800fd7d 	.word	0x0800fd7d
 800fd68:	0800fd85 	.word	0x0800fd85
 800fd6c:	0800fd8d 	.word	0x0800fd8d
 800fd70:	0800fd95 	.word	0x0800fd95
 800fd74:	0800fd9d 	.word	0x0800fd9d
 800fd78:	0800fda5 	.word	0x0800fda5
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd82:	e18a      	b.n	801009a <UART_SetConfig+0x7ae>
 800fd84:	2304      	movs	r3, #4
 800fd86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd8a:	e186      	b.n	801009a <UART_SetConfig+0x7ae>
 800fd8c:	2308      	movs	r3, #8
 800fd8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd92:	e182      	b.n	801009a <UART_SetConfig+0x7ae>
 800fd94:	2310      	movs	r3, #16
 800fd96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd9a:	e17e      	b.n	801009a <UART_SetConfig+0x7ae>
 800fd9c:	2320      	movs	r3, #32
 800fd9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fda2:	e17a      	b.n	801009a <UART_SetConfig+0x7ae>
 800fda4:	2340      	movs	r3, #64	@ 0x40
 800fda6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdaa:	e176      	b.n	801009a <UART_SetConfig+0x7ae>
 800fdac:	2380      	movs	r3, #128	@ 0x80
 800fdae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdb2:	e172      	b.n	801009a <UART_SetConfig+0x7ae>
 800fdb4:	697b      	ldr	r3, [r7, #20]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	4a5b      	ldr	r2, [pc, #364]	@ (800ff28 <UART_SetConfig+0x63c>)
 800fdba:	4293      	cmp	r3, r2
 800fdbc:	d130      	bne.n	800fe20 <UART_SetConfig+0x534>
 800fdbe:	4b58      	ldr	r3, [pc, #352]	@ (800ff20 <UART_SetConfig+0x634>)
 800fdc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fdc2:	f003 0307 	and.w	r3, r3, #7
 800fdc6:	2b05      	cmp	r3, #5
 800fdc8:	d826      	bhi.n	800fe18 <UART_SetConfig+0x52c>
 800fdca:	a201      	add	r2, pc, #4	@ (adr r2, 800fdd0 <UART_SetConfig+0x4e4>)
 800fdcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdd0:	0800fde9 	.word	0x0800fde9
 800fdd4:	0800fdf1 	.word	0x0800fdf1
 800fdd8:	0800fdf9 	.word	0x0800fdf9
 800fddc:	0800fe01 	.word	0x0800fe01
 800fde0:	0800fe09 	.word	0x0800fe09
 800fde4:	0800fe11 	.word	0x0800fe11
 800fde8:	2300      	movs	r3, #0
 800fdea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdee:	e154      	b.n	801009a <UART_SetConfig+0x7ae>
 800fdf0:	2304      	movs	r3, #4
 800fdf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdf6:	e150      	b.n	801009a <UART_SetConfig+0x7ae>
 800fdf8:	2308      	movs	r3, #8
 800fdfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdfe:	e14c      	b.n	801009a <UART_SetConfig+0x7ae>
 800fe00:	2310      	movs	r3, #16
 800fe02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe06:	e148      	b.n	801009a <UART_SetConfig+0x7ae>
 800fe08:	2320      	movs	r3, #32
 800fe0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe0e:	e144      	b.n	801009a <UART_SetConfig+0x7ae>
 800fe10:	2340      	movs	r3, #64	@ 0x40
 800fe12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe16:	e140      	b.n	801009a <UART_SetConfig+0x7ae>
 800fe18:	2380      	movs	r3, #128	@ 0x80
 800fe1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe1e:	e13c      	b.n	801009a <UART_SetConfig+0x7ae>
 800fe20:	697b      	ldr	r3, [r7, #20]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	4a41      	ldr	r2, [pc, #260]	@ (800ff2c <UART_SetConfig+0x640>)
 800fe26:	4293      	cmp	r3, r2
 800fe28:	f040 8082 	bne.w	800ff30 <UART_SetConfig+0x644>
 800fe2c:	4b3c      	ldr	r3, [pc, #240]	@ (800ff20 <UART_SetConfig+0x634>)
 800fe2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe30:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fe34:	2b28      	cmp	r3, #40	@ 0x28
 800fe36:	d86d      	bhi.n	800ff14 <UART_SetConfig+0x628>
 800fe38:	a201      	add	r2, pc, #4	@ (adr r2, 800fe40 <UART_SetConfig+0x554>)
 800fe3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe3e:	bf00      	nop
 800fe40:	0800fee5 	.word	0x0800fee5
 800fe44:	0800ff15 	.word	0x0800ff15
 800fe48:	0800ff15 	.word	0x0800ff15
 800fe4c:	0800ff15 	.word	0x0800ff15
 800fe50:	0800ff15 	.word	0x0800ff15
 800fe54:	0800ff15 	.word	0x0800ff15
 800fe58:	0800ff15 	.word	0x0800ff15
 800fe5c:	0800ff15 	.word	0x0800ff15
 800fe60:	0800feed 	.word	0x0800feed
 800fe64:	0800ff15 	.word	0x0800ff15
 800fe68:	0800ff15 	.word	0x0800ff15
 800fe6c:	0800ff15 	.word	0x0800ff15
 800fe70:	0800ff15 	.word	0x0800ff15
 800fe74:	0800ff15 	.word	0x0800ff15
 800fe78:	0800ff15 	.word	0x0800ff15
 800fe7c:	0800ff15 	.word	0x0800ff15
 800fe80:	0800fef5 	.word	0x0800fef5
 800fe84:	0800ff15 	.word	0x0800ff15
 800fe88:	0800ff15 	.word	0x0800ff15
 800fe8c:	0800ff15 	.word	0x0800ff15
 800fe90:	0800ff15 	.word	0x0800ff15
 800fe94:	0800ff15 	.word	0x0800ff15
 800fe98:	0800ff15 	.word	0x0800ff15
 800fe9c:	0800ff15 	.word	0x0800ff15
 800fea0:	0800fefd 	.word	0x0800fefd
 800fea4:	0800ff15 	.word	0x0800ff15
 800fea8:	0800ff15 	.word	0x0800ff15
 800feac:	0800ff15 	.word	0x0800ff15
 800feb0:	0800ff15 	.word	0x0800ff15
 800feb4:	0800ff15 	.word	0x0800ff15
 800feb8:	0800ff15 	.word	0x0800ff15
 800febc:	0800ff15 	.word	0x0800ff15
 800fec0:	0800ff05 	.word	0x0800ff05
 800fec4:	0800ff15 	.word	0x0800ff15
 800fec8:	0800ff15 	.word	0x0800ff15
 800fecc:	0800ff15 	.word	0x0800ff15
 800fed0:	0800ff15 	.word	0x0800ff15
 800fed4:	0800ff15 	.word	0x0800ff15
 800fed8:	0800ff15 	.word	0x0800ff15
 800fedc:	0800ff15 	.word	0x0800ff15
 800fee0:	0800ff0d 	.word	0x0800ff0d
 800fee4:	2301      	movs	r3, #1
 800fee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800feea:	e0d6      	b.n	801009a <UART_SetConfig+0x7ae>
 800feec:	2304      	movs	r3, #4
 800feee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fef2:	e0d2      	b.n	801009a <UART_SetConfig+0x7ae>
 800fef4:	2308      	movs	r3, #8
 800fef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fefa:	e0ce      	b.n	801009a <UART_SetConfig+0x7ae>
 800fefc:	2310      	movs	r3, #16
 800fefe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff02:	e0ca      	b.n	801009a <UART_SetConfig+0x7ae>
 800ff04:	2320      	movs	r3, #32
 800ff06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff0a:	e0c6      	b.n	801009a <UART_SetConfig+0x7ae>
 800ff0c:	2340      	movs	r3, #64	@ 0x40
 800ff0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff12:	e0c2      	b.n	801009a <UART_SetConfig+0x7ae>
 800ff14:	2380      	movs	r3, #128	@ 0x80
 800ff16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff1a:	e0be      	b.n	801009a <UART_SetConfig+0x7ae>
 800ff1c:	40011400 	.word	0x40011400
 800ff20:	58024400 	.word	0x58024400
 800ff24:	40007800 	.word	0x40007800
 800ff28:	40007c00 	.word	0x40007c00
 800ff2c:	40011800 	.word	0x40011800
 800ff30:	697b      	ldr	r3, [r7, #20]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	4aad      	ldr	r2, [pc, #692]	@ (80101ec <UART_SetConfig+0x900>)
 800ff36:	4293      	cmp	r3, r2
 800ff38:	d176      	bne.n	8010028 <UART_SetConfig+0x73c>
 800ff3a:	4bad      	ldr	r3, [pc, #692]	@ (80101f0 <UART_SetConfig+0x904>)
 800ff3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ff3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ff42:	2b28      	cmp	r3, #40	@ 0x28
 800ff44:	d86c      	bhi.n	8010020 <UART_SetConfig+0x734>
 800ff46:	a201      	add	r2, pc, #4	@ (adr r2, 800ff4c <UART_SetConfig+0x660>)
 800ff48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff4c:	0800fff1 	.word	0x0800fff1
 800ff50:	08010021 	.word	0x08010021
 800ff54:	08010021 	.word	0x08010021
 800ff58:	08010021 	.word	0x08010021
 800ff5c:	08010021 	.word	0x08010021
 800ff60:	08010021 	.word	0x08010021
 800ff64:	08010021 	.word	0x08010021
 800ff68:	08010021 	.word	0x08010021
 800ff6c:	0800fff9 	.word	0x0800fff9
 800ff70:	08010021 	.word	0x08010021
 800ff74:	08010021 	.word	0x08010021
 800ff78:	08010021 	.word	0x08010021
 800ff7c:	08010021 	.word	0x08010021
 800ff80:	08010021 	.word	0x08010021
 800ff84:	08010021 	.word	0x08010021
 800ff88:	08010021 	.word	0x08010021
 800ff8c:	08010001 	.word	0x08010001
 800ff90:	08010021 	.word	0x08010021
 800ff94:	08010021 	.word	0x08010021
 800ff98:	08010021 	.word	0x08010021
 800ff9c:	08010021 	.word	0x08010021
 800ffa0:	08010021 	.word	0x08010021
 800ffa4:	08010021 	.word	0x08010021
 800ffa8:	08010021 	.word	0x08010021
 800ffac:	08010009 	.word	0x08010009
 800ffb0:	08010021 	.word	0x08010021
 800ffb4:	08010021 	.word	0x08010021
 800ffb8:	08010021 	.word	0x08010021
 800ffbc:	08010021 	.word	0x08010021
 800ffc0:	08010021 	.word	0x08010021
 800ffc4:	08010021 	.word	0x08010021
 800ffc8:	08010021 	.word	0x08010021
 800ffcc:	08010011 	.word	0x08010011
 800ffd0:	08010021 	.word	0x08010021
 800ffd4:	08010021 	.word	0x08010021
 800ffd8:	08010021 	.word	0x08010021
 800ffdc:	08010021 	.word	0x08010021
 800ffe0:	08010021 	.word	0x08010021
 800ffe4:	08010021 	.word	0x08010021
 800ffe8:	08010021 	.word	0x08010021
 800ffec:	08010019 	.word	0x08010019
 800fff0:	2301      	movs	r3, #1
 800fff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fff6:	e050      	b.n	801009a <UART_SetConfig+0x7ae>
 800fff8:	2304      	movs	r3, #4
 800fffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fffe:	e04c      	b.n	801009a <UART_SetConfig+0x7ae>
 8010000:	2308      	movs	r3, #8
 8010002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010006:	e048      	b.n	801009a <UART_SetConfig+0x7ae>
 8010008:	2310      	movs	r3, #16
 801000a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801000e:	e044      	b.n	801009a <UART_SetConfig+0x7ae>
 8010010:	2320      	movs	r3, #32
 8010012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010016:	e040      	b.n	801009a <UART_SetConfig+0x7ae>
 8010018:	2340      	movs	r3, #64	@ 0x40
 801001a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801001e:	e03c      	b.n	801009a <UART_SetConfig+0x7ae>
 8010020:	2380      	movs	r3, #128	@ 0x80
 8010022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010026:	e038      	b.n	801009a <UART_SetConfig+0x7ae>
 8010028:	697b      	ldr	r3, [r7, #20]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	4a71      	ldr	r2, [pc, #452]	@ (80101f4 <UART_SetConfig+0x908>)
 801002e:	4293      	cmp	r3, r2
 8010030:	d130      	bne.n	8010094 <UART_SetConfig+0x7a8>
 8010032:	4b6f      	ldr	r3, [pc, #444]	@ (80101f0 <UART_SetConfig+0x904>)
 8010034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010036:	f003 0307 	and.w	r3, r3, #7
 801003a:	2b05      	cmp	r3, #5
 801003c:	d826      	bhi.n	801008c <UART_SetConfig+0x7a0>
 801003e:	a201      	add	r2, pc, #4	@ (adr r2, 8010044 <UART_SetConfig+0x758>)
 8010040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010044:	0801005d 	.word	0x0801005d
 8010048:	08010065 	.word	0x08010065
 801004c:	0801006d 	.word	0x0801006d
 8010050:	08010075 	.word	0x08010075
 8010054:	0801007d 	.word	0x0801007d
 8010058:	08010085 	.word	0x08010085
 801005c:	2302      	movs	r3, #2
 801005e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010062:	e01a      	b.n	801009a <UART_SetConfig+0x7ae>
 8010064:	2304      	movs	r3, #4
 8010066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801006a:	e016      	b.n	801009a <UART_SetConfig+0x7ae>
 801006c:	2308      	movs	r3, #8
 801006e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010072:	e012      	b.n	801009a <UART_SetConfig+0x7ae>
 8010074:	2310      	movs	r3, #16
 8010076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801007a:	e00e      	b.n	801009a <UART_SetConfig+0x7ae>
 801007c:	2320      	movs	r3, #32
 801007e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010082:	e00a      	b.n	801009a <UART_SetConfig+0x7ae>
 8010084:	2340      	movs	r3, #64	@ 0x40
 8010086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801008a:	e006      	b.n	801009a <UART_SetConfig+0x7ae>
 801008c:	2380      	movs	r3, #128	@ 0x80
 801008e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010092:	e002      	b.n	801009a <UART_SetConfig+0x7ae>
 8010094:	2380      	movs	r3, #128	@ 0x80
 8010096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801009a:	697b      	ldr	r3, [r7, #20]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	4a55      	ldr	r2, [pc, #340]	@ (80101f4 <UART_SetConfig+0x908>)
 80100a0:	4293      	cmp	r3, r2
 80100a2:	f040 80f8 	bne.w	8010296 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80100a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80100aa:	2b20      	cmp	r3, #32
 80100ac:	dc46      	bgt.n	801013c <UART_SetConfig+0x850>
 80100ae:	2b02      	cmp	r3, #2
 80100b0:	db75      	blt.n	801019e <UART_SetConfig+0x8b2>
 80100b2:	3b02      	subs	r3, #2
 80100b4:	2b1e      	cmp	r3, #30
 80100b6:	d872      	bhi.n	801019e <UART_SetConfig+0x8b2>
 80100b8:	a201      	add	r2, pc, #4	@ (adr r2, 80100c0 <UART_SetConfig+0x7d4>)
 80100ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100be:	bf00      	nop
 80100c0:	08010143 	.word	0x08010143
 80100c4:	0801019f 	.word	0x0801019f
 80100c8:	0801014b 	.word	0x0801014b
 80100cc:	0801019f 	.word	0x0801019f
 80100d0:	0801019f 	.word	0x0801019f
 80100d4:	0801019f 	.word	0x0801019f
 80100d8:	0801015b 	.word	0x0801015b
 80100dc:	0801019f 	.word	0x0801019f
 80100e0:	0801019f 	.word	0x0801019f
 80100e4:	0801019f 	.word	0x0801019f
 80100e8:	0801019f 	.word	0x0801019f
 80100ec:	0801019f 	.word	0x0801019f
 80100f0:	0801019f 	.word	0x0801019f
 80100f4:	0801019f 	.word	0x0801019f
 80100f8:	0801016b 	.word	0x0801016b
 80100fc:	0801019f 	.word	0x0801019f
 8010100:	0801019f 	.word	0x0801019f
 8010104:	0801019f 	.word	0x0801019f
 8010108:	0801019f 	.word	0x0801019f
 801010c:	0801019f 	.word	0x0801019f
 8010110:	0801019f 	.word	0x0801019f
 8010114:	0801019f 	.word	0x0801019f
 8010118:	0801019f 	.word	0x0801019f
 801011c:	0801019f 	.word	0x0801019f
 8010120:	0801019f 	.word	0x0801019f
 8010124:	0801019f 	.word	0x0801019f
 8010128:	0801019f 	.word	0x0801019f
 801012c:	0801019f 	.word	0x0801019f
 8010130:	0801019f 	.word	0x0801019f
 8010134:	0801019f 	.word	0x0801019f
 8010138:	08010191 	.word	0x08010191
 801013c:	2b40      	cmp	r3, #64	@ 0x40
 801013e:	d02a      	beq.n	8010196 <UART_SetConfig+0x8aa>
 8010140:	e02d      	b.n	801019e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010142:	f7fb fd79 	bl	800bc38 <HAL_RCCEx_GetD3PCLK1Freq>
 8010146:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010148:	e02f      	b.n	80101aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801014a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801014e:	4618      	mov	r0, r3
 8010150:	f7fb fd88 	bl	800bc64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010156:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010158:	e027      	b.n	80101aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801015a:	f107 0318 	add.w	r3, r7, #24
 801015e:	4618      	mov	r0, r3
 8010160:	f7fb fed4 	bl	800bf0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010164:	69fb      	ldr	r3, [r7, #28]
 8010166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010168:	e01f      	b.n	80101aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801016a:	4b21      	ldr	r3, [pc, #132]	@ (80101f0 <UART_SetConfig+0x904>)
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	f003 0320 	and.w	r3, r3, #32
 8010172:	2b00      	cmp	r3, #0
 8010174:	d009      	beq.n	801018a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010176:	4b1e      	ldr	r3, [pc, #120]	@ (80101f0 <UART_SetConfig+0x904>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	08db      	lsrs	r3, r3, #3
 801017c:	f003 0303 	and.w	r3, r3, #3
 8010180:	4a1d      	ldr	r2, [pc, #116]	@ (80101f8 <UART_SetConfig+0x90c>)
 8010182:	fa22 f303 	lsr.w	r3, r2, r3
 8010186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010188:	e00f      	b.n	80101aa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801018a:	4b1b      	ldr	r3, [pc, #108]	@ (80101f8 <UART_SetConfig+0x90c>)
 801018c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801018e:	e00c      	b.n	80101aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010190:	4b1a      	ldr	r3, [pc, #104]	@ (80101fc <UART_SetConfig+0x910>)
 8010192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010194:	e009      	b.n	80101aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010196:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801019a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801019c:	e005      	b.n	80101aa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801019e:	2300      	movs	r3, #0
 80101a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80101a2:	2301      	movs	r3, #1
 80101a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80101a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80101aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	f000 81ee 	beq.w	801058e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80101b2:	697b      	ldr	r3, [r7, #20]
 80101b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101b6:	4a12      	ldr	r2, [pc, #72]	@ (8010200 <UART_SetConfig+0x914>)
 80101b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80101bc:	461a      	mov	r2, r3
 80101be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80101c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80101c4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80101c6:	697b      	ldr	r3, [r7, #20]
 80101c8:	685a      	ldr	r2, [r3, #4]
 80101ca:	4613      	mov	r3, r2
 80101cc:	005b      	lsls	r3, r3, #1
 80101ce:	4413      	add	r3, r2
 80101d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80101d2:	429a      	cmp	r2, r3
 80101d4:	d305      	bcc.n	80101e2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80101d6:	697b      	ldr	r3, [r7, #20]
 80101d8:	685b      	ldr	r3, [r3, #4]
 80101da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80101dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80101de:	429a      	cmp	r2, r3
 80101e0:	d910      	bls.n	8010204 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80101e2:	2301      	movs	r3, #1
 80101e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80101e8:	e1d1      	b.n	801058e <UART_SetConfig+0xca2>
 80101ea:	bf00      	nop
 80101ec:	40011c00 	.word	0x40011c00
 80101f0:	58024400 	.word	0x58024400
 80101f4:	58000c00 	.word	0x58000c00
 80101f8:	03d09000 	.word	0x03d09000
 80101fc:	003d0900 	.word	0x003d0900
 8010200:	08018ffc 	.word	0x08018ffc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010204:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010206:	2200      	movs	r2, #0
 8010208:	60bb      	str	r3, [r7, #8]
 801020a:	60fa      	str	r2, [r7, #12]
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010210:	4ac0      	ldr	r2, [pc, #768]	@ (8010514 <UART_SetConfig+0xc28>)
 8010212:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010216:	b29b      	uxth	r3, r3
 8010218:	2200      	movs	r2, #0
 801021a:	603b      	str	r3, [r7, #0]
 801021c:	607a      	str	r2, [r7, #4]
 801021e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010222:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010226:	f7f0 facf 	bl	80007c8 <__aeabi_uldivmod>
 801022a:	4602      	mov	r2, r0
 801022c:	460b      	mov	r3, r1
 801022e:	4610      	mov	r0, r2
 8010230:	4619      	mov	r1, r3
 8010232:	f04f 0200 	mov.w	r2, #0
 8010236:	f04f 0300 	mov.w	r3, #0
 801023a:	020b      	lsls	r3, r1, #8
 801023c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010240:	0202      	lsls	r2, r0, #8
 8010242:	6979      	ldr	r1, [r7, #20]
 8010244:	6849      	ldr	r1, [r1, #4]
 8010246:	0849      	lsrs	r1, r1, #1
 8010248:	2000      	movs	r0, #0
 801024a:	460c      	mov	r4, r1
 801024c:	4605      	mov	r5, r0
 801024e:	eb12 0804 	adds.w	r8, r2, r4
 8010252:	eb43 0905 	adc.w	r9, r3, r5
 8010256:	697b      	ldr	r3, [r7, #20]
 8010258:	685b      	ldr	r3, [r3, #4]
 801025a:	2200      	movs	r2, #0
 801025c:	469a      	mov	sl, r3
 801025e:	4693      	mov	fp, r2
 8010260:	4652      	mov	r2, sl
 8010262:	465b      	mov	r3, fp
 8010264:	4640      	mov	r0, r8
 8010266:	4649      	mov	r1, r9
 8010268:	f7f0 faae 	bl	80007c8 <__aeabi_uldivmod>
 801026c:	4602      	mov	r2, r0
 801026e:	460b      	mov	r3, r1
 8010270:	4613      	mov	r3, r2
 8010272:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010276:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801027a:	d308      	bcc.n	801028e <UART_SetConfig+0x9a2>
 801027c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801027e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010282:	d204      	bcs.n	801028e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8010284:	697b      	ldr	r3, [r7, #20]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801028a:	60da      	str	r2, [r3, #12]
 801028c:	e17f      	b.n	801058e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 801028e:	2301      	movs	r3, #1
 8010290:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010294:	e17b      	b.n	801058e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010296:	697b      	ldr	r3, [r7, #20]
 8010298:	69db      	ldr	r3, [r3, #28]
 801029a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801029e:	f040 80bd 	bne.w	801041c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80102a2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80102a6:	2b20      	cmp	r3, #32
 80102a8:	dc48      	bgt.n	801033c <UART_SetConfig+0xa50>
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	db7b      	blt.n	80103a6 <UART_SetConfig+0xaba>
 80102ae:	2b20      	cmp	r3, #32
 80102b0:	d879      	bhi.n	80103a6 <UART_SetConfig+0xaba>
 80102b2:	a201      	add	r2, pc, #4	@ (adr r2, 80102b8 <UART_SetConfig+0x9cc>)
 80102b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102b8:	08010343 	.word	0x08010343
 80102bc:	0801034b 	.word	0x0801034b
 80102c0:	080103a7 	.word	0x080103a7
 80102c4:	080103a7 	.word	0x080103a7
 80102c8:	08010353 	.word	0x08010353
 80102cc:	080103a7 	.word	0x080103a7
 80102d0:	080103a7 	.word	0x080103a7
 80102d4:	080103a7 	.word	0x080103a7
 80102d8:	08010363 	.word	0x08010363
 80102dc:	080103a7 	.word	0x080103a7
 80102e0:	080103a7 	.word	0x080103a7
 80102e4:	080103a7 	.word	0x080103a7
 80102e8:	080103a7 	.word	0x080103a7
 80102ec:	080103a7 	.word	0x080103a7
 80102f0:	080103a7 	.word	0x080103a7
 80102f4:	080103a7 	.word	0x080103a7
 80102f8:	08010373 	.word	0x08010373
 80102fc:	080103a7 	.word	0x080103a7
 8010300:	080103a7 	.word	0x080103a7
 8010304:	080103a7 	.word	0x080103a7
 8010308:	080103a7 	.word	0x080103a7
 801030c:	080103a7 	.word	0x080103a7
 8010310:	080103a7 	.word	0x080103a7
 8010314:	080103a7 	.word	0x080103a7
 8010318:	080103a7 	.word	0x080103a7
 801031c:	080103a7 	.word	0x080103a7
 8010320:	080103a7 	.word	0x080103a7
 8010324:	080103a7 	.word	0x080103a7
 8010328:	080103a7 	.word	0x080103a7
 801032c:	080103a7 	.word	0x080103a7
 8010330:	080103a7 	.word	0x080103a7
 8010334:	080103a7 	.word	0x080103a7
 8010338:	08010399 	.word	0x08010399
 801033c:	2b40      	cmp	r3, #64	@ 0x40
 801033e:	d02e      	beq.n	801039e <UART_SetConfig+0xab2>
 8010340:	e031      	b.n	80103a6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010342:	f7fa fa4d 	bl	800a7e0 <HAL_RCC_GetPCLK1Freq>
 8010346:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010348:	e033      	b.n	80103b2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801034a:	f7fa fa5f 	bl	800a80c <HAL_RCC_GetPCLK2Freq>
 801034e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010350:	e02f      	b.n	80103b2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010352:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010356:	4618      	mov	r0, r3
 8010358:	f7fb fc84 	bl	800bc64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801035c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801035e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010360:	e027      	b.n	80103b2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010362:	f107 0318 	add.w	r3, r7, #24
 8010366:	4618      	mov	r0, r3
 8010368:	f7fb fdd0 	bl	800bf0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801036c:	69fb      	ldr	r3, [r7, #28]
 801036e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010370:	e01f      	b.n	80103b2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010372:	4b69      	ldr	r3, [pc, #420]	@ (8010518 <UART_SetConfig+0xc2c>)
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	f003 0320 	and.w	r3, r3, #32
 801037a:	2b00      	cmp	r3, #0
 801037c:	d009      	beq.n	8010392 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801037e:	4b66      	ldr	r3, [pc, #408]	@ (8010518 <UART_SetConfig+0xc2c>)
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	08db      	lsrs	r3, r3, #3
 8010384:	f003 0303 	and.w	r3, r3, #3
 8010388:	4a64      	ldr	r2, [pc, #400]	@ (801051c <UART_SetConfig+0xc30>)
 801038a:	fa22 f303 	lsr.w	r3, r2, r3
 801038e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010390:	e00f      	b.n	80103b2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8010392:	4b62      	ldr	r3, [pc, #392]	@ (801051c <UART_SetConfig+0xc30>)
 8010394:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010396:	e00c      	b.n	80103b2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010398:	4b61      	ldr	r3, [pc, #388]	@ (8010520 <UART_SetConfig+0xc34>)
 801039a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801039c:	e009      	b.n	80103b2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801039e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80103a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80103a4:	e005      	b.n	80103b2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80103a6:	2300      	movs	r3, #0
 80103a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80103aa:	2301      	movs	r3, #1
 80103ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80103b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80103b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	f000 80ea 	beq.w	801058e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80103ba:	697b      	ldr	r3, [r7, #20]
 80103bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103be:	4a55      	ldr	r2, [pc, #340]	@ (8010514 <UART_SetConfig+0xc28>)
 80103c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80103c4:	461a      	mov	r2, r3
 80103c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80103c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80103cc:	005a      	lsls	r2, r3, #1
 80103ce:	697b      	ldr	r3, [r7, #20]
 80103d0:	685b      	ldr	r3, [r3, #4]
 80103d2:	085b      	lsrs	r3, r3, #1
 80103d4:	441a      	add	r2, r3
 80103d6:	697b      	ldr	r3, [r7, #20]
 80103d8:	685b      	ldr	r3, [r3, #4]
 80103da:	fbb2 f3f3 	udiv	r3, r2, r3
 80103de:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80103e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103e2:	2b0f      	cmp	r3, #15
 80103e4:	d916      	bls.n	8010414 <UART_SetConfig+0xb28>
 80103e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80103ec:	d212      	bcs.n	8010414 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80103ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103f0:	b29b      	uxth	r3, r3
 80103f2:	f023 030f 	bic.w	r3, r3, #15
 80103f6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80103f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103fa:	085b      	lsrs	r3, r3, #1
 80103fc:	b29b      	uxth	r3, r3
 80103fe:	f003 0307 	and.w	r3, r3, #7
 8010402:	b29a      	uxth	r2, r3
 8010404:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010406:	4313      	orrs	r3, r2
 8010408:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 801040a:	697b      	ldr	r3, [r7, #20]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010410:	60da      	str	r2, [r3, #12]
 8010412:	e0bc      	b.n	801058e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8010414:	2301      	movs	r3, #1
 8010416:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801041a:	e0b8      	b.n	801058e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 801041c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010420:	2b20      	cmp	r3, #32
 8010422:	dc4b      	bgt.n	80104bc <UART_SetConfig+0xbd0>
 8010424:	2b00      	cmp	r3, #0
 8010426:	f2c0 8087 	blt.w	8010538 <UART_SetConfig+0xc4c>
 801042a:	2b20      	cmp	r3, #32
 801042c:	f200 8084 	bhi.w	8010538 <UART_SetConfig+0xc4c>
 8010430:	a201      	add	r2, pc, #4	@ (adr r2, 8010438 <UART_SetConfig+0xb4c>)
 8010432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010436:	bf00      	nop
 8010438:	080104c3 	.word	0x080104c3
 801043c:	080104cb 	.word	0x080104cb
 8010440:	08010539 	.word	0x08010539
 8010444:	08010539 	.word	0x08010539
 8010448:	080104d3 	.word	0x080104d3
 801044c:	08010539 	.word	0x08010539
 8010450:	08010539 	.word	0x08010539
 8010454:	08010539 	.word	0x08010539
 8010458:	080104e3 	.word	0x080104e3
 801045c:	08010539 	.word	0x08010539
 8010460:	08010539 	.word	0x08010539
 8010464:	08010539 	.word	0x08010539
 8010468:	08010539 	.word	0x08010539
 801046c:	08010539 	.word	0x08010539
 8010470:	08010539 	.word	0x08010539
 8010474:	08010539 	.word	0x08010539
 8010478:	080104f3 	.word	0x080104f3
 801047c:	08010539 	.word	0x08010539
 8010480:	08010539 	.word	0x08010539
 8010484:	08010539 	.word	0x08010539
 8010488:	08010539 	.word	0x08010539
 801048c:	08010539 	.word	0x08010539
 8010490:	08010539 	.word	0x08010539
 8010494:	08010539 	.word	0x08010539
 8010498:	08010539 	.word	0x08010539
 801049c:	08010539 	.word	0x08010539
 80104a0:	08010539 	.word	0x08010539
 80104a4:	08010539 	.word	0x08010539
 80104a8:	08010539 	.word	0x08010539
 80104ac:	08010539 	.word	0x08010539
 80104b0:	08010539 	.word	0x08010539
 80104b4:	08010539 	.word	0x08010539
 80104b8:	0801052b 	.word	0x0801052b
 80104bc:	2b40      	cmp	r3, #64	@ 0x40
 80104be:	d037      	beq.n	8010530 <UART_SetConfig+0xc44>
 80104c0:	e03a      	b.n	8010538 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80104c2:	f7fa f98d 	bl	800a7e0 <HAL_RCC_GetPCLK1Freq>
 80104c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80104c8:	e03c      	b.n	8010544 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80104ca:	f7fa f99f 	bl	800a80c <HAL_RCC_GetPCLK2Freq>
 80104ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80104d0:	e038      	b.n	8010544 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80104d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80104d6:	4618      	mov	r0, r3
 80104d8:	f7fb fbc4 	bl	800bc64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80104dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80104e0:	e030      	b.n	8010544 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80104e2:	f107 0318 	add.w	r3, r7, #24
 80104e6:	4618      	mov	r0, r3
 80104e8:	f7fb fd10 	bl	800bf0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80104ec:	69fb      	ldr	r3, [r7, #28]
 80104ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80104f0:	e028      	b.n	8010544 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80104f2:	4b09      	ldr	r3, [pc, #36]	@ (8010518 <UART_SetConfig+0xc2c>)
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	f003 0320 	and.w	r3, r3, #32
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d012      	beq.n	8010524 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80104fe:	4b06      	ldr	r3, [pc, #24]	@ (8010518 <UART_SetConfig+0xc2c>)
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	08db      	lsrs	r3, r3, #3
 8010504:	f003 0303 	and.w	r3, r3, #3
 8010508:	4a04      	ldr	r2, [pc, #16]	@ (801051c <UART_SetConfig+0xc30>)
 801050a:	fa22 f303 	lsr.w	r3, r2, r3
 801050e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010510:	e018      	b.n	8010544 <UART_SetConfig+0xc58>
 8010512:	bf00      	nop
 8010514:	08018ffc 	.word	0x08018ffc
 8010518:	58024400 	.word	0x58024400
 801051c:	03d09000 	.word	0x03d09000
 8010520:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8010524:	4b24      	ldr	r3, [pc, #144]	@ (80105b8 <UART_SetConfig+0xccc>)
 8010526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010528:	e00c      	b.n	8010544 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801052a:	4b24      	ldr	r3, [pc, #144]	@ (80105bc <UART_SetConfig+0xcd0>)
 801052c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801052e:	e009      	b.n	8010544 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010530:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010534:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010536:	e005      	b.n	8010544 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8010538:	2300      	movs	r3, #0
 801053a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801053c:	2301      	movs	r3, #1
 801053e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010542:	bf00      	nop
    }

    if (pclk != 0U)
 8010544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010546:	2b00      	cmp	r3, #0
 8010548:	d021      	beq.n	801058e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801054a:	697b      	ldr	r3, [r7, #20]
 801054c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801054e:	4a1c      	ldr	r2, [pc, #112]	@ (80105c0 <UART_SetConfig+0xcd4>)
 8010550:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010554:	461a      	mov	r2, r3
 8010556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010558:	fbb3 f2f2 	udiv	r2, r3, r2
 801055c:	697b      	ldr	r3, [r7, #20]
 801055e:	685b      	ldr	r3, [r3, #4]
 8010560:	085b      	lsrs	r3, r3, #1
 8010562:	441a      	add	r2, r3
 8010564:	697b      	ldr	r3, [r7, #20]
 8010566:	685b      	ldr	r3, [r3, #4]
 8010568:	fbb2 f3f3 	udiv	r3, r2, r3
 801056c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801056e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010570:	2b0f      	cmp	r3, #15
 8010572:	d909      	bls.n	8010588 <UART_SetConfig+0xc9c>
 8010574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010576:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801057a:	d205      	bcs.n	8010588 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801057c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801057e:	b29a      	uxth	r2, r3
 8010580:	697b      	ldr	r3, [r7, #20]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	60da      	str	r2, [r3, #12]
 8010586:	e002      	b.n	801058e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8010588:	2301      	movs	r3, #1
 801058a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801058e:	697b      	ldr	r3, [r7, #20]
 8010590:	2201      	movs	r2, #1
 8010592:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010596:	697b      	ldr	r3, [r7, #20]
 8010598:	2201      	movs	r2, #1
 801059a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801059e:	697b      	ldr	r3, [r7, #20]
 80105a0:	2200      	movs	r2, #0
 80105a2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80105a4:	697b      	ldr	r3, [r7, #20]
 80105a6:	2200      	movs	r2, #0
 80105a8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80105aa:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80105ae:	4618      	mov	r0, r3
 80105b0:	3748      	adds	r7, #72	@ 0x48
 80105b2:	46bd      	mov	sp, r7
 80105b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80105b8:	03d09000 	.word	0x03d09000
 80105bc:	003d0900 	.word	0x003d0900
 80105c0:	08018ffc 	.word	0x08018ffc

080105c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80105c4:	b480      	push	{r7}
 80105c6:	b083      	sub	sp, #12
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105d0:	f003 0308 	and.w	r3, r3, #8
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d00a      	beq.n	80105ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	685b      	ldr	r3, [r3, #4]
 80105de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	430a      	orrs	r2, r1
 80105ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105f2:	f003 0301 	and.w	r3, r3, #1
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d00a      	beq.n	8010610 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	685b      	ldr	r3, [r3, #4]
 8010600:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	430a      	orrs	r2, r1
 801060e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010614:	f003 0302 	and.w	r3, r3, #2
 8010618:	2b00      	cmp	r3, #0
 801061a:	d00a      	beq.n	8010632 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	685b      	ldr	r3, [r3, #4]
 8010622:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	430a      	orrs	r2, r1
 8010630:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010636:	f003 0304 	and.w	r3, r3, #4
 801063a:	2b00      	cmp	r3, #0
 801063c:	d00a      	beq.n	8010654 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	685b      	ldr	r3, [r3, #4]
 8010644:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	430a      	orrs	r2, r1
 8010652:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010658:	f003 0310 	and.w	r3, r3, #16
 801065c:	2b00      	cmp	r3, #0
 801065e:	d00a      	beq.n	8010676 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	689b      	ldr	r3, [r3, #8]
 8010666:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	430a      	orrs	r2, r1
 8010674:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801067a:	f003 0320 	and.w	r3, r3, #32
 801067e:	2b00      	cmp	r3, #0
 8010680:	d00a      	beq.n	8010698 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	689b      	ldr	r3, [r3, #8]
 8010688:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	430a      	orrs	r2, r1
 8010696:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801069c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d01a      	beq.n	80106da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	685b      	ldr	r3, [r3, #4]
 80106aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	430a      	orrs	r2, r1
 80106b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80106be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80106c2:	d10a      	bne.n	80106da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	685b      	ldr	r3, [r3, #4]
 80106ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	430a      	orrs	r2, r1
 80106d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d00a      	beq.n	80106fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	685b      	ldr	r3, [r3, #4]
 80106ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	430a      	orrs	r2, r1
 80106fa:	605a      	str	r2, [r3, #4]
  }
}
 80106fc:	bf00      	nop
 80106fe:	370c      	adds	r7, #12
 8010700:	46bd      	mov	sp, r7
 8010702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010706:	4770      	bx	lr

08010708 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b098      	sub	sp, #96	@ 0x60
 801070c:	af02      	add	r7, sp, #8
 801070e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	2200      	movs	r2, #0
 8010714:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010718:	f7f5 f9c2 	bl	8005aa0 <HAL_GetTick>
 801071c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	f003 0308 	and.w	r3, r3, #8
 8010728:	2b08      	cmp	r3, #8
 801072a:	d12f      	bne.n	801078c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801072c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010730:	9300      	str	r3, [sp, #0]
 8010732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010734:	2200      	movs	r2, #0
 8010736:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801073a:	6878      	ldr	r0, [r7, #4]
 801073c:	f000 f88e 	bl	801085c <UART_WaitOnFlagUntilTimeout>
 8010740:	4603      	mov	r3, r0
 8010742:	2b00      	cmp	r3, #0
 8010744:	d022      	beq.n	801078c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801074c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801074e:	e853 3f00 	ldrex	r3, [r3]
 8010752:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010756:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801075a:	653b      	str	r3, [r7, #80]	@ 0x50
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	461a      	mov	r2, r3
 8010762:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010764:	647b      	str	r3, [r7, #68]	@ 0x44
 8010766:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010768:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801076a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801076c:	e841 2300 	strex	r3, r2, [r1]
 8010770:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010774:	2b00      	cmp	r3, #0
 8010776:	d1e6      	bne.n	8010746 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	2220      	movs	r2, #32
 801077c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	2200      	movs	r2, #0
 8010784:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010788:	2303      	movs	r3, #3
 801078a:	e063      	b.n	8010854 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	f003 0304 	and.w	r3, r3, #4
 8010796:	2b04      	cmp	r3, #4
 8010798:	d149      	bne.n	801082e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801079a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801079e:	9300      	str	r3, [sp, #0]
 80107a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80107a2:	2200      	movs	r2, #0
 80107a4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80107a8:	6878      	ldr	r0, [r7, #4]
 80107aa:	f000 f857 	bl	801085c <UART_WaitOnFlagUntilTimeout>
 80107ae:	4603      	mov	r3, r0
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d03c      	beq.n	801082e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107bc:	e853 3f00 	ldrex	r3, [r3]
 80107c0:	623b      	str	r3, [r7, #32]
   return(result);
 80107c2:	6a3b      	ldr	r3, [r7, #32]
 80107c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80107c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	461a      	mov	r2, r3
 80107d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80107d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80107d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80107d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80107da:	e841 2300 	strex	r3, r2, [r1]
 80107de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80107e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d1e6      	bne.n	80107b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	3308      	adds	r3, #8
 80107ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107ee:	693b      	ldr	r3, [r7, #16]
 80107f0:	e853 3f00 	ldrex	r3, [r3]
 80107f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	f023 0301 	bic.w	r3, r3, #1
 80107fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	3308      	adds	r3, #8
 8010804:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010806:	61fa      	str	r2, [r7, #28]
 8010808:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801080a:	69b9      	ldr	r1, [r7, #24]
 801080c:	69fa      	ldr	r2, [r7, #28]
 801080e:	e841 2300 	strex	r3, r2, [r1]
 8010812:	617b      	str	r3, [r7, #20]
   return(result);
 8010814:	697b      	ldr	r3, [r7, #20]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d1e5      	bne.n	80107e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	2220      	movs	r2, #32
 801081e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	2200      	movs	r2, #0
 8010826:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801082a:	2303      	movs	r3, #3
 801082c:	e012      	b.n	8010854 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	2220      	movs	r2, #32
 8010832:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	2220      	movs	r2, #32
 801083a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	2200      	movs	r2, #0
 8010842:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	2200      	movs	r2, #0
 8010848:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	2200      	movs	r2, #0
 801084e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010852:	2300      	movs	r3, #0
}
 8010854:	4618      	mov	r0, r3
 8010856:	3758      	adds	r7, #88	@ 0x58
 8010858:	46bd      	mov	sp, r7
 801085a:	bd80      	pop	{r7, pc}

0801085c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b084      	sub	sp, #16
 8010860:	af00      	add	r7, sp, #0
 8010862:	60f8      	str	r0, [r7, #12]
 8010864:	60b9      	str	r1, [r7, #8]
 8010866:	603b      	str	r3, [r7, #0]
 8010868:	4613      	mov	r3, r2
 801086a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801086c:	e04f      	b.n	801090e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801086e:	69bb      	ldr	r3, [r7, #24]
 8010870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010874:	d04b      	beq.n	801090e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010876:	f7f5 f913 	bl	8005aa0 <HAL_GetTick>
 801087a:	4602      	mov	r2, r0
 801087c:	683b      	ldr	r3, [r7, #0]
 801087e:	1ad3      	subs	r3, r2, r3
 8010880:	69ba      	ldr	r2, [r7, #24]
 8010882:	429a      	cmp	r2, r3
 8010884:	d302      	bcc.n	801088c <UART_WaitOnFlagUntilTimeout+0x30>
 8010886:	69bb      	ldr	r3, [r7, #24]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d101      	bne.n	8010890 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801088c:	2303      	movs	r3, #3
 801088e:	e04e      	b.n	801092e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	f003 0304 	and.w	r3, r3, #4
 801089a:	2b00      	cmp	r3, #0
 801089c:	d037      	beq.n	801090e <UART_WaitOnFlagUntilTimeout+0xb2>
 801089e:	68bb      	ldr	r3, [r7, #8]
 80108a0:	2b80      	cmp	r3, #128	@ 0x80
 80108a2:	d034      	beq.n	801090e <UART_WaitOnFlagUntilTimeout+0xb2>
 80108a4:	68bb      	ldr	r3, [r7, #8]
 80108a6:	2b40      	cmp	r3, #64	@ 0x40
 80108a8:	d031      	beq.n	801090e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	69db      	ldr	r3, [r3, #28]
 80108b0:	f003 0308 	and.w	r3, r3, #8
 80108b4:	2b08      	cmp	r3, #8
 80108b6:	d110      	bne.n	80108da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	2208      	movs	r2, #8
 80108be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80108c0:	68f8      	ldr	r0, [r7, #12]
 80108c2:	f000 fa43 	bl	8010d4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	2208      	movs	r2, #8
 80108ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	2200      	movs	r2, #0
 80108d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80108d6:	2301      	movs	r3, #1
 80108d8:	e029      	b.n	801092e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	69db      	ldr	r3, [r3, #28]
 80108e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80108e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80108e8:	d111      	bne.n	801090e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80108f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80108f4:	68f8      	ldr	r0, [r7, #12]
 80108f6:	f000 fa29 	bl	8010d4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	2220      	movs	r2, #32
 80108fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	2200      	movs	r2, #0
 8010906:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801090a:	2303      	movs	r3, #3
 801090c:	e00f      	b.n	801092e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	69da      	ldr	r2, [r3, #28]
 8010914:	68bb      	ldr	r3, [r7, #8]
 8010916:	4013      	ands	r3, r2
 8010918:	68ba      	ldr	r2, [r7, #8]
 801091a:	429a      	cmp	r2, r3
 801091c:	bf0c      	ite	eq
 801091e:	2301      	moveq	r3, #1
 8010920:	2300      	movne	r3, #0
 8010922:	b2db      	uxtb	r3, r3
 8010924:	461a      	mov	r2, r3
 8010926:	79fb      	ldrb	r3, [r7, #7]
 8010928:	429a      	cmp	r2, r3
 801092a:	d0a0      	beq.n	801086e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801092c:	2300      	movs	r3, #0
}
 801092e:	4618      	mov	r0, r3
 8010930:	3710      	adds	r7, #16
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}
	...

08010938 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010938:	b480      	push	{r7}
 801093a:	b0a3      	sub	sp, #140	@ 0x8c
 801093c:	af00      	add	r7, sp, #0
 801093e:	60f8      	str	r0, [r7, #12]
 8010940:	60b9      	str	r1, [r7, #8]
 8010942:	4613      	mov	r3, r2
 8010944:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	68ba      	ldr	r2, [r7, #8]
 801094a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	88fa      	ldrh	r2, [r7, #6]
 8010950:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	88fa      	ldrh	r2, [r7, #6]
 8010958:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	2200      	movs	r2, #0
 8010960:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	689b      	ldr	r3, [r3, #8]
 8010966:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801096a:	d10e      	bne.n	801098a <UART_Start_Receive_IT+0x52>
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	691b      	ldr	r3, [r3, #16]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d105      	bne.n	8010980 <UART_Start_Receive_IT+0x48>
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	f240 12ff 	movw	r2, #511	@ 0x1ff
 801097a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801097e:	e02d      	b.n	80109dc <UART_Start_Receive_IT+0xa4>
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	22ff      	movs	r2, #255	@ 0xff
 8010984:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010988:	e028      	b.n	80109dc <UART_Start_Receive_IT+0xa4>
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	689b      	ldr	r3, [r3, #8]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d10d      	bne.n	80109ae <UART_Start_Receive_IT+0x76>
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	691b      	ldr	r3, [r3, #16]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d104      	bne.n	80109a4 <UART_Start_Receive_IT+0x6c>
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	22ff      	movs	r2, #255	@ 0xff
 801099e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80109a2:	e01b      	b.n	80109dc <UART_Start_Receive_IT+0xa4>
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	227f      	movs	r2, #127	@ 0x7f
 80109a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80109ac:	e016      	b.n	80109dc <UART_Start_Receive_IT+0xa4>
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	689b      	ldr	r3, [r3, #8]
 80109b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80109b6:	d10d      	bne.n	80109d4 <UART_Start_Receive_IT+0x9c>
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	691b      	ldr	r3, [r3, #16]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d104      	bne.n	80109ca <UART_Start_Receive_IT+0x92>
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	227f      	movs	r2, #127	@ 0x7f
 80109c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80109c8:	e008      	b.n	80109dc <UART_Start_Receive_IT+0xa4>
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	223f      	movs	r2, #63	@ 0x3f
 80109ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80109d2:	e003      	b.n	80109dc <UART_Start_Receive_IT+0xa4>
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	2200      	movs	r2, #0
 80109d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	2200      	movs	r2, #0
 80109e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	2222      	movs	r2, #34	@ 0x22
 80109e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	3308      	adds	r3, #8
 80109f2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80109f6:	e853 3f00 	ldrex	r3, [r3]
 80109fa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80109fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80109fe:	f043 0301 	orr.w	r3, r3, #1
 8010a02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	3308      	adds	r3, #8
 8010a0c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8010a10:	673a      	str	r2, [r7, #112]	@ 0x70
 8010a12:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a14:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8010a16:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8010a18:	e841 2300 	strex	r3, r2, [r1]
 8010a1c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8010a1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d1e3      	bne.n	80109ec <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010a28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010a2c:	d14f      	bne.n	8010ace <UART_Start_Receive_IT+0x196>
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8010a34:	88fa      	ldrh	r2, [r7, #6]
 8010a36:	429a      	cmp	r2, r3
 8010a38:	d349      	bcc.n	8010ace <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	689b      	ldr	r3, [r3, #8]
 8010a3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010a42:	d107      	bne.n	8010a54 <UART_Start_Receive_IT+0x11c>
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	691b      	ldr	r3, [r3, #16]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d103      	bne.n	8010a54 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	4a47      	ldr	r2, [pc, #284]	@ (8010b6c <UART_Start_Receive_IT+0x234>)
 8010a50:	675a      	str	r2, [r3, #116]	@ 0x74
 8010a52:	e002      	b.n	8010a5a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	4a46      	ldr	r2, [pc, #280]	@ (8010b70 <UART_Start_Receive_IT+0x238>)
 8010a58:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	691b      	ldr	r3, [r3, #16]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d01a      	beq.n	8010a98 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010a6a:	e853 3f00 	ldrex	r3, [r3]
 8010a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8010a70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010a76:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	461a      	mov	r2, r3
 8010a80:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010a84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010a86:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a88:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010a8a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010a8c:	e841 2300 	strex	r3, r2, [r1]
 8010a90:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8010a92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d1e4      	bne.n	8010a62 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	3308      	adds	r3, #8
 8010a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010aa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010aa2:	e853 3f00 	ldrex	r3, [r3]
 8010aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010aaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010aae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	3308      	adds	r3, #8
 8010ab6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8010ab8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8010aba:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010abc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010abe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010ac0:	e841 2300 	strex	r3, r2, [r1]
 8010ac4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8010ac6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d1e5      	bne.n	8010a98 <UART_Start_Receive_IT+0x160>
 8010acc:	e046      	b.n	8010b5c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	689b      	ldr	r3, [r3, #8]
 8010ad2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010ad6:	d107      	bne.n	8010ae8 <UART_Start_Receive_IT+0x1b0>
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	691b      	ldr	r3, [r3, #16]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d103      	bne.n	8010ae8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	4a24      	ldr	r2, [pc, #144]	@ (8010b74 <UART_Start_Receive_IT+0x23c>)
 8010ae4:	675a      	str	r2, [r3, #116]	@ 0x74
 8010ae6:	e002      	b.n	8010aee <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	4a23      	ldr	r2, [pc, #140]	@ (8010b78 <UART_Start_Receive_IT+0x240>)
 8010aec:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	691b      	ldr	r3, [r3, #16]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d019      	beq.n	8010b2a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010afe:	e853 3f00 	ldrex	r3, [r3]
 8010b02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b06:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8010b0a:	677b      	str	r3, [r7, #116]	@ 0x74
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	461a      	mov	r2, r3
 8010b12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010b14:	637b      	str	r3, [r7, #52]	@ 0x34
 8010b16:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b18:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010b1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010b1c:	e841 2300 	strex	r3, r2, [r1]
 8010b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8010b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d1e6      	bne.n	8010af6 <UART_Start_Receive_IT+0x1be>
 8010b28:	e018      	b.n	8010b5c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b30:	697b      	ldr	r3, [r7, #20]
 8010b32:	e853 3f00 	ldrex	r3, [r3]
 8010b36:	613b      	str	r3, [r7, #16]
   return(result);
 8010b38:	693b      	ldr	r3, [r7, #16]
 8010b3a:	f043 0320 	orr.w	r3, r3, #32
 8010b3e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	461a      	mov	r2, r3
 8010b46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010b48:	623b      	str	r3, [r7, #32]
 8010b4a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b4c:	69f9      	ldr	r1, [r7, #28]
 8010b4e:	6a3a      	ldr	r2, [r7, #32]
 8010b50:	e841 2300 	strex	r3, r2, [r1]
 8010b54:	61bb      	str	r3, [r7, #24]
   return(result);
 8010b56:	69bb      	ldr	r3, [r7, #24]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d1e6      	bne.n	8010b2a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8010b5c:	2300      	movs	r3, #0
}
 8010b5e:	4618      	mov	r0, r3
 8010b60:	378c      	adds	r7, #140	@ 0x8c
 8010b62:	46bd      	mov	sp, r7
 8010b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b68:	4770      	bx	lr
 8010b6a:	bf00      	nop
 8010b6c:	08011ba1 	.word	0x08011ba1
 8010b70:	08011841 	.word	0x08011841
 8010b74:	08011689 	.word	0x08011689
 8010b78:	080114d1 	.word	0x080114d1

08010b7c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b096      	sub	sp, #88	@ 0x58
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	60f8      	str	r0, [r7, #12]
 8010b84:	60b9      	str	r1, [r7, #8]
 8010b86:	4613      	mov	r3, r2
 8010b88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	68ba      	ldr	r2, [r7, #8]
 8010b8e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	88fa      	ldrh	r2, [r7, #6]
 8010b94:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	2200      	movs	r2, #0
 8010b9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	2222      	movs	r2, #34	@ 0x22
 8010ba4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d02d      	beq.n	8010c0e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010bb8:	4a40      	ldr	r2, [pc, #256]	@ (8010cbc <UART_Start_Receive_DMA+0x140>)
 8010bba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010bc2:	4a3f      	ldr	r2, [pc, #252]	@ (8010cc0 <UART_Start_Receive_DMA+0x144>)
 8010bc4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010bcc:	4a3d      	ldr	r2, [pc, #244]	@ (8010cc4 <UART_Start_Receive_DMA+0x148>)
 8010bce:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010bd6:	2200      	movs	r2, #0
 8010bd8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	3324      	adds	r3, #36	@ 0x24
 8010be6:	4619      	mov	r1, r3
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010bec:	461a      	mov	r2, r3
 8010bee:	88fb      	ldrh	r3, [r7, #6]
 8010bf0:	f7f5 fc6c 	bl	80064cc <HAL_DMA_Start_IT>
 8010bf4:	4603      	mov	r3, r0
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d009      	beq.n	8010c0e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	2210      	movs	r2, #16
 8010bfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	2220      	movs	r2, #32
 8010c06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8010c0a:	2301      	movs	r3, #1
 8010c0c:	e051      	b.n	8010cb2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	691b      	ldr	r3, [r3, #16]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d018      	beq.n	8010c48 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c1e:	e853 3f00 	ldrex	r3, [r3]
 8010c22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010c2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	461a      	mov	r2, r3
 8010c32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010c34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010c36:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c38:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010c3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010c3c:	e841 2300 	strex	r3, r2, [r1]
 8010c40:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8010c42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d1e6      	bne.n	8010c16 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	3308      	adds	r3, #8
 8010c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c52:	e853 3f00 	ldrex	r3, [r3]
 8010c56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c5a:	f043 0301 	orr.w	r3, r3, #1
 8010c5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	3308      	adds	r3, #8
 8010c66:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010c68:	637a      	str	r2, [r7, #52]	@ 0x34
 8010c6a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c6c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010c6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010c70:	e841 2300 	strex	r3, r2, [r1]
 8010c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8010c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d1e5      	bne.n	8010c48 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	3308      	adds	r3, #8
 8010c82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c84:	697b      	ldr	r3, [r7, #20]
 8010c86:	e853 3f00 	ldrex	r3, [r3]
 8010c8a:	613b      	str	r3, [r7, #16]
   return(result);
 8010c8c:	693b      	ldr	r3, [r7, #16]
 8010c8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	3308      	adds	r3, #8
 8010c9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010c9c:	623a      	str	r2, [r7, #32]
 8010c9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ca0:	69f9      	ldr	r1, [r7, #28]
 8010ca2:	6a3a      	ldr	r2, [r7, #32]
 8010ca4:	e841 2300 	strex	r3, r2, [r1]
 8010ca8:	61bb      	str	r3, [r7, #24]
   return(result);
 8010caa:	69bb      	ldr	r3, [r7, #24]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d1e5      	bne.n	8010c7c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8010cb0:	2300      	movs	r3, #0
}
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	3758      	adds	r7, #88	@ 0x58
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}
 8010cba:	bf00      	nop
 8010cbc:	08010e19 	.word	0x08010e19
 8010cc0:	08010f41 	.word	0x08010f41
 8010cc4:	08010f7f 	.word	0x08010f7f

08010cc8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010cc8:	b480      	push	{r7}
 8010cca:	b08f      	sub	sp, #60	@ 0x3c
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cd6:	6a3b      	ldr	r3, [r7, #32]
 8010cd8:	e853 3f00 	ldrex	r3, [r3]
 8010cdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8010cde:	69fb      	ldr	r3, [r7, #28]
 8010ce0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010ce4:	637b      	str	r3, [r7, #52]	@ 0x34
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	461a      	mov	r2, r3
 8010cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010cf0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cf2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010cf4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010cf6:	e841 2300 	strex	r3, r2, [r1]
 8010cfa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d1e6      	bne.n	8010cd0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	3308      	adds	r3, #8
 8010d08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	e853 3f00 	ldrex	r3, [r3]
 8010d10:	60bb      	str	r3, [r7, #8]
   return(result);
 8010d12:	68bb      	ldr	r3, [r7, #8]
 8010d14:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8010d18:	633b      	str	r3, [r7, #48]	@ 0x30
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	3308      	adds	r3, #8
 8010d20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010d22:	61ba      	str	r2, [r7, #24]
 8010d24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d26:	6979      	ldr	r1, [r7, #20]
 8010d28:	69ba      	ldr	r2, [r7, #24]
 8010d2a:	e841 2300 	strex	r3, r2, [r1]
 8010d2e:	613b      	str	r3, [r7, #16]
   return(result);
 8010d30:	693b      	ldr	r3, [r7, #16]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d1e5      	bne.n	8010d02 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	2220      	movs	r2, #32
 8010d3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8010d3e:	bf00      	nop
 8010d40:	373c      	adds	r7, #60	@ 0x3c
 8010d42:	46bd      	mov	sp, r7
 8010d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d48:	4770      	bx	lr
	...

08010d4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010d4c:	b480      	push	{r7}
 8010d4e:	b095      	sub	sp, #84	@ 0x54
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d5c:	e853 3f00 	ldrex	r3, [r3]
 8010d60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010d68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	461a      	mov	r2, r3
 8010d70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d72:	643b      	str	r3, [r7, #64]	@ 0x40
 8010d74:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010d78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010d7a:	e841 2300 	strex	r3, r2, [r1]
 8010d7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d1e6      	bne.n	8010d54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	3308      	adds	r3, #8
 8010d8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d8e:	6a3b      	ldr	r3, [r7, #32]
 8010d90:	e853 3f00 	ldrex	r3, [r3]
 8010d94:	61fb      	str	r3, [r7, #28]
   return(result);
 8010d96:	69fa      	ldr	r2, [r7, #28]
 8010d98:	4b1e      	ldr	r3, [pc, #120]	@ (8010e14 <UART_EndRxTransfer+0xc8>)
 8010d9a:	4013      	ands	r3, r2
 8010d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	3308      	adds	r3, #8
 8010da4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010da6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010da8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010daa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010dac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010dae:	e841 2300 	strex	r3, r2, [r1]
 8010db2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d1e5      	bne.n	8010d86 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010dbe:	2b01      	cmp	r3, #1
 8010dc0:	d118      	bne.n	8010df4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	e853 3f00 	ldrex	r3, [r3]
 8010dce:	60bb      	str	r3, [r7, #8]
   return(result);
 8010dd0:	68bb      	ldr	r3, [r7, #8]
 8010dd2:	f023 0310 	bic.w	r3, r3, #16
 8010dd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	461a      	mov	r2, r3
 8010dde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010de0:	61bb      	str	r3, [r7, #24]
 8010de2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010de4:	6979      	ldr	r1, [r7, #20]
 8010de6:	69ba      	ldr	r2, [r7, #24]
 8010de8:	e841 2300 	strex	r3, r2, [r1]
 8010dec:	613b      	str	r3, [r7, #16]
   return(result);
 8010dee:	693b      	ldr	r3, [r7, #16]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d1e6      	bne.n	8010dc2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	2220      	movs	r2, #32
 8010df8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	2200      	movs	r2, #0
 8010e00:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	2200      	movs	r2, #0
 8010e06:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010e08:	bf00      	nop
 8010e0a:	3754      	adds	r7, #84	@ 0x54
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e12:	4770      	bx	lr
 8010e14:	effffffe 	.word	0xeffffffe

08010e18 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b09c      	sub	sp, #112	@ 0x70
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010e24:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	69db      	ldr	r3, [r3, #28]
 8010e2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010e2e:	d071      	beq.n	8010f14 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8010e30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e32:	2200      	movs	r2, #0
 8010e34:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010e38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e40:	e853 3f00 	ldrex	r3, [r3]
 8010e44:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010e46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010e48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010e4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010e4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	461a      	mov	r2, r3
 8010e54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010e56:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010e58:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010e5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010e5e:	e841 2300 	strex	r3, r2, [r1]
 8010e62:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010e64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d1e6      	bne.n	8010e38 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010e6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	3308      	adds	r3, #8
 8010e70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e74:	e853 3f00 	ldrex	r3, [r3]
 8010e78:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e7c:	f023 0301 	bic.w	r3, r3, #1
 8010e80:	667b      	str	r3, [r7, #100]	@ 0x64
 8010e82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	3308      	adds	r3, #8
 8010e88:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010e8a:	647a      	str	r2, [r7, #68]	@ 0x44
 8010e8c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010e90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010e92:	e841 2300 	strex	r3, r2, [r1]
 8010e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010e98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d1e5      	bne.n	8010e6a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010e9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	3308      	adds	r3, #8
 8010ea4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ea8:	e853 3f00 	ldrex	r3, [r3]
 8010eac:	623b      	str	r3, [r7, #32]
   return(result);
 8010eae:	6a3b      	ldr	r3, [r7, #32]
 8010eb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010eb4:	663b      	str	r3, [r7, #96]	@ 0x60
 8010eb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	3308      	adds	r3, #8
 8010ebc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010ebe:	633a      	str	r2, [r7, #48]	@ 0x30
 8010ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ec2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010ec4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010ec6:	e841 2300 	strex	r3, r2, [r1]
 8010eca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d1e5      	bne.n	8010e9e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010ed2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010ed4:	2220      	movs	r2, #32
 8010ed6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010eda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010edc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ede:	2b01      	cmp	r3, #1
 8010ee0:	d118      	bne.n	8010f14 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ee2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ee8:	693b      	ldr	r3, [r7, #16]
 8010eea:	e853 3f00 	ldrex	r3, [r3]
 8010eee:	60fb      	str	r3, [r7, #12]
   return(result);
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	f023 0310 	bic.w	r3, r3, #16
 8010ef6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010ef8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	461a      	mov	r2, r3
 8010efe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010f00:	61fb      	str	r3, [r7, #28]
 8010f02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f04:	69b9      	ldr	r1, [r7, #24]
 8010f06:	69fa      	ldr	r2, [r7, #28]
 8010f08:	e841 2300 	strex	r3, r2, [r1]
 8010f0c:	617b      	str	r3, [r7, #20]
   return(result);
 8010f0e:	697b      	ldr	r3, [r7, #20]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d1e6      	bne.n	8010ee2 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010f14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f16:	2200      	movs	r2, #0
 8010f18:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010f1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f1e:	2b01      	cmp	r3, #1
 8010f20:	d107      	bne.n	8010f32 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010f22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010f28:	4619      	mov	r1, r3
 8010f2a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010f2c:	f7fe fcd2 	bl	800f8d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010f30:	e002      	b.n	8010f38 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8010f32:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010f34:	f7f1 f9c0 	bl	80022b8 <HAL_UART_RxCpltCallback>
}
 8010f38:	bf00      	nop
 8010f3a:	3770      	adds	r7, #112	@ 0x70
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	bd80      	pop	{r7, pc}

08010f40 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b084      	sub	sp, #16
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f4c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	2201      	movs	r2, #1
 8010f52:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f58:	2b01      	cmp	r3, #1
 8010f5a:	d109      	bne.n	8010f70 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010f62:	085b      	lsrs	r3, r3, #1
 8010f64:	b29b      	uxth	r3, r3
 8010f66:	4619      	mov	r1, r3
 8010f68:	68f8      	ldr	r0, [r7, #12]
 8010f6a:	f7fe fcb3 	bl	800f8d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010f6e:	e002      	b.n	8010f76 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8010f70:	68f8      	ldr	r0, [r7, #12]
 8010f72:	f7fe fc91 	bl	800f898 <HAL_UART_RxHalfCpltCallback>
}
 8010f76:	bf00      	nop
 8010f78:	3710      	adds	r7, #16
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	bd80      	pop	{r7, pc}

08010f7e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010f7e:	b580      	push	{r7, lr}
 8010f80:	b086      	sub	sp, #24
 8010f82:	af00      	add	r7, sp, #0
 8010f84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f8a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010f8c:	697b      	ldr	r3, [r7, #20]
 8010f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010f92:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010f94:	697b      	ldr	r3, [r7, #20]
 8010f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010f9a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010f9c:	697b      	ldr	r3, [r7, #20]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	689b      	ldr	r3, [r3, #8]
 8010fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010fa6:	2b80      	cmp	r3, #128	@ 0x80
 8010fa8:	d109      	bne.n	8010fbe <UART_DMAError+0x40>
 8010faa:	693b      	ldr	r3, [r7, #16]
 8010fac:	2b21      	cmp	r3, #33	@ 0x21
 8010fae:	d106      	bne.n	8010fbe <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010fb0:	697b      	ldr	r3, [r7, #20]
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8010fb8:	6978      	ldr	r0, [r7, #20]
 8010fba:	f7ff fe85 	bl	8010cc8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010fbe:	697b      	ldr	r3, [r7, #20]
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	689b      	ldr	r3, [r3, #8]
 8010fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010fc8:	2b40      	cmp	r3, #64	@ 0x40
 8010fca:	d109      	bne.n	8010fe0 <UART_DMAError+0x62>
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	2b22      	cmp	r3, #34	@ 0x22
 8010fd0:	d106      	bne.n	8010fe0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010fd2:	697b      	ldr	r3, [r7, #20]
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8010fda:	6978      	ldr	r0, [r7, #20]
 8010fdc:	f7ff feb6 	bl	8010d4c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010fe0:	697b      	ldr	r3, [r7, #20]
 8010fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010fe6:	f043 0210 	orr.w	r2, r3, #16
 8010fea:	697b      	ldr	r3, [r7, #20]
 8010fec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010ff0:	6978      	ldr	r0, [r7, #20]
 8010ff2:	f7fe fc5b 	bl	800f8ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010ff6:	bf00      	nop
 8010ff8:	3718      	adds	r7, #24
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	bd80      	pop	{r7, pc}

08010ffe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010ffe:	b580      	push	{r7, lr}
 8011000:	b084      	sub	sp, #16
 8011002:	af00      	add	r7, sp, #0
 8011004:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801100a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	2200      	movs	r2, #0
 8011010:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	2200      	movs	r2, #0
 8011018:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801101c:	68f8      	ldr	r0, [r7, #12]
 801101e:	f7fe fc45 	bl	800f8ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011022:	bf00      	nop
 8011024:	3710      	adds	r7, #16
 8011026:	46bd      	mov	sp, r7
 8011028:	bd80      	pop	{r7, pc}

0801102a <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 801102a:	b580      	push	{r7, lr}
 801102c:	b084      	sub	sp, #16
 801102e:	af00      	add	r7, sp, #0
 8011030:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011036:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801103c:	2200      	movs	r2, #0
 801103e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011046:	2b00      	cmp	r3, #0
 8011048:	d005      	beq.n	8011056 <UART_DMATxAbortCallback+0x2c>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011052:	2b00      	cmp	r3, #0
 8011054:	d12b      	bne.n	80110ae <UART_DMATxAbortCallback+0x84>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	2200      	movs	r2, #0
 801105a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	2200      	movs	r2, #0
 8011062:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	2200      	movs	r2, #0
 801106a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	220f      	movs	r2, #15
 8011074:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801107a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801107e:	d107      	bne.n	8011090 <UART_DMATxAbortCallback+0x66>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	699a      	ldr	r2, [r3, #24]
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	f042 0210 	orr.w	r2, r2, #16
 801108e:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	2220      	movs	r2, #32
 8011094:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	2220      	movs	r2, #32
 801109c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	2200      	movs	r2, #0
 80110a4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80110a6:	68f8      	ldr	r0, [r7, #12]
 80110a8:	f7fe fc0a 	bl	800f8c0 <HAL_UART_AbortCpltCallback>
 80110ac:	e000      	b.n	80110b0 <UART_DMATxAbortCallback+0x86>
      return;
 80110ae:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80110b0:	3710      	adds	r7, #16
 80110b2:	46bd      	mov	sp, r7
 80110b4:	bd80      	pop	{r7, pc}

080110b6 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80110b6:	b580      	push	{r7, lr}
 80110b8:	b084      	sub	sp, #16
 80110ba:	af00      	add	r7, sp, #0
 80110bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80110c2:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80110ca:	2200      	movs	r2, #0
 80110cc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d004      	beq.n	80110e0 <UART_DMARxAbortCallback+0x2a>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80110da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d126      	bne.n	801112e <UART_DMARxAbortCallback+0x78>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	2200      	movs	r2, #0
 80110e4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	2200      	movs	r2, #0
 80110ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	2200      	movs	r2, #0
 80110f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	220f      	movs	r2, #15
 80110fe:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	699a      	ldr	r2, [r3, #24]
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	f042 0208 	orr.w	r2, r2, #8
 801110e:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	2220      	movs	r2, #32
 8011114:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	2220      	movs	r2, #32
 801111c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	2200      	movs	r2, #0
 8011124:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8011126:	68f8      	ldr	r0, [r7, #12]
 8011128:	f7fe fbca 	bl	800f8c0 <HAL_UART_AbortCpltCallback>
 801112c:	e000      	b.n	8011130 <UART_DMARxAbortCallback+0x7a>
      return;
 801112e:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011130:	3710      	adds	r7, #16
 8011132:	46bd      	mov	sp, r7
 8011134:	bd80      	pop	{r7, pc}

08011136 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8011136:	b480      	push	{r7}
 8011138:	b08f      	sub	sp, #60	@ 0x3c
 801113a:	af00      	add	r7, sp, #0
 801113c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011144:	2b21      	cmp	r3, #33	@ 0x21
 8011146:	d14c      	bne.n	80111e2 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801114e:	b29b      	uxth	r3, r3
 8011150:	2b00      	cmp	r3, #0
 8011152:	d132      	bne.n	80111ba <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801115a:	6a3b      	ldr	r3, [r7, #32]
 801115c:	e853 3f00 	ldrex	r3, [r3]
 8011160:	61fb      	str	r3, [r7, #28]
   return(result);
 8011162:	69fb      	ldr	r3, [r7, #28]
 8011164:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011168:	637b      	str	r3, [r7, #52]	@ 0x34
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	461a      	mov	r2, r3
 8011170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011172:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011174:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011176:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011178:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801117a:	e841 2300 	strex	r3, r2, [r1]
 801117e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011182:	2b00      	cmp	r3, #0
 8011184:	d1e6      	bne.n	8011154 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	e853 3f00 	ldrex	r3, [r3]
 8011192:	60bb      	str	r3, [r7, #8]
   return(result);
 8011194:	68bb      	ldr	r3, [r7, #8]
 8011196:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801119a:	633b      	str	r3, [r7, #48]	@ 0x30
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	461a      	mov	r2, r3
 80111a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111a4:	61bb      	str	r3, [r7, #24]
 80111a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111a8:	6979      	ldr	r1, [r7, #20]
 80111aa:	69ba      	ldr	r2, [r7, #24]
 80111ac:	e841 2300 	strex	r3, r2, [r1]
 80111b0:	613b      	str	r3, [r7, #16]
   return(result);
 80111b2:	693b      	ldr	r3, [r7, #16]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d1e6      	bne.n	8011186 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80111b8:	e013      	b.n	80111e2 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80111be:	781a      	ldrb	r2, [r3, #0]
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80111ca:	1c5a      	adds	r2, r3, #1
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80111d6:	b29b      	uxth	r3, r3
 80111d8:	3b01      	subs	r3, #1
 80111da:	b29a      	uxth	r2, r3
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80111e2:	bf00      	nop
 80111e4:	373c      	adds	r7, #60	@ 0x3c
 80111e6:	46bd      	mov	sp, r7
 80111e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ec:	4770      	bx	lr

080111ee <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80111ee:	b480      	push	{r7}
 80111f0:	b091      	sub	sp, #68	@ 0x44
 80111f2:	af00      	add	r7, sp, #0
 80111f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80111fc:	2b21      	cmp	r3, #33	@ 0x21
 80111fe:	d151      	bne.n	80112a4 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011206:	b29b      	uxth	r3, r3
 8011208:	2b00      	cmp	r3, #0
 801120a:	d132      	bne.n	8011272 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011214:	e853 3f00 	ldrex	r3, [r3]
 8011218:	623b      	str	r3, [r7, #32]
   return(result);
 801121a:	6a3b      	ldr	r3, [r7, #32]
 801121c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011220:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	461a      	mov	r2, r3
 8011228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801122a:	633b      	str	r3, [r7, #48]	@ 0x30
 801122c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801122e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011230:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011232:	e841 2300 	strex	r3, r2, [r1]
 8011236:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801123a:	2b00      	cmp	r3, #0
 801123c:	d1e6      	bne.n	801120c <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011244:	693b      	ldr	r3, [r7, #16]
 8011246:	e853 3f00 	ldrex	r3, [r3]
 801124a:	60fb      	str	r3, [r7, #12]
   return(result);
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011252:	637b      	str	r3, [r7, #52]	@ 0x34
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	461a      	mov	r2, r3
 801125a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801125c:	61fb      	str	r3, [r7, #28]
 801125e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011260:	69b9      	ldr	r1, [r7, #24]
 8011262:	69fa      	ldr	r2, [r7, #28]
 8011264:	e841 2300 	strex	r3, r2, [r1]
 8011268:	617b      	str	r3, [r7, #20]
   return(result);
 801126a:	697b      	ldr	r3, [r7, #20]
 801126c:	2b00      	cmp	r3, #0
 801126e:	d1e6      	bne.n	801123e <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8011270:	e018      	b.n	80112a4 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011276:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8011278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801127a:	881b      	ldrh	r3, [r3, #0]
 801127c:	461a      	mov	r2, r3
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011286:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801128c:	1c9a      	adds	r2, r3, #2
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011298:	b29b      	uxth	r3, r3
 801129a:	3b01      	subs	r3, #1
 801129c:	b29a      	uxth	r2, r3
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80112a4:	bf00      	nop
 80112a6:	3744      	adds	r7, #68	@ 0x44
 80112a8:	46bd      	mov	sp, r7
 80112aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ae:	4770      	bx	lr

080112b0 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80112b0:	b480      	push	{r7}
 80112b2:	b091      	sub	sp, #68	@ 0x44
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80112be:	2b21      	cmp	r3, #33	@ 0x21
 80112c0:	d160      	bne.n	8011384 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80112c8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80112ca:	e057      	b.n	801137c <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80112d2:	b29b      	uxth	r3, r3
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d133      	bne.n	8011340 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	3308      	adds	r3, #8
 80112de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112e2:	e853 3f00 	ldrex	r3, [r3]
 80112e6:	623b      	str	r3, [r7, #32]
   return(result);
 80112e8:	6a3b      	ldr	r3, [r7, #32]
 80112ea:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80112ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	3308      	adds	r3, #8
 80112f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80112f8:	633a      	str	r2, [r7, #48]	@ 0x30
 80112fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80112fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011300:	e841 2300 	strex	r3, r2, [r1]
 8011304:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011308:	2b00      	cmp	r3, #0
 801130a:	d1e5      	bne.n	80112d8 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011312:	693b      	ldr	r3, [r7, #16]
 8011314:	e853 3f00 	ldrex	r3, [r3]
 8011318:	60fb      	str	r3, [r7, #12]
   return(result);
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011320:	637b      	str	r3, [r7, #52]	@ 0x34
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	461a      	mov	r2, r3
 8011328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801132a:	61fb      	str	r3, [r7, #28]
 801132c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801132e:	69b9      	ldr	r1, [r7, #24]
 8011330:	69fa      	ldr	r2, [r7, #28]
 8011332:	e841 2300 	strex	r3, r2, [r1]
 8011336:	617b      	str	r3, [r7, #20]
   return(result);
 8011338:	697b      	ldr	r3, [r7, #20]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d1e6      	bne.n	801130c <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 801133e:	e021      	b.n	8011384 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	69db      	ldr	r3, [r3, #28]
 8011346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801134a:	2b00      	cmp	r3, #0
 801134c:	d013      	beq.n	8011376 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011352:	781a      	ldrb	r2, [r3, #0]
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801135e:	1c5a      	adds	r2, r3, #1
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801136a:	b29b      	uxth	r3, r3
 801136c:	3b01      	subs	r3, #1
 801136e:	b29a      	uxth	r2, r3
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8011376:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011378:	3b01      	subs	r3, #1
 801137a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801137c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801137e:	2b00      	cmp	r3, #0
 8011380:	d1a4      	bne.n	80112cc <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8011382:	e7ff      	b.n	8011384 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8011384:	bf00      	nop
 8011386:	3744      	adds	r7, #68	@ 0x44
 8011388:	46bd      	mov	sp, r7
 801138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138e:	4770      	bx	lr

08011390 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011390:	b480      	push	{r7}
 8011392:	b091      	sub	sp, #68	@ 0x44
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801139e:	2b21      	cmp	r3, #33	@ 0x21
 80113a0:	d165      	bne.n	801146e <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80113a8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80113aa:	e05c      	b.n	8011466 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80113b2:	b29b      	uxth	r3, r3
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d133      	bne.n	8011420 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	3308      	adds	r3, #8
 80113be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113c0:	6a3b      	ldr	r3, [r7, #32]
 80113c2:	e853 3f00 	ldrex	r3, [r3]
 80113c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80113c8:	69fb      	ldr	r3, [r7, #28]
 80113ca:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80113ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	3308      	adds	r3, #8
 80113d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80113d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80113da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80113de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80113e0:	e841 2300 	strex	r3, r2, [r1]
 80113e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80113e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d1e5      	bne.n	80113b8 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	e853 3f00 	ldrex	r3, [r3]
 80113f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80113fa:	68bb      	ldr	r3, [r7, #8]
 80113fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011400:	633b      	str	r3, [r7, #48]	@ 0x30
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	461a      	mov	r2, r3
 8011408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801140a:	61bb      	str	r3, [r7, #24]
 801140c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801140e:	6979      	ldr	r1, [r7, #20]
 8011410:	69ba      	ldr	r2, [r7, #24]
 8011412:	e841 2300 	strex	r3, r2, [r1]
 8011416:	613b      	str	r3, [r7, #16]
   return(result);
 8011418:	693b      	ldr	r3, [r7, #16]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d1e6      	bne.n	80113ec <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 801141e:	e026      	b.n	801146e <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	69db      	ldr	r3, [r3, #28]
 8011426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801142a:	2b00      	cmp	r3, #0
 801142c:	d018      	beq.n	8011460 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011432:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8011434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011436:	881b      	ldrh	r3, [r3, #0]
 8011438:	461a      	mov	r2, r3
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011442:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011448:	1c9a      	adds	r2, r3, #2
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011454:	b29b      	uxth	r3, r3
 8011456:	3b01      	subs	r3, #1
 8011458:	b29a      	uxth	r2, r3
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8011460:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011462:	3b01      	subs	r3, #1
 8011464:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8011466:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011468:	2b00      	cmp	r3, #0
 801146a:	d19f      	bne.n	80113ac <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 801146c:	e7ff      	b.n	801146e <UART_TxISR_16BIT_FIFOEN+0xde>
 801146e:	bf00      	nop
 8011470:	3744      	adds	r7, #68	@ 0x44
 8011472:	46bd      	mov	sp, r7
 8011474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011478:	4770      	bx	lr

0801147a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801147a:	b580      	push	{r7, lr}
 801147c:	b088      	sub	sp, #32
 801147e:	af00      	add	r7, sp, #0
 8011480:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	e853 3f00 	ldrex	r3, [r3]
 801148e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011490:	68bb      	ldr	r3, [r7, #8]
 8011492:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011496:	61fb      	str	r3, [r7, #28]
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	461a      	mov	r2, r3
 801149e:	69fb      	ldr	r3, [r7, #28]
 80114a0:	61bb      	str	r3, [r7, #24]
 80114a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114a4:	6979      	ldr	r1, [r7, #20]
 80114a6:	69ba      	ldr	r2, [r7, #24]
 80114a8:	e841 2300 	strex	r3, r2, [r1]
 80114ac:	613b      	str	r3, [r7, #16]
   return(result);
 80114ae:	693b      	ldr	r3, [r7, #16]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d1e6      	bne.n	8011482 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	2220      	movs	r2, #32
 80114b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	2200      	movs	r2, #0
 80114c0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80114c2:	6878      	ldr	r0, [r7, #4]
 80114c4:	f7fe f9de 	bl	800f884 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80114c8:	bf00      	nop
 80114ca:	3720      	adds	r7, #32
 80114cc:	46bd      	mov	sp, r7
 80114ce:	bd80      	pop	{r7, pc}

080114d0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b09c      	sub	sp, #112	@ 0x70
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80114de:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80114e8:	2b22      	cmp	r3, #34	@ 0x22
 80114ea:	f040 80be 	bne.w	801166a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114f4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80114f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80114fc:	b2d9      	uxtb	r1, r3
 80114fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8011502:	b2da      	uxtb	r2, r3
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011508:	400a      	ands	r2, r1
 801150a:	b2d2      	uxtb	r2, r2
 801150c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011512:	1c5a      	adds	r2, r3, #1
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801151e:	b29b      	uxth	r3, r3
 8011520:	3b01      	subs	r3, #1
 8011522:	b29a      	uxth	r2, r3
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011530:	b29b      	uxth	r3, r3
 8011532:	2b00      	cmp	r3, #0
 8011534:	f040 80a1 	bne.w	801167a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801153e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011540:	e853 3f00 	ldrex	r3, [r3]
 8011544:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011546:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011548:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801154c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	461a      	mov	r2, r3
 8011554:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011556:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011558:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801155a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801155c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801155e:	e841 2300 	strex	r3, r2, [r1]
 8011562:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011564:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011566:	2b00      	cmp	r3, #0
 8011568:	d1e6      	bne.n	8011538 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	3308      	adds	r3, #8
 8011570:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011574:	e853 3f00 	ldrex	r3, [r3]
 8011578:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801157a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801157c:	f023 0301 	bic.w	r3, r3, #1
 8011580:	667b      	str	r3, [r7, #100]	@ 0x64
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	3308      	adds	r3, #8
 8011588:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801158a:	647a      	str	r2, [r7, #68]	@ 0x44
 801158c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801158e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011590:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011592:	e841 2300 	strex	r3, r2, [r1]
 8011596:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801159a:	2b00      	cmp	r3, #0
 801159c:	d1e5      	bne.n	801156a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	2220      	movs	r2, #32
 80115a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	2200      	movs	r2, #0
 80115aa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	2200      	movs	r2, #0
 80115b0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	4a33      	ldr	r2, [pc, #204]	@ (8011684 <UART_RxISR_8BIT+0x1b4>)
 80115b8:	4293      	cmp	r3, r2
 80115ba:	d01f      	beq.n	80115fc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	685b      	ldr	r3, [r3, #4]
 80115c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d018      	beq.n	80115fc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115d2:	e853 3f00 	ldrex	r3, [r3]
 80115d6:	623b      	str	r3, [r7, #32]
   return(result);
 80115d8:	6a3b      	ldr	r3, [r7, #32]
 80115da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80115de:	663b      	str	r3, [r7, #96]	@ 0x60
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	461a      	mov	r2, r3
 80115e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80115e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80115ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80115ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80115f0:	e841 2300 	strex	r3, r2, [r1]
 80115f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80115f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d1e6      	bne.n	80115ca <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011600:	2b01      	cmp	r3, #1
 8011602:	d12e      	bne.n	8011662 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	2200      	movs	r2, #0
 8011608:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011610:	693b      	ldr	r3, [r7, #16]
 8011612:	e853 3f00 	ldrex	r3, [r3]
 8011616:	60fb      	str	r3, [r7, #12]
   return(result);
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	f023 0310 	bic.w	r3, r3, #16
 801161e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	461a      	mov	r2, r3
 8011626:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011628:	61fb      	str	r3, [r7, #28]
 801162a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801162c:	69b9      	ldr	r1, [r7, #24]
 801162e:	69fa      	ldr	r2, [r7, #28]
 8011630:	e841 2300 	strex	r3, r2, [r1]
 8011634:	617b      	str	r3, [r7, #20]
   return(result);
 8011636:	697b      	ldr	r3, [r7, #20]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d1e6      	bne.n	801160a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	69db      	ldr	r3, [r3, #28]
 8011642:	f003 0310 	and.w	r3, r3, #16
 8011646:	2b10      	cmp	r3, #16
 8011648:	d103      	bne.n	8011652 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	2210      	movs	r2, #16
 8011650:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011658:	4619      	mov	r1, r3
 801165a:	6878      	ldr	r0, [r7, #4]
 801165c:	f7fe f93a 	bl	800f8d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011660:	e00b      	b.n	801167a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011662:	6878      	ldr	r0, [r7, #4]
 8011664:	f7f0 fe28 	bl	80022b8 <HAL_UART_RxCpltCallback>
}
 8011668:	e007      	b.n	801167a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	699a      	ldr	r2, [r3, #24]
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	f042 0208 	orr.w	r2, r2, #8
 8011678:	619a      	str	r2, [r3, #24]
}
 801167a:	bf00      	nop
 801167c:	3770      	adds	r7, #112	@ 0x70
 801167e:	46bd      	mov	sp, r7
 8011680:	bd80      	pop	{r7, pc}
 8011682:	bf00      	nop
 8011684:	58000c00 	.word	0x58000c00

08011688 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011688:	b580      	push	{r7, lr}
 801168a:	b09c      	sub	sp, #112	@ 0x70
 801168c:	af00      	add	r7, sp, #0
 801168e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011696:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80116a0:	2b22      	cmp	r3, #34	@ 0x22
 80116a2:	f040 80be 	bne.w	8011822 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116ac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80116b4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80116b6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80116ba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80116be:	4013      	ands	r3, r2
 80116c0:	b29a      	uxth	r2, r3
 80116c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80116c4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80116ca:	1c9a      	adds	r2, r3, #2
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80116d6:	b29b      	uxth	r3, r3
 80116d8:	3b01      	subs	r3, #1
 80116da:	b29a      	uxth	r2, r3
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80116e8:	b29b      	uxth	r3, r3
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	f040 80a1 	bne.w	8011832 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80116f8:	e853 3f00 	ldrex	r3, [r3]
 80116fc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80116fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011700:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011704:	667b      	str	r3, [r7, #100]	@ 0x64
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	461a      	mov	r2, r3
 801170c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801170e:	657b      	str	r3, [r7, #84]	@ 0x54
 8011710:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011712:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011714:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011716:	e841 2300 	strex	r3, r2, [r1]
 801171a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801171c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801171e:	2b00      	cmp	r3, #0
 8011720:	d1e6      	bne.n	80116f0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	3308      	adds	r3, #8
 8011728:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801172a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801172c:	e853 3f00 	ldrex	r3, [r3]
 8011730:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011734:	f023 0301 	bic.w	r3, r3, #1
 8011738:	663b      	str	r3, [r7, #96]	@ 0x60
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	3308      	adds	r3, #8
 8011740:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011742:	643a      	str	r2, [r7, #64]	@ 0x40
 8011744:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011746:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011748:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801174a:	e841 2300 	strex	r3, r2, [r1]
 801174e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011752:	2b00      	cmp	r3, #0
 8011754:	d1e5      	bne.n	8011722 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	2220      	movs	r2, #32
 801175a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	2200      	movs	r2, #0
 8011762:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	2200      	movs	r2, #0
 8011768:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	4a33      	ldr	r2, [pc, #204]	@ (801183c <UART_RxISR_16BIT+0x1b4>)
 8011770:	4293      	cmp	r3, r2
 8011772:	d01f      	beq.n	80117b4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	685b      	ldr	r3, [r3, #4]
 801177a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801177e:	2b00      	cmp	r3, #0
 8011780:	d018      	beq.n	80117b4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011788:	6a3b      	ldr	r3, [r7, #32]
 801178a:	e853 3f00 	ldrex	r3, [r3]
 801178e:	61fb      	str	r3, [r7, #28]
   return(result);
 8011790:	69fb      	ldr	r3, [r7, #28]
 8011792:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8011796:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	461a      	mov	r2, r3
 801179e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80117a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80117a2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80117a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80117a8:	e841 2300 	strex	r3, r2, [r1]
 80117ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80117ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d1e6      	bne.n	8011782 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80117b8:	2b01      	cmp	r3, #1
 80117ba:	d12e      	bne.n	801181a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	2200      	movs	r2, #0
 80117c0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	e853 3f00 	ldrex	r3, [r3]
 80117ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80117d0:	68bb      	ldr	r3, [r7, #8]
 80117d2:	f023 0310 	bic.w	r3, r3, #16
 80117d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	461a      	mov	r2, r3
 80117de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80117e0:	61bb      	str	r3, [r7, #24]
 80117e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117e4:	6979      	ldr	r1, [r7, #20]
 80117e6:	69ba      	ldr	r2, [r7, #24]
 80117e8:	e841 2300 	strex	r3, r2, [r1]
 80117ec:	613b      	str	r3, [r7, #16]
   return(result);
 80117ee:	693b      	ldr	r3, [r7, #16]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d1e6      	bne.n	80117c2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	69db      	ldr	r3, [r3, #28]
 80117fa:	f003 0310 	and.w	r3, r3, #16
 80117fe:	2b10      	cmp	r3, #16
 8011800:	d103      	bne.n	801180a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	2210      	movs	r2, #16
 8011808:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011810:	4619      	mov	r1, r3
 8011812:	6878      	ldr	r0, [r7, #4]
 8011814:	f7fe f85e 	bl	800f8d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011818:	e00b      	b.n	8011832 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801181a:	6878      	ldr	r0, [r7, #4]
 801181c:	f7f0 fd4c 	bl	80022b8 <HAL_UART_RxCpltCallback>
}
 8011820:	e007      	b.n	8011832 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	699a      	ldr	r2, [r3, #24]
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	f042 0208 	orr.w	r2, r2, #8
 8011830:	619a      	str	r2, [r3, #24]
}
 8011832:	bf00      	nop
 8011834:	3770      	adds	r7, #112	@ 0x70
 8011836:	46bd      	mov	sp, r7
 8011838:	bd80      	pop	{r7, pc}
 801183a:	bf00      	nop
 801183c:	58000c00 	.word	0x58000c00

08011840 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011840:	b580      	push	{r7, lr}
 8011842:	b0ac      	sub	sp, #176	@ 0xb0
 8011844:	af00      	add	r7, sp, #0
 8011846:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801184e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	69db      	ldr	r3, [r3, #28]
 8011858:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	689b      	ldr	r3, [r3, #8]
 801186c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011876:	2b22      	cmp	r3, #34	@ 0x22
 8011878:	f040 8180 	bne.w	8011b7c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011882:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011886:	e123      	b.n	8011ad0 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801188e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011892:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8011896:	b2d9      	uxtb	r1, r3
 8011898:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 801189c:	b2da      	uxtb	r2, r3
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80118a2:	400a      	ands	r2, r1
 80118a4:	b2d2      	uxtb	r2, r2
 80118a6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80118ac:	1c5a      	adds	r2, r3, #1
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80118b8:	b29b      	uxth	r3, r3
 80118ba:	3b01      	subs	r3, #1
 80118bc:	b29a      	uxth	r2, r3
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	69db      	ldr	r3, [r3, #28]
 80118ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80118ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80118d2:	f003 0307 	and.w	r3, r3, #7
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d053      	beq.n	8011982 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80118da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80118de:	f003 0301 	and.w	r3, r3, #1
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d011      	beq.n	801190a <UART_RxISR_8BIT_FIFOEN+0xca>
 80118e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80118ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d00b      	beq.n	801190a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	2201      	movs	r2, #1
 80118f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011900:	f043 0201 	orr.w	r2, r3, #1
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801190a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801190e:	f003 0302 	and.w	r3, r3, #2
 8011912:	2b00      	cmp	r3, #0
 8011914:	d011      	beq.n	801193a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8011916:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801191a:	f003 0301 	and.w	r3, r3, #1
 801191e:	2b00      	cmp	r3, #0
 8011920:	d00b      	beq.n	801193a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	2202      	movs	r2, #2
 8011928:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011930:	f043 0204 	orr.w	r2, r3, #4
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801193a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801193e:	f003 0304 	and.w	r3, r3, #4
 8011942:	2b00      	cmp	r3, #0
 8011944:	d011      	beq.n	801196a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8011946:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801194a:	f003 0301 	and.w	r3, r3, #1
 801194e:	2b00      	cmp	r3, #0
 8011950:	d00b      	beq.n	801196a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	2204      	movs	r2, #4
 8011958:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011960:	f043 0202 	orr.w	r2, r3, #2
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011970:	2b00      	cmp	r3, #0
 8011972:	d006      	beq.n	8011982 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011974:	6878      	ldr	r0, [r7, #4]
 8011976:	f7fd ff99 	bl	800f8ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	2200      	movs	r2, #0
 801197e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011988:	b29b      	uxth	r3, r3
 801198a:	2b00      	cmp	r3, #0
 801198c:	f040 80a0 	bne.w	8011ad0 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011996:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011998:	e853 3f00 	ldrex	r3, [r3]
 801199c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 801199e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80119a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80119a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	461a      	mov	r2, r3
 80119ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80119b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80119b4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119b6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80119b8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80119ba:	e841 2300 	strex	r3, r2, [r1]
 80119be:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80119c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d1e4      	bne.n	8011990 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	3308      	adds	r3, #8
 80119cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80119d0:	e853 3f00 	ldrex	r3, [r3]
 80119d4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80119d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80119d8:	4b6e      	ldr	r3, [pc, #440]	@ (8011b94 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80119da:	4013      	ands	r3, r2
 80119dc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	3308      	adds	r3, #8
 80119e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80119ea:	66ba      	str	r2, [r7, #104]	@ 0x68
 80119ec:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119ee:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80119f0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80119f2:	e841 2300 	strex	r3, r2, [r1]
 80119f6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80119f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d1e3      	bne.n	80119c6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	2220      	movs	r2, #32
 8011a02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	2200      	movs	r2, #0
 8011a0a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	2200      	movs	r2, #0
 8011a10:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	4a60      	ldr	r2, [pc, #384]	@ (8011b98 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8011a18:	4293      	cmp	r3, r2
 8011a1a:	d021      	beq.n	8011a60 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	685b      	ldr	r3, [r3, #4]
 8011a22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d01a      	beq.n	8011a60 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011a32:	e853 3f00 	ldrex	r3, [r3]
 8011a36:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8011a38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a3a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8011a3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	461a      	mov	r2, r3
 8011a48:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011a4c:	657b      	str	r3, [r7, #84]	@ 0x54
 8011a4e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a50:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011a52:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011a54:	e841 2300 	strex	r3, r2, [r1]
 8011a58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8011a5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d1e4      	bne.n	8011a2a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011a64:	2b01      	cmp	r3, #1
 8011a66:	d130      	bne.n	8011aca <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a76:	e853 3f00 	ldrex	r3, [r3]
 8011a7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a7e:	f023 0310 	bic.w	r3, r3, #16
 8011a82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	461a      	mov	r2, r3
 8011a8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011a90:	643b      	str	r3, [r7, #64]	@ 0x40
 8011a92:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011a96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011a98:	e841 2300 	strex	r3, r2, [r1]
 8011a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d1e4      	bne.n	8011a6e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	69db      	ldr	r3, [r3, #28]
 8011aaa:	f003 0310 	and.w	r3, r3, #16
 8011aae:	2b10      	cmp	r3, #16
 8011ab0:	d103      	bne.n	8011aba <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	2210      	movs	r2, #16
 8011ab8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011ac0:	4619      	mov	r1, r3
 8011ac2:	6878      	ldr	r0, [r7, #4]
 8011ac4:	f7fd ff06 	bl	800f8d4 <HAL_UARTEx_RxEventCallback>
 8011ac8:	e002      	b.n	8011ad0 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8011aca:	6878      	ldr	r0, [r7, #4]
 8011acc:	f7f0 fbf4 	bl	80022b8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011ad0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d006      	beq.n	8011ae6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8011ad8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011adc:	f003 0320 	and.w	r3, r3, #32
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	f47f aed1 	bne.w	8011888 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011aec:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011af0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d049      	beq.n	8011b8c <UART_RxISR_8BIT_FIFOEN+0x34c>
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011afe:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8011b02:	429a      	cmp	r2, r3
 8011b04:	d242      	bcs.n	8011b8c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	3308      	adds	r3, #8
 8011b0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b0e:	6a3b      	ldr	r3, [r7, #32]
 8011b10:	e853 3f00 	ldrex	r3, [r3]
 8011b14:	61fb      	str	r3, [r7, #28]
   return(result);
 8011b16:	69fb      	ldr	r3, [r7, #28]
 8011b18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011b1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	3308      	adds	r3, #8
 8011b26:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8011b2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011b30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011b32:	e841 2300 	strex	r3, r2, [r1]
 8011b36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d1e3      	bne.n	8011b06 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	4a16      	ldr	r2, [pc, #88]	@ (8011b9c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8011b42:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	e853 3f00 	ldrex	r3, [r3]
 8011b50:	60bb      	str	r3, [r7, #8]
   return(result);
 8011b52:	68bb      	ldr	r3, [r7, #8]
 8011b54:	f043 0320 	orr.w	r3, r3, #32
 8011b58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	461a      	mov	r2, r3
 8011b62:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011b66:	61bb      	str	r3, [r7, #24]
 8011b68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b6a:	6979      	ldr	r1, [r7, #20]
 8011b6c:	69ba      	ldr	r2, [r7, #24]
 8011b6e:	e841 2300 	strex	r3, r2, [r1]
 8011b72:	613b      	str	r3, [r7, #16]
   return(result);
 8011b74:	693b      	ldr	r3, [r7, #16]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d1e4      	bne.n	8011b44 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011b7a:	e007      	b.n	8011b8c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	699a      	ldr	r2, [r3, #24]
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	f042 0208 	orr.w	r2, r2, #8
 8011b8a:	619a      	str	r2, [r3, #24]
}
 8011b8c:	bf00      	nop
 8011b8e:	37b0      	adds	r7, #176	@ 0xb0
 8011b90:	46bd      	mov	sp, r7
 8011b92:	bd80      	pop	{r7, pc}
 8011b94:	effffffe 	.word	0xeffffffe
 8011b98:	58000c00 	.word	0x58000c00
 8011b9c:	080114d1 	.word	0x080114d1

08011ba0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	b0ae      	sub	sp, #184	@ 0xb8
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011bae:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	69db      	ldr	r3, [r3, #28]
 8011bb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	689b      	ldr	r3, [r3, #8]
 8011bcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011bd6:	2b22      	cmp	r3, #34	@ 0x22
 8011bd8:	f040 8184 	bne.w	8011ee4 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011be2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011be6:	e127      	b.n	8011e38 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011bee:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011bf6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8011bfa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8011bfe:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8011c02:	4013      	ands	r3, r2
 8011c04:	b29a      	uxth	r2, r3
 8011c06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011c0a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011c10:	1c9a      	adds	r2, r3, #2
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011c1c:	b29b      	uxth	r3, r3
 8011c1e:	3b01      	subs	r3, #1
 8011c20:	b29a      	uxth	r2, r3
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	69db      	ldr	r3, [r3, #28]
 8011c2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011c32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011c36:	f003 0307 	and.w	r3, r3, #7
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d053      	beq.n	8011ce6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011c3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011c42:	f003 0301 	and.w	r3, r3, #1
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d011      	beq.n	8011c6e <UART_RxISR_16BIT_FIFOEN+0xce>
 8011c4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d00b      	beq.n	8011c6e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	2201      	movs	r2, #1
 8011c5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011c64:	f043 0201 	orr.w	r2, r3, #1
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011c6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011c72:	f003 0302 	and.w	r3, r3, #2
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d011      	beq.n	8011c9e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8011c7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011c7e:	f003 0301 	and.w	r3, r3, #1
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d00b      	beq.n	8011c9e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	2202      	movs	r2, #2
 8011c8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011c94:	f043 0204 	orr.w	r2, r3, #4
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011c9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011ca2:	f003 0304 	and.w	r3, r3, #4
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d011      	beq.n	8011cce <UART_RxISR_16BIT_FIFOEN+0x12e>
 8011caa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011cae:	f003 0301 	and.w	r3, r3, #1
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d00b      	beq.n	8011cce <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	2204      	movs	r2, #4
 8011cbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011cc4:	f043 0202 	orr.w	r2, r3, #2
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d006      	beq.n	8011ce6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011cd8:	6878      	ldr	r0, [r7, #4]
 8011cda:	f7fd fde7 	bl	800f8ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	2200      	movs	r2, #0
 8011ce2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011cec:	b29b      	uxth	r3, r3
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	f040 80a2 	bne.w	8011e38 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011cfc:	e853 3f00 	ldrex	r3, [r3]
 8011d00:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8011d02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011d04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011d08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	461a      	mov	r2, r3
 8011d12:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011d16:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011d1a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d1c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8011d1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011d22:	e841 2300 	strex	r3, r2, [r1]
 8011d26:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8011d28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d1e2      	bne.n	8011cf4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	3308      	adds	r3, #8
 8011d34:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011d38:	e853 3f00 	ldrex	r3, [r3]
 8011d3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8011d3e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011d40:	4b6e      	ldr	r3, [pc, #440]	@ (8011efc <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8011d42:	4013      	ands	r3, r2
 8011d44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	3308      	adds	r3, #8
 8011d4e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8011d52:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8011d54:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d56:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8011d58:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011d5a:	e841 2300 	strex	r3, r2, [r1]
 8011d5e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8011d60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d1e3      	bne.n	8011d2e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	2220      	movs	r2, #32
 8011d6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	2200      	movs	r2, #0
 8011d72:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	2200      	movs	r2, #0
 8011d78:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	4a60      	ldr	r2, [pc, #384]	@ (8011f00 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8011d80:	4293      	cmp	r3, r2
 8011d82:	d021      	beq.n	8011dc8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	685b      	ldr	r3, [r3, #4]
 8011d8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d01a      	beq.n	8011dc8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d9a:	e853 3f00 	ldrex	r3, [r3]
 8011d9e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011da0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011da2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8011da6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	461a      	mov	r2, r3
 8011db0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011db4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011db6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011db8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011dba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011dbc:	e841 2300 	strex	r3, r2, [r1]
 8011dc0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011dc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d1e4      	bne.n	8011d92 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011dcc:	2b01      	cmp	r3, #1
 8011dce:	d130      	bne.n	8011e32 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011dde:	e853 3f00 	ldrex	r3, [r3]
 8011de2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011de6:	f023 0310 	bic.w	r3, r3, #16
 8011dea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	461a      	mov	r2, r3
 8011df4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011df8:	647b      	str	r3, [r7, #68]	@ 0x44
 8011dfa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dfc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011dfe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011e00:	e841 2300 	strex	r3, r2, [r1]
 8011e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011e06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d1e4      	bne.n	8011dd6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	69db      	ldr	r3, [r3, #28]
 8011e12:	f003 0310 	and.w	r3, r3, #16
 8011e16:	2b10      	cmp	r3, #16
 8011e18:	d103      	bne.n	8011e22 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	2210      	movs	r2, #16
 8011e20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011e28:	4619      	mov	r1, r3
 8011e2a:	6878      	ldr	r0, [r7, #4]
 8011e2c:	f7fd fd52 	bl	800f8d4 <HAL_UARTEx_RxEventCallback>
 8011e30:	e002      	b.n	8011e38 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8011e32:	6878      	ldr	r0, [r7, #4]
 8011e34:	f7f0 fa40 	bl	80022b8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011e38:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d006      	beq.n	8011e4e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8011e40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011e44:	f003 0320 	and.w	r3, r3, #32
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	f47f aecd 	bne.w	8011be8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011e54:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011e58:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d049      	beq.n	8011ef4 <UART_RxISR_16BIT_FIFOEN+0x354>
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011e66:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8011e6a:	429a      	cmp	r2, r3
 8011e6c:	d242      	bcs.n	8011ef4 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	3308      	adds	r3, #8
 8011e74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e78:	e853 3f00 	ldrex	r3, [r3]
 8011e7c:	623b      	str	r3, [r7, #32]
   return(result);
 8011e7e:	6a3b      	ldr	r3, [r7, #32]
 8011e80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011e84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	3308      	adds	r3, #8
 8011e8e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011e92:	633a      	str	r2, [r7, #48]	@ 0x30
 8011e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011e98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011e9a:	e841 2300 	strex	r3, r2, [r1]
 8011e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d1e3      	bne.n	8011e6e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	4a16      	ldr	r2, [pc, #88]	@ (8011f04 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8011eaa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011eb2:	693b      	ldr	r3, [r7, #16]
 8011eb4:	e853 3f00 	ldrex	r3, [r3]
 8011eb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	f043 0320 	orr.w	r3, r3, #32
 8011ec0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	461a      	mov	r2, r3
 8011eca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011ece:	61fb      	str	r3, [r7, #28]
 8011ed0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ed2:	69b9      	ldr	r1, [r7, #24]
 8011ed4:	69fa      	ldr	r2, [r7, #28]
 8011ed6:	e841 2300 	strex	r3, r2, [r1]
 8011eda:	617b      	str	r3, [r7, #20]
   return(result);
 8011edc:	697b      	ldr	r3, [r7, #20]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d1e4      	bne.n	8011eac <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011ee2:	e007      	b.n	8011ef4 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	699a      	ldr	r2, [r3, #24]
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	f042 0208 	orr.w	r2, r2, #8
 8011ef2:	619a      	str	r2, [r3, #24]
}
 8011ef4:	bf00      	nop
 8011ef6:	37b8      	adds	r7, #184	@ 0xb8
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	bd80      	pop	{r7, pc}
 8011efc:	effffffe 	.word	0xeffffffe
 8011f00:	58000c00 	.word	0x58000c00
 8011f04:	08011689 	.word	0x08011689

08011f08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011f08:	b480      	push	{r7}
 8011f0a:	b083      	sub	sp, #12
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011f10:	bf00      	nop
 8011f12:	370c      	adds	r7, #12
 8011f14:	46bd      	mov	sp, r7
 8011f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f1a:	4770      	bx	lr

08011f1c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011f1c:	b480      	push	{r7}
 8011f1e:	b083      	sub	sp, #12
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011f24:	bf00      	nop
 8011f26:	370c      	adds	r7, #12
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f2e:	4770      	bx	lr

08011f30 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011f30:	b480      	push	{r7}
 8011f32:	b083      	sub	sp, #12
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011f38:	bf00      	nop
 8011f3a:	370c      	adds	r7, #12
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f42:	4770      	bx	lr

08011f44 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011f44:	b480      	push	{r7}
 8011f46:	b085      	sub	sp, #20
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011f52:	2b01      	cmp	r3, #1
 8011f54:	d101      	bne.n	8011f5a <HAL_UARTEx_DisableFifoMode+0x16>
 8011f56:	2302      	movs	r3, #2
 8011f58:	e027      	b.n	8011faa <HAL_UARTEx_DisableFifoMode+0x66>
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	2201      	movs	r2, #1
 8011f5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	2224      	movs	r2, #36	@ 0x24
 8011f66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	681a      	ldr	r2, [r3, #0]
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	f022 0201 	bic.w	r2, r2, #1
 8011f80:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011f88:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	2200      	movs	r2, #0
 8011f8e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	68fa      	ldr	r2, [r7, #12]
 8011f96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	2220      	movs	r2, #32
 8011f9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	2200      	movs	r2, #0
 8011fa4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011fa8:	2300      	movs	r3, #0
}
 8011faa:	4618      	mov	r0, r3
 8011fac:	3714      	adds	r7, #20
 8011fae:	46bd      	mov	sp, r7
 8011fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb4:	4770      	bx	lr

08011fb6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011fb6:	b580      	push	{r7, lr}
 8011fb8:	b084      	sub	sp, #16
 8011fba:	af00      	add	r7, sp, #0
 8011fbc:	6078      	str	r0, [r7, #4]
 8011fbe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011fc6:	2b01      	cmp	r3, #1
 8011fc8:	d101      	bne.n	8011fce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011fca:	2302      	movs	r3, #2
 8011fcc:	e02d      	b.n	801202a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	2201      	movs	r2, #1
 8011fd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	2224      	movs	r2, #36	@ 0x24
 8011fda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	681a      	ldr	r2, [r3, #0]
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	f022 0201 	bic.w	r2, r2, #1
 8011ff4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	689b      	ldr	r3, [r3, #8]
 8011ffc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	683a      	ldr	r2, [r7, #0]
 8012006:	430a      	orrs	r2, r1
 8012008:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801200a:	6878      	ldr	r0, [r7, #4]
 801200c:	f000 f850 	bl	80120b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	68fa      	ldr	r2, [r7, #12]
 8012016:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	2220      	movs	r2, #32
 801201c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	2200      	movs	r2, #0
 8012024:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012028:	2300      	movs	r3, #0
}
 801202a:	4618      	mov	r0, r3
 801202c:	3710      	adds	r7, #16
 801202e:	46bd      	mov	sp, r7
 8012030:	bd80      	pop	{r7, pc}

08012032 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012032:	b580      	push	{r7, lr}
 8012034:	b084      	sub	sp, #16
 8012036:	af00      	add	r7, sp, #0
 8012038:	6078      	str	r0, [r7, #4]
 801203a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012042:	2b01      	cmp	r3, #1
 8012044:	d101      	bne.n	801204a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012046:	2302      	movs	r3, #2
 8012048:	e02d      	b.n	80120a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	2201      	movs	r2, #1
 801204e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	2224      	movs	r2, #36	@ 0x24
 8012056:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	681a      	ldr	r2, [r3, #0]
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	f022 0201 	bic.w	r2, r2, #1
 8012070:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	689b      	ldr	r3, [r3, #8]
 8012078:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	683a      	ldr	r2, [r7, #0]
 8012082:	430a      	orrs	r2, r1
 8012084:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012086:	6878      	ldr	r0, [r7, #4]
 8012088:	f000 f812 	bl	80120b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	68fa      	ldr	r2, [r7, #12]
 8012092:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	2220      	movs	r2, #32
 8012098:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	2200      	movs	r2, #0
 80120a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80120a4:	2300      	movs	r3, #0
}
 80120a6:	4618      	mov	r0, r3
 80120a8:	3710      	adds	r7, #16
 80120aa:	46bd      	mov	sp, r7
 80120ac:	bd80      	pop	{r7, pc}
	...

080120b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80120b0:	b480      	push	{r7}
 80120b2:	b085      	sub	sp, #20
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d108      	bne.n	80120d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	2201      	movs	r2, #1
 80120c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	2201      	movs	r2, #1
 80120cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80120d0:	e031      	b.n	8012136 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80120d2:	2310      	movs	r3, #16
 80120d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80120d6:	2310      	movs	r3, #16
 80120d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	689b      	ldr	r3, [r3, #8]
 80120e0:	0e5b      	lsrs	r3, r3, #25
 80120e2:	b2db      	uxtb	r3, r3
 80120e4:	f003 0307 	and.w	r3, r3, #7
 80120e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	689b      	ldr	r3, [r3, #8]
 80120f0:	0f5b      	lsrs	r3, r3, #29
 80120f2:	b2db      	uxtb	r3, r3
 80120f4:	f003 0307 	and.w	r3, r3, #7
 80120f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80120fa:	7bbb      	ldrb	r3, [r7, #14]
 80120fc:	7b3a      	ldrb	r2, [r7, #12]
 80120fe:	4911      	ldr	r1, [pc, #68]	@ (8012144 <UARTEx_SetNbDataToProcess+0x94>)
 8012100:	5c8a      	ldrb	r2, [r1, r2]
 8012102:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012106:	7b3a      	ldrb	r2, [r7, #12]
 8012108:	490f      	ldr	r1, [pc, #60]	@ (8012148 <UARTEx_SetNbDataToProcess+0x98>)
 801210a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801210c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012110:	b29a      	uxth	r2, r3
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012118:	7bfb      	ldrb	r3, [r7, #15]
 801211a:	7b7a      	ldrb	r2, [r7, #13]
 801211c:	4909      	ldr	r1, [pc, #36]	@ (8012144 <UARTEx_SetNbDataToProcess+0x94>)
 801211e:	5c8a      	ldrb	r2, [r1, r2]
 8012120:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012124:	7b7a      	ldrb	r2, [r7, #13]
 8012126:	4908      	ldr	r1, [pc, #32]	@ (8012148 <UARTEx_SetNbDataToProcess+0x98>)
 8012128:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801212a:	fb93 f3f2 	sdiv	r3, r3, r2
 801212e:	b29a      	uxth	r2, r3
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8012136:	bf00      	nop
 8012138:	3714      	adds	r7, #20
 801213a:	46bd      	mov	sp, r7
 801213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012140:	4770      	bx	lr
 8012142:	bf00      	nop
 8012144:	08019014 	.word	0x08019014
 8012148:	0801901c 	.word	0x0801901c

0801214c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801214c:	b580      	push	{r7, lr}
 801214e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8012150:	4904      	ldr	r1, [pc, #16]	@ (8012164 <MX_FATFS_Init+0x18>)
 8012152:	4805      	ldr	r0, [pc, #20]	@ (8012168 <MX_FATFS_Init+0x1c>)
 8012154:	f001 fcd0 	bl	8013af8 <FATFS_LinkDriver>
 8012158:	4603      	mov	r3, r0
 801215a:	461a      	mov	r2, r3
 801215c:	4b03      	ldr	r3, [pc, #12]	@ (801216c <MX_FATFS_Init+0x20>)
 801215e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8012160:	bf00      	nop
 8012162:	bd80      	pop	{r7, pc}
 8012164:	2400298c 	.word	0x2400298c
 8012168:	240000ac 	.word	0x240000ac
 801216c:	24002988 	.word	0x24002988

08012170 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8012170:	b480      	push	{r7}
 8012172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8012174:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8012176:	4618      	mov	r0, r3
 8012178:	46bd      	mov	sp, r7
 801217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801217e:	4770      	bx	lr

08012180 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8012180:	b580      	push	{r7, lr}
 8012182:	b082      	sub	sp, #8
 8012184:	af00      	add	r7, sp, #0
 8012186:	4603      	mov	r3, r0
 8012188:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 801218a:	79fb      	ldrb	r3, [r7, #7]
 801218c:	4618      	mov	r0, r3
 801218e:	f000 f9fd 	bl	801258c <SD_disk_initialize>
 8012192:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8012194:	4618      	mov	r0, r3
 8012196:	3708      	adds	r7, #8
 8012198:	46bd      	mov	sp, r7
 801219a:	bd80      	pop	{r7, pc}

0801219c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 801219c:	b580      	push	{r7, lr}
 801219e:	b082      	sub	sp, #8
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	4603      	mov	r3, r0
 80121a4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 80121a6:	79fb      	ldrb	r3, [r7, #7]
 80121a8:	4618      	mov	r0, r3
 80121aa:	f000 fad5 	bl	8012758 <SD_disk_status>
 80121ae:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80121b0:	4618      	mov	r0, r3
 80121b2:	3708      	adds	r7, #8
 80121b4:	46bd      	mov	sp, r7
 80121b6:	bd80      	pop	{r7, pc}

080121b8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80121b8:	b580      	push	{r7, lr}
 80121ba:	b084      	sub	sp, #16
 80121bc:	af00      	add	r7, sp, #0
 80121be:	60b9      	str	r1, [r7, #8]
 80121c0:	607a      	str	r2, [r7, #4]
 80121c2:	603b      	str	r3, [r7, #0]
 80121c4:	4603      	mov	r3, r0
 80121c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 80121c8:	7bf8      	ldrb	r0, [r7, #15]
 80121ca:	683b      	ldr	r3, [r7, #0]
 80121cc:	687a      	ldr	r2, [r7, #4]
 80121ce:	68b9      	ldr	r1, [r7, #8]
 80121d0:	f000 fad8 	bl	8012784 <SD_disk_read>
 80121d4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80121d6:	4618      	mov	r0, r3
 80121d8:	3710      	adds	r7, #16
 80121da:	46bd      	mov	sp, r7
 80121dc:	bd80      	pop	{r7, pc}

080121de <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80121de:	b580      	push	{r7, lr}
 80121e0:	b084      	sub	sp, #16
 80121e2:	af00      	add	r7, sp, #0
 80121e4:	60b9      	str	r1, [r7, #8]
 80121e6:	607a      	str	r2, [r7, #4]
 80121e8:	603b      	str	r3, [r7, #0]
 80121ea:	4603      	mov	r3, r0
 80121ec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80121ee:	7bf8      	ldrb	r0, [r7, #15]
 80121f0:	683b      	ldr	r3, [r7, #0]
 80121f2:	687a      	ldr	r2, [r7, #4]
 80121f4:	68b9      	ldr	r1, [r7, #8]
 80121f6:	f000 fb2f 	bl	8012858 <SD_disk_write>
 80121fa:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80121fc:	4618      	mov	r0, r3
 80121fe:	3710      	adds	r7, #16
 8012200:	46bd      	mov	sp, r7
 8012202:	bd80      	pop	{r7, pc}

08012204 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8012204:	b580      	push	{r7, lr}
 8012206:	b082      	sub	sp, #8
 8012208:	af00      	add	r7, sp, #0
 801220a:	4603      	mov	r3, r0
 801220c:	603a      	str	r2, [r7, #0]
 801220e:	71fb      	strb	r3, [r7, #7]
 8012210:	460b      	mov	r3, r1
 8012212:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8012214:	79b9      	ldrb	r1, [r7, #6]
 8012216:	79fb      	ldrb	r3, [r7, #7]
 8012218:	683a      	ldr	r2, [r7, #0]
 801221a:	4618      	mov	r0, r3
 801221c:	f000 fba0 	bl	8012960 <SD_disk_ioctl>
 8012220:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8012222:	4618      	mov	r0, r3
 8012224:	3708      	adds	r7, #8
 8012226:	46bd      	mov	sp, r7
 8012228:	bd80      	pop	{r7, pc}
	...

0801222c <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 801222c:	b580      	push	{r7, lr}
 801222e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8012230:	2200      	movs	r2, #0
 8012232:	2110      	movs	r1, #16
 8012234:	4802      	ldr	r0, [pc, #8]	@ (8012240 <SELECT+0x14>)
 8012236:	f7f7 f9b9 	bl	80095ac <HAL_GPIO_WritePin>
}
 801223a:	bf00      	nop
 801223c:	bd80      	pop	{r7, pc}
 801223e:	bf00      	nop
 8012240:	58020000 	.word	0x58020000

08012244 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8012244:	b580      	push	{r7, lr}
 8012246:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8012248:	2201      	movs	r2, #1
 801224a:	2110      	movs	r1, #16
 801224c:	4802      	ldr	r0, [pc, #8]	@ (8012258 <DESELECT+0x14>)
 801224e:	f7f7 f9ad 	bl	80095ac <HAL_GPIO_WritePin>
}
 8012252:	bf00      	nop
 8012254:	bd80      	pop	{r7, pc}
 8012256:	bf00      	nop
 8012258:	58020000 	.word	0x58020000

0801225c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 801225c:	b580      	push	{r7, lr}
 801225e:	b082      	sub	sp, #8
 8012260:	af00      	add	r7, sp, #0
 8012262:	4603      	mov	r3, r0
 8012264:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8012266:	bf00      	nop
 8012268:	4b08      	ldr	r3, [pc, #32]	@ (801228c <SPI_TxByte+0x30>)
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	695b      	ldr	r3, [r3, #20]
 801226e:	f003 0302 	and.w	r3, r3, #2
 8012272:	2b02      	cmp	r3, #2
 8012274:	d1f8      	bne.n	8012268 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8012276:	1df9      	adds	r1, r7, #7
 8012278:	2364      	movs	r3, #100	@ 0x64
 801227a:	2201      	movs	r2, #1
 801227c:	4803      	ldr	r0, [pc, #12]	@ (801228c <SPI_TxByte+0x30>)
 801227e:	f7fa fa21 	bl	800c6c4 <HAL_SPI_Transmit>
}
 8012282:	bf00      	nop
 8012284:	3708      	adds	r7, #8
 8012286:	46bd      	mov	sp, r7
 8012288:	bd80      	pop	{r7, pc}
 801228a:	bf00      	nop
 801228c:	24000dc8 	.word	0x24000dc8

08012290 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8012290:	b580      	push	{r7, lr}
 8012292:	b082      	sub	sp, #8
 8012294:	af00      	add	r7, sp, #0
 8012296:	6078      	str	r0, [r7, #4]
 8012298:	460b      	mov	r3, r1
 801229a:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 801229c:	bf00      	nop
 801229e:	4b08      	ldr	r3, [pc, #32]	@ (80122c0 <SPI_TxBuffer+0x30>)
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	695b      	ldr	r3, [r3, #20]
 80122a4:	f003 0302 	and.w	r3, r3, #2
 80122a8:	2b02      	cmp	r3, #2
 80122aa:	d1f8      	bne.n	801229e <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80122ac:	887a      	ldrh	r2, [r7, #2]
 80122ae:	2364      	movs	r3, #100	@ 0x64
 80122b0:	6879      	ldr	r1, [r7, #4]
 80122b2:	4803      	ldr	r0, [pc, #12]	@ (80122c0 <SPI_TxBuffer+0x30>)
 80122b4:	f7fa fa06 	bl	800c6c4 <HAL_SPI_Transmit>
}
 80122b8:	bf00      	nop
 80122ba:	3708      	adds	r7, #8
 80122bc:	46bd      	mov	sp, r7
 80122be:	bd80      	pop	{r7, pc}
 80122c0:	24000dc8 	.word	0x24000dc8

080122c4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80122c4:	b580      	push	{r7, lr}
 80122c6:	b084      	sub	sp, #16
 80122c8:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80122ca:	23ff      	movs	r3, #255	@ 0xff
 80122cc:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80122ce:	bf00      	nop
 80122d0:	4b09      	ldr	r3, [pc, #36]	@ (80122f8 <SPI_RxByte+0x34>)
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	695b      	ldr	r3, [r3, #20]
 80122d6:	f003 0302 	and.w	r3, r3, #2
 80122da:	2b02      	cmp	r3, #2
 80122dc:	d1f8      	bne.n	80122d0 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80122de:	1dba      	adds	r2, r7, #6
 80122e0:	1df9      	adds	r1, r7, #7
 80122e2:	2364      	movs	r3, #100	@ 0x64
 80122e4:	9300      	str	r3, [sp, #0]
 80122e6:	2301      	movs	r3, #1
 80122e8:	4803      	ldr	r0, [pc, #12]	@ (80122f8 <SPI_RxByte+0x34>)
 80122ea:	f7fa fe4b 	bl	800cf84 <HAL_SPI_TransmitReceive>
  return data;
 80122ee:	79bb      	ldrb	r3, [r7, #6]
}
 80122f0:	4618      	mov	r0, r3
 80122f2:	3708      	adds	r7, #8
 80122f4:	46bd      	mov	sp, r7
 80122f6:	bd80      	pop	{r7, pc}
 80122f8:	24000dc8 	.word	0x24000dc8

080122fc <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80122fc:	b580      	push	{r7, lr}
 80122fe:	b082      	sub	sp, #8
 8012300:	af00      	add	r7, sp, #0
 8012302:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8012304:	f7ff ffde 	bl	80122c4 <SPI_RxByte>
 8012308:	4603      	mov	r3, r0
 801230a:	461a      	mov	r2, r3
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	701a      	strb	r2, [r3, #0]
}
 8012310:	bf00      	nop
 8012312:	3708      	adds	r7, #8
 8012314:	46bd      	mov	sp, r7
 8012316:	bd80      	pop	{r7, pc}

08012318 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b082      	sub	sp, #8
 801231c:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 801231e:	4b0a      	ldr	r3, [pc, #40]	@ (8012348 <SD_ReadyWait+0x30>)
 8012320:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8012324:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8012326:	f7ff ffcd 	bl	80122c4 <SPI_RxByte>
 801232a:	4603      	mov	r3, r0
 801232c:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 801232e:	79fb      	ldrb	r3, [r7, #7]
 8012330:	2bff      	cmp	r3, #255	@ 0xff
 8012332:	d003      	beq.n	801233c <SD_ReadyWait+0x24>
 8012334:	4b04      	ldr	r3, [pc, #16]	@ (8012348 <SD_ReadyWait+0x30>)
 8012336:	881b      	ldrh	r3, [r3, #0]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d1f4      	bne.n	8012326 <SD_ReadyWait+0xe>
  return res;
 801233c:	79fb      	ldrb	r3, [r7, #7]
}
 801233e:	4618      	mov	r0, r3
 8012340:	3708      	adds	r7, #8
 8012342:	46bd      	mov	sp, r7
 8012344:	bd80      	pop	{r7, pc}
 8012346:	bf00      	nop
 8012348:	24002992 	.word	0x24002992

0801234c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 801234c:	b580      	push	{r7, lr}
 801234e:	b084      	sub	sp, #16
 8012350:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8012352:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8012356:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 8012358:	f7ff ff74 	bl	8012244 <DESELECT>
  for(int i = 0; i < 10; i++)
 801235c:	2300      	movs	r3, #0
 801235e:	60bb      	str	r3, [r7, #8]
 8012360:	e005      	b.n	801236e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8012362:	20ff      	movs	r0, #255	@ 0xff
 8012364:	f7ff ff7a 	bl	801225c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8012368:	68bb      	ldr	r3, [r7, #8]
 801236a:	3301      	adds	r3, #1
 801236c:	60bb      	str	r3, [r7, #8]
 801236e:	68bb      	ldr	r3, [r7, #8]
 8012370:	2b09      	cmp	r3, #9
 8012372:	ddf6      	ble.n	8012362 <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 8012374:	f7ff ff5a 	bl	801222c <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8012378:	2340      	movs	r3, #64	@ 0x40
 801237a:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 801237c:	2300      	movs	r3, #0
 801237e:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8012380:	2300      	movs	r3, #0
 8012382:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8012384:	2300      	movs	r3, #0
 8012386:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8012388:	2300      	movs	r3, #0
 801238a:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 801238c:	2395      	movs	r3, #149	@ 0x95
 801238e:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 8012390:	463b      	mov	r3, r7
 8012392:	2106      	movs	r1, #6
 8012394:	4618      	mov	r0, r3
 8012396:	f7ff ff7b 	bl	8012290 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 801239a:	e002      	b.n	80123a2 <SD_PowerOn+0x56>
  {
    cnt--;
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	3b01      	subs	r3, #1
 80123a0:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 80123a2:	f7ff ff8f 	bl	80122c4 <SPI_RxByte>
 80123a6:	4603      	mov	r3, r0
 80123a8:	2b01      	cmp	r3, #1
 80123aa:	d002      	beq.n	80123b2 <SD_PowerOn+0x66>
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d1f4      	bne.n	801239c <SD_PowerOn+0x50>
  }
  DESELECT();
 80123b2:	f7ff ff47 	bl	8012244 <DESELECT>
  SPI_TxByte(0XFF);
 80123b6:	20ff      	movs	r0, #255	@ 0xff
 80123b8:	f7ff ff50 	bl	801225c <SPI_TxByte>
  PowerFlag = 1;
 80123bc:	4b03      	ldr	r3, [pc, #12]	@ (80123cc <SD_PowerOn+0x80>)
 80123be:	2201      	movs	r2, #1
 80123c0:	701a      	strb	r2, [r3, #0]
}
 80123c2:	bf00      	nop
 80123c4:	3710      	adds	r7, #16
 80123c6:	46bd      	mov	sp, r7
 80123c8:	bd80      	pop	{r7, pc}
 80123ca:	bf00      	nop
 80123cc:	24002995 	.word	0x24002995

080123d0 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80123d0:	b480      	push	{r7}
 80123d2:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80123d4:	4b03      	ldr	r3, [pc, #12]	@ (80123e4 <SD_PowerOff+0x14>)
 80123d6:	2200      	movs	r2, #0
 80123d8:	701a      	strb	r2, [r3, #0]
}
 80123da:	bf00      	nop
 80123dc:	46bd      	mov	sp, r7
 80123de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e2:	4770      	bx	lr
 80123e4:	24002995 	.word	0x24002995

080123e8 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80123e8:	b480      	push	{r7}
 80123ea:	af00      	add	r7, sp, #0
  return PowerFlag;
 80123ec:	4b03      	ldr	r3, [pc, #12]	@ (80123fc <SD_CheckPower+0x14>)
 80123ee:	781b      	ldrb	r3, [r3, #0]
}
 80123f0:	4618      	mov	r0, r3
 80123f2:	46bd      	mov	sp, r7
 80123f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f8:	4770      	bx	lr
 80123fa:	bf00      	nop
 80123fc:	24002995 	.word	0x24002995

08012400 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8012400:	b580      	push	{r7, lr}
 8012402:	b084      	sub	sp, #16
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
 8012408:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 801240a:	4b13      	ldr	r3, [pc, #76]	@ (8012458 <SD_RxDataBlock+0x58>)
 801240c:	22c8      	movs	r2, #200	@ 0xc8
 801240e:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8012410:	f7ff ff58 	bl	80122c4 <SPI_RxByte>
 8012414:	4603      	mov	r3, r0
 8012416:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8012418:	7bfb      	ldrb	r3, [r7, #15]
 801241a:	2bff      	cmp	r3, #255	@ 0xff
 801241c:	d103      	bne.n	8012426 <SD_RxDataBlock+0x26>
 801241e:	4b0e      	ldr	r3, [pc, #56]	@ (8012458 <SD_RxDataBlock+0x58>)
 8012420:	881b      	ldrh	r3, [r3, #0]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d1f4      	bne.n	8012410 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 8012426:	7bfb      	ldrb	r3, [r7, #15]
 8012428:	2bfe      	cmp	r3, #254	@ 0xfe
 801242a:	d001      	beq.n	8012430 <SD_RxDataBlock+0x30>
 801242c:	2300      	movs	r3, #0
 801242e:	e00f      	b.n	8012450 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	1c5a      	adds	r2, r3, #1
 8012434:	607a      	str	r2, [r7, #4]
 8012436:	4618      	mov	r0, r3
 8012438:	f7ff ff60 	bl	80122fc <SPI_RxBytePtr>
  } while(len--);
 801243c:	683b      	ldr	r3, [r7, #0]
 801243e:	1e5a      	subs	r2, r3, #1
 8012440:	603a      	str	r2, [r7, #0]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d1f4      	bne.n	8012430 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 8012446:	f7ff ff3d 	bl	80122c4 <SPI_RxByte>
  SPI_RxByte();
 801244a:	f7ff ff3b 	bl	80122c4 <SPI_RxByte>
  return TRUE;
 801244e:	2301      	movs	r3, #1
}
 8012450:	4618      	mov	r0, r3
 8012452:	3710      	adds	r7, #16
 8012454:	46bd      	mov	sp, r7
 8012456:	bd80      	pop	{r7, pc}
 8012458:	24002990 	.word	0x24002990

0801245c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 801245c:	b580      	push	{r7, lr}
 801245e:	b084      	sub	sp, #16
 8012460:	af00      	add	r7, sp, #0
 8012462:	6078      	str	r0, [r7, #4]
 8012464:	460b      	mov	r3, r1
 8012466:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8012468:	2300      	movs	r3, #0
 801246a:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 801246c:	f7ff ff54 	bl	8012318 <SD_ReadyWait>
 8012470:	4603      	mov	r3, r0
 8012472:	2bff      	cmp	r3, #255	@ 0xff
 8012474:	d001      	beq.n	801247a <SD_TxDataBlock+0x1e>
 8012476:	2300      	movs	r3, #0
 8012478:	e02f      	b.n	80124da <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 801247a:	78fb      	ldrb	r3, [r7, #3]
 801247c:	4618      	mov	r0, r3
 801247e:	f7ff feed 	bl	801225c <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8012482:	78fb      	ldrb	r3, [r7, #3]
 8012484:	2bfd      	cmp	r3, #253	@ 0xfd
 8012486:	d020      	beq.n	80124ca <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8012488:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801248c:	6878      	ldr	r0, [r7, #4]
 801248e:	f7ff feff 	bl	8012290 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 8012492:	f7ff ff17 	bl	80122c4 <SPI_RxByte>
    SPI_RxByte();
 8012496:	f7ff ff15 	bl	80122c4 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 801249a:	e00b      	b.n	80124b4 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 801249c:	f7ff ff12 	bl	80122c4 <SPI_RxByte>
 80124a0:	4603      	mov	r3, r0
 80124a2:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 80124a4:	7bfb      	ldrb	r3, [r7, #15]
 80124a6:	f003 031f 	and.w	r3, r3, #31
 80124aa:	2b05      	cmp	r3, #5
 80124ac:	d006      	beq.n	80124bc <SD_TxDataBlock+0x60>
      i++;
 80124ae:	7bbb      	ldrb	r3, [r7, #14]
 80124b0:	3301      	adds	r3, #1
 80124b2:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 80124b4:	7bbb      	ldrb	r3, [r7, #14]
 80124b6:	2b40      	cmp	r3, #64	@ 0x40
 80124b8:	d9f0      	bls.n	801249c <SD_TxDataBlock+0x40>
 80124ba:	e000      	b.n	80124be <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 80124bc:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 80124be:	bf00      	nop
 80124c0:	f7ff ff00 	bl	80122c4 <SPI_RxByte>
 80124c4:	4603      	mov	r3, r0
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d0fa      	beq.n	80124c0 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 80124ca:	7bfb      	ldrb	r3, [r7, #15]
 80124cc:	f003 031f 	and.w	r3, r3, #31
 80124d0:	2b05      	cmp	r3, #5
 80124d2:	d101      	bne.n	80124d8 <SD_TxDataBlock+0x7c>
 80124d4:	2301      	movs	r3, #1
 80124d6:	e000      	b.n	80124da <SD_TxDataBlock+0x7e>

  return FALSE;
 80124d8:	2300      	movs	r3, #0
}
 80124da:	4618      	mov	r0, r3
 80124dc:	3710      	adds	r7, #16
 80124de:	46bd      	mov	sp, r7
 80124e0:	bd80      	pop	{r7, pc}

080124e2 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80124e2:	b580      	push	{r7, lr}
 80124e4:	b084      	sub	sp, #16
 80124e6:	af00      	add	r7, sp, #0
 80124e8:	4603      	mov	r3, r0
 80124ea:	6039      	str	r1, [r7, #0]
 80124ec:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 80124ee:	f7ff ff13 	bl	8012318 <SD_ReadyWait>
 80124f2:	4603      	mov	r3, r0
 80124f4:	2bff      	cmp	r3, #255	@ 0xff
 80124f6:	d001      	beq.n	80124fc <SD_SendCmd+0x1a>
 80124f8:	23ff      	movs	r3, #255	@ 0xff
 80124fa:	e042      	b.n	8012582 <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 80124fc:	79fb      	ldrb	r3, [r7, #7]
 80124fe:	4618      	mov	r0, r3
 8012500:	f7ff feac 	bl	801225c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8012504:	683b      	ldr	r3, [r7, #0]
 8012506:	0e1b      	lsrs	r3, r3, #24
 8012508:	b2db      	uxtb	r3, r3
 801250a:	4618      	mov	r0, r3
 801250c:	f7ff fea6 	bl	801225c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8012510:	683b      	ldr	r3, [r7, #0]
 8012512:	0c1b      	lsrs	r3, r3, #16
 8012514:	b2db      	uxtb	r3, r3
 8012516:	4618      	mov	r0, r3
 8012518:	f7ff fea0 	bl	801225c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 801251c:	683b      	ldr	r3, [r7, #0]
 801251e:	0a1b      	lsrs	r3, r3, #8
 8012520:	b2db      	uxtb	r3, r3
 8012522:	4618      	mov	r0, r3
 8012524:	f7ff fe9a 	bl	801225c <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8012528:	683b      	ldr	r3, [r7, #0]
 801252a:	b2db      	uxtb	r3, r3
 801252c:	4618      	mov	r0, r3
 801252e:	f7ff fe95 	bl	801225c <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8012532:	79fb      	ldrb	r3, [r7, #7]
 8012534:	2b40      	cmp	r3, #64	@ 0x40
 8012536:	d102      	bne.n	801253e <SD_SendCmd+0x5c>
 8012538:	2395      	movs	r3, #149	@ 0x95
 801253a:	73fb      	strb	r3, [r7, #15]
 801253c:	e007      	b.n	801254e <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 801253e:	79fb      	ldrb	r3, [r7, #7]
 8012540:	2b48      	cmp	r3, #72	@ 0x48
 8012542:	d102      	bne.n	801254a <SD_SendCmd+0x68>
 8012544:	2387      	movs	r3, #135	@ 0x87
 8012546:	73fb      	strb	r3, [r7, #15]
 8012548:	e001      	b.n	801254e <SD_SendCmd+0x6c>
  else crc = 1;
 801254a:	2301      	movs	r3, #1
 801254c:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 801254e:	7bfb      	ldrb	r3, [r7, #15]
 8012550:	4618      	mov	r0, r3
 8012552:	f7ff fe83 	bl	801225c <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8012556:	79fb      	ldrb	r3, [r7, #7]
 8012558:	2b4c      	cmp	r3, #76	@ 0x4c
 801255a:	d101      	bne.n	8012560 <SD_SendCmd+0x7e>
 801255c:	f7ff feb2 	bl	80122c4 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 8012560:	230a      	movs	r3, #10
 8012562:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8012564:	f7ff feae 	bl	80122c4 <SPI_RxByte>
 8012568:	4603      	mov	r3, r0
 801256a:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 801256c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8012570:	2b00      	cmp	r3, #0
 8012572:	da05      	bge.n	8012580 <SD_SendCmd+0x9e>
 8012574:	7bbb      	ldrb	r3, [r7, #14]
 8012576:	3b01      	subs	r3, #1
 8012578:	73bb      	strb	r3, [r7, #14]
 801257a:	7bbb      	ldrb	r3, [r7, #14]
 801257c:	2b00      	cmp	r3, #0
 801257e:	d1f1      	bne.n	8012564 <SD_SendCmd+0x82>

  return res;
 8012580:	7b7b      	ldrb	r3, [r7, #13]
}
 8012582:	4618      	mov	r0, r3
 8012584:	3710      	adds	r7, #16
 8012586:	46bd      	mov	sp, r7
 8012588:	bd80      	pop	{r7, pc}
	...

0801258c <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 801258c:	b590      	push	{r4, r7, lr}
 801258e:	b085      	sub	sp, #20
 8012590:	af00      	add	r7, sp, #0
 8012592:	4603      	mov	r3, r0
 8012594:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8012596:	79fb      	ldrb	r3, [r7, #7]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d001      	beq.n	80125a0 <SD_disk_initialize+0x14>
 801259c:	2301      	movs	r3, #1
 801259e:	e0d1      	b.n	8012744 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 80125a0:	4b6a      	ldr	r3, [pc, #424]	@ (801274c <SD_disk_initialize+0x1c0>)
 80125a2:	781b      	ldrb	r3, [r3, #0]
 80125a4:	b2db      	uxtb	r3, r3
 80125a6:	f003 0302 	and.w	r3, r3, #2
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d003      	beq.n	80125b6 <SD_disk_initialize+0x2a>
 80125ae:	4b67      	ldr	r3, [pc, #412]	@ (801274c <SD_disk_initialize+0x1c0>)
 80125b0:	781b      	ldrb	r3, [r3, #0]
 80125b2:	b2db      	uxtb	r3, r3
 80125b4:	e0c6      	b.n	8012744 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 80125b6:	f7ff fec9 	bl	801234c <SD_PowerOn>
  /* slave select */
  SELECT();
 80125ba:	f7ff fe37 	bl	801222c <SELECT>
  /* check disk type */
  type = 0;
 80125be:	2300      	movs	r3, #0
 80125c0:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 80125c2:	2100      	movs	r1, #0
 80125c4:	2040      	movs	r0, #64	@ 0x40
 80125c6:	f7ff ff8c 	bl	80124e2 <SD_SendCmd>
 80125ca:	4603      	mov	r3, r0
 80125cc:	2b01      	cmp	r3, #1
 80125ce:	f040 80a1 	bne.w	8012714 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 80125d2:	4b5f      	ldr	r3, [pc, #380]	@ (8012750 <SD_disk_initialize+0x1c4>)
 80125d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80125d8:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80125da:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80125de:	2048      	movs	r0, #72	@ 0x48
 80125e0:	f7ff ff7f 	bl	80124e2 <SD_SendCmd>
 80125e4:	4603      	mov	r3, r0
 80125e6:	2b01      	cmp	r3, #1
 80125e8:	d155      	bne.n	8012696 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 80125ea:	2300      	movs	r3, #0
 80125ec:	73fb      	strb	r3, [r7, #15]
 80125ee:	e00c      	b.n	801260a <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 80125f0:	7bfc      	ldrb	r4, [r7, #15]
 80125f2:	f7ff fe67 	bl	80122c4 <SPI_RxByte>
 80125f6:	4603      	mov	r3, r0
 80125f8:	461a      	mov	r2, r3
 80125fa:	f104 0310 	add.w	r3, r4, #16
 80125fe:	443b      	add	r3, r7
 8012600:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8012604:	7bfb      	ldrb	r3, [r7, #15]
 8012606:	3301      	adds	r3, #1
 8012608:	73fb      	strb	r3, [r7, #15]
 801260a:	7bfb      	ldrb	r3, [r7, #15]
 801260c:	2b03      	cmp	r3, #3
 801260e:	d9ef      	bls.n	80125f0 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8012610:	7abb      	ldrb	r3, [r7, #10]
 8012612:	2b01      	cmp	r3, #1
 8012614:	d17e      	bne.n	8012714 <SD_disk_initialize+0x188>
 8012616:	7afb      	ldrb	r3, [r7, #11]
 8012618:	2baa      	cmp	r3, #170	@ 0xaa
 801261a:	d17b      	bne.n	8012714 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 801261c:	2100      	movs	r1, #0
 801261e:	2077      	movs	r0, #119	@ 0x77
 8012620:	f7ff ff5f 	bl	80124e2 <SD_SendCmd>
 8012624:	4603      	mov	r3, r0
 8012626:	2b01      	cmp	r3, #1
 8012628:	d807      	bhi.n	801263a <SD_disk_initialize+0xae>
 801262a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 801262e:	2069      	movs	r0, #105	@ 0x69
 8012630:	f7ff ff57 	bl	80124e2 <SD_SendCmd>
 8012634:	4603      	mov	r3, r0
 8012636:	2b00      	cmp	r3, #0
 8012638:	d004      	beq.n	8012644 <SD_disk_initialize+0xb8>
        } while (Timer1);
 801263a:	4b45      	ldr	r3, [pc, #276]	@ (8012750 <SD_disk_initialize+0x1c4>)
 801263c:	881b      	ldrh	r3, [r3, #0]
 801263e:	2b00      	cmp	r3, #0
 8012640:	d1ec      	bne.n	801261c <SD_disk_initialize+0x90>
 8012642:	e000      	b.n	8012646 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8012644:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8012646:	4b42      	ldr	r3, [pc, #264]	@ (8012750 <SD_disk_initialize+0x1c4>)
 8012648:	881b      	ldrh	r3, [r3, #0]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d062      	beq.n	8012714 <SD_disk_initialize+0x188>
 801264e:	2100      	movs	r1, #0
 8012650:	207a      	movs	r0, #122	@ 0x7a
 8012652:	f7ff ff46 	bl	80124e2 <SD_SendCmd>
 8012656:	4603      	mov	r3, r0
 8012658:	2b00      	cmp	r3, #0
 801265a:	d15b      	bne.n	8012714 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 801265c:	2300      	movs	r3, #0
 801265e:	73fb      	strb	r3, [r7, #15]
 8012660:	e00c      	b.n	801267c <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8012662:	7bfc      	ldrb	r4, [r7, #15]
 8012664:	f7ff fe2e 	bl	80122c4 <SPI_RxByte>
 8012668:	4603      	mov	r3, r0
 801266a:	461a      	mov	r2, r3
 801266c:	f104 0310 	add.w	r3, r4, #16
 8012670:	443b      	add	r3, r7
 8012672:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8012676:	7bfb      	ldrb	r3, [r7, #15]
 8012678:	3301      	adds	r3, #1
 801267a:	73fb      	strb	r3, [r7, #15]
 801267c:	7bfb      	ldrb	r3, [r7, #15]
 801267e:	2b03      	cmp	r3, #3
 8012680:	d9ef      	bls.n	8012662 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8012682:	7a3b      	ldrb	r3, [r7, #8]
 8012684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012688:	2b00      	cmp	r3, #0
 801268a:	d001      	beq.n	8012690 <SD_disk_initialize+0x104>
 801268c:	230c      	movs	r3, #12
 801268e:	e000      	b.n	8012692 <SD_disk_initialize+0x106>
 8012690:	2304      	movs	r3, #4
 8012692:	73bb      	strb	r3, [r7, #14]
 8012694:	e03e      	b.n	8012714 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8012696:	2100      	movs	r1, #0
 8012698:	2077      	movs	r0, #119	@ 0x77
 801269a:	f7ff ff22 	bl	80124e2 <SD_SendCmd>
 801269e:	4603      	mov	r3, r0
 80126a0:	2b01      	cmp	r3, #1
 80126a2:	d808      	bhi.n	80126b6 <SD_disk_initialize+0x12a>
 80126a4:	2100      	movs	r1, #0
 80126a6:	2069      	movs	r0, #105	@ 0x69
 80126a8:	f7ff ff1b 	bl	80124e2 <SD_SendCmd>
 80126ac:	4603      	mov	r3, r0
 80126ae:	2b01      	cmp	r3, #1
 80126b0:	d801      	bhi.n	80126b6 <SD_disk_initialize+0x12a>
 80126b2:	2302      	movs	r3, #2
 80126b4:	e000      	b.n	80126b8 <SD_disk_initialize+0x12c>
 80126b6:	2301      	movs	r3, #1
 80126b8:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 80126ba:	7bbb      	ldrb	r3, [r7, #14]
 80126bc:	2b02      	cmp	r3, #2
 80126be:	d10e      	bne.n	80126de <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80126c0:	2100      	movs	r1, #0
 80126c2:	2077      	movs	r0, #119	@ 0x77
 80126c4:	f7ff ff0d 	bl	80124e2 <SD_SendCmd>
 80126c8:	4603      	mov	r3, r0
 80126ca:	2b01      	cmp	r3, #1
 80126cc:	d80e      	bhi.n	80126ec <SD_disk_initialize+0x160>
 80126ce:	2100      	movs	r1, #0
 80126d0:	2069      	movs	r0, #105	@ 0x69
 80126d2:	f7ff ff06 	bl	80124e2 <SD_SendCmd>
 80126d6:	4603      	mov	r3, r0
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d107      	bne.n	80126ec <SD_disk_initialize+0x160>
 80126dc:	e00c      	b.n	80126f8 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80126de:	2100      	movs	r1, #0
 80126e0:	2041      	movs	r0, #65	@ 0x41
 80126e2:	f7ff fefe 	bl	80124e2 <SD_SendCmd>
 80126e6:	4603      	mov	r3, r0
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d004      	beq.n	80126f6 <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 80126ec:	4b18      	ldr	r3, [pc, #96]	@ (8012750 <SD_disk_initialize+0x1c4>)
 80126ee:	881b      	ldrh	r3, [r3, #0]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d1e2      	bne.n	80126ba <SD_disk_initialize+0x12e>
 80126f4:	e000      	b.n	80126f8 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80126f6:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80126f8:	4b15      	ldr	r3, [pc, #84]	@ (8012750 <SD_disk_initialize+0x1c4>)
 80126fa:	881b      	ldrh	r3, [r3, #0]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d007      	beq.n	8012710 <SD_disk_initialize+0x184>
 8012700:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8012704:	2050      	movs	r0, #80	@ 0x50
 8012706:	f7ff feec 	bl	80124e2 <SD_SendCmd>
 801270a:	4603      	mov	r3, r0
 801270c:	2b00      	cmp	r3, #0
 801270e:	d001      	beq.n	8012714 <SD_disk_initialize+0x188>
 8012710:	2300      	movs	r3, #0
 8012712:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 8012714:	4a0f      	ldr	r2, [pc, #60]	@ (8012754 <SD_disk_initialize+0x1c8>)
 8012716:	7bbb      	ldrb	r3, [r7, #14]
 8012718:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 801271a:	f7ff fd93 	bl	8012244 <DESELECT>
  SPI_RxByte();
 801271e:	f7ff fdd1 	bl	80122c4 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 8012722:	7bbb      	ldrb	r3, [r7, #14]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d008      	beq.n	801273a <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8012728:	4b08      	ldr	r3, [pc, #32]	@ (801274c <SD_disk_initialize+0x1c0>)
 801272a:	781b      	ldrb	r3, [r3, #0]
 801272c:	b2db      	uxtb	r3, r3
 801272e:	f023 0301 	bic.w	r3, r3, #1
 8012732:	b2da      	uxtb	r2, r3
 8012734:	4b05      	ldr	r3, [pc, #20]	@ (801274c <SD_disk_initialize+0x1c0>)
 8012736:	701a      	strb	r2, [r3, #0]
 8012738:	e001      	b.n	801273e <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 801273a:	f7ff fe49 	bl	80123d0 <SD_PowerOff>
  }
  return Stat;
 801273e:	4b03      	ldr	r3, [pc, #12]	@ (801274c <SD_disk_initialize+0x1c0>)
 8012740:	781b      	ldrb	r3, [r3, #0]
 8012742:	b2db      	uxtb	r3, r3
}
 8012744:	4618      	mov	r0, r3
 8012746:	3714      	adds	r7, #20
 8012748:	46bd      	mov	sp, r7
 801274a:	bd90      	pop	{r4, r7, pc}
 801274c:	240000c0 	.word	0x240000c0
 8012750:	24002990 	.word	0x24002990
 8012754:	24002994 	.word	0x24002994

08012758 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8012758:	b480      	push	{r7}
 801275a:	b083      	sub	sp, #12
 801275c:	af00      	add	r7, sp, #0
 801275e:	4603      	mov	r3, r0
 8012760:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8012762:	79fb      	ldrb	r3, [r7, #7]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d001      	beq.n	801276c <SD_disk_status+0x14>
 8012768:	2301      	movs	r3, #1
 801276a:	e002      	b.n	8012772 <SD_disk_status+0x1a>
  return Stat;
 801276c:	4b04      	ldr	r3, [pc, #16]	@ (8012780 <SD_disk_status+0x28>)
 801276e:	781b      	ldrb	r3, [r3, #0]
 8012770:	b2db      	uxtb	r3, r3
}
 8012772:	4618      	mov	r0, r3
 8012774:	370c      	adds	r7, #12
 8012776:	46bd      	mov	sp, r7
 8012778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801277c:	4770      	bx	lr
 801277e:	bf00      	nop
 8012780:	240000c0 	.word	0x240000c0

08012784 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8012784:	b580      	push	{r7, lr}
 8012786:	b084      	sub	sp, #16
 8012788:	af00      	add	r7, sp, #0
 801278a:	60b9      	str	r1, [r7, #8]
 801278c:	607a      	str	r2, [r7, #4]
 801278e:	603b      	str	r3, [r7, #0]
 8012790:	4603      	mov	r3, r0
 8012792:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8012794:	7bfb      	ldrb	r3, [r7, #15]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d102      	bne.n	80127a0 <SD_disk_read+0x1c>
 801279a:	683b      	ldr	r3, [r7, #0]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d101      	bne.n	80127a4 <SD_disk_read+0x20>
 80127a0:	2304      	movs	r3, #4
 80127a2:	e051      	b.n	8012848 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80127a4:	4b2a      	ldr	r3, [pc, #168]	@ (8012850 <SD_disk_read+0xcc>)
 80127a6:	781b      	ldrb	r3, [r3, #0]
 80127a8:	b2db      	uxtb	r3, r3
 80127aa:	f003 0301 	and.w	r3, r3, #1
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d001      	beq.n	80127b6 <SD_disk_read+0x32>
 80127b2:	2303      	movs	r3, #3
 80127b4:	e048      	b.n	8012848 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80127b6:	4b27      	ldr	r3, [pc, #156]	@ (8012854 <SD_disk_read+0xd0>)
 80127b8:	781b      	ldrb	r3, [r3, #0]
 80127ba:	f003 0304 	and.w	r3, r3, #4
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d102      	bne.n	80127c8 <SD_disk_read+0x44>
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	025b      	lsls	r3, r3, #9
 80127c6:	607b      	str	r3, [r7, #4]

  SELECT();
 80127c8:	f7ff fd30 	bl	801222c <SELECT>

  if (count == 1)
 80127cc:	683b      	ldr	r3, [r7, #0]
 80127ce:	2b01      	cmp	r3, #1
 80127d0:	d111      	bne.n	80127f6 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80127d2:	6879      	ldr	r1, [r7, #4]
 80127d4:	2051      	movs	r0, #81	@ 0x51
 80127d6:	f7ff fe84 	bl	80124e2 <SD_SendCmd>
 80127da:	4603      	mov	r3, r0
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d129      	bne.n	8012834 <SD_disk_read+0xb0>
 80127e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80127e4:	68b8      	ldr	r0, [r7, #8]
 80127e6:	f7ff fe0b 	bl	8012400 <SD_RxDataBlock>
 80127ea:	4603      	mov	r3, r0
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d021      	beq.n	8012834 <SD_disk_read+0xb0>
 80127f0:	2300      	movs	r3, #0
 80127f2:	603b      	str	r3, [r7, #0]
 80127f4:	e01e      	b.n	8012834 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 80127f6:	6879      	ldr	r1, [r7, #4]
 80127f8:	2052      	movs	r0, #82	@ 0x52
 80127fa:	f7ff fe72 	bl	80124e2 <SD_SendCmd>
 80127fe:	4603      	mov	r3, r0
 8012800:	2b00      	cmp	r3, #0
 8012802:	d117      	bne.n	8012834 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8012804:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8012808:	68b8      	ldr	r0, [r7, #8]
 801280a:	f7ff fdf9 	bl	8012400 <SD_RxDataBlock>
 801280e:	4603      	mov	r3, r0
 8012810:	2b00      	cmp	r3, #0
 8012812:	d00a      	beq.n	801282a <SD_disk_read+0xa6>
        buff += 512;
 8012814:	68bb      	ldr	r3, [r7, #8]
 8012816:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 801281a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 801281c:	683b      	ldr	r3, [r7, #0]
 801281e:	3b01      	subs	r3, #1
 8012820:	603b      	str	r3, [r7, #0]
 8012822:	683b      	ldr	r3, [r7, #0]
 8012824:	2b00      	cmp	r3, #0
 8012826:	d1ed      	bne.n	8012804 <SD_disk_read+0x80>
 8012828:	e000      	b.n	801282c <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 801282a:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 801282c:	2100      	movs	r1, #0
 801282e:	204c      	movs	r0, #76	@ 0x4c
 8012830:	f7ff fe57 	bl	80124e2 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8012834:	f7ff fd06 	bl	8012244 <DESELECT>
  SPI_RxByte();
 8012838:	f7ff fd44 	bl	80122c4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 801283c:	683b      	ldr	r3, [r7, #0]
 801283e:	2b00      	cmp	r3, #0
 8012840:	bf14      	ite	ne
 8012842:	2301      	movne	r3, #1
 8012844:	2300      	moveq	r3, #0
 8012846:	b2db      	uxtb	r3, r3
}
 8012848:	4618      	mov	r0, r3
 801284a:	3710      	adds	r7, #16
 801284c:	46bd      	mov	sp, r7
 801284e:	bd80      	pop	{r7, pc}
 8012850:	240000c0 	.word	0x240000c0
 8012854:	24002994 	.word	0x24002994

08012858 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8012858:	b580      	push	{r7, lr}
 801285a:	b084      	sub	sp, #16
 801285c:	af00      	add	r7, sp, #0
 801285e:	60b9      	str	r1, [r7, #8]
 8012860:	607a      	str	r2, [r7, #4]
 8012862:	603b      	str	r3, [r7, #0]
 8012864:	4603      	mov	r3, r0
 8012866:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8012868:	7bfb      	ldrb	r3, [r7, #15]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d102      	bne.n	8012874 <SD_disk_write+0x1c>
 801286e:	683b      	ldr	r3, [r7, #0]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d101      	bne.n	8012878 <SD_disk_write+0x20>
 8012874:	2304      	movs	r3, #4
 8012876:	e06b      	b.n	8012950 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012878:	4b37      	ldr	r3, [pc, #220]	@ (8012958 <SD_disk_write+0x100>)
 801287a:	781b      	ldrb	r3, [r3, #0]
 801287c:	b2db      	uxtb	r3, r3
 801287e:	f003 0301 	and.w	r3, r3, #1
 8012882:	2b00      	cmp	r3, #0
 8012884:	d001      	beq.n	801288a <SD_disk_write+0x32>
 8012886:	2303      	movs	r3, #3
 8012888:	e062      	b.n	8012950 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 801288a:	4b33      	ldr	r3, [pc, #204]	@ (8012958 <SD_disk_write+0x100>)
 801288c:	781b      	ldrb	r3, [r3, #0]
 801288e:	b2db      	uxtb	r3, r3
 8012890:	f003 0304 	and.w	r3, r3, #4
 8012894:	2b00      	cmp	r3, #0
 8012896:	d001      	beq.n	801289c <SD_disk_write+0x44>
 8012898:	2302      	movs	r3, #2
 801289a:	e059      	b.n	8012950 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 801289c:	4b2f      	ldr	r3, [pc, #188]	@ (801295c <SD_disk_write+0x104>)
 801289e:	781b      	ldrb	r3, [r3, #0]
 80128a0:	f003 0304 	and.w	r3, r3, #4
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d102      	bne.n	80128ae <SD_disk_write+0x56>
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	025b      	lsls	r3, r3, #9
 80128ac:	607b      	str	r3, [r7, #4]

  SELECT();
 80128ae:	f7ff fcbd 	bl	801222c <SELECT>

  if (count == 1)
 80128b2:	683b      	ldr	r3, [r7, #0]
 80128b4:	2b01      	cmp	r3, #1
 80128b6:	d110      	bne.n	80128da <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80128b8:	6879      	ldr	r1, [r7, #4]
 80128ba:	2058      	movs	r0, #88	@ 0x58
 80128bc:	f7ff fe11 	bl	80124e2 <SD_SendCmd>
 80128c0:	4603      	mov	r3, r0
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d13a      	bne.n	801293c <SD_disk_write+0xe4>
 80128c6:	21fe      	movs	r1, #254	@ 0xfe
 80128c8:	68b8      	ldr	r0, [r7, #8]
 80128ca:	f7ff fdc7 	bl	801245c <SD_TxDataBlock>
 80128ce:	4603      	mov	r3, r0
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d033      	beq.n	801293c <SD_disk_write+0xe4>
      count = 0;
 80128d4:	2300      	movs	r3, #0
 80128d6:	603b      	str	r3, [r7, #0]
 80128d8:	e030      	b.n	801293c <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 80128da:	4b20      	ldr	r3, [pc, #128]	@ (801295c <SD_disk_write+0x104>)
 80128dc:	781b      	ldrb	r3, [r3, #0]
 80128de:	f003 0302 	and.w	r3, r3, #2
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d007      	beq.n	80128f6 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80128e6:	2100      	movs	r1, #0
 80128e8:	2077      	movs	r0, #119	@ 0x77
 80128ea:	f7ff fdfa 	bl	80124e2 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80128ee:	6839      	ldr	r1, [r7, #0]
 80128f0:	2057      	movs	r0, #87	@ 0x57
 80128f2:	f7ff fdf6 	bl	80124e2 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80128f6:	6879      	ldr	r1, [r7, #4]
 80128f8:	2059      	movs	r0, #89	@ 0x59
 80128fa:	f7ff fdf2 	bl	80124e2 <SD_SendCmd>
 80128fe:	4603      	mov	r3, r0
 8012900:	2b00      	cmp	r3, #0
 8012902:	d11b      	bne.n	801293c <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8012904:	21fc      	movs	r1, #252	@ 0xfc
 8012906:	68b8      	ldr	r0, [r7, #8]
 8012908:	f7ff fda8 	bl	801245c <SD_TxDataBlock>
 801290c:	4603      	mov	r3, r0
 801290e:	2b00      	cmp	r3, #0
 8012910:	d00a      	beq.n	8012928 <SD_disk_write+0xd0>
        buff += 512;
 8012912:	68bb      	ldr	r3, [r7, #8]
 8012914:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8012918:	60bb      	str	r3, [r7, #8]
      } while (--count);
 801291a:	683b      	ldr	r3, [r7, #0]
 801291c:	3b01      	subs	r3, #1
 801291e:	603b      	str	r3, [r7, #0]
 8012920:	683b      	ldr	r3, [r7, #0]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d1ee      	bne.n	8012904 <SD_disk_write+0xac>
 8012926:	e000      	b.n	801292a <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8012928:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 801292a:	21fd      	movs	r1, #253	@ 0xfd
 801292c:	2000      	movs	r0, #0
 801292e:	f7ff fd95 	bl	801245c <SD_TxDataBlock>
 8012932:	4603      	mov	r3, r0
 8012934:	2b00      	cmp	r3, #0
 8012936:	d101      	bne.n	801293c <SD_disk_write+0xe4>
      {
        count = 1;
 8012938:	2301      	movs	r3, #1
 801293a:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 801293c:	f7ff fc82 	bl	8012244 <DESELECT>
  SPI_RxByte();
 8012940:	f7ff fcc0 	bl	80122c4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8012944:	683b      	ldr	r3, [r7, #0]
 8012946:	2b00      	cmp	r3, #0
 8012948:	bf14      	ite	ne
 801294a:	2301      	movne	r3, #1
 801294c:	2300      	moveq	r3, #0
 801294e:	b2db      	uxtb	r3, r3
}
 8012950:	4618      	mov	r0, r3
 8012952:	3710      	adds	r7, #16
 8012954:	46bd      	mov	sp, r7
 8012956:	bd80      	pop	{r7, pc}
 8012958:	240000c0 	.word	0x240000c0
 801295c:	24002994 	.word	0x24002994

08012960 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8012960:	b590      	push	{r4, r7, lr}
 8012962:	b08b      	sub	sp, #44	@ 0x2c
 8012964:	af00      	add	r7, sp, #0
 8012966:	4603      	mov	r3, r0
 8012968:	603a      	str	r2, [r7, #0]
 801296a:	71fb      	strb	r3, [r7, #7]
 801296c:	460b      	mov	r3, r1
 801296e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8012970:	683b      	ldr	r3, [r7, #0]
 8012972:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8012974:	79fb      	ldrb	r3, [r7, #7]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d001      	beq.n	801297e <SD_disk_ioctl+0x1e>
 801297a:	2304      	movs	r3, #4
 801297c:	e113      	b.n	8012ba6 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 801297e:	2301      	movs	r3, #1
 8012980:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8012984:	79bb      	ldrb	r3, [r7, #6]
 8012986:	2b05      	cmp	r3, #5
 8012988:	d124      	bne.n	80129d4 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 801298a:	6a3b      	ldr	r3, [r7, #32]
 801298c:	781b      	ldrb	r3, [r3, #0]
 801298e:	2b02      	cmp	r3, #2
 8012990:	d012      	beq.n	80129b8 <SD_disk_ioctl+0x58>
 8012992:	2b02      	cmp	r3, #2
 8012994:	dc1a      	bgt.n	80129cc <SD_disk_ioctl+0x6c>
 8012996:	2b00      	cmp	r3, #0
 8012998:	d002      	beq.n	80129a0 <SD_disk_ioctl+0x40>
 801299a:	2b01      	cmp	r3, #1
 801299c:	d006      	beq.n	80129ac <SD_disk_ioctl+0x4c>
 801299e:	e015      	b.n	80129cc <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 80129a0:	f7ff fd16 	bl	80123d0 <SD_PowerOff>
      res = RES_OK;
 80129a4:	2300      	movs	r3, #0
 80129a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80129aa:	e0fa      	b.n	8012ba2 <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 80129ac:	f7ff fcce 	bl	801234c <SD_PowerOn>
      res = RES_OK;
 80129b0:	2300      	movs	r3, #0
 80129b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80129b6:	e0f4      	b.n	8012ba2 <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 80129b8:	6a3b      	ldr	r3, [r7, #32]
 80129ba:	1c5c      	adds	r4, r3, #1
 80129bc:	f7ff fd14 	bl	80123e8 <SD_CheckPower>
 80129c0:	4603      	mov	r3, r0
 80129c2:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 80129c4:	2300      	movs	r3, #0
 80129c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80129ca:	e0ea      	b.n	8012ba2 <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 80129cc:	2304      	movs	r3, #4
 80129ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80129d2:	e0e6      	b.n	8012ba2 <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 80129d4:	4b76      	ldr	r3, [pc, #472]	@ (8012bb0 <SD_disk_ioctl+0x250>)
 80129d6:	781b      	ldrb	r3, [r3, #0]
 80129d8:	b2db      	uxtb	r3, r3
 80129da:	f003 0301 	and.w	r3, r3, #1
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d001      	beq.n	80129e6 <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 80129e2:	2303      	movs	r3, #3
 80129e4:	e0df      	b.n	8012ba6 <SD_disk_ioctl+0x246>
    }
    SELECT();
 80129e6:	f7ff fc21 	bl	801222c <SELECT>
    switch (ctrl)
 80129ea:	79bb      	ldrb	r3, [r7, #6]
 80129ec:	2b0d      	cmp	r3, #13
 80129ee:	f200 80c9 	bhi.w	8012b84 <SD_disk_ioctl+0x224>
 80129f2:	a201      	add	r2, pc, #4	@ (adr r2, 80129f8 <SD_disk_ioctl+0x98>)
 80129f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129f8:	08012aef 	.word	0x08012aef
 80129fc:	08012a31 	.word	0x08012a31
 8012a00:	08012adf 	.word	0x08012adf
 8012a04:	08012b85 	.word	0x08012b85
 8012a08:	08012b85 	.word	0x08012b85
 8012a0c:	08012b85 	.word	0x08012b85
 8012a10:	08012b85 	.word	0x08012b85
 8012a14:	08012b85 	.word	0x08012b85
 8012a18:	08012b85 	.word	0x08012b85
 8012a1c:	08012b85 	.word	0x08012b85
 8012a20:	08012b85 	.word	0x08012b85
 8012a24:	08012b01 	.word	0x08012b01
 8012a28:	08012b25 	.word	0x08012b25
 8012a2c:	08012b49 	.word	0x08012b49
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8012a30:	2100      	movs	r1, #0
 8012a32:	2049      	movs	r0, #73	@ 0x49
 8012a34:	f7ff fd55 	bl	80124e2 <SD_SendCmd>
 8012a38:	4603      	mov	r3, r0
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	f040 80a6 	bne.w	8012b8c <SD_disk_ioctl+0x22c>
 8012a40:	f107 030c 	add.w	r3, r7, #12
 8012a44:	2110      	movs	r1, #16
 8012a46:	4618      	mov	r0, r3
 8012a48:	f7ff fcda 	bl	8012400 <SD_RxDataBlock>
 8012a4c:	4603      	mov	r3, r0
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	f000 809c 	beq.w	8012b8c <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8012a54:	7b3b      	ldrb	r3, [r7, #12]
 8012a56:	099b      	lsrs	r3, r3, #6
 8012a58:	b2db      	uxtb	r3, r3
 8012a5a:	2b01      	cmp	r3, #1
 8012a5c:	d10d      	bne.n	8012a7a <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8012a5e:	7d7b      	ldrb	r3, [r7, #21]
 8012a60:	461a      	mov	r2, r3
 8012a62:	7d3b      	ldrb	r3, [r7, #20]
 8012a64:	021b      	lsls	r3, r3, #8
 8012a66:	b29b      	uxth	r3, r3
 8012a68:	4413      	add	r3, r2
 8012a6a:	b29b      	uxth	r3, r3
 8012a6c:	3301      	adds	r3, #1
 8012a6e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8012a70:	8bfb      	ldrh	r3, [r7, #30]
 8012a72:	029a      	lsls	r2, r3, #10
 8012a74:	683b      	ldr	r3, [r7, #0]
 8012a76:	601a      	str	r2, [r3, #0]
 8012a78:	e02d      	b.n	8012ad6 <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8012a7a:	7c7b      	ldrb	r3, [r7, #17]
 8012a7c:	f003 030f 	and.w	r3, r3, #15
 8012a80:	b2da      	uxtb	r2, r3
 8012a82:	7dbb      	ldrb	r3, [r7, #22]
 8012a84:	09db      	lsrs	r3, r3, #7
 8012a86:	b2db      	uxtb	r3, r3
 8012a88:	4413      	add	r3, r2
 8012a8a:	b2da      	uxtb	r2, r3
 8012a8c:	7d7b      	ldrb	r3, [r7, #21]
 8012a8e:	005b      	lsls	r3, r3, #1
 8012a90:	b2db      	uxtb	r3, r3
 8012a92:	f003 0306 	and.w	r3, r3, #6
 8012a96:	b2db      	uxtb	r3, r3
 8012a98:	4413      	add	r3, r2
 8012a9a:	b2db      	uxtb	r3, r3
 8012a9c:	3302      	adds	r3, #2
 8012a9e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8012aa2:	7d3b      	ldrb	r3, [r7, #20]
 8012aa4:	099b      	lsrs	r3, r3, #6
 8012aa6:	b2db      	uxtb	r3, r3
 8012aa8:	461a      	mov	r2, r3
 8012aaa:	7cfb      	ldrb	r3, [r7, #19]
 8012aac:	009b      	lsls	r3, r3, #2
 8012aae:	b29b      	uxth	r3, r3
 8012ab0:	4413      	add	r3, r2
 8012ab2:	b29a      	uxth	r2, r3
 8012ab4:	7cbb      	ldrb	r3, [r7, #18]
 8012ab6:	029b      	lsls	r3, r3, #10
 8012ab8:	b29b      	uxth	r3, r3
 8012aba:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8012abe:	b29b      	uxth	r3, r3
 8012ac0:	4413      	add	r3, r2
 8012ac2:	b29b      	uxth	r3, r3
 8012ac4:	3301      	adds	r3, #1
 8012ac6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8012ac8:	8bfa      	ldrh	r2, [r7, #30]
 8012aca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012ace:	3b09      	subs	r3, #9
 8012ad0:	409a      	lsls	r2, r3
 8012ad2:	683b      	ldr	r3, [r7, #0]
 8012ad4:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8012adc:	e056      	b.n	8012b8c <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8012ade:	683b      	ldr	r3, [r7, #0]
 8012ae0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012ae4:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8012aec:	e055      	b.n	8012b9a <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8012aee:	f7ff fc13 	bl	8012318 <SD_ReadyWait>
 8012af2:	4603      	mov	r3, r0
 8012af4:	2bff      	cmp	r3, #255	@ 0xff
 8012af6:	d14b      	bne.n	8012b90 <SD_disk_ioctl+0x230>
 8012af8:	2300      	movs	r3, #0
 8012afa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8012afe:	e047      	b.n	8012b90 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8012b00:	2100      	movs	r1, #0
 8012b02:	2049      	movs	r0, #73	@ 0x49
 8012b04:	f7ff fced 	bl	80124e2 <SD_SendCmd>
 8012b08:	4603      	mov	r3, r0
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d142      	bne.n	8012b94 <SD_disk_ioctl+0x234>
 8012b0e:	2110      	movs	r1, #16
 8012b10:	6a38      	ldr	r0, [r7, #32]
 8012b12:	f7ff fc75 	bl	8012400 <SD_RxDataBlock>
 8012b16:	4603      	mov	r3, r0
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d03b      	beq.n	8012b94 <SD_disk_ioctl+0x234>
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8012b22:	e037      	b.n	8012b94 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8012b24:	2100      	movs	r1, #0
 8012b26:	204a      	movs	r0, #74	@ 0x4a
 8012b28:	f7ff fcdb 	bl	80124e2 <SD_SendCmd>
 8012b2c:	4603      	mov	r3, r0
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d132      	bne.n	8012b98 <SD_disk_ioctl+0x238>
 8012b32:	2110      	movs	r1, #16
 8012b34:	6a38      	ldr	r0, [r7, #32]
 8012b36:	f7ff fc63 	bl	8012400 <SD_RxDataBlock>
 8012b3a:	4603      	mov	r3, r0
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d02b      	beq.n	8012b98 <SD_disk_ioctl+0x238>
 8012b40:	2300      	movs	r3, #0
 8012b42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8012b46:	e027      	b.n	8012b98 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8012b48:	2100      	movs	r1, #0
 8012b4a:	207a      	movs	r0, #122	@ 0x7a
 8012b4c:	f7ff fcc9 	bl	80124e2 <SD_SendCmd>
 8012b50:	4603      	mov	r3, r0
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d116      	bne.n	8012b84 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 8012b56:	2300      	movs	r3, #0
 8012b58:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012b5c:	e00b      	b.n	8012b76 <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 8012b5e:	6a3c      	ldr	r4, [r7, #32]
 8012b60:	1c63      	adds	r3, r4, #1
 8012b62:	623b      	str	r3, [r7, #32]
 8012b64:	f7ff fbae 	bl	80122c4 <SPI_RxByte>
 8012b68:	4603      	mov	r3, r0
 8012b6a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8012b6c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012b70:	3301      	adds	r3, #1
 8012b72:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012b76:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012b7a:	2b03      	cmp	r3, #3
 8012b7c:	d9ef      	bls.n	8012b5e <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 8012b7e:	2300      	movs	r3, #0
 8012b80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8012b84:	2304      	movs	r3, #4
 8012b86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012b8a:	e006      	b.n	8012b9a <SD_disk_ioctl+0x23a>
      break;
 8012b8c:	bf00      	nop
 8012b8e:	e004      	b.n	8012b9a <SD_disk_ioctl+0x23a>
      break;
 8012b90:	bf00      	nop
 8012b92:	e002      	b.n	8012b9a <SD_disk_ioctl+0x23a>
      break;
 8012b94:	bf00      	nop
 8012b96:	e000      	b.n	8012b9a <SD_disk_ioctl+0x23a>
      break;
 8012b98:	bf00      	nop
    }
    DESELECT();
 8012b9a:	f7ff fb53 	bl	8012244 <DESELECT>
    SPI_RxByte();
 8012b9e:	f7ff fb91 	bl	80122c4 <SPI_RxByte>
  }
  return res;
 8012ba2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	372c      	adds	r7, #44	@ 0x2c
 8012baa:	46bd      	mov	sp, r7
 8012bac:	bd90      	pop	{r4, r7, pc}
 8012bae:	bf00      	nop
 8012bb0:	240000c0 	.word	0x240000c0

08012bb4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012bb4:	b580      	push	{r7, lr}
 8012bb6:	b084      	sub	sp, #16
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	4603      	mov	r3, r0
 8012bbc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012bbe:	79fb      	ldrb	r3, [r7, #7]
 8012bc0:	4a08      	ldr	r2, [pc, #32]	@ (8012be4 <disk_status+0x30>)
 8012bc2:	009b      	lsls	r3, r3, #2
 8012bc4:	4413      	add	r3, r2
 8012bc6:	685b      	ldr	r3, [r3, #4]
 8012bc8:	685b      	ldr	r3, [r3, #4]
 8012bca:	79fa      	ldrb	r2, [r7, #7]
 8012bcc:	4905      	ldr	r1, [pc, #20]	@ (8012be4 <disk_status+0x30>)
 8012bce:	440a      	add	r2, r1
 8012bd0:	7a12      	ldrb	r2, [r2, #8]
 8012bd2:	4610      	mov	r0, r2
 8012bd4:	4798      	blx	r3
 8012bd6:	4603      	mov	r3, r0
 8012bd8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bdc:	4618      	mov	r0, r3
 8012bde:	3710      	adds	r7, #16
 8012be0:	46bd      	mov	sp, r7
 8012be2:	bd80      	pop	{r7, pc}
 8012be4:	24002998 	.word	0x24002998

08012be8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012be8:	b590      	push	{r4, r7, lr}
 8012bea:	b087      	sub	sp, #28
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	60b9      	str	r1, [r7, #8]
 8012bf0:	607a      	str	r2, [r7, #4]
 8012bf2:	603b      	str	r3, [r7, #0]
 8012bf4:	4603      	mov	r3, r0
 8012bf6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012bf8:	7bfb      	ldrb	r3, [r7, #15]
 8012bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8012c24 <disk_read+0x3c>)
 8012bfc:	009b      	lsls	r3, r3, #2
 8012bfe:	4413      	add	r3, r2
 8012c00:	685b      	ldr	r3, [r3, #4]
 8012c02:	689c      	ldr	r4, [r3, #8]
 8012c04:	7bfb      	ldrb	r3, [r7, #15]
 8012c06:	4a07      	ldr	r2, [pc, #28]	@ (8012c24 <disk_read+0x3c>)
 8012c08:	4413      	add	r3, r2
 8012c0a:	7a18      	ldrb	r0, [r3, #8]
 8012c0c:	683b      	ldr	r3, [r7, #0]
 8012c0e:	687a      	ldr	r2, [r7, #4]
 8012c10:	68b9      	ldr	r1, [r7, #8]
 8012c12:	47a0      	blx	r4
 8012c14:	4603      	mov	r3, r0
 8012c16:	75fb      	strb	r3, [r7, #23]
  return res;
 8012c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	371c      	adds	r7, #28
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	bd90      	pop	{r4, r7, pc}
 8012c22:	bf00      	nop
 8012c24:	24002998 	.word	0x24002998

08012c28 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012c28:	b590      	push	{r4, r7, lr}
 8012c2a:	b087      	sub	sp, #28
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	60b9      	str	r1, [r7, #8]
 8012c30:	607a      	str	r2, [r7, #4]
 8012c32:	603b      	str	r3, [r7, #0]
 8012c34:	4603      	mov	r3, r0
 8012c36:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012c38:	7bfb      	ldrb	r3, [r7, #15]
 8012c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8012c64 <disk_write+0x3c>)
 8012c3c:	009b      	lsls	r3, r3, #2
 8012c3e:	4413      	add	r3, r2
 8012c40:	685b      	ldr	r3, [r3, #4]
 8012c42:	68dc      	ldr	r4, [r3, #12]
 8012c44:	7bfb      	ldrb	r3, [r7, #15]
 8012c46:	4a07      	ldr	r2, [pc, #28]	@ (8012c64 <disk_write+0x3c>)
 8012c48:	4413      	add	r3, r2
 8012c4a:	7a18      	ldrb	r0, [r3, #8]
 8012c4c:	683b      	ldr	r3, [r7, #0]
 8012c4e:	687a      	ldr	r2, [r7, #4]
 8012c50:	68b9      	ldr	r1, [r7, #8]
 8012c52:	47a0      	blx	r4
 8012c54:	4603      	mov	r3, r0
 8012c56:	75fb      	strb	r3, [r7, #23]
  return res;
 8012c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	371c      	adds	r7, #28
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	bd90      	pop	{r4, r7, pc}
 8012c62:	bf00      	nop
 8012c64:	24002998 	.word	0x24002998

08012c68 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b084      	sub	sp, #16
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	4603      	mov	r3, r0
 8012c70:	603a      	str	r2, [r7, #0]
 8012c72:	71fb      	strb	r3, [r7, #7]
 8012c74:	460b      	mov	r3, r1
 8012c76:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012c78:	79fb      	ldrb	r3, [r7, #7]
 8012c7a:	4a09      	ldr	r2, [pc, #36]	@ (8012ca0 <disk_ioctl+0x38>)
 8012c7c:	009b      	lsls	r3, r3, #2
 8012c7e:	4413      	add	r3, r2
 8012c80:	685b      	ldr	r3, [r3, #4]
 8012c82:	691b      	ldr	r3, [r3, #16]
 8012c84:	79fa      	ldrb	r2, [r7, #7]
 8012c86:	4906      	ldr	r1, [pc, #24]	@ (8012ca0 <disk_ioctl+0x38>)
 8012c88:	440a      	add	r2, r1
 8012c8a:	7a10      	ldrb	r0, [r2, #8]
 8012c8c:	79b9      	ldrb	r1, [r7, #6]
 8012c8e:	683a      	ldr	r2, [r7, #0]
 8012c90:	4798      	blx	r3
 8012c92:	4603      	mov	r3, r0
 8012c94:	73fb      	strb	r3, [r7, #15]
  return res;
 8012c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c98:	4618      	mov	r0, r3
 8012c9a:	3710      	adds	r7, #16
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	bd80      	pop	{r7, pc}
 8012ca0:	24002998 	.word	0x24002998

08012ca4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012ca4:	b480      	push	{r7}
 8012ca6:	b085      	sub	sp, #20
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	3301      	adds	r3, #1
 8012cb0:	781b      	ldrb	r3, [r3, #0]
 8012cb2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012cb4:	89fb      	ldrh	r3, [r7, #14]
 8012cb6:	021b      	lsls	r3, r3, #8
 8012cb8:	b21a      	sxth	r2, r3
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	781b      	ldrb	r3, [r3, #0]
 8012cbe:	b21b      	sxth	r3, r3
 8012cc0:	4313      	orrs	r3, r2
 8012cc2:	b21b      	sxth	r3, r3
 8012cc4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8012cc6:	89fb      	ldrh	r3, [r7, #14]
}
 8012cc8:	4618      	mov	r0, r3
 8012cca:	3714      	adds	r7, #20
 8012ccc:	46bd      	mov	sp, r7
 8012cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd2:	4770      	bx	lr

08012cd4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8012cd4:	b480      	push	{r7}
 8012cd6:	b085      	sub	sp, #20
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	3303      	adds	r3, #3
 8012ce0:	781b      	ldrb	r3, [r3, #0]
 8012ce2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	021b      	lsls	r3, r3, #8
 8012ce8:	687a      	ldr	r2, [r7, #4]
 8012cea:	3202      	adds	r2, #2
 8012cec:	7812      	ldrb	r2, [r2, #0]
 8012cee:	4313      	orrs	r3, r2
 8012cf0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	021b      	lsls	r3, r3, #8
 8012cf6:	687a      	ldr	r2, [r7, #4]
 8012cf8:	3201      	adds	r2, #1
 8012cfa:	7812      	ldrb	r2, [r2, #0]
 8012cfc:	4313      	orrs	r3, r2
 8012cfe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	021b      	lsls	r3, r3, #8
 8012d04:	687a      	ldr	r2, [r7, #4]
 8012d06:	7812      	ldrb	r2, [r2, #0]
 8012d08:	4313      	orrs	r3, r2
 8012d0a:	60fb      	str	r3, [r7, #12]
	return rv;
 8012d0c:	68fb      	ldr	r3, [r7, #12]
}
 8012d0e:	4618      	mov	r0, r3
 8012d10:	3714      	adds	r7, #20
 8012d12:	46bd      	mov	sp, r7
 8012d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d18:	4770      	bx	lr

08012d1a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8012d1a:	b480      	push	{r7}
 8012d1c:	b083      	sub	sp, #12
 8012d1e:	af00      	add	r7, sp, #0
 8012d20:	6078      	str	r0, [r7, #4]
 8012d22:	460b      	mov	r3, r1
 8012d24:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	1c5a      	adds	r2, r3, #1
 8012d2a:	607a      	str	r2, [r7, #4]
 8012d2c:	887a      	ldrh	r2, [r7, #2]
 8012d2e:	b2d2      	uxtb	r2, r2
 8012d30:	701a      	strb	r2, [r3, #0]
 8012d32:	887b      	ldrh	r3, [r7, #2]
 8012d34:	0a1b      	lsrs	r3, r3, #8
 8012d36:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	1c5a      	adds	r2, r3, #1
 8012d3c:	607a      	str	r2, [r7, #4]
 8012d3e:	887a      	ldrh	r2, [r7, #2]
 8012d40:	b2d2      	uxtb	r2, r2
 8012d42:	701a      	strb	r2, [r3, #0]
}
 8012d44:	bf00      	nop
 8012d46:	370c      	adds	r7, #12
 8012d48:	46bd      	mov	sp, r7
 8012d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d4e:	4770      	bx	lr

08012d50 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012d50:	b480      	push	{r7}
 8012d52:	b083      	sub	sp, #12
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	6078      	str	r0, [r7, #4]
 8012d58:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	1c5a      	adds	r2, r3, #1
 8012d5e:	607a      	str	r2, [r7, #4]
 8012d60:	683a      	ldr	r2, [r7, #0]
 8012d62:	b2d2      	uxtb	r2, r2
 8012d64:	701a      	strb	r2, [r3, #0]
 8012d66:	683b      	ldr	r3, [r7, #0]
 8012d68:	0a1b      	lsrs	r3, r3, #8
 8012d6a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	1c5a      	adds	r2, r3, #1
 8012d70:	607a      	str	r2, [r7, #4]
 8012d72:	683a      	ldr	r2, [r7, #0]
 8012d74:	b2d2      	uxtb	r2, r2
 8012d76:	701a      	strb	r2, [r3, #0]
 8012d78:	683b      	ldr	r3, [r7, #0]
 8012d7a:	0a1b      	lsrs	r3, r3, #8
 8012d7c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	1c5a      	adds	r2, r3, #1
 8012d82:	607a      	str	r2, [r7, #4]
 8012d84:	683a      	ldr	r2, [r7, #0]
 8012d86:	b2d2      	uxtb	r2, r2
 8012d88:	701a      	strb	r2, [r3, #0]
 8012d8a:	683b      	ldr	r3, [r7, #0]
 8012d8c:	0a1b      	lsrs	r3, r3, #8
 8012d8e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	1c5a      	adds	r2, r3, #1
 8012d94:	607a      	str	r2, [r7, #4]
 8012d96:	683a      	ldr	r2, [r7, #0]
 8012d98:	b2d2      	uxtb	r2, r2
 8012d9a:	701a      	strb	r2, [r3, #0]
}
 8012d9c:	bf00      	nop
 8012d9e:	370c      	adds	r7, #12
 8012da0:	46bd      	mov	sp, r7
 8012da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da6:	4770      	bx	lr

08012da8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012da8:	b480      	push	{r7}
 8012daa:	b087      	sub	sp, #28
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	60f8      	str	r0, [r7, #12]
 8012db0:	60b9      	str	r1, [r7, #8]
 8012db2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012db8:	68bb      	ldr	r3, [r7, #8]
 8012dba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d00d      	beq.n	8012dde <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8012dc2:	693a      	ldr	r2, [r7, #16]
 8012dc4:	1c53      	adds	r3, r2, #1
 8012dc6:	613b      	str	r3, [r7, #16]
 8012dc8:	697b      	ldr	r3, [r7, #20]
 8012dca:	1c59      	adds	r1, r3, #1
 8012dcc:	6179      	str	r1, [r7, #20]
 8012dce:	7812      	ldrb	r2, [r2, #0]
 8012dd0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	3b01      	subs	r3, #1
 8012dd6:	607b      	str	r3, [r7, #4]
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d1f1      	bne.n	8012dc2 <mem_cpy+0x1a>
	}
}
 8012dde:	bf00      	nop
 8012de0:	371c      	adds	r7, #28
 8012de2:	46bd      	mov	sp, r7
 8012de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de8:	4770      	bx	lr

08012dea <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8012dea:	b480      	push	{r7}
 8012dec:	b087      	sub	sp, #28
 8012dee:	af00      	add	r7, sp, #0
 8012df0:	60f8      	str	r0, [r7, #12]
 8012df2:	60b9      	str	r1, [r7, #8]
 8012df4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8012dfa:	697b      	ldr	r3, [r7, #20]
 8012dfc:	1c5a      	adds	r2, r3, #1
 8012dfe:	617a      	str	r2, [r7, #20]
 8012e00:	68ba      	ldr	r2, [r7, #8]
 8012e02:	b2d2      	uxtb	r2, r2
 8012e04:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	3b01      	subs	r3, #1
 8012e0a:	607b      	str	r3, [r7, #4]
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d1f3      	bne.n	8012dfa <mem_set+0x10>
}
 8012e12:	bf00      	nop
 8012e14:	bf00      	nop
 8012e16:	371c      	adds	r7, #28
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1e:	4770      	bx	lr

08012e20 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8012e20:	b580      	push	{r7, lr}
 8012e22:	b082      	sub	sp, #8
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d009      	beq.n	8012e42 <lock_fs+0x22>
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	691b      	ldr	r3, [r3, #16]
 8012e32:	4618      	mov	r0, r3
 8012e34:	f000 fe6f 	bl	8013b16 <ff_req_grant>
 8012e38:	4603      	mov	r3, r0
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d001      	beq.n	8012e42 <lock_fs+0x22>
 8012e3e:	2301      	movs	r3, #1
 8012e40:	e000      	b.n	8012e44 <lock_fs+0x24>
 8012e42:	2300      	movs	r3, #0
}
 8012e44:	4618      	mov	r0, r3
 8012e46:	3708      	adds	r7, #8
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	bd80      	pop	{r7, pc}

08012e4c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8012e4c:	b580      	push	{r7, lr}
 8012e4e:	b082      	sub	sp, #8
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	6078      	str	r0, [r7, #4]
 8012e54:	460b      	mov	r3, r1
 8012e56:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d00d      	beq.n	8012e7a <unlock_fs+0x2e>
 8012e5e:	78fb      	ldrb	r3, [r7, #3]
 8012e60:	2b0c      	cmp	r3, #12
 8012e62:	d00a      	beq.n	8012e7a <unlock_fs+0x2e>
 8012e64:	78fb      	ldrb	r3, [r7, #3]
 8012e66:	2b0b      	cmp	r3, #11
 8012e68:	d007      	beq.n	8012e7a <unlock_fs+0x2e>
 8012e6a:	78fb      	ldrb	r3, [r7, #3]
 8012e6c:	2b0f      	cmp	r3, #15
 8012e6e:	d004      	beq.n	8012e7a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	691b      	ldr	r3, [r3, #16]
 8012e74:	4618      	mov	r0, r3
 8012e76:	f000 fe63 	bl	8013b40 <ff_rel_grant>
	}
}
 8012e7a:	bf00      	nop
 8012e7c:	3708      	adds	r7, #8
 8012e7e:	46bd      	mov	sp, r7
 8012e80:	bd80      	pop	{r7, pc}

08012e82 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8012e82:	b580      	push	{r7, lr}
 8012e84:	b086      	sub	sp, #24
 8012e86:	af00      	add	r7, sp, #0
 8012e88:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8012e8a:	2300      	movs	r3, #0
 8012e8c:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	78db      	ldrb	r3, [r3, #3]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d034      	beq.n	8012f00 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012e9a:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	7858      	ldrb	r0, [r3, #1]
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8012ea6:	2301      	movs	r3, #1
 8012ea8:	697a      	ldr	r2, [r7, #20]
 8012eaa:	f7ff febd 	bl	8012c28 <disk_write>
 8012eae:	4603      	mov	r3, r0
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d002      	beq.n	8012eba <sync_window+0x38>
			res = FR_DISK_ERR;
 8012eb4:	2301      	movs	r3, #1
 8012eb6:	73fb      	strb	r3, [r7, #15]
 8012eb8:	e022      	b.n	8012f00 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	2200      	movs	r2, #0
 8012ebe:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ec4:	697a      	ldr	r2, [r7, #20]
 8012ec6:	1ad2      	subs	r2, r2, r3
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	6a1b      	ldr	r3, [r3, #32]
 8012ecc:	429a      	cmp	r2, r3
 8012ece:	d217      	bcs.n	8012f00 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	789b      	ldrb	r3, [r3, #2]
 8012ed4:	613b      	str	r3, [r7, #16]
 8012ed6:	e010      	b.n	8012efa <sync_window+0x78>
					wsect += fs->fsize;
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	6a1b      	ldr	r3, [r3, #32]
 8012edc:	697a      	ldr	r2, [r7, #20]
 8012ede:	4413      	add	r3, r2
 8012ee0:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	7858      	ldrb	r0, [r3, #1]
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8012eec:	2301      	movs	r3, #1
 8012eee:	697a      	ldr	r2, [r7, #20]
 8012ef0:	f7ff fe9a 	bl	8012c28 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012ef4:	693b      	ldr	r3, [r7, #16]
 8012ef6:	3b01      	subs	r3, #1
 8012ef8:	613b      	str	r3, [r7, #16]
 8012efa:	693b      	ldr	r3, [r7, #16]
 8012efc:	2b01      	cmp	r3, #1
 8012efe:	d8eb      	bhi.n	8012ed8 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8012f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f02:	4618      	mov	r0, r3
 8012f04:	3718      	adds	r7, #24
 8012f06:	46bd      	mov	sp, r7
 8012f08:	bd80      	pop	{r7, pc}

08012f0a <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8012f0a:	b580      	push	{r7, lr}
 8012f0c:	b084      	sub	sp, #16
 8012f0e:	af00      	add	r7, sp, #0
 8012f10:	6078      	str	r0, [r7, #4]
 8012f12:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8012f14:	2300      	movs	r3, #0
 8012f16:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012f1c:	683a      	ldr	r2, [r7, #0]
 8012f1e:	429a      	cmp	r2, r3
 8012f20:	d01b      	beq.n	8012f5a <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8012f22:	6878      	ldr	r0, [r7, #4]
 8012f24:	f7ff ffad 	bl	8012e82 <sync_window>
 8012f28:	4603      	mov	r3, r0
 8012f2a:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8012f2c:	7bfb      	ldrb	r3, [r7, #15]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d113      	bne.n	8012f5a <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	7858      	ldrb	r0, [r3, #1]
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8012f3c:	2301      	movs	r3, #1
 8012f3e:	683a      	ldr	r2, [r7, #0]
 8012f40:	f7ff fe52 	bl	8012be8 <disk_read>
 8012f44:	4603      	mov	r3, r0
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d004      	beq.n	8012f54 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8012f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8012f4e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8012f50:	2301      	movs	r3, #1
 8012f52:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	683a      	ldr	r2, [r7, #0]
 8012f58:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8012f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	3710      	adds	r7, #16
 8012f60:	46bd      	mov	sp, r7
 8012f62:	bd80      	pop	{r7, pc}

08012f64 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8012f64:	b580      	push	{r7, lr}
 8012f66:	b084      	sub	sp, #16
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8012f6c:	6878      	ldr	r0, [r7, #4]
 8012f6e:	f7ff ff88 	bl	8012e82 <sync_window>
 8012f72:	4603      	mov	r3, r0
 8012f74:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012f76:	7bfb      	ldrb	r3, [r7, #15]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d158      	bne.n	801302e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	781b      	ldrb	r3, [r3, #0]
 8012f80:	2b03      	cmp	r3, #3
 8012f82:	d148      	bne.n	8013016 <sync_fs+0xb2>
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	791b      	ldrb	r3, [r3, #4]
 8012f88:	2b01      	cmp	r3, #1
 8012f8a:	d144      	bne.n	8013016 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	3338      	adds	r3, #56	@ 0x38
 8012f90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012f94:	2100      	movs	r1, #0
 8012f96:	4618      	mov	r0, r3
 8012f98:	f7ff ff27 	bl	8012dea <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	3338      	adds	r3, #56	@ 0x38
 8012fa0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8012fa4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8012fa8:	4618      	mov	r0, r3
 8012faa:	f7ff feb6 	bl	8012d1a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	3338      	adds	r3, #56	@ 0x38
 8012fb2:	4921      	ldr	r1, [pc, #132]	@ (8013038 <sync_fs+0xd4>)
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	f7ff fecb 	bl	8012d50 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	3338      	adds	r3, #56	@ 0x38
 8012fbe:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8012fc2:	491e      	ldr	r1, [pc, #120]	@ (801303c <sync_fs+0xd8>)
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	f7ff fec3 	bl	8012d50 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	3338      	adds	r3, #56	@ 0x38
 8012fce:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	699b      	ldr	r3, [r3, #24]
 8012fd6:	4619      	mov	r1, r3
 8012fd8:	4610      	mov	r0, r2
 8012fda:	f7ff feb9 	bl	8012d50 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	3338      	adds	r3, #56	@ 0x38
 8012fe2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	695b      	ldr	r3, [r3, #20]
 8012fea:	4619      	mov	r1, r3
 8012fec:	4610      	mov	r0, r2
 8012fee:	f7ff feaf 	bl	8012d50 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ff6:	1c5a      	adds	r2, r3, #1
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	7858      	ldrb	r0, [r3, #1]
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801300a:	2301      	movs	r3, #1
 801300c:	f7ff fe0c 	bl	8012c28 <disk_write>
			fs->fsi_flag = 0;
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	2200      	movs	r2, #0
 8013014:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	785b      	ldrb	r3, [r3, #1]
 801301a:	2200      	movs	r2, #0
 801301c:	2100      	movs	r1, #0
 801301e:	4618      	mov	r0, r3
 8013020:	f7ff fe22 	bl	8012c68 <disk_ioctl>
 8013024:	4603      	mov	r3, r0
 8013026:	2b00      	cmp	r3, #0
 8013028:	d001      	beq.n	801302e <sync_fs+0xca>
 801302a:	2301      	movs	r3, #1
 801302c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801302e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013030:	4618      	mov	r0, r3
 8013032:	3710      	adds	r7, #16
 8013034:	46bd      	mov	sp, r7
 8013036:	bd80      	pop	{r7, pc}
 8013038:	41615252 	.word	0x41615252
 801303c:	61417272 	.word	0x61417272

08013040 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8013040:	b480      	push	{r7}
 8013042:	b083      	sub	sp, #12
 8013044:	af00      	add	r7, sp, #0
 8013046:	6078      	str	r0, [r7, #4]
 8013048:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801304a:	683b      	ldr	r3, [r7, #0]
 801304c:	3b02      	subs	r3, #2
 801304e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	69db      	ldr	r3, [r3, #28]
 8013054:	3b02      	subs	r3, #2
 8013056:	683a      	ldr	r2, [r7, #0]
 8013058:	429a      	cmp	r2, r3
 801305a:	d301      	bcc.n	8013060 <clust2sect+0x20>
 801305c:	2300      	movs	r3, #0
 801305e:	e008      	b.n	8013072 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	895b      	ldrh	r3, [r3, #10]
 8013064:	461a      	mov	r2, r3
 8013066:	683b      	ldr	r3, [r7, #0]
 8013068:	fb03 f202 	mul.w	r2, r3, r2
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013070:	4413      	add	r3, r2
}
 8013072:	4618      	mov	r0, r3
 8013074:	370c      	adds	r7, #12
 8013076:	46bd      	mov	sp, r7
 8013078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801307c:	4770      	bx	lr

0801307e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801307e:	b580      	push	{r7, lr}
 8013080:	b086      	sub	sp, #24
 8013082:	af00      	add	r7, sp, #0
 8013084:	6078      	str	r0, [r7, #4]
 8013086:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801308e:	683b      	ldr	r3, [r7, #0]
 8013090:	2b01      	cmp	r3, #1
 8013092:	d904      	bls.n	801309e <get_fat+0x20>
 8013094:	693b      	ldr	r3, [r7, #16]
 8013096:	69db      	ldr	r3, [r3, #28]
 8013098:	683a      	ldr	r2, [r7, #0]
 801309a:	429a      	cmp	r2, r3
 801309c:	d302      	bcc.n	80130a4 <get_fat+0x26>
		val = 1;	/* Internal error */
 801309e:	2301      	movs	r3, #1
 80130a0:	617b      	str	r3, [r7, #20]
 80130a2:	e08e      	b.n	80131c2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80130a4:	f04f 33ff 	mov.w	r3, #4294967295
 80130a8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80130aa:	693b      	ldr	r3, [r7, #16]
 80130ac:	781b      	ldrb	r3, [r3, #0]
 80130ae:	2b03      	cmp	r3, #3
 80130b0:	d061      	beq.n	8013176 <get_fat+0xf8>
 80130b2:	2b03      	cmp	r3, #3
 80130b4:	dc7b      	bgt.n	80131ae <get_fat+0x130>
 80130b6:	2b01      	cmp	r3, #1
 80130b8:	d002      	beq.n	80130c0 <get_fat+0x42>
 80130ba:	2b02      	cmp	r3, #2
 80130bc:	d041      	beq.n	8013142 <get_fat+0xc4>
 80130be:	e076      	b.n	80131ae <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80130c0:	683b      	ldr	r3, [r7, #0]
 80130c2:	60fb      	str	r3, [r7, #12]
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	085b      	lsrs	r3, r3, #1
 80130c8:	68fa      	ldr	r2, [r7, #12]
 80130ca:	4413      	add	r3, r2
 80130cc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80130ce:	693b      	ldr	r3, [r7, #16]
 80130d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	0a5b      	lsrs	r3, r3, #9
 80130d6:	4413      	add	r3, r2
 80130d8:	4619      	mov	r1, r3
 80130da:	6938      	ldr	r0, [r7, #16]
 80130dc:	f7ff ff15 	bl	8012f0a <move_window>
 80130e0:	4603      	mov	r3, r0
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d166      	bne.n	80131b4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	1c5a      	adds	r2, r3, #1
 80130ea:	60fa      	str	r2, [r7, #12]
 80130ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80130f0:	693a      	ldr	r2, [r7, #16]
 80130f2:	4413      	add	r3, r2
 80130f4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80130f8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80130fa:	693b      	ldr	r3, [r7, #16]
 80130fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	0a5b      	lsrs	r3, r3, #9
 8013102:	4413      	add	r3, r2
 8013104:	4619      	mov	r1, r3
 8013106:	6938      	ldr	r0, [r7, #16]
 8013108:	f7ff feff 	bl	8012f0a <move_window>
 801310c:	4603      	mov	r3, r0
 801310e:	2b00      	cmp	r3, #0
 8013110:	d152      	bne.n	80131b8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013118:	693a      	ldr	r2, [r7, #16]
 801311a:	4413      	add	r3, r2
 801311c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013120:	021b      	lsls	r3, r3, #8
 8013122:	68ba      	ldr	r2, [r7, #8]
 8013124:	4313      	orrs	r3, r2
 8013126:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8013128:	683b      	ldr	r3, [r7, #0]
 801312a:	f003 0301 	and.w	r3, r3, #1
 801312e:	2b00      	cmp	r3, #0
 8013130:	d002      	beq.n	8013138 <get_fat+0xba>
 8013132:	68bb      	ldr	r3, [r7, #8]
 8013134:	091b      	lsrs	r3, r3, #4
 8013136:	e002      	b.n	801313e <get_fat+0xc0>
 8013138:	68bb      	ldr	r3, [r7, #8]
 801313a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801313e:	617b      	str	r3, [r7, #20]
			break;
 8013140:	e03f      	b.n	80131c2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013142:	693b      	ldr	r3, [r7, #16]
 8013144:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013146:	683b      	ldr	r3, [r7, #0]
 8013148:	0a1b      	lsrs	r3, r3, #8
 801314a:	4413      	add	r3, r2
 801314c:	4619      	mov	r1, r3
 801314e:	6938      	ldr	r0, [r7, #16]
 8013150:	f7ff fedb 	bl	8012f0a <move_window>
 8013154:	4603      	mov	r3, r0
 8013156:	2b00      	cmp	r3, #0
 8013158:	d130      	bne.n	80131bc <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801315a:	693b      	ldr	r3, [r7, #16]
 801315c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8013160:	683b      	ldr	r3, [r7, #0]
 8013162:	005b      	lsls	r3, r3, #1
 8013164:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8013168:	4413      	add	r3, r2
 801316a:	4618      	mov	r0, r3
 801316c:	f7ff fd9a 	bl	8012ca4 <ld_word>
 8013170:	4603      	mov	r3, r0
 8013172:	617b      	str	r3, [r7, #20]
			break;
 8013174:	e025      	b.n	80131c2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013176:	693b      	ldr	r3, [r7, #16]
 8013178:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801317a:	683b      	ldr	r3, [r7, #0]
 801317c:	09db      	lsrs	r3, r3, #7
 801317e:	4413      	add	r3, r2
 8013180:	4619      	mov	r1, r3
 8013182:	6938      	ldr	r0, [r7, #16]
 8013184:	f7ff fec1 	bl	8012f0a <move_window>
 8013188:	4603      	mov	r3, r0
 801318a:	2b00      	cmp	r3, #0
 801318c:	d118      	bne.n	80131c0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801318e:	693b      	ldr	r3, [r7, #16]
 8013190:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8013194:	683b      	ldr	r3, [r7, #0]
 8013196:	009b      	lsls	r3, r3, #2
 8013198:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801319c:	4413      	add	r3, r2
 801319e:	4618      	mov	r0, r3
 80131a0:	f7ff fd98 	bl	8012cd4 <ld_dword>
 80131a4:	4603      	mov	r3, r0
 80131a6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80131aa:	617b      	str	r3, [r7, #20]
			break;
 80131ac:	e009      	b.n	80131c2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80131ae:	2301      	movs	r3, #1
 80131b0:	617b      	str	r3, [r7, #20]
 80131b2:	e006      	b.n	80131c2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80131b4:	bf00      	nop
 80131b6:	e004      	b.n	80131c2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80131b8:	bf00      	nop
 80131ba:	e002      	b.n	80131c2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80131bc:	bf00      	nop
 80131be:	e000      	b.n	80131c2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80131c0:	bf00      	nop
		}
	}

	return val;
 80131c2:	697b      	ldr	r3, [r7, #20]
}
 80131c4:	4618      	mov	r0, r3
 80131c6:	3718      	adds	r7, #24
 80131c8:	46bd      	mov	sp, r7
 80131ca:	bd80      	pop	{r7, pc}

080131cc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80131cc:	b590      	push	{r4, r7, lr}
 80131ce:	b089      	sub	sp, #36	@ 0x24
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	60f8      	str	r0, [r7, #12]
 80131d4:	60b9      	str	r1, [r7, #8]
 80131d6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80131d8:	2302      	movs	r3, #2
 80131da:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80131dc:	68bb      	ldr	r3, [r7, #8]
 80131de:	2b01      	cmp	r3, #1
 80131e0:	f240 80d9 	bls.w	8013396 <put_fat+0x1ca>
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	69db      	ldr	r3, [r3, #28]
 80131e8:	68ba      	ldr	r2, [r7, #8]
 80131ea:	429a      	cmp	r2, r3
 80131ec:	f080 80d3 	bcs.w	8013396 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	781b      	ldrb	r3, [r3, #0]
 80131f4:	2b03      	cmp	r3, #3
 80131f6:	f000 8096 	beq.w	8013326 <put_fat+0x15a>
 80131fa:	2b03      	cmp	r3, #3
 80131fc:	f300 80cb 	bgt.w	8013396 <put_fat+0x1ca>
 8013200:	2b01      	cmp	r3, #1
 8013202:	d002      	beq.n	801320a <put_fat+0x3e>
 8013204:	2b02      	cmp	r3, #2
 8013206:	d06e      	beq.n	80132e6 <put_fat+0x11a>
 8013208:	e0c5      	b.n	8013396 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801320a:	68bb      	ldr	r3, [r7, #8]
 801320c:	61bb      	str	r3, [r7, #24]
 801320e:	69bb      	ldr	r3, [r7, #24]
 8013210:	085b      	lsrs	r3, r3, #1
 8013212:	69ba      	ldr	r2, [r7, #24]
 8013214:	4413      	add	r3, r2
 8013216:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801321c:	69bb      	ldr	r3, [r7, #24]
 801321e:	0a5b      	lsrs	r3, r3, #9
 8013220:	4413      	add	r3, r2
 8013222:	4619      	mov	r1, r3
 8013224:	68f8      	ldr	r0, [r7, #12]
 8013226:	f7ff fe70 	bl	8012f0a <move_window>
 801322a:	4603      	mov	r3, r0
 801322c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801322e:	7ffb      	ldrb	r3, [r7, #31]
 8013230:	2b00      	cmp	r3, #0
 8013232:	f040 80a9 	bne.w	8013388 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801323c:	69bb      	ldr	r3, [r7, #24]
 801323e:	1c59      	adds	r1, r3, #1
 8013240:	61b9      	str	r1, [r7, #24]
 8013242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013246:	4413      	add	r3, r2
 8013248:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801324a:	68bb      	ldr	r3, [r7, #8]
 801324c:	f003 0301 	and.w	r3, r3, #1
 8013250:	2b00      	cmp	r3, #0
 8013252:	d00d      	beq.n	8013270 <put_fat+0xa4>
 8013254:	697b      	ldr	r3, [r7, #20]
 8013256:	781b      	ldrb	r3, [r3, #0]
 8013258:	b25b      	sxtb	r3, r3
 801325a:	f003 030f 	and.w	r3, r3, #15
 801325e:	b25a      	sxtb	r2, r3
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	b2db      	uxtb	r3, r3
 8013264:	011b      	lsls	r3, r3, #4
 8013266:	b25b      	sxtb	r3, r3
 8013268:	4313      	orrs	r3, r2
 801326a:	b25b      	sxtb	r3, r3
 801326c:	b2db      	uxtb	r3, r3
 801326e:	e001      	b.n	8013274 <put_fat+0xa8>
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	b2db      	uxtb	r3, r3
 8013274:	697a      	ldr	r2, [r7, #20]
 8013276:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	2201      	movs	r2, #1
 801327c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013282:	69bb      	ldr	r3, [r7, #24]
 8013284:	0a5b      	lsrs	r3, r3, #9
 8013286:	4413      	add	r3, r2
 8013288:	4619      	mov	r1, r3
 801328a:	68f8      	ldr	r0, [r7, #12]
 801328c:	f7ff fe3d 	bl	8012f0a <move_window>
 8013290:	4603      	mov	r3, r0
 8013292:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013294:	7ffb      	ldrb	r3, [r7, #31]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d178      	bne.n	801338c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80132a0:	69bb      	ldr	r3, [r7, #24]
 80132a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80132a6:	4413      	add	r3, r2
 80132a8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80132aa:	68bb      	ldr	r3, [r7, #8]
 80132ac:	f003 0301 	and.w	r3, r3, #1
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d003      	beq.n	80132bc <put_fat+0xf0>
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	091b      	lsrs	r3, r3, #4
 80132b8:	b2db      	uxtb	r3, r3
 80132ba:	e00e      	b.n	80132da <put_fat+0x10e>
 80132bc:	697b      	ldr	r3, [r7, #20]
 80132be:	781b      	ldrb	r3, [r3, #0]
 80132c0:	b25b      	sxtb	r3, r3
 80132c2:	f023 030f 	bic.w	r3, r3, #15
 80132c6:	b25a      	sxtb	r2, r3
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	0a1b      	lsrs	r3, r3, #8
 80132cc:	b25b      	sxtb	r3, r3
 80132ce:	f003 030f 	and.w	r3, r3, #15
 80132d2:	b25b      	sxtb	r3, r3
 80132d4:	4313      	orrs	r3, r2
 80132d6:	b25b      	sxtb	r3, r3
 80132d8:	b2db      	uxtb	r3, r3
 80132da:	697a      	ldr	r2, [r7, #20]
 80132dc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	2201      	movs	r2, #1
 80132e2:	70da      	strb	r2, [r3, #3]
			break;
 80132e4:	e057      	b.n	8013396 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80132ea:	68bb      	ldr	r3, [r7, #8]
 80132ec:	0a1b      	lsrs	r3, r3, #8
 80132ee:	4413      	add	r3, r2
 80132f0:	4619      	mov	r1, r3
 80132f2:	68f8      	ldr	r0, [r7, #12]
 80132f4:	f7ff fe09 	bl	8012f0a <move_window>
 80132f8:	4603      	mov	r3, r0
 80132fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80132fc:	7ffb      	ldrb	r3, [r7, #31]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d146      	bne.n	8013390 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8013308:	68bb      	ldr	r3, [r7, #8]
 801330a:	005b      	lsls	r3, r3, #1
 801330c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8013310:	4413      	add	r3, r2
 8013312:	687a      	ldr	r2, [r7, #4]
 8013314:	b292      	uxth	r2, r2
 8013316:	4611      	mov	r1, r2
 8013318:	4618      	mov	r0, r3
 801331a:	f7ff fcfe 	bl	8012d1a <st_word>
			fs->wflag = 1;
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	2201      	movs	r2, #1
 8013322:	70da      	strb	r2, [r3, #3]
			break;
 8013324:	e037      	b.n	8013396 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801332a:	68bb      	ldr	r3, [r7, #8]
 801332c:	09db      	lsrs	r3, r3, #7
 801332e:	4413      	add	r3, r2
 8013330:	4619      	mov	r1, r3
 8013332:	68f8      	ldr	r0, [r7, #12]
 8013334:	f7ff fde9 	bl	8012f0a <move_window>
 8013338:	4603      	mov	r3, r0
 801333a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801333c:	7ffb      	ldrb	r3, [r7, #31]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d128      	bne.n	8013394 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801334e:	68bb      	ldr	r3, [r7, #8]
 8013350:	009b      	lsls	r3, r3, #2
 8013352:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8013356:	4413      	add	r3, r2
 8013358:	4618      	mov	r0, r3
 801335a:	f7ff fcbb 	bl	8012cd4 <ld_dword>
 801335e:	4603      	mov	r3, r0
 8013360:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8013364:	4323      	orrs	r3, r4
 8013366:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801336e:	68bb      	ldr	r3, [r7, #8]
 8013370:	009b      	lsls	r3, r3, #2
 8013372:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8013376:	4413      	add	r3, r2
 8013378:	6879      	ldr	r1, [r7, #4]
 801337a:	4618      	mov	r0, r3
 801337c:	f7ff fce8 	bl	8012d50 <st_dword>
			fs->wflag = 1;
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	2201      	movs	r2, #1
 8013384:	70da      	strb	r2, [r3, #3]
			break;
 8013386:	e006      	b.n	8013396 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8013388:	bf00      	nop
 801338a:	e004      	b.n	8013396 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801338c:	bf00      	nop
 801338e:	e002      	b.n	8013396 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8013390:	bf00      	nop
 8013392:	e000      	b.n	8013396 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8013394:	bf00      	nop
		}
	}
	return res;
 8013396:	7ffb      	ldrb	r3, [r7, #31]
}
 8013398:	4618      	mov	r0, r3
 801339a:	3724      	adds	r7, #36	@ 0x24
 801339c:	46bd      	mov	sp, r7
 801339e:	bd90      	pop	{r4, r7, pc}

080133a0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b088      	sub	sp, #32
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	6078      	str	r0, [r7, #4]
 80133a8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80133b0:	683b      	ldr	r3, [r7, #0]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d10d      	bne.n	80133d2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80133b6:	693b      	ldr	r3, [r7, #16]
 80133b8:	695b      	ldr	r3, [r3, #20]
 80133ba:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80133bc:	69bb      	ldr	r3, [r7, #24]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d004      	beq.n	80133cc <create_chain+0x2c>
 80133c2:	693b      	ldr	r3, [r7, #16]
 80133c4:	69db      	ldr	r3, [r3, #28]
 80133c6:	69ba      	ldr	r2, [r7, #24]
 80133c8:	429a      	cmp	r2, r3
 80133ca:	d31b      	bcc.n	8013404 <create_chain+0x64>
 80133cc:	2301      	movs	r3, #1
 80133ce:	61bb      	str	r3, [r7, #24]
 80133d0:	e018      	b.n	8013404 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80133d2:	6839      	ldr	r1, [r7, #0]
 80133d4:	6878      	ldr	r0, [r7, #4]
 80133d6:	f7ff fe52 	bl	801307e <get_fat>
 80133da:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	2b01      	cmp	r3, #1
 80133e0:	d801      	bhi.n	80133e6 <create_chain+0x46>
 80133e2:	2301      	movs	r3, #1
 80133e4:	e070      	b.n	80134c8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133ec:	d101      	bne.n	80133f2 <create_chain+0x52>
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	e06a      	b.n	80134c8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80133f2:	693b      	ldr	r3, [r7, #16]
 80133f4:	69db      	ldr	r3, [r3, #28]
 80133f6:	68fa      	ldr	r2, [r7, #12]
 80133f8:	429a      	cmp	r2, r3
 80133fa:	d201      	bcs.n	8013400 <create_chain+0x60>
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	e063      	b.n	80134c8 <create_chain+0x128>
		scl = clst;
 8013400:	683b      	ldr	r3, [r7, #0]
 8013402:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8013404:	69bb      	ldr	r3, [r7, #24]
 8013406:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8013408:	69fb      	ldr	r3, [r7, #28]
 801340a:	3301      	adds	r3, #1
 801340c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801340e:	693b      	ldr	r3, [r7, #16]
 8013410:	69db      	ldr	r3, [r3, #28]
 8013412:	69fa      	ldr	r2, [r7, #28]
 8013414:	429a      	cmp	r2, r3
 8013416:	d307      	bcc.n	8013428 <create_chain+0x88>
				ncl = 2;
 8013418:	2302      	movs	r3, #2
 801341a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801341c:	69fa      	ldr	r2, [r7, #28]
 801341e:	69bb      	ldr	r3, [r7, #24]
 8013420:	429a      	cmp	r2, r3
 8013422:	d901      	bls.n	8013428 <create_chain+0x88>
 8013424:	2300      	movs	r3, #0
 8013426:	e04f      	b.n	80134c8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8013428:	69f9      	ldr	r1, [r7, #28]
 801342a:	6878      	ldr	r0, [r7, #4]
 801342c:	f7ff fe27 	bl	801307e <get_fat>
 8013430:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	2b00      	cmp	r3, #0
 8013436:	d00e      	beq.n	8013456 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	2b01      	cmp	r3, #1
 801343c:	d003      	beq.n	8013446 <create_chain+0xa6>
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013444:	d101      	bne.n	801344a <create_chain+0xaa>
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	e03e      	b.n	80134c8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801344a:	69fa      	ldr	r2, [r7, #28]
 801344c:	69bb      	ldr	r3, [r7, #24]
 801344e:	429a      	cmp	r2, r3
 8013450:	d1da      	bne.n	8013408 <create_chain+0x68>
 8013452:	2300      	movs	r3, #0
 8013454:	e038      	b.n	80134c8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8013456:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8013458:	f04f 32ff 	mov.w	r2, #4294967295
 801345c:	69f9      	ldr	r1, [r7, #28]
 801345e:	6938      	ldr	r0, [r7, #16]
 8013460:	f7ff feb4 	bl	80131cc <put_fat>
 8013464:	4603      	mov	r3, r0
 8013466:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8013468:	7dfb      	ldrb	r3, [r7, #23]
 801346a:	2b00      	cmp	r3, #0
 801346c:	d109      	bne.n	8013482 <create_chain+0xe2>
 801346e:	683b      	ldr	r3, [r7, #0]
 8013470:	2b00      	cmp	r3, #0
 8013472:	d006      	beq.n	8013482 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8013474:	69fa      	ldr	r2, [r7, #28]
 8013476:	6839      	ldr	r1, [r7, #0]
 8013478:	6938      	ldr	r0, [r7, #16]
 801347a:	f7ff fea7 	bl	80131cc <put_fat>
 801347e:	4603      	mov	r3, r0
 8013480:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8013482:	7dfb      	ldrb	r3, [r7, #23]
 8013484:	2b00      	cmp	r3, #0
 8013486:	d116      	bne.n	80134b6 <create_chain+0x116>
		fs->last_clst = ncl;
 8013488:	693b      	ldr	r3, [r7, #16]
 801348a:	69fa      	ldr	r2, [r7, #28]
 801348c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801348e:	693b      	ldr	r3, [r7, #16]
 8013490:	699a      	ldr	r2, [r3, #24]
 8013492:	693b      	ldr	r3, [r7, #16]
 8013494:	69db      	ldr	r3, [r3, #28]
 8013496:	3b02      	subs	r3, #2
 8013498:	429a      	cmp	r2, r3
 801349a:	d804      	bhi.n	80134a6 <create_chain+0x106>
 801349c:	693b      	ldr	r3, [r7, #16]
 801349e:	699b      	ldr	r3, [r3, #24]
 80134a0:	1e5a      	subs	r2, r3, #1
 80134a2:	693b      	ldr	r3, [r7, #16]
 80134a4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80134a6:	693b      	ldr	r3, [r7, #16]
 80134a8:	791b      	ldrb	r3, [r3, #4]
 80134aa:	f043 0301 	orr.w	r3, r3, #1
 80134ae:	b2da      	uxtb	r2, r3
 80134b0:	693b      	ldr	r3, [r7, #16]
 80134b2:	711a      	strb	r2, [r3, #4]
 80134b4:	e007      	b.n	80134c6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80134b6:	7dfb      	ldrb	r3, [r7, #23]
 80134b8:	2b01      	cmp	r3, #1
 80134ba:	d102      	bne.n	80134c2 <create_chain+0x122>
 80134bc:	f04f 33ff 	mov.w	r3, #4294967295
 80134c0:	e000      	b.n	80134c4 <create_chain+0x124>
 80134c2:	2301      	movs	r3, #1
 80134c4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80134c6:	69fb      	ldr	r3, [r7, #28]
}
 80134c8:	4618      	mov	r0, r3
 80134ca:	3720      	adds	r7, #32
 80134cc:	46bd      	mov	sp, r7
 80134ce:	bd80      	pop	{r7, pc}

080134d0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80134d0:	b480      	push	{r7}
 80134d2:	b087      	sub	sp, #28
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	6078      	str	r0, [r7, #4]
 80134d8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134e4:	3304      	adds	r3, #4
 80134e6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80134e8:	683b      	ldr	r3, [r7, #0]
 80134ea:	0a5b      	lsrs	r3, r3, #9
 80134ec:	68fa      	ldr	r2, [r7, #12]
 80134ee:	8952      	ldrh	r2, [r2, #10]
 80134f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80134f4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80134f6:	693b      	ldr	r3, [r7, #16]
 80134f8:	1d1a      	adds	r2, r3, #4
 80134fa:	613a      	str	r2, [r7, #16]
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013500:	68bb      	ldr	r3, [r7, #8]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d101      	bne.n	801350a <clmt_clust+0x3a>
 8013506:	2300      	movs	r3, #0
 8013508:	e010      	b.n	801352c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801350a:	697a      	ldr	r2, [r7, #20]
 801350c:	68bb      	ldr	r3, [r7, #8]
 801350e:	429a      	cmp	r2, r3
 8013510:	d307      	bcc.n	8013522 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8013512:	697a      	ldr	r2, [r7, #20]
 8013514:	68bb      	ldr	r3, [r7, #8]
 8013516:	1ad3      	subs	r3, r2, r3
 8013518:	617b      	str	r3, [r7, #20]
 801351a:	693b      	ldr	r3, [r7, #16]
 801351c:	3304      	adds	r3, #4
 801351e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013520:	e7e9      	b.n	80134f6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8013522:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8013524:	693b      	ldr	r3, [r7, #16]
 8013526:	681a      	ldr	r2, [r3, #0]
 8013528:	697b      	ldr	r3, [r7, #20]
 801352a:	4413      	add	r3, r2
}
 801352c:	4618      	mov	r0, r3
 801352e:	371c      	adds	r7, #28
 8013530:	46bd      	mov	sp, r7
 8013532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013536:	4770      	bx	lr

08013538 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8013538:	b580      	push	{r7, lr}
 801353a:	b084      	sub	sp, #16
 801353c:	af00      	add	r7, sp, #0
 801353e:	60f8      	str	r0, [r7, #12]
 8013540:	60b9      	str	r1, [r7, #8]
 8013542:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8013544:	68bb      	ldr	r3, [r7, #8]
 8013546:	331a      	adds	r3, #26
 8013548:	687a      	ldr	r2, [r7, #4]
 801354a:	b292      	uxth	r2, r2
 801354c:	4611      	mov	r1, r2
 801354e:	4618      	mov	r0, r3
 8013550:	f7ff fbe3 	bl	8012d1a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	781b      	ldrb	r3, [r3, #0]
 8013558:	2b03      	cmp	r3, #3
 801355a:	d109      	bne.n	8013570 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801355c:	68bb      	ldr	r3, [r7, #8]
 801355e:	f103 0214 	add.w	r2, r3, #20
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	0c1b      	lsrs	r3, r3, #16
 8013566:	b29b      	uxth	r3, r3
 8013568:	4619      	mov	r1, r3
 801356a:	4610      	mov	r0, r2
 801356c:	f7ff fbd5 	bl	8012d1a <st_word>
	}
}
 8013570:	bf00      	nop
 8013572:	3710      	adds	r7, #16
 8013574:	46bd      	mov	sp, r7
 8013576:	bd80      	pop	{r7, pc}

08013578 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013578:	b580      	push	{r7, lr}
 801357a:	b084      	sub	sp, #16
 801357c:	af00      	add	r7, sp, #0
 801357e:	6078      	str	r0, [r7, #4]
 8013580:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013582:	2309      	movs	r3, #9
 8013584:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d02e      	beq.n	80135ea <validate+0x72>
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d02a      	beq.n	80135ea <validate+0x72>
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	781b      	ldrb	r3, [r3, #0]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d025      	beq.n	80135ea <validate+0x72>
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	889a      	ldrh	r2, [r3, #4]
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	88db      	ldrh	r3, [r3, #6]
 80135a8:	429a      	cmp	r2, r3
 80135aa:	d11e      	bne.n	80135ea <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	4618      	mov	r0, r3
 80135b2:	f7ff fc35 	bl	8012e20 <lock_fs>
 80135b6:	4603      	mov	r3, r0
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d014      	beq.n	80135e6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	785b      	ldrb	r3, [r3, #1]
 80135c2:	4618      	mov	r0, r3
 80135c4:	f7ff faf6 	bl	8012bb4 <disk_status>
 80135c8:	4603      	mov	r3, r0
 80135ca:	f003 0301 	and.w	r3, r3, #1
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d102      	bne.n	80135d8 <validate+0x60>
				res = FR_OK;
 80135d2:	2300      	movs	r3, #0
 80135d4:	73fb      	strb	r3, [r7, #15]
 80135d6:	e008      	b.n	80135ea <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	2100      	movs	r1, #0
 80135de:	4618      	mov	r0, r3
 80135e0:	f7ff fc34 	bl	8012e4c <unlock_fs>
 80135e4:	e001      	b.n	80135ea <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80135e6:	230f      	movs	r3, #15
 80135e8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80135ea:	7bfb      	ldrb	r3, [r7, #15]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d102      	bne.n	80135f6 <validate+0x7e>
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	e000      	b.n	80135f8 <validate+0x80>
 80135f6:	2300      	movs	r3, #0
 80135f8:	683a      	ldr	r2, [r7, #0]
 80135fa:	6013      	str	r3, [r2, #0]
	return res;
 80135fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80135fe:	4618      	mov	r0, r3
 8013600:	3710      	adds	r7, #16
 8013602:	46bd      	mov	sp, r7
 8013604:	bd80      	pop	{r7, pc}

08013606 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013606:	b580      	push	{r7, lr}
 8013608:	b08c      	sub	sp, #48	@ 0x30
 801360a:	af00      	add	r7, sp, #0
 801360c:	60f8      	str	r0, [r7, #12]
 801360e:	60b9      	str	r1, [r7, #8]
 8013610:	607a      	str	r2, [r7, #4]
 8013612:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013614:	68bb      	ldr	r3, [r7, #8]
 8013616:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013618:	683b      	ldr	r3, [r7, #0]
 801361a:	2200      	movs	r2, #0
 801361c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	f107 0210 	add.w	r2, r7, #16
 8013624:	4611      	mov	r1, r2
 8013626:	4618      	mov	r0, r3
 8013628:	f7ff ffa6 	bl	8013578 <validate>
 801362c:	4603      	mov	r3, r0
 801362e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013632:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013636:	2b00      	cmp	r3, #0
 8013638:	d107      	bne.n	801364a <f_write+0x44>
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	7d5b      	ldrb	r3, [r3, #21]
 801363e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8013642:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013646:	2b00      	cmp	r3, #0
 8013648:	d009      	beq.n	801365e <f_write+0x58>
 801364a:	693b      	ldr	r3, [r7, #16]
 801364c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8013650:	4611      	mov	r1, r2
 8013652:	4618      	mov	r0, r3
 8013654:	f7ff fbfa 	bl	8012e4c <unlock_fs>
 8013658:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801365c:	e173      	b.n	8013946 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	7d1b      	ldrb	r3, [r3, #20]
 8013662:	f003 0302 	and.w	r3, r3, #2
 8013666:	2b00      	cmp	r3, #0
 8013668:	d106      	bne.n	8013678 <f_write+0x72>
 801366a:	693b      	ldr	r3, [r7, #16]
 801366c:	2107      	movs	r1, #7
 801366e:	4618      	mov	r0, r3
 8013670:	f7ff fbec 	bl	8012e4c <unlock_fs>
 8013674:	2307      	movs	r3, #7
 8013676:	e166      	b.n	8013946 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	699a      	ldr	r2, [r3, #24]
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	441a      	add	r2, r3
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	699b      	ldr	r3, [r3, #24]
 8013684:	429a      	cmp	r2, r3
 8013686:	f080 814b 	bcs.w	8013920 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	699b      	ldr	r3, [r3, #24]
 801368e:	43db      	mvns	r3, r3
 8013690:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013692:	e145      	b.n	8013920 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	699b      	ldr	r3, [r3, #24]
 8013698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801369c:	2b00      	cmp	r3, #0
 801369e:	f040 8101 	bne.w	80138a4 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	699b      	ldr	r3, [r3, #24]
 80136a6:	0a5b      	lsrs	r3, r3, #9
 80136a8:	693a      	ldr	r2, [r7, #16]
 80136aa:	8952      	ldrh	r2, [r2, #10]
 80136ac:	3a01      	subs	r2, #1
 80136ae:	4013      	ands	r3, r2
 80136b0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80136b2:	69bb      	ldr	r3, [r7, #24]
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d14d      	bne.n	8013754 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	699b      	ldr	r3, [r3, #24]
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d10c      	bne.n	80136da <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	689b      	ldr	r3, [r3, #8]
 80136c4:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80136c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d11a      	bne.n	8013702 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	2100      	movs	r1, #0
 80136d0:	4618      	mov	r0, r3
 80136d2:	f7ff fe65 	bl	80133a0 <create_chain>
 80136d6:	62b8      	str	r0, [r7, #40]	@ 0x28
 80136d8:	e013      	b.n	8013702 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d007      	beq.n	80136f2 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	699b      	ldr	r3, [r3, #24]
 80136e6:	4619      	mov	r1, r3
 80136e8:	68f8      	ldr	r0, [r7, #12]
 80136ea:	f7ff fef1 	bl	80134d0 <clmt_clust>
 80136ee:	62b8      	str	r0, [r7, #40]	@ 0x28
 80136f0:	e007      	b.n	8013702 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80136f2:	68fa      	ldr	r2, [r7, #12]
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	69db      	ldr	r3, [r3, #28]
 80136f8:	4619      	mov	r1, r3
 80136fa:	4610      	mov	r0, r2
 80136fc:	f7ff fe50 	bl	80133a0 <create_chain>
 8013700:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013704:	2b00      	cmp	r3, #0
 8013706:	f000 8110 	beq.w	801392a <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801370a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801370c:	2b01      	cmp	r3, #1
 801370e:	d109      	bne.n	8013724 <f_write+0x11e>
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	2202      	movs	r2, #2
 8013714:	755a      	strb	r2, [r3, #21]
 8013716:	693b      	ldr	r3, [r7, #16]
 8013718:	2102      	movs	r1, #2
 801371a:	4618      	mov	r0, r3
 801371c:	f7ff fb96 	bl	8012e4c <unlock_fs>
 8013720:	2302      	movs	r3, #2
 8013722:	e110      	b.n	8013946 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013726:	f1b3 3fff 	cmp.w	r3, #4294967295
 801372a:	d109      	bne.n	8013740 <f_write+0x13a>
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	2201      	movs	r2, #1
 8013730:	755a      	strb	r2, [r3, #21]
 8013732:	693b      	ldr	r3, [r7, #16]
 8013734:	2101      	movs	r1, #1
 8013736:	4618      	mov	r0, r3
 8013738:	f7ff fb88 	bl	8012e4c <unlock_fs>
 801373c:	2301      	movs	r3, #1
 801373e:	e102      	b.n	8013946 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013744:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	689b      	ldr	r3, [r3, #8]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d102      	bne.n	8013754 <f_write+0x14e>
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013752:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	7d1b      	ldrb	r3, [r3, #20]
 8013758:	b25b      	sxtb	r3, r3
 801375a:	2b00      	cmp	r3, #0
 801375c:	da1d      	bge.n	801379a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801375e:	693b      	ldr	r3, [r7, #16]
 8013760:	7858      	ldrb	r0, [r3, #1]
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	6a1a      	ldr	r2, [r3, #32]
 801376c:	2301      	movs	r3, #1
 801376e:	f7ff fa5b 	bl	8012c28 <disk_write>
 8013772:	4603      	mov	r3, r0
 8013774:	2b00      	cmp	r3, #0
 8013776:	d009      	beq.n	801378c <f_write+0x186>
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	2201      	movs	r2, #1
 801377c:	755a      	strb	r2, [r3, #21]
 801377e:	693b      	ldr	r3, [r7, #16]
 8013780:	2101      	movs	r1, #1
 8013782:	4618      	mov	r0, r3
 8013784:	f7ff fb62 	bl	8012e4c <unlock_fs>
 8013788:	2301      	movs	r3, #1
 801378a:	e0dc      	b.n	8013946 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	7d1b      	ldrb	r3, [r3, #20]
 8013790:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013794:	b2da      	uxtb	r2, r3
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801379a:	693a      	ldr	r2, [r7, #16]
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	69db      	ldr	r3, [r3, #28]
 80137a0:	4619      	mov	r1, r3
 80137a2:	4610      	mov	r0, r2
 80137a4:	f7ff fc4c 	bl	8013040 <clust2sect>
 80137a8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80137aa:	697b      	ldr	r3, [r7, #20]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d109      	bne.n	80137c4 <f_write+0x1be>
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	2202      	movs	r2, #2
 80137b4:	755a      	strb	r2, [r3, #21]
 80137b6:	693b      	ldr	r3, [r7, #16]
 80137b8:	2102      	movs	r1, #2
 80137ba:	4618      	mov	r0, r3
 80137bc:	f7ff fb46 	bl	8012e4c <unlock_fs>
 80137c0:	2302      	movs	r3, #2
 80137c2:	e0c0      	b.n	8013946 <f_write+0x340>
			sect += csect;
 80137c4:	697a      	ldr	r2, [r7, #20]
 80137c6:	69bb      	ldr	r3, [r7, #24]
 80137c8:	4413      	add	r3, r2
 80137ca:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	0a5b      	lsrs	r3, r3, #9
 80137d0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80137d2:	6a3b      	ldr	r3, [r7, #32]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d041      	beq.n	801385c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80137d8:	69ba      	ldr	r2, [r7, #24]
 80137da:	6a3b      	ldr	r3, [r7, #32]
 80137dc:	4413      	add	r3, r2
 80137de:	693a      	ldr	r2, [r7, #16]
 80137e0:	8952      	ldrh	r2, [r2, #10]
 80137e2:	4293      	cmp	r3, r2
 80137e4:	d905      	bls.n	80137f2 <f_write+0x1ec>
					cc = fs->csize - csect;
 80137e6:	693b      	ldr	r3, [r7, #16]
 80137e8:	895b      	ldrh	r3, [r3, #10]
 80137ea:	461a      	mov	r2, r3
 80137ec:	69bb      	ldr	r3, [r7, #24]
 80137ee:	1ad3      	subs	r3, r2, r3
 80137f0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80137f2:	693b      	ldr	r3, [r7, #16]
 80137f4:	7858      	ldrb	r0, [r3, #1]
 80137f6:	6a3b      	ldr	r3, [r7, #32]
 80137f8:	697a      	ldr	r2, [r7, #20]
 80137fa:	69f9      	ldr	r1, [r7, #28]
 80137fc:	f7ff fa14 	bl	8012c28 <disk_write>
 8013800:	4603      	mov	r3, r0
 8013802:	2b00      	cmp	r3, #0
 8013804:	d009      	beq.n	801381a <f_write+0x214>
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	2201      	movs	r2, #1
 801380a:	755a      	strb	r2, [r3, #21]
 801380c:	693b      	ldr	r3, [r7, #16]
 801380e:	2101      	movs	r1, #1
 8013810:	4618      	mov	r0, r3
 8013812:	f7ff fb1b 	bl	8012e4c <unlock_fs>
 8013816:	2301      	movs	r3, #1
 8013818:	e095      	b.n	8013946 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	6a1a      	ldr	r2, [r3, #32]
 801381e:	697b      	ldr	r3, [r7, #20]
 8013820:	1ad3      	subs	r3, r2, r3
 8013822:	6a3a      	ldr	r2, [r7, #32]
 8013824:	429a      	cmp	r2, r3
 8013826:	d915      	bls.n	8013854 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	6a1a      	ldr	r2, [r3, #32]
 8013832:	697b      	ldr	r3, [r7, #20]
 8013834:	1ad3      	subs	r3, r2, r3
 8013836:	025b      	lsls	r3, r3, #9
 8013838:	69fa      	ldr	r2, [r7, #28]
 801383a:	4413      	add	r3, r2
 801383c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013840:	4619      	mov	r1, r3
 8013842:	f7ff fab1 	bl	8012da8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	7d1b      	ldrb	r3, [r3, #20]
 801384a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801384e:	b2da      	uxtb	r2, r3
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013854:	6a3b      	ldr	r3, [r7, #32]
 8013856:	025b      	lsls	r3, r3, #9
 8013858:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801385a:	e044      	b.n	80138e6 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	6a1b      	ldr	r3, [r3, #32]
 8013860:	697a      	ldr	r2, [r7, #20]
 8013862:	429a      	cmp	r2, r3
 8013864:	d01b      	beq.n	801389e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	699a      	ldr	r2, [r3, #24]
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801386e:	429a      	cmp	r2, r3
 8013870:	d215      	bcs.n	801389e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013872:	693b      	ldr	r3, [r7, #16]
 8013874:	7858      	ldrb	r0, [r3, #1]
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801387c:	2301      	movs	r3, #1
 801387e:	697a      	ldr	r2, [r7, #20]
 8013880:	f7ff f9b2 	bl	8012be8 <disk_read>
 8013884:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013886:	2b00      	cmp	r3, #0
 8013888:	d009      	beq.n	801389e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	2201      	movs	r2, #1
 801388e:	755a      	strb	r2, [r3, #21]
 8013890:	693b      	ldr	r3, [r7, #16]
 8013892:	2101      	movs	r1, #1
 8013894:	4618      	mov	r0, r3
 8013896:	f7ff fad9 	bl	8012e4c <unlock_fs>
 801389a:	2301      	movs	r3, #1
 801389c:	e053      	b.n	8013946 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	697a      	ldr	r2, [r7, #20]
 80138a2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	699b      	ldr	r3, [r3, #24]
 80138a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80138ac:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80138b0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80138b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	429a      	cmp	r2, r3
 80138b8:	d901      	bls.n	80138be <f_write+0x2b8>
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	699b      	ldr	r3, [r3, #24]
 80138c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80138cc:	4413      	add	r3, r2
 80138ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80138d0:	69f9      	ldr	r1, [r7, #28]
 80138d2:	4618      	mov	r0, r3
 80138d4:	f7ff fa68 	bl	8012da8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	7d1b      	ldrb	r3, [r3, #20]
 80138dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80138e0:	b2da      	uxtb	r2, r3
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80138e6:	69fa      	ldr	r2, [r7, #28]
 80138e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138ea:	4413      	add	r3, r2
 80138ec:	61fb      	str	r3, [r7, #28]
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	699a      	ldr	r2, [r3, #24]
 80138f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138f4:	441a      	add	r2, r3
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	619a      	str	r2, [r3, #24]
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	68da      	ldr	r2, [r3, #12]
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	699b      	ldr	r3, [r3, #24]
 8013902:	429a      	cmp	r2, r3
 8013904:	bf38      	it	cc
 8013906:	461a      	movcc	r2, r3
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	60da      	str	r2, [r3, #12]
 801390c:	683b      	ldr	r3, [r7, #0]
 801390e:	681a      	ldr	r2, [r3, #0]
 8013910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013912:	441a      	add	r2, r3
 8013914:	683b      	ldr	r3, [r7, #0]
 8013916:	601a      	str	r2, [r3, #0]
 8013918:	687a      	ldr	r2, [r7, #4]
 801391a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801391c:	1ad3      	subs	r3, r2, r3
 801391e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	2b00      	cmp	r3, #0
 8013924:	f47f aeb6 	bne.w	8013694 <f_write+0x8e>
 8013928:	e000      	b.n	801392c <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801392a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	7d1b      	ldrb	r3, [r3, #20]
 8013930:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013934:	b2da      	uxtb	r2, r3
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801393a:	693b      	ldr	r3, [r7, #16]
 801393c:	2100      	movs	r1, #0
 801393e:	4618      	mov	r0, r3
 8013940:	f7ff fa84 	bl	8012e4c <unlock_fs>
 8013944:	2300      	movs	r3, #0
}
 8013946:	4618      	mov	r0, r3
 8013948:	3730      	adds	r7, #48	@ 0x30
 801394a:	46bd      	mov	sp, r7
 801394c:	bd80      	pop	{r7, pc}

0801394e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801394e:	b580      	push	{r7, lr}
 8013950:	b086      	sub	sp, #24
 8013952:	af00      	add	r7, sp, #0
 8013954:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	f107 0208 	add.w	r2, r7, #8
 801395c:	4611      	mov	r1, r2
 801395e:	4618      	mov	r0, r3
 8013960:	f7ff fe0a 	bl	8013578 <validate>
 8013964:	4603      	mov	r3, r0
 8013966:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013968:	7dfb      	ldrb	r3, [r7, #23]
 801396a:	2b00      	cmp	r3, #0
 801396c:	d16d      	bne.n	8013a4a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	7d1b      	ldrb	r3, [r3, #20]
 8013972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013976:	2b00      	cmp	r3, #0
 8013978:	d067      	beq.n	8013a4a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	7d1b      	ldrb	r3, [r3, #20]
 801397e:	b25b      	sxtb	r3, r3
 8013980:	2b00      	cmp	r3, #0
 8013982:	da1a      	bge.n	80139ba <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013984:	68bb      	ldr	r3, [r7, #8]
 8013986:	7858      	ldrb	r0, [r3, #1]
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	6a1a      	ldr	r2, [r3, #32]
 8013992:	2301      	movs	r3, #1
 8013994:	f7ff f948 	bl	8012c28 <disk_write>
 8013998:	4603      	mov	r3, r0
 801399a:	2b00      	cmp	r3, #0
 801399c:	d006      	beq.n	80139ac <f_sync+0x5e>
 801399e:	68bb      	ldr	r3, [r7, #8]
 80139a0:	2101      	movs	r1, #1
 80139a2:	4618      	mov	r0, r3
 80139a4:	f7ff fa52 	bl	8012e4c <unlock_fs>
 80139a8:	2301      	movs	r3, #1
 80139aa:	e055      	b.n	8013a58 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	7d1b      	ldrb	r3, [r3, #20]
 80139b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80139b4:	b2da      	uxtb	r2, r3
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80139ba:	f7fe fbd9 	bl	8012170 <get_fattime>
 80139be:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80139c0:	68ba      	ldr	r2, [r7, #8]
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80139c6:	4619      	mov	r1, r3
 80139c8:	4610      	mov	r0, r2
 80139ca:	f7ff fa9e 	bl	8012f0a <move_window>
 80139ce:	4603      	mov	r3, r0
 80139d0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80139d2:	7dfb      	ldrb	r3, [r7, #23]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d138      	bne.n	8013a4a <f_sync+0xfc>
					dir = fp->dir_ptr;
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80139dc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	330b      	adds	r3, #11
 80139e2:	781a      	ldrb	r2, [r3, #0]
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	330b      	adds	r3, #11
 80139e8:	f042 0220 	orr.w	r2, r2, #32
 80139ec:	b2d2      	uxtb	r2, r2
 80139ee:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	6818      	ldr	r0, [r3, #0]
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	689b      	ldr	r3, [r3, #8]
 80139f8:	461a      	mov	r2, r3
 80139fa:	68f9      	ldr	r1, [r7, #12]
 80139fc:	f7ff fd9c 	bl	8013538 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	f103 021c 	add.w	r2, r3, #28
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	68db      	ldr	r3, [r3, #12]
 8013a0a:	4619      	mov	r1, r3
 8013a0c:	4610      	mov	r0, r2
 8013a0e:	f7ff f99f 	bl	8012d50 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	3316      	adds	r3, #22
 8013a16:	6939      	ldr	r1, [r7, #16]
 8013a18:	4618      	mov	r0, r3
 8013a1a:	f7ff f999 	bl	8012d50 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	3312      	adds	r3, #18
 8013a22:	2100      	movs	r1, #0
 8013a24:	4618      	mov	r0, r3
 8013a26:	f7ff f978 	bl	8012d1a <st_word>
					fs->wflag = 1;
 8013a2a:	68bb      	ldr	r3, [r7, #8]
 8013a2c:	2201      	movs	r2, #1
 8013a2e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013a30:	68bb      	ldr	r3, [r7, #8]
 8013a32:	4618      	mov	r0, r3
 8013a34:	f7ff fa96 	bl	8012f64 <sync_fs>
 8013a38:	4603      	mov	r3, r0
 8013a3a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	7d1b      	ldrb	r3, [r3, #20]
 8013a40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013a44:	b2da      	uxtb	r2, r3
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013a4a:	68bb      	ldr	r3, [r7, #8]
 8013a4c:	7dfa      	ldrb	r2, [r7, #23]
 8013a4e:	4611      	mov	r1, r2
 8013a50:	4618      	mov	r0, r3
 8013a52:	f7ff f9fb 	bl	8012e4c <unlock_fs>
 8013a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a58:	4618      	mov	r0, r3
 8013a5a:	3718      	adds	r7, #24
 8013a5c:	46bd      	mov	sp, r7
 8013a5e:	bd80      	pop	{r7, pc}

08013a60 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013a60:	b480      	push	{r7}
 8013a62:	b087      	sub	sp, #28
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	60f8      	str	r0, [r7, #12]
 8013a68:	60b9      	str	r1, [r7, #8]
 8013a6a:	4613      	mov	r3, r2
 8013a6c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013a6e:	2301      	movs	r3, #1
 8013a70:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013a72:	2300      	movs	r3, #0
 8013a74:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013a76:	4b1f      	ldr	r3, [pc, #124]	@ (8013af4 <FATFS_LinkDriverEx+0x94>)
 8013a78:	7a5b      	ldrb	r3, [r3, #9]
 8013a7a:	b2db      	uxtb	r3, r3
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d131      	bne.n	8013ae4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013a80:	4b1c      	ldr	r3, [pc, #112]	@ (8013af4 <FATFS_LinkDriverEx+0x94>)
 8013a82:	7a5b      	ldrb	r3, [r3, #9]
 8013a84:	b2db      	uxtb	r3, r3
 8013a86:	461a      	mov	r2, r3
 8013a88:	4b1a      	ldr	r3, [pc, #104]	@ (8013af4 <FATFS_LinkDriverEx+0x94>)
 8013a8a:	2100      	movs	r1, #0
 8013a8c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013a8e:	4b19      	ldr	r3, [pc, #100]	@ (8013af4 <FATFS_LinkDriverEx+0x94>)
 8013a90:	7a5b      	ldrb	r3, [r3, #9]
 8013a92:	b2db      	uxtb	r3, r3
 8013a94:	4a17      	ldr	r2, [pc, #92]	@ (8013af4 <FATFS_LinkDriverEx+0x94>)
 8013a96:	009b      	lsls	r3, r3, #2
 8013a98:	4413      	add	r3, r2
 8013a9a:	68fa      	ldr	r2, [r7, #12]
 8013a9c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013a9e:	4b15      	ldr	r3, [pc, #84]	@ (8013af4 <FATFS_LinkDriverEx+0x94>)
 8013aa0:	7a5b      	ldrb	r3, [r3, #9]
 8013aa2:	b2db      	uxtb	r3, r3
 8013aa4:	461a      	mov	r2, r3
 8013aa6:	4b13      	ldr	r3, [pc, #76]	@ (8013af4 <FATFS_LinkDriverEx+0x94>)
 8013aa8:	4413      	add	r3, r2
 8013aaa:	79fa      	ldrb	r2, [r7, #7]
 8013aac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013aae:	4b11      	ldr	r3, [pc, #68]	@ (8013af4 <FATFS_LinkDriverEx+0x94>)
 8013ab0:	7a5b      	ldrb	r3, [r3, #9]
 8013ab2:	b2db      	uxtb	r3, r3
 8013ab4:	1c5a      	adds	r2, r3, #1
 8013ab6:	b2d1      	uxtb	r1, r2
 8013ab8:	4a0e      	ldr	r2, [pc, #56]	@ (8013af4 <FATFS_LinkDriverEx+0x94>)
 8013aba:	7251      	strb	r1, [r2, #9]
 8013abc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013abe:	7dbb      	ldrb	r3, [r7, #22]
 8013ac0:	3330      	adds	r3, #48	@ 0x30
 8013ac2:	b2da      	uxtb	r2, r3
 8013ac4:	68bb      	ldr	r3, [r7, #8]
 8013ac6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013ac8:	68bb      	ldr	r3, [r7, #8]
 8013aca:	3301      	adds	r3, #1
 8013acc:	223a      	movs	r2, #58	@ 0x3a
 8013ace:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013ad0:	68bb      	ldr	r3, [r7, #8]
 8013ad2:	3302      	adds	r3, #2
 8013ad4:	222f      	movs	r2, #47	@ 0x2f
 8013ad6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013ad8:	68bb      	ldr	r3, [r7, #8]
 8013ada:	3303      	adds	r3, #3
 8013adc:	2200      	movs	r2, #0
 8013ade:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013ae0:	2300      	movs	r3, #0
 8013ae2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	371c      	adds	r7, #28
 8013aea:	46bd      	mov	sp, r7
 8013aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af0:	4770      	bx	lr
 8013af2:	bf00      	nop
 8013af4:	24002998 	.word	0x24002998

08013af8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013af8:	b580      	push	{r7, lr}
 8013afa:	b082      	sub	sp, #8
 8013afc:	af00      	add	r7, sp, #0
 8013afe:	6078      	str	r0, [r7, #4]
 8013b00:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013b02:	2200      	movs	r2, #0
 8013b04:	6839      	ldr	r1, [r7, #0]
 8013b06:	6878      	ldr	r0, [r7, #4]
 8013b08:	f7ff ffaa 	bl	8013a60 <FATFS_LinkDriverEx>
 8013b0c:	4603      	mov	r3, r0
}
 8013b0e:	4618      	mov	r0, r3
 8013b10:	3708      	adds	r7, #8
 8013b12:	46bd      	mov	sp, r7
 8013b14:	bd80      	pop	{r7, pc}

08013b16 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8013b16:	b580      	push	{r7, lr}
 8013b18:	b084      	sub	sp, #16
 8013b1a:	af00      	add	r7, sp, #0
 8013b1c:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8013b1e:	2300      	movs	r3, #0
 8013b20:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8013b22:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8013b26:	6878      	ldr	r0, [r7, #4]
 8013b28:	f000 f8a6 	bl	8013c78 <osSemaphoreWait>
 8013b2c:	4603      	mov	r3, r0
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d101      	bne.n	8013b36 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8013b32:	2301      	movs	r3, #1
 8013b34:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8013b36:	68fb      	ldr	r3, [r7, #12]
}
 8013b38:	4618      	mov	r0, r3
 8013b3a:	3710      	adds	r7, #16
 8013b3c:	46bd      	mov	sp, r7
 8013b3e:	bd80      	pop	{r7, pc}

08013b40 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8013b40:	b580      	push	{r7, lr}
 8013b42:	b082      	sub	sp, #8
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8013b48:	6878      	ldr	r0, [r7, #4]
 8013b4a:	f000 f8e3 	bl	8013d14 <osSemaphoreRelease>
#endif
}
 8013b4e:	bf00      	nop
 8013b50:	3708      	adds	r7, #8
 8013b52:	46bd      	mov	sp, r7
 8013b54:	bd80      	pop	{r7, pc}

08013b56 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8013b56:	b480      	push	{r7}
 8013b58:	b085      	sub	sp, #20
 8013b5a:	af00      	add	r7, sp, #0
 8013b5c:	4603      	mov	r3, r0
 8013b5e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8013b60:	2300      	movs	r3, #0
 8013b62:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8013b64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013b68:	2b84      	cmp	r3, #132	@ 0x84
 8013b6a:	d005      	beq.n	8013b78 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8013b6c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	4413      	add	r3, r2
 8013b74:	3303      	adds	r3, #3
 8013b76:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8013b78:	68fb      	ldr	r3, [r7, #12]
}
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	3714      	adds	r7, #20
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b84:	4770      	bx	lr

08013b86 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8013b86:	b480      	push	{r7}
 8013b88:	b083      	sub	sp, #12
 8013b8a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013b8c:	f3ef 8305 	mrs	r3, IPSR
 8013b90:	607b      	str	r3, [r7, #4]
  return(result);
 8013b92:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	bf14      	ite	ne
 8013b98:	2301      	movne	r3, #1
 8013b9a:	2300      	moveq	r3, #0
 8013b9c:	b2db      	uxtb	r3, r3
}
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	370c      	adds	r7, #12
 8013ba2:	46bd      	mov	sp, r7
 8013ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ba8:	4770      	bx	lr

08013baa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8013baa:	b580      	push	{r7, lr}
 8013bac:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8013bae:	f000 ffb5 	bl	8014b1c <vTaskStartScheduler>
  
  return osOK;
 8013bb2:	2300      	movs	r3, #0
}
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	bd80      	pop	{r7, pc}

08013bb8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8013bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013bba:	b089      	sub	sp, #36	@ 0x24
 8013bbc:	af04      	add	r7, sp, #16
 8013bbe:	6078      	str	r0, [r7, #4]
 8013bc0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	695b      	ldr	r3, [r3, #20]
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d020      	beq.n	8013c0c <osThreadCreate+0x54>
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	699b      	ldr	r3, [r3, #24]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d01c      	beq.n	8013c0c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	685c      	ldr	r4, [r3, #4]
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	691e      	ldr	r6, [r3, #16]
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013be4:	4618      	mov	r0, r3
 8013be6:	f7ff ffb6 	bl	8013b56 <makeFreeRtosPriority>
 8013bea:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	695b      	ldr	r3, [r3, #20]
 8013bf0:	687a      	ldr	r2, [r7, #4]
 8013bf2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013bf4:	9202      	str	r2, [sp, #8]
 8013bf6:	9301      	str	r3, [sp, #4]
 8013bf8:	9100      	str	r1, [sp, #0]
 8013bfa:	683b      	ldr	r3, [r7, #0]
 8013bfc:	4632      	mov	r2, r6
 8013bfe:	4629      	mov	r1, r5
 8013c00:	4620      	mov	r0, r4
 8013c02:	f000 fdbd 	bl	8014780 <xTaskCreateStatic>
 8013c06:	4603      	mov	r3, r0
 8013c08:	60fb      	str	r3, [r7, #12]
 8013c0a:	e01c      	b.n	8013c46 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	685c      	ldr	r4, [r3, #4]
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013c18:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013c20:	4618      	mov	r0, r3
 8013c22:	f7ff ff98 	bl	8013b56 <makeFreeRtosPriority>
 8013c26:	4602      	mov	r2, r0
 8013c28:	f107 030c 	add.w	r3, r7, #12
 8013c2c:	9301      	str	r3, [sp, #4]
 8013c2e:	9200      	str	r2, [sp, #0]
 8013c30:	683b      	ldr	r3, [r7, #0]
 8013c32:	4632      	mov	r2, r6
 8013c34:	4629      	mov	r1, r5
 8013c36:	4620      	mov	r0, r4
 8013c38:	f000 fe02 	bl	8014840 <xTaskCreate>
 8013c3c:	4603      	mov	r3, r0
 8013c3e:	2b01      	cmp	r3, #1
 8013c40:	d001      	beq.n	8013c46 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8013c42:	2300      	movs	r3, #0
 8013c44:	e000      	b.n	8013c48 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8013c46:	68fb      	ldr	r3, [r7, #12]
}
 8013c48:	4618      	mov	r0, r3
 8013c4a:	3714      	adds	r7, #20
 8013c4c:	46bd      	mov	sp, r7
 8013c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013c50 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8013c50:	b580      	push	{r7, lr}
 8013c52:	b084      	sub	sp, #16
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d001      	beq.n	8013c66 <osDelay+0x16>
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	e000      	b.n	8013c68 <osDelay+0x18>
 8013c66:	2301      	movs	r3, #1
 8013c68:	4618      	mov	r0, r3
 8013c6a:	f000 ff21 	bl	8014ab0 <vTaskDelay>
  
  return osOK;
 8013c6e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8013c70:	4618      	mov	r0, r3
 8013c72:	3710      	adds	r7, #16
 8013c74:	46bd      	mov	sp, r7
 8013c76:	bd80      	pop	{r7, pc}

08013c78 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8013c78:	b580      	push	{r7, lr}
 8013c7a:	b084      	sub	sp, #16
 8013c7c:	af00      	add	r7, sp, #0
 8013c7e:	6078      	str	r0, [r7, #4]
 8013c80:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8013c82:	2300      	movs	r3, #0
 8013c84:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d101      	bne.n	8013c90 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8013c8c:	2380      	movs	r3, #128	@ 0x80
 8013c8e:	e03a      	b.n	8013d06 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8013c90:	2300      	movs	r3, #0
 8013c92:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8013c94:	683b      	ldr	r3, [r7, #0]
 8013c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c9a:	d103      	bne.n	8013ca4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8013c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8013ca0:	60fb      	str	r3, [r7, #12]
 8013ca2:	e009      	b.n	8013cb8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8013ca4:	683b      	ldr	r3, [r7, #0]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d006      	beq.n	8013cb8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8013caa:	683b      	ldr	r3, [r7, #0]
 8013cac:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d101      	bne.n	8013cb8 <osSemaphoreWait+0x40>
      ticks = 1;
 8013cb4:	2301      	movs	r3, #1
 8013cb6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8013cb8:	f7ff ff65 	bl	8013b86 <inHandlerMode>
 8013cbc:	4603      	mov	r3, r0
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d017      	beq.n	8013cf2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8013cc2:	f107 0308 	add.w	r3, r7, #8
 8013cc6:	461a      	mov	r2, r3
 8013cc8:	2100      	movs	r1, #0
 8013cca:	6878      	ldr	r0, [r7, #4]
 8013ccc:	f000 fbae 	bl	801442c <xQueueReceiveFromISR>
 8013cd0:	4603      	mov	r3, r0
 8013cd2:	2b01      	cmp	r3, #1
 8013cd4:	d001      	beq.n	8013cda <osSemaphoreWait+0x62>
      return osErrorOS;
 8013cd6:	23ff      	movs	r3, #255	@ 0xff
 8013cd8:	e015      	b.n	8013d06 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8013cda:	68bb      	ldr	r3, [r7, #8]
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d011      	beq.n	8013d04 <osSemaphoreWait+0x8c>
 8013ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8013d10 <osSemaphoreWait+0x98>)
 8013ce2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013ce6:	601a      	str	r2, [r3, #0]
 8013ce8:	f3bf 8f4f 	dsb	sy
 8013cec:	f3bf 8f6f 	isb	sy
 8013cf0:	e008      	b.n	8013d04 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8013cf2:	68f9      	ldr	r1, [r7, #12]
 8013cf4:	6878      	ldr	r0, [r7, #4]
 8013cf6:	f000 fa89 	bl	801420c <xQueueSemaphoreTake>
 8013cfa:	4603      	mov	r3, r0
 8013cfc:	2b01      	cmp	r3, #1
 8013cfe:	d001      	beq.n	8013d04 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8013d00:	23ff      	movs	r3, #255	@ 0xff
 8013d02:	e000      	b.n	8013d06 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8013d04:	2300      	movs	r3, #0
}
 8013d06:	4618      	mov	r0, r3
 8013d08:	3710      	adds	r7, #16
 8013d0a:	46bd      	mov	sp, r7
 8013d0c:	bd80      	pop	{r7, pc}
 8013d0e:	bf00      	nop
 8013d10:	e000ed04 	.word	0xe000ed04

08013d14 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8013d14:	b580      	push	{r7, lr}
 8013d16:	b084      	sub	sp, #16
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8013d20:	2300      	movs	r3, #0
 8013d22:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8013d24:	f7ff ff2f 	bl	8013b86 <inHandlerMode>
 8013d28:	4603      	mov	r3, r0
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d016      	beq.n	8013d5c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8013d2e:	f107 0308 	add.w	r3, r7, #8
 8013d32:	4619      	mov	r1, r3
 8013d34:	6878      	ldr	r0, [r7, #4]
 8013d36:	f000 f9d9 	bl	80140ec <xQueueGiveFromISR>
 8013d3a:	4603      	mov	r3, r0
 8013d3c:	2b01      	cmp	r3, #1
 8013d3e:	d001      	beq.n	8013d44 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8013d40:	23ff      	movs	r3, #255	@ 0xff
 8013d42:	e017      	b.n	8013d74 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8013d44:	68bb      	ldr	r3, [r7, #8]
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d013      	beq.n	8013d72 <osSemaphoreRelease+0x5e>
 8013d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8013d7c <osSemaphoreRelease+0x68>)
 8013d4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013d50:	601a      	str	r2, [r3, #0]
 8013d52:	f3bf 8f4f 	dsb	sy
 8013d56:	f3bf 8f6f 	isb	sy
 8013d5a:	e00a      	b.n	8013d72 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8013d5c:	2300      	movs	r3, #0
 8013d5e:	2200      	movs	r2, #0
 8013d60:	2100      	movs	r1, #0
 8013d62:	6878      	ldr	r0, [r7, #4]
 8013d64:	f000 f8c0 	bl	8013ee8 <xQueueGenericSend>
 8013d68:	4603      	mov	r3, r0
 8013d6a:	2b01      	cmp	r3, #1
 8013d6c:	d001      	beq.n	8013d72 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8013d6e:	23ff      	movs	r3, #255	@ 0xff
 8013d70:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8013d72:	68fb      	ldr	r3, [r7, #12]
}
 8013d74:	4618      	mov	r0, r3
 8013d76:	3710      	adds	r7, #16
 8013d78:	46bd      	mov	sp, r7
 8013d7a:	bd80      	pop	{r7, pc}
 8013d7c:	e000ed04 	.word	0xe000ed04

08013d80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013d80:	b480      	push	{r7}
 8013d82:	b083      	sub	sp, #12
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	f103 0208 	add.w	r2, r3, #8
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	f04f 32ff 	mov.w	r2, #4294967295
 8013d98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	f103 0208 	add.w	r2, r3, #8
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	f103 0208 	add.w	r2, r3, #8
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	2200      	movs	r2, #0
 8013db2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013db4:	bf00      	nop
 8013db6:	370c      	adds	r7, #12
 8013db8:	46bd      	mov	sp, r7
 8013dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dbe:	4770      	bx	lr

08013dc0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013dc0:	b480      	push	{r7}
 8013dc2:	b083      	sub	sp, #12
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	2200      	movs	r2, #0
 8013dcc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013dce:	bf00      	nop
 8013dd0:	370c      	adds	r7, #12
 8013dd2:	46bd      	mov	sp, r7
 8013dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dd8:	4770      	bx	lr

08013dda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013dda:	b480      	push	{r7}
 8013ddc:	b085      	sub	sp, #20
 8013dde:	af00      	add	r7, sp, #0
 8013de0:	6078      	str	r0, [r7, #4]
 8013de2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	685b      	ldr	r3, [r3, #4]
 8013de8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013dea:	683b      	ldr	r3, [r7, #0]
 8013dec:	68fa      	ldr	r2, [r7, #12]
 8013dee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	689a      	ldr	r2, [r3, #8]
 8013df4:	683b      	ldr	r3, [r7, #0]
 8013df6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	689b      	ldr	r3, [r3, #8]
 8013dfc:	683a      	ldr	r2, [r7, #0]
 8013dfe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	683a      	ldr	r2, [r7, #0]
 8013e04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013e06:	683b      	ldr	r3, [r7, #0]
 8013e08:	687a      	ldr	r2, [r7, #4]
 8013e0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	1c5a      	adds	r2, r3, #1
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	601a      	str	r2, [r3, #0]
}
 8013e16:	bf00      	nop
 8013e18:	3714      	adds	r7, #20
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e20:	4770      	bx	lr

08013e22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013e22:	b480      	push	{r7}
 8013e24:	b085      	sub	sp, #20
 8013e26:	af00      	add	r7, sp, #0
 8013e28:	6078      	str	r0, [r7, #4]
 8013e2a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013e2c:	683b      	ldr	r3, [r7, #0]
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013e32:	68bb      	ldr	r3, [r7, #8]
 8013e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e38:	d103      	bne.n	8013e42 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	691b      	ldr	r3, [r3, #16]
 8013e3e:	60fb      	str	r3, [r7, #12]
 8013e40:	e00c      	b.n	8013e5c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	3308      	adds	r3, #8
 8013e46:	60fb      	str	r3, [r7, #12]
 8013e48:	e002      	b.n	8013e50 <vListInsert+0x2e>
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	685b      	ldr	r3, [r3, #4]
 8013e4e:	60fb      	str	r3, [r7, #12]
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	685b      	ldr	r3, [r3, #4]
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	68ba      	ldr	r2, [r7, #8]
 8013e58:	429a      	cmp	r2, r3
 8013e5a:	d2f6      	bcs.n	8013e4a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	685a      	ldr	r2, [r3, #4]
 8013e60:	683b      	ldr	r3, [r7, #0]
 8013e62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013e64:	683b      	ldr	r3, [r7, #0]
 8013e66:	685b      	ldr	r3, [r3, #4]
 8013e68:	683a      	ldr	r2, [r7, #0]
 8013e6a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013e6c:	683b      	ldr	r3, [r7, #0]
 8013e6e:	68fa      	ldr	r2, [r7, #12]
 8013e70:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	683a      	ldr	r2, [r7, #0]
 8013e76:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013e78:	683b      	ldr	r3, [r7, #0]
 8013e7a:	687a      	ldr	r2, [r7, #4]
 8013e7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	1c5a      	adds	r2, r3, #1
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	601a      	str	r2, [r3, #0]
}
 8013e88:	bf00      	nop
 8013e8a:	3714      	adds	r7, #20
 8013e8c:	46bd      	mov	sp, r7
 8013e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e92:	4770      	bx	lr

08013e94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013e94:	b480      	push	{r7}
 8013e96:	b085      	sub	sp, #20
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	691b      	ldr	r3, [r3, #16]
 8013ea0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	685b      	ldr	r3, [r3, #4]
 8013ea6:	687a      	ldr	r2, [r7, #4]
 8013ea8:	6892      	ldr	r2, [r2, #8]
 8013eaa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	689b      	ldr	r3, [r3, #8]
 8013eb0:	687a      	ldr	r2, [r7, #4]
 8013eb2:	6852      	ldr	r2, [r2, #4]
 8013eb4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	685b      	ldr	r3, [r3, #4]
 8013eba:	687a      	ldr	r2, [r7, #4]
 8013ebc:	429a      	cmp	r2, r3
 8013ebe:	d103      	bne.n	8013ec8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	689a      	ldr	r2, [r3, #8]
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	2200      	movs	r2, #0
 8013ecc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	1e5a      	subs	r2, r3, #1
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	681b      	ldr	r3, [r3, #0]
}
 8013edc:	4618      	mov	r0, r3
 8013ede:	3714      	adds	r7, #20
 8013ee0:	46bd      	mov	sp, r7
 8013ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ee6:	4770      	bx	lr

08013ee8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013ee8:	b580      	push	{r7, lr}
 8013eea:	b08e      	sub	sp, #56	@ 0x38
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	60f8      	str	r0, [r7, #12]
 8013ef0:	60b9      	str	r1, [r7, #8]
 8013ef2:	607a      	str	r2, [r7, #4]
 8013ef4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8013efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d10b      	bne.n	8013f1c <xQueueGenericSend+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f08:	f383 8811 	msr	BASEPRI, r3
 8013f0c:	f3bf 8f6f 	isb	sy
 8013f10:	f3bf 8f4f 	dsb	sy
 8013f14:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8013f16:	bf00      	nop
 8013f18:	bf00      	nop
 8013f1a:	e7fd      	b.n	8013f18 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013f1c:	68bb      	ldr	r3, [r7, #8]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d103      	bne.n	8013f2a <xQueueGenericSend+0x42>
 8013f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d101      	bne.n	8013f2e <xQueueGenericSend+0x46>
 8013f2a:	2301      	movs	r3, #1
 8013f2c:	e000      	b.n	8013f30 <xQueueGenericSend+0x48>
 8013f2e:	2300      	movs	r3, #0
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d10b      	bne.n	8013f4c <xQueueGenericSend+0x64>
	__asm volatile
 8013f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f38:	f383 8811 	msr	BASEPRI, r3
 8013f3c:	f3bf 8f6f 	isb	sy
 8013f40:	f3bf 8f4f 	dsb	sy
 8013f44:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013f46:	bf00      	nop
 8013f48:	bf00      	nop
 8013f4a:	e7fd      	b.n	8013f48 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013f4c:	683b      	ldr	r3, [r7, #0]
 8013f4e:	2b02      	cmp	r3, #2
 8013f50:	d103      	bne.n	8013f5a <xQueueGenericSend+0x72>
 8013f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013f56:	2b01      	cmp	r3, #1
 8013f58:	d101      	bne.n	8013f5e <xQueueGenericSend+0x76>
 8013f5a:	2301      	movs	r3, #1
 8013f5c:	e000      	b.n	8013f60 <xQueueGenericSend+0x78>
 8013f5e:	2300      	movs	r3, #0
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d10b      	bne.n	8013f7c <xQueueGenericSend+0x94>
	__asm volatile
 8013f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f68:	f383 8811 	msr	BASEPRI, r3
 8013f6c:	f3bf 8f6f 	isb	sy
 8013f70:	f3bf 8f4f 	dsb	sy
 8013f74:	623b      	str	r3, [r7, #32]
}
 8013f76:	bf00      	nop
 8013f78:	bf00      	nop
 8013f7a:	e7fd      	b.n	8013f78 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013f7c:	f001 f9d8 	bl	8015330 <xTaskGetSchedulerState>
 8013f80:	4603      	mov	r3, r0
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d102      	bne.n	8013f8c <xQueueGenericSend+0xa4>
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d101      	bne.n	8013f90 <xQueueGenericSend+0xa8>
 8013f8c:	2301      	movs	r3, #1
 8013f8e:	e000      	b.n	8013f92 <xQueueGenericSend+0xaa>
 8013f90:	2300      	movs	r3, #0
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d10b      	bne.n	8013fae <xQueueGenericSend+0xc6>
	__asm volatile
 8013f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f9a:	f383 8811 	msr	BASEPRI, r3
 8013f9e:	f3bf 8f6f 	isb	sy
 8013fa2:	f3bf 8f4f 	dsb	sy
 8013fa6:	61fb      	str	r3, [r7, #28]
}
 8013fa8:	bf00      	nop
 8013faa:	bf00      	nop
 8013fac:	e7fd      	b.n	8013faa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013fae:	f001 fd13 	bl	80159d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013fba:	429a      	cmp	r2, r3
 8013fbc:	d302      	bcc.n	8013fc4 <xQueueGenericSend+0xdc>
 8013fbe:	683b      	ldr	r3, [r7, #0]
 8013fc0:	2b02      	cmp	r3, #2
 8013fc2:	d129      	bne.n	8014018 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013fc4:	683a      	ldr	r2, [r7, #0]
 8013fc6:	68b9      	ldr	r1, [r7, #8]
 8013fc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013fca:	f000 fac9 	bl	8014560 <prvCopyDataToQueue>
 8013fce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d010      	beq.n	8013ffa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fda:	3324      	adds	r3, #36	@ 0x24
 8013fdc:	4618      	mov	r0, r3
 8013fde:	f000 ffe7 	bl	8014fb0 <xTaskRemoveFromEventList>
 8013fe2:	4603      	mov	r3, r0
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d013      	beq.n	8014010 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013fe8:	4b3f      	ldr	r3, [pc, #252]	@ (80140e8 <xQueueGenericSend+0x200>)
 8013fea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013fee:	601a      	str	r2, [r3, #0]
 8013ff0:	f3bf 8f4f 	dsb	sy
 8013ff4:	f3bf 8f6f 	isb	sy
 8013ff8:	e00a      	b.n	8014010 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d007      	beq.n	8014010 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014000:	4b39      	ldr	r3, [pc, #228]	@ (80140e8 <xQueueGenericSend+0x200>)
 8014002:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014006:	601a      	str	r2, [r3, #0]
 8014008:	f3bf 8f4f 	dsb	sy
 801400c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014010:	f001 fd14 	bl	8015a3c <vPortExitCritical>
				return pdPASS;
 8014014:	2301      	movs	r3, #1
 8014016:	e063      	b.n	80140e0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d103      	bne.n	8014026 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801401e:	f001 fd0d 	bl	8015a3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8014022:	2300      	movs	r3, #0
 8014024:	e05c      	b.n	80140e0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014026:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014028:	2b00      	cmp	r3, #0
 801402a:	d106      	bne.n	801403a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801402c:	f107 0314 	add.w	r3, r7, #20
 8014030:	4618      	mov	r0, r3
 8014032:	f001 f821 	bl	8015078 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014036:	2301      	movs	r3, #1
 8014038:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801403a:	f001 fcff 	bl	8015a3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801403e:	f000 fdcf 	bl	8014be0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014042:	f001 fcc9 	bl	80159d8 <vPortEnterCritical>
 8014046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014048:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801404c:	b25b      	sxtb	r3, r3
 801404e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014052:	d103      	bne.n	801405c <xQueueGenericSend+0x174>
 8014054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014056:	2200      	movs	r2, #0
 8014058:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801405c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801405e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014062:	b25b      	sxtb	r3, r3
 8014064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014068:	d103      	bne.n	8014072 <xQueueGenericSend+0x18a>
 801406a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801406c:	2200      	movs	r2, #0
 801406e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014072:	f001 fce3 	bl	8015a3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014076:	1d3a      	adds	r2, r7, #4
 8014078:	f107 0314 	add.w	r3, r7, #20
 801407c:	4611      	mov	r1, r2
 801407e:	4618      	mov	r0, r3
 8014080:	f001 f810 	bl	80150a4 <xTaskCheckForTimeOut>
 8014084:	4603      	mov	r3, r0
 8014086:	2b00      	cmp	r3, #0
 8014088:	d124      	bne.n	80140d4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801408a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801408c:	f000 fb60 	bl	8014750 <prvIsQueueFull>
 8014090:	4603      	mov	r3, r0
 8014092:	2b00      	cmp	r3, #0
 8014094:	d018      	beq.n	80140c8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014098:	3310      	adds	r3, #16
 801409a:	687a      	ldr	r2, [r7, #4]
 801409c:	4611      	mov	r1, r2
 801409e:	4618      	mov	r0, r3
 80140a0:	f000 ff60 	bl	8014f64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80140a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80140a6:	f000 faeb 	bl	8014680 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80140aa:	f000 fda7 	bl	8014bfc <xTaskResumeAll>
 80140ae:	4603      	mov	r3, r0
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	f47f af7c 	bne.w	8013fae <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80140b6:	4b0c      	ldr	r3, [pc, #48]	@ (80140e8 <xQueueGenericSend+0x200>)
 80140b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80140bc:	601a      	str	r2, [r3, #0]
 80140be:	f3bf 8f4f 	dsb	sy
 80140c2:	f3bf 8f6f 	isb	sy
 80140c6:	e772      	b.n	8013fae <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80140c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80140ca:	f000 fad9 	bl	8014680 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80140ce:	f000 fd95 	bl	8014bfc <xTaskResumeAll>
 80140d2:	e76c      	b.n	8013fae <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80140d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80140d6:	f000 fad3 	bl	8014680 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80140da:	f000 fd8f 	bl	8014bfc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80140de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80140e0:	4618      	mov	r0, r3
 80140e2:	3738      	adds	r7, #56	@ 0x38
 80140e4:	46bd      	mov	sp, r7
 80140e6:	bd80      	pop	{r7, pc}
 80140e8:	e000ed04 	.word	0xe000ed04

080140ec <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80140ec:	b580      	push	{r7, lr}
 80140ee:	b08e      	sub	sp, #56	@ 0x38
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	6078      	str	r0, [r7, #4]
 80140f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80140fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d10b      	bne.n	8014118 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8014100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014104:	f383 8811 	msr	BASEPRI, r3
 8014108:	f3bf 8f6f 	isb	sy
 801410c:	f3bf 8f4f 	dsb	sy
 8014110:	623b      	str	r3, [r7, #32]
}
 8014112:	bf00      	nop
 8014114:	bf00      	nop
 8014116:	e7fd      	b.n	8014114 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801411a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801411c:	2b00      	cmp	r3, #0
 801411e:	d00b      	beq.n	8014138 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8014120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014124:	f383 8811 	msr	BASEPRI, r3
 8014128:	f3bf 8f6f 	isb	sy
 801412c:	f3bf 8f4f 	dsb	sy
 8014130:	61fb      	str	r3, [r7, #28]
}
 8014132:	bf00      	nop
 8014134:	bf00      	nop
 8014136:	e7fd      	b.n	8014134 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8014138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d103      	bne.n	8014148 <xQueueGiveFromISR+0x5c>
 8014140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014142:	689b      	ldr	r3, [r3, #8]
 8014144:	2b00      	cmp	r3, #0
 8014146:	d101      	bne.n	801414c <xQueueGiveFromISR+0x60>
 8014148:	2301      	movs	r3, #1
 801414a:	e000      	b.n	801414e <xQueueGiveFromISR+0x62>
 801414c:	2300      	movs	r3, #0
 801414e:	2b00      	cmp	r3, #0
 8014150:	d10b      	bne.n	801416a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8014152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014156:	f383 8811 	msr	BASEPRI, r3
 801415a:	f3bf 8f6f 	isb	sy
 801415e:	f3bf 8f4f 	dsb	sy
 8014162:	61bb      	str	r3, [r7, #24]
}
 8014164:	bf00      	nop
 8014166:	bf00      	nop
 8014168:	e7fd      	b.n	8014166 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801416a:	f001 fd15 	bl	8015b98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801416e:	f3ef 8211 	mrs	r2, BASEPRI
 8014172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014176:	f383 8811 	msr	BASEPRI, r3
 801417a:	f3bf 8f6f 	isb	sy
 801417e:	f3bf 8f4f 	dsb	sy
 8014182:	617a      	str	r2, [r7, #20]
 8014184:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8014186:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014188:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801418a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801418c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801418e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8014190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014194:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014196:	429a      	cmp	r2, r3
 8014198:	d22b      	bcs.n	80141f2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801419a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801419c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80141a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80141a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141a6:	1c5a      	adds	r2, r3, #1
 80141a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141aa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80141ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80141b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141b4:	d112      	bne.n	80141dc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80141b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d016      	beq.n	80141ec <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80141be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141c0:	3324      	adds	r3, #36	@ 0x24
 80141c2:	4618      	mov	r0, r3
 80141c4:	f000 fef4 	bl	8014fb0 <xTaskRemoveFromEventList>
 80141c8:	4603      	mov	r3, r0
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d00e      	beq.n	80141ec <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80141ce:	683b      	ldr	r3, [r7, #0]
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d00b      	beq.n	80141ec <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80141d4:	683b      	ldr	r3, [r7, #0]
 80141d6:	2201      	movs	r2, #1
 80141d8:	601a      	str	r2, [r3, #0]
 80141da:	e007      	b.n	80141ec <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80141dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80141e0:	3301      	adds	r3, #1
 80141e2:	b2db      	uxtb	r3, r3
 80141e4:	b25a      	sxtb	r2, r3
 80141e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80141ec:	2301      	movs	r3, #1
 80141ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80141f0:	e001      	b.n	80141f6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80141f2:	2300      	movs	r3, #0
 80141f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80141f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141f8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8014200:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8014204:	4618      	mov	r0, r3
 8014206:	3738      	adds	r7, #56	@ 0x38
 8014208:	46bd      	mov	sp, r7
 801420a:	bd80      	pop	{r7, pc}

0801420c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801420c:	b580      	push	{r7, lr}
 801420e:	b08e      	sub	sp, #56	@ 0x38
 8014210:	af00      	add	r7, sp, #0
 8014212:	6078      	str	r0, [r7, #4]
 8014214:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8014216:	2300      	movs	r3, #0
 8014218:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801421e:	2300      	movs	r3, #0
 8014220:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014224:	2b00      	cmp	r3, #0
 8014226:	d10b      	bne.n	8014240 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8014228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801422c:	f383 8811 	msr	BASEPRI, r3
 8014230:	f3bf 8f6f 	isb	sy
 8014234:	f3bf 8f4f 	dsb	sy
 8014238:	623b      	str	r3, [r7, #32]
}
 801423a:	bf00      	nop
 801423c:	bf00      	nop
 801423e:	e7fd      	b.n	801423c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014244:	2b00      	cmp	r3, #0
 8014246:	d00b      	beq.n	8014260 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8014248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801424c:	f383 8811 	msr	BASEPRI, r3
 8014250:	f3bf 8f6f 	isb	sy
 8014254:	f3bf 8f4f 	dsb	sy
 8014258:	61fb      	str	r3, [r7, #28]
}
 801425a:	bf00      	nop
 801425c:	bf00      	nop
 801425e:	e7fd      	b.n	801425c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014260:	f001 f866 	bl	8015330 <xTaskGetSchedulerState>
 8014264:	4603      	mov	r3, r0
 8014266:	2b00      	cmp	r3, #0
 8014268:	d102      	bne.n	8014270 <xQueueSemaphoreTake+0x64>
 801426a:	683b      	ldr	r3, [r7, #0]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d101      	bne.n	8014274 <xQueueSemaphoreTake+0x68>
 8014270:	2301      	movs	r3, #1
 8014272:	e000      	b.n	8014276 <xQueueSemaphoreTake+0x6a>
 8014274:	2300      	movs	r3, #0
 8014276:	2b00      	cmp	r3, #0
 8014278:	d10b      	bne.n	8014292 <xQueueSemaphoreTake+0x86>
	__asm volatile
 801427a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801427e:	f383 8811 	msr	BASEPRI, r3
 8014282:	f3bf 8f6f 	isb	sy
 8014286:	f3bf 8f4f 	dsb	sy
 801428a:	61bb      	str	r3, [r7, #24]
}
 801428c:	bf00      	nop
 801428e:	bf00      	nop
 8014290:	e7fd      	b.n	801428e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014292:	f001 fba1 	bl	80159d8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8014296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801429a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801429c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d024      	beq.n	80142ec <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80142a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142a4:	1e5a      	subs	r2, r3, #1
 80142a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142a8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80142aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d104      	bne.n	80142bc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80142b2:	f001 f9e9 	bl	8015688 <pvTaskIncrementMutexHeldCount>
 80142b6:	4602      	mov	r2, r0
 80142b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142ba:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80142bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142be:	691b      	ldr	r3, [r3, #16]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d00f      	beq.n	80142e4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80142c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142c6:	3310      	adds	r3, #16
 80142c8:	4618      	mov	r0, r3
 80142ca:	f000 fe71 	bl	8014fb0 <xTaskRemoveFromEventList>
 80142ce:	4603      	mov	r3, r0
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d007      	beq.n	80142e4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80142d4:	4b54      	ldr	r3, [pc, #336]	@ (8014428 <xQueueSemaphoreTake+0x21c>)
 80142d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80142da:	601a      	str	r2, [r3, #0]
 80142dc:	f3bf 8f4f 	dsb	sy
 80142e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80142e4:	f001 fbaa 	bl	8015a3c <vPortExitCritical>
				return pdPASS;
 80142e8:	2301      	movs	r3, #1
 80142ea:	e098      	b.n	801441e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80142ec:	683b      	ldr	r3, [r7, #0]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d112      	bne.n	8014318 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80142f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d00b      	beq.n	8014310 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80142f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142fc:	f383 8811 	msr	BASEPRI, r3
 8014300:	f3bf 8f6f 	isb	sy
 8014304:	f3bf 8f4f 	dsb	sy
 8014308:	617b      	str	r3, [r7, #20]
}
 801430a:	bf00      	nop
 801430c:	bf00      	nop
 801430e:	e7fd      	b.n	801430c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8014310:	f001 fb94 	bl	8015a3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014314:	2300      	movs	r3, #0
 8014316:	e082      	b.n	801441e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801431a:	2b00      	cmp	r3, #0
 801431c:	d106      	bne.n	801432c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801431e:	f107 030c 	add.w	r3, r7, #12
 8014322:	4618      	mov	r0, r3
 8014324:	f000 fea8 	bl	8015078 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014328:	2301      	movs	r3, #1
 801432a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801432c:	f001 fb86 	bl	8015a3c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014330:	f000 fc56 	bl	8014be0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014334:	f001 fb50 	bl	80159d8 <vPortEnterCritical>
 8014338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801433a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801433e:	b25b      	sxtb	r3, r3
 8014340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014344:	d103      	bne.n	801434e <xQueueSemaphoreTake+0x142>
 8014346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014348:	2200      	movs	r2, #0
 801434a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801434e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014350:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014354:	b25b      	sxtb	r3, r3
 8014356:	f1b3 3fff 	cmp.w	r3, #4294967295
 801435a:	d103      	bne.n	8014364 <xQueueSemaphoreTake+0x158>
 801435c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801435e:	2200      	movs	r2, #0
 8014360:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014364:	f001 fb6a 	bl	8015a3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014368:	463a      	mov	r2, r7
 801436a:	f107 030c 	add.w	r3, r7, #12
 801436e:	4611      	mov	r1, r2
 8014370:	4618      	mov	r0, r3
 8014372:	f000 fe97 	bl	80150a4 <xTaskCheckForTimeOut>
 8014376:	4603      	mov	r3, r0
 8014378:	2b00      	cmp	r3, #0
 801437a:	d132      	bne.n	80143e2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801437c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801437e:	f000 f9d1 	bl	8014724 <prvIsQueueEmpty>
 8014382:	4603      	mov	r3, r0
 8014384:	2b00      	cmp	r3, #0
 8014386:	d026      	beq.n	80143d6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	2b00      	cmp	r3, #0
 801438e:	d109      	bne.n	80143a4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8014390:	f001 fb22 	bl	80159d8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014396:	689b      	ldr	r3, [r3, #8]
 8014398:	4618      	mov	r0, r3
 801439a:	f000 ffe7 	bl	801536c <xTaskPriorityInherit>
 801439e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80143a0:	f001 fb4c 	bl	8015a3c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80143a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143a6:	3324      	adds	r3, #36	@ 0x24
 80143a8:	683a      	ldr	r2, [r7, #0]
 80143aa:	4611      	mov	r1, r2
 80143ac:	4618      	mov	r0, r3
 80143ae:	f000 fdd9 	bl	8014f64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80143b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80143b4:	f000 f964 	bl	8014680 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80143b8:	f000 fc20 	bl	8014bfc <xTaskResumeAll>
 80143bc:	4603      	mov	r3, r0
 80143be:	2b00      	cmp	r3, #0
 80143c0:	f47f af67 	bne.w	8014292 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80143c4:	4b18      	ldr	r3, [pc, #96]	@ (8014428 <xQueueSemaphoreTake+0x21c>)
 80143c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80143ca:	601a      	str	r2, [r3, #0]
 80143cc:	f3bf 8f4f 	dsb	sy
 80143d0:	f3bf 8f6f 	isb	sy
 80143d4:	e75d      	b.n	8014292 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80143d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80143d8:	f000 f952 	bl	8014680 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80143dc:	f000 fc0e 	bl	8014bfc <xTaskResumeAll>
 80143e0:	e757      	b.n	8014292 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80143e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80143e4:	f000 f94c 	bl	8014680 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80143e8:	f000 fc08 	bl	8014bfc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80143ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80143ee:	f000 f999 	bl	8014724 <prvIsQueueEmpty>
 80143f2:	4603      	mov	r3, r0
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	f43f af4c 	beq.w	8014292 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80143fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d00d      	beq.n	801441c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8014400:	f001 faea 	bl	80159d8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8014404:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014406:	f000 f893 	bl	8014530 <prvGetDisinheritPriorityAfterTimeout>
 801440a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801440c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801440e:	689b      	ldr	r3, [r3, #8]
 8014410:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014412:	4618      	mov	r0, r3
 8014414:	f001 f8a8 	bl	8015568 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8014418:	f001 fb10 	bl	8015a3c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801441c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801441e:	4618      	mov	r0, r3
 8014420:	3738      	adds	r7, #56	@ 0x38
 8014422:	46bd      	mov	sp, r7
 8014424:	bd80      	pop	{r7, pc}
 8014426:	bf00      	nop
 8014428:	e000ed04 	.word	0xe000ed04

0801442c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801442c:	b580      	push	{r7, lr}
 801442e:	b08e      	sub	sp, #56	@ 0x38
 8014430:	af00      	add	r7, sp, #0
 8014432:	60f8      	str	r0, [r7, #12]
 8014434:	60b9      	str	r1, [r7, #8]
 8014436:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801443c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801443e:	2b00      	cmp	r3, #0
 8014440:	d10b      	bne.n	801445a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8014442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014446:	f383 8811 	msr	BASEPRI, r3
 801444a:	f3bf 8f6f 	isb	sy
 801444e:	f3bf 8f4f 	dsb	sy
 8014452:	623b      	str	r3, [r7, #32]
}
 8014454:	bf00      	nop
 8014456:	bf00      	nop
 8014458:	e7fd      	b.n	8014456 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801445a:	68bb      	ldr	r3, [r7, #8]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d103      	bne.n	8014468 <xQueueReceiveFromISR+0x3c>
 8014460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014464:	2b00      	cmp	r3, #0
 8014466:	d101      	bne.n	801446c <xQueueReceiveFromISR+0x40>
 8014468:	2301      	movs	r3, #1
 801446a:	e000      	b.n	801446e <xQueueReceiveFromISR+0x42>
 801446c:	2300      	movs	r3, #0
 801446e:	2b00      	cmp	r3, #0
 8014470:	d10b      	bne.n	801448a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8014472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014476:	f383 8811 	msr	BASEPRI, r3
 801447a:	f3bf 8f6f 	isb	sy
 801447e:	f3bf 8f4f 	dsb	sy
 8014482:	61fb      	str	r3, [r7, #28]
}
 8014484:	bf00      	nop
 8014486:	bf00      	nop
 8014488:	e7fd      	b.n	8014486 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801448a:	f001 fb85 	bl	8015b98 <vPortValidateInterruptPriority>
	__asm volatile
 801448e:	f3ef 8211 	mrs	r2, BASEPRI
 8014492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014496:	f383 8811 	msr	BASEPRI, r3
 801449a:	f3bf 8f6f 	isb	sy
 801449e:	f3bf 8f4f 	dsb	sy
 80144a2:	61ba      	str	r2, [r7, #24]
 80144a4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80144a6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80144a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80144aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80144ae:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80144b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d02f      	beq.n	8014516 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80144b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80144bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80144c0:	68b9      	ldr	r1, [r7, #8]
 80144c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80144c4:	f000 f8b6 	bl	8014634 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80144c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144ca:	1e5a      	subs	r2, r3, #1
 80144cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144ce:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80144d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80144d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144d8:	d112      	bne.n	8014500 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80144da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144dc:	691b      	ldr	r3, [r3, #16]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d016      	beq.n	8014510 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80144e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144e4:	3310      	adds	r3, #16
 80144e6:	4618      	mov	r0, r3
 80144e8:	f000 fd62 	bl	8014fb0 <xTaskRemoveFromEventList>
 80144ec:	4603      	mov	r3, r0
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d00e      	beq.n	8014510 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d00b      	beq.n	8014510 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	2201      	movs	r2, #1
 80144fc:	601a      	str	r2, [r3, #0]
 80144fe:	e007      	b.n	8014510 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8014500:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014504:	3301      	adds	r3, #1
 8014506:	b2db      	uxtb	r3, r3
 8014508:	b25a      	sxtb	r2, r3
 801450a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801450c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8014510:	2301      	movs	r3, #1
 8014512:	637b      	str	r3, [r7, #52]	@ 0x34
 8014514:	e001      	b.n	801451a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8014516:	2300      	movs	r3, #0
 8014518:	637b      	str	r3, [r7, #52]	@ 0x34
 801451a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801451c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801451e:	693b      	ldr	r3, [r7, #16]
 8014520:	f383 8811 	msr	BASEPRI, r3
}
 8014524:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8014528:	4618      	mov	r0, r3
 801452a:	3738      	adds	r7, #56	@ 0x38
 801452c:	46bd      	mov	sp, r7
 801452e:	bd80      	pop	{r7, pc}

08014530 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8014530:	b480      	push	{r7}
 8014532:	b085      	sub	sp, #20
 8014534:	af00      	add	r7, sp, #0
 8014536:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801453c:	2b00      	cmp	r3, #0
 801453e:	d006      	beq.n	801454e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	f1c3 0307 	rsb	r3, r3, #7
 801454a:	60fb      	str	r3, [r7, #12]
 801454c:	e001      	b.n	8014552 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801454e:	2300      	movs	r3, #0
 8014550:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8014552:	68fb      	ldr	r3, [r7, #12]
	}
 8014554:	4618      	mov	r0, r3
 8014556:	3714      	adds	r7, #20
 8014558:	46bd      	mov	sp, r7
 801455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801455e:	4770      	bx	lr

08014560 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014560:	b580      	push	{r7, lr}
 8014562:	b086      	sub	sp, #24
 8014564:	af00      	add	r7, sp, #0
 8014566:	60f8      	str	r0, [r7, #12]
 8014568:	60b9      	str	r1, [r7, #8]
 801456a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801456c:	2300      	movs	r3, #0
 801456e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014574:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801457a:	2b00      	cmp	r3, #0
 801457c:	d10d      	bne.n	801459a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d14d      	bne.n	8014622 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	689b      	ldr	r3, [r3, #8]
 801458a:	4618      	mov	r0, r3
 801458c:	f000 ff64 	bl	8015458 <xTaskPriorityDisinherit>
 8014590:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	2200      	movs	r2, #0
 8014596:	609a      	str	r2, [r3, #8]
 8014598:	e043      	b.n	8014622 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	2b00      	cmp	r3, #0
 801459e:	d119      	bne.n	80145d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	6858      	ldr	r0, [r3, #4]
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80145a8:	461a      	mov	r2, r3
 80145aa:	68b9      	ldr	r1, [r7, #8]
 80145ac:	f002 fd0d 	bl	8016fca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	685a      	ldr	r2, [r3, #4]
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80145b8:	441a      	add	r2, r3
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	685a      	ldr	r2, [r3, #4]
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	689b      	ldr	r3, [r3, #8]
 80145c6:	429a      	cmp	r2, r3
 80145c8:	d32b      	bcc.n	8014622 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	681a      	ldr	r2, [r3, #0]
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	605a      	str	r2, [r3, #4]
 80145d2:	e026      	b.n	8014622 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	68d8      	ldr	r0, [r3, #12]
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80145dc:	461a      	mov	r2, r3
 80145de:	68b9      	ldr	r1, [r7, #8]
 80145e0:	f002 fcf3 	bl	8016fca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	68da      	ldr	r2, [r3, #12]
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80145ec:	425b      	negs	r3, r3
 80145ee:	441a      	add	r2, r3
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	68da      	ldr	r2, [r3, #12]
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	429a      	cmp	r2, r3
 80145fe:	d207      	bcs.n	8014610 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014600:	68fb      	ldr	r3, [r7, #12]
 8014602:	689a      	ldr	r2, [r3, #8]
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014608:	425b      	negs	r3, r3
 801460a:	441a      	add	r2, r3
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	2b02      	cmp	r3, #2
 8014614:	d105      	bne.n	8014622 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014616:	693b      	ldr	r3, [r7, #16]
 8014618:	2b00      	cmp	r3, #0
 801461a:	d002      	beq.n	8014622 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801461c:	693b      	ldr	r3, [r7, #16]
 801461e:	3b01      	subs	r3, #1
 8014620:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014622:	693b      	ldr	r3, [r7, #16]
 8014624:	1c5a      	adds	r2, r3, #1
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801462a:	697b      	ldr	r3, [r7, #20]
}
 801462c:	4618      	mov	r0, r3
 801462e:	3718      	adds	r7, #24
 8014630:	46bd      	mov	sp, r7
 8014632:	bd80      	pop	{r7, pc}

08014634 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014634:	b580      	push	{r7, lr}
 8014636:	b082      	sub	sp, #8
 8014638:	af00      	add	r7, sp, #0
 801463a:	6078      	str	r0, [r7, #4]
 801463c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014642:	2b00      	cmp	r3, #0
 8014644:	d018      	beq.n	8014678 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	68da      	ldr	r2, [r3, #12]
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801464e:	441a      	add	r2, r3
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	68da      	ldr	r2, [r3, #12]
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	689b      	ldr	r3, [r3, #8]
 801465c:	429a      	cmp	r2, r3
 801465e:	d303      	bcc.n	8014668 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	681a      	ldr	r2, [r3, #0]
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	68d9      	ldr	r1, [r3, #12]
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014670:	461a      	mov	r2, r3
 8014672:	6838      	ldr	r0, [r7, #0]
 8014674:	f002 fca9 	bl	8016fca <memcpy>
	}
}
 8014678:	bf00      	nop
 801467a:	3708      	adds	r7, #8
 801467c:	46bd      	mov	sp, r7
 801467e:	bd80      	pop	{r7, pc}

08014680 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014680:	b580      	push	{r7, lr}
 8014682:	b084      	sub	sp, #16
 8014684:	af00      	add	r7, sp, #0
 8014686:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014688:	f001 f9a6 	bl	80159d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014692:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014694:	e011      	b.n	80146ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801469a:	2b00      	cmp	r3, #0
 801469c:	d012      	beq.n	80146c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	3324      	adds	r3, #36	@ 0x24
 80146a2:	4618      	mov	r0, r3
 80146a4:	f000 fc84 	bl	8014fb0 <xTaskRemoveFromEventList>
 80146a8:	4603      	mov	r3, r0
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d001      	beq.n	80146b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80146ae:	f000 fd5d 	bl	801516c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80146b2:	7bfb      	ldrb	r3, [r7, #15]
 80146b4:	3b01      	subs	r3, #1
 80146b6:	b2db      	uxtb	r3, r3
 80146b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80146ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	dce9      	bgt.n	8014696 <prvUnlockQueue+0x16>
 80146c2:	e000      	b.n	80146c6 <prvUnlockQueue+0x46>
					break;
 80146c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	22ff      	movs	r2, #255	@ 0xff
 80146ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80146ce:	f001 f9b5 	bl	8015a3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80146d2:	f001 f981 	bl	80159d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80146dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80146de:	e011      	b.n	8014704 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	691b      	ldr	r3, [r3, #16]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d012      	beq.n	801470e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	3310      	adds	r3, #16
 80146ec:	4618      	mov	r0, r3
 80146ee:	f000 fc5f 	bl	8014fb0 <xTaskRemoveFromEventList>
 80146f2:	4603      	mov	r3, r0
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d001      	beq.n	80146fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80146f8:	f000 fd38 	bl	801516c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80146fc:	7bbb      	ldrb	r3, [r7, #14]
 80146fe:	3b01      	subs	r3, #1
 8014700:	b2db      	uxtb	r3, r3
 8014702:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014704:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014708:	2b00      	cmp	r3, #0
 801470a:	dce9      	bgt.n	80146e0 <prvUnlockQueue+0x60>
 801470c:	e000      	b.n	8014710 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801470e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	22ff      	movs	r2, #255	@ 0xff
 8014714:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8014718:	f001 f990 	bl	8015a3c <vPortExitCritical>
}
 801471c:	bf00      	nop
 801471e:	3710      	adds	r7, #16
 8014720:	46bd      	mov	sp, r7
 8014722:	bd80      	pop	{r7, pc}

08014724 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014724:	b580      	push	{r7, lr}
 8014726:	b084      	sub	sp, #16
 8014728:	af00      	add	r7, sp, #0
 801472a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801472c:	f001 f954 	bl	80159d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014734:	2b00      	cmp	r3, #0
 8014736:	d102      	bne.n	801473e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014738:	2301      	movs	r3, #1
 801473a:	60fb      	str	r3, [r7, #12]
 801473c:	e001      	b.n	8014742 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801473e:	2300      	movs	r3, #0
 8014740:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014742:	f001 f97b 	bl	8015a3c <vPortExitCritical>

	return xReturn;
 8014746:	68fb      	ldr	r3, [r7, #12]
}
 8014748:	4618      	mov	r0, r3
 801474a:	3710      	adds	r7, #16
 801474c:	46bd      	mov	sp, r7
 801474e:	bd80      	pop	{r7, pc}

08014750 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014750:	b580      	push	{r7, lr}
 8014752:	b084      	sub	sp, #16
 8014754:	af00      	add	r7, sp, #0
 8014756:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014758:	f001 f93e 	bl	80159d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014764:	429a      	cmp	r2, r3
 8014766:	d102      	bne.n	801476e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014768:	2301      	movs	r3, #1
 801476a:	60fb      	str	r3, [r7, #12]
 801476c:	e001      	b.n	8014772 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801476e:	2300      	movs	r3, #0
 8014770:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014772:	f001 f963 	bl	8015a3c <vPortExitCritical>

	return xReturn;
 8014776:	68fb      	ldr	r3, [r7, #12]
}
 8014778:	4618      	mov	r0, r3
 801477a:	3710      	adds	r7, #16
 801477c:	46bd      	mov	sp, r7
 801477e:	bd80      	pop	{r7, pc}

08014780 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014780:	b580      	push	{r7, lr}
 8014782:	b08e      	sub	sp, #56	@ 0x38
 8014784:	af04      	add	r7, sp, #16
 8014786:	60f8      	str	r0, [r7, #12]
 8014788:	60b9      	str	r1, [r7, #8]
 801478a:	607a      	str	r2, [r7, #4]
 801478c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801478e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014790:	2b00      	cmp	r3, #0
 8014792:	d10b      	bne.n	80147ac <xTaskCreateStatic+0x2c>
	__asm volatile
 8014794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014798:	f383 8811 	msr	BASEPRI, r3
 801479c:	f3bf 8f6f 	isb	sy
 80147a0:	f3bf 8f4f 	dsb	sy
 80147a4:	623b      	str	r3, [r7, #32]
}
 80147a6:	bf00      	nop
 80147a8:	bf00      	nop
 80147aa:	e7fd      	b.n	80147a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80147ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d10b      	bne.n	80147ca <xTaskCreateStatic+0x4a>
	__asm volatile
 80147b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80147b6:	f383 8811 	msr	BASEPRI, r3
 80147ba:	f3bf 8f6f 	isb	sy
 80147be:	f3bf 8f4f 	dsb	sy
 80147c2:	61fb      	str	r3, [r7, #28]
}
 80147c4:	bf00      	nop
 80147c6:	bf00      	nop
 80147c8:	e7fd      	b.n	80147c6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80147ca:	2354      	movs	r3, #84	@ 0x54
 80147cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80147ce:	693b      	ldr	r3, [r7, #16]
 80147d0:	2b54      	cmp	r3, #84	@ 0x54
 80147d2:	d00b      	beq.n	80147ec <xTaskCreateStatic+0x6c>
	__asm volatile
 80147d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80147d8:	f383 8811 	msr	BASEPRI, r3
 80147dc:	f3bf 8f6f 	isb	sy
 80147e0:	f3bf 8f4f 	dsb	sy
 80147e4:	61bb      	str	r3, [r7, #24]
}
 80147e6:	bf00      	nop
 80147e8:	bf00      	nop
 80147ea:	e7fd      	b.n	80147e8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80147ec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80147ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d01e      	beq.n	8014832 <xTaskCreateStatic+0xb2>
 80147f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d01b      	beq.n	8014832 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80147fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147fc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80147fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014800:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014802:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014806:	2202      	movs	r2, #2
 8014808:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801480c:	2300      	movs	r3, #0
 801480e:	9303      	str	r3, [sp, #12]
 8014810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014812:	9302      	str	r3, [sp, #8]
 8014814:	f107 0314 	add.w	r3, r7, #20
 8014818:	9301      	str	r3, [sp, #4]
 801481a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801481c:	9300      	str	r3, [sp, #0]
 801481e:	683b      	ldr	r3, [r7, #0]
 8014820:	687a      	ldr	r2, [r7, #4]
 8014822:	68b9      	ldr	r1, [r7, #8]
 8014824:	68f8      	ldr	r0, [r7, #12]
 8014826:	f000 f850 	bl	80148ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801482a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801482c:	f000 f8d6 	bl	80149dc <prvAddNewTaskToReadyList>
 8014830:	e001      	b.n	8014836 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8014832:	2300      	movs	r3, #0
 8014834:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014836:	697b      	ldr	r3, [r7, #20]
	}
 8014838:	4618      	mov	r0, r3
 801483a:	3728      	adds	r7, #40	@ 0x28
 801483c:	46bd      	mov	sp, r7
 801483e:	bd80      	pop	{r7, pc}

08014840 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014840:	b580      	push	{r7, lr}
 8014842:	b08c      	sub	sp, #48	@ 0x30
 8014844:	af04      	add	r7, sp, #16
 8014846:	60f8      	str	r0, [r7, #12]
 8014848:	60b9      	str	r1, [r7, #8]
 801484a:	603b      	str	r3, [r7, #0]
 801484c:	4613      	mov	r3, r2
 801484e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014850:	88fb      	ldrh	r3, [r7, #6]
 8014852:	009b      	lsls	r3, r3, #2
 8014854:	4618      	mov	r0, r3
 8014856:	f001 f9e1 	bl	8015c1c <pvPortMalloc>
 801485a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801485c:	697b      	ldr	r3, [r7, #20]
 801485e:	2b00      	cmp	r3, #0
 8014860:	d00e      	beq.n	8014880 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014862:	2054      	movs	r0, #84	@ 0x54
 8014864:	f001 f9da 	bl	8015c1c <pvPortMalloc>
 8014868:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801486a:	69fb      	ldr	r3, [r7, #28]
 801486c:	2b00      	cmp	r3, #0
 801486e:	d003      	beq.n	8014878 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014870:	69fb      	ldr	r3, [r7, #28]
 8014872:	697a      	ldr	r2, [r7, #20]
 8014874:	631a      	str	r2, [r3, #48]	@ 0x30
 8014876:	e005      	b.n	8014884 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014878:	6978      	ldr	r0, [r7, #20]
 801487a:	f001 fa9d 	bl	8015db8 <vPortFree>
 801487e:	e001      	b.n	8014884 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014880:	2300      	movs	r3, #0
 8014882:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014884:	69fb      	ldr	r3, [r7, #28]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d017      	beq.n	80148ba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801488a:	69fb      	ldr	r3, [r7, #28]
 801488c:	2200      	movs	r2, #0
 801488e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014892:	88fa      	ldrh	r2, [r7, #6]
 8014894:	2300      	movs	r3, #0
 8014896:	9303      	str	r3, [sp, #12]
 8014898:	69fb      	ldr	r3, [r7, #28]
 801489a:	9302      	str	r3, [sp, #8]
 801489c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801489e:	9301      	str	r3, [sp, #4]
 80148a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148a2:	9300      	str	r3, [sp, #0]
 80148a4:	683b      	ldr	r3, [r7, #0]
 80148a6:	68b9      	ldr	r1, [r7, #8]
 80148a8:	68f8      	ldr	r0, [r7, #12]
 80148aa:	f000 f80e 	bl	80148ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80148ae:	69f8      	ldr	r0, [r7, #28]
 80148b0:	f000 f894 	bl	80149dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80148b4:	2301      	movs	r3, #1
 80148b6:	61bb      	str	r3, [r7, #24]
 80148b8:	e002      	b.n	80148c0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80148ba:	f04f 33ff 	mov.w	r3, #4294967295
 80148be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80148c0:	69bb      	ldr	r3, [r7, #24]
	}
 80148c2:	4618      	mov	r0, r3
 80148c4:	3720      	adds	r7, #32
 80148c6:	46bd      	mov	sp, r7
 80148c8:	bd80      	pop	{r7, pc}

080148ca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80148ca:	b580      	push	{r7, lr}
 80148cc:	b088      	sub	sp, #32
 80148ce:	af00      	add	r7, sp, #0
 80148d0:	60f8      	str	r0, [r7, #12]
 80148d2:	60b9      	str	r1, [r7, #8]
 80148d4:	607a      	str	r2, [r7, #4]
 80148d6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80148d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80148da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80148dc:	6879      	ldr	r1, [r7, #4]
 80148de:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80148e2:	440b      	add	r3, r1
 80148e4:	009b      	lsls	r3, r3, #2
 80148e6:	4413      	add	r3, r2
 80148e8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80148ea:	69bb      	ldr	r3, [r7, #24]
 80148ec:	f023 0307 	bic.w	r3, r3, #7
 80148f0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80148f2:	69bb      	ldr	r3, [r7, #24]
 80148f4:	f003 0307 	and.w	r3, r3, #7
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d00b      	beq.n	8014914 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80148fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014900:	f383 8811 	msr	BASEPRI, r3
 8014904:	f3bf 8f6f 	isb	sy
 8014908:	f3bf 8f4f 	dsb	sy
 801490c:	617b      	str	r3, [r7, #20]
}
 801490e:	bf00      	nop
 8014910:	bf00      	nop
 8014912:	e7fd      	b.n	8014910 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014914:	68bb      	ldr	r3, [r7, #8]
 8014916:	2b00      	cmp	r3, #0
 8014918:	d01f      	beq.n	801495a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801491a:	2300      	movs	r3, #0
 801491c:	61fb      	str	r3, [r7, #28]
 801491e:	e012      	b.n	8014946 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014920:	68ba      	ldr	r2, [r7, #8]
 8014922:	69fb      	ldr	r3, [r7, #28]
 8014924:	4413      	add	r3, r2
 8014926:	7819      	ldrb	r1, [r3, #0]
 8014928:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801492a:	69fb      	ldr	r3, [r7, #28]
 801492c:	4413      	add	r3, r2
 801492e:	3334      	adds	r3, #52	@ 0x34
 8014930:	460a      	mov	r2, r1
 8014932:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014934:	68ba      	ldr	r2, [r7, #8]
 8014936:	69fb      	ldr	r3, [r7, #28]
 8014938:	4413      	add	r3, r2
 801493a:	781b      	ldrb	r3, [r3, #0]
 801493c:	2b00      	cmp	r3, #0
 801493e:	d006      	beq.n	801494e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014940:	69fb      	ldr	r3, [r7, #28]
 8014942:	3301      	adds	r3, #1
 8014944:	61fb      	str	r3, [r7, #28]
 8014946:	69fb      	ldr	r3, [r7, #28]
 8014948:	2b0f      	cmp	r3, #15
 801494a:	d9e9      	bls.n	8014920 <prvInitialiseNewTask+0x56>
 801494c:	e000      	b.n	8014950 <prvInitialiseNewTask+0x86>
			{
				break;
 801494e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014952:	2200      	movs	r2, #0
 8014954:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8014958:	e003      	b.n	8014962 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801495a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801495c:	2200      	movs	r2, #0
 801495e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014964:	2b06      	cmp	r3, #6
 8014966:	d901      	bls.n	801496c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014968:	2306      	movs	r3, #6
 801496a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801496c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801496e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014970:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014974:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014976:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8014978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801497a:	2200      	movs	r2, #0
 801497c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801497e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014980:	3304      	adds	r3, #4
 8014982:	4618      	mov	r0, r3
 8014984:	f7ff fa1c 	bl	8013dc0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801498a:	3318      	adds	r3, #24
 801498c:	4618      	mov	r0, r3
 801498e:	f7ff fa17 	bl	8013dc0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014994:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014996:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801499a:	f1c3 0207 	rsb	r2, r3, #7
 801499e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80149a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80149a6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80149a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149aa:	2200      	movs	r2, #0
 80149ac:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80149ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149b0:	2200      	movs	r2, #0
 80149b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80149b6:	683a      	ldr	r2, [r7, #0]
 80149b8:	68f9      	ldr	r1, [r7, #12]
 80149ba:	69b8      	ldr	r0, [r7, #24]
 80149bc:	f000 fede 	bl	801577c <pxPortInitialiseStack>
 80149c0:	4602      	mov	r2, r0
 80149c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80149c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d002      	beq.n	80149d2 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80149cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80149d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80149d2:	bf00      	nop
 80149d4:	3720      	adds	r7, #32
 80149d6:	46bd      	mov	sp, r7
 80149d8:	bd80      	pop	{r7, pc}
	...

080149dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80149dc:	b580      	push	{r7, lr}
 80149de:	b082      	sub	sp, #8
 80149e0:	af00      	add	r7, sp, #0
 80149e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80149e4:	f000 fff8 	bl	80159d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80149e8:	4b2a      	ldr	r3, [pc, #168]	@ (8014a94 <prvAddNewTaskToReadyList+0xb8>)
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	3301      	adds	r3, #1
 80149ee:	4a29      	ldr	r2, [pc, #164]	@ (8014a94 <prvAddNewTaskToReadyList+0xb8>)
 80149f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80149f2:	4b29      	ldr	r3, [pc, #164]	@ (8014a98 <prvAddNewTaskToReadyList+0xbc>)
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d109      	bne.n	8014a0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80149fa:	4a27      	ldr	r2, [pc, #156]	@ (8014a98 <prvAddNewTaskToReadyList+0xbc>)
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014a00:	4b24      	ldr	r3, [pc, #144]	@ (8014a94 <prvAddNewTaskToReadyList+0xb8>)
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	2b01      	cmp	r3, #1
 8014a06:	d110      	bne.n	8014a2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014a08:	f000 fbd4 	bl	80151b4 <prvInitialiseTaskLists>
 8014a0c:	e00d      	b.n	8014a2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014a0e:	4b23      	ldr	r3, [pc, #140]	@ (8014a9c <prvAddNewTaskToReadyList+0xc0>)
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d109      	bne.n	8014a2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014a16:	4b20      	ldr	r3, [pc, #128]	@ (8014a98 <prvAddNewTaskToReadyList+0xbc>)
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a20:	429a      	cmp	r2, r3
 8014a22:	d802      	bhi.n	8014a2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014a24:	4a1c      	ldr	r2, [pc, #112]	@ (8014a98 <prvAddNewTaskToReadyList+0xbc>)
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8014aa0 <prvAddNewTaskToReadyList+0xc4>)
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	3301      	adds	r3, #1
 8014a30:	4a1b      	ldr	r2, [pc, #108]	@ (8014aa0 <prvAddNewTaskToReadyList+0xc4>)
 8014a32:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a38:	2201      	movs	r2, #1
 8014a3a:	409a      	lsls	r2, r3
 8014a3c:	4b19      	ldr	r3, [pc, #100]	@ (8014aa4 <prvAddNewTaskToReadyList+0xc8>)
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	4313      	orrs	r3, r2
 8014a42:	4a18      	ldr	r2, [pc, #96]	@ (8014aa4 <prvAddNewTaskToReadyList+0xc8>)
 8014a44:	6013      	str	r3, [r2, #0]
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a4a:	4613      	mov	r3, r2
 8014a4c:	009b      	lsls	r3, r3, #2
 8014a4e:	4413      	add	r3, r2
 8014a50:	009b      	lsls	r3, r3, #2
 8014a52:	4a15      	ldr	r2, [pc, #84]	@ (8014aa8 <prvAddNewTaskToReadyList+0xcc>)
 8014a54:	441a      	add	r2, r3
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	3304      	adds	r3, #4
 8014a5a:	4619      	mov	r1, r3
 8014a5c:	4610      	mov	r0, r2
 8014a5e:	f7ff f9bc 	bl	8013dda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014a62:	f000 ffeb 	bl	8015a3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014a66:	4b0d      	ldr	r3, [pc, #52]	@ (8014a9c <prvAddNewTaskToReadyList+0xc0>)
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d00e      	beq.n	8014a8c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8014a98 <prvAddNewTaskToReadyList+0xbc>)
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a78:	429a      	cmp	r2, r3
 8014a7a:	d207      	bcs.n	8014a8c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8014aac <prvAddNewTaskToReadyList+0xd0>)
 8014a7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014a82:	601a      	str	r2, [r3, #0]
 8014a84:	f3bf 8f4f 	dsb	sy
 8014a88:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014a8c:	bf00      	nop
 8014a8e:	3708      	adds	r7, #8
 8014a90:	46bd      	mov	sp, r7
 8014a92:	bd80      	pop	{r7, pc}
 8014a94:	24002aa4 	.word	0x24002aa4
 8014a98:	240029a4 	.word	0x240029a4
 8014a9c:	24002ab0 	.word	0x24002ab0
 8014aa0:	24002ac0 	.word	0x24002ac0
 8014aa4:	24002aac 	.word	0x24002aac
 8014aa8:	240029a8 	.word	0x240029a8
 8014aac:	e000ed04 	.word	0xe000ed04

08014ab0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014ab0:	b580      	push	{r7, lr}
 8014ab2:	b084      	sub	sp, #16
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014ab8:	2300      	movs	r3, #0
 8014aba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d018      	beq.n	8014af4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014ac2:	4b14      	ldr	r3, [pc, #80]	@ (8014b14 <vTaskDelay+0x64>)
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d00b      	beq.n	8014ae2 <vTaskDelay+0x32>
	__asm volatile
 8014aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ace:	f383 8811 	msr	BASEPRI, r3
 8014ad2:	f3bf 8f6f 	isb	sy
 8014ad6:	f3bf 8f4f 	dsb	sy
 8014ada:	60bb      	str	r3, [r7, #8]
}
 8014adc:	bf00      	nop
 8014ade:	bf00      	nop
 8014ae0:	e7fd      	b.n	8014ade <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014ae2:	f000 f87d 	bl	8014be0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014ae6:	2100      	movs	r1, #0
 8014ae8:	6878      	ldr	r0, [r7, #4]
 8014aea:	f000 fde1 	bl	80156b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014aee:	f000 f885 	bl	8014bfc <xTaskResumeAll>
 8014af2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d107      	bne.n	8014b0a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8014afa:	4b07      	ldr	r3, [pc, #28]	@ (8014b18 <vTaskDelay+0x68>)
 8014afc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014b00:	601a      	str	r2, [r3, #0]
 8014b02:	f3bf 8f4f 	dsb	sy
 8014b06:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014b0a:	bf00      	nop
 8014b0c:	3710      	adds	r7, #16
 8014b0e:	46bd      	mov	sp, r7
 8014b10:	bd80      	pop	{r7, pc}
 8014b12:	bf00      	nop
 8014b14:	24002acc 	.word	0x24002acc
 8014b18:	e000ed04 	.word	0xe000ed04

08014b1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014b1c:	b580      	push	{r7, lr}
 8014b1e:	b08a      	sub	sp, #40	@ 0x28
 8014b20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014b22:	2300      	movs	r3, #0
 8014b24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014b26:	2300      	movs	r3, #0
 8014b28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014b2a:	463a      	mov	r2, r7
 8014b2c:	1d39      	adds	r1, r7, #4
 8014b2e:	f107 0308 	add.w	r3, r7, #8
 8014b32:	4618      	mov	r0, r3
 8014b34:	f7ec fc96 	bl	8001464 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014b38:	6839      	ldr	r1, [r7, #0]
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	68ba      	ldr	r2, [r7, #8]
 8014b3e:	9202      	str	r2, [sp, #8]
 8014b40:	9301      	str	r3, [sp, #4]
 8014b42:	2300      	movs	r3, #0
 8014b44:	9300      	str	r3, [sp, #0]
 8014b46:	2300      	movs	r3, #0
 8014b48:	460a      	mov	r2, r1
 8014b4a:	491f      	ldr	r1, [pc, #124]	@ (8014bc8 <vTaskStartScheduler+0xac>)
 8014b4c:	481f      	ldr	r0, [pc, #124]	@ (8014bcc <vTaskStartScheduler+0xb0>)
 8014b4e:	f7ff fe17 	bl	8014780 <xTaskCreateStatic>
 8014b52:	4603      	mov	r3, r0
 8014b54:	4a1e      	ldr	r2, [pc, #120]	@ (8014bd0 <vTaskStartScheduler+0xb4>)
 8014b56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014b58:	4b1d      	ldr	r3, [pc, #116]	@ (8014bd0 <vTaskStartScheduler+0xb4>)
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d002      	beq.n	8014b66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014b60:	2301      	movs	r3, #1
 8014b62:	617b      	str	r3, [r7, #20]
 8014b64:	e001      	b.n	8014b6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014b66:	2300      	movs	r3, #0
 8014b68:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014b6a:	697b      	ldr	r3, [r7, #20]
 8014b6c:	2b01      	cmp	r3, #1
 8014b6e:	d116      	bne.n	8014b9e <vTaskStartScheduler+0x82>
	__asm volatile
 8014b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b74:	f383 8811 	msr	BASEPRI, r3
 8014b78:	f3bf 8f6f 	isb	sy
 8014b7c:	f3bf 8f4f 	dsb	sy
 8014b80:	613b      	str	r3, [r7, #16]
}
 8014b82:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014b84:	4b13      	ldr	r3, [pc, #76]	@ (8014bd4 <vTaskStartScheduler+0xb8>)
 8014b86:	f04f 32ff 	mov.w	r2, #4294967295
 8014b8a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014b8c:	4b12      	ldr	r3, [pc, #72]	@ (8014bd8 <vTaskStartScheduler+0xbc>)
 8014b8e:	2201      	movs	r2, #1
 8014b90:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014b92:	4b12      	ldr	r3, [pc, #72]	@ (8014bdc <vTaskStartScheduler+0xc0>)
 8014b94:	2200      	movs	r2, #0
 8014b96:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014b98:	f000 fe7a 	bl	8015890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014b9c:	e00f      	b.n	8014bbe <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014b9e:	697b      	ldr	r3, [r7, #20]
 8014ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ba4:	d10b      	bne.n	8014bbe <vTaskStartScheduler+0xa2>
	__asm volatile
 8014ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014baa:	f383 8811 	msr	BASEPRI, r3
 8014bae:	f3bf 8f6f 	isb	sy
 8014bb2:	f3bf 8f4f 	dsb	sy
 8014bb6:	60fb      	str	r3, [r7, #12]
}
 8014bb8:	bf00      	nop
 8014bba:	bf00      	nop
 8014bbc:	e7fd      	b.n	8014bba <vTaskStartScheduler+0x9e>
}
 8014bbe:	bf00      	nop
 8014bc0:	3718      	adds	r7, #24
 8014bc2:	46bd      	mov	sp, r7
 8014bc4:	bd80      	pop	{r7, pc}
 8014bc6:	bf00      	nop
 8014bc8:	08018fdc 	.word	0x08018fdc
 8014bcc:	08015185 	.word	0x08015185
 8014bd0:	24002ac8 	.word	0x24002ac8
 8014bd4:	24002ac4 	.word	0x24002ac4
 8014bd8:	24002ab0 	.word	0x24002ab0
 8014bdc:	24002aa8 	.word	0x24002aa8

08014be0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014be0:	b480      	push	{r7}
 8014be2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014be4:	4b04      	ldr	r3, [pc, #16]	@ (8014bf8 <vTaskSuspendAll+0x18>)
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	3301      	adds	r3, #1
 8014bea:	4a03      	ldr	r2, [pc, #12]	@ (8014bf8 <vTaskSuspendAll+0x18>)
 8014bec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8014bee:	bf00      	nop
 8014bf0:	46bd      	mov	sp, r7
 8014bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf6:	4770      	bx	lr
 8014bf8:	24002acc 	.word	0x24002acc

08014bfc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014bfc:	b580      	push	{r7, lr}
 8014bfe:	b084      	sub	sp, #16
 8014c00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014c02:	2300      	movs	r3, #0
 8014c04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014c06:	2300      	movs	r3, #0
 8014c08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014c0a:	4b42      	ldr	r3, [pc, #264]	@ (8014d14 <xTaskResumeAll+0x118>)
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d10b      	bne.n	8014c2a <xTaskResumeAll+0x2e>
	__asm volatile
 8014c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c16:	f383 8811 	msr	BASEPRI, r3
 8014c1a:	f3bf 8f6f 	isb	sy
 8014c1e:	f3bf 8f4f 	dsb	sy
 8014c22:	603b      	str	r3, [r7, #0]
}
 8014c24:	bf00      	nop
 8014c26:	bf00      	nop
 8014c28:	e7fd      	b.n	8014c26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014c2a:	f000 fed5 	bl	80159d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014c2e:	4b39      	ldr	r3, [pc, #228]	@ (8014d14 <xTaskResumeAll+0x118>)
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	3b01      	subs	r3, #1
 8014c34:	4a37      	ldr	r2, [pc, #220]	@ (8014d14 <xTaskResumeAll+0x118>)
 8014c36:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014c38:	4b36      	ldr	r3, [pc, #216]	@ (8014d14 <xTaskResumeAll+0x118>)
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d161      	bne.n	8014d04 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014c40:	4b35      	ldr	r3, [pc, #212]	@ (8014d18 <xTaskResumeAll+0x11c>)
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d05d      	beq.n	8014d04 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014c48:	e02e      	b.n	8014ca8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014c4a:	4b34      	ldr	r3, [pc, #208]	@ (8014d1c <xTaskResumeAll+0x120>)
 8014c4c:	68db      	ldr	r3, [r3, #12]
 8014c4e:	68db      	ldr	r3, [r3, #12]
 8014c50:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	3318      	adds	r3, #24
 8014c56:	4618      	mov	r0, r3
 8014c58:	f7ff f91c 	bl	8013e94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	3304      	adds	r3, #4
 8014c60:	4618      	mov	r0, r3
 8014c62:	f7ff f917 	bl	8013e94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c6a:	2201      	movs	r2, #1
 8014c6c:	409a      	lsls	r2, r3
 8014c6e:	4b2c      	ldr	r3, [pc, #176]	@ (8014d20 <xTaskResumeAll+0x124>)
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	4313      	orrs	r3, r2
 8014c74:	4a2a      	ldr	r2, [pc, #168]	@ (8014d20 <xTaskResumeAll+0x124>)
 8014c76:	6013      	str	r3, [r2, #0]
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014c7c:	4613      	mov	r3, r2
 8014c7e:	009b      	lsls	r3, r3, #2
 8014c80:	4413      	add	r3, r2
 8014c82:	009b      	lsls	r3, r3, #2
 8014c84:	4a27      	ldr	r2, [pc, #156]	@ (8014d24 <xTaskResumeAll+0x128>)
 8014c86:	441a      	add	r2, r3
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	3304      	adds	r3, #4
 8014c8c:	4619      	mov	r1, r3
 8014c8e:	4610      	mov	r0, r2
 8014c90:	f7ff f8a3 	bl	8013dda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014c98:	4b23      	ldr	r3, [pc, #140]	@ (8014d28 <xTaskResumeAll+0x12c>)
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c9e:	429a      	cmp	r2, r3
 8014ca0:	d302      	bcc.n	8014ca8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8014ca2:	4b22      	ldr	r3, [pc, #136]	@ (8014d2c <xTaskResumeAll+0x130>)
 8014ca4:	2201      	movs	r2, #1
 8014ca6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8014d1c <xTaskResumeAll+0x120>)
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d1cc      	bne.n	8014c4a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d001      	beq.n	8014cba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014cb6:	f000 fb1b 	bl	80152f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8014cba:	4b1d      	ldr	r3, [pc, #116]	@ (8014d30 <xTaskResumeAll+0x134>)
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d010      	beq.n	8014ce8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014cc6:	f000 f837 	bl	8014d38 <xTaskIncrementTick>
 8014cca:	4603      	mov	r3, r0
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d002      	beq.n	8014cd6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8014cd0:	4b16      	ldr	r3, [pc, #88]	@ (8014d2c <xTaskResumeAll+0x130>)
 8014cd2:	2201      	movs	r2, #1
 8014cd4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	3b01      	subs	r3, #1
 8014cda:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d1f1      	bne.n	8014cc6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8014ce2:	4b13      	ldr	r3, [pc, #76]	@ (8014d30 <xTaskResumeAll+0x134>)
 8014ce4:	2200      	movs	r2, #0
 8014ce6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014ce8:	4b10      	ldr	r3, [pc, #64]	@ (8014d2c <xTaskResumeAll+0x130>)
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d009      	beq.n	8014d04 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014cf0:	2301      	movs	r3, #1
 8014cf2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8014d34 <xTaskResumeAll+0x138>)
 8014cf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014cfa:	601a      	str	r2, [r3, #0]
 8014cfc:	f3bf 8f4f 	dsb	sy
 8014d00:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014d04:	f000 fe9a 	bl	8015a3c <vPortExitCritical>

	return xAlreadyYielded;
 8014d08:	68bb      	ldr	r3, [r7, #8]
}
 8014d0a:	4618      	mov	r0, r3
 8014d0c:	3710      	adds	r7, #16
 8014d0e:	46bd      	mov	sp, r7
 8014d10:	bd80      	pop	{r7, pc}
 8014d12:	bf00      	nop
 8014d14:	24002acc 	.word	0x24002acc
 8014d18:	24002aa4 	.word	0x24002aa4
 8014d1c:	24002a64 	.word	0x24002a64
 8014d20:	24002aac 	.word	0x24002aac
 8014d24:	240029a8 	.word	0x240029a8
 8014d28:	240029a4 	.word	0x240029a4
 8014d2c:	24002ab8 	.word	0x24002ab8
 8014d30:	24002ab4 	.word	0x24002ab4
 8014d34:	e000ed04 	.word	0xe000ed04

08014d38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014d38:	b580      	push	{r7, lr}
 8014d3a:	b086      	sub	sp, #24
 8014d3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014d3e:	2300      	movs	r3, #0
 8014d40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014d42:	4b4f      	ldr	r3, [pc, #316]	@ (8014e80 <xTaskIncrementTick+0x148>)
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	f040 808f 	bne.w	8014e6a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014d4c:	4b4d      	ldr	r3, [pc, #308]	@ (8014e84 <xTaskIncrementTick+0x14c>)
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	3301      	adds	r3, #1
 8014d52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014d54:	4a4b      	ldr	r2, [pc, #300]	@ (8014e84 <xTaskIncrementTick+0x14c>)
 8014d56:	693b      	ldr	r3, [r7, #16]
 8014d58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014d5a:	693b      	ldr	r3, [r7, #16]
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d121      	bne.n	8014da4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8014d60:	4b49      	ldr	r3, [pc, #292]	@ (8014e88 <xTaskIncrementTick+0x150>)
 8014d62:	681b      	ldr	r3, [r3, #0]
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d00b      	beq.n	8014d82 <xTaskIncrementTick+0x4a>
	__asm volatile
 8014d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d6e:	f383 8811 	msr	BASEPRI, r3
 8014d72:	f3bf 8f6f 	isb	sy
 8014d76:	f3bf 8f4f 	dsb	sy
 8014d7a:	603b      	str	r3, [r7, #0]
}
 8014d7c:	bf00      	nop
 8014d7e:	bf00      	nop
 8014d80:	e7fd      	b.n	8014d7e <xTaskIncrementTick+0x46>
 8014d82:	4b41      	ldr	r3, [pc, #260]	@ (8014e88 <xTaskIncrementTick+0x150>)
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	60fb      	str	r3, [r7, #12]
 8014d88:	4b40      	ldr	r3, [pc, #256]	@ (8014e8c <xTaskIncrementTick+0x154>)
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	4a3e      	ldr	r2, [pc, #248]	@ (8014e88 <xTaskIncrementTick+0x150>)
 8014d8e:	6013      	str	r3, [r2, #0]
 8014d90:	4a3e      	ldr	r2, [pc, #248]	@ (8014e8c <xTaskIncrementTick+0x154>)
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	6013      	str	r3, [r2, #0]
 8014d96:	4b3e      	ldr	r3, [pc, #248]	@ (8014e90 <xTaskIncrementTick+0x158>)
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	3301      	adds	r3, #1
 8014d9c:	4a3c      	ldr	r2, [pc, #240]	@ (8014e90 <xTaskIncrementTick+0x158>)
 8014d9e:	6013      	str	r3, [r2, #0]
 8014da0:	f000 faa6 	bl	80152f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014da4:	4b3b      	ldr	r3, [pc, #236]	@ (8014e94 <xTaskIncrementTick+0x15c>)
 8014da6:	681b      	ldr	r3, [r3, #0]
 8014da8:	693a      	ldr	r2, [r7, #16]
 8014daa:	429a      	cmp	r2, r3
 8014dac:	d348      	bcc.n	8014e40 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014dae:	4b36      	ldr	r3, [pc, #216]	@ (8014e88 <xTaskIncrementTick+0x150>)
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d104      	bne.n	8014dc2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014db8:	4b36      	ldr	r3, [pc, #216]	@ (8014e94 <xTaskIncrementTick+0x15c>)
 8014dba:	f04f 32ff 	mov.w	r2, #4294967295
 8014dbe:	601a      	str	r2, [r3, #0]
					break;
 8014dc0:	e03e      	b.n	8014e40 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014dc2:	4b31      	ldr	r3, [pc, #196]	@ (8014e88 <xTaskIncrementTick+0x150>)
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	68db      	ldr	r3, [r3, #12]
 8014dc8:	68db      	ldr	r3, [r3, #12]
 8014dca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014dcc:	68bb      	ldr	r3, [r7, #8]
 8014dce:	685b      	ldr	r3, [r3, #4]
 8014dd0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014dd2:	693a      	ldr	r2, [r7, #16]
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	429a      	cmp	r2, r3
 8014dd8:	d203      	bcs.n	8014de2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014dda:	4a2e      	ldr	r2, [pc, #184]	@ (8014e94 <xTaskIncrementTick+0x15c>)
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014de0:	e02e      	b.n	8014e40 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014de2:	68bb      	ldr	r3, [r7, #8]
 8014de4:	3304      	adds	r3, #4
 8014de6:	4618      	mov	r0, r3
 8014de8:	f7ff f854 	bl	8013e94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014dec:	68bb      	ldr	r3, [r7, #8]
 8014dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d004      	beq.n	8014dfe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014df4:	68bb      	ldr	r3, [r7, #8]
 8014df6:	3318      	adds	r3, #24
 8014df8:	4618      	mov	r0, r3
 8014dfa:	f7ff f84b 	bl	8013e94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014dfe:	68bb      	ldr	r3, [r7, #8]
 8014e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e02:	2201      	movs	r2, #1
 8014e04:	409a      	lsls	r2, r3
 8014e06:	4b24      	ldr	r3, [pc, #144]	@ (8014e98 <xTaskIncrementTick+0x160>)
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	4313      	orrs	r3, r2
 8014e0c:	4a22      	ldr	r2, [pc, #136]	@ (8014e98 <xTaskIncrementTick+0x160>)
 8014e0e:	6013      	str	r3, [r2, #0]
 8014e10:	68bb      	ldr	r3, [r7, #8]
 8014e12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e14:	4613      	mov	r3, r2
 8014e16:	009b      	lsls	r3, r3, #2
 8014e18:	4413      	add	r3, r2
 8014e1a:	009b      	lsls	r3, r3, #2
 8014e1c:	4a1f      	ldr	r2, [pc, #124]	@ (8014e9c <xTaskIncrementTick+0x164>)
 8014e1e:	441a      	add	r2, r3
 8014e20:	68bb      	ldr	r3, [r7, #8]
 8014e22:	3304      	adds	r3, #4
 8014e24:	4619      	mov	r1, r3
 8014e26:	4610      	mov	r0, r2
 8014e28:	f7fe ffd7 	bl	8013dda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014e2c:	68bb      	ldr	r3, [r7, #8]
 8014e2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e30:	4b1b      	ldr	r3, [pc, #108]	@ (8014ea0 <xTaskIncrementTick+0x168>)
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e36:	429a      	cmp	r2, r3
 8014e38:	d3b9      	bcc.n	8014dae <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8014e3a:	2301      	movs	r3, #1
 8014e3c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014e3e:	e7b6      	b.n	8014dae <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014e40:	4b17      	ldr	r3, [pc, #92]	@ (8014ea0 <xTaskIncrementTick+0x168>)
 8014e42:	681b      	ldr	r3, [r3, #0]
 8014e44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e46:	4915      	ldr	r1, [pc, #84]	@ (8014e9c <xTaskIncrementTick+0x164>)
 8014e48:	4613      	mov	r3, r2
 8014e4a:	009b      	lsls	r3, r3, #2
 8014e4c:	4413      	add	r3, r2
 8014e4e:	009b      	lsls	r3, r3, #2
 8014e50:	440b      	add	r3, r1
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	2b01      	cmp	r3, #1
 8014e56:	d901      	bls.n	8014e5c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8014e58:	2301      	movs	r3, #1
 8014e5a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8014e5c:	4b11      	ldr	r3, [pc, #68]	@ (8014ea4 <xTaskIncrementTick+0x16c>)
 8014e5e:	681b      	ldr	r3, [r3, #0]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d007      	beq.n	8014e74 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8014e64:	2301      	movs	r3, #1
 8014e66:	617b      	str	r3, [r7, #20]
 8014e68:	e004      	b.n	8014e74 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8014e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8014ea8 <xTaskIncrementTick+0x170>)
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	3301      	adds	r3, #1
 8014e70:	4a0d      	ldr	r2, [pc, #52]	@ (8014ea8 <xTaskIncrementTick+0x170>)
 8014e72:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8014e74:	697b      	ldr	r3, [r7, #20]
}
 8014e76:	4618      	mov	r0, r3
 8014e78:	3718      	adds	r7, #24
 8014e7a:	46bd      	mov	sp, r7
 8014e7c:	bd80      	pop	{r7, pc}
 8014e7e:	bf00      	nop
 8014e80:	24002acc 	.word	0x24002acc
 8014e84:	24002aa8 	.word	0x24002aa8
 8014e88:	24002a5c 	.word	0x24002a5c
 8014e8c:	24002a60 	.word	0x24002a60
 8014e90:	24002abc 	.word	0x24002abc
 8014e94:	24002ac4 	.word	0x24002ac4
 8014e98:	24002aac 	.word	0x24002aac
 8014e9c:	240029a8 	.word	0x240029a8
 8014ea0:	240029a4 	.word	0x240029a4
 8014ea4:	24002ab8 	.word	0x24002ab8
 8014ea8:	24002ab4 	.word	0x24002ab4

08014eac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014eac:	b480      	push	{r7}
 8014eae:	b087      	sub	sp, #28
 8014eb0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014eb2:	4b27      	ldr	r3, [pc, #156]	@ (8014f50 <vTaskSwitchContext+0xa4>)
 8014eb4:	681b      	ldr	r3, [r3, #0]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d003      	beq.n	8014ec2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014eba:	4b26      	ldr	r3, [pc, #152]	@ (8014f54 <vTaskSwitchContext+0xa8>)
 8014ebc:	2201      	movs	r2, #1
 8014ebe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014ec0:	e040      	b.n	8014f44 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8014ec2:	4b24      	ldr	r3, [pc, #144]	@ (8014f54 <vTaskSwitchContext+0xa8>)
 8014ec4:	2200      	movs	r2, #0
 8014ec6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014ec8:	4b23      	ldr	r3, [pc, #140]	@ (8014f58 <vTaskSwitchContext+0xac>)
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8014ece:	68fb      	ldr	r3, [r7, #12]
 8014ed0:	fab3 f383 	clz	r3, r3
 8014ed4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8014ed6:	7afb      	ldrb	r3, [r7, #11]
 8014ed8:	f1c3 031f 	rsb	r3, r3, #31
 8014edc:	617b      	str	r3, [r7, #20]
 8014ede:	491f      	ldr	r1, [pc, #124]	@ (8014f5c <vTaskSwitchContext+0xb0>)
 8014ee0:	697a      	ldr	r2, [r7, #20]
 8014ee2:	4613      	mov	r3, r2
 8014ee4:	009b      	lsls	r3, r3, #2
 8014ee6:	4413      	add	r3, r2
 8014ee8:	009b      	lsls	r3, r3, #2
 8014eea:	440b      	add	r3, r1
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d10b      	bne.n	8014f0a <vTaskSwitchContext+0x5e>
	__asm volatile
 8014ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ef6:	f383 8811 	msr	BASEPRI, r3
 8014efa:	f3bf 8f6f 	isb	sy
 8014efe:	f3bf 8f4f 	dsb	sy
 8014f02:	607b      	str	r3, [r7, #4]
}
 8014f04:	bf00      	nop
 8014f06:	bf00      	nop
 8014f08:	e7fd      	b.n	8014f06 <vTaskSwitchContext+0x5a>
 8014f0a:	697a      	ldr	r2, [r7, #20]
 8014f0c:	4613      	mov	r3, r2
 8014f0e:	009b      	lsls	r3, r3, #2
 8014f10:	4413      	add	r3, r2
 8014f12:	009b      	lsls	r3, r3, #2
 8014f14:	4a11      	ldr	r2, [pc, #68]	@ (8014f5c <vTaskSwitchContext+0xb0>)
 8014f16:	4413      	add	r3, r2
 8014f18:	613b      	str	r3, [r7, #16]
 8014f1a:	693b      	ldr	r3, [r7, #16]
 8014f1c:	685b      	ldr	r3, [r3, #4]
 8014f1e:	685a      	ldr	r2, [r3, #4]
 8014f20:	693b      	ldr	r3, [r7, #16]
 8014f22:	605a      	str	r2, [r3, #4]
 8014f24:	693b      	ldr	r3, [r7, #16]
 8014f26:	685a      	ldr	r2, [r3, #4]
 8014f28:	693b      	ldr	r3, [r7, #16]
 8014f2a:	3308      	adds	r3, #8
 8014f2c:	429a      	cmp	r2, r3
 8014f2e:	d104      	bne.n	8014f3a <vTaskSwitchContext+0x8e>
 8014f30:	693b      	ldr	r3, [r7, #16]
 8014f32:	685b      	ldr	r3, [r3, #4]
 8014f34:	685a      	ldr	r2, [r3, #4]
 8014f36:	693b      	ldr	r3, [r7, #16]
 8014f38:	605a      	str	r2, [r3, #4]
 8014f3a:	693b      	ldr	r3, [r7, #16]
 8014f3c:	685b      	ldr	r3, [r3, #4]
 8014f3e:	68db      	ldr	r3, [r3, #12]
 8014f40:	4a07      	ldr	r2, [pc, #28]	@ (8014f60 <vTaskSwitchContext+0xb4>)
 8014f42:	6013      	str	r3, [r2, #0]
}
 8014f44:	bf00      	nop
 8014f46:	371c      	adds	r7, #28
 8014f48:	46bd      	mov	sp, r7
 8014f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f4e:	4770      	bx	lr
 8014f50:	24002acc 	.word	0x24002acc
 8014f54:	24002ab8 	.word	0x24002ab8
 8014f58:	24002aac 	.word	0x24002aac
 8014f5c:	240029a8 	.word	0x240029a8
 8014f60:	240029a4 	.word	0x240029a4

08014f64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b084      	sub	sp, #16
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	6078      	str	r0, [r7, #4]
 8014f6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d10b      	bne.n	8014f8c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8014f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f78:	f383 8811 	msr	BASEPRI, r3
 8014f7c:	f3bf 8f6f 	isb	sy
 8014f80:	f3bf 8f4f 	dsb	sy
 8014f84:	60fb      	str	r3, [r7, #12]
}
 8014f86:	bf00      	nop
 8014f88:	bf00      	nop
 8014f8a:	e7fd      	b.n	8014f88 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014f8c:	4b07      	ldr	r3, [pc, #28]	@ (8014fac <vTaskPlaceOnEventList+0x48>)
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	3318      	adds	r3, #24
 8014f92:	4619      	mov	r1, r3
 8014f94:	6878      	ldr	r0, [r7, #4]
 8014f96:	f7fe ff44 	bl	8013e22 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014f9a:	2101      	movs	r1, #1
 8014f9c:	6838      	ldr	r0, [r7, #0]
 8014f9e:	f000 fb87 	bl	80156b0 <prvAddCurrentTaskToDelayedList>
}
 8014fa2:	bf00      	nop
 8014fa4:	3710      	adds	r7, #16
 8014fa6:	46bd      	mov	sp, r7
 8014fa8:	bd80      	pop	{r7, pc}
 8014faa:	bf00      	nop
 8014fac:	240029a4 	.word	0x240029a4

08014fb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014fb0:	b580      	push	{r7, lr}
 8014fb2:	b086      	sub	sp, #24
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	68db      	ldr	r3, [r3, #12]
 8014fbc:	68db      	ldr	r3, [r3, #12]
 8014fbe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014fc0:	693b      	ldr	r3, [r7, #16]
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d10b      	bne.n	8014fde <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8014fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fca:	f383 8811 	msr	BASEPRI, r3
 8014fce:	f3bf 8f6f 	isb	sy
 8014fd2:	f3bf 8f4f 	dsb	sy
 8014fd6:	60fb      	str	r3, [r7, #12]
}
 8014fd8:	bf00      	nop
 8014fda:	bf00      	nop
 8014fdc:	e7fd      	b.n	8014fda <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014fde:	693b      	ldr	r3, [r7, #16]
 8014fe0:	3318      	adds	r3, #24
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	f7fe ff56 	bl	8013e94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8015060 <xTaskRemoveFromEventList+0xb0>)
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d11c      	bne.n	801502a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014ff0:	693b      	ldr	r3, [r7, #16]
 8014ff2:	3304      	adds	r3, #4
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	f7fe ff4d 	bl	8013e94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014ffa:	693b      	ldr	r3, [r7, #16]
 8014ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ffe:	2201      	movs	r2, #1
 8015000:	409a      	lsls	r2, r3
 8015002:	4b18      	ldr	r3, [pc, #96]	@ (8015064 <xTaskRemoveFromEventList+0xb4>)
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	4313      	orrs	r3, r2
 8015008:	4a16      	ldr	r2, [pc, #88]	@ (8015064 <xTaskRemoveFromEventList+0xb4>)
 801500a:	6013      	str	r3, [r2, #0]
 801500c:	693b      	ldr	r3, [r7, #16]
 801500e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015010:	4613      	mov	r3, r2
 8015012:	009b      	lsls	r3, r3, #2
 8015014:	4413      	add	r3, r2
 8015016:	009b      	lsls	r3, r3, #2
 8015018:	4a13      	ldr	r2, [pc, #76]	@ (8015068 <xTaskRemoveFromEventList+0xb8>)
 801501a:	441a      	add	r2, r3
 801501c:	693b      	ldr	r3, [r7, #16]
 801501e:	3304      	adds	r3, #4
 8015020:	4619      	mov	r1, r3
 8015022:	4610      	mov	r0, r2
 8015024:	f7fe fed9 	bl	8013dda <vListInsertEnd>
 8015028:	e005      	b.n	8015036 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801502a:	693b      	ldr	r3, [r7, #16]
 801502c:	3318      	adds	r3, #24
 801502e:	4619      	mov	r1, r3
 8015030:	480e      	ldr	r0, [pc, #56]	@ (801506c <xTaskRemoveFromEventList+0xbc>)
 8015032:	f7fe fed2 	bl	8013dda <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015036:	693b      	ldr	r3, [r7, #16]
 8015038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801503a:	4b0d      	ldr	r3, [pc, #52]	@ (8015070 <xTaskRemoveFromEventList+0xc0>)
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015040:	429a      	cmp	r2, r3
 8015042:	d905      	bls.n	8015050 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015044:	2301      	movs	r3, #1
 8015046:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015048:	4b0a      	ldr	r3, [pc, #40]	@ (8015074 <xTaskRemoveFromEventList+0xc4>)
 801504a:	2201      	movs	r2, #1
 801504c:	601a      	str	r2, [r3, #0]
 801504e:	e001      	b.n	8015054 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8015050:	2300      	movs	r3, #0
 8015052:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8015054:	697b      	ldr	r3, [r7, #20]
}
 8015056:	4618      	mov	r0, r3
 8015058:	3718      	adds	r7, #24
 801505a:	46bd      	mov	sp, r7
 801505c:	bd80      	pop	{r7, pc}
 801505e:	bf00      	nop
 8015060:	24002acc 	.word	0x24002acc
 8015064:	24002aac 	.word	0x24002aac
 8015068:	240029a8 	.word	0x240029a8
 801506c:	24002a64 	.word	0x24002a64
 8015070:	240029a4 	.word	0x240029a4
 8015074:	24002ab8 	.word	0x24002ab8

08015078 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015078:	b480      	push	{r7}
 801507a:	b083      	sub	sp, #12
 801507c:	af00      	add	r7, sp, #0
 801507e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015080:	4b06      	ldr	r3, [pc, #24]	@ (801509c <vTaskInternalSetTimeOutState+0x24>)
 8015082:	681a      	ldr	r2, [r3, #0]
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015088:	4b05      	ldr	r3, [pc, #20]	@ (80150a0 <vTaskInternalSetTimeOutState+0x28>)
 801508a:	681a      	ldr	r2, [r3, #0]
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	605a      	str	r2, [r3, #4]
}
 8015090:	bf00      	nop
 8015092:	370c      	adds	r7, #12
 8015094:	46bd      	mov	sp, r7
 8015096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801509a:	4770      	bx	lr
 801509c:	24002abc 	.word	0x24002abc
 80150a0:	24002aa8 	.word	0x24002aa8

080150a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80150a4:	b580      	push	{r7, lr}
 80150a6:	b088      	sub	sp, #32
 80150a8:	af00      	add	r7, sp, #0
 80150aa:	6078      	str	r0, [r7, #4]
 80150ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d10b      	bne.n	80150cc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80150b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80150b8:	f383 8811 	msr	BASEPRI, r3
 80150bc:	f3bf 8f6f 	isb	sy
 80150c0:	f3bf 8f4f 	dsb	sy
 80150c4:	613b      	str	r3, [r7, #16]
}
 80150c6:	bf00      	nop
 80150c8:	bf00      	nop
 80150ca:	e7fd      	b.n	80150c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80150cc:	683b      	ldr	r3, [r7, #0]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d10b      	bne.n	80150ea <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80150d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80150d6:	f383 8811 	msr	BASEPRI, r3
 80150da:	f3bf 8f6f 	isb	sy
 80150de:	f3bf 8f4f 	dsb	sy
 80150e2:	60fb      	str	r3, [r7, #12]
}
 80150e4:	bf00      	nop
 80150e6:	bf00      	nop
 80150e8:	e7fd      	b.n	80150e6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80150ea:	f000 fc75 	bl	80159d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80150ee:	4b1d      	ldr	r3, [pc, #116]	@ (8015164 <xTaskCheckForTimeOut+0xc0>)
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	685b      	ldr	r3, [r3, #4]
 80150f8:	69ba      	ldr	r2, [r7, #24]
 80150fa:	1ad3      	subs	r3, r2, r3
 80150fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80150fe:	683b      	ldr	r3, [r7, #0]
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015106:	d102      	bne.n	801510e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015108:	2300      	movs	r3, #0
 801510a:	61fb      	str	r3, [r7, #28]
 801510c:	e023      	b.n	8015156 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	681a      	ldr	r2, [r3, #0]
 8015112:	4b15      	ldr	r3, [pc, #84]	@ (8015168 <xTaskCheckForTimeOut+0xc4>)
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	429a      	cmp	r2, r3
 8015118:	d007      	beq.n	801512a <xTaskCheckForTimeOut+0x86>
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	685b      	ldr	r3, [r3, #4]
 801511e:	69ba      	ldr	r2, [r7, #24]
 8015120:	429a      	cmp	r2, r3
 8015122:	d302      	bcc.n	801512a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015124:	2301      	movs	r3, #1
 8015126:	61fb      	str	r3, [r7, #28]
 8015128:	e015      	b.n	8015156 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801512a:	683b      	ldr	r3, [r7, #0]
 801512c:	681b      	ldr	r3, [r3, #0]
 801512e:	697a      	ldr	r2, [r7, #20]
 8015130:	429a      	cmp	r2, r3
 8015132:	d20b      	bcs.n	801514c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015134:	683b      	ldr	r3, [r7, #0]
 8015136:	681a      	ldr	r2, [r3, #0]
 8015138:	697b      	ldr	r3, [r7, #20]
 801513a:	1ad2      	subs	r2, r2, r3
 801513c:	683b      	ldr	r3, [r7, #0]
 801513e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015140:	6878      	ldr	r0, [r7, #4]
 8015142:	f7ff ff99 	bl	8015078 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015146:	2300      	movs	r3, #0
 8015148:	61fb      	str	r3, [r7, #28]
 801514a:	e004      	b.n	8015156 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 801514c:	683b      	ldr	r3, [r7, #0]
 801514e:	2200      	movs	r2, #0
 8015150:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015152:	2301      	movs	r3, #1
 8015154:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015156:	f000 fc71 	bl	8015a3c <vPortExitCritical>

	return xReturn;
 801515a:	69fb      	ldr	r3, [r7, #28]
}
 801515c:	4618      	mov	r0, r3
 801515e:	3720      	adds	r7, #32
 8015160:	46bd      	mov	sp, r7
 8015162:	bd80      	pop	{r7, pc}
 8015164:	24002aa8 	.word	0x24002aa8
 8015168:	24002abc 	.word	0x24002abc

0801516c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801516c:	b480      	push	{r7}
 801516e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015170:	4b03      	ldr	r3, [pc, #12]	@ (8015180 <vTaskMissedYield+0x14>)
 8015172:	2201      	movs	r2, #1
 8015174:	601a      	str	r2, [r3, #0]
}
 8015176:	bf00      	nop
 8015178:	46bd      	mov	sp, r7
 801517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801517e:	4770      	bx	lr
 8015180:	24002ab8 	.word	0x24002ab8

08015184 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015184:	b580      	push	{r7, lr}
 8015186:	b082      	sub	sp, #8
 8015188:	af00      	add	r7, sp, #0
 801518a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801518c:	f000 f852 	bl	8015234 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015190:	4b06      	ldr	r3, [pc, #24]	@ (80151ac <prvIdleTask+0x28>)
 8015192:	681b      	ldr	r3, [r3, #0]
 8015194:	2b01      	cmp	r3, #1
 8015196:	d9f9      	bls.n	801518c <prvIdleTask+0x8>
			{
				taskYIELD();
 8015198:	4b05      	ldr	r3, [pc, #20]	@ (80151b0 <prvIdleTask+0x2c>)
 801519a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801519e:	601a      	str	r2, [r3, #0]
 80151a0:	f3bf 8f4f 	dsb	sy
 80151a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80151a8:	e7f0      	b.n	801518c <prvIdleTask+0x8>
 80151aa:	bf00      	nop
 80151ac:	240029a8 	.word	0x240029a8
 80151b0:	e000ed04 	.word	0xe000ed04

080151b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80151b4:	b580      	push	{r7, lr}
 80151b6:	b082      	sub	sp, #8
 80151b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80151ba:	2300      	movs	r3, #0
 80151bc:	607b      	str	r3, [r7, #4]
 80151be:	e00c      	b.n	80151da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80151c0:	687a      	ldr	r2, [r7, #4]
 80151c2:	4613      	mov	r3, r2
 80151c4:	009b      	lsls	r3, r3, #2
 80151c6:	4413      	add	r3, r2
 80151c8:	009b      	lsls	r3, r3, #2
 80151ca:	4a12      	ldr	r2, [pc, #72]	@ (8015214 <prvInitialiseTaskLists+0x60>)
 80151cc:	4413      	add	r3, r2
 80151ce:	4618      	mov	r0, r3
 80151d0:	f7fe fdd6 	bl	8013d80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	3301      	adds	r3, #1
 80151d8:	607b      	str	r3, [r7, #4]
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	2b06      	cmp	r3, #6
 80151de:	d9ef      	bls.n	80151c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80151e0:	480d      	ldr	r0, [pc, #52]	@ (8015218 <prvInitialiseTaskLists+0x64>)
 80151e2:	f7fe fdcd 	bl	8013d80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80151e6:	480d      	ldr	r0, [pc, #52]	@ (801521c <prvInitialiseTaskLists+0x68>)
 80151e8:	f7fe fdca 	bl	8013d80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80151ec:	480c      	ldr	r0, [pc, #48]	@ (8015220 <prvInitialiseTaskLists+0x6c>)
 80151ee:	f7fe fdc7 	bl	8013d80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80151f2:	480c      	ldr	r0, [pc, #48]	@ (8015224 <prvInitialiseTaskLists+0x70>)
 80151f4:	f7fe fdc4 	bl	8013d80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80151f8:	480b      	ldr	r0, [pc, #44]	@ (8015228 <prvInitialiseTaskLists+0x74>)
 80151fa:	f7fe fdc1 	bl	8013d80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80151fe:	4b0b      	ldr	r3, [pc, #44]	@ (801522c <prvInitialiseTaskLists+0x78>)
 8015200:	4a05      	ldr	r2, [pc, #20]	@ (8015218 <prvInitialiseTaskLists+0x64>)
 8015202:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015204:	4b0a      	ldr	r3, [pc, #40]	@ (8015230 <prvInitialiseTaskLists+0x7c>)
 8015206:	4a05      	ldr	r2, [pc, #20]	@ (801521c <prvInitialiseTaskLists+0x68>)
 8015208:	601a      	str	r2, [r3, #0]
}
 801520a:	bf00      	nop
 801520c:	3708      	adds	r7, #8
 801520e:	46bd      	mov	sp, r7
 8015210:	bd80      	pop	{r7, pc}
 8015212:	bf00      	nop
 8015214:	240029a8 	.word	0x240029a8
 8015218:	24002a34 	.word	0x24002a34
 801521c:	24002a48 	.word	0x24002a48
 8015220:	24002a64 	.word	0x24002a64
 8015224:	24002a78 	.word	0x24002a78
 8015228:	24002a90 	.word	0x24002a90
 801522c:	24002a5c 	.word	0x24002a5c
 8015230:	24002a60 	.word	0x24002a60

08015234 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015234:	b580      	push	{r7, lr}
 8015236:	b082      	sub	sp, #8
 8015238:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801523a:	e019      	b.n	8015270 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801523c:	f000 fbcc 	bl	80159d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015240:	4b10      	ldr	r3, [pc, #64]	@ (8015284 <prvCheckTasksWaitingTermination+0x50>)
 8015242:	68db      	ldr	r3, [r3, #12]
 8015244:	68db      	ldr	r3, [r3, #12]
 8015246:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	3304      	adds	r3, #4
 801524c:	4618      	mov	r0, r3
 801524e:	f7fe fe21 	bl	8013e94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015252:	4b0d      	ldr	r3, [pc, #52]	@ (8015288 <prvCheckTasksWaitingTermination+0x54>)
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	3b01      	subs	r3, #1
 8015258:	4a0b      	ldr	r2, [pc, #44]	@ (8015288 <prvCheckTasksWaitingTermination+0x54>)
 801525a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801525c:	4b0b      	ldr	r3, [pc, #44]	@ (801528c <prvCheckTasksWaitingTermination+0x58>)
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	3b01      	subs	r3, #1
 8015262:	4a0a      	ldr	r2, [pc, #40]	@ (801528c <prvCheckTasksWaitingTermination+0x58>)
 8015264:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8015266:	f000 fbe9 	bl	8015a3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801526a:	6878      	ldr	r0, [r7, #4]
 801526c:	f000 f810 	bl	8015290 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015270:	4b06      	ldr	r3, [pc, #24]	@ (801528c <prvCheckTasksWaitingTermination+0x58>)
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	2b00      	cmp	r3, #0
 8015276:	d1e1      	bne.n	801523c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015278:	bf00      	nop
 801527a:	bf00      	nop
 801527c:	3708      	adds	r7, #8
 801527e:	46bd      	mov	sp, r7
 8015280:	bd80      	pop	{r7, pc}
 8015282:	bf00      	nop
 8015284:	24002a78 	.word	0x24002a78
 8015288:	24002aa4 	.word	0x24002aa4
 801528c:	24002a8c 	.word	0x24002a8c

08015290 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015290:	b580      	push	{r7, lr}
 8015292:	b084      	sub	sp, #16
 8015294:	af00      	add	r7, sp, #0
 8015296:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d108      	bne.n	80152b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80152a6:	4618      	mov	r0, r3
 80152a8:	f000 fd86 	bl	8015db8 <vPortFree>
				vPortFree( pxTCB );
 80152ac:	6878      	ldr	r0, [r7, #4]
 80152ae:	f000 fd83 	bl	8015db8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80152b2:	e019      	b.n	80152e8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80152ba:	2b01      	cmp	r3, #1
 80152bc:	d103      	bne.n	80152c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80152be:	6878      	ldr	r0, [r7, #4]
 80152c0:	f000 fd7a 	bl	8015db8 <vPortFree>
	}
 80152c4:	e010      	b.n	80152e8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80152cc:	2b02      	cmp	r3, #2
 80152ce:	d00b      	beq.n	80152e8 <prvDeleteTCB+0x58>
	__asm volatile
 80152d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152d4:	f383 8811 	msr	BASEPRI, r3
 80152d8:	f3bf 8f6f 	isb	sy
 80152dc:	f3bf 8f4f 	dsb	sy
 80152e0:	60fb      	str	r3, [r7, #12]
}
 80152e2:	bf00      	nop
 80152e4:	bf00      	nop
 80152e6:	e7fd      	b.n	80152e4 <prvDeleteTCB+0x54>
	}
 80152e8:	bf00      	nop
 80152ea:	3710      	adds	r7, #16
 80152ec:	46bd      	mov	sp, r7
 80152ee:	bd80      	pop	{r7, pc}

080152f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80152f0:	b480      	push	{r7}
 80152f2:	b083      	sub	sp, #12
 80152f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80152f6:	4b0c      	ldr	r3, [pc, #48]	@ (8015328 <prvResetNextTaskUnblockTime+0x38>)
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d104      	bne.n	801530a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015300:	4b0a      	ldr	r3, [pc, #40]	@ (801532c <prvResetNextTaskUnblockTime+0x3c>)
 8015302:	f04f 32ff 	mov.w	r2, #4294967295
 8015306:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015308:	e008      	b.n	801531c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801530a:	4b07      	ldr	r3, [pc, #28]	@ (8015328 <prvResetNextTaskUnblockTime+0x38>)
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	68db      	ldr	r3, [r3, #12]
 8015310:	68db      	ldr	r3, [r3, #12]
 8015312:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	685b      	ldr	r3, [r3, #4]
 8015318:	4a04      	ldr	r2, [pc, #16]	@ (801532c <prvResetNextTaskUnblockTime+0x3c>)
 801531a:	6013      	str	r3, [r2, #0]
}
 801531c:	bf00      	nop
 801531e:	370c      	adds	r7, #12
 8015320:	46bd      	mov	sp, r7
 8015322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015326:	4770      	bx	lr
 8015328:	24002a5c 	.word	0x24002a5c
 801532c:	24002ac4 	.word	0x24002ac4

08015330 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015330:	b480      	push	{r7}
 8015332:	b083      	sub	sp, #12
 8015334:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015336:	4b0b      	ldr	r3, [pc, #44]	@ (8015364 <xTaskGetSchedulerState+0x34>)
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	2b00      	cmp	r3, #0
 801533c:	d102      	bne.n	8015344 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801533e:	2301      	movs	r3, #1
 8015340:	607b      	str	r3, [r7, #4]
 8015342:	e008      	b.n	8015356 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015344:	4b08      	ldr	r3, [pc, #32]	@ (8015368 <xTaskGetSchedulerState+0x38>)
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	2b00      	cmp	r3, #0
 801534a:	d102      	bne.n	8015352 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801534c:	2302      	movs	r3, #2
 801534e:	607b      	str	r3, [r7, #4]
 8015350:	e001      	b.n	8015356 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015352:	2300      	movs	r3, #0
 8015354:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015356:	687b      	ldr	r3, [r7, #4]
	}
 8015358:	4618      	mov	r0, r3
 801535a:	370c      	adds	r7, #12
 801535c:	46bd      	mov	sp, r7
 801535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015362:	4770      	bx	lr
 8015364:	24002ab0 	.word	0x24002ab0
 8015368:	24002acc 	.word	0x24002acc

0801536c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801536c:	b580      	push	{r7, lr}
 801536e:	b084      	sub	sp, #16
 8015370:	af00      	add	r7, sp, #0
 8015372:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8015378:	2300      	movs	r3, #0
 801537a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	2b00      	cmp	r3, #0
 8015380:	d05e      	beq.n	8015440 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8015382:	68bb      	ldr	r3, [r7, #8]
 8015384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015386:	4b31      	ldr	r3, [pc, #196]	@ (801544c <xTaskPriorityInherit+0xe0>)
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801538c:	429a      	cmp	r2, r3
 801538e:	d24e      	bcs.n	801542e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015390:	68bb      	ldr	r3, [r7, #8]
 8015392:	699b      	ldr	r3, [r3, #24]
 8015394:	2b00      	cmp	r3, #0
 8015396:	db06      	blt.n	80153a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015398:	4b2c      	ldr	r3, [pc, #176]	@ (801544c <xTaskPriorityInherit+0xe0>)
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801539e:	f1c3 0207 	rsb	r2, r3, #7
 80153a2:	68bb      	ldr	r3, [r7, #8]
 80153a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80153a6:	68bb      	ldr	r3, [r7, #8]
 80153a8:	6959      	ldr	r1, [r3, #20]
 80153aa:	68bb      	ldr	r3, [r7, #8]
 80153ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80153ae:	4613      	mov	r3, r2
 80153b0:	009b      	lsls	r3, r3, #2
 80153b2:	4413      	add	r3, r2
 80153b4:	009b      	lsls	r3, r3, #2
 80153b6:	4a26      	ldr	r2, [pc, #152]	@ (8015450 <xTaskPriorityInherit+0xe4>)
 80153b8:	4413      	add	r3, r2
 80153ba:	4299      	cmp	r1, r3
 80153bc:	d12f      	bne.n	801541e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80153be:	68bb      	ldr	r3, [r7, #8]
 80153c0:	3304      	adds	r3, #4
 80153c2:	4618      	mov	r0, r3
 80153c4:	f7fe fd66 	bl	8013e94 <uxListRemove>
 80153c8:	4603      	mov	r3, r0
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d10a      	bne.n	80153e4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80153ce:	68bb      	ldr	r3, [r7, #8]
 80153d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80153d2:	2201      	movs	r2, #1
 80153d4:	fa02 f303 	lsl.w	r3, r2, r3
 80153d8:	43da      	mvns	r2, r3
 80153da:	4b1e      	ldr	r3, [pc, #120]	@ (8015454 <xTaskPriorityInherit+0xe8>)
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	4013      	ands	r3, r2
 80153e0:	4a1c      	ldr	r2, [pc, #112]	@ (8015454 <xTaskPriorityInherit+0xe8>)
 80153e2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80153e4:	4b19      	ldr	r3, [pc, #100]	@ (801544c <xTaskPriorityInherit+0xe0>)
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80153ea:	68bb      	ldr	r3, [r7, #8]
 80153ec:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80153ee:	68bb      	ldr	r3, [r7, #8]
 80153f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80153f2:	2201      	movs	r2, #1
 80153f4:	409a      	lsls	r2, r3
 80153f6:	4b17      	ldr	r3, [pc, #92]	@ (8015454 <xTaskPriorityInherit+0xe8>)
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	4313      	orrs	r3, r2
 80153fc:	4a15      	ldr	r2, [pc, #84]	@ (8015454 <xTaskPriorityInherit+0xe8>)
 80153fe:	6013      	str	r3, [r2, #0]
 8015400:	68bb      	ldr	r3, [r7, #8]
 8015402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015404:	4613      	mov	r3, r2
 8015406:	009b      	lsls	r3, r3, #2
 8015408:	4413      	add	r3, r2
 801540a:	009b      	lsls	r3, r3, #2
 801540c:	4a10      	ldr	r2, [pc, #64]	@ (8015450 <xTaskPriorityInherit+0xe4>)
 801540e:	441a      	add	r2, r3
 8015410:	68bb      	ldr	r3, [r7, #8]
 8015412:	3304      	adds	r3, #4
 8015414:	4619      	mov	r1, r3
 8015416:	4610      	mov	r0, r2
 8015418:	f7fe fcdf 	bl	8013dda <vListInsertEnd>
 801541c:	e004      	b.n	8015428 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801541e:	4b0b      	ldr	r3, [pc, #44]	@ (801544c <xTaskPriorityInherit+0xe0>)
 8015420:	681b      	ldr	r3, [r3, #0]
 8015422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015424:	68bb      	ldr	r3, [r7, #8]
 8015426:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8015428:	2301      	movs	r3, #1
 801542a:	60fb      	str	r3, [r7, #12]
 801542c:	e008      	b.n	8015440 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801542e:	68bb      	ldr	r3, [r7, #8]
 8015430:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015432:	4b06      	ldr	r3, [pc, #24]	@ (801544c <xTaskPriorityInherit+0xe0>)
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015438:	429a      	cmp	r2, r3
 801543a:	d201      	bcs.n	8015440 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801543c:	2301      	movs	r3, #1
 801543e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015440:	68fb      	ldr	r3, [r7, #12]
	}
 8015442:	4618      	mov	r0, r3
 8015444:	3710      	adds	r7, #16
 8015446:	46bd      	mov	sp, r7
 8015448:	bd80      	pop	{r7, pc}
 801544a:	bf00      	nop
 801544c:	240029a4 	.word	0x240029a4
 8015450:	240029a8 	.word	0x240029a8
 8015454:	24002aac 	.word	0x24002aac

08015458 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015458:	b580      	push	{r7, lr}
 801545a:	b086      	sub	sp, #24
 801545c:	af00      	add	r7, sp, #0
 801545e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015464:	2300      	movs	r3, #0
 8015466:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	2b00      	cmp	r3, #0
 801546c:	d070      	beq.n	8015550 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801546e:	4b3b      	ldr	r3, [pc, #236]	@ (801555c <xTaskPriorityDisinherit+0x104>)
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	693a      	ldr	r2, [r7, #16]
 8015474:	429a      	cmp	r2, r3
 8015476:	d00b      	beq.n	8015490 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8015478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801547c:	f383 8811 	msr	BASEPRI, r3
 8015480:	f3bf 8f6f 	isb	sy
 8015484:	f3bf 8f4f 	dsb	sy
 8015488:	60fb      	str	r3, [r7, #12]
}
 801548a:	bf00      	nop
 801548c:	bf00      	nop
 801548e:	e7fd      	b.n	801548c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8015490:	693b      	ldr	r3, [r7, #16]
 8015492:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015494:	2b00      	cmp	r3, #0
 8015496:	d10b      	bne.n	80154b0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8015498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801549c:	f383 8811 	msr	BASEPRI, r3
 80154a0:	f3bf 8f6f 	isb	sy
 80154a4:	f3bf 8f4f 	dsb	sy
 80154a8:	60bb      	str	r3, [r7, #8]
}
 80154aa:	bf00      	nop
 80154ac:	bf00      	nop
 80154ae:	e7fd      	b.n	80154ac <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80154b0:	693b      	ldr	r3, [r7, #16]
 80154b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80154b4:	1e5a      	subs	r2, r3, #1
 80154b6:	693b      	ldr	r3, [r7, #16]
 80154b8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80154ba:	693b      	ldr	r3, [r7, #16]
 80154bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80154be:	693b      	ldr	r3, [r7, #16]
 80154c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80154c2:	429a      	cmp	r2, r3
 80154c4:	d044      	beq.n	8015550 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80154c6:	693b      	ldr	r3, [r7, #16]
 80154c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d140      	bne.n	8015550 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80154ce:	693b      	ldr	r3, [r7, #16]
 80154d0:	3304      	adds	r3, #4
 80154d2:	4618      	mov	r0, r3
 80154d4:	f7fe fcde 	bl	8013e94 <uxListRemove>
 80154d8:	4603      	mov	r3, r0
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d115      	bne.n	801550a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80154de:	693b      	ldr	r3, [r7, #16]
 80154e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80154e2:	491f      	ldr	r1, [pc, #124]	@ (8015560 <xTaskPriorityDisinherit+0x108>)
 80154e4:	4613      	mov	r3, r2
 80154e6:	009b      	lsls	r3, r3, #2
 80154e8:	4413      	add	r3, r2
 80154ea:	009b      	lsls	r3, r3, #2
 80154ec:	440b      	add	r3, r1
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d10a      	bne.n	801550a <xTaskPriorityDisinherit+0xb2>
 80154f4:	693b      	ldr	r3, [r7, #16]
 80154f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80154f8:	2201      	movs	r2, #1
 80154fa:	fa02 f303 	lsl.w	r3, r2, r3
 80154fe:	43da      	mvns	r2, r3
 8015500:	4b18      	ldr	r3, [pc, #96]	@ (8015564 <xTaskPriorityDisinherit+0x10c>)
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	4013      	ands	r3, r2
 8015506:	4a17      	ldr	r2, [pc, #92]	@ (8015564 <xTaskPriorityDisinherit+0x10c>)
 8015508:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801550a:	693b      	ldr	r3, [r7, #16]
 801550c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801550e:	693b      	ldr	r3, [r7, #16]
 8015510:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015512:	693b      	ldr	r3, [r7, #16]
 8015514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015516:	f1c3 0207 	rsb	r2, r3, #7
 801551a:	693b      	ldr	r3, [r7, #16]
 801551c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801551e:	693b      	ldr	r3, [r7, #16]
 8015520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015522:	2201      	movs	r2, #1
 8015524:	409a      	lsls	r2, r3
 8015526:	4b0f      	ldr	r3, [pc, #60]	@ (8015564 <xTaskPriorityDisinherit+0x10c>)
 8015528:	681b      	ldr	r3, [r3, #0]
 801552a:	4313      	orrs	r3, r2
 801552c:	4a0d      	ldr	r2, [pc, #52]	@ (8015564 <xTaskPriorityDisinherit+0x10c>)
 801552e:	6013      	str	r3, [r2, #0]
 8015530:	693b      	ldr	r3, [r7, #16]
 8015532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015534:	4613      	mov	r3, r2
 8015536:	009b      	lsls	r3, r3, #2
 8015538:	4413      	add	r3, r2
 801553a:	009b      	lsls	r3, r3, #2
 801553c:	4a08      	ldr	r2, [pc, #32]	@ (8015560 <xTaskPriorityDisinherit+0x108>)
 801553e:	441a      	add	r2, r3
 8015540:	693b      	ldr	r3, [r7, #16]
 8015542:	3304      	adds	r3, #4
 8015544:	4619      	mov	r1, r3
 8015546:	4610      	mov	r0, r2
 8015548:	f7fe fc47 	bl	8013dda <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801554c:	2301      	movs	r3, #1
 801554e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015550:	697b      	ldr	r3, [r7, #20]
	}
 8015552:	4618      	mov	r0, r3
 8015554:	3718      	adds	r7, #24
 8015556:	46bd      	mov	sp, r7
 8015558:	bd80      	pop	{r7, pc}
 801555a:	bf00      	nop
 801555c:	240029a4 	.word	0x240029a4
 8015560:	240029a8 	.word	0x240029a8
 8015564:	24002aac 	.word	0x24002aac

08015568 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8015568:	b580      	push	{r7, lr}
 801556a:	b088      	sub	sp, #32
 801556c:	af00      	add	r7, sp, #0
 801556e:	6078      	str	r0, [r7, #4]
 8015570:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8015576:	2301      	movs	r3, #1
 8015578:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	2b00      	cmp	r3, #0
 801557e:	d079      	beq.n	8015674 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8015580:	69bb      	ldr	r3, [r7, #24]
 8015582:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015584:	2b00      	cmp	r3, #0
 8015586:	d10b      	bne.n	80155a0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8015588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801558c:	f383 8811 	msr	BASEPRI, r3
 8015590:	f3bf 8f6f 	isb	sy
 8015594:	f3bf 8f4f 	dsb	sy
 8015598:	60fb      	str	r3, [r7, #12]
}
 801559a:	bf00      	nop
 801559c:	bf00      	nop
 801559e:	e7fd      	b.n	801559c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80155a0:	69bb      	ldr	r3, [r7, #24]
 80155a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80155a4:	683a      	ldr	r2, [r7, #0]
 80155a6:	429a      	cmp	r2, r3
 80155a8:	d902      	bls.n	80155b0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80155aa:	683b      	ldr	r3, [r7, #0]
 80155ac:	61fb      	str	r3, [r7, #28]
 80155ae:	e002      	b.n	80155b6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80155b0:	69bb      	ldr	r3, [r7, #24]
 80155b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80155b4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80155b6:	69bb      	ldr	r3, [r7, #24]
 80155b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155ba:	69fa      	ldr	r2, [r7, #28]
 80155bc:	429a      	cmp	r2, r3
 80155be:	d059      	beq.n	8015674 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80155c0:	69bb      	ldr	r3, [r7, #24]
 80155c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80155c4:	697a      	ldr	r2, [r7, #20]
 80155c6:	429a      	cmp	r2, r3
 80155c8:	d154      	bne.n	8015674 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80155ca:	4b2c      	ldr	r3, [pc, #176]	@ (801567c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	69ba      	ldr	r2, [r7, #24]
 80155d0:	429a      	cmp	r2, r3
 80155d2:	d10b      	bne.n	80155ec <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80155d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80155d8:	f383 8811 	msr	BASEPRI, r3
 80155dc:	f3bf 8f6f 	isb	sy
 80155e0:	f3bf 8f4f 	dsb	sy
 80155e4:	60bb      	str	r3, [r7, #8]
}
 80155e6:	bf00      	nop
 80155e8:	bf00      	nop
 80155ea:	e7fd      	b.n	80155e8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80155ec:	69bb      	ldr	r3, [r7, #24]
 80155ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155f0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80155f2:	69bb      	ldr	r3, [r7, #24]
 80155f4:	69fa      	ldr	r2, [r7, #28]
 80155f6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80155f8:	69bb      	ldr	r3, [r7, #24]
 80155fa:	699b      	ldr	r3, [r3, #24]
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	db04      	blt.n	801560a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015600:	69fb      	ldr	r3, [r7, #28]
 8015602:	f1c3 0207 	rsb	r2, r3, #7
 8015606:	69bb      	ldr	r3, [r7, #24]
 8015608:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801560a:	69bb      	ldr	r3, [r7, #24]
 801560c:	6959      	ldr	r1, [r3, #20]
 801560e:	693a      	ldr	r2, [r7, #16]
 8015610:	4613      	mov	r3, r2
 8015612:	009b      	lsls	r3, r3, #2
 8015614:	4413      	add	r3, r2
 8015616:	009b      	lsls	r3, r3, #2
 8015618:	4a19      	ldr	r2, [pc, #100]	@ (8015680 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801561a:	4413      	add	r3, r2
 801561c:	4299      	cmp	r1, r3
 801561e:	d129      	bne.n	8015674 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015620:	69bb      	ldr	r3, [r7, #24]
 8015622:	3304      	adds	r3, #4
 8015624:	4618      	mov	r0, r3
 8015626:	f7fe fc35 	bl	8013e94 <uxListRemove>
 801562a:	4603      	mov	r3, r0
 801562c:	2b00      	cmp	r3, #0
 801562e:	d10a      	bne.n	8015646 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8015630:	69bb      	ldr	r3, [r7, #24]
 8015632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015634:	2201      	movs	r2, #1
 8015636:	fa02 f303 	lsl.w	r3, r2, r3
 801563a:	43da      	mvns	r2, r3
 801563c:	4b11      	ldr	r3, [pc, #68]	@ (8015684 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 801563e:	681b      	ldr	r3, [r3, #0]
 8015640:	4013      	ands	r3, r2
 8015642:	4a10      	ldr	r2, [pc, #64]	@ (8015684 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8015644:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8015646:	69bb      	ldr	r3, [r7, #24]
 8015648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801564a:	2201      	movs	r2, #1
 801564c:	409a      	lsls	r2, r3
 801564e:	4b0d      	ldr	r3, [pc, #52]	@ (8015684 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8015650:	681b      	ldr	r3, [r3, #0]
 8015652:	4313      	orrs	r3, r2
 8015654:	4a0b      	ldr	r2, [pc, #44]	@ (8015684 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8015656:	6013      	str	r3, [r2, #0]
 8015658:	69bb      	ldr	r3, [r7, #24]
 801565a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801565c:	4613      	mov	r3, r2
 801565e:	009b      	lsls	r3, r3, #2
 8015660:	4413      	add	r3, r2
 8015662:	009b      	lsls	r3, r3, #2
 8015664:	4a06      	ldr	r2, [pc, #24]	@ (8015680 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8015666:	441a      	add	r2, r3
 8015668:	69bb      	ldr	r3, [r7, #24]
 801566a:	3304      	adds	r3, #4
 801566c:	4619      	mov	r1, r3
 801566e:	4610      	mov	r0, r2
 8015670:	f7fe fbb3 	bl	8013dda <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015674:	bf00      	nop
 8015676:	3720      	adds	r7, #32
 8015678:	46bd      	mov	sp, r7
 801567a:	bd80      	pop	{r7, pc}
 801567c:	240029a4 	.word	0x240029a4
 8015680:	240029a8 	.word	0x240029a8
 8015684:	24002aac 	.word	0x24002aac

08015688 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8015688:	b480      	push	{r7}
 801568a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801568c:	4b07      	ldr	r3, [pc, #28]	@ (80156ac <pvTaskIncrementMutexHeldCount+0x24>)
 801568e:	681b      	ldr	r3, [r3, #0]
 8015690:	2b00      	cmp	r3, #0
 8015692:	d004      	beq.n	801569e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8015694:	4b05      	ldr	r3, [pc, #20]	@ (80156ac <pvTaskIncrementMutexHeldCount+0x24>)
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801569a:	3201      	adds	r2, #1
 801569c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 801569e:	4b03      	ldr	r3, [pc, #12]	@ (80156ac <pvTaskIncrementMutexHeldCount+0x24>)
 80156a0:	681b      	ldr	r3, [r3, #0]
	}
 80156a2:	4618      	mov	r0, r3
 80156a4:	46bd      	mov	sp, r7
 80156a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156aa:	4770      	bx	lr
 80156ac:	240029a4 	.word	0x240029a4

080156b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80156b0:	b580      	push	{r7, lr}
 80156b2:	b084      	sub	sp, #16
 80156b4:	af00      	add	r7, sp, #0
 80156b6:	6078      	str	r0, [r7, #4]
 80156b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80156ba:	4b29      	ldr	r3, [pc, #164]	@ (8015760 <prvAddCurrentTaskToDelayedList+0xb0>)
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80156c0:	4b28      	ldr	r3, [pc, #160]	@ (8015764 <prvAddCurrentTaskToDelayedList+0xb4>)
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	3304      	adds	r3, #4
 80156c6:	4618      	mov	r0, r3
 80156c8:	f7fe fbe4 	bl	8013e94 <uxListRemove>
 80156cc:	4603      	mov	r3, r0
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d10b      	bne.n	80156ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80156d2:	4b24      	ldr	r3, [pc, #144]	@ (8015764 <prvAddCurrentTaskToDelayedList+0xb4>)
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80156d8:	2201      	movs	r2, #1
 80156da:	fa02 f303 	lsl.w	r3, r2, r3
 80156de:	43da      	mvns	r2, r3
 80156e0:	4b21      	ldr	r3, [pc, #132]	@ (8015768 <prvAddCurrentTaskToDelayedList+0xb8>)
 80156e2:	681b      	ldr	r3, [r3, #0]
 80156e4:	4013      	ands	r3, r2
 80156e6:	4a20      	ldr	r2, [pc, #128]	@ (8015768 <prvAddCurrentTaskToDelayedList+0xb8>)
 80156e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156f0:	d10a      	bne.n	8015708 <prvAddCurrentTaskToDelayedList+0x58>
 80156f2:	683b      	ldr	r3, [r7, #0]
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d007      	beq.n	8015708 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80156f8:	4b1a      	ldr	r3, [pc, #104]	@ (8015764 <prvAddCurrentTaskToDelayedList+0xb4>)
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	3304      	adds	r3, #4
 80156fe:	4619      	mov	r1, r3
 8015700:	481a      	ldr	r0, [pc, #104]	@ (801576c <prvAddCurrentTaskToDelayedList+0xbc>)
 8015702:	f7fe fb6a 	bl	8013dda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015706:	e026      	b.n	8015756 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015708:	68fa      	ldr	r2, [r7, #12]
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	4413      	add	r3, r2
 801570e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015710:	4b14      	ldr	r3, [pc, #80]	@ (8015764 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	68ba      	ldr	r2, [r7, #8]
 8015716:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015718:	68ba      	ldr	r2, [r7, #8]
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	429a      	cmp	r2, r3
 801571e:	d209      	bcs.n	8015734 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015720:	4b13      	ldr	r3, [pc, #76]	@ (8015770 <prvAddCurrentTaskToDelayedList+0xc0>)
 8015722:	681a      	ldr	r2, [r3, #0]
 8015724:	4b0f      	ldr	r3, [pc, #60]	@ (8015764 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	3304      	adds	r3, #4
 801572a:	4619      	mov	r1, r3
 801572c:	4610      	mov	r0, r2
 801572e:	f7fe fb78 	bl	8013e22 <vListInsert>
}
 8015732:	e010      	b.n	8015756 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015734:	4b0f      	ldr	r3, [pc, #60]	@ (8015774 <prvAddCurrentTaskToDelayedList+0xc4>)
 8015736:	681a      	ldr	r2, [r3, #0]
 8015738:	4b0a      	ldr	r3, [pc, #40]	@ (8015764 <prvAddCurrentTaskToDelayedList+0xb4>)
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	3304      	adds	r3, #4
 801573e:	4619      	mov	r1, r3
 8015740:	4610      	mov	r0, r2
 8015742:	f7fe fb6e 	bl	8013e22 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015746:	4b0c      	ldr	r3, [pc, #48]	@ (8015778 <prvAddCurrentTaskToDelayedList+0xc8>)
 8015748:	681b      	ldr	r3, [r3, #0]
 801574a:	68ba      	ldr	r2, [r7, #8]
 801574c:	429a      	cmp	r2, r3
 801574e:	d202      	bcs.n	8015756 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8015750:	4a09      	ldr	r2, [pc, #36]	@ (8015778 <prvAddCurrentTaskToDelayedList+0xc8>)
 8015752:	68bb      	ldr	r3, [r7, #8]
 8015754:	6013      	str	r3, [r2, #0]
}
 8015756:	bf00      	nop
 8015758:	3710      	adds	r7, #16
 801575a:	46bd      	mov	sp, r7
 801575c:	bd80      	pop	{r7, pc}
 801575e:	bf00      	nop
 8015760:	24002aa8 	.word	0x24002aa8
 8015764:	240029a4 	.word	0x240029a4
 8015768:	24002aac 	.word	0x24002aac
 801576c:	24002a90 	.word	0x24002a90
 8015770:	24002a60 	.word	0x24002a60
 8015774:	24002a5c 	.word	0x24002a5c
 8015778:	24002ac4 	.word	0x24002ac4

0801577c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801577c:	b480      	push	{r7}
 801577e:	b085      	sub	sp, #20
 8015780:	af00      	add	r7, sp, #0
 8015782:	60f8      	str	r0, [r7, #12]
 8015784:	60b9      	str	r1, [r7, #8]
 8015786:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	3b04      	subs	r3, #4
 801578c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801578e:	68fb      	ldr	r3, [r7, #12]
 8015790:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8015794:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015796:	68fb      	ldr	r3, [r7, #12]
 8015798:	3b04      	subs	r3, #4
 801579a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801579c:	68bb      	ldr	r3, [r7, #8]
 801579e:	f023 0201 	bic.w	r2, r3, #1
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	3b04      	subs	r3, #4
 80157aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80157ac:	4a0c      	ldr	r2, [pc, #48]	@ (80157e0 <pxPortInitialiseStack+0x64>)
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	3b14      	subs	r3, #20
 80157b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80157b8:	687a      	ldr	r2, [r7, #4]
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80157be:	68fb      	ldr	r3, [r7, #12]
 80157c0:	3b04      	subs	r3, #4
 80157c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	f06f 0202 	mvn.w	r2, #2
 80157ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	3b20      	subs	r3, #32
 80157d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80157d2:	68fb      	ldr	r3, [r7, #12]
}
 80157d4:	4618      	mov	r0, r3
 80157d6:	3714      	adds	r7, #20
 80157d8:	46bd      	mov	sp, r7
 80157da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157de:	4770      	bx	lr
 80157e0:	080157e5 	.word	0x080157e5

080157e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80157e4:	b480      	push	{r7}
 80157e6:	b085      	sub	sp, #20
 80157e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80157ea:	2300      	movs	r3, #0
 80157ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80157ee:	4b13      	ldr	r3, [pc, #76]	@ (801583c <prvTaskExitError+0x58>)
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80157f6:	d00b      	beq.n	8015810 <prvTaskExitError+0x2c>
	__asm volatile
 80157f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157fc:	f383 8811 	msr	BASEPRI, r3
 8015800:	f3bf 8f6f 	isb	sy
 8015804:	f3bf 8f4f 	dsb	sy
 8015808:	60fb      	str	r3, [r7, #12]
}
 801580a:	bf00      	nop
 801580c:	bf00      	nop
 801580e:	e7fd      	b.n	801580c <prvTaskExitError+0x28>
	__asm volatile
 8015810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015814:	f383 8811 	msr	BASEPRI, r3
 8015818:	f3bf 8f6f 	isb	sy
 801581c:	f3bf 8f4f 	dsb	sy
 8015820:	60bb      	str	r3, [r7, #8]
}
 8015822:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015824:	bf00      	nop
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	2b00      	cmp	r3, #0
 801582a:	d0fc      	beq.n	8015826 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801582c:	bf00      	nop
 801582e:	bf00      	nop
 8015830:	3714      	adds	r7, #20
 8015832:	46bd      	mov	sp, r7
 8015834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015838:	4770      	bx	lr
 801583a:	bf00      	nop
 801583c:	240000c4 	.word	0x240000c4

08015840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015840:	4b07      	ldr	r3, [pc, #28]	@ (8015860 <pxCurrentTCBConst2>)
 8015842:	6819      	ldr	r1, [r3, #0]
 8015844:	6808      	ldr	r0, [r1, #0]
 8015846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801584a:	f380 8809 	msr	PSP, r0
 801584e:	f3bf 8f6f 	isb	sy
 8015852:	f04f 0000 	mov.w	r0, #0
 8015856:	f380 8811 	msr	BASEPRI, r0
 801585a:	4770      	bx	lr
 801585c:	f3af 8000 	nop.w

08015860 <pxCurrentTCBConst2>:
 8015860:	240029a4 	.word	0x240029a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015864:	bf00      	nop
 8015866:	bf00      	nop

08015868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015868:	4808      	ldr	r0, [pc, #32]	@ (801588c <prvPortStartFirstTask+0x24>)
 801586a:	6800      	ldr	r0, [r0, #0]
 801586c:	6800      	ldr	r0, [r0, #0]
 801586e:	f380 8808 	msr	MSP, r0
 8015872:	f04f 0000 	mov.w	r0, #0
 8015876:	f380 8814 	msr	CONTROL, r0
 801587a:	b662      	cpsie	i
 801587c:	b661      	cpsie	f
 801587e:	f3bf 8f4f 	dsb	sy
 8015882:	f3bf 8f6f 	isb	sy
 8015886:	df00      	svc	0
 8015888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801588a:	bf00      	nop
 801588c:	e000ed08 	.word	0xe000ed08

08015890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015890:	b580      	push	{r7, lr}
 8015892:	b086      	sub	sp, #24
 8015894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015896:	4b47      	ldr	r3, [pc, #284]	@ (80159b4 <xPortStartScheduler+0x124>)
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	4a47      	ldr	r2, [pc, #284]	@ (80159b8 <xPortStartScheduler+0x128>)
 801589c:	4293      	cmp	r3, r2
 801589e:	d10b      	bne.n	80158b8 <xPortStartScheduler+0x28>
	__asm volatile
 80158a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80158a4:	f383 8811 	msr	BASEPRI, r3
 80158a8:	f3bf 8f6f 	isb	sy
 80158ac:	f3bf 8f4f 	dsb	sy
 80158b0:	613b      	str	r3, [r7, #16]
}
 80158b2:	bf00      	nop
 80158b4:	bf00      	nop
 80158b6:	e7fd      	b.n	80158b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80158b8:	4b3e      	ldr	r3, [pc, #248]	@ (80159b4 <xPortStartScheduler+0x124>)
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	4a3f      	ldr	r2, [pc, #252]	@ (80159bc <xPortStartScheduler+0x12c>)
 80158be:	4293      	cmp	r3, r2
 80158c0:	d10b      	bne.n	80158da <xPortStartScheduler+0x4a>
	__asm volatile
 80158c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80158c6:	f383 8811 	msr	BASEPRI, r3
 80158ca:	f3bf 8f6f 	isb	sy
 80158ce:	f3bf 8f4f 	dsb	sy
 80158d2:	60fb      	str	r3, [r7, #12]
}
 80158d4:	bf00      	nop
 80158d6:	bf00      	nop
 80158d8:	e7fd      	b.n	80158d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80158da:	4b39      	ldr	r3, [pc, #228]	@ (80159c0 <xPortStartScheduler+0x130>)
 80158dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80158de:	697b      	ldr	r3, [r7, #20]
 80158e0:	781b      	ldrb	r3, [r3, #0]
 80158e2:	b2db      	uxtb	r3, r3
 80158e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80158e6:	697b      	ldr	r3, [r7, #20]
 80158e8:	22ff      	movs	r2, #255	@ 0xff
 80158ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80158ec:	697b      	ldr	r3, [r7, #20]
 80158ee:	781b      	ldrb	r3, [r3, #0]
 80158f0:	b2db      	uxtb	r3, r3
 80158f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80158f4:	78fb      	ldrb	r3, [r7, #3]
 80158f6:	b2db      	uxtb	r3, r3
 80158f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80158fc:	b2da      	uxtb	r2, r3
 80158fe:	4b31      	ldr	r3, [pc, #196]	@ (80159c4 <xPortStartScheduler+0x134>)
 8015900:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015902:	4b31      	ldr	r3, [pc, #196]	@ (80159c8 <xPortStartScheduler+0x138>)
 8015904:	2207      	movs	r2, #7
 8015906:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015908:	e009      	b.n	801591e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801590a:	4b2f      	ldr	r3, [pc, #188]	@ (80159c8 <xPortStartScheduler+0x138>)
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	3b01      	subs	r3, #1
 8015910:	4a2d      	ldr	r2, [pc, #180]	@ (80159c8 <xPortStartScheduler+0x138>)
 8015912:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015914:	78fb      	ldrb	r3, [r7, #3]
 8015916:	b2db      	uxtb	r3, r3
 8015918:	005b      	lsls	r3, r3, #1
 801591a:	b2db      	uxtb	r3, r3
 801591c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801591e:	78fb      	ldrb	r3, [r7, #3]
 8015920:	b2db      	uxtb	r3, r3
 8015922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015926:	2b80      	cmp	r3, #128	@ 0x80
 8015928:	d0ef      	beq.n	801590a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801592a:	4b27      	ldr	r3, [pc, #156]	@ (80159c8 <xPortStartScheduler+0x138>)
 801592c:	681b      	ldr	r3, [r3, #0]
 801592e:	f1c3 0307 	rsb	r3, r3, #7
 8015932:	2b04      	cmp	r3, #4
 8015934:	d00b      	beq.n	801594e <xPortStartScheduler+0xbe>
	__asm volatile
 8015936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801593a:	f383 8811 	msr	BASEPRI, r3
 801593e:	f3bf 8f6f 	isb	sy
 8015942:	f3bf 8f4f 	dsb	sy
 8015946:	60bb      	str	r3, [r7, #8]
}
 8015948:	bf00      	nop
 801594a:	bf00      	nop
 801594c:	e7fd      	b.n	801594a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801594e:	4b1e      	ldr	r3, [pc, #120]	@ (80159c8 <xPortStartScheduler+0x138>)
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	021b      	lsls	r3, r3, #8
 8015954:	4a1c      	ldr	r2, [pc, #112]	@ (80159c8 <xPortStartScheduler+0x138>)
 8015956:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015958:	4b1b      	ldr	r3, [pc, #108]	@ (80159c8 <xPortStartScheduler+0x138>)
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8015960:	4a19      	ldr	r2, [pc, #100]	@ (80159c8 <xPortStartScheduler+0x138>)
 8015962:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	b2da      	uxtb	r2, r3
 8015968:	697b      	ldr	r3, [r7, #20]
 801596a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801596c:	4b17      	ldr	r3, [pc, #92]	@ (80159cc <xPortStartScheduler+0x13c>)
 801596e:	681b      	ldr	r3, [r3, #0]
 8015970:	4a16      	ldr	r2, [pc, #88]	@ (80159cc <xPortStartScheduler+0x13c>)
 8015972:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8015976:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015978:	4b14      	ldr	r3, [pc, #80]	@ (80159cc <xPortStartScheduler+0x13c>)
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	4a13      	ldr	r2, [pc, #76]	@ (80159cc <xPortStartScheduler+0x13c>)
 801597e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8015982:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015984:	f000 f8da 	bl	8015b3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015988:	4b11      	ldr	r3, [pc, #68]	@ (80159d0 <xPortStartScheduler+0x140>)
 801598a:	2200      	movs	r2, #0
 801598c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801598e:	f000 f8f9 	bl	8015b84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015992:	4b10      	ldr	r3, [pc, #64]	@ (80159d4 <xPortStartScheduler+0x144>)
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	4a0f      	ldr	r2, [pc, #60]	@ (80159d4 <xPortStartScheduler+0x144>)
 8015998:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801599c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801599e:	f7ff ff63 	bl	8015868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80159a2:	f7ff fa83 	bl	8014eac <vTaskSwitchContext>
	prvTaskExitError();
 80159a6:	f7ff ff1d 	bl	80157e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80159aa:	2300      	movs	r3, #0
}
 80159ac:	4618      	mov	r0, r3
 80159ae:	3718      	adds	r7, #24
 80159b0:	46bd      	mov	sp, r7
 80159b2:	bd80      	pop	{r7, pc}
 80159b4:	e000ed00 	.word	0xe000ed00
 80159b8:	410fc271 	.word	0x410fc271
 80159bc:	410fc270 	.word	0x410fc270
 80159c0:	e000e400 	.word	0xe000e400
 80159c4:	24002ad0 	.word	0x24002ad0
 80159c8:	24002ad4 	.word	0x24002ad4
 80159cc:	e000ed20 	.word	0xe000ed20
 80159d0:	240000c4 	.word	0x240000c4
 80159d4:	e000ef34 	.word	0xe000ef34

080159d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80159d8:	b480      	push	{r7}
 80159da:	b083      	sub	sp, #12
 80159dc:	af00      	add	r7, sp, #0
	__asm volatile
 80159de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80159e2:	f383 8811 	msr	BASEPRI, r3
 80159e6:	f3bf 8f6f 	isb	sy
 80159ea:	f3bf 8f4f 	dsb	sy
 80159ee:	607b      	str	r3, [r7, #4]
}
 80159f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80159f2:	4b10      	ldr	r3, [pc, #64]	@ (8015a34 <vPortEnterCritical+0x5c>)
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	3301      	adds	r3, #1
 80159f8:	4a0e      	ldr	r2, [pc, #56]	@ (8015a34 <vPortEnterCritical+0x5c>)
 80159fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80159fc:	4b0d      	ldr	r3, [pc, #52]	@ (8015a34 <vPortEnterCritical+0x5c>)
 80159fe:	681b      	ldr	r3, [r3, #0]
 8015a00:	2b01      	cmp	r3, #1
 8015a02:	d110      	bne.n	8015a26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015a04:	4b0c      	ldr	r3, [pc, #48]	@ (8015a38 <vPortEnterCritical+0x60>)
 8015a06:	681b      	ldr	r3, [r3, #0]
 8015a08:	b2db      	uxtb	r3, r3
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d00b      	beq.n	8015a26 <vPortEnterCritical+0x4e>
	__asm volatile
 8015a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a12:	f383 8811 	msr	BASEPRI, r3
 8015a16:	f3bf 8f6f 	isb	sy
 8015a1a:	f3bf 8f4f 	dsb	sy
 8015a1e:	603b      	str	r3, [r7, #0]
}
 8015a20:	bf00      	nop
 8015a22:	bf00      	nop
 8015a24:	e7fd      	b.n	8015a22 <vPortEnterCritical+0x4a>
	}
}
 8015a26:	bf00      	nop
 8015a28:	370c      	adds	r7, #12
 8015a2a:	46bd      	mov	sp, r7
 8015a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a30:	4770      	bx	lr
 8015a32:	bf00      	nop
 8015a34:	240000c4 	.word	0x240000c4
 8015a38:	e000ed04 	.word	0xe000ed04

08015a3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015a3c:	b480      	push	{r7}
 8015a3e:	b083      	sub	sp, #12
 8015a40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015a42:	4b12      	ldr	r3, [pc, #72]	@ (8015a8c <vPortExitCritical+0x50>)
 8015a44:	681b      	ldr	r3, [r3, #0]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d10b      	bne.n	8015a62 <vPortExitCritical+0x26>
	__asm volatile
 8015a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a4e:	f383 8811 	msr	BASEPRI, r3
 8015a52:	f3bf 8f6f 	isb	sy
 8015a56:	f3bf 8f4f 	dsb	sy
 8015a5a:	607b      	str	r3, [r7, #4]
}
 8015a5c:	bf00      	nop
 8015a5e:	bf00      	nop
 8015a60:	e7fd      	b.n	8015a5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015a62:	4b0a      	ldr	r3, [pc, #40]	@ (8015a8c <vPortExitCritical+0x50>)
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	3b01      	subs	r3, #1
 8015a68:	4a08      	ldr	r2, [pc, #32]	@ (8015a8c <vPortExitCritical+0x50>)
 8015a6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015a6c:	4b07      	ldr	r3, [pc, #28]	@ (8015a8c <vPortExitCritical+0x50>)
 8015a6e:	681b      	ldr	r3, [r3, #0]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d105      	bne.n	8015a80 <vPortExitCritical+0x44>
 8015a74:	2300      	movs	r3, #0
 8015a76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015a78:	683b      	ldr	r3, [r7, #0]
 8015a7a:	f383 8811 	msr	BASEPRI, r3
}
 8015a7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015a80:	bf00      	nop
 8015a82:	370c      	adds	r7, #12
 8015a84:	46bd      	mov	sp, r7
 8015a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a8a:	4770      	bx	lr
 8015a8c:	240000c4 	.word	0x240000c4

08015a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015a90:	f3ef 8009 	mrs	r0, PSP
 8015a94:	f3bf 8f6f 	isb	sy
 8015a98:	4b15      	ldr	r3, [pc, #84]	@ (8015af0 <pxCurrentTCBConst>)
 8015a9a:	681a      	ldr	r2, [r3, #0]
 8015a9c:	f01e 0f10 	tst.w	lr, #16
 8015aa0:	bf08      	it	eq
 8015aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015aaa:	6010      	str	r0, [r2, #0]
 8015aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015ab0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8015ab4:	f380 8811 	msr	BASEPRI, r0
 8015ab8:	f3bf 8f4f 	dsb	sy
 8015abc:	f3bf 8f6f 	isb	sy
 8015ac0:	f7ff f9f4 	bl	8014eac <vTaskSwitchContext>
 8015ac4:	f04f 0000 	mov.w	r0, #0
 8015ac8:	f380 8811 	msr	BASEPRI, r0
 8015acc:	bc09      	pop	{r0, r3}
 8015ace:	6819      	ldr	r1, [r3, #0]
 8015ad0:	6808      	ldr	r0, [r1, #0]
 8015ad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ad6:	f01e 0f10 	tst.w	lr, #16
 8015ada:	bf08      	it	eq
 8015adc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015ae0:	f380 8809 	msr	PSP, r0
 8015ae4:	f3bf 8f6f 	isb	sy
 8015ae8:	4770      	bx	lr
 8015aea:	bf00      	nop
 8015aec:	f3af 8000 	nop.w

08015af0 <pxCurrentTCBConst>:
 8015af0:	240029a4 	.word	0x240029a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015af4:	bf00      	nop
 8015af6:	bf00      	nop

08015af8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015af8:	b580      	push	{r7, lr}
 8015afa:	b082      	sub	sp, #8
 8015afc:	af00      	add	r7, sp, #0
	__asm volatile
 8015afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b02:	f383 8811 	msr	BASEPRI, r3
 8015b06:	f3bf 8f6f 	isb	sy
 8015b0a:	f3bf 8f4f 	dsb	sy
 8015b0e:	607b      	str	r3, [r7, #4]
}
 8015b10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015b12:	f7ff f911 	bl	8014d38 <xTaskIncrementTick>
 8015b16:	4603      	mov	r3, r0
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d003      	beq.n	8015b24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015b1c:	4b06      	ldr	r3, [pc, #24]	@ (8015b38 <SysTick_Handler+0x40>)
 8015b1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015b22:	601a      	str	r2, [r3, #0]
 8015b24:	2300      	movs	r3, #0
 8015b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015b28:	683b      	ldr	r3, [r7, #0]
 8015b2a:	f383 8811 	msr	BASEPRI, r3
}
 8015b2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015b30:	bf00      	nop
 8015b32:	3708      	adds	r7, #8
 8015b34:	46bd      	mov	sp, r7
 8015b36:	bd80      	pop	{r7, pc}
 8015b38:	e000ed04 	.word	0xe000ed04

08015b3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015b3c:	b480      	push	{r7}
 8015b3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015b40:	4b0b      	ldr	r3, [pc, #44]	@ (8015b70 <vPortSetupTimerInterrupt+0x34>)
 8015b42:	2200      	movs	r2, #0
 8015b44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015b46:	4b0b      	ldr	r3, [pc, #44]	@ (8015b74 <vPortSetupTimerInterrupt+0x38>)
 8015b48:	2200      	movs	r2, #0
 8015b4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8015b78 <vPortSetupTimerInterrupt+0x3c>)
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	4a0a      	ldr	r2, [pc, #40]	@ (8015b7c <vPortSetupTimerInterrupt+0x40>)
 8015b52:	fba2 2303 	umull	r2, r3, r2, r3
 8015b56:	099b      	lsrs	r3, r3, #6
 8015b58:	4a09      	ldr	r2, [pc, #36]	@ (8015b80 <vPortSetupTimerInterrupt+0x44>)
 8015b5a:	3b01      	subs	r3, #1
 8015b5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015b5e:	4b04      	ldr	r3, [pc, #16]	@ (8015b70 <vPortSetupTimerInterrupt+0x34>)
 8015b60:	2207      	movs	r2, #7
 8015b62:	601a      	str	r2, [r3, #0]
}
 8015b64:	bf00      	nop
 8015b66:	46bd      	mov	sp, r7
 8015b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b6c:	4770      	bx	lr
 8015b6e:	bf00      	nop
 8015b70:	e000e010 	.word	0xe000e010
 8015b74:	e000e018 	.word	0xe000e018
 8015b78:	24000000 	.word	0x24000000
 8015b7c:	10624dd3 	.word	0x10624dd3
 8015b80:	e000e014 	.word	0xe000e014

08015b84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015b84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8015b94 <vPortEnableVFP+0x10>
 8015b88:	6801      	ldr	r1, [r0, #0]
 8015b8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8015b8e:	6001      	str	r1, [r0, #0]
 8015b90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015b92:	bf00      	nop
 8015b94:	e000ed88 	.word	0xe000ed88

08015b98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015b98:	b480      	push	{r7}
 8015b9a:	b085      	sub	sp, #20
 8015b9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015b9e:	f3ef 8305 	mrs	r3, IPSR
 8015ba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	2b0f      	cmp	r3, #15
 8015ba8:	d915      	bls.n	8015bd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015baa:	4a18      	ldr	r2, [pc, #96]	@ (8015c0c <vPortValidateInterruptPriority+0x74>)
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	4413      	add	r3, r2
 8015bb0:	781b      	ldrb	r3, [r3, #0]
 8015bb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015bb4:	4b16      	ldr	r3, [pc, #88]	@ (8015c10 <vPortValidateInterruptPriority+0x78>)
 8015bb6:	781b      	ldrb	r3, [r3, #0]
 8015bb8:	7afa      	ldrb	r2, [r7, #11]
 8015bba:	429a      	cmp	r2, r3
 8015bbc:	d20b      	bcs.n	8015bd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8015bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015bc2:	f383 8811 	msr	BASEPRI, r3
 8015bc6:	f3bf 8f6f 	isb	sy
 8015bca:	f3bf 8f4f 	dsb	sy
 8015bce:	607b      	str	r3, [r7, #4]
}
 8015bd0:	bf00      	nop
 8015bd2:	bf00      	nop
 8015bd4:	e7fd      	b.n	8015bd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8015c14 <vPortValidateInterruptPriority+0x7c>)
 8015bd8:	681b      	ldr	r3, [r3, #0]
 8015bda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8015bde:	4b0e      	ldr	r3, [pc, #56]	@ (8015c18 <vPortValidateInterruptPriority+0x80>)
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	429a      	cmp	r2, r3
 8015be4:	d90b      	bls.n	8015bfe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8015be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015bea:	f383 8811 	msr	BASEPRI, r3
 8015bee:	f3bf 8f6f 	isb	sy
 8015bf2:	f3bf 8f4f 	dsb	sy
 8015bf6:	603b      	str	r3, [r7, #0]
}
 8015bf8:	bf00      	nop
 8015bfa:	bf00      	nop
 8015bfc:	e7fd      	b.n	8015bfa <vPortValidateInterruptPriority+0x62>
	}
 8015bfe:	bf00      	nop
 8015c00:	3714      	adds	r7, #20
 8015c02:	46bd      	mov	sp, r7
 8015c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c08:	4770      	bx	lr
 8015c0a:	bf00      	nop
 8015c0c:	e000e3f0 	.word	0xe000e3f0
 8015c10:	24002ad0 	.word	0x24002ad0
 8015c14:	e000ed0c 	.word	0xe000ed0c
 8015c18:	24002ad4 	.word	0x24002ad4

08015c1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015c1c:	b580      	push	{r7, lr}
 8015c1e:	b08a      	sub	sp, #40	@ 0x28
 8015c20:	af00      	add	r7, sp, #0
 8015c22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015c24:	2300      	movs	r3, #0
 8015c26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015c28:	f7fe ffda 	bl	8014be0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015c2c:	4b5c      	ldr	r3, [pc, #368]	@ (8015da0 <pvPortMalloc+0x184>)
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d101      	bne.n	8015c38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015c34:	f000 f924 	bl	8015e80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015c38:	4b5a      	ldr	r3, [pc, #360]	@ (8015da4 <pvPortMalloc+0x188>)
 8015c3a:	681a      	ldr	r2, [r3, #0]
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	4013      	ands	r3, r2
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	f040 8095 	bne.w	8015d70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d01e      	beq.n	8015c8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8015c4c:	2208      	movs	r2, #8
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	4413      	add	r3, r2
 8015c52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	f003 0307 	and.w	r3, r3, #7
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d015      	beq.n	8015c8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	f023 0307 	bic.w	r3, r3, #7
 8015c64:	3308      	adds	r3, #8
 8015c66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	f003 0307 	and.w	r3, r3, #7
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d00b      	beq.n	8015c8a <pvPortMalloc+0x6e>
	__asm volatile
 8015c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c76:	f383 8811 	msr	BASEPRI, r3
 8015c7a:	f3bf 8f6f 	isb	sy
 8015c7e:	f3bf 8f4f 	dsb	sy
 8015c82:	617b      	str	r3, [r7, #20]
}
 8015c84:	bf00      	nop
 8015c86:	bf00      	nop
 8015c88:	e7fd      	b.n	8015c86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d06f      	beq.n	8015d70 <pvPortMalloc+0x154>
 8015c90:	4b45      	ldr	r3, [pc, #276]	@ (8015da8 <pvPortMalloc+0x18c>)
 8015c92:	681b      	ldr	r3, [r3, #0]
 8015c94:	687a      	ldr	r2, [r7, #4]
 8015c96:	429a      	cmp	r2, r3
 8015c98:	d86a      	bhi.n	8015d70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015c9a:	4b44      	ldr	r3, [pc, #272]	@ (8015dac <pvPortMalloc+0x190>)
 8015c9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015c9e:	4b43      	ldr	r3, [pc, #268]	@ (8015dac <pvPortMalloc+0x190>)
 8015ca0:	681b      	ldr	r3, [r3, #0]
 8015ca2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015ca4:	e004      	b.n	8015cb0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8015ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ca8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cac:	681b      	ldr	r3, [r3, #0]
 8015cae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cb2:	685b      	ldr	r3, [r3, #4]
 8015cb4:	687a      	ldr	r2, [r7, #4]
 8015cb6:	429a      	cmp	r2, r3
 8015cb8:	d903      	bls.n	8015cc2 <pvPortMalloc+0xa6>
 8015cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cbc:	681b      	ldr	r3, [r3, #0]
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d1f1      	bne.n	8015ca6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015cc2:	4b37      	ldr	r3, [pc, #220]	@ (8015da0 <pvPortMalloc+0x184>)
 8015cc4:	681b      	ldr	r3, [r3, #0]
 8015cc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015cc8:	429a      	cmp	r2, r3
 8015cca:	d051      	beq.n	8015d70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015ccc:	6a3b      	ldr	r3, [r7, #32]
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	2208      	movs	r2, #8
 8015cd2:	4413      	add	r3, r2
 8015cd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cd8:	681a      	ldr	r2, [r3, #0]
 8015cda:	6a3b      	ldr	r3, [r7, #32]
 8015cdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ce0:	685a      	ldr	r2, [r3, #4]
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	1ad2      	subs	r2, r2, r3
 8015ce6:	2308      	movs	r3, #8
 8015ce8:	005b      	lsls	r3, r3, #1
 8015cea:	429a      	cmp	r2, r3
 8015cec:	d920      	bls.n	8015d30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	4413      	add	r3, r2
 8015cf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015cf6:	69bb      	ldr	r3, [r7, #24]
 8015cf8:	f003 0307 	and.w	r3, r3, #7
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d00b      	beq.n	8015d18 <pvPortMalloc+0xfc>
	__asm volatile
 8015d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d04:	f383 8811 	msr	BASEPRI, r3
 8015d08:	f3bf 8f6f 	isb	sy
 8015d0c:	f3bf 8f4f 	dsb	sy
 8015d10:	613b      	str	r3, [r7, #16]
}
 8015d12:	bf00      	nop
 8015d14:	bf00      	nop
 8015d16:	e7fd      	b.n	8015d14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d1a:	685a      	ldr	r2, [r3, #4]
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	1ad2      	subs	r2, r2, r3
 8015d20:	69bb      	ldr	r3, [r7, #24]
 8015d22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d26:	687a      	ldr	r2, [r7, #4]
 8015d28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015d2a:	69b8      	ldr	r0, [r7, #24]
 8015d2c:	f000 f90a 	bl	8015f44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015d30:	4b1d      	ldr	r3, [pc, #116]	@ (8015da8 <pvPortMalloc+0x18c>)
 8015d32:	681a      	ldr	r2, [r3, #0]
 8015d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d36:	685b      	ldr	r3, [r3, #4]
 8015d38:	1ad3      	subs	r3, r2, r3
 8015d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8015da8 <pvPortMalloc+0x18c>)
 8015d3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8015da8 <pvPortMalloc+0x18c>)
 8015d40:	681a      	ldr	r2, [r3, #0]
 8015d42:	4b1b      	ldr	r3, [pc, #108]	@ (8015db0 <pvPortMalloc+0x194>)
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	429a      	cmp	r2, r3
 8015d48:	d203      	bcs.n	8015d52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015d4a:	4b17      	ldr	r3, [pc, #92]	@ (8015da8 <pvPortMalloc+0x18c>)
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	4a18      	ldr	r2, [pc, #96]	@ (8015db0 <pvPortMalloc+0x194>)
 8015d50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d54:	685a      	ldr	r2, [r3, #4]
 8015d56:	4b13      	ldr	r3, [pc, #76]	@ (8015da4 <pvPortMalloc+0x188>)
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	431a      	orrs	r2, r3
 8015d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d62:	2200      	movs	r2, #0
 8015d64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015d66:	4b13      	ldr	r3, [pc, #76]	@ (8015db4 <pvPortMalloc+0x198>)
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	3301      	adds	r3, #1
 8015d6c:	4a11      	ldr	r2, [pc, #68]	@ (8015db4 <pvPortMalloc+0x198>)
 8015d6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015d70:	f7fe ff44 	bl	8014bfc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015d74:	69fb      	ldr	r3, [r7, #28]
 8015d76:	f003 0307 	and.w	r3, r3, #7
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d00b      	beq.n	8015d96 <pvPortMalloc+0x17a>
	__asm volatile
 8015d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d82:	f383 8811 	msr	BASEPRI, r3
 8015d86:	f3bf 8f6f 	isb	sy
 8015d8a:	f3bf 8f4f 	dsb	sy
 8015d8e:	60fb      	str	r3, [r7, #12]
}
 8015d90:	bf00      	nop
 8015d92:	bf00      	nop
 8015d94:	e7fd      	b.n	8015d92 <pvPortMalloc+0x176>
	return pvReturn;
 8015d96:	69fb      	ldr	r3, [r7, #28]
}
 8015d98:	4618      	mov	r0, r3
 8015d9a:	3728      	adds	r7, #40	@ 0x28
 8015d9c:	46bd      	mov	sp, r7
 8015d9e:	bd80      	pop	{r7, pc}
 8015da0:	240066e0 	.word	0x240066e0
 8015da4:	240066f4 	.word	0x240066f4
 8015da8:	240066e4 	.word	0x240066e4
 8015dac:	240066d8 	.word	0x240066d8
 8015db0:	240066e8 	.word	0x240066e8
 8015db4:	240066ec 	.word	0x240066ec

08015db8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015db8:	b580      	push	{r7, lr}
 8015dba:	b086      	sub	sp, #24
 8015dbc:	af00      	add	r7, sp, #0
 8015dbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d04f      	beq.n	8015e6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015dca:	2308      	movs	r3, #8
 8015dcc:	425b      	negs	r3, r3
 8015dce:	697a      	ldr	r2, [r7, #20]
 8015dd0:	4413      	add	r3, r2
 8015dd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015dd4:	697b      	ldr	r3, [r7, #20]
 8015dd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015dd8:	693b      	ldr	r3, [r7, #16]
 8015dda:	685a      	ldr	r2, [r3, #4]
 8015ddc:	4b25      	ldr	r3, [pc, #148]	@ (8015e74 <vPortFree+0xbc>)
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	4013      	ands	r3, r2
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d10b      	bne.n	8015dfe <vPortFree+0x46>
	__asm volatile
 8015de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015dea:	f383 8811 	msr	BASEPRI, r3
 8015dee:	f3bf 8f6f 	isb	sy
 8015df2:	f3bf 8f4f 	dsb	sy
 8015df6:	60fb      	str	r3, [r7, #12]
}
 8015df8:	bf00      	nop
 8015dfa:	bf00      	nop
 8015dfc:	e7fd      	b.n	8015dfa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015dfe:	693b      	ldr	r3, [r7, #16]
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d00b      	beq.n	8015e1e <vPortFree+0x66>
	__asm volatile
 8015e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e0a:	f383 8811 	msr	BASEPRI, r3
 8015e0e:	f3bf 8f6f 	isb	sy
 8015e12:	f3bf 8f4f 	dsb	sy
 8015e16:	60bb      	str	r3, [r7, #8]
}
 8015e18:	bf00      	nop
 8015e1a:	bf00      	nop
 8015e1c:	e7fd      	b.n	8015e1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015e1e:	693b      	ldr	r3, [r7, #16]
 8015e20:	685a      	ldr	r2, [r3, #4]
 8015e22:	4b14      	ldr	r3, [pc, #80]	@ (8015e74 <vPortFree+0xbc>)
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	4013      	ands	r3, r2
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d01e      	beq.n	8015e6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015e2c:	693b      	ldr	r3, [r7, #16]
 8015e2e:	681b      	ldr	r3, [r3, #0]
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d11a      	bne.n	8015e6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015e34:	693b      	ldr	r3, [r7, #16]
 8015e36:	685a      	ldr	r2, [r3, #4]
 8015e38:	4b0e      	ldr	r3, [pc, #56]	@ (8015e74 <vPortFree+0xbc>)
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	43db      	mvns	r3, r3
 8015e3e:	401a      	ands	r2, r3
 8015e40:	693b      	ldr	r3, [r7, #16]
 8015e42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015e44:	f7fe fecc 	bl	8014be0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015e48:	693b      	ldr	r3, [r7, #16]
 8015e4a:	685a      	ldr	r2, [r3, #4]
 8015e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8015e78 <vPortFree+0xc0>)
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	4413      	add	r3, r2
 8015e52:	4a09      	ldr	r2, [pc, #36]	@ (8015e78 <vPortFree+0xc0>)
 8015e54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015e56:	6938      	ldr	r0, [r7, #16]
 8015e58:	f000 f874 	bl	8015f44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8015e5c:	4b07      	ldr	r3, [pc, #28]	@ (8015e7c <vPortFree+0xc4>)
 8015e5e:	681b      	ldr	r3, [r3, #0]
 8015e60:	3301      	adds	r3, #1
 8015e62:	4a06      	ldr	r2, [pc, #24]	@ (8015e7c <vPortFree+0xc4>)
 8015e64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8015e66:	f7fe fec9 	bl	8014bfc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015e6a:	bf00      	nop
 8015e6c:	3718      	adds	r7, #24
 8015e6e:	46bd      	mov	sp, r7
 8015e70:	bd80      	pop	{r7, pc}
 8015e72:	bf00      	nop
 8015e74:	240066f4 	.word	0x240066f4
 8015e78:	240066e4 	.word	0x240066e4
 8015e7c:	240066f0 	.word	0x240066f0

08015e80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015e80:	b480      	push	{r7}
 8015e82:	b085      	sub	sp, #20
 8015e84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015e86:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8015e8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015e8c:	4b27      	ldr	r3, [pc, #156]	@ (8015f2c <prvHeapInit+0xac>)
 8015e8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015e90:	68fb      	ldr	r3, [r7, #12]
 8015e92:	f003 0307 	and.w	r3, r3, #7
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d00c      	beq.n	8015eb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	3307      	adds	r3, #7
 8015e9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	f023 0307 	bic.w	r3, r3, #7
 8015ea6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015ea8:	68ba      	ldr	r2, [r7, #8]
 8015eaa:	68fb      	ldr	r3, [r7, #12]
 8015eac:	1ad3      	subs	r3, r2, r3
 8015eae:	4a1f      	ldr	r2, [pc, #124]	@ (8015f2c <prvHeapInit+0xac>)
 8015eb0:	4413      	add	r3, r2
 8015eb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8015f30 <prvHeapInit+0xb0>)
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8015f30 <prvHeapInit+0xb0>)
 8015ec0:	2200      	movs	r2, #0
 8015ec2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	68ba      	ldr	r2, [r7, #8]
 8015ec8:	4413      	add	r3, r2
 8015eca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015ecc:	2208      	movs	r2, #8
 8015ece:	68fb      	ldr	r3, [r7, #12]
 8015ed0:	1a9b      	subs	r3, r3, r2
 8015ed2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015ed4:	68fb      	ldr	r3, [r7, #12]
 8015ed6:	f023 0307 	bic.w	r3, r3, #7
 8015eda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015edc:	68fb      	ldr	r3, [r7, #12]
 8015ede:	4a15      	ldr	r2, [pc, #84]	@ (8015f34 <prvHeapInit+0xb4>)
 8015ee0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015ee2:	4b14      	ldr	r3, [pc, #80]	@ (8015f34 <prvHeapInit+0xb4>)
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	2200      	movs	r2, #0
 8015ee8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8015eea:	4b12      	ldr	r3, [pc, #72]	@ (8015f34 <prvHeapInit+0xb4>)
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	2200      	movs	r2, #0
 8015ef0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015ef6:	683b      	ldr	r3, [r7, #0]
 8015ef8:	68fa      	ldr	r2, [r7, #12]
 8015efa:	1ad2      	subs	r2, r2, r3
 8015efc:	683b      	ldr	r3, [r7, #0]
 8015efe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015f00:	4b0c      	ldr	r3, [pc, #48]	@ (8015f34 <prvHeapInit+0xb4>)
 8015f02:	681a      	ldr	r2, [r3, #0]
 8015f04:	683b      	ldr	r3, [r7, #0]
 8015f06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015f08:	683b      	ldr	r3, [r7, #0]
 8015f0a:	685b      	ldr	r3, [r3, #4]
 8015f0c:	4a0a      	ldr	r2, [pc, #40]	@ (8015f38 <prvHeapInit+0xb8>)
 8015f0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015f10:	683b      	ldr	r3, [r7, #0]
 8015f12:	685b      	ldr	r3, [r3, #4]
 8015f14:	4a09      	ldr	r2, [pc, #36]	@ (8015f3c <prvHeapInit+0xbc>)
 8015f16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015f18:	4b09      	ldr	r3, [pc, #36]	@ (8015f40 <prvHeapInit+0xc0>)
 8015f1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8015f1e:	601a      	str	r2, [r3, #0]
}
 8015f20:	bf00      	nop
 8015f22:	3714      	adds	r7, #20
 8015f24:	46bd      	mov	sp, r7
 8015f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f2a:	4770      	bx	lr
 8015f2c:	24002ad8 	.word	0x24002ad8
 8015f30:	240066d8 	.word	0x240066d8
 8015f34:	240066e0 	.word	0x240066e0
 8015f38:	240066e8 	.word	0x240066e8
 8015f3c:	240066e4 	.word	0x240066e4
 8015f40:	240066f4 	.word	0x240066f4

08015f44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015f44:	b480      	push	{r7}
 8015f46:	b085      	sub	sp, #20
 8015f48:	af00      	add	r7, sp, #0
 8015f4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015f4c:	4b28      	ldr	r3, [pc, #160]	@ (8015ff0 <prvInsertBlockIntoFreeList+0xac>)
 8015f4e:	60fb      	str	r3, [r7, #12]
 8015f50:	e002      	b.n	8015f58 <prvInsertBlockIntoFreeList+0x14>
 8015f52:	68fb      	ldr	r3, [r7, #12]
 8015f54:	681b      	ldr	r3, [r3, #0]
 8015f56:	60fb      	str	r3, [r7, #12]
 8015f58:	68fb      	ldr	r3, [r7, #12]
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	687a      	ldr	r2, [r7, #4]
 8015f5e:	429a      	cmp	r2, r3
 8015f60:	d8f7      	bhi.n	8015f52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015f62:	68fb      	ldr	r3, [r7, #12]
 8015f64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	685b      	ldr	r3, [r3, #4]
 8015f6a:	68ba      	ldr	r2, [r7, #8]
 8015f6c:	4413      	add	r3, r2
 8015f6e:	687a      	ldr	r2, [r7, #4]
 8015f70:	429a      	cmp	r2, r3
 8015f72:	d108      	bne.n	8015f86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	685a      	ldr	r2, [r3, #4]
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	685b      	ldr	r3, [r3, #4]
 8015f7c:	441a      	add	r2, r3
 8015f7e:	68fb      	ldr	r3, [r7, #12]
 8015f80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	685b      	ldr	r3, [r3, #4]
 8015f8e:	68ba      	ldr	r2, [r7, #8]
 8015f90:	441a      	add	r2, r3
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	429a      	cmp	r2, r3
 8015f98:	d118      	bne.n	8015fcc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015f9a:	68fb      	ldr	r3, [r7, #12]
 8015f9c:	681a      	ldr	r2, [r3, #0]
 8015f9e:	4b15      	ldr	r3, [pc, #84]	@ (8015ff4 <prvInsertBlockIntoFreeList+0xb0>)
 8015fa0:	681b      	ldr	r3, [r3, #0]
 8015fa2:	429a      	cmp	r2, r3
 8015fa4:	d00d      	beq.n	8015fc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	685a      	ldr	r2, [r3, #4]
 8015faa:	68fb      	ldr	r3, [r7, #12]
 8015fac:	681b      	ldr	r3, [r3, #0]
 8015fae:	685b      	ldr	r3, [r3, #4]
 8015fb0:	441a      	add	r2, r3
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015fb6:	68fb      	ldr	r3, [r7, #12]
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	681a      	ldr	r2, [r3, #0]
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	601a      	str	r2, [r3, #0]
 8015fc0:	e008      	b.n	8015fd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8015ff4 <prvInsertBlockIntoFreeList+0xb0>)
 8015fc4:	681a      	ldr	r2, [r3, #0]
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	601a      	str	r2, [r3, #0]
 8015fca:	e003      	b.n	8015fd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	681a      	ldr	r2, [r3, #0]
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015fd4:	68fa      	ldr	r2, [r7, #12]
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	429a      	cmp	r2, r3
 8015fda:	d002      	beq.n	8015fe2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015fdc:	68fb      	ldr	r3, [r7, #12]
 8015fde:	687a      	ldr	r2, [r7, #4]
 8015fe0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015fe2:	bf00      	nop
 8015fe4:	3714      	adds	r7, #20
 8015fe6:	46bd      	mov	sp, r7
 8015fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fec:	4770      	bx	lr
 8015fee:	bf00      	nop
 8015ff0:	240066d8 	.word	0x240066d8
 8015ff4:	240066e0 	.word	0x240066e0

08015ff8 <atof>:
 8015ff8:	2100      	movs	r1, #0
 8015ffa:	f000 bdb7 	b.w	8016b6c <strtod>

08015ffe <atoi>:
 8015ffe:	220a      	movs	r2, #10
 8016000:	2100      	movs	r1, #0
 8016002:	f000 be39 	b.w	8016c78 <strtol>

08016006 <sulp>:
 8016006:	b570      	push	{r4, r5, r6, lr}
 8016008:	4604      	mov	r4, r0
 801600a:	460d      	mov	r5, r1
 801600c:	4616      	mov	r6, r2
 801600e:	ec45 4b10 	vmov	d0, r4, r5
 8016012:	f001 ffa9 	bl	8017f68 <__ulp>
 8016016:	b17e      	cbz	r6, 8016038 <sulp+0x32>
 8016018:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801601c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016020:	2b00      	cmp	r3, #0
 8016022:	dd09      	ble.n	8016038 <sulp+0x32>
 8016024:	051b      	lsls	r3, r3, #20
 8016026:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801602a:	2000      	movs	r0, #0
 801602c:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8016030:	ec41 0b17 	vmov	d7, r0, r1
 8016034:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016038:	bd70      	pop	{r4, r5, r6, pc}
 801603a:	0000      	movs	r0, r0
 801603c:	0000      	movs	r0, r0
	...

08016040 <_strtod_l>:
 8016040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016044:	ed2d 8b0a 	vpush	{d8-d12}
 8016048:	b097      	sub	sp, #92	@ 0x5c
 801604a:	4688      	mov	r8, r1
 801604c:	920e      	str	r2, [sp, #56]	@ 0x38
 801604e:	2200      	movs	r2, #0
 8016050:	9212      	str	r2, [sp, #72]	@ 0x48
 8016052:	9005      	str	r0, [sp, #20]
 8016054:	f04f 0a00 	mov.w	sl, #0
 8016058:	f04f 0b00 	mov.w	fp, #0
 801605c:	460a      	mov	r2, r1
 801605e:	9211      	str	r2, [sp, #68]	@ 0x44
 8016060:	7811      	ldrb	r1, [r2, #0]
 8016062:	292b      	cmp	r1, #43	@ 0x2b
 8016064:	d04c      	beq.n	8016100 <_strtod_l+0xc0>
 8016066:	d839      	bhi.n	80160dc <_strtod_l+0x9c>
 8016068:	290d      	cmp	r1, #13
 801606a:	d833      	bhi.n	80160d4 <_strtod_l+0x94>
 801606c:	2908      	cmp	r1, #8
 801606e:	d833      	bhi.n	80160d8 <_strtod_l+0x98>
 8016070:	2900      	cmp	r1, #0
 8016072:	d03c      	beq.n	80160ee <_strtod_l+0xae>
 8016074:	2200      	movs	r2, #0
 8016076:	9208      	str	r2, [sp, #32]
 8016078:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801607a:	782a      	ldrb	r2, [r5, #0]
 801607c:	2a30      	cmp	r2, #48	@ 0x30
 801607e:	f040 80b5 	bne.w	80161ec <_strtod_l+0x1ac>
 8016082:	786a      	ldrb	r2, [r5, #1]
 8016084:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016088:	2a58      	cmp	r2, #88	@ 0x58
 801608a:	d170      	bne.n	801616e <_strtod_l+0x12e>
 801608c:	9302      	str	r3, [sp, #8]
 801608e:	9b08      	ldr	r3, [sp, #32]
 8016090:	9301      	str	r3, [sp, #4]
 8016092:	ab12      	add	r3, sp, #72	@ 0x48
 8016094:	9300      	str	r3, [sp, #0]
 8016096:	4a8b      	ldr	r2, [pc, #556]	@ (80162c4 <_strtod_l+0x284>)
 8016098:	9805      	ldr	r0, [sp, #20]
 801609a:	ab13      	add	r3, sp, #76	@ 0x4c
 801609c:	a911      	add	r1, sp, #68	@ 0x44
 801609e:	f001 f85d 	bl	801715c <__gethex>
 80160a2:	f010 060f 	ands.w	r6, r0, #15
 80160a6:	4604      	mov	r4, r0
 80160a8:	d005      	beq.n	80160b6 <_strtod_l+0x76>
 80160aa:	2e06      	cmp	r6, #6
 80160ac:	d12a      	bne.n	8016104 <_strtod_l+0xc4>
 80160ae:	3501      	adds	r5, #1
 80160b0:	2300      	movs	r3, #0
 80160b2:	9511      	str	r5, [sp, #68]	@ 0x44
 80160b4:	9308      	str	r3, [sp, #32]
 80160b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	f040 852f 	bne.w	8016b1c <_strtod_l+0xadc>
 80160be:	9b08      	ldr	r3, [sp, #32]
 80160c0:	ec4b ab10 	vmov	d0, sl, fp
 80160c4:	b1cb      	cbz	r3, 80160fa <_strtod_l+0xba>
 80160c6:	eeb1 0b40 	vneg.f64	d0, d0
 80160ca:	b017      	add	sp, #92	@ 0x5c
 80160cc:	ecbd 8b0a 	vpop	{d8-d12}
 80160d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160d4:	2920      	cmp	r1, #32
 80160d6:	d1cd      	bne.n	8016074 <_strtod_l+0x34>
 80160d8:	3201      	adds	r2, #1
 80160da:	e7c0      	b.n	801605e <_strtod_l+0x1e>
 80160dc:	292d      	cmp	r1, #45	@ 0x2d
 80160de:	d1c9      	bne.n	8016074 <_strtod_l+0x34>
 80160e0:	2101      	movs	r1, #1
 80160e2:	9108      	str	r1, [sp, #32]
 80160e4:	1c51      	adds	r1, r2, #1
 80160e6:	9111      	str	r1, [sp, #68]	@ 0x44
 80160e8:	7852      	ldrb	r2, [r2, #1]
 80160ea:	2a00      	cmp	r2, #0
 80160ec:	d1c4      	bne.n	8016078 <_strtod_l+0x38>
 80160ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80160f0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	f040 850f 	bne.w	8016b18 <_strtod_l+0xad8>
 80160fa:	ec4b ab10 	vmov	d0, sl, fp
 80160fe:	e7e4      	b.n	80160ca <_strtod_l+0x8a>
 8016100:	2100      	movs	r1, #0
 8016102:	e7ee      	b.n	80160e2 <_strtod_l+0xa2>
 8016104:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016106:	b13a      	cbz	r2, 8016118 <_strtod_l+0xd8>
 8016108:	2135      	movs	r1, #53	@ 0x35
 801610a:	a814      	add	r0, sp, #80	@ 0x50
 801610c:	f002 f823 	bl	8018156 <__copybits>
 8016110:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016112:	9805      	ldr	r0, [sp, #20]
 8016114:	f001 fbf4 	bl	8017900 <_Bfree>
 8016118:	1e73      	subs	r3, r6, #1
 801611a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801611c:	2b04      	cmp	r3, #4
 801611e:	d806      	bhi.n	801612e <_strtod_l+0xee>
 8016120:	e8df f003 	tbb	[pc, r3]
 8016124:	201d0314 	.word	0x201d0314
 8016128:	14          	.byte	0x14
 8016129:	00          	.byte	0x00
 801612a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 801612e:	05e3      	lsls	r3, r4, #23
 8016130:	bf48      	it	mi
 8016132:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8016136:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801613a:	0d1b      	lsrs	r3, r3, #20
 801613c:	051b      	lsls	r3, r3, #20
 801613e:	2b00      	cmp	r3, #0
 8016140:	d1b9      	bne.n	80160b6 <_strtod_l+0x76>
 8016142:	f000 ff15 	bl	8016f70 <__errno>
 8016146:	2322      	movs	r3, #34	@ 0x22
 8016148:	6003      	str	r3, [r0, #0]
 801614a:	e7b4      	b.n	80160b6 <_strtod_l+0x76>
 801614c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8016150:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8016154:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8016158:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801615c:	e7e7      	b.n	801612e <_strtod_l+0xee>
 801615e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 80162cc <_strtod_l+0x28c>
 8016162:	e7e4      	b.n	801612e <_strtod_l+0xee>
 8016164:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8016168:	f04f 3aff 	mov.w	sl, #4294967295
 801616c:	e7df      	b.n	801612e <_strtod_l+0xee>
 801616e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016170:	1c5a      	adds	r2, r3, #1
 8016172:	9211      	str	r2, [sp, #68]	@ 0x44
 8016174:	785b      	ldrb	r3, [r3, #1]
 8016176:	2b30      	cmp	r3, #48	@ 0x30
 8016178:	d0f9      	beq.n	801616e <_strtod_l+0x12e>
 801617a:	2b00      	cmp	r3, #0
 801617c:	d09b      	beq.n	80160b6 <_strtod_l+0x76>
 801617e:	2301      	movs	r3, #1
 8016180:	2600      	movs	r6, #0
 8016182:	9307      	str	r3, [sp, #28]
 8016184:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016186:	930a      	str	r3, [sp, #40]	@ 0x28
 8016188:	46b1      	mov	r9, r6
 801618a:	4635      	mov	r5, r6
 801618c:	220a      	movs	r2, #10
 801618e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8016190:	7804      	ldrb	r4, [r0, #0]
 8016192:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8016196:	b2d9      	uxtb	r1, r3
 8016198:	2909      	cmp	r1, #9
 801619a:	d929      	bls.n	80161f0 <_strtod_l+0x1b0>
 801619c:	494a      	ldr	r1, [pc, #296]	@ (80162c8 <_strtod_l+0x288>)
 801619e:	2201      	movs	r2, #1
 80161a0:	f000 fe8e 	bl	8016ec0 <strncmp>
 80161a4:	b378      	cbz	r0, 8016206 <_strtod_l+0x1c6>
 80161a6:	2000      	movs	r0, #0
 80161a8:	4622      	mov	r2, r4
 80161aa:	462b      	mov	r3, r5
 80161ac:	4607      	mov	r7, r0
 80161ae:	9006      	str	r0, [sp, #24]
 80161b0:	2a65      	cmp	r2, #101	@ 0x65
 80161b2:	d001      	beq.n	80161b8 <_strtod_l+0x178>
 80161b4:	2a45      	cmp	r2, #69	@ 0x45
 80161b6:	d117      	bne.n	80161e8 <_strtod_l+0x1a8>
 80161b8:	b91b      	cbnz	r3, 80161c2 <_strtod_l+0x182>
 80161ba:	9b07      	ldr	r3, [sp, #28]
 80161bc:	4303      	orrs	r3, r0
 80161be:	d096      	beq.n	80160ee <_strtod_l+0xae>
 80161c0:	2300      	movs	r3, #0
 80161c2:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 80161c6:	f108 0201 	add.w	r2, r8, #1
 80161ca:	9211      	str	r2, [sp, #68]	@ 0x44
 80161cc:	f898 2001 	ldrb.w	r2, [r8, #1]
 80161d0:	2a2b      	cmp	r2, #43	@ 0x2b
 80161d2:	d06b      	beq.n	80162ac <_strtod_l+0x26c>
 80161d4:	2a2d      	cmp	r2, #45	@ 0x2d
 80161d6:	d071      	beq.n	80162bc <_strtod_l+0x27c>
 80161d8:	f04f 0e00 	mov.w	lr, #0
 80161dc:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80161e0:	2c09      	cmp	r4, #9
 80161e2:	d979      	bls.n	80162d8 <_strtod_l+0x298>
 80161e4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80161e8:	2400      	movs	r4, #0
 80161ea:	e094      	b.n	8016316 <_strtod_l+0x2d6>
 80161ec:	2300      	movs	r3, #0
 80161ee:	e7c7      	b.n	8016180 <_strtod_l+0x140>
 80161f0:	2d08      	cmp	r5, #8
 80161f2:	f100 0001 	add.w	r0, r0, #1
 80161f6:	bfd4      	ite	le
 80161f8:	fb02 3909 	mlale	r9, r2, r9, r3
 80161fc:	fb02 3606 	mlagt	r6, r2, r6, r3
 8016200:	3501      	adds	r5, #1
 8016202:	9011      	str	r0, [sp, #68]	@ 0x44
 8016204:	e7c3      	b.n	801618e <_strtod_l+0x14e>
 8016206:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016208:	1c5a      	adds	r2, r3, #1
 801620a:	9211      	str	r2, [sp, #68]	@ 0x44
 801620c:	785a      	ldrb	r2, [r3, #1]
 801620e:	b375      	cbz	r5, 801626e <_strtod_l+0x22e>
 8016210:	4607      	mov	r7, r0
 8016212:	462b      	mov	r3, r5
 8016214:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8016218:	2909      	cmp	r1, #9
 801621a:	d913      	bls.n	8016244 <_strtod_l+0x204>
 801621c:	2101      	movs	r1, #1
 801621e:	9106      	str	r1, [sp, #24]
 8016220:	e7c6      	b.n	80161b0 <_strtod_l+0x170>
 8016222:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016224:	1c5a      	adds	r2, r3, #1
 8016226:	9211      	str	r2, [sp, #68]	@ 0x44
 8016228:	785a      	ldrb	r2, [r3, #1]
 801622a:	3001      	adds	r0, #1
 801622c:	2a30      	cmp	r2, #48	@ 0x30
 801622e:	d0f8      	beq.n	8016222 <_strtod_l+0x1e2>
 8016230:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8016234:	2b08      	cmp	r3, #8
 8016236:	f200 8476 	bhi.w	8016b26 <_strtod_l+0xae6>
 801623a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801623c:	930a      	str	r3, [sp, #40]	@ 0x28
 801623e:	4607      	mov	r7, r0
 8016240:	2000      	movs	r0, #0
 8016242:	4603      	mov	r3, r0
 8016244:	3a30      	subs	r2, #48	@ 0x30
 8016246:	f100 0101 	add.w	r1, r0, #1
 801624a:	d023      	beq.n	8016294 <_strtod_l+0x254>
 801624c:	440f      	add	r7, r1
 801624e:	eb00 0c03 	add.w	ip, r0, r3
 8016252:	4619      	mov	r1, r3
 8016254:	240a      	movs	r4, #10
 8016256:	4561      	cmp	r1, ip
 8016258:	d10b      	bne.n	8016272 <_strtod_l+0x232>
 801625a:	1c5c      	adds	r4, r3, #1
 801625c:	4403      	add	r3, r0
 801625e:	2b08      	cmp	r3, #8
 8016260:	4404      	add	r4, r0
 8016262:	dc11      	bgt.n	8016288 <_strtod_l+0x248>
 8016264:	230a      	movs	r3, #10
 8016266:	fb03 2909 	mla	r9, r3, r9, r2
 801626a:	2100      	movs	r1, #0
 801626c:	e013      	b.n	8016296 <_strtod_l+0x256>
 801626e:	4628      	mov	r0, r5
 8016270:	e7dc      	b.n	801622c <_strtod_l+0x1ec>
 8016272:	2908      	cmp	r1, #8
 8016274:	f101 0101 	add.w	r1, r1, #1
 8016278:	dc02      	bgt.n	8016280 <_strtod_l+0x240>
 801627a:	fb04 f909 	mul.w	r9, r4, r9
 801627e:	e7ea      	b.n	8016256 <_strtod_l+0x216>
 8016280:	2910      	cmp	r1, #16
 8016282:	bfd8      	it	le
 8016284:	4366      	mulle	r6, r4
 8016286:	e7e6      	b.n	8016256 <_strtod_l+0x216>
 8016288:	2b0f      	cmp	r3, #15
 801628a:	dcee      	bgt.n	801626a <_strtod_l+0x22a>
 801628c:	230a      	movs	r3, #10
 801628e:	fb03 2606 	mla	r6, r3, r6, r2
 8016292:	e7ea      	b.n	801626a <_strtod_l+0x22a>
 8016294:	461c      	mov	r4, r3
 8016296:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016298:	1c5a      	adds	r2, r3, #1
 801629a:	9211      	str	r2, [sp, #68]	@ 0x44
 801629c:	785a      	ldrb	r2, [r3, #1]
 801629e:	4608      	mov	r0, r1
 80162a0:	4623      	mov	r3, r4
 80162a2:	e7b7      	b.n	8016214 <_strtod_l+0x1d4>
 80162a4:	2301      	movs	r3, #1
 80162a6:	2700      	movs	r7, #0
 80162a8:	9306      	str	r3, [sp, #24]
 80162aa:	e786      	b.n	80161ba <_strtod_l+0x17a>
 80162ac:	f04f 0e00 	mov.w	lr, #0
 80162b0:	f108 0202 	add.w	r2, r8, #2
 80162b4:	9211      	str	r2, [sp, #68]	@ 0x44
 80162b6:	f898 2002 	ldrb.w	r2, [r8, #2]
 80162ba:	e78f      	b.n	80161dc <_strtod_l+0x19c>
 80162bc:	f04f 0e01 	mov.w	lr, #1
 80162c0:	e7f6      	b.n	80162b0 <_strtod_l+0x270>
 80162c2:	bf00      	nop
 80162c4:	08019048 	.word	0x08019048
 80162c8:	08019024 	.word	0x08019024
 80162cc:	7ff00000 	.word	0x7ff00000
 80162d0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80162d2:	1c54      	adds	r4, r2, #1
 80162d4:	9411      	str	r4, [sp, #68]	@ 0x44
 80162d6:	7852      	ldrb	r2, [r2, #1]
 80162d8:	2a30      	cmp	r2, #48	@ 0x30
 80162da:	d0f9      	beq.n	80162d0 <_strtod_l+0x290>
 80162dc:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 80162e0:	2c08      	cmp	r4, #8
 80162e2:	d881      	bhi.n	80161e8 <_strtod_l+0x1a8>
 80162e4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 80162e8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80162ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80162ec:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80162ee:	1c51      	adds	r1, r2, #1
 80162f0:	9111      	str	r1, [sp, #68]	@ 0x44
 80162f2:	7852      	ldrb	r2, [r2, #1]
 80162f4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80162f8:	2c09      	cmp	r4, #9
 80162fa:	d938      	bls.n	801636e <_strtod_l+0x32e>
 80162fc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80162fe:	1b0c      	subs	r4, r1, r4
 8016300:	2c08      	cmp	r4, #8
 8016302:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8016306:	dc02      	bgt.n	801630e <_strtod_l+0x2ce>
 8016308:	4564      	cmp	r4, ip
 801630a:	bfa8      	it	ge
 801630c:	4664      	movge	r4, ip
 801630e:	f1be 0f00 	cmp.w	lr, #0
 8016312:	d000      	beq.n	8016316 <_strtod_l+0x2d6>
 8016314:	4264      	negs	r4, r4
 8016316:	2b00      	cmp	r3, #0
 8016318:	d14e      	bne.n	80163b8 <_strtod_l+0x378>
 801631a:	9b07      	ldr	r3, [sp, #28]
 801631c:	4318      	orrs	r0, r3
 801631e:	f47f aeca 	bne.w	80160b6 <_strtod_l+0x76>
 8016322:	9b06      	ldr	r3, [sp, #24]
 8016324:	2b00      	cmp	r3, #0
 8016326:	f47f aee2 	bne.w	80160ee <_strtod_l+0xae>
 801632a:	2a69      	cmp	r2, #105	@ 0x69
 801632c:	d027      	beq.n	801637e <_strtod_l+0x33e>
 801632e:	dc24      	bgt.n	801637a <_strtod_l+0x33a>
 8016330:	2a49      	cmp	r2, #73	@ 0x49
 8016332:	d024      	beq.n	801637e <_strtod_l+0x33e>
 8016334:	2a4e      	cmp	r2, #78	@ 0x4e
 8016336:	f47f aeda 	bne.w	80160ee <_strtod_l+0xae>
 801633a:	4997      	ldr	r1, [pc, #604]	@ (8016598 <_strtod_l+0x558>)
 801633c:	a811      	add	r0, sp, #68	@ 0x44
 801633e:	f001 f92f 	bl	80175a0 <__match>
 8016342:	2800      	cmp	r0, #0
 8016344:	f43f aed3 	beq.w	80160ee <_strtod_l+0xae>
 8016348:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801634a:	781b      	ldrb	r3, [r3, #0]
 801634c:	2b28      	cmp	r3, #40	@ 0x28
 801634e:	d12d      	bne.n	80163ac <_strtod_l+0x36c>
 8016350:	4992      	ldr	r1, [pc, #584]	@ (801659c <_strtod_l+0x55c>)
 8016352:	aa14      	add	r2, sp, #80	@ 0x50
 8016354:	a811      	add	r0, sp, #68	@ 0x44
 8016356:	f001 f937 	bl	80175c8 <__hexnan>
 801635a:	2805      	cmp	r0, #5
 801635c:	d126      	bne.n	80163ac <_strtod_l+0x36c>
 801635e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016360:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8016364:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8016368:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801636c:	e6a3      	b.n	80160b6 <_strtod_l+0x76>
 801636e:	240a      	movs	r4, #10
 8016370:	fb04 2c0c 	mla	ip, r4, ip, r2
 8016374:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8016378:	e7b8      	b.n	80162ec <_strtod_l+0x2ac>
 801637a:	2a6e      	cmp	r2, #110	@ 0x6e
 801637c:	e7db      	b.n	8016336 <_strtod_l+0x2f6>
 801637e:	4988      	ldr	r1, [pc, #544]	@ (80165a0 <_strtod_l+0x560>)
 8016380:	a811      	add	r0, sp, #68	@ 0x44
 8016382:	f001 f90d 	bl	80175a0 <__match>
 8016386:	2800      	cmp	r0, #0
 8016388:	f43f aeb1 	beq.w	80160ee <_strtod_l+0xae>
 801638c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801638e:	4985      	ldr	r1, [pc, #532]	@ (80165a4 <_strtod_l+0x564>)
 8016390:	3b01      	subs	r3, #1
 8016392:	a811      	add	r0, sp, #68	@ 0x44
 8016394:	9311      	str	r3, [sp, #68]	@ 0x44
 8016396:	f001 f903 	bl	80175a0 <__match>
 801639a:	b910      	cbnz	r0, 80163a2 <_strtod_l+0x362>
 801639c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801639e:	3301      	adds	r3, #1
 80163a0:	9311      	str	r3, [sp, #68]	@ 0x44
 80163a2:	f8df b214 	ldr.w	fp, [pc, #532]	@ 80165b8 <_strtod_l+0x578>
 80163a6:	f04f 0a00 	mov.w	sl, #0
 80163aa:	e684      	b.n	80160b6 <_strtod_l+0x76>
 80163ac:	487e      	ldr	r0, [pc, #504]	@ (80165a8 <_strtod_l+0x568>)
 80163ae:	f000 fe1b 	bl	8016fe8 <nan>
 80163b2:	ec5b ab10 	vmov	sl, fp, d0
 80163b6:	e67e      	b.n	80160b6 <_strtod_l+0x76>
 80163b8:	ee07 9a90 	vmov	s15, r9
 80163bc:	1be2      	subs	r2, r4, r7
 80163be:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80163c2:	2d00      	cmp	r5, #0
 80163c4:	bf08      	it	eq
 80163c6:	461d      	moveq	r5, r3
 80163c8:	2b10      	cmp	r3, #16
 80163ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80163cc:	461a      	mov	r2, r3
 80163ce:	bfa8      	it	ge
 80163d0:	2210      	movge	r2, #16
 80163d2:	2b09      	cmp	r3, #9
 80163d4:	ec5b ab17 	vmov	sl, fp, d7
 80163d8:	dc15      	bgt.n	8016406 <_strtod_l+0x3c6>
 80163da:	1be1      	subs	r1, r4, r7
 80163dc:	2900      	cmp	r1, #0
 80163de:	f43f ae6a 	beq.w	80160b6 <_strtod_l+0x76>
 80163e2:	eba4 0107 	sub.w	r1, r4, r7
 80163e6:	dd72      	ble.n	80164ce <_strtod_l+0x48e>
 80163e8:	2916      	cmp	r1, #22
 80163ea:	dc59      	bgt.n	80164a0 <_strtod_l+0x460>
 80163ec:	4b6f      	ldr	r3, [pc, #444]	@ (80165ac <_strtod_l+0x56c>)
 80163ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80163f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80163f4:	ed93 7b00 	vldr	d7, [r3]
 80163f8:	ec4b ab16 	vmov	d6, sl, fp
 80163fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016400:	ec5b ab17 	vmov	sl, fp, d7
 8016404:	e657      	b.n	80160b6 <_strtod_l+0x76>
 8016406:	4969      	ldr	r1, [pc, #420]	@ (80165ac <_strtod_l+0x56c>)
 8016408:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801640c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8016410:	ee06 6a90 	vmov	s13, r6
 8016414:	2b0f      	cmp	r3, #15
 8016416:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801641a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801641e:	ec5b ab16 	vmov	sl, fp, d6
 8016422:	ddda      	ble.n	80163da <_strtod_l+0x39a>
 8016424:	1a9a      	subs	r2, r3, r2
 8016426:	1be1      	subs	r1, r4, r7
 8016428:	440a      	add	r2, r1
 801642a:	2a00      	cmp	r2, #0
 801642c:	f340 8094 	ble.w	8016558 <_strtod_l+0x518>
 8016430:	f012 000f 	ands.w	r0, r2, #15
 8016434:	d00a      	beq.n	801644c <_strtod_l+0x40c>
 8016436:	495d      	ldr	r1, [pc, #372]	@ (80165ac <_strtod_l+0x56c>)
 8016438:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801643c:	ed91 7b00 	vldr	d7, [r1]
 8016440:	ec4b ab16 	vmov	d6, sl, fp
 8016444:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016448:	ec5b ab17 	vmov	sl, fp, d7
 801644c:	f032 020f 	bics.w	r2, r2, #15
 8016450:	d073      	beq.n	801653a <_strtod_l+0x4fa>
 8016452:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8016456:	dd47      	ble.n	80164e8 <_strtod_l+0x4a8>
 8016458:	2400      	movs	r4, #0
 801645a:	4625      	mov	r5, r4
 801645c:	9407      	str	r4, [sp, #28]
 801645e:	4626      	mov	r6, r4
 8016460:	9a05      	ldr	r2, [sp, #20]
 8016462:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80165b8 <_strtod_l+0x578>
 8016466:	2322      	movs	r3, #34	@ 0x22
 8016468:	6013      	str	r3, [r2, #0]
 801646a:	f04f 0a00 	mov.w	sl, #0
 801646e:	9b07      	ldr	r3, [sp, #28]
 8016470:	2b00      	cmp	r3, #0
 8016472:	f43f ae20 	beq.w	80160b6 <_strtod_l+0x76>
 8016476:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016478:	9805      	ldr	r0, [sp, #20]
 801647a:	f001 fa41 	bl	8017900 <_Bfree>
 801647e:	9805      	ldr	r0, [sp, #20]
 8016480:	4631      	mov	r1, r6
 8016482:	f001 fa3d 	bl	8017900 <_Bfree>
 8016486:	9805      	ldr	r0, [sp, #20]
 8016488:	4629      	mov	r1, r5
 801648a:	f001 fa39 	bl	8017900 <_Bfree>
 801648e:	9907      	ldr	r1, [sp, #28]
 8016490:	9805      	ldr	r0, [sp, #20]
 8016492:	f001 fa35 	bl	8017900 <_Bfree>
 8016496:	9805      	ldr	r0, [sp, #20]
 8016498:	4621      	mov	r1, r4
 801649a:	f001 fa31 	bl	8017900 <_Bfree>
 801649e:	e60a      	b.n	80160b6 <_strtod_l+0x76>
 80164a0:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 80164a4:	1be0      	subs	r0, r4, r7
 80164a6:	4281      	cmp	r1, r0
 80164a8:	dbbc      	blt.n	8016424 <_strtod_l+0x3e4>
 80164aa:	4a40      	ldr	r2, [pc, #256]	@ (80165ac <_strtod_l+0x56c>)
 80164ac:	f1c3 030f 	rsb	r3, r3, #15
 80164b0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80164b4:	ed91 7b00 	vldr	d7, [r1]
 80164b8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80164ba:	ec4b ab16 	vmov	d6, sl, fp
 80164be:	1acb      	subs	r3, r1, r3
 80164c0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80164c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80164c8:	ed92 6b00 	vldr	d6, [r2]
 80164cc:	e796      	b.n	80163fc <_strtod_l+0x3bc>
 80164ce:	3116      	adds	r1, #22
 80164d0:	dba8      	blt.n	8016424 <_strtod_l+0x3e4>
 80164d2:	4b36      	ldr	r3, [pc, #216]	@ (80165ac <_strtod_l+0x56c>)
 80164d4:	1b3c      	subs	r4, r7, r4
 80164d6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80164da:	ed94 7b00 	vldr	d7, [r4]
 80164de:	ec4b ab16 	vmov	d6, sl, fp
 80164e2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80164e6:	e78b      	b.n	8016400 <_strtod_l+0x3c0>
 80164e8:	2000      	movs	r0, #0
 80164ea:	ec4b ab17 	vmov	d7, sl, fp
 80164ee:	4e30      	ldr	r6, [pc, #192]	@ (80165b0 <_strtod_l+0x570>)
 80164f0:	1112      	asrs	r2, r2, #4
 80164f2:	4601      	mov	r1, r0
 80164f4:	2a01      	cmp	r2, #1
 80164f6:	dc23      	bgt.n	8016540 <_strtod_l+0x500>
 80164f8:	b108      	cbz	r0, 80164fe <_strtod_l+0x4be>
 80164fa:	ec5b ab17 	vmov	sl, fp, d7
 80164fe:	4a2c      	ldr	r2, [pc, #176]	@ (80165b0 <_strtod_l+0x570>)
 8016500:	482c      	ldr	r0, [pc, #176]	@ (80165b4 <_strtod_l+0x574>)
 8016502:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8016506:	ed92 7b00 	vldr	d7, [r2]
 801650a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801650e:	ec4b ab16 	vmov	d6, sl, fp
 8016512:	4a29      	ldr	r2, [pc, #164]	@ (80165b8 <_strtod_l+0x578>)
 8016514:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016518:	ee17 1a90 	vmov	r1, s15
 801651c:	400a      	ands	r2, r1
 801651e:	4282      	cmp	r2, r0
 8016520:	ec5b ab17 	vmov	sl, fp, d7
 8016524:	d898      	bhi.n	8016458 <_strtod_l+0x418>
 8016526:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 801652a:	4282      	cmp	r2, r0
 801652c:	bf86      	itte	hi
 801652e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80165bc <_strtod_l+0x57c>
 8016532:	f04f 3aff 	movhi.w	sl, #4294967295
 8016536:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 801653a:	2200      	movs	r2, #0
 801653c:	9206      	str	r2, [sp, #24]
 801653e:	e076      	b.n	801662e <_strtod_l+0x5ee>
 8016540:	f012 0f01 	tst.w	r2, #1
 8016544:	d004      	beq.n	8016550 <_strtod_l+0x510>
 8016546:	ed96 6b00 	vldr	d6, [r6]
 801654a:	2001      	movs	r0, #1
 801654c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016550:	3101      	adds	r1, #1
 8016552:	1052      	asrs	r2, r2, #1
 8016554:	3608      	adds	r6, #8
 8016556:	e7cd      	b.n	80164f4 <_strtod_l+0x4b4>
 8016558:	d0ef      	beq.n	801653a <_strtod_l+0x4fa>
 801655a:	4252      	negs	r2, r2
 801655c:	f012 000f 	ands.w	r0, r2, #15
 8016560:	d00a      	beq.n	8016578 <_strtod_l+0x538>
 8016562:	4912      	ldr	r1, [pc, #72]	@ (80165ac <_strtod_l+0x56c>)
 8016564:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8016568:	ed91 7b00 	vldr	d7, [r1]
 801656c:	ec4b ab16 	vmov	d6, sl, fp
 8016570:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8016574:	ec5b ab17 	vmov	sl, fp, d7
 8016578:	1112      	asrs	r2, r2, #4
 801657a:	d0de      	beq.n	801653a <_strtod_l+0x4fa>
 801657c:	2a1f      	cmp	r2, #31
 801657e:	dd1f      	ble.n	80165c0 <_strtod_l+0x580>
 8016580:	2400      	movs	r4, #0
 8016582:	4625      	mov	r5, r4
 8016584:	9407      	str	r4, [sp, #28]
 8016586:	4626      	mov	r6, r4
 8016588:	9a05      	ldr	r2, [sp, #20]
 801658a:	2322      	movs	r3, #34	@ 0x22
 801658c:	f04f 0a00 	mov.w	sl, #0
 8016590:	f04f 0b00 	mov.w	fp, #0
 8016594:	6013      	str	r3, [r2, #0]
 8016596:	e76a      	b.n	801646e <_strtod_l+0x42e>
 8016598:	0801902f 	.word	0x0801902f
 801659c:	08019034 	.word	0x08019034
 80165a0:	08019026 	.word	0x08019026
 80165a4:	08019029 	.word	0x08019029
 80165a8:	080193ab 	.word	0x080193ab
 80165ac:	080192a8 	.word	0x080192a8
 80165b0:	08019280 	.word	0x08019280
 80165b4:	7ca00000 	.word	0x7ca00000
 80165b8:	7ff00000 	.word	0x7ff00000
 80165bc:	7fefffff 	.word	0x7fefffff
 80165c0:	f012 0110 	ands.w	r1, r2, #16
 80165c4:	bf18      	it	ne
 80165c6:	216a      	movne	r1, #106	@ 0x6a
 80165c8:	9106      	str	r1, [sp, #24]
 80165ca:	ec4b ab17 	vmov	d7, sl, fp
 80165ce:	49b0      	ldr	r1, [pc, #704]	@ (8016890 <_strtod_l+0x850>)
 80165d0:	2000      	movs	r0, #0
 80165d2:	07d6      	lsls	r6, r2, #31
 80165d4:	d504      	bpl.n	80165e0 <_strtod_l+0x5a0>
 80165d6:	ed91 6b00 	vldr	d6, [r1]
 80165da:	2001      	movs	r0, #1
 80165dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80165e0:	1052      	asrs	r2, r2, #1
 80165e2:	f101 0108 	add.w	r1, r1, #8
 80165e6:	d1f4      	bne.n	80165d2 <_strtod_l+0x592>
 80165e8:	b108      	cbz	r0, 80165ee <_strtod_l+0x5ae>
 80165ea:	ec5b ab17 	vmov	sl, fp, d7
 80165ee:	9a06      	ldr	r2, [sp, #24]
 80165f0:	b1b2      	cbz	r2, 8016620 <_strtod_l+0x5e0>
 80165f2:	f3cb 510a 	ubfx	r1, fp, #20, #11
 80165f6:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 80165fa:	2a00      	cmp	r2, #0
 80165fc:	4658      	mov	r0, fp
 80165fe:	dd0f      	ble.n	8016620 <_strtod_l+0x5e0>
 8016600:	2a1f      	cmp	r2, #31
 8016602:	dd55      	ble.n	80166b0 <_strtod_l+0x670>
 8016604:	2a34      	cmp	r2, #52	@ 0x34
 8016606:	bfde      	ittt	le
 8016608:	f04f 32ff 	movle.w	r2, #4294967295
 801660c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8016610:	408a      	lslle	r2, r1
 8016612:	f04f 0a00 	mov.w	sl, #0
 8016616:	bfcc      	ite	gt
 8016618:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801661c:	ea02 0b00 	andle.w	fp, r2, r0
 8016620:	ec4b ab17 	vmov	d7, sl, fp
 8016624:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801662c:	d0a8      	beq.n	8016580 <_strtod_l+0x540>
 801662e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016630:	9805      	ldr	r0, [sp, #20]
 8016632:	f8cd 9000 	str.w	r9, [sp]
 8016636:	462a      	mov	r2, r5
 8016638:	f001 f9ca 	bl	80179d0 <__s2b>
 801663c:	9007      	str	r0, [sp, #28]
 801663e:	2800      	cmp	r0, #0
 8016640:	f43f af0a 	beq.w	8016458 <_strtod_l+0x418>
 8016644:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016646:	1b3f      	subs	r7, r7, r4
 8016648:	2b00      	cmp	r3, #0
 801664a:	bfb4      	ite	lt
 801664c:	463b      	movlt	r3, r7
 801664e:	2300      	movge	r3, #0
 8016650:	930a      	str	r3, [sp, #40]	@ 0x28
 8016652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016654:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8016880 <_strtod_l+0x840>
 8016658:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801665c:	2400      	movs	r4, #0
 801665e:	930d      	str	r3, [sp, #52]	@ 0x34
 8016660:	4625      	mov	r5, r4
 8016662:	9b07      	ldr	r3, [sp, #28]
 8016664:	9805      	ldr	r0, [sp, #20]
 8016666:	6859      	ldr	r1, [r3, #4]
 8016668:	f001 f90a 	bl	8017880 <_Balloc>
 801666c:	4606      	mov	r6, r0
 801666e:	2800      	cmp	r0, #0
 8016670:	f43f aef6 	beq.w	8016460 <_strtod_l+0x420>
 8016674:	9b07      	ldr	r3, [sp, #28]
 8016676:	691a      	ldr	r2, [r3, #16]
 8016678:	ec4b ab19 	vmov	d9, sl, fp
 801667c:	3202      	adds	r2, #2
 801667e:	f103 010c 	add.w	r1, r3, #12
 8016682:	0092      	lsls	r2, r2, #2
 8016684:	300c      	adds	r0, #12
 8016686:	f000 fca0 	bl	8016fca <memcpy>
 801668a:	eeb0 0b49 	vmov.f64	d0, d9
 801668e:	9805      	ldr	r0, [sp, #20]
 8016690:	aa14      	add	r2, sp, #80	@ 0x50
 8016692:	a913      	add	r1, sp, #76	@ 0x4c
 8016694:	f001 fcd8 	bl	8018048 <__d2b>
 8016698:	9012      	str	r0, [sp, #72]	@ 0x48
 801669a:	2800      	cmp	r0, #0
 801669c:	f43f aee0 	beq.w	8016460 <_strtod_l+0x420>
 80166a0:	9805      	ldr	r0, [sp, #20]
 80166a2:	2101      	movs	r1, #1
 80166a4:	f001 fa2a 	bl	8017afc <__i2b>
 80166a8:	4605      	mov	r5, r0
 80166aa:	b940      	cbnz	r0, 80166be <_strtod_l+0x67e>
 80166ac:	2500      	movs	r5, #0
 80166ae:	e6d7      	b.n	8016460 <_strtod_l+0x420>
 80166b0:	f04f 31ff 	mov.w	r1, #4294967295
 80166b4:	fa01 f202 	lsl.w	r2, r1, r2
 80166b8:	ea02 0a0a 	and.w	sl, r2, sl
 80166bc:	e7b0      	b.n	8016620 <_strtod_l+0x5e0>
 80166be:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 80166c0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80166c2:	2f00      	cmp	r7, #0
 80166c4:	bfab      	itete	ge
 80166c6:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 80166c8:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 80166ca:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 80166ce:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 80166d2:	bfac      	ite	ge
 80166d4:	eb07 0903 	addge.w	r9, r7, r3
 80166d8:	eba3 0807 	sublt.w	r8, r3, r7
 80166dc:	9b06      	ldr	r3, [sp, #24]
 80166de:	1aff      	subs	r7, r7, r3
 80166e0:	4417      	add	r7, r2
 80166e2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 80166e6:	4a6b      	ldr	r2, [pc, #428]	@ (8016894 <_strtod_l+0x854>)
 80166e8:	3f01      	subs	r7, #1
 80166ea:	4297      	cmp	r7, r2
 80166ec:	da51      	bge.n	8016792 <_strtod_l+0x752>
 80166ee:	1bd1      	subs	r1, r2, r7
 80166f0:	291f      	cmp	r1, #31
 80166f2:	eba3 0301 	sub.w	r3, r3, r1
 80166f6:	f04f 0201 	mov.w	r2, #1
 80166fa:	dc3e      	bgt.n	801677a <_strtod_l+0x73a>
 80166fc:	408a      	lsls	r2, r1
 80166fe:	920c      	str	r2, [sp, #48]	@ 0x30
 8016700:	2200      	movs	r2, #0
 8016702:	920b      	str	r2, [sp, #44]	@ 0x2c
 8016704:	eb09 0703 	add.w	r7, r9, r3
 8016708:	4498      	add	r8, r3
 801670a:	9b06      	ldr	r3, [sp, #24]
 801670c:	45b9      	cmp	r9, r7
 801670e:	4498      	add	r8, r3
 8016710:	464b      	mov	r3, r9
 8016712:	bfa8      	it	ge
 8016714:	463b      	movge	r3, r7
 8016716:	4543      	cmp	r3, r8
 8016718:	bfa8      	it	ge
 801671a:	4643      	movge	r3, r8
 801671c:	2b00      	cmp	r3, #0
 801671e:	bfc2      	ittt	gt
 8016720:	1aff      	subgt	r7, r7, r3
 8016722:	eba8 0803 	subgt.w	r8, r8, r3
 8016726:	eba9 0903 	subgt.w	r9, r9, r3
 801672a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801672c:	2b00      	cmp	r3, #0
 801672e:	dd16      	ble.n	801675e <_strtod_l+0x71e>
 8016730:	4629      	mov	r1, r5
 8016732:	9805      	ldr	r0, [sp, #20]
 8016734:	461a      	mov	r2, r3
 8016736:	f001 faa1 	bl	8017c7c <__pow5mult>
 801673a:	4605      	mov	r5, r0
 801673c:	2800      	cmp	r0, #0
 801673e:	d0b5      	beq.n	80166ac <_strtod_l+0x66c>
 8016740:	4601      	mov	r1, r0
 8016742:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016744:	9805      	ldr	r0, [sp, #20]
 8016746:	f001 f9ef 	bl	8017b28 <__multiply>
 801674a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801674c:	2800      	cmp	r0, #0
 801674e:	f43f ae87 	beq.w	8016460 <_strtod_l+0x420>
 8016752:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016754:	9805      	ldr	r0, [sp, #20]
 8016756:	f001 f8d3 	bl	8017900 <_Bfree>
 801675a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801675c:	9312      	str	r3, [sp, #72]	@ 0x48
 801675e:	2f00      	cmp	r7, #0
 8016760:	dc1b      	bgt.n	801679a <_strtod_l+0x75a>
 8016762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016764:	2b00      	cmp	r3, #0
 8016766:	dd21      	ble.n	80167ac <_strtod_l+0x76c>
 8016768:	4631      	mov	r1, r6
 801676a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801676c:	9805      	ldr	r0, [sp, #20]
 801676e:	f001 fa85 	bl	8017c7c <__pow5mult>
 8016772:	4606      	mov	r6, r0
 8016774:	b9d0      	cbnz	r0, 80167ac <_strtod_l+0x76c>
 8016776:	2600      	movs	r6, #0
 8016778:	e672      	b.n	8016460 <_strtod_l+0x420>
 801677a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 801677e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8016782:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8016786:	37e2      	adds	r7, #226	@ 0xe2
 8016788:	fa02 f107 	lsl.w	r1, r2, r7
 801678c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801678e:	920c      	str	r2, [sp, #48]	@ 0x30
 8016790:	e7b8      	b.n	8016704 <_strtod_l+0x6c4>
 8016792:	2200      	movs	r2, #0
 8016794:	920b      	str	r2, [sp, #44]	@ 0x2c
 8016796:	2201      	movs	r2, #1
 8016798:	e7f9      	b.n	801678e <_strtod_l+0x74e>
 801679a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801679c:	9805      	ldr	r0, [sp, #20]
 801679e:	463a      	mov	r2, r7
 80167a0:	f001 fac6 	bl	8017d30 <__lshift>
 80167a4:	9012      	str	r0, [sp, #72]	@ 0x48
 80167a6:	2800      	cmp	r0, #0
 80167a8:	d1db      	bne.n	8016762 <_strtod_l+0x722>
 80167aa:	e659      	b.n	8016460 <_strtod_l+0x420>
 80167ac:	f1b8 0f00 	cmp.w	r8, #0
 80167b0:	dd07      	ble.n	80167c2 <_strtod_l+0x782>
 80167b2:	4631      	mov	r1, r6
 80167b4:	9805      	ldr	r0, [sp, #20]
 80167b6:	4642      	mov	r2, r8
 80167b8:	f001 faba 	bl	8017d30 <__lshift>
 80167bc:	4606      	mov	r6, r0
 80167be:	2800      	cmp	r0, #0
 80167c0:	d0d9      	beq.n	8016776 <_strtod_l+0x736>
 80167c2:	f1b9 0f00 	cmp.w	r9, #0
 80167c6:	dd08      	ble.n	80167da <_strtod_l+0x79a>
 80167c8:	4629      	mov	r1, r5
 80167ca:	9805      	ldr	r0, [sp, #20]
 80167cc:	464a      	mov	r2, r9
 80167ce:	f001 faaf 	bl	8017d30 <__lshift>
 80167d2:	4605      	mov	r5, r0
 80167d4:	2800      	cmp	r0, #0
 80167d6:	f43f ae43 	beq.w	8016460 <_strtod_l+0x420>
 80167da:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80167dc:	9805      	ldr	r0, [sp, #20]
 80167de:	4632      	mov	r2, r6
 80167e0:	f001 fb2e 	bl	8017e40 <__mdiff>
 80167e4:	4604      	mov	r4, r0
 80167e6:	2800      	cmp	r0, #0
 80167e8:	f43f ae3a 	beq.w	8016460 <_strtod_l+0x420>
 80167ec:	2300      	movs	r3, #0
 80167ee:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80167f2:	60c3      	str	r3, [r0, #12]
 80167f4:	4629      	mov	r1, r5
 80167f6:	f001 fb07 	bl	8017e08 <__mcmp>
 80167fa:	2800      	cmp	r0, #0
 80167fc:	da4e      	bge.n	801689c <_strtod_l+0x85c>
 80167fe:	ea58 080a 	orrs.w	r8, r8, sl
 8016802:	d174      	bne.n	80168ee <_strtod_l+0x8ae>
 8016804:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016808:	2b00      	cmp	r3, #0
 801680a:	d170      	bne.n	80168ee <_strtod_l+0x8ae>
 801680c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016810:	0d1b      	lsrs	r3, r3, #20
 8016812:	051b      	lsls	r3, r3, #20
 8016814:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016818:	d969      	bls.n	80168ee <_strtod_l+0x8ae>
 801681a:	6963      	ldr	r3, [r4, #20]
 801681c:	b913      	cbnz	r3, 8016824 <_strtod_l+0x7e4>
 801681e:	6923      	ldr	r3, [r4, #16]
 8016820:	2b01      	cmp	r3, #1
 8016822:	dd64      	ble.n	80168ee <_strtod_l+0x8ae>
 8016824:	4621      	mov	r1, r4
 8016826:	2201      	movs	r2, #1
 8016828:	9805      	ldr	r0, [sp, #20]
 801682a:	f001 fa81 	bl	8017d30 <__lshift>
 801682e:	4629      	mov	r1, r5
 8016830:	4604      	mov	r4, r0
 8016832:	f001 fae9 	bl	8017e08 <__mcmp>
 8016836:	2800      	cmp	r0, #0
 8016838:	dd59      	ble.n	80168ee <_strtod_l+0x8ae>
 801683a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801683e:	9a06      	ldr	r2, [sp, #24]
 8016840:	0d1b      	lsrs	r3, r3, #20
 8016842:	051b      	lsls	r3, r3, #20
 8016844:	2a00      	cmp	r2, #0
 8016846:	d070      	beq.n	801692a <_strtod_l+0x8ea>
 8016848:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801684c:	d86d      	bhi.n	801692a <_strtod_l+0x8ea>
 801684e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8016852:	f67f ae99 	bls.w	8016588 <_strtod_l+0x548>
 8016856:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8016888 <_strtod_l+0x848>
 801685a:	ec4b ab16 	vmov	d6, sl, fp
 801685e:	4b0e      	ldr	r3, [pc, #56]	@ (8016898 <_strtod_l+0x858>)
 8016860:	ee26 7b07 	vmul.f64	d7, d6, d7
 8016864:	ee17 2a90 	vmov	r2, s15
 8016868:	4013      	ands	r3, r2
 801686a:	ec5b ab17 	vmov	sl, fp, d7
 801686e:	2b00      	cmp	r3, #0
 8016870:	f47f ae01 	bne.w	8016476 <_strtod_l+0x436>
 8016874:	9a05      	ldr	r2, [sp, #20]
 8016876:	2322      	movs	r3, #34	@ 0x22
 8016878:	6013      	str	r3, [r2, #0]
 801687a:	e5fc      	b.n	8016476 <_strtod_l+0x436>
 801687c:	f3af 8000 	nop.w
 8016880:	ffc00000 	.word	0xffc00000
 8016884:	41dfffff 	.word	0x41dfffff
 8016888:	00000000 	.word	0x00000000
 801688c:	39500000 	.word	0x39500000
 8016890:	08019060 	.word	0x08019060
 8016894:	fffffc02 	.word	0xfffffc02
 8016898:	7ff00000 	.word	0x7ff00000
 801689c:	46d9      	mov	r9, fp
 801689e:	d15d      	bne.n	801695c <_strtod_l+0x91c>
 80168a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80168a4:	f1b8 0f00 	cmp.w	r8, #0
 80168a8:	d02a      	beq.n	8016900 <_strtod_l+0x8c0>
 80168aa:	4aab      	ldr	r2, [pc, #684]	@ (8016b58 <_strtod_l+0xb18>)
 80168ac:	4293      	cmp	r3, r2
 80168ae:	d12a      	bne.n	8016906 <_strtod_l+0x8c6>
 80168b0:	9b06      	ldr	r3, [sp, #24]
 80168b2:	4652      	mov	r2, sl
 80168b4:	b1fb      	cbz	r3, 80168f6 <_strtod_l+0x8b6>
 80168b6:	4ba9      	ldr	r3, [pc, #676]	@ (8016b5c <_strtod_l+0xb1c>)
 80168b8:	ea0b 0303 	and.w	r3, fp, r3
 80168bc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80168c0:	f04f 31ff 	mov.w	r1, #4294967295
 80168c4:	d81a      	bhi.n	80168fc <_strtod_l+0x8bc>
 80168c6:	0d1b      	lsrs	r3, r3, #20
 80168c8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80168cc:	fa01 f303 	lsl.w	r3, r1, r3
 80168d0:	429a      	cmp	r2, r3
 80168d2:	d118      	bne.n	8016906 <_strtod_l+0x8c6>
 80168d4:	4ba2      	ldr	r3, [pc, #648]	@ (8016b60 <_strtod_l+0xb20>)
 80168d6:	4599      	cmp	r9, r3
 80168d8:	d102      	bne.n	80168e0 <_strtod_l+0x8a0>
 80168da:	3201      	adds	r2, #1
 80168dc:	f43f adc0 	beq.w	8016460 <_strtod_l+0x420>
 80168e0:	4b9e      	ldr	r3, [pc, #632]	@ (8016b5c <_strtod_l+0xb1c>)
 80168e2:	ea09 0303 	and.w	r3, r9, r3
 80168e6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 80168ea:	f04f 0a00 	mov.w	sl, #0
 80168ee:	9b06      	ldr	r3, [sp, #24]
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d1b0      	bne.n	8016856 <_strtod_l+0x816>
 80168f4:	e5bf      	b.n	8016476 <_strtod_l+0x436>
 80168f6:	f04f 33ff 	mov.w	r3, #4294967295
 80168fa:	e7e9      	b.n	80168d0 <_strtod_l+0x890>
 80168fc:	460b      	mov	r3, r1
 80168fe:	e7e7      	b.n	80168d0 <_strtod_l+0x890>
 8016900:	ea53 030a 	orrs.w	r3, r3, sl
 8016904:	d099      	beq.n	801683a <_strtod_l+0x7fa>
 8016906:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016908:	b1c3      	cbz	r3, 801693c <_strtod_l+0x8fc>
 801690a:	ea13 0f09 	tst.w	r3, r9
 801690e:	d0ee      	beq.n	80168ee <_strtod_l+0x8ae>
 8016910:	9a06      	ldr	r2, [sp, #24]
 8016912:	4650      	mov	r0, sl
 8016914:	4659      	mov	r1, fp
 8016916:	f1b8 0f00 	cmp.w	r8, #0
 801691a:	d013      	beq.n	8016944 <_strtod_l+0x904>
 801691c:	f7ff fb73 	bl	8016006 <sulp>
 8016920:	ee39 7b00 	vadd.f64	d7, d9, d0
 8016924:	ec5b ab17 	vmov	sl, fp, d7
 8016928:	e7e1      	b.n	80168ee <_strtod_l+0x8ae>
 801692a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801692e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016932:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016936:	f04f 3aff 	mov.w	sl, #4294967295
 801693a:	e7d8      	b.n	80168ee <_strtod_l+0x8ae>
 801693c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801693e:	ea13 0f0a 	tst.w	r3, sl
 8016942:	e7e4      	b.n	801690e <_strtod_l+0x8ce>
 8016944:	f7ff fb5f 	bl	8016006 <sulp>
 8016948:	ee39 0b40 	vsub.f64	d0, d9, d0
 801694c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8016950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016954:	ec5b ab10 	vmov	sl, fp, d0
 8016958:	d1c9      	bne.n	80168ee <_strtod_l+0x8ae>
 801695a:	e615      	b.n	8016588 <_strtod_l+0x548>
 801695c:	4629      	mov	r1, r5
 801695e:	4620      	mov	r0, r4
 8016960:	f001 fbca 	bl	80180f8 <__ratio>
 8016964:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8016968:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801696c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016970:	d85d      	bhi.n	8016a2e <_strtod_l+0x9ee>
 8016972:	f1b8 0f00 	cmp.w	r8, #0
 8016976:	d164      	bne.n	8016a42 <_strtod_l+0xa02>
 8016978:	f1ba 0f00 	cmp.w	sl, #0
 801697c:	d14b      	bne.n	8016a16 <_strtod_l+0x9d6>
 801697e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016982:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8016986:	2b00      	cmp	r3, #0
 8016988:	d160      	bne.n	8016a4c <_strtod_l+0xa0c>
 801698a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 801698e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8016992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016996:	d401      	bmi.n	801699c <_strtod_l+0x95c>
 8016998:	ee20 8b08 	vmul.f64	d8, d0, d8
 801699c:	eeb1 ab48 	vneg.f64	d10, d8
 80169a0:	486e      	ldr	r0, [pc, #440]	@ (8016b5c <_strtod_l+0xb1c>)
 80169a2:	4970      	ldr	r1, [pc, #448]	@ (8016b64 <_strtod_l+0xb24>)
 80169a4:	ea09 0700 	and.w	r7, r9, r0
 80169a8:	428f      	cmp	r7, r1
 80169aa:	ec53 2b1a 	vmov	r2, r3, d10
 80169ae:	d17d      	bne.n	8016aac <_strtod_l+0xa6c>
 80169b0:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 80169b4:	ec4b ab1c 	vmov	d12, sl, fp
 80169b8:	eeb0 0b4c 	vmov.f64	d0, d12
 80169bc:	f001 fad4 	bl	8017f68 <__ulp>
 80169c0:	4866      	ldr	r0, [pc, #408]	@ (8016b5c <_strtod_l+0xb1c>)
 80169c2:	eea0 cb0a 	vfma.f64	d12, d0, d10
 80169c6:	ee1c 3a90 	vmov	r3, s25
 80169ca:	4a67      	ldr	r2, [pc, #412]	@ (8016b68 <_strtod_l+0xb28>)
 80169cc:	ea03 0100 	and.w	r1, r3, r0
 80169d0:	4291      	cmp	r1, r2
 80169d2:	ec5b ab1c 	vmov	sl, fp, d12
 80169d6:	d93c      	bls.n	8016a52 <_strtod_l+0xa12>
 80169d8:	ee19 2a90 	vmov	r2, s19
 80169dc:	4b60      	ldr	r3, [pc, #384]	@ (8016b60 <_strtod_l+0xb20>)
 80169de:	429a      	cmp	r2, r3
 80169e0:	d104      	bne.n	80169ec <_strtod_l+0x9ac>
 80169e2:	ee19 3a10 	vmov	r3, s18
 80169e6:	3301      	adds	r3, #1
 80169e8:	f43f ad3a 	beq.w	8016460 <_strtod_l+0x420>
 80169ec:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8016b60 <_strtod_l+0xb20>
 80169f0:	f04f 3aff 	mov.w	sl, #4294967295
 80169f4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80169f6:	9805      	ldr	r0, [sp, #20]
 80169f8:	f000 ff82 	bl	8017900 <_Bfree>
 80169fc:	9805      	ldr	r0, [sp, #20]
 80169fe:	4631      	mov	r1, r6
 8016a00:	f000 ff7e 	bl	8017900 <_Bfree>
 8016a04:	9805      	ldr	r0, [sp, #20]
 8016a06:	4629      	mov	r1, r5
 8016a08:	f000 ff7a 	bl	8017900 <_Bfree>
 8016a0c:	9805      	ldr	r0, [sp, #20]
 8016a0e:	4621      	mov	r1, r4
 8016a10:	f000 ff76 	bl	8017900 <_Bfree>
 8016a14:	e625      	b.n	8016662 <_strtod_l+0x622>
 8016a16:	f1ba 0f01 	cmp.w	sl, #1
 8016a1a:	d103      	bne.n	8016a24 <_strtod_l+0x9e4>
 8016a1c:	f1bb 0f00 	cmp.w	fp, #0
 8016a20:	f43f adb2 	beq.w	8016588 <_strtod_l+0x548>
 8016a24:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8016a28:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8016a2c:	e7b8      	b.n	80169a0 <_strtod_l+0x960>
 8016a2e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8016a32:	ee20 8b08 	vmul.f64	d8, d0, d8
 8016a36:	f1b8 0f00 	cmp.w	r8, #0
 8016a3a:	d0af      	beq.n	801699c <_strtod_l+0x95c>
 8016a3c:	eeb0 ab48 	vmov.f64	d10, d8
 8016a40:	e7ae      	b.n	80169a0 <_strtod_l+0x960>
 8016a42:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8016a46:	eeb0 8b4a 	vmov.f64	d8, d10
 8016a4a:	e7a9      	b.n	80169a0 <_strtod_l+0x960>
 8016a4c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8016a50:	e7a6      	b.n	80169a0 <_strtod_l+0x960>
 8016a52:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8016a56:	9b06      	ldr	r3, [sp, #24]
 8016a58:	46d9      	mov	r9, fp
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d1ca      	bne.n	80169f4 <_strtod_l+0x9b4>
 8016a5e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016a62:	0d1b      	lsrs	r3, r3, #20
 8016a64:	051b      	lsls	r3, r3, #20
 8016a66:	429f      	cmp	r7, r3
 8016a68:	d1c4      	bne.n	80169f4 <_strtod_l+0x9b4>
 8016a6a:	ec51 0b18 	vmov	r0, r1, d8
 8016a6e:	f7e9 fec3 	bl	80007f8 <__aeabi_d2lz>
 8016a72:	f7e9 fe2b 	bl	80006cc <__aeabi_l2d>
 8016a76:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8016a7a:	ec41 0b17 	vmov	d7, r0, r1
 8016a7e:	ea49 090a 	orr.w	r9, r9, sl
 8016a82:	ea59 0908 	orrs.w	r9, r9, r8
 8016a86:	ee38 8b47 	vsub.f64	d8, d8, d7
 8016a8a:	d03c      	beq.n	8016b06 <_strtod_l+0xac6>
 8016a8c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8016b40 <_strtod_l+0xb00>
 8016a90:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a98:	f53f aced 	bmi.w	8016476 <_strtod_l+0x436>
 8016a9c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8016b48 <_strtod_l+0xb08>
 8016aa0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016aa8:	dda4      	ble.n	80169f4 <_strtod_l+0x9b4>
 8016aaa:	e4e4      	b.n	8016476 <_strtod_l+0x436>
 8016aac:	9906      	ldr	r1, [sp, #24]
 8016aae:	b1e1      	cbz	r1, 8016aea <_strtod_l+0xaaa>
 8016ab0:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8016ab4:	d819      	bhi.n	8016aea <_strtod_l+0xaaa>
 8016ab6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8016aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016abe:	d811      	bhi.n	8016ae4 <_strtod_l+0xaa4>
 8016ac0:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8016ac4:	ee18 3a10 	vmov	r3, s16
 8016ac8:	2b01      	cmp	r3, #1
 8016aca:	bf38      	it	cc
 8016acc:	2301      	movcc	r3, #1
 8016ace:	ee08 3a10 	vmov	s16, r3
 8016ad2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8016ad6:	f1b8 0f00 	cmp.w	r8, #0
 8016ada:	d111      	bne.n	8016b00 <_strtod_l+0xac0>
 8016adc:	eeb1 7b48 	vneg.f64	d7, d8
 8016ae0:	ec53 2b17 	vmov	r2, r3, d7
 8016ae4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8016ae8:	1bcb      	subs	r3, r1, r7
 8016aea:	eeb0 0b49 	vmov.f64	d0, d9
 8016aee:	ec43 2b1a 	vmov	d10, r2, r3
 8016af2:	f001 fa39 	bl	8017f68 <__ulp>
 8016af6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8016afa:	ec5b ab19 	vmov	sl, fp, d9
 8016afe:	e7aa      	b.n	8016a56 <_strtod_l+0xa16>
 8016b00:	eeb0 7b48 	vmov.f64	d7, d8
 8016b04:	e7ec      	b.n	8016ae0 <_strtod_l+0xaa0>
 8016b06:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8016b50 <_strtod_l+0xb10>
 8016b0a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b12:	f57f af6f 	bpl.w	80169f4 <_strtod_l+0x9b4>
 8016b16:	e4ae      	b.n	8016476 <_strtod_l+0x436>
 8016b18:	2300      	movs	r3, #0
 8016b1a:	9308      	str	r3, [sp, #32]
 8016b1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016b1e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016b20:	6013      	str	r3, [r2, #0]
 8016b22:	f7ff bacc 	b.w	80160be <_strtod_l+0x7e>
 8016b26:	2a65      	cmp	r2, #101	@ 0x65
 8016b28:	f43f abbc 	beq.w	80162a4 <_strtod_l+0x264>
 8016b2c:	2a45      	cmp	r2, #69	@ 0x45
 8016b2e:	f43f abb9 	beq.w	80162a4 <_strtod_l+0x264>
 8016b32:	2301      	movs	r3, #1
 8016b34:	9306      	str	r3, [sp, #24]
 8016b36:	f7ff bbf0 	b.w	801631a <_strtod_l+0x2da>
 8016b3a:	bf00      	nop
 8016b3c:	f3af 8000 	nop.w
 8016b40:	94a03595 	.word	0x94a03595
 8016b44:	3fdfffff 	.word	0x3fdfffff
 8016b48:	35afe535 	.word	0x35afe535
 8016b4c:	3fe00000 	.word	0x3fe00000
 8016b50:	94a03595 	.word	0x94a03595
 8016b54:	3fcfffff 	.word	0x3fcfffff
 8016b58:	000fffff 	.word	0x000fffff
 8016b5c:	7ff00000 	.word	0x7ff00000
 8016b60:	7fefffff 	.word	0x7fefffff
 8016b64:	7fe00000 	.word	0x7fe00000
 8016b68:	7c9fffff 	.word	0x7c9fffff

08016b6c <strtod>:
 8016b6c:	460a      	mov	r2, r1
 8016b6e:	4601      	mov	r1, r0
 8016b70:	4802      	ldr	r0, [pc, #8]	@ (8016b7c <strtod+0x10>)
 8016b72:	4b03      	ldr	r3, [pc, #12]	@ (8016b80 <strtod+0x14>)
 8016b74:	6800      	ldr	r0, [r0, #0]
 8016b76:	f7ff ba63 	b.w	8016040 <_strtod_l>
 8016b7a:	bf00      	nop
 8016b7c:	24000240 	.word	0x24000240
 8016b80:	240000d4 	.word	0x240000d4

08016b84 <_strtol_l.constprop.0>:
 8016b84:	2b24      	cmp	r3, #36	@ 0x24
 8016b86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b8a:	4686      	mov	lr, r0
 8016b8c:	4690      	mov	r8, r2
 8016b8e:	d801      	bhi.n	8016b94 <_strtol_l.constprop.0+0x10>
 8016b90:	2b01      	cmp	r3, #1
 8016b92:	d106      	bne.n	8016ba2 <_strtol_l.constprop.0+0x1e>
 8016b94:	f000 f9ec 	bl	8016f70 <__errno>
 8016b98:	2316      	movs	r3, #22
 8016b9a:	6003      	str	r3, [r0, #0]
 8016b9c:	2000      	movs	r0, #0
 8016b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ba2:	4834      	ldr	r0, [pc, #208]	@ (8016c74 <_strtol_l.constprop.0+0xf0>)
 8016ba4:	460d      	mov	r5, r1
 8016ba6:	462a      	mov	r2, r5
 8016ba8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016bac:	5d06      	ldrb	r6, [r0, r4]
 8016bae:	f016 0608 	ands.w	r6, r6, #8
 8016bb2:	d1f8      	bne.n	8016ba6 <_strtol_l.constprop.0+0x22>
 8016bb4:	2c2d      	cmp	r4, #45	@ 0x2d
 8016bb6:	d12d      	bne.n	8016c14 <_strtol_l.constprop.0+0x90>
 8016bb8:	782c      	ldrb	r4, [r5, #0]
 8016bba:	2601      	movs	r6, #1
 8016bbc:	1c95      	adds	r5, r2, #2
 8016bbe:	f033 0210 	bics.w	r2, r3, #16
 8016bc2:	d109      	bne.n	8016bd8 <_strtol_l.constprop.0+0x54>
 8016bc4:	2c30      	cmp	r4, #48	@ 0x30
 8016bc6:	d12a      	bne.n	8016c1e <_strtol_l.constprop.0+0x9a>
 8016bc8:	782a      	ldrb	r2, [r5, #0]
 8016bca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016bce:	2a58      	cmp	r2, #88	@ 0x58
 8016bd0:	d125      	bne.n	8016c1e <_strtol_l.constprop.0+0x9a>
 8016bd2:	786c      	ldrb	r4, [r5, #1]
 8016bd4:	2310      	movs	r3, #16
 8016bd6:	3502      	adds	r5, #2
 8016bd8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8016bdc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016be0:	2200      	movs	r2, #0
 8016be2:	fbbc f9f3 	udiv	r9, ip, r3
 8016be6:	4610      	mov	r0, r2
 8016be8:	fb03 ca19 	mls	sl, r3, r9, ip
 8016bec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8016bf0:	2f09      	cmp	r7, #9
 8016bf2:	d81b      	bhi.n	8016c2c <_strtol_l.constprop.0+0xa8>
 8016bf4:	463c      	mov	r4, r7
 8016bf6:	42a3      	cmp	r3, r4
 8016bf8:	dd27      	ble.n	8016c4a <_strtol_l.constprop.0+0xc6>
 8016bfa:	1c57      	adds	r7, r2, #1
 8016bfc:	d007      	beq.n	8016c0e <_strtol_l.constprop.0+0x8a>
 8016bfe:	4581      	cmp	r9, r0
 8016c00:	d320      	bcc.n	8016c44 <_strtol_l.constprop.0+0xc0>
 8016c02:	d101      	bne.n	8016c08 <_strtol_l.constprop.0+0x84>
 8016c04:	45a2      	cmp	sl, r4
 8016c06:	db1d      	blt.n	8016c44 <_strtol_l.constprop.0+0xc0>
 8016c08:	fb00 4003 	mla	r0, r0, r3, r4
 8016c0c:	2201      	movs	r2, #1
 8016c0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016c12:	e7eb      	b.n	8016bec <_strtol_l.constprop.0+0x68>
 8016c14:	2c2b      	cmp	r4, #43	@ 0x2b
 8016c16:	bf04      	itt	eq
 8016c18:	782c      	ldrbeq	r4, [r5, #0]
 8016c1a:	1c95      	addeq	r5, r2, #2
 8016c1c:	e7cf      	b.n	8016bbe <_strtol_l.constprop.0+0x3a>
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d1da      	bne.n	8016bd8 <_strtol_l.constprop.0+0x54>
 8016c22:	2c30      	cmp	r4, #48	@ 0x30
 8016c24:	bf0c      	ite	eq
 8016c26:	2308      	moveq	r3, #8
 8016c28:	230a      	movne	r3, #10
 8016c2a:	e7d5      	b.n	8016bd8 <_strtol_l.constprop.0+0x54>
 8016c2c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8016c30:	2f19      	cmp	r7, #25
 8016c32:	d801      	bhi.n	8016c38 <_strtol_l.constprop.0+0xb4>
 8016c34:	3c37      	subs	r4, #55	@ 0x37
 8016c36:	e7de      	b.n	8016bf6 <_strtol_l.constprop.0+0x72>
 8016c38:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8016c3c:	2f19      	cmp	r7, #25
 8016c3e:	d804      	bhi.n	8016c4a <_strtol_l.constprop.0+0xc6>
 8016c40:	3c57      	subs	r4, #87	@ 0x57
 8016c42:	e7d8      	b.n	8016bf6 <_strtol_l.constprop.0+0x72>
 8016c44:	f04f 32ff 	mov.w	r2, #4294967295
 8016c48:	e7e1      	b.n	8016c0e <_strtol_l.constprop.0+0x8a>
 8016c4a:	1c53      	adds	r3, r2, #1
 8016c4c:	d108      	bne.n	8016c60 <_strtol_l.constprop.0+0xdc>
 8016c4e:	2322      	movs	r3, #34	@ 0x22
 8016c50:	f8ce 3000 	str.w	r3, [lr]
 8016c54:	4660      	mov	r0, ip
 8016c56:	f1b8 0f00 	cmp.w	r8, #0
 8016c5a:	d0a0      	beq.n	8016b9e <_strtol_l.constprop.0+0x1a>
 8016c5c:	1e69      	subs	r1, r5, #1
 8016c5e:	e006      	b.n	8016c6e <_strtol_l.constprop.0+0xea>
 8016c60:	b106      	cbz	r6, 8016c64 <_strtol_l.constprop.0+0xe0>
 8016c62:	4240      	negs	r0, r0
 8016c64:	f1b8 0f00 	cmp.w	r8, #0
 8016c68:	d099      	beq.n	8016b9e <_strtol_l.constprop.0+0x1a>
 8016c6a:	2a00      	cmp	r2, #0
 8016c6c:	d1f6      	bne.n	8016c5c <_strtol_l.constprop.0+0xd8>
 8016c6e:	f8c8 1000 	str.w	r1, [r8]
 8016c72:	e794      	b.n	8016b9e <_strtol_l.constprop.0+0x1a>
 8016c74:	08019089 	.word	0x08019089

08016c78 <strtol>:
 8016c78:	4613      	mov	r3, r2
 8016c7a:	460a      	mov	r2, r1
 8016c7c:	4601      	mov	r1, r0
 8016c7e:	4802      	ldr	r0, [pc, #8]	@ (8016c88 <strtol+0x10>)
 8016c80:	6800      	ldr	r0, [r0, #0]
 8016c82:	f7ff bf7f 	b.w	8016b84 <_strtol_l.constprop.0>
 8016c86:	bf00      	nop
 8016c88:	24000240 	.word	0x24000240

08016c8c <std>:
 8016c8c:	2300      	movs	r3, #0
 8016c8e:	b510      	push	{r4, lr}
 8016c90:	4604      	mov	r4, r0
 8016c92:	e9c0 3300 	strd	r3, r3, [r0]
 8016c96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016c9a:	6083      	str	r3, [r0, #8]
 8016c9c:	8181      	strh	r1, [r0, #12]
 8016c9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8016ca0:	81c2      	strh	r2, [r0, #14]
 8016ca2:	6183      	str	r3, [r0, #24]
 8016ca4:	4619      	mov	r1, r3
 8016ca6:	2208      	movs	r2, #8
 8016ca8:	305c      	adds	r0, #92	@ 0x5c
 8016caa:	f000 f8f4 	bl	8016e96 <memset>
 8016cae:	4b0d      	ldr	r3, [pc, #52]	@ (8016ce4 <std+0x58>)
 8016cb0:	6263      	str	r3, [r4, #36]	@ 0x24
 8016cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8016ce8 <std+0x5c>)
 8016cb4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8016cec <std+0x60>)
 8016cb8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016cba:	4b0d      	ldr	r3, [pc, #52]	@ (8016cf0 <std+0x64>)
 8016cbc:	6323      	str	r3, [r4, #48]	@ 0x30
 8016cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8016cf4 <std+0x68>)
 8016cc0:	6224      	str	r4, [r4, #32]
 8016cc2:	429c      	cmp	r4, r3
 8016cc4:	d006      	beq.n	8016cd4 <std+0x48>
 8016cc6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016cca:	4294      	cmp	r4, r2
 8016ccc:	d002      	beq.n	8016cd4 <std+0x48>
 8016cce:	33d0      	adds	r3, #208	@ 0xd0
 8016cd0:	429c      	cmp	r4, r3
 8016cd2:	d105      	bne.n	8016ce0 <std+0x54>
 8016cd4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016cdc:	f000 b972 	b.w	8016fc4 <__retarget_lock_init_recursive>
 8016ce0:	bd10      	pop	{r4, pc}
 8016ce2:	bf00      	nop
 8016ce4:	08016e11 	.word	0x08016e11
 8016ce8:	08016e33 	.word	0x08016e33
 8016cec:	08016e6b 	.word	0x08016e6b
 8016cf0:	08016e8f 	.word	0x08016e8f
 8016cf4:	240066f8 	.word	0x240066f8

08016cf8 <stdio_exit_handler>:
 8016cf8:	4a02      	ldr	r2, [pc, #8]	@ (8016d04 <stdio_exit_handler+0xc>)
 8016cfa:	4903      	ldr	r1, [pc, #12]	@ (8016d08 <stdio_exit_handler+0x10>)
 8016cfc:	4803      	ldr	r0, [pc, #12]	@ (8016d0c <stdio_exit_handler+0x14>)
 8016cfe:	f000 b869 	b.w	8016dd4 <_fwalk_sglue>
 8016d02:	bf00      	nop
 8016d04:	240000c8 	.word	0x240000c8
 8016d08:	08018301 	.word	0x08018301
 8016d0c:	24000244 	.word	0x24000244

08016d10 <cleanup_stdio>:
 8016d10:	6841      	ldr	r1, [r0, #4]
 8016d12:	4b0c      	ldr	r3, [pc, #48]	@ (8016d44 <cleanup_stdio+0x34>)
 8016d14:	4299      	cmp	r1, r3
 8016d16:	b510      	push	{r4, lr}
 8016d18:	4604      	mov	r4, r0
 8016d1a:	d001      	beq.n	8016d20 <cleanup_stdio+0x10>
 8016d1c:	f001 faf0 	bl	8018300 <_fflush_r>
 8016d20:	68a1      	ldr	r1, [r4, #8]
 8016d22:	4b09      	ldr	r3, [pc, #36]	@ (8016d48 <cleanup_stdio+0x38>)
 8016d24:	4299      	cmp	r1, r3
 8016d26:	d002      	beq.n	8016d2e <cleanup_stdio+0x1e>
 8016d28:	4620      	mov	r0, r4
 8016d2a:	f001 fae9 	bl	8018300 <_fflush_r>
 8016d2e:	68e1      	ldr	r1, [r4, #12]
 8016d30:	4b06      	ldr	r3, [pc, #24]	@ (8016d4c <cleanup_stdio+0x3c>)
 8016d32:	4299      	cmp	r1, r3
 8016d34:	d004      	beq.n	8016d40 <cleanup_stdio+0x30>
 8016d36:	4620      	mov	r0, r4
 8016d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d3c:	f001 bae0 	b.w	8018300 <_fflush_r>
 8016d40:	bd10      	pop	{r4, pc}
 8016d42:	bf00      	nop
 8016d44:	240066f8 	.word	0x240066f8
 8016d48:	24006760 	.word	0x24006760
 8016d4c:	240067c8 	.word	0x240067c8

08016d50 <global_stdio_init.part.0>:
 8016d50:	b510      	push	{r4, lr}
 8016d52:	4b0b      	ldr	r3, [pc, #44]	@ (8016d80 <global_stdio_init.part.0+0x30>)
 8016d54:	4c0b      	ldr	r4, [pc, #44]	@ (8016d84 <global_stdio_init.part.0+0x34>)
 8016d56:	4a0c      	ldr	r2, [pc, #48]	@ (8016d88 <global_stdio_init.part.0+0x38>)
 8016d58:	601a      	str	r2, [r3, #0]
 8016d5a:	4620      	mov	r0, r4
 8016d5c:	2200      	movs	r2, #0
 8016d5e:	2104      	movs	r1, #4
 8016d60:	f7ff ff94 	bl	8016c8c <std>
 8016d64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016d68:	2201      	movs	r2, #1
 8016d6a:	2109      	movs	r1, #9
 8016d6c:	f7ff ff8e 	bl	8016c8c <std>
 8016d70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016d74:	2202      	movs	r2, #2
 8016d76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d7a:	2112      	movs	r1, #18
 8016d7c:	f7ff bf86 	b.w	8016c8c <std>
 8016d80:	24006830 	.word	0x24006830
 8016d84:	240066f8 	.word	0x240066f8
 8016d88:	08016cf9 	.word	0x08016cf9

08016d8c <__sfp_lock_acquire>:
 8016d8c:	4801      	ldr	r0, [pc, #4]	@ (8016d94 <__sfp_lock_acquire+0x8>)
 8016d8e:	f000 b91a 	b.w	8016fc6 <__retarget_lock_acquire_recursive>
 8016d92:	bf00      	nop
 8016d94:	24006839 	.word	0x24006839

08016d98 <__sfp_lock_release>:
 8016d98:	4801      	ldr	r0, [pc, #4]	@ (8016da0 <__sfp_lock_release+0x8>)
 8016d9a:	f000 b915 	b.w	8016fc8 <__retarget_lock_release_recursive>
 8016d9e:	bf00      	nop
 8016da0:	24006839 	.word	0x24006839

08016da4 <__sinit>:
 8016da4:	b510      	push	{r4, lr}
 8016da6:	4604      	mov	r4, r0
 8016da8:	f7ff fff0 	bl	8016d8c <__sfp_lock_acquire>
 8016dac:	6a23      	ldr	r3, [r4, #32]
 8016dae:	b11b      	cbz	r3, 8016db8 <__sinit+0x14>
 8016db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016db4:	f7ff bff0 	b.w	8016d98 <__sfp_lock_release>
 8016db8:	4b04      	ldr	r3, [pc, #16]	@ (8016dcc <__sinit+0x28>)
 8016dba:	6223      	str	r3, [r4, #32]
 8016dbc:	4b04      	ldr	r3, [pc, #16]	@ (8016dd0 <__sinit+0x2c>)
 8016dbe:	681b      	ldr	r3, [r3, #0]
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	d1f5      	bne.n	8016db0 <__sinit+0xc>
 8016dc4:	f7ff ffc4 	bl	8016d50 <global_stdio_init.part.0>
 8016dc8:	e7f2      	b.n	8016db0 <__sinit+0xc>
 8016dca:	bf00      	nop
 8016dcc:	08016d11 	.word	0x08016d11
 8016dd0:	24006830 	.word	0x24006830

08016dd4 <_fwalk_sglue>:
 8016dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016dd8:	4607      	mov	r7, r0
 8016dda:	4688      	mov	r8, r1
 8016ddc:	4614      	mov	r4, r2
 8016dde:	2600      	movs	r6, #0
 8016de0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016de4:	f1b9 0901 	subs.w	r9, r9, #1
 8016de8:	d505      	bpl.n	8016df6 <_fwalk_sglue+0x22>
 8016dea:	6824      	ldr	r4, [r4, #0]
 8016dec:	2c00      	cmp	r4, #0
 8016dee:	d1f7      	bne.n	8016de0 <_fwalk_sglue+0xc>
 8016df0:	4630      	mov	r0, r6
 8016df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016df6:	89ab      	ldrh	r3, [r5, #12]
 8016df8:	2b01      	cmp	r3, #1
 8016dfa:	d907      	bls.n	8016e0c <_fwalk_sglue+0x38>
 8016dfc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016e00:	3301      	adds	r3, #1
 8016e02:	d003      	beq.n	8016e0c <_fwalk_sglue+0x38>
 8016e04:	4629      	mov	r1, r5
 8016e06:	4638      	mov	r0, r7
 8016e08:	47c0      	blx	r8
 8016e0a:	4306      	orrs	r6, r0
 8016e0c:	3568      	adds	r5, #104	@ 0x68
 8016e0e:	e7e9      	b.n	8016de4 <_fwalk_sglue+0x10>

08016e10 <__sread>:
 8016e10:	b510      	push	{r4, lr}
 8016e12:	460c      	mov	r4, r1
 8016e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e18:	f000 f886 	bl	8016f28 <_read_r>
 8016e1c:	2800      	cmp	r0, #0
 8016e1e:	bfab      	itete	ge
 8016e20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016e22:	89a3      	ldrhlt	r3, [r4, #12]
 8016e24:	181b      	addge	r3, r3, r0
 8016e26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016e2a:	bfac      	ite	ge
 8016e2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016e2e:	81a3      	strhlt	r3, [r4, #12]
 8016e30:	bd10      	pop	{r4, pc}

08016e32 <__swrite>:
 8016e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e36:	461f      	mov	r7, r3
 8016e38:	898b      	ldrh	r3, [r1, #12]
 8016e3a:	05db      	lsls	r3, r3, #23
 8016e3c:	4605      	mov	r5, r0
 8016e3e:	460c      	mov	r4, r1
 8016e40:	4616      	mov	r6, r2
 8016e42:	d505      	bpl.n	8016e50 <__swrite+0x1e>
 8016e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e48:	2302      	movs	r3, #2
 8016e4a:	2200      	movs	r2, #0
 8016e4c:	f000 f85a 	bl	8016f04 <_lseek_r>
 8016e50:	89a3      	ldrh	r3, [r4, #12]
 8016e52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016e56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016e5a:	81a3      	strh	r3, [r4, #12]
 8016e5c:	4632      	mov	r2, r6
 8016e5e:	463b      	mov	r3, r7
 8016e60:	4628      	mov	r0, r5
 8016e62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e66:	f000 b871 	b.w	8016f4c <_write_r>

08016e6a <__sseek>:
 8016e6a:	b510      	push	{r4, lr}
 8016e6c:	460c      	mov	r4, r1
 8016e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e72:	f000 f847 	bl	8016f04 <_lseek_r>
 8016e76:	1c43      	adds	r3, r0, #1
 8016e78:	89a3      	ldrh	r3, [r4, #12]
 8016e7a:	bf15      	itete	ne
 8016e7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016e7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016e82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016e86:	81a3      	strheq	r3, [r4, #12]
 8016e88:	bf18      	it	ne
 8016e8a:	81a3      	strhne	r3, [r4, #12]
 8016e8c:	bd10      	pop	{r4, pc}

08016e8e <__sclose>:
 8016e8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e92:	f000 b827 	b.w	8016ee4 <_close_r>

08016e96 <memset>:
 8016e96:	4402      	add	r2, r0
 8016e98:	4603      	mov	r3, r0
 8016e9a:	4293      	cmp	r3, r2
 8016e9c:	d100      	bne.n	8016ea0 <memset+0xa>
 8016e9e:	4770      	bx	lr
 8016ea0:	f803 1b01 	strb.w	r1, [r3], #1
 8016ea4:	e7f9      	b.n	8016e9a <memset+0x4>

08016ea6 <strchr>:
 8016ea6:	b2c9      	uxtb	r1, r1
 8016ea8:	4603      	mov	r3, r0
 8016eaa:	4618      	mov	r0, r3
 8016eac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016eb0:	b112      	cbz	r2, 8016eb8 <strchr+0x12>
 8016eb2:	428a      	cmp	r2, r1
 8016eb4:	d1f9      	bne.n	8016eaa <strchr+0x4>
 8016eb6:	4770      	bx	lr
 8016eb8:	2900      	cmp	r1, #0
 8016eba:	bf18      	it	ne
 8016ebc:	2000      	movne	r0, #0
 8016ebe:	4770      	bx	lr

08016ec0 <strncmp>:
 8016ec0:	b510      	push	{r4, lr}
 8016ec2:	b16a      	cbz	r2, 8016ee0 <strncmp+0x20>
 8016ec4:	3901      	subs	r1, #1
 8016ec6:	1884      	adds	r4, r0, r2
 8016ec8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016ecc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016ed0:	429a      	cmp	r2, r3
 8016ed2:	d103      	bne.n	8016edc <strncmp+0x1c>
 8016ed4:	42a0      	cmp	r0, r4
 8016ed6:	d001      	beq.n	8016edc <strncmp+0x1c>
 8016ed8:	2a00      	cmp	r2, #0
 8016eda:	d1f5      	bne.n	8016ec8 <strncmp+0x8>
 8016edc:	1ad0      	subs	r0, r2, r3
 8016ede:	bd10      	pop	{r4, pc}
 8016ee0:	4610      	mov	r0, r2
 8016ee2:	e7fc      	b.n	8016ede <strncmp+0x1e>

08016ee4 <_close_r>:
 8016ee4:	b538      	push	{r3, r4, r5, lr}
 8016ee6:	4d06      	ldr	r5, [pc, #24]	@ (8016f00 <_close_r+0x1c>)
 8016ee8:	2300      	movs	r3, #0
 8016eea:	4604      	mov	r4, r0
 8016eec:	4608      	mov	r0, r1
 8016eee:	602b      	str	r3, [r5, #0]
 8016ef0:	f7eb fd1e 	bl	8002930 <_close>
 8016ef4:	1c43      	adds	r3, r0, #1
 8016ef6:	d102      	bne.n	8016efe <_close_r+0x1a>
 8016ef8:	682b      	ldr	r3, [r5, #0]
 8016efa:	b103      	cbz	r3, 8016efe <_close_r+0x1a>
 8016efc:	6023      	str	r3, [r4, #0]
 8016efe:	bd38      	pop	{r3, r4, r5, pc}
 8016f00:	24006834 	.word	0x24006834

08016f04 <_lseek_r>:
 8016f04:	b538      	push	{r3, r4, r5, lr}
 8016f06:	4d07      	ldr	r5, [pc, #28]	@ (8016f24 <_lseek_r+0x20>)
 8016f08:	4604      	mov	r4, r0
 8016f0a:	4608      	mov	r0, r1
 8016f0c:	4611      	mov	r1, r2
 8016f0e:	2200      	movs	r2, #0
 8016f10:	602a      	str	r2, [r5, #0]
 8016f12:	461a      	mov	r2, r3
 8016f14:	f7eb fd33 	bl	800297e <_lseek>
 8016f18:	1c43      	adds	r3, r0, #1
 8016f1a:	d102      	bne.n	8016f22 <_lseek_r+0x1e>
 8016f1c:	682b      	ldr	r3, [r5, #0]
 8016f1e:	b103      	cbz	r3, 8016f22 <_lseek_r+0x1e>
 8016f20:	6023      	str	r3, [r4, #0]
 8016f22:	bd38      	pop	{r3, r4, r5, pc}
 8016f24:	24006834 	.word	0x24006834

08016f28 <_read_r>:
 8016f28:	b538      	push	{r3, r4, r5, lr}
 8016f2a:	4d07      	ldr	r5, [pc, #28]	@ (8016f48 <_read_r+0x20>)
 8016f2c:	4604      	mov	r4, r0
 8016f2e:	4608      	mov	r0, r1
 8016f30:	4611      	mov	r1, r2
 8016f32:	2200      	movs	r2, #0
 8016f34:	602a      	str	r2, [r5, #0]
 8016f36:	461a      	mov	r2, r3
 8016f38:	f7eb fcc1 	bl	80028be <_read>
 8016f3c:	1c43      	adds	r3, r0, #1
 8016f3e:	d102      	bne.n	8016f46 <_read_r+0x1e>
 8016f40:	682b      	ldr	r3, [r5, #0]
 8016f42:	b103      	cbz	r3, 8016f46 <_read_r+0x1e>
 8016f44:	6023      	str	r3, [r4, #0]
 8016f46:	bd38      	pop	{r3, r4, r5, pc}
 8016f48:	24006834 	.word	0x24006834

08016f4c <_write_r>:
 8016f4c:	b538      	push	{r3, r4, r5, lr}
 8016f4e:	4d07      	ldr	r5, [pc, #28]	@ (8016f6c <_write_r+0x20>)
 8016f50:	4604      	mov	r4, r0
 8016f52:	4608      	mov	r0, r1
 8016f54:	4611      	mov	r1, r2
 8016f56:	2200      	movs	r2, #0
 8016f58:	602a      	str	r2, [r5, #0]
 8016f5a:	461a      	mov	r2, r3
 8016f5c:	f7eb fccc 	bl	80028f8 <_write>
 8016f60:	1c43      	adds	r3, r0, #1
 8016f62:	d102      	bne.n	8016f6a <_write_r+0x1e>
 8016f64:	682b      	ldr	r3, [r5, #0]
 8016f66:	b103      	cbz	r3, 8016f6a <_write_r+0x1e>
 8016f68:	6023      	str	r3, [r4, #0]
 8016f6a:	bd38      	pop	{r3, r4, r5, pc}
 8016f6c:	24006834 	.word	0x24006834

08016f70 <__errno>:
 8016f70:	4b01      	ldr	r3, [pc, #4]	@ (8016f78 <__errno+0x8>)
 8016f72:	6818      	ldr	r0, [r3, #0]
 8016f74:	4770      	bx	lr
 8016f76:	bf00      	nop
 8016f78:	24000240 	.word	0x24000240

08016f7c <__libc_init_array>:
 8016f7c:	b570      	push	{r4, r5, r6, lr}
 8016f7e:	4d0d      	ldr	r5, [pc, #52]	@ (8016fb4 <__libc_init_array+0x38>)
 8016f80:	4c0d      	ldr	r4, [pc, #52]	@ (8016fb8 <__libc_init_array+0x3c>)
 8016f82:	1b64      	subs	r4, r4, r5
 8016f84:	10a4      	asrs	r4, r4, #2
 8016f86:	2600      	movs	r6, #0
 8016f88:	42a6      	cmp	r6, r4
 8016f8a:	d109      	bne.n	8016fa0 <__libc_init_array+0x24>
 8016f8c:	4d0b      	ldr	r5, [pc, #44]	@ (8016fbc <__libc_init_array+0x40>)
 8016f8e:	4c0c      	ldr	r4, [pc, #48]	@ (8016fc0 <__libc_init_array+0x44>)
 8016f90:	f001 ff9a 	bl	8018ec8 <_init>
 8016f94:	1b64      	subs	r4, r4, r5
 8016f96:	10a4      	asrs	r4, r4, #2
 8016f98:	2600      	movs	r6, #0
 8016f9a:	42a6      	cmp	r6, r4
 8016f9c:	d105      	bne.n	8016faa <__libc_init_array+0x2e>
 8016f9e:	bd70      	pop	{r4, r5, r6, pc}
 8016fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8016fa4:	4798      	blx	r3
 8016fa6:	3601      	adds	r6, #1
 8016fa8:	e7ee      	b.n	8016f88 <__libc_init_array+0xc>
 8016faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8016fae:	4798      	blx	r3
 8016fb0:	3601      	adds	r6, #1
 8016fb2:	e7f2      	b.n	8016f9a <__libc_init_array+0x1e>
 8016fb4:	08019c78 	.word	0x08019c78
 8016fb8:	08019c78 	.word	0x08019c78
 8016fbc:	08019c78 	.word	0x08019c78
 8016fc0:	08019c7c 	.word	0x08019c7c

08016fc4 <__retarget_lock_init_recursive>:
 8016fc4:	4770      	bx	lr

08016fc6 <__retarget_lock_acquire_recursive>:
 8016fc6:	4770      	bx	lr

08016fc8 <__retarget_lock_release_recursive>:
 8016fc8:	4770      	bx	lr

08016fca <memcpy>:
 8016fca:	440a      	add	r2, r1
 8016fcc:	4291      	cmp	r1, r2
 8016fce:	f100 33ff 	add.w	r3, r0, #4294967295
 8016fd2:	d100      	bne.n	8016fd6 <memcpy+0xc>
 8016fd4:	4770      	bx	lr
 8016fd6:	b510      	push	{r4, lr}
 8016fd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016fdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016fe0:	4291      	cmp	r1, r2
 8016fe2:	d1f9      	bne.n	8016fd8 <memcpy+0xe>
 8016fe4:	bd10      	pop	{r4, pc}
	...

08016fe8 <nan>:
 8016fe8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016ff0 <nan+0x8>
 8016fec:	4770      	bx	lr
 8016fee:	bf00      	nop
 8016ff0:	00000000 	.word	0x00000000
 8016ff4:	7ff80000 	.word	0x7ff80000

08016ff8 <_free_r>:
 8016ff8:	b538      	push	{r3, r4, r5, lr}
 8016ffa:	4605      	mov	r5, r0
 8016ffc:	2900      	cmp	r1, #0
 8016ffe:	d041      	beq.n	8017084 <_free_r+0x8c>
 8017000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017004:	1f0c      	subs	r4, r1, #4
 8017006:	2b00      	cmp	r3, #0
 8017008:	bfb8      	it	lt
 801700a:	18e4      	addlt	r4, r4, r3
 801700c:	f000 fc2c 	bl	8017868 <__malloc_lock>
 8017010:	4a1d      	ldr	r2, [pc, #116]	@ (8017088 <_free_r+0x90>)
 8017012:	6813      	ldr	r3, [r2, #0]
 8017014:	b933      	cbnz	r3, 8017024 <_free_r+0x2c>
 8017016:	6063      	str	r3, [r4, #4]
 8017018:	6014      	str	r4, [r2, #0]
 801701a:	4628      	mov	r0, r5
 801701c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017020:	f000 bc28 	b.w	8017874 <__malloc_unlock>
 8017024:	42a3      	cmp	r3, r4
 8017026:	d908      	bls.n	801703a <_free_r+0x42>
 8017028:	6820      	ldr	r0, [r4, #0]
 801702a:	1821      	adds	r1, r4, r0
 801702c:	428b      	cmp	r3, r1
 801702e:	bf01      	itttt	eq
 8017030:	6819      	ldreq	r1, [r3, #0]
 8017032:	685b      	ldreq	r3, [r3, #4]
 8017034:	1809      	addeq	r1, r1, r0
 8017036:	6021      	streq	r1, [r4, #0]
 8017038:	e7ed      	b.n	8017016 <_free_r+0x1e>
 801703a:	461a      	mov	r2, r3
 801703c:	685b      	ldr	r3, [r3, #4]
 801703e:	b10b      	cbz	r3, 8017044 <_free_r+0x4c>
 8017040:	42a3      	cmp	r3, r4
 8017042:	d9fa      	bls.n	801703a <_free_r+0x42>
 8017044:	6811      	ldr	r1, [r2, #0]
 8017046:	1850      	adds	r0, r2, r1
 8017048:	42a0      	cmp	r0, r4
 801704a:	d10b      	bne.n	8017064 <_free_r+0x6c>
 801704c:	6820      	ldr	r0, [r4, #0]
 801704e:	4401      	add	r1, r0
 8017050:	1850      	adds	r0, r2, r1
 8017052:	4283      	cmp	r3, r0
 8017054:	6011      	str	r1, [r2, #0]
 8017056:	d1e0      	bne.n	801701a <_free_r+0x22>
 8017058:	6818      	ldr	r0, [r3, #0]
 801705a:	685b      	ldr	r3, [r3, #4]
 801705c:	6053      	str	r3, [r2, #4]
 801705e:	4408      	add	r0, r1
 8017060:	6010      	str	r0, [r2, #0]
 8017062:	e7da      	b.n	801701a <_free_r+0x22>
 8017064:	d902      	bls.n	801706c <_free_r+0x74>
 8017066:	230c      	movs	r3, #12
 8017068:	602b      	str	r3, [r5, #0]
 801706a:	e7d6      	b.n	801701a <_free_r+0x22>
 801706c:	6820      	ldr	r0, [r4, #0]
 801706e:	1821      	adds	r1, r4, r0
 8017070:	428b      	cmp	r3, r1
 8017072:	bf04      	itt	eq
 8017074:	6819      	ldreq	r1, [r3, #0]
 8017076:	685b      	ldreq	r3, [r3, #4]
 8017078:	6063      	str	r3, [r4, #4]
 801707a:	bf04      	itt	eq
 801707c:	1809      	addeq	r1, r1, r0
 801707e:	6021      	streq	r1, [r4, #0]
 8017080:	6054      	str	r4, [r2, #4]
 8017082:	e7ca      	b.n	801701a <_free_r+0x22>
 8017084:	bd38      	pop	{r3, r4, r5, pc}
 8017086:	bf00      	nop
 8017088:	24006840 	.word	0x24006840

0801708c <rshift>:
 801708c:	6903      	ldr	r3, [r0, #16]
 801708e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017092:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017096:	ea4f 1261 	mov.w	r2, r1, asr #5
 801709a:	f100 0414 	add.w	r4, r0, #20
 801709e:	dd45      	ble.n	801712c <rshift+0xa0>
 80170a0:	f011 011f 	ands.w	r1, r1, #31
 80170a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80170a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80170ac:	d10c      	bne.n	80170c8 <rshift+0x3c>
 80170ae:	f100 0710 	add.w	r7, r0, #16
 80170b2:	4629      	mov	r1, r5
 80170b4:	42b1      	cmp	r1, r6
 80170b6:	d334      	bcc.n	8017122 <rshift+0x96>
 80170b8:	1a9b      	subs	r3, r3, r2
 80170ba:	009b      	lsls	r3, r3, #2
 80170bc:	1eea      	subs	r2, r5, #3
 80170be:	4296      	cmp	r6, r2
 80170c0:	bf38      	it	cc
 80170c2:	2300      	movcc	r3, #0
 80170c4:	4423      	add	r3, r4
 80170c6:	e015      	b.n	80170f4 <rshift+0x68>
 80170c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80170cc:	f1c1 0820 	rsb	r8, r1, #32
 80170d0:	40cf      	lsrs	r7, r1
 80170d2:	f105 0e04 	add.w	lr, r5, #4
 80170d6:	46a1      	mov	r9, r4
 80170d8:	4576      	cmp	r6, lr
 80170da:	46f4      	mov	ip, lr
 80170dc:	d815      	bhi.n	801710a <rshift+0x7e>
 80170de:	1a9a      	subs	r2, r3, r2
 80170e0:	0092      	lsls	r2, r2, #2
 80170e2:	3a04      	subs	r2, #4
 80170e4:	3501      	adds	r5, #1
 80170e6:	42ae      	cmp	r6, r5
 80170e8:	bf38      	it	cc
 80170ea:	2200      	movcc	r2, #0
 80170ec:	18a3      	adds	r3, r4, r2
 80170ee:	50a7      	str	r7, [r4, r2]
 80170f0:	b107      	cbz	r7, 80170f4 <rshift+0x68>
 80170f2:	3304      	adds	r3, #4
 80170f4:	1b1a      	subs	r2, r3, r4
 80170f6:	42a3      	cmp	r3, r4
 80170f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80170fc:	bf08      	it	eq
 80170fe:	2300      	moveq	r3, #0
 8017100:	6102      	str	r2, [r0, #16]
 8017102:	bf08      	it	eq
 8017104:	6143      	streq	r3, [r0, #20]
 8017106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801710a:	f8dc c000 	ldr.w	ip, [ip]
 801710e:	fa0c fc08 	lsl.w	ip, ip, r8
 8017112:	ea4c 0707 	orr.w	r7, ip, r7
 8017116:	f849 7b04 	str.w	r7, [r9], #4
 801711a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801711e:	40cf      	lsrs	r7, r1
 8017120:	e7da      	b.n	80170d8 <rshift+0x4c>
 8017122:	f851 cb04 	ldr.w	ip, [r1], #4
 8017126:	f847 cf04 	str.w	ip, [r7, #4]!
 801712a:	e7c3      	b.n	80170b4 <rshift+0x28>
 801712c:	4623      	mov	r3, r4
 801712e:	e7e1      	b.n	80170f4 <rshift+0x68>

08017130 <__hexdig_fun>:
 8017130:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8017134:	2b09      	cmp	r3, #9
 8017136:	d802      	bhi.n	801713e <__hexdig_fun+0xe>
 8017138:	3820      	subs	r0, #32
 801713a:	b2c0      	uxtb	r0, r0
 801713c:	4770      	bx	lr
 801713e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8017142:	2b05      	cmp	r3, #5
 8017144:	d801      	bhi.n	801714a <__hexdig_fun+0x1a>
 8017146:	3847      	subs	r0, #71	@ 0x47
 8017148:	e7f7      	b.n	801713a <__hexdig_fun+0xa>
 801714a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801714e:	2b05      	cmp	r3, #5
 8017150:	d801      	bhi.n	8017156 <__hexdig_fun+0x26>
 8017152:	3827      	subs	r0, #39	@ 0x27
 8017154:	e7f1      	b.n	801713a <__hexdig_fun+0xa>
 8017156:	2000      	movs	r0, #0
 8017158:	4770      	bx	lr
	...

0801715c <__gethex>:
 801715c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017160:	b085      	sub	sp, #20
 8017162:	468a      	mov	sl, r1
 8017164:	9302      	str	r3, [sp, #8]
 8017166:	680b      	ldr	r3, [r1, #0]
 8017168:	9001      	str	r0, [sp, #4]
 801716a:	4690      	mov	r8, r2
 801716c:	1c9c      	adds	r4, r3, #2
 801716e:	46a1      	mov	r9, r4
 8017170:	f814 0b01 	ldrb.w	r0, [r4], #1
 8017174:	2830      	cmp	r0, #48	@ 0x30
 8017176:	d0fa      	beq.n	801716e <__gethex+0x12>
 8017178:	eba9 0303 	sub.w	r3, r9, r3
 801717c:	f1a3 0b02 	sub.w	fp, r3, #2
 8017180:	f7ff ffd6 	bl	8017130 <__hexdig_fun>
 8017184:	4605      	mov	r5, r0
 8017186:	2800      	cmp	r0, #0
 8017188:	d168      	bne.n	801725c <__gethex+0x100>
 801718a:	49a0      	ldr	r1, [pc, #640]	@ (801740c <__gethex+0x2b0>)
 801718c:	2201      	movs	r2, #1
 801718e:	4648      	mov	r0, r9
 8017190:	f7ff fe96 	bl	8016ec0 <strncmp>
 8017194:	4607      	mov	r7, r0
 8017196:	2800      	cmp	r0, #0
 8017198:	d167      	bne.n	801726a <__gethex+0x10e>
 801719a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801719e:	4626      	mov	r6, r4
 80171a0:	f7ff ffc6 	bl	8017130 <__hexdig_fun>
 80171a4:	2800      	cmp	r0, #0
 80171a6:	d062      	beq.n	801726e <__gethex+0x112>
 80171a8:	4623      	mov	r3, r4
 80171aa:	7818      	ldrb	r0, [r3, #0]
 80171ac:	2830      	cmp	r0, #48	@ 0x30
 80171ae:	4699      	mov	r9, r3
 80171b0:	f103 0301 	add.w	r3, r3, #1
 80171b4:	d0f9      	beq.n	80171aa <__gethex+0x4e>
 80171b6:	f7ff ffbb 	bl	8017130 <__hexdig_fun>
 80171ba:	fab0 f580 	clz	r5, r0
 80171be:	096d      	lsrs	r5, r5, #5
 80171c0:	f04f 0b01 	mov.w	fp, #1
 80171c4:	464a      	mov	r2, r9
 80171c6:	4616      	mov	r6, r2
 80171c8:	3201      	adds	r2, #1
 80171ca:	7830      	ldrb	r0, [r6, #0]
 80171cc:	f7ff ffb0 	bl	8017130 <__hexdig_fun>
 80171d0:	2800      	cmp	r0, #0
 80171d2:	d1f8      	bne.n	80171c6 <__gethex+0x6a>
 80171d4:	498d      	ldr	r1, [pc, #564]	@ (801740c <__gethex+0x2b0>)
 80171d6:	2201      	movs	r2, #1
 80171d8:	4630      	mov	r0, r6
 80171da:	f7ff fe71 	bl	8016ec0 <strncmp>
 80171de:	2800      	cmp	r0, #0
 80171e0:	d13f      	bne.n	8017262 <__gethex+0x106>
 80171e2:	b944      	cbnz	r4, 80171f6 <__gethex+0x9a>
 80171e4:	1c74      	adds	r4, r6, #1
 80171e6:	4622      	mov	r2, r4
 80171e8:	4616      	mov	r6, r2
 80171ea:	3201      	adds	r2, #1
 80171ec:	7830      	ldrb	r0, [r6, #0]
 80171ee:	f7ff ff9f 	bl	8017130 <__hexdig_fun>
 80171f2:	2800      	cmp	r0, #0
 80171f4:	d1f8      	bne.n	80171e8 <__gethex+0x8c>
 80171f6:	1ba4      	subs	r4, r4, r6
 80171f8:	00a7      	lsls	r7, r4, #2
 80171fa:	7833      	ldrb	r3, [r6, #0]
 80171fc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8017200:	2b50      	cmp	r3, #80	@ 0x50
 8017202:	d13e      	bne.n	8017282 <__gethex+0x126>
 8017204:	7873      	ldrb	r3, [r6, #1]
 8017206:	2b2b      	cmp	r3, #43	@ 0x2b
 8017208:	d033      	beq.n	8017272 <__gethex+0x116>
 801720a:	2b2d      	cmp	r3, #45	@ 0x2d
 801720c:	d034      	beq.n	8017278 <__gethex+0x11c>
 801720e:	1c71      	adds	r1, r6, #1
 8017210:	2400      	movs	r4, #0
 8017212:	7808      	ldrb	r0, [r1, #0]
 8017214:	f7ff ff8c 	bl	8017130 <__hexdig_fun>
 8017218:	1e43      	subs	r3, r0, #1
 801721a:	b2db      	uxtb	r3, r3
 801721c:	2b18      	cmp	r3, #24
 801721e:	d830      	bhi.n	8017282 <__gethex+0x126>
 8017220:	f1a0 0210 	sub.w	r2, r0, #16
 8017224:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017228:	f7ff ff82 	bl	8017130 <__hexdig_fun>
 801722c:	f100 3cff 	add.w	ip, r0, #4294967295
 8017230:	fa5f fc8c 	uxtb.w	ip, ip
 8017234:	f1bc 0f18 	cmp.w	ip, #24
 8017238:	f04f 030a 	mov.w	r3, #10
 801723c:	d91e      	bls.n	801727c <__gethex+0x120>
 801723e:	b104      	cbz	r4, 8017242 <__gethex+0xe6>
 8017240:	4252      	negs	r2, r2
 8017242:	4417      	add	r7, r2
 8017244:	f8ca 1000 	str.w	r1, [sl]
 8017248:	b1ed      	cbz	r5, 8017286 <__gethex+0x12a>
 801724a:	f1bb 0f00 	cmp.w	fp, #0
 801724e:	bf0c      	ite	eq
 8017250:	2506      	moveq	r5, #6
 8017252:	2500      	movne	r5, #0
 8017254:	4628      	mov	r0, r5
 8017256:	b005      	add	sp, #20
 8017258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801725c:	2500      	movs	r5, #0
 801725e:	462c      	mov	r4, r5
 8017260:	e7b0      	b.n	80171c4 <__gethex+0x68>
 8017262:	2c00      	cmp	r4, #0
 8017264:	d1c7      	bne.n	80171f6 <__gethex+0x9a>
 8017266:	4627      	mov	r7, r4
 8017268:	e7c7      	b.n	80171fa <__gethex+0x9e>
 801726a:	464e      	mov	r6, r9
 801726c:	462f      	mov	r7, r5
 801726e:	2501      	movs	r5, #1
 8017270:	e7c3      	b.n	80171fa <__gethex+0x9e>
 8017272:	2400      	movs	r4, #0
 8017274:	1cb1      	adds	r1, r6, #2
 8017276:	e7cc      	b.n	8017212 <__gethex+0xb6>
 8017278:	2401      	movs	r4, #1
 801727a:	e7fb      	b.n	8017274 <__gethex+0x118>
 801727c:	fb03 0002 	mla	r0, r3, r2, r0
 8017280:	e7ce      	b.n	8017220 <__gethex+0xc4>
 8017282:	4631      	mov	r1, r6
 8017284:	e7de      	b.n	8017244 <__gethex+0xe8>
 8017286:	eba6 0309 	sub.w	r3, r6, r9
 801728a:	3b01      	subs	r3, #1
 801728c:	4629      	mov	r1, r5
 801728e:	2b07      	cmp	r3, #7
 8017290:	dc0a      	bgt.n	80172a8 <__gethex+0x14c>
 8017292:	9801      	ldr	r0, [sp, #4]
 8017294:	f000 faf4 	bl	8017880 <_Balloc>
 8017298:	4604      	mov	r4, r0
 801729a:	b940      	cbnz	r0, 80172ae <__gethex+0x152>
 801729c:	4b5c      	ldr	r3, [pc, #368]	@ (8017410 <__gethex+0x2b4>)
 801729e:	4602      	mov	r2, r0
 80172a0:	21e4      	movs	r1, #228	@ 0xe4
 80172a2:	485c      	ldr	r0, [pc, #368]	@ (8017414 <__gethex+0x2b8>)
 80172a4:	f001 f864 	bl	8018370 <__assert_func>
 80172a8:	3101      	adds	r1, #1
 80172aa:	105b      	asrs	r3, r3, #1
 80172ac:	e7ef      	b.n	801728e <__gethex+0x132>
 80172ae:	f100 0a14 	add.w	sl, r0, #20
 80172b2:	2300      	movs	r3, #0
 80172b4:	4655      	mov	r5, sl
 80172b6:	469b      	mov	fp, r3
 80172b8:	45b1      	cmp	r9, r6
 80172ba:	d337      	bcc.n	801732c <__gethex+0x1d0>
 80172bc:	f845 bb04 	str.w	fp, [r5], #4
 80172c0:	eba5 050a 	sub.w	r5, r5, sl
 80172c4:	10ad      	asrs	r5, r5, #2
 80172c6:	6125      	str	r5, [r4, #16]
 80172c8:	4658      	mov	r0, fp
 80172ca:	f000 fbcb 	bl	8017a64 <__hi0bits>
 80172ce:	016d      	lsls	r5, r5, #5
 80172d0:	f8d8 6000 	ldr.w	r6, [r8]
 80172d4:	1a2d      	subs	r5, r5, r0
 80172d6:	42b5      	cmp	r5, r6
 80172d8:	dd54      	ble.n	8017384 <__gethex+0x228>
 80172da:	1bad      	subs	r5, r5, r6
 80172dc:	4629      	mov	r1, r5
 80172de:	4620      	mov	r0, r4
 80172e0:	f000 ff5c 	bl	801819c <__any_on>
 80172e4:	4681      	mov	r9, r0
 80172e6:	b178      	cbz	r0, 8017308 <__gethex+0x1ac>
 80172e8:	1e6b      	subs	r3, r5, #1
 80172ea:	1159      	asrs	r1, r3, #5
 80172ec:	f003 021f 	and.w	r2, r3, #31
 80172f0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80172f4:	f04f 0901 	mov.w	r9, #1
 80172f8:	fa09 f202 	lsl.w	r2, r9, r2
 80172fc:	420a      	tst	r2, r1
 80172fe:	d003      	beq.n	8017308 <__gethex+0x1ac>
 8017300:	454b      	cmp	r3, r9
 8017302:	dc36      	bgt.n	8017372 <__gethex+0x216>
 8017304:	f04f 0902 	mov.w	r9, #2
 8017308:	4629      	mov	r1, r5
 801730a:	4620      	mov	r0, r4
 801730c:	f7ff febe 	bl	801708c <rshift>
 8017310:	442f      	add	r7, r5
 8017312:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017316:	42bb      	cmp	r3, r7
 8017318:	da42      	bge.n	80173a0 <__gethex+0x244>
 801731a:	9801      	ldr	r0, [sp, #4]
 801731c:	4621      	mov	r1, r4
 801731e:	f000 faef 	bl	8017900 <_Bfree>
 8017322:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017324:	2300      	movs	r3, #0
 8017326:	6013      	str	r3, [r2, #0]
 8017328:	25a3      	movs	r5, #163	@ 0xa3
 801732a:	e793      	b.n	8017254 <__gethex+0xf8>
 801732c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8017330:	2a2e      	cmp	r2, #46	@ 0x2e
 8017332:	d012      	beq.n	801735a <__gethex+0x1fe>
 8017334:	2b20      	cmp	r3, #32
 8017336:	d104      	bne.n	8017342 <__gethex+0x1e6>
 8017338:	f845 bb04 	str.w	fp, [r5], #4
 801733c:	f04f 0b00 	mov.w	fp, #0
 8017340:	465b      	mov	r3, fp
 8017342:	7830      	ldrb	r0, [r6, #0]
 8017344:	9303      	str	r3, [sp, #12]
 8017346:	f7ff fef3 	bl	8017130 <__hexdig_fun>
 801734a:	9b03      	ldr	r3, [sp, #12]
 801734c:	f000 000f 	and.w	r0, r0, #15
 8017350:	4098      	lsls	r0, r3
 8017352:	ea4b 0b00 	orr.w	fp, fp, r0
 8017356:	3304      	adds	r3, #4
 8017358:	e7ae      	b.n	80172b8 <__gethex+0x15c>
 801735a:	45b1      	cmp	r9, r6
 801735c:	d8ea      	bhi.n	8017334 <__gethex+0x1d8>
 801735e:	492b      	ldr	r1, [pc, #172]	@ (801740c <__gethex+0x2b0>)
 8017360:	9303      	str	r3, [sp, #12]
 8017362:	2201      	movs	r2, #1
 8017364:	4630      	mov	r0, r6
 8017366:	f7ff fdab 	bl	8016ec0 <strncmp>
 801736a:	9b03      	ldr	r3, [sp, #12]
 801736c:	2800      	cmp	r0, #0
 801736e:	d1e1      	bne.n	8017334 <__gethex+0x1d8>
 8017370:	e7a2      	b.n	80172b8 <__gethex+0x15c>
 8017372:	1ea9      	subs	r1, r5, #2
 8017374:	4620      	mov	r0, r4
 8017376:	f000 ff11 	bl	801819c <__any_on>
 801737a:	2800      	cmp	r0, #0
 801737c:	d0c2      	beq.n	8017304 <__gethex+0x1a8>
 801737e:	f04f 0903 	mov.w	r9, #3
 8017382:	e7c1      	b.n	8017308 <__gethex+0x1ac>
 8017384:	da09      	bge.n	801739a <__gethex+0x23e>
 8017386:	1b75      	subs	r5, r6, r5
 8017388:	4621      	mov	r1, r4
 801738a:	9801      	ldr	r0, [sp, #4]
 801738c:	462a      	mov	r2, r5
 801738e:	f000 fccf 	bl	8017d30 <__lshift>
 8017392:	1b7f      	subs	r7, r7, r5
 8017394:	4604      	mov	r4, r0
 8017396:	f100 0a14 	add.w	sl, r0, #20
 801739a:	f04f 0900 	mov.w	r9, #0
 801739e:	e7b8      	b.n	8017312 <__gethex+0x1b6>
 80173a0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80173a4:	42bd      	cmp	r5, r7
 80173a6:	dd6f      	ble.n	8017488 <__gethex+0x32c>
 80173a8:	1bed      	subs	r5, r5, r7
 80173aa:	42ae      	cmp	r6, r5
 80173ac:	dc34      	bgt.n	8017418 <__gethex+0x2bc>
 80173ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80173b2:	2b02      	cmp	r3, #2
 80173b4:	d022      	beq.n	80173fc <__gethex+0x2a0>
 80173b6:	2b03      	cmp	r3, #3
 80173b8:	d024      	beq.n	8017404 <__gethex+0x2a8>
 80173ba:	2b01      	cmp	r3, #1
 80173bc:	d115      	bne.n	80173ea <__gethex+0x28e>
 80173be:	42ae      	cmp	r6, r5
 80173c0:	d113      	bne.n	80173ea <__gethex+0x28e>
 80173c2:	2e01      	cmp	r6, #1
 80173c4:	d10b      	bne.n	80173de <__gethex+0x282>
 80173c6:	9a02      	ldr	r2, [sp, #8]
 80173c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80173cc:	6013      	str	r3, [r2, #0]
 80173ce:	2301      	movs	r3, #1
 80173d0:	6123      	str	r3, [r4, #16]
 80173d2:	f8ca 3000 	str.w	r3, [sl]
 80173d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80173d8:	2562      	movs	r5, #98	@ 0x62
 80173da:	601c      	str	r4, [r3, #0]
 80173dc:	e73a      	b.n	8017254 <__gethex+0xf8>
 80173de:	1e71      	subs	r1, r6, #1
 80173e0:	4620      	mov	r0, r4
 80173e2:	f000 fedb 	bl	801819c <__any_on>
 80173e6:	2800      	cmp	r0, #0
 80173e8:	d1ed      	bne.n	80173c6 <__gethex+0x26a>
 80173ea:	9801      	ldr	r0, [sp, #4]
 80173ec:	4621      	mov	r1, r4
 80173ee:	f000 fa87 	bl	8017900 <_Bfree>
 80173f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80173f4:	2300      	movs	r3, #0
 80173f6:	6013      	str	r3, [r2, #0]
 80173f8:	2550      	movs	r5, #80	@ 0x50
 80173fa:	e72b      	b.n	8017254 <__gethex+0xf8>
 80173fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d1f3      	bne.n	80173ea <__gethex+0x28e>
 8017402:	e7e0      	b.n	80173c6 <__gethex+0x26a>
 8017404:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017406:	2b00      	cmp	r3, #0
 8017408:	d1dd      	bne.n	80173c6 <__gethex+0x26a>
 801740a:	e7ee      	b.n	80173ea <__gethex+0x28e>
 801740c:	08019024 	.word	0x08019024
 8017410:	08019191 	.word	0x08019191
 8017414:	080191a2 	.word	0x080191a2
 8017418:	1e6f      	subs	r7, r5, #1
 801741a:	f1b9 0f00 	cmp.w	r9, #0
 801741e:	d130      	bne.n	8017482 <__gethex+0x326>
 8017420:	b127      	cbz	r7, 801742c <__gethex+0x2d0>
 8017422:	4639      	mov	r1, r7
 8017424:	4620      	mov	r0, r4
 8017426:	f000 feb9 	bl	801819c <__any_on>
 801742a:	4681      	mov	r9, r0
 801742c:	117a      	asrs	r2, r7, #5
 801742e:	2301      	movs	r3, #1
 8017430:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8017434:	f007 071f 	and.w	r7, r7, #31
 8017438:	40bb      	lsls	r3, r7
 801743a:	4213      	tst	r3, r2
 801743c:	4629      	mov	r1, r5
 801743e:	4620      	mov	r0, r4
 8017440:	bf18      	it	ne
 8017442:	f049 0902 	orrne.w	r9, r9, #2
 8017446:	f7ff fe21 	bl	801708c <rshift>
 801744a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801744e:	1b76      	subs	r6, r6, r5
 8017450:	2502      	movs	r5, #2
 8017452:	f1b9 0f00 	cmp.w	r9, #0
 8017456:	d047      	beq.n	80174e8 <__gethex+0x38c>
 8017458:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801745c:	2b02      	cmp	r3, #2
 801745e:	d015      	beq.n	801748c <__gethex+0x330>
 8017460:	2b03      	cmp	r3, #3
 8017462:	d017      	beq.n	8017494 <__gethex+0x338>
 8017464:	2b01      	cmp	r3, #1
 8017466:	d109      	bne.n	801747c <__gethex+0x320>
 8017468:	f019 0f02 	tst.w	r9, #2
 801746c:	d006      	beq.n	801747c <__gethex+0x320>
 801746e:	f8da 3000 	ldr.w	r3, [sl]
 8017472:	ea49 0903 	orr.w	r9, r9, r3
 8017476:	f019 0f01 	tst.w	r9, #1
 801747a:	d10e      	bne.n	801749a <__gethex+0x33e>
 801747c:	f045 0510 	orr.w	r5, r5, #16
 8017480:	e032      	b.n	80174e8 <__gethex+0x38c>
 8017482:	f04f 0901 	mov.w	r9, #1
 8017486:	e7d1      	b.n	801742c <__gethex+0x2d0>
 8017488:	2501      	movs	r5, #1
 801748a:	e7e2      	b.n	8017452 <__gethex+0x2f6>
 801748c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801748e:	f1c3 0301 	rsb	r3, r3, #1
 8017492:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017494:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017496:	2b00      	cmp	r3, #0
 8017498:	d0f0      	beq.n	801747c <__gethex+0x320>
 801749a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801749e:	f104 0314 	add.w	r3, r4, #20
 80174a2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80174a6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80174aa:	f04f 0c00 	mov.w	ip, #0
 80174ae:	4618      	mov	r0, r3
 80174b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80174b4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80174b8:	d01b      	beq.n	80174f2 <__gethex+0x396>
 80174ba:	3201      	adds	r2, #1
 80174bc:	6002      	str	r2, [r0, #0]
 80174be:	2d02      	cmp	r5, #2
 80174c0:	f104 0314 	add.w	r3, r4, #20
 80174c4:	d13c      	bne.n	8017540 <__gethex+0x3e4>
 80174c6:	f8d8 2000 	ldr.w	r2, [r8]
 80174ca:	3a01      	subs	r2, #1
 80174cc:	42b2      	cmp	r2, r6
 80174ce:	d109      	bne.n	80174e4 <__gethex+0x388>
 80174d0:	1171      	asrs	r1, r6, #5
 80174d2:	2201      	movs	r2, #1
 80174d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80174d8:	f006 061f 	and.w	r6, r6, #31
 80174dc:	fa02 f606 	lsl.w	r6, r2, r6
 80174e0:	421e      	tst	r6, r3
 80174e2:	d13a      	bne.n	801755a <__gethex+0x3fe>
 80174e4:	f045 0520 	orr.w	r5, r5, #32
 80174e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80174ea:	601c      	str	r4, [r3, #0]
 80174ec:	9b02      	ldr	r3, [sp, #8]
 80174ee:	601f      	str	r7, [r3, #0]
 80174f0:	e6b0      	b.n	8017254 <__gethex+0xf8>
 80174f2:	4299      	cmp	r1, r3
 80174f4:	f843 cc04 	str.w	ip, [r3, #-4]
 80174f8:	d8d9      	bhi.n	80174ae <__gethex+0x352>
 80174fa:	68a3      	ldr	r3, [r4, #8]
 80174fc:	459b      	cmp	fp, r3
 80174fe:	db17      	blt.n	8017530 <__gethex+0x3d4>
 8017500:	6861      	ldr	r1, [r4, #4]
 8017502:	9801      	ldr	r0, [sp, #4]
 8017504:	3101      	adds	r1, #1
 8017506:	f000 f9bb 	bl	8017880 <_Balloc>
 801750a:	4681      	mov	r9, r0
 801750c:	b918      	cbnz	r0, 8017516 <__gethex+0x3ba>
 801750e:	4b1a      	ldr	r3, [pc, #104]	@ (8017578 <__gethex+0x41c>)
 8017510:	4602      	mov	r2, r0
 8017512:	2184      	movs	r1, #132	@ 0x84
 8017514:	e6c5      	b.n	80172a2 <__gethex+0x146>
 8017516:	6922      	ldr	r2, [r4, #16]
 8017518:	3202      	adds	r2, #2
 801751a:	f104 010c 	add.w	r1, r4, #12
 801751e:	0092      	lsls	r2, r2, #2
 8017520:	300c      	adds	r0, #12
 8017522:	f7ff fd52 	bl	8016fca <memcpy>
 8017526:	4621      	mov	r1, r4
 8017528:	9801      	ldr	r0, [sp, #4]
 801752a:	f000 f9e9 	bl	8017900 <_Bfree>
 801752e:	464c      	mov	r4, r9
 8017530:	6923      	ldr	r3, [r4, #16]
 8017532:	1c5a      	adds	r2, r3, #1
 8017534:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017538:	6122      	str	r2, [r4, #16]
 801753a:	2201      	movs	r2, #1
 801753c:	615a      	str	r2, [r3, #20]
 801753e:	e7be      	b.n	80174be <__gethex+0x362>
 8017540:	6922      	ldr	r2, [r4, #16]
 8017542:	455a      	cmp	r2, fp
 8017544:	dd0b      	ble.n	801755e <__gethex+0x402>
 8017546:	2101      	movs	r1, #1
 8017548:	4620      	mov	r0, r4
 801754a:	f7ff fd9f 	bl	801708c <rshift>
 801754e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017552:	3701      	adds	r7, #1
 8017554:	42bb      	cmp	r3, r7
 8017556:	f6ff aee0 	blt.w	801731a <__gethex+0x1be>
 801755a:	2501      	movs	r5, #1
 801755c:	e7c2      	b.n	80174e4 <__gethex+0x388>
 801755e:	f016 061f 	ands.w	r6, r6, #31
 8017562:	d0fa      	beq.n	801755a <__gethex+0x3fe>
 8017564:	4453      	add	r3, sl
 8017566:	f1c6 0620 	rsb	r6, r6, #32
 801756a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801756e:	f000 fa79 	bl	8017a64 <__hi0bits>
 8017572:	42b0      	cmp	r0, r6
 8017574:	dbe7      	blt.n	8017546 <__gethex+0x3ea>
 8017576:	e7f0      	b.n	801755a <__gethex+0x3fe>
 8017578:	08019191 	.word	0x08019191

0801757c <L_shift>:
 801757c:	f1c2 0208 	rsb	r2, r2, #8
 8017580:	0092      	lsls	r2, r2, #2
 8017582:	b570      	push	{r4, r5, r6, lr}
 8017584:	f1c2 0620 	rsb	r6, r2, #32
 8017588:	6843      	ldr	r3, [r0, #4]
 801758a:	6804      	ldr	r4, [r0, #0]
 801758c:	fa03 f506 	lsl.w	r5, r3, r6
 8017590:	432c      	orrs	r4, r5
 8017592:	40d3      	lsrs	r3, r2
 8017594:	6004      	str	r4, [r0, #0]
 8017596:	f840 3f04 	str.w	r3, [r0, #4]!
 801759a:	4288      	cmp	r0, r1
 801759c:	d3f4      	bcc.n	8017588 <L_shift+0xc>
 801759e:	bd70      	pop	{r4, r5, r6, pc}

080175a0 <__match>:
 80175a0:	b530      	push	{r4, r5, lr}
 80175a2:	6803      	ldr	r3, [r0, #0]
 80175a4:	3301      	adds	r3, #1
 80175a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80175aa:	b914      	cbnz	r4, 80175b2 <__match+0x12>
 80175ac:	6003      	str	r3, [r0, #0]
 80175ae:	2001      	movs	r0, #1
 80175b0:	bd30      	pop	{r4, r5, pc}
 80175b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80175b6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80175ba:	2d19      	cmp	r5, #25
 80175bc:	bf98      	it	ls
 80175be:	3220      	addls	r2, #32
 80175c0:	42a2      	cmp	r2, r4
 80175c2:	d0f0      	beq.n	80175a6 <__match+0x6>
 80175c4:	2000      	movs	r0, #0
 80175c6:	e7f3      	b.n	80175b0 <__match+0x10>

080175c8 <__hexnan>:
 80175c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175cc:	680b      	ldr	r3, [r1, #0]
 80175ce:	6801      	ldr	r1, [r0, #0]
 80175d0:	115e      	asrs	r6, r3, #5
 80175d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80175d6:	f013 031f 	ands.w	r3, r3, #31
 80175da:	b087      	sub	sp, #28
 80175dc:	bf18      	it	ne
 80175de:	3604      	addne	r6, #4
 80175e0:	2500      	movs	r5, #0
 80175e2:	1f37      	subs	r7, r6, #4
 80175e4:	4682      	mov	sl, r0
 80175e6:	4690      	mov	r8, r2
 80175e8:	9301      	str	r3, [sp, #4]
 80175ea:	f846 5c04 	str.w	r5, [r6, #-4]
 80175ee:	46b9      	mov	r9, r7
 80175f0:	463c      	mov	r4, r7
 80175f2:	9502      	str	r5, [sp, #8]
 80175f4:	46ab      	mov	fp, r5
 80175f6:	784a      	ldrb	r2, [r1, #1]
 80175f8:	1c4b      	adds	r3, r1, #1
 80175fa:	9303      	str	r3, [sp, #12]
 80175fc:	b342      	cbz	r2, 8017650 <__hexnan+0x88>
 80175fe:	4610      	mov	r0, r2
 8017600:	9105      	str	r1, [sp, #20]
 8017602:	9204      	str	r2, [sp, #16]
 8017604:	f7ff fd94 	bl	8017130 <__hexdig_fun>
 8017608:	2800      	cmp	r0, #0
 801760a:	d151      	bne.n	80176b0 <__hexnan+0xe8>
 801760c:	9a04      	ldr	r2, [sp, #16]
 801760e:	9905      	ldr	r1, [sp, #20]
 8017610:	2a20      	cmp	r2, #32
 8017612:	d818      	bhi.n	8017646 <__hexnan+0x7e>
 8017614:	9b02      	ldr	r3, [sp, #8]
 8017616:	459b      	cmp	fp, r3
 8017618:	dd13      	ble.n	8017642 <__hexnan+0x7a>
 801761a:	454c      	cmp	r4, r9
 801761c:	d206      	bcs.n	801762c <__hexnan+0x64>
 801761e:	2d07      	cmp	r5, #7
 8017620:	dc04      	bgt.n	801762c <__hexnan+0x64>
 8017622:	462a      	mov	r2, r5
 8017624:	4649      	mov	r1, r9
 8017626:	4620      	mov	r0, r4
 8017628:	f7ff ffa8 	bl	801757c <L_shift>
 801762c:	4544      	cmp	r4, r8
 801762e:	d952      	bls.n	80176d6 <__hexnan+0x10e>
 8017630:	2300      	movs	r3, #0
 8017632:	f1a4 0904 	sub.w	r9, r4, #4
 8017636:	f844 3c04 	str.w	r3, [r4, #-4]
 801763a:	f8cd b008 	str.w	fp, [sp, #8]
 801763e:	464c      	mov	r4, r9
 8017640:	461d      	mov	r5, r3
 8017642:	9903      	ldr	r1, [sp, #12]
 8017644:	e7d7      	b.n	80175f6 <__hexnan+0x2e>
 8017646:	2a29      	cmp	r2, #41	@ 0x29
 8017648:	d157      	bne.n	80176fa <__hexnan+0x132>
 801764a:	3102      	adds	r1, #2
 801764c:	f8ca 1000 	str.w	r1, [sl]
 8017650:	f1bb 0f00 	cmp.w	fp, #0
 8017654:	d051      	beq.n	80176fa <__hexnan+0x132>
 8017656:	454c      	cmp	r4, r9
 8017658:	d206      	bcs.n	8017668 <__hexnan+0xa0>
 801765a:	2d07      	cmp	r5, #7
 801765c:	dc04      	bgt.n	8017668 <__hexnan+0xa0>
 801765e:	462a      	mov	r2, r5
 8017660:	4649      	mov	r1, r9
 8017662:	4620      	mov	r0, r4
 8017664:	f7ff ff8a 	bl	801757c <L_shift>
 8017668:	4544      	cmp	r4, r8
 801766a:	d936      	bls.n	80176da <__hexnan+0x112>
 801766c:	f1a8 0204 	sub.w	r2, r8, #4
 8017670:	4623      	mov	r3, r4
 8017672:	f853 1b04 	ldr.w	r1, [r3], #4
 8017676:	f842 1f04 	str.w	r1, [r2, #4]!
 801767a:	429f      	cmp	r7, r3
 801767c:	d2f9      	bcs.n	8017672 <__hexnan+0xaa>
 801767e:	1b3b      	subs	r3, r7, r4
 8017680:	f023 0303 	bic.w	r3, r3, #3
 8017684:	3304      	adds	r3, #4
 8017686:	3401      	adds	r4, #1
 8017688:	3e03      	subs	r6, #3
 801768a:	42b4      	cmp	r4, r6
 801768c:	bf88      	it	hi
 801768e:	2304      	movhi	r3, #4
 8017690:	4443      	add	r3, r8
 8017692:	2200      	movs	r2, #0
 8017694:	f843 2b04 	str.w	r2, [r3], #4
 8017698:	429f      	cmp	r7, r3
 801769a:	d2fb      	bcs.n	8017694 <__hexnan+0xcc>
 801769c:	683b      	ldr	r3, [r7, #0]
 801769e:	b91b      	cbnz	r3, 80176a8 <__hexnan+0xe0>
 80176a0:	4547      	cmp	r7, r8
 80176a2:	d128      	bne.n	80176f6 <__hexnan+0x12e>
 80176a4:	2301      	movs	r3, #1
 80176a6:	603b      	str	r3, [r7, #0]
 80176a8:	2005      	movs	r0, #5
 80176aa:	b007      	add	sp, #28
 80176ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176b0:	3501      	adds	r5, #1
 80176b2:	2d08      	cmp	r5, #8
 80176b4:	f10b 0b01 	add.w	fp, fp, #1
 80176b8:	dd06      	ble.n	80176c8 <__hexnan+0x100>
 80176ba:	4544      	cmp	r4, r8
 80176bc:	d9c1      	bls.n	8017642 <__hexnan+0x7a>
 80176be:	2300      	movs	r3, #0
 80176c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80176c4:	2501      	movs	r5, #1
 80176c6:	3c04      	subs	r4, #4
 80176c8:	6822      	ldr	r2, [r4, #0]
 80176ca:	f000 000f 	and.w	r0, r0, #15
 80176ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80176d2:	6020      	str	r0, [r4, #0]
 80176d4:	e7b5      	b.n	8017642 <__hexnan+0x7a>
 80176d6:	2508      	movs	r5, #8
 80176d8:	e7b3      	b.n	8017642 <__hexnan+0x7a>
 80176da:	9b01      	ldr	r3, [sp, #4]
 80176dc:	2b00      	cmp	r3, #0
 80176de:	d0dd      	beq.n	801769c <__hexnan+0xd4>
 80176e0:	f1c3 0320 	rsb	r3, r3, #32
 80176e4:	f04f 32ff 	mov.w	r2, #4294967295
 80176e8:	40da      	lsrs	r2, r3
 80176ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80176ee:	4013      	ands	r3, r2
 80176f0:	f846 3c04 	str.w	r3, [r6, #-4]
 80176f4:	e7d2      	b.n	801769c <__hexnan+0xd4>
 80176f6:	3f04      	subs	r7, #4
 80176f8:	e7d0      	b.n	801769c <__hexnan+0xd4>
 80176fa:	2004      	movs	r0, #4
 80176fc:	e7d5      	b.n	80176aa <__hexnan+0xe2>
	...

08017700 <sbrk_aligned>:
 8017700:	b570      	push	{r4, r5, r6, lr}
 8017702:	4e0f      	ldr	r6, [pc, #60]	@ (8017740 <sbrk_aligned+0x40>)
 8017704:	460c      	mov	r4, r1
 8017706:	6831      	ldr	r1, [r6, #0]
 8017708:	4605      	mov	r5, r0
 801770a:	b911      	cbnz	r1, 8017712 <sbrk_aligned+0x12>
 801770c:	f000 fe20 	bl	8018350 <_sbrk_r>
 8017710:	6030      	str	r0, [r6, #0]
 8017712:	4621      	mov	r1, r4
 8017714:	4628      	mov	r0, r5
 8017716:	f000 fe1b 	bl	8018350 <_sbrk_r>
 801771a:	1c43      	adds	r3, r0, #1
 801771c:	d103      	bne.n	8017726 <sbrk_aligned+0x26>
 801771e:	f04f 34ff 	mov.w	r4, #4294967295
 8017722:	4620      	mov	r0, r4
 8017724:	bd70      	pop	{r4, r5, r6, pc}
 8017726:	1cc4      	adds	r4, r0, #3
 8017728:	f024 0403 	bic.w	r4, r4, #3
 801772c:	42a0      	cmp	r0, r4
 801772e:	d0f8      	beq.n	8017722 <sbrk_aligned+0x22>
 8017730:	1a21      	subs	r1, r4, r0
 8017732:	4628      	mov	r0, r5
 8017734:	f000 fe0c 	bl	8018350 <_sbrk_r>
 8017738:	3001      	adds	r0, #1
 801773a:	d1f2      	bne.n	8017722 <sbrk_aligned+0x22>
 801773c:	e7ef      	b.n	801771e <sbrk_aligned+0x1e>
 801773e:	bf00      	nop
 8017740:	2400683c 	.word	0x2400683c

08017744 <_malloc_r>:
 8017744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017748:	1ccd      	adds	r5, r1, #3
 801774a:	f025 0503 	bic.w	r5, r5, #3
 801774e:	3508      	adds	r5, #8
 8017750:	2d0c      	cmp	r5, #12
 8017752:	bf38      	it	cc
 8017754:	250c      	movcc	r5, #12
 8017756:	2d00      	cmp	r5, #0
 8017758:	4606      	mov	r6, r0
 801775a:	db01      	blt.n	8017760 <_malloc_r+0x1c>
 801775c:	42a9      	cmp	r1, r5
 801775e:	d904      	bls.n	801776a <_malloc_r+0x26>
 8017760:	230c      	movs	r3, #12
 8017762:	6033      	str	r3, [r6, #0]
 8017764:	2000      	movs	r0, #0
 8017766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801776a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017840 <_malloc_r+0xfc>
 801776e:	f000 f87b 	bl	8017868 <__malloc_lock>
 8017772:	f8d8 3000 	ldr.w	r3, [r8]
 8017776:	461c      	mov	r4, r3
 8017778:	bb44      	cbnz	r4, 80177cc <_malloc_r+0x88>
 801777a:	4629      	mov	r1, r5
 801777c:	4630      	mov	r0, r6
 801777e:	f7ff ffbf 	bl	8017700 <sbrk_aligned>
 8017782:	1c43      	adds	r3, r0, #1
 8017784:	4604      	mov	r4, r0
 8017786:	d158      	bne.n	801783a <_malloc_r+0xf6>
 8017788:	f8d8 4000 	ldr.w	r4, [r8]
 801778c:	4627      	mov	r7, r4
 801778e:	2f00      	cmp	r7, #0
 8017790:	d143      	bne.n	801781a <_malloc_r+0xd6>
 8017792:	2c00      	cmp	r4, #0
 8017794:	d04b      	beq.n	801782e <_malloc_r+0xea>
 8017796:	6823      	ldr	r3, [r4, #0]
 8017798:	4639      	mov	r1, r7
 801779a:	4630      	mov	r0, r6
 801779c:	eb04 0903 	add.w	r9, r4, r3
 80177a0:	f000 fdd6 	bl	8018350 <_sbrk_r>
 80177a4:	4581      	cmp	r9, r0
 80177a6:	d142      	bne.n	801782e <_malloc_r+0xea>
 80177a8:	6821      	ldr	r1, [r4, #0]
 80177aa:	1a6d      	subs	r5, r5, r1
 80177ac:	4629      	mov	r1, r5
 80177ae:	4630      	mov	r0, r6
 80177b0:	f7ff ffa6 	bl	8017700 <sbrk_aligned>
 80177b4:	3001      	adds	r0, #1
 80177b6:	d03a      	beq.n	801782e <_malloc_r+0xea>
 80177b8:	6823      	ldr	r3, [r4, #0]
 80177ba:	442b      	add	r3, r5
 80177bc:	6023      	str	r3, [r4, #0]
 80177be:	f8d8 3000 	ldr.w	r3, [r8]
 80177c2:	685a      	ldr	r2, [r3, #4]
 80177c4:	bb62      	cbnz	r2, 8017820 <_malloc_r+0xdc>
 80177c6:	f8c8 7000 	str.w	r7, [r8]
 80177ca:	e00f      	b.n	80177ec <_malloc_r+0xa8>
 80177cc:	6822      	ldr	r2, [r4, #0]
 80177ce:	1b52      	subs	r2, r2, r5
 80177d0:	d420      	bmi.n	8017814 <_malloc_r+0xd0>
 80177d2:	2a0b      	cmp	r2, #11
 80177d4:	d917      	bls.n	8017806 <_malloc_r+0xc2>
 80177d6:	1961      	adds	r1, r4, r5
 80177d8:	42a3      	cmp	r3, r4
 80177da:	6025      	str	r5, [r4, #0]
 80177dc:	bf18      	it	ne
 80177de:	6059      	strne	r1, [r3, #4]
 80177e0:	6863      	ldr	r3, [r4, #4]
 80177e2:	bf08      	it	eq
 80177e4:	f8c8 1000 	streq.w	r1, [r8]
 80177e8:	5162      	str	r2, [r4, r5]
 80177ea:	604b      	str	r3, [r1, #4]
 80177ec:	4630      	mov	r0, r6
 80177ee:	f000 f841 	bl	8017874 <__malloc_unlock>
 80177f2:	f104 000b 	add.w	r0, r4, #11
 80177f6:	1d23      	adds	r3, r4, #4
 80177f8:	f020 0007 	bic.w	r0, r0, #7
 80177fc:	1ac2      	subs	r2, r0, r3
 80177fe:	bf1c      	itt	ne
 8017800:	1a1b      	subne	r3, r3, r0
 8017802:	50a3      	strne	r3, [r4, r2]
 8017804:	e7af      	b.n	8017766 <_malloc_r+0x22>
 8017806:	6862      	ldr	r2, [r4, #4]
 8017808:	42a3      	cmp	r3, r4
 801780a:	bf0c      	ite	eq
 801780c:	f8c8 2000 	streq.w	r2, [r8]
 8017810:	605a      	strne	r2, [r3, #4]
 8017812:	e7eb      	b.n	80177ec <_malloc_r+0xa8>
 8017814:	4623      	mov	r3, r4
 8017816:	6864      	ldr	r4, [r4, #4]
 8017818:	e7ae      	b.n	8017778 <_malloc_r+0x34>
 801781a:	463c      	mov	r4, r7
 801781c:	687f      	ldr	r7, [r7, #4]
 801781e:	e7b6      	b.n	801778e <_malloc_r+0x4a>
 8017820:	461a      	mov	r2, r3
 8017822:	685b      	ldr	r3, [r3, #4]
 8017824:	42a3      	cmp	r3, r4
 8017826:	d1fb      	bne.n	8017820 <_malloc_r+0xdc>
 8017828:	2300      	movs	r3, #0
 801782a:	6053      	str	r3, [r2, #4]
 801782c:	e7de      	b.n	80177ec <_malloc_r+0xa8>
 801782e:	230c      	movs	r3, #12
 8017830:	6033      	str	r3, [r6, #0]
 8017832:	4630      	mov	r0, r6
 8017834:	f000 f81e 	bl	8017874 <__malloc_unlock>
 8017838:	e794      	b.n	8017764 <_malloc_r+0x20>
 801783a:	6005      	str	r5, [r0, #0]
 801783c:	e7d6      	b.n	80177ec <_malloc_r+0xa8>
 801783e:	bf00      	nop
 8017840:	24006840 	.word	0x24006840

08017844 <__ascii_mbtowc>:
 8017844:	b082      	sub	sp, #8
 8017846:	b901      	cbnz	r1, 801784a <__ascii_mbtowc+0x6>
 8017848:	a901      	add	r1, sp, #4
 801784a:	b142      	cbz	r2, 801785e <__ascii_mbtowc+0x1a>
 801784c:	b14b      	cbz	r3, 8017862 <__ascii_mbtowc+0x1e>
 801784e:	7813      	ldrb	r3, [r2, #0]
 8017850:	600b      	str	r3, [r1, #0]
 8017852:	7812      	ldrb	r2, [r2, #0]
 8017854:	1e10      	subs	r0, r2, #0
 8017856:	bf18      	it	ne
 8017858:	2001      	movne	r0, #1
 801785a:	b002      	add	sp, #8
 801785c:	4770      	bx	lr
 801785e:	4610      	mov	r0, r2
 8017860:	e7fb      	b.n	801785a <__ascii_mbtowc+0x16>
 8017862:	f06f 0001 	mvn.w	r0, #1
 8017866:	e7f8      	b.n	801785a <__ascii_mbtowc+0x16>

08017868 <__malloc_lock>:
 8017868:	4801      	ldr	r0, [pc, #4]	@ (8017870 <__malloc_lock+0x8>)
 801786a:	f7ff bbac 	b.w	8016fc6 <__retarget_lock_acquire_recursive>
 801786e:	bf00      	nop
 8017870:	24006838 	.word	0x24006838

08017874 <__malloc_unlock>:
 8017874:	4801      	ldr	r0, [pc, #4]	@ (801787c <__malloc_unlock+0x8>)
 8017876:	f7ff bba7 	b.w	8016fc8 <__retarget_lock_release_recursive>
 801787a:	bf00      	nop
 801787c:	24006838 	.word	0x24006838

08017880 <_Balloc>:
 8017880:	b570      	push	{r4, r5, r6, lr}
 8017882:	69c6      	ldr	r6, [r0, #28]
 8017884:	4604      	mov	r4, r0
 8017886:	460d      	mov	r5, r1
 8017888:	b976      	cbnz	r6, 80178a8 <_Balloc+0x28>
 801788a:	2010      	movs	r0, #16
 801788c:	f000 fda2 	bl	80183d4 <malloc>
 8017890:	4602      	mov	r2, r0
 8017892:	61e0      	str	r0, [r4, #28]
 8017894:	b920      	cbnz	r0, 80178a0 <_Balloc+0x20>
 8017896:	4b18      	ldr	r3, [pc, #96]	@ (80178f8 <_Balloc+0x78>)
 8017898:	4818      	ldr	r0, [pc, #96]	@ (80178fc <_Balloc+0x7c>)
 801789a:	216b      	movs	r1, #107	@ 0x6b
 801789c:	f000 fd68 	bl	8018370 <__assert_func>
 80178a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80178a4:	6006      	str	r6, [r0, #0]
 80178a6:	60c6      	str	r6, [r0, #12]
 80178a8:	69e6      	ldr	r6, [r4, #28]
 80178aa:	68f3      	ldr	r3, [r6, #12]
 80178ac:	b183      	cbz	r3, 80178d0 <_Balloc+0x50>
 80178ae:	69e3      	ldr	r3, [r4, #28]
 80178b0:	68db      	ldr	r3, [r3, #12]
 80178b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80178b6:	b9b8      	cbnz	r0, 80178e8 <_Balloc+0x68>
 80178b8:	2101      	movs	r1, #1
 80178ba:	fa01 f605 	lsl.w	r6, r1, r5
 80178be:	1d72      	adds	r2, r6, #5
 80178c0:	0092      	lsls	r2, r2, #2
 80178c2:	4620      	mov	r0, r4
 80178c4:	f000 fd72 	bl	80183ac <_calloc_r>
 80178c8:	b160      	cbz	r0, 80178e4 <_Balloc+0x64>
 80178ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80178ce:	e00e      	b.n	80178ee <_Balloc+0x6e>
 80178d0:	2221      	movs	r2, #33	@ 0x21
 80178d2:	2104      	movs	r1, #4
 80178d4:	4620      	mov	r0, r4
 80178d6:	f000 fd69 	bl	80183ac <_calloc_r>
 80178da:	69e3      	ldr	r3, [r4, #28]
 80178dc:	60f0      	str	r0, [r6, #12]
 80178de:	68db      	ldr	r3, [r3, #12]
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d1e4      	bne.n	80178ae <_Balloc+0x2e>
 80178e4:	2000      	movs	r0, #0
 80178e6:	bd70      	pop	{r4, r5, r6, pc}
 80178e8:	6802      	ldr	r2, [r0, #0]
 80178ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80178ee:	2300      	movs	r3, #0
 80178f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80178f4:	e7f7      	b.n	80178e6 <_Balloc+0x66>
 80178f6:	bf00      	nop
 80178f8:	08019202 	.word	0x08019202
 80178fc:	08019219 	.word	0x08019219

08017900 <_Bfree>:
 8017900:	b570      	push	{r4, r5, r6, lr}
 8017902:	69c6      	ldr	r6, [r0, #28]
 8017904:	4605      	mov	r5, r0
 8017906:	460c      	mov	r4, r1
 8017908:	b976      	cbnz	r6, 8017928 <_Bfree+0x28>
 801790a:	2010      	movs	r0, #16
 801790c:	f000 fd62 	bl	80183d4 <malloc>
 8017910:	4602      	mov	r2, r0
 8017912:	61e8      	str	r0, [r5, #28]
 8017914:	b920      	cbnz	r0, 8017920 <_Bfree+0x20>
 8017916:	4b09      	ldr	r3, [pc, #36]	@ (801793c <_Bfree+0x3c>)
 8017918:	4809      	ldr	r0, [pc, #36]	@ (8017940 <_Bfree+0x40>)
 801791a:	218f      	movs	r1, #143	@ 0x8f
 801791c:	f000 fd28 	bl	8018370 <__assert_func>
 8017920:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017924:	6006      	str	r6, [r0, #0]
 8017926:	60c6      	str	r6, [r0, #12]
 8017928:	b13c      	cbz	r4, 801793a <_Bfree+0x3a>
 801792a:	69eb      	ldr	r3, [r5, #28]
 801792c:	6862      	ldr	r2, [r4, #4]
 801792e:	68db      	ldr	r3, [r3, #12]
 8017930:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017934:	6021      	str	r1, [r4, #0]
 8017936:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801793a:	bd70      	pop	{r4, r5, r6, pc}
 801793c:	08019202 	.word	0x08019202
 8017940:	08019219 	.word	0x08019219

08017944 <__multadd>:
 8017944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017948:	690d      	ldr	r5, [r1, #16]
 801794a:	4607      	mov	r7, r0
 801794c:	460c      	mov	r4, r1
 801794e:	461e      	mov	r6, r3
 8017950:	f101 0c14 	add.w	ip, r1, #20
 8017954:	2000      	movs	r0, #0
 8017956:	f8dc 3000 	ldr.w	r3, [ip]
 801795a:	b299      	uxth	r1, r3
 801795c:	fb02 6101 	mla	r1, r2, r1, r6
 8017960:	0c1e      	lsrs	r6, r3, #16
 8017962:	0c0b      	lsrs	r3, r1, #16
 8017964:	fb02 3306 	mla	r3, r2, r6, r3
 8017968:	b289      	uxth	r1, r1
 801796a:	3001      	adds	r0, #1
 801796c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017970:	4285      	cmp	r5, r0
 8017972:	f84c 1b04 	str.w	r1, [ip], #4
 8017976:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801797a:	dcec      	bgt.n	8017956 <__multadd+0x12>
 801797c:	b30e      	cbz	r6, 80179c2 <__multadd+0x7e>
 801797e:	68a3      	ldr	r3, [r4, #8]
 8017980:	42ab      	cmp	r3, r5
 8017982:	dc19      	bgt.n	80179b8 <__multadd+0x74>
 8017984:	6861      	ldr	r1, [r4, #4]
 8017986:	4638      	mov	r0, r7
 8017988:	3101      	adds	r1, #1
 801798a:	f7ff ff79 	bl	8017880 <_Balloc>
 801798e:	4680      	mov	r8, r0
 8017990:	b928      	cbnz	r0, 801799e <__multadd+0x5a>
 8017992:	4602      	mov	r2, r0
 8017994:	4b0c      	ldr	r3, [pc, #48]	@ (80179c8 <__multadd+0x84>)
 8017996:	480d      	ldr	r0, [pc, #52]	@ (80179cc <__multadd+0x88>)
 8017998:	21ba      	movs	r1, #186	@ 0xba
 801799a:	f000 fce9 	bl	8018370 <__assert_func>
 801799e:	6922      	ldr	r2, [r4, #16]
 80179a0:	3202      	adds	r2, #2
 80179a2:	f104 010c 	add.w	r1, r4, #12
 80179a6:	0092      	lsls	r2, r2, #2
 80179a8:	300c      	adds	r0, #12
 80179aa:	f7ff fb0e 	bl	8016fca <memcpy>
 80179ae:	4621      	mov	r1, r4
 80179b0:	4638      	mov	r0, r7
 80179b2:	f7ff ffa5 	bl	8017900 <_Bfree>
 80179b6:	4644      	mov	r4, r8
 80179b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80179bc:	3501      	adds	r5, #1
 80179be:	615e      	str	r6, [r3, #20]
 80179c0:	6125      	str	r5, [r4, #16]
 80179c2:	4620      	mov	r0, r4
 80179c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179c8:	08019191 	.word	0x08019191
 80179cc:	08019219 	.word	0x08019219

080179d0 <__s2b>:
 80179d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80179d4:	460c      	mov	r4, r1
 80179d6:	4615      	mov	r5, r2
 80179d8:	461f      	mov	r7, r3
 80179da:	2209      	movs	r2, #9
 80179dc:	3308      	adds	r3, #8
 80179de:	4606      	mov	r6, r0
 80179e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80179e4:	2100      	movs	r1, #0
 80179e6:	2201      	movs	r2, #1
 80179e8:	429a      	cmp	r2, r3
 80179ea:	db09      	blt.n	8017a00 <__s2b+0x30>
 80179ec:	4630      	mov	r0, r6
 80179ee:	f7ff ff47 	bl	8017880 <_Balloc>
 80179f2:	b940      	cbnz	r0, 8017a06 <__s2b+0x36>
 80179f4:	4602      	mov	r2, r0
 80179f6:	4b19      	ldr	r3, [pc, #100]	@ (8017a5c <__s2b+0x8c>)
 80179f8:	4819      	ldr	r0, [pc, #100]	@ (8017a60 <__s2b+0x90>)
 80179fa:	21d3      	movs	r1, #211	@ 0xd3
 80179fc:	f000 fcb8 	bl	8018370 <__assert_func>
 8017a00:	0052      	lsls	r2, r2, #1
 8017a02:	3101      	adds	r1, #1
 8017a04:	e7f0      	b.n	80179e8 <__s2b+0x18>
 8017a06:	9b08      	ldr	r3, [sp, #32]
 8017a08:	6143      	str	r3, [r0, #20]
 8017a0a:	2d09      	cmp	r5, #9
 8017a0c:	f04f 0301 	mov.w	r3, #1
 8017a10:	6103      	str	r3, [r0, #16]
 8017a12:	dd16      	ble.n	8017a42 <__s2b+0x72>
 8017a14:	f104 0909 	add.w	r9, r4, #9
 8017a18:	46c8      	mov	r8, r9
 8017a1a:	442c      	add	r4, r5
 8017a1c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8017a20:	4601      	mov	r1, r0
 8017a22:	3b30      	subs	r3, #48	@ 0x30
 8017a24:	220a      	movs	r2, #10
 8017a26:	4630      	mov	r0, r6
 8017a28:	f7ff ff8c 	bl	8017944 <__multadd>
 8017a2c:	45a0      	cmp	r8, r4
 8017a2e:	d1f5      	bne.n	8017a1c <__s2b+0x4c>
 8017a30:	f1a5 0408 	sub.w	r4, r5, #8
 8017a34:	444c      	add	r4, r9
 8017a36:	1b2d      	subs	r5, r5, r4
 8017a38:	1963      	adds	r3, r4, r5
 8017a3a:	42bb      	cmp	r3, r7
 8017a3c:	db04      	blt.n	8017a48 <__s2b+0x78>
 8017a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a42:	340a      	adds	r4, #10
 8017a44:	2509      	movs	r5, #9
 8017a46:	e7f6      	b.n	8017a36 <__s2b+0x66>
 8017a48:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017a4c:	4601      	mov	r1, r0
 8017a4e:	3b30      	subs	r3, #48	@ 0x30
 8017a50:	220a      	movs	r2, #10
 8017a52:	4630      	mov	r0, r6
 8017a54:	f7ff ff76 	bl	8017944 <__multadd>
 8017a58:	e7ee      	b.n	8017a38 <__s2b+0x68>
 8017a5a:	bf00      	nop
 8017a5c:	08019191 	.word	0x08019191
 8017a60:	08019219 	.word	0x08019219

08017a64 <__hi0bits>:
 8017a64:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8017a68:	4603      	mov	r3, r0
 8017a6a:	bf36      	itet	cc
 8017a6c:	0403      	lslcc	r3, r0, #16
 8017a6e:	2000      	movcs	r0, #0
 8017a70:	2010      	movcc	r0, #16
 8017a72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8017a76:	bf3c      	itt	cc
 8017a78:	021b      	lslcc	r3, r3, #8
 8017a7a:	3008      	addcc	r0, #8
 8017a7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017a80:	bf3c      	itt	cc
 8017a82:	011b      	lslcc	r3, r3, #4
 8017a84:	3004      	addcc	r0, #4
 8017a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017a8a:	bf3c      	itt	cc
 8017a8c:	009b      	lslcc	r3, r3, #2
 8017a8e:	3002      	addcc	r0, #2
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	db05      	blt.n	8017aa0 <__hi0bits+0x3c>
 8017a94:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8017a98:	f100 0001 	add.w	r0, r0, #1
 8017a9c:	bf08      	it	eq
 8017a9e:	2020      	moveq	r0, #32
 8017aa0:	4770      	bx	lr

08017aa2 <__lo0bits>:
 8017aa2:	6803      	ldr	r3, [r0, #0]
 8017aa4:	4602      	mov	r2, r0
 8017aa6:	f013 0007 	ands.w	r0, r3, #7
 8017aaa:	d00b      	beq.n	8017ac4 <__lo0bits+0x22>
 8017aac:	07d9      	lsls	r1, r3, #31
 8017aae:	d421      	bmi.n	8017af4 <__lo0bits+0x52>
 8017ab0:	0798      	lsls	r0, r3, #30
 8017ab2:	bf49      	itett	mi
 8017ab4:	085b      	lsrmi	r3, r3, #1
 8017ab6:	089b      	lsrpl	r3, r3, #2
 8017ab8:	2001      	movmi	r0, #1
 8017aba:	6013      	strmi	r3, [r2, #0]
 8017abc:	bf5c      	itt	pl
 8017abe:	6013      	strpl	r3, [r2, #0]
 8017ac0:	2002      	movpl	r0, #2
 8017ac2:	4770      	bx	lr
 8017ac4:	b299      	uxth	r1, r3
 8017ac6:	b909      	cbnz	r1, 8017acc <__lo0bits+0x2a>
 8017ac8:	0c1b      	lsrs	r3, r3, #16
 8017aca:	2010      	movs	r0, #16
 8017acc:	b2d9      	uxtb	r1, r3
 8017ace:	b909      	cbnz	r1, 8017ad4 <__lo0bits+0x32>
 8017ad0:	3008      	adds	r0, #8
 8017ad2:	0a1b      	lsrs	r3, r3, #8
 8017ad4:	0719      	lsls	r1, r3, #28
 8017ad6:	bf04      	itt	eq
 8017ad8:	091b      	lsreq	r3, r3, #4
 8017ada:	3004      	addeq	r0, #4
 8017adc:	0799      	lsls	r1, r3, #30
 8017ade:	bf04      	itt	eq
 8017ae0:	089b      	lsreq	r3, r3, #2
 8017ae2:	3002      	addeq	r0, #2
 8017ae4:	07d9      	lsls	r1, r3, #31
 8017ae6:	d403      	bmi.n	8017af0 <__lo0bits+0x4e>
 8017ae8:	085b      	lsrs	r3, r3, #1
 8017aea:	f100 0001 	add.w	r0, r0, #1
 8017aee:	d003      	beq.n	8017af8 <__lo0bits+0x56>
 8017af0:	6013      	str	r3, [r2, #0]
 8017af2:	4770      	bx	lr
 8017af4:	2000      	movs	r0, #0
 8017af6:	4770      	bx	lr
 8017af8:	2020      	movs	r0, #32
 8017afa:	4770      	bx	lr

08017afc <__i2b>:
 8017afc:	b510      	push	{r4, lr}
 8017afe:	460c      	mov	r4, r1
 8017b00:	2101      	movs	r1, #1
 8017b02:	f7ff febd 	bl	8017880 <_Balloc>
 8017b06:	4602      	mov	r2, r0
 8017b08:	b928      	cbnz	r0, 8017b16 <__i2b+0x1a>
 8017b0a:	4b05      	ldr	r3, [pc, #20]	@ (8017b20 <__i2b+0x24>)
 8017b0c:	4805      	ldr	r0, [pc, #20]	@ (8017b24 <__i2b+0x28>)
 8017b0e:	f240 1145 	movw	r1, #325	@ 0x145
 8017b12:	f000 fc2d 	bl	8018370 <__assert_func>
 8017b16:	2301      	movs	r3, #1
 8017b18:	6144      	str	r4, [r0, #20]
 8017b1a:	6103      	str	r3, [r0, #16]
 8017b1c:	bd10      	pop	{r4, pc}
 8017b1e:	bf00      	nop
 8017b20:	08019191 	.word	0x08019191
 8017b24:	08019219 	.word	0x08019219

08017b28 <__multiply>:
 8017b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b2c:	4614      	mov	r4, r2
 8017b2e:	690a      	ldr	r2, [r1, #16]
 8017b30:	6923      	ldr	r3, [r4, #16]
 8017b32:	429a      	cmp	r2, r3
 8017b34:	bfa8      	it	ge
 8017b36:	4623      	movge	r3, r4
 8017b38:	460f      	mov	r7, r1
 8017b3a:	bfa4      	itt	ge
 8017b3c:	460c      	movge	r4, r1
 8017b3e:	461f      	movge	r7, r3
 8017b40:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8017b44:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8017b48:	68a3      	ldr	r3, [r4, #8]
 8017b4a:	6861      	ldr	r1, [r4, #4]
 8017b4c:	eb0a 0609 	add.w	r6, sl, r9
 8017b50:	42b3      	cmp	r3, r6
 8017b52:	b085      	sub	sp, #20
 8017b54:	bfb8      	it	lt
 8017b56:	3101      	addlt	r1, #1
 8017b58:	f7ff fe92 	bl	8017880 <_Balloc>
 8017b5c:	b930      	cbnz	r0, 8017b6c <__multiply+0x44>
 8017b5e:	4602      	mov	r2, r0
 8017b60:	4b44      	ldr	r3, [pc, #272]	@ (8017c74 <__multiply+0x14c>)
 8017b62:	4845      	ldr	r0, [pc, #276]	@ (8017c78 <__multiply+0x150>)
 8017b64:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8017b68:	f000 fc02 	bl	8018370 <__assert_func>
 8017b6c:	f100 0514 	add.w	r5, r0, #20
 8017b70:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017b74:	462b      	mov	r3, r5
 8017b76:	2200      	movs	r2, #0
 8017b78:	4543      	cmp	r3, r8
 8017b7a:	d321      	bcc.n	8017bc0 <__multiply+0x98>
 8017b7c:	f107 0114 	add.w	r1, r7, #20
 8017b80:	f104 0214 	add.w	r2, r4, #20
 8017b84:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8017b88:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8017b8c:	9302      	str	r3, [sp, #8]
 8017b8e:	1b13      	subs	r3, r2, r4
 8017b90:	3b15      	subs	r3, #21
 8017b92:	f023 0303 	bic.w	r3, r3, #3
 8017b96:	3304      	adds	r3, #4
 8017b98:	f104 0715 	add.w	r7, r4, #21
 8017b9c:	42ba      	cmp	r2, r7
 8017b9e:	bf38      	it	cc
 8017ba0:	2304      	movcc	r3, #4
 8017ba2:	9301      	str	r3, [sp, #4]
 8017ba4:	9b02      	ldr	r3, [sp, #8]
 8017ba6:	9103      	str	r1, [sp, #12]
 8017ba8:	428b      	cmp	r3, r1
 8017baa:	d80c      	bhi.n	8017bc6 <__multiply+0x9e>
 8017bac:	2e00      	cmp	r6, #0
 8017bae:	dd03      	ble.n	8017bb8 <__multiply+0x90>
 8017bb0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	d05b      	beq.n	8017c70 <__multiply+0x148>
 8017bb8:	6106      	str	r6, [r0, #16]
 8017bba:	b005      	add	sp, #20
 8017bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bc0:	f843 2b04 	str.w	r2, [r3], #4
 8017bc4:	e7d8      	b.n	8017b78 <__multiply+0x50>
 8017bc6:	f8b1 a000 	ldrh.w	sl, [r1]
 8017bca:	f1ba 0f00 	cmp.w	sl, #0
 8017bce:	d024      	beq.n	8017c1a <__multiply+0xf2>
 8017bd0:	f104 0e14 	add.w	lr, r4, #20
 8017bd4:	46a9      	mov	r9, r5
 8017bd6:	f04f 0c00 	mov.w	ip, #0
 8017bda:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017bde:	f8d9 3000 	ldr.w	r3, [r9]
 8017be2:	fa1f fb87 	uxth.w	fp, r7
 8017be6:	b29b      	uxth	r3, r3
 8017be8:	fb0a 330b 	mla	r3, sl, fp, r3
 8017bec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8017bf0:	f8d9 7000 	ldr.w	r7, [r9]
 8017bf4:	4463      	add	r3, ip
 8017bf6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8017bfa:	fb0a c70b 	mla	r7, sl, fp, ip
 8017bfe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8017c02:	b29b      	uxth	r3, r3
 8017c04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8017c08:	4572      	cmp	r2, lr
 8017c0a:	f849 3b04 	str.w	r3, [r9], #4
 8017c0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8017c12:	d8e2      	bhi.n	8017bda <__multiply+0xb2>
 8017c14:	9b01      	ldr	r3, [sp, #4]
 8017c16:	f845 c003 	str.w	ip, [r5, r3]
 8017c1a:	9b03      	ldr	r3, [sp, #12]
 8017c1c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8017c20:	3104      	adds	r1, #4
 8017c22:	f1b9 0f00 	cmp.w	r9, #0
 8017c26:	d021      	beq.n	8017c6c <__multiply+0x144>
 8017c28:	682b      	ldr	r3, [r5, #0]
 8017c2a:	f104 0c14 	add.w	ip, r4, #20
 8017c2e:	46ae      	mov	lr, r5
 8017c30:	f04f 0a00 	mov.w	sl, #0
 8017c34:	f8bc b000 	ldrh.w	fp, [ip]
 8017c38:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8017c3c:	fb09 770b 	mla	r7, r9, fp, r7
 8017c40:	4457      	add	r7, sl
 8017c42:	b29b      	uxth	r3, r3
 8017c44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8017c48:	f84e 3b04 	str.w	r3, [lr], #4
 8017c4c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8017c50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017c54:	f8be 3000 	ldrh.w	r3, [lr]
 8017c58:	fb09 330a 	mla	r3, r9, sl, r3
 8017c5c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8017c60:	4562      	cmp	r2, ip
 8017c62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017c66:	d8e5      	bhi.n	8017c34 <__multiply+0x10c>
 8017c68:	9f01      	ldr	r7, [sp, #4]
 8017c6a:	51eb      	str	r3, [r5, r7]
 8017c6c:	3504      	adds	r5, #4
 8017c6e:	e799      	b.n	8017ba4 <__multiply+0x7c>
 8017c70:	3e01      	subs	r6, #1
 8017c72:	e79b      	b.n	8017bac <__multiply+0x84>
 8017c74:	08019191 	.word	0x08019191
 8017c78:	08019219 	.word	0x08019219

08017c7c <__pow5mult>:
 8017c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c80:	4615      	mov	r5, r2
 8017c82:	f012 0203 	ands.w	r2, r2, #3
 8017c86:	4607      	mov	r7, r0
 8017c88:	460e      	mov	r6, r1
 8017c8a:	d007      	beq.n	8017c9c <__pow5mult+0x20>
 8017c8c:	4c25      	ldr	r4, [pc, #148]	@ (8017d24 <__pow5mult+0xa8>)
 8017c8e:	3a01      	subs	r2, #1
 8017c90:	2300      	movs	r3, #0
 8017c92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017c96:	f7ff fe55 	bl	8017944 <__multadd>
 8017c9a:	4606      	mov	r6, r0
 8017c9c:	10ad      	asrs	r5, r5, #2
 8017c9e:	d03d      	beq.n	8017d1c <__pow5mult+0xa0>
 8017ca0:	69fc      	ldr	r4, [r7, #28]
 8017ca2:	b97c      	cbnz	r4, 8017cc4 <__pow5mult+0x48>
 8017ca4:	2010      	movs	r0, #16
 8017ca6:	f000 fb95 	bl	80183d4 <malloc>
 8017caa:	4602      	mov	r2, r0
 8017cac:	61f8      	str	r0, [r7, #28]
 8017cae:	b928      	cbnz	r0, 8017cbc <__pow5mult+0x40>
 8017cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8017d28 <__pow5mult+0xac>)
 8017cb2:	481e      	ldr	r0, [pc, #120]	@ (8017d2c <__pow5mult+0xb0>)
 8017cb4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8017cb8:	f000 fb5a 	bl	8018370 <__assert_func>
 8017cbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017cc0:	6004      	str	r4, [r0, #0]
 8017cc2:	60c4      	str	r4, [r0, #12]
 8017cc4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8017cc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017ccc:	b94c      	cbnz	r4, 8017ce2 <__pow5mult+0x66>
 8017cce:	f240 2171 	movw	r1, #625	@ 0x271
 8017cd2:	4638      	mov	r0, r7
 8017cd4:	f7ff ff12 	bl	8017afc <__i2b>
 8017cd8:	2300      	movs	r3, #0
 8017cda:	f8c8 0008 	str.w	r0, [r8, #8]
 8017cde:	4604      	mov	r4, r0
 8017ce0:	6003      	str	r3, [r0, #0]
 8017ce2:	f04f 0900 	mov.w	r9, #0
 8017ce6:	07eb      	lsls	r3, r5, #31
 8017ce8:	d50a      	bpl.n	8017d00 <__pow5mult+0x84>
 8017cea:	4631      	mov	r1, r6
 8017cec:	4622      	mov	r2, r4
 8017cee:	4638      	mov	r0, r7
 8017cf0:	f7ff ff1a 	bl	8017b28 <__multiply>
 8017cf4:	4631      	mov	r1, r6
 8017cf6:	4680      	mov	r8, r0
 8017cf8:	4638      	mov	r0, r7
 8017cfa:	f7ff fe01 	bl	8017900 <_Bfree>
 8017cfe:	4646      	mov	r6, r8
 8017d00:	106d      	asrs	r5, r5, #1
 8017d02:	d00b      	beq.n	8017d1c <__pow5mult+0xa0>
 8017d04:	6820      	ldr	r0, [r4, #0]
 8017d06:	b938      	cbnz	r0, 8017d18 <__pow5mult+0x9c>
 8017d08:	4622      	mov	r2, r4
 8017d0a:	4621      	mov	r1, r4
 8017d0c:	4638      	mov	r0, r7
 8017d0e:	f7ff ff0b 	bl	8017b28 <__multiply>
 8017d12:	6020      	str	r0, [r4, #0]
 8017d14:	f8c0 9000 	str.w	r9, [r0]
 8017d18:	4604      	mov	r4, r0
 8017d1a:	e7e4      	b.n	8017ce6 <__pow5mult+0x6a>
 8017d1c:	4630      	mov	r0, r6
 8017d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017d22:	bf00      	nop
 8017d24:	08019274 	.word	0x08019274
 8017d28:	08019202 	.word	0x08019202
 8017d2c:	08019219 	.word	0x08019219

08017d30 <__lshift>:
 8017d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d34:	460c      	mov	r4, r1
 8017d36:	6849      	ldr	r1, [r1, #4]
 8017d38:	6923      	ldr	r3, [r4, #16]
 8017d3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017d3e:	68a3      	ldr	r3, [r4, #8]
 8017d40:	4607      	mov	r7, r0
 8017d42:	4691      	mov	r9, r2
 8017d44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017d48:	f108 0601 	add.w	r6, r8, #1
 8017d4c:	42b3      	cmp	r3, r6
 8017d4e:	db0b      	blt.n	8017d68 <__lshift+0x38>
 8017d50:	4638      	mov	r0, r7
 8017d52:	f7ff fd95 	bl	8017880 <_Balloc>
 8017d56:	4605      	mov	r5, r0
 8017d58:	b948      	cbnz	r0, 8017d6e <__lshift+0x3e>
 8017d5a:	4602      	mov	r2, r0
 8017d5c:	4b28      	ldr	r3, [pc, #160]	@ (8017e00 <__lshift+0xd0>)
 8017d5e:	4829      	ldr	r0, [pc, #164]	@ (8017e04 <__lshift+0xd4>)
 8017d60:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8017d64:	f000 fb04 	bl	8018370 <__assert_func>
 8017d68:	3101      	adds	r1, #1
 8017d6a:	005b      	lsls	r3, r3, #1
 8017d6c:	e7ee      	b.n	8017d4c <__lshift+0x1c>
 8017d6e:	2300      	movs	r3, #0
 8017d70:	f100 0114 	add.w	r1, r0, #20
 8017d74:	f100 0210 	add.w	r2, r0, #16
 8017d78:	4618      	mov	r0, r3
 8017d7a:	4553      	cmp	r3, sl
 8017d7c:	db33      	blt.n	8017de6 <__lshift+0xb6>
 8017d7e:	6920      	ldr	r0, [r4, #16]
 8017d80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017d84:	f104 0314 	add.w	r3, r4, #20
 8017d88:	f019 091f 	ands.w	r9, r9, #31
 8017d8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017d90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017d94:	d02b      	beq.n	8017dee <__lshift+0xbe>
 8017d96:	f1c9 0e20 	rsb	lr, r9, #32
 8017d9a:	468a      	mov	sl, r1
 8017d9c:	2200      	movs	r2, #0
 8017d9e:	6818      	ldr	r0, [r3, #0]
 8017da0:	fa00 f009 	lsl.w	r0, r0, r9
 8017da4:	4310      	orrs	r0, r2
 8017da6:	f84a 0b04 	str.w	r0, [sl], #4
 8017daa:	f853 2b04 	ldr.w	r2, [r3], #4
 8017dae:	459c      	cmp	ip, r3
 8017db0:	fa22 f20e 	lsr.w	r2, r2, lr
 8017db4:	d8f3      	bhi.n	8017d9e <__lshift+0x6e>
 8017db6:	ebac 0304 	sub.w	r3, ip, r4
 8017dba:	3b15      	subs	r3, #21
 8017dbc:	f023 0303 	bic.w	r3, r3, #3
 8017dc0:	3304      	adds	r3, #4
 8017dc2:	f104 0015 	add.w	r0, r4, #21
 8017dc6:	4584      	cmp	ip, r0
 8017dc8:	bf38      	it	cc
 8017dca:	2304      	movcc	r3, #4
 8017dcc:	50ca      	str	r2, [r1, r3]
 8017dce:	b10a      	cbz	r2, 8017dd4 <__lshift+0xa4>
 8017dd0:	f108 0602 	add.w	r6, r8, #2
 8017dd4:	3e01      	subs	r6, #1
 8017dd6:	4638      	mov	r0, r7
 8017dd8:	612e      	str	r6, [r5, #16]
 8017dda:	4621      	mov	r1, r4
 8017ddc:	f7ff fd90 	bl	8017900 <_Bfree>
 8017de0:	4628      	mov	r0, r5
 8017de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017de6:	f842 0f04 	str.w	r0, [r2, #4]!
 8017dea:	3301      	adds	r3, #1
 8017dec:	e7c5      	b.n	8017d7a <__lshift+0x4a>
 8017dee:	3904      	subs	r1, #4
 8017df0:	f853 2b04 	ldr.w	r2, [r3], #4
 8017df4:	f841 2f04 	str.w	r2, [r1, #4]!
 8017df8:	459c      	cmp	ip, r3
 8017dfa:	d8f9      	bhi.n	8017df0 <__lshift+0xc0>
 8017dfc:	e7ea      	b.n	8017dd4 <__lshift+0xa4>
 8017dfe:	bf00      	nop
 8017e00:	08019191 	.word	0x08019191
 8017e04:	08019219 	.word	0x08019219

08017e08 <__mcmp>:
 8017e08:	690a      	ldr	r2, [r1, #16]
 8017e0a:	4603      	mov	r3, r0
 8017e0c:	6900      	ldr	r0, [r0, #16]
 8017e0e:	1a80      	subs	r0, r0, r2
 8017e10:	b530      	push	{r4, r5, lr}
 8017e12:	d10e      	bne.n	8017e32 <__mcmp+0x2a>
 8017e14:	3314      	adds	r3, #20
 8017e16:	3114      	adds	r1, #20
 8017e18:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8017e1c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8017e20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017e24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017e28:	4295      	cmp	r5, r2
 8017e2a:	d003      	beq.n	8017e34 <__mcmp+0x2c>
 8017e2c:	d205      	bcs.n	8017e3a <__mcmp+0x32>
 8017e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8017e32:	bd30      	pop	{r4, r5, pc}
 8017e34:	42a3      	cmp	r3, r4
 8017e36:	d3f3      	bcc.n	8017e20 <__mcmp+0x18>
 8017e38:	e7fb      	b.n	8017e32 <__mcmp+0x2a>
 8017e3a:	2001      	movs	r0, #1
 8017e3c:	e7f9      	b.n	8017e32 <__mcmp+0x2a>
	...

08017e40 <__mdiff>:
 8017e40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e44:	4689      	mov	r9, r1
 8017e46:	4606      	mov	r6, r0
 8017e48:	4611      	mov	r1, r2
 8017e4a:	4648      	mov	r0, r9
 8017e4c:	4614      	mov	r4, r2
 8017e4e:	f7ff ffdb 	bl	8017e08 <__mcmp>
 8017e52:	1e05      	subs	r5, r0, #0
 8017e54:	d112      	bne.n	8017e7c <__mdiff+0x3c>
 8017e56:	4629      	mov	r1, r5
 8017e58:	4630      	mov	r0, r6
 8017e5a:	f7ff fd11 	bl	8017880 <_Balloc>
 8017e5e:	4602      	mov	r2, r0
 8017e60:	b928      	cbnz	r0, 8017e6e <__mdiff+0x2e>
 8017e62:	4b3f      	ldr	r3, [pc, #252]	@ (8017f60 <__mdiff+0x120>)
 8017e64:	f240 2137 	movw	r1, #567	@ 0x237
 8017e68:	483e      	ldr	r0, [pc, #248]	@ (8017f64 <__mdiff+0x124>)
 8017e6a:	f000 fa81 	bl	8018370 <__assert_func>
 8017e6e:	2301      	movs	r3, #1
 8017e70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017e74:	4610      	mov	r0, r2
 8017e76:	b003      	add	sp, #12
 8017e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e7c:	bfbc      	itt	lt
 8017e7e:	464b      	movlt	r3, r9
 8017e80:	46a1      	movlt	r9, r4
 8017e82:	4630      	mov	r0, r6
 8017e84:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8017e88:	bfba      	itte	lt
 8017e8a:	461c      	movlt	r4, r3
 8017e8c:	2501      	movlt	r5, #1
 8017e8e:	2500      	movge	r5, #0
 8017e90:	f7ff fcf6 	bl	8017880 <_Balloc>
 8017e94:	4602      	mov	r2, r0
 8017e96:	b918      	cbnz	r0, 8017ea0 <__mdiff+0x60>
 8017e98:	4b31      	ldr	r3, [pc, #196]	@ (8017f60 <__mdiff+0x120>)
 8017e9a:	f240 2145 	movw	r1, #581	@ 0x245
 8017e9e:	e7e3      	b.n	8017e68 <__mdiff+0x28>
 8017ea0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8017ea4:	6926      	ldr	r6, [r4, #16]
 8017ea6:	60c5      	str	r5, [r0, #12]
 8017ea8:	f109 0310 	add.w	r3, r9, #16
 8017eac:	f109 0514 	add.w	r5, r9, #20
 8017eb0:	f104 0e14 	add.w	lr, r4, #20
 8017eb4:	f100 0b14 	add.w	fp, r0, #20
 8017eb8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8017ebc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8017ec0:	9301      	str	r3, [sp, #4]
 8017ec2:	46d9      	mov	r9, fp
 8017ec4:	f04f 0c00 	mov.w	ip, #0
 8017ec8:	9b01      	ldr	r3, [sp, #4]
 8017eca:	f85e 0b04 	ldr.w	r0, [lr], #4
 8017ece:	f853 af04 	ldr.w	sl, [r3, #4]!
 8017ed2:	9301      	str	r3, [sp, #4]
 8017ed4:	fa1f f38a 	uxth.w	r3, sl
 8017ed8:	4619      	mov	r1, r3
 8017eda:	b283      	uxth	r3, r0
 8017edc:	1acb      	subs	r3, r1, r3
 8017ede:	0c00      	lsrs	r0, r0, #16
 8017ee0:	4463      	add	r3, ip
 8017ee2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8017ee6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8017eea:	b29b      	uxth	r3, r3
 8017eec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8017ef0:	4576      	cmp	r6, lr
 8017ef2:	f849 3b04 	str.w	r3, [r9], #4
 8017ef6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017efa:	d8e5      	bhi.n	8017ec8 <__mdiff+0x88>
 8017efc:	1b33      	subs	r3, r6, r4
 8017efe:	3b15      	subs	r3, #21
 8017f00:	f023 0303 	bic.w	r3, r3, #3
 8017f04:	3415      	adds	r4, #21
 8017f06:	3304      	adds	r3, #4
 8017f08:	42a6      	cmp	r6, r4
 8017f0a:	bf38      	it	cc
 8017f0c:	2304      	movcc	r3, #4
 8017f0e:	441d      	add	r5, r3
 8017f10:	445b      	add	r3, fp
 8017f12:	461e      	mov	r6, r3
 8017f14:	462c      	mov	r4, r5
 8017f16:	4544      	cmp	r4, r8
 8017f18:	d30e      	bcc.n	8017f38 <__mdiff+0xf8>
 8017f1a:	f108 0103 	add.w	r1, r8, #3
 8017f1e:	1b49      	subs	r1, r1, r5
 8017f20:	f021 0103 	bic.w	r1, r1, #3
 8017f24:	3d03      	subs	r5, #3
 8017f26:	45a8      	cmp	r8, r5
 8017f28:	bf38      	it	cc
 8017f2a:	2100      	movcc	r1, #0
 8017f2c:	440b      	add	r3, r1
 8017f2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017f32:	b191      	cbz	r1, 8017f5a <__mdiff+0x11a>
 8017f34:	6117      	str	r7, [r2, #16]
 8017f36:	e79d      	b.n	8017e74 <__mdiff+0x34>
 8017f38:	f854 1b04 	ldr.w	r1, [r4], #4
 8017f3c:	46e6      	mov	lr, ip
 8017f3e:	0c08      	lsrs	r0, r1, #16
 8017f40:	fa1c fc81 	uxtah	ip, ip, r1
 8017f44:	4471      	add	r1, lr
 8017f46:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8017f4a:	b289      	uxth	r1, r1
 8017f4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8017f50:	f846 1b04 	str.w	r1, [r6], #4
 8017f54:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017f58:	e7dd      	b.n	8017f16 <__mdiff+0xd6>
 8017f5a:	3f01      	subs	r7, #1
 8017f5c:	e7e7      	b.n	8017f2e <__mdiff+0xee>
 8017f5e:	bf00      	nop
 8017f60:	08019191 	.word	0x08019191
 8017f64:	08019219 	.word	0x08019219

08017f68 <__ulp>:
 8017f68:	b082      	sub	sp, #8
 8017f6a:	ed8d 0b00 	vstr	d0, [sp]
 8017f6e:	9a01      	ldr	r2, [sp, #4]
 8017f70:	4b0f      	ldr	r3, [pc, #60]	@ (8017fb0 <__ulp+0x48>)
 8017f72:	4013      	ands	r3, r2
 8017f74:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	dc08      	bgt.n	8017f8e <__ulp+0x26>
 8017f7c:	425b      	negs	r3, r3
 8017f7e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8017f82:	ea4f 5223 	mov.w	r2, r3, asr #20
 8017f86:	da04      	bge.n	8017f92 <__ulp+0x2a>
 8017f88:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8017f8c:	4113      	asrs	r3, r2
 8017f8e:	2200      	movs	r2, #0
 8017f90:	e008      	b.n	8017fa4 <__ulp+0x3c>
 8017f92:	f1a2 0314 	sub.w	r3, r2, #20
 8017f96:	2b1e      	cmp	r3, #30
 8017f98:	bfda      	itte	le
 8017f9a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8017f9e:	40da      	lsrle	r2, r3
 8017fa0:	2201      	movgt	r2, #1
 8017fa2:	2300      	movs	r3, #0
 8017fa4:	4619      	mov	r1, r3
 8017fa6:	4610      	mov	r0, r2
 8017fa8:	ec41 0b10 	vmov	d0, r0, r1
 8017fac:	b002      	add	sp, #8
 8017fae:	4770      	bx	lr
 8017fb0:	7ff00000 	.word	0x7ff00000

08017fb4 <__b2d>:
 8017fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fb8:	6906      	ldr	r6, [r0, #16]
 8017fba:	f100 0814 	add.w	r8, r0, #20
 8017fbe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8017fc2:	1f37      	subs	r7, r6, #4
 8017fc4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8017fc8:	4610      	mov	r0, r2
 8017fca:	f7ff fd4b 	bl	8017a64 <__hi0bits>
 8017fce:	f1c0 0320 	rsb	r3, r0, #32
 8017fd2:	280a      	cmp	r0, #10
 8017fd4:	600b      	str	r3, [r1, #0]
 8017fd6:	491b      	ldr	r1, [pc, #108]	@ (8018044 <__b2d+0x90>)
 8017fd8:	dc15      	bgt.n	8018006 <__b2d+0x52>
 8017fda:	f1c0 0c0b 	rsb	ip, r0, #11
 8017fde:	fa22 f30c 	lsr.w	r3, r2, ip
 8017fe2:	45b8      	cmp	r8, r7
 8017fe4:	ea43 0501 	orr.w	r5, r3, r1
 8017fe8:	bf34      	ite	cc
 8017fea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8017fee:	2300      	movcs	r3, #0
 8017ff0:	3015      	adds	r0, #21
 8017ff2:	fa02 f000 	lsl.w	r0, r2, r0
 8017ff6:	fa23 f30c 	lsr.w	r3, r3, ip
 8017ffa:	4303      	orrs	r3, r0
 8017ffc:	461c      	mov	r4, r3
 8017ffe:	ec45 4b10 	vmov	d0, r4, r5
 8018002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018006:	45b8      	cmp	r8, r7
 8018008:	bf3a      	itte	cc
 801800a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801800e:	f1a6 0708 	subcc.w	r7, r6, #8
 8018012:	2300      	movcs	r3, #0
 8018014:	380b      	subs	r0, #11
 8018016:	d012      	beq.n	801803e <__b2d+0x8a>
 8018018:	f1c0 0120 	rsb	r1, r0, #32
 801801c:	fa23 f401 	lsr.w	r4, r3, r1
 8018020:	4082      	lsls	r2, r0
 8018022:	4322      	orrs	r2, r4
 8018024:	4547      	cmp	r7, r8
 8018026:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801802a:	bf8c      	ite	hi
 801802c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8018030:	2200      	movls	r2, #0
 8018032:	4083      	lsls	r3, r0
 8018034:	40ca      	lsrs	r2, r1
 8018036:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801803a:	4313      	orrs	r3, r2
 801803c:	e7de      	b.n	8017ffc <__b2d+0x48>
 801803e:	ea42 0501 	orr.w	r5, r2, r1
 8018042:	e7db      	b.n	8017ffc <__b2d+0x48>
 8018044:	3ff00000 	.word	0x3ff00000

08018048 <__d2b>:
 8018048:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801804c:	460f      	mov	r7, r1
 801804e:	2101      	movs	r1, #1
 8018050:	ec59 8b10 	vmov	r8, r9, d0
 8018054:	4616      	mov	r6, r2
 8018056:	f7ff fc13 	bl	8017880 <_Balloc>
 801805a:	4604      	mov	r4, r0
 801805c:	b930      	cbnz	r0, 801806c <__d2b+0x24>
 801805e:	4602      	mov	r2, r0
 8018060:	4b23      	ldr	r3, [pc, #140]	@ (80180f0 <__d2b+0xa8>)
 8018062:	4824      	ldr	r0, [pc, #144]	@ (80180f4 <__d2b+0xac>)
 8018064:	f240 310f 	movw	r1, #783	@ 0x30f
 8018068:	f000 f982 	bl	8018370 <__assert_func>
 801806c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018070:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018074:	b10d      	cbz	r5, 801807a <__d2b+0x32>
 8018076:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801807a:	9301      	str	r3, [sp, #4]
 801807c:	f1b8 0300 	subs.w	r3, r8, #0
 8018080:	d023      	beq.n	80180ca <__d2b+0x82>
 8018082:	4668      	mov	r0, sp
 8018084:	9300      	str	r3, [sp, #0]
 8018086:	f7ff fd0c 	bl	8017aa2 <__lo0bits>
 801808a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801808e:	b1d0      	cbz	r0, 80180c6 <__d2b+0x7e>
 8018090:	f1c0 0320 	rsb	r3, r0, #32
 8018094:	fa02 f303 	lsl.w	r3, r2, r3
 8018098:	430b      	orrs	r3, r1
 801809a:	40c2      	lsrs	r2, r0
 801809c:	6163      	str	r3, [r4, #20]
 801809e:	9201      	str	r2, [sp, #4]
 80180a0:	9b01      	ldr	r3, [sp, #4]
 80180a2:	61a3      	str	r3, [r4, #24]
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	bf0c      	ite	eq
 80180a8:	2201      	moveq	r2, #1
 80180aa:	2202      	movne	r2, #2
 80180ac:	6122      	str	r2, [r4, #16]
 80180ae:	b1a5      	cbz	r5, 80180da <__d2b+0x92>
 80180b0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80180b4:	4405      	add	r5, r0
 80180b6:	603d      	str	r5, [r7, #0]
 80180b8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80180bc:	6030      	str	r0, [r6, #0]
 80180be:	4620      	mov	r0, r4
 80180c0:	b003      	add	sp, #12
 80180c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80180c6:	6161      	str	r1, [r4, #20]
 80180c8:	e7ea      	b.n	80180a0 <__d2b+0x58>
 80180ca:	a801      	add	r0, sp, #4
 80180cc:	f7ff fce9 	bl	8017aa2 <__lo0bits>
 80180d0:	9b01      	ldr	r3, [sp, #4]
 80180d2:	6163      	str	r3, [r4, #20]
 80180d4:	3020      	adds	r0, #32
 80180d6:	2201      	movs	r2, #1
 80180d8:	e7e8      	b.n	80180ac <__d2b+0x64>
 80180da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80180de:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80180e2:	6038      	str	r0, [r7, #0]
 80180e4:	6918      	ldr	r0, [r3, #16]
 80180e6:	f7ff fcbd 	bl	8017a64 <__hi0bits>
 80180ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80180ee:	e7e5      	b.n	80180bc <__d2b+0x74>
 80180f0:	08019191 	.word	0x08019191
 80180f4:	08019219 	.word	0x08019219

080180f8 <__ratio>:
 80180f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180fc:	4688      	mov	r8, r1
 80180fe:	4669      	mov	r1, sp
 8018100:	4681      	mov	r9, r0
 8018102:	f7ff ff57 	bl	8017fb4 <__b2d>
 8018106:	a901      	add	r1, sp, #4
 8018108:	4640      	mov	r0, r8
 801810a:	ec55 4b10 	vmov	r4, r5, d0
 801810e:	f7ff ff51 	bl	8017fb4 <__b2d>
 8018112:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018116:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801811a:	1ad2      	subs	r2, r2, r3
 801811c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8018120:	1a5b      	subs	r3, r3, r1
 8018122:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8018126:	ec57 6b10 	vmov	r6, r7, d0
 801812a:	2b00      	cmp	r3, #0
 801812c:	bfd6      	itet	le
 801812e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018132:	462a      	movgt	r2, r5
 8018134:	463a      	movle	r2, r7
 8018136:	46ab      	mov	fp, r5
 8018138:	46a2      	mov	sl, r4
 801813a:	bfce      	itee	gt
 801813c:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8018140:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8018144:	ee00 3a90 	vmovle	s1, r3
 8018148:	ec4b ab17 	vmov	d7, sl, fp
 801814c:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8018150:	b003      	add	sp, #12
 8018152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018156 <__copybits>:
 8018156:	3901      	subs	r1, #1
 8018158:	b570      	push	{r4, r5, r6, lr}
 801815a:	1149      	asrs	r1, r1, #5
 801815c:	6914      	ldr	r4, [r2, #16]
 801815e:	3101      	adds	r1, #1
 8018160:	f102 0314 	add.w	r3, r2, #20
 8018164:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018168:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801816c:	1f05      	subs	r5, r0, #4
 801816e:	42a3      	cmp	r3, r4
 8018170:	d30c      	bcc.n	801818c <__copybits+0x36>
 8018172:	1aa3      	subs	r3, r4, r2
 8018174:	3b11      	subs	r3, #17
 8018176:	f023 0303 	bic.w	r3, r3, #3
 801817a:	3211      	adds	r2, #17
 801817c:	42a2      	cmp	r2, r4
 801817e:	bf88      	it	hi
 8018180:	2300      	movhi	r3, #0
 8018182:	4418      	add	r0, r3
 8018184:	2300      	movs	r3, #0
 8018186:	4288      	cmp	r0, r1
 8018188:	d305      	bcc.n	8018196 <__copybits+0x40>
 801818a:	bd70      	pop	{r4, r5, r6, pc}
 801818c:	f853 6b04 	ldr.w	r6, [r3], #4
 8018190:	f845 6f04 	str.w	r6, [r5, #4]!
 8018194:	e7eb      	b.n	801816e <__copybits+0x18>
 8018196:	f840 3b04 	str.w	r3, [r0], #4
 801819a:	e7f4      	b.n	8018186 <__copybits+0x30>

0801819c <__any_on>:
 801819c:	f100 0214 	add.w	r2, r0, #20
 80181a0:	6900      	ldr	r0, [r0, #16]
 80181a2:	114b      	asrs	r3, r1, #5
 80181a4:	4298      	cmp	r0, r3
 80181a6:	b510      	push	{r4, lr}
 80181a8:	db11      	blt.n	80181ce <__any_on+0x32>
 80181aa:	dd0a      	ble.n	80181c2 <__any_on+0x26>
 80181ac:	f011 011f 	ands.w	r1, r1, #31
 80181b0:	d007      	beq.n	80181c2 <__any_on+0x26>
 80181b2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80181b6:	fa24 f001 	lsr.w	r0, r4, r1
 80181ba:	fa00 f101 	lsl.w	r1, r0, r1
 80181be:	428c      	cmp	r4, r1
 80181c0:	d10b      	bne.n	80181da <__any_on+0x3e>
 80181c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80181c6:	4293      	cmp	r3, r2
 80181c8:	d803      	bhi.n	80181d2 <__any_on+0x36>
 80181ca:	2000      	movs	r0, #0
 80181cc:	bd10      	pop	{r4, pc}
 80181ce:	4603      	mov	r3, r0
 80181d0:	e7f7      	b.n	80181c2 <__any_on+0x26>
 80181d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80181d6:	2900      	cmp	r1, #0
 80181d8:	d0f5      	beq.n	80181c6 <__any_on+0x2a>
 80181da:	2001      	movs	r0, #1
 80181dc:	e7f6      	b.n	80181cc <__any_on+0x30>

080181de <__ascii_wctomb>:
 80181de:	4603      	mov	r3, r0
 80181e0:	4608      	mov	r0, r1
 80181e2:	b141      	cbz	r1, 80181f6 <__ascii_wctomb+0x18>
 80181e4:	2aff      	cmp	r2, #255	@ 0xff
 80181e6:	d904      	bls.n	80181f2 <__ascii_wctomb+0x14>
 80181e8:	228a      	movs	r2, #138	@ 0x8a
 80181ea:	601a      	str	r2, [r3, #0]
 80181ec:	f04f 30ff 	mov.w	r0, #4294967295
 80181f0:	4770      	bx	lr
 80181f2:	700a      	strb	r2, [r1, #0]
 80181f4:	2001      	movs	r0, #1
 80181f6:	4770      	bx	lr

080181f8 <__sflush_r>:
 80181f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80181fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018200:	0716      	lsls	r6, r2, #28
 8018202:	4605      	mov	r5, r0
 8018204:	460c      	mov	r4, r1
 8018206:	d454      	bmi.n	80182b2 <__sflush_r+0xba>
 8018208:	684b      	ldr	r3, [r1, #4]
 801820a:	2b00      	cmp	r3, #0
 801820c:	dc02      	bgt.n	8018214 <__sflush_r+0x1c>
 801820e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018210:	2b00      	cmp	r3, #0
 8018212:	dd48      	ble.n	80182a6 <__sflush_r+0xae>
 8018214:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018216:	2e00      	cmp	r6, #0
 8018218:	d045      	beq.n	80182a6 <__sflush_r+0xae>
 801821a:	2300      	movs	r3, #0
 801821c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018220:	682f      	ldr	r7, [r5, #0]
 8018222:	6a21      	ldr	r1, [r4, #32]
 8018224:	602b      	str	r3, [r5, #0]
 8018226:	d030      	beq.n	801828a <__sflush_r+0x92>
 8018228:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801822a:	89a3      	ldrh	r3, [r4, #12]
 801822c:	0759      	lsls	r1, r3, #29
 801822e:	d505      	bpl.n	801823c <__sflush_r+0x44>
 8018230:	6863      	ldr	r3, [r4, #4]
 8018232:	1ad2      	subs	r2, r2, r3
 8018234:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018236:	b10b      	cbz	r3, 801823c <__sflush_r+0x44>
 8018238:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801823a:	1ad2      	subs	r2, r2, r3
 801823c:	2300      	movs	r3, #0
 801823e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018240:	6a21      	ldr	r1, [r4, #32]
 8018242:	4628      	mov	r0, r5
 8018244:	47b0      	blx	r6
 8018246:	1c43      	adds	r3, r0, #1
 8018248:	89a3      	ldrh	r3, [r4, #12]
 801824a:	d106      	bne.n	801825a <__sflush_r+0x62>
 801824c:	6829      	ldr	r1, [r5, #0]
 801824e:	291d      	cmp	r1, #29
 8018250:	d82b      	bhi.n	80182aa <__sflush_r+0xb2>
 8018252:	4a2a      	ldr	r2, [pc, #168]	@ (80182fc <__sflush_r+0x104>)
 8018254:	410a      	asrs	r2, r1
 8018256:	07d6      	lsls	r6, r2, #31
 8018258:	d427      	bmi.n	80182aa <__sflush_r+0xb2>
 801825a:	2200      	movs	r2, #0
 801825c:	6062      	str	r2, [r4, #4]
 801825e:	04d9      	lsls	r1, r3, #19
 8018260:	6922      	ldr	r2, [r4, #16]
 8018262:	6022      	str	r2, [r4, #0]
 8018264:	d504      	bpl.n	8018270 <__sflush_r+0x78>
 8018266:	1c42      	adds	r2, r0, #1
 8018268:	d101      	bne.n	801826e <__sflush_r+0x76>
 801826a:	682b      	ldr	r3, [r5, #0]
 801826c:	b903      	cbnz	r3, 8018270 <__sflush_r+0x78>
 801826e:	6560      	str	r0, [r4, #84]	@ 0x54
 8018270:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018272:	602f      	str	r7, [r5, #0]
 8018274:	b1b9      	cbz	r1, 80182a6 <__sflush_r+0xae>
 8018276:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801827a:	4299      	cmp	r1, r3
 801827c:	d002      	beq.n	8018284 <__sflush_r+0x8c>
 801827e:	4628      	mov	r0, r5
 8018280:	f7fe feba 	bl	8016ff8 <_free_r>
 8018284:	2300      	movs	r3, #0
 8018286:	6363      	str	r3, [r4, #52]	@ 0x34
 8018288:	e00d      	b.n	80182a6 <__sflush_r+0xae>
 801828a:	2301      	movs	r3, #1
 801828c:	4628      	mov	r0, r5
 801828e:	47b0      	blx	r6
 8018290:	4602      	mov	r2, r0
 8018292:	1c50      	adds	r0, r2, #1
 8018294:	d1c9      	bne.n	801822a <__sflush_r+0x32>
 8018296:	682b      	ldr	r3, [r5, #0]
 8018298:	2b00      	cmp	r3, #0
 801829a:	d0c6      	beq.n	801822a <__sflush_r+0x32>
 801829c:	2b1d      	cmp	r3, #29
 801829e:	d001      	beq.n	80182a4 <__sflush_r+0xac>
 80182a0:	2b16      	cmp	r3, #22
 80182a2:	d11e      	bne.n	80182e2 <__sflush_r+0xea>
 80182a4:	602f      	str	r7, [r5, #0]
 80182a6:	2000      	movs	r0, #0
 80182a8:	e022      	b.n	80182f0 <__sflush_r+0xf8>
 80182aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80182ae:	b21b      	sxth	r3, r3
 80182b0:	e01b      	b.n	80182ea <__sflush_r+0xf2>
 80182b2:	690f      	ldr	r7, [r1, #16]
 80182b4:	2f00      	cmp	r7, #0
 80182b6:	d0f6      	beq.n	80182a6 <__sflush_r+0xae>
 80182b8:	0793      	lsls	r3, r2, #30
 80182ba:	680e      	ldr	r6, [r1, #0]
 80182bc:	bf08      	it	eq
 80182be:	694b      	ldreq	r3, [r1, #20]
 80182c0:	600f      	str	r7, [r1, #0]
 80182c2:	bf18      	it	ne
 80182c4:	2300      	movne	r3, #0
 80182c6:	eba6 0807 	sub.w	r8, r6, r7
 80182ca:	608b      	str	r3, [r1, #8]
 80182cc:	f1b8 0f00 	cmp.w	r8, #0
 80182d0:	dde9      	ble.n	80182a6 <__sflush_r+0xae>
 80182d2:	6a21      	ldr	r1, [r4, #32]
 80182d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80182d6:	4643      	mov	r3, r8
 80182d8:	463a      	mov	r2, r7
 80182da:	4628      	mov	r0, r5
 80182dc:	47b0      	blx	r6
 80182de:	2800      	cmp	r0, #0
 80182e0:	dc08      	bgt.n	80182f4 <__sflush_r+0xfc>
 80182e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80182e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80182ea:	81a3      	strh	r3, [r4, #12]
 80182ec:	f04f 30ff 	mov.w	r0, #4294967295
 80182f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182f4:	4407      	add	r7, r0
 80182f6:	eba8 0800 	sub.w	r8, r8, r0
 80182fa:	e7e7      	b.n	80182cc <__sflush_r+0xd4>
 80182fc:	dfbffffe 	.word	0xdfbffffe

08018300 <_fflush_r>:
 8018300:	b538      	push	{r3, r4, r5, lr}
 8018302:	690b      	ldr	r3, [r1, #16]
 8018304:	4605      	mov	r5, r0
 8018306:	460c      	mov	r4, r1
 8018308:	b913      	cbnz	r3, 8018310 <_fflush_r+0x10>
 801830a:	2500      	movs	r5, #0
 801830c:	4628      	mov	r0, r5
 801830e:	bd38      	pop	{r3, r4, r5, pc}
 8018310:	b118      	cbz	r0, 801831a <_fflush_r+0x1a>
 8018312:	6a03      	ldr	r3, [r0, #32]
 8018314:	b90b      	cbnz	r3, 801831a <_fflush_r+0x1a>
 8018316:	f7fe fd45 	bl	8016da4 <__sinit>
 801831a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801831e:	2b00      	cmp	r3, #0
 8018320:	d0f3      	beq.n	801830a <_fflush_r+0xa>
 8018322:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018324:	07d0      	lsls	r0, r2, #31
 8018326:	d404      	bmi.n	8018332 <_fflush_r+0x32>
 8018328:	0599      	lsls	r1, r3, #22
 801832a:	d402      	bmi.n	8018332 <_fflush_r+0x32>
 801832c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801832e:	f7fe fe4a 	bl	8016fc6 <__retarget_lock_acquire_recursive>
 8018332:	4628      	mov	r0, r5
 8018334:	4621      	mov	r1, r4
 8018336:	f7ff ff5f 	bl	80181f8 <__sflush_r>
 801833a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801833c:	07da      	lsls	r2, r3, #31
 801833e:	4605      	mov	r5, r0
 8018340:	d4e4      	bmi.n	801830c <_fflush_r+0xc>
 8018342:	89a3      	ldrh	r3, [r4, #12]
 8018344:	059b      	lsls	r3, r3, #22
 8018346:	d4e1      	bmi.n	801830c <_fflush_r+0xc>
 8018348:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801834a:	f7fe fe3d 	bl	8016fc8 <__retarget_lock_release_recursive>
 801834e:	e7dd      	b.n	801830c <_fflush_r+0xc>

08018350 <_sbrk_r>:
 8018350:	b538      	push	{r3, r4, r5, lr}
 8018352:	4d06      	ldr	r5, [pc, #24]	@ (801836c <_sbrk_r+0x1c>)
 8018354:	2300      	movs	r3, #0
 8018356:	4604      	mov	r4, r0
 8018358:	4608      	mov	r0, r1
 801835a:	602b      	str	r3, [r5, #0]
 801835c:	f7ea fb1c 	bl	8002998 <_sbrk>
 8018360:	1c43      	adds	r3, r0, #1
 8018362:	d102      	bne.n	801836a <_sbrk_r+0x1a>
 8018364:	682b      	ldr	r3, [r5, #0]
 8018366:	b103      	cbz	r3, 801836a <_sbrk_r+0x1a>
 8018368:	6023      	str	r3, [r4, #0]
 801836a:	bd38      	pop	{r3, r4, r5, pc}
 801836c:	24006834 	.word	0x24006834

08018370 <__assert_func>:
 8018370:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018372:	4614      	mov	r4, r2
 8018374:	461a      	mov	r2, r3
 8018376:	4b09      	ldr	r3, [pc, #36]	@ (801839c <__assert_func+0x2c>)
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	4605      	mov	r5, r0
 801837c:	68d8      	ldr	r0, [r3, #12]
 801837e:	b954      	cbnz	r4, 8018396 <__assert_func+0x26>
 8018380:	4b07      	ldr	r3, [pc, #28]	@ (80183a0 <__assert_func+0x30>)
 8018382:	461c      	mov	r4, r3
 8018384:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018388:	9100      	str	r1, [sp, #0]
 801838a:	462b      	mov	r3, r5
 801838c:	4905      	ldr	r1, [pc, #20]	@ (80183a4 <__assert_func+0x34>)
 801838e:	f000 f829 	bl	80183e4 <fiprintf>
 8018392:	f000 f839 	bl	8018408 <abort>
 8018396:	4b04      	ldr	r3, [pc, #16]	@ (80183a8 <__assert_func+0x38>)
 8018398:	e7f4      	b.n	8018384 <__assert_func+0x14>
 801839a:	bf00      	nop
 801839c:	24000240 	.word	0x24000240
 80183a0:	080193ab 	.word	0x080193ab
 80183a4:	0801937d 	.word	0x0801937d
 80183a8:	08019370 	.word	0x08019370

080183ac <_calloc_r>:
 80183ac:	b570      	push	{r4, r5, r6, lr}
 80183ae:	fba1 5402 	umull	r5, r4, r1, r2
 80183b2:	b93c      	cbnz	r4, 80183c4 <_calloc_r+0x18>
 80183b4:	4629      	mov	r1, r5
 80183b6:	f7ff f9c5 	bl	8017744 <_malloc_r>
 80183ba:	4606      	mov	r6, r0
 80183bc:	b928      	cbnz	r0, 80183ca <_calloc_r+0x1e>
 80183be:	2600      	movs	r6, #0
 80183c0:	4630      	mov	r0, r6
 80183c2:	bd70      	pop	{r4, r5, r6, pc}
 80183c4:	220c      	movs	r2, #12
 80183c6:	6002      	str	r2, [r0, #0]
 80183c8:	e7f9      	b.n	80183be <_calloc_r+0x12>
 80183ca:	462a      	mov	r2, r5
 80183cc:	4621      	mov	r1, r4
 80183ce:	f7fe fd62 	bl	8016e96 <memset>
 80183d2:	e7f5      	b.n	80183c0 <_calloc_r+0x14>

080183d4 <malloc>:
 80183d4:	4b02      	ldr	r3, [pc, #8]	@ (80183e0 <malloc+0xc>)
 80183d6:	4601      	mov	r1, r0
 80183d8:	6818      	ldr	r0, [r3, #0]
 80183da:	f7ff b9b3 	b.w	8017744 <_malloc_r>
 80183de:	bf00      	nop
 80183e0:	24000240 	.word	0x24000240

080183e4 <fiprintf>:
 80183e4:	b40e      	push	{r1, r2, r3}
 80183e6:	b503      	push	{r0, r1, lr}
 80183e8:	4601      	mov	r1, r0
 80183ea:	ab03      	add	r3, sp, #12
 80183ec:	4805      	ldr	r0, [pc, #20]	@ (8018404 <fiprintf+0x20>)
 80183ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80183f2:	6800      	ldr	r0, [r0, #0]
 80183f4:	9301      	str	r3, [sp, #4]
 80183f6:	f000 f837 	bl	8018468 <_vfiprintf_r>
 80183fa:	b002      	add	sp, #8
 80183fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8018400:	b003      	add	sp, #12
 8018402:	4770      	bx	lr
 8018404:	24000240 	.word	0x24000240

08018408 <abort>:
 8018408:	b508      	push	{r3, lr}
 801840a:	2006      	movs	r0, #6
 801840c:	f000 fb8e 	bl	8018b2c <raise>
 8018410:	2001      	movs	r0, #1
 8018412:	f7ea fa49 	bl	80028a8 <_exit>

08018416 <__sfputc_r>:
 8018416:	6893      	ldr	r3, [r2, #8]
 8018418:	3b01      	subs	r3, #1
 801841a:	2b00      	cmp	r3, #0
 801841c:	b410      	push	{r4}
 801841e:	6093      	str	r3, [r2, #8]
 8018420:	da08      	bge.n	8018434 <__sfputc_r+0x1e>
 8018422:	6994      	ldr	r4, [r2, #24]
 8018424:	42a3      	cmp	r3, r4
 8018426:	db01      	blt.n	801842c <__sfputc_r+0x16>
 8018428:	290a      	cmp	r1, #10
 801842a:	d103      	bne.n	8018434 <__sfputc_r+0x1e>
 801842c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018430:	f000 bac0 	b.w	80189b4 <__swbuf_r>
 8018434:	6813      	ldr	r3, [r2, #0]
 8018436:	1c58      	adds	r0, r3, #1
 8018438:	6010      	str	r0, [r2, #0]
 801843a:	7019      	strb	r1, [r3, #0]
 801843c:	4608      	mov	r0, r1
 801843e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018442:	4770      	bx	lr

08018444 <__sfputs_r>:
 8018444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018446:	4606      	mov	r6, r0
 8018448:	460f      	mov	r7, r1
 801844a:	4614      	mov	r4, r2
 801844c:	18d5      	adds	r5, r2, r3
 801844e:	42ac      	cmp	r4, r5
 8018450:	d101      	bne.n	8018456 <__sfputs_r+0x12>
 8018452:	2000      	movs	r0, #0
 8018454:	e007      	b.n	8018466 <__sfputs_r+0x22>
 8018456:	f814 1b01 	ldrb.w	r1, [r4], #1
 801845a:	463a      	mov	r2, r7
 801845c:	4630      	mov	r0, r6
 801845e:	f7ff ffda 	bl	8018416 <__sfputc_r>
 8018462:	1c43      	adds	r3, r0, #1
 8018464:	d1f3      	bne.n	801844e <__sfputs_r+0xa>
 8018466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018468 <_vfiprintf_r>:
 8018468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801846c:	460d      	mov	r5, r1
 801846e:	b09d      	sub	sp, #116	@ 0x74
 8018470:	4614      	mov	r4, r2
 8018472:	4698      	mov	r8, r3
 8018474:	4606      	mov	r6, r0
 8018476:	b118      	cbz	r0, 8018480 <_vfiprintf_r+0x18>
 8018478:	6a03      	ldr	r3, [r0, #32]
 801847a:	b90b      	cbnz	r3, 8018480 <_vfiprintf_r+0x18>
 801847c:	f7fe fc92 	bl	8016da4 <__sinit>
 8018480:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018482:	07d9      	lsls	r1, r3, #31
 8018484:	d405      	bmi.n	8018492 <_vfiprintf_r+0x2a>
 8018486:	89ab      	ldrh	r3, [r5, #12]
 8018488:	059a      	lsls	r2, r3, #22
 801848a:	d402      	bmi.n	8018492 <_vfiprintf_r+0x2a>
 801848c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801848e:	f7fe fd9a 	bl	8016fc6 <__retarget_lock_acquire_recursive>
 8018492:	89ab      	ldrh	r3, [r5, #12]
 8018494:	071b      	lsls	r3, r3, #28
 8018496:	d501      	bpl.n	801849c <_vfiprintf_r+0x34>
 8018498:	692b      	ldr	r3, [r5, #16]
 801849a:	b99b      	cbnz	r3, 80184c4 <_vfiprintf_r+0x5c>
 801849c:	4629      	mov	r1, r5
 801849e:	4630      	mov	r0, r6
 80184a0:	f000 fac6 	bl	8018a30 <__swsetup_r>
 80184a4:	b170      	cbz	r0, 80184c4 <_vfiprintf_r+0x5c>
 80184a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80184a8:	07dc      	lsls	r4, r3, #31
 80184aa:	d504      	bpl.n	80184b6 <_vfiprintf_r+0x4e>
 80184ac:	f04f 30ff 	mov.w	r0, #4294967295
 80184b0:	b01d      	add	sp, #116	@ 0x74
 80184b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184b6:	89ab      	ldrh	r3, [r5, #12]
 80184b8:	0598      	lsls	r0, r3, #22
 80184ba:	d4f7      	bmi.n	80184ac <_vfiprintf_r+0x44>
 80184bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80184be:	f7fe fd83 	bl	8016fc8 <__retarget_lock_release_recursive>
 80184c2:	e7f3      	b.n	80184ac <_vfiprintf_r+0x44>
 80184c4:	2300      	movs	r3, #0
 80184c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80184c8:	2320      	movs	r3, #32
 80184ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80184ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80184d2:	2330      	movs	r3, #48	@ 0x30
 80184d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018684 <_vfiprintf_r+0x21c>
 80184d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80184dc:	f04f 0901 	mov.w	r9, #1
 80184e0:	4623      	mov	r3, r4
 80184e2:	469a      	mov	sl, r3
 80184e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80184e8:	b10a      	cbz	r2, 80184ee <_vfiprintf_r+0x86>
 80184ea:	2a25      	cmp	r2, #37	@ 0x25
 80184ec:	d1f9      	bne.n	80184e2 <_vfiprintf_r+0x7a>
 80184ee:	ebba 0b04 	subs.w	fp, sl, r4
 80184f2:	d00b      	beq.n	801850c <_vfiprintf_r+0xa4>
 80184f4:	465b      	mov	r3, fp
 80184f6:	4622      	mov	r2, r4
 80184f8:	4629      	mov	r1, r5
 80184fa:	4630      	mov	r0, r6
 80184fc:	f7ff ffa2 	bl	8018444 <__sfputs_r>
 8018500:	3001      	adds	r0, #1
 8018502:	f000 80a7 	beq.w	8018654 <_vfiprintf_r+0x1ec>
 8018506:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018508:	445a      	add	r2, fp
 801850a:	9209      	str	r2, [sp, #36]	@ 0x24
 801850c:	f89a 3000 	ldrb.w	r3, [sl]
 8018510:	2b00      	cmp	r3, #0
 8018512:	f000 809f 	beq.w	8018654 <_vfiprintf_r+0x1ec>
 8018516:	2300      	movs	r3, #0
 8018518:	f04f 32ff 	mov.w	r2, #4294967295
 801851c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018520:	f10a 0a01 	add.w	sl, sl, #1
 8018524:	9304      	str	r3, [sp, #16]
 8018526:	9307      	str	r3, [sp, #28]
 8018528:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801852c:	931a      	str	r3, [sp, #104]	@ 0x68
 801852e:	4654      	mov	r4, sl
 8018530:	2205      	movs	r2, #5
 8018532:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018536:	4853      	ldr	r0, [pc, #332]	@ (8018684 <_vfiprintf_r+0x21c>)
 8018538:	f7e7 feea 	bl	8000310 <memchr>
 801853c:	9a04      	ldr	r2, [sp, #16]
 801853e:	b9d8      	cbnz	r0, 8018578 <_vfiprintf_r+0x110>
 8018540:	06d1      	lsls	r1, r2, #27
 8018542:	bf44      	itt	mi
 8018544:	2320      	movmi	r3, #32
 8018546:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801854a:	0713      	lsls	r3, r2, #28
 801854c:	bf44      	itt	mi
 801854e:	232b      	movmi	r3, #43	@ 0x2b
 8018550:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018554:	f89a 3000 	ldrb.w	r3, [sl]
 8018558:	2b2a      	cmp	r3, #42	@ 0x2a
 801855a:	d015      	beq.n	8018588 <_vfiprintf_r+0x120>
 801855c:	9a07      	ldr	r2, [sp, #28]
 801855e:	4654      	mov	r4, sl
 8018560:	2000      	movs	r0, #0
 8018562:	f04f 0c0a 	mov.w	ip, #10
 8018566:	4621      	mov	r1, r4
 8018568:	f811 3b01 	ldrb.w	r3, [r1], #1
 801856c:	3b30      	subs	r3, #48	@ 0x30
 801856e:	2b09      	cmp	r3, #9
 8018570:	d94b      	bls.n	801860a <_vfiprintf_r+0x1a2>
 8018572:	b1b0      	cbz	r0, 80185a2 <_vfiprintf_r+0x13a>
 8018574:	9207      	str	r2, [sp, #28]
 8018576:	e014      	b.n	80185a2 <_vfiprintf_r+0x13a>
 8018578:	eba0 0308 	sub.w	r3, r0, r8
 801857c:	fa09 f303 	lsl.w	r3, r9, r3
 8018580:	4313      	orrs	r3, r2
 8018582:	9304      	str	r3, [sp, #16]
 8018584:	46a2      	mov	sl, r4
 8018586:	e7d2      	b.n	801852e <_vfiprintf_r+0xc6>
 8018588:	9b03      	ldr	r3, [sp, #12]
 801858a:	1d19      	adds	r1, r3, #4
 801858c:	681b      	ldr	r3, [r3, #0]
 801858e:	9103      	str	r1, [sp, #12]
 8018590:	2b00      	cmp	r3, #0
 8018592:	bfbb      	ittet	lt
 8018594:	425b      	neglt	r3, r3
 8018596:	f042 0202 	orrlt.w	r2, r2, #2
 801859a:	9307      	strge	r3, [sp, #28]
 801859c:	9307      	strlt	r3, [sp, #28]
 801859e:	bfb8      	it	lt
 80185a0:	9204      	strlt	r2, [sp, #16]
 80185a2:	7823      	ldrb	r3, [r4, #0]
 80185a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80185a6:	d10a      	bne.n	80185be <_vfiprintf_r+0x156>
 80185a8:	7863      	ldrb	r3, [r4, #1]
 80185aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80185ac:	d132      	bne.n	8018614 <_vfiprintf_r+0x1ac>
 80185ae:	9b03      	ldr	r3, [sp, #12]
 80185b0:	1d1a      	adds	r2, r3, #4
 80185b2:	681b      	ldr	r3, [r3, #0]
 80185b4:	9203      	str	r2, [sp, #12]
 80185b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80185ba:	3402      	adds	r4, #2
 80185bc:	9305      	str	r3, [sp, #20]
 80185be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018694 <_vfiprintf_r+0x22c>
 80185c2:	7821      	ldrb	r1, [r4, #0]
 80185c4:	2203      	movs	r2, #3
 80185c6:	4650      	mov	r0, sl
 80185c8:	f7e7 fea2 	bl	8000310 <memchr>
 80185cc:	b138      	cbz	r0, 80185de <_vfiprintf_r+0x176>
 80185ce:	9b04      	ldr	r3, [sp, #16]
 80185d0:	eba0 000a 	sub.w	r0, r0, sl
 80185d4:	2240      	movs	r2, #64	@ 0x40
 80185d6:	4082      	lsls	r2, r0
 80185d8:	4313      	orrs	r3, r2
 80185da:	3401      	adds	r4, #1
 80185dc:	9304      	str	r3, [sp, #16]
 80185de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80185e2:	4829      	ldr	r0, [pc, #164]	@ (8018688 <_vfiprintf_r+0x220>)
 80185e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80185e8:	2206      	movs	r2, #6
 80185ea:	f7e7 fe91 	bl	8000310 <memchr>
 80185ee:	2800      	cmp	r0, #0
 80185f0:	d03f      	beq.n	8018672 <_vfiprintf_r+0x20a>
 80185f2:	4b26      	ldr	r3, [pc, #152]	@ (801868c <_vfiprintf_r+0x224>)
 80185f4:	bb1b      	cbnz	r3, 801863e <_vfiprintf_r+0x1d6>
 80185f6:	9b03      	ldr	r3, [sp, #12]
 80185f8:	3307      	adds	r3, #7
 80185fa:	f023 0307 	bic.w	r3, r3, #7
 80185fe:	3308      	adds	r3, #8
 8018600:	9303      	str	r3, [sp, #12]
 8018602:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018604:	443b      	add	r3, r7
 8018606:	9309      	str	r3, [sp, #36]	@ 0x24
 8018608:	e76a      	b.n	80184e0 <_vfiprintf_r+0x78>
 801860a:	fb0c 3202 	mla	r2, ip, r2, r3
 801860e:	460c      	mov	r4, r1
 8018610:	2001      	movs	r0, #1
 8018612:	e7a8      	b.n	8018566 <_vfiprintf_r+0xfe>
 8018614:	2300      	movs	r3, #0
 8018616:	3401      	adds	r4, #1
 8018618:	9305      	str	r3, [sp, #20]
 801861a:	4619      	mov	r1, r3
 801861c:	f04f 0c0a 	mov.w	ip, #10
 8018620:	4620      	mov	r0, r4
 8018622:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018626:	3a30      	subs	r2, #48	@ 0x30
 8018628:	2a09      	cmp	r2, #9
 801862a:	d903      	bls.n	8018634 <_vfiprintf_r+0x1cc>
 801862c:	2b00      	cmp	r3, #0
 801862e:	d0c6      	beq.n	80185be <_vfiprintf_r+0x156>
 8018630:	9105      	str	r1, [sp, #20]
 8018632:	e7c4      	b.n	80185be <_vfiprintf_r+0x156>
 8018634:	fb0c 2101 	mla	r1, ip, r1, r2
 8018638:	4604      	mov	r4, r0
 801863a:	2301      	movs	r3, #1
 801863c:	e7f0      	b.n	8018620 <_vfiprintf_r+0x1b8>
 801863e:	ab03      	add	r3, sp, #12
 8018640:	9300      	str	r3, [sp, #0]
 8018642:	462a      	mov	r2, r5
 8018644:	4b12      	ldr	r3, [pc, #72]	@ (8018690 <_vfiprintf_r+0x228>)
 8018646:	a904      	add	r1, sp, #16
 8018648:	4630      	mov	r0, r6
 801864a:	f3af 8000 	nop.w
 801864e:	4607      	mov	r7, r0
 8018650:	1c78      	adds	r0, r7, #1
 8018652:	d1d6      	bne.n	8018602 <_vfiprintf_r+0x19a>
 8018654:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018656:	07d9      	lsls	r1, r3, #31
 8018658:	d405      	bmi.n	8018666 <_vfiprintf_r+0x1fe>
 801865a:	89ab      	ldrh	r3, [r5, #12]
 801865c:	059a      	lsls	r2, r3, #22
 801865e:	d402      	bmi.n	8018666 <_vfiprintf_r+0x1fe>
 8018660:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018662:	f7fe fcb1 	bl	8016fc8 <__retarget_lock_release_recursive>
 8018666:	89ab      	ldrh	r3, [r5, #12]
 8018668:	065b      	lsls	r3, r3, #25
 801866a:	f53f af1f 	bmi.w	80184ac <_vfiprintf_r+0x44>
 801866e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018670:	e71e      	b.n	80184b0 <_vfiprintf_r+0x48>
 8018672:	ab03      	add	r3, sp, #12
 8018674:	9300      	str	r3, [sp, #0]
 8018676:	462a      	mov	r2, r5
 8018678:	4b05      	ldr	r3, [pc, #20]	@ (8018690 <_vfiprintf_r+0x228>)
 801867a:	a904      	add	r1, sp, #16
 801867c:	4630      	mov	r0, r6
 801867e:	f000 f879 	bl	8018774 <_printf_i>
 8018682:	e7e4      	b.n	801864e <_vfiprintf_r+0x1e6>
 8018684:	080193ac 	.word	0x080193ac
 8018688:	080193b6 	.word	0x080193b6
 801868c:	00000000 	.word	0x00000000
 8018690:	08018445 	.word	0x08018445
 8018694:	080193b2 	.word	0x080193b2

08018698 <_printf_common>:
 8018698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801869c:	4616      	mov	r6, r2
 801869e:	4698      	mov	r8, r3
 80186a0:	688a      	ldr	r2, [r1, #8]
 80186a2:	690b      	ldr	r3, [r1, #16]
 80186a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80186a8:	4293      	cmp	r3, r2
 80186aa:	bfb8      	it	lt
 80186ac:	4613      	movlt	r3, r2
 80186ae:	6033      	str	r3, [r6, #0]
 80186b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80186b4:	4607      	mov	r7, r0
 80186b6:	460c      	mov	r4, r1
 80186b8:	b10a      	cbz	r2, 80186be <_printf_common+0x26>
 80186ba:	3301      	adds	r3, #1
 80186bc:	6033      	str	r3, [r6, #0]
 80186be:	6823      	ldr	r3, [r4, #0]
 80186c0:	0699      	lsls	r1, r3, #26
 80186c2:	bf42      	ittt	mi
 80186c4:	6833      	ldrmi	r3, [r6, #0]
 80186c6:	3302      	addmi	r3, #2
 80186c8:	6033      	strmi	r3, [r6, #0]
 80186ca:	6825      	ldr	r5, [r4, #0]
 80186cc:	f015 0506 	ands.w	r5, r5, #6
 80186d0:	d106      	bne.n	80186e0 <_printf_common+0x48>
 80186d2:	f104 0a19 	add.w	sl, r4, #25
 80186d6:	68e3      	ldr	r3, [r4, #12]
 80186d8:	6832      	ldr	r2, [r6, #0]
 80186da:	1a9b      	subs	r3, r3, r2
 80186dc:	42ab      	cmp	r3, r5
 80186de:	dc26      	bgt.n	801872e <_printf_common+0x96>
 80186e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80186e4:	6822      	ldr	r2, [r4, #0]
 80186e6:	3b00      	subs	r3, #0
 80186e8:	bf18      	it	ne
 80186ea:	2301      	movne	r3, #1
 80186ec:	0692      	lsls	r2, r2, #26
 80186ee:	d42b      	bmi.n	8018748 <_printf_common+0xb0>
 80186f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80186f4:	4641      	mov	r1, r8
 80186f6:	4638      	mov	r0, r7
 80186f8:	47c8      	blx	r9
 80186fa:	3001      	adds	r0, #1
 80186fc:	d01e      	beq.n	801873c <_printf_common+0xa4>
 80186fe:	6823      	ldr	r3, [r4, #0]
 8018700:	6922      	ldr	r2, [r4, #16]
 8018702:	f003 0306 	and.w	r3, r3, #6
 8018706:	2b04      	cmp	r3, #4
 8018708:	bf02      	ittt	eq
 801870a:	68e5      	ldreq	r5, [r4, #12]
 801870c:	6833      	ldreq	r3, [r6, #0]
 801870e:	1aed      	subeq	r5, r5, r3
 8018710:	68a3      	ldr	r3, [r4, #8]
 8018712:	bf0c      	ite	eq
 8018714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018718:	2500      	movne	r5, #0
 801871a:	4293      	cmp	r3, r2
 801871c:	bfc4      	itt	gt
 801871e:	1a9b      	subgt	r3, r3, r2
 8018720:	18ed      	addgt	r5, r5, r3
 8018722:	2600      	movs	r6, #0
 8018724:	341a      	adds	r4, #26
 8018726:	42b5      	cmp	r5, r6
 8018728:	d11a      	bne.n	8018760 <_printf_common+0xc8>
 801872a:	2000      	movs	r0, #0
 801872c:	e008      	b.n	8018740 <_printf_common+0xa8>
 801872e:	2301      	movs	r3, #1
 8018730:	4652      	mov	r2, sl
 8018732:	4641      	mov	r1, r8
 8018734:	4638      	mov	r0, r7
 8018736:	47c8      	blx	r9
 8018738:	3001      	adds	r0, #1
 801873a:	d103      	bne.n	8018744 <_printf_common+0xac>
 801873c:	f04f 30ff 	mov.w	r0, #4294967295
 8018740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018744:	3501      	adds	r5, #1
 8018746:	e7c6      	b.n	80186d6 <_printf_common+0x3e>
 8018748:	18e1      	adds	r1, r4, r3
 801874a:	1c5a      	adds	r2, r3, #1
 801874c:	2030      	movs	r0, #48	@ 0x30
 801874e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018752:	4422      	add	r2, r4
 8018754:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018758:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801875c:	3302      	adds	r3, #2
 801875e:	e7c7      	b.n	80186f0 <_printf_common+0x58>
 8018760:	2301      	movs	r3, #1
 8018762:	4622      	mov	r2, r4
 8018764:	4641      	mov	r1, r8
 8018766:	4638      	mov	r0, r7
 8018768:	47c8      	blx	r9
 801876a:	3001      	adds	r0, #1
 801876c:	d0e6      	beq.n	801873c <_printf_common+0xa4>
 801876e:	3601      	adds	r6, #1
 8018770:	e7d9      	b.n	8018726 <_printf_common+0x8e>
	...

08018774 <_printf_i>:
 8018774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018778:	7e0f      	ldrb	r7, [r1, #24]
 801877a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801877c:	2f78      	cmp	r7, #120	@ 0x78
 801877e:	4691      	mov	r9, r2
 8018780:	4680      	mov	r8, r0
 8018782:	460c      	mov	r4, r1
 8018784:	469a      	mov	sl, r3
 8018786:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801878a:	d807      	bhi.n	801879c <_printf_i+0x28>
 801878c:	2f62      	cmp	r7, #98	@ 0x62
 801878e:	d80a      	bhi.n	80187a6 <_printf_i+0x32>
 8018790:	2f00      	cmp	r7, #0
 8018792:	f000 80d2 	beq.w	801893a <_printf_i+0x1c6>
 8018796:	2f58      	cmp	r7, #88	@ 0x58
 8018798:	f000 80b9 	beq.w	801890e <_printf_i+0x19a>
 801879c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80187a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80187a4:	e03a      	b.n	801881c <_printf_i+0xa8>
 80187a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80187aa:	2b15      	cmp	r3, #21
 80187ac:	d8f6      	bhi.n	801879c <_printf_i+0x28>
 80187ae:	a101      	add	r1, pc, #4	@ (adr r1, 80187b4 <_printf_i+0x40>)
 80187b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80187b4:	0801880d 	.word	0x0801880d
 80187b8:	08018821 	.word	0x08018821
 80187bc:	0801879d 	.word	0x0801879d
 80187c0:	0801879d 	.word	0x0801879d
 80187c4:	0801879d 	.word	0x0801879d
 80187c8:	0801879d 	.word	0x0801879d
 80187cc:	08018821 	.word	0x08018821
 80187d0:	0801879d 	.word	0x0801879d
 80187d4:	0801879d 	.word	0x0801879d
 80187d8:	0801879d 	.word	0x0801879d
 80187dc:	0801879d 	.word	0x0801879d
 80187e0:	08018921 	.word	0x08018921
 80187e4:	0801884b 	.word	0x0801884b
 80187e8:	080188db 	.word	0x080188db
 80187ec:	0801879d 	.word	0x0801879d
 80187f0:	0801879d 	.word	0x0801879d
 80187f4:	08018943 	.word	0x08018943
 80187f8:	0801879d 	.word	0x0801879d
 80187fc:	0801884b 	.word	0x0801884b
 8018800:	0801879d 	.word	0x0801879d
 8018804:	0801879d 	.word	0x0801879d
 8018808:	080188e3 	.word	0x080188e3
 801880c:	6833      	ldr	r3, [r6, #0]
 801880e:	1d1a      	adds	r2, r3, #4
 8018810:	681b      	ldr	r3, [r3, #0]
 8018812:	6032      	str	r2, [r6, #0]
 8018814:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018818:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801881c:	2301      	movs	r3, #1
 801881e:	e09d      	b.n	801895c <_printf_i+0x1e8>
 8018820:	6833      	ldr	r3, [r6, #0]
 8018822:	6820      	ldr	r0, [r4, #0]
 8018824:	1d19      	adds	r1, r3, #4
 8018826:	6031      	str	r1, [r6, #0]
 8018828:	0606      	lsls	r6, r0, #24
 801882a:	d501      	bpl.n	8018830 <_printf_i+0xbc>
 801882c:	681d      	ldr	r5, [r3, #0]
 801882e:	e003      	b.n	8018838 <_printf_i+0xc4>
 8018830:	0645      	lsls	r5, r0, #25
 8018832:	d5fb      	bpl.n	801882c <_printf_i+0xb8>
 8018834:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018838:	2d00      	cmp	r5, #0
 801883a:	da03      	bge.n	8018844 <_printf_i+0xd0>
 801883c:	232d      	movs	r3, #45	@ 0x2d
 801883e:	426d      	negs	r5, r5
 8018840:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018844:	4859      	ldr	r0, [pc, #356]	@ (80189ac <_printf_i+0x238>)
 8018846:	230a      	movs	r3, #10
 8018848:	e011      	b.n	801886e <_printf_i+0xfa>
 801884a:	6821      	ldr	r1, [r4, #0]
 801884c:	6833      	ldr	r3, [r6, #0]
 801884e:	0608      	lsls	r0, r1, #24
 8018850:	f853 5b04 	ldr.w	r5, [r3], #4
 8018854:	d402      	bmi.n	801885c <_printf_i+0xe8>
 8018856:	0649      	lsls	r1, r1, #25
 8018858:	bf48      	it	mi
 801885a:	b2ad      	uxthmi	r5, r5
 801885c:	2f6f      	cmp	r7, #111	@ 0x6f
 801885e:	4853      	ldr	r0, [pc, #332]	@ (80189ac <_printf_i+0x238>)
 8018860:	6033      	str	r3, [r6, #0]
 8018862:	bf14      	ite	ne
 8018864:	230a      	movne	r3, #10
 8018866:	2308      	moveq	r3, #8
 8018868:	2100      	movs	r1, #0
 801886a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801886e:	6866      	ldr	r6, [r4, #4]
 8018870:	60a6      	str	r6, [r4, #8]
 8018872:	2e00      	cmp	r6, #0
 8018874:	bfa2      	ittt	ge
 8018876:	6821      	ldrge	r1, [r4, #0]
 8018878:	f021 0104 	bicge.w	r1, r1, #4
 801887c:	6021      	strge	r1, [r4, #0]
 801887e:	b90d      	cbnz	r5, 8018884 <_printf_i+0x110>
 8018880:	2e00      	cmp	r6, #0
 8018882:	d04b      	beq.n	801891c <_printf_i+0x1a8>
 8018884:	4616      	mov	r6, r2
 8018886:	fbb5 f1f3 	udiv	r1, r5, r3
 801888a:	fb03 5711 	mls	r7, r3, r1, r5
 801888e:	5dc7      	ldrb	r7, [r0, r7]
 8018890:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018894:	462f      	mov	r7, r5
 8018896:	42bb      	cmp	r3, r7
 8018898:	460d      	mov	r5, r1
 801889a:	d9f4      	bls.n	8018886 <_printf_i+0x112>
 801889c:	2b08      	cmp	r3, #8
 801889e:	d10b      	bne.n	80188b8 <_printf_i+0x144>
 80188a0:	6823      	ldr	r3, [r4, #0]
 80188a2:	07df      	lsls	r7, r3, #31
 80188a4:	d508      	bpl.n	80188b8 <_printf_i+0x144>
 80188a6:	6923      	ldr	r3, [r4, #16]
 80188a8:	6861      	ldr	r1, [r4, #4]
 80188aa:	4299      	cmp	r1, r3
 80188ac:	bfde      	ittt	le
 80188ae:	2330      	movle	r3, #48	@ 0x30
 80188b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80188b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80188b8:	1b92      	subs	r2, r2, r6
 80188ba:	6122      	str	r2, [r4, #16]
 80188bc:	f8cd a000 	str.w	sl, [sp]
 80188c0:	464b      	mov	r3, r9
 80188c2:	aa03      	add	r2, sp, #12
 80188c4:	4621      	mov	r1, r4
 80188c6:	4640      	mov	r0, r8
 80188c8:	f7ff fee6 	bl	8018698 <_printf_common>
 80188cc:	3001      	adds	r0, #1
 80188ce:	d14a      	bne.n	8018966 <_printf_i+0x1f2>
 80188d0:	f04f 30ff 	mov.w	r0, #4294967295
 80188d4:	b004      	add	sp, #16
 80188d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80188da:	6823      	ldr	r3, [r4, #0]
 80188dc:	f043 0320 	orr.w	r3, r3, #32
 80188e0:	6023      	str	r3, [r4, #0]
 80188e2:	4833      	ldr	r0, [pc, #204]	@ (80189b0 <_printf_i+0x23c>)
 80188e4:	2778      	movs	r7, #120	@ 0x78
 80188e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80188ea:	6823      	ldr	r3, [r4, #0]
 80188ec:	6831      	ldr	r1, [r6, #0]
 80188ee:	061f      	lsls	r7, r3, #24
 80188f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80188f4:	d402      	bmi.n	80188fc <_printf_i+0x188>
 80188f6:	065f      	lsls	r7, r3, #25
 80188f8:	bf48      	it	mi
 80188fa:	b2ad      	uxthmi	r5, r5
 80188fc:	6031      	str	r1, [r6, #0]
 80188fe:	07d9      	lsls	r1, r3, #31
 8018900:	bf44      	itt	mi
 8018902:	f043 0320 	orrmi.w	r3, r3, #32
 8018906:	6023      	strmi	r3, [r4, #0]
 8018908:	b11d      	cbz	r5, 8018912 <_printf_i+0x19e>
 801890a:	2310      	movs	r3, #16
 801890c:	e7ac      	b.n	8018868 <_printf_i+0xf4>
 801890e:	4827      	ldr	r0, [pc, #156]	@ (80189ac <_printf_i+0x238>)
 8018910:	e7e9      	b.n	80188e6 <_printf_i+0x172>
 8018912:	6823      	ldr	r3, [r4, #0]
 8018914:	f023 0320 	bic.w	r3, r3, #32
 8018918:	6023      	str	r3, [r4, #0]
 801891a:	e7f6      	b.n	801890a <_printf_i+0x196>
 801891c:	4616      	mov	r6, r2
 801891e:	e7bd      	b.n	801889c <_printf_i+0x128>
 8018920:	6833      	ldr	r3, [r6, #0]
 8018922:	6825      	ldr	r5, [r4, #0]
 8018924:	6961      	ldr	r1, [r4, #20]
 8018926:	1d18      	adds	r0, r3, #4
 8018928:	6030      	str	r0, [r6, #0]
 801892a:	062e      	lsls	r6, r5, #24
 801892c:	681b      	ldr	r3, [r3, #0]
 801892e:	d501      	bpl.n	8018934 <_printf_i+0x1c0>
 8018930:	6019      	str	r1, [r3, #0]
 8018932:	e002      	b.n	801893a <_printf_i+0x1c6>
 8018934:	0668      	lsls	r0, r5, #25
 8018936:	d5fb      	bpl.n	8018930 <_printf_i+0x1bc>
 8018938:	8019      	strh	r1, [r3, #0]
 801893a:	2300      	movs	r3, #0
 801893c:	6123      	str	r3, [r4, #16]
 801893e:	4616      	mov	r6, r2
 8018940:	e7bc      	b.n	80188bc <_printf_i+0x148>
 8018942:	6833      	ldr	r3, [r6, #0]
 8018944:	1d1a      	adds	r2, r3, #4
 8018946:	6032      	str	r2, [r6, #0]
 8018948:	681e      	ldr	r6, [r3, #0]
 801894a:	6862      	ldr	r2, [r4, #4]
 801894c:	2100      	movs	r1, #0
 801894e:	4630      	mov	r0, r6
 8018950:	f7e7 fcde 	bl	8000310 <memchr>
 8018954:	b108      	cbz	r0, 801895a <_printf_i+0x1e6>
 8018956:	1b80      	subs	r0, r0, r6
 8018958:	6060      	str	r0, [r4, #4]
 801895a:	6863      	ldr	r3, [r4, #4]
 801895c:	6123      	str	r3, [r4, #16]
 801895e:	2300      	movs	r3, #0
 8018960:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018964:	e7aa      	b.n	80188bc <_printf_i+0x148>
 8018966:	6923      	ldr	r3, [r4, #16]
 8018968:	4632      	mov	r2, r6
 801896a:	4649      	mov	r1, r9
 801896c:	4640      	mov	r0, r8
 801896e:	47d0      	blx	sl
 8018970:	3001      	adds	r0, #1
 8018972:	d0ad      	beq.n	80188d0 <_printf_i+0x15c>
 8018974:	6823      	ldr	r3, [r4, #0]
 8018976:	079b      	lsls	r3, r3, #30
 8018978:	d413      	bmi.n	80189a2 <_printf_i+0x22e>
 801897a:	68e0      	ldr	r0, [r4, #12]
 801897c:	9b03      	ldr	r3, [sp, #12]
 801897e:	4298      	cmp	r0, r3
 8018980:	bfb8      	it	lt
 8018982:	4618      	movlt	r0, r3
 8018984:	e7a6      	b.n	80188d4 <_printf_i+0x160>
 8018986:	2301      	movs	r3, #1
 8018988:	4632      	mov	r2, r6
 801898a:	4649      	mov	r1, r9
 801898c:	4640      	mov	r0, r8
 801898e:	47d0      	blx	sl
 8018990:	3001      	adds	r0, #1
 8018992:	d09d      	beq.n	80188d0 <_printf_i+0x15c>
 8018994:	3501      	adds	r5, #1
 8018996:	68e3      	ldr	r3, [r4, #12]
 8018998:	9903      	ldr	r1, [sp, #12]
 801899a:	1a5b      	subs	r3, r3, r1
 801899c:	42ab      	cmp	r3, r5
 801899e:	dcf2      	bgt.n	8018986 <_printf_i+0x212>
 80189a0:	e7eb      	b.n	801897a <_printf_i+0x206>
 80189a2:	2500      	movs	r5, #0
 80189a4:	f104 0619 	add.w	r6, r4, #25
 80189a8:	e7f5      	b.n	8018996 <_printf_i+0x222>
 80189aa:	bf00      	nop
 80189ac:	080193bd 	.word	0x080193bd
 80189b0:	080193ce 	.word	0x080193ce

080189b4 <__swbuf_r>:
 80189b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189b6:	460e      	mov	r6, r1
 80189b8:	4614      	mov	r4, r2
 80189ba:	4605      	mov	r5, r0
 80189bc:	b118      	cbz	r0, 80189c6 <__swbuf_r+0x12>
 80189be:	6a03      	ldr	r3, [r0, #32]
 80189c0:	b90b      	cbnz	r3, 80189c6 <__swbuf_r+0x12>
 80189c2:	f7fe f9ef 	bl	8016da4 <__sinit>
 80189c6:	69a3      	ldr	r3, [r4, #24]
 80189c8:	60a3      	str	r3, [r4, #8]
 80189ca:	89a3      	ldrh	r3, [r4, #12]
 80189cc:	071a      	lsls	r2, r3, #28
 80189ce:	d501      	bpl.n	80189d4 <__swbuf_r+0x20>
 80189d0:	6923      	ldr	r3, [r4, #16]
 80189d2:	b943      	cbnz	r3, 80189e6 <__swbuf_r+0x32>
 80189d4:	4621      	mov	r1, r4
 80189d6:	4628      	mov	r0, r5
 80189d8:	f000 f82a 	bl	8018a30 <__swsetup_r>
 80189dc:	b118      	cbz	r0, 80189e6 <__swbuf_r+0x32>
 80189de:	f04f 37ff 	mov.w	r7, #4294967295
 80189e2:	4638      	mov	r0, r7
 80189e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80189e6:	6823      	ldr	r3, [r4, #0]
 80189e8:	6922      	ldr	r2, [r4, #16]
 80189ea:	1a98      	subs	r0, r3, r2
 80189ec:	6963      	ldr	r3, [r4, #20]
 80189ee:	b2f6      	uxtb	r6, r6
 80189f0:	4283      	cmp	r3, r0
 80189f2:	4637      	mov	r7, r6
 80189f4:	dc05      	bgt.n	8018a02 <__swbuf_r+0x4e>
 80189f6:	4621      	mov	r1, r4
 80189f8:	4628      	mov	r0, r5
 80189fa:	f7ff fc81 	bl	8018300 <_fflush_r>
 80189fe:	2800      	cmp	r0, #0
 8018a00:	d1ed      	bne.n	80189de <__swbuf_r+0x2a>
 8018a02:	68a3      	ldr	r3, [r4, #8]
 8018a04:	3b01      	subs	r3, #1
 8018a06:	60a3      	str	r3, [r4, #8]
 8018a08:	6823      	ldr	r3, [r4, #0]
 8018a0a:	1c5a      	adds	r2, r3, #1
 8018a0c:	6022      	str	r2, [r4, #0]
 8018a0e:	701e      	strb	r6, [r3, #0]
 8018a10:	6962      	ldr	r2, [r4, #20]
 8018a12:	1c43      	adds	r3, r0, #1
 8018a14:	429a      	cmp	r2, r3
 8018a16:	d004      	beq.n	8018a22 <__swbuf_r+0x6e>
 8018a18:	89a3      	ldrh	r3, [r4, #12]
 8018a1a:	07db      	lsls	r3, r3, #31
 8018a1c:	d5e1      	bpl.n	80189e2 <__swbuf_r+0x2e>
 8018a1e:	2e0a      	cmp	r6, #10
 8018a20:	d1df      	bne.n	80189e2 <__swbuf_r+0x2e>
 8018a22:	4621      	mov	r1, r4
 8018a24:	4628      	mov	r0, r5
 8018a26:	f7ff fc6b 	bl	8018300 <_fflush_r>
 8018a2a:	2800      	cmp	r0, #0
 8018a2c:	d0d9      	beq.n	80189e2 <__swbuf_r+0x2e>
 8018a2e:	e7d6      	b.n	80189de <__swbuf_r+0x2a>

08018a30 <__swsetup_r>:
 8018a30:	b538      	push	{r3, r4, r5, lr}
 8018a32:	4b29      	ldr	r3, [pc, #164]	@ (8018ad8 <__swsetup_r+0xa8>)
 8018a34:	4605      	mov	r5, r0
 8018a36:	6818      	ldr	r0, [r3, #0]
 8018a38:	460c      	mov	r4, r1
 8018a3a:	b118      	cbz	r0, 8018a44 <__swsetup_r+0x14>
 8018a3c:	6a03      	ldr	r3, [r0, #32]
 8018a3e:	b90b      	cbnz	r3, 8018a44 <__swsetup_r+0x14>
 8018a40:	f7fe f9b0 	bl	8016da4 <__sinit>
 8018a44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018a48:	0719      	lsls	r1, r3, #28
 8018a4a:	d422      	bmi.n	8018a92 <__swsetup_r+0x62>
 8018a4c:	06da      	lsls	r2, r3, #27
 8018a4e:	d407      	bmi.n	8018a60 <__swsetup_r+0x30>
 8018a50:	2209      	movs	r2, #9
 8018a52:	602a      	str	r2, [r5, #0]
 8018a54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018a58:	81a3      	strh	r3, [r4, #12]
 8018a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8018a5e:	e033      	b.n	8018ac8 <__swsetup_r+0x98>
 8018a60:	0758      	lsls	r0, r3, #29
 8018a62:	d512      	bpl.n	8018a8a <__swsetup_r+0x5a>
 8018a64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018a66:	b141      	cbz	r1, 8018a7a <__swsetup_r+0x4a>
 8018a68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018a6c:	4299      	cmp	r1, r3
 8018a6e:	d002      	beq.n	8018a76 <__swsetup_r+0x46>
 8018a70:	4628      	mov	r0, r5
 8018a72:	f7fe fac1 	bl	8016ff8 <_free_r>
 8018a76:	2300      	movs	r3, #0
 8018a78:	6363      	str	r3, [r4, #52]	@ 0x34
 8018a7a:	89a3      	ldrh	r3, [r4, #12]
 8018a7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018a80:	81a3      	strh	r3, [r4, #12]
 8018a82:	2300      	movs	r3, #0
 8018a84:	6063      	str	r3, [r4, #4]
 8018a86:	6923      	ldr	r3, [r4, #16]
 8018a88:	6023      	str	r3, [r4, #0]
 8018a8a:	89a3      	ldrh	r3, [r4, #12]
 8018a8c:	f043 0308 	orr.w	r3, r3, #8
 8018a90:	81a3      	strh	r3, [r4, #12]
 8018a92:	6923      	ldr	r3, [r4, #16]
 8018a94:	b94b      	cbnz	r3, 8018aaa <__swsetup_r+0x7a>
 8018a96:	89a3      	ldrh	r3, [r4, #12]
 8018a98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018a9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018aa0:	d003      	beq.n	8018aaa <__swsetup_r+0x7a>
 8018aa2:	4621      	mov	r1, r4
 8018aa4:	4628      	mov	r0, r5
 8018aa6:	f000 f883 	bl	8018bb0 <__smakebuf_r>
 8018aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018aae:	f013 0201 	ands.w	r2, r3, #1
 8018ab2:	d00a      	beq.n	8018aca <__swsetup_r+0x9a>
 8018ab4:	2200      	movs	r2, #0
 8018ab6:	60a2      	str	r2, [r4, #8]
 8018ab8:	6962      	ldr	r2, [r4, #20]
 8018aba:	4252      	negs	r2, r2
 8018abc:	61a2      	str	r2, [r4, #24]
 8018abe:	6922      	ldr	r2, [r4, #16]
 8018ac0:	b942      	cbnz	r2, 8018ad4 <__swsetup_r+0xa4>
 8018ac2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018ac6:	d1c5      	bne.n	8018a54 <__swsetup_r+0x24>
 8018ac8:	bd38      	pop	{r3, r4, r5, pc}
 8018aca:	0799      	lsls	r1, r3, #30
 8018acc:	bf58      	it	pl
 8018ace:	6962      	ldrpl	r2, [r4, #20]
 8018ad0:	60a2      	str	r2, [r4, #8]
 8018ad2:	e7f4      	b.n	8018abe <__swsetup_r+0x8e>
 8018ad4:	2000      	movs	r0, #0
 8018ad6:	e7f7      	b.n	8018ac8 <__swsetup_r+0x98>
 8018ad8:	24000240 	.word	0x24000240

08018adc <_raise_r>:
 8018adc:	291f      	cmp	r1, #31
 8018ade:	b538      	push	{r3, r4, r5, lr}
 8018ae0:	4605      	mov	r5, r0
 8018ae2:	460c      	mov	r4, r1
 8018ae4:	d904      	bls.n	8018af0 <_raise_r+0x14>
 8018ae6:	2316      	movs	r3, #22
 8018ae8:	6003      	str	r3, [r0, #0]
 8018aea:	f04f 30ff 	mov.w	r0, #4294967295
 8018aee:	bd38      	pop	{r3, r4, r5, pc}
 8018af0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018af2:	b112      	cbz	r2, 8018afa <_raise_r+0x1e>
 8018af4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018af8:	b94b      	cbnz	r3, 8018b0e <_raise_r+0x32>
 8018afa:	4628      	mov	r0, r5
 8018afc:	f000 f830 	bl	8018b60 <_getpid_r>
 8018b00:	4622      	mov	r2, r4
 8018b02:	4601      	mov	r1, r0
 8018b04:	4628      	mov	r0, r5
 8018b06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018b0a:	f000 b817 	b.w	8018b3c <_kill_r>
 8018b0e:	2b01      	cmp	r3, #1
 8018b10:	d00a      	beq.n	8018b28 <_raise_r+0x4c>
 8018b12:	1c59      	adds	r1, r3, #1
 8018b14:	d103      	bne.n	8018b1e <_raise_r+0x42>
 8018b16:	2316      	movs	r3, #22
 8018b18:	6003      	str	r3, [r0, #0]
 8018b1a:	2001      	movs	r0, #1
 8018b1c:	e7e7      	b.n	8018aee <_raise_r+0x12>
 8018b1e:	2100      	movs	r1, #0
 8018b20:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018b24:	4620      	mov	r0, r4
 8018b26:	4798      	blx	r3
 8018b28:	2000      	movs	r0, #0
 8018b2a:	e7e0      	b.n	8018aee <_raise_r+0x12>

08018b2c <raise>:
 8018b2c:	4b02      	ldr	r3, [pc, #8]	@ (8018b38 <raise+0xc>)
 8018b2e:	4601      	mov	r1, r0
 8018b30:	6818      	ldr	r0, [r3, #0]
 8018b32:	f7ff bfd3 	b.w	8018adc <_raise_r>
 8018b36:	bf00      	nop
 8018b38:	24000240 	.word	0x24000240

08018b3c <_kill_r>:
 8018b3c:	b538      	push	{r3, r4, r5, lr}
 8018b3e:	4d07      	ldr	r5, [pc, #28]	@ (8018b5c <_kill_r+0x20>)
 8018b40:	2300      	movs	r3, #0
 8018b42:	4604      	mov	r4, r0
 8018b44:	4608      	mov	r0, r1
 8018b46:	4611      	mov	r1, r2
 8018b48:	602b      	str	r3, [r5, #0]
 8018b4a:	f7e9 fe9d 	bl	8002888 <_kill>
 8018b4e:	1c43      	adds	r3, r0, #1
 8018b50:	d102      	bne.n	8018b58 <_kill_r+0x1c>
 8018b52:	682b      	ldr	r3, [r5, #0]
 8018b54:	b103      	cbz	r3, 8018b58 <_kill_r+0x1c>
 8018b56:	6023      	str	r3, [r4, #0]
 8018b58:	bd38      	pop	{r3, r4, r5, pc}
 8018b5a:	bf00      	nop
 8018b5c:	24006834 	.word	0x24006834

08018b60 <_getpid_r>:
 8018b60:	f7e9 be8a 	b.w	8002878 <_getpid>

08018b64 <__swhatbuf_r>:
 8018b64:	b570      	push	{r4, r5, r6, lr}
 8018b66:	460c      	mov	r4, r1
 8018b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018b6c:	2900      	cmp	r1, #0
 8018b6e:	b096      	sub	sp, #88	@ 0x58
 8018b70:	4615      	mov	r5, r2
 8018b72:	461e      	mov	r6, r3
 8018b74:	da0d      	bge.n	8018b92 <__swhatbuf_r+0x2e>
 8018b76:	89a3      	ldrh	r3, [r4, #12]
 8018b78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018b7c:	f04f 0100 	mov.w	r1, #0
 8018b80:	bf14      	ite	ne
 8018b82:	2340      	movne	r3, #64	@ 0x40
 8018b84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018b88:	2000      	movs	r0, #0
 8018b8a:	6031      	str	r1, [r6, #0]
 8018b8c:	602b      	str	r3, [r5, #0]
 8018b8e:	b016      	add	sp, #88	@ 0x58
 8018b90:	bd70      	pop	{r4, r5, r6, pc}
 8018b92:	466a      	mov	r2, sp
 8018b94:	f000 f848 	bl	8018c28 <_fstat_r>
 8018b98:	2800      	cmp	r0, #0
 8018b9a:	dbec      	blt.n	8018b76 <__swhatbuf_r+0x12>
 8018b9c:	9901      	ldr	r1, [sp, #4]
 8018b9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018ba2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018ba6:	4259      	negs	r1, r3
 8018ba8:	4159      	adcs	r1, r3
 8018baa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018bae:	e7eb      	b.n	8018b88 <__swhatbuf_r+0x24>

08018bb0 <__smakebuf_r>:
 8018bb0:	898b      	ldrh	r3, [r1, #12]
 8018bb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018bb4:	079d      	lsls	r5, r3, #30
 8018bb6:	4606      	mov	r6, r0
 8018bb8:	460c      	mov	r4, r1
 8018bba:	d507      	bpl.n	8018bcc <__smakebuf_r+0x1c>
 8018bbc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018bc0:	6023      	str	r3, [r4, #0]
 8018bc2:	6123      	str	r3, [r4, #16]
 8018bc4:	2301      	movs	r3, #1
 8018bc6:	6163      	str	r3, [r4, #20]
 8018bc8:	b003      	add	sp, #12
 8018bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018bcc:	ab01      	add	r3, sp, #4
 8018bce:	466a      	mov	r2, sp
 8018bd0:	f7ff ffc8 	bl	8018b64 <__swhatbuf_r>
 8018bd4:	9f00      	ldr	r7, [sp, #0]
 8018bd6:	4605      	mov	r5, r0
 8018bd8:	4639      	mov	r1, r7
 8018bda:	4630      	mov	r0, r6
 8018bdc:	f7fe fdb2 	bl	8017744 <_malloc_r>
 8018be0:	b948      	cbnz	r0, 8018bf6 <__smakebuf_r+0x46>
 8018be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018be6:	059a      	lsls	r2, r3, #22
 8018be8:	d4ee      	bmi.n	8018bc8 <__smakebuf_r+0x18>
 8018bea:	f023 0303 	bic.w	r3, r3, #3
 8018bee:	f043 0302 	orr.w	r3, r3, #2
 8018bf2:	81a3      	strh	r3, [r4, #12]
 8018bf4:	e7e2      	b.n	8018bbc <__smakebuf_r+0xc>
 8018bf6:	89a3      	ldrh	r3, [r4, #12]
 8018bf8:	6020      	str	r0, [r4, #0]
 8018bfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018bfe:	81a3      	strh	r3, [r4, #12]
 8018c00:	9b01      	ldr	r3, [sp, #4]
 8018c02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018c06:	b15b      	cbz	r3, 8018c20 <__smakebuf_r+0x70>
 8018c08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018c0c:	4630      	mov	r0, r6
 8018c0e:	f000 f81d 	bl	8018c4c <_isatty_r>
 8018c12:	b128      	cbz	r0, 8018c20 <__smakebuf_r+0x70>
 8018c14:	89a3      	ldrh	r3, [r4, #12]
 8018c16:	f023 0303 	bic.w	r3, r3, #3
 8018c1a:	f043 0301 	orr.w	r3, r3, #1
 8018c1e:	81a3      	strh	r3, [r4, #12]
 8018c20:	89a3      	ldrh	r3, [r4, #12]
 8018c22:	431d      	orrs	r5, r3
 8018c24:	81a5      	strh	r5, [r4, #12]
 8018c26:	e7cf      	b.n	8018bc8 <__smakebuf_r+0x18>

08018c28 <_fstat_r>:
 8018c28:	b538      	push	{r3, r4, r5, lr}
 8018c2a:	4d07      	ldr	r5, [pc, #28]	@ (8018c48 <_fstat_r+0x20>)
 8018c2c:	2300      	movs	r3, #0
 8018c2e:	4604      	mov	r4, r0
 8018c30:	4608      	mov	r0, r1
 8018c32:	4611      	mov	r1, r2
 8018c34:	602b      	str	r3, [r5, #0]
 8018c36:	f7e9 fe87 	bl	8002948 <_fstat>
 8018c3a:	1c43      	adds	r3, r0, #1
 8018c3c:	d102      	bne.n	8018c44 <_fstat_r+0x1c>
 8018c3e:	682b      	ldr	r3, [r5, #0]
 8018c40:	b103      	cbz	r3, 8018c44 <_fstat_r+0x1c>
 8018c42:	6023      	str	r3, [r4, #0]
 8018c44:	bd38      	pop	{r3, r4, r5, pc}
 8018c46:	bf00      	nop
 8018c48:	24006834 	.word	0x24006834

08018c4c <_isatty_r>:
 8018c4c:	b538      	push	{r3, r4, r5, lr}
 8018c4e:	4d06      	ldr	r5, [pc, #24]	@ (8018c68 <_isatty_r+0x1c>)
 8018c50:	2300      	movs	r3, #0
 8018c52:	4604      	mov	r4, r0
 8018c54:	4608      	mov	r0, r1
 8018c56:	602b      	str	r3, [r5, #0]
 8018c58:	f7e9 fe86 	bl	8002968 <_isatty>
 8018c5c:	1c43      	adds	r3, r0, #1
 8018c5e:	d102      	bne.n	8018c66 <_isatty_r+0x1a>
 8018c60:	682b      	ldr	r3, [r5, #0]
 8018c62:	b103      	cbz	r3, 8018c66 <_isatty_r+0x1a>
 8018c64:	6023      	str	r3, [r4, #0]
 8018c66:	bd38      	pop	{r3, r4, r5, pc}
 8018c68:	24006834 	.word	0x24006834
 8018c6c:	00000000 	.word	0x00000000

08018c70 <log>:
 8018c70:	b4f0      	push	{r4, r5, r6, r7}
 8018c72:	ee10 0a90 	vmov	r0, s1
 8018c76:	ee10 3a10 	vmov	r3, s0
 8018c7a:	f04f 34ff 	mov.w	r4, #4294967295
 8018c7e:	429c      	cmp	r4, r3
 8018c80:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 8018c84:	4c70      	ldr	r4, [pc, #448]	@ (8018e48 <log+0x1d8>)
 8018c86:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 8018c8a:	418c      	sbcs	r4, r1
 8018c8c:	ed2d 8b02 	vpush	{d8}
 8018c90:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8018c94:	d35a      	bcc.n	8018d4c <log+0xdc>
 8018c96:	4a6d      	ldr	r2, [pc, #436]	@ (8018e4c <log+0x1dc>)
 8018c98:	4290      	cmp	r0, r2
 8018c9a:	bf08      	it	eq
 8018c9c:	2b00      	cmpeq	r3, #0
 8018c9e:	f000 80c4 	beq.w	8018e2a <log+0x1ba>
 8018ca2:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8018ca6:	ee30 0b47 	vsub.f64	d0, d0, d7
 8018caa:	4b69      	ldr	r3, [pc, #420]	@ (8018e50 <log+0x1e0>)
 8018cac:	ee20 2b00 	vmul.f64	d2, d0, d0
 8018cb0:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8018cb4:	ee20 4b02 	vmul.f64	d4, d0, d2
 8018cb8:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8018cbc:	eea6 7b00 	vfma.f64	d7, d6, d0
 8018cc0:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 8018cc4:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 8018cc8:	eea6 7b02 	vfma.f64	d7, d6, d2
 8018ccc:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 8018cd0:	eea5 6b00 	vfma.f64	d6, d5, d0
 8018cd4:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 8018cd8:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 8018cdc:	eea5 6b02 	vfma.f64	d6, d5, d2
 8018ce0:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 8018ce4:	eea3 5b00 	vfma.f64	d5, d3, d0
 8018ce8:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 8018cec:	eea3 5b02 	vfma.f64	d5, d3, d2
 8018cf0:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 8018cf4:	eea3 5b04 	vfma.f64	d5, d3, d4
 8018cf8:	eea5 6b04 	vfma.f64	d6, d5, d4
 8018cfc:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8018d00:	eea6 7b04 	vfma.f64	d7, d6, d4
 8018d04:	eeb0 2b47 	vmov.f64	d2, d7
 8018d08:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8018e30 <log+0x1c0>
 8018d0c:	eeb0 6b40 	vmov.f64	d6, d0
 8018d10:	eeb0 3b40 	vmov.f64	d3, d0
 8018d14:	eea0 6b07 	vfma.f64	d6, d0, d7
 8018d18:	eea0 6b47 	vfms.f64	d6, d0, d7
 8018d1c:	ee30 8b46 	vsub.f64	d8, d0, d6
 8018d20:	ee26 1b06 	vmul.f64	d1, d6, d6
 8018d24:	eea1 3b05 	vfma.f64	d3, d1, d5
 8018d28:	ee30 7b43 	vsub.f64	d7, d0, d3
 8018d2c:	ee30 0b06 	vadd.f64	d0, d0, d6
 8018d30:	eea1 7b05 	vfma.f64	d7, d1, d5
 8018d34:	ee25 5b08 	vmul.f64	d5, d5, d8
 8018d38:	eea5 7b00 	vfma.f64	d7, d5, d0
 8018d3c:	eea2 7b04 	vfma.f64	d7, d2, d4
 8018d40:	ee33 0b07 	vadd.f64	d0, d3, d7
 8018d44:	ecbd 8b02 	vpop	{d8}
 8018d48:	bcf0      	pop	{r4, r5, r6, r7}
 8018d4a:	4770      	bx	lr
 8018d4c:	f1a2 0410 	sub.w	r4, r2, #16
 8018d50:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 8018d54:	428c      	cmp	r4, r1
 8018d56:	d923      	bls.n	8018da0 <log+0x130>
 8018d58:	18d9      	adds	r1, r3, r3
 8018d5a:	eb40 0400 	adc.w	r4, r0, r0
 8018d5e:	4321      	orrs	r1, r4
 8018d60:	d105      	bne.n	8018d6e <log+0xfe>
 8018d62:	ecbd 8b02 	vpop	{d8}
 8018d66:	2001      	movs	r0, #1
 8018d68:	bcf0      	pop	{r4, r5, r6, r7}
 8018d6a:	f000 b885 	b.w	8018e78 <__math_divzero>
 8018d6e:	4939      	ldr	r1, [pc, #228]	@ (8018e54 <log+0x1e4>)
 8018d70:	4288      	cmp	r0, r1
 8018d72:	bf08      	it	eq
 8018d74:	2b00      	cmpeq	r3, #0
 8018d76:	d0e5      	beq.n	8018d44 <log+0xd4>
 8018d78:	0413      	lsls	r3, r2, #16
 8018d7a:	d403      	bmi.n	8018d84 <log+0x114>
 8018d7c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8018d80:	4393      	bics	r3, r2
 8018d82:	d104      	bne.n	8018d8e <log+0x11e>
 8018d84:	ecbd 8b02 	vpop	{d8}
 8018d88:	bcf0      	pop	{r4, r5, r6, r7}
 8018d8a:	f000 b88d 	b.w	8018ea8 <__math_invalid>
 8018d8e:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8018e38 <log+0x1c8>
 8018d92:	ee20 7b07 	vmul.f64	d7, d0, d7
 8018d96:	ec53 2b17 	vmov	r2, r3, d7
 8018d9a:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 8018d9e:	4613      	mov	r3, r2
 8018da0:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 8018da4:	492a      	ldr	r1, [pc, #168]	@ (8018e50 <log+0x1e0>)
 8018da6:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 8018daa:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 8018dae:	f3c2 3446 	ubfx	r4, r2, #13, #7
 8018db2:	0d15      	lsrs	r5, r2, #20
 8018db4:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 8018db8:	052d      	lsls	r5, r5, #20
 8018dba:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 8018dbe:	1e1e      	subs	r6, r3, #0
 8018dc0:	1b47      	subs	r7, r0, r5
 8018dc2:	ec47 6b16 	vmov	d6, r6, r7
 8018dc6:	1512      	asrs	r2, r2, #20
 8018dc8:	eea7 5b06 	vfma.f64	d5, d7, d6
 8018dcc:	ee07 2a90 	vmov	s15, r2
 8018dd0:	ee25 2b05 	vmul.f64	d2, d5, d5
 8018dd4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8018dd8:	ed91 4b00 	vldr	d4, [r1]
 8018ddc:	ee25 1b02 	vmul.f64	d1, d5, d2
 8018de0:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 8018de4:	eea4 7b06 	vfma.f64	d7, d4, d6
 8018de8:	ee35 4b07 	vadd.f64	d4, d5, d7
 8018dec:	ee37 0b44 	vsub.f64	d0, d7, d4
 8018df0:	ed91 7b02 	vldr	d7, [r1, #8]
 8018df4:	ee30 0b05 	vadd.f64	d0, d0, d5
 8018df8:	eea7 0b06 	vfma.f64	d0, d7, d6
 8018dfc:	ed91 7b04 	vldr	d7, [r1, #16]
 8018e00:	ed91 6b08 	vldr	d6, [r1, #32]
 8018e04:	eea7 0b02 	vfma.f64	d0, d7, d2
 8018e08:	ed91 7b06 	vldr	d7, [r1, #24]
 8018e0c:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 8018e10:	eea6 7b05 	vfma.f64	d7, d6, d5
 8018e14:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8018e18:	eea3 6b05 	vfma.f64	d6, d3, d5
 8018e1c:	eea6 7b02 	vfma.f64	d7, d6, d2
 8018e20:	eea1 0b07 	vfma.f64	d0, d1, d7
 8018e24:	ee30 0b04 	vadd.f64	d0, d0, d4
 8018e28:	e78c      	b.n	8018d44 <log+0xd4>
 8018e2a:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8018e40 <log+0x1d0>
 8018e2e:	e789      	b.n	8018d44 <log+0xd4>
 8018e30:	00000000 	.word	0x00000000
 8018e34:	41a00000 	.word	0x41a00000
 8018e38:	00000000 	.word	0x00000000
 8018e3c:	43300000 	.word	0x43300000
	...
 8018e48:	000308ff 	.word	0x000308ff
 8018e4c:	3ff00000 	.word	0x3ff00000
 8018e50:	080193e0 	.word	0x080193e0
 8018e54:	7ff00000 	.word	0x7ff00000

08018e58 <with_errno>:
 8018e58:	b510      	push	{r4, lr}
 8018e5a:	ed2d 8b02 	vpush	{d8}
 8018e5e:	eeb0 8b40 	vmov.f64	d8, d0
 8018e62:	4604      	mov	r4, r0
 8018e64:	f7fe f884 	bl	8016f70 <__errno>
 8018e68:	eeb0 0b48 	vmov.f64	d0, d8
 8018e6c:	ecbd 8b02 	vpop	{d8}
 8018e70:	6004      	str	r4, [r0, #0]
 8018e72:	bd10      	pop	{r4, pc}
 8018e74:	0000      	movs	r0, r0
	...

08018e78 <__math_divzero>:
 8018e78:	b082      	sub	sp, #8
 8018e7a:	2800      	cmp	r0, #0
 8018e7c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8018e80:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8018e84:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8018e88:	ed8d 7b00 	vstr	d7, [sp]
 8018e8c:	ed9d 0b00 	vldr	d0, [sp]
 8018e90:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8018ea0 <__math_divzero+0x28>
 8018e94:	2022      	movs	r0, #34	@ 0x22
 8018e96:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8018e9a:	b002      	add	sp, #8
 8018e9c:	f7ff bfdc 	b.w	8018e58 <with_errno>
	...

08018ea8 <__math_invalid>:
 8018ea8:	eeb0 7b40 	vmov.f64	d7, d0
 8018eac:	eeb4 7b47 	vcmp.f64	d7, d7
 8018eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018eb4:	ee30 6b40 	vsub.f64	d6, d0, d0
 8018eb8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8018ebc:	d602      	bvs.n	8018ec4 <__math_invalid+0x1c>
 8018ebe:	2021      	movs	r0, #33	@ 0x21
 8018ec0:	f7ff bfca 	b.w	8018e58 <with_errno>
 8018ec4:	4770      	bx	lr
	...

08018ec8 <_init>:
 8018ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018eca:	bf00      	nop
 8018ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018ece:	bc08      	pop	{r3}
 8018ed0:	469e      	mov	lr, r3
 8018ed2:	4770      	bx	lr

08018ed4 <_fini>:
 8018ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ed6:	bf00      	nop
 8018ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018eda:	bc08      	pop	{r3}
 8018edc:	469e      	mov	lr, r3
 8018ede:	4770      	bx	lr
